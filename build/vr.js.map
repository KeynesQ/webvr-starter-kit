{"version":3,"sources":["webpack:///vr.js","webpack:///webpack/bootstrap 7ffd0cf75965f65b640a","webpack:///./src/entry.js","webpack:///./src/vr.js","webpack:///./src/css/style.css?21aa","webpack:///./src/css/style.css","webpack:///./~/ismobilejs/isMobile.js","webpack:///./~/style-loader/addStyles.js","webpack:///./src/materials.js","webpack:///./src/vr-object.js","webpack:///./src/objects/empty.js","webpack:///./src/objects ^\\.\\/.*$","webpack:///./bower_components/nosleep/NoSleep.js","webpack:///./src/objects/box.js","webpack:///./src/objects/cylinder.js","webpack:///./src/objects/floor.js","webpack:///./src/objects/grid.js","webpack:///./src/objects/image.js","webpack:///./src/objects/panorama.js","webpack:///./src/objects/sky.js","webpack:///./src/objects/sound.js","webpack:///./src/objects/sphere.js","webpack:///./src/objects/text.js","webpack:///./src/objects/torus.js","webpack:///./src/objects/video.js","webpack:///./bower_components/DeviceOrientationControls/index.js","webpack:///./bower_components/OrbitControls/index.js","webpack:///./bower_components/AugmentedConsole/index.js","webpack:///./src/lib/CanvasRenderer.js","webpack:///./src/lib/Projector.js","webpack:///./src/lib/VRStereoEffect.js","webpack:///./src/lib/VRControls.js","webpack:///./~/event-emitter/index.js","webpack:///./~/css-loader/lib/css-base.js","webpack:///./~/three/build/three.js","webpack:///./src/utils/urlregex.js","webpack:///./~/lodash.foreach/index.js","webpack:///./~/lodash.assign/index.js","webpack:///./src/lib/ThreeAudio.js","webpack:///./bower_components/SkyShader/index.js","webpack:///./~/event-emitter/~/d/index.js","webpack:///./~/event-emitter/~/es5-ext/object/valid-callable.js","webpack:///./~/lodash.foreach/~/lodash._arrayeach/index.js","webpack:///./~/lodash.foreach/~/lodash._baseeach/index.js","webpack:///./~/lodash.foreach/~/lodash._bindcallback/index.js","webpack:///./~/lodash.foreach/~/lodash.isarray/index.js","webpack:///./~/lodash.assign/~/lodash._baseassign/index.js","webpack:///./~/event-emitter/~/es5-ext/object/normalize-options.js","webpack:///./~/event-emitter/~/es5-ext/object/is-callable.js","webpack:///./~/lodash.assign/~/lodash._createassigner/index.js","webpack:///./~/event-emitter/~/es5-ext/object/assign/index.js","webpack:///./~/event-emitter/~/es5-ext/string/#/contains/index.js","webpack:///./~/event-emitter/~/es5-ext/object/assign/is-implemented.js","webpack:///./~/event-emitter/~/es5-ext/object/assign/shim.js","webpack:///./~/event-emitter/~/es5-ext/string/#/contains/is-implemented.js","webpack:///./~/event-emitter/~/es5-ext/string/#/contains/shim.js","webpack:///./~/lodash.assign/~/lodash._baseassign/~/lodash._basecopy/index.js","webpack:///./~/lodash.assign/~/lodash.keys/~/lodash._getnative/index.js","webpack:///./~/lodash.assign/~/lodash.keys/~/lodash.isarguments/index.js","webpack:///./~/lodash.assign/~/lodash._createassigner/~/lodash._isiterateecall/index.js","webpack:///./~/lodash.assign/~/lodash._createassigner/~/lodash.restparam/index.js","webpack:///./~/event-emitter/~/es5-ext/object/valid-value.js","webpack:///./~/event-emitter/~/es5-ext/object/keys/index.js","webpack:///./~/event-emitter/~/es5-ext/object/keys/is-implemented.js","webpack:///./~/event-emitter/~/es5-ext/object/keys/shim.js","webpack:///./~/lodash.foreach/~/lodash._baseeach/~/lodash.keys/index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","i","_m","args","slice","fn","a","b","apply","concat","initRequirements","VR","initialize","init","noSleep","NoSleep","window","addEventListener","resize","isMobile","any","disableOrientation","THREE","start","isFullscreen","document","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","fullScreenError","vrMode","vrEffect","exit","pruneObject","object","raycastable","indexOf","splice","vrObjects","VRObject","findObject","children","forEach","raycast","intersect","intersects","parent","vrObject","prune","raycaster","ray","origin","setFromMatrixPosition","camera","matrixWorld","direction","set","unproject","sub","normalize","intersectObjects","length","scene","push","Mesh","target","emit","render","Date","now","lastTick","waitRenderInative","delta","Math","min","vrControls","update","animationCallbacks","cb","updateMatrixWorld","mouseControls","renderLoop","going","requestAnimationFrame","stop","visibilityChange","hidden","mozHidden","msHidden","webkitHidden","audioListener","volume","width","height","innerWidth","innerHeight","aspect","updateProjectionMatrix","renderer","setSize","initShake","lastX","lastY","lastZ","lastTime","threshold","evt","time","diff","dist","current","accelerationIncludingGravity","deltaX","deltaY","deltaZ","undefined","abs","x","y","z","sqrt","navigator","vibrate","orientationPossible","initScene","attachCanvas","body","insertBefore","domElement","firstChild","isSupportWebgl","WebGLRenderer","antialias","CanvasRenderer","setClearColor","setPixelRatio","devicePixelRatio","event","Scene","bodyWrapper","name","moveTo","cameraWrapper","PerspectiveCamera","NEAR","FAR","setFocalLength","add","AudioListener","VRControls","freeze","orientationEnabled","VRStereoEffect","near","far","screen","enabled","reset","lockOrientation","mozLockOrientation","orientation","lock","exitVR","position","rotation","isWebview","mode","hmd","autoRotateTimer","OrbitControls","target0","copy","enableZoom","enablePan","autoRotate","autoRotateSpeed","enableDamping","dampingFactor","clearTimeout","setTimeout","dLight","DirectionalLight","castShadow","shadowCameraVisible","shadowMapWidth","shadowMapHeight","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraFar","shadowCameraNear","shadowDarkness","AmbientLight","canvas","zeroSensor","Raycaster","ImageUtils","crossOrigin","eventEmitter","materials","nop","requestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","bind","objectMethods","createElement","gl","experimental","getContext","Boolean","animate","callback","end","requestVR","requestFullScreen","enableOrientation","controlMode","times","n","method","key","creator","options","obj","prototype","this","hasOwnProperty","Object","defineProperty","get","content","locals","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","global","apple_phone","apple_ipod","apple_tablet","android_phone","android_tablet","amazon_phone","amazon_tablet","windows_phone","windows_tablet","other_blackberry","other_blackberry_10","other_opera","other_chrome","other_firefox","seven_inch","RegExp","match","regex","userAgent","test","IsMobileClass","ua","tmp","split","apple","phone","ipod","tablet","device","amazon","android","windows","other","blackberry","blackberry10","opera","firefox","chrome","instantiate","IM","Class","addStylesToDom","styles","item","domStyle","stylesInDom","refs","j","parts","addStyle","listToStyles","list","newStyles","css","media","sourceMap","part","insertStyleElement","styleElement","head","getHeadElement","lastStyleElementInsertedAtTop","styleElementsInsertedAtTop","insertAt","nextSibling","appendChild","Error","removeStyleElement","parentNode","removeChild","idx","createStyleElement","type","createLinkElement","linkElement","rel","remove","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","URL","createObjectURL","revokeObjectURL","Blob","btoa","updateLink","href","applyToTag","newObj","index","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","setAttribute","unescape","encodeURIComponent","JSON","stringify","blob","oldSrc","memoize","memo","arguments","isOldIE","toLowerCase","getElementsByTagName","newList","mayRemove","textStore","replacement","filter","join","imageTexture","src","mapping","imageLoaded","scale","ctx","iOS","image","naturalWidth","naturalHeight","max","floor","drawImage","texture","needsUpdate","parse","isDataUri","dataUri","exec","urlRegex","images","location","hostname","port","Texture","material","threeTexture","textures","opts","Material","materialTypes","MeshLambertMaterial","map","assign","ambient","color","emissive","specularMap","normalMap","alphaMap","envMap","lightMap","val","assetPath","lambert","basic","MeshBasicMaterial","phong","MeshPhongMaterial","normal","MeshNormalMaterial","depth","MeshDepthMaterial","textureFiles","asphalt","repeat","brick-tiles","bricks","checkerboard","grass","metal-floor","shininess","metal","shading","SmoothShading","stone","tiles","weathered-wood","wood","standard","library","props","textureFactory","file","imagePath","url","Vector2","wrapS","wrapT","RepeatWrapping","materialDef","distance","geometry","scratchVector1","worldToLocal","boundingBox","distanceToPoint","scratchVector2","distanceTo","frustum","cameraViewProjectionMatrix","self","isNear","wasNear","NEAR_DISTANCE","receiveShadow","computeBoundingBox","allObjects","parseFloat","setMaterial","Color","prop","visible","Frustum","Matrix4","matrixWorldInverse","getInverse","multiplyMatrices","projectionMatrix","setFromMatrix","intersectsObject","xAxis","Vector3","yAxis","zAxis","WeakMap","hide","show","isNaN","moveX","translateX","moveY","translateY","moveUp","moveDown","moveZ","translateZ","rotateX","angle","rotateOnAxis","rotateY","rotateZ","setScale","e","count","Quaternion","offset","Object3D","webpackContext","req","webpackContextResolve","./box","./box.js","./cylinder","./cylinder.js","./empty","./empty.js","./floor","./floor.js","./grid","./grid.js","./image","./image.js","./panorama","./panorama.js","./sky","./sky.js","./sound","./sound.js","./sphere","./sphere.js","./text","./text.js","./torus","./torus.js","./video","./video.js","keys","resolve","root","addSourceToVideo","element","dataURI","source","Android","WebM","MP4","noSleepTimer","noSleepVideo","enable","duration","disable","setInterval","play","clearInterval","pause","BoxGeometry","mesh","cylinder","CylinderGeometry","radiusTop","radiusBottom","radiusSegments","heightSegments","openEnded","CircleGeometry","radius","segments","applyMatrix","makeRotationX","PI","size","step","GridHelper","setColors","colorCenterLine","color1","colorGrid","color2","tex","UVMapping","t","makeScale","PlaneBufferGeometry","side","DoubleSide","transparent","loadTexture","path","_parent","texturePlaceholder","overdraw","Image","onload","dispatchEvent","scaleX","scaleY","offsetX","offsetY","phiStart","phiLength","thetaStart","thetaLength","SphereGeometry","makeRotationY","mapRender","isListener","context","fillStyle","fillRect","preview","pretex","mapKey","cubeSrc","left","right","down","top","front","back","getObjectByName","arrMaterial","MultiMaterial","data","stereo","userData","TAU","HALF_PI","params","mod","sinTheta","cosTheta","phi","sinPhi","cosPhi","sin","altitude","cos","azimuth","sunPosition","light","intensity","exp","multiplyScalar","Sky","setOptions","param","uniforms","value","Array","isArray","setAltitude","setAzimuth","listener","Audio","load","widthSegments","fontSizeRegex","newLineRegex","spaceRegex","log2","log","nextPowerOfTwo","pow","ceil","Line","word","spaceWidth","measureText","totalWidth","wordsWidth","words","wrap","text","letter","line","inherit","fontSize","padding","lineHeight","measure","lines","getComputedStyle","resolution","wrapped","font","String","trim","charAt","reduce","previous","mipmap","textAlign","textBaseline","space","fillText","textWidth","textHeight","container","wordWidth","minFilter","LinearMipMapLinearFilter","generateMipmaps","TorusGeometry","tube","radialSegments","tubularSegments","arc","video","extRegex","isPowerOfTwo","num","loadedMetadata","newAspectRatio","vid","videoWidth","videoHeight","sphere","aspectRatio","LinearFilter","playing","setSource","sources","ext","hostΩ","canPlayType","loop","VideoTexture","format","RGBFormat","readyState","vol","muted","currentTime","error","code","MediaError","MEDIA_ERR_DECODE","touchStart","removeEventListener","DeviceOrientationControls","scope","reorder","deviceOrientation","screenOrientation","alpha","alphaOffsetAngle","onDeviceOrientationChangeEvent","onScreenOrientationChangeEvent","setObjectQuaternion","zee","euler","Euler","q0","q1","quaternion","beta","gamma","orient","setFromEuler","multiply","setFromAxisAngle","connect","disconnect","degToRad","updateAlphaOffsetAngle","dispose","getAutoRotationAngle","getZoomScale","zoomSpeed","rotateLeft","sphericalDelta","theta","rotateUp","dollyIn","dollyScale","OrthographicCamera","zoom","minZoom","maxZoom","zoomChanged","dollyOut","handleMouseDownRotate","rotateStart","clientX","clientY","handleMouseDownDolly","dollyStart","handleMouseDownPan","panStart","handleMouseMoveRotate","rotateEnd","rotateDelta","subVectors","clientWidth","rotateSpeed","clientHeight","handleMouseMoveDolly","dollyEnd","dollyDelta","handleMouseMovePan","panEnd","panDelta","pan","handleMouseUp","handleMouseWheel","handleKeyDown","keyCode","UP","keyPanSpeed","BOTTOM","LEFT","RIGHT","handleTouchStartRotate","touches","pageX","pageY","handleTouchStartDolly","dx","dy","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleTouchEnd","onMouseDown","preventDefault","button","mouseButtons","ORBIT","enableRotate","state","STATE","ROTATE","ZOOM","DOLLY","PAN","NONE","onMouseMove","onMouseUp","startEvent","endEvent","onMouseWheel","stopPropagation","onKeyDown","enableKeys","onTouchStart","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","onTouchMove","onTouchEnd","onContextMenu","minDistance","maxDistance","Infinity","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","MOUSE","MIDDLE","clone","position0","zoom0","getPolarAngle","spherical","getAzimuthalAngle","changeEvent","quat","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","applyQuaternion","setFromVector3","makeSafe","panOffset","setFromSpherical","lookAt","distanceToSquared","EPS","dot","Spherical","panLeft","v","objectMatrix","setFromMatrixColumn","panUp","targetDistance","tan","fov","matrix","bottom","create","EventDispatcher","constructor","defineProperties","center","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","addSupportedType","supportedTypes","_oldConsole","console","elements","Matrix3","Vector4","w","order","Ray","Ray origin","Ray direction","special","SpriteCanvasMaterial","parameters","program","setValues","calculateLights","_ambientLight","setRGB","_directionalLights","_pointLights","l","ll","_lights","lightColor","PointLight","calculateLight","_lightColor","lightPosition","_vector3","amount","renderSprite","v1","setOpacity","opacity","setBlending","blending","_canvasWidthHalf","_canvasHeightHalf","_elemBox","SpriteMaterial","pattern","_patterns","version","textureToPattern","setFillStyle","bitmap","ox","oy","sx","sy","cx","cy","_context","save","translate","rotate","restore","getStyle","setStrokeStyle","renderLine","v2","beginPath","positionScreen","lineTo","LineBasicMaterial","setLineWidth","linewidth","setLineCap","linecap","setLineJoin","linejoin","vertexColors","VertexColors","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","expandByScalar","LineDashedMaterial","setLineDash","dashSize","gapSize","renderFace3","v3","uv1","uv2","uv3","_this","info","vertices","faces","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","drawTriangle","_diffuseColor","_emissiveColor","FaceColors","_color","_centroid","positionWorld","divideScalar","normalModel","wireframe","strokePath","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","fillPath","_uvs","uvs","patternPath","SphericalReflectionMapping","_normal","vertexNormalsModel","applyMatrix3","_normalViewMatrix","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","addScalar","x0","y0","x1","y1","x2","y2","closePath","fill","CompressedTexture","DataTexture","complete","setTransform","repeatX","repeatY","createPattern","onUpdate","u0","v0","u1","u2","d","f","det","idet","transform","expand","pixels","_contextGlobalAlpha","globalAlpha","_contextGlobalCompositeOperation","NormalBlending","globalCompositeOperation","AdditiveBlending","SubtractiveBlending","MultiplyBlending","_contextLineWidth","lineWidth","_contextLineCap","lineCap","_contextLineJoin","lineJoin","_contextStrokeStyle","strokeStyle","_contextFillStyle","_contextLineDash","_renderData","_elements","_camera","_v1","_v2","_v3","_projector","Projector","_canvas","_canvasWidth","_canvasHeight","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_pixelRatio","_clearColor","_clearAlpha","RenderableVertex","_clipBox","Box2","_clearBox","autoClear","sortObjects","sortElements","supportsVertexTextures","setFaceCulling","getContextAttributes","getPixelRatio","updateStyle","style","setViewport","setScissor","setScissorTest","setClearColorHex","hex","getClearColor","getClearAlpha","getMaxAnisotropy","clear","isEmpty","clearRect","r","g","makeEmpty","clearColor","clearDepth","clearStencil","Camera","projectScene","lights","getNormalMatrix","el","RenderableSprite","RenderableLine","setFromPoints","intersectsBox","RenderableFace","union","RenderableObject","renderOrder","vertexNormalsLength","vertex","getNextObjectInPool","_objectCount","_objectPoolLength","_objectPool","getNextVertexInPool","_vertexCount","_vertexPoolLength","_vertexPool","getNextFaceInPool","_faceCount","_facePoolLength","face","_facePool","getNextLineInPool","_lineCount","_linePoolLength","_linePool","getNextSpriteInPool","_spriteCount","_spritePoolLength","sprite","_spritePool","painterSort","clipLine","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","lerp","_object","_vertex","_face","_line","_sprite","_modelMatrix","objects","_vector4","Box3","_boundingBox","_points3","_viewMatrix","_viewProjectionMatrix","_modelViewProjectionMatrix","_normalMatrix","_frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","project","unprojectVector","pickingRay","RenderList","setObject","normalMatrix","normals","projectVertex","applyMatrix4","invW","pushVertex","pushNormal","pushUv","checkTriangleVisibility","checkBackfaceCulling","pushLine","pushTriangle","fromArray","uv","renderList","addObject","applyProjection","autoUpdate","traverseVisible","Light","frustumCulled","Sprite","intersectsSprite","sort","o","ol","BufferGeometry","attributes","groups","positions","array","indices","group","Geometry","faceVertexUvs","isFaceMaterial","objectMaterials","vl","morphTargets","morphInfluences","morphTargetInfluences","tl","influence","targetVertex","fl","materialIndex","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","nl","vertexUvs","u","LineSegments","colors","fullScreenElement","perspectiveMatrixFromVRFieldOfView","zNear","zFar","outMat","out","upTan","upDegrees","RADIANS","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","h","hmdDevice","hmdWidth","hmdHeight","offsetWidth","offsetHeight","updateProjection","fovLeft","fovRight","leftEyeParams","rightEyeParams","leftEyeRect","rightEyeRect","leftEyeViewport","rightEyeViewport","getEyeParameters","renderRect","currentFieldOfView","setFieldOfView","eyeOffsetLeft","eyeTranslation","eyeOffsetRight","leftRenderRect","rightRenderRect","getRecommendedEyeRenderRect","getCurrentEyeFieldOfView","getRecommendedEyeFieldOfView","getEyeTranslation","cameraLeft","cameraRight","gotVRDevices","devices","HMDVRDevice","hardwareUnitId","setTimewarp","fullScreenParam","vrDisplay","poll","pollTimeout","scan","onFullscreenChange","inWebview","vrPreview","separation","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","getVRDevices","then","mozGetVRDevices","bool","leftScene","rightScene","renderTarget","forceClear","WebGLRenderTarget","decompose","drawingBufferWidth","setRenderTarget","enableScissorTest","PositionSensorVRDevice","sensorDevice","resetSensor","deviceOrientationChange","deviceControls","vrState","zeroAngle","vrBrowser","getState","hasOrientation","hasPosition","on","once","off","methods","descriptors","base","callable","Function","descriptor","configurable","enumerable","writable","__ee__","__eeOnceListener__","listeners","candidate","toString","result","mediaQuery","alreadyImportedModules","factory","magFilter","anisotropy","encoding","TextureIdCount","uuid","generateUUID","sourceFile","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","ClampToEdgeWrapping","RGBAFormat","UnsignedByteType","premultiplyAlpha","flipY","unpackAlignment","LinearEncoding","scissor","scissorTest","viewport","depthBuffer","stencilBuffer","depthTexture","WebGLRenderTargetCube","activeCubeFace","activeMipMapLevel","_x","_y","_z","_w","Float32Array","CubeTexture","CubeReflectionMapping","UniformContainer","seq","flatten","nBlocks","blockSize","firstElem","arrayCacheF32","toArray","allocTexUnits","arrayCacheI32","Int32Array","allocTextureUnit","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setTexture2D","emptyTexture","setValueT6","setTextureCube","emptyCubeTexture","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","getSingularSetter","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","units","setValueT6a","getPureArraySetter","SingleUniform","activeInfo","setValue","PureArrayUniform","StructuredUniform","addUniform","uniformObject","parseUniform","pathLength","RePathPart","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","LensFlarePlugin","flares","Uint16Array","vertexBuffer","createBuffer","elementBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","tempTexture","createTexture","occlusionTexture","bindTexture","TEXTURE_2D","texImage2D","RGB","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","RGBA","shader","vertexShader","fragmentShader","createProgram","getAttribLocation","renderType","occlusionMap","screenPosition","createShader","FRAGMENT_SHADER","VERTEX_SHADER","prefix","getPrecision","shaderSource","compileShader","attachShader","linkProgram","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","useProgram","initAttributes","enableAttribute","disableUnusedAttributes","vertexAttribPointer","FLOAT","CULL_FACE","setDepthWrite","flare","containsPoint","activeTexture","TEXTURE0","TEXTURE1","copyTexImage2D","BLEND","DEPTH_TEST","drawElements","TRIANGLES","UNSIGNED_SHORT","customUpdateCallback","updateLensFlares","jl","lensFlares","blendEquation","blendSrc","blendDst","resetGLState","SpritePlugin","sprites","uvOffset","uvScale","modelViewMatrix","fogType","fogDensity","fogNear","fogFar","fogColor","alphaTest","createElementNS","painterSortStable","spritePosition","spriteRotation","spriteScale","oldFogType","sceneFogType","fog","isFog","isFogExp2","density","setDepthTest","depthTest","depthWrite","MaterialIdCount","NoColors","SrcAlphaFactor","OneMinusSrcAlphaFactor","AddEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","LessEqualDepth","clippingPlanes","clipShadows","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","_needsUpdate","count$1","ShaderMaterial","defines","clipping","skinning","morphNormals","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","depthPacking","BasicDepthPacking","displacementMap","displacementScale","displacementBias","Sphere","Plane","constant","p0","p1","p2","p3","p4","p5","planes","WebGLShadowMap","_renderer","_objects","capabilities","getDepthMaterial","isPointLight","lightPositionWorld","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","isBufferGeometry","morphAttributes","isGeometry","useSkinning","isSkinnedMesh","variantIndex","_MorphingFlag","_SkinningFlag","localClippingEnabled","keyA","keyB","materialsForVariant","_materialCache","cachedMaterial","renderSingleSided","renderReverseSided","lightPos","projectObject","shadowCamera","layers","mask","isMesh","isLine","isPoints","_renderList","_gl","_state","_projScreenMatrix","_lightShadows","shadows","_shadowMapSize","_maxShadowMapSize","maxTextureSize","_lookTarget","_lightPositionWorld","_NumberOfMaterialVariants","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","RGBADepthPacking","distanceShader","ShaderLib","distanceUniforms","UniformsUtils","depthMaterial","distanceMaterial","USE_SHADOWMAP","PCFShadowMap","faceCount","il","shadow","mapSize","vpWidth","vpHeight","pars","NearestFilter","isSpotLightShadow","shadowMap","shadowMatrix","vpDimensions","isMultiMaterial","k","kl","groupMaterial","renderBufferDirect","clearAlpha","_order","DefaultOrder","Layers","onRotationChange","onQuaternionChange","setFromQuaternion","Object3DIdCount","DefaultUp","onChange","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","onBeforeRender","count$2","Line3","Triangle","Face3","isVector3","isColor","aoMap","aoMapIntensity","combine","MultiplyOperation","reflectivity","refractionRatio","BufferAttribute","itemSize","normalized","TypeError","dynamic","updateRange","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Int32Attribute","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","setDynamic","GeometryIdCount","skinWeights","skinIndices","lineDistances","boundingSphere","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","count$3","DirectGeometry","uvs2","drawRange","random","drawMode","TrianglesDrawMode","updateMorphTargets","BoxBufferGeometry","depthSegments","calculateVertexCount","calculateIndexCount","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy","ix","vertexBufferOffset","uvBufferOffset","numberOfVertices","indexBufferOffset","addGroup","groupStart","vertexCount","indexCount","setIndex","addAttribute","width_half","height_half","segment_width","segment_height","offset2","focus","view","filmGauge","filmOffset","WebGLIndexedBufferRenderer","infoRender","setMode","UNSIGNED_INT","calls","renderInstances","extension","drawElementsInstancedANGLE","maxInstancedCount","WebGLBufferRenderer","drawArrays","isInterleavedBufferAttribute","drawArraysInstancedANGLE","WebGLLights","shadowBias","shadowRadius","shadowMapSize","coneCos","penumbraCos","decay","skyColor","groundColor","WebGLShader","string","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getEncodingComponents","sRGBEncoding","RGBEEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","GammaEncoding","getTexelDecodingFunction","functionName","components","getTexelEncodingFunction","getToneMappingFunction","toneMapping","toneMappingName","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","generateExtensions","rendererExtensions","chunks","envMapCubeUV","bumpMap","flatShading","logarithmicDepthBuffer","filterEmptyLine","generateDefines","fetchAttributeLocations","identifiers","ACTIVE_ATTRIBUTES","getActiveAttrib","replaceLightNums","replace","numDirLights","numSpotLights","numPointLights","numHemiLights","parseIncludes","include","ShaderChunk","unrollLoops","snippet","unroll","parseInt","WebGLProgram","__webglShader","shadowMapTypeDefine","shadowMapType","PCFSoftShadowMap","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","CubeRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","MixOperation","AddOperation","prefixVertex","prefixFragment","gammaFactorDefine","gammaFactor","customExtensions","customDefines","isRawShaderMaterial","maxBones","emissiveMap","roughnessMap","metalnessMap","useVertexTexture","doubleSided","flipSided","numClippingPlanes","shadowMapEnabled","sizeAttenuation","useFog","fogExp","physicallyCorrectLights","NoToneMapping","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","isShaderMaterial","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","bindAttribLocation","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","diagnostics","deleteShader","cachedUniforms","getUniforms","cachedAttributes","getAttributes","destroy","deleteProgram","programIdCount","usedTimes","WebGLPrograms","allocateBones","floatVertexTextures","skeleton","nVertexUniforms","maxVertexUniforms","nVertexMatrices","bones","getTextureEncodingFromMap","gammaOverrideLinear","isTexture","isWebGLRenderTarget","programs","shaderIDs","MeshStandardMaterial","MeshPhysicalMaterial","PointsMaterial","parameterNames","getParameters","nClipPlanes","shaderID","getMaxPrecision","currentRenderTarget","getCurrentRenderTarget","vertexTextures","gammaOutput","gammaInput","envMapMode","FlatShading","maxMorphTargets","maxMorphNormals","directional","point","spot","hemi","getProgramCode","acquireProgram","pl","programInfo","releaseProgram","pop","WebGLGeometries","properties","onGeometryDispose","buffergeometry","geometries","deleteAttribute","deleteAttributes","property","bufferproperty","memory","getAttributeBuffer","attribute","__webglBuffer","buffer","deleteBuffer","removeAttributeBuffer","_bufferGeometry","setFromObject","WebGLObjects","updateFromObject","updateAttribute","bufferType","attributeProperties","updateBuffer","usage","DYNAMIC_DRAW","bufferSubData","BYTES_PER_ELEMENT","subarray","getWireframeAttribute","TypeArray","WebGLTextures","paramThreeToGL","clampToMaxSize","maxSize","makePowerOfTwo","HTMLImageElement","HTMLCanvasElement","nearestPowerOfTwo","textureNeedsPowerOfTwo","filterFallback","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LINEAR","onTextureDispose","deallocateTexture","_infoMemory","onRenderTargetDispose","deallocateRenderTarget","textureProperties","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","renderTargetProperties","isWebGLRenderTargetCube","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","slot","__version","uploadTexture","TEXTURE_CUBE_MAP","pixelStorei","UNPACK_FLIP_Y_WEBGL","isCompressed","isCompressedTexture","isDataTexture","cubeImage","maxCubemapSize","isPowerOfTwoImage","glFormat","glType","setTextureParameters","getCompressedTextureFormats","compressedTexImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","generateMipmap","setTextureCubeDynamic","textureType","FloatType","HalfFloatType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","isDepthTexture","internalFormat","DEPTH_COMPONENT","_isWebGL2","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DepthStencilFormat","DEPTH_STENCIL","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthTexture","isCube","webglDepthTexture","DepthFormat","setupDepthRenderbuffer","createRenderbuffer","setupRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","webglTexture","WebGL2RenderingContext","WebGLProperties","delete","WebGLState","ColorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","setClear","equals","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","setTest","depthMask","setFunc","NeverDepth","NEVER","AlwaysDepth","ALWAYS","LessDepth","LESS","LEQUAL","EqualDepth","EQUAL","GreaterEqualDepth","GEQUAL","GreaterDepth","GREATER","NotEqualDepth","NOTEQUAL","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","stencil","setDepthFunc","setFlipSided","setCullFace","CullFaceBack","newAttributes","enabledAttributes","enableVertexAttribArray","attributeDivisors","vertexAttribDivisorANGLE","enableAttributeAndDivisor","meshPerAttribute","disableVertexAttribArray","compressedTextureFormats","formats","getParameter","COMPRESSED_TEXTURE_FORMATS","NoBlending","currentBlending","currentPremultipledAlpha","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE","blendFunc","SRC_ALPHA","ZERO","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","SRC_COLOR","CustomBlending","currentBlendEquation","currentBlendEquationAlpha","currentBlendSrc","currentBlendDst","currentBlendSrcAlpha","currentBlendDstAlpha","setColorWrite","colorBuffer","setStencilTest","setStencilWrite","stencilWrite","setStencilFunc","setStencilOp","currentFlipSided","frontFace","CW","CCW","cullFace","CullFaceNone","currentCullFace","BACK","CullFaceFront","FRONT","FRONT_AND_BACK","currentLineWidth","setPolygonOffset","factor","POLYGON_OFFSET_FILL","currentPolygonOffsetFactor","currentPolygonOffsetUnits","getScissorTest","currentScissorTest","SCISSOR_TEST","webglSlot","maxTextures","currentTextureSlot","webglType","boundTexture","currentBoundTextures","emptyTextures","currentScissor","currentViewport","maxVertexAttributes","MAX_VERTEX_ATTRIBS","MAX_TEXTURE_IMAGE_UNITS","buffers","WebGLCapabilities","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getShaderPrecisionFormat","HIGH_FLOAT","MEDIUM_FLOAT","maxPrecision","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","floatFragmentTextures","WebGLExtensions","getExtension","WebGLClipping","resetGlobalState","uniform","globalState","numGlobalPlanes","numPlanes","projectPlanes","dstOffset","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","viewNormalMatrix","i4","plane","renderingShadows","enableLocalClipping","beginShadows","endShadows","setState","cache","fromCache","nGlobal","lGlobal","clippingState","getTargetPixelRatio","_currentRenderTarget","glClearColor","_premultipliedAlpha","setDefaultGLState","_currentScissor","_scissor","_currentViewport","_viewport","_currentProgram","_currentCamera","_currentGeometryProgram","_currentMaterialId","onContextLost","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReference","programCache","setupVertexAttributes","startIndex","isInstancedBufferGeometry","geometryAttributes","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","SHORT","INT","BYTE","stride","isInstancedInterleavedBuffer","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","absNumericalSort","reversePainterSortStable","pushRenderItem","transparentObjects","transparentObjectsLastIndex","opaqueObjects","opaqueObjectsLastIndex","renderItem","isObjectViewable","computeBoundingSphere","_sphere","isSphereViewable","isSpriteViewable","intersectsSphere","_clipping","negRad","isLight","isSprite","isLensFlare","isImmediateRenderObject","renderObjects","overrideMaterial","setProgram","renderBufferImmediate","initMaterial","materialProperties","programChange","numSupportedMorphTargets","numSupportedMorphNormals","lightsHash","hash","ambientLightColor","directionalLights","spotLights","pointLights","hemisphereLights","directionalShadowMap","directionalShadowMatrix","spotShadowMap","spotShadowMatrix","pointShadowMap","pointShadowMatrix","progUniforms","uniformsList","seqWithValue","dynamicUniforms","splitDynamic","_usedTextureUnits","_clippingEnabled","_localClippingEnabled","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","LN2","isMeshPhongMaterial","isMeshStandardMaterial","uCamPos","cameraPosition","isMeshLambertMaterial","isMeshBasicMaterial","setOptional","markUniformsLightsNeedsUpdate","refreshUniformsFog","isMeshDepthMaterial","refreshUniformsCommon","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","refreshUniformsLambert","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshNormalMaterial","upload","dynUniforms","evalDynamic","diffuse","emissiveIntensity","uvScaleMap","offsetRepeat","flipEnvMap","isCubeTexture","totalSize","lightMapIntensity","specular","bumpScale","normalScale","roughness","metalness","envMapIntensity","clearCoat","clearCoatRoughness","setupShadows","lightShadowsLength","setupLights","directionalLength","pointLength","spotLength","hemiLength","isAmbientLight","isDirectionalLight","lightCache","transformDirection","bias","isSpotLight","penumbra","identity","setPosition","isHemisphereLight","textureUnit","REPEAT","MirroredRepeatWrapping","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LinearMipMapNearestFilter","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UnsignedShort4444Type","UNSIGNED_SHORT_4_4_4_4","UnsignedShort5551Type","UNSIGNED_SHORT_5_5_5_1","UnsignedShort565Type","UNSIGNED_SHORT_5_6_5","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","HALF_FLOAT_OES","AlphaFormat","ALPHA","LuminanceFormat","LUMINANCE","LuminanceAlphaFormat","LUMINANCE_ALPHA","SubtractEquation","FUNC_SUBTRACT","ReverseSubtractEquation","FUNC_REVERSE_SUBTRACT","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","DstAlphaFactor","DST_ALPHA","OneMinusDstAlphaFactor","ONE_MINUS_DST_ALPHA","DstColorFactor","DST_COLOR","OneMinusDstColorFactor","ONE_MINUS_DST_COLOR","SrcAlphaSaturateFactor","SRC_ALPHA_SATURATE","RGB_S3TC_DXT1_Format","COMPRESSED_RGB_S3TC_DXT1_EXT","RGBA_S3TC_DXT1_Format","COMPRESSED_RGBA_S3TC_DXT1_EXT","RGBA_S3TC_DXT3_Format","COMPRESSED_RGBA_S3TC_DXT3_EXT","RGBA_S3TC_DXT5_Format","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1_Format","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","RGB_PVRTC_2BPPV1_Format","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","RGBA_PVRTC_4BPPV1_Format","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","RGBA_PVRTC_2BPPV1_Format","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1_Format","COMPRESSED_RGB_ETC1_WEBGL","MinEquation","MIN_EXT","MaxEquation","MAX_EXT","UnsignedInt248Type","UNSIGNED_INT_24_8_WEBGL","_alpha","_depth","_stencil","_antialias","_preserveDrawingBuffer","preserveDrawingBuffer","autoClearColor","autoClearDepth","autoClearStencil","toneMappingExposure","toneMappingWhitePoint","_currentFramebuffer","_currentScissorTest","_width","_height","_scissorTest","_infoRender","points","rangeMin","rangeMax","MaxIndex","bufferRenderer","indexedBufferRenderer","backgroundCamera","backgroundCamera2","backgroundPlaneMesh","backgroundBoxShader","backgroundBoxMesh","spritePlugin","lensFlarePlugin","forceContextLoss","loseContext","getSize","boolean","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","nx","ny","nz","uvArray","colorArray","updateBuffers","geometryProgram","activeInfluences","removeAttribute","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","LINES","TriangleStripDrawMode","TRIANGLE_STRIP","TriangleFanDrawMode","TRIANGLE_FAN","isLineSegments","LINE_STRIP","POINTS","isCamera","background","extractRotation","frontFaceDirection","FrontFaceDirectionCW","warned","setTexture","readRenderTargetPixels","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","FogExp2","Fog","LensFlare","LOD","levels","Skeleton","boneInverses","identityMatrix","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","Bone","skin","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","bone","gbone","pos","rotq","scl","normalizeSkinWeights","Points","Group","HAVE_CURRENT_DATA","CanvasTexture","DepthTexture","WireframeGeometry","sortFunction","edge","numEdges","edges","coords","index2","getX","getY","getZ","numTris","index1","ParametricGeometry","func","slices","stacks","verts","sliceCount","uva","uvb","uvc","uvd","computeFaceNormals","computeVertexNormals","PolyhedronGeometry","detail","prepare","that","inclination","make","centroid","azi","correctUV","subdivide","cols","aj","bj","rows","atan2","mergeVertices","TetrahedronGeometry","OctahedronGeometry","IcosahedronGeometry","DodecahedronGeometry","TubeGeometry","closed","taper","vert","NoTaper","tangent","binormal","ip","jp","grid","numpoints","pos2","frames","FrenetFrames","tangents","binormals","getPointAt","TorusKnotBufferGeometry","q","calculatePositionOnCurve","cu","su","quOverP","cs","indexOffset","P1","P2","B","T","N","addVectors","crossVectors","setXYZ","setXY","setX","TorusKnotGeometry","heightScale","fromBufferGeometry","TorusBufferGeometry","ExtrudeGeometry","shapes","addShapeList","TextGeometry","isFont","generateShapes","curveSegments","bevelThickness","bevelSize","bevelEnabled","SphereBufferGeometry","thetaEnd","verticesRow","px","py","pz","v4","RingBufferGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","segment","radiusStep","thetaSegmentLevel","RingGeometry","PlaneGeometry","LatheBufferGeometry","clamp","inverseSegments","n1","n2","LatheGeometry","ShapeGeometry","EdgesGeometry","thresholdAngle","geometry2","thresholdDot","DEG2RAD","vert1","vert2","face1","face2","CylinderBufferGeometry","nbCap","generateTorso","slope","indexRow","halfHeight","indexArray","i1","i2","i3","generateCap","centerIndexStart","centerIndexEnd","sign","ConeGeometry","ConeBufferGeometry","CircleBufferGeometry","s","ii","ShadowMaterial","merge","UniformsLib","RawShaderMaterial","STANDARD","PHYSICAL","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","onStart","itemStart","itemEnd","itemError","XHRLoader","manager","DefaultLoadingManager","CompressedTextureLoader","_parser","BinaryTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","HemisphereLight","updateMatrix","LightShadow","SpotLightShadow","SpotLight","power","DirectionalLightShadow","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrackConstructor","values","interpolation","AnimationUtils","convertArray","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","validate","optimize","VectorKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","NumberKeyframeTrack","StringKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","KeyframeTrack","AnimationClip","tracks","resetDuration","MaterialLoader","BufferGeometryLoader","Loader","onLoadStart","onLoadProgress","onLoadComplete","JSONLoader","withCredentials","ObjectLoader","texturePath","Curve","LineCurve","CurvePath","curves","autoClose","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","SplineCurve","CubicBezierCurve","QuadraticBezierCurve","Shape","Path","holes","currentPoint","fromPoints","ShapePath","subPaths","currentPath","Font","FontLoader","getAudioContext","AudioContext","webkitAudioContext","AudioLoader","StereoCamera","eyeSep","cameraL","cameraR","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","updateCubeMap","gain","createGain","destination","createBufferSource","onended","onEnded","getInput","autoplay","startTime","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","PositionalAudio","panner","createPanner","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getOutput","PropertyMixer","binding","typeName","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","PropertyBinding","rootNode","parsedPath","parseTrackName","node","findNode","nodeName","AnimationObjectGroup","var_args","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindings","_bindingsIndicesByPath","stats",{"end":{"file":"vr.js","comments_before":[],"nlb":false,"endpos":1142620,"endcol":17,"endline":43636,"pos":1142615,"col":12,"line":43636,"value":"total","type":"name","_comments_dumped":true},"start":{"file":"vr.js","comments_before":[],"nlb":false,"endpos":1142620,"endcol":17,"endline":43636,"pos":1142615,"col":12,"line":43636,"value":"total","type":"name","_comments_dumped":true},"name":"total"},"total","inUse","bindingsPerObject","AnimationAction","mixer","clip","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","endingStart","ZeroCurvatureEnding","endingEnd","interpolant","createInterpolant","settings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","LoopRepeat","_loopCount","_startTime","timeScale","_effectiveTimeScale","weight","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","_root","_initMemoryManager","_accuIndex","Uniform","InstancedBufferGeometry","InterleavedBufferAttribute","interleavedBuffer","InterleavedBuffer","InstancedInterleavedBuffer","InstancedBufferAttribute","PointCloud","ascSort","intersectObject","recursive","Clock","autoStart","oldTime","elapsedTime","running","Spline","interpolate","t2","t3","intPoint","w2","w3","pa","pb","pc","pd","initFromArray","getPoint","getControlPointsArray","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","MorphBlendMesh","animationsMap","animationsList","numFrames","startFrame","endFrame","fps","createAnimation","setAnimationWeight","ImmediateRenderObject","renderCallback","VertexNormalsHelper","nNormals","objGeometry","SpotLightHelper","cone","SkeletonHelper","getBoneList","isBone","PointLightHelper","sphereSize","HemisphereLightHelper","lightSphere","divisions","FaceNormalsHelper","DirectionalLightHelper","CameraHelper","addLine","addPoint","pointMap","hexFrustum","hexCone","hexUp","hexTarget","hexCross","BoundingBoxHelper","box","BoxHelper","ArrowHelper","dir","headLength","headWidth","lineGeometry","coneGeometry","setDirection","setLength","AxisHelper","ClosedSplineCurve3","CatmullRomCurve3","ArcCurve","aRadius","Face4","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","EdgesHelper","WireframeHelper","Number","EPSILON","output","nextKey","_listeners","hasEventListener","listenerArray","REVISION","CullFaceFrontBack","FrontFaceDirectionCCW","BasicShadowMap","BlendingMode","TextureMapping","TextureWrapping","TextureFilter","RGBEFormat","LoopOnce","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroSlopeEnding","WrapAroundEnding","LogLuvEncoding","RAD2DEG","chars","rnd","euclideanModulo","mapLinear","a1","a2","b1","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degrees","radToDeg","radians","round","isVector2","setScalar","scalar","setY","setComponent","getComponent","addScaledVector","subScalar","isFinite","divide","clampScalar","minVal","maxVal","clampLength","roundToZero","lengthSq","lengthManhattan","distanceToManhattan","lerpVectors","fromAttribute","rotateAround","toJSON","meta","getDataURL","toDataURL","metadata","generator","transformUv","isVector4","setZ","setW","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","epsilon","epsilon2","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","onChangeCallback","isEuler","c1","c2","c3","s3","axis","halfAngle","setFromRotationMatrix","trace","vFrom","vTo","conjugate","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","slerp","qb","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","qa","qm","slerpFlat","dst","src0","srcOffset0","src1","srcOffset1","z0","w0","z1","w1","sqrSin","len","tDir","multiplyVectors","applyEuler","applyAxisAngle","qx","qy","qz","qw","iz","iw","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","angleTo","dz","sinPhiRadius","setFromMatrixScale","sz","temp","isMatrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","copyPosition","me","extractBasis","makeBasis","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","z2","wx","wy","wz","eye","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","applyToVector3Array","applyToBuffer","determinant","transpose","flattenToArrayOffset","getPosition","throwOnDegenerate","t11","t12","t13","t14","msg","detInv","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationZ","makeRotationAxis","tx","ty","compose","invSX","invSY","invSZ","makeFrustum","makePerspective","ymax","ymin","xmin","xmax","makeOrthographic","onUpdateCallback","merged","uniforms_src","uniforms_dst","parameter_src","isMatrix3","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_fragment","fog_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_template","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_flip","normal_fragment","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","setHex","setStyle","setHSL","hue2rgb","handleAlpha","ColorKeywords","copyGammaToLinear","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","getHSL","optionalTarget","hue","saturation","hsl","lightness","offsetHSL","addColors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","dashed","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","physical","expandByPoint","setFromCenterAndSize","halfSize","getCenter","expandByVector","containsBox","clampPoint","clampedPoint","isMaterial","newValue","currentValue","extractFromCache","isRoot","srcPlanes","dstPlanes","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","traverse","closestPoint","intersectsPlane","getBoundingSphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","setFromMatrix4","matrix4","transposeIntoArray","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","denominator","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","referencePoint","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","negRadius","d1","d2","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","RotationOrders","asin","newOrder","toVector3","optionalResult","channel","toggle","isObject3D","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","translateOnAxis","localToWorld","getObjectById","getObjectByProperty","child","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseAncestors","force","isRootObject","distanceSq","closestPointToPointParameter","startP","startEnd","clampToLine","startEnd2","startEnd_startP","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","triangle","area","midpoint","edgeList","projectedPoint","isBufferAttribute","copyAt","copyArray","copyColorsArray","copyIndicesArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXYZW","addFace","tempNormals","tempUVs","tempUVs2","ab","vA","vB","vC","areaWeighted","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","computeTangents","computeLineDistances","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","colors1","colors2","vertexCopy","faceCopy","faceVertexColors","uvCopy","mergeMesh","verticesMap","unique","changes","precisionPoints","faceIndicesToRemove","dupIndex","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","getNormalIndex","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","morphTarget","morphNormal","getIndex","getAttribute","clearGroups","setDrawRange","direct","__directGeometry","lineDistance","fromDirectGeometry","pA","pB","pC","normalizeNormals","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","toNonIndexed","array2","setDrawMode","morphTargetDictionary","ml","uvIntersection","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","uvA","uvB","uvC","faceIndex","inverseMatrix","tempA","tempB","tempC","fvA","fvB","fvC","faceMaterial","targets","uvs_f","isPerspectiveCamera","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","clearViewOffset","skew","isOrthographicCamera","zoomW","zoomH","scaleW","scaleH","vecX","vecY","wantedRotation","matrixPosition","guessSizeSq","level","addLevel","getObjectForDistance","pose","offsetMatrix","sw","vec","skinWeight","linePrecision","precisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","testPoint","rayPointDistanceSq","localThresholdSq","intersectPoint","distanceToRay","localThreshold","SinusoidalTaper","initialNormal3","smallest","MAX_VALUE","tz","mat","getTangentAt","ShapeUtils","contour","triangulate","snip","bX","bY","cX","cY","apx","apy","bpx","bpy","cpx","cpy","cCROSSap","bCROSScp","aCROSSbp","vertIndices","nv","triangulateShape","removeDupEndPts","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","removeHoles","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","shape","prevShapeIdx","nextShapeIdx","insideAngle","hole","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","intersectsHoleEdge","ihIdx","chkHole","hIdx","indepHoles","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","hl","minShapeIndex","counter","h2","allPointsMap","allpoints","shapeWithoutHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","addShape","scalePt2","pt","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","buildLidFaces","layer","vlen","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","ahole","slen1","slen2","f4","shapesOffset","uvgen","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","extrudePts","splineTube","position2","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","getSpacedPoints","shapePoints","extractPoints","reverse","bs","contourMovements","oneHoleMovements","holesMovements","verticesMovements","indexA","indexB","indexC","indexD","Geometries","isShadowMaterial","Materials","Cache","files","cached","request","XMLHttpRequest","open","response","status","responseType","overrideMimeType","send","setPath","setResponseType","setWithCredentials","loader","texDatas","mipmapCount","isCubemap","DataTextureLoader","texData","setCrossOrigin","urls","isJPEG","search","arraySlice","from","to","isTypedArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","KeyframeTrackPrototype","InterpolantFactoryMethodDiscrete","getValueSize","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","ValueTypeName","getInterpolation","shift","timeOffset","endTime","nKeys","valid","prevTime","currTime","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","json","trackType","_getTrackTypeForValueTypeName","track","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","animationMorphTargets","clips","parseAnimation","animation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","setTextures","getTexture","TYPED_ARRAYS","typedArray","drawcalls","offsets","extractUrlBase","initMaterials","createMaterial","textureLoader","materialLoader","fullPath","Handlers","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","handlers","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","morphAnimationClips","substring","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","loadImage","parseConstant","getGeometry","getMaterial","isInteger","getUtoTmapping","getPoints","lengths","getLengths","cacheArcLengths","last","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getPointFunc","isLineCurve","curve","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","isEllipseCurve","isSplineCurve","createPointsGeometry","createGeometry","createSpacedPointsGeometry","twoPi","deltaAngle","samePoints","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","h00","h10","h01","h11","point0","point1","point2","point3","PathPrototype","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","extractAllPoints","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","createPaths","paths","ret","createPath","glyph","glyphs","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","outline","_cachedOutline","action","ha","decodeAudioData","audioBuffer","instance","eyeRight","eyeLeft","eyeSepOnProjection","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setOrientation","setNodeSource","audioNode","setBuffer","getFilters","setFilters","setPlaybackRate","getPlaybackRate","getLoop","setLoop","getVolume","setVolume","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","setMaxDistance","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","targetArray","sourceArray","targetObject","objectName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","dest","Composite","targetGroup","optionalParsedPath","_targetGroup","subscribe_","firstValidIndex","bindings","isAnimationObjectGroup","re","matches","results","searchSkeleton","searchNodeSubtree","childNode","subTreeNode","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","clipAction","optionalRoot","rootUuid","clipObject","clipUuid","actionsForClip","_actionsByClip","prototypeAction","existingAction","actionByRoot","knownActions","newAction","_bindAction","_addInactiveAction","stopAllAction","actions","_actions","nActions","_nActiveActions","_nActiveBindings","uncacheClip","actionsByClip","actionsToRemove","cacheIndex","lastInactiveAction","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","bindingsByRoot","_bindingsByRootAndName","bindingByName","_removeInactiveBinding","uncacheAction","bindingsByName","_addInactiveBinding","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","controlInterpolants","knownActionsForClip","lastKnownAction","byClipCacheIndex","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","propBinding","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","instances","isInterleavedBuffer","setFromCamera","performance","getElapsedTime","getDelta","newTime","vec3","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","morph","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe","objPos","objNorm","vector2","coneLength","coneWidth","boneList","matrixWorldInv","boneMatrix","lightPlane","targetLine","setPoint","setColor","CubicPoly","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","SplineCurve3","CubicBezierCurve3","QuadraticBezierCurve3","LineCurve3","SceneUtils","createMultiMaterialObject","detach","attach","LineStrip","LinePieces","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","extrude","makeGeometry","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","addIndex","addDrawCall","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","audioLoader","getData","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","CubeGeometry","MeshFaceMaterial","Particle","createForEach","arrayFunc","eachFunc","collection","iteratee","thisArg","bindCallback","arrayEach","baseEach","assignWith","customizer","baseAssign","createAssigner","started","input","HTMLAudioElement","onerror","linearRampToValueAtTime","luminance","turbidity","reileigh","mieCoefficient","mieDirectionalG","skyShader","skyUniforms","skyMat","skyGeo","skyMesh","normalizeOpts","isCallable","contains","dscr","desc","gs","baseForOwn","baseFor","baseProperty","createBaseEach","fromRight","isLength","iterable","toObject","createBaseFor","keysFunc","MAX_SAFE_INTEGER","isObject","argCount","accumulator","isObjectLike","getNative","isNative","isFunction","objToString","funcTag","reIsNative","fnToString","reIsHostCtor","arrayTag","objectProto","nativeIsArray","baseCopy","process","assigner","restParam","guard","isIterateeCall","foo","bar","trzy","str","searchString","isArguments","isArrayLikeObject","propertyIsEnumerable","objectToString","argsTag","isArrayLike","tag","genTag","isIndex","reIsUint","FUNC_ERROR_TEXT","nativeMax","rest","otherArgs","__webpack_module_template_argument_0__","__webpack_module_template_argument_1__","__webpack_module_template_argument_2__","shimKeys","keysIn","propsLength","allowIndexes","Ctor","isProto","skipIndexes","nativeKeys"],"mappings":"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AAs2D,yBACAt2D,EAAAy2D,oCACAz2D,EAAA02D,oCACA12D,EAAA8/B,8BACA9/B,EAAAu2D,2BACAv2D,EAAAw2D,2BACAx2D,EAAAkiG,kBACAliG,EAAA4b,kBACA5b,EAAA+1C,uBACA/1C,EAAA64E,0BACA74E,EAAAmiG,mBACAniG,EAAAiqD,iBACAjqD,EAAA++D,8BACA/+D,EAAAg/D,6BACAh/D,EAAA0sB,gBACA1sB,EAAAi5E,6BACAj5E,EAAAwrB,4BACAxrB,EAAAoiG,iBACApiG,EAAAi2C,oBACAj2C,EAAA05E,YACA15E,EAAA25E,aACA35E,EAAA45E,qBACA55E,EAAA65E,WACA75E,EAAA85E,mBACA95E,EAAAuhE,aACAvhE,EAAAwhE,iBACAxhE,EAAAo5E,yBACAp5E,EAAAs5E,yBACAt5E,EAAAw5E,wBACAx5E,EAAA88E,sBACA98E,EAAAg6E,eACAh6E,EAAAotB,aACAptB,EAAAg2C,cACAh2C,EAAAk6E,mBACAl6E,EAAAo6E,wBACAp6E,EAAAqiG,cACAriG,EAAAyjE,eACAzjE,EAAAoiE,sBACApiE,EAAAw7E,wBACAx7E,EAAA07E,yBACA17E,EAAA47E,yBACA57E,EAAA87E,yBACA97E,EAAAg8E,2BACAh8E,EAAAk8E,2BACAl8E,EAAAo8E,4BACAp8E,EAAAs8E,4BACAt8E,EAAAw8E,mBACAx8E,EAAAsiG,YACAtiG,EAAA65F,cACA75F,EAAAuiG,gBACAviG,EAAAwiG,uBACAxiG,EAAAyiG,qBACAziG,EAAA0iG,qBACA1iG,EAAAi5F,uBACAj5F,EAAA2iG,mBACA3iG,EAAA4iG,oBACA5iG,EAAA8uD,qBACA9uD,EAAA+gF,yBACA/gF,EAAAihF,uBACAjhF,EAAAq2C,kBACAr2C,EAAAmzD,gBACAnzD,EAAAwzD,iBACAxzD,EAAAozD,gBACApzD,EAAA6iG,kBACA7iG,EAAAqzD,iBACArzD,EAAAszD,kBACAtzD,EAAAuzD,gBACAvzD,EAAA6kD,qBACA7kD,EAAAipD,oBACAjpD,EAAA4vJ,aAAArtI,GACAviB,EAAA8gG,SACA9gG,EA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","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ((function(modules) {\n\t// Check all modules for deduplicated modules\n\tfor(var i in modules) {\n\t\tswitch(typeof modules[i]) {\n\t\tcase \"number\":\n\t\t\t// Module is a copy of another module\n\t\t\tmodules[i] = modules[modules[i]];\n\t\t\tbreak;\n\t\tcase \"object\":\n\t\t\t// Module can be created from a template\n\t\t\tmodules[i] = (function(_m) {\n\t\t\t\tvar args = _m.slice(1), fn = modules[_m[0]];\n\t\t\t\treturn function (a,b,c) {\n\t\t\t\t\tfn.apply(null, [a,b,c].concat(args));\n\t\t\t\t};\n\t\t\t}(modules[i]));\n\t\t}\n\t}\n\treturn modules;\n}([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function () {\n\t\t'use strict';\n\t\n\t\t//global-ish declarations\n\t\tvar VR,\n\t\t\tNoSleep = __webpack_require__(10).NoSleep,\n\t\t\tisMobile = __webpack_require__(4);\n\t\n\t\tfunction initRequirements() {\n\t\t\t//load styles\n\t\t\t__webpack_require__(2);\n\t\n\t\t\tVR = __webpack_require__(1);\n\t\t}\n\t\n\t\tfunction initialize() {\n\t\t\tinitRequirements();\n\t\n\t\t\t//todo: set up button/info elements\n\t\n\t\t\tVR.init();\n\t\n\t        VR.noSleep = new NoSleep();\n\t\t\twindow.addEventListener('resize', VR.resize, false);\n\t\n\t\t\tif (!isMobile.any) {\n\t\t\t\tVR.disableOrientation();\n\t\t\t}\n\t\n\t\t\t/*\n\t\t\texport global things\n\t\t\t*/\n\t\t\twindow.VR = VR;\n\t\t\twindow.THREE = VR.THREE;\n\t\t}\n\t\n\t\tinitialize();\n\t\tVR.start();\n\t}());\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function () {\n\t\t'use strict';\n\t\n\t\t//constants\n\t\tvar NEAR = 1,\n\t\t\tFAR = 1000000,\n\t\n\t\t//global-ish declarations\n\t\t\tTHREE,\n\t\t\teventEmitter,\n\t\t\tmaterials = __webpack_require__(6),\n\t\t\tnop = function () {},\n\t\t\trequestFullscreen = nop,\n\t\t\texitFullscreen = (\n\t\t\t\tdocument.exitFullscreen ||\n\t\t\t\tdocument.mozCancelFullScreen ||\n\t\t\t\tdocument.webkitExitFullscreen ||\n\t\t\t\tdocument.msExitFullscreen ||\n\t\t\t\tnop\n\t\t\t).bind(document),\n\t\n\t\t//scene assets\n\t\t\tcamera,\n\t\t\tscene,\n\t\t\tbody,\n\t\t\trenderer,\n\t\t\taudioListener,\n\t\t\tvrControls,\n\t\t\tvrEffect,\n\t\t\tmouseControls,\n\t\t\traycaster,\n\t\t\ttarget,\n\t\n\t\t\tbodyWrapper,\n\t\t\tcameraWrapper,\n\t\n\t\t\tfloor,\n\t\n\t\t//state\n\t\t\tgoing = false,\n\t\t\tvrMode = false,\n\t\t\torientationEnabled,\n\t\t\torientationPossible = false,\n\t\n\t\t//exported object\n\t\t\tVR,\n\t\n\t\t\tVRObject = __webpack_require__(7),\n\t\t\tobjectMethods = [\n\t\t\t\t'box',\n\t\t\t\t'cylinder',\n\t\t\t\t'torus',\n\t\t\t\t'sphere',\n\t\t\t\t'empty',\n\t\t\t\t'sound',\n\t\t\t\t'floor',\n\t\t\t\t'sky',\n\t\t\t\t'panorama',\n\t\t\t\t'image',\n\t\t\t\t'video',\n\t\t\t\t'text',\n\t\t\t\t'grid'\n\t\t\t],\n\t\n\t\t\t//todo: use a weak map or set instead\n\t\t\tvrObjects = [],\n\t\t\traycastable = [],\n\t\n\t\t\tlastTick = 0,\n\t        waitRenderInative = 0,\n\t\t\tanimationCallbacks = [];\n\t\n\t    var isSupportWebgl = (function () {\n\t        var canvas = document.createElement('canvas');\n\t        var gl = null;\n\t        var experimental = false;\n\t        try {\n\t            gl = canvas.getContext('webgl');\n\t        } catch (x) {\n\t            gl = null;\n\t        }\n\t\n\t        if (gl === null) {\n\t            try {\n\t                gl = canvas.getContext('experimental-webgl');\n\t                experimental = true;\n\t            } catch (x) {\n\t                gl = null;\n\t            }\n\t        }\n\t        // return false;\n\t        return Boolean(gl);\n\t    })();\n\t\n\t    window.isSupportWebgl = isSupportWebgl;\n\t\n\t\tfunction isFullscreen() {\n\t\t\treturn !!(document.fullscreenElement ||\n\t\t\t\tdocument.mozFullScreenElement ||\n\t\t\t\tdocument.webkitFullscreenElement ||\n\t\t\t\tdocument.msFullscreenElement);\n\t\t}\n\t\n\t\tfunction fullScreenError() {\n\t\t\tvrMode = false;\n\t\t\tif (vrEffect) {\n\t\t\t\tvrEffect.exit();\n\t\t\t}\n\t\t}\n\t\n\t\tfunction pruneObject(object) {\n\t\t\tvar i = raycastable.indexOf(object);\n\t\t\tif (i >= 0) {\n\t\t\t\traycastable.splice(i, 1);\n\t\t\t}\n\t\n\t\t\ti = vrObjects.indexOf(VRObject.findObject(object));\n\t\t\tif (i >= 0) {\n\t\t\t\tvrObjects.splice(i, 1);\n\t\t\t}\n\t\n\t\t\tobject.children.forEach(pruneObject);\n\t\t}\n\t\n\t\tfunction raycast() {\n\t\t\tvar i,\n\t\t\t\tintersect,\n\t\t\t\tobject,\n\t\t\t\tintersects,\n\t\t\t\tparent,\n\t\t\t\tprune = [],\n\t\t\t\tvrObject;\n\t\n\t\t\traycaster.ray.origin.setFromMatrixPosition(camera.matrixWorld); // world position\n\t\t\traycaster.ray.direction.set(0, 0, 0.5).unproject(camera).sub(raycaster.ray.origin).normalize();\n\t\n\t\t\tintersects = raycaster.intersectObjects(raycastable, true);\n\t\t\tfor (i = 0; i < intersects.length; i++) {\n\t\t\t\tintersect = intersects[i];\n\t\n\t\t\t\t// if object has been removed from scene, remove it from raycastable\n\t\t\t\tparent = intersect.object;\n\t\t\t\twhile (parent && parent !== scene) {\n\t\t\t\t\tif (!parent.parent) {\n\t\t\t\t\t\tprune.push(parent);\n\t\t\t\t\t}\n\t\t\t\t\tparent = parent.parent;\n\t\t\t\t}\n\t\n\t\t\t\tif (parent && intersect.object instanceof THREE.Mesh) {\n\t\t\t\t\tobject = intersect.object;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tprune.forEach(pruneObject);\n\t\n\t\t\tif (target !== object) {\n\t\t\t\tif (target) {\n\t\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\t\tvrObject.emit('lookaway');\n\t\t\t\t\tVR.emit('lookaway', vrObject);\n\t\t\t\t}\n\t\t\t\ttarget = object;\n\t\t\t\tif (target) {\n\t\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\t\twhile (!vrObject && target.parent) {\n\t\t\t\t\t\ttarget = target.parent;\n\t\t\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\t\t}\n\t\t\t\t\tif (vrObject) {\n\t\t\t\t\t\tvrObject.emit('lookat', intersect);\n\t\t\t\t\t\tVR.emit('lookat', vrObject, intersect);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tfunction render() {\n\t       // if (CLOSE_RENDER) {\n\t       //     return;\n\t       // }\n\t        // Will not start render when application has been active.\n\t        // The case only in taobao client. Very suck!\n\t        if (Date.now() / 1000 - lastTick > 5) {\n\t            if (waitRenderInative === 0) {\n\t                waitRenderInative = Date.now() / 1000;\n\t            }\n\t            if (Date.now() / 1000 - waitRenderInative > 1) {\n\t                lastTick = Date.now();\n\t            }\n\t            return;\n\t        }\n\t        waitRenderInative = 0;\n\t\n\t\t\tvar now = Date.now() / 1000,\n\t\t\t\tdelta = Math.min(1, now - lastTick);\n\t\n\t\t\tvrControls.update();\n\t\n\t\t\tanimationCallbacks.forEach(function (cb) {\n\t\t\t\tcb(delta, now);\n\t\t\t});\n\t\n\t\t\tscene.updateMatrixWorld();\n\t\n\t\t\tvrObjects.forEach(function (object) {\n\t\t\t\tobject.update(now);\n\t\t\t});\n\t        mouseControls.update();\n\t\n\t\t\traycast();\n\t\n\t\t\tvrEffect.render(scene, camera);\n\t\n\t\t\tlastTick = now;\n\t\t}\n\t\n\t\tfunction renderLoop() {\n\t\t\tif (going) {\n\t\t\t\trender();\n\t\t\t\trequestAnimationFrame(renderLoop);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction stop() {\n\t\t\tgoing = false;\n\t\t}\n\t\n\t\tfunction start() {\n\t\t\tif (!going) {\n\t\t\t\tgoing = true;\n\t\t\t\trenderLoop();\n\t\t\t}\n\t\t}\n\t\n\t\t/*\n\t\tMute any sounds when this browser tab is in the background or minimized.\n\t\t*/\n\t\tfunction visibilityChange() {\n\t\t\tif (document.hidden || document.mozHidden || document.msHidden || document.webkitHidden) {\n\t\t\t\taudioListener.volume(0);\n\t            stop();\n\t\t\t} else {\n\t\t\t\taudioListener.volume(1);\n\t            start();\n\t\t\t}\n\t\t}\n\t\n\t\tfunction resize(width, height) {\n\t\t\twidth = typeof width === 'number' && width || window.innerWidth;\n\t\t\theight = typeof height === 'number' && height || window.innerHeight;\n\t\n\t\t\tcamera.aspect = width / height;\n\t\t\tcamera.updateProjectionMatrix();\n\t\t\trenderer.setSize(width, height);\n\t\t}\n\t\n\t\tfunction initShake() {\n\t\t\tvar lastTime = 0,\n\t\t\t\tlastX,\n\t\t\t\tlastY,\n\t\t\t\tlastZ,\n\t\t\t\tthreshold = 15;\n\t\n\t\t\twindow.addEventListener('devicemotion', function (evt) {\n\t\t\t\tvar current = evt.accelerationIncludingGravity,\n\t\t\t\t\ttime,\n\t\t\t\t\tdiff,\n\t\t\t\t\tdeltaX = 0,\n\t\t\t\t\tdeltaY = 0,\n\t\t\t\t\tdeltaZ = 0,\n\t\t\t\t\tdist;\n\t\n\t\t\t\tif (lastX !== undefined) {\n\t\t\t\t\tdeltaX = Math.abs(lastX - current.x);\n\t\t\t\t\tdeltaY = Math.abs(lastY - current.y);\n\t\t\t\t\tdeltaZ = Math.abs(lastZ - current.z);\n\t\n\t\t\t\t\t// if (deltaX > threshold &&\n\t\t\t\t\t// \t\t(deltaY > threshold || deltaZ > threshold)\n\t\t\t\t\t// \t) {\n\t\t\t\t\tdist = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);\n\t\t\t\t\tif (dist > threshold) {\n\t\n\t\t\t\t\t\ttime = Date.now();\n\t\t\t\t\t\tdiff = time - lastTime;\n\t\t\t\t\t\tif (diff > 1000) {\n\t\t\t\t\t\t\tif (navigator.vibrate) {\n\t\t\t\t\t\t\t\tnavigator.vibrate(100);\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tlastTime = Date.now();\n\t\n\t\t\t\t\t\t\tVR.emit('shake');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tlastX = current.x;\n\t\t\t\tlastY = current.y;\n\t\t\t\tlastZ = current.z;\n\t\n\t\t\t\torientationPossible = true;\n\t\t\t}, false);\n\t\t}\n\t\n\t\tfunction initScene() {\n\t\t\tfunction attachCanvas() {\n\t\t\t\tdocument.body.insertBefore(renderer.domElement, document.body.firstChild || null);\n\t\t\t\tresize();\n\t\t\t}\n\t\n\t\t\tif (renderer) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t//create renderer and place in document\n\t        // Antialiasing temporarily disabled to improve performance.\n\t\t\trenderer = !isSupportWebgl?new THREE.CanvasRenderer():new THREE.WebGLRenderer({ antialias: false });\n\t        renderer.setClearColor(0x000000, 0);\n\t        renderer.setPixelRatio( window.devicePixelRatio );\n\t        renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\tif (isSupportWebgl) {\n\t            renderer.domElement.addEventListener('webglcontextlost', function contextLost(event) {\n\t                console.log('lost context', event);\n\t            });\n\t        }\n\t\t\t// renderer.shadowMapEnabled = true;\n\t\t\t// renderer.shadowMapSoft = true;\n\t\n\t\t\t//need a scene to put all our objects in\n\t\t\tscene = new THREE.Scene();\n\t\n\t\t\tbodyWrapper = new VRObject(scene, __webpack_require__(8), null, {\n\t\t\t\tname: 'body'\n\t\t\t}).moveTo(0, 1.5, 4);\n\t\t\tbody = bodyWrapper.object;\n\t\n\t\t\tcameraWrapper = new VRObject(body, function (parent) {\n\t        //    camera = new THREE.OrthographicCamera(\n\t        //            window.innerWidth / - 24, window.innerWidth / 24,window.innerHeight / 24, window.innerHeight / - 24, -310, 100000);\n\t        //    camera.position.x = 0;\n\t        //    camera.position.y = 0;\n\t        //    camera.zoom = 0.4;\n\t\t\t//\tcamera.position.set(-0.000001, 0.0001, 0.0001);\n\t\t\t//\tcamera.rotation.set(0, 0, 0);\n\t\n\t\t\t\t//need a camera with which to look at stuff\n\t            // The viewer proportion will be a square not a rect.\n\t\t\t\tcamera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, NEAR, FAR);\n\t            camera.setFocalLength(8);\n\t            // camera.zoom = 0.8;\n\t\t\t\t// camera.position.set(-0.000001, 1, 0.0001);\n\t            // camera.autoBackward = true;\n\t\t\t\tparent.add(camera);\n\t\t\t\treturn camera;\n\t\t\t})\n\t\t\t// set camera position so that OrbitControls works properly.\n\t\t\t\t.moveTo(0, 0.0001, 0.0001);\n\t\n\t\t\taudioListener = new THREE.AudioListener();\n\t\t\taudioListener.name = 'audio-listener';\n\t\t\tcamera.add(audioListener);\n\t\n\t\t\t//VRControls point the camera wherever we're looking\n\t\t\tvrControls = new THREE.VRControls(camera);\n\t\t\tvrControls.freeze = !orientationEnabled;\n\t\n\t\t\t//render left and right eye\n\t\t\tvrEffect = new THREE.VRStereoEffect(renderer);\n\t\t\tvrEffect.near = NEAR;\n\t\t\tvrEffect.far = FAR;\n\t\t\tvrEffect.addEventListener('fullscreenchange', function (evt) {\n\t\t\t\tvar screen;\n\t\t\t\tif (isFullscreen()) {\n\t\t\t\t\tif (vrMode) {\n\t\t\t\t\t\t//no mouse control\n\t\t\t\t\t\tmouseControls.enabled = false;\n\t\n\t\t\t\t\t\tvrControls.freeze = false;\n\t\t\t\t\t\tvrControls.reset();\n\t\n\t\t\t\t\t\tscreen = window.screen;\n\t\t\t\t\t\tif (screen.lockOrientation) {\n\t\t\t\t\t\t\tscreen.lockOrientation('landscape-primary');\n\t\t\t\t\t\t} else if (screen.mozLockOrientation) {\n\t\t\t\t\t\t\tscreen.mozLockOrientation('landscape-primary');\n\t\t\t\t\t\t} else if (screen.orientation && screen.orientation.lock) {\n\t\t\t\t\t\t\tscreen.orientation.lock('landscape-primary');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tVR.exitVR();\n\t\t\t\t}\n\t\n\t\t\t\tcamera.position.set(0, 0.0001, 0.0001);\n\t\t\t\tcamera.rotation.set(0, 0, 0);\n\t\n\t\t\t\tVR.emit('fullscreenchange', evt);\n\t\t\t});\n\t        scene.isWebview = vrEffect.isWebview;\n\t\n\t\t\t//report on HMD\n\t\t\tvrControls.addEventListener('devicechange', function () {\n\t\t\t\torientationPossible = true;\n\t\t\t\tif (orientationEnabled === undefined) {\n\t\t\t\t\torientationEnabled = vrControls.mode() === 'deviceorientation';\n\t\t\t\t}\n\t\n\t\t\t\tvrControls.freeze = !orientationEnabled && !vrMode;\n\t\n\t\t\t\tVR.emit('devicechange', vrControls.mode(), vrEffect.hmd());\n\t\t\t});\n\t\n\t\t\t// mouse control in case got no orientation device\n\t        // Re-start autorotate if user has not been controlled.\n\t        var autoRotateTimer = null;\n\t\t\tmouseControls = new THREE.OrbitControls(camera, renderer.domElement);\n\t\t\tmouseControls.target0.set(0, 0.0001, 0.000);\n\t\t\tmouseControls.target.copy(mouseControls.target0);\n\t        mouseControls.enableZoom = true;\n\t        mouseControls.enablePan = false;\n\t        mouseControls.autoRotate = true;\n\t        mouseControls.autoRotateSpeed = 1.0;\n\t        mouseControls.enableDamping = true;\n\t        mouseControls.dampingFactor = 0.55;\n\t        mouseControls.addEventListener('start', function(){\n\t            if (autoRotateTimer) {\n\t                clearTimeout(autoRotateTimer);\n\t            }\n\t            mouseControls.autoRotate = false;\n\t        });\n\t        mouseControls.addEventListener('end', function(){\n\t            autoRotateTimer = setTimeout(function(){\n\t                mouseControls.autoRotate = true;\n\t            }, 2000);\n\t        });\n\t\t\tmouseControls.update();\n\t\n\t\t\t//todo: remove any default lights once other lights are added\n\t        // Will not use this way because memory\n\t\t\tvar dLight = new THREE.DirectionalLight(0xffffff, 0.8);\n\t\t\tdLight.name = 'directional-light';\n\t\t\tdLight.position.set(20, 100, 100);\n\t\n\t\t\tdLight.castShadow = true;\n\t\t\tdLight.shadowCameraVisible = true;\n\t\n\t\t\tdLight.shadowMapWidth = 2048;\n\t\t\tdLight.shadowMapHeight = 2048;\n\t\n\t\t\tdLight.shadowCameraLeft = -10;\n\t\t\tdLight.shadowCameraRight = 10;\n\t\t\tdLight.shadowCameraTop = 10;\n\t\t\tdLight.shadowCameraBottom = -10;\n\t\n\t\t\tdLight.shadowCameraFar = 150;\n\t\t\tdLight.shadowCameraNear = 100;\n\t\t\tdLight.shadowDarkness = 1;\n\t\n\t\t\tscene.add(dLight);\n\t\n\t\t\tscene.add(new THREE.AmbientLight(0x444444));\n\t\n\t\t\tif (VR) {\n\t\t\t\tVR.camera = cameraWrapper;\n\t\t\t\tVR.body = bodyWrapper;\n\t\t\t\tVR.scene = scene;\n\t\t\t\tVR.canvas = renderer.domElement;\n\t\t\t\tVR.renderer = renderer;\n\t\t\t\tVR.zeroSensor = vrControls.zeroSensor;\n\t\t\t}\n\t\n\t\t\traycaster = new THREE.Raycaster();\n\t\n\t\t\tif (document.body) {\n\t\t\t\tattachCanvas();\n\t\t\t} else {\n\t\t\t\twindow.addEventListener('load', attachCanvas, false);\n\t\t\t}\n\t\n\t\t\tVR.canvas.addEventListener('webkitfullscreenerror', fullScreenError, false);\n\t\t\tVR.canvas.addEventListener('fullscreenerror', fullScreenError, false);\n\t\t}\n\t\n\t\tfunction initRequirements() {\n\t\t\t//load external requirements\n\t\t\tTHREE = __webpack_require__(32);\n\t\t\t__webpack_require__(23);\n\t\t\t__webpack_require__(24);\n\t\n\t\t\t//if (typeof __DEV__ !== 'undefined' && __DEV__) {\n\t\t\t\t__webpack_require__(25);\n\t\t\t//}\n\t\n\t\t\tTHREE.ImageUtils.crossOrigin = '';\n\t\n\t\t\teventEmitter = __webpack_require__(30);\n\t\n\t        //if (!isSupportWebgl) {\n\t            __webpack_require__(26);\n\t            __webpack_require__(27);\n\t          //  return;\n\t        //}\n\t\n\t\t\t//my VR stuff. todo: move these to a separate repo or two for easy packaging\n\t\t\t__webpack_require__(28);\n\t\t\t__webpack_require__(29);\n\t\t}\n\t\n\t\n\t\tfunction initialize() {\n\t\t\t//todo: set up button/info elements\n\t\n\t\t\tinitScene();\n\t\n\t\t\tinitShake();\n\t\n\t\t\tresize();\n\t\n\t\n\t\t\tdocument.addEventListener('visibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('mozvisibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('msvisibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('webkitvisibilitychange', visibilityChange);\n\t\t}\n\t\n\t\tinitRequirements();\n\t\n\t\tmodule.exports = VR = {\n\t\t\tinit: initialize,\n\t\t\trender: render,\n\t\t\tstart: start,\n\t\t\tstop: stop,\n\t\t\tresize: resize,\n\t\n\t\t\tTHREE: THREE,\n\t\n\t\t\tmaterials: materials,\n\t\n\t\t\tanimate: function (callback) {\n\t\t\t\tvar i;\n\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\ti = animationCallbacks.indexOf(callback);\n\t\t\t\t\tif (i < 0) {\n\t\t\t\t\t\tanimationCallbacks.push(callback);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tend: function (callback) {\n\t\t\t\tvar i;\n\t\n\t\t\t\tif (!callback) {\n\t\t\t\t\tanimationCallbacks.length = 0;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\ti = animationCallbacks.indexOf(callback);\n\t\t\t\t\tif (i >= 0) {\n\t\t\t\t\t\tanimationCallbacks.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\trequestVR: function () {\n\t\t\t\t//todo: check if it's possible\n\t\t\t\tif (vrMode || !vrEffect) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tvrMode = true;\n\t\n\t\t\t\t//full screen and render two eyes\n\t\t\t\t//always full screen\n\t\t\t\tvrEffect.requestFullScreen();\n\t\t\t},\n\t\n\t\t\texitVR: function () {\n\t\t\t\tvrMode = false;\n\t\t\t\tif (!vrEffect.isWebview() && isFullscreen()) {\n\t\t\t\t\texitFullscreen();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t            vrEffect.exit();\n\t\n\t\t\t\tmouseControls.enabled = true;\n\t\t\t\tvrControls.freeze = !orientationEnabled;\n\t\t\t\tcamera.rotation.set(0, 0, 0);\n\t\t\t},\n\t\n\t\t\tvrMode: function () {\n\t\t\t\treturn vrMode && isFullscreen();\n\t\t\t},\n\t\n\t\t\torientationEnabled: function () {\n\t\t\t\treturn !!orientationEnabled;\n\t\t\t},\n\t\t\tenableOrientation: function () {\n\t\t\t\torientationEnabled = true;\n\t            mouseControls.autoRotate = false;\n\t\t\t\tif (!vrMode) {\n\t\t\t\t\tvrControls.freeze = false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdisableOrientation: function () {\n\t\t\t\torientationEnabled = false;\n\t            mouseControls.autoRotate = true;\n\t\t\t\tcamera.rotation.set(0, 0, 0);\n\t\t\t\tvrControls.freeze = !vrMode;\n\t\t\t},\n\t\n\t\t\tisFullscreen: isFullscreen,\n\t\t\trequestFullscreen: requestFullscreen,\n\t\t\texitFullscreen: function () {\n\t\t\t\tif (isFullscreen()) {\n\t\t\t\t\texitFullscreen();\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tcontrolMode: function () {\n\t\t\t\treturn vrControls && vrControls.mode();\n\t\t\t},\n\t\n\t\t\tzeroSensor: nop,\n\t\n\t\t\tvibrate: navigator.vibrate ? navigator.vibrate.bind(navigator) : nop,\n\t\n\t\t\t// Utility\n\t\t\ttimes: function (n, callback) {\n\t\t\t\tvar i;\n\t\n\t\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\t\tcallback(i);\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tcamera: cameraWrapper,\n\t\t\tbody: bodyWrapper,\n\t\t\tscene: scene,\n\t\t\trenderer: renderer || null,\n\t\t\tcanvas: renderer && renderer.domElement || null,\n\t        isSupportWebgl: isSupportWebgl\n\t\t};\n\t\n\t\tobjectMethods.forEach(function (method) {\n\t\t\tvar creator = __webpack_require__(9)(\"./\" + method),\n\t\t\t\tkey;\n\t\n\t\t\tVR[method] = function (options) {\n\t\t\t\tvar obj = new VRObject(scene, creator, body, options);\n\t\t\t\tvrObjects.push(obj);\n\t\t\t\tif (obj.raycastable) {\n\t\t\t\t\traycastable.push(obj.object);\n\t\t\t\t}\n\t\t\t\treturn obj;\n\t\t\t};\n\t\n\t\t\tVRObject.prototype[method] = function (options) {\n\t\t\t\tvar obj = new VRObject(this.object, creator, body, options);\n\t\t\t\tvrObjects.push(obj);\n\t\t\t\tif (obj.raycastable) {\n\t\t\t\t\traycastable.push(obj.object);\n\t\t\t\t}\n\t\t\t\treturn obj;\n\t\t\t};\n\t\n\t\t\tfor (key in creator) {\n\t\t\t\tif (creator.hasOwnProperty(key) && typeof creator[key] === 'function') {\n\t\t\t\t\tVR[method][key] = creator[key];\n\t\t\t\t\tVRObject.prototype[method][key] = creator[key];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\teventEmitter(VR);\n\t\n\t\tObject.defineProperty(VR, 'target', {\n\t\t\tget: function () {\n\t\t\t\treturn target;\n\t\t\t}\n\t\t});\n\t    // Compatible in android < 5.0\n\t    // Fix something what VR was undefined.\n\t    window.VR = VR;\n\t}());\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(3);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(5)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../node_modules/css-loader/index.js!./style.css\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../node_modules/css-loader/index.js!./style.css\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(31)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"body{font-family:Helvetica Neue,Helvetica,Arial,sans-serif;color:#eee;overflow:hidden;background:#282828;height:100%;width:100%;margin:0;padding:0}canvas{width:100%!important;height:100%!important;top:0;left:0}#buttons{position:absolute;bottom:0;left:0;padding:12px;margin:8px;border-radius:8px;background-color:hsla(0,0%,50%,.6)}#buttons>*{margin:0 10px;display:inline-block;width:18px;height:18px;cursor:pointer}#buttons>:first-child{margin-left:0}#buttons>.unsupported,#fs-disable{display:none}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * isMobile.js v0.3.9\n\t *\n\t * A simple library to detect Apple phones and tablets,\n\t * Android phones and tablets, other mobile devices (like blackberry, mini-opera and windows phone),\n\t * and any kind of seven inch device, via user agent sniffing.\n\t *\n\t * @author: Kai Mallea (kmallea@gmail.com)\n\t *\n\t * @license: http://creativecommons.org/publicdomain/zero/1.0/\n\t */\n\t(function (global) {\n\t\n\t    var apple_phone         = /iPhone/i,\n\t        apple_ipod          = /iPod/i,\n\t        apple_tablet        = /iPad/i,\n\t        android_phone       = /(?=.*\\bAndroid\\b)(?=.*\\bMobile\\b)/i, // Match 'Android' AND 'Mobile'\n\t        android_tablet      = /Android/i,\n\t        amazon_phone        = /(?=.*\\bAndroid\\b)(?=.*\\bSD4930UR\\b)/i,\n\t        amazon_tablet       = /(?=.*\\bAndroid\\b)(?=.*\\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\\b)/i,\n\t        windows_phone       = /IEMobile/i,\n\t        windows_tablet      = /(?=.*\\bWindows\\b)(?=.*\\bARM\\b)/i, // Match 'Windows' AND 'ARM'\n\t        other_blackberry    = /BlackBerry/i,\n\t        other_blackberry_10 = /BB10/i,\n\t        other_opera         = /Opera Mini/i,\n\t        other_chrome        = /(CriOS|Chrome)(?=.*\\bMobile\\b)/i,\n\t        other_firefox       = /(?=.*\\bFirefox\\b)(?=.*\\bMobile\\b)/i, // Match 'Firefox' AND 'Mobile'\n\t        seven_inch = new RegExp(\n\t            '(?:' +         // Non-capturing group\n\t\n\t            'Nexus 7' +     // Nexus 7\n\t\n\t            '|' +           // OR\n\t\n\t            'BNTV250' +     // B&N Nook Tablet 7 inch\n\t\n\t            '|' +           // OR\n\t\n\t            'Kindle Fire' + // Kindle Fire\n\t\n\t            '|' +           // OR\n\t\n\t            'Silk' +        // Kindle Fire, Silk Accelerated\n\t\n\t            '|' +           // OR\n\t\n\t            'GT-P1000' +    // Galaxy Tab 7 inch\n\t\n\t            ')',            // End non-capturing group\n\t\n\t            'i');           // Case-insensitive matching\n\t\n\t    var match = function(regex, userAgent) {\n\t        return regex.test(userAgent);\n\t    };\n\t\n\t    var IsMobileClass = function(userAgent) {\n\t        var ua = userAgent || navigator.userAgent;\n\t        // Facebook mobile app's integrated browser adds a bunch of strings that\n\t        // match everything. Strip it out if it exists.\n\t        var tmp = ua.split('[FBAN');\n\t        if (typeof tmp[1] !== 'undefined') {\n\t            ua = tmp[0];\n\t        }\n\t\n\t        this.apple = {\n\t            phone:  match(apple_phone, ua),\n\t            ipod:   match(apple_ipod, ua),\n\t            tablet: !match(apple_phone, ua) && match(apple_tablet, ua),\n\t            device: match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)\n\t        };\n\t        this.amazon = {\n\t            phone:  match(amazon_phone, ua),\n\t            tablet: !match(amazon_phone, ua) && match(amazon_tablet, ua),\n\t            device: match(amazon_phone, ua) || match(amazon_tablet, ua)\n\t        };\n\t        this.android = {\n\t            phone:  match(amazon_phone, ua) || match(android_phone, ua),\n\t            tablet: !match(amazon_phone, ua) && !match(android_phone, ua) && (match(amazon_tablet, ua) || match(android_tablet, ua)),\n\t            device: match(amazon_phone, ua) || match(amazon_tablet, ua) || match(android_phone, ua) || match(android_tablet, ua)\n\t        };\n\t        this.windows = {\n\t            phone:  match(windows_phone, ua),\n\t            tablet: match(windows_tablet, ua),\n\t            device: match(windows_phone, ua) || match(windows_tablet, ua)\n\t        };\n\t        this.other = {\n\t            blackberry:   match(other_blackberry, ua),\n\t            blackberry10: match(other_blackberry_10, ua),\n\t            opera:        match(other_opera, ua),\n\t            firefox:      match(other_firefox, ua),\n\t            chrome:       match(other_chrome, ua),\n\t            device:       match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(other_opera, ua) || match(other_firefox, ua) || match(other_chrome, ua)\n\t        };\n\t        this.seven_inch = match(seven_inch, ua);\n\t        this.any = this.apple.device || this.android.device || this.windows.device || this.other.device || this.seven_inch;\n\t        // excludes 'other' devices and ipods, targeting touchscreen phones\n\t        this.phone = this.apple.phone || this.android.phone || this.windows.phone;\n\t        // excludes 7 inch devices, classifying as phone or tablet is left to the user\n\t        this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet;\n\t\n\t        if (typeof window === 'undefined') {\n\t            return this;\n\t        }\n\t    };\n\t\n\t    var instantiate = function() {\n\t        var IM = new IsMobileClass();\n\t        IM.Class = IsMobileClass;\n\t        return IM;\n\t    };\n\t\n\t    if (typeof module != 'undefined' && module.exports && typeof window === 'undefined') {\n\t        //node\n\t        module.exports = IsMobileClass;\n\t    } else if (typeof module != 'undefined' && module.exports && typeof window !== 'undefined') {\n\t        //browserify\n\t        module.exports = instantiate();\n\t    } else if (true) {\n\t        //AMD\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (global.isMobile = instantiate()), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else {\n\t        global.isMobile = instantiate();\n\t    }\n\t\n\t})(this);\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tvar stylesInDom = {},\r\n\t\tmemoize = function(fn) {\r\n\t\t\tvar memo;\r\n\t\t\treturn function () {\r\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\t\treturn memo;\r\n\t\t\t};\r\n\t\t},\r\n\t\tisOldIE = memoize(function() {\r\n\t\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t\t}),\r\n\t\tgetHeadElement = memoize(function () {\r\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t\t}),\r\n\t\tsingletonElement = null,\r\n\t\tsingletonCounter = 0,\r\n\t\tstyleElementsInsertedAtTop = [];\r\n\t\r\n\tmodule.exports = function(list, options) {\r\n\t\tif(false) {\r\n\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t\t}\r\n\t\r\n\t\toptions = options || {};\r\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t\t// tags it will allow on a page\r\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\t\r\n\t\t// By default, add <style> tags to the bottom of <head>.\r\n\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\t\r\n\t\tvar styles = listToStyles(list);\r\n\t\taddStylesToDom(styles, options);\r\n\t\r\n\t\treturn function update(newList) {\r\n\t\t\tvar mayRemove = [];\r\n\t\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\t\tvar item = styles[i];\r\n\t\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\t\tdomStyle.refs--;\r\n\t\t\t\tmayRemove.push(domStyle);\r\n\t\t\t}\r\n\t\t\tif(newList) {\r\n\t\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\t\taddStylesToDom(newStyles, options);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction addStylesToDom(styles, options) {\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tif(domStyle) {\r\n\t\t\t\tdomStyle.refs++;\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t\t}\r\n\t\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar parts = [];\r\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction listToStyles(list) {\r\n\t\tvar styles = [];\r\n\t\tvar newStyles = {};\r\n\t\tfor(var i = 0; i < list.length; i++) {\r\n\t\t\tvar item = list[i];\r\n\t\t\tvar id = item[0];\r\n\t\t\tvar css = item[1];\r\n\t\t\tvar media = item[2];\r\n\t\t\tvar sourceMap = item[3];\r\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\t\tif(!newStyles[id])\r\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\t\telse\r\n\t\t\t\tnewStyles[id].parts.push(part);\r\n\t\t}\r\n\t\treturn styles;\r\n\t}\r\n\t\r\n\tfunction insertStyleElement(options, styleElement) {\r\n\t\tvar head = getHeadElement();\r\n\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\t\tif (options.insertAt === \"top\") {\r\n\t\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t\t} else {\r\n\t\t\t\thead.appendChild(styleElement);\r\n\t\t\t}\r\n\t\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t\t} else if (options.insertAt === \"bottom\") {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction removeStyleElement(styleElement) {\r\n\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\t\tif(idx >= 0) {\r\n\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction createStyleElement(options) {\r\n\t\tvar styleElement = document.createElement(\"style\");\r\n\t\tstyleElement.type = \"text/css\";\r\n\t\tinsertStyleElement(options, styleElement);\r\n\t\treturn styleElement;\r\n\t}\r\n\t\r\n\tfunction createLinkElement(options) {\r\n\t\tvar linkElement = document.createElement(\"link\");\r\n\t\tlinkElement.rel = \"stylesheet\";\r\n\t\tinsertStyleElement(options, linkElement);\r\n\t\treturn linkElement;\r\n\t}\r\n\t\r\n\tfunction addStyle(obj, options) {\r\n\t\tvar styleElement, update, remove;\r\n\t\r\n\t\tif (options.singleton) {\r\n\t\t\tvar styleIndex = singletonCounter++;\r\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t\t} else if(obj.sourceMap &&\r\n\t\t\ttypeof URL === \"function\" &&\r\n\t\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\t\ttypeof Blob === \"function\" &&\r\n\t\t\ttypeof btoa === \"function\") {\r\n\t\t\tstyleElement = createLinkElement(options);\r\n\t\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t\tif(styleElement.href)\r\n\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tstyleElement = createStyleElement(options);\r\n\t\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tupdate(obj);\r\n\t\r\n\t\treturn function updateStyle(newObj) {\r\n\t\t\tif(newObj) {\r\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tupdate(obj = newObj);\r\n\t\t\t} else {\r\n\t\t\t\tremove();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tvar replaceText = (function () {\r\n\t\tvar textStore = [];\r\n\t\r\n\t\treturn function (index, replacement) {\r\n\t\t\ttextStore[index] = replacement;\r\n\t\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t\t};\r\n\t})();\r\n\t\r\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\t\tvar css = remove ? \"\" : obj.css;\r\n\t\r\n\t\tif (styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t\t} else {\r\n\t\t\tvar cssNode = document.createTextNode(css);\r\n\t\t\tvar childNodes = styleElement.childNodes;\r\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\t\tif (childNodes.length) {\r\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t\t} else {\r\n\t\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction applyToTag(styleElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\r\n\t\tif(media) {\r\n\t\t\tstyleElement.setAttribute(\"media\", media)\r\n\t\t}\r\n\t\r\n\t\tif(styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = css;\r\n\t\t} else {\r\n\t\t\twhile(styleElement.firstChild) {\r\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t\t}\r\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateLink(linkElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\t\r\n\t\tif(sourceMap) {\r\n\t\t\t// http://stackoverflow.com/a/26603875\r\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t\t}\r\n\t\r\n\t\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\t\r\n\t\tvar oldSrc = linkElement.href;\r\n\t\r\n\t\tlinkElement.href = URL.createObjectURL(blob);\r\n\t\r\n\t\tif(oldSrc)\r\n\t\t\tURL.revokeObjectURL(oldSrc);\r\n\t}\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar THREE = __webpack_require__(32),\n\t\t\tforEach = __webpack_require__(34),\n\t\t\tassign = __webpack_require__(35),\n\t\n\t\t\tiOS = navigator.userAgent.match(/(iPad|iPhone|iPod)/g),\n\t\t\tandroid = navigator.userAgent.toLowerCase().match(/android/g),\n\t\n\t\t\t// https://gist.github.com/dperini/729294\n\t\t\t//urlRegex = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/i,\n\t\t\turlRegex = __webpack_require__(33),\n\t\n\t\t\tdataUri = /^data:image\\/(?:png|jpe?g|gif);/,\n\t\t\tassetPath = '//gw.alicdn.com/tps/',\n\t\n\t\t\timages = {},\n\t\n\t\t\tmaterialTypes = {\n\t\t\t\tlambert: THREE.MeshLambertMaterial,\n\t\t\t\tbasic: THREE.MeshBasicMaterial,\n\t\t\t\tphong: THREE.MeshPhongMaterial,\n\t\t\t\tnormal: THREE.MeshNormalMaterial,\n\t\t\t\tdepth: THREE.MeshDepthMaterial\n\t\t\t},\n\t\t\ttextureFiles = {\n\t    // Will use these when you need it.\n\t\t\t\t'asphalt': {\n\t                map:'TB1kK63NVXXXXaVaFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 12\n\t\t\t\t},\n\t\t\t\t'brick-tiles': {\n\t                map:'TB1YcUKNVXXXXbpXXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 2\n\t\t\t\t},\n\t\t\t\t'bricks': {\n\t\t\t\t\ttype: 'phong',\n\t\t\t\t\trepeat: 4,\n\t                map:'TB1rswLNVXXXXbcXXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\tnormalMap: 'TB1T.7hNVXXXXXlXVXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\tspecularMap: 'TB1WIn.NVXXXXaPapXXXXXXXXXX-512-512.jpg_320x320.jpg'\n\t\t\t\t},\n\t\t\t\t'checkerboard': {\n\t\t\t\t\trepeat: 10,\n\t\t\t\t\tmap: 'TB17ZseNVXXXXbfaXXXXXXXXXXX-256-256.png_140x140.jpg'\n\t\t\t\t},\n\t\t\t\t'grass': {\n\t                map:'TB17jZqNVXXXXc4XFXXXXXXXXXX-256-256.jpg_140x140.jpg',\n\t\t\t\t\trepeat: 12\n\t\t\t\t},\n\t\t\t\t'metal-floor': {\n\t\t\t\t\ttype: 'phong',\n\t\t\t\t\tshininess: 100,\n\t                map:'TB18JAwNVXXXXbiXFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 2\n\t\t\t\t},\n\t\t\t\t'metal': {\n\t                map:'TB1sEEhNVXXXXbSXVXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\ttype: 'phong',\n\t\t\t\t\tshininess: 100,\n\t\t\t\t\tshading: THREE.SmoothShading,\n\t\t\t\t\trepeat: 2\n\t\t\t\t},\n\t\t\t\t'stone': {\n\t                map:'TB1c37bNVXXXXXwaXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 8\n\t\t\t\t},\n\t\t\t\t'tiles': {\n\t                map:'TB1BbZCNVXXXXaMXpXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 4\n\t\t\t\t},\n\t\t\t\t'weathered-wood': {\n\t                map:'TB12QIwNVXXXXXGXFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 8\n\t\t\t\t},\n\t\t\t\t'wood': {\n\t                map:'TB1rpEANVXXXXa8XpXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t                repeat: 4\n\t\t\t\t}\n\t\t\t},\n\t\t\ttextures = {},\n\t\t\tmaterials;\n\t\n\t\tfunction imageTexture(src, mapping, callback) {\n\t\t\tvar image,\n\t\t\t\tparse,\n\t\t\t\ttexture,\n\t\t\t\tisDataUri;\n\t\n\t\t\tfunction imageLoaded() {\n\t\t\t\tvar scale,\n\t\t\t\t\tcanvas,\n\t\t\t\t\tctx,\n\t\t\t\t\tsmallImage;\n\t\n\t\t\t\t/*\n\t\t\t\tiOS doesn't know how to handle large images. Even though the MAX_TEXTURE_SIZE\n\t\t\t\tmay be 4096, it still breaks on images that large. So we scale them down.\n\t            Change 2048 to 1024 fix memory is too high in iOS.\n\t            Modify by KeynesQ\n\t\t\t\t*/\n\t\t\t//\tif (iOS && (image.naturalWidth > 2048 || image.naturalHeight > 2048)) {\n\t\t\t//\t\tscale = 1024 / Math.max( image.naturalWidth, image.naturalHeight );\n\t\n\t\t\t//\t\tcanvas = document.createElement('canvas');\n\t\t\t//\t\tcanvas.width = 1024;\n\t\t\t//\t\tcanvas.height = 512;\n\t\n\t\t\t//\t\tctx = canvas.getContext('2d');\n\t\t\t//\t\tctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, canvas.width, canvas.height);\n\t\n\t\t\t//\t\timage = canvas;\n\t\t\t//\t}\n\t                // Reduce momery in mobile device.\n\t                if ((iOS || android) && (image.naturalWidth > 2048 || image.naturalHeight > 2048)) {\n\t                // scales the image by (float) scale < 1\n\t\n\t                    scale = 1024 / Math.max( image.naturalWidth, image.naturalHeight );\n\t                    canvas = document.createElement('canvas');\n\t                    canvas.width = Math.floor(image.naturalWidth * scale);\n\t                    canvas.height = Math.floor(image.naturalHeight * scale);\n\t\n\t                    ctx = canvas.getContext('2d');\n\t\n\t                    ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, canvas.width, canvas.height);\n\t                   // if (iOS) {\n\t                   //     var dstData = ctx.createImageData(canvas.width, canvas.height),\n\t                   //         dstBuff = dstData.data,\n\t                   //         srcBuff = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n\t                   //     var _worker = new Worker('//h5.m.taobao.com/js/trip/hotel/worker.js');\n\t                   //     _worker.onmessage = function (e) {\n\t                   //         var data = e.data[0];\n\t                   //         // Get new image data\n\t                   //         ctx.putImageData(data, 0, 0);\n\t                   //         texture.image = canvas;\n\t                   //         texture.needsUpdate = true;\n\t                   //         if (typeof callback === 'function') {\n\t                   //             setTimeout(callback.bind(null, texture, image), 1);\n\t                   //         }\n\t                   //         _worker.terminate();\n\t                   //     };\n\t                   //     _worker.postMessage([dstData, srcBuff, canvas.width, canvas.height]);\n\t                   //     return;\n\t                   // }\n\t\n\t                    image = canvas;\n\t                }\n\t\n\t                texture.image = image;\n\t                texture.needsUpdate = true;\n\t                if (typeof callback === 'function') {\n\t                    setTimeout(callback.bind(null, texture, image), 1);\n\t                }\n\t            }\n\t\n\t            parse = dataUri.exec(src);\n\t            isDataUri = !!parse;\n\t            if (!parse) {\n\t                parse = urlRegex.exec(src);\n\t            }\n\t\n\t            // if (!parse) {\n\t            // \tconsole.error('Invalid image URL: ' + src);\n\t            // \treturn;\n\t            // }\n\t\n\t            if (images[src]) {\n\t                image = images[src];\n\t            } else {\n\t                image = document.createElement('img');\n\t                if (parse && (parse[1] && parse[1] !== window.location.hostname || parse[2] && parse[2] !== window.location.port)) {\n\t                    image.crossOrigin = 'anonymous';\n\t                }\n\t                image.src = src;\n\t                images[src] = image;\n\t            }\n\t\n\t            texture = new THREE.Texture(undefined, mapping);\n\t\n\t            if (image.naturalWidth || isDataUri) {\n\t                setTimeout(imageLoaded, 1);\n\t            } else {\n\t                image.addEventListener('load', imageLoaded);\n\t            }\n\t\n\t            return texture;\n\t        }\n\t\n\t\n\t\tfunction material(options) {\n\t\t\tvar opts,\n\t\t\t\tMaterial = materialTypes[options.type] || THREE.MeshLambertMaterial;\n\t\n\t\t\tfunction threeTexture(fn) {\n\t\t\t\tif (typeof fn === 'string') {\n\t\t\t\t\tif (urlRegex.test(fn) || dataUri.test(fn)) {\n\t\t\t\t\t\treturn imageTexture(fn);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfn = textures[fn];\n\t\t\t\t}\n\t\t\t\tif (typeof fn === 'function') {\n\t\t\t\t\treturn fn(options);\n\t\t\t\t}\n\t\n\t\t\t\treturn fn;\n\t\t\t}\n\t\n\t\t\tif (typeof options === 'string') {\n\t\t\t\toptions = {\n\t\t\t\t\tmap: options\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\topts = assign({}, options);\n\t\t\tforEach({\n\t\t\t\tambient: options.ambient || options.color,\n\t\t\t\temissive: options.emissive || options.color,\n\t\t\t\tmap: threeTexture(options.map),\n\t\t\t\tspecularMap: threeTexture(options.specularMap),\n\t\t\t\tnormalMap: threeTexture(options.normalMap),\n\t\t\t\talphaMap: threeTexture(options.alphaMap),\n\t\t\t\tenvMap: threeTexture(options.envMap),\n\t\t\t\tlightMap: threeTexture(options.lightMap)\n\t\t\t}, function (val, key) {\n\t\t\t\tif (val !== undefined) {\n\t\t\t\t\topts[key] = val;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tdelete opts.type;\n\t\n\t\t\treturn new Material(opts);\n\t\t}\n\t\n\t\t//figure out if script is loaded relative so we know where to find the images\n\t//\tassetPath = (function () {\n\t//\t\tvar url,\n\t//\t\t\tscripts;\n\t//\n\t//\t\tif (document.currentScript) {\n\t//\t\t\turl = document.currentScript.getAttribute('src');\n\t//\t\t} else {\n\t//\t\t\tscripts = document.getElementsByTagName('script');\n\t//\t\t\turl = scripts[scripts.length - 1].getAttribute('src');\n\t//\t\t}\n\t//\n\t//\t\tif (!urlRegex.test(url)) {\n\t//\t\t\treturn url.replace(/[a-z\\-\\.]+\\.js$/i, '');\n\t//\t\t}\n\t//\n\t//\t\treturn __ASSET_PATH__;\n\t//\t}());\n\t\n\t\tmaterials = {\n\t\t\tstandard: function () {\n\t\t\t\treturn new THREE.MeshLambertMaterial();\n\t\t\t},\n\t\t\ttextures: textures,\n\t\t\timageTexture: imageTexture,\n\t\t\tmaterial: material,\n\t\t\tlibrary: ['standard']\n\t\t};\n\t\n\t\tforEach(textureFiles, function (props, key) {\n\t\t\tfunction textureFactory(file, options) {\n\t\t\t\tfunction imagePath(url) {\n\t\t\t\t\tif ((/\\.(png|jpg)$/i).test(url)) {\n\t\t\t\t\t\treturn assetPath + url;\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn url;\n\t\t\t\t}\n\t\n\t\t\t\toptions = options || {};\n\t\n\t\t\t\treturn function (opts) {\n\t\t\t\t\tvar texture = imageTexture(imagePath(file));\n\t\n\t\t\t\t\topts = assign({}, options, opts);\n\t\n\t\t\t\t\tif (opts.repeat) {\n\t\t\t\t\t\tif (opts.repeat > 0) {\n\t\t\t\t\t\t\ttexture.repeat.set(opts.repeat, opts.repeat);\n\t\t\t\t\t\t} else if (opts.repeat instanceof THREE.Vector2) {\n\t\t\t\t\t\t\ttexture.repeat.copy(opts.repeat);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttexture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\t}\n\t\t\t\t\treturn texture;\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\tvar map = textureFactory(props.map || key + '.jpg', props),\n\t\t\t\tmaterialDef;\n\t\n\t\t\tmaterialDef = assign({}, props, {\n\t\t\t\tmap: map\n\t\t\t});\n\t\t\ttextures[key] = map;\n\t\n\t\t\tif (props.normalMap) {\n\t\t\t\tmaterialDef.normalMap = textures[key + '-normal'] = textureFactory(props.normalMap, props);\n\t\t\t}\n\t\n\t\t\tif (props.specularMap) {\n\t\t\t\tmaterialDef.specularMap = textures[key + '-specular'] = textureFactory(props.specularMap, props);\n\t\t\t}\n\t\n\t\t\tmaterials.library.push(key);\n\t\t\tmaterials[key] = function (options) {\n\t\t\t\tvar opts = assign({}, materialDef, options);\n\t\n\t\t\t\treturn material(opts);\n\t\t\t};\n\t\t});\n\t\n\t\treturn materials;\n\t\n\t\t//var parse = urlRegex.exec('https://lh5.googleusercontent.com:80/-SNO8rWDqbUM/U085rfOBRuI/AAAAAAAAEdM/nWEWCtNceZ0/w955-h382-no/PANO_20130225_131211.jpg');\n\t}());\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar\tNEAR_DISTANCE = 3,\n\t\t\tmaterials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(32),\n\t\t\teventEmitter = __webpack_require__(30),\n\t\n\t\t\txAxis = new THREE.Vector3(1, 0, 0),\n\t\t\tyAxis = new THREE.Vector3(0, 1, 0),\n\t\t\tzAxis = new THREE.Vector3(0, 0, 1),\n\t\n\t\t\tscratchVector1 = new THREE.Vector3(),\n\t\t\tscratchVector2 = new THREE.Vector3(),\n\t\n\t\t\tallObjects = window.WeakMap ? new window.WeakMap() : {};\n\t\n\t\tfunction distance(object, origin) {\n\t\t\tvar geometry;\n\t\n\t\t\tgeometry = object.geometry;\n\t\n\t\t\t//assumes object world matrix has been updated\n\t\t\tscratchVector1.setFromMatrixPosition(origin.matrixWorld);\n\t\n\t\t\tif (!geometry) {\n\t\t\t\t//first convert to world coordinate\n\t\t\t\tscratchVector2.setFromMatrixPosition(object.matrixWorld);\n\t\t\t\treturn scratchVector2.distanceTo(scratchVector1);\n\t\t\t}\n\t\n\t\t\tobject.worldToLocal(scratchVector1);\n\t\t\treturn object.geometry.boundingBox.distanceToPoint(scratchVector1);\n\t\t}\n\t\n\t\tfunction VRObject(parent, creator, body, options) {\n\t\t\tvar material,\n\t\t\t\tobject,\n\t\t\t\tself = this,\n\t\n\t\t\t\tisNear = false,\n\t\t\t\tisTarget = false,\n\t\n\t\t\t\tcamera = body && (function () {\n\t\t\t\t\tvar i,\n\t\t\t\t\t\tc;\n\t\t\t\t\tfor (i = 0; i < body.children.length; i++) {\n\t\t\t\t\t\tc = body.children[i];\n\t\t\t\t\t\tif (c instanceof THREE.PerspectiveCamera) {\n\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}()),\n\t\t\t\tfrustum,\n\t\t\t\tcameraViewProjectionMatrix,\n\t\n\t\t\t\traycaster;\n\t\n\t\t\toptions = options || {};\n\t\n\t\t\teventEmitter(this);\n\t\n\t\t\tif (body) {\n\t\t\t\t// raycaster = new THREE.Raycaster();\n\t\n\t\t\t\tthis.update = function () {\n\t\t\t\t\tvar wasNear = isNear,\n\t\t\t\t\t\twasTarget = isTarget,\n\t\n\t\t\t\t\t\tintersects, intersect, i;\n\t\n\t\t\t\t\tisNear = self.distance < NEAR_DISTANCE;\n\t\t\t\t\tif (isNear !== wasNear) {\n\t\t\t\t\t\tif (isNear) {\n\t\t\t\t\t\t\tself.emit('near', self);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.emit('far', self);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/*\n\t\t\t\t\traycaster.ray.origin.copy(origin);\n\t\t\t\t\traycaster.ray.direction.set(0, 0, 0.5).unproject(camera).sub(origin).normalize();\n\t\n\t\t\t\t\t//todo: consider whether this needs to be recursive. maybe a different event\n\t\t\t\t\tintersects = raycaster.intersectObject(object);\n\t\t\t\t\tif (intersects.length) {\n\t\t\t\t\t\tisTarget = true;\n\t\t\t\t\t\tif (!wasTarget) {\n\t\t\t\t\t\t\tself.emit('target-on', intersects[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (wasTarget) {\n\t\t\t\t\t\tself.emit('target-off');\n\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t//todo: get material from options\n\t\t\tthis.object = object = creator.call(this, parent, options);\n\t\t\tthis.parent = this.object.parent || parent;\n\t\n\t\t\tif (object instanceof THREE.Mesh) {\n\t\t\t\tif (options.castShadow !== false) {\n\t\t\t\t\tobject.castShadow = true;\n\t\t\t\t}\n\t\t\t\tif (options.receiveShadow !== false) {\n\t\t\t\t\tobject.receiveShadow = true;\n\t\t\t\t}\n\t\n\t\t\t\tif (object.geometry) {\n\t\t\t\t\tobject.geometry.computeBoundingBox();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (options.name !== undefined) {\n\t\t\t\tobject.name = options.name;\n\t\t\t}\n\t\t\tself.name = object.name;\n\t\n\t\t\tif (allObjects.set) {\n\t\t\t\tallObjects.set(object, this);\n\t\t\t} else {\n\t\t\t\tallObjects[object.id] = this;\n\t\t\t}\n\t\n\t\t\tobject.position.set(\n\t\t\t\tparseFloat(options.x) || 0,\n\t\t\t\tparseFloat(options.y) || 0,\n\t\t\t\tparseFloat(options.z) || 0\n\t\t\t);\n\t\n\t\t\tthis.setMaterial(options.material);\n\t\n\t\t\tif (options.color) {\n\t\t\t\tmaterial = object.material;\n\t\t\t\tmaterial.color = new THREE.Color(options.color);\n\t\t\t\tmaterial.ambient = material.color;\n\t\t\t}\n\t\n\t\t\t['position', 'scale', 'rotation', 'quaternion', 'material'].forEach(function (prop) {\n\t\t\t\tif (prop in object && !self[prop]) {\n\t\t\t\t\tself[prop] = object[prop];\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'visible', {\n\t\t\t\tset: function (val) {\n\t\t\t\t\tself.object.visible = !!val;\n\t\t\t\t},\n\t\t\t\tget: function () {\n\t\t\t\t\treturn self.object.visible;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'distance', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn distance(self.object, body || parent);\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tif (camera) {\n\t\t\t\tfrustum = new THREE.Frustum();\n\t\t\t\tcameraViewProjectionMatrix = new THREE.Matrix4();\n\t\t\t\tObject.defineProperty(this, 'inView', {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\tcamera.updateMatrixWorld(); // make sure the camera matrix is updated\n\t\t\t\t\t\tcamera.matrixWorldInverse.getInverse(camera.matrixWorld);\n\t\t\t\t\t\tcameraViewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\t\t\t\t\t\tfrustum.setFromMatrix(cameraViewProjectionMatrix);\n\t\t\t\t\t\treturn frustum.intersectsObject(self.object);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\n\t\tVRObject.prototype.hide = function () {\n\t\t\tthis.object.visible = false;\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.show = function () {\n\t\t\tthis.object.visible = true;\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.moveTo = function (x, y, z) {\n\t\t\tvar position = this.object.position;\n\t\n\t\t\tx = !isNaN(x) ? x : position.x;\n\t\t\ty = !isNaN(y) ? y : position.y;\n\t\t\tz = !isNaN(z) ? z : position.z;\n\t\n\t\t\tposition.set(x, y, z);\n\t\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.moveX = function (distance) {\n\t\t\tthis.object.translateX(distance);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.moveY = function (distance) {\n\t\t\tthis.object.translateY(distance);\n\t\t\treturn this;\n\t\t};\n\t\tVRObject.prototype.moveUp = VRObject.prototype.moveY;\n\t\tVRObject.prototype.moveDown = function (distance) {\n\t\t\tthis.moveY(-distance);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.moveZ = function (distance) {\n\t\t\tthis.object.translateZ(distance);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.rotateX = function (angle) {\n\t\t\tthis.object.rotateOnAxis(xAxis, angle);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.rotateY = function (angle) {\n\t\t\tthis.object.rotateOnAxis(yAxis, angle);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.rotateZ = function (angle) {\n\t\t\tthis.object.rotateOnAxis(zAxis, angle);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.setScale = function (x, y, z) {\n\t\t\tvar scale = this.object.scale;\n\t\n\t\t\tif (x !== undefined && !isNaN(x)) {\n\t\t\t\tif (y === undefined && z === undefined) {\n\t\t\t\t\ty = z = x;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tx = !isNaN(x) ? x : scale.x;\n\t\t\ty = !isNaN(y) ? y : scale.y;\n\t\t\tz = !isNaN(z) ? z : scale.z;\n\t\n\t\t\tscale.set(x, y, z);\n\t\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.setMaterial = function (material, options) {\n\t\t\tif (material && this.object instanceof THREE.Mesh) {\n\t\t\t\tif (typeof material === 'function') {\n\t\t\t\t\tmaterial = material();\n\t\t\t\t} else if (typeof material === 'string' && materials[material]) {\n\t\t\t\t\tmaterial = materials[material](options);\n\t\t\t\t} else if (material && !(material instanceof THREE.Material) && typeof material !== 'number') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tmaterial = materials.material(material);\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\t\n\t\t\t\tif (material instanceof THREE.Material) {\n\t\t\t\t\tthis.object.material = material;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.update = function () {};\n\t\n\t\tVRObject.prototype.raycastable = true;\n\t\n\t\tVRObject.repeat = function (count, options) {\n\t\t\tvar i,\n\t\t\t\tchange = false,\n\t\t\t\tlastObject = this,\n\t\t\t\tcurrentPosition = new THREE.Vector3(),\n\t\t\t\tdeltaPosition = new THREE.Vector3(),\n\t\t\t\tcurrentQuaternion = new THREE.Quaternion(),\n\t\t\t\tdeltaQuaternion = new THREE.Quaternion();\n\t\n\t\t\tif (!options) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif (options.offset) {}\n\t\n\t\t\tfor (i = 0; i < count; i++) {\n\t\n\t\t\t}\n\t\t};\n\t\n\t\tVRObject.findObject = function (object) {\n\t\t\tif (object instanceof VRObject) {\n\t\t\t\treturn object;\n\t\t\t}\n\t\n\t\t\tif (object && object instanceof THREE.Object3D) {\n\t\t\t\tif (allObjects.get) {\n\t\t\t\t\treturn allObjects.get(object);\n\t\t\t\t}\n\t\n\t\t\t\treturn allObjects[object.id];\n\t\t\t}\n\t\n\t\t\t// if (typeof object === 'number') {\n\t\t\t// \treturn allObjects[object];\n\t\t\t// }\n\t\t};\n\t\n\t\treturn VRObject;\n\t\n\t}());\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(32);\n\t\n\t\treturn function empty(parent, options) {\n\t\t\tvar obj = new THREE.Object3D();\n\t\n\t\t\tobj.name = 'empty';\n\t\n\t\t\tparent.add(obj);\n\t\n\t\t\treturn obj;\n\t\t};\n\t}());\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar map = {\n\t\t\"./box\": 11,\n\t\t\"./box.js\": 11,\n\t\t\"./cylinder\": 12,\n\t\t\"./cylinder.js\": 12,\n\t\t\"./empty\": 8,\n\t\t\"./empty.js\": 8,\n\t\t\"./floor\": 13,\n\t\t\"./floor.js\": 13,\n\t\t\"./grid\": 14,\n\t\t\"./grid.js\": 14,\n\t\t\"./image\": 15,\n\t\t\"./image.js\": 15,\n\t\t\"./panorama\": 16,\n\t\t\"./panorama.js\": 16,\n\t\t\"./sky\": 17,\n\t\t\"./sky.js\": 17,\n\t\t\"./sound\": 18,\n\t\t\"./sound.js\": 18,\n\t\t\"./sphere\": 19,\n\t\t\"./sphere.js\": 19,\n\t\t\"./text\": 20,\n\t\t\"./text.js\": 20,\n\t\t\"./torus\": 21,\n\t\t\"./torus.js\": 21,\n\t\t\"./video\": 22,\n\t\t\"./video.js\": 22\n\t};\n\tfunction webpackContext(req) {\n\t\treturn __webpack_require__(webpackContextResolve(req));\n\t};\n\tfunction webpackContextResolve(req) {\n\t\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n\t};\n\twebpackContext.keys = function webpackContextKeys() {\n\t\treturn Object.keys(map);\n\t};\n\twebpackContext.resolve = webpackContextResolve;\n\tmodule.exports = webpackContext;\n\twebpackContext.id = 9;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * NoSleep.js v0.5.0 - git.io/vfn01\n\t * Rich Tibbett\n\t * MIT license\n\t **/\n\t(function(root) {\n\t  // UA matching\n\t  var ua = {\n\t    Android: /Android/ig.test(navigator.userAgent),\n\t    iOS: /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent)\n\t  };\n\t\n\t  var media = {\n\t    WebM: \"data:video/webm;base64,GkXfo0AgQoaBAUL3gQFC8oEEQvOBCEKCQAR3ZWJtQoeBAkKFgQIYU4BnQI0VSalmQCgq17FAAw9CQE2AQAZ3aGFtbXlXQUAGd2hhbW15RIlACECPQAAAAAAAFlSua0AxrkAu14EBY8WBAZyBACK1nEADdW5khkAFVl9WUDglhohAA1ZQOIOBAeBABrCBCLqBCB9DtnVAIueBAKNAHIEAAIAwAQCdASoIAAgAAUAmJaQAA3AA/vz0AAA=\",\n\t    MP4: \"data:video/mp4;base64,AAAAHGZ0eXBpc29tAAACAGlzb21pc28ybXA0MQAAAAhmcmVlAAAAG21kYXQAAAGzABAHAAABthADAowdbb9/AAAC6W1vb3YAAABsbXZoZAAAAAB8JbCAfCWwgAAAA+gAAAAAAAEAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIVdHJhawAAAFx0a2hkAAAAD3wlsIB8JbCAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAIAAAACAAAAAABsW1kaWEAAAAgbWRoZAAAAAB8JbCAfCWwgAAAA+gAAAAAVcQAAAAAAC1oZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVmlkZW9IYW5kbGVyAAAAAVxtaW5mAAAAFHZtaGQAAAABAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEAAAAMdXJsIAAAAAEAAAEcc3RibAAAALhzdHNkAAAAAAAAAAEAAACobXA0dgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIAAgASAAAAEgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABj//wAAAFJlc2RzAAAAAANEAAEABDwgEQAAAAADDUAAAAAABS0AAAGwAQAAAbWJEwAAAQAAAAEgAMSNiB9FAEQBFGMAAAGyTGF2YzUyLjg3LjQGAQIAAAAYc3R0cwAAAAAAAAABAAAAAQAAAAAAAAAcc3RzYwAAAAAAAAABAAAAAQAAAAEAAAABAAAAFHN0c3oAAAAAAAAAEwAAAAEAAAAUc3RjbwAAAAAAAAABAAAALAAAAGB1ZHRhAAAAWG1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAAK2lsc3QAAAAjqXRvbwAAABtkYXRhAAAAAQAAAABMYXZmNTIuNzguMw==\"\n\t  };\n\t\n\t  function addSourceToVideo(element, type, dataURI) {\n\t    var source = document.createElement('source');\n\t    source.src = dataURI;\n\t    source.type = \"video/\" + type;\n\t    element.appendChild(source);\n\t  }\n\t\n\t  // NoSleep instance constructor\n\t  var NoSleep = function() {\n\t    if (ua.iOS) {\n\t      this.noSleepTimer = null;\n\t    } else if (ua.Android) {\n\t      // Set up no sleep video element\n\t      this.noSleepVideo = document.createElement('video');\n\t      this.noSleepVideo.setAttribute(\"loop\", \"\");\n\t\n\t      // Append nosleep video sources\n\t      addSourceToVideo(this.noSleepVideo, \"webm\", media.WebM);\n\t      addSourceToVideo(this.noSleepVideo, \"mp4\", media.MP4);\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  // Enable NoSleep instance\n\t  NoSleep.prototype.enable = function(duration) {\n\t    if (ua.iOS) {\n\t      this.disable();\n\t      this.noSleepTimer = window.setInterval(function() {\n\t        window.location = window.location;\n\t        window.setTimeout(window.stop, 0);\n\t      }, duration || 15000);\n\t    } else if (ua.Android) {\n\t      this.noSleepVideo.play();\n\t    }\n\t  };\n\t\n\t  // Disable NoSleep instance\n\t  NoSleep.prototype.disable = function() {\n\t    if (ua.iOS) {\n\t      if (this.noSleepTimer) {\n\t        window.clearInterval(this.noSleepTimer);\n\t        this.noSleepTimer = null;\n\t      }\n\t    } else if (ua.Android) {\n\t      this.noSleepVideo.pause();\n\t    }\n\t  };\n\t\n\t  // Append NoSleep API to root object\n\t  root.NoSleep = NoSleep;\n\t})(this);\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(32),\n\t\t\tgeometry = new THREE.BoxGeometry( 1, 1, 1 );\n\t\n\t\treturn function box(parent, options) {\n\t\t\tvar mesh;\n\t\n\t\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\t\tmesh.name = 'box';\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(32);\n\t\n\t\tfunction cylinder(parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmesh;\n\t\n\t\t\tgeometry = new THREE.CylinderGeometry(\n\t\t\t\toptions.radiusTop === undefined ? 0.5 : options.radiusTop,\n\t\t\t\toptions.radiusBottom === undefined ? 0.5 : options.radiusBottom,\n\t\t\t\toptions.height === undefined ? 1 : options.height,\n\t\t\t\toptions.radiusSegments === undefined ? 16 : options.radiusSegments,\n\t\t\t\toptions.heightSegments,\n\t\t\t\toptions.openEnded\n\t\t\t);\n\t\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\t\tmesh.name = 'cylinder';\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t}\n\t\n\t\treturn cylinder;\n\t}());\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(32);\n\t\n\t\tfunction floor(parent, options) {\n\t\t\tvar obj,\n\t\t\t\tgeometry;\n\t\n\t\t\tgeometry = new THREE.CircleGeometry( options.radius || 100, options.segments || 16 );\n\t\t\tgeometry.applyMatrix( new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\t\n\t\t\tobj = new THREE.Mesh(\n\t\t\t\tgeometry,\n\t\t\t\tmaterials.checkerboard({\n\t\t\t\t\trepeat: 100\n\t\t\t\t})\n\t\t\t);\n\t\t\tobj.name = 'floor';\n\t\n\t\t\tobj.receiveShadow = true;\n\t\n\t\t\tparent.add(obj);\n\t\n\t\t\treturn obj;\n\t\t}\n\t\n\t\treturn floor;\n\t}());\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar THREE = __webpack_require__(32);\n\t\n\t\treturn function box(parent, options) {\n\t\t\tvar obj,\n\t\t\t\tsize = options && options.size || 10,\n\t\t\t\tstep = options && options.step || 1;\n\t\n\t\t\tobj = new THREE.GridHelper(size, step);\n\t\t\tobj.name = 'grid';\n\t\t\tif (options) {\n\t\t\t\tobj.setColors(options.colorCenterLine || obj.color1, options.colorGrid || obj.color2);\n\t\t\t}\n\t\t\tobj.geometry.computeBoundingBox();\n\t\n\t\t\tparent.add(obj);\n\t\n\t\t\treturn obj;\n\t\t};\n\t}());\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(32);\n\t\n\t\treturn function image(parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmaterial,\n\t\t\t\tmesh,\n\t\t\t\tsrc,\n\t\t\t\ttex,\n\t\t\t\tself = this;\n\t\n\t\t\tif (typeof options === 'string') {\n\t\t\t\tsrc = options;\n\t\t\t} else if (options) {\n\t\t\t\tsrc = options.src;\n\t\t\t}\n\t\n\t\t\tif (src) {\n\t\t\t\ttex = materials.imageTexture(src, THREE.UVMapping, function (t, image) {\n\t\t\t\t\t//todo: don't do any of this if object has been deleted\n\t\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(1, image.naturalHeight / image.naturalWidth, 1));\n\t\t\t\t\tmaterial.map = tex;\n\t\t\t\t\tmaterial.visible = true;\n\t\t\t\t\tmesh.visible = true;\n\t\t\t\t\tparent.add(mesh);\n\t\n\t\t\t\t\tself.emit('loaded');\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1, 8);\n\t\n\t\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t\tside: THREE.DoubleSide,\n\t\t\t\ttransparent: true,\n\t\t\t\tmap: tex\n\t\t\t});\n\t\n\t\t\tmesh = new THREE.Mesh( geometry, material );\n\t\n\t\t\tmesh.visible = false;\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t    var p = {};\n\t        p.scaleX = p.scaleX || 1;\n\t        p.scaleY = p.scaleY || 1;\n\t        p.offsetX = p.offsetX || 0;\n\t        p.offsetY = p.offsetY || 0;\n\t        p.phiStart = p.phiStart || 0;\n\t        p.phiLength = p.phiLength || Math.PI * 2;\n\t        p.thetaStart = p.thetaStart || 0;\n\t        p.thetaLength = p.thetaLength || Math.PI;\n\t    // Reduce ptr.\n\t    var isSupportWebgl = Boolean(window.isSupportWebgl);\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(32),\n\t        // geometry = new THREE.BoxGeometry(15, 15, 15, 10, 10, 10);\n\t            // geometry = new THREE.SphereGeometry(100, 60, 60);\n\t        // geometry = new THREE.SphereGeometry(60, 100, 100,\n\t        geometry = new THREE.SphereGeometry(16, 32, 32, p.phiStart, p.phiLength, p.thetaStart, p.thetaLength);\n\t        geometry.applyMatrix(new THREE.Matrix4().makeScale(-2, 2, 2.3));\n\t        geometry.applyMatrix(new THREE.Matrix4().makeRotationY(- Math.PI / 3));\n\t    // Will not render panorama if already contains the key.\n\t    var mapRender = {};\n\t    var isListener = false;\n\t    // Will use css3drenderer if not support webgl.\n\t    \n\t    var texturePlaceholder = document.createElement( 'canvas' );\n\t    texturePlaceholder.width = 128;\n\t    texturePlaceholder.height = 128;\n\t    var context = texturePlaceholder.getContext( '2d' );\n\t    context.fillStyle = 'rgb( 200, 200, 200 )';\n\t    context.fillRect( 0, 0, texturePlaceholder.width, texturePlaceholder.height );\n\t\n\t    function loadTexture( path, _parent ) {\n\t        var texture = new THREE.Texture( texturePlaceholder );\n\t        var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5 } );\n\t        var image = new Image();\n\t        image.onload = function () {\n\t            texture.image = this;\n\t            texture.needsUpdate = true;\n\t            _parent.dispatchEvent({\n\t                type: 'img-loaded'\n\t            });\n\t        };\n\t        image.src = path;\n\t        return material;\n\t    }\n\t\n\t\treturn function panorama(parent, options) {\n\t        var src,\n\t            preview,\n\t            cubeSrc = {};\n\t\t\tvar self = this;\n\t\t\tvar material,\n\t\t\t\tmesh,\n\t            pretex,\n\t            mapKey,\n\t\t\t\ttex;\n\t\n\t\t\tif (typeof options === 'string') {\n\t\t\t\tsrc = options;\n\t\t\t} else if (options) {\n\t\t\t\tsrc = options.src;\n\t            preview = options.preview;\n\t            if (options.left) {\n\t                cubeSrc.left = options.left;\n\t                cubeSrc.right = options.right;\n\t                cubeSrc.down = options.down;\n\t                cubeSrc.top = options.top;\n\t                cubeSrc.front = options.front;\n\t                cubeSrc.back = options.back;\n\t            }\n\t\t\t}\n\t        mapKey = src;\n\t        if (!isSupportWebgl) {\n\t            mapKey = cubeSrc.left;\n\t        }\n\t        if (mapRender[mapKey]) {\n\t            // Remove all mesh object if scene contains them.\n\t            // Optimezei and Reduce Memory Usage for Panorama Model.\n\t            for (var key in mapRender) {\n\t                if(mapRender.hasOwnProperty(key)) {\n\t                    while (parent.getObjectByName(key)) {\n\t                        parent.remove(parent.getObjectByName(key));\n\t                    }\n\t                }\n\t            }\n\t            parent.add(mapRender[mapKey]);\n\t            parent.dispatchEvent({\n\t                type: 'img-loaded'\n\t            });\n\t            return mapRender[mapKey];\n\t        }\n\t        if (!isSupportWebgl) {\n\t            var arrMaterial = [\n\t                loadTexture( cubeSrc.right, parent ), // right\n\t                loadTexture( cubeSrc.left, parent ), // left\n\t                loadTexture( cubeSrc.top, parent ), // top\n\t                loadTexture( cubeSrc.down, parent ), // bottom\n\t                loadTexture( cubeSrc.front, parent ), // front\n\t                loadTexture( cubeSrc.back, parent ) // back\n\t            ];\n\t\n\t            mesh = new THREE.Mesh( new THREE.BoxGeometry( 30, 30, 30, 10, 10, 10 ), new THREE.MultiMaterial( arrMaterial ) );\n\t            mesh.scale.x = - 1;\n\t            // The primy name use one of array.\n\t            mesh.name = mapKey;\n\t            // Fisheye\n\t            // for ( var i = 0, l = mesh.geometry.vertices.length; i < l; i ++ ) {\n\t            //     var vertex = mesh.geometry.vertices[ i ];\n\t            //     vertex.normalize();\n\t            //     vertex.multiplyScalar( 550 );\n\t            // }\n\t            mapRender[mapKey] = mesh;\n\t            parent.add( mesh );\n\t            return mesh;\n\t        }\n\t\n\t\t\tif (preview) {\n\t\t\t\tpretex = materials.imageTexture(preview, THREE.UVMapping, function () {\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tif (src) {\n\t            if (!isListener) {\n\t                parent.addEventListener('loaded', function (event) {\n\t                    var data = event.data;\n\t                    while (parent.getObjectByName('preview')) {\n\t                        parent.remove(parent.getObjectByName('preview'));\n\t                    }\n\t\n\t                    material = new THREE.MeshBasicMaterial({\n\t                        map: data.tex\n\t                    });\n\t                    mesh = new THREE.Mesh(geometry, material);\n\t                    mapRender[data.src] = mesh;\n\t\n\t                    mesh.name = src;\n\t\n\t                    parent.add(mesh);\n\t                    parent.dispatchEvent({\n\t                        type: 'img-loaded'\n\t                    });\n\t                });\n\t                isListener = true;\n\t            }\n\t\t\t\ttex = materials.imageTexture(src, THREE.UVMapping, function () {\n\t                parent.dispatchEvent({\n\t                    type: 'loaded',\n\t                    data: {\n\t                        src: src,\n\t                        tex: tex\n\t                    }\n\t                });\n\t\t\t\t\tself.emit('loaded');\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t\t// transparent: true,\n\t\t\t\t// envMap: tex,\n\t\t\t\tmap: pretex\n\t            // side: THREE.DoubleSide,\n\t            // debug\n\t            // wireframe: true,\n\t            // depthWrite: false\n\t            // envMap:cubemap\n\t\t\t});\n\t\n\t\t\tmesh = new THREE.Mesh(geometry, material);\n\t\n\t\t\tif (options && options.stereo) {\n\t\t\t\tif (options.stereo === 'vertical') {\n\t\t\t\t\ttex.repeat.y = 0.5;\n\t\t\t\t} else {\n\t\t\t\t\ttex.repeat.x = 0.5;\n\t\t\t\t}\n\t\t\t\tmesh.userData.stereo = options.stereo;\n\t\t\t}\n\t\n\t        mesh.name = 'preview';\n\t\n\t        parent.add(mesh);\n\t\n\t\t\tthis.raycastable = false;\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(32),\n\t\t\tTAU = Math.PI * 2,\n\t\t\tHALF_PI = Math.PI / 2,\n\t\n\t\t\tdistance = 400000,\n\t\t\tscratchVector = new THREE.Vector3(),\n\t\n\t\t\tparams = [\n\t\t\t\t'luminance',\n\t\t\t\t'turbidity',\n\t\t\t\t'reileigh',\n\t\t\t\t'mieCoefficient',\n\t\t\t\t'mieDirectionalG'\n\t\t\t];\n\t\n\t\t__webpack_require__(37);\n\t\n\t\treturn function sky(parent, options) {\n\t\t\tvar obj = new THREE.Sky(),\n\t\t\t\tself = this,\n\t\t\t\tscene = parent,\n\t\t\t\tlight,\n\t\t\t\tsunPosition,\n\t\t\t\tazimuth = Math.PI / 6,\n\t\t\t\taltitude = Math.PI / 6;\n\t\n\t\t\tfunction mod(x, y) {\n\t\t\t\treturn x - y * Math.floor(x / y);\n\t\t\t}\n\t\n\t\t\tfunction update() {\n\t\t\t\tvar sinTheta,\n\t\t\t\t\tcosTheta,\n\t\t\t\t\tphi,\n\t\t\t\t\tsinPhi,\n\t\t\t\t\tcosPhi;\n\t\n\t\t\t\tsinTheta = Math.sin(altitude);\n\t\t\t\tcosTheta = Math.cos(altitude);\n\t\t\t\tphi = -HALF_PI - azimuth;\n\t\t\t\tsinPhi = Math.sin(phi);\n\t\t\t\tcosPhi = Math.cos(phi);\n\t\n\t\t\t\tsunPosition.set(\n\t\t\t\t\tdistance * cosPhi * cosTheta,\n\t\t\t\t\tdistance * sinTheta,\n\t\t\t\t\tdistance * sinPhi * cosTheta\n\t\t\t\t);\n\t\n\t\t\t\tif (light) {\n\t\t\t\t\tlight.intensity = 1.5 * Math.max(0.0, 1.0 - Math.exp(-((Math.PI / 1.95 - Math.abs(HALF_PI - altitude)) / 1.5)));\n\t\t\t\t\tlight.position.copy(sunPosition).normalize().multiplyScalar(100);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tobj.mesh.name = 'sky';\n\t\n\t\t\tparent.add(obj.mesh);\n\t\n\t\t\twhile (!(scene instanceof THREE.Scene) && scene.parent) {\n\t\t\t\tscene = scene.parent;\n\t\t\t}\n\t\t\tlight = scene.getObjectByName('directional-light');\n\t\n\t\t\tthis.setOptions = function (options) {\n\t\t\t\tvar needUpdate = false,\n\t\t\t\t\taltitude,\n\t\t\t\t\tazimuth;\n\t\n\t\t\t\tif (options) {\n\t\t\t\t\tparams.forEach(function (param) {\n\t\t\t\t\t\tvar val = options[param];\n\t\t\t\t\t\tif (val !== undefined) {\n\t\t\t\t\t\t\tval = parseFloat(val);\n\t\t\t\t\t\t\tif (!isNaN(val)) {\n\t\t\t\t\t\t\t\tobj.uniforms[param].value = val;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\n\t\t\t\t\tif (options.sunPosition instanceof THREE.Vector3) {\n\t\t\t\t\t\tobj.uniforms.sunPosition.value.copy(options.sunPosition);\n\t\t\t\t\t} else if (Array.isArray(options.sunPosition)) {\n\t\t\t\t\t\tobj.uniforms.sunPosition.value.set(obj.uniforms.sunPosition.value, options.sunPosition);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.altitude = options.altitude;\n\t\t\t\t\t\tself.azimuth = options.azimuth;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tObject.defineProperty(this, 'azimuth', {\n\t\t\t\tset: function (val) {\n\t\t\t\t\tval = mod(parseFloat(val), TAU);\n\t\t\t\t\tif (!isNaN(val) && val !== azimuth) {\n\t\t\t\t\t\tazimuth = val;\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tget: function () {\n\t\t\t\t\treturn azimuth;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'altitude', {\n\t\t\t\tset: function (val) {\n\t\t\t\t\tval = mod(parseFloat(val), TAU);\n\t\t\t\t\tif (!isNaN(val) && val !== altitude) {\n\t\t\t\t\t\taltitude = val;\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tget: function() {\n\t\t\t\t\treturn altitude;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tthis.setAltitude = function (val) {\n\t\t\t\tself.altitude = val;\n\t\t\t\treturn this;\n\t\t\t};\n\t\n\t\t\tthis.setAzimuth = function (val) {\n\t\t\t\tself.azimuth = val;\n\t\t\t\treturn this;\n\t\t\t};\n\t\n\t\t\tsunPosition = obj.uniforms.sunPosition.value;\n\t\t\tupdate();\n\t\n\t\t\tthis.setOptions(options);\n\t\n\t\t\tthis.raycastable = false;\n\t\n\t\t\treturn obj.mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(32);\n\t\n\t\t__webpack_require__(36);\n\t\n\t\treturn function sound(parent, options) {\n\t\t\tvar obj,\n\t\t\t\tsrc,\n\t\t\t\tlistener,\n\t\t\t\tscene = parent;\n\t\n\t\t\tif (typeof options === 'string' || Array.isArray(options)) {\n\t\t\t\tsrc = options;\n\t\t\t} else if (options) {\n\t\t\t\tsrc = options.src;\n\t\t\t}\n\t\n\t\t\twhile (!(scene instanceof THREE.Scene) && scene.parent) {\n\t\t\t\tscene = scene.parent;\n\t\t\t}\n\t\n\t\t\tlistener = scene.getObjectByName('audio-listener');\n\t\t\tobj = new THREE.Audio(listener);\n\t\t\t// obj.setLoop(true);\n\t\t\tobj.load(src);\n\t\n\t\t\tthis.start = obj.start.bind(obj);\n\t\t\tthis.volume = obj.volume.bind(obj);\n\t\n\t\t\tparent.add(obj);\n\t\n\t\t\treturn obj;\n\t\t};\n\t}());\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(32);\n\t\n\t\treturn function box(parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmesh;\n\t\n\t\t\tgeometry = new THREE.SphereGeometry(\n\t\t\t\toptions.radius === undefined ? 0.5 : options.radius,\n\t\t\t\toptions.widthSegments === undefined ? 16 : options.widthSegments,\n\t\t\t\toptions.heightSegments === undefined ? 12 : options.heightSegments,\n\t\t\t\toptions.phiStart,\n\t\t\t\toptions.phiLength,\n\t\t\t\toptions.thetaStart,\n\t\t\t\toptions.thetaLength\n\t\t\t);\n\t\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\t\tmesh.name = 'sphere';\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar THREE = __webpack_require__(32),\n\t\t\tfontSizeRegex = /(\\d+)px/i,\n\t\t\tnewLineRegex = /[\\n\\r]/,\n\t\t\tspaceRegex = /[\\t ]/,\n\t\t\tlog2 = Math.log(2),\n\t\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1);\n\t\n\t\treturn function text(parent, options) {\n\t\t\tvar self = this,\n\t\t\t\tmaterial,\n\t\t\t\tcanvas,\n\t\t\t\tctx,\n\t\t\t\tmesh,\n\t\t\t\tcontainer,\n\t\t\t\tsrc,\n\t\t\t\ttextWidth = 0,\n\t\t\t\ttextHeight = 0,\n\t\t\t\tprops = {\n\t\t\t\t\ttext: '',\n\t\t\t\t\tfont: '80px sans-serif',\n\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\ttextBaseline: '',\n\t\t\t\t\tdirection: '',\n\t\t\t\t\tfillStyle: 'white',\n\t\t\t\t\tresolution: 256, //pixels per meter\n\t\t\t\t\twrap: 5 //in meters\n\t\t\t\t},\n\t\t\t\ttex;\n\t\n\t\t\tfunction nextPowerOfTwo(n) {\n\t\t\t\treturn Math.pow(2, Math.ceil(Math.log(n) / log2));\n\t\t\t}\n\t\n\t\t\tfunction Line(word) {\n\t\t\t\tthis.spaceWidth = ctx.measureText(' ').width;\n\t\t\t\tthis.totalWidth = 0;\n\t\t\t\tthis.wordsWidth = 0;\n\t\t\t\tthis.words = [];\n\t\t\t\tthis.wrap = false;\n\t\t\t\tif (word) {\n\t\t\t\t\tthis.add(word);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tLine.prototype.text = function () {\n\t\t\t\treturn this.words.join(' ');\n\t\t\t};\n\t\n\t\t\tLine.prototype.add = function(word) {\n\t\t\t\tvar wordWidth;\n\t\t\t\tif (this.words.length) {\n\t\t\t\t\tthis.totalWidth += this.spaceWidth;\n\t\t\t\t}\n\t\t\t\tthis.words.push(word);\n\t\t\t\twordWidth = Line.measure(word);\n\t\t\t\tthis.totalWidth += wordWidth;\n\t\t\t\tthis.wordsWidth += wordWidth;\n\t\t\t};\n\t\n\t\t\tLine.prototype.measure = function(word) {\n\t\t\t\tvar width = this.totalWidth;\n\t\t\t\tif (word) {\n\t\t\t\t\twidth += Line.measure(word);\n\t\t\t\t\tif (this.words.length) {\n\t\t\t\t\t\twidth += this.spaceWidth;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn width;\n\t\t\t};\n\t\n\t\t\tLine.measure = function(word) {\n\t\t\t\treturn ctx.measureText(word).width;\n\t\t\t};\n\t\n\t\t\tfunction update() {\n\t\t\t\t//text stuffs\n\t\t\t\tvar text,\n\t\t\t\t\tword = '',\n\t\t\t\t\tletter,\n\t\t\t\t\tisSpace,\n\t\t\t\t\tline,\n\t\t\t\t\tlines = [],\n\t\t\t\t\tparse,\n\t\n\t\t\t\t\t//layout\n\t\t\t\t\tdirection = getComputedStyle(document.body).direction,\n\t\t\t\t\tinherit,\n\t\t\t\t\tresolution = parseFloat(props.resolution) || 256,\n\t\t\t\t\twrap,\n\t\t\t\t\twrapped = false,\n\t\t\t\t\tfontSize,\n\t\t\t\t\tpadding,\n\t\n\t\t\t\t\t//measurements\n\t\t\t\t\tlineHeight,\n\t\t\t\t\ti, start, y, measure,\n\t\t\t\t\twidth,\n\t\t\t\t\theight = 0;\n\t\n\t\t\t\twrap = parseFloat(props.wrap);\n\t\t\t\tif (isNaN(wrap) || wrap < 0) {\n\t\t\t\t\twrap = 5;\n\t\t\t\t}\n\t\t\t\twidth = resolution * wrap;\n\t\n\t\t\t\tctx.font = props.font;\n\t\t\t\tparse = fontSizeRegex.exec(ctx.font);\n\t\t\t\tfontSize = parseFloat(parse && parse[1]) || 50;\n\t\n\t\t\t\tlineHeight = fontSize * 1.5;\n\t\n\t\t\t\tline = new Line();\n\t\n\t\t\t\ttext = props.text === 0 ? '0' : String(props.text || '');\n\t\t\t\tif (wrap) {\n\t\t\t\t\ttext = text.trim() + ' ';\n\t\t\t\t\tfor (i = 0; i < text.length; i++) {\n\t\t\t\t\t\tletter = text.charAt(i);\n\t\t\t\t\t\tif (newLineRegex.test(letter)) {\n\t\t\t\t\t\t\tline.add(word);\n\t\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t\t\tword = '';\n\t\t\t\t\t\t\tline = new Line();\n\t\t\t\t\t\t} else if (spaceRegex.test(letter)) {\n\t\t\t\t\t\t\tmeasure = line.measure(word);\n\t\t\t\t\t\t\tif (measure < width) {\n\t\t\t\t\t\t\t\tif (line) {\n\t\t\t\t\t\t\t\t\tline.add(word);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tline = new Line(word);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (!line && Line.measure(word) >= width) {\n\t\t\t\t\t\t\t\t//one very long word\n\t\t\t\t\t\t\t\tlines.push(new Line(word));\n\t\t\t\t\t\t\t\tword = '';\n\t\t\t\t\t\t\t\tline = new Line();\n\t\t\t\t\t\t\t\twrapped = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tline.wrap = true;\n\t\t\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t\t\t\tline = new Line(word);\n\t\t\t\t\t\t\t\twrapped = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tword = '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tword += letter;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (line) {\n\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlines.push(new Line(text));\n\t\t\t\t}\n\t\n\t\t\t\tif (!width || !wrapped) {\n\t\t\t\t\twidth = lines.reduce(function (previous, line) {\n\t\t\t\t\t\treturn Math.max(previous, line.totalWidth);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t\twidth = Math.min(width, 2048);\n\t\n\t\t\t\theight = lines.length * lineHeight;\n\t\n\t\t\t\tif (options && options.mipmap === false) {\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t} else {\n\t\t\t\t\tcanvas.width = nextPowerOfTwo(width);\n\t\t\t\t\tcanvas.height = nextPowerOfTwo(height);\n\t\t\t\t}\n\t\n\t\t\t\tmesh.scale.set(canvas.width / resolution, canvas.height / resolution, 1);\n\t\n\t\t\t\t//debug\n\t\t\t\t// ctx.fillStyle = 'rgba(100, 100, 100, 0.5)';\n\t\t\t\t// ctx.fillRect(0, 0, canvas.width, canvas.height);\n\t\t\t\t// document.body.appendChild(canvas);\n\t\t\t\t// canvas.style.cssText = 'position: absolute; width: auto !important; height: auto !important; max-width: 80%';\n\t\n\t\t\t\t/*\n\t\t\t\tset all these properties again because they get reset\n\t\t\t\twhen you resize the canvas\n\t\t\t\t*/\n\t\t\t\tctx.font = props.font;\n\t\t\t\tctx.textAlign = props.textAlign;\n\t\t\t\tctx.textBaseline = props.textBaseline;\n\t\t\t\tctx.direction = props.direction;\n\t\t\t\tctx.fillStyle = props.fillStyle;\n\t\t\t\t//todo: add maxWidth?\n\t\n\t\t\t\tpadding = (canvas.width - width) / 2;\n\t\t\t\ty = (canvas.height - height) / 2 + lineHeight / 2;\n\t\n\t\t\t\tinherit = (ctx.direction === '' || ctx.direction === 'inherit');\n\t\t\t\tif (ctx.textAlign === 'center') {\n\t\t\t\t\tstart = canvas.width / 2;\n\t\t\t\t} else if (ctx.textAlign === 'right' ||\n\t\t\t\t\tctx.textAlign === 'end' && (ctx.direction === 'ltr' || inherit && direction === 'ltr') ||\n\t\t\t\t\tctx.textAlign === 'start' && (ctx.direction === 'rtl' || inherit && direction === 'rtl')) {\n\t\n\t\t\t\t\tstart = canvas.width - padding;\n\t\t\t\t} else {\n\t\t\t\t\tstart = padding;\n\t\t\t\t}\n\t\n\t\t\t\tlines.forEach(function (line) {\n\t\t\t\t\tvar x,\n\t\t\t\t\t\tspace;\n\t\t\t\t\tif (props.textAlign === 'justify' && line.wrap && line.words.length > 1) {\n\t\t\t\t\t\tx = start;\n\t\t\t\t\t\tspace = (width - line.wordsWidth) / (line.words.length - 1);\n\t\t\t\t\t\tline.words.forEach(function (word) {\n\t\t\t\t\t\t\tctx.fillText(word, x, y);\n\t\t\t\t\t\t\tx += space + Line.measure(word);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.fillText(line.text(), start, y);\n\t\t\t\t\t}\n\t\t\t\t\ty += lineHeight;\n\t\t\t\t});\n\t\n\t\t\t\ttextWidth = width / resolution;\n\t\t\t\ttextHeight = lines.length * lineHeight / resolution;\n\t\n\t\t\t\ttex.needsUpdate = true;\n\t\n\t\t\t\tmesh.name = text.trim();\n\t\t\t}\n\t\n\t\t\tcanvas = document.createElement('canvas');\n\t\t\tctx = canvas.getContext('2d');\n\t\t\ttex = new THREE.Texture(canvas);\n\t\n\t\t\tif (canvas.width === nextPowerOfTwo(canvas.width) &&\n\t\t\t\tcanvas.height === nextPowerOfTwo(canvas.height)) {\n\t\n\t\t\t\ttex.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\t\ttex.generateMipmaps = true;\n\t\t\t}\n\t\n\t\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t\tside: THREE.DoubleSide,\n\t\t\t\ttransparent: true,\n\t\t\t\tmap: tex\n\t\t\t});\n\t\n\t\t\tmesh = new THREE.Mesh(geometry, material);\n\t\n\t\t\tcontainer = new THREE.Object3D();\n\t\t\tcontainer.name = 'text';\n\t\t\tcontainer.add(mesh);\n\t\t\tparent.add(container);\n\t\n\t\t\tif (typeof options === 'string') {\n\t\t\t\tprops.text = options;\n\t\t\t} else if (options) {\n\t\t\t\tObject.keys(props).forEach(function (key) {\n\t\t\t\t\tprops[key] = options[key] || props[key];\n\t\t\t\t});\n\t\t\t}\n\t\t\tupdate();\n\t\n\t\t\tObject.keys(props).forEach(function (key) {\n\t\t\t\tObject.defineProperty(self, key, {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\treturn props[key];\n\t\t\t\t\t},\n\t\t\t\t\tset: function (val) {\n\t\t\t\t\t\tprops[key] = val;\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(self, 'width', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn textWidth;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(self, 'height', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn textHeight;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tthis.material = material;\n\t\n\t\t\treturn container;\n\t\t};\n\t}());\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(32);\n\t\n\t\treturn function torus(parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmesh;\n\t\n\t\t\tgeometry = new THREE.TorusGeometry(\n\t\t\t\toptions.radius === undefined ? 0.5 : options.radius,\n\t\t\t\toptions.tube === undefined ? 0.125 : options.tube,\n\t\t\t\toptions.radialSegments === undefined ? 12 : options.radialSegments,\n\t\t\t\toptions.tubularSegments === undefined ? 16 : options.tubularSegments,\n\t\t\t\toptions.arc\n\t\t\t);\n\t\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\t\tmesh.name = 'torus';\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar THREE = __webpack_require__(32),\n\t\t\turlRegex = __webpack_require__(33),\n\t\t\textRegex = /\\.(webm|ogg|ogv|m4v|mp4|mov)/i,\n\t\t\tvideo;\n\t\n\t\tvideo = function (parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmaterial,\n\t\t\t\tmesh,\n\t\t\t\tvid,\n\t\t\t\ttex,\n\t\t\t\taspectRatio = 1,\n\t\t\t\tplaying = false,\n\t\t\t\tself = this;\n\t\n\t\t\tfunction isPowerOfTwo(num) {\n\t\t\t\treturn num > 0 && (num & (num-1)) === 0; // jshint ignore:line\n\t\t\t}\n\t\n\t\t\tfunction loadedMetadata() {\n\t\t\t\t//todo: don't do any of this if object has been deleted\n\t\n\t\t\t\tvar newAspectRatio = vid.videoWidth / vid.videoHeight;\n\t\t\t\tif (!options || !options.sphere) {\n\t\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(1, aspectRatio / newAspectRatio, 1));\n\t\t\t\t}\n\t\t\t\taspectRatio = newAspectRatio;\n\t\n\t\t\t\tif (vid.videoWidth === vid.videoHeight &&\n\t\t\t\t\t\tisPowerOfTwo(vid.videoWidth) && isPowerOfTwo(vid.videoHeight)) {\n\t\n\t\t\t\t\ttex.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\t\t\ttex.generateMipmaps = true;\n\t\t\t\t} else {\n\t\t\t\t\ttex.minFilter = THREE.LinearFilter;\n\t\t\t\t\ttex.generateMipmaps = false;\n\t\t\t\t}\n\t\n\t\t\t\tmaterial.map = tex;\n\t\t\t\tmaterial.visible = true;\n\t\n\t\t\t\tif (playing) {\n\t\t\t\t\tvid.play();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction setSource(sources) {\n\t\t\t\tsources.forEach(function (src) {\n\t\t\t\t\tvar parse,\n\t\t\t\t\t\text,\n\t\t\t\t\t\tsource;\n\t\n\t\t\t\t\tif (!src) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tparse = urlRegex.exec(src);\n\t\t\t\t\tif (parse &&\n\t\t\t\t\t\t\t(parse[1] && parse[1] !== window.location.hostΩ ||\n\t\t\t\t\t\t\t\tparse[2] && parse[2] !== window.location.port)) {\n\t\n\t\t\t\t\t\tif (vid.crossOrigin !== undefined) {\n\t\t\t\t\t\t\tvid.crossOrigin = 'anonymous';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('Browser does not support cross-origin video');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsource = document.createElement('source');\n\t\t\t\t\tsource.src = src;\n\t\n\t\t\t\t\text = extRegex.exec(src);\n\t\t\t\t\tif (!ext || vid.canPlayType('video/' + ext[1])) {\n\t\t\t\t\t\tvid.appendChild(source);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\t/*\n\t\t\tPause the video when this browser tab is in the background or minimized.\n\t\t\tResume when it comes back in focus, but only if the user didn't pause manually.\n\t\t\t*/\n\t\t\tfunction visibilityChange() {\n\t\t\t\tif (document.hidden || document.mozHidden || document.msHidden || document.webkitHidden) {\n\t\t\t\t\tvid.pause();\n\t\t\t\t} else if (playing) {\n\t\t\t\t\tvid.play();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tvid = document.createElement('video');\n\t\t\tvid.loop = true;\n\t\t\tvid.addEventListener('loadedmetadata', loadedMetadata, false);\n\t\n\t\t\tif (Array.isArray(options)) {\n\t\t\t\tsetSource(options);\n\t\t\t} if (typeof options === 'string') {\n\t\t\t\tsetSource([options]);\n\t\t\t} else if (typeof options.src === 'string') {\n\t\t\t\tsetSource([options.src]);\n\t\t\t} else if (Array.isArray(options.src)) {\n\t\t\t\tsetSource(options.src);\n\t\t\t}\n\t\n\t\t\tvid.load();\n\t\n\t\t\ttex = new THREE.VideoTexture(vid, THREE.UVMapping);\n\t\t\ttex.format = THREE.RGBFormat;\n\t\n\t\t\tif (options && options.sphere) {\n\t\t\t\tgeometry = new THREE.SphereGeometry(\n\t\t\t\t\t994, //radius\n\t\t\t\t\t60, //widthSegments\n\t\t\t\t\t60, //heightSegments\n\t\t\t\t\t(parseFloat(options.phiStart) || 0) * Math.PI * 2,\n\t\t\t\t\t(parseFloat(options.phiLength) || 1) * Math.PI * 2,\n\t\t\t\t\t(parseFloat(options.thetaStart) || 0) * Math.PI,\n\t\t\t\t\t(parseFloat(options.thetaLength) || 1) * Math.PI\n\t\t\t\t);\n\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(-1, 1, 1));\n\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeRotationY(- Math.PI / 2));\n\t\t\t} else {\n\t\t\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1, 8);\n\t\t\t}\n\t\n\t\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t\tside: THREE.DoubleSide,\n\t\t\t\tmap: tex,\n\t\t\t\tvisible: false\n\t\t\t});\n\t\n\t\t\tmesh = new THREE.Mesh(geometry, material);\n\t\n\t\t\tif (options && options.stereo) {\n\t\t\t\tif (options.stereo === 'vertical') {\n\t\t\t\t\ttex.repeat.y = 0.5;\n\t\t\t\t} else {\n\t\t\t\t\ttex.repeat.x = 0.5;\n\t\t\t\t}\n\t\t\t\tmesh.userData.stereo = options.stereo;\n\t\t\t}\n\t\n\t\t\tif (vid.readyState) {\n\t\t\t\tloadedMetadata();\n\t\t\t}\n\t\n\t\t\tthis.play = function play() {\n\t\t\t\tplaying = true;\n\t\t\t\tvid.play();\n\t\t\t\treturn this;\n\t\t\t};\n\t\n\t\t\tthis.pause = function pause() {\n\t\t\t\tplaying = false;\n\t\t\t\tvid.pause();\n\t\t\t\treturn this;\n\t\t\t};\n\t\n\t\t\tthis.canPlayType = video.canPlayType;\n\t\n\t\t\tObject.defineProperty(this, 'width', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.videoWidth;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'height', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.videoHeight;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'paused', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn !playing;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'volume', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.volume;\n\t\t\t\t},\n\t\t\t\tset: function (vol) {\n\t\t\t\t\tvid.volume = vol;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'muted', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.muted;\n\t\t\t\t},\n\t\t\t\tset: function (muted) {\n\t\t\t\t\tvid.muted = muted;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'duration', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.duration || 0;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'currentTime', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.currentTime;\n\t\t\t\t},\n\t\t\t\tset: function (currentTime) {\n\t\t\t\t\tif (vid.readyState && currentTime < vid.duration && currentTime >= 0) {\n\t\t\t\t\t\tvid.currentTime = currentTime;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\t[\n\t\t\t\t'loadedmetadata',\n\t\t\t\t'play',\n\t\t\t\t'pause',\n\t\t\t\t'playing',\n\t\t\t\t'progress'\n\t\t\t].forEach(function registerMediaEvent(event) {\n\t\t\t\tvid.addEventListener(event, self.emit.bind(self, event));\n\t\t\t});\n\t\n\t\t\t//sometimes video fails to play because it's too big. remove it and try again\n\t\t\tvid.addEventListener('error', function (evt) {\n\t\t\t\tif (vid.error.code === window.MediaError.MEDIA_ERR_DECODE && vid.childNodes.length > 1) {\n\t\t\t\t\tmaterial.visible = false;\n\t\t\t\t\tvid.removeChild(vid.firstChild);\n\t\t\t\t\tvid.load();\n\t\t\t\t}\n\t\n\t\t\t\tself.emit(event, evt);\n\t\t\t}, true);\n\t\n\t\t\tthis.element = vid;\n\t\n\t\t\twindow.addEventListener('touchstart', function touchStart() {\n\t\t\t\tif (playing) {\n\t\t\t\t\tvid.play();\n\t\t\t\t} else {\n\t\t\t\t\tvid.load();\n\t\t\t\t}\n\t\t\t\twindow.removeEventListener('touchstart', touchStart, true);\n\t\t\t}, true);\n\t\n\t\t\t//pause when window is hidden\n\t\t\tdocument.addEventListener('visibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('mozvisibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('msvisibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('webkitvisibilitychange', visibilityChange);\n\t\n\t\t\tmesh.name = 'video';\n\t\t\tthis.raycastable = !(options && options.sphere);\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t\n\t\tvideo.canPlayType = function canPlayType(type) {\n\t\t\tvar element = document.createElement('video');\n\t\t\treturn element.canPlayType(type);\n\t\t};\n\t\n\t\treturn video;\n\t}());\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(32);\n\t\n\t/**\n\t * @author richt / http://richt.me\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n\t */\n\t\n\tTHREE.DeviceOrientationControls = function( object ) {\n\t\n\t\tvar scope = this;\n\t\n\t\tthis.object = object;\n\t\tthis.object.rotation.reorder( \"YXZ\" );\n\t\n\t\tthis.enabled = true;\n\t\n\t\tthis.deviceOrientation = {};\n\t\tthis.screenOrientation = 0;\n\t\n\t\tthis.alpha = 0;\n\t\tthis.alphaOffsetAngle = 0;\n\t\n\t\n\t\tvar onDeviceOrientationChangeEvent = function( event ) {\n\t\n\t\t\tscope.deviceOrientation = event;\n\t\n\t\t};\n\t\n\t\tvar onScreenOrientationChangeEvent = function() {\n\t\n\t\t\tscope.screenOrientation = window.orientation || 0;\n\t\n\t\t};\n\t\n\t\t// The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\t\n\t\tvar setObjectQuaternion = function() {\n\t\n\t\t\tvar zee = new THREE.Vector3( 0, 0, 1 );\n\t\n\t\t\tvar euler = new THREE.Euler();\n\t\n\t\t\tvar q0 = new THREE.Quaternion();\n\t\n\t\t\tvar q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\n\t\n\t\t\treturn function( quaternion, alpha, beta, gamma, orient ) {\n\t\n\t\t\t\teuler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\n\t\n\t\t\t\tquaternion.setFromEuler( euler ); // orient the device\n\t\n\t\t\t\tquaternion.multiply( q1 ); // camera looks out the back of the device, not the top\n\t\n\t\t\t\tquaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\n\t\n\t\t\t}\n\t\n\t\t}();\n\t\n\t\tthis.connect = function() {\n\t\n\t\t\tonScreenOrientationChangeEvent(); // run once on load\n\t\n\t\t\twindow.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\t\twindow.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\t\n\t\t\tscope.enabled = true;\n\t\n\t\t};\n\t\n\t\tthis.disconnect = function() {\n\t\n\t\t\twindow.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\t\twindow.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\t\n\t\t\tscope.enabled = false;\n\t\n\t\t};\n\t\n\t\tthis.update = function() {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tvar alpha = scope.deviceOrientation.alpha ? THREE.Math.degToRad( scope.deviceOrientation.alpha ) + this.alphaOffsetAngle : 0; // Z\n\t\t\tvar beta = scope.deviceOrientation.beta ? THREE.Math.degToRad( scope.deviceOrientation.beta ) : 0; // X'\n\t\t\tvar gamma = scope.deviceOrientation.gamma ? THREE.Math.degToRad( scope.deviceOrientation.gamma ) : 0; // Y''\n\t\t\tvar orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\n\t\n\t\t\tsetObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\n\t\t\tthis.alpha = alpha;\n\t\n\t\t};\n\t\n\t\tthis.updateAlphaOffsetAngle = function( angle ) {\n\t\n\t\t\tthis.alphaOffsetAngle = angle;\n\t\t\tthis.update();\n\t\n\t\t};\n\t\n\t\tthis.dispose = function() {\n\t\n\t\t\tthis.disconnect();\n\t\n\t\t};\n\t\n\t\tthis.connect();\n\t\n\t};\n\t\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(32);\n\t\n\t/**\n\t * @author qiao / https://github.com/qiao\n\t * @author mrdoob / http://mrdoob.com\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author erich666 / http://erichaines.com\n\t */\n\t\n\t// This set of controls performs orbiting, dollying (zooming), and panning.\n\t// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n\t//\n\t//    Orbit - left mouse / touch: one finger move\n\t//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n\t//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\t\n\tTHREE.OrbitControls = function ( object, domElement ) {\n\t\n\t\tthis.object = object;\n\t\n\t\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\t\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\t\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new THREE.Vector3();\n\t\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\t\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\t\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = 0; // radians\n\t\tthis.maxPolarAngle = Math.PI; // radians\n\t\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\t\tthis.minAzimuthAngle = - Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\t\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.25;\n\t\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = true;\n\t\tthis.zoomSpeed = 1.0;\n\t\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 1.0;\n\t\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = true;\n\t\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\t\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\t\n\t\t// Set to false to disable use of the keys\n\t\tthis.enableKeys = true;\n\t\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\t\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\t\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\t\n\t\t//\n\t\t// public methods\n\t\t//\n\t\n\t\tthis.getPolarAngle = function () {\n\t\n\t\t\treturn spherical.phi;\n\t\n\t\t};\n\t\n\t\tthis.getAzimuthalAngle = function () {\n\t\n\t\t\treturn spherical.theta;\n\t\n\t\t};\n\t\n\t\tthis.reset = function () {\n\t\n\t\t\tscope.target.copy( scope.target0 );\n\t\t\tscope.object.position.copy( scope.position0 );\n\t\t\tscope.object.zoom = scope.zoom0;\n\t\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent( changeEvent );\n\t\n\t\t\tscope.update();\n\t\n\t\t\tstate = STATE.NONE;\n\t\n\t\t};\n\t\n\t\t// this method is exposed, but perhaps it would be better if we can make it private...\n\t\tthis.update = function() {\n\t\n\t\t\tvar offset = new THREE.Vector3();\n\t\n\t\t\t// so camera.up is the orbit axis\n\t\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\t\tvar quatInverse = quat.clone().inverse();\n\t\n\t\t\tvar lastPosition = new THREE.Vector3();\n\t\t\tvar lastQuaternion = new THREE.Quaternion();\n\t\n\t\t\treturn function update () {\n\t\n\t\t\t\tvar position = scope.object.position;\n\t\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion( quat );\n\t\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3( offset );\n\t\n\t\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\t\n\t\t\t\t\trotateLeft( getAutoRotationAngle() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\t\n\t\t\t\t// restrict theta to be between desired limits\n\t\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\t\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\t\n\t\t\t\tspherical.makeSafe();\n\t\n\t\n\t\t\t\tspherical.radius *= scale;\n\t\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\t\n\t\t\t\t// move target to panned location\n\t\t\t\tscope.target.add( panOffset );\n\t\n\t\t\t\toffset.setFromSpherical( spherical );\n\t\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion( quatInverse );\n\t\n\t\t\t\tposition.copy( scope.target ).add( offset );\n\t\n\t\t\t\tscope.object.lookAt( scope.target );\n\t\n\t\t\t\tif ( scope.enableDamping === true ) {\n\t\n\t\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tscale = 1;\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\t\n\t\t\t\t// update condition is:\n\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\t\n\t\t\t\tif ( zoomChanged ||\n\t\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\t\n\t\t\t\t\tscope.dispatchEvent( changeEvent );\n\t\n\t\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\t\tzoomChanged = false;\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn false;\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\tthis.dispose = function() {\n\t\n\t\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\t\n\t\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\t\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\t\n\t\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\t\n\t\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\t\n\t\t};\n\t\n\t\t//\n\t\t// internals\n\t\t//\n\t\n\t\tvar scope = this;\n\t\n\t\tvar changeEvent = { type: 'change' };\n\t\tvar startEvent = { type: 'start' };\n\t\tvar endEvent = { type: 'end' };\n\t\n\t\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\t\n\t\tvar state = STATE.NONE;\n\t\n\t\tvar EPS = 0.000001;\n\t\n\t\t// current position in spherical coordinates\n\t\tvar spherical = new THREE.Spherical();\n\t\tvar sphericalDelta = new THREE.Spherical();\n\t\n\t\tvar scale = 1;\n\t\tvar panOffset = new THREE.Vector3();\n\t\tvar zoomChanged = false;\n\t\n\t\tvar rotateStart = new THREE.Vector2();\n\t\tvar rotateEnd = new THREE.Vector2();\n\t\tvar rotateDelta = new THREE.Vector2();\n\t\n\t\tvar panStart = new THREE.Vector2();\n\t\tvar panEnd = new THREE.Vector2();\n\t\tvar panDelta = new THREE.Vector2();\n\t\n\t\tvar dollyStart = new THREE.Vector2();\n\t\tvar dollyEnd = new THREE.Vector2();\n\t\tvar dollyDelta = new THREE.Vector2();\n\t\n\t\tfunction getAutoRotationAngle() {\n\t\n\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\t\n\t\t}\n\t\n\t\tfunction getZoomScale() {\n\t\n\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\t\n\t\t}\n\t\n\t\tfunction rotateLeft( angle ) {\n\t\n\t\t\tsphericalDelta.theta -= angle;\n\t\n\t\t}\n\t\n\t\tfunction rotateUp( angle ) {\n\t\n\t\t\tsphericalDelta.phi -= angle;\n\t\n\t\t}\n\t\n\t\tvar panLeft = function() {\n\t\n\t\t\tvar v = new THREE.Vector3();\n\t\n\t\t\treturn function panLeft( distance, objectMatrix ) {\n\t\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar( - distance );\n\t\n\t\t\t\tpanOffset.add( v );\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\tvar panUp = function() {\n\t\n\t\t\tvar v = new THREE.Vector3();\n\t\n\t\t\treturn function panUp( distance, objectMatrix ) {\n\t\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\n\t\t\t\tv.multiplyScalar( distance );\n\t\n\t\t\t\tpanOffset.add( v );\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tvar pan = function() {\n\t\n\t\t\tvar offset = new THREE.Vector3();\n\t\n\t\t\treturn function pan ( deltaX, deltaY ) {\n\t\n\t\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\t\n\t\t\t\t\t// perspective\n\t\t\t\t\tvar position = scope.object.position;\n\t\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\t\tvar targetDistance = offset.length();\n\t\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\t\n\t\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\t\n\t\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\t\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\t\tscope.enablePan = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\tfunction dollyIn( dollyScale ) {\n\t\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\t\n\t\t\t\tscale /= dollyScale;\n\t\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\t\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction dollyOut( dollyScale ) {\n\t\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\t\n\t\t\t\tscale *= dollyScale;\n\t\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\t\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\t\n\t\tfunction handleMouseDownRotate( event ) {\n\t\n\t\t\t//console.log( 'handleMouseDownRotate' );\n\t\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\t\n\t\t}\n\t\n\t\tfunction handleMouseDownDolly( event ) {\n\t\n\t\t\t//console.log( 'handleMouseDownDolly' );\n\t\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\t\n\t\t}\n\t\n\t\tfunction handleMouseDownPan( event ) {\n\t\n\t\t\t//console.log( 'handleMouseDownPan' );\n\t\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\t\n\t\t}\n\t\n\t\tfunction handleMouseMoveRotate( event ) {\n\t\n\t\t\t//console.log( 'handleMouseMoveRotate' );\n\t\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\t\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\t\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\t\n\t\t\trotateStart.copy( rotateEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleMouseMoveDolly( event ) {\n\t\n\t\t\t//console.log( 'handleMouseMoveDolly' );\n\t\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\t\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\t\n\t\t\tif ( dollyDelta.y > 0 ) {\n\t\n\t\t\t\tdollyIn( getZoomScale() );\n\t\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\t\n\t\t\t\tdollyOut( getZoomScale() );\n\t\n\t\t\t}\n\t\n\t\t\tdollyStart.copy( dollyEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleMouseMovePan( event ) {\n\t\n\t\t\t//console.log( 'handleMouseMovePan' );\n\t\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\t\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\t\n\t\t\tpan( panDelta.x, panDelta.y );\n\t\n\t\t\tpanStart.copy( panEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleMouseUp( event ) {\n\t\n\t\t\t//console.log( 'handleMouseUp' );\n\t\n\t\t}\n\t\n\t\tfunction handleMouseWheel( event ) {\n\t\n\t\t\t//console.log( 'handleMouseWheel' );\n\t\n\t\t\tif ( event.deltaY < 0 ) {\n\t\n\t\t\t\tdollyOut( getZoomScale() );\n\t\n\t\t\t} else if ( event.deltaY > 0 ) {\n\t\n\t\t\t\tdollyIn( getZoomScale() );\n\t\n\t\t\t}\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleKeyDown( event ) {\n\t\n\t\t\t//console.log( 'handleKeyDown' );\n\t\n\t\t\tswitch ( event.keyCode ) {\n\t\n\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction handleTouchStartRotate( event ) {\n\t\n\t\t\t//console.log( 'handleTouchStartRotate' );\n\t\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\n\t\t}\n\t\n\t\tfunction handleTouchStartDolly( event ) {\n\t\n\t\t\t//console.log( 'handleTouchStartDolly' );\n\t\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\t\n\t\t\tdollyStart.set( 0, distance );\n\t\n\t\t}\n\t\n\t\tfunction handleTouchStartPan( event ) {\n\t\n\t\t\t//console.log( 'handleTouchStartPan' );\n\t\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\n\t\t}\n\t\n\t\tfunction handleTouchMoveRotate( event ) {\n\t\n\t\t\t//console.log( 'handleTouchMoveRotate' );\n\t\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\t\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( -2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\t\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( -2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\t\n\t\t\trotateStart.copy( rotateEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleTouchMoveDolly( event ) {\n\t\n\t\t\t//console.log( 'handleTouchMoveDolly' );\n\t\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\t\n\t\t\tdollyEnd.set( 0, distance );\n\t\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\t\n\t\t\tif ( dollyDelta.y > 0 ) {\n\t\n\t\t\t\tdollyOut( getZoomScale() );\n\t\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\t\n\t\t\t\tdollyIn( getZoomScale() );\n\t\n\t\t\t}\n\t\n\t\t\tdollyStart.copy( dollyEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleTouchMovePan( event ) {\n\t\n\t\t\t//console.log( 'handleTouchMovePan' );\n\t\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\t\n\t\t\tpan( panDelta.x, panDelta.y );\n\t\n\t\t\tpanStart.copy( panEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleTouchEnd( event ) {\n\t\n\t\t\t//console.log( 'handleTouchEnd' );\n\t\n\t\t}\n\t\n\t\t//\n\t\t// event handlers - FSM: listen for events and reset state\n\t\t//\n\t\n\t\tfunction onMouseDown( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tevent.preventDefault();\n\t\n\t\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\t\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\n\t\t\t\thandleMouseDownRotate( event );\n\t\n\t\t\t\tstate = STATE.ROTATE;\n\t\n\t\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\t\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\n\t\t\t\thandleMouseDownDolly( event );\n\t\n\t\t\t\tstate = STATE.DOLLY;\n\t\n\t\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\t\n\t\t\t\tif ( scope.enablePan === false ) return;\n\t\n\t\t\t\thandleMouseDownPan( event );\n\t\n\t\t\t\tstate = STATE.PAN;\n\t\n\t\t\t}\n\t\n\t\t\tif ( state !== STATE.NONE ) {\n\t\n\t\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\t\n\t\t\t\tscope.dispatchEvent( startEvent );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction onMouseMove( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tevent.preventDefault();\n\t\n\t\t\tif ( state === STATE.ROTATE ) {\n\t\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\n\t\t\t\thandleMouseMoveRotate( event );\n\t\n\t\t\t} else if ( state === STATE.DOLLY ) {\n\t\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\n\t\t\t\thandleMouseMoveDolly( event );\n\t\n\t\t\t} else if ( state === STATE.PAN ) {\n\t\n\t\t\t\tif ( scope.enablePan === false ) return;\n\t\n\t\t\t\thandleMouseMovePan( event );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction onMouseUp( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\thandleMouseUp( event );\n\t\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\t\n\t\t\tscope.dispatchEvent( endEvent );\n\t\n\t\t\tstate = STATE.NONE;\n\t\n\t\t}\n\t\n\t\tfunction onMouseWheel( event ) {\n\t\n\t\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\t\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\n\t\t\thandleMouseWheel( event );\n\t\n\t\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\n\t\t\tscope.dispatchEvent( endEvent );\n\t\n\t\t}\n\t\n\t\tfunction onKeyDown( event ) {\n\t\n\t\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\t\n\t\t\thandleKeyDown( event );\n\t\n\t\t}\n\t\n\t\tfunction onTouchStart( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tswitch ( event.touches.length ) {\n\t\n\t\t\t\tcase 1:\t// one-fingered touch: rotate\n\t\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\n\t\t\t\t\thandleTouchStartRotate( event );\n\t\n\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 2:\t// two-fingered touch: dolly\n\t\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\n\t\t\t\t\thandleTouchStartDolly( event );\n\t\n\t\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 3: // three-fingered touch: pan\n\t\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\n\t\t\t\t\thandleTouchStartPan( event );\n\t\n\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\n\t\t\t\t\tstate = STATE.NONE;\n\t\n\t\t\t}\n\t\n\t\t\tif ( state !== STATE.NONE ) {\n\t\n\t\t\t\tscope.dispatchEvent( startEvent );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction onTouchMove( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\n\t\t\tswitch ( event.touches.length ) {\n\t\n\t\t\t\tcase 1: // one-fingered touch: rotate\n\t\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\n\t\n\t\t\t\t\thandleTouchMoveRotate( event );\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 2: // two-fingered touch: dolly\n\t\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\n\t\n\t\t\t\t\thandleTouchMoveDolly( event );\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 3: // three-fingered touch: pan\n\t\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\n\t\n\t\t\t\t\thandleTouchMovePan( event );\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\n\t\t\t\t\tstate = STATE.NONE;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction onTouchEnd( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\thandleTouchEnd( event );\n\t\n\t\t\tscope.dispatchEvent( endEvent );\n\t\n\t\t\tstate = STATE.NONE;\n\t\n\t\t}\n\t\n\t\tfunction onContextMenu( event ) {\n\t\n\t\t\tevent.preventDefault();\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\t\n\t\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\t\n\t\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\t\n\t\twindow.addEventListener( 'keydown', onKeyDown, false );\n\t\n\t\t// force an update at start\n\t\n\t\tthis.update();\n\t\n\t};\n\t\n\tTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\tTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\t\n\tObject.defineProperties( THREE.OrbitControls.prototype, {\n\t\n\t\tcenter: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\t\treturn this.target;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t// backward compatibility\n\t\n\t\tnoZoom: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\treturn ! this.enableZoom;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\tthis.enableZoom = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tnoRotate: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\treturn ! this.enableRotate;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\tthis.enableRotate = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tnoPan: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\treturn ! this.enablePan;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\tthis.enablePan = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tnoKeys: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\treturn ! this.enableKeys;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\tthis.enableKeys = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tstaticMoving : {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\treturn ! this.enableDamping;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\tthis.enableDamping = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tdynamicDampingFactor : {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\treturn this.dampingFactor;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\tthis.dampingFactor = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t} );\n\t\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(32);\n\t\n\t( function() {\n\t\n\t\tvar _oldConsole = console.log;\n\t\n\t\tvar supportedTypes = [];\n\t\n\t\tfunction addSupportedType( type, format ) {\n\t\n\t\t\tsupportedTypes.push( {\n\t\t\t\ttype: type,\n\t\t\t\tformat: format\n\t\t\t} );\n\t\n\t\t}\n\t\n\t\taddSupportedType( THREE.Matrix4, function( v ) {\n\t\n\t\t\tvar e = v.elements;\n\t\t\t\t\t\n\t\t\treturn [\n\t\t\t\t[ e[ 0 ], e[ 4 ], e[ 8 ], e[ 12 ] ],\n\t\t\t\t[ e[ 1 ], e[ 5 ], e[ 9 ], e[ 13 ] ],\n\t\t\t\t[ e[ 2 ], e[ 6 ], e[ 10 ], e[ 14 ] ],\n\t\t\t\t[ e[ 3 ], e[ 7 ], e[ 11 ], e[ 15 ] ]\n\t\t\t];\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Matrix3, function( v ) {\n\t\n\t\t\tvar e = v.elements;\n\t\t\t\t\t\n\t\t\treturn [\n\t\t\t\t[ e[ 0 ], e[ 3 ], e[ 6 ] ],\n\t\t\t\t[ e[ 1 ], e[ 4 ], e[ 7 ] ],\n\t\t\t\t[ e[ 2 ], e[ 5 ], e[ 8 ] ]\n\t\t\t];\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Vector2, function( v ) {\n\t\n\t\t\treturn {\n\t\t\t\tVector2: { x: v.x, y: v.y }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Vector3, function( v ) {\n\t\n\t\t\treturn {\n\t\t\t\tVector3: { x: v.x, y: v.y, z: v.z }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Vector4, function( v ) {\n\t\n\t\t\treturn {\n\t\t\t\tVector4: { x: v.x, y: v.y, z: v.z, w: v.w }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Euler, function( v ) {\n\t\n\t\t\treturn {\n\t\t\t\tVector4: { x: v.x, y: v.y, z: v.z, order: v.order }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Ray, function( v ) {\n\t\n\t\t\treturn { \n\t\t\t\t'Ray origin': { x: v.origin.x, y: v.origin.y, z: v.origin.z },\n\t\t\t\t'Ray direction': { x: v.direction.x, y: v.direction.y, z: v.direction.z }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\tfunction stacktrace() { \n\t\t\tvar err = new Error();\n\t\t\treturn err.stack;\n\t\t}\n\t\n\t\tconsole.log = function() {\n\t\n\t\t\t//console.trace ();\n\t\n\t\t\tvar special = false;\n\t\n\t\t\t[].forEach.call( arguments, function( a ) { \n\t\t\t\tsupportedTypes.forEach( function( t ) {\n\t\t\t\t\tif( a instanceof t.type ) special = true;;\n\t\t\t\t} );\n\t\t\t} );\n\t\n\t\t\tif( special ) {\n\t\n\t\t\t\t[].forEach.call( arguments, function( a ) { \n\t\t\t\t\n\t\t\t\t\t_oldConsole.apply( console, [ a ] );\n\t\n\t\t\t\t\tsupportedTypes.forEach( function( t ) {\n\t\n\t\t\t\t\t\tif( a instanceof t.type ) {\n\t\n\t\t\t\t\t\t\tconsole.table( t.format( a ) );\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t} );\n\t\n\t\t\t\t} );\n\t\n\t\t\t} else {\n\t\n\t\t\t\t_oldConsole.apply( console, arguments );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t} )();\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(32);\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.SpriteCanvasMaterial = function ( parameters ) {\n\t\n\t\tTHREE.Material.call( this );\n\t\n\t\tthis.type = 'SpriteCanvasMaterial';\n\t\n\t\tthis.color = new THREE.Color( 0xffffff );\n\t\tthis.program = function ( context, color ) {};\n\t\n\t\tthis.setValues( parameters );\n\t\n\t};\n\t\n\tTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\t\n\tTHREE.SpriteCanvasMaterial.prototype.clone = function () {\n\t\n\t\tvar material = new THREE.SpriteCanvasMaterial();\n\t\n\t\tmaterial.copy( this );\n\t\tmaterial.color.copy( this.color );\n\t\tmaterial.program = this.program;\n\t\n\t\treturn material;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.CanvasRenderer = function ( parameters ) {\n\t\n\t\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\n\t\n\t\tparameters = parameters || {};\n\t\n\t\tvar _this = this,\n\t\t_renderData, _elements, _lights,\n\t\t_projector = new THREE.Projector(),\n\t\n\t\t_canvas = parameters.canvas !== undefined\n\t\t\t\t ? parameters.canvas\n\t\t\t\t : document.createElement( 'canvas' ),\n\t\n\t\t_canvasWidth = _canvas.width,\n\t\t_canvasHeight = _canvas.height,\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\n\t\n\t\t_viewportX = 0,\n\t\t_viewportY = 0,\n\t\t_viewportWidth = _canvasWidth,\n\t\t_viewportHeight = _canvasHeight,\n\t\n\t\t_pixelRatio = 1,\n\t\n\t\t_context = _canvas.getContext( '2d', {\n\t\t\talpha: parameters.alpha === true\n\t\t} ),\n\t\n\t\t_clearColor = new THREE.Color( 0x000000 ),\n\t\t_clearAlpha = parameters.alpha === true ? 0 : 1,\n\t\n\t\t_contextGlobalAlpha = 1,\n\t\t_contextGlobalCompositeOperation = 0,\n\t\t_contextStrokeStyle = null,\n\t\t_contextFillStyle = null,\n\t\t_contextLineWidth = null,\n\t\t_contextLineCap = null,\n\t\t_contextLineJoin = null,\n\t\t_contextLineDash = [],\n\t\n\t\t_camera,\n\t\n\t\t_v1, _v2, _v3, _v4,\n\t\t_v5 = new THREE.RenderableVertex(),\n\t\t_v6 = new THREE.RenderableVertex(),\n\t\n\t\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\n\t\t_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\n\t\n\t\t_color = new THREE.Color(),\n\t\t_color1 = new THREE.Color(),\n\t\t_color2 = new THREE.Color(),\n\t\t_color3 = new THREE.Color(),\n\t\t_color4 = new THREE.Color(),\n\t\n\t\t_diffuseColor = new THREE.Color(),\n\t\t_emissiveColor = new THREE.Color(),\n\t\n\t\t_lightColor = new THREE.Color(),\n\t\n\t\t_patterns = {},\n\t\n\t\t_image, _uvs,\n\t\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\n\t\n\t\t_clipBox = new THREE.Box2(),\n\t\t_clearBox = new THREE.Box2(),\n\t\t_elemBox = new THREE.Box2(),\n\t\n\t\t_ambientLight = new THREE.Color(),\n\t\t_directionalLights = new THREE.Color(),\n\t\t_pointLights = new THREE.Color(),\n\t\n\t\t_vector3 = new THREE.Vector3(), // Needed for PointLight\n\t\t_centroid = new THREE.Vector3(),\n\t\t_normal = new THREE.Vector3(),\n\t\t_normalViewMatrix = new THREE.Matrix3();\n\t\n\t\t/* TODO\n\t\t_canvas.mozImageSmoothingEnabled = false;\n\t\t_canvas.webkitImageSmoothingEnabled = false;\n\t\t_canvas.msImageSmoothingEnabled = false;\n\t\t_canvas.imageSmoothingEnabled = false;\n\t\t*/\n\t\n\t\t// dash+gap fallbacks for Firefox and everything else\n\t\n\t\tif ( _context.setLineDash === undefined ) {\n\t\n\t\t\t_context.setLineDash = function () {};\n\t\n\t\t}\n\t\n\t\tthis.domElement = _canvas;\n\t\n\t\tthis.autoClear = true;\n\t\tthis.sortObjects = true;\n\t\tthis.sortElements = true;\n\t\n\t\tthis.info = {\n\t\n\t\t\trender: {\n\t\n\t\t\t\tvertices: 0,\n\t\t\t\tfaces: 0\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// WebGLRenderer compatibility\n\t\n\t\tthis.supportsVertexTextures = function () {};\n\t\tthis.setFaceCulling = function () {};\n\t\n\t\t// API\n\t\n\t\tthis.getContext = function () {\n\t\n\t\t\treturn _context;\n\t\n\t\t};\n\t\n\t\tthis.getContextAttributes = function () {\n\t\n\t\t\treturn _context.getContextAttributes();\n\t\n\t\t};\n\t\n\t\tthis.getPixelRatio = function () {\n\t\n\t\t\treturn _pixelRatio;\n\t\n\t\t};\n\t\n\t\tthis.setPixelRatio = function ( value ) {\n\t\n\t\t\tif ( value !== undefined ) _pixelRatio = value;\n\t\n\t\t};\n\t\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\t\n\t\t\t_canvasWidth = width * _pixelRatio;\n\t\t\t_canvasHeight = height * _pixelRatio;\n\t\n\t\t\t_canvas.width = _canvasWidth;\n\t\t\t_canvas.height = _canvasHeight;\n\t\n\t\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\n\t\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\n\t\n\t\t\tif ( updateStyle !== false ) {\n\t\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\n\t\t\t}\n\t\n\t\t\t_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\t\n\t\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\t\n\t\t\t_contextGlobalAlpha = 1;\n\t\t\t_contextGlobalCompositeOperation = 0;\n\t\t\t_contextStrokeStyle = null;\n\t\t\t_contextFillStyle = null;\n\t\t\t_contextLineWidth = null;\n\t\t\t_contextLineCap = null;\n\t\t\t_contextLineJoin = null;\n\t\n\t\t\tthis.setViewport( 0, 0, width, height );\n\t\n\t\t};\n\t\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\t\n\t\t\t_viewportX = x * _pixelRatio;\n\t\t\t_viewportY = y * _pixelRatio;\n\t\n\t\t\t_viewportWidth = width * _pixelRatio;\n\t\t\t_viewportHeight = height * _pixelRatio;\n\t\n\t\t};\n\t\n\t\tthis.setScissor = function () {};\n\t\tthis.setScissorTest = function () {};\n\t\n\t\tthis.setClearColor = function ( color, alpha ) {\n\t\n\t\t\t_clearColor.set( color );\n\t\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\t\n\t\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\t\n\t\t};\n\t\n\t\tthis.setClearColorHex = function ( hex, alpha ) {\n\t\n\t\t\tconsole.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n\t\t\tthis.setClearColor( hex, alpha );\n\t\n\t\t};\n\t\n\t\tthis.getClearColor = function () {\n\t\n\t\t\treturn _clearColor;\n\t\n\t\t};\n\t\n\t\tthis.getClearAlpha = function () {\n\t\n\t\t\treturn _clearAlpha;\n\t\n\t\t};\n\t\n\t\tthis.getMaxAnisotropy = function () {\n\t\n\t\t\treturn 0;\n\t\n\t\t};\n\t\n\t\tthis.clear = function () {\n\t\n\t\t\tif ( _clearBox.isEmpty() === false ) {\n\t\n\t\t\t\t_clearBox.intersect( _clipBox );\n\t\t\t\t_clearBox.expandByScalar( 2 );\n\t\n\t\t\t\t_clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t\t\t\t_clearBox.min.y =  - _clearBox.min.y + _canvasHeightHalf;\t\t// higher y value !\n\t\t\t\t_clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t\t\t\t_clearBox.max.y =  - _clearBox.max.y + _canvasHeightHalf;\t\t// lower y value !\n\t\n\t\t\t\tif ( _clearAlpha < 1 ) {\n\t\n\t\t\t\t\t_context.clearRect(\n\t\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t\t);\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( _clearAlpha > 0 ) {\n\t\n\t\t\t\t\tsetBlending( THREE.NormalBlending );\n\t\t\t\t\tsetOpacity( 1 );\n\t\n\t\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\n\t\n\t\t\t\t\t_context.fillRect(\n\t\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t\t);\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_clearBox.makeEmpty();\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// compatibility\n\t\n\t\tthis.clearColor = function () {};\n\t\tthis.clearDepth = function () {};\n\t\tthis.clearStencil = function () {};\n\t\n\t\tthis.render = function ( scene, camera ) {\n\t\n\t\t\tif ( camera instanceof THREE.Camera === false ) {\n\t\n\t\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.autoClear === true ) this.clear();\n\t\n\t\t\t_this.info.render.vertices = 0;\n\t\t\t_this.info.render.faces = 0;\n\t\n\t\t\t_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );\n\t\t\t_context.translate( _canvasWidthHalf, _canvasHeightHalf );\n\t\n\t\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t\t_elements = _renderData.elements;\n\t\t\t_lights = _renderData.lights;\n\t\t\t_camera = camera;\n\t\n\t\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\t\n\t\t\t/* DEBUG\n\t\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n\t\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n\t\t\t*/\n\t\n\t\t\tcalculateLights();\n\t\n\t\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\n\t\n\t\t\t\tvar element = _elements[ e ];\n\t\n\t\t\t\tvar material = element.material;\n\t\n\t\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\t\n\t\t\t\t_elemBox.makeEmpty();\n\t\n\t\t\t\tif ( element instanceof THREE.RenderableSprite ) {\n\t\n\t\t\t\t\t_v1 = element;\n\t\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\n\t\n\t\t\t\t\trenderSprite( _v1, element, material );\n\t\n\t\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\n\t\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\t\n\t\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\n\t\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t\t_v2.positionScreen\n\t\t\t\t\t] );\n\t\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\t\n\t\t\t\t\t\trenderLine( _v1, _v2, element, material );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\n\t\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\t\n\t\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\t\n\t\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\n\t\n\t\t\t\t\tif ( material.overdraw > 0 ) {\n\t\n\t\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\n\t\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\n\t\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t\t_v3.positionScreen\n\t\t\t\t\t] );\n\t\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\t\n\t\t\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t/* DEBUG\n\t\t\t\tsetLineWidth( 1 );\n\t\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n\t\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n\t\t\t\t*/\n\t\n\t\t\t\t_clearBox.union( _elemBox );\n\t\n\t\t\t}\n\t\n\t\t\t/* DEBUG\n\t\t\tsetLineWidth( 1 );\n\t\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n\t\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n\t\t\t*/\n\t\n\t\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\n\t\n\t\t};\n\t\n\t\t//\n\t\n\t\tfunction calculateLights() {\n\t\n\t\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t\t_pointLights.setRGB( 0, 0, 0 );\n\t\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\t\n\t\t\t\tvar light = _lights[ l ];\n\t\t\t\tvar lightColor = light.color;\n\t\n\t\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\t\n\t\t\t\t\t_ambientLight.add( lightColor );\n\t\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\t\n\t\t\t\t\t// for sprites\n\t\n\t\t\t\t\t_directionalLights.add( lightColor );\n\t\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\t\n\t\t\t\t\t// for sprites\n\t\n\t\t\t\t\t_pointLights.add( lightColor );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction calculateLight( position, normal, color ) {\n\t\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\t\n\t\t\t\tvar light = _lights[ l ];\n\t\n\t\t\t\t_lightColor.copy( light.color );\n\t\n\t\t\t\tif ( light instanceof THREE.DirectionalLight ) {\n\t\n\t\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\t\n\t\t\t\t\tvar amount = normal.dot( lightPosition );\n\t\n\t\t\t\t\tif ( amount <= 0 ) continue;\n\t\n\t\t\t\t\tamount *= light.intensity;\n\t\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\t\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\t\n\t\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\t\n\t\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\t\n\t\t\t\t\tif ( amount <= 0 ) continue;\n\t\n\t\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\t\n\t\t\t\t\tif ( amount == 0 ) continue;\n\t\n\t\t\t\t\tamount *= light.intensity;\n\t\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction renderSprite( v1, element, material ) {\n\t\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\t\n\t\t\tvar scaleX = element.scale.x * _canvasWidthHalf;\n\t\t\tvar scaleY = element.scale.y * _canvasHeightHalf;\n\t\n\t\t\tvar dist = 0.5 * Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite\n\t\t\t_elemBox.min.set( v1.x - dist, v1.y - dist );\n\t\t\t_elemBox.max.set( v1.x + dist, v1.y + dist );\n\t\n\t\t\tif ( material instanceof THREE.SpriteMaterial ) {\n\t\n\t\t\t\tvar texture = material.map;\n\t\n\t\t\t\tif ( texture !== null ) {\n\t\n\t\t\t\t\tvar pattern = _patterns[ texture.id ];\n\t\n\t\t\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\t\n\t\t\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t\t\t_patterns[ texture.id ] = pattern;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( pattern.canvas !== undefined ) {\n\t\n\t\t\t\t\t\tsetFillStyle( pattern.canvas );\n\t\n\t\t\t\t\t\tvar bitmap = texture.image;\n\t\n\t\t\t\t\t\tvar ox = bitmap.width * texture.offset.x;\n\t\t\t\t\t\tvar oy = bitmap.height * texture.offset.y;\n\t\n\t\t\t\t\t\tvar sx = bitmap.width * texture.repeat.x;\n\t\t\t\t\t\tvar sy = bitmap.height * texture.repeat.y;\n\t\n\t\t\t\t\t\tvar cx = scaleX / sx;\n\t\t\t\t\t\tvar cy = scaleY / sy;\n\t\n\t\t\t\t\t\t_context.save();\n\t\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t\t_context.translate( - scaleX / 2, - scaleY / 2 );\n\t\t\t\t\t\t_context.scale( cx, cy );\n\t\t\t\t\t\t_context.translate( - ox, - oy );\n\t\t\t\t\t\t_context.fillRect( ox, oy, sx, sy );\n\t\t\t\t\t\t_context.restore();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// no texture\n\t\n\t\t\t\t\tsetFillStyle( material.color.getStyle() );\n\t\n\t\t\t\t\t_context.save();\n\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t_context.scale( scaleX, - scaleY );\n\t\t\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t\t\t_context.restore();\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( material instanceof THREE.SpriteCanvasMaterial ) {\n\t\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\t\tsetFillStyle( material.color.getStyle() );\n\t\n\t\t\t\t_context.save();\n\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t_context.scale( scaleX, scaleY );\n\t\n\t\t\t\tmaterial.program( _context );\n\t\n\t\t\t\t_context.restore();\n\t\n\t\t\t}\n\t\n\t\t\t/* DEBUG\n\t\t\tsetStrokeStyle( 'rgb(255,255,0)' );\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( v1.x - 10, v1.y );\n\t\t\t_context.lineTo( v1.x + 10, v1.y );\n\t\t\t_context.moveTo( v1.x, v1.y - 10 );\n\t\t\t_context.lineTo( v1.x, v1.y + 10 );\n\t\t\t_context.stroke();\n\t\t\t*/\n\t\n\t\t}\n\t\n\t\tfunction renderLine( v1, v2, element, material ) {\n\t\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\t\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\n\t\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\n\t\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\t\n\t\t\t\tsetLineWidth( material.linewidth );\n\t\t\t\tsetLineCap( material.linecap );\n\t\t\t\tsetLineJoin( material.linejoin );\n\t\n\t\t\t\tif ( material.vertexColors !== THREE.VertexColors ) {\n\t\n\t\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar colorStyle1 = element.vertexColors[ 0 ].getStyle();\n\t\t\t\t\tvar colorStyle2 = element.vertexColors[ 1 ].getStyle();\n\t\n\t\t\t\t\tif ( colorStyle1 === colorStyle2 ) {\n\t\n\t\t\t\t\t\tsetStrokeStyle( colorStyle1 );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\ttry {\n\t\n\t\t\t\t\t\t\tvar grad = _context.createLinearGradient(\n\t\t\t\t\t\t\t\tv1.positionScreen.x,\n\t\t\t\t\t\t\t\tv1.positionScreen.y,\n\t\t\t\t\t\t\t\tv2.positionScreen.x,\n\t\t\t\t\t\t\t\tv2.positionScreen.y\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tgrad.addColorStop( 0, colorStyle1 );\n\t\t\t\t\t\t\tgrad.addColorStop( 1, colorStyle2 );\n\t\n\t\t\t\t\t\t} catch ( exception ) {\n\t\n\t\t\t\t\t\t\tgrad = colorStyle1;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tsetStrokeStyle( grad );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_context.stroke();\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\t\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\t\n\t\t\t\tsetLineWidth( material.linewidth );\n\t\t\t\tsetLineCap( material.linecap );\n\t\t\t\tsetLineJoin( material.linejoin );\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\t\tsetLineDash( [ material.dashSize, material.gapSize ] );\n\t\n\t\t\t\t_context.stroke();\n\t\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\t\n\t\t\t\tsetLineDash( [] );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\n\t\n\t\t\t_this.info.render.vertices += 3;\n\t\t\t_this.info.render.faces ++;\n\t\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\t\n\t\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\n\t\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\n\t\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\n\t\n\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\n\t\n\t\t\tif ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {\n\t\n\t\t\t\t_diffuseColor.copy( material.color );\n\t\t\t\t_emissiveColor.copy( material.emissive );\n\t\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\t\n\t\t\t\t\t_diffuseColor.multiply( element.color );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_color.copy( _ambientLight );\n\t\n\t\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\t\n\t\t\t\tcalculateLight( _centroid, element.normalModel, _color );\n\t\n\t\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\n\t\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\t\n\t\t\t} else if ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t\t    material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t\t    material instanceof THREE.MeshPhongMaterial ) {\n\t\n\t\t\t\tif ( material.map !== null ) {\n\t\n\t\t\t\t\tvar mapping = material.map.mapping;\n\t\n\t\t\t\t\tif ( mapping === THREE.UVMapping ) {\n\t\n\t\t\t\t\t\t_uvs = element.uvs;\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( material.envMap !== null ) {\n\t\n\t\t\t\t\tif ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {\n\t\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv1x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv1y = 0.5 * _normal.y + 0.5;\n\t\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv2x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv2y = 0.5 * _normal.y + 0.5;\n\t\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv3x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv3y = 0.5 * _normal.y + 0.5;\n\t\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t_color.copy( material.color );\n\t\n\t\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\t\n\t\t\t\t\t\t_color.multiply( element.color );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t\t : fillPath( _color );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\t\n\t\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\n\t\n\t\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\t\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\t\n\t\t\t} else {\n\t\n\t\t\t\t_color.setRGB( 1, 1, 1 );\n\t\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\n\t\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( x0, y0 );\n\t\t\t_context.lineTo( x1, y1 );\n\t\t\t_context.lineTo( x2, y2 );\n\t\t\t_context.closePath();\n\t\n\t\t}\n\t\n\t\tfunction strokePath( color, linewidth, linecap, linejoin ) {\n\t\n\t\t\tsetLineWidth( linewidth );\n\t\t\tsetLineCap( linecap );\n\t\t\tsetLineJoin( linejoin );\n\t\t\tsetStrokeStyle( color.getStyle() );\n\t\n\t\t\t_context.stroke();\n\t\n\t\t\t_elemBox.expandByScalar( linewidth * 2 );\n\t\n\t\t}\n\t\n\t\tfunction fillPath( color ) {\n\t\n\t\t\tsetFillStyle( color.getStyle() );\n\t\t\t_context.fill();\n\t\n\t\t}\n\t\n\t\tfunction textureToPattern( texture ) {\n\t\n\t\t\tif ( texture.version === 0 ||\n\t\t\t\ttexture instanceof THREE.CompressedTexture ||\n\t\t\t\ttexture instanceof THREE.DataTexture ) {\n\t\n\t\t\t\treturn {\n\t\t\t\t\tcanvas: undefined,\n\t\t\t\t\tversion: texture.version\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\tvar image = texture.image;\n\t\n\t\t\tif ( image.complete === false ) {\n\t\n\t\t\t\treturn {\n\t\t\t\t\tcanvas: undefined,\n\t\t\t\t\tversion: 0\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\tvar canvas = document.createElement( 'canvas' );\n\t\t\tcanvas.width = image.width;\n\t\t\tcanvas.height = image.height;\n\t\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.setTransform( 1, 0, 0, - 1, 0, image.height );\n\t\t\tcontext.drawImage( image, 0, 0 );\n\t\n\t\t\tvar repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t\t\tvar repeatY = texture.wrapT === THREE.RepeatWrapping;\n\t\n\t\t\tvar repeat = 'no-repeat';\n\t\n\t\t\tif ( repeatX === true && repeatY === true ) {\n\t\n\t\t\t\trepeat = 'repeat';\n\t\n\t\t\t} else if ( repeatX === true ) {\n\t\n\t\t\t\trepeat = 'repeat-x';\n\t\n\t\t\t} else if ( repeatY === true ) {\n\t\n\t\t\t\trepeat = 'repeat-y';\n\t\n\t\t\t}\n\t\n\t\t\tvar pattern = _context.createPattern( canvas, repeat );\n\t\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t\t\treturn {\n\t\t\t\tcanvas: pattern,\n\t\t\t\tversion: texture.version\n\t\t\t};\n\t\n\t\t}\n\t\n\t\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\n\t\n\t\t\tvar pattern = _patterns[ texture.id ];\n\t\n\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\t\n\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t_patterns[ texture.id ] = pattern;\n\t\n\t\t\t}\n\t\n\t\t\tif ( pattern.canvas !== undefined ) {\n\t\n\t\t\t\tsetFillStyle( pattern.canvas );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tsetFillStyle( 'rgba( 0, 0, 0, 1)' );\n\t\t\t\t_context.fill();\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\t\n\t\t\tvar a, b, c, d, e, f, det, idet,\n\t\t\toffsetX = texture.offset.x / texture.repeat.x,\n\t\t\toffsetY = texture.offset.y / texture.repeat.y,\n\t\t\twidth = texture.image.width * texture.repeat.x,\n\t\t\theight = texture.image.height * texture.repeat.y;\n\t\n\t\t\tu0 = ( u0 + offsetX ) * width;\n\t\t\tv0 = ( v0 + offsetY ) * height;\n\t\n\t\t\tu1 = ( u1 + offsetX ) * width;\n\t\t\tv1 = ( v1 + offsetY ) * height;\n\t\n\t\t\tu2 = ( u2 + offsetX ) * width;\n\t\t\tv2 = ( v2 + offsetY ) * height;\n\t\n\t\t\tx1 -= x0; y1 -= y0;\n\t\t\tx2 -= x0; y2 -= y0;\n\t\n\t\t\tu1 -= u0; v1 -= v0;\n\t\t\tu2 -= u0; v2 -= v0;\n\t\n\t\t\tdet = u1 * v2 - u2 * v1;\n\t\n\t\t\tif ( det === 0 ) return;\n\t\n\t\t\tidet = 1 / det;\n\t\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\t\n\t\t\te = x0 - a * u0 - c * v0;\n\t\t\tf = y0 - b * u0 - d * v0;\n\t\n\t\t\t_context.save();\n\t\t\t_context.transform( a, b, c, d, e, f );\n\t\t\t_context.fill();\n\t\t\t_context.restore();\n\t\n\t\t}\n\t\n\t\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\n\t\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\t\n\t\t\tvar a, b, c, d, e, f, det, idet,\n\t\t\twidth = image.width - 1,\n\t\t\theight = image.height - 1;\n\t\n\t\t\tu0 *= width; v0 *= height;\n\t\t\tu1 *= width; v1 *= height;\n\t\t\tu2 *= width; v2 *= height;\n\t\n\t\t\tx1 -= x0; y1 -= y0;\n\t\t\tx2 -= x0; y2 -= y0;\n\t\n\t\t\tu1 -= u0; v1 -= v0;\n\t\t\tu2 -= u0; v2 -= v0;\n\t\n\t\t\tdet = u1 * v2 - u2 * v1;\n\t\n\t\t\tidet = 1 / det;\n\t\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\t\n\t\t\te = x0 - a * u0 - c * v0;\n\t\t\tf = y0 - b * u0 - d * v0;\n\t\n\t\t\t_context.save();\n\t\t\t_context.transform( a, b, c, d, e, f );\n\t\t\t_context.clip();\n\t\t\t_context.drawImage( image, 0, 0 );\n\t\t\t_context.restore();\n\t\n\t\t}\n\t\n\t\t// Hide anti-alias gaps\n\t\n\t\tfunction expand( v1, v2, pixels ) {\n\t\n\t\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\n\t\t\tdet = x * x + y * y, idet;\n\t\n\t\t\tif ( det === 0 ) return;\n\t\n\t\t\tidet = pixels / Math.sqrt( det );\n\t\n\t\t\tx *= idet; y *= idet;\n\t\n\t\t\tv2.x += x; v2.y += y;\n\t\t\tv1.x -= x; v1.y -= y;\n\t\n\t\t}\n\t\n\t\t// Context cached methods.\n\t\n\t\tfunction setOpacity( value ) {\n\t\n\t\t\tif ( _contextGlobalAlpha !== value ) {\n\t\n\t\t\t\t_context.globalAlpha = value;\n\t\t\t\t_contextGlobalAlpha = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setBlending( value ) {\n\t\n\t\t\tif ( _contextGlobalCompositeOperation !== value ) {\n\t\n\t\t\t\tif ( value === THREE.NormalBlending ) {\n\t\n\t\t\t\t\t_context.globalCompositeOperation = 'source-over';\n\t\n\t\t\t\t} else if ( value === THREE.AdditiveBlending ) {\n\t\n\t\t\t\t\t_context.globalCompositeOperation = 'lighter';\n\t\n\t\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\n\t\n\t\t\t\t\t_context.globalCompositeOperation = 'darker';\n\t\n\t\t\t\t} else if ( value === THREE.MultiplyBlending ) {\n\t\n\t\t\t\t\t_context.globalCompositeOperation = 'multiply';\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_contextGlobalCompositeOperation = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setLineWidth( value ) {\n\t\n\t\t\tif ( _contextLineWidth !== value ) {\n\t\n\t\t\t\t_context.lineWidth = value;\n\t\t\t\t_contextLineWidth = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setLineCap( value ) {\n\t\n\t\t\t// \"butt\", \"round\", \"square\"\n\t\n\t\t\tif ( _contextLineCap !== value ) {\n\t\n\t\t\t\t_context.lineCap = value;\n\t\t\t\t_contextLineCap = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setLineJoin( value ) {\n\t\n\t\t\t// \"round\", \"bevel\", \"miter\"\n\t\n\t\t\tif ( _contextLineJoin !== value ) {\n\t\n\t\t\t\t_context.lineJoin = value;\n\t\t\t\t_contextLineJoin = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setStrokeStyle( value ) {\n\t\n\t\t\tif ( _contextStrokeStyle !== value ) {\n\t\n\t\t\t\t_context.strokeStyle = value;\n\t\t\t\t_contextStrokeStyle = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setFillStyle( value ) {\n\t\n\t\t\tif ( _contextFillStyle !== value ) {\n\t\n\t\t\t\t_context.fillStyle = value;\n\t\t\t\t_contextFillStyle = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setLineDash( value ) {\n\t\n\t\t\tif ( _contextLineDash.length !== value.length ) {\n\t\n\t\t\t\t_context.setLineDash( value );\n\t\t\t\t_contextLineDash = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(32);\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author julianwa / https://github.com/julianwa\n\t */\n\t\n\tTHREE.RenderableObject = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.object = null;\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableFace = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.v1 = new THREE.RenderableVertex();\n\t\tthis.v2 = new THREE.RenderableVertex();\n\t\tthis.v3 = new THREE.RenderableVertex();\n\t\n\t\tthis.normalModel = new THREE.Vector3();\n\t\n\t\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\t\tthis.vertexNormalsLength = 0;\n\t\n\t\tthis.color = new THREE.Color();\n\t\tthis.material = null;\n\t\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\t\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableVertex = function () {\n\t\n\t\tthis.position = new THREE.Vector3();\n\t\tthis.positionWorld = new THREE.Vector3();\n\t\tthis.positionScreen = new THREE.Vector4();\n\t\n\t\tthis.visible = true;\n\t\n\t};\n\t\n\tTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\t\n\t\tthis.positionWorld.copy( vertex.positionWorld );\n\t\tthis.positionScreen.copy( vertex.positionScreen );\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableLine = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.v1 = new THREE.RenderableVertex();\n\t\tthis.v2 = new THREE.RenderableVertex();\n\t\n\t\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\t\tthis.material = null;\n\t\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableSprite = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.object = null;\n\t\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t\tthis.z = 0;\n\t\n\t\tthis.rotation = 0;\n\t\tthis.scale = new THREE.Vector2();\n\t\n\t\tthis.material = null;\n\t\tthis.renderOrder = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.Projector = function () {\n\t\n\t\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\t\n\t\t_renderData = { objects: [], lights: [], elements: [] },\n\t\n\t\t_vector3 = new THREE.Vector3(),\n\t\t_vector4 = new THREE.Vector4(),\n\t\n\t\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t\t_boundingBox = new THREE.Box3(),\n\t\t_points3 = new Array( 3 ),\n\t\t_points4 = new Array( 4 ),\n\t\n\t\t_viewMatrix = new THREE.Matrix4(),\n\t\t_viewProjectionMatrix = new THREE.Matrix4(),\n\t\n\t\t_modelMatrix,\n\t\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\t\n\t\t_normalMatrix = new THREE.Matrix3(),\n\t\n\t\t_frustum = new THREE.Frustum(),\n\t\n\t\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\t\n\t\t//\n\t\n\t\tthis.projectVector = function ( vector, camera ) {\n\t\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\t\n\t\t};\n\t\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\t\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\t\n\t\t};\n\t\n\t\tthis.pickingRay = function ( vector, camera ) {\n\t\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\t\n\t\t};\n\t\n\t\t//\n\t\n\t\tvar RenderList = function () {\n\t\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\t\n\t\t\tvar object = null;\n\t\t\tvar material = null;\n\t\n\t\t\tvar normalMatrix = new THREE.Matrix3();\n\t\n\t\t\tfunction setObject( value ) {\n\t\n\t\t\t\tobject = value;\n\t\t\t\tmaterial = object.material;\n\t\n\t\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\t\n\t\t\t\tnormals.length = 0;\n\t\t\t\tuvs.length = 0;\n\t\n\t\t\t}\n\t\n\t\t\tfunction projectVertex( vertex ) {\n\t\n\t\t\t\tvar position = vertex.position;\n\t\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\t\tvar positionScreen = vertex.positionScreen;\n\t\n\t\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\t\n\t\t\t\tvar invW = 1 / positionScreen.w;\n\t\n\t\t\t\tpositionScreen.x *= invW;\n\t\t\t\tpositionScreen.y *= invW;\n\t\t\t\tpositionScreen.z *= invW;\n\t\n\t\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushVertex( x, y, z ) {\n\t\n\t\t\t\t_vertex = getNextVertexInPool();\n\t\t\t\t_vertex.position.set( x, y, z );\n\t\n\t\t\t\tprojectVertex( _vertex );\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushNormal( x, y, z ) {\n\t\n\t\t\t\tnormals.push( x, y, z );\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushUv( x, y ) {\n\t\n\t\t\t\tuvs.push( x, y );\n\t\n\t\t\t}\n\t\n\t\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\t\n\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\t\n\t\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t\t_points3[ 2 ] = v3.positionScreen;\n\t\n\t\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\t\n\t\t\t}\n\t\n\t\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\t\n\t\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushLine( a, b ) {\n\t\n\t\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\t\tvar v2 = _vertexPool[ b ];\n\t\n\t\t\t\t_line = getNextLineInPool();\n\t\n\t\t\t\t_line.id = object.id;\n\t\t\t\t_line.v1.copy( v1 );\n\t\t\t\t_line.v2.copy( v2 );\n\t\t\t\t_line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;\n\t\t\t\t_line.renderOrder = object.renderOrder;\n\t\n\t\t\t\t_line.material = object.material;\n\t\n\t\t\t\t_renderData.elements.push( _line );\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushTriangle( a, b, c ) {\n\t\n\t\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\t\tvar v3 = _vertexPool[ c ];\n\t\n\t\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\t\n\t\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\t\n\t\t\t\t\t_face = getNextFaceInPool();\n\t\n\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\t\n\t\t\t\t\t// use first vertex normal as face normal\n\t\n\t\t\t\t\t_face.normalModel.fromArray( normals, a * 3 );\n\t\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\t\n\t\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t_face.vertexNormalsLength = 3;\n\t\n\t\t\t\t\t_face.material = object.material;\n\t\n\t\t\t\t\t_renderData.elements.push( _face );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\tsetObject: setObject,\n\t\t\t\tprojectVertex: projectVertex,\n\t\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\t\tpushVertex: pushVertex,\n\t\t\t\tpushNormal: pushNormal,\n\t\t\t\tpushUv: pushUv,\n\t\t\t\tpushLine: pushLine,\n\t\t\t\tpushTriangle: pushTriangle\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tvar renderList = new RenderList();\n\t\n\t\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\t\n\t\t\t_faceCount = 0;\n\t\t\t_lineCount = 0;\n\t\t\t_spriteCount = 0;\n\t\n\t\t\t_renderData.elements.length = 0;\n\t\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\t\n\t\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\n\t\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\t\n\t\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\t\n\t\t\t//\n\t\n\t\t\t_objectCount = 0;\n\t\n\t\t\t_renderData.objects.length = 0;\n\t\t\t_renderData.lights.length = 0;\n\t\n\t\t\tfunction addObject( object ) {\n\t\n\t\t\t\t_object = getNextObjectInPool();\n\t\t\t\t_object.id = object.id;\n\t\t\t\t_object.object = object;\n\t\n\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\n\t\t\t\t_object.z = _vector3.z;\n\t\t\t\t_object.renderOrder = object.renderOrder;\n\t\n\t\t\t\t_renderData.objects.push( _object );\n\t\n\t\t\t}\n\t\n\t\t\tscene.traverseVisible( function ( object ) {\n\t\n\t\t\t\tif ( object instanceof THREE.Light ) {\n\t\n\t\t\t\t\t_renderData.lights.push( object );\n\t\n\t\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line ) {\n\t\n\t\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\n\t\n\t\t\t\t\taddObject( object );\n\t\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\t\n\t\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\n\t\n\t\t\t\t\taddObject( object );\n\t\n\t\t\t\t}\n\t\n\t\t\t} );\n\t\n\t\t\tif ( sortObjects === true ) {\n\t\n\t\t\t\t_renderData.objects.sort( painterSort );\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tfor ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\n\t\n\t\t\t\tvar object = _renderData.objects[ o ].object;\n\t\t\t\tvar geometry = object.geometry;\n\t\n\t\t\t\trenderList.setObject( object );\n\t\n\t\t\t\t_modelMatrix = object.matrixWorld;\n\t\n\t\t\t\t_vertexCount = 0;\n\t\n\t\t\t\tif ( object instanceof THREE.Mesh ) {\n\t\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\t\tvar groups = geometry.groups;\n\t\n\t\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\t\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar normals = attributes.normal.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\t\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\t\n\t\t\t\t\t\t\tif ( groups.length > 0 ) {\n\t\n\t\t\t\t\t\t\t\tfor ( var o = 0; o < groups.length; o ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tvar group = groups[ o ];\n\t\n\t\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\n\t\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\t\n\t\t\t\t\t\tvar material = object.material;\n\t\n\t\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material : null;\n\t\n\t\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\t\n\t\t\t\t\t\t\tvar vertex = vertices[ v ];\n\t\n\t\t\t\t\t\t\t_vector3.copy( vertex );\n\t\n\t\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\t\n\t\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\t\n\t\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\t\n\t\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\t\n\t\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\t\n\t\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\t\t\tvar face = faces[ f ];\n\t\n\t\t\t\t\t\t\tmaterial = isFaceMaterial === true\n\t\t\t\t\t\t\t\t ? objectMaterials.materials[ face.materialIndex ]\n\t\t\t\t\t\t\t\t : object.material;\n\t\n\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\t\n\t\t\t\t\t\t\tvar side = material.side;\n\t\n\t\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\t\n\t\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\t\n\t\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\t\n\t\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\t\n\t\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face = getNextFaceInPool();\n\t\n\t\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t\t_face.v3.copy( v3 );\n\t\n\t\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\t\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\t\n\t\t\t\t\t\t\t\t_face.normalModel.negate();\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\t\n\t\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\t\n\t\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\t\n\t\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\t\n\t\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\t\n\t\t\t\t\t\t\t\t\tnormalModel.negate();\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\t\n\t\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\t\n\t\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\t\n\t\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t\t_face.material = material;\n\t\n\t\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\t\n\t\t\t\t\t\t\t_renderData.elements.push( _face );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( object instanceof THREE.Line ) {\n\t\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\t\n\t\t\t\t\t\tif ( attributes.position !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( geometry.index !== null ) {\n\t\n\t\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\t\n\t\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\t\n\t\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\t\n\t\t\t\t\t\tvar vertices = object.geometry.vertices;\n\t\n\t\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\t\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\t\n\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\t\n\t\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\t\n\t\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\t\n\t\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\t\n\t\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\t\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\t\n\t\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\t\n\t\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\t\n\t\t\t\t\t\t\t\t_line = getNextLineInPool();\n\t\n\t\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\t\n\t\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\t\n\t\t\t\t\t\t\t\t_line.material = object.material;\n\t\n\t\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\t\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\t\n\t\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\t\n\t\t\t\t\tvar invW = 1 / _vector4.w;\n\t\n\t\t\t\t\t_vector4.z *= invW;\n\t\n\t\t\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\t\n\t\t\t\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t\t\t\t_sprite.id = object.id;\n\t\t\t\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t\t\t\t_sprite.z = _vector4.z;\n\t\t\t\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t\t\t\t_sprite.object = object;\n\t\n\t\t\t\t\t\t_sprite.rotation = object.rotation;\n\t\n\t\t\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\t\n\t\t\t\t\t\t_sprite.material = object.material;\n\t\n\t\t\t\t\t\t_renderData.elements.push( _sprite );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( sortElements === true ) {\n\t\n\t\t\t\t_renderData.elements.sort( painterSort );\n\t\n\t\t\t}\n\t\n\t\t\treturn _renderData;\n\t\n\t\t};\n\t\n\t\t// Pools\n\t\n\t\tfunction getNextObjectInPool() {\n\t\n\t\t\tif ( _objectCount === _objectPoolLength ) {\n\t\n\t\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t\t_objectPool.push( object );\n\t\t\t\t_objectPoolLength ++;\n\t\t\t\t_objectCount ++;\n\t\t\t\treturn object;\n\t\n\t\t\t}\n\t\n\t\t\treturn _objectPool[ _objectCount ++ ];\n\t\n\t\t}\n\t\n\t\tfunction getNextVertexInPool() {\n\t\n\t\t\tif ( _vertexCount === _vertexPoolLength ) {\n\t\n\t\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t\t_vertexPool.push( vertex );\n\t\t\t\t_vertexPoolLength ++;\n\t\t\t\t_vertexCount ++;\n\t\t\t\treturn vertex;\n\t\n\t\t\t}\n\t\n\t\t\treturn _vertexPool[ _vertexCount ++ ];\n\t\n\t\t}\n\t\n\t\tfunction getNextFaceInPool() {\n\t\n\t\t\tif ( _faceCount === _facePoolLength ) {\n\t\n\t\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t\t_facePool.push( face );\n\t\t\t\t_facePoolLength ++;\n\t\t\t\t_faceCount ++;\n\t\t\t\treturn face;\n\t\n\t\t\t}\n\t\n\t\t\treturn _facePool[ _faceCount ++ ];\n\t\n\t\n\t\t}\n\t\n\t\tfunction getNextLineInPool() {\n\t\n\t\t\tif ( _lineCount === _linePoolLength ) {\n\t\n\t\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t\t_linePool.push( line );\n\t\t\t\t_linePoolLength ++;\n\t\t\t\t_lineCount ++;\n\t\t\t\treturn line;\n\t\n\t\t\t}\n\t\n\t\t\treturn _linePool[ _lineCount ++ ];\n\t\n\t\t}\n\t\n\t\tfunction getNextSpriteInPool() {\n\t\n\t\t\tif ( _spriteCount === _spritePoolLength ) {\n\t\n\t\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t\t_spritePool.push( sprite );\n\t\t\t\t_spritePoolLength ++;\n\t\t\t\t_spriteCount ++;\n\t\t\t\treturn sprite;\n\t\n\t\t\t}\n\t\n\t\t\treturn _spritePool[ _spriteCount ++ ];\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tfunction painterSort( a, b ) {\n\t\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\t\n\t\t\t\treturn a.renderOrder - b.renderOrder;\n\t\n\t\t\t} else if ( a.z !== b.z ) {\n\t\n\t\t\t\treturn b.z - a.z;\n\t\n\t\t\t} else if ( a.id !== b.id ) {\n\t\n\t\t\t\treturn a.id - b.id;\n\t\n\t\t\t} else {\n\t\n\t\t\t\treturn 0;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction clipLine( s1, s2 ) {\n\t\n\t\t\tvar alpha1 = 0, alpha2 = 1,\n\t\n\t\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t\t// Z = -1 and Z = +1, respectively.\n\t\t\tbc1near =  s1.z + s1.w,\n\t\t\tbc2near =  s2.z + s2.w,\n\t\t\tbc1far =  - s1.z + s1.w,\n\t\t\tbc2far =  - s2.z + s2.w;\n\t\n\t\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\t\n\t\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\t\treturn true;\n\t\n\t\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\t\n\t\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\t\treturn false;\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// The line segment spans at least one clip plane.\n\t\n\t\t\t\tif ( bc1near < 0 ) {\n\t\n\t\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\t\n\t\t\t\t} else if ( bc2near < 0 ) {\n\t\n\t\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( bc1far < 0 ) {\n\t\n\t\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\t\n\t\t\t\t} else if ( bc2far < 0 ) {\n\t\n\t\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( alpha2 < alpha1 ) {\n\t\n\t\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\t\treturn false;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(32);\n\t\n\t/**\n\t * @author bchirls / http://bchirls.com/\n\t */\n\t\n\tTHREE.VRStereoEffect = function ( renderer, fullScreenElement, options ) {\n\t\n\t\t// internals\n\t\tvar self = this;\n\t\tvar width = 0, height = 0;\n\t\tvar hmdWidth, hmdHeight;\n\t\n\t\tvar hmdDevice;\n\t\tvar vrMode;\n\t    var inWebview = false;\n\t\tvar vrPreview = false;\n\t\tvar eyeOffsetLeft = new THREE.Vector3();\n\t\tvar eyeOffsetRight = new THREE.Vector3();\n\t\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar scale = new THREE.Vector3();\n\t\n\t\tvar cameraLeft = new THREE.PerspectiveCamera();\n\t\tvar cameraRight = new THREE.PerspectiveCamera();\n\t\tvar leftRenderRect = {\n\t\t\tx: 0, y: 0, width: 0, height: 0\n\t\t};\n\t\tvar rightRenderRect = {\n\t\t\tx: 0, y: 0, width: 0, height: 0\n\t\t};\n\t\n\t\tvar near = 2;\n\t\tvar far = 40000;\n\t\n\t\tvar requestFullscreen;\n\t\tvar fullScreenParam = {\n\t\t\tvrDisplay: null\n\t\t};\n\t\tvar fovScale;\n\t\n\t\tvar RADIANS = Math.PI / 180;\n\t\n\t\tvar poll = options && options.poll || 1000;\n\t\tvar pollTimeout;\n\t\n\t\tfunction perspectiveMatrixFromVRFieldOfView(fov, zNear, zFar) {\n\t\t\tvar outMat = new THREE.Matrix4(),\n\t\t\t\tout = outMat.elements,\n\t\t\t\tupTan = Math.tan(fov.upDegrees * RADIANS),\n\t\t\t\tdownTan = Math.tan(fov.downDegrees * RADIANS),\n\t\t\t\tleftTan = Math.tan(fov.leftDegrees * RADIANS),\n\t\t\t\trightTan = Math.tan(fov.rightDegrees * RADIANS),\n\t\n\t\t\t\txScale = 2 / (leftTan + rightTan),\n\t\t\t\tyScale = 2 / (upTan + downTan);\n\t\n\t\t\tout[0] = xScale;\n\t\t\tout[4] = 0;\n\t\t\tout[8] = -((leftTan - rightTan) * xScale * 0.5);\n\t\t\tout[12] = 0;\n\t\n\t\t\tout[1] = 0;\n\t\t\tout[5] = yScale;\n\t\t\tout[9] = ((upTan - downTan) * yScale * 0.5);\n\t\t\tout[13] = 0;\n\t\n\t\t\tout[2] = 0;\n\t\t\tout[6] = 0;\n\t\t\tout[10] = zFar / (zNear - zFar);\n\t\t\tout[14] = (zFar * zNear) / (zNear - zFar);\n\t\n\t\t\tout[3] = 0;\n\t\t\tout[7] = 0;\n\t\t\tout[11] = -1;\n\t\t\tout[15] = 0;\n\t\n\t\t\treturn outMat;\n\t\t}\n\t\n\t\tfunction resize() {\n\t\t\tvar w, h;\n\t\n\t\t\tif (hmdDevice && vrMode) {\n\t\t\t\tw = hmdWidth;// / Math.pow(window.devicePixelRatio || 1, 2);\n\t\t\t\th = hmdHeight;// / Math.pow(window.devicePixelRatio || 1, 2);\n\t\t\t} else {\n\t\t\t\tw = width || renderer.domElement.offsetWidth || window.innerWidth;\n\t\t\t\th = height || renderer.domElement.offsetHeight || window.innerHeight;\n\t\t\t}\n\t\n\t\t\trenderer.setSize(w, h);\n\t\t}\n\t\n\t\tfunction updateProjection() {\n\t\t\tvar fovLeft,\n\t\t\t\tfovRight,\n\t\n\t\t\t\tleftEyeParams,\n\t\t\t\trightEyeParams,\n\t\t\t\tleftEyeRect,\n\t\t\t\trightEyeRect,\n\t\n\t\t\t\tleftEyeViewport,\n\t\t\t\trightEyeViewport;\n\t\n\t\t\tif (!hmdDevice) {\n\t\t\t\tcameraLeft.fov = 80;\n\t\t\t\tcameraRight.fov = 80;\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// if (amount && hmdDevice.setFieldOfView) {\n\t\t\t// \tfovScale += amount;\n\t\t\t// \tfovScale = Math.max(0.1, fovScale);\n\t\n\t\t\t// \tfovLeft = hmdDevice.getRecommendedEyeFieldOfView('left');\n\t\n\t\t\t// \tfovLeft.upDegrees *= fovScale;\n\t\t\t// \tfovLeft.downDegrees *= fovScale;\n\t\t\t// \tfovLeft.leftDegrees *= fovScale;\n\t\t\t// \tfovLeft.rightDegrees *= fovScale;\n\t\n\t\t\t// \tfovRight = hmdDevice.getRecommendedEyeFieldOfView('right');\n\t\t\t// \tfovRight.upDegrees *= fovScale;\n\t\t\t// \tfovRight.downDegrees *= fovScale;\n\t\t\t// \tfovRight.leftDegrees *= fovScale;\n\t\t\t// \tfovRight.rightDegrees *= fovScale;\n\t\n\t\t\t// \thmdDevice.setFieldOfView(fovLeft, fovRight);\n\t\t\t// }\n\t\n\t\t\tif (hmdDevice.getEyeParameters) {\n\t\t\t\tleftEyeParams = hmdDevice.getEyeParameters('left');\n\t\t\t\trightEyeParams = hmdDevice.getEyeParameters('right');\n\t\t\t\tleftEyeRect = leftEyeParams.renderRect;\n\t\t\t\trightEyeRect = rightEyeParams.renderRect;\n\t\n\t\t\t\thmdWidth = rightEyeRect.x + rightEyeRect.width;\n\t\t\t\thmdHeight = Math.max(leftEyeRect.y + leftEyeRect.height, rightEyeRect.y + rightEyeRect.height);\n\t\n\t\t\t\tfovLeft = leftEyeParams.currentFieldOfView;\n\t\t\t\tfovRight = rightEyeParams.currentFieldOfView;\n\t\n\t\t\t\thmdDevice.setFieldOfView(fovLeft, fovRight, near, far);\n\t\n\t\t\t\teyeOffsetLeft.copy(leftEyeParams.eyeTranslation);\n\t\t\t\teyeOffsetRight.copy(rightEyeParams.eyeTranslation);\n\t\n\t\t\t\tleftRenderRect = leftEyeParams.renderRect;\n\t\t\t\trightRenderRect = rightEyeParams.renderRect;\n\t\t\t} else if (hmdDevice.getRecommendedEyeRenderRect) {\n\t\t\t\tleftEyeViewport = hmdDevice.getRecommendedEyeRenderRect('left');\n\t\t\t\trightEyeViewport = hmdDevice.getRecommendedEyeRenderRect('right');\n\t\n\t\t\t\thmdWidth = leftEyeViewport.width + rightEyeViewport.width;\n\t\t\t\thmdHeight = Math.max(leftEyeViewport.height, rightEyeViewport.height);\n\t\n\t\t\t\tif (hmdDevice.getCurrentEyeFieldOfView) {\n\t\t\t\t\tfovLeft = hmdDevice.getCurrentEyeFieldOfView('left');\n\t\t\t\t\tfovRight = hmdDevice.getCurrentEyeFieldOfView('right');\n\t\t\t\t} else {\n\t\t\t\t\tfovLeft = hmdDevice.getRecommendedEyeFieldOfView('left');\n\t\t\t\t\tfovRight = hmdDevice.getRecommendedEyeFieldOfView('right');\n\t\t\t\t}\n\t\n\t\t\t\teyeOffsetLeft.copy(hmdDevice.getEyeTranslation('left'));\n\t\t\t\teyeOffsetRight.copy(hmdDevice.getEyeTranslation('right'));\n\t\n\t\t\t\tleftRenderRect.x = leftEyeViewport.left;\n\t\t\t\tleftRenderRect.y = leftEyeViewport.top;\n\t\t\t\tleftRenderRect.width = leftEyeViewport.width;\n\t\t\t\tleftRenderRect.height = leftEyeViewport.height;\n\t\n\t\t\t\trightRenderRect.x = rightEyeViewport.left;\n\t\t\t\trightRenderRect.y = rightEyeViewport.top;\n\t\t\t\trightRenderRect.width = rightEyeViewport.width;\n\t\t\t\trightRenderRect.height = rightEyeViewport.height;\n\t\t\t}\n\t\n\t\t\tresize();\n\t\n\t\t\tcameraLeft.projectionMatrix = perspectiveMatrixFromVRFieldOfView(fovLeft, near, far);\n\t\t\tcameraRight.projectionMatrix = perspectiveMatrixFromVRFieldOfView(fovRight, near, far);\n\t\t}\n\t\n\t\tfunction gotVRDevices(devices) {\n\t\t\tvar i,\n\t\t\t\tdevice;\n\t\n\t\t\tfor (i = 0; i < devices.length; i++) {\n\t\t\t\tdevice = devices[i];\n\t\t\t\tif ( device instanceof HMDVRDevice ) {\n\t\n\t\t\t\t\tif ( hmdDevice && device.hardwareUnitId === hmdDevice.hardwareUnitId ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\n\t\t\t\t\thmdDevice = device;\n\t\t\t\t\tconsole.log('Using HMD Device:', hmdDevice.deviceName);\n\t\n\t\t\t\t\tif (hmdDevice.setTimewarp) {\n\t\t\t\t\t\t//hmdDevice.setTimewarp(false);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tupdateProjection();\n\t\n\t\t\t\t\tfullScreenParam.vrDisplay = hmdDevice;\n\t\n\t\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t\t} );\n\t\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (poll) {\n\t\t\t\tclearTimeout(pollTimeout);\n\t\t\t\tsetTimeout(self.scan, poll);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction onFullscreenChange() {\n\t\t\tif (!document.webkitFullscreenElement &&\n\t\t\t\t\t!document.mozFullScreenElement &&\n\t\t\t\t\t!document.msFullscreenElement) {\n\t\t\t\tvrMode = false;\n\t\t\t}\n\t\n\t\t\tupdateProjection();\n\t\n\t\t\tself.dispatchEvent( {\n\t\t\t\ttype: \"fullscreenchange\"\n\t\t\t} );\n\t\t}\n\t\n\t\t// API\n\t\n\t\tthis.separation = 0.01;\n\t\n\t\t// initialization\n\t\n\t\trenderer.autoClear = false;\n\t\n\t\tif (!fullScreenElement) {\n\t\t\tfullScreenElement = renderer.domElement;\n\t\t}\n\t\trequestFullscreen = fullScreenElement.webkitRequestFullscreen ||\n\t\t\tfullScreenElement.mozRequestFullScreen ||\n\t\t\tfullScreenElement.msRequestFullscreen;\n\t\tif (requestFullscreen) {\n\t\t\trequestFullscreen = requestFullscreen.bind(fullScreenElement, fullScreenParam);\n\t\t}\n\t\n\t\tdocument.addEventListener('fullscreenchange', onFullscreenChange, false);\n\t\tdocument.addEventListener('webkitfullscreenchange', onFullscreenChange, false);\n\t\tdocument.addEventListener('mozfullscreenchange', onFullscreenChange, false);\n\t\tdocument.addEventListener('MSFullscreenChange', onFullscreenChange, false);\n\t\n\t\t//todo: method for adjusting HMD FOV\n\t\n\t\tthis.scan = function () {\n\t\t\tif (navigator.getVRDevices) {\n\t\t\t\tnavigator.getVRDevices().then(gotVRDevices);\n\t\t\t} else if (navigator.mozGetVRDevices) {\n\t\t\t\tnavigator.mozGetVRDevices(gotVRDevices);\n\t\t\t}\n\t\t};\n\t\n\t\tthis.requestFullScreen = function () {\n\t\t\tvrMode = true;\n\t\t\trequestFullscreen();\n\t\t};\n\t\n\t\tthis.exit = function () {\n\t\t\tvrMode = false;\n\t\t\tvrPreview = false;\n\t\t};\n\t\n\t\tthis.setSize = function ( w, h ) {\n\t\t\twidth = w;\n\t\t\theight = h;\n\t\n\t\t\tresize();\n\t\t};\n\t\n\t\tthis.vrPreview = function (val) {\n\t\t\tif (val !== undefined) {\n\t\t\t\tvrPreview = !!val;\n\t\t\t}\n\t\t\treturn vrPreview;\n\t\t};\n\t\n\t\tthis.isFullscreen = function () {\n\t\t\treturn vrMode;\n\t\t};\n\t\n\t    // Add by kuilin.qkl\n\t    this.isWebview = function (bool) {\n\t        if (typeof bool === 'undefined') return inWebview;\n\t        inWebview = bool;\n\t        return inWebview;\n\t    };\n\t\n\t\tthis.hmd = function () {\n\t\t\treturn hmdDevice;\n\t\t};\n\t\n\t\tthis.render = function ( leftScene, rightScene, camera, renderTarget, forceClear ) {\n\t\t\tvar w, h;\n\t\n\t\t\tif ( rightScene && rightScene instanceof THREE.Scene ) {\n\t\t\t\t//rightScene.updateMatrixWorld();\n\t\t\t} else {\n\t\t\t\tif ( (!camera || camera instanceof THREE.WebGLRenderTarget) && rightScene instanceof THREE.Camera ) {\n\t\t\t\t\tforceClear = renderTarget;\n\t\t\t\t\trenderTarget = camera;\n\t\t\t\t\tcamera = rightScene;\n\t\t\t\t}\n\t\t\t\trightScene = leftScene;\n\t\t\t}\n\t\n\t\t\t//leftScene.updateMatrixWorld();\n\t\n\t\t\tif ( camera.parent === undefined ) {\n\t\t\t\tcamera.updateMatrixWorld();\n\t\t\t}\n\t\n\t\t\tw = width || renderer.domElement.width;\n\t\t\th = height || renderer.domElement.height;\n\t        // This code would not be annotated if mobile model.\n\t\t\tw /= window.devicePixelRatio || 1;\n\t\t\th /= window.devicePixelRatio || 1;\n\t\n\t\t\t/**\n\t\t\t *  TODO: make this work when CSS VR Rendering is fixed\n\t\t\t *  http://blog.bitops.com/blog/2014/08/20/updated-firefox-vr-builds/\n\t         *  Open by kuilin.qkl\n\t         */\n\t\t\tif (renderer instanceof THREE.CanvasRenderer) {\n\t\t\t\trenderer.render( leftScene, camera );\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif (!vrMode && !vrPreview) {\n\t\t\t\trenderer.enableScissorTest( false );\n\t\t\t\trenderer.setViewport( 0, 0, w, h );\n\t\t\t\trenderer.render( leftScene, camera, renderTarget, true );\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tcamera.matrixWorld.decompose( position, quaternion, scale );\n\t\n\t\t\tif (!hmdDevice) {\n\t\t\t\t// left\n\t\t\t\tcameraLeft.fov = camera.fov;\n\t\t\t\tcameraLeft.aspect = 0.5 * camera.aspect;\n\t\t\t\tcameraLeft.near = camera.near;\n\t\t\t\tcameraLeft.far = camera.far;\n\t\t\t\tcameraLeft.updateProjectionMatrix();\n\t\n\t\t\t\t// right\n\t\n\t\t\t\tcameraRight.fov = camera.fov;\n\t\t\t\tcameraRight.aspect = 0.5 * camera.aspect;\n\t\t\t\tcameraRight.near = camera.near;\n\t\t\t\tcameraRight.far = camera.far;\n\t\t\t\tcameraRight.updateProjectionMatrix();\n\t\t\t}\n\t\n\t\t\tcameraLeft.position.copy( position );\n\t\t\tcameraLeft.quaternion.copy( quaternion );\n\t\n\t\t\tcameraRight.position.copy( position );\n\t\t\tcameraRight.quaternion.copy( quaternion );\n\t\n\t\t\tif (hmdDevice) {\n\t\t\t\tcameraLeft.position.add( eyeOffsetLeft ) ;\n\t\t\t\tcameraRight.position.add( eyeOffsetRight );\n\t\t\t} else {\n\t\t\t\tcameraLeft.translateX( - this.separation );\n\t\t\t\tcameraRight.translateX( this.separation );\n\t\t\t}\n\t\n\t\t\tcameraLeft.updateMatrixWorld();\n\t\t\tcameraRight.updateMatrixWorld();\n\t\n\t        // Bug fixed if device's Ratio > 1\n\t        w = renderer.context.drawingBufferWidth / ( 2 * window.devicePixelRatio );\n\t\n\t\t\tif (renderTarget) {\n\t\t\t\trenderer.setRenderTarget(renderTarget);\n\t\t\t}\n\t\n\t\t\trightScene.traverseVisible(function (obj) {\n\t\t\t\tif (obj.material && obj.material.map) {\n\t\t\t\t\tif (obj.userData.stereo === 'vertical') {\n\t\t\t\t\t\tobj.material.map.offset.set(0, 0.5);\n\t\t\t\t\t} else if (obj.userData.stereo) {\n\t\t\t\t\t\tobj.material.map.offset.set(0.5, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t        // Modify by kuilin.qkl\n\t        // Not use Fullscreen\n\t        if (inWebview) {\n\t            renderer.setScissor( 0, h >> 1, w * 2, h >> 1 );\n\t            renderer.setViewport( 0, h >> 1, w * 2, h >> 1 );\n\t        } else {\n\t            renderer.setScissor( w, 0, w, h );\n\t            renderer.setViewport( w, 0, w, h );\n\t        }\n\t\t\trenderer.render( rightScene, cameraRight, renderTarget, forceClear );\n\t\n\t\t\tleftScene.traverseVisible(function (obj) {\n\t\t\t\tif (obj.userData.stereo && obj.material && obj.material.map) {\n\t\t\t\t\tobj.material.map.offset.set(0, 0);\n\t\t\t\t}\n\t\t\t});\n\t        if (inWebview) {\n\t            renderer.setScissor( 0, 0, w * 2, h >> 1 );\n\t            renderer.setViewport( 0, 0, w * 2, h >> 1 );\n\t        } else {\n\t            renderer.setScissor( 0, 0, w, h );\n\t            renderer.setViewport( 0, 0, w, h );\n\t        }\n\t\t\trenderer.render( leftScene, cameraLeft, renderTarget, forceClear );\n\t\n\t\t\t//reset viewport, scissor\n\t\t\tw *= 2;\n\t        renderer.setViewport( 0, 0, w, h );\n\t        renderer.setScissor( 0, 0, w, h );\n\t\t\trenderer.enableScissorTest( false );\n\t\t};\n\t\n\t\tObject.defineProperty(this, 'near', {\n\t\t\tget: function () {\n\t\t\t\treturn near;\n\t\t\t},\n\t\t\tset: function (val) {\n\t\t\t\tval = parseFloat(val);\n\t\t\t\tif (val && !isNaN(val)) {\n\t\t\t\t\tnear = Math.max(0, val);\n\t\t\t\t\tupdateProjection();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\tObject.defineProperty(this, 'far', {\n\t\t\tget: function () {\n\t\t\t\treturn far;\n\t\t\t},\n\t\t\tset: function (val) {\n\t\t\t\tval = parseFloat(val);\n\t\t\t\tif (val && !isNaN(val)) {\n\t\t\t\t\tfar = Math.max(0, val);\n\t\t\t\t\tupdateProjection();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\tthis.scan();\n\t\tresize();\n\t};\n\t\n\tTHREE.VRStereoEffect.prototype = Object.create( THREE.EventDispatcher.prototype );\n\t\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(32);\n\t\n\tTHREE.VRControls = function ( object, options ) {\n\t\n\t\tvar self = this;\n\t\n\t\t//HMD sensor stuff\n\t\tvar sensorDevice;\n\t\tvar vrState;\n\t\n\t\t//device orientation stuff\n\t\tvar deviceControls;\n\t\tvar zeroAngle = 0;\n\t\n\t\tvar mode = '';\n\t\n\t\tvar vrBrowser = navigator.getVRDevices || navigator.mozGetVRDevices;\n\t\n\t\tvar poll = options && options.poll || 1000;\n\t\tvar pollTimeout;\n\t\n\t\tfunction gotVRDevices( devices ) {\n\t\t\tvar i,\n\t\t\t\tdevice;\n\t\n\t\t\tfor ( i = 0; i < devices.length; ++i ) {\n\t\t\t\tdevice = devices[i];\n\t\t\t\tif ( devices[i] instanceof PositionSensorVRDevice ) {\n\t\n\t\t\t\t\tif ( sensorDevice && devices[i].hardwareUnitId === sensorDevice.hardwareUnitId ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tsensorDevice = device;\n\t\t\t\t\tconsole.log('Using Sensor Device:', sensorDevice.deviceName);\n\t\n\t\t\t\t\tif ( sensorDevice.zeroSensor ) {\n\t\t\t\t\t\tself.zeroSensor = sensorDevice.zeroSensor.bind(sensorDevice);\n\t\t\t\t\t} else if ( sensorDevice.resetSensor ) {\n\t\t\t\t\t\tself.zeroSensor = sensorDevice.resetSensor.bind(sensorDevice);\n\t\t\t\t\t}\n\t\t\t\t\tself.zeroSensor();\n\t\n\t\t\t\t\tmode = 'hmd';\n\t\n\t\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t\t} );\n\t\n\t\t\t\t\tbreak; // We keep the first we encounter\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (poll) {\n\t\t\t\tclearTimeout(pollTimeout);\n\t\t\t\tsetTimeout(self.scan, poll);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction deviceOrientationChange( event ) {\n\t\t\tif ( typeof event.gamma === 'number' ) {\n\t\t\t\tmode = 'deviceorientation';\n\t\t\t\twindow.removeEventListener( 'deviceorientation', deviceOrientationChange, false );\n\t\t\t\tdeviceControls = new THREE.DeviceOrientationControls( object );\n\t\t\t\tdeviceControls.connect();\n\t\t\t\tif (!this.freeze) {\n\t\t\t\t\tdeviceControls.update();\n\t\t\t\t}\n\t\n\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t\n\t\tthis.update = function() {\n\t\t\t// Applies head rotation from sensor data.\n\t\t\tif (self.freeze) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif ( sensorDevice ) {\n\t\t\t\tvrState = sensorDevice.getState();\n\t\t\t\tif ( vrState ) {\n\t\t\t\t\tif ( vrState.orientation && vrState.hasOrientation !== false ) {\n\t\t\t\t\t\tobject.quaternion.copy( vrState.orientation );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( vrState.position && vrState.hasPosition !== false ) {\n\t\t\t\t\t\t// vrState.position is null if using DK1 or if DK2 camera is not plugged in\n\t\t\t\t\t\tobject.position.copy( vrState.position );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tobject.updateMatrixWorld();\n\t\t\t\t}\n\t\t\t} else if (deviceControls && deviceControls.deviceOrientation.gamma !== undefined) {\n\t\t\t\tdeviceControls.update();\n\t\t\t\tobject.rotateY(-zeroAngle);\n\t\t\t\tobject.updateMatrixWorld();\n\t\t\t}\n\t\t};\n\t\n\t\t//only useful when frozen\n\t\tthis.reset = function () {\n\t\t\tif ( object ) {\n\t\t\t\tobject.quaternion.set( 0, 0, 0, 1 );\n\t\t\t\tobject.position.set( 0, 0, 0 );\n\t\t\t}\n\t\t};\n\t\n\t\t//zeros only rotation on Y axis\n\t\t//todo: find out if it zeros out position. need a DK2 to test\n\t\tthis.zeroSensor = function () {\n\t\t\tif (sensorDevice && sensorDevice.zeroSensor) {\n\t\t\t\tsensorDevice.zeroSensor();\n\t\t\t}\n\t\t\tzeroAngle = object.rotation.y;\n\t\t\tself.update();\n\t\t};\n\t\n\t\tthis.freeze = false;\n\t\n\t\t//method to query which tech we're using\n\t\tthis.mode = function () {\n\t\t\treturn mode;\n\t\t};\n\t\n\t\tthis.scan = function () {\n\t\t\tif ( navigator.getVRDevices ) {\n\t\t\t\tnavigator.getVRDevices().then( gotVRDevices );\n\t\t\t} else if ( navigator.mozGetVRDevices ) {\n\t\t\t\tnavigator.mozGetVRDevices( gotVRDevices );\n\t\t\t}\n\t\t};\n\t\n\t\t//todo: connect/disconnect methods\n\t\t//todo: method to query orientation/position without changing object\n\t\t//todo: work without an object\n\t\n\t\tif ( vrBrowser ) {\n\t\t\tthis.scan();\n\t\t} else if ( \"DeviceOrientationEvent\" in window && THREE.DeviceOrientationControls) {\n\t\t\t//device orientation\n\t\t\twindow.addEventListener( \"deviceorientation\", deviceOrientationChange, false );\n\t\t}\n\t};\n\t\n\tTHREE.VRControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\t\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar d        = __webpack_require__(38)\n\t  , callable = __webpack_require__(39)\n\t\n\t  , apply = Function.prototype.apply, call = Function.prototype.call\n\t  , create = Object.create, defineProperty = Object.defineProperty\n\t  , defineProperties = Object.defineProperties\n\t  , hasOwnProperty = Object.prototype.hasOwnProperty\n\t  , descriptor = { configurable: true, enumerable: false, writable: true }\n\t\n\t  , on, once, off, emit, methods, descriptors, base;\n\t\n\ton = function (type, listener) {\n\t\tvar data;\n\t\n\t\tcallable(listener);\n\t\n\t\tif (!hasOwnProperty.call(this, '__ee__')) {\n\t\t\tdata = descriptor.value = create(null);\n\t\t\tdefineProperty(this, '__ee__', descriptor);\n\t\t\tdescriptor.value = null;\n\t\t} else {\n\t\t\tdata = this.__ee__;\n\t\t}\n\t\tif (!data[type]) data[type] = listener;\n\t\telse if (typeof data[type] === 'object') data[type].push(listener);\n\t\telse data[type] = [data[type], listener];\n\t\n\t\treturn this;\n\t};\n\t\n\tonce = function (type, listener) {\n\t\tvar once, self;\n\t\n\t\tcallable(listener);\n\t\tself = this;\n\t\ton.call(this, type, once = function () {\n\t\t\toff.call(self, type, once);\n\t\t\tapply.call(listener, this, arguments);\n\t\t});\n\t\n\t\tonce.__eeOnceListener__ = listener;\n\t\treturn this;\n\t};\n\t\n\toff = function (type, listener) {\n\t\tvar data, listeners, candidate, i;\n\t\n\t\tcallable(listener);\n\t\n\t\tif (!hasOwnProperty.call(this, '__ee__')) return this;\n\t\tdata = this.__ee__;\n\t\tif (!data[type]) return this;\n\t\tlisteners = data[type];\n\t\n\t\tif (typeof listeners === 'object') {\n\t\t\tfor (i = 0; (candidate = listeners[i]); ++i) {\n\t\t\t\tif ((candidate === listener) ||\n\t\t\t\t\t\t(candidate.__eeOnceListener__ === listener)) {\n\t\t\t\t\tif (listeners.length === 2) data[type] = listeners[i ? 0 : 1];\n\t\t\t\t\telse listeners.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ((listeners === listener) ||\n\t\t\t\t\t(listeners.__eeOnceListener__ === listener)) {\n\t\t\t\tdelete data[type];\n\t\t\t}\n\t\t}\n\t\n\t\treturn this;\n\t};\n\t\n\temit = function (type) {\n\t\tvar i, l, listener, listeners, args;\n\t\n\t\tif (!hasOwnProperty.call(this, '__ee__')) return;\n\t\tlisteners = this.__ee__[type];\n\t\tif (!listeners) return;\n\t\n\t\tif (typeof listeners === 'object') {\n\t\t\tl = arguments.length;\n\t\t\targs = new Array(l - 1);\n\t\t\tfor (i = 1; i < l; ++i) args[i - 1] = arguments[i];\n\t\n\t\t\tlisteners = listeners.slice();\n\t\t\tfor (i = 0; (listener = listeners[i]); ++i) {\n\t\t\t\tapply.call(listener, this, args);\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (arguments.length) {\n\t\t\tcase 1:\n\t\t\t\tcall.call(listeners, this);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcall.call(listeners, this, arguments[1]);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcall.call(listeners, this, arguments[1], arguments[2]);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tl = arguments.length;\n\t\t\t\targs = new Array(l - 1);\n\t\t\t\tfor (i = 1; i < l; ++i) {\n\t\t\t\t\targs[i - 1] = arguments[i];\n\t\t\t\t}\n\t\t\t\tapply.call(listeners, this, args);\n\t\t\t}\n\t\t}\n\t};\n\t\n\tmethods = {\n\t\ton: on,\n\t\tonce: once,\n\t\toff: off,\n\t\temit: emit\n\t};\n\t\n\tdescriptors = {\n\t\ton: d(on),\n\t\tonce: d(once),\n\t\toff: d(off),\n\t\temit: d(emit)\n\t};\n\t\n\tbase = defineProperties({}, descriptors);\n\t\n\tmodule.exports = exports = function (o) {\n\t\treturn (o == null) ? create(base) : defineProperties(Object(o), descriptors);\n\t};\n\texports.methods = methods;\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\t// css base code, injected by the css-loader\r\n\tmodule.exports = function() {\r\n\t\tvar list = [];\r\n\t\r\n\t\t// return the list of modules as css string\r\n\t\tlist.toString = function toString() {\r\n\t\t\tvar result = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar item = this[i];\r\n\t\t\t\tif(item[2]) {\r\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(item[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result.join(\"\");\r\n\t\t};\r\n\t\r\n\t\t// import a list of modules into the list\r\n\t\tlist.i = function(modules, mediaQuery) {\r\n\t\t\tif(typeof modules === \"string\")\r\n\t\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\t\tvar alreadyImportedModules = {};\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar id = this[i][0];\r\n\t\t\t\tif(typeof id === \"number\")\r\n\t\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\t\tvar item = modules[i];\r\n\t\t\t\t// skip already imported module\r\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn list;\r\n\t};\r\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function (global, factory) {\n\t    true ? factory(exports) :\n\t    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t    (factory((global.THREE = global.THREE || {})));\n\t}(this, (function (exports) { 'use strict';\n\t\n\t    // Polyfills\n\t\n\t    if ( Number.EPSILON === undefined ) {\n\t\n\t    \tNumber.EPSILON = Math.pow( 2, - 52 );\n\t\n\t    }\n\t\n\t    //\n\t\n\t    if ( Math.sign === undefined ) {\n\t\n\t    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\t\n\t    \tMath.sign = function ( x ) {\n\t\n\t    \t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    if ( Function.prototype.name === undefined ) {\n\t\n\t    \t// Missing in IE9-11.\n\t    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\t\n\t    \tObject.defineProperty( Function.prototype, 'name', {\n\t\n\t    \t\tget: function () {\n\t\n\t    \t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\t\n\t    \t\t}\n\t\n\t    \t} );\n\t\n\t    }\n\t\n\t    if ( Object.assign === undefined ) {\n\t\n\t    \t// Missing in IE.\n\t    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\t\n\t    \t( function () {\n\t\n\t    \t\tObject.assign = function ( target ) {\n\t\n\t    \t\t\t'use strict';\n\t\n\t    \t\t\tif ( target === undefined || target === null ) {\n\t\n\t    \t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar output = Object( target );\n\t\n\t    \t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\t\n\t    \t\t\t\tvar source = arguments[ index ];\n\t\n\t    \t\t\t\tif ( source !== undefined && source !== null ) {\n\t\n\t    \t\t\t\t\tfor ( var nextKey in source ) {\n\t\n\t    \t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\t\n\t    \t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn output;\n\t\n\t    \t\t};\n\t\n\t    \t} )();\n\t\n\t    }\n\t\n\t    /**\n\t     * https://github.com/mrdoob/eventdispatcher.js/\n\t     */\n\t\n\t    function EventDispatcher() {}\n\t\n\t    Object.assign( EventDispatcher.prototype, {\n\t\n\t    \taddEventListener: function ( type, listener ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) this._listeners = {};\n\t\n\t    \t\tvar listeners = this._listeners;\n\t\n\t    \t\tif ( listeners[ type ] === undefined ) {\n\t\n\t    \t\t\tlisteners[ type ] = [];\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\t\n\t    \t\t\tlisteners[ type ].push( listener );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \thasEventListener: function ( type, listener ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) return false;\n\t\n\t    \t\tvar listeners = this._listeners;\n\t\n\t    \t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tremoveEventListener: function ( type, listener ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) return;\n\t\n\t    \t\tvar listeners = this._listeners;\n\t    \t\tvar listenerArray = listeners[ type ];\n\t\n\t    \t\tif ( listenerArray !== undefined ) {\n\t\n\t    \t\t\tvar index = listenerArray.indexOf( listener );\n\t\n\t    \t\t\tif ( index !== - 1 ) {\n\t\n\t    \t\t\t\tlistenerArray.splice( index, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tdispatchEvent: function ( event ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) return;\n\t\n\t    \t\tvar listeners = this._listeners;\n\t    \t\tvar listenerArray = listeners[ event.type ];\n\t\n\t    \t\tif ( listenerArray !== undefined ) {\n\t\n\t    \t\t\tevent.target = this;\n\t\n\t    \t\t\tvar array = [], i = 0;\n\t    \t\t\tvar length = listenerArray.length;\n\t\n\t    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\t\tarray[ i ] = listenerArray[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\t\tarray[ i ].call( this, event );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var REVISION = '81';\n\t    var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n\t    var CullFaceNone = 0;\n\t    var CullFaceBack = 1;\n\t    var CullFaceFront = 2;\n\t    var CullFaceFrontBack = 3;\n\t    var FrontFaceDirectionCW = 0;\n\t    var FrontFaceDirectionCCW = 1;\n\t    var BasicShadowMap = 0;\n\t    var PCFShadowMap = 1;\n\t    var PCFSoftShadowMap = 2;\n\t    var FrontSide = 0;\n\t    var BackSide = 1;\n\t    var DoubleSide = 2;\n\t    var FlatShading = 1;\n\t    var SmoothShading = 2;\n\t    var NoColors = 0;\n\t    var FaceColors = 1;\n\t    var VertexColors = 2;\n\t    var NoBlending = 0;\n\t    var NormalBlending = 1;\n\t    var AdditiveBlending = 2;\n\t    var SubtractiveBlending = 3;\n\t    var MultiplyBlending = 4;\n\t    var CustomBlending = 5;\n\t    var BlendingMode = {\n\t        NoBlending: NoBlending,\n\t        NormalBlending: NormalBlending,\n\t        AdditiveBlending: AdditiveBlending,\n\t        SubtractiveBlending: SubtractiveBlending,\n\t        MultiplyBlending: MultiplyBlending,\n\t        CustomBlending: CustomBlending\n\t    };\n\t    var AddEquation = 100;\n\t    var SubtractEquation = 101;\n\t    var ReverseSubtractEquation = 102;\n\t    var MinEquation = 103;\n\t    var MaxEquation = 104;\n\t    var ZeroFactor = 200;\n\t    var OneFactor = 201;\n\t    var SrcColorFactor = 202;\n\t    var OneMinusSrcColorFactor = 203;\n\t    var SrcAlphaFactor = 204;\n\t    var OneMinusSrcAlphaFactor = 205;\n\t    var DstAlphaFactor = 206;\n\t    var OneMinusDstAlphaFactor = 207;\n\t    var DstColorFactor = 208;\n\t    var OneMinusDstColorFactor = 209;\n\t    var SrcAlphaSaturateFactor = 210;\n\t    var NeverDepth = 0;\n\t    var AlwaysDepth = 1;\n\t    var LessDepth = 2;\n\t    var LessEqualDepth = 3;\n\t    var EqualDepth = 4;\n\t    var GreaterEqualDepth = 5;\n\t    var GreaterDepth = 6;\n\t    var NotEqualDepth = 7;\n\t    var MultiplyOperation = 0;\n\t    var MixOperation = 1;\n\t    var AddOperation = 2;\n\t    var NoToneMapping = 0;\n\t    var LinearToneMapping = 1;\n\t    var ReinhardToneMapping = 2;\n\t    var Uncharted2ToneMapping = 3;\n\t    var CineonToneMapping = 4;\n\t    var UVMapping = 300;\n\t    var CubeReflectionMapping = 301;\n\t    var CubeRefractionMapping = 302;\n\t    var EquirectangularReflectionMapping = 303;\n\t    var EquirectangularRefractionMapping = 304;\n\t    var SphericalReflectionMapping = 305;\n\t    var CubeUVReflectionMapping = 306;\n\t    var CubeUVRefractionMapping = 307;\n\t    var TextureMapping = {\n\t        UVMapping: UVMapping,\n\t        CubeReflectionMapping: CubeReflectionMapping,\n\t        CubeRefractionMapping: CubeRefractionMapping,\n\t        EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t        EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t        SphericalReflectionMapping: SphericalReflectionMapping,\n\t        CubeUVReflectionMapping: CubeUVReflectionMapping,\n\t        CubeUVRefractionMapping: CubeUVRefractionMapping\n\t    };\n\t    var RepeatWrapping = 1000;\n\t    var ClampToEdgeWrapping = 1001;\n\t    var MirroredRepeatWrapping = 1002;\n\t    var TextureWrapping = {\n\t        RepeatWrapping: RepeatWrapping,\n\t        ClampToEdgeWrapping: ClampToEdgeWrapping,\n\t        MirroredRepeatWrapping: MirroredRepeatWrapping\n\t    };\n\t    var NearestFilter = 1003;\n\t    var NearestMipMapNearestFilter = 1004;\n\t    var NearestMipMapLinearFilter = 1005;\n\t    var LinearFilter = 1006;\n\t    var LinearMipMapNearestFilter = 1007;\n\t    var LinearMipMapLinearFilter = 1008;\n\t    var TextureFilter = {\n\t        NearestFilter: NearestFilter,\n\t        NearestMipMapNearestFilter: NearestMipMapNearestFilter,\n\t        NearestMipMapLinearFilter: NearestMipMapLinearFilter,\n\t        LinearFilter: LinearFilter,\n\t        LinearMipMapNearestFilter: LinearMipMapNearestFilter,\n\t        LinearMipMapLinearFilter: LinearMipMapLinearFilter\n\t    };\n\t    var UnsignedByteType = 1009;\n\t    var ByteType = 1010;\n\t    var ShortType = 1011;\n\t    var UnsignedShortType = 1012;\n\t    var IntType = 1013;\n\t    var UnsignedIntType = 1014;\n\t    var FloatType = 1015;\n\t    var HalfFloatType = 1016;\n\t    var UnsignedShort4444Type = 1017;\n\t    var UnsignedShort5551Type = 1018;\n\t    var UnsignedShort565Type = 1019;\n\t    var UnsignedInt248Type = 1020;\n\t    var AlphaFormat = 1021;\n\t    var RGBFormat = 1022;\n\t    var RGBAFormat = 1023;\n\t    var LuminanceFormat = 1024;\n\t    var LuminanceAlphaFormat = 1025;\n\t    var RGBEFormat = RGBAFormat;\n\t    var DepthFormat = 1026;\n\t    var DepthStencilFormat = 1027;\n\t    var RGB_S3TC_DXT1_Format = 2001;\n\t    var RGBA_S3TC_DXT1_Format = 2002;\n\t    var RGBA_S3TC_DXT3_Format = 2003;\n\t    var RGBA_S3TC_DXT5_Format = 2004;\n\t    var RGB_PVRTC_4BPPV1_Format = 2100;\n\t    var RGB_PVRTC_2BPPV1_Format = 2101;\n\t    var RGBA_PVRTC_4BPPV1_Format = 2102;\n\t    var RGBA_PVRTC_2BPPV1_Format = 2103;\n\t    var RGB_ETC1_Format = 2151;\n\t    var LoopOnce = 2200;\n\t    var LoopRepeat = 2201;\n\t    var LoopPingPong = 2202;\n\t    var InterpolateDiscrete = 2300;\n\t    var InterpolateLinear = 2301;\n\t    var InterpolateSmooth = 2302;\n\t    var ZeroCurvatureEnding = 2400;\n\t    var ZeroSlopeEnding = 2401;\n\t    var WrapAroundEnding = 2402;\n\t    var TrianglesDrawMode = 0;\n\t    var TriangleStripDrawMode = 1;\n\t    var TriangleFanDrawMode = 2;\n\t    var LinearEncoding = 3000;\n\t    var sRGBEncoding = 3001;\n\t    var GammaEncoding = 3007;\n\t    var RGBEEncoding = 3002;\n\t    var LogLuvEncoding = 3003;\n\t    var RGBM7Encoding = 3004;\n\t    var RGBM16Encoding = 3005;\n\t    var RGBDEncoding = 3006;\n\t    var BasicDepthPacking = 3200;\n\t    var RGBADepthPacking = 3201;\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    exports.Math = {\n\t\n\t    \tDEG2RAD: Math.PI / 180,\n\t    \tRAD2DEG: 180 / Math.PI,\n\t\n\t    \tgenerateUUID: function () {\n\t\n\t    \t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\t\n\t    \t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t    \t\tvar uuid = new Array( 36 );\n\t    \t\tvar rnd = 0, r;\n\t\n\t    \t\treturn function generateUUID() {\n\t\n\t    \t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\t\n\t    \t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\t\n\t    \t\t\t\t\tuuid[ i ] = '-';\n\t\n\t    \t\t\t\t} else if ( i === 14 ) {\n\t\n\t    \t\t\t\t\tuuid[ i ] = '4';\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t    \t\t\t\t\tr = rnd & 0xf;\n\t    \t\t\t\t\trnd = rnd >> 4;\n\t    \t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn uuid.join( '' );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclamp: function ( value, min, max ) {\n\t\n\t    \t\treturn Math.max( min, Math.min( max, value ) );\n\t\n\t    \t},\n\t\n\t    \t// compute euclidian modulo of m % n\n\t    \t// https://en.wikipedia.org/wiki/Modulo_operation\n\t\n\t    \teuclideanModulo: function ( n, m ) {\n\t\n\t    \t\treturn ( ( n % m ) + m ) % m;\n\t\n\t    \t},\n\t\n\t    \t// Linear mapping from range <a1, a2> to range <b1, b2>\n\t\n\t    \tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\t\n\t    \t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\t\n\t    \t},\n\t\n\t    \t// http://en.wikipedia.org/wiki/Smoothstep\n\t\n\t    \tsmoothstep: function ( x, min, max ) {\n\t\n\t    \t\tif ( x <= min ) return 0;\n\t    \t\tif ( x >= max ) return 1;\n\t\n\t    \t\tx = ( x - min ) / ( max - min );\n\t\n\t    \t\treturn x * x * ( 3 - 2 * x );\n\t\n\t    \t},\n\t\n\t    \tsmootherstep: function ( x, min, max ) {\n\t\n\t    \t\tif ( x <= min ) return 0;\n\t    \t\tif ( x >= max ) return 1;\n\t\n\t    \t\tx = ( x - min ) / ( max - min );\n\t\n\t    \t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\t\n\t    \t},\n\t\n\t    \trandom16: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n\t    \t\treturn Math.random();\n\t\n\t    \t},\n\t\n\t    \t// Random integer from <low, high> interval\n\t\n\t    \trandInt: function ( low, high ) {\n\t\n\t    \t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\t\n\t    \t},\n\t\n\t    \t// Random float from <low, high> interval\n\t\n\t    \trandFloat: function ( low, high ) {\n\t\n\t    \t\treturn low + Math.random() * ( high - low );\n\t\n\t    \t},\n\t\n\t    \t// Random float from <-range/2, range/2> interval\n\t\n\t    \trandFloatSpread: function ( range ) {\n\t\n\t    \t\treturn range * ( 0.5 - Math.random() );\n\t\n\t    \t},\n\t\n\t    \tdegToRad: function ( degrees ) {\n\t\n\t    \t\treturn degrees * exports.Math.DEG2RAD;\n\t\n\t    \t},\n\t\n\t    \tradToDeg: function ( radians ) {\n\t\n\t    \t\treturn radians * exports.Math.RAD2DEG;\n\t\n\t    \t},\n\t\n\t    \tisPowerOfTwo: function ( value ) {\n\t\n\t    \t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\t\n\t    \t},\n\t\n\t    \tnearestPowerOfTwo: function ( value ) {\n\t\n\t    \t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\t\n\t    \t},\n\t\n\t    \tnextPowerOfTwo: function ( value ) {\n\t\n\t    \t\tvalue --;\n\t    \t\tvalue |= value >> 1;\n\t    \t\tvalue |= value >> 2;\n\t    \t\tvalue |= value >> 4;\n\t    \t\tvalue |= value >> 8;\n\t    \t\tvalue |= value >> 16;\n\t    \t\tvalue ++;\n\t\n\t    \t\treturn value;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author egraether / http://egraether.com/\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     */\n\t\n\t    function Vector2( x, y ) {\n\t\n\t    \tthis.x = x || 0;\n\t    \tthis.y = y || 0;\n\t\n\t    }\n\t\n\t    Vector2.prototype = {\n\t\n\t    \tconstructor: Vector2,\n\t\n\t    \tisVector2: true,\n\t\n\t    \tget width() {\n\t\n\t    \t\treturn this.x;\n\t\n\t    \t},\n\t\n\t    \tset width( value ) {\n\t\n\t    \t\tthis.x = value;\n\t\n\t    \t},\n\t\n\t    \tget height() {\n\t\n\t    \t\treturn this.y;\n\t\n\t    \t},\n\t\n\t    \tset height( value ) {\n\t\n\t    \t\tthis.y = value;\n\t\n\t    \t},\n\t\n\t    \t//\n\t\n\t    \tset: function ( x, y ) {\n\t\n\t    \t\tthis.x = x;\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.x = scalar;\n\t    \t\tthis.y = scalar;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( x ) {\n\t\n\t    \t\tthis.x = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( y ) {\n\t\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponent: function ( index, value ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: this.x = value; break;\n\t    \t\t\tcase 1: this.y = value; break;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetComponent: function ( index ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: return this.x;\n\t    \t\t\tcase 1: return this.y;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.x, this.y );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( v ) {\n\t\n\t    \t\tthis.x = v.x;\n\t    \t\tthis.y = v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t    \t\t\treturn this.addVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x += v.x;\n\t    \t\tthis.y += v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.x += s;\n\t    \t\tthis.y += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x + b.x;\n\t    \t\tthis.y = a.y + b.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScaledVector: function ( v, s ) {\n\t\n\t    \t\tthis.x += v.x * s;\n\t    \t\tthis.y += v.y * s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t    \t\t\treturn this.subVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x -= v.x;\n\t    \t\tthis.y -= v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubScalar: function ( s ) {\n\t\n\t    \t\tthis.x -= s;\n\t    \t\tthis.y -= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x - b.x;\n\t    \t\tthis.y = a.y - b.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( v ) {\n\t\n\t    \t\tthis.x *= v.x;\n\t    \t\tthis.y *= v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( scalar ) {\n\t\n\t    \t\tif ( isFinite( scalar ) ) {\n\t\n\t    \t\t\tthis.x *= scalar;\n\t    \t\t\tthis.y *= scalar;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.x = 0;\n\t    \t\t\tthis.y = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivide: function ( v ) {\n\t\n\t    \t\tthis.x /= v.x;\n\t    \t\tthis.y /= v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivideScalar: function ( scalar ) {\n\t\n\t    \t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t    \t},\n\t\n\t    \tmin: function ( v ) {\n\t\n\t    \t\tthis.x = Math.min( this.x, v.x );\n\t    \t\tthis.y = Math.min( this.y, v.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmax: function ( v ) {\n\t\n\t    \t\tthis.x = Math.max( this.x, v.x );\n\t    \t\tthis.y = Math.max( this.y, v.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclamp: function ( min, max ) {\n\t\n\t    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclampScalar: function () {\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t    \t\t\tif ( min === undefined ) {\n\t\n\t    \t\t\t\tmin = new Vector2();\n\t    \t\t\t\tmax = new Vector2();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmin.set( minVal, minVal );\n\t    \t\t\tmax.set( maxVal, maxVal );\n\t\n\t    \t\t\treturn this.clamp( min, max );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclampLength: function ( min, max ) {\n\t\n\t    \t\tvar length = this.length();\n\t\n\t    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\t\n\t    \t},\n\t\n\t    \tfloor: function () {\n\t\n\t    \t\tthis.x = Math.floor( this.x );\n\t    \t\tthis.y = Math.floor( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tceil: function () {\n\t\n\t    \t\tthis.x = Math.ceil( this.x );\n\t    \t\tthis.y = Math.ceil( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tround: function () {\n\t\n\t    \t\tthis.x = Math.round( this.x );\n\t    \t\tthis.y = Math.round( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \troundToZero: function () {\n\t\n\t    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.x = - this.x;\n\t    \t\tthis.y = - this.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this.x * v.x + this.y * v.y;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this.x * this.x + this.y * this.y;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\t\n\t    \t},\n\t\n\t    \tlengthManhattan: function() {\n\t\n\t    \t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\treturn this.divideScalar( this.length() );\n\t\n\t    \t},\n\t\n\t    \tangle: function () {\n\t\n\t    \t\t// computes the angle in radians with respect to the positive x-axis\n\t\n\t    \t\tvar angle = Math.atan2( this.y, this.x );\n\t\n\t    \t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\t\n\t    \t\treturn angle;\n\t\n\t    \t},\n\t\n\t    \tdistanceTo: function ( v ) {\n\t\n\t    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceToSquared: function ( v ) {\n\t\n\t    \t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t    \t\treturn dx * dx + dy * dy;\n\t\n\t    \t},\n\t\n\t    \tdistanceToManhattan: function ( v ) {\n\t\n\t    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\t\n\t    \t},\n\t\n\t    \tsetLength: function ( length ) {\n\t\n\t    \t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( v, alpha ) {\n\t\n\t    \t\tthis.x += ( v.x - this.x ) * alpha;\n\t    \t\tthis.y += ( v.y - this.y ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t    \t},\n\t\n\t    \tequals: function ( v ) {\n\t\n\t    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.x = array[ offset ];\n\t    \t\tthis.y = array[ offset + 1 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.x;\n\t    \t\tarray[ offset + 1 ] = this.y;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tindex = index * attribute.itemSize + offset;\n\t\n\t    \t\tthis.x = attribute.array[ index ];\n\t    \t\tthis.y = attribute.array[ index + 1 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trotateAround: function ( center, angle ) {\n\t\n\t    \t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\t\n\t    \t\tvar x = this.x - center.x;\n\t    \t\tvar y = this.y - center.y;\n\t\n\t    \t\tthis.x = x * c - y * s + center.x;\n\t    \t\tthis.y = x * s + y * c + center.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author szimek / https://github.com/szimek/\n\t     */\n\t\n\t    function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: TextureIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.sourceFile = '';\n\t\n\t    \tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t    \tthis.mipmaps = [];\n\t\n\t    \tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\t\n\t    \tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t    \tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\t\n\t    \tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t    \tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\t\n\t    \tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\t\n\t    \tthis.format = format !== undefined ? format : RGBAFormat;\n\t    \tthis.type = type !== undefined ? type : UnsignedByteType;\n\t\n\t    \tthis.offset = new Vector2( 0, 0 );\n\t    \tthis.repeat = new Vector2( 1, 1 );\n\t\n\t    \tthis.generateMipmaps = true;\n\t    \tthis.premultiplyAlpha = false;\n\t    \tthis.flipY = true;\n\t    \tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\n\t\n\t    \t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t    \t//\n\t    \t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t    \t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t    \tthis.encoding = encoding !== undefined ? encoding :  LinearEncoding;\n\t\n\t    \tthis.version = 0;\n\t    \tthis.onUpdate = null;\n\t\n\t    }\n\t\n\t    Texture.DEFAULT_IMAGE = undefined;\n\t    Texture.DEFAULT_MAPPING = UVMapping;\n\t\n\t    Texture.prototype = {\n\t\n\t    \tconstructor: Texture,\n\t\n\t    \tisTexture: true,\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.version ++;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.image = source.image;\n\t    \t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\t\n\t    \t\tthis.mapping = source.mapping;\n\t\n\t    \t\tthis.wrapS = source.wrapS;\n\t    \t\tthis.wrapT = source.wrapT;\n\t\n\t    \t\tthis.magFilter = source.magFilter;\n\t    \t\tthis.minFilter = source.minFilter;\n\t\n\t    \t\tthis.anisotropy = source.anisotropy;\n\t\n\t    \t\tthis.format = source.format;\n\t    \t\tthis.type = source.type;\n\t\n\t    \t\tthis.offset.copy( source.offset );\n\t    \t\tthis.repeat.copy( source.repeat );\n\t\n\t    \t\tthis.generateMipmaps = source.generateMipmaps;\n\t    \t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t    \t\tthis.flipY = source.flipY;\n\t    \t\tthis.unpackAlignment = source.unpackAlignment;\n\t    \t\tthis.encoding = source.encoding;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\t\n\t    \t\t\treturn meta.textures[ this.uuid ];\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getDataURL( image ) {\n\t\n\t    \t\t\tvar canvas;\n\t\n\t    \t\t\tif ( image.toDataURL !== undefined ) {\n\t\n\t    \t\t\t\tcanvas = image;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\t\t\tcanvas.width = image.width;\n\t    \t\t\t\tcanvas.height = image.height;\n\t\n\t    \t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\t\n\t    \t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\treturn canvas.toDataURL( 'image/png' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar output = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Texture',\n\t    \t\t\t\tgenerator: 'Texture.toJSON'\n\t    \t\t\t},\n\t\n\t    \t\t\tuuid: this.uuid,\n\t    \t\t\tname: this.name,\n\t\n\t    \t\t\tmapping: this.mapping,\n\t\n\t    \t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t    \t\t\toffset: [ this.offset.x, this.offset.y ],\n\t    \t\t\twrap: [ this.wrapS, this.wrapT ],\n\t\n\t    \t\t\tminFilter: this.minFilter,\n\t    \t\t\tmagFilter: this.magFilter,\n\t    \t\t\tanisotropy: this.anisotropy,\n\t\n\t    \t\t\tflipY: this.flipY\n\t    \t\t};\n\t\n\t    \t\tif ( this.image !== undefined ) {\n\t\n\t    \t\t\t// TODO: Move to THREE.Image\n\t\n\t    \t\t\tvar image = this.image;\n\t\n\t    \t\t\tif ( image.uuid === undefined ) {\n\t\n\t    \t\t\t\timage.uuid = exports.Math.generateUUID(); // UGH\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\t\n\t    \t\t\t\tmeta.images[ image.uuid ] = {\n\t    \t\t\t\t\tuuid: image.uuid,\n\t    \t\t\t\t\turl: getDataURL( image )\n\t    \t\t\t\t};\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\toutput.image = image.uuid;\n\t\n\t    \t\t}\n\t\n\t    \t\tmeta.textures[ this.uuid ] = output;\n\t\n\t    \t\treturn output;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t},\n\t\n\t    \ttransformUv: function ( uv ) {\n\t\n\t    \t\tif ( this.mapping !== UVMapping )  return;\n\t\n\t    \t\tuv.multiply( this.repeat );\n\t    \t\tuv.add( this.offset );\n\t\n\t    \t\tif ( uv.x < 0 || uv.x > 1 ) {\n\t\n\t    \t\t\tswitch ( this.wrapS ) {\n\t\n\t    \t\t\t\tcase RepeatWrapping:\n\t\n\t    \t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase ClampToEdgeWrapping:\n\t\n\t    \t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase MirroredRepeatWrapping:\n\t\n\t    \t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\t\n\t    \t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( uv.y < 0 || uv.y > 1 ) {\n\t\n\t    \t\t\tswitch ( this.wrapT ) {\n\t\n\t    \t\t\t\tcase RepeatWrapping:\n\t\n\t    \t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase ClampToEdgeWrapping:\n\t\n\t    \t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase MirroredRepeatWrapping:\n\t\n\t    \t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\t\n\t    \t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.flipY ) {\n\t\n\t    \t\t\tuv.y = 1 - uv.y;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( Texture.prototype, EventDispatcher.prototype );\n\t\n\t    var count = 0;\n\t    function TextureIdCount() { return count++; };\n\t\n\t    /**\n\t     * @author supereggbert / http://www.paulbrunt.co.uk/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author egraether / http://egraether.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Vector4( x, y, z, w ) {\n\t\n\t    \tthis.x = x || 0;\n\t    \tthis.y = y || 0;\n\t    \tthis.z = z || 0;\n\t    \tthis.w = ( w !== undefined ) ? w : 1;\n\t\n\t    }\n\t\n\t    Vector4.prototype = {\n\t\n\t    \tconstructor: Vector4,\n\t\n\t    \tisVector4: true,\n\t\n\t    \tset: function ( x, y, z, w ) {\n\t\n\t    \t\tthis.x = x;\n\t    \t\tthis.y = y;\n\t    \t\tthis.z = z;\n\t    \t\tthis.w = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.x = scalar;\n\t    \t\tthis.y = scalar;\n\t    \t\tthis.z = scalar;\n\t    \t\tthis.w = scalar;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( x ) {\n\t\n\t    \t\tthis.x = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( y ) {\n\t\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( z ) {\n\t\n\t    \t\tthis.z = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetW: function ( w ) {\n\t\n\t    \t\tthis.w = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponent: function ( index, value ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: this.x = value; break;\n\t    \t\t\tcase 1: this.y = value; break;\n\t    \t\t\tcase 2: this.z = value; break;\n\t    \t\t\tcase 3: this.w = value; break;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetComponent: function ( index ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: return this.x;\n\t    \t\t\tcase 1: return this.y;\n\t    \t\t\tcase 2: return this.z;\n\t    \t\t\tcase 3: return this.w;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( v ) {\n\t\n\t    \t\tthis.x = v.x;\n\t    \t\tthis.y = v.y;\n\t    \t\tthis.z = v.z;\n\t    \t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t    \t\t\treturn this.addVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x += v.x;\n\t    \t\tthis.y += v.y;\n\t    \t\tthis.z += v.z;\n\t    \t\tthis.w += v.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.x += s;\n\t    \t\tthis.y += s;\n\t    \t\tthis.z += s;\n\t    \t\tthis.w += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x + b.x;\n\t    \t\tthis.y = a.y + b.y;\n\t    \t\tthis.z = a.z + b.z;\n\t    \t\tthis.w = a.w + b.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScaledVector: function ( v, s ) {\n\t\n\t    \t\tthis.x += v.x * s;\n\t    \t\tthis.y += v.y * s;\n\t    \t\tthis.z += v.z * s;\n\t    \t\tthis.w += v.w * s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t    \t\t\treturn this.subVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x -= v.x;\n\t    \t\tthis.y -= v.y;\n\t    \t\tthis.z -= v.z;\n\t    \t\tthis.w -= v.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubScalar: function ( s ) {\n\t\n\t    \t\tthis.x -= s;\n\t    \t\tthis.y -= s;\n\t    \t\tthis.z -= s;\n\t    \t\tthis.w -= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x - b.x;\n\t    \t\tthis.y = a.y - b.y;\n\t    \t\tthis.z = a.z - b.z;\n\t    \t\tthis.w = a.w - b.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( scalar ) {\n\t\n\t    \t\tif ( isFinite( scalar ) ) {\n\t\n\t    \t\t\tthis.x *= scalar;\n\t    \t\t\tthis.y *= scalar;\n\t    \t\t\tthis.z *= scalar;\n\t    \t\t\tthis.w *= scalar;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.x = 0;\n\t    \t\t\tthis.y = 0;\n\t    \t\t\tthis.z = 0;\n\t    \t\t\tthis.w = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( m ) {\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t    \t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivideScalar: function ( scalar ) {\n\t\n\t    \t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t    \t},\n\t\n\t    \tsetAxisAngleFromQuaternion: function ( q ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\n\t    \t\t// q is assumed to be normalized\n\t\n\t    \t\tthis.w = 2 * Math.acos( q.w );\n\t\n\t    \t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\t\n\t    \t\tif ( s < 0.0001 ) {\n\t\n\t    \t\t\t this.x = 1;\n\t    \t\t\t this.y = 0;\n\t    \t\t\t this.z = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t this.x = q.x / s;\n\t    \t\t\t this.y = q.y / s;\n\t    \t\t\t this.z = q.z / s;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetAxisAngleFromRotationMatrix: function ( m ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tvar angle, x, y, z,\t\t// variables for result\n\t    \t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t    \t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\t\n\t    \t\t\tte = m.elements,\n\t\n\t    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\t\n\t    \t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t    \t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t    \t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\t\n\t    \t\t\t// singularity found\n\t    \t\t\t// first check for identity matrix which must have +1 for all terms\n\t    \t\t\t// in leading diagonal and zero in other terms\n\t\n\t    \t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t    \t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t    \t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t    \t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\t\n\t    \t\t\t\t// this singularity is identity matrix so angle = 0\n\t\n\t    \t\t\t\tthis.set( 1, 0, 0, 0 );\n\t\n\t    \t\t\t\treturn this; // zero angle, arbitrary axis\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// otherwise this singularity is angle = 180\n\t\n\t    \t\t\tangle = Math.PI;\n\t\n\t    \t\t\tvar xx = ( m11 + 1 ) / 2;\n\t    \t\t\tvar yy = ( m22 + 1 ) / 2;\n\t    \t\t\tvar zz = ( m33 + 1 ) / 2;\n\t    \t\t\tvar xy = ( m12 + m21 ) / 4;\n\t    \t\t\tvar xz = ( m13 + m31 ) / 4;\n\t    \t\t\tvar yz = ( m23 + m32 ) / 4;\n\t\n\t    \t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\t\n\t    \t\t\t\t// m11 is the largest diagonal term\n\t\n\t    \t\t\t\tif ( xx < epsilon ) {\n\t\n\t    \t\t\t\t\tx = 0;\n\t    \t\t\t\t\ty = 0.707106781;\n\t    \t\t\t\t\tz = 0.707106781;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tx = Math.sqrt( xx );\n\t    \t\t\t\t\ty = xy / x;\n\t    \t\t\t\t\tz = xz / x;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( yy > zz ) {\n\t\n\t    \t\t\t\t// m22 is the largest diagonal term\n\t\n\t    \t\t\t\tif ( yy < epsilon ) {\n\t\n\t    \t\t\t\t\tx = 0.707106781;\n\t    \t\t\t\t\ty = 0;\n\t    \t\t\t\t\tz = 0.707106781;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\ty = Math.sqrt( yy );\n\t    \t\t\t\t\tx = xy / y;\n\t    \t\t\t\t\tz = yz / y;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\n\t    \t\t\t\tif ( zz < epsilon ) {\n\t\n\t    \t\t\t\t\tx = 0.707106781;\n\t    \t\t\t\t\ty = 0.707106781;\n\t    \t\t\t\t\tz = 0;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tz = Math.sqrt( zz );\n\t    \t\t\t\t\tx = xz / z;\n\t    \t\t\t\t\ty = yz / z;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.set( x, y, z, angle );\n\t\n\t    \t\t\treturn this; // return 180 deg rotation\n\t\n\t    \t\t}\n\t\n\t    \t\t// as we have reached here there are no singularities so we can handle normally\n\t\n\t    \t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t    \t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t    \t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\t\n\t    \t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\t\n\t    \t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t    \t\t// caught by singularity test above, but I've left it in just in case\n\t\n\t    \t\tthis.x = ( m32 - m23 ) / s;\n\t    \t\tthis.y = ( m13 - m31 ) / s;\n\t    \t\tthis.z = ( m21 - m12 ) / s;\n\t    \t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmin: function ( v ) {\n\t\n\t    \t\tthis.x = Math.min( this.x, v.x );\n\t    \t\tthis.y = Math.min( this.y, v.y );\n\t    \t\tthis.z = Math.min( this.z, v.z );\n\t    \t\tthis.w = Math.min( this.w, v.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmax: function ( v ) {\n\t\n\t    \t\tthis.x = Math.max( this.x, v.x );\n\t    \t\tthis.y = Math.max( this.y, v.y );\n\t    \t\tthis.z = Math.max( this.z, v.z );\n\t    \t\tthis.w = Math.max( this.w, v.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclamp: function ( min, max ) {\n\t\n\t    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t    \t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclampScalar: function () {\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t    \t\t\tif ( min === undefined ) {\n\t\n\t    \t\t\t\tmin = new Vector4();\n\t    \t\t\t\tmax = new Vector4();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t    \t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\t\n\t    \t\t\treturn this.clamp( min, max );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tfloor: function () {\n\t\n\t    \t\tthis.x = Math.floor( this.x );\n\t    \t\tthis.y = Math.floor( this.y );\n\t    \t\tthis.z = Math.floor( this.z );\n\t    \t\tthis.w = Math.floor( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tceil: function () {\n\t\n\t    \t\tthis.x = Math.ceil( this.x );\n\t    \t\tthis.y = Math.ceil( this.y );\n\t    \t\tthis.z = Math.ceil( this.z );\n\t    \t\tthis.w = Math.ceil( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tround: function () {\n\t\n\t    \t\tthis.x = Math.round( this.x );\n\t    \t\tthis.y = Math.round( this.y );\n\t    \t\tthis.z = Math.round( this.z );\n\t    \t\tthis.w = Math.round( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \troundToZero: function () {\n\t\n\t    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t    \t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.x = - this.x;\n\t    \t\tthis.y = - this.y;\n\t    \t\tthis.z = - this.z;\n\t    \t\tthis.w = - this.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\t\n\t    \t},\n\t\n\t    \tlengthManhattan: function () {\n\t\n\t    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\treturn this.divideScalar( this.length() );\n\t\n\t    \t},\n\t\n\t    \tsetLength: function ( length ) {\n\t\n\t    \t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( v, alpha ) {\n\t\n\t    \t\tthis.x += ( v.x - this.x ) * alpha;\n\t    \t\tthis.y += ( v.y - this.y ) * alpha;\n\t    \t\tthis.z += ( v.z - this.z ) * alpha;\n\t    \t\tthis.w += ( v.w - this.w ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t    \t},\n\t\n\t    \tequals: function ( v ) {\n\t\n\t    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.x = array[ offset ];\n\t    \t\tthis.y = array[ offset + 1 ];\n\t    \t\tthis.z = array[ offset + 2 ];\n\t    \t\tthis.w = array[ offset + 3 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.x;\n\t    \t\tarray[ offset + 1 ] = this.y;\n\t    \t\tarray[ offset + 2 ] = this.z;\n\t    \t\tarray[ offset + 3 ] = this.w;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tindex = index * attribute.itemSize + offset;\n\t\n\t    \t\tthis.x = attribute.array[ index ];\n\t    \t\tthis.y = attribute.array[ index + 1 ];\n\t    \t\tthis.z = attribute.array[ index + 2 ];\n\t    \t\tthis.w = attribute.array[ index + 3 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author szimek / https://github.com/szimek/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author Marius Kintel / https://github.com/kintel\n\t     */\n\t\n\t    /*\n\t     In options, we can specify:\n\t     * Texture parameters for an auto-generated target texture\n\t     * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t    */\n\t    function WebGLRenderTarget( width, height, options ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.width = width;\n\t    \tthis.height = height;\n\t\n\t    \tthis.scissor = new Vector4( 0, 0, width, height );\n\t    \tthis.scissorTest = false;\n\t\n\t    \tthis.viewport = new Vector4( 0, 0, width, height );\n\t\n\t    \toptions = options || {};\n\t\n\t    \tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\t\n\t    \tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\n\t    \tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t    \tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t    \tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\n\t    }\n\t\n\t    Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisWebGLRenderTarget: true,\n\t\n\t    \tsetSize: function ( width, height ) {\n\t\n\t    \t\tif ( this.width !== width || this.height !== height ) {\n\t\n\t    \t\t\tthis.width = width;\n\t    \t\t\tthis.height = height;\n\t\n\t    \t\t\tthis.dispose();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.viewport.set( 0, 0, width, height );\n\t    \t\tthis.scissor.set( 0, 0, width, height );\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.width = source.width;\n\t    \t\tthis.height = source.height;\n\t\n\t    \t\tthis.viewport.copy( source.viewport );\n\t\n\t    \t\tthis.texture = source.texture.clone();\n\t\n\t    \t\tthis.depthBuffer = source.depthBuffer;\n\t    \t\tthis.stencilBuffer = source.stencilBuffer;\n\t    \t\tthis.depthTexture = source.depthTexture;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com\n\t     */\n\t\n\t    function WebGLRenderTargetCube( width, height, options ) {\n\t\n\t    \tWebGLRenderTarget.call( this, width, height, options );\n\t\n\t    \tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\t    \tthis.activeMipMapLevel = 0;\n\t\n\t    }\n\t\n\t    WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n\t    WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\t\n\t    WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Quaternion( x, y, z, w ) {\n\t\n\t    \tthis._x = x || 0;\n\t    \tthis._y = y || 0;\n\t    \tthis._z = z || 0;\n\t    \tthis._w = ( w !== undefined ) ? w : 1;\n\t\n\t    }\n\t\n\t    Quaternion.prototype = {\n\t\n\t    \tconstructor: Quaternion,\n\t\n\t    \tget x () {\n\t\n\t    \t\treturn this._x;\n\t\n\t    \t},\n\t\n\t    \tset x ( value ) {\n\t\n\t    \t\tthis._x = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget y () {\n\t\n\t    \t\treturn this._y;\n\t\n\t    \t},\n\t\n\t    \tset y ( value ) {\n\t\n\t    \t\tthis._y = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget z () {\n\t\n\t    \t\treturn this._z;\n\t\n\t    \t},\n\t\n\t    \tset z ( value ) {\n\t\n\t    \t\tthis._z = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget w () {\n\t\n\t    \t\treturn this._w;\n\t\n\t    \t},\n\t\n\t    \tset w ( value ) {\n\t\n\t    \t\tthis._w = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tset: function ( x, y, z, w ) {\n\t\n\t    \t\tthis._x = x;\n\t    \t\tthis._y = y;\n\t    \t\tthis._z = z;\n\t    \t\tthis._w = w;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( quaternion ) {\n\t\n\t    \t\tthis._x = quaternion.x;\n\t    \t\tthis._y = quaternion.y;\n\t    \t\tthis._z = quaternion.z;\n\t    \t\tthis._w = quaternion.w;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromEuler: function ( euler, update ) {\n\t\n\t    \t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t    \t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\t\n\t    \t\t}\n\t\n\t    \t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t    \t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t    \t\t//\tcontent/SpinCalc.m\n\t\n\t    \t\tvar c1 = Math.cos( euler._x / 2 );\n\t    \t\tvar c2 = Math.cos( euler._y / 2 );\n\t    \t\tvar c3 = Math.cos( euler._z / 2 );\n\t    \t\tvar s1 = Math.sin( euler._x / 2 );\n\t    \t\tvar s2 = Math.sin( euler._y / 2 );\n\t    \t\tvar s3 = Math.sin( euler._z / 2 );\n\t\n\t    \t\tvar order = euler.order;\n\t\n\t    \t\tif ( order === 'XYZ' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'YXZ' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'ZXY' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'ZYX' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'YZX' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'XZY' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( update !== false ) this.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromAxisAngle: function ( axis, angle ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\n\t    \t\t// assumes axis is normalized\n\t\n\t    \t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\t\n\t    \t\tthis._x = axis.x * s;\n\t    \t\tthis._y = axis.y * s;\n\t    \t\tthis._z = axis.z * s;\n\t    \t\tthis._w = Math.cos( halfAngle );\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromRotationMatrix: function ( m ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tvar te = m.elements,\n\t\n\t    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\t\n\t    \t\t\ttrace = m11 + m22 + m33,\n\t    \t\t\ts;\n\t\n\t    \t\tif ( trace > 0 ) {\n\t\n\t    \t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\t\n\t    \t\t\tthis._w = 0.25 / s;\n\t    \t\t\tthis._x = ( m32 - m23 ) * s;\n\t    \t\t\tthis._y = ( m13 - m31 ) * s;\n\t    \t\t\tthis._z = ( m21 - m12 ) * s;\n\t\n\t    \t\t} else if ( m11 > m22 && m11 > m33 ) {\n\t\n\t    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\t\n\t    \t\t\tthis._w = ( m32 - m23 ) / s;\n\t    \t\t\tthis._x = 0.25 * s;\n\t    \t\t\tthis._y = ( m12 + m21 ) / s;\n\t    \t\t\tthis._z = ( m13 + m31 ) / s;\n\t\n\t    \t\t} else if ( m22 > m33 ) {\n\t\n\t    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\t\n\t    \t\t\tthis._w = ( m13 - m31 ) / s;\n\t    \t\t\tthis._x = ( m12 + m21 ) / s;\n\t    \t\t\tthis._y = 0.25 * s;\n\t    \t\t\tthis._z = ( m23 + m32 ) / s;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\t\n\t    \t\t\tthis._w = ( m21 - m12 ) / s;\n\t    \t\t\tthis._x = ( m13 + m31 ) / s;\n\t    \t\t\tthis._y = ( m23 + m32 ) / s;\n\t    \t\t\tthis._z = 0.25 * s;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromUnitVectors: function () {\n\t\n\t    \t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\t\n\t    \t\t// assumes direction vectors vFrom and vTo are normalized\n\t\n\t    \t\tvar v1, r;\n\t\n\t    \t\tvar EPS = 0.000001;\n\t\n\t    \t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\tr = vFrom.dot( vTo ) + 1;\n\t\n\t    \t\t\tif ( r < EPS ) {\n\t\n\t    \t\t\t\tr = 0;\n\t\n\t    \t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\t\n\t    \t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tv1.crossVectors( vFrom, vTo );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis._x = v1.x;\n\t    \t\t\tthis._y = v1.y;\n\t    \t\t\tthis._z = v1.z;\n\t    \t\t\tthis._w = r;\n\t\n\t    \t\t\treturn this.normalize();\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tinverse: function () {\n\t\n\t    \t\treturn this.conjugate().normalize();\n\t\n\t    \t},\n\t\n\t    \tconjugate: function () {\n\t\n\t    \t\tthis._x *= - 1;\n\t    \t\tthis._y *= - 1;\n\t    \t\tthis._z *= - 1;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\tvar l = this.length();\n\t\n\t    \t\tif ( l === 0 ) {\n\t\n\t    \t\t\tthis._x = 0;\n\t    \t\t\tthis._y = 0;\n\t    \t\t\tthis._z = 0;\n\t    \t\t\tthis._w = 1;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tl = 1 / l;\n\t\n\t    \t\t\tthis._x = this._x * l;\n\t    \t\t\tthis._y = this._y * l;\n\t    \t\t\tthis._z = this._z * l;\n\t    \t\t\tthis._w = this._w * l;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( q, p ) {\n\t\n\t    \t\tif ( p !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t    \t\t\treturn this.multiplyQuaternions( q, p );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.multiplyQuaternions( this, q );\n\t\n\t    \t},\n\t\n\t    \tpremultiply: function ( q ) {\n\t\n\t    \t\treturn this.multiplyQuaternions( q, this );\n\t\n\t    \t},\n\t\n\t    \tmultiplyQuaternions: function ( a, b ) {\n\t\n\t    \t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\n\t    \t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t    \t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\t\n\t    \t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t    \t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t    \t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t    \t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tslerp: function ( qb, t ) {\n\t\n\t    \t\tif ( t === 0 ) return this;\n\t    \t\tif ( t === 1 ) return this.copy( qb );\n\t\n\t    \t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\t\n\t    \t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\t\n\t    \t\tif ( cosHalfTheta < 0 ) {\n\t\n\t    \t\t\tthis._w = - qb._w;\n\t    \t\t\tthis._x = - qb._x;\n\t    \t\t\tthis._y = - qb._y;\n\t    \t\t\tthis._z = - qb._z;\n\t\n\t    \t\t\tcosHalfTheta = - cosHalfTheta;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.copy( qb );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( cosHalfTheta >= 1.0 ) {\n\t\n\t    \t\t\tthis._w = w;\n\t    \t\t\tthis._x = x;\n\t    \t\t\tthis._y = y;\n\t    \t\t\tthis._z = z;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\t\n\t    \t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\t\n\t    \t\t\tthis._w = 0.5 * ( w + this._w );\n\t    \t\t\tthis._x = 0.5 * ( x + this._x );\n\t    \t\t\tthis._y = 0.5 * ( y + this._y );\n\t    \t\t\tthis._z = 0.5 * ( z + this._z );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t    \t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t    \t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\t\n\t    \t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t    \t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t    \t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t    \t\tthis._z = ( z * ratioA + this._z * ratioB );\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( quaternion ) {\n\t\n\t    \t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis._x = array[ offset ];\n\t    \t\tthis._y = array[ offset + 1 ];\n\t    \t\tthis._z = array[ offset + 2 ];\n\t    \t\tthis._w = array[ offset + 3 ];\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this._x;\n\t    \t\tarray[ offset + 1 ] = this._y;\n\t    \t\tarray[ offset + 2 ] = this._z;\n\t    \t\tarray[ offset + 3 ] = this._w;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tonChange: function ( callback ) {\n\t\n\t    \t\tthis.onChangeCallback = callback;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tonChangeCallback: function () {}\n\t\n\t    };\n\t\n\t    Object.assign( Quaternion, {\n\t\n\t    \tslerp: function( qa, qb, qm, t ) {\n\t\n\t    \t\treturn qm.copy( qa ).slerp( qb, t );\n\t\n\t    \t},\n\t\n\t    \tslerpFlat: function(\n\t    \t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\t\n\t    \t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\n\t    \t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t    \t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t    \t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t    \t\t\tw0 = src0[ srcOffset0 + 3 ],\n\t\n\t    \t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t    \t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t    \t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t    \t\t\tw1 = src1[ srcOffset1 + 3 ];\n\t\n\t    \t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\t\n\t    \t\t\tvar s = 1 - t,\n\t\n\t    \t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\n\t    \t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t    \t\t\t\tsqrSin = 1 - cos * cos;\n\t\n\t    \t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t    \t\t\tif ( sqrSin > Number.EPSILON ) {\n\t\n\t    \t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t    \t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\t\n\t    \t\t\t\ts = Math.sin( s * len ) / sin;\n\t    \t\t\t\tt = Math.sin( t * len ) / sin;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar tDir = t * dir;\n\t\n\t    \t\t\tx0 = x0 * s + x1 * tDir;\n\t    \t\t\ty0 = y0 * s + y1 * tDir;\n\t    \t\t\tz0 = z0 * s + z1 * tDir;\n\t    \t\t\tw0 = w0 * s + w1 * tDir;\n\t\n\t    \t\t\t// Normalize in case we just did a lerp:\n\t    \t\t\tif ( s === 1 - t ) {\n\t\n\t    \t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\t\n\t    \t\t\t\tx0 *= f;\n\t    \t\t\t\ty0 *= f;\n\t    \t\t\t\tz0 *= f;\n\t    \t\t\t\tw0 *= f;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tdst[ dstOffset ] = x0;\n\t    \t\tdst[ dstOffset + 1 ] = y0;\n\t    \t\tdst[ dstOffset + 2 ] = z0;\n\t    \t\tdst[ dstOffset + 3 ] = w0;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author *kile / http://kile.stravaganza.org/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author egraether / http://egraether.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Vector3( x, y, z ) {\n\t\n\t    \tthis.x = x || 0;\n\t    \tthis.y = y || 0;\n\t    \tthis.z = z || 0;\n\t\n\t    }\n\t\n\t    Vector3.prototype = {\n\t\n\t    \tconstructor: Vector3,\n\t\n\t    \tisVector3: true,\n\t\n\t    \tset: function ( x, y, z ) {\n\t\n\t    \t\tthis.x = x;\n\t    \t\tthis.y = y;\n\t    \t\tthis.z = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.x = scalar;\n\t    \t\tthis.y = scalar;\n\t    \t\tthis.z = scalar;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( x ) {\n\t\n\t    \t\tthis.x = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( y ) {\n\t\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( z ) {\n\t\n\t    \t\tthis.z = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponent: function ( index, value ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: this.x = value; break;\n\t    \t\t\tcase 1: this.y = value; break;\n\t    \t\t\tcase 2: this.z = value; break;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetComponent: function ( index ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: return this.x;\n\t    \t\t\tcase 1: return this.y;\n\t    \t\t\tcase 2: return this.z;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.x, this.y, this.z );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( v ) {\n\t\n\t    \t\tthis.x = v.x;\n\t    \t\tthis.y = v.y;\n\t    \t\tthis.z = v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t    \t\t\treturn this.addVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x += v.x;\n\t    \t\tthis.y += v.y;\n\t    \t\tthis.z += v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.x += s;\n\t    \t\tthis.y += s;\n\t    \t\tthis.z += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x + b.x;\n\t    \t\tthis.y = a.y + b.y;\n\t    \t\tthis.z = a.z + b.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScaledVector: function ( v, s ) {\n\t\n\t    \t\tthis.x += v.x * s;\n\t    \t\tthis.y += v.y * s;\n\t    \t\tthis.z += v.z * s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t    \t\t\treturn this.subVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x -= v.x;\n\t    \t\tthis.y -= v.y;\n\t    \t\tthis.z -= v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubScalar: function ( s ) {\n\t\n\t    \t\tthis.x -= s;\n\t    \t\tthis.y -= s;\n\t    \t\tthis.z -= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x - b.x;\n\t    \t\tthis.y = a.y - b.y;\n\t    \t\tthis.z = a.z - b.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t    \t\t\treturn this.multiplyVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x *= v.x;\n\t    \t\tthis.y *= v.y;\n\t    \t\tthis.z *= v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( scalar ) {\n\t\n\t    \t\tif ( isFinite( scalar ) ) {\n\t\n\t    \t\t\tthis.x *= scalar;\n\t    \t\t\tthis.y *= scalar;\n\t    \t\t\tthis.z *= scalar;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.x = 0;\n\t    \t\t\tthis.y = 0;\n\t    \t\t\tthis.z = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x * b.x;\n\t    \t\tthis.y = a.y * b.y;\n\t    \t\tthis.z = a.z * b.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyEuler: function () {\n\t\n\t    \t\tvar quaternion;\n\t\n\t    \t\treturn function applyEuler( euler ) {\n\t\n\t    \t\t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t    \t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\t\n\t    \t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyAxisAngle: function () {\n\t\n\t    \t\tvar quaternion;\n\t\n\t    \t\treturn function applyAxisAngle( axis, angle ) {\n\t\n\t    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\t\n\t    \t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyMatrix3: function ( m ) {\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t    \t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t    \t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( m ) {\n\t\n\t    \t\t// input: THREE.Matrix4 affine matrix\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n\t    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n\t    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyProjection: function ( m ) {\n\t\n\t    \t\t// input: THREE.Matrix4 projection matrix\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t    \t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\t\n\t    \t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n\t    \t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n\t    \t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyQuaternion: function ( q ) {\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\t\n\t    \t\t// calculate quat * vector\n\t\n\t    \t\tvar ix =  qw * x + qy * z - qz * y;\n\t    \t\tvar iy =  qw * y + qz * x - qx * z;\n\t    \t\tvar iz =  qw * z + qx * y - qy * x;\n\t    \t\tvar iw = - qx * x - qy * y - qz * z;\n\t\n\t    \t\t// calculate result * inverse quat\n\t\n\t    \t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t    \t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t    \t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tproject: function () {\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\treturn function project( camera ) {\n\t\n\t    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t    \t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t    \t\t\treturn this.applyProjection( matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tunproject: function () {\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\treturn function unproject( camera ) {\n\t\n\t    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t    \t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t    \t\t\treturn this.applyProjection( matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttransformDirection: function ( m ) {\n\t\n\t    \t\t// input: THREE.Matrix4 affine matrix\n\t    \t\t// vector interpreted as a direction\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\t\n\t    \t\treturn this.normalize();\n\t\n\t    \t},\n\t\n\t    \tdivide: function ( v ) {\n\t\n\t    \t\tthis.x /= v.x;\n\t    \t\tthis.y /= v.y;\n\t    \t\tthis.z /= v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivideScalar: function ( scalar ) {\n\t\n\t    \t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t    \t},\n\t\n\t    \tmin: function ( v ) {\n\t\n\t    \t\tthis.x = Math.min( this.x, v.x );\n\t    \t\tthis.y = Math.min( this.y, v.y );\n\t    \t\tthis.z = Math.min( this.z, v.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmax: function ( v ) {\n\t\n\t    \t\tthis.x = Math.max( this.x, v.x );\n\t    \t\tthis.y = Math.max( this.y, v.y );\n\t    \t\tthis.z = Math.max( this.z, v.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclamp: function ( min, max ) {\n\t\n\t    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclampScalar: function () {\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t    \t\t\tif ( min === undefined ) {\n\t\n\t    \t\t\t\tmin = new Vector3();\n\t    \t\t\t\tmax = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmin.set( minVal, minVal, minVal );\n\t    \t\t\tmax.set( maxVal, maxVal, maxVal );\n\t\n\t    \t\t\treturn this.clamp( min, max );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclampLength: function ( min, max ) {\n\t\n\t    \t\tvar length = this.length();\n\t\n\t    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\t\n\t    \t},\n\t\n\t    \tfloor: function () {\n\t\n\t    \t\tthis.x = Math.floor( this.x );\n\t    \t\tthis.y = Math.floor( this.y );\n\t    \t\tthis.z = Math.floor( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tceil: function () {\n\t\n\t    \t\tthis.x = Math.ceil( this.x );\n\t    \t\tthis.y = Math.ceil( this.y );\n\t    \t\tthis.z = Math.ceil( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tround: function () {\n\t\n\t    \t\tthis.x = Math.round( this.x );\n\t    \t\tthis.y = Math.round( this.y );\n\t    \t\tthis.z = Math.round( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \troundToZero: function () {\n\t\n\t    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.x = - this.x;\n\t    \t\tthis.y = - this.y;\n\t    \t\tthis.z = - this.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\t\n\t    \t},\n\t\n\t    \tlengthManhattan: function () {\n\t\n\t    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\treturn this.divideScalar( this.length() );\n\t\n\t    \t},\n\t\n\t    \tsetLength: function ( length ) {\n\t\n\t    \t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( v, alpha ) {\n\t\n\t    \t\tthis.x += ( v.x - this.x ) * alpha;\n\t    \t\tthis.y += ( v.y - this.y ) * alpha;\n\t    \t\tthis.z += ( v.z - this.z ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t    \t},\n\t\n\t    \tcross: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t    \t\t\treturn this.crossVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t\n\t    \t\tthis.x = y * v.z - z * v.y;\n\t    \t\tthis.y = z * v.x - x * v.z;\n\t    \t\tthis.z = x * v.y - y * v.x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcrossVectors: function ( a, b ) {\n\t\n\t    \t\tvar ax = a.x, ay = a.y, az = a.z;\n\t    \t\tvar bx = b.x, by = b.y, bz = b.z;\n\t\n\t    \t\tthis.x = ay * bz - az * by;\n\t    \t\tthis.y = az * bx - ax * bz;\n\t    \t\tthis.z = ax * by - ay * bx;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tprojectOnVector: function ( vector ) {\n\t\n\t    \t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\t\n\t    \t\treturn this.copy( vector ).multiplyScalar( scalar );\n\t\n\t    \t},\n\t\n\t    \tprojectOnPlane: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function projectOnPlane( planeNormal ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\t\n\t    \t\t\treturn this.sub( v1 );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \treflect: function () {\n\t\n\t    \t\t// reflect incident vector off plane orthogonal to normal\n\t    \t\t// normal is assumed to have unit length\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function reflect( normal ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tangleTo: function ( v ) {\n\t\n\t    \t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\t\n\t    \t\t// clamp, to handle numerical problems\n\t\n\t    \t\treturn Math.acos( exports.Math.clamp( theta, - 1, 1 ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceTo: function ( v ) {\n\t\n\t    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceToSquared: function ( v ) {\n\t\n\t    \t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\t\n\t    \t\treturn dx * dx + dy * dy + dz * dz;\n\t\n\t    \t},\n\t\n\t    \tdistanceToManhattan: function ( v ) {\n\t\n\t    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\t\n\t    \t},\n\t\n\t    \tsetFromSpherical: function( s ) {\n\t\n\t    \t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\t\n\t    \t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t    \t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t    \t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrixPosition: function ( m ) {\n\t\n\t    \t\treturn this.setFromMatrixColumn( m, 3 );\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrixScale: function ( m ) {\n\t\n\t    \t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t    \t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t    \t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\t\n\t    \t\tthis.x = sx;\n\t    \t\tthis.y = sy;\n\t    \t\tthis.z = sz;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrixColumn: function ( m, index ) {\n\t\n\t    \t\tif ( typeof m === 'number' ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n\t    \t\t\tvar temp = m\n\t    \t\t\tm = index;\n\t    \t\t\tindex = temp;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.fromArray( m.elements, index * 4 );\n\t\n\t    \t},\n\t\n\t    \tequals: function ( v ) {\n\t\n\t    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.x = array[ offset ];\n\t    \t\tthis.y = array[ offset + 1 ];\n\t    \t\tthis.z = array[ offset + 2 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.x;\n\t    \t\tarray[ offset + 1 ] = this.y;\n\t    \t\tarray[ offset + 2 ] = this.z;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tindex = index * attribute.itemSize + offset;\n\t\n\t    \t\tthis.x = attribute.array[ index ];\n\t    \t\tthis.y = attribute.array[ index + 1 ];\n\t    \t\tthis.z = attribute.array[ index + 2 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author supereggbert / http://www.paulbrunt.co.uk/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author jordi_ros / http://plattsoft.com\n\t     * @author D1plo1d / http://github.com/D1plo1d\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author timknip / http://www.floorplanner.com/\n\t     * @author bhouston / http://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Matrix4() {\n\t\n\t    \tthis.elements = new Float32Array( [\n\t\n\t    \t\t1, 0, 0, 0,\n\t    \t\t0, 1, 0, 0,\n\t    \t\t0, 0, 1, 0,\n\t    \t\t0, 0, 0, 1\n\t\n\t    \t] );\n\t\n\t    \tif ( arguments.length > 0 ) {\n\t\n\t    \t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Matrix4.prototype = {\n\t\n\t    \tconstructor: Matrix4,\n\t\n\t    \tisMatrix4: true,\n\t\n\t    \tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t    \t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t    \t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t    \t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tidentity: function () {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0, 0, 0,\n\t    \t\t\t0, 1, 0, 0,\n\t    \t\t\t0, 0, 1, 0,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new Matrix4().fromArray( this.elements );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( m ) {\n\t\n\t    \t\tthis.elements.set( m.elements );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyPosition: function ( m ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar me = m.elements;\n\t\n\t    \t\tte[ 12 ] = me[ 12 ];\n\t    \t\tte[ 13 ] = me[ 13 ];\n\t    \t\tte[ 14 ] = me[ 14 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \textractBasis: function ( xAxis, yAxis, zAxis ) {\n\t\n\t    \t\txAxis.setFromMatrixColumn( this, 0 );\n\t    \t\tyAxis.setFromMatrixColumn( this, 1 );\n\t    \t\tzAxis.setFromMatrixColumn( this, 2 );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\t\n\t    \t\tthis.set(\n\t    \t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t    \t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t    \t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t    \t\t\t0,       0,       0,       1\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \textractRotation: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function extractRotation( m ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\tvar te = this.elements;\n\t    \t\t\tvar me = m.elements;\n\t\n\t    \t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t    \t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t    \t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\t\n\t    \t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t    \t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t    \t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\n\t    \t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t    \t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t    \t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\n\t    \t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t    \t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t    \t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmakeRotationFromEuler: function ( euler ) {\n\t\n\t    \t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t    \t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t    \t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t    \t\tvar e = Math.cos( z ), f = Math.sin( z );\n\t\n\t    \t\tif ( euler.order === 'XYZ' ) {\n\t\n\t    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = - c * f;\n\t    \t\t\tte[ 8 ] = d;\n\t\n\t    \t\t\tte[ 1 ] = af + be * d;\n\t    \t\t\tte[ 5 ] = ae - bf * d;\n\t    \t\t\tte[ 9 ] = - b * c;\n\t\n\t    \t\t\tte[ 2 ] = bf - ae * d;\n\t    \t\t\tte[ 6 ] = be + af * d;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'YXZ' ) {\n\t\n\t    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\t\n\t    \t\t\tte[ 0 ] = ce + df * b;\n\t    \t\t\tte[ 4 ] = de * b - cf;\n\t    \t\t\tte[ 8 ] = a * d;\n\t\n\t    \t\t\tte[ 1 ] = a * f;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = - b;\n\t\n\t    \t\t\tte[ 2 ] = cf * b - de;\n\t    \t\t\tte[ 6 ] = df + ce * b;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'ZXY' ) {\n\t\n\t    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\t\n\t    \t\t\tte[ 0 ] = ce - df * b;\n\t    \t\t\tte[ 4 ] = - a * f;\n\t    \t\t\tte[ 8 ] = de + cf * b;\n\t\n\t    \t\t\tte[ 1 ] = cf + de * b;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = df - ce * b;\n\t\n\t    \t\t\tte[ 2 ] = - a * d;\n\t    \t\t\tte[ 6 ] = b;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'ZYX' ) {\n\t\n\t    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = be * d - af;\n\t    \t\t\tte[ 8 ] = ae * d + bf;\n\t\n\t    \t\t\tte[ 1 ] = c * f;\n\t    \t\t\tte[ 5 ] = bf * d + ae;\n\t    \t\t\tte[ 9 ] = af * d - be;\n\t\n\t    \t\t\tte[ 2 ] = - d;\n\t    \t\t\tte[ 6 ] = b * c;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'YZX' ) {\n\t\n\t    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = bd - ac * f;\n\t    \t\t\tte[ 8 ] = bc * f + ad;\n\t\n\t    \t\t\tte[ 1 ] = f;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = - b * e;\n\t\n\t    \t\t\tte[ 2 ] = - d * e;\n\t    \t\t\tte[ 6 ] = ad * f + bc;\n\t    \t\t\tte[ 10 ] = ac - bd * f;\n\t\n\t    \t\t} else if ( euler.order === 'XZY' ) {\n\t\n\t    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = - f;\n\t    \t\t\tte[ 8 ] = d * e;\n\t\n\t    \t\t\tte[ 1 ] = ac * f + bd;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = ad * f - bc;\n\t\n\t    \t\t\tte[ 2 ] = bc * f - ad;\n\t    \t\t\tte[ 6 ] = b * e;\n\t    \t\t\tte[ 10 ] = bd * f + ac;\n\t\n\t    \t\t}\n\t\n\t    \t\t// last column\n\t    \t\tte[ 3 ] = 0;\n\t    \t\tte[ 7 ] = 0;\n\t    \t\tte[ 11 ] = 0;\n\t\n\t    \t\t// bottom row\n\t    \t\tte[ 12 ] = 0;\n\t    \t\tte[ 13 ] = 0;\n\t    \t\tte[ 14 ] = 0;\n\t    \t\tte[ 15 ] = 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationFromQuaternion: function ( q ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n\t    \t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t    \t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t    \t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t    \t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\t\n\t    \t\tte[ 0 ] = 1 - ( yy + zz );\n\t    \t\tte[ 4 ] = xy - wz;\n\t    \t\tte[ 8 ] = xz + wy;\n\t\n\t    \t\tte[ 1 ] = xy + wz;\n\t    \t\tte[ 5 ] = 1 - ( xx + zz );\n\t    \t\tte[ 9 ] = yz - wx;\n\t\n\t    \t\tte[ 2 ] = xz - wy;\n\t    \t\tte[ 6 ] = yz + wx;\n\t    \t\tte[ 10 ] = 1 - ( xx + yy );\n\t\n\t    \t\t// last column\n\t    \t\tte[ 3 ] = 0;\n\t    \t\tte[ 7 ] = 0;\n\t    \t\tte[ 11 ] = 0;\n\t\n\t    \t\t// bottom row\n\t    \t\tte[ 12 ] = 0;\n\t    \t\tte[ 13 ] = 0;\n\t    \t\tte[ 14 ] = 0;\n\t    \t\tte[ 15 ] = 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\tvar x, y, z;\n\t\n\t    \t\treturn function lookAt( eye, target, up ) {\n\t\n\t    \t\t\tif ( x === undefined ) {\n\t\n\t    \t\t\t\tx = new Vector3();\n\t    \t\t\t\ty = new Vector3();\n\t    \t\t\t\tz = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar te = this.elements;\n\t\n\t    \t\t\tz.subVectors( eye, target ).normalize();\n\t\n\t    \t\t\tif ( z.lengthSq() === 0 ) {\n\t\n\t    \t\t\t\tz.z = 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tx.crossVectors( up, z ).normalize();\n\t\n\t    \t\t\tif ( x.lengthSq() === 0 ) {\n\t\n\t    \t\t\t\tz.z += 0.0001;\n\t    \t\t\t\tx.crossVectors( up, z ).normalize();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ty.crossVectors( z, x );\n\t\n\t\n\t    \t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t    \t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t    \t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmultiply: function ( m, n ) {\n\t\n\t    \t\tif ( n !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t    \t\t\treturn this.multiplyMatrices( m, n );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.multiplyMatrices( this, m );\n\t\n\t    \t},\n\t\n\t    \tpremultiply: function ( m ) {\n\t\n\t    \t\treturn this.multiplyMatrices( m, this );\n\t\n\t    \t},\n\t\n\t    \tmultiplyMatrices: function ( a, b ) {\n\t\n\t    \t\tvar ae = a.elements;\n\t    \t\tvar be = b.elements;\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t    \t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t    \t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t    \t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\t\n\t    \t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t    \t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t    \t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t    \t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\t\n\t    \t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t    \t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t    \t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t    \t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\n\t    \t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t    \t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t    \t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t    \t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\n\t    \t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t    \t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t    \t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t    \t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\n\t    \t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t    \t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t    \t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t    \t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyToArray: function ( a, b, r ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tthis.multiplyMatrices( a, b );\n\t\n\t    \t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n\t    \t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n\t    \t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n\t    \t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( s ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t    \t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t    \t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t    \t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyToVector3Array: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToVector3Array( array, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = array.length;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\t\n\t    \t\t\t\tv1.fromArray( array, j );\n\t    \t\t\t\tv1.applyMatrix4( this );\n\t    \t\t\t\tv1.toArray( array, j );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn array;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyToBuffer: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\t\n\t    \t\t\t\tv1.x = buffer.getX( j );\n\t    \t\t\t\tv1.y = buffer.getY( j );\n\t    \t\t\t\tv1.z = buffer.getZ( j );\n\t\n\t    \t\t\t\tv1.applyMatrix4( this );\n\t\n\t    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn buffer;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tdeterminant: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t    \t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t    \t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t    \t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\t\n\t    \t\t//TODO: make this more efficient\n\t    \t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\t\n\t    \t\treturn (\n\t    \t\t\tn41 * (\n\t    \t\t\t\t+ n14 * n23 * n32\n\t    \t\t\t\t - n13 * n24 * n32\n\t    \t\t\t\t - n14 * n22 * n33\n\t    \t\t\t\t + n12 * n24 * n33\n\t    \t\t\t\t + n13 * n22 * n34\n\t    \t\t\t\t - n12 * n23 * n34\n\t    \t\t\t) +\n\t    \t\t\tn42 * (\n\t    \t\t\t\t+ n11 * n23 * n34\n\t    \t\t\t\t - n11 * n24 * n33\n\t    \t\t\t\t + n14 * n21 * n33\n\t    \t\t\t\t - n13 * n21 * n34\n\t    \t\t\t\t + n13 * n24 * n31\n\t    \t\t\t\t - n14 * n23 * n31\n\t    \t\t\t) +\n\t    \t\t\tn43 * (\n\t    \t\t\t\t+ n11 * n24 * n32\n\t    \t\t\t\t - n11 * n22 * n34\n\t    \t\t\t\t - n14 * n21 * n32\n\t    \t\t\t\t + n12 * n21 * n34\n\t    \t\t\t\t + n14 * n22 * n31\n\t    \t\t\t\t - n12 * n24 * n31\n\t    \t\t\t) +\n\t    \t\t\tn44 * (\n\t    \t\t\t\t- n13 * n22 * n31\n\t    \t\t\t\t - n11 * n23 * n32\n\t    \t\t\t\t + n11 * n22 * n33\n\t    \t\t\t\t + n13 * n21 * n32\n\t    \t\t\t\t - n12 * n21 * n33\n\t    \t\t\t\t + n12 * n23 * n31\n\t    \t\t\t)\n\t\n\t    \t\t);\n\t\n\t    \t},\n\t\n\t    \ttranspose: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar tmp;\n\t\n\t    \t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t    \t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t    \t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\t\n\t    \t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t    \t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t    \t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tflattenToArrayOffset: function ( array, offset ) {\n\t\n\t    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t    \t\t\t\t\"- just use .toArray instead.\" );\n\t\n\t    \t\treturn this.toArray( array, offset );\n\t\n\t    \t},\n\t\n\t    \tgetPosition: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function getPosition() {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\n\t    \t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetPosition: function ( v ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 12 ] = v.x;\n\t    \t\tte[ 13 ] = v.y;\n\t    \t\tte[ 14 ] = v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetInverse: function ( m, throwOnDegenerate ) {\n\t\n\t    \t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t    \t\tvar te = this.elements,\n\t    \t\t\tme = m.elements,\n\t\n\t    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t    \t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t    \t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t    \t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\t\n\t    \t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t    \t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t    \t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t    \t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\n\t    \t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\n\t    \t\tif ( det === 0 ) {\n\t\n\t    \t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\t\n\t    \t\t\tif ( throwOnDegenerate === true ) {\n\t\n\t    \t\t\t\tthrow new Error( msg );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tconsole.warn( msg );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this.identity();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar detInv = 1 / det;\n\t\n\t    \t\tte[ 0 ] = t11 * detInv;\n\t    \t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t    \t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t    \t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\t\n\t    \t\tte[ 4 ] = t12 * detInv;\n\t    \t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t    \t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t    \t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\t\n\t    \t\tte[ 8 ] = t13 * detInv;\n\t    \t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t    \t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t    \t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\t\n\t    \t\tte[ 12 ] = t14 * detInv;\n\t    \t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t    \t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t    \t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tscale: function ( v ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar x = v.x, y = v.y, z = v.z;\n\t\n\t    \t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t    \t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t    \t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t    \t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetMaxScaleOnAxis: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t    \t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t    \t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\t\n\t    \t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\t\n\t    \t},\n\t\n\t    \tmakeTranslation: function ( x, y, z ) {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0, 0, x,\n\t    \t\t\t0, 1, 0, y,\n\t    \t\t\t0, 0, 1, z,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationX: function ( theta ) {\n\t\n\t    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0,  0, 0,\n\t    \t\t\t0, c, - s, 0,\n\t    \t\t\t0, s,  c, 0,\n\t    \t\t\t0, 0,  0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationY: function ( theta ) {\n\t\n\t    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t c, 0, s, 0,\n\t    \t\t\t 0, 1, 0, 0,\n\t    \t\t\t- s, 0, c, 0,\n\t    \t\t\t 0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationZ: function ( theta ) {\n\t\n\t    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tc, - s, 0, 0,\n\t    \t\t\ts,  c, 0, 0,\n\t    \t\t\t0,  0, 1, 0,\n\t    \t\t\t0,  0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationAxis: function ( axis, angle ) {\n\t\n\t    \t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\n\t    \t\tvar c = Math.cos( angle );\n\t    \t\tvar s = Math.sin( angle );\n\t    \t\tvar t = 1 - c;\n\t    \t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t    \t\tvar tx = t * x, ty = t * y;\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t    \t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t    \t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\t return this;\n\t\n\t    \t},\n\t\n\t    \tmakeScale: function ( x, y, z ) {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tx, 0, 0, 0,\n\t    \t\t\t0, y, 0, 0,\n\t    \t\t\t0, 0, z, 0,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcompose: function ( position, quaternion, scale ) {\n\t\n\t    \t\tthis.makeRotationFromQuaternion( quaternion );\n\t    \t\tthis.scale( scale );\n\t    \t\tthis.setPosition( position );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdecompose: function () {\n\t\n\t    \t\tvar vector, matrix;\n\t\n\t    \t\treturn function decompose( position, quaternion, scale ) {\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tvector = new Vector3();\n\t    \t\t\t\tmatrix = new Matrix4();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar te = this.elements;\n\t\n\t    \t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t    \t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t    \t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\t\n\t    \t\t\t// if determine is negative, we need to invert one scale\n\t    \t\t\tvar det = this.determinant();\n\t    \t\t\tif ( det < 0 ) {\n\t\n\t    \t\t\t\tsx = - sx;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tposition.x = te[ 12 ];\n\t    \t\t\tposition.y = te[ 13 ];\n\t    \t\t\tposition.z = te[ 14 ];\n\t\n\t    \t\t\t// scale the rotation part\n\t\n\t    \t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\t\n\t    \t\t\tvar invSX = 1 / sx;\n\t    \t\t\tvar invSY = 1 / sy;\n\t    \t\t\tvar invSZ = 1 / sz;\n\t\n\t    \t\t\tmatrix.elements[ 0 ] *= invSX;\n\t    \t\t\tmatrix.elements[ 1 ] *= invSX;\n\t    \t\t\tmatrix.elements[ 2 ] *= invSX;\n\t\n\t    \t\t\tmatrix.elements[ 4 ] *= invSY;\n\t    \t\t\tmatrix.elements[ 5 ] *= invSY;\n\t    \t\t\tmatrix.elements[ 6 ] *= invSY;\n\t\n\t    \t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t    \t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t    \t\t\tmatrix.elements[ 10 ] *= invSZ;\n\t\n\t    \t\t\tquaternion.setFromRotationMatrix( matrix );\n\t\n\t    \t\t\tscale.x = sx;\n\t    \t\t\tscale.y = sy;\n\t    \t\t\tscale.z = sz;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar x = 2 * near / ( right - left );\n\t    \t\tvar y = 2 * near / ( top - bottom );\n\t\n\t    \t\tvar a = ( right + left ) / ( right - left );\n\t    \t\tvar b = ( top + bottom ) / ( top - bottom );\n\t    \t\tvar c = - ( far + near ) / ( far - near );\n\t    \t\tvar d = - 2 * far * near / ( far - near );\n\t\n\t    \t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t    \t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakePerspective: function ( fov, aspect, near, far ) {\n\t\n\t    \t\tvar ymax = near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 );\n\t    \t\tvar ymin = - ymax;\n\t    \t\tvar xmin = ymin * aspect;\n\t    \t\tvar xmax = ymax * aspect;\n\t\n\t    \t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\t\n\t    \t},\n\t\n\t    \tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar w = 1.0 / ( right - left );\n\t    \t\tvar h = 1.0 / ( top - bottom );\n\t    \t\tvar p = 1.0 / ( far - near );\n\t\n\t    \t\tvar x = ( right + left ) * w;\n\t    \t\tvar y = ( top + bottom ) * h;\n\t    \t\tvar z = ( far + near ) * p;\n\t\n\t    \t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t    \t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( matrix ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar me = matrix.elements;\n\t\n\t    \t\tfor ( var i = 0; i < 16; i ++ ) {\n\t\n\t    \t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tfor( var i = 0; i < 16; i ++ ) {\n\t\n\t    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tarray[ offset ] = te[ 0 ];\n\t    \t\tarray[ offset + 1 ] = te[ 1 ];\n\t    \t\tarray[ offset + 2 ] = te[ 2 ];\n\t    \t\tarray[ offset + 3 ] = te[ 3 ];\n\t\n\t    \t\tarray[ offset + 4 ] = te[ 4 ];\n\t    \t\tarray[ offset + 5 ] = te[ 5 ];\n\t    \t\tarray[ offset + 6 ] = te[ 6 ];\n\t    \t\tarray[ offset + 7 ] = te[ 7 ];\n\t\n\t    \t\tarray[ offset + 8 ]  = te[ 8 ];\n\t    \t\tarray[ offset + 9 ]  = te[ 9 ];\n\t    \t\tarray[ offset + 10 ] = te[ 10 ];\n\t    \t\tarray[ offset + 11 ] = te[ 11 ];\n\t\n\t    \t\tarray[ offset + 12 ] = te[ 12 ];\n\t    \t\tarray[ offset + 13 ] = te[ 13 ];\n\t    \t\tarray[ offset + 14 ] = te[ 14 ];\n\t    \t\tarray[ offset + 15 ] = te[ 15 ];\n\t\n\t    \t\treturn array;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\t\n\t    \timages = images !== undefined ? images : [];\n\t    \tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\n\t    \tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t    \tthis.flipY = false;\n\t\n\t    }\n\t\n\t    CubeTexture.prototype = Object.create( Texture.prototype );\n\t    CubeTexture.prototype.constructor = CubeTexture;\n\t\n\t    CubeTexture.prototype.isCubeTexture = true;\n\t\n\t    Object.defineProperty( CubeTexture.prototype, 'images', {\n\t\n\t    \tget: function () {\n\t\n\t    \t\treturn this.image;\n\t\n\t    \t},\n\t\n\t    \tset: function ( value ) {\n\t\n\t    \t\tthis.image = value;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var emptyTexture = new Texture();\n\t    var emptyCubeTexture = new CubeTexture();\n\t\n\t    // --- Base for inner nodes (including the root) ---\n\t\n\t    function UniformContainer() {\n\t\n\t    \tthis.seq = [];\n\t    \tthis.map = {};\n\t\n\t    }\n\t\n\t    // --- Utilities ---\n\t\n\t    // Array Caches (provide typed arrays for temporary by size)\n\t\n\t    var arrayCacheF32 = [];\n\t    var arrayCacheI32 = [];\n\t\n\t    // Flattening for arrays of vectors and matrices\n\t\n\t    function flatten( array, nBlocks, blockSize ) {\n\t\n\t    \tvar firstElem = array[ 0 ];\n\t\n\t    \tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t    \t// unoptimized: ! isNaN( firstElem )\n\t    \t// see http://jacksondunstan.com/articles/983\n\t\n\t    \tvar n = nBlocks * blockSize,\n\t    \t\tr = arrayCacheF32[ n ];\n\t\n\t    \tif ( r === undefined ) {\n\t\n\t    \t\tr = new Float32Array( n );\n\t    \t\tarrayCacheF32[ n ] = r;\n\t\n\t    \t}\n\t\n\t    \tif ( nBlocks !== 0 ) {\n\t\n\t    \t\tfirstElem.toArray( r, 0 );\n\t\n\t    \t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\t\n\t    \t\t\toffset += blockSize;\n\t    \t\t\tarray[ i ].toArray( r, offset );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn r;\n\t\n\t    }\n\t\n\t    // Texture unit allocation\n\t\n\t    function allocTexUnits( renderer, n ) {\n\t\n\t    \tvar r = arrayCacheI32[ n ];\n\t\n\t    \tif ( r === undefined ) {\n\t\n\t    \t\tr = new Int32Array( n );\n\t    \t\tarrayCacheI32[ n ] = r;\n\t\n\t    \t}\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i )\n\t    \t\tr[ i ] = renderer.allocTextureUnit();\n\t\n\t    \treturn r;\n\t\n\t    }\n\t\n\t    // --- Setters ---\n\t\n\t    // Note: Defining these methods externally, because they come in a bunch\n\t    // and this way their names minify.\n\t\n\t    // Single scalar\n\t\n\t    function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }\n\t    function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }\n\t\n\t    // Single float vector (from flat array or THREE.VectorN)\n\t\n\t    function setValue2fv( gl, v ) {\n\t\n\t    \tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n\t    \telse gl.uniform2f( this.addr, v.x, v.y );\n\t\n\t    }\n\t\n\t    function setValue3fv( gl, v ) {\n\t\n\t    \tif ( v.x !== undefined )\n\t    \t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\t    \telse if ( v.r !== undefined )\n\t    \t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\t    \telse\n\t    \t\tgl.uniform3fv( this.addr, v );\n\t\n\t    }\n\t\n\t    function setValue4fv( gl, v ) {\n\t\n\t    \tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n\t    \telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\t\n\t    }\n\t\n\t    // Single matrix (from flat array or MatrixN)\n\t\n\t    function setValue2fm( gl, v ) {\n\t\n\t    \tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\t\n\t    }\n\t\n\t    function setValue3fm( gl, v ) {\n\t\n\t    \tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\t\n\t    }\n\t\n\t    function setValue4fm( gl, v ) {\n\t\n\t    \tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\t\n\t    }\n\t\n\t    // Single texture (2D / Cube)\n\t\n\t    function setValueT1( gl, v, renderer ) {\n\t\n\t    \tvar unit = renderer.allocTextureUnit();\n\t    \tgl.uniform1i( this.addr, unit );\n\t    \trenderer.setTexture2D( v || emptyTexture, unit );\n\t\n\t    }\n\t\n\t    function setValueT6( gl, v, renderer ) {\n\t\n\t    \tvar unit = renderer.allocTextureUnit();\n\t    \tgl.uniform1i( this.addr, unit );\n\t    \trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\t\n\t    }\n\t\n\t    // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\t\n\t    function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }\n\t    function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }\n\t    function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }\n\t\n\t    // Helper to pick the right setter for the singular case\n\t\n\t    function getSingularSetter( type ) {\n\t\n\t    \tswitch ( type ) {\n\t\n\t    \t\tcase 0x1406: return setValue1f; // FLOAT\n\t    \t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t    \t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t    \t\tcase 0x8b52: return setValue4fv; // _VEC4\n\t\n\t    \t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t    \t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t    \t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\t\n\t    \t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n\t    \t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\t\n\t    \t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // Array of scalars\n\t\n\t    function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }\n\t    function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }\n\t\n\t    // Array of vectors (flat or from THREE classes)\n\t\n\t    function setValueV2a( gl, v ) {\n\t\n\t    \tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\t\n\t    }\n\t\n\t    function setValueV3a( gl, v ) {\n\t\n\t    \tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\t\n\t    }\n\t\n\t    function setValueV4a( gl, v ) {\n\t\n\t    \tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\t\n\t    }\n\t\n\t    // Array of matrices (flat or from THREE clases)\n\t\n\t    function setValueM2a( gl, v ) {\n\t\n\t    \tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\t\n\t    }\n\t\n\t    function setValueM3a( gl, v ) {\n\t\n\t    \tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\t\n\t    }\n\t\n\t    function setValueM4a( gl, v ) {\n\t\n\t    \tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\t\n\t    }\n\t\n\t    // Array of textures (2D / Cube)\n\t\n\t    function setValueT1a( gl, v, renderer ) {\n\t\n\t    \tvar n = v.length,\n\t    \t\tunits = allocTexUnits( renderer, n );\n\t\n\t    \tgl.uniform1iv( this.addr, units );\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    function setValueT6a( gl, v, renderer ) {\n\t\n\t    \tvar n = v.length,\n\t    \t\tunits = allocTexUnits( renderer, n );\n\t\n\t    \tgl.uniform1iv( this.addr, units );\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // Helper to pick the right setter for a pure (bottom-level) array\n\t\n\t    function getPureArraySetter( type ) {\n\t\n\t    \tswitch ( type ) {\n\t\n\t    \t\tcase 0x1406: return setValue1fv; // FLOAT\n\t    \t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t    \t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t    \t\tcase 0x8b52: return setValueV4a; // _VEC4\n\t\n\t    \t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t    \t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t    \t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\t\n\t    \t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t    \t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\t\n\t    \t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // --- Uniform Classes ---\n\t\n\t    function SingleUniform( id, activeInfo, addr ) {\n\t\n\t    \tthis.id = id;\n\t    \tthis.addr = addr;\n\t    \tthis.setValue = getSingularSetter( activeInfo.type );\n\t\n\t    \t// this.path = activeInfo.name; // DEBUG\n\t\n\t    }\n\t\n\t    function PureArrayUniform( id, activeInfo, addr ) {\n\t\n\t    \tthis.id = id;\n\t    \tthis.addr = addr;\n\t    \tthis.size = activeInfo.size;\n\t    \tthis.setValue = getPureArraySetter( activeInfo.type );\n\t\n\t    \t// this.path = activeInfo.name; // DEBUG\n\t\n\t    }\n\t\n\t    function StructuredUniform( id ) {\n\t\n\t    \tthis.id = id;\n\t\n\t    \tUniformContainer.call( this ); // mix-in\n\t\n\t    }\n\t\n\t    StructuredUniform.prototype.setValue = function( gl, value ) {\n\t\n\t    \t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t    \t// are not allowed in structured uniforms.\n\t\n\t    \tvar seq = this.seq;\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ];\n\t    \t\tu.setValue( gl, value[ u.id ] );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    // --- Top-level ---\n\t\n\t    // Parser - builds up the property tree from the path strings\n\t\n\t    var RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\t\n\t    // extracts\n\t    // \t- the identifier (member name or array index)\n\t    //  - followed by an optional right bracket (found when array index)\n\t    //  - followed by an optional left bracket or dot (type of subscript)\n\t    //\n\t    // Note: These portions can be read in a non-overlapping fashion and\n\t    // allow straightforward parsing of the hierarchy that WebGL encodes\n\t    // in the uniform names.\n\t\n\t    function addUniform( container, uniformObject ) {\n\t\n\t    \tcontainer.seq.push( uniformObject );\n\t    \tcontainer.map[ uniformObject.id ] = uniformObject;\n\t\n\t    }\n\t\n\t    function parseUniform( activeInfo, addr, container ) {\n\t\n\t    \tvar path = activeInfo.name,\n\t    \t\tpathLength = path.length;\n\t\n\t    \t// reset RegExp object, because of the early exit of a previous run\n\t    \tRePathPart.lastIndex = 0;\n\t\n\t    \tfor (; ;) {\n\t\n\t    \t\tvar match = RePathPart.exec( path ),\n\t    \t\t\tmatchEnd = RePathPart.lastIndex,\n\t\n\t    \t\t\tid = match[ 1 ],\n\t    \t\t\tidIsIndex = match[ 2 ] === ']',\n\t    \t\t\tsubscript = match[ 3 ];\n\t\n\t    \t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\t\n\t    \t\tif ( subscript === undefined ||\n\t    \t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n\t    \t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\n\t    \t\t\taddUniform( container, subscript === undefined ?\n\t    \t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t    \t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\t\n\t    \t\t\tbreak;\n\t\n\t    \t\t} else {\n\t    \t\t\t// step into inner node / create it in case it doesn't exist\n\t\n\t    \t\t\tvar map = container.map,\n\t    \t\t\t\tnext = map[ id ];\n\t\n\t    \t\t\tif ( next === undefined ) {\n\t\n\t    \t\t\t\tnext = new StructuredUniform( id );\n\t    \t\t\t\taddUniform( container, next );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcontainer = next;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // Root Container\n\t\n\t    function WebGLUniforms( gl, program, renderer ) {\n\t\n\t    \tUniformContainer.call( this );\n\t\n\t    \tthis.renderer = renderer;\n\t\n\t    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\tvar info = gl.getActiveUniform( program, i ),\n\t    \t\t\tpath = info.name,\n\t    \t\t\taddr = gl.getUniformLocation( program, path );\n\t\n\t    \t\tparseUniform( info, addr, this );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    WebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\t\n\t    \tvar u = this.map[ name ];\n\t\n\t    \tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\t\n\t    };\n\t\n\t    WebGLUniforms.prototype.set = function( gl, object, name ) {\n\t\n\t    \tvar u = this.map[ name ];\n\t\n\t    \tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\t\n\t    };\n\t\n\t    WebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\t\n\t    \tvar v = object[ name ];\n\t\n\t    \tif ( v !== undefined ) this.setValue( gl, name, v );\n\t\n\t    };\n\t\n\t\n\t    // Static interface\n\t\n\t    WebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ],\n\t    \t\t\tv = values[ u.id ];\n\t\n\t    \t\tif ( v.needsUpdate !== false ) {\n\t    \t\t\t// note: always updating when .needsUpdate is undefined\n\t\n\t    \t\t\tu.setValue( gl, v.value, renderer );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    WebGLUniforms.seqWithValue = function( seq, values ) {\n\t\n\t    \tvar r = [];\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ];\n\t    \t\tif ( u.id in values ) r.push( u );\n\t\n\t    \t}\n\t\n\t    \treturn r;\n\t\n\t    };\n\t\n\t    WebGLUniforms.splitDynamic = function( seq, values ) {\n\t\n\t    \tvar r = null,\n\t    \t\tn = seq.length,\n\t    \t\tw = 0;\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ],\n\t    \t\t\tv = values[ u.id ];\n\t\n\t    \t\tif ( v && v.dynamic === true ) {\n\t\n\t    \t\t\tif ( r === null ) r = [];\n\t    \t\t\tr.push( u );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// in-place compact 'seq', removing the matches\n\t    \t\t\tif ( w < i ) seq[ w ] = u;\n\t    \t\t\t++ w;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tif ( w < n ) seq.length = w;\n\t\n\t    \treturn r;\n\t\n\t    };\n\t\n\t    WebGLUniforms.evalDynamic = function( seq, values, object, material, camera ) {\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar v = values[ seq[ i ].id ],\n\t    \t\t\tf = v.onUpdateCallback;\n\t\n\t    \t\tif ( f !== undefined ) f.call( v, object, material, camera );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * Uniform Utilities\n\t     */\n\t\n\t    exports.UniformsUtils = {\n\t\n\t    \tmerge: function ( uniforms ) {\n\t\n\t    \t\tvar merged = {};\n\t\n\t    \t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\t\n\t    \t\t\tvar tmp = this.clone( uniforms[ u ] );\n\t\n\t    \t\t\tfor ( var p in tmp ) {\n\t\n\t    \t\t\t\tmerged[ p ] = tmp[ p ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn merged;\n\t\n\t    \t},\n\t\n\t    \tclone: function ( uniforms_src ) {\n\t\n\t    \t\tvar uniforms_dst = {};\n\t\n\t    \t\tfor ( var u in uniforms_src ) {\n\t\n\t    \t\t\tuniforms_dst[ u ] = {};\n\t\n\t    \t\t\tfor ( var p in uniforms_src[ u ] ) {\n\t\n\t    \t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\t\n\t    \t\t\t\tif ( (parameter_src && parameter_src.isColor) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isVector2) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isVector3) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isVector4) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isMatrix3) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isMatrix4) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isTexture) ) {\n\t\n\t    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\t\n\t    \t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\t\n\t    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn uniforms_dst;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    var alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\t\n\t    var alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\t\n\t    var alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\t\n\t    var aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\t\n\t    var begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\t\n\t    var beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\t\n\t    var bsdfs = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\t\n\t    var bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\t\n\t    var clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n#endif\\n\";\n\t\n\t    var clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\t\n\t    var clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\t\n\t    var clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\t\n\t    var color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\t\n\t    var color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\t\n\t    var color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\t\n\t    var color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\t\n\t    var common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\t\n\t    var cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\t\n\t    var defaultnormal_vertex = \"#ifdef FLIP_SIDED\\n\\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\t\n\t    var displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\t\n\t    var displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\t\n\t    var emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\t\n\t    var emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\t\n\t    var encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\t\n\t    var encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\t\n\t    var envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\t#else\\n\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\t#endif\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\t\n\t    var fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\t\n\t    var lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\t\n\t    var lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\t\n\t    var lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\t\n\t    var lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\\t\\t\\tdirectLight.color = pointLight.color;\\n\\t\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\t#include <normal_flip>\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\t#include <normal_flip>\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\t\n\t    var lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\t\n\t    var lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\t\n\t    var lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\t\n\t    var lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\t\n\t    var lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t \\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\t\\t\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\t\n\t    var logdepthbuf_fragment = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\t\n\t    var logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\t\n\t    var logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\t\n\t    var map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\t\n\t    var map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\t\n\t    var map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\t\n\t    var metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\t\n\t    var metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\t\n\t    var morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\t\n\t    var morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\t\n\t    var morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var normal_flip = \"#ifdef DOUBLE_SIDED\\n\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\t\n\t    var normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\t\n\t    var normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\t\n\t    var packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\t\n\t    var premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\t\n\t    var project_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\t\n\t    var roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\t\n\t    var roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\t\n\t    var shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\t\n\t    var shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\t\n\t    var skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\t\n\t    var skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureWidth;\\n\\t\\tuniform int boneTextureHeight;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureWidth ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureWidth );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\t\n\t    var skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\t\n\t    var specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\t\n\t    var specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\t\n\t    var tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\t\n\t    var tonemapping_pars_fragment = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\t\n\t    var uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\t\n\t    var uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\t\n\t    var uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\t\n\t    var uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\t\n\t    var uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\t\n\t    var uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\t\n\t    var worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\t#ifdef USE_SKINNING\\n\\t\\tvec4 worldPosition = modelMatrix * skinned;\\n\\t#else\\n\\t\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\t\n\t    var cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\t\n\t    var depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\t\n\t    var depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t    var distanceRGBA_frag = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\t\n\t    var distanceRGBA_vert = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\n\t\n\t    var equirect_frag = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\t\n\t    var equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\t\n\t    var linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t    var meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight;\\n\\treflectedLight.directDiffuse = vec3( 0.0 );\\n\\treflectedLight.directSpecular = vec3( 0.0 );\\n\\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n}\\n\";\n\t\n\t    var meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var normal_frag = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\n\t\n\t    var normal_vert = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvNormal = normalize( normalMatrix * normal );\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t    var points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var shadow_frag = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\t\n\t    var shadow_vert = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var ShaderChunk = {\n\t    \talphamap_fragment: alphamap_fragment,\n\t    \talphamap_pars_fragment: alphamap_pars_fragment,\n\t    \talphatest_fragment: alphatest_fragment,\n\t    \taomap_fragment: aomap_fragment,\n\t    \taomap_pars_fragment: aomap_pars_fragment,\n\t    \tbegin_vertex: begin_vertex,\n\t    \tbeginnormal_vertex: beginnormal_vertex,\n\t    \tbsdfs: bsdfs,\n\t    \tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t    \tclipping_planes_fragment: clipping_planes_fragment,\n\t    \tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t    \tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t    \tclipping_planes_vertex: clipping_planes_vertex,\n\t    \tcolor_fragment: color_fragment,\n\t    \tcolor_pars_fragment: color_pars_fragment,\n\t    \tcolor_pars_vertex: color_pars_vertex,\n\t    \tcolor_vertex: color_vertex,\n\t    \tcommon: common,\n\t    \tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t    \tdefaultnormal_vertex: defaultnormal_vertex,\n\t    \tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t    \tdisplacementmap_vertex: displacementmap_vertex,\n\t    \temissivemap_fragment: emissivemap_fragment,\n\t    \temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t    \tencodings_fragment: encodings_fragment,\n\t    \tencodings_pars_fragment: encodings_pars_fragment,\n\t    \tenvmap_fragment: envmap_fragment,\n\t    \tenvmap_pars_fragment: envmap_pars_fragment,\n\t    \tenvmap_pars_vertex: envmap_pars_vertex,\n\t    \tenvmap_vertex: envmap_vertex,\n\t    \tfog_fragment: fog_fragment,\n\t    \tfog_pars_fragment: fog_pars_fragment,\n\t    \tlightmap_fragment: lightmap_fragment,\n\t    \tlightmap_pars_fragment: lightmap_pars_fragment,\n\t    \tlights_lambert_vertex: lights_lambert_vertex,\n\t    \tlights_pars: lights_pars,\n\t    \tlights_phong_fragment: lights_phong_fragment,\n\t    \tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t    \tlights_physical_fragment: lights_physical_fragment,\n\t    \tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t    \tlights_template: lights_template,\n\t    \tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t    \tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t    \tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t    \tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t    \tmap_fragment: map_fragment,\n\t    \tmap_pars_fragment: map_pars_fragment,\n\t    \tmap_particle_fragment: map_particle_fragment,\n\t    \tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t    \tmetalnessmap_fragment: metalnessmap_fragment,\n\t    \tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t    \tmorphnormal_vertex: morphnormal_vertex,\n\t    \tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t    \tmorphtarget_vertex: morphtarget_vertex,\n\t    \tnormal_flip: normal_flip,\n\t    \tnormal_fragment: normal_fragment,\n\t    \tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t    \tpacking: packing,\n\t    \tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t    \tproject_vertex: project_vertex,\n\t    \troughnessmap_fragment: roughnessmap_fragment,\n\t    \troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t    \tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t    \tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t    \tshadowmap_vertex: shadowmap_vertex,\n\t    \tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t    \tskinbase_vertex: skinbase_vertex,\n\t    \tskinning_pars_vertex: skinning_pars_vertex,\n\t    \tskinning_vertex: skinning_vertex,\n\t    \tskinnormal_vertex: skinnormal_vertex,\n\t    \tspecularmap_fragment: specularmap_fragment,\n\t    \tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t    \ttonemapping_fragment: tonemapping_fragment,\n\t    \ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t    \tuv_pars_fragment: uv_pars_fragment,\n\t    \tuv_pars_vertex: uv_pars_vertex,\n\t    \tuv_vertex: uv_vertex,\n\t    \tuv2_pars_fragment: uv2_pars_fragment,\n\t    \tuv2_pars_vertex: uv2_pars_vertex,\n\t    \tuv2_vertex: uv2_vertex,\n\t    \tworldpos_vertex: worldpos_vertex,\n\t\n\t    \tcube_frag: cube_frag,\n\t    \tcube_vert: cube_vert,\n\t    \tdepth_frag: depth_frag,\n\t    \tdepth_vert: depth_vert,\n\t    \tdistanceRGBA_frag: distanceRGBA_frag,\n\t    \tdistanceRGBA_vert: distanceRGBA_vert,\n\t    \tequirect_frag: equirect_frag,\n\t    \tequirect_vert: equirect_vert,\n\t    \tlinedashed_frag: linedashed_frag,\n\t    \tlinedashed_vert: linedashed_vert,\n\t    \tmeshbasic_frag: meshbasic_frag,\n\t    \tmeshbasic_vert: meshbasic_vert,\n\t    \tmeshlambert_frag: meshlambert_frag,\n\t    \tmeshlambert_vert: meshlambert_vert,\n\t    \tmeshphong_frag: meshphong_frag,\n\t    \tmeshphong_vert: meshphong_vert,\n\t    \tmeshphysical_frag: meshphysical_frag,\n\t    \tmeshphysical_vert: meshphysical_vert,\n\t    \tnormal_frag: normal_frag,\n\t    \tnormal_vert: normal_vert,\n\t    \tpoints_frag: points_frag,\n\t    \tpoints_vert: points_vert,\n\t    \tshadow_frag: shadow_frag,\n\t    \tshadow_vert: shadow_vert\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Color( r, g, b ) {\n\t\n\t    \tif ( g === undefined && b === undefined ) {\n\t\n\t    \t\t// r is THREE.Color, hex or string\n\t    \t\treturn this.set( r );\n\t\n\t    \t}\n\t\n\t    \treturn this.setRGB( r, g, b );\n\t\n\t    }\n\t\n\t    Color.prototype = {\n\t\n\t    \tconstructor: Color,\n\t\n\t    \tisColor: true,\n\t\n\t    \tr: 1, g: 1, b: 1,\n\t\n\t    \tset: function ( value ) {\n\t\n\t    \t\tif ( (value && value.isColor) ) {\n\t\n\t    \t\t\tthis.copy( value );\n\t\n\t    \t\t} else if ( typeof value === 'number' ) {\n\t\n\t    \t\t\tthis.setHex( value );\n\t\n\t    \t\t} else if ( typeof value === 'string' ) {\n\t\n\t    \t\t\tthis.setStyle( value );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.r = scalar;\n\t    \t\tthis.g = scalar;\n\t    \t\tthis.b = scalar;\n\t\n\t    \t},\n\t\n\t    \tsetHex: function ( hex ) {\n\t\n\t    \t\thex = Math.floor( hex );\n\t\n\t    \t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t    \t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t    \t\tthis.b = ( hex & 255 ) / 255;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetRGB: function ( r, g, b ) {\n\t\n\t    \t\tthis.r = r;\n\t    \t\tthis.g = g;\n\t    \t\tthis.b = b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetHSL: function () {\n\t\n\t    \t\tfunction hue2rgb( p, q, t ) {\n\t\n\t    \t\t\tif ( t < 0 ) t += 1;\n\t    \t\t\tif ( t > 1 ) t -= 1;\n\t    \t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t    \t\t\tif ( t < 1 / 2 ) return q;\n\t    \t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t    \t\t\treturn p;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function setHSL( h, s, l ) {\n\t\n\t    \t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t    \t\t\th = exports.Math.euclideanModulo( h, 1 );\n\t    \t\t\ts = exports.Math.clamp( s, 0, 1 );\n\t    \t\t\tl = exports.Math.clamp( l, 0, 1 );\n\t\n\t    \t\t\tif ( s === 0 ) {\n\t\n\t    \t\t\t\tthis.r = this.g = this.b = l;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t    \t\t\t\tvar q = ( 2 * l ) - p;\n\t\n\t    \t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t    \t\t\t\tthis.g = hue2rgb( q, p, h );\n\t    \t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetStyle: function ( style ) {\n\t\n\t    \t\tfunction handleAlpha( string ) {\n\t\n\t    \t\t\tif ( string === undefined ) return;\n\t\n\t    \t\t\tif ( parseFloat( string ) < 1 ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\tvar m;\n\t\n\t    \t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\t\n\t    \t\t\t// rgb / hsl\n\t\n\t    \t\t\tvar color;\n\t    \t\t\tvar name = m[ 1 ];\n\t    \t\t\tvar components = m[ 2 ];\n\t\n\t    \t\t\tswitch ( name ) {\n\t\n\t    \t\t\t\tcase 'rgb':\n\t    \t\t\t\tcase 'rgba':\n\t\n\t    \t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t    \t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t    \t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t    \t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t    \t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\t\n\t    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t    \t\t\t\t\t\treturn this;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t    \t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t    \t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t    \t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t    \t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\t\n\t    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t    \t\t\t\t\t\treturn this;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'hsl':\n\t    \t\t\t\tcase 'hsla':\n\t\n\t    \t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t    \t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t    \t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t    \t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t    \t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\t\n\t    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t    \t\t\t\t\t\treturn this.setHSL( h, s, l );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\t\n\t    \t\t\t// hex color\n\t\n\t    \t\t\tvar hex = m[ 1 ];\n\t    \t\t\tvar size = hex.length;\n\t\n\t    \t\t\tif ( size === 3 ) {\n\t\n\t    \t\t\t\t// #ff0\n\t    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t    \t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t    \t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\t\n\t    \t\t\t\treturn this;\n\t\n\t    \t\t\t} else if ( size === 6 ) {\n\t\n\t    \t\t\t\t// #ff0000\n\t    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t    \t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t    \t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\t\n\t    \t\t\t\treturn this;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( style && style.length > 0 ) {\n\t\n\t    \t\t\t// color keywords\n\t    \t\t\tvar hex = exports.ColorKeywords[ style ];\n\t\n\t    \t\t\tif ( hex !== undefined ) {\n\t\n\t    \t\t\t\t// red\n\t    \t\t\t\tthis.setHex( hex );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// unknown color\n\t    \t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.r, this.g, this.b );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( color ) {\n\t\n\t    \t\tthis.r = color.r;\n\t    \t\tthis.g = color.g;\n\t    \t\tthis.b = color.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyGammaToLinear: function ( color, gammaFactor ) {\n\t\n\t    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\t\n\t    \t\tthis.r = Math.pow( color.r, gammaFactor );\n\t    \t\tthis.g = Math.pow( color.g, gammaFactor );\n\t    \t\tthis.b = Math.pow( color.b, gammaFactor );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyLinearToGamma: function ( color, gammaFactor ) {\n\t\n\t    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\t\n\t    \t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\t\n\t    \t\tthis.r = Math.pow( color.r, safeInverse );\n\t    \t\tthis.g = Math.pow( color.g, safeInverse );\n\t    \t\tthis.b = Math.pow( color.b, safeInverse );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tconvertGammaToLinear: function () {\n\t\n\t    \t\tvar r = this.r, g = this.g, b = this.b;\n\t\n\t    \t\tthis.r = r * r;\n\t    \t\tthis.g = g * g;\n\t    \t\tthis.b = b * b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tconvertLinearToGamma: function () {\n\t\n\t    \t\tthis.r = Math.sqrt( this.r );\n\t    \t\tthis.g = Math.sqrt( this.g );\n\t    \t\tthis.b = Math.sqrt( this.b );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetHex: function () {\n\t\n\t    \t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\t\n\t    \t},\n\t\n\t    \tgetHexString: function () {\n\t\n\t    \t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\t\n\t    \t},\n\t\n\t    \tgetHSL: function ( optionalTarget ) {\n\t\n\t    \t\t// h,s,l ranges are in 0.0 - 1.0\n\t\n\t    \t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\t\n\t    \t\tvar r = this.r, g = this.g, b = this.b;\n\t\n\t    \t\tvar max = Math.max( r, g, b );\n\t    \t\tvar min = Math.min( r, g, b );\n\t\n\t    \t\tvar hue, saturation;\n\t    \t\tvar lightness = ( min + max ) / 2.0;\n\t\n\t    \t\tif ( min === max ) {\n\t\n\t    \t\t\thue = 0;\n\t    \t\t\tsaturation = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar delta = max - min;\n\t\n\t    \t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\t\n\t    \t\t\tswitch ( max ) {\n\t\n\t    \t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t    \t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t    \t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\thue /= 6;\n\t\n\t    \t\t}\n\t\n\t    \t\thsl.h = hue;\n\t    \t\thsl.s = saturation;\n\t    \t\thsl.l = lightness;\n\t\n\t    \t\treturn hsl;\n\t\n\t    \t},\n\t\n\t    \tgetStyle: function () {\n\t\n\t    \t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\t\n\t    \t},\n\t\n\t    \toffsetHSL: function ( h, s, l ) {\n\t\n\t    \t\tvar hsl = this.getHSL();\n\t\n\t    \t\thsl.h += h; hsl.s += s; hsl.l += l;\n\t\n\t    \t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( color ) {\n\t\n\t    \t\tthis.r += color.r;\n\t    \t\tthis.g += color.g;\n\t    \t\tthis.b += color.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddColors: function ( color1, color2 ) {\n\t\n\t    \t\tthis.r = color1.r + color2.r;\n\t    \t\tthis.g = color1.g + color2.g;\n\t    \t\tthis.b = color1.b + color2.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.r += s;\n\t    \t\tthis.g += s;\n\t    \t\tthis.b += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function( color ) {\n\t\n\t    \t\tthis.r = Math.max( 0, this.r - color.r );\n\t    \t\tthis.g = Math.max( 0, this.g - color.g );\n\t    \t\tthis.b = Math.max( 0, this.b - color.b );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( color ) {\n\t\n\t    \t\tthis.r *= color.r;\n\t    \t\tthis.g *= color.g;\n\t    \t\tthis.b *= color.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( s ) {\n\t\n\t    \t\tthis.r *= s;\n\t    \t\tthis.g *= s;\n\t    \t\tthis.b *= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( color, alpha ) {\n\t\n\t    \t\tthis.r += ( color.r - this.r ) * alpha;\n\t    \t\tthis.g += ( color.g - this.g ) * alpha;\n\t    \t\tthis.b += ( color.b - this.b ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( c ) {\n\t\n\t    \t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.r = array[ offset ];\n\t    \t\tthis.g = array[ offset + 1 ];\n\t    \t\tthis.b = array[ offset + 2 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.r;\n\t    \t\tarray[ offset + 1 ] = this.g;\n\t    \t\tarray[ offset + 2 ] = this.b;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\treturn this.getHex();\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    exports.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t    'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t    'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t    'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t    'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t    'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t    'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t    'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t    'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t    'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t    'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t    'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t    'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t    'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t    'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t    'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t    'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t    'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t    'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t    'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t    'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t    'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t    'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t    'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\t\n\t    /**\n\t     * Uniforms library for shared webgl shaders\n\t     */\n\t\n\t    var UniformsLib = {\n\t\n\t    \tcommon: {\n\t\n\t    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t    \t\topacity: { value: 1.0 },\n\t\n\t    \t\tmap: { value: null },\n\t    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },\n\t\n\t    \t\tspecularMap: { value: null },\n\t    \t\talphaMap: { value: null },\n\t\n\t    \t\tenvMap: { value: null },\n\t    \t\tflipEnvMap: { value: - 1 },\n\t    \t\treflectivity: { value: 1.0 },\n\t    \t\trefractionRatio: { value: 0.98 }\n\t\n\t    \t},\n\t\n\t    \taomap: {\n\t\n\t    \t\taoMap: { value: null },\n\t    \t\taoMapIntensity: { value: 1 }\n\t\n\t    \t},\n\t\n\t    \tlightmap: {\n\t\n\t    \t\tlightMap: { value: null },\n\t    \t\tlightMapIntensity: { value: 1 }\n\t\n\t    \t},\n\t\n\t    \temissivemap: {\n\t\n\t    \t\temissiveMap: { value: null }\n\t\n\t    \t},\n\t\n\t    \tbumpmap: {\n\t\n\t    \t\tbumpMap: { value: null },\n\t    \t\tbumpScale: { value: 1 }\n\t\n\t    \t},\n\t\n\t    \tnormalmap: {\n\t\n\t    \t\tnormalMap: { value: null },\n\t    \t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\t\n\t    \t},\n\t\n\t    \tdisplacementmap: {\n\t\n\t    \t\tdisplacementMap: { value: null },\n\t    \t\tdisplacementScale: { value: 1 },\n\t    \t\tdisplacementBias: { value: 0 }\n\t\n\t    \t},\n\t\n\t    \troughnessmap: {\n\t\n\t    \t\troughnessMap: { value: null }\n\t\n\t    \t},\n\t\n\t    \tmetalnessmap: {\n\t\n\t    \t\tmetalnessMap: { value: null }\n\t\n\t    \t},\n\t\n\t    \tfog: {\n\t\n\t    \t\tfogDensity: { value: 0.00025 },\n\t    \t\tfogNear: { value: 1 },\n\t    \t\tfogFar: { value: 2000 },\n\t    \t\tfogColor: { value: new Color( 0xffffff ) }\n\t\n\t    \t},\n\t\n\t    \tlights: {\n\t\n\t    \t\tambientLightColor: { value: [] },\n\t\n\t    \t\tdirectionalLights: { value: [], properties: {\n\t    \t\t\tdirection: {},\n\t    \t\t\tcolor: {},\n\t\n\t    \t\t\tshadow: {},\n\t    \t\t\tshadowBias: {},\n\t    \t\t\tshadowRadius: {},\n\t    \t\t\tshadowMapSize: {}\n\t    \t\t} },\n\t\n\t    \t\tdirectionalShadowMap: { value: [] },\n\t    \t\tdirectionalShadowMatrix: { value: [] },\n\t\n\t    \t\tspotLights: { value: [], properties: {\n\t    \t\t\tcolor: {},\n\t    \t\t\tposition: {},\n\t    \t\t\tdirection: {},\n\t    \t\t\tdistance: {},\n\t    \t\t\tconeCos: {},\n\t    \t\t\tpenumbraCos: {},\n\t    \t\t\tdecay: {},\n\t\n\t    \t\t\tshadow: {},\n\t    \t\t\tshadowBias: {},\n\t    \t\t\tshadowRadius: {},\n\t    \t\t\tshadowMapSize: {}\n\t    \t\t} },\n\t\n\t    \t\tspotShadowMap: { value: [] },\n\t    \t\tspotShadowMatrix: { value: [] },\n\t\n\t    \t\tpointLights: { value: [], properties: {\n\t    \t\t\tcolor: {},\n\t    \t\t\tposition: {},\n\t    \t\t\tdecay: {},\n\t    \t\t\tdistance: {},\n\t\n\t    \t\t\tshadow: {},\n\t    \t\t\tshadowBias: {},\n\t    \t\t\tshadowRadius: {},\n\t    \t\t\tshadowMapSize: {}\n\t    \t\t} },\n\t\n\t    \t\tpointShadowMap: { value: [] },\n\t    \t\tpointShadowMatrix: { value: [] },\n\t\n\t    \t\themisphereLights: { value: [], properties: {\n\t    \t\t\tdirection: {},\n\t    \t\t\tskyColor: {},\n\t    \t\t\tgroundColor: {}\n\t    \t\t} }\n\t\n\t    \t},\n\t\n\t    \tpoints: {\n\t\n\t    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t    \t\topacity: { value: 1.0 },\n\t    \t\tsize: { value: 1.0 },\n\t    \t\tscale: { value: 1.0 },\n\t    \t\tmap: { value: null },\n\t    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     */\n\t\n\t    var ShaderLib = {\n\t\n\t    \tbasic: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.fog\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\n\t    \t},\n\t\n\t    \tlambert: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.lightmap,\n\t    \t\t\tUniformsLib.emissivemap,\n\t    \t\t\tUniformsLib.fog,\n\t    \t\t\tUniformsLib.lights,\n\t\n\t    \t\t\t{\n\t    \t\t\t\temissive : { value: new Color( 0x000000 ) }\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\n\t    \t},\n\t\n\t    \tphong: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.lightmap,\n\t    \t\t\tUniformsLib.emissivemap,\n\t    \t\t\tUniformsLib.bumpmap,\n\t    \t\t\tUniformsLib.normalmap,\n\t    \t\t\tUniformsLib.displacementmap,\n\t    \t\t\tUniformsLib.fog,\n\t    \t\t\tUniformsLib.lights,\n\t\n\t    \t\t\t{\n\t    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n\t    \t\t\t\tspecular : { value: new Color( 0x111111 ) },\n\t    \t\t\t\tshininess: { value: 30 }\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshphong_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\n\t    \t},\n\t\n\t    \tstandard: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.lightmap,\n\t    \t\t\tUniformsLib.emissivemap,\n\t    \t\t\tUniformsLib.bumpmap,\n\t    \t\t\tUniformsLib.normalmap,\n\t    \t\t\tUniformsLib.displacementmap,\n\t    \t\t\tUniformsLib.roughnessmap,\n\t    \t\t\tUniformsLib.metalnessmap,\n\t    \t\t\tUniformsLib.fog,\n\t    \t\t\tUniformsLib.lights,\n\t\n\t    \t\t\t{\n\t    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n\t    \t\t\t\troughness: { value: 0.5 },\n\t    \t\t\t\tmetalness: { value: 0 },\n\t    \t\t\t\tenvMapIntensity : { value: 1 }, // temporary\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\n\t    \t},\n\t\n\t    \tpoints: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.points,\n\t    \t\t\tUniformsLib.fog\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.points_vert,\n\t    \t\tfragmentShader: ShaderChunk.points_frag\n\t\n\t    \t},\n\t\n\t    \tdashed: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.fog,\n\t\n\t    \t\t\t{\n\t    \t\t\t\tscale    : { value: 1 },\n\t    \t\t\t\tdashSize : { value: 1 },\n\t    \t\t\t\ttotalSize: { value: 2 }\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.linedashed_vert,\n\t    \t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\n\t    \t},\n\t\n\t    \tdepth: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.displacementmap\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.depth_vert,\n\t    \t\tfragmentShader: ShaderChunk.depth_frag\n\t\n\t    \t},\n\t\n\t    \tnormal: {\n\t\n\t    \t\tuniforms: {\n\t\n\t    \t\t\topacity : { value: 1.0 }\n\t\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.normal_vert,\n\t    \t\tfragmentShader: ShaderChunk.normal_frag\n\t\n\t    \t},\n\t\n\t    \t/* -------------------------------------------------------------------------\n\t    \t//\tCube map shader\n\t    \t ------------------------------------------------------------------------- */\n\t\n\t    \tcube: {\n\t\n\t    \t\tuniforms: {\n\t    \t\t\ttCube: { value: null },\n\t    \t\t\ttFlip: { value: - 1 },\n\t    \t\t\topacity: { value: 1.0 }\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.cube_vert,\n\t    \t\tfragmentShader: ShaderChunk.cube_frag\n\t\n\t    \t},\n\t\n\t    \t/* -------------------------------------------------------------------------\n\t    \t//\tCube map shader\n\t    \t ------------------------------------------------------------------------- */\n\t\n\t    \tequirect: {\n\t\n\t    \t\tuniforms: {\n\t    \t\t\ttEquirect: { value: null },\n\t    \t\t\ttFlip: { value: - 1 }\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.equirect_vert,\n\t    \t\tfragmentShader: ShaderChunk.equirect_frag\n\t\n\t    \t},\n\t\n\t    \tdistanceRGBA: {\n\t\n\t    \t\tuniforms: {\n\t\n\t    \t\t\tlightPos: { value: new Vector3() }\n\t\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t    \t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    ShaderLib.physical = {\n\t\n\t    \tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\tShaderLib.standard.uniforms,\n\t\n\t    \t\t{\n\t    \t\t\tclearCoat: { value: 0 },\n\t    \t\t\tclearCoatRoughness: { value: 0 }\n\t    \t\t}\n\t\n\t    \t] ),\n\t\n\t    \tvertexShader: ShaderChunk.meshphysical_vert,\n\t    \tfragmentShader: ShaderChunk.meshphysical_frag\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Box2( min, max ) {\n\t\n\t    \tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t    \tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\t\n\t    }\n\t\n\t    Box2.prototype = {\n\t\n\t    \tconstructor: Box2,\n\t\n\t    \tset: function ( min, max ) {\n\t\n\t    \t\tthis.min.copy( min );\n\t    \t\tthis.max.copy( max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromPoints: function ( points ) {\n\t\n\t    \t\tthis.makeEmpty();\n\t\n\t    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.expandByPoint( points[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromCenterAndSize: function () {\n\t\n\t    \t\tvar v1 = new Vector2();\n\t\n\t    \t\treturn function setFromCenterAndSize( center, size ) {\n\t\n\t    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t    \t\t\tthis.min.copy( center ).sub( halfSize );\n\t    \t\t\tthis.max.copy( center ).add( halfSize );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( box ) {\n\t\n\t    \t\tthis.min.copy( box.min );\n\t    \t\tthis.max.copy( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeEmpty: function () {\n\t\n\t    \t\tthis.min.x = this.min.y = + Infinity;\n\t    \t\tthis.max.x = this.max.y = - Infinity;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tisEmpty: function () {\n\t\n\t    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\n\t    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\t\n\t    \t},\n\t\n\t    \tgetCenter: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\t\n\t    \t},\n\t\n\t    \tgetSize: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\t\n\t    \t},\n\t\n\t    \texpandByPoint: function ( point ) {\n\t\n\t    \t\tthis.min.min( point );\n\t    \t\tthis.max.max( point );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByVector: function ( vector ) {\n\t\n\t    \t\tthis.min.sub( vector );\n\t    \t\tthis.max.add( vector );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByScalar: function ( scalar ) {\n\t\n\t    \t\tthis.min.addScalar( - scalar );\n\t    \t\tthis.max.addScalar( scalar );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t    \t\t     point.y < this.min.y || point.y > this.max.y ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tcontainsBox: function ( box ) {\n\t\n\t    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t    \t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tgetParameter: function ( point, optionalTarget ) {\n\t\n\t    \t\t// This can potentially have a divide by zero if the box\n\t    \t\t// has a size dimension of 0.\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t\n\t    \t\treturn result.set(\n\t    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t    \t\t);\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\t// using 6 splitting planes to rule out intersections.\n\t\n\t    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t    \t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tclampPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function () {\n\t\n\t    \t\tvar v1 = new Vector2();\n\t\n\t    \t\treturn function distanceToPoint( point ) {\n\t\n\t    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t    \t\t\treturn clampedPoint.sub( point ).length();\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersect: function ( box ) {\n\t\n\t    \t\tthis.min.max( box.min );\n\t    \t\tthis.max.min( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tunion: function ( box ) {\n\t\n\t    \t\tthis.min.min( box.min );\n\t    \t\tthis.max.max( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.min.add( offset );\n\t    \t\tthis.max.add( offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( box ) {\n\t\n\t    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function LensFlarePlugin( renderer, flares ) {\n\t\n\t    \tvar gl = renderer.context;\n\t    \tvar state = renderer.state;\n\t\n\t    \tvar vertexBuffer, elementBuffer;\n\t    \tvar shader, program, attributes, uniforms;\n\t\n\t    \tvar tempTexture, occlusionTexture;\n\t\n\t    \tfunction init() {\n\t\n\t    \t\tvar vertices = new Float32Array( [\n\t    \t\t\t- 1, - 1,  0, 0,\n\t    \t\t\t 1, - 1,  1, 0,\n\t    \t\t\t 1,  1,  1, 1,\n\t    \t\t\t- 1,  1,  0, 1\n\t    \t\t] );\n\t\n\t    \t\tvar faces = new Uint16Array( [\n\t    \t\t\t0, 1, 2,\n\t    \t\t\t0, 2, 3\n\t    \t\t] );\n\t\n\t    \t\t// buffers\n\t\n\t    \t\tvertexBuffer     = gl.createBuffer();\n\t    \t\telementBuffer    = gl.createBuffer();\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\t\n\t    \t\t// textures\n\t\n\t    \t\ttempTexture      = gl.createTexture();\n\t    \t\tocclusionTexture = gl.createTexture();\n\t\n\t    \t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\n\t    \t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\n\t    \t\tshader = {\n\t\n\t    \t\t\tvertexShader: [\n\t\n\t    \t\t\t\t\"uniform lowp int renderType;\",\n\t\n\t    \t\t\t\t\"uniform vec3 screenPosition;\",\n\t    \t\t\t\t\"uniform vec2 scale;\",\n\t    \t\t\t\t\"uniform float rotation;\",\n\t\n\t    \t\t\t\t\"uniform sampler2D occlusionMap;\",\n\t\n\t    \t\t\t\t\"attribute vec2 position;\",\n\t    \t\t\t\t\"attribute vec2 uv;\",\n\t\n\t    \t\t\t\t\"varying vec2 vUV;\",\n\t    \t\t\t\t\"varying float vVisibility;\",\n\t\n\t    \t\t\t\t\"void main() {\",\n\t\n\t    \t\t\t\t\t\"vUV = uv;\",\n\t\n\t    \t\t\t\t\t\"vec2 pos = position;\",\n\t\n\t    \t\t\t\t\t\"if ( renderType == 2 ) {\",\n\t\n\t    \t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\t\n\t    \t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t    \t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\t\n\t    \t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t    \t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\t\n\t    \t\t\t\t\t\"}\",\n\t\n\t    \t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\t\n\t    \t\t\t\t\"}\"\n\t\n\t    \t\t\t].join( \"\\n\" ),\n\t\n\t    \t\t\tfragmentShader: [\n\t\n\t    \t\t\t\t\"uniform lowp int renderType;\",\n\t\n\t    \t\t\t\t\"uniform sampler2D map;\",\n\t    \t\t\t\t\"uniform float opacity;\",\n\t    \t\t\t\t\"uniform vec3 color;\",\n\t\n\t    \t\t\t\t\"varying vec2 vUV;\",\n\t    \t\t\t\t\"varying float vVisibility;\",\n\t\n\t    \t\t\t\t\"void main() {\",\n\t\n\t    \t\t\t\t\t// pink square\n\t\n\t    \t\t\t\t\t\"if ( renderType == 0 ) {\",\n\t\n\t    \t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\t\n\t    \t\t\t\t\t// restore\n\t\n\t    \t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\t\n\t    \t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\t\n\t    \t\t\t\t\t// flare\n\t\n\t    \t\t\t\t\t\"} else {\",\n\t\n\t    \t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t    \t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t    \t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t    \t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\t\n\t    \t\t\t\t\t\"}\",\n\t\n\t    \t\t\t\t\"}\"\n\t\n\t    \t\t\t].join( \"\\n\" )\n\t\n\t    \t\t};\n\t\n\t    \t\tprogram = createProgram( shader );\n\t\n\t    \t\tattributes = {\n\t    \t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t    \t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t    \t\t};\n\t\n\t    \t\tuniforms = {\n\t    \t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t    \t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t    \t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t    \t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t    \t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t    \t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t    \t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t    \t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \t/*\n\t    \t * Render lens flares\n\t    \t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t    \t *         reads these back and calculates occlusion.\n\t    \t */\n\t\n\t    \tthis.render = function ( scene, camera, viewport ) {\n\t\n\t    \t\tif ( flares.length === 0 ) return;\n\t\n\t    \t\tvar tempPosition = new Vector3();\n\t\n\t    \t\tvar invAspect = viewport.w / viewport.z,\n\t    \t\t\thalfViewportWidth = viewport.z * 0.5,\n\t    \t\t\thalfViewportHeight = viewport.w * 0.5;\n\t\n\t    \t\tvar size = 16 / viewport.w,\n\t    \t\t\tscale = new Vector2( size * invAspect, size );\n\t\n\t    \t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n\t    \t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\t\n\t    \t\tvar validArea = new Box2();\n\t\n\t    \t\tvalidArea.min.set( 0, 0 );\n\t    \t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\tinit();\n\t\n\t    \t\t}\n\t\n\t    \t\tgl.useProgram( program );\n\t\n\t    \t\tstate.initAttributes();\n\t    \t\tstate.enableAttribute( attributes.vertex );\n\t    \t\tstate.enableAttribute( attributes.uv );\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t\t// loop through all lens flares to update their occlusion and positions\n\t    \t\t// setup gl and common used attribs/uniforms\n\t\n\t    \t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t    \t\tgl.uniform1i( uniforms.map, 1 );\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\n\t    \t\tstate.disable( gl.CULL_FACE );\n\t    \t\tstate.setDepthWrite( false );\n\t\n\t    \t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\t\n\t    \t\t\tsize = 16 / viewport.w;\n\t    \t\t\tscale.set( size * invAspect, size );\n\t\n\t    \t\t\t// calc object screen position\n\t\n\t    \t\t\tvar flare = flares[ i ];\n\t\n\t    \t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\t\n\t    \t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t    \t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\t\n\t    \t\t\t// setup arrays for gl programs\n\t\n\t    \t\t\tscreenPosition.copy( tempPosition );\n\t\n\t    \t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\t\n\t    \t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t    \t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\t\n\t    \t\t\t// screen cull\n\t\n\t    \t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\t\n\t    \t\t\t\t// save current RGB to temp texture\n\t\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\t\n\t\n\t    \t\t\t\t// render pink quad\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t    \t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t    \t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\n\t    \t\t\t\tstate.disable( gl.BLEND );\n\t    \t\t\t\tstate.enable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\n\t    \t\t\t\t// copy result to occlusionMap\n\t\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\t\n\t\n\t    \t\t\t\t// restore graphics\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t    \t\t\t\tstate.disable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\n\t    \t\t\t\t// update object positions\n\t\n\t    \t\t\t\tflare.positionScreen.copy( screenPosition );\n\t\n\t    \t\t\t\tif ( flare.customUpdateCallback ) {\n\t\n\t    \t\t\t\t\tflare.customUpdateCallback( flare );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tflare.updateLensFlares();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// render flares\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t    \t\t\t\tstate.enable( gl.BLEND );\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\t\n\t    \t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\t\n\t    \t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t    \t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t    \t\t\t\t\t\tscreenPosition.z = sprite.z;\n\t\n\t    \t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\t\n\t    \t\t\t\t\t\tscale.x = size * invAspect;\n\t    \t\t\t\t\t\tscale.y = size;\n\t\n\t    \t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t    \t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t    \t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\t\n\t    \t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t    \t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\t\n\t    \t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t    \t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\t\n\t    \t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// restore gl\n\t\n\t    \t\tstate.enable( gl.CULL_FACE );\n\t    \t\tstate.enable( gl.DEPTH_TEST );\n\t    \t\tstate.setDepthWrite( true );\n\t\n\t    \t\trenderer.resetGLState();\n\t\n\t    \t};\n\t\n\t    \tfunction createProgram( shader ) {\n\t\n\t    \t\tvar program = gl.createProgram();\n\t\n\t    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\n\t    \t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\t\n\t    \t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t    \t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\t\n\t    \t\tgl.compileShader( fragmentShader );\n\t    \t\tgl.compileShader( vertexShader );\n\t\n\t    \t\tgl.attachShader( program, fragmentShader );\n\t    \t\tgl.attachShader( program, vertexShader );\n\t\n\t    \t\tgl.linkProgram( program );\n\t\n\t    \t\treturn program;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function SpritePlugin( renderer, sprites ) {\n\t\n\t    \tvar gl = renderer.context;\n\t    \tvar state = renderer.state;\n\t\n\t    \tvar vertexBuffer, elementBuffer;\n\t    \tvar program, attributes, uniforms;\n\t\n\t    \tvar texture;\n\t\n\t    \t// decompose matrixWorld\n\t\n\t    \tvar spritePosition = new Vector3();\n\t    \tvar spriteRotation = new Quaternion();\n\t    \tvar spriteScale = new Vector3();\n\t\n\t    \tfunction init() {\n\t\n\t    \t\tvar vertices = new Float32Array( [\n\t    \t\t\t- 0.5, - 0.5,  0, 0,\n\t    \t\t\t  0.5, - 0.5,  1, 0,\n\t    \t\t\t  0.5,   0.5,  1, 1,\n\t    \t\t\t- 0.5,   0.5,  0, 1\n\t    \t\t] );\n\t\n\t    \t\tvar faces = new Uint16Array( [\n\t    \t\t\t0, 1, 2,\n\t    \t\t\t0, 2, 3\n\t    \t\t] );\n\t\n\t    \t\tvertexBuffer  = gl.createBuffer();\n\t    \t\telementBuffer = gl.createBuffer();\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\t\n\t    \t\tprogram = createProgram();\n\t\n\t    \t\tattributes = {\n\t    \t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t    \t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t    \t\t};\n\t\n\t    \t\tuniforms = {\n\t    \t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t    \t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\t\n\t    \t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t    \t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\t\n\t    \t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t    \t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t    \t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\t\n\t    \t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t    \t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\t\n\t    \t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t    \t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t    \t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t    \t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t    \t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\t\n\t    \t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t    \t\t};\n\t\n\t    \t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\tcanvas.width = 8;\n\t    \t\tcanvas.height = 8;\n\t\n\t    \t\tvar context = canvas.getContext( '2d' );\n\t    \t\tcontext.fillStyle = 'white';\n\t    \t\tcontext.fillRect( 0, 0, 8, 8 );\n\t\n\t    \t\ttexture = new Texture( canvas );\n\t    \t\ttexture.needsUpdate = true;\n\t\n\t    \t}\n\t\n\t    \tthis.render = function ( scene, camera ) {\n\t\n\t    \t\tif ( sprites.length === 0 ) return;\n\t\n\t    \t\t// setup gl\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\tinit();\n\t\n\t    \t\t}\n\t\n\t    \t\tgl.useProgram( program );\n\t\n\t    \t\tstate.initAttributes();\n\t    \t\tstate.enableAttribute( attributes.position );\n\t    \t\tstate.enableAttribute( attributes.uv );\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t\tstate.disable( gl.CULL_FACE );\n\t    \t\tstate.enable( gl.BLEND );\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\n\t    \t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\t\n\t    \t\tstate.activeTexture( gl.TEXTURE0 );\n\t    \t\tgl.uniform1i( uniforms.map, 0 );\n\t\n\t    \t\tvar oldFogType = 0;\n\t    \t\tvar sceneFogType = 0;\n\t    \t\tvar fog = scene.fog;\n\t\n\t    \t\tif ( fog ) {\n\t\n\t    \t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\t\n\t    \t\t\tif ( (fog && fog.isFog) ) {\n\t\n\t    \t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t    \t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t    \t\t\t\toldFogType = 1;\n\t    \t\t\t\tsceneFogType = 1;\n\t\n\t    \t\t\t} else if ( (fog && fog.isFogExp2) ) {\n\t\n\t    \t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t    \t\t\t\toldFogType = 2;\n\t    \t\t\t\tsceneFogType = 2;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t    \t\t\toldFogType = 0;\n\t    \t\t\tsceneFogType = 0;\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\t// update positions and sort\n\t\n\t    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar sprite = sprites[ i ];\n\t\n\t    \t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t    \t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\t\n\t    \t\t}\n\t\n\t    \t\tsprites.sort( painterSortStable );\n\t\n\t    \t\t// render all sprites\n\t\n\t    \t\tvar scale = [];\n\t\n\t    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar sprite = sprites[ i ];\n\t    \t\t\tvar material = sprite.material;\n\t\n\t    \t\t\tif ( material.visible === false ) continue;\n\t\n\t    \t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t    \t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\t\n\t    \t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\t\n\t    \t\t\tscale[ 0 ] = spriteScale.x;\n\t    \t\t\tscale[ 1 ] = spriteScale.y;\n\t\n\t    \t\t\tvar fogType = 0;\n\t\n\t    \t\t\tif ( scene.fog && material.fog ) {\n\t\n\t    \t\t\t\tfogType = sceneFogType;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( oldFogType !== fogType ) {\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t    \t\t\t\toldFogType = fogType;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( material.map !== null ) {\n\t\n\t    \t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t    \t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t    \t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t    \t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\t\n\t    \t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t    \t\t\tgl.uniform2fv( uniforms.scale, scale );\n\t\n\t    \t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t    \t\t\tstate.setDepthTest( material.depthTest );\n\t    \t\t\tstate.setDepthWrite( material.depthWrite );\n\t\n\t    \t\t\tif ( material.map ) {\n\t\n\t    \t\t\t\trenderer.setTexture2D( material.map, 0 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\trenderer.setTexture2D( texture, 0 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\t// restore gl\n\t\n\t    \t\tstate.enable( gl.CULL_FACE );\n\t\n\t    \t\trenderer.resetGLState();\n\t\n\t    \t};\n\t\n\t    \tfunction createProgram() {\n\t\n\t    \t\tvar program = gl.createProgram();\n\t\n\t    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\n\t    \t\tgl.shaderSource( vertexShader, [\n\t\n\t    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\t\n\t    \t\t\t'uniform mat4 modelViewMatrix;',\n\t    \t\t\t'uniform mat4 projectionMatrix;',\n\t    \t\t\t'uniform float rotation;',\n\t    \t\t\t'uniform vec2 scale;',\n\t    \t\t\t'uniform vec2 uvOffset;',\n\t    \t\t\t'uniform vec2 uvScale;',\n\t\n\t    \t\t\t'attribute vec2 position;',\n\t    \t\t\t'attribute vec2 uv;',\n\t\n\t    \t\t\t'varying vec2 vUV;',\n\t\n\t    \t\t\t'void main() {',\n\t\n\t    \t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\t\n\t    \t\t\t\t'vec2 alignedPosition = position * scale;',\n\t\n\t    \t\t\t\t'vec2 rotatedPosition;',\n\t    \t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t    \t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\t\n\t    \t\t\t\t'vec4 finalPosition;',\n\t\n\t    \t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t    \t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t    \t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\t\n\t    \t\t\t\t'gl_Position = finalPosition;',\n\t\n\t    \t\t\t'}'\n\t\n\t    \t\t].join( '\\n' ) );\n\t\n\t    \t\tgl.shaderSource( fragmentShader, [\n\t\n\t    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\t\n\t    \t\t\t'uniform vec3 color;',\n\t    \t\t\t'uniform sampler2D map;',\n\t    \t\t\t'uniform float opacity;',\n\t\n\t    \t\t\t'uniform int fogType;',\n\t    \t\t\t'uniform vec3 fogColor;',\n\t    \t\t\t'uniform float fogDensity;',\n\t    \t\t\t'uniform float fogNear;',\n\t    \t\t\t'uniform float fogFar;',\n\t    \t\t\t'uniform float alphaTest;',\n\t\n\t    \t\t\t'varying vec2 vUV;',\n\t\n\t    \t\t\t'void main() {',\n\t\n\t    \t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\t\n\t    \t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\t\n\t    \t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\t\n\t    \t\t\t\t'if ( fogType > 0 ) {',\n\t\n\t    \t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t    \t\t\t\t\t'float fogFactor = 0.0;',\n\t\n\t    \t\t\t\t\t'if ( fogType == 1 ) {',\n\t\n\t    \t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\t\n\t    \t\t\t\t\t'} else {',\n\t\n\t    \t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t    \t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t    \t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\t\n\t    \t\t\t\t\t'}',\n\t\n\t    \t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\t\n\t    \t\t\t\t'}',\n\t\n\t    \t\t\t'}'\n\t\n\t    \t\t].join( '\\n' ) );\n\t\n\t    \t\tgl.compileShader( vertexShader );\n\t    \t\tgl.compileShader( fragmentShader );\n\t\n\t    \t\tgl.attachShader( program, vertexShader );\n\t    \t\tgl.attachShader( program, fragmentShader );\n\t\n\t    \t\tgl.linkProgram( program );\n\t\n\t    \t\treturn program;\n\t\n\t    \t}\n\t\n\t    \tfunction painterSortStable( a, b ) {\n\t\n\t    \t\tif ( a.renderOrder !== b.renderOrder ) {\n\t\n\t    \t\t\treturn a.renderOrder - b.renderOrder;\n\t\n\t    \t\t} else if ( a.z !== b.z ) {\n\t\n\t    \t\t\treturn b.z - a.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn b.id - a.id;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Material() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: MaterialIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'Material';\n\t\n\t    \tthis.fog = true;\n\t    \tthis.lights = true;\n\t\n\t    \tthis.blending = NormalBlending;\n\t    \tthis.side = FrontSide;\n\t    \tthis.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\t    \tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\t\n\t    \tthis.opacity = 1;\n\t    \tthis.transparent = false;\n\t\n\t    \tthis.blendSrc = SrcAlphaFactor;\n\t    \tthis.blendDst = OneMinusSrcAlphaFactor;\n\t    \tthis.blendEquation = AddEquation;\n\t    \tthis.blendSrcAlpha = null;\n\t    \tthis.blendDstAlpha = null;\n\t    \tthis.blendEquationAlpha = null;\n\t\n\t    \tthis.depthFunc = LessEqualDepth;\n\t    \tthis.depthTest = true;\n\t    \tthis.depthWrite = true;\n\t\n\t    \tthis.clippingPlanes = null;\n\t    \tthis.clipShadows = false;\n\t\n\t    \tthis.colorWrite = true;\n\t\n\t    \tthis.precision = null; // override the renderer's default precision for this material\n\t\n\t    \tthis.polygonOffset = false;\n\t    \tthis.polygonOffsetFactor = 0;\n\t    \tthis.polygonOffsetUnits = 0;\n\t\n\t    \tthis.alphaTest = 0;\n\t    \tthis.premultipliedAlpha = false;\n\t\n\t    \tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\t\n\t    \tthis.visible = true;\n\t\n\t    \tthis._needsUpdate = true;\n\t\n\t    }\n\t\n\t    Material.prototype = {\n\t\n\t    \tconstructor: Material,\n\t\n\t    \tisMaterial: true,\n\t\n\t    \tget needsUpdate() {\n\t\n\t    \t\treturn this._needsUpdate;\n\t\n\t    \t},\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.update();\n\t    \t\tthis._needsUpdate = value;\n\t\n\t    \t},\n\t\n\t    \tsetValues: function ( values ) {\n\t\n\t    \t\tif ( values === undefined ) return;\n\t\n\t    \t\tfor ( var key in values ) {\n\t\n\t    \t\t\tvar newValue = values[ key ];\n\t\n\t    \t\t\tif ( newValue === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar currentValue = this[ key ];\n\t\n\t    \t\t\tif ( currentValue === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( (currentValue && currentValue.isColor) ) {\n\t\n\t    \t\t\t\tcurrentValue.set( newValue );\n\t\n\t    \t\t\t} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {\n\t\n\t    \t\t\t\tcurrentValue.copy( newValue );\n\t\n\t    \t\t\t} else if ( key === 'overdraw' ) {\n\t\n\t    \t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t    \t\t\t\tthis[ key ] = Number( newValue );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis[ key ] = newValue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar isRoot = meta === undefined;\n\t\n\t    \t\tif ( isRoot ) {\n\t\n\t    \t\t\tmeta = {\n\t    \t\t\t\ttextures: {},\n\t    \t\t\t\timages: {}\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tvar data = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Material',\n\t    \t\t\t\tgenerator: 'Material.toJSON'\n\t    \t\t\t}\n\t    \t\t};\n\t\n\t    \t\t// standard Material serialization\n\t    \t\tdata.uuid = this.uuid;\n\t    \t\tdata.type = this.type;\n\t\n\t    \t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t    \t\tif ( (this.color && this.color.isColor) ) data.color = this.color.getHex();\n\t\n\t    \t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t    \t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\t\n\t    \t\tif ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();\n\t    \t\tif ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();\n\t    \t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\n\t    \t\tif ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;\n\t    \t\tif ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.bumpMap && this.bumpMap.isTexture) ) {\n\t\n\t    \t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.bumpScale = this.bumpScale;\n\t\n\t    \t\t}\n\t    \t\tif ( (this.normalMap && this.normalMap.isTexture) ) {\n\t\n\t    \t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.normalScale = this.normalScale.toArray();\n\t\n\t    \t\t}\n\t    \t\tif ( (this.displacementMap && this.displacementMap.isTexture) ) {\n\t\n\t    \t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.displacementScale = this.displacementScale;\n\t    \t\t\tdata.displacementBias = this.displacementBias;\n\t\n\t    \t\t}\n\t    \t\tif ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\t\n\t    \t\tif ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\n\t    \t\tif ( (this.envMap && this.envMap.isTexture) ) {\n\t\n\t    \t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.size !== undefined ) data.size = this.size;\n\t    \t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\t\n\t    \t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t    \t\tif ( this.shading !== SmoothShading ) data.shading = this.shading;\n\t    \t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t    \t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\t\n\t    \t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t    \t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\t\n\t    \t\tdata.depthFunc = this.depthFunc;\n\t    \t\tdata.depthTest = this.depthTest;\n\t    \t\tdata.depthWrite = this.depthWrite;\n\t\n\t    \t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t    \t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t    \t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t    \t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t    \t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t    \t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\t\n\t    \t\tdata.skinning = this.skinning;\n\t    \t\tdata.morphTargets = this.morphTargets;\n\t\n\t    \t\t// TODO: Copied from Object3D.toJSON\n\t\n\t    \t\tfunction extractFromCache( cache ) {\n\t\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\tfor ( var key in cache ) {\n\t\n\t    \t\t\t\tvar data = cache[ key ];\n\t    \t\t\t\tdelete data.metadata;\n\t    \t\t\t\tvalues.push( data );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn values;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( isRoot ) {\n\t\n\t    \t\t\tvar textures = extractFromCache( meta.textures );\n\t    \t\t\tvar images = extractFromCache( meta.images );\n\t\n\t    \t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t    \t\t\tif ( images.length > 0 ) data.images = images;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn data;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.name = source.name;\n\t\n\t    \t\tthis.fog = source.fog;\n\t    \t\tthis.lights = source.lights;\n\t\n\t    \t\tthis.blending = source.blending;\n\t    \t\tthis.side = source.side;\n\t    \t\tthis.shading = source.shading;\n\t    \t\tthis.vertexColors = source.vertexColors;\n\t\n\t    \t\tthis.opacity = source.opacity;\n\t    \t\tthis.transparent = source.transparent;\n\t\n\t    \t\tthis.blendSrc = source.blendSrc;\n\t    \t\tthis.blendDst = source.blendDst;\n\t    \t\tthis.blendEquation = source.blendEquation;\n\t    \t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t    \t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t    \t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\n\t    \t\tthis.depthFunc = source.depthFunc;\n\t    \t\tthis.depthTest = source.depthTest;\n\t    \t\tthis.depthWrite = source.depthWrite;\n\t\n\t    \t\tthis.colorWrite = source.colorWrite;\n\t\n\t    \t\tthis.precision = source.precision;\n\t\n\t    \t\tthis.polygonOffset = source.polygonOffset;\n\t    \t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t    \t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\n\t    \t\tthis.alphaTest = source.alphaTest;\n\t\n\t    \t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\n\t    \t\tthis.overdraw = source.overdraw;\n\t\n\t    \t\tthis.visible = source.visible;\n\t    \t\tthis.clipShadows = source.clipShadows;\n\t\n\t    \t\tvar srcPlanes = source.clippingPlanes,\n\t    \t\t\tdstPlanes = null;\n\t\n\t    \t\tif ( srcPlanes !== null ) {\n\t\n\t    \t\t\tvar n = srcPlanes.length;\n\t    \t\t\tdstPlanes = new Array( n );\n\t\n\t    \t\t\tfor ( var i = 0; i !== n; ++ i )\n\t    \t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.clippingPlanes = dstPlanes;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tupdate: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'update' } );\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( Material.prototype, EventDispatcher.prototype );\n\t\n\t    var count$1 = 0;\n\t    function MaterialIdCount() { return count$1++; };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  defines: { \"label\" : \"value\" },\n\t     *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t     *\n\t     *  fragmentShader: <string>,\n\t     *  vertexShader: <string>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  lights: <bool>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function ShaderMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'ShaderMaterial';\n\t\n\t    \tthis.defines = {};\n\t    \tthis.uniforms = {};\n\t\n\t    \tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\t    \tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\t\n\t    \tthis.linewidth = 1;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t\n\t    \tthis.fog = false; // set to use scene fog\n\t    \tthis.lights = false; // set to use scene lights\n\t    \tthis.clipping = false; // set to use user-defined clipping planes\n\t\n\t    \tthis.skinning = false; // set to use skinning attribute streams\n\t    \tthis.morphTargets = false; // set to use morph targets\n\t    \tthis.morphNormals = false; // set to use morph normals\n\t\n\t    \tthis.extensions = {\n\t    \t\tderivatives: false, // set to use derivatives\n\t    \t\tfragDepth: false, // set to use fragment depth values\n\t    \t\tdrawBuffers: false, // set to use draw buffers\n\t    \t\tshaderTextureLOD: false // set to use shader texture LOD\n\t    \t};\n\t\n\t    \t// When rendered geometry doesn't include these attributes but the material does,\n\t    \t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t    \tthis.defaultAttributeValues = {\n\t    \t\t'color': [ 1, 1, 1 ],\n\t    \t\t'uv': [ 0, 0 ],\n\t    \t\t'uv2': [ 0, 0 ]\n\t    \t};\n\t\n\t    \tthis.index0AttributeName = undefined;\n\t\n\t    \tif ( parameters !== undefined ) {\n\t\n\t    \t\tif ( parameters.attributes !== undefined ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.setValues( parameters );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    ShaderMaterial.prototype = Object.create( Material.prototype );\n\t    ShaderMaterial.prototype.constructor = ShaderMaterial;\n\t\n\t    ShaderMaterial.prototype.isShaderMaterial = true;\n\t\n\t    ShaderMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.fragmentShader = source.fragmentShader;\n\t    \tthis.vertexShader = source.vertexShader;\n\t\n\t    \tthis.uniforms = exports.UniformsUtils.clone( source.uniforms );\n\t\n\t    \tthis.defines = source.defines;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t    \tthis.lights = source.lights;\n\t    \tthis.clipping = source.clipping;\n\t\n\t    \tthis.skinning = source.skinning;\n\t\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \tthis.extensions = source.extensions;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    ShaderMaterial.prototype.toJSON = function ( meta ) {\n\t\n\t    \tvar data = Material.prototype.toJSON.call( this, meta );\n\t\n\t    \tdata.uniforms = this.uniforms;\n\t    \tdata.vertexShader = this.vertexShader;\n\t    \tdata.fragmentShader = this.fragmentShader;\n\t\n\t    \treturn data;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author bhouston / https://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * parameters = {\n\t     *\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  displacementMap: new THREE.Texture( <Image> ),\n\t     *  displacementScale: <float>,\n\t     *  displacementBias: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>\n\t     * }\n\t     */\n\t\n\t    function MeshDepthMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshDepthMaterial';\n\t\n\t    \tthis.depthPacking = BasicDepthPacking;\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.displacementMap = null;\n\t    \tthis.displacementScale = 1;\n\t    \tthis.displacementBias = 0;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t\n\t    \tthis.fog = false;\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshDepthMaterial.prototype = Object.create( Material.prototype );\n\t    MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\t\n\t    MeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\t\n\t    MeshDepthMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.depthPacking = source.depthPacking;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.displacementMap = source.displacementMap;\n\t    \tthis.displacementScale = source.displacementScale;\n\t    \tthis.displacementBias = source.displacementBias;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Box3( min, max ) {\n\t\n\t    \tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t    \tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\t\n\t    }\n\t\n\t    Box3.prototype = {\n\t\n\t    \tconstructor: Box3,\n\t\n\t    \tisBox3: true,\n\t\n\t    \tset: function ( min, max ) {\n\t\n\t    \t\tthis.min.copy( min );\n\t    \t\tthis.max.copy( max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromArray: function ( array ) {\n\t\n\t    \t\tvar minX = + Infinity;\n\t    \t\tvar minY = + Infinity;\n\t    \t\tvar minZ = + Infinity;\n\t\n\t    \t\tvar maxX = - Infinity;\n\t    \t\tvar maxY = - Infinity;\n\t    \t\tvar maxZ = - Infinity;\n\t\n\t    \t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\t\n\t    \t\t\tvar x = array[ i ];\n\t    \t\t\tvar y = array[ i + 1 ];\n\t    \t\t\tvar z = array[ i + 2 ];\n\t\n\t    \t\t\tif ( x < minX ) minX = x;\n\t    \t\t\tif ( y < minY ) minY = y;\n\t    \t\t\tif ( z < minZ ) minZ = z;\n\t\n\t    \t\t\tif ( x > maxX ) maxX = x;\n\t    \t\t\tif ( y > maxY ) maxY = y;\n\t    \t\t\tif ( z > maxZ ) maxZ = z;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.min.set( minX, minY, minZ );\n\t    \t\tthis.max.set( maxX, maxY, maxZ );\n\t\n\t    \t},\n\t\n\t    \tsetFromPoints: function ( points ) {\n\t\n\t    \t\tthis.makeEmpty();\n\t\n\t    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.expandByPoint( points[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromCenterAndSize: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function setFromCenterAndSize( center, size ) {\n\t\n\t    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\n\t    \t\t\tthis.min.copy( center ).sub( halfSize );\n\t    \t\t\tthis.max.copy( center ).add( halfSize );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetFromObject: function () {\n\t\n\t    \t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t    \t\t// accounting for both the object's, and children's, world transforms\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function setFromObject( object ) {\n\t\n\t    \t\t\tvar scope = this;\n\t\n\t    \t\t\tobject.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.makeEmpty();\n\t\n\t    \t\t\tobject.traverse( function ( node ) {\n\t\n\t    \t\t\t\tvar geometry = node.geometry;\n\t\n\t    \t\t\t\tif ( geometry !== undefined ) {\n\t\n\t    \t\t\t\t\tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\n\t    \t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t    \t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\t\n\t    \t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\t\n\t    \t\t\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\t\t\t\tvar array, offset, stride;\n\t\n\t    \t\t\t\t\t\t\tif ( (attribute && attribute.isInterleavedBufferAttribute) ) {\n\t\n\t    \t\t\t\t\t\t\t\tarray = attribute.data.array;\n\t    \t\t\t\t\t\t\t\toffset = attribute.offset;\n\t    \t\t\t\t\t\t\t\tstride = attribute.data.stride;\n\t\n\t    \t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\tarray = attribute.array;\n\t    \t\t\t\t\t\t\t\toffset = 0;\n\t    \t\t\t\t\t\t\t\tstride = 3;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tfor ( var i = offset, il = array.length; i < il; i += stride ) {\n\t\n\t    \t\t\t\t\t\t\t\tv1.fromArray( array, i );\n\t    \t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\t\n\t    \t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( box ) {\n\t\n\t    \t\tthis.min.copy( box.min );\n\t    \t\tthis.max.copy( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeEmpty: function () {\n\t\n\t    \t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t    \t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tisEmpty: function () {\n\t\n\t    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\n\t    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\t\n\t    \t},\n\t\n\t    \tgetCenter: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\t\n\t    \t},\n\t\n\t    \tgetSize: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\t\n\t    \t},\n\t\n\t    \texpandByPoint: function ( point ) {\n\t\n\t    \t\tthis.min.min( point );\n\t    \t\tthis.max.max( point );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByVector: function ( vector ) {\n\t\n\t    \t\tthis.min.sub( vector );\n\t    \t\tthis.max.add( vector );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByScalar: function ( scalar ) {\n\t\n\t    \t\tthis.min.addScalar( - scalar );\n\t    \t\tthis.max.addScalar( scalar );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t    \t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n\t    \t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tcontainsBox: function ( box ) {\n\t\n\t    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t    \t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n\t    \t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tgetParameter: function ( point, optionalTarget ) {\n\t\n\t    \t\t// This can potentially have a divide by zero if the box\n\t    \t\t// has a size dimension of 0.\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn result.set(\n\t    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t    \t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t    \t\t);\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\t// using 6 splitting planes to rule out intersections.\n\t\n\t    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t    \t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n\t    \t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tintersectsSphere: ( function () {\n\t\n\t    \t\tvar closestPoint;\n\t\n\t    \t\treturn function intersectsSphere( sphere ) {\n\t\n\t    \t\t\tif ( closestPoint === undefined ) closestPoint = new Vector3();\n\t\n\t    \t\t\t// Find the point on the AABB closest to the sphere center.\n\t    \t\t\tthis.clampPoint( sphere.center, closestPoint );\n\t\n\t    \t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t    \t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \tintersectsPlane: function ( plane ) {\n\t\n\t    \t\t// We compute the minimum and maximum dot product values. If those values\n\t    \t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\tif ( plane.normal.x > 0 ) {\n\t\n\t    \t\t\tmin = plane.normal.x * this.min.x;\n\t    \t\t\tmax = plane.normal.x * this.max.x;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmin = plane.normal.x * this.max.x;\n\t    \t\t\tmax = plane.normal.x * this.min.x;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( plane.normal.y > 0 ) {\n\t\n\t    \t\t\tmin += plane.normal.y * this.min.y;\n\t    \t\t\tmax += plane.normal.y * this.max.y;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmin += plane.normal.y * this.max.y;\n\t    \t\t\tmax += plane.normal.y * this.min.y;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( plane.normal.z > 0 ) {\n\t\n\t    \t\t\tmin += plane.normal.z * this.min.z;\n\t    \t\t\tmax += plane.normal.z * this.max.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmin += plane.normal.z * this.max.z;\n\t    \t\t\tmax += plane.normal.z * this.min.z;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn ( min <= plane.constant && max >= plane.constant );\n\t\n\t    \t},\n\t\n\t    \tclampPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function distanceToPoint( point ) {\n\t\n\t    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t    \t\t\treturn clampedPoint.sub( point ).length();\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetBoundingSphere: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function getBoundingSphere( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Sphere();\n\t\n\t    \t\t\tthis.getCenter( result.center );\n\t\n\t    \t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersect: function ( box ) {\n\t\n\t    \t\tthis.min.max( box.min );\n\t    \t\tthis.max.min( box.max );\n\t\n\t    \t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t    \t\tif( this.isEmpty() ) this.makeEmpty();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tunion: function ( box ) {\n\t\n\t    \t\tthis.min.min( box.min );\n\t    \t\tthis.max.max( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function () {\n\t\n\t    \t\tvar points = [\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3()\n\t    \t\t];\n\t\n\t    \t\treturn function applyMatrix4( matrix ) {\n\t\n\t    \t\t\t// transform of empty box is an empty box.\n\t    \t\t\tif( this.isEmpty() ) return this;\n\t\n\t    \t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t    \t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t    \t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t    \t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t    \t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t    \t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t    \t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t    \t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t    \t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\t\n\t    \t\t\tthis.setFromPoints( points );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.min.add( offset );\n\t    \t\tthis.max.add( offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( box ) {\n\t\n\t    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Sphere( center, radius ) {\n\t\n\t    \tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t    \tthis.radius = ( radius !== undefined ) ? radius : 0;\n\t\n\t    }\n\t\n\t    Sphere.prototype = {\n\t\n\t    \tconstructor: Sphere,\n\t\n\t    \tset: function ( center, radius ) {\n\t\n\t    \t\tthis.center.copy( center );\n\t    \t\tthis.radius = radius;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromPoints: function () {\n\t\n\t    \t\tvar box = new Box3();\n\t\n\t    \t\treturn function setFromPoints( points, optionalCenter ) {\n\t\n\t    \t\t\tvar center = this.center;\n\t\n\t    \t\t\tif ( optionalCenter !== undefined ) {\n\t\n\t    \t\t\t\tcenter.copy( optionalCenter );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar maxRadiusSq = 0;\n\t\n\t    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( sphere ) {\n\t\n\t    \t\tthis.center.copy( sphere.center );\n\t    \t\tthis.radius = sphere.radius;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tempty: function () {\n\t\n\t    \t\treturn ( this.radius <= 0 );\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function ( point ) {\n\t\n\t    \t\treturn ( point.distanceTo( this.center ) - this.radius );\n\t\n\t    \t},\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\tvar radiusSum = this.radius + sphere.radius;\n\t\n\t    \t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\treturn box.intersectsSphere( this );\n\t\n\t    \t},\n\t\n\t    \tintersectsPlane: function ( plane ) {\n\t\n\t    \t\t// We use the following equation to compute the signed distance from\n\t    \t\t// the center of the sphere to the plane.\n\t    \t\t//\n\t    \t\t// distance = q * n - d\n\t    \t\t//\n\t    \t\t// If this distance is greater than the radius of the sphere,\n\t    \t\t// then there is no intersection.\n\t\n\t    \t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\t\n\t    \t},\n\t\n\t    \tclampPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tresult.copy( point );\n\t\n\t    \t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\t\n\t    \t\t\tresult.sub( this.center ).normalize();\n\t    \t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \tgetBoundingBox: function ( optionalTarget ) {\n\t\n\t    \t\tvar box = optionalTarget || new Box3();\n\t\n\t    \t\tbox.set( this.center, this.center );\n\t    \t\tbox.expandByScalar( this.radius );\n\t\n\t    \t\treturn box;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( matrix ) {\n\t\n\t    \t\tthis.center.applyMatrix4( matrix );\n\t    \t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.center.add( offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( sphere ) {\n\t\n\t    \t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author bhouston / http://clara.io\n\t     * @author tschw\n\t     */\n\t\n\t    function Matrix3() {\n\t\n\t    \tthis.elements = new Float32Array( [\n\t\n\t    \t\t1, 0, 0,\n\t    \t\t0, 1, 0,\n\t    \t\t0, 0, 1\n\t\n\t    \t] );\n\t\n\t    \tif ( arguments.length > 0 ) {\n\t\n\t    \t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Matrix3.prototype = {\n\t\n\t    \tconstructor: Matrix3,\n\t\n\t    \tisMatrix3: true,\n\t\n\t    \tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t    \t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t    \t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tidentity: function () {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0, 0,\n\t    \t\t\t0, 1, 0,\n\t    \t\t\t0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().fromArray( this.elements );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( m ) {\n\t\n\t    \t\tvar me = m.elements;\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n\t    \t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n\t    \t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrix4: function( m ) {\n\t\n\t    \t\tvar me = m.elements;\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n\t    \t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n\t    \t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyToVector3Array: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToVector3Array( array, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = array.length;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\t\n\t    \t\t\t\tv1.fromArray( array, j );\n\t    \t\t\t\tv1.applyMatrix3( this );\n\t    \t\t\t\tv1.toArray( array, j );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn array;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyToBuffer: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\t\n\t    \t\t\t\tv1.x = buffer.getX( j );\n\t    \t\t\t\tv1.y = buffer.getY( j );\n\t    \t\t\t\tv1.z = buffer.getZ( j );\n\t\n\t    \t\t\t\tv1.applyMatrix3( this );\n\t\n\t    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn buffer;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmultiplyScalar: function ( s ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t    \t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t    \t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdeterminant: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t    \t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t    \t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\t\n\t    \t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\n\t    \t},\n\t\n\t    \tgetInverse: function ( matrix, throwOnDegenerate ) {\n\t\n\t    \t\tif ( (matrix && matrix.isMatrix4) ) {\n\t\n\t    \t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar me = matrix.elements,\n\t    \t\t\tte = this.elements,\n\t\n\t    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t    \t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t    \t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\t\n\t    \t\t\tt11 = n33 * n22 - n32 * n23,\n\t    \t\t\tt12 = n32 * n13 - n33 * n12,\n\t    \t\t\tt13 = n23 * n12 - n22 * n13,\n\t\n\t    \t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\n\t    \t\tif ( det === 0 ) {\n\t\n\t    \t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\t\n\t    \t\t\tif ( throwOnDegenerate === true ) {\n\t\n\t    \t\t\t\tthrow new Error( msg );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tconsole.warn( msg );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this.identity();\n\t    \t\t}\n\t\n\t    \t\tvar detInv = 1 / det;\n\t\n\t    \t\tte[ 0 ] = t11 * detInv;\n\t    \t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t    \t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\t\n\t    \t\tte[ 3 ] = t12 * detInv;\n\t    \t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t    \t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\t\n\t    \t\tte[ 6 ] = t13 * detInv;\n\t    \t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t    \t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttranspose: function () {\n\t\n\t    \t\tvar tmp, m = this.elements;\n\t\n\t    \t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t    \t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t    \t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tflattenToArrayOffset: function ( array, offset ) {\n\t\n\t    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t    \t\t\t\t\"- just use .toArray instead.\" );\n\t\n\t    \t\treturn this.toArray( array, offset );\n\t\n\t    \t},\n\t\n\t    \tgetNormalMatrix: function ( matrix4 ) {\n\t\n\t    \t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\t\n\t    \t},\n\t\n\t    \ttransposeIntoArray: function ( r ) {\n\t\n\t    \t\tvar m = this.elements;\n\t\n\t    \t\tr[ 0 ] = m[ 0 ];\n\t    \t\tr[ 1 ] = m[ 3 ];\n\t    \t\tr[ 2 ] = m[ 6 ];\n\t    \t\tr[ 3 ] = m[ 1 ];\n\t    \t\tr[ 4 ] = m[ 4 ];\n\t    \t\tr[ 5 ] = m[ 7 ];\n\t    \t\tr[ 6 ] = m[ 2 ];\n\t    \t\tr[ 7 ] = m[ 5 ];\n\t    \t\tr[ 8 ] = m[ 8 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tfor( var i = 0; i < 9; i ++ ) {\n\t\n\t    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tarray[ offset ] = te[ 0 ];\n\t    \t\tarray[ offset + 1 ] = te[ 1 ];\n\t    \t\tarray[ offset + 2 ] = te[ 2 ];\n\t\n\t    \t\tarray[ offset + 3 ] = te[ 3 ];\n\t    \t\tarray[ offset + 4 ] = te[ 4 ];\n\t    \t\tarray[ offset + 5 ] = te[ 5 ];\n\t\n\t    \t\tarray[ offset + 6 ] = te[ 6 ];\n\t    \t\tarray[ offset + 7 ] = te[ 7 ];\n\t    \t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\n\t    \t\treturn array;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Plane( normal, constant ) {\n\t\n\t    \tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t    \tthis.constant = ( constant !== undefined ) ? constant : 0;\n\t\n\t    }\n\t\n\t    Plane.prototype = {\n\t\n\t    \tconstructor: Plane,\n\t\n\t    \tset: function ( normal, constant ) {\n\t\n\t    \t\tthis.normal.copy( normal );\n\t    \t\tthis.constant = constant;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponents: function ( x, y, z, w ) {\n\t\n\t    \t\tthis.normal.set( x, y, z );\n\t    \t\tthis.constant = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\t\n\t    \t\tthis.normal.copy( normal );\n\t    \t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromCoplanarPoints: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t    \t\tvar v2 = new Vector3();\n\t\n\t    \t\treturn function setFromCoplanarPoints( a, b, c ) {\n\t\n\t    \t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\t\n\t    \t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\t\n\t    \t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( plane ) {\n\t\n\t    \t\tthis.normal.copy( plane.normal );\n\t    \t\tthis.constant = plane.constant;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\n\t    \t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t    \t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t    \t\tthis.constant *= inverseNormalLength;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.constant *= - 1;\n\t    \t\tthis.normal.negate();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function ( point ) {\n\t\n\t    \t\treturn this.normal.dot( point ) + this.constant;\n\t\n\t    \t},\n\t\n\t    \tdistanceToSphere: function ( sphere ) {\n\t\n\t    \t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\t\n\t    \t},\n\t\n\t    \tprojectPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\t\n\t    \t},\n\t\n\t    \torthoPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\t\n\t    \t},\n\t\n\t    \tintersectLine: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function intersectLine( line, optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t\tvar direction = line.delta( v1 );\n\t\n\t    \t\t\tvar denominator = this.normal.dot( direction );\n\t\n\t    \t\t\tif ( denominator === 0 ) {\n\t\n\t    \t\t\t\t// line is coplanar, return origin\n\t    \t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\t\n\t    \t\t\t\t\treturn result.copy( line.start );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// Unsure if this is the correct method to handle this case.\n\t    \t\t\t\treturn undefined;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\t\n\t    \t\t\tif ( t < 0 || t > 1 ) {\n\t\n\t    \t\t\t\treturn undefined;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsLine: function ( line ) {\n\t\n\t    \t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\n\t    \t\tvar startSign = this.distanceToPoint( line.start );\n\t    \t\tvar endSign = this.distanceToPoint( line.end );\n\t\n\t    \t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\treturn box.intersectsPlane( this );\n\t\n\t    \t},\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\treturn sphere.intersectsPlane( this );\n\t\n\t    \t},\n\t\n\t    \tcoplanarPoint: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t    \t\tvar m1 = new Matrix3();\n\t\n\t    \t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\t\n\t    \t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\t\n\t    \t\t\t// transform normal based on theory here:\n\t    \t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t    \t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t    \t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t    \t\t\tthis.constant = - referencePoint.dot( normal );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.constant = this.constant - offset.dot( this.normal );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( plane ) {\n\t\n\t    \t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Frustum( p0, p1, p2, p3, p4, p5 ) {\n\t\n\t    \tthis.planes = [\n\t\n\t    \t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t    \t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t    \t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t    \t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t    \t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t    \t\t( p5 !== undefined ) ? p5 : new Plane()\n\t\n\t    \t];\n\t\n\t    }\n\t\n\t    Frustum.prototype = {\n\t\n\t    \tconstructor: Frustum,\n\t\n\t    \tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t\n\t    \t\tplanes[ 0 ].copy( p0 );\n\t    \t\tplanes[ 1 ].copy( p1 );\n\t    \t\tplanes[ 2 ].copy( p2 );\n\t    \t\tplanes[ 3 ].copy( p3 );\n\t    \t\tplanes[ 4 ].copy( p4 );\n\t    \t\tplanes[ 5 ].copy( p5 );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( frustum ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t\n\t    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrix: function ( m ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t    \t\tvar me = m.elements;\n\t    \t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t    \t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t    \t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t    \t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\t\n\t    \t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t    \t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t    \t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t    \t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t    \t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t    \t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tintersectsObject: function () {\n\t\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function intersectsObject( object ) {\n\t\n\t    \t\t\tvar geometry = object.geometry;\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null )\n\t    \t\t\t\tgeometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere )\n\t    \t\t\t\t.applyMatrix4( object.matrixWorld );\n\t\n\t    \t\t\treturn this.intersectsSphere( sphere );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsSprite: function () {\n\t\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function intersectsSprite( sprite ) {\n\t\n\t    \t\t\tsphere.center.set( 0, 0, 0 );\n\t    \t\t\tsphere.radius = 0.7071067811865476;\n\t    \t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\t\n\t    \t\t\treturn this.intersectsSphere( sphere );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t    \t\tvar center = sphere.center;\n\t    \t\tvar negRadius = - sphere.radius;\n\t\n\t    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\t\n\t    \t\t\tif ( distance < negRadius ) {\n\t\n\t    \t\t\t\treturn false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function () {\n\t\n\t    \t\tvar p1 = new Vector3(),\n\t    \t\t\tp2 = new Vector3();\n\t\n\t    \t\treturn function intersectsBox( box ) {\n\t\n\t    \t\t\tvar planes = this.planes;\n\t\n\t    \t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\t\n\t    \t\t\t\tvar plane = planes[ i ];\n\t\n\t    \t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t    \t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t    \t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t    \t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t    \t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t    \t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\t\n\t    \t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t    \t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\t\n\t    \t\t\t\t// if both outside plane, no intersection\n\t\n\t    \t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\t\n\t    \t\t\t\t\treturn false;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t\n\t    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\t\n\t    \t\t\t\treturn false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {\n\t\n\t    \tvar _gl = _renderer.context,\n\t    \t_state = _renderer.state,\n\t    \t_frustum = new Frustum(),\n\t    \t_projScreenMatrix = new Matrix4(),\n\t\n\t    \t_lightShadows = _lights.shadows,\n\t\n\t    \t_shadowMapSize = new Vector2(),\n\t    \t_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\t\n\t    \t_lookTarget = new Vector3(),\n\t    \t_lightPositionWorld = new Vector3(),\n\t\n\t    \t_renderList = [],\n\t\n\t    \t_MorphingFlag = 1,\n\t    \t_SkinningFlag = 2,\n\t\n\t    \t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\t\n\t    \t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t    \t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\t\n\t    \t_materialCache = {};\n\t\n\t    \tvar cubeDirections = [\n\t    \t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t    \t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t    \t];\n\t\n\t    \tvar cubeUps = [\n\t    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t    \t];\n\t\n\t    \tvar cube2DViewPorts = [\n\t    \t\tnew Vector4(), new Vector4(), new Vector4(),\n\t    \t\tnew Vector4(), new Vector4(), new Vector4()\n\t    \t];\n\t\n\t    \t// init\n\t\n\t    \tvar depthMaterialTemplate = new MeshDepthMaterial();\n\t    \tdepthMaterialTemplate.depthPacking = RGBADepthPacking;\n\t    \tdepthMaterialTemplate.clipping = true;\n\t\n\t    \tvar distanceShader = ShaderLib[ \"distanceRGBA\" ];\n\t    \tvar distanceUniforms = exports.UniformsUtils.clone( distanceShader.uniforms );\n\t\n\t    \tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\t\n\t    \t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t    \t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\t\n\t    \t\tvar depthMaterial = depthMaterialTemplate.clone();\n\t    \t\tdepthMaterial.morphTargets = useMorphing;\n\t    \t\tdepthMaterial.skinning = useSkinning;\n\t\n\t    \t\t_depthMaterials[ i ] = depthMaterial;\n\t\n\t    \t\tvar distanceMaterial = new ShaderMaterial( {\n\t    \t\t\tdefines: {\n\t    \t\t\t\t'USE_SHADOWMAP': ''\n\t    \t\t\t},\n\t    \t\t\tuniforms: distanceUniforms,\n\t    \t\t\tvertexShader: distanceShader.vertexShader,\n\t    \t\t\tfragmentShader: distanceShader.fragmentShader,\n\t    \t\t\tmorphTargets: useMorphing,\n\t    \t\t\tskinning: useSkinning,\n\t    \t\t\tclipping: true\n\t    \t\t} );\n\t\n\t    \t\t_distanceMaterials[ i ] = distanceMaterial;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar scope = this;\n\t\n\t    \tthis.enabled = false;\n\t\n\t    \tthis.autoUpdate = true;\n\t    \tthis.needsUpdate = false;\n\t\n\t    \tthis.type = PCFShadowMap;\n\t\n\t    \tthis.renderReverseSided = true;\n\t    \tthis.renderSingleSided = true;\n\t\n\t    \tthis.render = function ( scene, camera ) {\n\t\n\t    \t\tif ( scope.enabled === false ) return;\n\t    \t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\t\n\t    \t\tif ( _lightShadows.length === 0 ) return;\n\t\n\t    \t\t// Set GL state for depth map.\n\t    \t\t_state.clearColor( 1, 1, 1, 1 );\n\t    \t\t_state.disable( _gl.BLEND );\n\t    \t\t_state.setDepthTest( true );\n\t    \t\t_state.setScissorTest( false );\n\t\n\t    \t\t// render depth map\n\t\n\t    \t\tvar faceCount, isPointLight;\n\t\n\t    \t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar light = _lightShadows[ i ];\n\t    \t\t\tvar shadow = light.shadow;\n\t\n\t    \t\t\tif ( shadow === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar shadowCamera = shadow.camera;\n\t\n\t    \t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t    \t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\t\n\t    \t\t\tif ( (light && light.isPointLight) ) {\n\t\n\t    \t\t\t\tfaceCount = 6;\n\t    \t\t\t\tisPointLight = true;\n\t\n\t    \t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t    \t\t\t\tvar vpHeight = _shadowMapSize.y;\n\t\n\t    \t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t    \t\t\t\t// following orientation:\n\t    \t\t\t\t//\n\t    \t\t\t\t//  xzXZ\n\t    \t\t\t\t//   y Y\n\t    \t\t\t\t//\n\t    \t\t\t\t// X - Positive x direction\n\t    \t\t\t\t// x - Negative x direction\n\t    \t\t\t\t// Y - Positive y direction\n\t    \t\t\t\t// y - Negative y direction\n\t    \t\t\t\t// Z - Positive z direction\n\t    \t\t\t\t// z - Negative z direction\n\t\n\t    \t\t\t\t// positive X\n\t    \t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// negative X\n\t    \t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// positive Z\n\t    \t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// negative Z\n\t    \t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// positive Y\n\t    \t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t    \t\t\t\t// negative Y\n\t    \t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\t\n\t    \t\t\t\t_shadowMapSize.x *= 4.0;\n\t    \t\t\t\t_shadowMapSize.y *= 2.0;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tfaceCount = 1;\n\t    \t\t\t\tisPointLight = false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( shadow.map === null ) {\n\t\n\t    \t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\t\n\t    \t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\n\t    \t\t\t\tshadowCamera.updateProjectionMatrix();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( (shadow && shadow.isSpotLightShadow) ) {\n\t\n\t    \t\t\t\tshadow.update( light );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar shadowMap = shadow.map;\n\t    \t\t\tvar shadowMatrix = shadow.matrix;\n\t\n\t    \t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\t\n\t    \t\t\t_renderer.setRenderTarget( shadowMap );\n\t    \t\t\t_renderer.clear();\n\t\n\t    \t\t\t// render shadow map for each cube face (if omni-directional) or\n\t    \t\t\t// run a single pass if not\n\t\n\t    \t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\t\n\t    \t\t\t\tif ( isPointLight ) {\n\t\n\t    \t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t    \t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t    \t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\n\t    \t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t    \t\t\t\t\t_state.viewport( vpDimensions );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tshadowCamera.updateMatrixWorld();\n\t    \t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\t\n\t    \t\t\t\t// compute shadow matrix\n\t\n\t    \t\t\t\tshadowMatrix.set(\n\t    \t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t    \t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t    \t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t    \t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t    \t\t\t\t);\n\t\n\t    \t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t    \t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\t\n\t    \t\t\t\t// update camera matrices and frustum\n\t\n\t    \t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t    \t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\t\n\t    \t\t\t\t// set object matrices & frustum culling\n\t\n\t    \t\t\t\t_renderList.length = 0;\n\t\n\t    \t\t\t\tprojectObject( scene, camera, shadowCamera );\n\t\n\t    \t\t\t\t// render shadow map\n\t    \t\t\t\t// render regular objects\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\tvar object = _renderList[ j ];\n\t    \t\t\t\t\tvar geometry = _objects.update( object );\n\t    \t\t\t\t\tvar material = object.material;\n\t\n\t    \t\t\t\t\tif ( (material && material.isMultiMaterial) ) {\n\t\n\t    \t\t\t\t\t\tvar groups = geometry.groups;\n\t    \t\t\t\t\t\tvar materials = material.materials;\n\t\n\t    \t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\t\n\t    \t\t\t\t\t\t\tvar group = groups[ k ];\n\t    \t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\t\n\t    \t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\t\n\t    \t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t    \t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t    \t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Restore GL state.\n\t    \t\tvar clearColor = _renderer.getClearColor(),\n\t    \t\tclearAlpha = _renderer.getClearAlpha();\n\t    \t\t_renderer.setClearColor( clearColor, clearAlpha );\n\t\n\t    \t\tscope.needsUpdate = false;\n\t\n\t    \t};\n\t\n\t    \tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tvar result = null;\n\t\n\t    \t\tvar materialVariants = _depthMaterials;\n\t    \t\tvar customMaterial = object.customDepthMaterial;\n\t\n\t    \t\tif ( isPointLight ) {\n\t\n\t    \t\t\tmaterialVariants = _distanceMaterials;\n\t    \t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ! customMaterial ) {\n\t\n\t    \t\t\tvar useMorphing = false;\n\t\n\t    \t\t\tif ( material.morphTargets ) {\n\t\n\t    \t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\n\t    \t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\t\n\t    \t\t\tvar variantIndex = 0;\n\t\n\t    \t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t    \t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\t\n\t    \t\t\tresult = materialVariants[ variantIndex ];\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tresult = customMaterial;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( _renderer.localClippingEnabled &&\n\t    \t\t\t material.clipShadows === true &&\n\t    \t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\t\n\t    \t\t\t// in this case we need a unique material instance reflecting the\n\t    \t\t\t// appropriate state\n\t\n\t    \t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\t\n\t    \t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\t\n\t    \t\t\tif ( materialsForVariant === undefined ) {\n\t\n\t    \t\t\t\tmaterialsForVariant = {};\n\t    \t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\t\n\t    \t\t\tif ( cachedMaterial === undefined ) {\n\t\n\t    \t\t\t\tcachedMaterial = result.clone();\n\t    \t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tresult = cachedMaterial;\n\t\n\t    \t\t}\n\t\n\t    \t\tresult.visible = material.visible;\n\t    \t\tresult.wireframe = material.wireframe;\n\t\n\t    \t\tvar side = material.side;\n\t\n\t    \t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\t\n\t    \t\t\tside = FrontSide;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( scope.renderReverseSided ) {\n\t\n\t    \t\t\tif ( side === FrontSide ) side = BackSide;\n\t    \t\t\telse if ( side === BackSide ) side = FrontSide;\n\t\n\t    \t\t}\n\t\n\t    \t\tresult.side = side;\n\t\n\t    \t\tresult.clipShadows = material.clipShadows;\n\t    \t\tresult.clippingPlanes = material.clippingPlanes;\n\t\n\t    \t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t    \t\tresult.linewidth = material.linewidth;\n\t\n\t    \t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\t\n\t    \t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    \tfunction projectObject( object, camera, shadowCamera ) {\n\t\n\t    \t\tif ( object.visible === false ) return;\n\t\n\t    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\t\n\t    \t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\t\n\t    \t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\t\n\t    \t\t\t\tvar material = object.material;\n\t\n\t    \t\t\t\tif ( material.visible === true ) {\n\t\n\t    \t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\t    \t\t\t\t\t_renderList.push( object );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar children = object.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Ray( origin, direction ) {\n\t\n\t    \tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t    \tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\t\n\t    }\n\t\n\t    Ray.prototype = {\n\t\n\t    \tconstructor: Ray,\n\t\n\t    \tset: function ( origin, direction ) {\n\t\n\t    \t\tthis.origin.copy( origin );\n\t    \t\tthis.direction.copy( direction );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( ray ) {\n\t\n\t    \t\tthis.origin.copy( ray.origin );\n\t    \t\tthis.direction.copy( ray.direction );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tat: function ( t, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\t\n\t    \t},\n\t\n\t    \tlookAt: function ( v ) {\n\t\n\t    \t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trecast: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function recast( t ) {\n\t\n\t    \t\t\tthis.origin.copy( this.at( t, v1 ) );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclosestPointToPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\tresult.subVectors( point, this.origin );\n\t    \t\tvar directionDistance = result.dot( this.direction );\n\t\n\t    \t\tif ( directionDistance < 0 ) {\n\t\n\t    \t\t\treturn result.copy( this.origin );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function ( point ) {\n\t\n\t    \t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceSqToPoint: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function distanceSqToPoint( point ) {\n\t\n\t    \t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\t\n\t    \t\t\t// point behind the ray\n\t\n\t    \t\t\tif ( directionDistance < 0 ) {\n\t\n\t    \t\t\t\treturn this.origin.distanceToSquared( point );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\t\n\t    \t\t\treturn v1.distanceToSquared( point );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tdistanceSqToSegment: function () {\n\t\n\t    \t\tvar segCenter = new Vector3();\n\t    \t\tvar segDir = new Vector3();\n\t    \t\tvar diff = new Vector3();\n\t\n\t    \t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\t\n\t    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t    \t\t\t// It returns the min distance between the ray and the segment\n\t    \t\t\t// defined by v0 and v1\n\t    \t\t\t// It can also set two optional targets :\n\t    \t\t\t// - The closest point on the ray\n\t    \t\t\t// - The closest point on the segment\n\t\n\t    \t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t    \t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t    \t\t\tdiff.copy( this.origin ).sub( segCenter );\n\t\n\t    \t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t    \t\t\tvar a01 = - this.direction.dot( segDir );\n\t    \t\t\tvar b0 = diff.dot( this.direction );\n\t    \t\t\tvar b1 = - diff.dot( segDir );\n\t    \t\t\tvar c = diff.lengthSq();\n\t    \t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t    \t\t\tvar s0, s1, sqrDist, extDet;\n\t\n\t    \t\t\tif ( det > 0 ) {\n\t\n\t    \t\t\t\t// The ray and segment are not parallel.\n\t\n\t    \t\t\t\ts0 = a01 * b1 - b0;\n\t    \t\t\t\ts1 = a01 * b0 - b1;\n\t    \t\t\t\textDet = segExtent * det;\n\t\n\t    \t\t\t\tif ( s0 >= 0 ) {\n\t\n\t    \t\t\t\t\tif ( s1 >= - extDet ) {\n\t\n\t    \t\t\t\t\t\tif ( s1 <= extDet ) {\n\t\n\t    \t\t\t\t\t\t\t// region 0\n\t    \t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\n\t    \t\t\t\t\t\t\tvar invDet = 1 / det;\n\t    \t\t\t\t\t\t\ts0 *= invDet;\n\t    \t\t\t\t\t\t\ts1 *= invDet;\n\t    \t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t// region 1\n\t\n\t    \t\t\t\t\t\t\ts1 = segExtent;\n\t    \t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t    \t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t// region 5\n\t\n\t    \t\t\t\t\t\ts1 = - segExtent;\n\t    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( s1 <= - extDet ) {\n\t\n\t    \t\t\t\t\t\t// region 4\n\t\n\t    \t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t} else if ( s1 <= extDet ) {\n\t\n\t    \t\t\t\t\t\t// region 3\n\t\n\t    \t\t\t\t\t\ts0 = 0;\n\t    \t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t    \t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t// region 2\n\t\n\t    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// Ray and segment are parallel.\n\t\n\t    \t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t    \t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t    \t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( optionalPointOnRay ) {\n\t\n\t    \t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( optionalPointOnSegment ) {\n\t\n\t    \t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn sqrDist;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectSphere: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function intersectSphere( sphere, optionalTarget ) {\n\t\n\t    \t\t\tv1.subVectors( sphere.center, this.origin );\n\t    \t\t\tvar tca = v1.dot( this.direction );\n\t    \t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t    \t\t\tvar radius2 = sphere.radius * sphere.radius;\n\t\n\t    \t\t\tif ( d2 > radius2 ) return null;\n\t\n\t    \t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\t\n\t    \t\t\t// t0 = first intersect point - entrance on front of sphere\n\t    \t\t\tvar t0 = tca - thc;\n\t\n\t    \t\t\t// t1 = second intersect point - exit point on back of sphere\n\t    \t\t\tvar t1 = tca + thc;\n\t\n\t    \t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t    \t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\t\n\t    \t\t\t// test to see if t0 is behind the ray:\n\t    \t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t    \t\t\t// in order to always return an intersect point that is in front of the ray.\n\t    \t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\t\n\t    \t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t    \t\t\treturn this.at( t0, optionalTarget );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\t\n\t    \t},\n\t\n\t    \tdistanceToPlane: function ( plane ) {\n\t\n\t    \t\tvar denominator = plane.normal.dot( this.direction );\n\t\n\t    \t\tif ( denominator === 0 ) {\n\t\n\t    \t\t\t// line is coplanar, return origin\n\t    \t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\t\n\t    \t\t\t\treturn 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\t\n\t    \t\t// Return if the ray never intersects the plane\n\t\n\t    \t\treturn t >= 0 ? t :  null;\n\t\n\t    \t},\n\t\n\t    \tintersectPlane: function ( plane, optionalTarget ) {\n\t\n\t    \t\tvar t = this.distanceToPlane( plane );\n\t\n\t    \t\tif ( t === null ) {\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.at( t, optionalTarget );\n\t\n\t    \t},\n\t\n\t\n\t\n\t    \tintersectsPlane: function ( plane ) {\n\t\n\t    \t\t// check if the ray lies on the plane first\n\t\n\t    \t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\t\n\t    \t\tif ( distToPoint === 0 ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar denominator = plane.normal.dot( this.direction );\n\t\n\t    \t\tif ( denominator * distToPoint < 0 ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// ray origin is behind the plane (and is pointing behind it)\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tintersectBox: function ( box, optionalTarget ) {\n\t\n\t    \t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\n\t    \t\tvar invdirx = 1 / this.direction.x,\n\t    \t\t\tinvdiry = 1 / this.direction.y,\n\t    \t\t\tinvdirz = 1 / this.direction.z;\n\t\n\t    \t\tvar origin = this.origin;\n\t\n\t    \t\tif ( invdirx >= 0 ) {\n\t\n\t    \t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t    \t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t    \t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( invdiry >= 0 ) {\n\t\n\t    \t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t    \t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t    \t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\t\n\t    \t\t// These lines also handle the case where tmin or tmax is NaN\n\t    \t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\t\n\t    \t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\t\n\t    \t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\t\n\t    \t\tif ( invdirz >= 0 ) {\n\t\n\t    \t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t    \t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t    \t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\t\n\t    \t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\t\n\t    \t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\t\n\t    \t\t//return point closest to the ray (positive side)\n\t\n\t    \t\tif ( tmax < 0 ) return null;\n\t\n\t    \t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: ( function () {\n\t\n\t    \t\tvar v = new Vector3();\n\t\n\t    \t\treturn function intersectsBox( box ) {\n\t\n\t    \t\t\treturn this.intersectBox( box, v ) !== null;\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \tintersectTriangle: function () {\n\t\n\t    \t\t// Compute the offset origin, edges, and normal.\n\t    \t\tvar diff = new Vector3();\n\t    \t\tvar edge1 = new Vector3();\n\t    \t\tvar edge2 = new Vector3();\n\t    \t\tvar normal = new Vector3();\n\t\n\t    \t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\t\n\t    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\n\t    \t\t\tedge1.subVectors( b, a );\n\t    \t\t\tedge2.subVectors( c, a );\n\t    \t\t\tnormal.crossVectors( edge1, edge2 );\n\t\n\t    \t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t    \t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t    \t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t    \t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t    \t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t    \t\t\tvar DdN = this.direction.dot( normal );\n\t    \t\t\tvar sign;\n\t\n\t    \t\t\tif ( DdN > 0 ) {\n\t\n\t    \t\t\t\tif ( backfaceCulling ) return null;\n\t    \t\t\t\tsign = 1;\n\t\n\t    \t\t\t} else if ( DdN < 0 ) {\n\t\n\t    \t\t\t\tsign = - 1;\n\t    \t\t\t\tDdN = - DdN;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tdiff.subVectors( this.origin, a );\n\t    \t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\t\n\t    \t\t\t// b1 < 0, no intersection\n\t    \t\t\tif ( DdQxE2 < 0 ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\t\n\t    \t\t\t// b2 < 0, no intersection\n\t    \t\t\tif ( DdE1xQ < 0 ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// b1+b2 > 1, no intersection\n\t    \t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Line intersects triangle, check if ray does.\n\t    \t\t\tvar QdN = - sign * diff.dot( normal );\n\t\n\t    \t\t\t// t < 0, no intersection\n\t    \t\t\tif ( QdN < 0 ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Ray intersects triangle.\n\t    \t\t\treturn this.at( QdN / DdN, optionalTarget );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyMatrix4: function ( matrix4 ) {\n\t\n\t    \t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n\t    \t\tthis.origin.applyMatrix4( matrix4 );\n\t    \t\tthis.direction.sub( this.origin );\n\t    \t\tthis.direction.normalize();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( ray ) {\n\t\n\t    \t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Euler( x, y, z, order ) {\n\t\n\t    \tthis._x = x || 0;\n\t    \tthis._y = y || 0;\n\t    \tthis._z = z || 0;\n\t    \tthis._order = order || Euler.DefaultOrder;\n\t\n\t    }\n\t\n\t    Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\t\n\t    Euler.DefaultOrder = 'XYZ';\n\t\n\t    Euler.prototype = {\n\t\n\t    \tconstructor: Euler,\n\t\n\t    \tisEuler: true,\n\t\n\t    \tget x () {\n\t\n\t    \t\treturn this._x;\n\t\n\t    \t},\n\t\n\t    \tset x ( value ) {\n\t\n\t    \t\tthis._x = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget y () {\n\t\n\t    \t\treturn this._y;\n\t\n\t    \t},\n\t\n\t    \tset y ( value ) {\n\t\n\t    \t\tthis._y = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget z () {\n\t\n\t    \t\treturn this._z;\n\t\n\t    \t},\n\t\n\t    \tset z ( value ) {\n\t\n\t    \t\tthis._z = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget order () {\n\t\n\t    \t\treturn this._order;\n\t\n\t    \t},\n\t\n\t    \tset order ( value ) {\n\t\n\t    \t\tthis._order = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tset: function ( x, y, z, order ) {\n\t\n\t    \t\tthis._x = x;\n\t    \t\tthis._y = y;\n\t    \t\tthis._z = z;\n\t    \t\tthis._order = order || this._order;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( euler ) {\n\t\n\t    \t\tthis._x = euler._x;\n\t    \t\tthis._y = euler._y;\n\t    \t\tthis._z = euler._z;\n\t    \t\tthis._order = euler._order;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromRotationMatrix: function ( m, order, update ) {\n\t\n\t    \t\tvar clamp = exports.Math.clamp;\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tvar te = m.elements;\n\t    \t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t    \t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t    \t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\t\n\t    \t\torder = order || this._order;\n\t\n\t    \t\tif ( order === 'XYZ' ) {\n\t\n\t    \t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t    \t\t\t\tthis._z = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'YXZ' ) {\n\t\n\t    \t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( m21, m22 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t    \t\t\t\tthis._z = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'ZXY' ) {\n\t\n\t    \t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._y = 0;\n\t    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'ZYX' ) {\n\t\n\t    \t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = 0;\n\t    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'YZX' ) {\n\t\n\t    \t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = 0;\n\t    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'XZY' ) {\n\t\n\t    \t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t    \t\t\t\tthis._y = Math.atan2( m13, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t    \t\t\t\tthis._y = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._order = order;\n\t\n\t    \t\tif ( update !== false ) this.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromQuaternion: function () {\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\treturn function setFromQuaternion( q, order, update ) {\n\t\n\t    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t    \t\t\tmatrix.makeRotationFromQuaternion( q );\n\t\n\t    \t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetFromVector3: function ( v, order ) {\n\t\n\t    \t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\t\n\t    \t},\n\t\n\t    \treorder: function () {\n\t\n\t    \t\t// WARNING: this discards revolution information -bhouston\n\t\n\t    \t\tvar q = new Quaternion();\n\t\n\t    \t\treturn function reorder( newOrder ) {\n\t\n\t    \t\t\tq.setFromEuler( this );\n\t\n\t    \t\t\treturn this.setFromQuaternion( q, newOrder );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tequals: function ( euler ) {\n\t\n\t    \t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array ) {\n\t\n\t    \t\tthis._x = array[ 0 ];\n\t    \t\tthis._y = array[ 1 ];\n\t    \t\tthis._z = array[ 2 ];\n\t    \t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this._x;\n\t    \t\tarray[ offset + 1 ] = this._y;\n\t    \t\tarray[ offset + 2 ] = this._z;\n\t    \t\tarray[ offset + 3 ] = this._order;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \ttoVector3: function ( optionalResult ) {\n\t\n\t    \t\tif ( optionalResult ) {\n\t\n\t    \t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn new Vector3( this._x, this._y, this._z );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tonChange: function ( callback ) {\n\t\n\t    \t\tthis.onChangeCallback = callback;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tonChangeCallback: function () {}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Layers() {\n\t\n\t    \tthis.mask = 1;\n\t\n\t    }\n\t\n\t    Layers.prototype = {\n\t\n\t    \tconstructor: Layers,\n\t\n\t    \tset: function ( channel ) {\n\t\n\t    \t\tthis.mask = 1 << channel;\n\t\n\t    \t},\n\t\n\t    \tenable: function ( channel ) {\n\t\n\t    \t\tthis.mask |= 1 << channel;\n\t\n\t    \t},\n\t\n\t    \ttoggle: function ( channel ) {\n\t\n\t    \t\tthis.mask ^= 1 << channel;\n\t\n\t    \t},\n\t\n\t    \tdisable: function ( channel ) {\n\t\n\t    \t\tthis.mask &= ~ ( 1 << channel );\n\t\n\t    \t},\n\t\n\t    \ttest: function ( layers ) {\n\t\n\t    \t\treturn ( this.mask & layers.mask ) !== 0;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author elephantatwork / www.elephantatwork.ch\n\t     */\n\t\n\t    function Object3D() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: Object3DIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'Object3D';\n\t\n\t    \tthis.parent = null;\n\t    \tthis.children = [];\n\t\n\t    \tthis.up = Object3D.DefaultUp.clone();\n\t\n\t    \tvar position = new Vector3();\n\t    \tvar rotation = new Euler();\n\t    \tvar quaternion = new Quaternion();\n\t    \tvar scale = new Vector3( 1, 1, 1 );\n\t\n\t    \tfunction onRotationChange() {\n\t\n\t    \t\tquaternion.setFromEuler( rotation, false );\n\t\n\t    \t}\n\t\n\t    \tfunction onQuaternionChange() {\n\t\n\t    \t\trotation.setFromQuaternion( quaternion, undefined, false );\n\t\n\t    \t}\n\t\n\t    \trotation.onChange( onRotationChange );\n\t    \tquaternion.onChange( onQuaternionChange );\n\t\n\t    \tObject.defineProperties( this, {\n\t    \t\tposition: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: position\n\t    \t\t},\n\t    \t\trotation: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: rotation\n\t    \t\t},\n\t    \t\tquaternion: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: quaternion\n\t    \t\t},\n\t    \t\tscale: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: scale\n\t    \t\t},\n\t    \t\tmodelViewMatrix: {\n\t    \t\t\tvalue: new Matrix4()\n\t    \t\t},\n\t    \t\tnormalMatrix: {\n\t    \t\t\tvalue: new Matrix3()\n\t    \t\t}\n\t    \t} );\n\t\n\t    \tthis.matrix = new Matrix4();\n\t    \tthis.matrixWorld = new Matrix4();\n\t\n\t    \tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t    \tthis.matrixWorldNeedsUpdate = false;\n\t\n\t    \tthis.layers = new Layers();\n\t    \tthis.visible = true;\n\t\n\t    \tthis.castShadow = false;\n\t    \tthis.receiveShadow = false;\n\t\n\t    \tthis.frustumCulled = true;\n\t    \tthis.renderOrder = 0;\n\t\n\t    \tthis.userData = {};\n\t\n\t    \tthis.onBeforeRender = null;\n\t\n\t    }\n\t\n\t    Object3D.DefaultUp = new Vector3( 0, 1, 0 );\n\t    Object3D.DefaultMatrixAutoUpdate = true;\n\t\n\t    Object.assign( Object3D.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisObject3D: true,\n\t\n\t    \tapplyMatrix: function ( matrix ) {\n\t\n\t    \t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\t\n\t    \t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromAxisAngle: function ( axis, angle ) {\n\t\n\t    \t\t// assumes axis is normalized\n\t\n\t    \t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromEuler: function ( euler ) {\n\t\n\t    \t\tthis.quaternion.setFromEuler( euler, true );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromMatrix: function ( m ) {\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tthis.quaternion.setFromRotationMatrix( m );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromQuaternion: function ( q ) {\n\t\n\t    \t\t// assumes q is normalized\n\t\n\t    \t\tthis.quaternion.copy( q );\n\t\n\t    \t},\n\t\n\t    \trotateOnAxis: function () {\n\t\n\t    \t\t// rotate object on axis in object space\n\t    \t\t// axis is assumed to be normalized\n\t\n\t    \t\tvar q1 = new Quaternion();\n\t\n\t    \t\treturn function rotateOnAxis( axis, angle ) {\n\t\n\t    \t\t\tq1.setFromAxisAngle( axis, angle );\n\t\n\t    \t\t\tthis.quaternion.multiply( q1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateX: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\t\n\t    \t\treturn function rotateX( angle ) {\n\t\n\t    \t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateY: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\t\n\t    \t\treturn function rotateY( angle ) {\n\t\n\t    \t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateZ: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\t\n\t    \t\treturn function rotateZ( angle ) {\n\t\n\t    \t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateOnAxis: function () {\n\t\n\t    \t\t// translate object by distance along axis in object space\n\t    \t\t// axis is assumed to be normalized\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function translateOnAxis( axis, distance ) {\n\t\n\t    \t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\t\n\t    \t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateX: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\t\n\t    \t\treturn function translateX( distance ) {\n\t\n\t    \t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateY: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\t\n\t    \t\treturn function translateY( distance ) {\n\t\n\t    \t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateZ: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\t\n\t    \t\treturn function translateZ( distance ) {\n\t\n\t    \t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlocalToWorld: function ( vector ) {\n\t\n\t    \t\treturn vector.applyMatrix4( this.matrixWorld );\n\t\n\t    \t},\n\t\n\t    \tworldToLocal: function () {\n\t\n\t    \t\tvar m1 = new Matrix4();\n\t\n\t    \t\treturn function worldToLocal( vector ) {\n\t\n\t    \t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\t// This routine does not support objects with rotated and/or translated parent(s)\n\t\n\t    \t\tvar m1 = new Matrix4();\n\t\n\t    \t\treturn function lookAt( vector ) {\n\t\n\t    \t\t\tm1.lookAt( vector, this.position, this.up );\n\t\n\t    \t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tadd: function ( object ) {\n\t\n\t    \t\tif ( arguments.length > 1 ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\t\n\t    \t\t\t\tthis.add( arguments[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object === this ) {\n\t\n\t    \t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( (object && object.isObject3D) ) {\n\t\n\t    \t\t\tif ( object.parent !== null ) {\n\t\n\t    \t\t\t\tobject.parent.remove( object );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.parent = this;\n\t    \t\t\tobject.dispatchEvent( { type: 'added' } );\n\t\n\t    \t\t\tthis.children.push( object );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tremove: function ( object ) {\n\t\n\t    \t\tif ( arguments.length > 1 ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\t\n\t    \t\t\t\tthis.remove( arguments[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar index = this.children.indexOf( object );\n\t\n\t    \t\tif ( index !== - 1 ) {\n\t\n\t    \t\t\tobject.parent = null;\n\t\n\t    \t\t\tobject.dispatchEvent( { type: 'removed' } );\n\t\n\t    \t\t\tthis.children.splice( index, 1 );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetObjectById: function ( id ) {\n\t\n\t    \t\treturn this.getObjectByProperty( 'id', id );\n\t\n\t    \t},\n\t\n\t    \tgetObjectByName: function ( name ) {\n\t\n\t    \t\treturn this.getObjectByProperty( 'name', name );\n\t\n\t    \t},\n\t\n\t    \tgetObjectByProperty: function ( name, value ) {\n\t\n\t    \t\tif ( this[ name ] === value ) return this;\n\t\n\t    \t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar child = this.children[ i ];\n\t    \t\t\tvar object = child.getObjectByProperty( name, value );\n\t\n\t    \t\t\tif ( object !== undefined ) {\n\t\n\t    \t\t\t\treturn object;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn undefined;\n\t\n\t    \t},\n\t\n\t    \tgetWorldPosition: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t},\n\t\n\t    \tgetWorldQuaternion: function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t    \t\tvar scale = new Vector3();\n\t\n\t    \t\treturn function getWorldQuaternion( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Quaternion();\n\t\n\t    \t\t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.matrixWorld.decompose( position, result, scale );\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetWorldRotation: function () {\n\t\n\t    \t\tvar quaternion = new Quaternion();\n\t\n\t    \t\treturn function getWorldRotation( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Euler();\n\t\n\t    \t\t\tthis.getWorldQuaternion( quaternion );\n\t\n\t    \t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetWorldScale: function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t    \t\tvar quaternion = new Quaternion();\n\t\n\t    \t\treturn function getWorldScale( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetWorldDirection: function () {\n\t\n\t    \t\tvar quaternion = new Quaternion();\n\t\n\t    \t\treturn function getWorldDirection( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t\tthis.getWorldQuaternion( quaternion );\n\t\n\t    \t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \traycast: function () {},\n\t\n\t    \ttraverse: function ( callback ) {\n\t\n\t    \t\tcallback( this );\n\t\n\t    \t\tvar children = this.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tchildren[ i ].traverse( callback );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttraverseVisible: function ( callback ) {\n\t\n\t    \t\tif ( this.visible === false ) return;\n\t\n\t    \t\tcallback( this );\n\t\n\t    \t\tvar children = this.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tchildren[ i ].traverseVisible( callback );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttraverseAncestors: function ( callback ) {\n\t\n\t    \t\tvar parent = this.parent;\n\t\n\t    \t\tif ( parent !== null ) {\n\t\n\t    \t\t\tcallback( parent );\n\t\n\t    \t\t\tparent.traverseAncestors( callback );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tupdateMatrix: function () {\n\t\n\t    \t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\t\n\t    \t\tthis.matrixWorldNeedsUpdate = true;\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: function ( force ) {\n\t\n\t    \t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\t\n\t    \t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\t\n\t    \t\t\tif ( this.parent === null ) {\n\t\n\t    \t\t\t\tthis.matrixWorld.copy( this.matrix );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\n\t    \t\t\tforce = true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// update children\n\t\n\t    \t\tvar children = this.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tchildren[ i ].updateMatrixWorld( force );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\t// meta is '' when called from JSON.stringify\n\t    \t\tvar isRootObject = ( meta === undefined || meta === '' );\n\t\n\t    \t\tvar output = {};\n\t\n\t    \t\t// meta is a hash used to collect geometries, materials.\n\t    \t\t// not providing it implies that this is the root object\n\t    \t\t// being serialized.\n\t    \t\tif ( isRootObject ) {\n\t\n\t    \t\t\t// initialize meta obj\n\t    \t\t\tmeta = {\n\t    \t\t\t\tgeometries: {},\n\t    \t\t\t\tmaterials: {},\n\t    \t\t\t\ttextures: {},\n\t    \t\t\t\timages: {}\n\t    \t\t\t};\n\t\n\t    \t\t\toutput.metadata = {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Object',\n\t    \t\t\t\tgenerator: 'Object3D.toJSON'\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\t// standard Object3D serialization\n\t\n\t    \t\tvar object = {};\n\t\n\t    \t\tobject.uuid = this.uuid;\n\t    \t\tobject.type = this.type;\n\t\n\t    \t\tif ( this.name !== '' ) object.name = this.name;\n\t    \t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t    \t\tif ( this.castShadow === true ) object.castShadow = true;\n\t    \t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t    \t\tif ( this.visible === false ) object.visible = false;\n\t\n\t    \t\tobject.matrix = this.matrix.toArray();\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( this.geometry !== undefined ) {\n\t\n\t    \t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\t\n\t    \t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.geometry = this.geometry.uuid;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.material !== undefined ) {\n\t\n\t    \t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\t\n\t    \t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.material = this.material.uuid;\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( this.children.length > 0 ) {\n\t\n\t    \t\t\tobject.children = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\t\n\t    \t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( isRootObject ) {\n\t\n\t    \t\t\tvar geometries = extractFromCache( meta.geometries );\n\t    \t\t\tvar materials = extractFromCache( meta.materials );\n\t    \t\t\tvar textures = extractFromCache( meta.textures );\n\t    \t\t\tvar images = extractFromCache( meta.images );\n\t\n\t    \t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t    \t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t    \t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t    \t\t\tif ( images.length > 0 ) output.images = images;\n\t\n\t    \t\t}\n\t\n\t    \t\toutput.object = object;\n\t\n\t    \t\treturn output;\n\t\n\t    \t\t// extract data from the cache hash\n\t    \t\t// remove metadata on each item\n\t    \t\t// and return as array\n\t    \t\tfunction extractFromCache( cache ) {\n\t\n\t    \t\t\tvar values = [];\n\t    \t\t\tfor ( var key in cache ) {\n\t\n\t    \t\t\t\tvar data = cache[ key ];\n\t    \t\t\t\tdelete data.metadata;\n\t    \t\t\t\tvalues.push( data );\n\t\n\t    \t\t\t}\n\t    \t\t\treturn values;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function ( recursive ) {\n\t\n\t    \t\treturn new this.constructor().copy( this, recursive );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source, recursive ) {\n\t\n\t    \t\tif ( recursive === undefined ) recursive = true;\n\t\n\t    \t\tthis.name = source.name;\n\t\n\t    \t\tthis.up.copy( source.up );\n\t\n\t    \t\tthis.position.copy( source.position );\n\t    \t\tthis.quaternion.copy( source.quaternion );\n\t    \t\tthis.scale.copy( source.scale );\n\t\n\t    \t\tthis.matrix.copy( source.matrix );\n\t    \t\tthis.matrixWorld.copy( source.matrixWorld );\n\t\n\t    \t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t    \t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\n\t    \t\tthis.visible = source.visible;\n\t\n\t    \t\tthis.castShadow = source.castShadow;\n\t    \t\tthis.receiveShadow = source.receiveShadow;\n\t\n\t    \t\tthis.frustumCulled = source.frustumCulled;\n\t    \t\tthis.renderOrder = source.renderOrder;\n\t\n\t    \t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\t\n\t    \t\tif ( recursive === true ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\t\n\t    \t\t\t\tvar child = source.children[ i ];\n\t    \t\t\t\tthis.add( child.clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var count$2 = 0;\n\t    function Object3DIdCount() { return count$2++; };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Line3( start, end ) {\n\t\n\t    \tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t    \tthis.end = ( end !== undefined ) ? end : new Vector3();\n\t\n\t    }\n\t\n\t    Line3.prototype = {\n\t\n\t    \tconstructor: Line3,\n\t\n\t    \tset: function ( start, end ) {\n\t\n\t    \t\tthis.start.copy( start );\n\t    \t\tthis.end.copy( end );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( line ) {\n\t\n\t    \t\tthis.start.copy( line.start );\n\t    \t\tthis.end.copy( line.end );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetCenter: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\t\n\t    \t},\n\t\n\t    \tdelta: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.subVectors( this.end, this.start );\n\t\n\t    \t},\n\t\n\t    \tdistanceSq: function () {\n\t\n\t    \t\treturn this.start.distanceToSquared( this.end );\n\t\n\t    \t},\n\t\n\t    \tdistance: function () {\n\t\n\t    \t\treturn this.start.distanceTo( this.end );\n\t\n\t    \t},\n\t\n\t    \tat: function ( t, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\t\n\t    \t},\n\t\n\t    \tclosestPointToPointParameter: function () {\n\t\n\t    \t\tvar startP = new Vector3();\n\t    \t\tvar startEnd = new Vector3();\n\t\n\t    \t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\t\n\t    \t\t\tstartP.subVectors( point, this.start );\n\t    \t\t\tstartEnd.subVectors( this.end, this.start );\n\t\n\t    \t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t    \t\t\tvar startEnd_startP = startEnd.dot( startP );\n\t\n\t    \t\t\tvar t = startEnd_startP / startEnd2;\n\t\n\t    \t\t\tif ( clampToLine ) {\n\t\n\t    \t\t\t\tt = exports.Math.clamp( t, 0, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn t;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\t\n\t    \t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( matrix ) {\n\t\n\t    \t\tthis.start.applyMatrix4( matrix );\n\t    \t\tthis.end.applyMatrix4( matrix );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( line ) {\n\t\n\t    \t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Triangle( a, b, c ) {\n\t\n\t    \tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t    \tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t    \tthis.c = ( c !== undefined ) ? c : new Vector3();\n\t\n\t    }\n\t\n\t    Triangle.normal = function () {\n\t\n\t    \tvar v0 = new Vector3();\n\t\n\t    \treturn function normal( a, b, c, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tresult.subVectors( c, b );\n\t    \t\tv0.subVectors( a, b );\n\t    \t\tresult.cross( v0 );\n\t\n\t    \t\tvar resultLengthSq = result.lengthSq();\n\t    \t\tif ( resultLengthSq > 0 ) {\n\t\n\t    \t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result.set( 0, 0, 0 );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    // static/instance method to calculate barycentric coordinates\n\t    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t    Triangle.barycoordFromPoint = function () {\n\t\n\t    \tvar v0 = new Vector3();\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t\n\t    \treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\t\n\t    \t\tv0.subVectors( c, a );\n\t    \t\tv1.subVectors( b, a );\n\t    \t\tv2.subVectors( point, a );\n\t\n\t    \t\tvar dot00 = v0.dot( v0 );\n\t    \t\tvar dot01 = v0.dot( v1 );\n\t    \t\tvar dot02 = v0.dot( v2 );\n\t    \t\tvar dot11 = v1.dot( v1 );\n\t    \t\tvar dot12 = v1.dot( v2 );\n\t\n\t    \t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t// collinear or singular triangle\n\t    \t\tif ( denom === 0 ) {\n\t\n\t    \t\t\t// arbitrary location outside of triangle?\n\t    \t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t    \t\t\treturn result.set( - 2, - 1, - 1 );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar invDenom = 1 / denom;\n\t    \t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t    \t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\t\n\t    \t\t// barycentric coordinates must always sum to 1\n\t    \t\treturn result.set( 1 - u - v, v, u );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Triangle.containsPoint = function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t\n\t    \treturn function containsPoint( point, a, b, c ) {\n\t\n\t    \t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\t\n\t    \t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Triangle.prototype = {\n\t\n\t    \tconstructor: Triangle,\n\t\n\t    \tset: function ( a, b, c ) {\n\t\n\t    \t\tthis.a.copy( a );\n\t    \t\tthis.b.copy( b );\n\t    \t\tthis.c.copy( c );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\t\n\t    \t\tthis.a.copy( points[ i0 ] );\n\t    \t\tthis.b.copy( points[ i1 ] );\n\t    \t\tthis.c.copy( points[ i2 ] );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( triangle ) {\n\t\n\t    \t\tthis.a.copy( triangle.a );\n\t    \t\tthis.b.copy( triangle.b );\n\t    \t\tthis.c.copy( triangle.c );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tarea: function () {\n\t\n\t    \t\tvar v0 = new Vector3();\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function area() {\n\t\n\t    \t\t\tv0.subVectors( this.c, this.b );\n\t    \t\t\tv1.subVectors( this.a, this.b );\n\t\n\t    \t\t\treturn v0.cross( v1 ).length() * 0.5;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmidpoint: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\t\n\t    \t},\n\t\n\t    \tnormal: function ( optionalTarget ) {\n\t\n\t    \t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\t\n\t    \t},\n\t\n\t    \tplane: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Plane();\n\t\n\t    \t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\n\t    \t},\n\t\n\t    \tbarycoordFromPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\t\n\t    \t},\n\t\n\t    \tclosestPointToPoint: function () {\n\t\n\t    \t\tvar plane, edgeList, projectedPoint, closestPoint;\n\t\n\t    \t\treturn function closestPointToPoint( point, optionalTarget ) {\n\t\n\t    \t\t\tif ( plane === undefined ) {\n\t\n\t    \t\t\t\tplane = new Plane();\n\t    \t\t\t\tedgeList = [ new Line3(), new Line3(), new Line3() ];\n\t    \t\t\t\tprojectedPoint = new Vector3();\n\t    \t\t\t\tclosestPoint = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t    \t\t\tvar minDistance = Infinity;\n\t\n\t    \t\t\t// project the point onto the plane of the triangle\n\t\n\t    \t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t    \t\t\tplane.projectPoint( point, projectedPoint );\n\t\n\t    \t\t\t// check if the projection lies within the triangle\n\t\n\t    \t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\t\n\t    \t\t\t\t// if so, this is the closest point\n\t\n\t    \t\t\t\tresult.copy( projectedPoint );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\t\n\t    \t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t    \t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t    \t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\t\n\t    \t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\t\n\t    \t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\t\n\t    \t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\t\n\t    \t\t\t\t\tif( distance < minDistance ) {\n\t\n\t    \t\t\t\t\t\tminDistance = distance;\n\t\n\t    \t\t\t\t\t\tresult.copy( closestPoint );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tequals: function ( triangle ) {\n\t\n\t    \t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Face3( a, b, c, normal, color, materialIndex ) {\n\t\n\t    \tthis.a = a;\n\t    \tthis.b = b;\n\t    \tthis.c = c;\n\t\n\t    \tthis.normal = (normal && normal.isVector3) ? normal : new Vector3();\n\t    \tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\t\n\t    \tthis.color = (color && color.isColor) ? color : new Color();\n\t    \tthis.vertexColors = Array.isArray( color ) ? color : [];\n\t\n\t    \tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\t\n\t    }\n\t\n\t    Face3.prototype = {\n\t\n\t    \tconstructor: Face3,\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.a = source.a;\n\t    \t\tthis.b = source.b;\n\t    \t\tthis.c = source.c;\n\t\n\t    \t\tthis.normal.copy( source.normal );\n\t    \t\tthis.color.copy( source.color );\n\t\n\t    \t\tthis.materialIndex = source.materialIndex;\n\t\n\t    \t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  specularMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t     *  combine: THREE.Multiply,\n\t     *  reflectivity: <float>,\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  shading: THREE.SmoothShading,\n\t     *  depthTest: <bool>,\n\t     *  depthWrite: <bool>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshBasicMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshBasicMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // emissive\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.specularMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.combine = MultiplyOperation;\n\t    \tthis.reflectivity = 1;\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshBasicMaterial.prototype = Object.create( Material.prototype );\n\t    MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\t\n\t    MeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\t\n\t    MeshBasicMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.specularMap = source.specularMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.combine = source.combine;\n\t    \tthis.reflectivity = source.reflectivity;\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BufferAttribute( array, itemSize, normalized ) {\n\t\n\t    \tif ( Array.isArray( array ) ) {\n\t\n\t    \t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\t\n\t    \t}\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.array = array;\n\t    \tthis.itemSize = itemSize;\n\t    \tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t    \tthis.normalized = normalized === true;\n\t\n\t    \tthis.dynamic = false;\n\t    \tthis.updateRange = { offset: 0, count: - 1 };\n\t\n\t    \tthis.version = 0;\n\t\n\t    }\n\t\n\t    BufferAttribute.prototype = {\n\t\n\t    \tconstructor: BufferAttribute,\n\t\n\t    \tisBufferAttribute: true,\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.version ++;\n\t\n\t    \t},\n\t\n\t    \tsetDynamic: function ( value ) {\n\t\n\t    \t\tthis.dynamic = value;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.array = new source.array.constructor( source.array );\n\t    \t\tthis.itemSize = source.itemSize;\n\t    \t\tthis.count = source.count;\n\t    \t\tthis.normalized = source.normalized;\n\t\n\t    \t\tthis.dynamic = source.dynamic;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyAt: function ( index1, attribute, index2 ) {\n\t\n\t    \t\tindex1 *= this.itemSize;\n\t    \t\tindex2 *= attribute.itemSize;\n\t\n\t    \t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyArray: function ( array ) {\n\t\n\t    \t\tthis.array.set( array );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyColorsArray: function ( colors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar color = colors[ i ];\n\t\n\t    \t\t\tif ( color === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t    \t\t\t\tcolor = new Color();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = color.r;\n\t    \t\t\tarray[ offset ++ ] = color.g;\n\t    \t\t\tarray[ offset ++ ] = color.b;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyIndicesArray: function ( indices ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar index = indices[ i ];\n\t\n\t    \t\t\tarray[ offset ++ ] = index.a;\n\t    \t\t\tarray[ offset ++ ] = index.b;\n\t    \t\t\tarray[ offset ++ ] = index.c;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyVector2sArray: function ( vectors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar vector = vectors[ i ];\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t    \t\t\t\tvector = new Vector2();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = vector.x;\n\t    \t\t\tarray[ offset ++ ] = vector.y;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyVector3sArray: function ( vectors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar vector = vectors[ i ];\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t    \t\t\t\tvector = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = vector.x;\n\t    \t\t\tarray[ offset ++ ] = vector.y;\n\t    \t\t\tarray[ offset ++ ] = vector.z;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyVector4sArray: function ( vectors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar vector = vectors[ i ];\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t    \t\t\t\tvector = new Vector4();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = vector.x;\n\t    \t\t\tarray[ offset ++ ] = vector.y;\n\t    \t\t\tarray[ offset ++ ] = vector.z;\n\t    \t\t\tarray[ offset ++ ] = vector.w;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tset: function ( value, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.array.set( value, offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetX: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize ];\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( index, x ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize ] = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetY: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize + 1 ];\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( index, y ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetZ: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize + 2 ];\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( index, z ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetW: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize + 3 ];\n\t\n\t    \t},\n\t\n\t    \tsetW: function ( index, w ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXY: function ( index, x, y ) {\n\t\n\t    \t\tindex *= this.itemSize;\n\t\n\t    \t\tthis.array[ index + 0 ] = x;\n\t    \t\tthis.array[ index + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZ: function ( index, x, y, z ) {\n\t\n\t    \t\tindex *= this.itemSize;\n\t\n\t    \t\tthis.array[ index + 0 ] = x;\n\t    \t\tthis.array[ index + 1 ] = y;\n\t    \t\tthis.array[ index + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZW: function ( index, x, y, z, w ) {\n\t\n\t    \t\tindex *= this.itemSize;\n\t\n\t    \t\tthis.array[ index + 0 ] = x;\n\t    \t\tthis.array[ index + 1 ] = y;\n\t    \t\tthis.array[ index + 2 ] = z;\n\t    \t\tthis.array[ index + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    //\n\t\n\t    function Int8Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Int8Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint8Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint8Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint8ClampedAttribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Int16Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Int16Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint16Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint16Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Int32Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Int32Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint32Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint32Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Float32Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Float32Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Float64Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Float64Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    // Deprecated\n\t\n\t    function DynamicBufferAttribute( array, itemSize ) {\n\t\n\t    \tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t    \treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author kile / http://kile.stravaganza.org/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Geometry() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'Geometry';\n\t\n\t    \tthis.vertices = [];\n\t    \tthis.colors = [];\n\t    \tthis.faces = [];\n\t    \tthis.faceVertexUvs = [ [] ];\n\t\n\t    \tthis.morphTargets = [];\n\t    \tthis.morphNormals = [];\n\t\n\t    \tthis.skinWeights = [];\n\t    \tthis.skinIndices = [];\n\t\n\t    \tthis.lineDistances = [];\n\t\n\t    \tthis.boundingBox = null;\n\t    \tthis.boundingSphere = null;\n\t\n\t    \t// update flags\n\t\n\t    \tthis.elementsNeedUpdate = false;\n\t    \tthis.verticesNeedUpdate = false;\n\t    \tthis.uvsNeedUpdate = false;\n\t    \tthis.normalsNeedUpdate = false;\n\t    \tthis.colorsNeedUpdate = false;\n\t    \tthis.lineDistancesNeedUpdate = false;\n\t    \tthis.groupsNeedUpdate = false;\n\t\n\t    }\n\t\n\t    Object.assign( Geometry.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisGeometry: true,\n\t\n\t    \tapplyMatrix: function ( matrix ) {\n\t\n\t    \t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t    \t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar vertex = this.vertices[ i ];\n\t    \t\t\tvertex.applyMatrix4( matrix );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar face = this.faces[ i ];\n\t    \t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingBox();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingSphere();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.verticesNeedUpdate = true;\n\t    \t\tthis.normalsNeedUpdate = true;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trotateX: function () {\n\t\n\t    \t\t// rotate geometry around world x-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateX( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationX( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateY: function () {\n\t\n\t    \t\t// rotate geometry around world y-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateY( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationY( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateZ: function () {\n\t\n\t    \t\t// rotate geometry around world z-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateZ( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationZ( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function () {\n\t\n\t    \t\t// translate geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function translate( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeTranslation( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tscale: function () {\n\t\n\t    \t\t// scale geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function scale( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeScale( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\tvar obj;\n\t\n\t    \t\treturn function lookAt( vector ) {\n\t\n\t    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\t\n\t    \t\t\tobj.lookAt( vector );\n\t\n\t    \t\t\tobj.updateMatrix();\n\t\n\t    \t\t\tthis.applyMatrix( obj.matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tfromBufferGeometry: function ( geometry ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t    \t\tvar attributes = geometry.attributes;\n\t\n\t    \t\tvar positions = attributes.position.array;\n\t    \t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t    \t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t    \t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t    \t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\t\n\t    \t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\t\n\t    \t\tvar tempNormals = [];\n\t    \t\tvar tempUVs = [];\n\t    \t\tvar tempUVs2 = [];\n\t\n\t    \t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\t\n\t    \t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\t\n\t    \t\t\tif ( normals !== undefined ) {\n\t\n\t    \t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( colors !== undefined ) {\n\t\n\t    \t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( uvs !== undefined ) {\n\t\n\t    \t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( uvs2 !== undefined ) {\n\t\n\t    \t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction addFace( a, b, c, materialIndex ) {\n\t\n\t    \t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t    \t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\t\n\t    \t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\t\n\t    \t\t\tscope.faces.push( face );\n\t\n\t    \t\t\tif ( uvs !== undefined ) {\n\t\n\t    \t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( uvs2 !== undefined ) {\n\t\n\t    \t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( indices !== undefined ) {\n\t\n\t    \t\t\tvar groups = geometry.groups;\n\t\n\t    \t\t\tif ( groups.length > 0 ) {\n\t\n\t    \t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\t\n\t    \t\t\t\t\tvar group = groups[ i ];\n\t\n\t    \t\t\t\t\tvar start = group.start;\n\t    \t\t\t\t\tvar count = group.count;\n\t\n\t    \t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\t\n\t    \t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\t\n\t    \t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\t\n\t    \t\t\t\taddFace( i, i + 1, i + 2 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.computeFaceNormals();\n\t\n\t    \t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcenter: function () {\n\t\n\t    \t\tthis.computeBoundingBox();\n\t\n\t    \t\tvar offset = this.boundingBox.getCenter().negate();\n\t\n\t    \t\tthis.translate( offset.x, offset.y, offset.z );\n\t\n\t    \t\treturn offset;\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\tthis.computeBoundingSphere();\n\t\n\t    \t\tvar center = this.boundingSphere.center;\n\t    \t\tvar radius = this.boundingSphere.radius;\n\t\n\t    \t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\t\n\t    \t\tvar matrix = new Matrix4();\n\t    \t\tmatrix.set(\n\t    \t\t\ts, 0, 0, - s * center.x,\n\t    \t\t\t0, s, 0, - s * center.y,\n\t    \t\t\t0, 0, s, - s * center.z,\n\t    \t\t\t0, 0, 0, 1\n\t    \t\t);\n\t\n\t    \t\tthis.applyMatrix( matrix );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcomputeFaceNormals: function () {\n\t\n\t    \t\tvar cb = new Vector3(), ab = new Vector3();\n\t\n\t    \t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tvar face = this.faces[ f ];\n\t\n\t    \t\t\tvar vA = this.vertices[ face.a ];\n\t    \t\t\tvar vB = this.vertices[ face.b ];\n\t    \t\t\tvar vC = this.vertices[ face.c ];\n\t\n\t    \t\t\tcb.subVectors( vC, vB );\n\t    \t\t\tab.subVectors( vA, vB );\n\t    \t\t\tcb.cross( ab );\n\t\n\t    \t\t\tcb.normalize();\n\t\n\t    \t\t\tface.normal.copy( cb );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeVertexNormals: function ( areaWeighted ) {\n\t\n\t    \t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\t\n\t    \t\tvar v, vl, f, fl, face, vertices;\n\t\n\t    \t\tvertices = new Array( this.vertices.length );\n\t\n\t    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\t\n\t    \t\t\tvertices[ v ] = new Vector3();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( areaWeighted ) {\n\t\n\t    \t\t\t// vertex normals weighted by triangle areas\n\t    \t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\t\n\t    \t\t\tvar vA, vB, vC;\n\t    \t\t\tvar cb = new Vector3(), ab = new Vector3();\n\t\n\t    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\t\tvA = this.vertices[ face.a ];\n\t    \t\t\t\tvB = this.vertices[ face.b ];\n\t    \t\t\t\tvC = this.vertices[ face.c ];\n\t\n\t    \t\t\t\tcb.subVectors( vC, vB );\n\t    \t\t\t\tab.subVectors( vA, vB );\n\t    \t\t\t\tcb.cross( ab );\n\t\n\t    \t\t\t\tvertices[ face.a ].add( cb );\n\t    \t\t\t\tvertices[ face.b ].add( cb );\n\t    \t\t\t\tvertices[ face.c ].add( cb );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\t\tvertices[ face.a ].add( face.normal );\n\t    \t\t\t\tvertices[ face.b ].add( face.normal );\n\t    \t\t\t\tvertices[ face.c ].add( face.normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\t\n\t    \t\t\tvertices[ v ].normalize();\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t    \t\t\tif ( vertexNormals.length === 3 ) {\n\t\n\t    \t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t    \t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t    \t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t    \t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t    \t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.faces.length > 0 ) {\n\t\n\t    \t\t\tthis.normalsNeedUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeMorphNormals: function () {\n\t\n\t    \t\tvar i, il, f, fl, face;\n\t\n\t    \t\t// save original normals\n\t    \t\t// - create temp variables on first access\n\t    \t\t//   otherwise just copy (for faster repeated calls)\n\t\n\t    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\tif ( ! face.__originalFaceNormal ) {\n\t\n\t    \t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\t\n\t    \t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\t\n\t    \t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// use temp geometry to compute face and vertex normals for each morph\n\t\n\t    \t\tvar tmpGeo = new Geometry();\n\t    \t\ttmpGeo.faces = this.faces;\n\t\n\t    \t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\t\n\t    \t\t\t// create on first access\n\t\n\t    \t\t\tif ( ! this.morphNormals[ i ] ) {\n\t\n\t    \t\t\t\tthis.morphNormals[ i ] = {};\n\t    \t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t    \t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\t\n\t    \t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t    \t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\t\n\t    \t\t\t\tvar faceNormal, vertexNormals;\n\t\n\t    \t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\t\tfaceNormal = new Vector3();\n\t    \t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\t\n\t    \t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t    \t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar morphNormals = this.morphNormals[ i ];\n\t\n\t    \t\t\t// set vertices to morph target\n\t\n\t    \t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\t\n\t    \t\t\t// compute morph normals\n\t\n\t    \t\t\ttmpGeo.computeFaceNormals();\n\t    \t\t\ttmpGeo.computeVertexNormals();\n\t\n\t    \t\t\t// store morph normals\n\t\n\t    \t\t\tvar faceNormal, vertexNormals;\n\t\n\t    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t    \t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\t\n\t    \t\t\t\tfaceNormal.copy( face.normal );\n\t\n\t    \t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t    \t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t    \t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// restore original normals\n\t\n\t    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\tface.normal = face.__originalFaceNormal;\n\t    \t\t\tface.vertexNormals = face.__originalVertexNormals;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeTangents: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\t\n\t    \t},\n\t\n\t    \tcomputeLineDistances: function () {\n\t\n\t    \t\tvar d = 0;\n\t    \t\tvar vertices = this.vertices;\n\t\n\t    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tif ( i > 0 ) {\n\t\n\t    \t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.lineDistances[ i ] = d;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingBox: function () {\n\t\n\t    \t\tif ( this.boundingBox === null ) {\n\t\n\t    \t\t\tthis.boundingBox = new Box3();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.boundingBox.setFromPoints( this.vertices );\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingSphere: function () {\n\t\n\t    \t\tif ( this.boundingSphere === null ) {\n\t\n\t    \t\t\tthis.boundingSphere = new Sphere();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.boundingSphere.setFromPoints( this.vertices );\n\t\n\t    \t},\n\t\n\t    \tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\t\n\t    \t\tif ( (geometry && geometry.isGeometry) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar normalMatrix,\n\t    \t\tvertexOffset = this.vertices.length,\n\t    \t\tvertices1 = this.vertices,\n\t    \t\tvertices2 = geometry.vertices,\n\t    \t\tfaces1 = this.faces,\n\t    \t\tfaces2 = geometry.faces,\n\t    \t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t    \t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n\t    \t\tcolors1 = this.colors,\n\t    \t\tcolors2 = geometry.colors;\n\t\n\t    \t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\t\n\t    \t\tif ( matrix !== undefined ) {\n\t\n\t    \t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t    \t\t}\n\t\n\t    \t\t// vertices\n\t\n\t    \t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar vertex = vertices2[ i ];\n\t\n\t    \t\t\tvar vertexCopy = vertex.clone();\n\t\n\t    \t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\t\n\t    \t\t\tvertices1.push( vertexCopy );\n\t\n\t    \t\t}\n\t\n\t    \t\t// colors\n\t\n\t    \t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tcolors1.push( colors2[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\t// faces\n\t\n\t    \t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t    \t\t\tfaceVertexNormals = face.vertexNormals,\n\t    \t\t\tfaceVertexColors = face.vertexColors;\n\t\n\t    \t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t    \t\t\tfaceCopy.normal.copy( face.normal );\n\t\n\t    \t\t\tif ( normalMatrix !== undefined ) {\n\t\n\t    \t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\t\n\t    \t\t\t\tif ( normalMatrix !== undefined ) {\n\t\n\t    \t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfaceCopy.vertexNormals.push( normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfaceCopy.color.copy( face.color );\n\t\n\t    \t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tcolor = faceVertexColors[ j ];\n\t    \t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\t\n\t    \t\t\tfaces1.push( faceCopy );\n\t\n\t    \t\t}\n\t\n\t    \t\t// uvs\n\t\n\t    \t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\t\n\t    \t\t\tif ( uv === undefined ) {\n\t\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tuvCopy.push( uv[ j ].clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tuvs1.push( uvCopy );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tmergeMesh: function ( mesh ) {\n\t\n\t    \t\tif ( (mesh && mesh.isMesh) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\t\n\t    \t\tthis.merge( mesh.geometry, mesh.matrix );\n\t\n\t    \t},\n\t\n\t    \t/*\n\t    \t * Checks for duplicate vertices with hashmap.\n\t    \t * Duplicated vertices are removed\n\t    \t * and faces' vertices are updated.\n\t    \t */\n\t\n\t    \tmergeVertices: function () {\n\t\n\t    \t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t    \t\tvar unique = [], changes = [];\n\t\n\t    \t\tvar v, key;\n\t    \t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t    \t\tvar precision = Math.pow( 10, precisionPoints );\n\t    \t\tvar i, il, face;\n\t    \t\tvar indices, j, jl;\n\t\n\t    \t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tv = this.vertices[ i ];\n\t    \t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\t\n\t    \t\t\tif ( verticesMap[ key ] === undefined ) {\n\t\n\t    \t\t\t\tverticesMap[ key ] = i;\n\t    \t\t\t\tunique.push( this.vertices[ i ] );\n\t    \t\t\t\tchanges[ i ] = unique.length - 1;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t    \t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\t// if faces are completely degenerate after merging vertices, we\n\t    \t\t// have to remove them from the geometry.\n\t    \t\tvar faceIndicesToRemove = [];\n\t\n\t    \t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\t\n\t    \t\t\tface = this.faces[ i ];\n\t\n\t    \t\t\tface.a = changes[ face.a ];\n\t    \t\t\tface.b = changes[ face.b ];\n\t    \t\t\tface.c = changes[ face.c ];\n\t\n\t    \t\t\tindices = [ face.a, face.b, face.c ];\n\t\n\t    \t\t\tvar dupIndex = - 1;\n\t\n\t    \t\t\t// if any duplicate vertices are found in a Face3\n\t    \t\t\t// we have to remove the face as nothing can be saved\n\t    \t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\t\n\t    \t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\t\n\t    \t\t\t\t\tdupIndex = n;\n\t    \t\t\t\t\tfaceIndicesToRemove.push( i );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\t\n\t    \t\t\tvar idx = faceIndicesToRemove[ i ];\n\t\n\t    \t\t\tthis.faces.splice( idx, 1 );\n\t\n\t    \t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Use unique set of vertices\n\t\n\t    \t\tvar diff = this.vertices.length - unique.length;\n\t    \t\tthis.vertices = unique;\n\t    \t\treturn diff;\n\t\n\t    \t},\n\t\n\t    \tsortFacesByMaterialIndex: function () {\n\t\n\t    \t\tvar faces = this.faces;\n\t    \t\tvar length = faces.length;\n\t\n\t    \t\t// tag faces\n\t\n\t    \t\tfor ( var i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\tfaces[ i ]._id = i;\n\t\n\t    \t\t}\n\t\n\t    \t\t// sort faces\n\t\n\t    \t\tfunction materialIndexSort( a, b ) {\n\t\n\t    \t\t\treturn a.materialIndex - b.materialIndex;\n\t\n\t    \t\t}\n\t\n\t    \t\tfaces.sort( materialIndexSort );\n\t\n\t    \t\t// sort uvs\n\t\n\t    \t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t    \t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\t\n\t    \t\tvar newUvs1, newUvs2;\n\t\n\t    \t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t    \t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\t\n\t    \t\tfor ( var i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\tvar id = faces[ i ]._id;\n\t\n\t    \t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t    \t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t    \t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\tvar data = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Geometry',\n\t    \t\t\t\tgenerator: 'Geometry.toJSON'\n\t    \t\t\t}\n\t    \t\t};\n\t\n\t    \t\t// standard Geometry serialization\n\t\n\t    \t\tdata.uuid = this.uuid;\n\t    \t\tdata.type = this.type;\n\t    \t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t    \t\tif ( this.parameters !== undefined ) {\n\t\n\t    \t\t\tvar parameters = this.parameters;\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn data;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar vertices = [];\n\t\n\t    \t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\t\n\t    \t\t\tvar vertex = this.vertices[ i ];\n\t    \t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar faces = [];\n\t    \t\tvar normals = [];\n\t    \t\tvar normalsHash = {};\n\t    \t\tvar colors = [];\n\t    \t\tvar colorsHash = {};\n\t    \t\tvar uvs = [];\n\t    \t\tvar uvsHash = {};\n\t\n\t    \t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\t\n\t    \t\t\tvar face = this.faces[ i ];\n\t\n\t    \t\t\tvar hasMaterial = true;\n\t    \t\t\tvar hasFaceUv = false; // deprecated\n\t    \t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t    \t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t    \t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t    \t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t    \t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\t\n\t    \t\t\tvar faceType = 0;\n\t\n\t    \t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t    \t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t    \t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t    \t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t    \t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t    \t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t    \t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t    \t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\t\n\t    \t\t\tfaces.push( faceType );\n\t    \t\t\tfaces.push( face.a, face.b, face.c );\n\t    \t\t\tfaces.push( face.materialIndex );\n\t\n\t    \t\t\tif ( hasFaceVertexUv ) {\n\t\n\t    \t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\t\n\t    \t\t\t\tfaces.push(\n\t    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t    \t\t\t\t);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceNormal ) {\n\t\n\t    \t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t    \t\t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t    \t\t\t\tfaces.push(\n\t    \t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t    \t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t    \t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t    \t\t\t\t);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceColor ) {\n\t\n\t    \t\t\t\tfaces.push( getColorIndex( face.color ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexColor ) {\n\t\n\t    \t\t\t\tvar vertexColors = face.vertexColors;\n\t\n\t    \t\t\t\tfaces.push(\n\t    \t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t    \t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t    \t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t    \t\t\t\t);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction setBit( value, position, enabled ) {\n\t\n\t    \t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getNormalIndex( normal ) {\n\t\n\t    \t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\t\n\t    \t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\t\n\t    \t\t\t\treturn normalsHash[ hash ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t    \t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\n\t    \t\t\treturn normalsHash[ hash ];\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getColorIndex( color ) {\n\t\n\t    \t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\t\n\t    \t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\t\n\t    \t\t\t\treturn colorsHash[ hash ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcolorsHash[ hash ] = colors.length;\n\t    \t\t\tcolors.push( color.getHex() );\n\t\n\t    \t\t\treturn colorsHash[ hash ];\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getUvIndex( uv ) {\n\t\n\t    \t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\t\n\t    \t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\t\n\t    \t\t\t\treturn uvsHash[ hash ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t    \t\t\tuvs.push( uv.x, uv.y );\n\t\n\t    \t\t\treturn uvsHash[ hash ];\n\t\n\t    \t\t}\n\t\n\t    \t\tdata.data = {};\n\t\n\t    \t\tdata.data.vertices = vertices;\n\t    \t\tdata.data.normals = normals;\n\t    \t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t    \t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t    \t\tdata.data.faces = faces;\n\t\n\t    \t\treturn data;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\t/*\n\t    \t\t// Handle primitives\n\t\n\t    \t\tvar parameters = this.parameters;\n\t\n\t    \t\tif ( parameters !== undefined ) {\n\t\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tvalues.push( parameters[ key ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t    \t\t\tthis.constructor.apply( geometry, values );\n\t    \t\t\treturn geometry;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t    \t\t*/\n\t\n\t    \t\treturn new Geometry().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.vertices = [];\n\t    \t\tthis.faces = [];\n\t    \t\tthis.faceVertexUvs = [ [] ];\n\t    \t\tthis.colors = [];\n\t\n\t    \t\tvar vertices = source.vertices;\n\t\n\t    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.vertices.push( vertices[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar colors = source.colors;\n\t\n\t    \t\tfor ( var i = 0, il = colors.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.colors.push( colors[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar faces = source.faces;\n\t\n\t    \t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.faces.push( faces[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\t\n\t    \t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\t\n\t    \t\t\t\tthis.faceVertexUvs[ i ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\t\n\t    \t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\t\n\t    \t\t\t\t\tvar uv = uvs[ k ];\n\t\n\t    \t\t\t\t\tuvsCopy.push( uv.clone() );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var count$3 = 0;\n\t    function GeometryIdCount() { return count$3++; };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function DirectGeometry() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'DirectGeometry';\n\t\n\t    \tthis.indices = [];\n\t    \tthis.vertices = [];\n\t    \tthis.normals = [];\n\t    \tthis.colors = [];\n\t    \tthis.uvs = [];\n\t    \tthis.uvs2 = [];\n\t\n\t    \tthis.groups = [];\n\t\n\t    \tthis.morphTargets = {};\n\t\n\t    \tthis.skinWeights = [];\n\t    \tthis.skinIndices = [];\n\t\n\t    \t// this.lineDistances = [];\n\t\n\t    \tthis.boundingBox = null;\n\t    \tthis.boundingSphere = null;\n\t\n\t    \t// update flags\n\t\n\t    \tthis.verticesNeedUpdate = false;\n\t    \tthis.normalsNeedUpdate = false;\n\t    \tthis.colorsNeedUpdate = false;\n\t    \tthis.uvsNeedUpdate = false;\n\t    \tthis.groupsNeedUpdate = false;\n\t\n\t    }\n\t\n\t    Object.assign( DirectGeometry.prototype, EventDispatcher.prototype, {\n\t\n\t    \tcomputeBoundingBox: Geometry.prototype.computeBoundingBox,\n\t    \tcomputeBoundingSphere: Geometry.prototype.computeBoundingSphere,\n\t\n\t    \tcomputeFaceNormals: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\t\n\t    \t},\n\t\n\t    \tcomputeVertexNormals: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\t\n\t    \t},\n\t\n\t    \tcomputeGroups: function ( geometry ) {\n\t\n\t    \t\tvar group;\n\t    \t\tvar groups = [];\n\t    \t\tvar materialIndex;\n\t\n\t    \t\tvar faces = geometry.faces;\n\t\n\t    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\t// materials\n\t\n\t    \t\t\tif ( face.materialIndex !== materialIndex ) {\n\t\n\t    \t\t\t\tmaterialIndex = face.materialIndex;\n\t\n\t    \t\t\t\tif ( group !== undefined ) {\n\t\n\t    \t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t    \t\t\t\t\tgroups.push( group );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tgroup = {\n\t    \t\t\t\t\tstart: i * 3,\n\t    \t\t\t\t\tmaterialIndex: materialIndex\n\t    \t\t\t\t};\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( group !== undefined ) {\n\t\n\t    \t\t\tgroup.count = ( i * 3 ) - group.start;\n\t    \t\t\tgroups.push( group );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.groups = groups;\n\t\n\t    \t},\n\t\n\t    \tfromGeometry: function ( geometry ) {\n\t\n\t    \t\tvar faces = geometry.faces;\n\t    \t\tvar vertices = geometry.vertices;\n\t    \t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\t\n\t    \t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t    \t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\t\n\t    \t\t// morphs\n\t\n\t    \t\tvar morphTargets = geometry.morphTargets;\n\t    \t\tvar morphTargetsLength = morphTargets.length;\n\t\n\t    \t\tvar morphTargetsPosition;\n\t\n\t    \t\tif ( morphTargetsLength > 0 ) {\n\t\n\t    \t\t\tmorphTargetsPosition = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\t\n\t    \t\t\t\tmorphTargetsPosition[ i ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.morphTargets.position = morphTargetsPosition;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar morphNormals = geometry.morphNormals;\n\t    \t\tvar morphNormalsLength = morphNormals.length;\n\t\n\t    \t\tvar morphTargetsNormal;\n\t\n\t    \t\tif ( morphNormalsLength > 0 ) {\n\t\n\t    \t\t\tmorphTargetsNormal = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\t\n\t    \t\t\t\tmorphTargetsNormal[ i ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\t\n\t    \t\t}\n\t\n\t    \t\t// skins\n\t\n\t    \t\tvar skinIndices = geometry.skinIndices;\n\t    \t\tvar skinWeights = geometry.skinWeights;\n\t\n\t    \t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t    \t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\t\n\t    \t\t//\n\t\n\t    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\t\n\t    \t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t    \t\t\tif ( vertexNormals.length === 3 ) {\n\t\n\t    \t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar normal = face.normal;\n\t\n\t    \t\t\t\tthis.normals.push( normal, normal, normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar vertexColors = face.vertexColors;\n\t\n\t    \t\t\tif ( vertexColors.length === 3 ) {\n\t\n\t    \t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar color = face.color;\n\t\n\t    \t\t\t\tthis.colors.push( color, color, color );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexUv === true ) {\n\t\n\t    \t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\t\n\t    \t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t    \t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\t\n\t    \t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexUv2 === true ) {\n\t\n\t    \t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\t\n\t    \t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t    \t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\t\n\t    \t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// morphs\n\t\n\t    \t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\t\n\t    \t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\t\n\t    \t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\t\n\t    \t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\t\n\t    \t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// skins\n\t\n\t    \t\t\tif ( hasSkinIndices ) {\n\t\n\t    \t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasSkinWeights ) {\n\t\n\t    \t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.computeGroups( geometry );\n\t\n\t    \t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t    \t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t    \t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t    \t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t    \t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BufferGeometry() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'BufferGeometry';\n\t\n\t    \tthis.index = null;\n\t    \tthis.attributes = {};\n\t\n\t    \tthis.morphAttributes = {};\n\t\n\t    \tthis.groups = [];\n\t\n\t    \tthis.boundingBox = null;\n\t    \tthis.boundingSphere = null;\n\t\n\t    \tthis.drawRange = { start: 0, count: Infinity };\n\t\n\t    }\n\t\n\t    Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisBufferGeometry: true,\n\t\n\t    \tgetIndex: function () {\n\t\n\t    \t\treturn this.index;\n\t\n\t    \t},\n\t\n\t    \tsetIndex: function ( index ) {\n\t\n\t    \t\tthis.index = index;\n\t\n\t    \t},\n\t\n\t    \taddAttribute: function ( name, attribute ) {\n\t\n\t    \t\tif ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\t\n\t    \t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\t\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( name === 'index' ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t    \t\t\tthis.setIndex( attribute );\n\t\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.attributes[ name ] = attribute;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetAttribute: function ( name ) {\n\t\n\t    \t\treturn this.attributes[ name ];\n\t\n\t    \t},\n\t\n\t    \tremoveAttribute: function ( name ) {\n\t\n\t    \t\tdelete this.attributes[ name ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddGroup: function ( start, count, materialIndex ) {\n\t\n\t    \t\tthis.groups.push( {\n\t\n\t    \t\t\tstart: start,\n\t    \t\t\tcount: count,\n\t    \t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\t\n\t    \t\t} );\n\t\n\t    \t},\n\t\n\t    \tclearGroups: function () {\n\t\n\t    \t\tthis.groups = [];\n\t\n\t    \t},\n\t\n\t    \tsetDrawRange: function ( start, count ) {\n\t\n\t    \t\tthis.drawRange.start = start;\n\t    \t\tthis.drawRange.count = count;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix: function ( matrix ) {\n\t\n\t    \t\tvar position = this.attributes.position;\n\t\n\t    \t\tif ( position !== undefined ) {\n\t\n\t    \t\t\tmatrix.applyToVector3Array( position.array );\n\t    \t\t\tposition.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar normal = this.attributes.normal;\n\t\n\t    \t\tif ( normal !== undefined ) {\n\t\n\t    \t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t    \t\t\tnormalMatrix.applyToVector3Array( normal.array );\n\t    \t\t\tnormal.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingBox();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingSphere();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trotateX: function () {\n\t\n\t    \t\t// rotate geometry around world x-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateX( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationX( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateY: function () {\n\t\n\t    \t\t// rotate geometry around world y-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateY( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationY( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateZ: function () {\n\t\n\t    \t\t// rotate geometry around world z-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateZ( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationZ( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function () {\n\t\n\t    \t\t// translate geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function translate( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeTranslation( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tscale: function () {\n\t\n\t    \t\t// scale geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function scale( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeScale( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\tvar obj;\n\t\n\t    \t\treturn function lookAt( vector ) {\n\t\n\t    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\t\n\t    \t\t\tobj.lookAt( vector );\n\t\n\t    \t\t\tobj.updateMatrix();\n\t\n\t    \t\t\tthis.applyMatrix( obj.matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tcenter: function () {\n\t\n\t    \t\tthis.computeBoundingBox();\n\t\n\t    \t\tvar offset = this.boundingBox.getCenter().negate();\n\t\n\t    \t\tthis.translate( offset.x, offset.y, offset.z );\n\t\n\t    \t\treturn offset;\n\t\n\t    \t},\n\t\n\t    \tsetFromObject: function ( object ) {\n\t\n\t    \t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tif ( (object && object.isPoints) || (object && object.isLine) ) {\n\t\n\t    \t\t\tvar positions = new Float32Attribute( geometry.vertices.length * 3, 3 );\n\t    \t\t\tvar colors = new Float32Attribute( geometry.colors.length * 3, 3 );\n\t\n\t    \t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t    \t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\t\n\t    \t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\t\n\t    \t\t\t\tvar lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );\n\t\n\t    \t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t    \t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (object && object.isMesh) ) {\n\t\n\t    \t\t\tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\tthis.fromGeometry( geometry );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tupdateFromObject: function ( object ) {\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tif ( (object && object.isMesh) ) {\n\t\n\t    \t\t\tvar direct = geometry.__directGeometry;\n\t\n\t    \t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\t\n\t    \t\t\t\tdirect = undefined;\n\t    \t\t\t\tgeometry.elementsNeedUpdate = false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( direct === undefined ) {\n\t\n\t    \t\t\t\treturn this.fromGeometry( geometry );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t    \t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t    \t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t    \t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t    \t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\t\n\t    \t\t\tgeometry.verticesNeedUpdate = false;\n\t    \t\t\tgeometry.normalsNeedUpdate = false;\n\t    \t\t\tgeometry.colorsNeedUpdate = false;\n\t    \t\t\tgeometry.uvsNeedUpdate = false;\n\t    \t\t\tgeometry.groupsNeedUpdate = false;\n\t\n\t    \t\t\tgeometry = direct;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attribute;\n\t\n\t    \t\tif ( geometry.verticesNeedUpdate === true ) {\n\t\n\t    \t\t\tattribute = this.attributes.position;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.verticesNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.normalsNeedUpdate === true ) {\n\t\n\t    \t\t\tattribute = this.attributes.normal;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.normalsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.colorsNeedUpdate === true ) {\n\t\n\t    \t\t\tattribute = this.attributes.color;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.colorsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.uvsNeedUpdate ) {\n\t\n\t    \t\t\tattribute = this.attributes.uv;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.uvsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.lineDistancesNeedUpdate ) {\n\t\n\t    \t\t\tattribute = this.attributes.lineDistance;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.lineDistancesNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.groupsNeedUpdate ) {\n\t\n\t    \t\t\tgeometry.computeGroups( object.geometry );\n\t    \t\t\tthis.groups = geometry.groups;\n\t\n\t    \t\t\tgeometry.groupsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tfromGeometry: function ( geometry ) {\n\t\n\t    \t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\t\n\t    \t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\t\n\t    \t},\n\t\n\t    \tfromDirectGeometry: function ( geometry ) {\n\t\n\t    \t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t    \t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\t\n\t    \t\tif ( geometry.normals.length > 0 ) {\n\t\n\t    \t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t    \t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.colors.length > 0 ) {\n\t\n\t    \t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t    \t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.uvs.length > 0 ) {\n\t\n\t    \t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t    \t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.uvs2.length > 0 ) {\n\t\n\t    \t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t    \t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.indices.length > 0 ) {\n\t\n\t    \t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n\t    \t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t    \t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\t\n\t    \t\t}\n\t\n\t    \t\t// groups\n\t\n\t    \t\tthis.groups = geometry.groups;\n\t\n\t    \t\t// morphs\n\t\n\t    \t\tfor ( var name in geometry.morphTargets ) {\n\t\n\t    \t\t\tvar array = [];\n\t    \t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\t\n\t    \t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\n\t    \t\t\t\tvar attribute = new Float32Attribute( morphTarget.length * 3, 3 );\n\t\n\t    \t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.morphAttributes[ name ] = array;\n\t\n\t    \t\t}\n\t\n\t    \t\t// skinning\n\t\n\t    \t\tif ( geometry.skinIndices.length > 0 ) {\n\t\n\t    \t\t\tvar skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );\n\t    \t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.skinWeights.length > 0 ) {\n\t\n\t    \t\t\tvar skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );\n\t    \t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingBox: function () {\n\t\n\t    \t\tif ( this.boundingBox === null ) {\n\t\n\t    \t\t\tthis.boundingBox = new Box3();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar positions = this.attributes.position.array;\n\t\n\t    \t\tif ( positions !== undefined ) {\n\t\n\t    \t\t\tthis.boundingBox.setFromArray( positions );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.boundingBox.makeEmpty();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingSphere: function () {\n\t\n\t    \t\tvar box = new Box3();\n\t    \t\tvar vector = new Vector3();\n\t\n\t    \t\treturn function computeBoundingSphere() {\n\t\n\t    \t\t\tif ( this.boundingSphere === null ) {\n\t\n\t    \t\t\t\tthis.boundingSphere = new Sphere();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar positions = this.attributes.position;\n\t\n\t    \t\t\tif ( positions ) {\n\t\n\t    \t\t\t\tvar array = positions.array;\n\t    \t\t\t\tvar center = this.boundingSphere.center;\n\t\n\t    \t\t\t\tbox.setFromArray( array );\n\t    \t\t\t\tbox.getCenter( center );\n\t\n\t    \t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t    \t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\t\n\t    \t\t\t\tvar maxRadiusSq = 0;\n\t\n\t    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\t\n\t    \t\t\t\t\tvector.fromArray( array, i );\n\t    \t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\t\n\t    \t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tcomputeFaceNormals: function () {\n\t\n\t    \t\t// backwards compatibility\n\t\n\t    \t},\n\t\n\t    \tcomputeVertexNormals: function () {\n\t\n\t    \t\tvar index = this.index;\n\t    \t\tvar attributes = this.attributes;\n\t    \t\tvar groups = this.groups;\n\t\n\t    \t\tif ( attributes.position ) {\n\t\n\t    \t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\tif ( attributes.normal === undefined ) {\n\t\n\t    \t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// reset existing normals to zero\n\t\n\t    \t\t\t\tvar array = attributes.normal.array;\n\t\n\t    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\tarray[ i ] = 0;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar normals = attributes.normal.array;\n\t\n\t    \t\t\tvar vA, vB, vC,\n\t\n\t    \t\t\tpA = new Vector3(),\n\t    \t\t\tpB = new Vector3(),\n\t    \t\t\tpC = new Vector3(),\n\t\n\t    \t\t\tcb = new Vector3(),\n\t    \t\t\tab = new Vector3();\n\t\n\t    \t\t\t// indexed elements\n\t\n\t    \t\t\tif ( index ) {\n\t\n\t    \t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\tif ( groups.length === 0 ) {\n\t\n\t    \t\t\t\t\tthis.addGroup( 0, indices.length );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\t\n\t    \t\t\t\t\tvar group = groups[ j ];\n\t\n\t    \t\t\t\t\tvar start = group.start;\n\t    \t\t\t\t\tvar count = group.count;\n\t\n\t    \t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\t\n\t    \t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t    \t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t    \t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\t\n\t    \t\t\t\t\t\tpA.fromArray( positions, vA );\n\t    \t\t\t\t\t\tpB.fromArray( positions, vB );\n\t    \t\t\t\t\t\tpC.fromArray( positions, vC );\n\t\n\t    \t\t\t\t\t\tcb.subVectors( pC, pB );\n\t    \t\t\t\t\t\tab.subVectors( pA, pB );\n\t    \t\t\t\t\t\tcb.cross( ab );\n\t\n\t    \t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t    \t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t    \t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\t\n\t    \t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t    \t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t    \t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\t\n\t    \t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t    \t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t    \t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\n\t    \t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\t\n\t    \t\t\t\t\tpA.fromArray( positions, i );\n\t    \t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t    \t\t\t\t\tpC.fromArray( positions, i + 6 );\n\t\n\t    \t\t\t\t\tcb.subVectors( pC, pB );\n\t    \t\t\t\t\tab.subVectors( pA, pB );\n\t    \t\t\t\t\tcb.cross( ab );\n\t\n\t    \t\t\t\t\tnormals[ i ] = cb.x;\n\t    \t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t    \t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\t\n\t    \t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t    \t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t    \t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\t\n\t    \t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t    \t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t    \t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.normalizeNormals();\n\t\n\t    \t\t\tattributes.normal.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tmerge: function ( geometry, offset ) {\n\t\n\t    \t\tif ( (geometry && geometry.isBufferGeometry) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tvar attributes = this.attributes;\n\t\n\t    \t\tfor ( var key in attributes ) {\n\t\n\t    \t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\t\n\t    \t\t\tvar attribute1 = attributes[ key ];\n\t    \t\t\tvar attributeArray1 = attribute1.array;\n\t\n\t    \t\t\tvar attribute2 = geometry.attributes[ key ];\n\t    \t\t\tvar attributeArray2 = attribute2.array;\n\t\n\t    \t\t\tvar attributeSize = attribute2.itemSize;\n\t\n\t    \t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\t\n\t    \t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnormalizeNormals: function () {\n\t\n\t    \t\tvar normals = this.attributes.normal.array;\n\t\n\t    \t\tvar x, y, z, n;\n\t\n\t    \t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\t\n\t    \t\t\tx = normals[ i ];\n\t    \t\t\ty = normals[ i + 1 ];\n\t    \t\t\tz = normals[ i + 2 ];\n\t\n\t    \t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\t\n\t    \t\t\tnormals[ i ] *= n;\n\t    \t\t\tnormals[ i + 1 ] *= n;\n\t    \t\t\tnormals[ i + 2 ] *= n;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoNonIndexed: function () {\n\t\n\t    \t\tif ( this.index === null ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar geometry2 = new BufferGeometry();\n\t\n\t    \t\tvar indices = this.index.array;\n\t    \t\tvar attributes = this.attributes;\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ name ];\n\t\n\t    \t\t\tvar array = attribute.array;\n\t    \t\t\tvar itemSize = attribute.itemSize;\n\t\n\t    \t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\t\n\t    \t\t\tvar index = 0, index2 = 0;\n\t\n\t    \t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tindex = indices[ i ] * itemSize;\n\t\n\t    \t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\t\n\t    \t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry2;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\tvar data = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'BufferGeometry',\n\t    \t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t    \t\t\t}\n\t    \t\t};\n\t\n\t    \t\t// standard BufferGeometry serialization\n\t\n\t    \t\tdata.uuid = this.uuid;\n\t    \t\tdata.type = this.type;\n\t    \t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t    \t\tif ( this.parameters !== undefined ) {\n\t\n\t    \t\t\tvar parameters = this.parameters;\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn data;\n\t\n\t    \t\t}\n\t\n\t    \t\tdata.data = { attributes: {} };\n\t\n\t    \t\tvar index = this.index;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tvar array = Array.prototype.slice.call( index.array );\n\t\n\t    \t\t\tdata.data.index = {\n\t    \t\t\t\ttype: index.array.constructor.name,\n\t    \t\t\t\tarray: array\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = this.attributes;\n\t\n\t    \t\tfor ( var key in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ key ];\n\t\n\t    \t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\t\n\t    \t\t\tdata.data.attributes[ key ] = {\n\t    \t\t\t\titemSize: attribute.itemSize,\n\t    \t\t\t\ttype: attribute.array.constructor.name,\n\t    \t\t\t\tarray: array,\n\t    \t\t\t\tnormalized: attribute.normalized\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tvar groups = this.groups;\n\t\n\t    \t\tif ( groups.length > 0 ) {\n\t\n\t    \t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar boundingSphere = this.boundingSphere;\n\t\n\t    \t\tif ( boundingSphere !== null ) {\n\t\n\t    \t\t\tdata.data.boundingSphere = {\n\t    \t\t\t\tcenter: boundingSphere.center.toArray(),\n\t    \t\t\t\tradius: boundingSphere.radius\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\treturn data;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\t/*\n\t    \t\t// Handle primitives\n\t\n\t    \t\tvar parameters = this.parameters;\n\t\n\t    \t\tif ( parameters !== undefined ) {\n\t\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tvalues.push( parameters[ key ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t    \t\t\tthis.constructor.apply( geometry, values );\n\t    \t\t\treturn geometry;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t    \t\t*/\n\t\n\t    \t\treturn new BufferGeometry().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tvar index = source.index;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tthis.setIndex( index.clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = source.attributes;\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ name ];\n\t    \t\t\tthis.addAttribute( name, attribute.clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar groups = source.groups;\n\t\n\t    \t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar group = groups[ i ];\n\t    \t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    BufferGeometry.MaxIndex = 65535;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author jonobr1 / http://jonobr1.com/\n\t     */\n\t\n\t    function Mesh( geometry, material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Mesh';\n\t\n\t    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t    \tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t    \tthis.drawMode = TrianglesDrawMode;\n\t\n\t    \tthis.updateMorphTargets();\n\t\n\t    }\n\t\n\t    Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Mesh,\n\t\n\t    \tisMesh: true,\n\t\n\t    \tsetDrawMode: function ( value ) {\n\t\n\t    \t\tthis.drawMode = value;\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.drawMode = source.drawMode;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tupdateMorphTargets: function () {\n\t\n\t    \t\tvar morphTargets = this.geometry.morphTargets;\n\t\n\t    \t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\t\n\t    \t\t\tthis.morphTargetInfluences = [];\n\t    \t\t\tthis.morphTargetDictionary = {};\n\t\n\t    \t\t\tfor ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\t\n\t    \t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t    \t\t\t\tthis.morphTargetDictionary[ morphTargets[ m ].name ] = m;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar inverseMatrix = new Matrix4();\n\t    \t\tvar ray = new Ray();\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\tvar vA = new Vector3();\n\t    \t\tvar vB = new Vector3();\n\t    \t\tvar vC = new Vector3();\n\t\n\t    \t\tvar tempA = new Vector3();\n\t    \t\tvar tempB = new Vector3();\n\t    \t\tvar tempC = new Vector3();\n\t\n\t    \t\tvar uvA = new Vector2();\n\t    \t\tvar uvB = new Vector2();\n\t    \t\tvar uvC = new Vector2();\n\t\n\t    \t\tvar barycoord = new Vector3();\n\t\n\t    \t\tvar intersectionPoint = new Vector3();\n\t    \t\tvar intersectionPointWorld = new Vector3();\n\t\n\t    \t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\t\n\t    \t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\t\n\t    \t\t\tuv1.multiplyScalar( barycoord.x );\n\t    \t\t\tuv2.multiplyScalar( barycoord.y );\n\t    \t\t\tuv3.multiplyScalar( barycoord.z );\n\t\n\t    \t\t\tuv1.add( uv2 ).add( uv3 );\n\t\n\t    \t\t\treturn uv1.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\t\n\t    \t\t\tvar intersect;\n\t    \t\t\tvar material = object.material;\n\t\n\t    \t\t\tif ( material.side === BackSide ) {\n\t\n\t    \t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( intersect === null ) return null;\n\t\n\t    \t\t\tintersectionPointWorld.copy( point );\n\t    \t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\t\n\t    \t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\t\n\t    \t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\t\n\t    \t\t\treturn {\n\t    \t\t\t\tdistance: distance,\n\t    \t\t\t\tpoint: intersectionPointWorld.clone(),\n\t    \t\t\t\tobject: object\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\t\n\t    \t\t\tvA.fromArray( positions, a * 3 );\n\t    \t\t\tvB.fromArray( positions, b * 3 );\n\t    \t\t\tvC.fromArray( positions, c * 3 );\n\t\n\t    \t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\t\n\t    \t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\tif ( uvs ) {\n\t\n\t    \t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n\t    \t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n\t    \t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\t\n\t    \t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n\t    \t\t\t\tintersection.faceIndex = a;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn intersection;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tvar geometry = this.geometry;\n\t    \t\t\tvar material = this.material;\n\t    \t\t\tvar matrixWorld = this.matrixWorld;\n\t\n\t    \t\t\tif ( material === undefined ) return;\n\t\n\t    \t\t\t// Checking boundingSphere distance to ray\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere );\n\t    \t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tinverseMatrix.getInverse( matrixWorld );\n\t    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t    \t\t\t// Check boundingBox before continuing\n\t\n\t    \t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar uvs, intersection;\n\t\n\t    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\tvar a, b, c;\n\t    \t\t\t\tvar index = geometry.index;\n\t    \t\t\t\tvar attributes = geometry.attributes;\n\t    \t\t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\t\tif ( attributes.uv !== undefined ) {\n\t\n\t    \t\t\t\t\tuvs = attributes.uv.array;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\t\n\t    \t\t\t\t\t\ta = indices[ i ];\n\t    \t\t\t\t\t\tb = indices[ i + 1 ];\n\t    \t\t\t\t\t\tc = indices[ i + 2 ];\n\t\n\t    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\t\n\t    \t\t\t\t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t    \t\t\t\t\t\t\tintersects.push( intersection );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\t\n\t    \t\t\t\t\t\ta = i / 3;\n\t    \t\t\t\t\t\tb = a + 1;\n\t    \t\t\t\t\t\tc = a + 2;\n\t\n\t    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\t\n\t    \t\t\t\t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t    \t\t\t\t\t\t\tintersects.push( intersection );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\tvar fvA, fvB, fvC;\n\t    \t\t\t\tvar isFaceMaterial = (material && material.isMultiMaterial);\n\t    \t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\t\n\t    \t\t\t\tvar vertices = geometry.vertices;\n\t    \t\t\t\tvar faces = geometry.faces;\n\t    \t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t    \t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\t\n\t    \t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\t\tvar face = faces[ f ];\n\t    \t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\t\n\t    \t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\t\n\t    \t\t\t\t\tfvA = vertices[ face.a ];\n\t    \t\t\t\t\tfvB = vertices[ face.b ];\n\t    \t\t\t\t\tfvC = vertices[ face.c ];\n\t\n\t    \t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\t\n\t    \t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t    \t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\t\n\t    \t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t    \t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t    \t\t\t\t\t\tvC.set( 0, 0, 0 );\n\t\n\t    \t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\t\n\t    \t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\t\n\t    \t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\t\n\t    \t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\t\n\t    \t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t    \t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t    \t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\tvA.add( fvA );\n\t    \t\t\t\t\t\tvB.add( fvB );\n\t    \t\t\t\t\t\tvC.add( fvC );\n\t\n\t    \t\t\t\t\t\tfvA = vA;\n\t    \t\t\t\t\t\tfvB = vB;\n\t    \t\t\t\t\t\tfvC = vC;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\t\n\t    \t\t\t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\t\t\tif ( uvs ) {\n\t\n\t    \t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t    \t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t    \t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t    \t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\t\n\t    \t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\tintersection.face = face;\n\t    \t\t\t\t\t\tintersection.faceIndex = f;\n\t    \t\t\t\t\t\tintersects.push( intersection );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'BoxBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\tdepth: depth,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tdepthSegments: depthSegments\n\t    \t};\n\t\n\t    \tvar scope = this;\n\t\n\t    \t// segments\n\t    \twidthSegments = Math.floor( widthSegments ) || 1;\n\t    \theightSegments = Math.floor( heightSegments ) || 1;\n\t    \tdepthSegments = Math.floor( depthSegments ) || 1;\n\t\n\t    \t// these are used to calculate buffer length\n\t    \tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n\t    \tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\t\n\t    \t// buffers\n\t    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t    \tvar vertices = new Float32Array( vertexCount * 3 );\n\t    \tvar normals = new Float32Array( vertexCount * 3 );\n\t    \tvar uvs = new Float32Array( vertexCount * 2 );\n\t\n\t    \t// offset variables\n\t    \tvar vertexBufferOffset = 0;\n\t    \tvar uvBufferOffset = 0;\n\t    \tvar indexBufferOffset = 0;\n\t    \tvar numberOfVertices = 0;\n\t\n\t    \t// group variables\n\t    \tvar groupStart = 0;\n\t\n\t    \t// build each side of the box geometry\n\t    \tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n\t    \tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n\t    \tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n\t    \tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n\t    \tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n\t    \tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\t\n\t    \t// build geometry\n\t    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    \t// helper functions\n\t\n\t    \tfunction calculateVertexCount( w, h, d ) {\n\t\n\t    \t\tvar vertices = 0;\n\t\n\t    \t\t// calculate the amount of vertices for each side (plane)\n\t    \t\tvertices += (w + 1) * (h + 1) * 2; // xy\n\t    \t\tvertices += (w + 1) * (d + 1) * 2; // xz\n\t    \t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\t\n\t    \t\treturn vertices;\n\t\n\t    \t}\n\t\n\t    \tfunction calculateIndexCount( w, h, d ) {\n\t\n\t    \t\tvar index = 0;\n\t\n\t    \t\t// calculate the amount of squares for each side\n\t    \t\tindex += w * h * 2; // xy\n\t    \t\tindex += w * d * 2; // xz\n\t    \t\tindex += d * h * 2; // zy\n\t\n\t    \t\treturn index * 6; // two triangles per square => six vertices per square\n\t\n\t    \t}\n\t\n\t    \tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\t\n\t    \t\tvar segmentWidth\t= width / gridX;\n\t    \t\tvar segmentHeight = height / gridY;\n\t\n\t    \t\tvar widthHalf = width / 2;\n\t    \t\tvar heightHalf = height / 2;\n\t    \t\tvar depthHalf = depth / 2;\n\t\n\t    \t\tvar gridX1 = gridX + 1;\n\t    \t\tvar gridY1 = gridY + 1;\n\t\n\t    \t\tvar vertexCounter = 0;\n\t    \t\tvar groupCount = 0;\n\t\n\t    \t\tvar vector = new Vector3();\n\t\n\t    \t\t// generate vertices, normals and uvs\n\t\n\t    \t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\t\n\t    \t\t\tvar y = iy * segmentHeight - heightHalf;\n\t\n\t    \t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\t\n\t    \t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\t\n\t    \t\t\t\t// set values to correct vector component\n\t    \t\t\t\tvector[ u ] = x * udir;\n\t    \t\t\t\tvector[ v ] = y * vdir;\n\t    \t\t\t\tvector[ w ] = depthHalf;\n\t\n\t    \t\t\t\t// now apply vector to vertex buffer\n\t    \t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n\t    \t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n\t    \t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\t\n\t    \t\t\t\t// set values to correct vector component\n\t    \t\t\t\tvector[ u ] = 0;\n\t    \t\t\t\tvector[ v ] = 0;\n\t    \t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\t\n\t    \t\t\t\t// now apply vector to normal buffer\n\t    \t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n\t    \t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n\t    \t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\t\n\t    \t\t\t\t// uvs\n\t    \t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n\t    \t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\t\n\t    \t\t\t\t// update offsets and counters\n\t    \t\t\t\tvertexBufferOffset += 3;\n\t    \t\t\t\tuvBufferOffset += 2;\n\t    \t\t\t\tvertexCounter += 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// 1. you need three indices to draw a single face\n\t    \t\t// 2. a single segment consists of two faces\n\t    \t\t// 3. so we need to generate six (2*3) indices per segment\n\t\n\t    \t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\t\n\t    \t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\t\n\t    \t\t\t\t// indices\n\t    \t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t    \t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t    \t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t    \t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\t\n\t    \t\t\t\t// face one\n\t    \t\t\t\tindices[ indexBufferOffset ] = a;\n\t    \t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t    \t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\t\n\t    \t\t\t\t// face two\n\t    \t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t    \t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t    \t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\t\n\t    \t\t\t\t// update offsets and counters\n\t    \t\t\t\tindexBufferOffset += 6;\n\t    \t\t\t\tgroupCount += 6;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// add a group to the geometry. this will ensure multi material support\n\t    \t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\t\n\t    \t\t// calculate new start value for groups\n\t    \t\tgroupStart += groupCount;\n\t\n\t    \t\t// update total number of vertices\n\t    \t\tnumberOfVertices += vertexCounter;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t     */\n\t\n\t    function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'PlaneBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments\n\t    \t};\n\t\n\t    \tvar width_half = width / 2;\n\t    \tvar height_half = height / 2;\n\t\n\t    \tvar gridX = Math.floor( widthSegments ) || 1;\n\t    \tvar gridY = Math.floor( heightSegments ) || 1;\n\t\n\t    \tvar gridX1 = gridX + 1;\n\t    \tvar gridY1 = gridY + 1;\n\t\n\t    \tvar segment_width = width / gridX;\n\t    \tvar segment_height = height / gridY;\n\t\n\t    \tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n\t    \tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n\t    \tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\t\n\t    \tvar offset = 0;\n\t    \tvar offset2 = 0;\n\t\n\t    \tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\t\n\t    \t\tvar y = iy * segment_height - height_half;\n\t\n\t    \t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\t\n\t    \t\t\tvar x = ix * segment_width - width_half;\n\t\n\t    \t\t\tvertices[ offset ] = x;\n\t    \t\t\tvertices[ offset + 1 ] = - y;\n\t\n\t    \t\t\tnormals[ offset + 2 ] = 1;\n\t\n\t    \t\t\tuvs[ offset2 ] = ix / gridX;\n\t    \t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\t\n\t    \t\t\toffset += 3;\n\t    \t\t\toffset2 += 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \toffset = 0;\n\t\n\t    \tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\t\n\t    \tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\t\n\t    \t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\t\n\t    \t\t\tvar a = ix + gridX1 * iy;\n\t    \t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t    \t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t    \t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\t\n\t    \t\t\tindices[ offset ] = a;\n\t    \t\t\tindices[ offset + 1 ] = b;\n\t    \t\t\tindices[ offset + 2 ] = d;\n\t\n\t    \t\t\tindices[ offset + 3 ] = b;\n\t    \t\t\tindices[ offset + 4 ] = c;\n\t    \t\t\tindices[ offset + 5 ] = d;\n\t\n\t    \t\t\toffset += 6;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    }\n\t\n\t    PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function Camera() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Camera';\n\t\n\t    \tthis.matrixWorldInverse = new Matrix4();\n\t    \tthis.projectionMatrix = new Matrix4();\n\t\n\t    }\n\t\n\t    Camera.prototype = Object.create( Object3D.prototype );\n\t    Camera.prototype.constructor = Camera;\n\t\n\t    Camera.prototype.isCamera = true;\n\t\n\t    Camera.prototype.getWorldDirection = function () {\n\t\n\t    \tvar quaternion = new Quaternion();\n\t\n\t    \treturn function getWorldDirection( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tthis.getWorldQuaternion( quaternion );\n\t\n\t    \t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Camera.prototype.lookAt = function () {\n\t\n\t    \t// This routine does not support cameras with rotated and/or translated parent(s)\n\t\n\t    \tvar m1 = new Matrix4();\n\t\n\t    \treturn function lookAt( vector ) {\n\t\n\t    \t\tm1.lookAt( this.position, vector, this.up );\n\t\n\t    \t\tthis.quaternion.setFromRotationMatrix( m1 );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Camera.prototype.clone = function () {\n\t\n\t    \treturn new this.constructor().copy( this );\n\t\n\t    };\n\t\n\t    Camera.prototype.copy = function ( source ) {\n\t\n\t    \tObject3D.prototype.copy.call( this, source );\n\t\n\t    \tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\t    \tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author greggman / http://games.greggman.com/\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author tschw\n\t     */\n\t\n\t    function PerspectiveCamera( fov, aspect, near, far ) {\n\t\n\t    \tCamera.call( this );\n\t\n\t    \tthis.type = 'PerspectiveCamera';\n\t\n\t    \tthis.fov = fov !== undefined ? fov : 50;\n\t    \tthis.zoom = 1;\n\t\n\t    \tthis.near = near !== undefined ? near : 0.1;\n\t    \tthis.far = far !== undefined ? far : 2000;\n\t    \tthis.focus = 10;\n\t\n\t    \tthis.aspect = aspect !== undefined ? aspect : 1;\n\t    \tthis.view = null;\n\t\n\t    \tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t    \tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\t\n\t    \tthis.updateProjectionMatrix();\n\t\n\t    }\n\t\n\t    PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\t\n\t    \tconstructor: PerspectiveCamera,\n\t\n\t    \tisPerspectiveCamera: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tCamera.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.fov = source.fov;\n\t    \t\tthis.zoom = source.zoom;\n\t\n\t    \t\tthis.near = source.near;\n\t    \t\tthis.far = source.far;\n\t    \t\tthis.focus = source.focus;\n\t\n\t    \t\tthis.aspect = source.aspect;\n\t    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\t\n\t    \t\tthis.filmGauge = source.filmGauge;\n\t    \t\tthis.filmOffset = source.filmOffset;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t/**\n\t    \t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t    \t *\n\t    \t * The default film gauge is 35, so that the focal length can be specified for\n\t    \t * a 35mm (full frame) camera.\n\t    \t *\n\t    \t * Values for focal length and film gauge must have the same unit.\n\t    \t */\n\t    \tsetFocalLength: function ( focalLength ) {\n\t\n\t    \t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t    \t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\n\t    \t\tthis.fov = exports.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \t/**\n\t    \t * Calculates the focal length from the current .fov and .filmGauge.\n\t    \t */\n\t    \tgetFocalLength: function () {\n\t\n\t    \t\tvar vExtentSlope = Math.tan( exports.Math.DEG2RAD * 0.5 * this.fov );\n\t\n\t    \t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\n\t    \t},\n\t\n\t    \tgetEffectiveFOV: function () {\n\t\n\t    \t\treturn exports.Math.RAD2DEG * 2 * Math.atan(\n\t    \t\t\t\tMath.tan( exports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\t\n\t    \t},\n\t\n\t    \tgetFilmWidth: function () {\n\t\n\t    \t\t// film not completely covered in portrait format (aspect < 1)\n\t    \t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\t\n\t    \t},\n\t\n\t    \tgetFilmHeight: function () {\n\t\n\t    \t\t// film not completely covered in landscape format (aspect > 1)\n\t    \t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\t\n\t    \t},\n\t\n\t    \t/**\n\t    \t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t    \t * multi-monitor/multi-machine setups.\n\t    \t *\n\t    \t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t    \t * the monitors are in grid like this\n\t    \t *\n\t    \t *   +---+---+---+\n\t    \t *   | A | B | C |\n\t    \t *   +---+---+---+\n\t    \t *   | D | E | F |\n\t    \t *   +---+---+---+\n\t    \t *\n\t    \t * then for each monitor you would call it like this\n\t    \t *\n\t    \t *   var w = 1920;\n\t    \t *   var h = 1080;\n\t    \t *   var fullWidth = w * 3;\n\t    \t *   var fullHeight = h * 2;\n\t    \t *\n\t    \t *   --A--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t    \t *   --B--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t    \t *   --C--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t    \t *   --D--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t    \t *   --E--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t    \t *   --F--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t    \t *\n\t    \t *   Note there is no reason monitors have to be the same size or in a grid.\n\t    \t */\n\t    \tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\t\n\t    \t\tthis.aspect = fullWidth / fullHeight;\n\t\n\t    \t\tthis.view = {\n\t    \t\t\tfullWidth: fullWidth,\n\t    \t\t\tfullHeight: fullHeight,\n\t    \t\t\toffsetX: x,\n\t    \t\t\toffsetY: y,\n\t    \t\t\twidth: width,\n\t    \t\t\theight: height\n\t    \t\t};\n\t\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tclearViewOffset: function() {\n\t\n\t    \t\tthis.view = null;\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tupdateProjectionMatrix: function () {\n\t\n\t    \t\tvar near = this.near,\n\t    \t\t\ttop = near * Math.tan(\n\t    \t\t\t\t\texports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t    \t\t\theight = 2 * top,\n\t    \t\t\twidth = this.aspect * height,\n\t    \t\t\tleft = - 0.5 * width,\n\t    \t\t\tview = this.view;\n\t\n\t    \t\tif ( view !== null ) {\n\t\n\t    \t\t\tvar fullWidth = view.fullWidth,\n\t    \t\t\t\tfullHeight = view.fullHeight;\n\t\n\t    \t\t\tleft += view.offsetX * width / fullWidth;\n\t    \t\t\ttop -= view.offsetY * height / fullHeight;\n\t    \t\t\twidth *= view.width / fullWidth;\n\t    \t\t\theight *= view.height / fullHeight;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar skew = this.filmOffset;\n\t    \t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\t\n\t    \t\tthis.projectionMatrix.makeFrustum(\n\t    \t\t\t\tleft, left + width, top - height, top, near, this.far );\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.fov = this.fov;\n\t    \t\tdata.object.zoom = this.zoom;\n\t\n\t    \t\tdata.object.near = this.near;\n\t    \t\tdata.object.far = this.far;\n\t    \t\tdata.object.focus = this.focus;\n\t\n\t    \t\tdata.object.aspect = this.aspect;\n\t\n\t    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\t\n\t    \t\tdata.object.filmGauge = this.filmGauge;\n\t    \t\tdata.object.filmOffset = this.filmOffset;\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author arose / http://github.com/arose\n\t     */\n\t\n\t    function OrthographicCamera( left, right, top, bottom, near, far ) {\n\t\n\t    \tCamera.call( this );\n\t\n\t    \tthis.type = 'OrthographicCamera';\n\t\n\t    \tthis.zoom = 1;\n\t    \tthis.view = null;\n\t\n\t    \tthis.left = left;\n\t    \tthis.right = right;\n\t    \tthis.top = top;\n\t    \tthis.bottom = bottom;\n\t\n\t    \tthis.near = ( near !== undefined ) ? near : 0.1;\n\t    \tthis.far = ( far !== undefined ) ? far : 2000;\n\t\n\t    \tthis.updateProjectionMatrix();\n\t\n\t    }\n\t\n\t    OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\t\n\t    \tconstructor: OrthographicCamera,\n\t\n\t    \tisOrthographicCamera: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tCamera.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.left = source.left;\n\t    \t\tthis.right = source.right;\n\t    \t\tthis.top = source.top;\n\t    \t\tthis.bottom = source.bottom;\n\t    \t\tthis.near = source.near;\n\t    \t\tthis.far = source.far;\n\t\n\t    \t\tthis.zoom = source.zoom;\n\t    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\t\n\t    \t\tthis.view = {\n\t    \t\t\tfullWidth: fullWidth,\n\t    \t\t\tfullHeight: fullHeight,\n\t    \t\t\toffsetX: x,\n\t    \t\t\toffsetY: y,\n\t    \t\t\twidth: width,\n\t    \t\t\theight: height\n\t    \t\t};\n\t\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tclearViewOffset: function() {\n\t\n\t    \t\tthis.view = null;\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tupdateProjectionMatrix: function () {\n\t\n\t    \t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t    \t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t    \t\tvar cx = ( this.right + this.left ) / 2;\n\t    \t\tvar cy = ( this.top + this.bottom ) / 2;\n\t\n\t    \t\tvar left = cx - dx;\n\t    \t\tvar right = cx + dx;\n\t    \t\tvar top = cy + dy;\n\t    \t\tvar bottom = cy - dy;\n\t\n\t    \t\tif ( this.view !== null ) {\n\t\n\t    \t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t    \t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t    \t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t    \t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\t\n\t    \t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t    \t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t    \t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t    \t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.zoom = this.zoom;\n\t    \t\tdata.object.left = this.left;\n\t    \t\tdata.object.right = this.right;\n\t    \t\tdata.object.top = this.top;\n\t    \t\tdata.object.bottom = this.bottom;\n\t    \t\tdata.object.near = this.near;\n\t    \t\tdata.object.far = this.far;\n\t\n\t    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\t\n\t    \tvar mode;\n\t\n\t    \tfunction setMode( value ) {\n\t\n\t    \t\tmode = value;\n\t\n\t    \t}\n\t\n\t    \tvar type, size;\n\t\n\t    \tfunction setIndex( index ) {\n\t\n\t    \t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\t\n\t    \t\t\ttype = gl.UNSIGNED_INT;\n\t    \t\t\tsize = 4;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttype = gl.UNSIGNED_SHORT;\n\t    \t\t\tsize = 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction render( start, count ) {\n\t\n\t    \t\tgl.drawElements( mode, count, type, start * size );\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\t\n\t    \t}\n\t\n\t    \tfunction renderInstances( geometry, start, count ) {\n\t\n\t    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\tif ( extension === null ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tsetMode: setMode,\n\t    \t\tsetIndex: setIndex,\n\t    \t\trender: render,\n\t    \t\trenderInstances: renderInstances\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLBufferRenderer( gl, extensions, infoRender ) {\n\t\n\t    \tvar mode;\n\t\n\t    \tfunction setMode( value ) {\n\t\n\t    \t\tmode = value;\n\t\n\t    \t}\n\t\n\t    \tfunction render( start, count ) {\n\t\n\t    \t\tgl.drawArrays( mode, start, count );\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\t\n\t    \t}\n\t\n\t    \tfunction renderInstances( geometry ) {\n\t\n\t    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\tif ( extension === null ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar position = geometry.attributes.position;\n\t\n\t    \t\tvar count = 0;\n\t\n\t    \t\tif ( (position && position.isInterleavedBufferAttribute) ) {\n\t\n\t    \t\t\tcount = position.data.count;\n\t\n\t    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tcount = position.count;\n\t\n\t    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\t\n\t    \t\t}\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t    \t\tsetMode: setMode,\n\t    \t\trender: render,\n\t    \t\trenderInstances: renderInstances\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLLights() {\n\t\n\t    \tvar lights = {};\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( light ) {\n\t\n\t    \t\t\tif ( lights[ light.id ] !== undefined ) {\n\t\n\t    \t\t\t\treturn lights[ light.id ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar uniforms;\n\t\n\t    \t\t\tswitch ( light.type ) {\n\t\n\t    \t\t\t\tcase 'DirectionalLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tdirection: new Vector3(),\n\t    \t\t\t\t\t\tcolor: new Color(),\n\t\n\t    \t\t\t\t\t\tshadow: false,\n\t    \t\t\t\t\t\tshadowBias: 0,\n\t    \t\t\t\t\t\tshadowRadius: 1,\n\t    \t\t\t\t\t\tshadowMapSize: new Vector2()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'SpotLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tposition: new Vector3(),\n\t    \t\t\t\t\t\tdirection: new Vector3(),\n\t    \t\t\t\t\t\tcolor: new Color(),\n\t    \t\t\t\t\t\tdistance: 0,\n\t    \t\t\t\t\t\tconeCos: 0,\n\t    \t\t\t\t\t\tpenumbraCos: 0,\n\t    \t\t\t\t\t\tdecay: 0,\n\t\n\t    \t\t\t\t\t\tshadow: false,\n\t    \t\t\t\t\t\tshadowBias: 0,\n\t    \t\t\t\t\t\tshadowRadius: 1,\n\t    \t\t\t\t\t\tshadowMapSize: new Vector2()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PointLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tposition: new Vector3(),\n\t    \t\t\t\t\t\tcolor: new Color(),\n\t    \t\t\t\t\t\tdistance: 0,\n\t    \t\t\t\t\t\tdecay: 0,\n\t\n\t    \t\t\t\t\t\tshadow: false,\n\t    \t\t\t\t\t\tshadowBias: 0,\n\t    \t\t\t\t\t\tshadowRadius: 1,\n\t    \t\t\t\t\t\tshadowMapSize: new Vector2()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'HemisphereLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tdirection: new Vector3(),\n\t    \t\t\t\t\t\tskyColor: new Color(),\n\t    \t\t\t\t\t\tgroundColor: new Color()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tlights[ light.id ] = uniforms;\n\t\n\t    \t\t\treturn uniforms;\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function addLineNumbers( string ) {\n\t\n\t    \tvar lines = string.split( '\\n' );\n\t\n\t    \tfor ( var i = 0; i < lines.length; i ++ ) {\n\t\n\t    \t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\t\n\t    \t}\n\t\n\t    \treturn lines.join( '\\n' );\n\t\n\t    }\n\t\n\t    function WebGLShader( gl, type, string ) {\n\t\n\t    \tvar shader = gl.createShader( type );\n\t\n\t    \tgl.shaderSource( shader, string );\n\t    \tgl.compileShader( shader );\n\t\n\t    \tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\t\n\t    \t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\t\n\t    \t}\n\t\n\t    \tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\t\n\t    \t}\n\t\n\t    \t// --enable-privileged-webgl-extension\n\t    \t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\t\n\t    \treturn shader;\n\t\n\t    }\n\t\n\t    var programIdCount = 0;\n\t\n\t    function getEncodingComponents( encoding ) {\n\t\n\t    \tswitch ( encoding ) {\n\t\n\t    \t\tcase LinearEncoding:\n\t    \t\t\treturn [ 'Linear','( value )' ];\n\t    \t\tcase sRGBEncoding:\n\t    \t\t\treturn [ 'sRGB','( value )' ];\n\t    \t\tcase RGBEEncoding:\n\t    \t\t\treturn [ 'RGBE','( value )' ];\n\t    \t\tcase RGBM7Encoding:\n\t    \t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n\t    \t\tcase RGBM16Encoding:\n\t    \t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n\t    \t\tcase RGBDEncoding:\n\t    \t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n\t    \t\tcase GammaEncoding:\n\t    \t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n\t    \t\tdefault:\n\t    \t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    function getTexelDecodingFunction( functionName, encoding ) {\n\t\n\t    \tvar components = getEncodingComponents( encoding );\n\t    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\t\n\t    }\n\t\n\t    function getTexelEncodingFunction( functionName, encoding ) {\n\t\n\t    \tvar components = getEncodingComponents( encoding );\n\t    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\t\n\t    }\n\t\n\t    function getToneMappingFunction( functionName, toneMapping ) {\n\t\n\t    \tvar toneMappingName;\n\t\n\t    \tswitch ( toneMapping ) {\n\t\n\t    \t\tcase LinearToneMapping:\n\t    \t\t\ttoneMappingName = \"Linear\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tcase ReinhardToneMapping:\n\t    \t\t\ttoneMappingName = \"Reinhard\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tcase Uncharted2ToneMapping:\n\t    \t\t\ttoneMappingName = \"Uncharted2\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tcase CineonToneMapping:\n\t    \t\t\ttoneMappingName = \"OptimizedCineon\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tdefault:\n\t    \t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\t\n\t    \t}\n\t\n\t    \treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\t\n\t    }\n\t\n\t    function generateExtensions( extensions, parameters, rendererExtensions ) {\n\t\n\t    \textensions = extensions || {};\n\t\n\t    \tvar chunks = [\n\t    \t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t    \t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t    \t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t    \t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n\t    \t];\n\t\n\t    \treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    }\n\t\n\t    function generateDefines( defines ) {\n\t\n\t    \tvar chunks = [];\n\t\n\t    \tfor ( var name in defines ) {\n\t\n\t    \t\tvar value = defines[ name ];\n\t\n\t    \t\tif ( value === false ) continue;\n\t\n\t    \t\tchunks.push( '#define ' + name + ' ' + value );\n\t\n\t    \t}\n\t\n\t    \treturn chunks.join( '\\n' );\n\t\n\t    }\n\t\n\t    function fetchAttributeLocations( gl, program, identifiers ) {\n\t\n\t    \tvar attributes = {};\n\t\n\t    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\t\n\t    \tfor ( var i = 0; i < n; i ++ ) {\n\t\n\t    \t\tvar info = gl.getActiveAttrib( program, i );\n\t    \t\tvar name = info.name;\n\t\n\t    \t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\t\n\t    \t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\t\n\t    \t}\n\t\n\t    \treturn attributes;\n\t\n\t    }\n\t\n\t    function filterEmptyLine( string ) {\n\t\n\t    \treturn string !== '';\n\t\n\t    }\n\t\n\t    function replaceLightNums( string, parameters ) {\n\t\n\t    \treturn string\n\t    \t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t    \t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t    \t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t    \t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\t\n\t    }\n\t\n\t    function parseIncludes( string ) {\n\t\n\t    \tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\t\n\t    \tfunction replace( match, include ) {\n\t\n\t    \t\tvar replace = ShaderChunk[ include ];\n\t\n\t    \t\tif ( replace === undefined ) {\n\t\n\t    \t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn parseIncludes( replace );\n\t\n\t    \t}\n\t\n\t    \treturn string.replace( pattern, replace );\n\t\n\t    }\n\t\n\t    function unrollLoops( string ) {\n\t\n\t    \tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\t\n\t    \tfunction replace( match, start, end, snippet ) {\n\t\n\t    \t\tvar unroll = '';\n\t\n\t    \t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\t\n\t    \t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn unroll;\n\t\n\t    \t}\n\t\n\t    \treturn string.replace( pattern, replace );\n\t\n\t    }\n\t\n\t    function WebGLProgram( renderer, code, material, parameters ) {\n\t\n\t    \tvar gl = renderer.context;\n\t\n\t    \tvar extensions = material.extensions;\n\t    \tvar defines = material.defines;\n\t\n\t    \tvar vertexShader = material.__webglShader.vertexShader;\n\t    \tvar fragmentShader = material.__webglShader.fragmentShader;\n\t\n\t    \tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\t\n\t    \tif ( parameters.shadowMapType === PCFShadowMap ) {\n\t\n\t    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\n\t    \t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\t\n\t    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\n\t    \t}\n\t\n\t    \tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t    \tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t    \tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\n\t    \tif ( parameters.envMap ) {\n\t\n\t    \t\tswitch ( material.envMap.mapping ) {\n\t\n\t    \t\t\tcase CubeReflectionMapping:\n\t    \t\t\tcase CubeRefractionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase CubeUVReflectionMapping:\n\t    \t\t\tcase CubeUVRefractionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase EquirectangularReflectionMapping:\n\t    \t\t\tcase EquirectangularRefractionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase SphericalReflectionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t\tswitch ( material.envMap.mapping ) {\n\t\n\t    \t\t\tcase CubeRefractionMapping:\n\t    \t\t\tcase EquirectangularRefractionMapping:\n\t    \t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t\tswitch ( material.combine ) {\n\t\n\t    \t\t\tcase MultiplyOperation:\n\t    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase MixOperation:\n\t    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase AddOperation:\n\t    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\t\n\t    \t// console.log( 'building new program ' );\n\t\n\t    \t//\n\t\n\t    \tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\t\n\t    \tvar customDefines = generateDefines( defines );\n\t\n\t    \t//\n\t\n\t    \tvar program = gl.createProgram();\n\t\n\t    \tvar prefixVertex, prefixFragment;\n\t\n\t    \tif ( material.isRawShaderMaterial ) {\n\t\n\t    \t\tprefixVertex = [\n\t\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t\tprefixFragment = [\n\t\n\t    \t\t\tcustomExtensions,\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t} else {\n\t\n\t    \t\tprefixVertex = [\n\t\n\t    \t\t\t'precision ' + parameters.precision + ' float;',\n\t    \t\t\t'precision ' + parameters.precision + ' int;',\n\t\n\t    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\t\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\t\n\t    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\t\n\t    \t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\n\t    \t\t\tparameters.map ? '#define USE_MAP' : '',\n\t    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t    \t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\n\t    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\t\n\t    \t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t    \t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\t\n\t    \t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t    \t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\t\n\t    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\n\t    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\t\n\t    \t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\t\n\t    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\t\n\t    \t\t\t'uniform mat4 modelMatrix;',\n\t    \t\t\t'uniform mat4 modelViewMatrix;',\n\t    \t\t\t'uniform mat4 projectionMatrix;',\n\t    \t\t\t'uniform mat4 viewMatrix;',\n\t    \t\t\t'uniform mat3 normalMatrix;',\n\t    \t\t\t'uniform vec3 cameraPosition;',\n\t\n\t    \t\t\t'attribute vec3 position;',\n\t    \t\t\t'attribute vec3 normal;',\n\t    \t\t\t'attribute vec2 uv;',\n\t\n\t    \t\t\t'#ifdef USE_COLOR',\n\t\n\t    \t\t\t'\tattribute vec3 color;',\n\t\n\t    \t\t\t'#endif',\n\t\n\t    \t\t\t'#ifdef USE_MORPHTARGETS',\n\t\n\t    \t\t\t'\tattribute vec3 morphTarget0;',\n\t    \t\t\t'\tattribute vec3 morphTarget1;',\n\t    \t\t\t'\tattribute vec3 morphTarget2;',\n\t    \t\t\t'\tattribute vec3 morphTarget3;',\n\t\n\t    \t\t\t'\t#ifdef USE_MORPHNORMALS',\n\t\n\t    \t\t\t'\t\tattribute vec3 morphNormal0;',\n\t    \t\t\t'\t\tattribute vec3 morphNormal1;',\n\t    \t\t\t'\t\tattribute vec3 morphNormal2;',\n\t    \t\t\t'\t\tattribute vec3 morphNormal3;',\n\t\n\t    \t\t\t'\t#else',\n\t\n\t    \t\t\t'\t\tattribute vec3 morphTarget4;',\n\t    \t\t\t'\t\tattribute vec3 morphTarget5;',\n\t    \t\t\t'\t\tattribute vec3 morphTarget6;',\n\t    \t\t\t'\t\tattribute vec3 morphTarget7;',\n\t\n\t    \t\t\t'\t#endif',\n\t\n\t    \t\t\t'#endif',\n\t\n\t    \t\t\t'#ifdef USE_SKINNING',\n\t\n\t    \t\t\t'\tattribute vec4 skinIndex;',\n\t    \t\t\t'\tattribute vec4 skinWeight;',\n\t\n\t    \t\t\t'#endif',\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t\tprefixFragment = [\n\t\n\t    \t\t\tcustomExtensions,\n\t\n\t    \t\t\t'precision ' + parameters.precision + ' float;',\n\t    \t\t\t'precision ' + parameters.precision + ' int;',\n\t\n\t    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\t\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\t\n\t    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\t\n\t    \t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t    \t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\t\n\t    \t\t\tparameters.map ? '#define USE_MAP' : '',\n\t    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\n\t    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\t\n\t    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\t\n\t    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\n\t    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\t\n\t    \t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\t\n\t    \t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\t\n\t    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\t\n\t    \t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\t\n\t    \t\t\t'uniform mat4 viewMatrix;',\n\t    \t\t\t'uniform vec3 cameraPosition;',\n\t\n\t    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n\t    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\t\n\t    \t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t    \t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t    \t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t    \t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t    \t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\t\n\t    \t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t}\n\t\n\t    \tvertexShader = parseIncludes( vertexShader, parameters );\n\t    \tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\n\t    \tfragmentShader = parseIncludes( fragmentShader, parameters );\n\t    \tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\n\t    \tif ( ! material.isShaderMaterial ) {\n\t\n\t    \t\tvertexShader = unrollLoops( vertexShader );\n\t    \t\tfragmentShader = unrollLoops( fragmentShader );\n\t\n\t    \t}\n\t\n\t    \tvar vertexGlsl = prefixVertex + vertexShader;\n\t    \tvar fragmentGlsl = prefixFragment + fragmentShader;\n\t\n\t    \t// console.log( '*VERTEX*', vertexGlsl );\n\t    \t// console.log( '*FRAGMENT*', fragmentGlsl );\n\t\n\t    \tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t    \tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\t\n\t    \tgl.attachShader( program, glVertexShader );\n\t    \tgl.attachShader( program, glFragmentShader );\n\t\n\t    \t// Force a particular attribute to index 0.\n\t\n\t    \tif ( material.index0AttributeName !== undefined ) {\n\t\n\t    \t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\t\n\t    \t} else if ( parameters.morphTargets === true ) {\n\t\n\t    \t\t// programs with morphTargets displace position out of attribute 0\n\t    \t\tgl.bindAttribLocation( program, 0, 'position' );\n\t\n\t    \t}\n\t\n\t    \tgl.linkProgram( program );\n\t\n\t    \tvar programLog = gl.getProgramInfoLog( program );\n\t    \tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t    \tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\t\n\t    \tvar runnable = true;\n\t    \tvar haveDiagnostics = true;\n\t\n\t    \t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t    \t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\t\n\t    \tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\t\n\t    \t\trunnable = false;\n\t\n\t    \t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\t\n\t    \t} else if ( programLog !== '' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\t\n\t    \t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\t\n\t    \t\thaveDiagnostics = false;\n\t\n\t    \t}\n\t\n\t    \tif ( haveDiagnostics ) {\n\t\n\t    \t\tthis.diagnostics = {\n\t\n\t    \t\t\trunnable: runnable,\n\t    \t\t\tmaterial: material,\n\t\n\t    \t\t\tprogramLog: programLog,\n\t\n\t    \t\t\tvertexShader: {\n\t\n\t    \t\t\t\tlog: vertexLog,\n\t    \t\t\t\tprefix: prefixVertex\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfragmentShader: {\n\t\n\t    \t\t\t\tlog: fragmentLog,\n\t    \t\t\t\tprefix: prefixFragment\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \t// clean up\n\t\n\t    \tgl.deleteShader( glVertexShader );\n\t    \tgl.deleteShader( glFragmentShader );\n\t\n\t    \t// set up caching for uniform locations\n\t\n\t    \tvar cachedUniforms;\n\t\n\t    \tthis.getUniforms = function() {\n\t\n\t    \t\tif ( cachedUniforms === undefined ) {\n\t\n\t    \t\t\tcachedUniforms =\n\t    \t\t\t\t\tnew WebGLUniforms( gl, program, renderer );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn cachedUniforms;\n\t\n\t    \t};\n\t\n\t    \t// set up caching for attribute locations\n\t\n\t    \tvar cachedAttributes;\n\t\n\t    \tthis.getAttributes = function() {\n\t\n\t    \t\tif ( cachedAttributes === undefined ) {\n\t\n\t    \t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn cachedAttributes;\n\t\n\t    \t};\n\t\n\t    \t// free resource\n\t\n\t    \tthis.destroy = function() {\n\t\n\t    \t\tgl.deleteProgram( program );\n\t    \t\tthis.program = undefined;\n\t\n\t    \t};\n\t\n\t    \t// DEPRECATED\n\t\n\t    \tObject.defineProperties( this, {\n\t\n\t    \t\tuniforms: {\n\t    \t\t\tget: function() {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t    \t\t\t\treturn this.getUniforms();\n\t\n\t    \t\t\t}\n\t    \t\t},\n\t\n\t    \t\tattributes: {\n\t    \t\t\tget: function() {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t    \t\t\t\treturn this.getAttributes();\n\t\n\t    \t\t\t}\n\t    \t\t}\n\t\n\t    \t} );\n\t\n\t\n\t    \t//\n\t\n\t    \tthis.id = programIdCount ++;\n\t    \tthis.code = code;\n\t    \tthis.usedTimes = 1;\n\t    \tthis.program = program;\n\t    \tthis.vertexShader = glVertexShader;\n\t    \tthis.fragmentShader = glFragmentShader;\n\t\n\t    \treturn this;\n\t\n\t    }\n\t\n\t    function WebGLPrograms( renderer, capabilities ) {\n\t\n\t    \tvar programs = [];\n\t\n\t    \tvar shaderIDs = {\n\t    \t\tMeshDepthMaterial: 'depth',\n\t    \t\tMeshNormalMaterial: 'normal',\n\t    \t\tMeshBasicMaterial: 'basic',\n\t    \t\tMeshLambertMaterial: 'lambert',\n\t    \t\tMeshPhongMaterial: 'phong',\n\t    \t\tMeshStandardMaterial: 'physical',\n\t    \t\tMeshPhysicalMaterial: 'physical',\n\t    \t\tLineBasicMaterial: 'basic',\n\t    \t\tLineDashedMaterial: 'dashed',\n\t    \t\tPointsMaterial: 'points'\n\t    \t};\n\t\n\t    \tvar parameterNames = [\n\t    \t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t    \t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t    \t\t\"roughnessMap\", \"metalnessMap\",\n\t    \t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t    \t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t    \t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t    \t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t    \t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n\t    \t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t    \t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n\t    \t];\n\t\n\t\n\t    \tfunction allocateBones( object ) {\n\t\n\t    \t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\t\n\t    \t\t\treturn 1024;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// default for when object is not specified\n\t    \t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t    \t\t\t//\n\t    \t\t\t//  - leave some extra space for other uniforms\n\t    \t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t    \t\t\t//    (up to 54 should be safe)\n\t\n\t    \t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t    \t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\t\n\t    \t\t\tvar maxBones = nVertexMatrices;\n\t\n\t    \t\t\tif ( object !== undefined && (object && object.isSkinnedMesh) ) {\n\t\n\t    \t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\t\n\t    \t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn maxBones;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\t\n\t    \t\tvar encoding;\n\t\n\t    \t\tif ( ! map ) {\n\t\n\t    \t\t\tencoding = LinearEncoding;\n\t\n\t    \t\t} else if ( (map && map.isTexture) ) {\n\t\n\t    \t\t\tencoding = map.encoding;\n\t\n\t    \t\t} else if ( (map && map.isWebGLRenderTarget) ) {\n\t\n\t    \t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t    \t\t\tencoding = map.texture.encoding;\n\t\n\t    \t\t}\n\t\n\t    \t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t    \t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\t\n\t    \t\t\tencoding = GammaEncoding;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn encoding;\n\t\n\t    \t}\n\t\n\t    \tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\t\n\t    \t\tvar shaderID = shaderIDs[ material.type ];\n\t\n\t    \t\t// heuristics to create shader parameters according to lights in the scene\n\t    \t\t// (not to blow over maxLights budget)\n\t\n\t    \t\tvar maxBones = allocateBones( object );\n\t    \t\tvar precision = renderer.getPrecision();\n\t\n\t    \t\tif ( material.precision !== null ) {\n\t\n\t    \t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\t\n\t    \t\t\tif ( precision !== material.precision ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\t\n\t    \t\tvar parameters = {\n\t\n\t    \t\t\tshaderID: shaderID,\n\t\n\t    \t\t\tprecision: precision,\n\t    \t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t    \t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t    \t\t\tmap: !! material.map,\n\t    \t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t    \t\t\tenvMap: !! material.envMap,\n\t    \t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t    \t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t    \t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t    \t\t\tlightMap: !! material.lightMap,\n\t    \t\t\taoMap: !! material.aoMap,\n\t    \t\t\temissiveMap: !! material.emissiveMap,\n\t    \t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t    \t\t\tbumpMap: !! material.bumpMap,\n\t    \t\t\tnormalMap: !! material.normalMap,\n\t    \t\t\tdisplacementMap: !! material.displacementMap,\n\t    \t\t\troughnessMap: !! material.roughnessMap,\n\t    \t\t\tmetalnessMap: !! material.metalnessMap,\n\t    \t\t\tspecularMap: !! material.specularMap,\n\t    \t\t\talphaMap: !! material.alphaMap,\n\t\n\t    \t\t\tcombine: material.combine,\n\t\n\t    \t\t\tvertexColors: material.vertexColors,\n\t\n\t    \t\t\tfog: !! fog,\n\t    \t\t\tuseFog: material.fog,\n\t    \t\t\tfogExp: (fog && fog.isFogExp2),\n\t\n\t    \t\t\tflatShading: material.shading === FlatShading,\n\t\n\t    \t\t\tsizeAttenuation: material.sizeAttenuation,\n\t    \t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\t\n\t    \t\t\tskinning: material.skinning,\n\t    \t\t\tmaxBones: maxBones,\n\t    \t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\t\n\t    \t\t\tmorphTargets: material.morphTargets,\n\t    \t\t\tmorphNormals: material.morphNormals,\n\t    \t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t    \t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\t\n\t    \t\t\tnumDirLights: lights.directional.length,\n\t    \t\t\tnumPointLights: lights.point.length,\n\t    \t\t\tnumSpotLights: lights.spot.length,\n\t    \t\t\tnumHemiLights: lights.hemi.length,\n\t\n\t    \t\t\tnumClippingPlanes: nClipPlanes,\n\t\n\t    \t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n\t    \t\t\tshadowMapType: renderer.shadowMap.type,\n\t\n\t    \t\t\ttoneMapping: renderer.toneMapping,\n\t    \t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\n\t    \t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\n\t    \t\t\talphaTest: material.alphaTest,\n\t    \t\t\tdoubleSided: material.side === DoubleSide,\n\t    \t\t\tflipSided: material.side === BackSide,\n\t\n\t    \t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\t\n\t    \t\t};\n\t\n\t    \t\treturn parameters;\n\t\n\t    \t};\n\t\n\t    \tthis.getProgramCode = function ( material, parameters ) {\n\t\n\t    \t\tvar array = [];\n\t\n\t    \t\tif ( parameters.shaderID ) {\n\t\n\t    \t\t\tarray.push( parameters.shaderID );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tarray.push( material.fragmentShader );\n\t    \t\t\tarray.push( material.vertexShader );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.defines !== undefined ) {\n\t\n\t    \t\t\tfor ( var name in material.defines ) {\n\t\n\t    \t\t\t\tarray.push( name );\n\t    \t\t\t\tarray.push( material.defines[ name ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\t\n\t    \t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn array.join();\n\t\n\t    \t};\n\t\n\t    \tthis.acquireProgram = function ( material, parameters, code ) {\n\t\n\t    \t\tvar program;\n\t\n\t    \t\t// Check if code has been already compiled\n\t    \t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\t\n\t    \t\t\tvar programInfo = programs[ p ];\n\t\n\t    \t\t\tif ( programInfo.code === code ) {\n\t\n\t    \t\t\t\tprogram = programInfo;\n\t    \t\t\t\t++ program.usedTimes;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\tprogram = new WebGLProgram( renderer, code, material, parameters );\n\t    \t\t\tprograms.push( program );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn program;\n\t\n\t    \t};\n\t\n\t    \tthis.releaseProgram = function( program ) {\n\t\n\t    \t\tif ( -- program.usedTimes === 0 ) {\n\t\n\t    \t\t\t// Remove from unordered set\n\t    \t\t\tvar i = programs.indexOf( program );\n\t    \t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t    \t\t\tprograms.pop();\n\t\n\t    \t\t\t// Free WebGL resources\n\t    \t\t\tprogram.destroy();\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \t// Exposed for resource monitoring & error feedback via renderer.info:\n\t    \tthis.programs = programs;\n\t\n\t    }\n\t\n\t    function WebGLGeometries( gl, properties, info ) {\n\t\n\t    \tvar geometries = {};\n\t\n\t    \tfunction onGeometryDispose( event ) {\n\t\n\t    \t\tvar geometry = event.target;\n\t    \t\tvar buffergeometry = geometries[ geometry.id ];\n\t\n\t    \t\tif ( buffergeometry.index !== null ) {\n\t\n\t    \t\t\tdeleteAttribute( buffergeometry.index );\n\t\n\t    \t\t}\n\t\n\t    \t\tdeleteAttributes( buffergeometry.attributes );\n\t\n\t    \t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\t\n\t    \t\tdelete geometries[ geometry.id ];\n\t\n\t    \t\t// TODO\n\t\n\t    \t\tvar property = properties.get( geometry );\n\t\n\t    \t\tif ( property.wireframe ) {\n\t\n\t    \t\t\tdeleteAttribute( property.wireframe );\n\t\n\t    \t\t}\n\t\n\t    \t\tproperties.delete( geometry );\n\t\n\t    \t\tvar bufferproperty = properties.get( buffergeometry );\n\t\n\t    \t\tif ( bufferproperty.wireframe ) {\n\t\n\t    \t\t\tdeleteAttribute( bufferproperty.wireframe );\n\t\n\t    \t\t}\n\t\n\t    \t\tproperties.delete( buffergeometry );\n\t\n\t    \t\t//\n\t\n\t    \t\tinfo.memory.geometries --;\n\t\n\t    \t}\n\t\n\t    \tfunction getAttributeBuffer( attribute ) {\n\t\n\t    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn properties.get( attribute ).__webglBuffer;\n\t\n\t    \t}\n\t\n\t    \tfunction deleteAttribute( attribute ) {\n\t\n\t    \t\tvar buffer = getAttributeBuffer( attribute );\n\t\n\t    \t\tif ( buffer !== undefined ) {\n\t\n\t    \t\t\tgl.deleteBuffer( buffer );\n\t    \t\t\tremoveAttributeBuffer( attribute );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction deleteAttributes( attributes ) {\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tdeleteAttribute( attributes[ name ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction removeAttributeBuffer( attribute ) {\n\t\n\t    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\tproperties.delete( attribute.data );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tproperties.delete( attribute );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( object ) {\n\t\n\t    \t\t\tvar geometry = object.geometry;\n\t\n\t    \t\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\t\n\t    \t\t\t\treturn geometries[ geometry.id ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\t\n\t    \t\t\tvar buffergeometry;\n\t\n\t    \t\t\tif ( geometry.isBufferGeometry ) {\n\t\n\t    \t\t\t\tbuffergeometry = geometry;\n\t\n\t    \t\t\t} else if ( geometry.isGeometry ) {\n\t\n\t    \t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\t\n\t    \t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometries[ geometry.id ] = buffergeometry;\n\t\n\t    \t\t\tinfo.memory.geometries ++;\n\t\n\t    \t\t\treturn buffergeometry;\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLObjects( gl, properties, info ) {\n\t\n\t    \tvar geometries = new WebGLGeometries( gl, properties, info );\n\t\n\t    \t//\n\t\n\t    \tfunction update( object ) {\n\t\n\t    \t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\t\n\t    \t\tvar geometry = geometries.get( object );\n\t\n\t    \t\tif ( object.geometry.isGeometry ) {\n\t\n\t    \t\t\tgeometry.updateFromObject( object );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar index = geometry.index;\n\t    \t\tvar attributes = geometry.attributes;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\t\n\t    \t\t}\n\t\n\t    \t\t// morph targets\n\t\n\t    \t\tvar morphAttributes = geometry.morphAttributes;\n\t\n\t    \t\tfor ( var name in morphAttributes ) {\n\t\n\t    \t\t\tvar array = morphAttributes[ name ];\n\t\n\t    \t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry;\n\t\n\t    \t}\n\t\n\t    \tfunction updateAttribute( attribute, bufferType ) {\n\t\n\t    \t\tvar data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;\n\t\n\t    \t\tvar attributeProperties = properties.get( data );\n\t\n\t    \t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\t\n\t    \t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\t\n\t    \t\t} else if ( attributeProperties.version !== data.version ) {\n\t\n\t    \t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction createBuffer( attributeProperties, data, bufferType ) {\n\t\n\t    \t\tattributeProperties.__webglBuffer = gl.createBuffer();\n\t    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\t\n\t    \t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\t\n\t    \t\tgl.bufferData( bufferType, data.array, usage );\n\t\n\t    \t\tattributeProperties.version = data.version;\n\t\n\t    \t}\n\t\n\t    \tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\t\n\t    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\t\n\t    \t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\t\n\t    \t\t\t// Not using update ranges\n\t\n\t    \t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\t\n\t    \t\t} else if ( data.updateRange.count === 0 ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n\t    \t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\t\n\t    \t\t\tdata.updateRange.count = 0; // reset range\n\t\n\t    \t\t}\n\t\n\t    \t\tattributeProperties.version = data.version;\n\t\n\t    \t}\n\t\n\t    \tfunction getAttributeBuffer( attribute ) {\n\t\n\t    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn properties.get( attribute ).__webglBuffer;\n\t\n\t    \t}\n\t\n\t    \tfunction getWireframeAttribute( geometry ) {\n\t\n\t    \t\tvar property = properties.get( geometry );\n\t\n\t    \t\tif ( property.wireframe !== undefined ) {\n\t\n\t    \t\t\treturn property.wireframe;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar indices = [];\n\t\n\t    \t\tvar index = geometry.index;\n\t    \t\tvar attributes = geometry.attributes;\n\t    \t\tvar position = attributes.position;\n\t\n\t    \t\t// console.time( 'wireframe' );\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tvar edges = {};\n\t    \t\t\tvar array = index.array;\n\t\n\t    \t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\t\n\t    \t\t\t\tvar a = array[ i + 0 ];\n\t    \t\t\t\tvar b = array[ i + 1 ];\n\t    \t\t\t\tvar c = array[ i + 2 ];\n\t\n\t    \t\t\t\tindices.push( a, b, b, c, c, a );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar array = attributes.position.array;\n\t\n\t    \t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\t\n\t    \t\t\t\tvar a = i + 0;\n\t    \t\t\t\tvar b = i + 1;\n\t    \t\t\t\tvar c = i + 2;\n\t\n\t    \t\t\t\tindices.push( a, b, b, c, c, a );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// console.timeEnd( 'wireframe' );\n\t\n\t    \t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n\t    \t\tvar attribute = new BufferAttribute( new TypeArray( indices ), 1 );\n\t\n\t    \t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\t\n\t    \t\tproperty.wireframe = attribute;\n\t\n\t    \t\treturn attribute;\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tgetAttributeBuffer: getAttributeBuffer,\n\t    \t\tgetWireframeAttribute: getWireframeAttribute,\n\t\n\t    \t\tupdate: update\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\t\n\t    \tvar _infoMemory = info.memory;\n\t    \tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\t\n\t    \t//\n\t\n\t    \tfunction clampToMaxSize( image, maxSize ) {\n\t\n\t    \t\tif ( image.width > maxSize || image.height > maxSize ) {\n\t\n\t    \t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t    \t\t\t// premultiplied alpha.\n\t\n\t    \t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\t\n\t    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\t\tcanvas.width = Math.floor( image.width * scale );\n\t    \t\t\tcanvas.height = Math.floor( image.height * scale );\n\t\n\t    \t\t\tvar context = canvas.getContext( '2d' );\n\t    \t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\t\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\t\n\t    \t\t\treturn canvas;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn image;\n\t\n\t    \t}\n\t\n\t    \tfunction isPowerOfTwo( image ) {\n\t\n\t    \t\treturn exports.Math.isPowerOfTwo( image.width ) && exports.Math.isPowerOfTwo( image.height );\n\t\n\t    \t}\n\t\n\t    \tfunction makePowerOfTwo( image ) {\n\t\n\t    \t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\t\n\t    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\t\tcanvas.width = exports.Math.nearestPowerOfTwo( image.width );\n\t    \t\t\tcanvas.height = exports.Math.nearestPowerOfTwo( image.height );\n\t\n\t    \t\t\tvar context = canvas.getContext( '2d' );\n\t    \t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\t\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\t\n\t    \t\t\treturn canvas;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn image;\n\t\n\t    \t}\n\t\n\t    \tfunction textureNeedsPowerOfTwo( texture ) {\n\t\n\t    \t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;\n\t    \t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;\n\t\n\t    \t\treturn false;\n\t\n\t    \t}\n\t\n\t    \t// Fallback filters for non-power-of-2 textures\n\t\n\t    \tfunction filterFallback( f ) {\n\t\n\t    \t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\t\n\t    \t\t\treturn _gl.NEAREST;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn _gl.LINEAR;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction onTextureDispose( event ) {\n\t\n\t    \t\tvar texture = event.target;\n\t\n\t    \t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\t\n\t    \t\tdeallocateTexture( texture );\n\t\n\t    \t\t_infoMemory.textures --;\n\t\n\t\n\t    \t}\n\t\n\t    \tfunction onRenderTargetDispose( event ) {\n\t\n\t    \t\tvar renderTarget = event.target;\n\t\n\t    \t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\t\n\t    \t\tdeallocateRenderTarget( renderTarget );\n\t\n\t    \t\t_infoMemory.textures --;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction deallocateTexture( texture ) {\n\t\n\t    \t\tvar textureProperties = properties.get( texture );\n\t\n\t    \t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\t\n\t    \t\t\t// cube texture\n\t\n\t    \t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// 2D texture\n\t\n\t    \t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\t\n\t    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\t\n\t    \t\t}\n\t\n\t    \t\t// remove all webgl properties\n\t    \t\tproperties.delete( texture );\n\t\n\t    \t}\n\t\n\t    \tfunction deallocateRenderTarget( renderTarget ) {\n\t\n\t    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\t    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\n\t    \t\tif ( ! renderTarget ) return;\n\t\n\t    \t\tif ( textureProperties.__webglTexture !== undefined ) {\n\t\n\t    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( renderTarget.depthTexture ) {\n\t\n\t    \t\t\trenderTarget.depthTexture.dispose();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t    \t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t    \t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\n\t    \t\t}\n\t\n\t    \t\tproperties.delete( renderTarget.texture );\n\t    \t\tproperties.delete( renderTarget );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t\n\t\n\t    \tfunction setTexture2D( texture, slot ) {\n\t\n\t    \t\tvar textureProperties = properties.get( texture );\n\t\n\t    \t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\t\n\t    \t\t\tvar image = texture.image;\n\t\n\t    \t\t\tif ( image === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\t\n\t    \t\t\t} else if ( image.complete === false ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t    \t\t\t\treturn;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\n\t    \t}\n\t\n\t    \tfunction setTextureCube( texture, slot ) {\n\t\n\t    \t\tvar textureProperties = properties.get( texture );\n\t\n\t    \t\tif ( texture.image.length === 6 ) {\n\t\n\t    \t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\t\n\t    \t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\t\n\t    \t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\t\n\t    \t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\t\n\t    \t\t\t\t\t_infoMemory.textures ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\t\n\t    \t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\n\t    \t\t\t\tvar isCompressed = (texture && texture.isCompressedTexture);\n\t    \t\t\t\tvar isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);\n\t\n\t    \t\t\t\tvar cubeImage = [];\n\t\n\t    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\t\n\t    \t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar image = cubeImage[ 0 ],\n\t    \t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t    \t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t    \t\t\t\tglType = paramThreeToGL( texture.type );\n\t\n\t    \t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\t\n\t    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( ! isCompressed ) {\n\t\n\t    \t\t\t\t\t\tif ( isDataTexture ) {\n\t\n\t    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\t\n\t    \t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\t\n\t    \t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\t\n\t    \t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\t\n\t    \t\t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\t\n\t    \t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttextureProperties.__version = texture.version;\n\t\n\t    \t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction setTextureCubeDynamic( texture, slot ) {\n\t\n\t    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\t\n\t    \t}\n\t\n\t    \tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\t\n\t    \t\tvar extension;\n\t\n\t    \t\tif ( isPowerOfTwoImage ) {\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\t\n\t    \t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\t\n\t    \t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\n\t    \t\tif ( extension ) {\n\t\n\t    \t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t    \t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\t\n\t    \t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\t\n\t    \t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t    \t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction uploadTexture( textureProperties, texture, slot ) {\n\t\n\t    \t\tif ( textureProperties.__webglInit === undefined ) {\n\t\n\t    \t\t\ttextureProperties.__webglInit = true;\n\t\n\t    \t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\t\n\t    \t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\n\t    \t\t\t_infoMemory.textures ++;\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\n\t    \t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t    \t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t    \t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\n\t    \t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\t\n\t    \t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\t\n\t    \t\t\timage = makePowerOfTwo( image );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t    \t\tglFormat = paramThreeToGL( texture.format ),\n\t    \t\tglType = paramThreeToGL( texture.type );\n\t\n\t    \t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\t\n\t    \t\tvar mipmap, mipmaps = texture.mipmaps;\n\t\n\t    \t\tif ( (texture && texture.isDepthTexture) ) {\n\t\n\t    \t\t\t// populate depth texture with dummy data\n\t\n\t    \t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\t\n\t    \t\t\tif ( texture.type === FloatType ) {\n\t\n\t    \t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n\t    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\n\t    \t\t\t} else if ( _isWebGL2 ) {\n\t\n\t    \t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t    \t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t    \t\t\tif ( texture.format === DepthStencilFormat ) {\n\t\n\t    \t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\t\n\t    \t\t} else if ( (texture && texture.isDataTexture) ) {\n\t\n\t    \t\t\t// use manually created mipmaps if available\n\t    \t\t\t// if there are no manual mipmaps\n\t    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\n\t    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\tmipmap = mipmaps[ i ];\n\t    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture.generateMipmaps = false;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (texture && texture.isCompressedTexture) ) {\n\t\n\t    \t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tmipmap = mipmaps[ i ];\n\t\n\t    \t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\t\n\t    \t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\t\n\t    \t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// regular Texture (image, video, canvas)\n\t\n\t    \t\t\t// use manually created mipmaps if available\n\t    \t\t\t// if there are no manual mipmaps\n\t    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\n\t    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\tmipmap = mipmaps[ i ];\n\t    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture.generateMipmaps = false;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\n\t    \t\ttextureProperties.__version = texture.version;\n\t\n\t    \t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t    \t}\n\t\n\t    \t// Render targets\n\t\n\t    \t// Setup storage for target texture and bind it to correct framebuffer\n\t    \tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\t\n\t    \t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n\t    \t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n\t    \t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t    \t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\n\t    \t}\n\t\n\t    \t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t    \tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\t\n\t    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\t\n\t    \t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\t\n\t    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\t\n\t    \t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\t\n\t    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// FIXME: We don't support !depth !stencil\n\t    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\t\n\t    \t\t}\n\t\n\t    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\t\n\t    \t}\n\t\n\t    \t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t    \tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\t\n\t    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t    \t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\t\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\n\t    \t\tif ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {\n\t\n\t    \t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\n\t    \t\t}\n\t\n\t    \t\t// upload an empty depth texture with framebuffer size\n\t    \t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t    \t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t    \t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\t    \t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t    \t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t    \t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t    \t\t}\n\t\n\t    \t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\t\n\t    \t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\n\t    \t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\t\n\t    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\t\n\t    \t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\t\n\t    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthrow new Error('Unknown depthTexture format')\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Setup GL resources for a non-texture depth buffer\n\t    \tfunction setupDepthRenderbuffer( renderTarget ) {\n\t\n\t    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\n\t    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t\n\t    \t\tif ( renderTarget.depthTexture ) {\n\t\n\t    \t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\n\t    \t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tif ( isCube ) {\n\t\n\t    \t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\t\n\t    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t    \t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t    \t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t    \t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t    \t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\n\t    \t}\n\t\n\t    \t// Set up GL resources for the render target\n\t    \tfunction setupRenderTarget( renderTarget ) {\n\t\n\t    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\t    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\n\t    \t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\t\n\t    \t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\n\t    \t\t_infoMemory.textures ++;\n\t\n\t    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t    \t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\t\n\t    \t\t// Setup framebuffer\n\t\n\t    \t\tif ( isCube ) {\n\t\n\t    \t\t\trenderTargetProperties.__webglFramebuffer = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\t\n\t    \t\t}\n\t\n\t    \t\t// Setup color buffer\n\t\n\t    \t\tif ( isCube ) {\n\t\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t    \t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\t\n\t    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t    \t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t    \t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\t\n\t    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\t\n\t    \t\t}\n\t\n\t    \t\t// Setup depth and stencil buffers\n\t\n\t    \t\tif ( renderTarget.depthBuffer ) {\n\t\n\t    \t\t\tsetupDepthRenderbuffer( renderTarget );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction updateRenderTargetMipmap( renderTarget ) {\n\t\n\t    \t\tvar texture = renderTarget.texture;\n\t\n\t    \t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n\t    \t\t\t\ttexture.minFilter !== NearestFilter &&\n\t    \t\t\t\ttexture.minFilter !== LinearFilter ) {\n\t\n\t    \t\t\tvar target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t    \t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\t\n\t    \t\t\tstate.bindTexture( target, webglTexture );\n\t    \t\t\t_gl.generateMipmap( target );\n\t    \t\t\tstate.bindTexture( target, null );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.setTexture2D = setTexture2D;\n\t    \tthis.setTextureCube = setTextureCube;\n\t    \tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t    \tthis.setupRenderTarget = setupRenderTarget;\n\t    \tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\n\t    }\n\t\n\t    /**\n\t     * @author fordacious / fordacious.github.io\n\t     */\n\t\n\t    function WebGLProperties() {\n\t\n\t    \tvar properties = {};\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( object ) {\n\t\n\t    \t\t\tvar uuid = object.uuid;\n\t    \t\t\tvar map = properties[ uuid ];\n\t\n\t    \t\t\tif ( map === undefined ) {\n\t\n\t    \t\t\t\tmap = {};\n\t    \t\t\t\tproperties[ uuid ] = map;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn map;\n\t\n\t    \t\t},\n\t\n\t    \t\tdelete: function ( object ) {\n\t\n\t    \t\t\tdelete properties[ object.uuid ];\n\t\n\t    \t\t},\n\t\n\t    \t\tclear: function () {\n\t\n\t    \t\t\tproperties = {};\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLState( gl, extensions, paramThreeToGL ) {\n\t\n\t    \tfunction ColorBuffer() {\n\t\n\t    \t\tvar locked = false;\n\t\n\t    \t\tvar color = new Vector4();\n\t    \t\tvar currentColorMask = null;\n\t    \t\tvar currentColorClear = new Vector4();\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tsetMask: function ( colorMask ) {\n\t\n\t    \t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\t\n\t    \t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t    \t\t\t\t\tcurrentColorMask = colorMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetLocked: function ( lock ) {\n\t\n\t    \t\t\t\tlocked = lock;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetClear: function ( r, g, b, a ) {\n\t\n\t    \t\t\t\tcolor.set( r, g, b, a );\n\t\n\t    \t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\t\n\t    \t\t\t\t\tgl.clearColor( r, g, b, a );\n\t    \t\t\t\t\tcurrentColorClear.copy( color );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\treset: function () {\n\t\n\t    \t\t\t\tlocked = false;\n\t\n\t    \t\t\t\tcurrentColorMask = null;\n\t    \t\t\t\tcurrentColorClear.set( 0, 0, 0, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \tfunction DepthBuffer() {\n\t\n\t    \t\tvar locked = false;\n\t\n\t    \t\tvar currentDepthMask = null;\n\t    \t\tvar currentDepthFunc = null;\n\t    \t\tvar currentDepthClear = null;\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tsetTest: function ( depthTest ) {\n\t\n\t    \t\t\t\tif ( depthTest ) {\n\t\n\t    \t\t\t\t\tenable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tdisable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetMask: function ( depthMask ) {\n\t\n\t    \t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\t\n\t    \t\t\t\t\tgl.depthMask( depthMask );\n\t    \t\t\t\t\tcurrentDepthMask = depthMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetFunc: function ( depthFunc ) {\n\t\n\t    \t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\t\n\t    \t\t\t\t\tif ( depthFunc ) {\n\t\n\t    \t\t\t\t\t\tswitch ( depthFunc ) {\n\t\n\t    \t\t\t\t\t\t\tcase NeverDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase AlwaysDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase LessDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase LessEqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase EqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase GreaterDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase NotEqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tdefault:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetLocked: function ( lock ) {\n\t\n\t    \t\t\t\tlocked = lock;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetClear: function ( depth ) {\n\t\n\t    \t\t\t\tif ( currentDepthClear !== depth ) {\n\t\n\t    \t\t\t\t\tgl.clearDepth( depth );\n\t    \t\t\t\t\tcurrentDepthClear = depth;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\treset: function () {\n\t\n\t    \t\t\t\tlocked = false;\n\t\n\t    \t\t\t\tcurrentDepthMask = null;\n\t    \t\t\t\tcurrentDepthFunc = null;\n\t    \t\t\t\tcurrentDepthClear = null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \tfunction StencilBuffer() {\n\t\n\t    \t\tvar locked = false;\n\t\n\t    \t\tvar currentStencilMask = null;\n\t    \t\tvar currentStencilFunc = null;\n\t    \t\tvar currentStencilRef = null;\n\t    \t\tvar currentStencilFuncMask = null;\n\t    \t\tvar currentStencilFail  = null;\n\t    \t\tvar currentStencilZFail = null;\n\t    \t\tvar currentStencilZPass = null;\n\t    \t\tvar currentStencilClear = null;\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tsetTest: function ( stencilTest ) {\n\t\n\t    \t\t\t\tif ( stencilTest ) {\n\t\n\t    \t\t\t\t\tenable( gl.STENCIL_TEST );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tdisable( gl.STENCIL_TEST );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetMask: function ( stencilMask ) {\n\t\n\t    \t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\t\n\t    \t\t\t\t\tgl.stencilMask( stencilMask );\n\t    \t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\t\n\t    \t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t    \t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t    \t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\t\n\t    \t\t\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\t\n\t    \t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t    \t\t\t\t\tcurrentStencilRef  = stencilRef;\n\t    \t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\t\n\t    \t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t    \t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t    \t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\t\n\t    \t\t\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\t\n\t    \t\t\t\t\tcurrentStencilFail  = stencilFail;\n\t    \t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t    \t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetLocked: function ( lock ) {\n\t\n\t    \t\t\t\tlocked = lock;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetClear: function ( stencil ) {\n\t\n\t    \t\t\t\tif ( currentStencilClear !== stencil ) {\n\t\n\t    \t\t\t\t\tgl.clearStencil( stencil );\n\t    \t\t\t\t\tcurrentStencilClear = stencil;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\treset: function () {\n\t\n\t    \t\t\t\tlocked = false;\n\t\n\t    \t\t\t\tcurrentStencilMask = null;\n\t    \t\t\t\tcurrentStencilFunc = null;\n\t    \t\t\t\tcurrentStencilRef = null;\n\t    \t\t\t\tcurrentStencilFuncMask = null;\n\t    \t\t\t\tcurrentStencilFail = null;\n\t    \t\t\t\tcurrentStencilZFail = null;\n\t    \t\t\t\tcurrentStencilZPass = null;\n\t    \t\t\t\tcurrentStencilClear = null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar colorBuffer = new ColorBuffer();\n\t    \tvar depthBuffer = new DepthBuffer();\n\t    \tvar stencilBuffer = new StencilBuffer();\n\t\n\t    \tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t    \tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t    \tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t    \tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\t\n\t    \tvar capabilities = {};\n\t\n\t    \tvar compressedTextureFormats = null;\n\t\n\t    \tvar currentBlending = null;\n\t    \tvar currentBlendEquation = null;\n\t    \tvar currentBlendSrc = null;\n\t    \tvar currentBlendDst = null;\n\t    \tvar currentBlendEquationAlpha = null;\n\t    \tvar currentBlendSrcAlpha = null;\n\t    \tvar currentBlendDstAlpha = null;\n\t    \tvar currentPremultipledAlpha = false;\n\t\n\t    \tvar currentFlipSided = null;\n\t    \tvar currentCullFace = null;\n\t\n\t    \tvar currentLineWidth = null;\n\t\n\t    \tvar currentPolygonOffsetFactor = null;\n\t    \tvar currentPolygonOffsetUnits = null;\n\t\n\t    \tvar currentScissorTest = null;\n\t\n\t    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\n\t    \tvar currentTextureSlot = null;\n\t    \tvar currentBoundTextures = {};\n\t\n\t    \tvar currentScissor = new Vector4();\n\t    \tvar currentViewport = new Vector4();\n\t\n\t    \tfunction createTexture( type, target, count ) {\n\t\n\t    \t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t    \t\tvar texture = gl.createTexture();\n\t\n\t    \t\tgl.bindTexture( type, texture );\n\t    \t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t    \t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\n\t    \t\tfor ( var i = 0; i < count; i ++ ) {\n\t\n\t    \t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn texture;\n\t\n\t    \t}\n\t\n\t    \tvar emptyTextures = {};\n\t    \temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\t    \temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\t\n\t    \t//\n\t\n\t    \tfunction init() {\n\t\n\t    \t\tclearColor( 0, 0, 0, 1 );\n\t    \t\tclearDepth( 1 );\n\t    \t\tclearStencil( 0 );\n\t\n\t    \t\tenable( gl.DEPTH_TEST );\n\t    \t\tsetDepthFunc( LessEqualDepth );\n\t\n\t    \t\tsetFlipSided( false );\n\t    \t\tsetCullFace( CullFaceBack );\n\t    \t\tenable( gl.CULL_FACE );\n\t\n\t    \t\tenable( gl.BLEND );\n\t    \t\tsetBlending( NormalBlending );\n\t\n\t    \t}\n\t\n\t    \tfunction initAttributes() {\n\t\n\t    \t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\t\n\t    \t\t\tnewAttributes[ i ] = 0;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction enableAttribute( attribute ) {\n\t\n\t    \t\tnewAttributes[ attribute ] = 1;\n\t\n\t    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\t\n\t    \t\t\tgl.enableVertexAttribArray( attribute );\n\t    \t\t\tenabledAttributes[ attribute ] = 1;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\t\n\t    \t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t    \t\t\tattributeDivisors[ attribute ] = 0;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {\n\t\n\t    \t\tnewAttributes[ attribute ] = 1;\n\t\n\t    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\t\n\t    \t\t\tgl.enableVertexAttribArray( attribute );\n\t    \t\t\tenabledAttributes[ attribute ] = 1;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\t\n\t    \t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t    \t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction disableUnusedAttributes() {\n\t\n\t    \t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\t\n\t    \t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\t\n\t    \t\t\t\tgl.disableVertexAttribArray( i );\n\t    \t\t\t\tenabledAttributes[ i ] = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction enable( id ) {\n\t\n\t    \t\tif ( capabilities[ id ] !== true ) {\n\t\n\t    \t\t\tgl.enable( id );\n\t    \t\t\tcapabilities[ id ] = true;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction disable( id ) {\n\t\n\t    \t\tif ( capabilities[ id ] !== false ) {\n\t\n\t    \t\t\tgl.disable( id );\n\t    \t\t\tcapabilities[ id ] = false;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction getCompressedTextureFormats() {\n\t\n\t    \t\tif ( compressedTextureFormats === null ) {\n\t\n\t    \t\t\tcompressedTextureFormats = [];\n\t\n\t    \t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t    \t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t    \t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\t\n\t    \t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\t\n\t    \t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\t\n\t    \t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn compressedTextureFormats;\n\t\n\t    \t}\n\t\n\t    \tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\t\n\t    \t\tif ( blending !== NoBlending ) {\n\t\n\t    \t\t\tenable( gl.BLEND );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.BLEND );\n\t    \t\t\tcurrentBlending = blending; // no blending, that is\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\t\n\t    \t\t\tif ( blending === AdditiveBlending ) {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( blending === SubtractiveBlending ) {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( blending === MultiplyBlending ) {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcurrentBlending = blending;\n\t    \t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( blending === CustomBlending ) {\n\t\n\t    \t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t    \t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t    \t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\t\n\t    \t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\t\n\t    \t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\t\n\t    \t\t\t\tcurrentBlendEquation = blendEquation;\n\t    \t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\t\n\t    \t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\t\n\t    \t\t\t\tcurrentBlendSrc = blendSrc;\n\t    \t\t\t\tcurrentBlendDst = blendDst;\n\t    \t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t    \t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tcurrentBlendEquation = null;\n\t    \t\t\tcurrentBlendSrc = null;\n\t    \t\t\tcurrentBlendDst = null;\n\t    \t\t\tcurrentBlendEquationAlpha = null;\n\t    \t\t\tcurrentBlendSrcAlpha = null;\n\t    \t\t\tcurrentBlendDstAlpha = null;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// TODO Deprecate\n\t\n\t    \tfunction setColorWrite( colorWrite ) {\n\t\n\t    \t\tcolorBuffer.setMask( colorWrite );\n\t\n\t    \t}\n\t\n\t    \tfunction setDepthTest( depthTest ) {\n\t\n\t    \t\tdepthBuffer.setTest( depthTest );\n\t\n\t    \t}\n\t\n\t    \tfunction setDepthWrite( depthWrite ) {\n\t\n\t    \t\tdepthBuffer.setMask( depthWrite );\n\t\n\t    \t}\n\t\n\t    \tfunction setDepthFunc( depthFunc ) {\n\t\n\t    \t\tdepthBuffer.setFunc( depthFunc );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilTest( stencilTest ) {\n\t\n\t    \t\tstencilBuffer.setTest( stencilTest );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilWrite( stencilWrite ) {\n\t\n\t    \t\tstencilBuffer.setMask( stencilWrite );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilFunc( stencilFunc, stencilRef, stencilMask ) {\n\t\n\t    \t\tstencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilOp( stencilFail, stencilZFail, stencilZPass ) {\n\t\n\t    \t\tstencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction setFlipSided( flipSided ) {\n\t\n\t    \t\tif ( currentFlipSided !== flipSided ) {\n\t\n\t    \t\t\tif ( flipSided ) {\n\t\n\t    \t\t\t\tgl.frontFace( gl.CW );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tgl.frontFace( gl.CCW );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcurrentFlipSided = flipSided;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction setCullFace( cullFace ) {\n\t\n\t    \t\tif ( cullFace !== CullFaceNone ) {\n\t\n\t    \t\t\tenable( gl.CULL_FACE );\n\t\n\t    \t\t\tif ( cullFace !== currentCullFace ) {\n\t\n\t    \t\t\t\tif ( cullFace === CullFaceBack ) {\n\t\n\t    \t\t\t\t\tgl.cullFace( gl.BACK );\n\t\n\t    \t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\t\n\t    \t\t\t\t\tgl.cullFace( gl.FRONT );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.CULL_FACE );\n\t\n\t    \t\t}\n\t\n\t    \t\tcurrentCullFace = cullFace;\n\t\n\t    \t}\n\t\n\t    \tfunction setLineWidth( width ) {\n\t\n\t    \t\tif ( width !== currentLineWidth ) {\n\t\n\t    \t\t\tgl.lineWidth( width );\n\t\n\t    \t\t\tcurrentLineWidth = width;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\t\n\t    \t\tif ( polygonOffset ) {\n\t\n\t    \t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\t\n\t    \t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\t\n\t    \t\t\t\tgl.polygonOffset( factor, units );\n\t\n\t    \t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t    \t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction getScissorTest() {\n\t\n\t    \t\treturn currentScissorTest;\n\t\n\t    \t}\n\t\n\t    \tfunction setScissorTest( scissorTest ) {\n\t\n\t    \t\tcurrentScissorTest = scissorTest;\n\t\n\t    \t\tif ( scissorTest ) {\n\t\n\t    \t\t\tenable( gl.SCISSOR_TEST );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.SCISSOR_TEST );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// texture\n\t\n\t    \tfunction activeTexture( webglSlot ) {\n\t\n\t    \t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\t\n\t    \t\tif ( currentTextureSlot !== webglSlot ) {\n\t\n\t    \t\t\tgl.activeTexture( webglSlot );\n\t    \t\t\tcurrentTextureSlot = webglSlot;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction bindTexture( webglType, webglTexture ) {\n\t\n\t    \t\tif ( currentTextureSlot === null ) {\n\t\n\t    \t\t\tactiveTexture();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\t\n\t    \t\tif ( boundTexture === undefined ) {\n\t\n\t    \t\t\tboundTexture = { type: undefined, texture: undefined };\n\t    \t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\t\n\t    \t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\t\n\t    \t\t\tboundTexture.type = webglType;\n\t    \t\t\tboundTexture.texture = webglTexture;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction compressedTexImage2D() {\n\t\n\t    \t\ttry {\n\t\n\t    \t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\t\n\t    \t\t} catch ( error ) {\n\t\n\t    \t\t\tconsole.error( error );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction texImage2D() {\n\t\n\t    \t\ttry {\n\t\n\t    \t\t\tgl.texImage2D.apply( gl, arguments );\n\t\n\t    \t\t} catch ( error ) {\n\t\n\t    \t\t\tconsole.error( error );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// TODO Deprecate\n\t\n\t    \tfunction clearColor( r, g, b, a ) {\n\t\n\t    \t\tcolorBuffer.setClear( r, g, b, a );\n\t\n\t    \t}\n\t\n\t    \tfunction clearDepth( depth ) {\n\t\n\t    \t\tdepthBuffer.setClear( depth );\n\t\n\t    \t}\n\t\n\t    \tfunction clearStencil( stencil ) {\n\t\n\t    \t\tstencilBuffer.setClear( stencil );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction scissor( scissor ) {\n\t\n\t    \t\tif ( currentScissor.equals( scissor ) === false ) {\n\t\n\t    \t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t    \t\t\tcurrentScissor.copy( scissor );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction viewport( viewport ) {\n\t\n\t    \t\tif ( currentViewport.equals( viewport ) === false ) {\n\t\n\t    \t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t    \t\t\tcurrentViewport.copy( viewport );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction reset() {\n\t\n\t    \t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\t\n\t    \t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\t\n\t    \t\t\t\tgl.disableVertexAttribArray( i );\n\t    \t\t\t\tenabledAttributes[ i ] = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tcapabilities = {};\n\t\n\t    \t\tcompressedTextureFormats = null;\n\t\n\t    \t\tcurrentTextureSlot = null;\n\t    \t\tcurrentBoundTextures = {};\n\t\n\t    \t\tcurrentBlending = null;\n\t\n\t    \t\tcurrentFlipSided = null;\n\t    \t\tcurrentCullFace = null;\n\t\n\t    \t\tcolorBuffer.reset();\n\t    \t\tdepthBuffer.reset();\n\t    \t\tstencilBuffer.reset();\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tbuffers: {\n\t    \t\t\tcolor: colorBuffer,\n\t    \t\t\tdepth: depthBuffer,\n\t    \t\t\tstencil: stencilBuffer\n\t    \t\t},\n\t\n\t    \t\tinit: init,\n\t    \t\tinitAttributes: initAttributes,\n\t    \t\tenableAttribute: enableAttribute,\n\t    \t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t    \t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t    \t\tenable: enable,\n\t    \t\tdisable: disable,\n\t    \t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\t\n\t    \t\tsetBlending: setBlending,\n\t\n\t    \t\tsetColorWrite: setColorWrite,\n\t    \t\tsetDepthTest: setDepthTest,\n\t    \t\tsetDepthWrite: setDepthWrite,\n\t    \t\tsetDepthFunc: setDepthFunc,\n\t    \t\tsetStencilTest: setStencilTest,\n\t    \t\tsetStencilWrite: setStencilWrite,\n\t    \t\tsetStencilFunc: setStencilFunc,\n\t    \t\tsetStencilOp: setStencilOp,\n\t\n\t    \t\tsetFlipSided: setFlipSided,\n\t    \t\tsetCullFace: setCullFace,\n\t\n\t    \t\tsetLineWidth: setLineWidth,\n\t    \t\tsetPolygonOffset: setPolygonOffset,\n\t\n\t    \t\tgetScissorTest: getScissorTest,\n\t    \t\tsetScissorTest: setScissorTest,\n\t\n\t    \t\tactiveTexture: activeTexture,\n\t    \t\tbindTexture: bindTexture,\n\t    \t\tcompressedTexImage2D: compressedTexImage2D,\n\t    \t\ttexImage2D: texImage2D,\n\t\n\t    \t\tclearColor: clearColor,\n\t    \t\tclearDepth: clearDepth,\n\t    \t\tclearStencil: clearStencil,\n\t\n\t    \t\tscissor: scissor,\n\t    \t\tviewport: viewport,\n\t\n\t    \t\treset: reset\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLCapabilities( gl, extensions, parameters ) {\n\t\n\t    \tvar maxAnisotropy;\n\t\n\t    \tfunction getMaxAnisotropy() {\n\t\n\t    \t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\t\n\t    \t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmaxAnisotropy = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn maxAnisotropy;\n\t\n\t    \t}\n\t\n\t    \tfunction getMaxPrecision( precision ) {\n\t\n\t    \t\tif ( precision === 'highp' ) {\n\t\n\t    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\t\n\t    \t\t\t\treturn 'highp';\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tprecision = 'mediump';\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( precision === 'mediump' ) {\n\t\n\t    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\t\n\t    \t\t\t\treturn 'mediump';\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn 'lowp';\n\t\n\t    \t}\n\t\n\t    \tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t    \tvar maxPrecision = getMaxPrecision( precision );\n\t\n\t    \tif ( maxPrecision !== precision ) {\n\t\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t    \t\tprecision = maxPrecision;\n\t\n\t    \t}\n\t\n\t    \tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );\n\t\n\t    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t    \tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\t    \tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\t    \tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\t\n\t    \tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t    \tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\t    \tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\t    \tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\t\n\t    \tvar vertexTextures = maxVertexTextures > 0;\n\t    \tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\t    \tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\n\t    \treturn {\n\t\n\t    \t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t    \t\tgetMaxPrecision: getMaxPrecision,\n\t\n\t    \t\tprecision: precision,\n\t    \t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\n\t    \t\tmaxTextures: maxTextures,\n\t    \t\tmaxVertexTextures: maxVertexTextures,\n\t    \t\tmaxTextureSize: maxTextureSize,\n\t    \t\tmaxCubemapSize: maxCubemapSize,\n\t\n\t    \t\tmaxAttributes: maxAttributes,\n\t    \t\tmaxVertexUniforms: maxVertexUniforms,\n\t    \t\tmaxVaryings: maxVaryings,\n\t    \t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\n\t    \t\tvertexTextures: vertexTextures,\n\t    \t\tfloatFragmentTextures: floatFragmentTextures,\n\t    \t\tfloatVertexTextures: floatVertexTextures\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLExtensions( gl ) {\n\t\n\t    \tvar extensions = {};\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( name ) {\n\t\n\t    \t\t\tif ( extensions[ name ] !== undefined ) {\n\t\n\t    \t\t\t\treturn extensions[ name ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar extension;\n\t\n\t    \t\t\tswitch ( name ) {\n\t\n\t    \t\t\t\tcase 'WEBGL_depth_texture':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t    \t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault:\n\t    \t\t\t\t\textension = gl.getExtension( name );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( extension === null ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\textensions[ name ] = extension;\n\t\n\t    \t\t\treturn extension;\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLClipping() {\n\t\n\t    \tvar scope = this,\n\t\n\t    \t\tglobalState = null,\n\t    \t\tnumGlobalPlanes = 0,\n\t    \t\tlocalClippingEnabled = false,\n\t    \t\trenderingShadows = false,\n\t\n\t    \t\tplane = new Plane(),\n\t    \t\tviewNormalMatrix = new Matrix3(),\n\t\n\t    \t\tuniform = { value: null, needsUpdate: false };\n\t\n\t    \tthis.uniform = uniform;\n\t    \tthis.numPlanes = 0;\n\t\n\t    \tthis.init = function( planes, enableLocalClipping, camera ) {\n\t\n\t    \t\tvar enabled =\n\t    \t\t\tplanes.length !== 0 ||\n\t    \t\t\tenableLocalClipping ||\n\t    \t\t\t// enable state of previous frame - the clipping code has to\n\t    \t\t\t// run another frame in order to reset the state:\n\t    \t\t\tnumGlobalPlanes !== 0 ||\n\t    \t\t\tlocalClippingEnabled;\n\t\n\t    \t\tlocalClippingEnabled = enableLocalClipping;\n\t\n\t    \t\tglobalState = projectPlanes( planes, camera, 0 );\n\t    \t\tnumGlobalPlanes = planes.length;\n\t\n\t    \t\treturn enabled;\n\t\n\t    \t};\n\t\n\t    \tthis.beginShadows = function() {\n\t\n\t    \t\trenderingShadows = true;\n\t    \t\tprojectPlanes( null );\n\t\n\t    \t};\n\t\n\t    \tthis.endShadows = function() {\n\t\n\t    \t\trenderingShadows = false;\n\t    \t\tresetGlobalState();\n\t\n\t    \t};\n\t\n\t    \tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\t\n\t    \t\tif ( ! localClippingEnabled ||\n\t    \t\t\t\tplanes === null || planes.length === 0 ||\n\t    \t\t\t\trenderingShadows && ! clipShadows ) {\n\t    \t\t\t// there's no local clipping\n\t\n\t    \t\t\tif ( renderingShadows ) {\n\t    \t\t\t\t// there's no global clipping\n\t\n\t    \t\t\t\tprojectPlanes( null );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tresetGlobalState();\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t    \t\t\t\tlGlobal = nGlobal * 4,\n\t\n\t    \t\t\t\tdstArray = cache.clippingState || null;\n\t\n\t    \t\t\tuniform.value = dstArray; // ensure unique state\n\t\n\t    \t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\t\n\t    \t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\t\n\t    \t\t\t\tdstArray[ i ] = globalState[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcache.clippingState = dstArray;\n\t    \t\t\tthis.numPlanes += nGlobal;\n\t\n\t    \t\t}\n\t\n\t\n\t    \t};\n\t\n\t    \tfunction resetGlobalState() {\n\t\n\t    \t\tif ( uniform.value !== globalState ) {\n\t\n\t    \t\t\tuniform.value = globalState;\n\t    \t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\n\t    \t\t}\n\t\n\t    \t\tscope.numPlanes = numGlobalPlanes;\n\t\n\t    \t}\n\t\n\t    \tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\t\n\t    \t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t    \t\t\tdstArray = null;\n\t\n\t    \t\tif ( nPlanes !== 0 ) {\n\t\n\t    \t\t\tdstArray = uniform.value;\n\t\n\t    \t\t\tif ( skipTransform !== true || dstArray === null ) {\n\t\n\t    \t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t    \t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\n\t    \t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\t\n\t    \t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\t\n\t    \t\t\t\t\tdstArray = new Float32Array( flatSize );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( var i = 0, i4 = dstOffset;\n\t    \t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\t\n\t    \t\t\t\t\tplane.copy( planes[ i ] ).\n\t    \t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\t\n\t    \t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t    \t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tuniform.value = dstArray;\n\t    \t\t\tuniform.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tscope.numPlanes = nPlanes;\n\t    \t\treturn dstArray;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author supereggbert / http://www.paulbrunt.co.uk/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author szimek / https://github.com/szimek/\n\t     * @author tschw\n\t     */\n\t\n\t    function WebGLRenderer( parameters ) {\n\t\n\t    \tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\t\n\t    \tparameters = parameters || {};\n\t\n\t    \tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t    \t_context = parameters.context !== undefined ? parameters.context : null,\n\t\n\t    \t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t    \t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t    \t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t    \t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t    \t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t    \t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\t\n\t    \tvar lights = [];\n\t\n\t    \tvar opaqueObjects = [];\n\t    \tvar opaqueObjectsLastIndex = - 1;\n\t    \tvar transparentObjects = [];\n\t    \tvar transparentObjectsLastIndex = - 1;\n\t\n\t    \tvar morphInfluences = new Float32Array( 8 );\n\t\n\t    \tvar sprites = [];\n\t    \tvar lensFlares = [];\n\t\n\t    \t// public properties\n\t\n\t    \tthis.domElement = _canvas;\n\t    \tthis.context = null;\n\t\n\t    \t// clearing\n\t\n\t    \tthis.autoClear = true;\n\t    \tthis.autoClearColor = true;\n\t    \tthis.autoClearDepth = true;\n\t    \tthis.autoClearStencil = true;\n\t\n\t    \t// scene graph\n\t\n\t    \tthis.sortObjects = true;\n\t\n\t    \t// user-defined clipping\n\t\n\t    \tthis.clippingPlanes = [];\n\t    \tthis.localClippingEnabled = false;\n\t\n\t    \t// physically based shading\n\t\n\t    \tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t    \tthis.gammaInput = false;\n\t    \tthis.gammaOutput = false;\n\t\n\t    \t// physical lights\n\t\n\t    \tthis.physicallyCorrectLights = false;\n\t\n\t    \t// tone mapping\n\t\n\t    \tthis.toneMapping = LinearToneMapping;\n\t    \tthis.toneMappingExposure = 1.0;\n\t    \tthis.toneMappingWhitePoint = 1.0;\n\t\n\t    \t// morphs\n\t\n\t    \tthis.maxMorphTargets = 8;\n\t    \tthis.maxMorphNormals = 4;\n\t\n\t    \t// internal properties\n\t\n\t    \tvar _this = this,\n\t\n\t    \t// internal state cache\n\t\n\t    \t_currentProgram = null,\n\t    \t_currentRenderTarget = null,\n\t    \t_currentFramebuffer = null,\n\t    \t_currentMaterialId = - 1,\n\t    \t_currentGeometryProgram = '',\n\t    \t_currentCamera = null,\n\t\n\t    \t_currentScissor = new Vector4(),\n\t    \t_currentScissorTest = null,\n\t\n\t    \t_currentViewport = new Vector4(),\n\t\n\t    \t//\n\t\n\t    \t_usedTextureUnits = 0,\n\t\n\t    \t//\n\t\n\t    \t_clearColor = new Color( 0x000000 ),\n\t    \t_clearAlpha = 0,\n\t\n\t    \t_width = _canvas.width,\n\t    \t_height = _canvas.height,\n\t\n\t    \t_pixelRatio = 1,\n\t\n\t    \t_scissor = new Vector4( 0, 0, _width, _height ),\n\t    \t_scissorTest = false,\n\t\n\t    \t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\n\t    \t// frustum\n\t\n\t    \t_frustum = new Frustum(),\n\t\n\t    \t// clipping\n\t\n\t    \t_clipping = new WebGLClipping(),\n\t    \t_clippingEnabled = false,\n\t    \t_localClippingEnabled = false,\n\t\n\t    \t_sphere = new Sphere(),\n\t\n\t    \t// camera matrices cache\n\t\n\t    \t_projScreenMatrix = new Matrix4(),\n\t\n\t    \t_vector3 = new Vector3(),\n\t\n\t    \t// light arrays cache\n\t\n\t    \t_lights = {\n\t\n\t    \t\thash: '',\n\t\n\t    \t\tambient: [ 0, 0, 0 ],\n\t    \t\tdirectional: [],\n\t    \t\tdirectionalShadowMap: [],\n\t    \t\tdirectionalShadowMatrix: [],\n\t    \t\tspot: [],\n\t    \t\tspotShadowMap: [],\n\t    \t\tspotShadowMatrix: [],\n\t    \t\tpoint: [],\n\t    \t\tpointShadowMap: [],\n\t    \t\tpointShadowMatrix: [],\n\t    \t\themi: [],\n\t\n\t    \t\tshadows: []\n\t\n\t    \t},\n\t\n\t    \t// info\n\t\n\t    \t_infoRender = {\n\t\n\t    \t\tcalls: 0,\n\t    \t\tvertices: 0,\n\t    \t\tfaces: 0,\n\t    \t\tpoints: 0\n\t\n\t    \t};\n\t\n\t    \tthis.info = {\n\t\n\t    \t\trender: _infoRender,\n\t    \t\tmemory: {\n\t\n\t    \t\t\tgeometries: 0,\n\t    \t\t\ttextures: 0\n\t\n\t    \t\t},\n\t    \t\tprograms: null\n\t\n\t    \t};\n\t\n\t\n\t    \t// initialize\n\t\n\t    \tvar _gl;\n\t\n\t    \ttry {\n\t\n\t    \t\tvar attributes = {\n\t    \t\t\talpha: _alpha,\n\t    \t\t\tdepth: _depth,\n\t    \t\t\tstencil: _stencil,\n\t    \t\t\tantialias: _antialias,\n\t    \t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t    \t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t    \t\t};\n\t\n\t    \t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\t\n\t    \t\tif ( _gl === null ) {\n\t\n\t    \t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\t\n\t    \t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthrow 'Error creating WebGL context.';\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\t\n\t    \t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\t\n\t    \t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\n\t    \t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\t\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\n\t    \t} catch ( error ) {\n\t\n\t    \t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\t\n\t    \t}\n\t\n\t    \tvar extensions = new WebGLExtensions( _gl );\n\t\n\t    \textensions.get( 'WEBGL_depth_texture' );\n\t    \textensions.get( 'OES_texture_float' );\n\t    \textensions.get( 'OES_texture_float_linear' );\n\t    \textensions.get( 'OES_texture_half_float' );\n\t    \textensions.get( 'OES_texture_half_float_linear' );\n\t    \textensions.get( 'OES_standard_derivatives' );\n\t    \textensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\t\n\t    \t\tBufferGeometry.MaxIndex = 4294967296;\n\t\n\t    \t}\n\t\n\t    \tvar capabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\t\n\t    \tvar state = new WebGLState( _gl, extensions, paramThreeToGL );\n\t    \tvar properties = new WebGLProperties();\n\t    \tvar textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n\t    \tvar objects = new WebGLObjects( _gl, properties, this.info );\n\t    \tvar programCache = new WebGLPrograms( this, capabilities );\n\t    \tvar lightCache = new WebGLLights();\n\t\n\t    \tthis.info.programs = programCache.programs;\n\t\n\t    \tvar bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n\t    \tvar indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\t\n\t    \t//\n\t\n\t    \tvar backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t    \tvar backgroundCamera2 = new PerspectiveCamera();\n\t    \tvar backgroundPlaneMesh = new Mesh(\n\t    \t\tnew PlaneBufferGeometry( 2, 2 ),\n\t    \t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t    \t);\n\t    \tvar backgroundBoxShader = ShaderLib[ 'cube' ];\n\t    \tvar backgroundBoxMesh = new Mesh(\n\t    \t\tnew BoxBufferGeometry( 5, 5, 5 ),\n\t    \t\tnew ShaderMaterial( {\n\t    \t\t\tuniforms: backgroundBoxShader.uniforms,\n\t    \t\t\tvertexShader: backgroundBoxShader.vertexShader,\n\t    \t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n\t    \t\t\tside: BackSide,\n\t    \t\t\tdepthTest: false,\n\t    \t\t\tdepthWrite: false,\n\t    \t\t\tfog: false\n\t    \t\t} )\n\t    \t);\n\t\n\t    \t//\n\t\n\t    \tfunction getTargetPixelRatio() {\n\t\n\t    \t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\n\t    \t}\n\t\n\t    \tfunction glClearColor( r, g, b, a ) {\n\t\n\t    \t\tif ( _premultipliedAlpha === true ) {\n\t\n\t    \t\t\tr *= a; g *= a; b *= a;\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.clearColor( r, g, b, a );\n\t\n\t    \t}\n\t\n\t    \tfunction setDefaultGLState() {\n\t\n\t    \t\tstate.init();\n\t\n\t    \t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t    \t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\t\n\t    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t}\n\t\n\t    \tfunction resetGLState() {\n\t\n\t    \t\t_currentProgram = null;\n\t    \t\t_currentCamera = null;\n\t\n\t    \t\t_currentGeometryProgram = '';\n\t    \t\t_currentMaterialId = - 1;\n\t\n\t    \t\tstate.reset();\n\t\n\t    \t}\n\t\n\t    \tsetDefaultGLState();\n\t\n\t    \tthis.context = _gl;\n\t    \tthis.capabilities = capabilities;\n\t    \tthis.extensions = extensions;\n\t    \tthis.properties = properties;\n\t    \tthis.state = state;\n\t\n\t    \t// shadow map\n\t\n\t    \tvar shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );\n\t\n\t    \tthis.shadowMap = shadowMap;\n\t\n\t\n\t    \t// Plugins\n\t\n\t    \tvar spritePlugin = new SpritePlugin( this, sprites );\n\t    \tvar lensFlarePlugin = new LensFlarePlugin( this, lensFlares );\n\t\n\t    \t// API\n\t\n\t    \tthis.getContext = function () {\n\t\n\t    \t\treturn _gl;\n\t\n\t    \t};\n\t\n\t    \tthis.getContextAttributes = function () {\n\t\n\t    \t\treturn _gl.getContextAttributes();\n\t\n\t    \t};\n\t\n\t    \tthis.forceContextLoss = function () {\n\t\n\t    \t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\t\n\t    \t};\n\t\n\t    \tthis.getMaxAnisotropy = function () {\n\t\n\t    \t\treturn capabilities.getMaxAnisotropy();\n\t\n\t    \t};\n\t\n\t    \tthis.getPrecision = function () {\n\t\n\t    \t\treturn capabilities.precision;\n\t\n\t    \t};\n\t\n\t    \tthis.getPixelRatio = function () {\n\t\n\t    \t\treturn _pixelRatio;\n\t\n\t    \t};\n\t\n\t    \tthis.setPixelRatio = function ( value ) {\n\t\n\t    \t\tif ( value === undefined ) return;\n\t\n\t    \t\t_pixelRatio = value;\n\t\n\t    \t\tthis.setSize( _viewport.z, _viewport.w, false );\n\t\n\t    \t};\n\t\n\t    \tthis.getSize = function () {\n\t\n\t    \t\treturn {\n\t    \t\t\twidth: _width,\n\t    \t\t\theight: _height\n\t    \t\t};\n\t\n\t    \t};\n\t\n\t    \tthis.setSize = function ( width, height, updateStyle ) {\n\t\n\t    \t\t_width = width;\n\t    \t\t_height = height;\n\t\n\t    \t\t_canvas.width = width * _pixelRatio;\n\t    \t\t_canvas.height = height * _pixelRatio;\n\t\n\t    \t\tif ( updateStyle !== false ) {\n\t\n\t    \t\t\t_canvas.style.width = width + 'px';\n\t    \t\t\t_canvas.style.height = height + 'px';\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.setViewport( 0, 0, width, height );\n\t\n\t    \t};\n\t\n\t    \tthis.setViewport = function ( x, y, width, height ) {\n\t\n\t    \t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\t\n\t    \t};\n\t\n\t    \tthis.setScissor = function ( x, y, width, height ) {\n\t\n\t    \t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\t\n\t    \t};\n\t\n\t    \tthis.setScissorTest = function ( boolean ) {\n\t\n\t    \t\tstate.setScissorTest( _scissorTest = boolean );\n\t\n\t    \t};\n\t\n\t    \t// Clearing\n\t\n\t    \tthis.getClearColor = function () {\n\t\n\t    \t\treturn _clearColor;\n\t\n\t    \t};\n\t\n\t    \tthis.setClearColor = function ( color, alpha ) {\n\t\n\t    \t\t_clearColor.set( color );\n\t\n\t    \t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\t\n\t    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t};\n\t\n\t    \tthis.getClearAlpha = function () {\n\t\n\t    \t\treturn _clearAlpha;\n\t\n\t    \t};\n\t\n\t    \tthis.setClearAlpha = function ( alpha ) {\n\t\n\t    \t\t_clearAlpha = alpha;\n\t\n\t    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t};\n\t\n\t    \tthis.clear = function ( color, depth, stencil ) {\n\t\n\t    \t\tvar bits = 0;\n\t\n\t    \t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t    \t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t    \t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\t\n\t    \t\t_gl.clear( bits );\n\t\n\t    \t};\n\t\n\t    \tthis.clearColor = function () {\n\t\n\t    \t\tthis.clear( true, false, false );\n\t\n\t    \t};\n\t\n\t    \tthis.clearDepth = function () {\n\t\n\t    \t\tthis.clear( false, true, false );\n\t\n\t    \t};\n\t\n\t    \tthis.clearStencil = function () {\n\t\n\t    \t\tthis.clear( false, false, true );\n\t\n\t    \t};\n\t\n\t    \tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\t\n\t    \t\tthis.setRenderTarget( renderTarget );\n\t    \t\tthis.clear( color, depth, stencil );\n\t\n\t    \t};\n\t\n\t    \t// Reset\n\t\n\t    \tthis.resetGLState = resetGLState;\n\t\n\t    \tthis.dispose = function() {\n\t\n\t    \t\ttransparentObjects = [];\n\t    \t\ttransparentObjectsLastIndex = -1;\n\t    \t\topaqueObjects = [];\n\t    \t\topaqueObjectsLastIndex = -1;\n\t\n\t    \t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\n\t    \t};\n\t\n\t    \t// Events\n\t\n\t    \tfunction onContextLost( event ) {\n\t\n\t    \t\tevent.preventDefault();\n\t\n\t    \t\tresetGLState();\n\t    \t\tsetDefaultGLState();\n\t\n\t    \t\tproperties.clear();\n\t\n\t    \t}\n\t\n\t    \tfunction onMaterialDispose( event ) {\n\t\n\t    \t\tvar material = event.target;\n\t\n\t    \t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\t\n\t    \t\tdeallocateMaterial( material );\n\t\n\t    \t}\n\t\n\t    \t// Buffer deallocation\n\t\n\t    \tfunction deallocateMaterial( material ) {\n\t\n\t    \t\treleaseMaterialProgramReference( material );\n\t\n\t    \t\tproperties.delete( material );\n\t\n\t    \t}\n\t\n\t\n\t    \tfunction releaseMaterialProgramReference( material ) {\n\t\n\t    \t\tvar programInfo = properties.get( material ).program;\n\t\n\t    \t\tmaterial.program = undefined;\n\t\n\t    \t\tif ( programInfo !== undefined ) {\n\t\n\t    \t\t\tprogramCache.releaseProgram( programInfo );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Buffer rendering\n\t\n\t    \tthis.renderBufferImmediate = function ( object, program, material ) {\n\t\n\t    \t\tstate.initAttributes();\n\t\n\t    \t\tvar buffers = properties.get( object );\n\t\n\t    \t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t    \t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t    \t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t    \t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\t\n\t    \t\tvar attributes = program.getAttributes();\n\t\n\t    \t\tif ( object.hasPositions ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.position );\n\t    \t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object.hasNormals ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\t\n\t    \t\t\tif ( ! material.isMeshPhongMaterial &&\n\t    \t\t\t     ! material.isMeshStandardMaterial &&\n\t    \t\t\t       material.shading === FlatShading ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\t\n\t    \t\t\t\t\tvar array = object.normalArray;\n\t\n\t    \t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t    \t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t    \t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\t\n\t    \t\t\t\t\tarray[ i + 0 ] = nx;\n\t    \t\t\t\t\tarray[ i + 1 ] = ny;\n\t    \t\t\t\t\tarray[ i + 2 ] = nz;\n\t\n\t    \t\t\t\t\tarray[ i + 3 ] = nx;\n\t    \t\t\t\t\tarray[ i + 4 ] = ny;\n\t    \t\t\t\t\tarray[ i + 5 ] = nz;\n\t\n\t    \t\t\t\t\tarray[ i + 6 ] = nx;\n\t    \t\t\t\t\tarray[ i + 7 ] = ny;\n\t    \t\t\t\t\tarray[ i + 8 ] = nz;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.normal );\n\t\n\t    \t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object.hasUvs && material.map ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.uv );\n\t\n\t    \t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.color );\n\t\n\t    \t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\t\n\t    \t\tobject.count = 0;\n\t\n\t    \t};\n\t\n\t    \tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\t\n\t    \t\tsetMaterial( material );\n\t\n\t    \t\tvar program = setProgram( camera, fog, material, object );\n\t\n\t    \t\tvar updateBuffers = false;\n\t    \t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\t\n\t    \t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\t\n\t    \t\t\t_currentGeometryProgram = geometryProgram;\n\t    \t\t\tupdateBuffers = true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// morph targets\n\t\n\t    \t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\t\n\t    \t\tif ( morphTargetInfluences !== undefined ) {\n\t\n\t    \t\t\tvar activeInfluences = [];\n\t\n\t    \t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t    \t\t\t\tactiveInfluences.push( [ influence, i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tactiveInfluences.sort( absNumericalSort );\n\t\n\t    \t\t\tif ( activeInfluences.length > 8 ) {\n\t\n\t    \t\t\t\tactiveInfluences.length = 8;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\n\t    \t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar influence = activeInfluences[ i ];\n\t    \t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\t\n\t    \t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\t\n\t    \t\t\t\t\tvar index = influence[ 1 ];\n\t\n\t    \t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t    \t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t    \t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tmorphInfluences[ i ] = 0.0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tprogram.getUniforms().setValue(\n\t    \t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\t\n\t    \t\t\tupdateBuffers = true;\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tvar index = geometry.index;\n\t    \t\tvar position = geometry.attributes.position;\n\t    \t\tvar rangeFactor = 1;\n\t\n\t    \t\tif ( material.wireframe === true ) {\n\t\n\t    \t\t\tindex = objects.getWireframeAttribute( geometry );\n\t    \t\t\trangeFactor = 2;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar renderer;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\trenderer = indexedBufferRenderer;\n\t    \t\t\trenderer.setIndex( index );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderer = bufferRenderer;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( updateBuffers ) {\n\t\n\t    \t\t\tsetupVertexAttributes( material, program, geometry );\n\t\n\t    \t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tvar dataCount = 0;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tdataCount = index.count;\n\t\n\t    \t\t} else if ( position !== undefined ) {\n\t\n\t    \t\t\tdataCount = position.count;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t    \t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\t\n\t    \t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t    \t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\n\t    \t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t    \t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\t\n\t    \t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\t\n\t    \t\tif ( drawCount === 0 ) return;\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( object.isMesh ) {\n\t\n\t    \t\t\tif ( material.wireframe === true ) {\n\t\n\t    \t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t    \t\t\t\trenderer.setMode( _gl.LINES );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tswitch ( object.drawMode ) {\n\t\n\t    \t\t\t\t\tcase TrianglesDrawMode:\n\t    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase TriangleStripDrawMode:\n\t    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase TriangleFanDrawMode:\n\t    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t\n\t    \t\t} else if ( object.isLine ) {\n\t\n\t    \t\t\tvar lineWidth = material.linewidth;\n\t\n\t    \t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\t\n\t    \t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\t\n\t    \t\t\tif ( object.isLineSegments ) {\n\t\n\t    \t\t\t\trenderer.setMode( _gl.LINES );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( object.isPoints ) {\n\t\n\t    \t\t\trenderer.setMode( _gl.POINTS );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\t\n\t    \t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\t\n\t    \t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderer.render( drawStart, drawCount );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\t\n\t    \t\tvar extension;\n\t\n\t    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\t\n\t    \t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\t\tif ( extension === null ) {\n\t\n\t    \t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t    \t\t\t\treturn;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( startIndex === undefined ) startIndex = 0;\n\t\n\t    \t\tstate.initAttributes();\n\t\n\t    \t\tvar geometryAttributes = geometry.attributes;\n\t\n\t    \t\tvar programAttributes = program.getAttributes();\n\t\n\t    \t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\t\n\t    \t\tfor ( var name in programAttributes ) {\n\t\n\t    \t\t\tvar programAttribute = programAttributes[ name ];\n\t\n\t    \t\t\tif ( programAttribute >= 0 ) {\n\t\n\t    \t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\t\n\t    \t\t\t\tif ( geometryAttribute !== undefined ) {\n\t\n\t    \t\t\t\t\tvar type = _gl.FLOAT;\n\t    \t\t\t\t\tvar array = geometryAttribute.array;\n\t    \t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\n\t    \t\t\t\t\tif ( array instanceof Float32Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.FLOAT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\t\n\t    \t\t\t\t\t\tconsole.warn( \"Unsupported data buffer format: Float64Array\" );\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.SHORT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.INT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.BYTE;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t    \t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\t\n\t    \t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\t\t\t\tvar data = geometryAttribute.data;\n\t    \t\t\t\t\t\tvar stride = data.stride;\n\t    \t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\t\n\t    \t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\t\n\t    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInstancedBufferAttribute ) {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\t\n\t    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\t\n\t    \t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\t\n\t    \t\t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\t\tswitch ( value.length ) {\n\t\n\t    \t\t\t\t\t\t\tcase 2:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase 3:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase 4:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tdefault:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t}\n\t\n\t    \t// Sorting\n\t\n\t    \tfunction absNumericalSort( a, b ) {\n\t\n\t    \t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\t\n\t    \t}\n\t\n\t    \tfunction painterSortStable( a, b ) {\n\t\n\t    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\t\n\t    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\t\n\t    \t\t} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {\n\t\n\t    \t\t\treturn a.material.program.id - b.material.program.id;\n\t\n\t    \t\t} else if ( a.material.id !== b.material.id ) {\n\t\n\t    \t\t\treturn a.material.id - b.material.id;\n\t\n\t    \t\t} else if ( a.z !== b.z ) {\n\t\n\t    \t\t\treturn a.z - b.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn a.id - b.id;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction reversePainterSortStable( a, b ) {\n\t\n\t    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\t\n\t    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\t\n\t    \t\t} if ( a.z !== b.z ) {\n\t\n\t    \t\t\treturn b.z - a.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn a.id - b.id;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Rendering\n\t\n\t    \tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\t\n\t    \t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar fog = scene.fog;\n\t\n\t    \t\t// reset caching for this frame\n\t\n\t    \t\t_currentGeometryProgram = '';\n\t    \t\t_currentMaterialId = - 1;\n\t    \t\t_currentCamera = null;\n\t\n\t    \t\t// update scene graph\n\t\n\t    \t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\n\t    \t\t// update camera matrices and frustum\n\t\n\t    \t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\t\n\t    \t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\t\n\t    \t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t    \t\t_frustum.setFromMatrix( _projScreenMatrix );\n\t\n\t    \t\tlights.length = 0;\n\t\n\t    \t\topaqueObjectsLastIndex = - 1;\n\t    \t\ttransparentObjectsLastIndex = - 1;\n\t\n\t    \t\tsprites.length = 0;\n\t    \t\tlensFlares.length = 0;\n\t\n\t    \t\t_localClippingEnabled = this.localClippingEnabled;\n\t    \t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\t\n\t    \t\tprojectObject( scene, camera );\n\t\n\t    \t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n\t    \t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\t\n\t    \t\tif ( _this.sortObjects === true ) {\n\t\n\t    \t\t\topaqueObjects.sort( painterSortStable );\n\t    \t\t\ttransparentObjects.sort( reversePainterSortStable );\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\t\n\t    \t\tsetupShadows( lights );\n\t\n\t    \t\tshadowMap.render( scene, camera );\n\t\n\t    \t\tsetupLights( lights, camera );\n\t\n\t    \t\tif ( _clippingEnabled ) _clipping.endShadows();\n\t\n\t    \t\t//\n\t\n\t    \t\t_infoRender.calls = 0;\n\t    \t\t_infoRender.vertices = 0;\n\t    \t\t_infoRender.faces = 0;\n\t    \t\t_infoRender.points = 0;\n\t\n\t    \t\tif ( renderTarget === undefined ) {\n\t\n\t    \t\t\trenderTarget = null;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.setRenderTarget( renderTarget );\n\t\n\t    \t\t//\n\t\n\t    \t\tvar background = scene.background;\n\t\n\t    \t\tif ( background === null ) {\n\t\n\t    \t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t\t} else if ( background && background.isColor ) {\n\t\n\t    \t\t\tglClearColor( background.r, background.g, background.b, 1 );\n\t    \t\t\tforceClear = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.autoClear || forceClear ) {\n\t\n\t    \t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( background && background.isCubeTexture ) {\n\t\n\t    \t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\t\n\t    \t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n\t    \t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\t\n\t    \t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n\t    \t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\t\n\t    \t\t\tobjects.update( backgroundBoxMesh );\n\t\n\t    \t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\t\n\t    \t\t} else if ( background && background.isTexture ) {\n\t\n\t    \t\t\tbackgroundPlaneMesh.material.map = background;\n\t\n\t    \t\t\tobjects.update( backgroundPlaneMesh );\n\t\n\t    \t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( scene.overrideMaterial ) {\n\t\n\t    \t\t\tvar overrideMaterial = scene.overrideMaterial;\n\t\n\t    \t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n\t    \t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// opaque pass (front-to-back order)\n\t\n\t    \t\t\tstate.setBlending( NoBlending );\n\t    \t\t\trenderObjects( opaqueObjects, camera, fog );\n\t\n\t    \t\t\t// transparent pass (back-to-front order)\n\t\n\t    \t\t\trenderObjects( transparentObjects, camera, fog );\n\t\n\t    \t\t}\n\t\n\t    \t\t// custom render plugins (post pass)\n\t\n\t    \t\tspritePlugin.render( scene, camera );\n\t    \t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\t\n\t    \t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\n\t    \t\tif ( renderTarget ) {\n\t\n\t    \t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\t\n\t    \t\t}\n\t\n\t    \t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\t\n\t    \t\tstate.setDepthTest( true );\n\t    \t\tstate.setDepthWrite( true );\n\t    \t\tstate.setColorWrite( true );\n\t\n\t    \t\t// _gl.finish();\n\t\n\t    \t};\n\t\n\t    \tfunction pushRenderItem( object, geometry, material, z, group ) {\n\t\n\t    \t\tvar array, index;\n\t\n\t    \t\t// allocate the next position in the appropriate array\n\t\n\t    \t\tif ( material.transparent ) {\n\t\n\t    \t\t\tarray = transparentObjects;\n\t    \t\t\tindex = ++ transparentObjectsLastIndex;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tarray = opaqueObjects;\n\t    \t\t\tindex = ++ opaqueObjectsLastIndex;\n\t\n\t    \t\t}\n\t\n\t    \t\t// recycle existing render item or grow the array\n\t\n\t    \t\tvar renderItem = array[ index ];\n\t\n\t    \t\tif ( renderItem !== undefined ) {\n\t\n\t    \t\t\trenderItem.id = object.id;\n\t    \t\t\trenderItem.object = object;\n\t    \t\t\trenderItem.geometry = geometry;\n\t    \t\t\trenderItem.material = material;\n\t    \t\t\trenderItem.z = _vector3.z;\n\t    \t\t\trenderItem.group = group;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderItem = {\n\t    \t\t\t\tid: object.id,\n\t    \t\t\t\tobject: object,\n\t    \t\t\t\tgeometry: geometry,\n\t    \t\t\t\tmaterial: material,\n\t    \t\t\t\tz: _vector3.z,\n\t    \t\t\t\tgroup: group\n\t    \t\t\t};\n\t\n\t    \t\t\t// assert( index === array.length );\n\t    \t\t\tarray.push( renderItem );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// TODO Duplicated code (Frustum)\n\t\n\t    \tfunction isObjectViewable( object ) {\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tif ( geometry.boundingSphere === null )\n\t    \t\t\tgeometry.computeBoundingSphere();\n\t\n\t    \t\t_sphere.copy( geometry.boundingSphere ).\n\t    \t\t\tapplyMatrix4( object.matrixWorld );\n\t\n\t    \t\treturn isSphereViewable( _sphere );\n\t\n\t    \t}\n\t\n\t    \tfunction isSpriteViewable( sprite ) {\n\t\n\t    \t\t_sphere.center.set( 0, 0, 0 );\n\t    \t\t_sphere.radius = 0.7071067811865476;\n\t    \t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\t\n\t    \t\treturn isSphereViewable( _sphere );\n\t\n\t    \t}\n\t\n\t    \tfunction isSphereViewable( sphere ) {\n\t\n\t    \t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\t\n\t    \t\tvar numPlanes = _clipping.numPlanes;\n\t\n\t    \t\tif ( numPlanes === 0 ) return true;\n\t\n\t    \t\tvar planes = _this.clippingPlanes,\n\t\n\t    \t\t\tcenter = sphere.center,\n\t    \t\t\tnegRad = - sphere.radius,\n\t    \t\t\ti = 0;\n\t\n\t    \t\tdo {\n\t\n\t    \t\t\t// out when deeper than radius in the negative halfspace\n\t    \t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\t\n\t    \t\t} while ( ++ i !== numPlanes );\n\t\n\t    \t\treturn true;\n\t\n\t    \t}\n\t\n\t    \tfunction projectObject( object, camera ) {\n\t\n\t    \t\tif ( object.visible === false ) return;\n\t\n\t    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\t\n\t    \t\tif ( visible ) {\n\t\n\t    \t\t\tif ( object.isLight ) {\n\t\n\t    \t\t\t\tlights.push( object );\n\t\n\t    \t\t\t} else if ( object.isSprite ) {\n\t\n\t    \t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\t\n\t    \t\t\t\t\tsprites.push( object );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( object.isLensFlare ) {\n\t\n\t    \t\t\t\tlensFlares.push( object );\n\t\n\t    \t\t\t} else if ( object.isImmediateRenderObject ) {\n\t\n\t    \t\t\t\tif ( _this.sortObjects === true ) {\n\t\n\t    \t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t    \t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\t\n\t    \t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\t\n\t    \t\t\t\tif ( object.isSkinnedMesh ) {\n\t\n\t    \t\t\t\t\tobject.skeleton.update();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\t\n\t    \t\t\t\t\tvar material = object.material;\n\t\n\t    \t\t\t\t\tif ( material.visible === true ) {\n\t\n\t    \t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\t\n\t    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t    \t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\tvar geometry = objects.update( object );\n\t\n\t    \t\t\t\t\t\tif ( material.isMultiMaterial ) {\n\t\n\t    \t\t\t\t\t\t\tvar groups = geometry.groups;\n\t    \t\t\t\t\t\t\tvar materials = material.materials;\n\t\n\t    \t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t    \t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\t\n\t    \t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar children = object.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tprojectObject( children[ i ], camera );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\t\n\t    \t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar renderItem = renderList[ i ];\n\t\n\t    \t\t\tvar object = renderItem.object;\n\t    \t\t\tvar geometry = renderItem.geometry;\n\t    \t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t    \t\t\tvar group = renderItem.group;\n\t\n\t    \t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t    \t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\t\n\t    \t\t\tif ( object.isImmediateRenderObject ) {\n\t\n\t    \t\t\t\tsetMaterial( material );\n\t\n\t    \t\t\t\tvar program = setProgram( camera, fog, material, object );\n\t\n\t    \t\t\t\t_currentGeometryProgram = '';\n\t\n\t    \t\t\t\tobject.render( function ( object ) {\n\t\n\t    \t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\t\n\t    \t\t\t\t} );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( object.onBeforeRender !== null ) object.onBeforeRender();\n\t\n\t    \t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction initMaterial( material, fog, object ) {\n\t\n\t    \t\tvar materialProperties = properties.get( material );\n\t\n\t    \t\tvar parameters = programCache.getParameters(\n\t    \t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\t\n\t    \t\tvar code = programCache.getProgramCode( material, parameters );\n\t\n\t    \t\tvar program = materialProperties.program;\n\t    \t\tvar programChange = true;\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\t// new material\n\t    \t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\t\n\t    \t\t} else if ( program.code !== code ) {\n\t\n\t    \t\t\t// changed glsl or parameters\n\t    \t\t\treleaseMaterialProgramReference( material );\n\t\n\t    \t\t} else if ( parameters.shaderID !== undefined ) {\n\t\n\t    \t\t\t// same glsl and uniform list\n\t    \t\t\treturn;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// only rebuild uniform list\n\t    \t\t\tprogramChange = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( programChange ) {\n\t\n\t    \t\t\tif ( parameters.shaderID ) {\n\t\n\t    \t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\t\n\t    \t\t\t\tmaterialProperties.__webglShader = {\n\t    \t\t\t\t\tname: material.type,\n\t    \t\t\t\t\tuniforms: exports.UniformsUtils.clone( shader.uniforms ),\n\t    \t\t\t\t\tvertexShader: shader.vertexShader,\n\t    \t\t\t\t\tfragmentShader: shader.fragmentShader\n\t    \t\t\t\t};\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tmaterialProperties.__webglShader = {\n\t    \t\t\t\t\tname: material.type,\n\t    \t\t\t\t\tuniforms: material.uniforms,\n\t    \t\t\t\t\tvertexShader: material.vertexShader,\n\t    \t\t\t\t\tfragmentShader: material.fragmentShader\n\t    \t\t\t\t};\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\t\n\t    \t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\t\n\t    \t\t\tmaterialProperties.program = program;\n\t    \t\t\tmaterial.program = program;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = program.getAttributes();\n\t\n\t    \t\tif ( material.morphTargets ) {\n\t\n\t    \t\t\tmaterial.numSupportedMorphTargets = 0;\n\t\n\t    \t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\t\n\t    \t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\t\n\t    \t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.morphNormals ) {\n\t\n\t    \t\t\tmaterial.numSupportedMorphNormals = 0;\n\t\n\t    \t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\t\n\t    \t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\t\n\t    \t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\t\n\t    \t\tif ( ! material.isShaderMaterial &&\n\t    \t\t     ! material.isRawShaderMaterial ||\n\t    \t\t       material.clipping === true ) {\n\t\n\t    \t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t    \t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\t\n\t    \t\t}\n\t\n\t    \t\tmaterialProperties.fog = fog;\n\t\n\t    \t\t// store the light setup it was created for\n\t\n\t    \t\tmaterialProperties.lightsHash = _lights.hash;\n\t\n\t    \t\tif ( material.lights ) {\n\t\n\t    \t\t\t// wire up the material to this renderer's lighting state\n\t\n\t    \t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n\t    \t\t\tuniforms.directionalLights.value = _lights.directional;\n\t    \t\t\tuniforms.spotLights.value = _lights.spot;\n\t    \t\t\tuniforms.pointLights.value = _lights.point;\n\t    \t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\t\n\t    \t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n\t    \t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n\t    \t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n\t    \t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n\t    \t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n\t    \t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t    \t\t\tuniformsList =\n\t    \t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\t\n\t    \t\tmaterialProperties.uniformsList = uniformsList;\n\t    \t\tmaterialProperties.dynamicUniforms =\n\t    \t\t\t\tWebGLUniforms.splitDynamic( uniformsList, uniforms );\n\t\n\t    \t}\n\t\n\t    \tfunction setMaterial( material ) {\n\t\n\t    \t\tmaterial.side === DoubleSide\n\t    \t\t\t? state.disable( _gl.CULL_FACE )\n\t    \t\t\t: state.enable( _gl.CULL_FACE );\n\t\n\t    \t\tstate.setFlipSided( material.side === BackSide );\n\t\n\t    \t\tmaterial.transparent === true\n\t    \t\t\t? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n\t    \t\t\t: state.setBlending( NoBlending );\n\t\n\t    \t\tstate.setDepthFunc( material.depthFunc );\n\t    \t\tstate.setDepthTest( material.depthTest );\n\t    \t\tstate.setDepthWrite( material.depthWrite );\n\t    \t\tstate.setColorWrite( material.colorWrite );\n\t    \t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\t\n\t    \t}\n\t\n\t    \tfunction setProgram( camera, fog, material, object ) {\n\t\n\t    \t\t_usedTextureUnits = 0;\n\t\n\t    \t\tvar materialProperties = properties.get( material );\n\t\n\t    \t\tif ( _clippingEnabled ) {\n\t\n\t    \t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\t\n\t    \t\t\t\tvar useCache =\n\t    \t\t\t\t\t\tcamera === _currentCamera &&\n\t    \t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\t\n\t    \t\t\t\t// we might want to call this function with some ClippingGroup\n\t    \t\t\t\t// object instead of the material, once it becomes feasible\n\t    \t\t\t\t// (#8465, #8379)\n\t    \t\t\t\t_clipping.setState(\n\t    \t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n\t    \t\t\t\t\t\tcamera, materialProperties, useCache );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.needsUpdate === false ) {\n\t\n\t    \t\t\tif ( materialProperties.program === undefined ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t    \t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.needsUpdate ) {\n\t\n\t    \t\t\tinitMaterial( material, fog, object );\n\t    \t\t\tmaterial.needsUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar refreshProgram = false;\n\t    \t\tvar refreshMaterial = false;\n\t    \t\tvar refreshLights = false;\n\t\n\t    \t\tvar program = materialProperties.program,\n\t    \t\t\tp_uniforms = program.getUniforms(),\n\t    \t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\t\n\t    \t\tif ( program.id !== _currentProgram ) {\n\t\n\t    \t\t\t_gl.useProgram( program.program );\n\t    \t\t\t_currentProgram = program.id;\n\t\n\t    \t\t\trefreshProgram = true;\n\t    \t\t\trefreshMaterial = true;\n\t    \t\t\trefreshLights = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.id !== _currentMaterialId ) {\n\t\n\t    \t\t\t_currentMaterialId = material.id;\n\t\n\t    \t\t\trefreshMaterial = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( refreshProgram || camera !== _currentCamera ) {\n\t\n\t    \t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\t\n\t    \t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\t\n\t    \t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t    \t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\t\n\t    \t\t\t}\n\t\n\t\n\t    \t\t\tif ( camera !== _currentCamera ) {\n\t\n\t    \t\t\t\t_currentCamera = camera;\n\t\n\t    \t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t    \t\t\t\t// now, in case this material supports lights - or later, when\n\t    \t\t\t\t// the next material that does gets activated:\n\t\n\t    \t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t    \t\t\t\trefreshLights = true;\t\t// remains set until update done\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// load material specific uniforms\n\t    \t\t\t// (shader material also gets them for the sake of genericity)\n\t\n\t    \t\t\tif ( material.isShaderMaterial ||\n\t    \t\t\t     material.isMeshPhongMaterial ||\n\t    \t\t\t     material.isMeshStandardMaterial ||\n\t    \t\t\t     material.envMap ) {\n\t\n\t    \t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\t\n\t    \t\t\t\tif ( uCamPos !== undefined ) {\n\t\n\t    \t\t\t\t\tuCamPos.setValue( _gl,\n\t    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( material.isMeshPhongMaterial ||\n\t    \t\t\t     material.isMeshLambertMaterial ||\n\t    \t\t\t     material.isMeshBasicMaterial ||\n\t    \t\t\t     material.isMeshStandardMaterial ||\n\t    \t\t\t     material.isShaderMaterial ||\n\t    \t\t\t     material.skinning ) {\n\t\n\t    \t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n\t    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\t\n\t    \t\t}\n\t\n\t    \t\t// skinning uniforms must be set even if material didn't change\n\t    \t\t// auto-setting of texture unit for bone texture must go before other textures\n\t    \t\t// not sure why, but otherwise weird things happen\n\t\n\t    \t\tif ( material.skinning ) {\n\t\n\t    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\t\n\t    \t\t\tvar skeleton = object.skeleton;\n\t\n\t    \t\t\tif ( skeleton ) {\n\t\n\t    \t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\t\n\t    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n\t    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n\t    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( refreshMaterial ) {\n\t\n\t    \t\t\tif ( material.lights ) {\n\t\n\t    \t\t\t\t// the current material requires lighting info\n\t\n\t    \t\t\t\t// note: all lighting uniforms are always set correctly\n\t    \t\t\t\t// they simply reference the renderer's state for their\n\t    \t\t\t\t// values\n\t    \t\t\t\t//\n\t    \t\t\t\t// use the current material's .needsUpdate flags to set\n\t    \t\t\t\t// the GL state when required\n\t\n\t    \t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// refresh uniforms common to several materials\n\t\n\t    \t\t\tif ( fog && material.fog ) {\n\t\n\t    \t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( material.isMeshBasicMaterial ||\n\t    \t\t\t     material.isMeshLambertMaterial ||\n\t    \t\t\t     material.isMeshPhongMaterial ||\n\t    \t\t\t     material.isMeshStandardMaterial ||\n\t    \t\t\t     material.isMeshDepthMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// refresh single material specific uniforms\n\t\n\t    \t\t\tif ( material.isLineBasicMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isLineDashedMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t    \t\t\t\trefreshUniformsDash( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isPointsMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshLambertMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshPhongMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshPhysicalMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshStandardMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshDepthMaterial ) {\n\t\n\t    \t\t\t\tif ( material.displacementMap ) {\n\t\n\t    \t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n\t    \t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n\t    \t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( material.isMeshNormalMaterial ) {\n\t\n\t    \t\t\t\tm_uniforms.opacity.value = material.opacity;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tWebGLUniforms.upload(\n\t    \t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\t// common matrices\n\t\n\t    \t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n\t    \t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n\t    \t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\t\n\t\n\t    \t\t// dynamic uniforms\n\t\n\t    \t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\t\n\t    \t\tif ( dynUniforms !== null ) {\n\t\n\t    \t\t\tWebGLUniforms.evalDynamic( dynUniforms, m_uniforms, object, material, camera );\n\t    \t\t\tWebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn program;\n\t\n\t    \t}\n\t\n\t    \t// Uniforms (refresh uniforms objects)\n\t\n\t    \tfunction refreshUniformsCommon( uniforms, material ) {\n\t\n\t    \t\tuniforms.opacity.value = material.opacity;\n\t\n\t    \t\tuniforms.diffuse.value = material.color;\n\t\n\t    \t\tif ( material.emissive ) {\n\t\n\t    \t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\t\n\t    \t\t}\n\t\n\t    \t\tuniforms.map.value = material.map;\n\t    \t\tuniforms.specularMap.value = material.specularMap;\n\t    \t\tuniforms.alphaMap.value = material.alphaMap;\n\t\n\t    \t\tif ( material.aoMap ) {\n\t\n\t    \t\t\tuniforms.aoMap.value = material.aoMap;\n\t    \t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\t// uv repeat and offset setting priorities\n\t    \t\t// 1. color map\n\t    \t\t// 2. specular map\n\t    \t\t// 3. normal map\n\t    \t\t// 4. bump map\n\t    \t\t// 5. alpha map\n\t    \t\t// 6. emissive map\n\t\n\t    \t\tvar uvScaleMap;\n\t\n\t    \t\tif ( material.map ) {\n\t\n\t    \t\t\tuvScaleMap = material.map;\n\t\n\t    \t\t} else if ( material.specularMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.specularMap;\n\t\n\t    \t\t} else if ( material.displacementMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.displacementMap;\n\t\n\t    \t\t} else if ( material.normalMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.normalMap;\n\t\n\t    \t\t} else if ( material.bumpMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.bumpMap;\n\t\n\t    \t\t} else if ( material.roughnessMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.roughnessMap;\n\t\n\t    \t\t} else if ( material.metalnessMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.metalnessMap;\n\t\n\t    \t\t} else if ( material.alphaMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.alphaMap;\n\t\n\t    \t\t} else if ( material.emissiveMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( uvScaleMap !== undefined ) {\n\t\n\t    \t\t\t// backwards compatibility\n\t    \t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\t\n\t    \t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar offset = uvScaleMap.offset;\n\t    \t\t\tvar repeat = uvScaleMap.repeat;\n\t\n\t    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\t\n\t    \t\t}\n\t\n\t    \t\tuniforms.envMap.value = material.envMap;\n\t\n\t    \t\t// don't flip CubeTexture envMaps, flip everything else:\n\t    \t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t    \t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t    \t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t    \t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\t\n\t    \t\tuniforms.reflectivity.value = material.reflectivity;\n\t    \t\tuniforms.refractionRatio.value = material.refractionRatio;\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsLine( uniforms, material ) {\n\t\n\t    \t\tuniforms.diffuse.value = material.color;\n\t    \t\tuniforms.opacity.value = material.opacity;\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsDash( uniforms, material ) {\n\t\n\t    \t\tuniforms.dashSize.value = material.dashSize;\n\t    \t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t    \t\tuniforms.scale.value = material.scale;\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsPoints( uniforms, material ) {\n\t\n\t    \t\tuniforms.diffuse.value = material.color;\n\t    \t\tuniforms.opacity.value = material.opacity;\n\t    \t\tuniforms.size.value = material.size * _pixelRatio;\n\t    \t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\t\n\t    \t\tuniforms.map.value = material.map;\n\t\n\t    \t\tif ( material.map !== null ) {\n\t\n\t    \t\t\tvar offset = material.map.offset;\n\t    \t\t\tvar repeat = material.map.repeat;\n\t\n\t    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsFog( uniforms, fog ) {\n\t\n\t    \t\tuniforms.fogColor.value = fog.color;\n\t\n\t    \t\tif ( fog.isFog ) {\n\t\n\t    \t\t\tuniforms.fogNear.value = fog.near;\n\t    \t\t\tuniforms.fogFar.value = fog.far;\n\t\n\t    \t\t} else if ( fog.isFogExp2 ) {\n\t\n\t    \t\t\tuniforms.fogDensity.value = fog.density;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsLambert( uniforms, material ) {\n\t\n\t    \t\tif ( material.lightMap ) {\n\t\n\t    \t\t\tuniforms.lightMap.value = material.lightMap;\n\t    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.emissiveMap ) {\n\t\n\t    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsPhong( uniforms, material ) {\n\t\n\t    \t\tuniforms.specular.value = material.specular;\n\t    \t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\t\n\t    \t\tif ( material.lightMap ) {\n\t\n\t    \t\t\tuniforms.lightMap.value = material.lightMap;\n\t    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.emissiveMap ) {\n\t\n\t    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.bumpMap ) {\n\t\n\t    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.normalMap ) {\n\t\n\t    \t\t\tuniforms.normalMap.value = material.normalMap;\n\t    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.displacementMap ) {\n\t\n\t    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsStandard( uniforms, material ) {\n\t\n\t    \t\tuniforms.roughness.value = material.roughness;\n\t    \t\tuniforms.metalness.value = material.metalness;\n\t\n\t    \t\tif ( material.roughnessMap ) {\n\t\n\t    \t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.metalnessMap ) {\n\t\n\t    \t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.lightMap ) {\n\t\n\t    \t\t\tuniforms.lightMap.value = material.lightMap;\n\t    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.emissiveMap ) {\n\t\n\t    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.bumpMap ) {\n\t\n\t    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.normalMap ) {\n\t\n\t    \t\t\tuniforms.normalMap.value = material.normalMap;\n\t    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.displacementMap ) {\n\t\n\t    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.envMap ) {\n\t\n\t    \t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t    \t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsPhysical( uniforms, material ) {\n\t\n\t    \t\tuniforms.clearCoat.value = material.clearCoat;\n\t    \t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\t\n\t    \t\trefreshUniformsStandard( uniforms, material );\n\t\n\t    \t}\n\t\n\t    \t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\t\n\t    \tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\t\n\t    \t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\n\t    \t\tuniforms.directionalLights.needsUpdate = value;\n\t    \t\tuniforms.pointLights.needsUpdate = value;\n\t    \t\tuniforms.spotLights.needsUpdate = value;\n\t    \t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\n\t    \t}\n\t\n\t    \t// Lighting\n\t\n\t    \tfunction setupShadows( lights ) {\n\t\n\t    \t\tvar lightShadowsLength = 0;\n\t\n\t    \t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar light = lights[ i ];\n\t\n\t    \t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t_lights.shadows.length = lightShadowsLength;\n\t\n\t    \t}\n\t\n\t    \tfunction setupLights( lights, camera ) {\n\t\n\t    \t\tvar l, ll, light,\n\t    \t\tr = 0, g = 0, b = 0,\n\t    \t\tcolor,\n\t    \t\tintensity,\n\t    \t\tdistance,\n\t    \t\tshadowMap,\n\t\n\t    \t\tviewMatrix = camera.matrixWorldInverse,\n\t\n\t    \t\tdirectionalLength = 0,\n\t    \t\tpointLength = 0,\n\t    \t\tspotLength = 0,\n\t    \t\themiLength = 0;\n\t\n\t    \t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\t\n\t    \t\t\tlight = lights[ l ];\n\t\n\t    \t\t\tcolor = light.color;\n\t    \t\t\tintensity = light.intensity;\n\t    \t\t\tdistance = light.distance;\n\t\n\t    \t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\t\n\t    \t\t\tif ( light.isAmbientLight ) {\n\t\n\t    \t\t\t\tr += color.r * intensity;\n\t    \t\t\t\tg += color.g * intensity;\n\t    \t\t\t\tb += color.b * intensity;\n\t\n\t    \t\t\t} else if ( light.isDirectionalLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t    \t\t\t\tuniforms.direction.sub( _vector3 );\n\t    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t    \t\t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n\t    \t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t    \t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\t\n\t    \t\t\t} else if ( light.isSpotLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t    \t\t\t\tuniforms.distance = distance;\n\t\n\t    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t    \t\t\t\tuniforms.direction.sub( _vector3 );\n\t    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t    \t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\t\n\t    \t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t    \t\t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n\t    \t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t    \t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\t\n\t    \t\t\t} else if ( light.isPointLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t    \t\t\t\tuniforms.distance = light.distance;\n\t    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\t\n\t    \t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t    \t\t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\t\n\t    \t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\t\n\t    \t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new Matrix4();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t    \t\t\t\t// equal to inverse of the light's position\n\t    \t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n\t    \t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\t\n\t    \t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\t\n\t    \t\t\t} else if ( light.isHemisphereLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t    \t\t\t\tuniforms.direction.normalize();\n\t\n\t    \t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t    \t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\t\n\t    \t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t_lights.ambient[ 0 ] = r;\n\t    \t\t_lights.ambient[ 1 ] = g;\n\t    \t\t_lights.ambient[ 2 ] = b;\n\t\n\t    \t\t_lights.directional.length = directionalLength;\n\t    \t\t_lights.spot.length = spotLength;\n\t    \t\t_lights.point.length = pointLength;\n\t    \t\t_lights.hemi.length = hemiLength;\n\t\n\t    \t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\t\n\t    \t}\n\t\n\t    \t// GL state setting\n\t\n\t    \tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\t\n\t    \t\tstate.setCullFace( cullFace );\n\t    \t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\t\n\t    \t};\n\t\n\t    \t// Textures\n\t\n\t    \tfunction allocTextureUnit() {\n\t\n\t    \t\tvar textureUnit = _usedTextureUnits;\n\t\n\t    \t\tif ( textureUnit >= capabilities.maxTextures ) {\n\t\n\t    \t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\t\n\t    \t\t}\n\t\n\t    \t\t_usedTextureUnits += 1;\n\t\n\t    \t\treturn textureUnit;\n\t\n\t    \t}\n\t\n\t    \tthis.allocTextureUnit = allocTextureUnit;\n\t\n\t    \t// this.setTexture2D = setTexture2D;\n\t    \tthis.setTexture2D = ( function() {\n\t\n\t    \t\tvar warned = false;\n\t\n\t    \t\t// backwards compatibility: peel texture.texture\n\t    \t\treturn function setTexture2D( texture, slot ) {\n\t\n\t    \t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\t\n\t    \t\t\t\tif ( ! warned ) {\n\t\n\t    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t    \t\t\t\t\twarned = true;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture = texture.texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttextures.setTexture2D( texture, slot );\n\t\n\t    \t\t};\n\t\n\t    \t}() );\n\t\n\t    \tthis.setTexture = ( function() {\n\t\n\t    \t\tvar warned = false;\n\t\n\t    \t\treturn function setTexture( texture, slot ) {\n\t\n\t    \t\t\tif ( ! warned ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t    \t\t\t\twarned = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttextures.setTexture2D( texture, slot );\n\t\n\t    \t\t};\n\t\n\t    \t}() );\n\t\n\t    \tthis.setTextureCube = ( function() {\n\t\n\t    \t\tvar warned = false;\n\t\n\t    \t\treturn function setTextureCube( texture, slot ) {\n\t\n\t    \t\t\t// backwards compatibility: peel texture.texture\n\t    \t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\t\n\t    \t\t\t\tif ( ! warned ) {\n\t\n\t    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t    \t\t\t\t\twarned = true;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture = texture.texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t    \t\t\t// TODO: unify these code paths\n\t    \t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t    \t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\t\n\t    \t\t\t\t// CompressedTexture can have Array in image :/\n\t\n\t    \t\t\t\t// this function alone should take care of cube textures\n\t    \t\t\t\ttextures.setTextureCube( texture, slot );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\t\n\t    \t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() );\n\t\n\t    \tthis.getCurrentRenderTarget = function() {\n\t\n\t    \t\treturn _currentRenderTarget;\n\t\n\t    \t};\n\t\n\t    \tthis.setRenderTarget = function ( renderTarget ) {\n\t\n\t    \t\t_currentRenderTarget = renderTarget;\n\t\n\t    \t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\t\n\t    \t\t\ttextures.setupRenderTarget( renderTarget );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t    \t\tvar framebuffer;\n\t\n\t    \t\tif ( renderTarget ) {\n\t\n\t    \t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\n\t    \t\t\tif ( isCube ) {\n\t\n\t    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t_currentScissor.copy( renderTarget.scissor );\n\t    \t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\n\t    \t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tframebuffer = null;\n\t\n\t    \t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t    \t\t\t_currentScissorTest = _scissorTest;\n\t\n\t    \t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( _currentFramebuffer !== framebuffer ) {\n\t\n\t    \t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t    \t\t\t_currentFramebuffer = framebuffer;\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.scissor( _currentScissor );\n\t    \t\tstate.setScissorTest( _currentScissorTest );\n\t\n\t    \t\tstate.viewport( _currentViewport );\n\t\n\t    \t\tif ( isCube ) {\n\t\n\t    \t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\t\n\t    \t\tif ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\t\n\t    \t\tif ( framebuffer ) {\n\t\n\t    \t\t\tvar restore = false;\n\t\n\t    \t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\t\n\t    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\n\t    \t\t\t\trestore = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttry {\n\t\n\t    \t\t\t\tvar texture = renderTarget.texture;\n\t    \t\t\t\tvar textureFormat = texture.format;\n\t    \t\t\t\tvar textureType = texture.type;\n\t\n\t    \t\t\t\tif ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t    \t\t\t\t     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t    \t\t\t\t     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\t\n\t    \t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\n\t    \t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\t\n\t    \t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} finally {\n\t\n\t    \t\t\t\tif ( restore ) {\n\t\n\t    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \t// Map three.js constants to WebGL constants\n\t\n\t    \tfunction paramThreeToGL( p ) {\n\t\n\t    \t\tvar extension;\n\t\n\t    \t\tif ( p === RepeatWrapping ) return _gl.REPEAT;\n\t    \t\tif ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t    \t\tif ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\t\n\t    \t\tif ( p === NearestFilter ) return _gl.NEAREST;\n\t    \t\tif ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t    \t\tif ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\t\n\t    \t\tif ( p === LinearFilter ) return _gl.LINEAR;\n\t    \t\tif ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t    \t\tif ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\t\n\t    \t\tif ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t    \t\tif ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t    \t\tif ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t    \t\tif ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\t\n\t    \t\tif ( p === ByteType ) return _gl.BYTE;\n\t    \t\tif ( p === ShortType ) return _gl.SHORT;\n\t    \t\tif ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t    \t\tif ( p === IntType ) return _gl.INT;\n\t    \t\tif ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t    \t\tif ( p === FloatType ) return _gl.FLOAT;\n\t\n\t    \t\textension = extensions.get( 'OES_texture_half_float' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === HalfFloatType ) return extension.HALF_FLOAT_OES;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( p === AlphaFormat ) return _gl.ALPHA;\n\t    \t\tif ( p === RGBFormat ) return _gl.RGB;\n\t    \t\tif ( p === RGBAFormat ) return _gl.RGBA;\n\t    \t\tif ( p === LuminanceFormat ) return _gl.LUMINANCE;\n\t    \t\tif ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\t    \t\tif ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;\n\t    \t\tif ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;\n\t\n\t    \t\tif ( p === AddEquation ) return _gl.FUNC_ADD;\n\t    \t\tif ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t    \t\tif ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\t\n\t    \t\tif ( p === ZeroFactor ) return _gl.ZERO;\n\t    \t\tif ( p === OneFactor ) return _gl.ONE;\n\t    \t\tif ( p === SrcColorFactor ) return _gl.SRC_COLOR;\n\t    \t\tif ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t    \t\tif ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t    \t\tif ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t    \t\tif ( p === DstAlphaFactor ) return _gl.DST_ALPHA;\n\t    \t\tif ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\t\n\t    \t\tif ( p === DstColorFactor ) return _gl.DST_COLOR;\n\t    \t\tif ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t    \t\tif ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\t\n\t    \t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t    \t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t    \t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t    \t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t    \t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t    \t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t    \t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'EXT_blend_minmax' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t    \t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'WEBGL_depth_texture' );\n\t\n\t    \t\tif ( extension !== null ){\n\t\n\t    \t\t\tif ( p === UnsignedInt248Type ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn 0;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function FogExp2 ( color, density ) {\n\t\n\t    \tthis.name = '';\n\t\n\t    \tthis.color = new Color( color );\n\t    \tthis.density = ( density !== undefined ) ? density : 0.00025;\n\t\n\t    }\n\t\n\t    FogExp2.prototype.isFogExp2 = true;\n\t\n\t    FogExp2.prototype.clone = function () {\n\t\n\t    \treturn new FogExp2( this.color.getHex(), this.density );\n\t\n\t    };\n\t\n\t    FogExp2.prototype.toJSON = function ( meta ) {\n\t\n\t    \treturn {\n\t    \t\ttype: 'FogExp2',\n\t    \t\tcolor: this.color.getHex(),\n\t    \t\tdensity: this.density\n\t    \t};\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Fog ( color, near, far ) {\n\t\n\t    \tthis.name = '';\n\t\n\t    \tthis.color = new Color( color );\n\t\n\t    \tthis.near = ( near !== undefined ) ? near : 1;\n\t    \tthis.far = ( far !== undefined ) ? far : 1000;\n\t\n\t    }\n\t\n\t    Fog.prototype.isFog = true;\n\t\n\t    Fog.prototype.clone = function () {\n\t\n\t    \treturn new Fog( this.color.getHex(), this.near, this.far );\n\t\n\t    };\n\t\n\t    Fog.prototype.toJSON = function ( meta ) {\n\t\n\t    \treturn {\n\t    \t\ttype: 'Fog',\n\t    \t\tcolor: this.color.getHex(),\n\t    \t\tnear: this.near,\n\t    \t\tfar: this.far\n\t    \t};\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Scene () {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Scene';\n\t\n\t    \tthis.background = null;\n\t    \tthis.fog = null;\n\t    \tthis.overrideMaterial = null;\n\t\n\t    \tthis.autoUpdate = true; // checked by the renderer\n\t\n\t    }\n\t\n\t    Scene.prototype = Object.create( Object3D.prototype );\n\t\n\t    Scene.prototype.constructor = Scene;\n\t\n\t    Scene.prototype.copy = function ( source, recursive ) {\n\t\n\t    \tObject3D.prototype.copy.call( this, source, recursive );\n\t\n\t    \tif ( source.background !== null ) this.background = source.background.clone();\n\t    \tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t    \tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\t\n\t    \tthis.autoUpdate = source.autoUpdate;\n\t    \tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    Scene.prototype.toJSON = function ( meta ) {\n\t\n\t    \tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t    \tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\t\n\t    \treturn data;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function LensFlare( texture, size, distance, blending, color ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.lensFlares = [];\n\t\n\t    \tthis.positionScreen = new Vector3();\n\t    \tthis.customUpdateCallback = undefined;\n\t\n\t    \tif ( texture !== undefined ) {\n\t\n\t    \t\tthis.add( texture, size, distance, blending, color );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: LensFlare,\n\t\n\t    \tisLensFlare: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.positionScreen.copy( source.positionScreen );\n\t    \t\tthis.customUpdateCallback = source.customUpdateCallback;\n\t\n\t    \t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( texture, size, distance, blending, color, opacity ) {\n\t\n\t    \t\tif ( size === undefined ) size = - 1;\n\t    \t\tif ( distance === undefined ) distance = 0;\n\t    \t\tif ( opacity === undefined ) opacity = 1;\n\t    \t\tif ( color === undefined ) color = new Color( 0xffffff );\n\t    \t\tif ( blending === undefined ) blending = NormalBlending;\n\t\n\t    \t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\t\n\t    \t\tthis.lensFlares.push( {\n\t    \t\t\ttexture: texture,\t// THREE.Texture\n\t    \t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t    \t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t    \t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t    \t\t\tscale: 1, \t\t// scale\n\t    \t\t\trotation: 0, \t\t// rotation\n\t    \t\t\topacity: opacity,\t// opacity\n\t    \t\t\tcolor: color,\t\t// color\n\t    \t\t\tblending: blending\t// blending\n\t    \t\t} );\n\t\n\t    \t},\n\t\n\t    \t/*\n\t    \t * Update lens flares update positions on all flares based on the screen position\n\t    \t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t    \t */\n\t\n\t    \tupdateLensFlares: function () {\n\t\n\t    \t\tvar f, fl = this.lensFlares.length;\n\t    \t\tvar flare;\n\t    \t\tvar vecX = - this.positionScreen.x * 2;\n\t    \t\tvar vecY = - this.positionScreen.y * 2;\n\t\n\t    \t\tfor ( f = 0; f < fl; f ++ ) {\n\t\n\t    \t\t\tflare = this.lensFlares[ f ];\n\t\n\t    \t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t    \t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\t\n\t    \t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t    \t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *\tuvOffset: new THREE.Vector2(),\n\t     *\tuvScale: new THREE.Vector2()\n\t     * }\n\t     */\n\t\n\t    function SpriteMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'SpriteMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t    \tthis.map = null;\n\t\n\t    \tthis.rotation = 0;\n\t\n\t    \tthis.fog = false;\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    SpriteMaterial.prototype = Object.create( Material.prototype );\n\t    SpriteMaterial.prototype.constructor = SpriteMaterial;\n\t\n\t    SpriteMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.rotation = source.rotation;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Sprite( material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Sprite';\n\t\n\t    \tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\t\n\t    }\n\t\n\t    Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Sprite,\n\t\n\t    \tisSprite: true,\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar matrixPosition = new Vector3();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n\t    \t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\t\n\t    \t\t\tif ( distanceSq > guessSizeSq ) {\n\t\n\t    \t\t\t\treturn;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tintersects.push( {\n\t\n\t    \t\t\t\tdistance: Math.sqrt( distanceSq ),\n\t    \t\t\t\tpoint: this.position,\n\t    \t\t\t\tface: null,\n\t    \t\t\t\tobject: this\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LOD() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'LOD';\n\t\n\t    \tObject.defineProperties( this, {\n\t    \t\tlevels: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: []\n\t    \t\t}\n\t    \t} );\n\t\n\t    }\n\t\n\t\n\t    LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: LOD,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source, false );\n\t\n\t    \t\tvar levels = source.levels;\n\t\n\t    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar level = levels[ i ];\n\t\n\t    \t\t\tthis.addLevel( level.object.clone(), level.distance );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddLevel: function ( object, distance ) {\n\t\n\t    \t\tif ( distance === undefined ) distance = 0;\n\t\n\t    \t\tdistance = Math.abs( distance );\n\t\n\t    \t\tvar levels = this.levels;\n\t\n\t    \t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\t\n\t    \t\t\tif ( distance < levels[ l ].distance ) {\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\t\n\t    \t\tthis.add( object );\n\t\n\t    \t},\n\t\n\t    \tgetObjectForDistance: function ( distance ) {\n\t\n\t    \t\tvar levels = this.levels;\n\t\n\t    \t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\tif ( distance < levels[ i ].distance ) {\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn levels[ i - 1 ].object;\n\t\n\t    \t},\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar matrixPosition = new Vector3();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\t\n\t    \t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tupdate: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t    \t\tvar v2 = new Vector3();\n\t\n\t    \t\treturn function update( camera ) {\n\t\n\t    \t\t\tvar levels = this.levels;\n\t\n\t    \t\t\tif ( levels.length > 1 ) {\n\t\n\t    \t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t    \t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\t\tvar distance = v1.distanceTo( v2 );\n\t\n\t    \t\t\t\tlevels[ 0 ].object.visible = true;\n\t\n\t    \t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\t\n\t    \t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t    \t\t\t\t\t\tlevels[ i ].object.visible = true;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( ; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tlevels[ i ].object.visible = false;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.levels = [];\n\t\n\t    \t\tvar levels = this.levels;\n\t\n\t    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar level = levels[ i ];\n\t\n\t    \t\t\tdata.object.levels.push( {\n\t    \t\t\t\tobject: level.object.uuid,\n\t    \t\t\t\tdistance: level.distance\n\t    \t\t\t} );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\t\n\t    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t    \tthis.image = { data: data, width: width, height: height };\n\t\n\t    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\n\t    \tthis.flipY = false;\n\t    \tthis.generateMipmaps  = false;\n\t\n\t    }\n\t\n\t    DataTexture.prototype = Object.create( Texture.prototype );\n\t    DataTexture.prototype.constructor = DataTexture;\n\t\n\t    DataTexture.prototype.isDataTexture = true;\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author michael guerrero / http://realitymeltdown.com\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function Skeleton( bones, boneInverses, useVertexTexture ) {\n\t\n\t    \tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\t\n\t    \tthis.identityMatrix = new Matrix4();\n\t\n\t    \t// copy the bone array\n\t\n\t    \tbones = bones || [];\n\t\n\t    \tthis.bones = bones.slice( 0 );\n\t\n\t    \t// create a bone texture or an array of floats\n\t\n\t    \tif ( this.useVertexTexture ) {\n\t\n\t    \t\t// layout (1 matrix = 4 pixels)\n\t    \t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t    \t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t    \t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t    \t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t    \t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\n\t\n\t    \t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t    \t\tsize = exports.Math.nextPowerOfTwo( Math.ceil( size ) );\n\t    \t\tsize = Math.max( size, 4 );\n\t\n\t    \t\tthis.boneTextureWidth = size;\n\t    \t\tthis.boneTextureHeight = size;\n\t\n\t    \t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n\t    \t\tthis.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );\n\t\n\t    \t} else {\n\t\n\t    \t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\t\n\t    \t}\n\t\n\t    \t// use the supplied bone inverses or calculate the inverses\n\t\n\t    \tif ( boneInverses === undefined ) {\n\t\n\t    \t\tthis.calculateInverses();\n\t\n\t    \t} else {\n\t\n\t    \t\tif ( this.bones.length === boneInverses.length ) {\n\t\n\t    \t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\t\n\t    \t\t\tthis.boneInverses = [];\n\t\n\t    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\t\tthis.boneInverses.push( new Matrix4() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Object.assign( Skeleton.prototype, {\n\t\n\t    \tcalculateInverses: function () {\n\t\n\t    \t\tthis.boneInverses = [];\n\t\n\t    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\tvar inverse = new Matrix4();\n\t\n\t    \t\t\tif ( this.bones[ b ] ) {\n\t\n\t    \t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.boneInverses.push( inverse );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tpose: function () {\n\t\n\t    \t\tvar bone;\n\t\n\t    \t\t// recover the bind-time world matrices\n\t\n\t    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\tbone = this.bones[ b ];\n\t\n\t    \t\t\tif ( bone ) {\n\t\n\t    \t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// compute the local matrices, positions, rotations and scales\n\t\n\t    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\tbone = this.bones[ b ];\n\t\n\t    \t\t\tif ( bone ) {\n\t\n\t    \t\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t    \t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t    \t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tupdate: ( function () {\n\t\n\t    \t\tvar offsetMatrix = new Matrix4();\n\t\n\t    \t\treturn function update() {\n\t\n\t    \t\t\t// flatten bone matrices to array\n\t\n\t    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\t\t// compute the offset between the current and the original transform\n\t\n\t    \t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\t\n\t    \t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n\t    \t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( this.useVertexTexture ) {\n\t\n\t    \t\t\t\tthis.boneTexture.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function Bone( skin ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Bone';\n\t\n\t    \tthis.skin = skin;\n\t\n\t    }\n\t\n\t    Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Bone,\n\t\n\t    \tisBone: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.skin = source.skin;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function SkinnedMesh( geometry, material, useVertexTexture ) {\n\t\n\t    \tMesh.call( this, geometry, material );\n\t\n\t    \tthis.type = 'SkinnedMesh';\n\t\n\t    \tthis.bindMode = \"attached\";\n\t    \tthis.bindMatrix = new Matrix4();\n\t    \tthis.bindMatrixInverse = new Matrix4();\n\t\n\t    \t// init bones\n\t\n\t    \t// TODO: remove bone creation as there is no reason (other than\n\t    \t// convenience) for THREE.SkinnedMesh to do this.\n\t\n\t    \tvar bones = [];\n\t\n\t    \tif ( this.geometry && this.geometry.bones !== undefined ) {\n\t\n\t    \t\tvar bone, gbone;\n\t\n\t    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\t\n\t    \t\t\tgbone = this.geometry.bones[ b ];\n\t\n\t    \t\t\tbone = new Bone( this );\n\t    \t\t\tbones.push( bone );\n\t\n\t    \t\t\tbone.name = gbone.name;\n\t    \t\t\tbone.position.fromArray( gbone.pos );\n\t    \t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t    \t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\t\n\t    \t\t\tgbone = this.geometry.bones[ b ];\n\t\n\t    \t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n\t    \t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\t\n\t    \t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis.add( bones[ b ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.normalizeSkinWeights();\n\t\n\t    \tthis.updateMatrixWorld( true );\n\t    \tthis.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\t\n\t    }\n\t\n\t\n\t    SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\t\n\t    \tconstructor: SkinnedMesh,\n\t\n\t    \tisSkinnedMesh: true,\n\t\n\t    \tbind: function( skeleton, bindMatrix ) {\n\t\n\t    \t\tthis.skeleton = skeleton;\n\t\n\t    \t\tif ( bindMatrix === undefined ) {\n\t\n\t    \t\t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.skeleton.calculateInverses();\n\t\n\t    \t\t\tbindMatrix = this.matrixWorld;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.bindMatrix.copy( bindMatrix );\n\t    \t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\t\n\t    \t},\n\t\n\t    \tpose: function () {\n\t\n\t    \t\tthis.skeleton.pose();\n\t\n\t    \t},\n\t\n\t    \tnormalizeSkinWeights: function () {\n\t\n\t    \t\tif ( (this.geometry && this.geometry.isGeometry) ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\t\n\t    \t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\t\n\t    \t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\t\n\t    \t\t\t\tif ( scale !== Infinity ) {\n\t\n\t    \t\t\t\t\tsw.multiplyScalar( scale );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\tvar vec = new Vector4();\n\t\n\t    \t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\t\n\t    \t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\t\n\t    \t\t\t\tvec.x = skinWeight.getX( i );\n\t    \t\t\t\tvec.y = skinWeight.getY( i );\n\t    \t\t\t\tvec.z = skinWeight.getZ( i );\n\t    \t\t\t\tvec.w = skinWeight.getW( i );\n\t\n\t    \t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\t\n\t    \t\t\t\tif ( scale !== Infinity ) {\n\t\n\t    \t\t\t\t\tvec.multiplyScalar( scale );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: function( force ) {\n\t\n\t    \t\tMesh.prototype.updateMatrixWorld.call( this, true );\n\t\n\t    \t\tif ( this.bindMode === \"attached\" ) {\n\t\n\t    \t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\t\n\t    \t\t} else if ( this.bindMode === \"detached\" ) {\n\t\n\t    \t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function() {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  linewidth: <float>,\n\t     *  linecap: \"round\",\n\t     *  linejoin: \"round\"\n\t     * }\n\t     */\n\t\n\t    function LineBasicMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'LineBasicMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t\n\t    \tthis.linewidth = 1;\n\t    \tthis.linecap = 'round';\n\t    \tthis.linejoin = 'round';\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    LineBasicMaterial.prototype = Object.create( Material.prototype );\n\t    LineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\t\n\t    LineBasicMaterial.prototype.isLineBasicMaterial = true;\n\t\n\t    LineBasicMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.linewidth = source.linewidth;\n\t    \tthis.linecap = source.linecap;\n\t    \tthis.linejoin = source.linejoin;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Line( geometry, material, mode ) {\n\t\n\t    \tif ( mode === 1 ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t    \t\treturn new LineSegments( geometry, material );\n\t\n\t    \t}\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Line';\n\t\n\t    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t    \tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t    }\n\t\n\t    Line.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Line,\n\t\n\t    \tisLine: true,\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar inverseMatrix = new Matrix4();\n\t    \t\tvar ray = new Ray();\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tvar precision = raycaster.linePrecision;\n\t    \t\t\tvar precisionSq = precision * precision;\n\t\n\t    \t\t\tvar geometry = this.geometry;\n\t    \t\t\tvar matrixWorld = this.matrixWorld;\n\t\n\t    \t\t\t// Checking boundingSphere distance to ray\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere );\n\t    \t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tinverseMatrix.getInverse( matrixWorld );\n\t    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t    \t\t\tvar vStart = new Vector3();\n\t    \t\t\tvar vEnd = new Vector3();\n\t    \t\t\tvar interSegment = new Vector3();\n\t    \t\t\tvar interRay = new Vector3();\n\t    \t\t\tvar step = (this && this.isLineSegments) ? 2 : 1;\n\t\n\t    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\tvar index = geometry.index;\n\t    \t\t\t\tvar attributes = geometry.attributes;\n\t    \t\t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\t\n\t    \t\t\t\t\t\tvar a = indices[ i ];\n\t    \t\t\t\t\t\tvar b = indices[ i + 1 ];\n\t\n\t    \t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t    \t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\t\n\t    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\t\n\t    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t    \t\t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t    \t\t\t\t\t\t\tindex: i,\n\t    \t\t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\t\tfaceIndex: null,\n\t    \t\t\t\t\t\t\tobject: this\n\t\n\t    \t\t\t\t\t\t} );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\t\n\t    \t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t    \t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\t\n\t    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\t\n\t    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t    \t\t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t    \t\t\t\t\t\t\tindex: i,\n\t    \t\t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\t\tfaceIndex: null,\n\t    \t\t\t\t\t\t\tobject: this\n\t\n\t    \t\t\t\t\t\t} );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\tvar vertices = geometry.vertices;\n\t    \t\t\t\tvar nbVertices = vertices.length;\n\t\n\t    \t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\t\n\t    \t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\t\n\t    \t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t    \t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t    \t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t    \t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t    \t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t    \t\t\t\t\t\tindex: i,\n\t    \t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\tfaceIndex: null,\n\t    \t\t\t\t\t\tobject: this\n\t\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LineSegments( geometry, material ) {\n\t\n\t    \tLine.call( this, geometry, material );\n\t\n\t    \tthis.type = 'LineSegments';\n\t\n\t    }\n\t\n\t    LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\t\n\t    \tconstructor: LineSegments,\n\t\n\t    \tisLineSegments: true\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  size: <float>,\n\t     *  sizeAttenuation: <bool>\n\t     * }\n\t     */\n\t\n\t    function PointsMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'PointsMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.size = 1;\n\t    \tthis.sizeAttenuation = true;\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    PointsMaterial.prototype = Object.create( Material.prototype );\n\t    PointsMaterial.prototype.constructor = PointsMaterial;\n\t\n\t    PointsMaterial.prototype.isPointsMaterial = true;\n\t\n\t    PointsMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.size = source.size;\n\t    \tthis.sizeAttenuation = source.sizeAttenuation;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Points( geometry, material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Points';\n\t\n\t    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t    \tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t    }\n\t\n\t    Points.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Points,\n\t\n\t    \tisPoints: true,\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar inverseMatrix = new Matrix4();\n\t    \t\tvar ray = new Ray();\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tvar object = this;\n\t    \t\t\tvar geometry = this.geometry;\n\t    \t\t\tvar matrixWorld = this.matrixWorld;\n\t    \t\t\tvar threshold = raycaster.params.Points.threshold;\n\t\n\t    \t\t\t// Checking boundingSphere distance to ray\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere );\n\t    \t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tinverseMatrix.getInverse( matrixWorld );\n\t    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t    \t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t    \t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t    \t\t\tvar position = new Vector3();\n\t\n\t    \t\t\tfunction testPoint( point, index ) {\n\t\n\t    \t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\t\n\t    \t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\t\n\t    \t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t    \t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\t\n\t    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\t\n\t    \t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t    \t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t    \t\t\t\t\t\tindex: index,\n\t    \t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\tobject: object\n\t\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\tvar index = geometry.index;\n\t    \t\t\t\tvar attributes = geometry.attributes;\n\t    \t\t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\t\tvar a = indices[ i ];\n\t\n\t    \t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\t\n\t    \t\t\t\t\t\ttestPoint( position, a );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\t\n\t    \t\t\t\t\t\ttestPoint( position, i );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar vertices = geometry.vertices;\n\t\n\t    \t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\ttestPoint( vertices[ i ], i );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Group() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Group';\n\t\n\t    }\n\t\n\t    Group.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Group\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\t\n\t    \tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t    \tthis.generateMipmaps = false;\n\t\n\t    \tvar scope = this;\n\t\n\t    \tfunction update() {\n\t\n\t    \t\trequestAnimationFrame( update );\n\t\n\t    \t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\t\n\t    \t\t\tscope.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tupdate();\n\t\n\t    }\n\t\n\t    VideoTexture.prototype = Object.create( Texture.prototype );\n\t    VideoTexture.prototype.constructor = VideoTexture;\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\t\n\t    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t    \tthis.image = { width: width, height: height };\n\t    \tthis.mipmaps = mipmaps;\n\t\n\t    \t// no flipping for cube textures\n\t    \t// (also flipping doesn't work for compressed textures )\n\t\n\t    \tthis.flipY = false;\n\t\n\t    \t// can't generate mipmaps for compressed textures\n\t    \t// mips must be embedded in DDS files\n\t\n\t    \tthis.generateMipmaps = false;\n\t\n\t    }\n\t\n\t    CompressedTexture.prototype = Object.create( Texture.prototype );\n\t    CompressedTexture.prototype.constructor = CompressedTexture;\n\t\n\t    CompressedTexture.prototype.isCompressedTexture = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\t\n\t    \tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t    \tthis.needsUpdate = true;\n\t\n\t    }\n\t\n\t    CanvasTexture.prototype = Object.create( Texture.prototype );\n\t    CanvasTexture.prototype.constructor = CanvasTexture;\n\t\n\t    /**\n\t     * @author Matt DesLauriers / @mattdesl\n\t     * @author atix / arthursilber.de\n\t     */\n\t\n\t    function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\t\n\t    \tformat = format !== undefined ? format : DepthFormat;\n\t\n\t    \tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\t\n\t    \t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )\n\t\n\t    \t}\n\t\n\t    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t    \tthis.image = { width: width, height: height };\n\t\n\t    \tthis.type = type !== undefined ? type : UnsignedShortType;\n\t\n\t    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\n\t    \tthis.flipY = false;\n\t    \tthis.generateMipmaps\t= false;\n\t\n\t    }\n\t\n\t    DepthTexture.prototype = Object.create( Texture.prototype );\n\t    DepthTexture.prototype.constructor = DepthTexture;\n\t    DepthTexture.prototype.isDepthTexture = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WireframeGeometry( geometry ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tvar edge = [ 0, 0 ], hash = {};\n\t\n\t    \tfunction sortFunction( a, b ) {\n\t\n\t    \t\treturn a - b;\n\t\n\t    \t}\n\t\n\t    \tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t    \tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\tvar vertices = geometry.vertices;\n\t    \t\tvar faces = geometry.faces;\n\t    \t\tvar numEdges = 0;\n\t\n\t    \t\t// allocate maximal size\n\t    \t\tvar edges = new Uint32Array( 6 * faces.length );\n\t\n\t    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t    \t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t    \t\t\t\tedge.sort( sortFunction );\n\t\n\t    \t\t\t\tvar key = edge.toString();\n\t\n\t    \t\t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t    \t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t    \t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t    \t\t\t\t\thash[ key ] = true;\n\t    \t\t\t\t\tnumEdges ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t    \t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\t\n\t    \t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\t\n\t    \t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\t\n\t    \t\t\t\tvar index = 6 * i + 3 * j;\n\t    \t\t\t\tcoords[ index + 0 ] = vertex.x;\n\t    \t\t\t\tcoords[ index + 1 ] = vertex.y;\n\t    \t\t\t\tcoords[ index + 2 ] = vertex.z;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t    \t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\tif ( geometry.index !== null ) {\n\t\n\t    \t\t\t// Indexed BufferGeometry\n\t\n\t    \t\t\tvar indices = geometry.index.array;\n\t    \t\t\tvar vertices = geometry.attributes.position;\n\t    \t\t\tvar groups = geometry.groups;\n\t    \t\t\tvar numEdges = 0;\n\t\n\t    \t\t\tif ( groups.length === 0 ) {\n\t\n\t    \t\t\t\tgeometry.addGroup( 0, indices.length );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// allocate maximal size\n\t    \t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\t\n\t    \t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\t\n\t    \t\t\t\tvar group = groups[ o ];\n\t\n\t    \t\t\t\tvar start = group.start;\n\t    \t\t\t\tvar count = group.count;\n\t\n\t    \t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\t\n\t    \t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n\t    \t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n\t    \t\t\t\t\t\tedge.sort( sortFunction );\n\t\n\t    \t\t\t\t\t\tvar key = edge.toString();\n\t\n\t    \t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t    \t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t    \t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t    \t\t\t\t\t\t\thash[ key ] = true;\n\t    \t\t\t\t\t\t\tnumEdges ++;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t    \t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\t\n\t    \t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\t\n\t    \t\t\t\t\tvar index = 6 * i + 3 * j;\n\t    \t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\t\n\t    \t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n\t    \t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n\t    \t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// non-indexed BufferGeometry\n\t\n\t    \t\t\tvar vertices = geometry.attributes.position.array;\n\t    \t\t\tvar numEdges = vertices.length / 3;\n\t    \t\t\tvar numTris = numEdges / 3;\n\t\n\t    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t    \t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\t\n\t    \t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\t\tvar index = 18 * i + 6 * j;\n\t\n\t    \t\t\t\t\tvar index1 = 9 * i + 3 * j;\n\t    \t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n\t    \t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n\t    \t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\t\n\t    \t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n\t    \t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n\t    \t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n\t    \t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    WireframeGeometry.prototype.constructor = WireframeGeometry;\n\t\n\t    /**\n\t     * @author zz85 / https://github.com/zz85\n\t     * Parametric Surfaces Geometry\n\t     * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t     *\n\t     * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n\t     *\n\t     */\n\t\n\t    function ParametricGeometry( func, slices, stacks ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'ParametricGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tfunc: func,\n\t    \t\tslices: slices,\n\t    \t\tstacks: stacks\n\t    \t};\n\t\n\t    \tvar verts = this.vertices;\n\t    \tvar faces = this.faces;\n\t    \tvar uvs = this.faceVertexUvs[ 0 ];\n\t\n\t    \tvar i, j, p;\n\t    \tvar u, v;\n\t\n\t    \tvar sliceCount = slices + 1;\n\t\n\t    \tfor ( i = 0; i <= stacks; i ++ ) {\n\t\n\t    \t\tv = i / stacks;\n\t\n\t    \t\tfor ( j = 0; j <= slices; j ++ ) {\n\t\n\t    \t\t\tu = j / slices;\n\t\n\t    \t\t\tp = func( u, v );\n\t    \t\t\tverts.push( p );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar a, b, c, d;\n\t    \tvar uva, uvb, uvc, uvd;\n\t\n\t    \tfor ( i = 0; i < stacks; i ++ ) {\n\t\n\t    \t\tfor ( j = 0; j < slices; j ++ ) {\n\t\n\t    \t\t\ta = i * sliceCount + j;\n\t    \t\t\tb = i * sliceCount + j + 1;\n\t    \t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n\t    \t\t\td = ( i + 1 ) * sliceCount + j;\n\t\n\t    \t\t\tuva = new Vector2( j / slices, i / stacks );\n\t    \t\t\tuvb = new Vector2( ( j + 1 ) / slices, i / stacks );\n\t    \t\t\tuvc = new Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n\t    \t\t\tuvd = new Vector2( j / slices, ( i + 1 ) / stacks );\n\t\n\t    \t\t\tfaces.push( new Face3( a, b, d ) );\n\t    \t\t\tuvs.push( [ uva, uvb, uvd ] );\n\t\n\t    \t\t\tfaces.push( new Face3( b, c, d ) );\n\t    \t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// console.log(this);\n\t\n\t    \t// magic bullet\n\t    \t// var diff = this.mergeVertices();\n\t    \t// console.log('removed ', diff, ' vertices by merging');\n\t\n\t    \tthis.computeFaceNormals();\n\t    \tthis.computeVertexNormals();\n\t\n\t    }\n\t\n\t    ParametricGeometry.prototype = Object.create( Geometry.prototype );\n\t    ParametricGeometry.prototype.constructor = ParametricGeometry;\n\t\n\t    /**\n\t     * @author clockworkgeek / https://github.com/clockworkgeek\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function PolyhedronGeometry( vertices, indices, radius, detail ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'PolyhedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tvertices: vertices,\n\t    \t\tindices: indices,\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    \tradius = radius || 1;\n\t    \tdetail = detail || 0;\n\t\n\t    \tvar that = this;\n\t\n\t    \tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\t\n\t    \t\tprepare( new Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\t\n\t    \t}\n\t\n\t    \tvar p = this.vertices;\n\t\n\t    \tvar faces = [];\n\t\n\t    \tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\t\n\t    \t\tvar v1 = p[ indices[ i ] ];\n\t    \t\tvar v2 = p[ indices[ i + 1 ] ];\n\t    \t\tvar v3 = p[ indices[ i + 2 ] ];\n\t\n\t    \t\tfaces[ j ] = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t\n\t    \t}\n\t\n\t    \tvar centroid = new Vector3();\n\t\n\t    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\tsubdivide( faces[ i ], detail );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Handle case when face straddles the seam\n\t\n\t    \tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\t\n\t    \t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\t\n\t    \t\tvar x0 = uvs[ 0 ].x;\n\t    \t\tvar x1 = uvs[ 1 ].x;\n\t    \t\tvar x2 = uvs[ 2 ].x;\n\t\n\t    \t\tvar max = Math.max( x0, x1, x2 );\n\t    \t\tvar min = Math.min( x0, x1, x2 );\n\t\n\t    \t\tif ( max > 0.9 && min < 0.1 ) {\n\t\n\t    \t\t\t// 0.9 is somewhat arbitrary\n\t\n\t    \t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n\t    \t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n\t    \t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// Apply radius\n\t\n\t    \tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\t\n\t    \t\tthis.vertices[ i ].multiplyScalar( radius );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Merge vertices\n\t\n\t    \tthis.mergeVertices();\n\t\n\t    \tthis.computeFaceNormals();\n\t\n\t    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t\n\t    \t// Project vector onto sphere's surface\n\t\n\t    \tfunction prepare( vector ) {\n\t\n\t    \t\tvar vertex = vector.normalize().clone();\n\t    \t\tvertex.index = that.vertices.push( vertex ) - 1;\n\t\n\t    \t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\t\n\t    \t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n\t    \t\tvar v = inclination( vector ) / Math.PI + 0.5;\n\t    \t\tvertex.uv = new Vector2( u, 1 - v );\n\t\n\t    \t\treturn vertex;\n\t\n\t    \t}\n\t\n\t\n\t    \t// Approximate a curved face with recursively sub-divided triangles.\n\t\n\t    \tfunction make( v1, v2, v3 ) {\n\t\n\t    \t\tvar face = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t    \t\tthat.faces.push( face );\n\t\n\t    \t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\t\n\t    \t\tvar azi = azimuth( centroid );\n\t\n\t    \t\tthat.faceVertexUvs[ 0 ].push( [\n\t    \t\t\tcorrectUV( v1.uv, v1, azi ),\n\t    \t\t\tcorrectUV( v2.uv, v2, azi ),\n\t    \t\t\tcorrectUV( v3.uv, v3, azi )\n\t    \t\t] );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Analytically subdivide a face to the required detail level.\n\t\n\t    \tfunction subdivide( face, detail ) {\n\t\n\t    \t\tvar cols = Math.pow( 2, detail );\n\t    \t\tvar a = prepare( that.vertices[ face.a ] );\n\t    \t\tvar b = prepare( that.vertices[ face.b ] );\n\t    \t\tvar c = prepare( that.vertices[ face.c ] );\n\t    \t\tvar v = [];\n\t\n\t    \t\t// Construct all of the vertices for this subdivision.\n\t\n\t    \t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\t\n\t    \t\t\tv[ i ] = [];\n\t\n\t    \t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n\t    \t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n\t    \t\t\tvar rows = cols - i;\n\t\n\t    \t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\t\n\t    \t\t\t\tif ( j === 0 && i === cols ) {\n\t\n\t    \t\t\t\t\tv[ i ][ j ] = aj;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Construct all of the faces.\n\t\n\t    \t\tfor ( var i = 0; i < cols ; i ++ ) {\n\t\n\t    \t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\t\n\t    \t\t\t\tvar k = Math.floor( j / 2 );\n\t\n\t    \t\t\t\tif ( j % 2 === 0 ) {\n\t\n\t    \t\t\t\t\tmake(\n\t    \t\t\t\t\t\tv[ i ][ k + 1 ],\n\t    \t\t\t\t\t\tv[ i + 1 ][ k ],\n\t    \t\t\t\t\t\tv[ i ][ k ]\n\t    \t\t\t\t\t);\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tmake(\n\t    \t\t\t\t\t\tv[ i ][ k + 1 ],\n\t    \t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n\t    \t\t\t\t\t\tv[ i + 1 ][ k ]\n\t    \t\t\t\t\t);\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// Angle around the Y axis, counter-clockwise when looking from above.\n\t\n\t    \tfunction azimuth( vector ) {\n\t\n\t    \t\treturn Math.atan2( vector.z, - vector.x );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Angle above the XZ plane.\n\t\n\t    \tfunction inclination( vector ) {\n\t\n\t    \t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Texture fixing helper. Spheres have some odd behaviours.\n\t\n\t    \tfunction correctUV( uv, vector, azimuth ) {\n\t\n\t    \t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new Vector2( uv.x - 1, uv.y );\n\t    \t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n\t    \t\treturn uv.clone();\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    PolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\t    PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\t\n\t    /**\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     */\n\t\n\t    function TetrahedronGeometry( radius, detail ) {\n\t\n\t    \tvar vertices = [\n\t    \t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'TetrahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    TetrahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\t\n\t    /**\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     */\n\t\n\t    function OctahedronGeometry( radius, detail ) {\n\t\n\t    \tvar vertices = [\n\t    \t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'OctahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    OctahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    OctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\t\n\t    /**\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     */\n\t\n\t    function IcosahedronGeometry( radius, detail ) {\n\t\n\t    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\n\t    \tvar vertices = [\n\t    \t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t    \t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t    \t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t    \t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t    \t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t    \t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'IcosahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    IcosahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\t\n\t    /**\n\t     * @author Abe Pazos / https://hamoid.com\n\t     */\n\t\n\t    function DodecahedronGeometry( radius, detail ) {\n\t\n\t    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t    \tvar r = 1 / t;\n\t\n\t    \tvar vertices = [\n\t\n\t    \t\t// (±1, ±1, ±1)\n\t    \t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t    \t\t- 1,  1, - 1,    - 1,  1,  1,\n\t    \t\t 1, - 1, - 1,     1, - 1,  1,\n\t    \t\t 1,  1, - 1,     1,  1,  1,\n\t\n\t    \t\t// (0, ±1/φ, ±φ)\n\t    \t\t 0, - r, - t,     0, - r,  t,\n\t    \t\t 0,  r, - t,     0,  r,  t,\n\t\n\t    \t\t// (±1/φ, ±φ, 0)\n\t    \t\t- r, - t,  0,    - r,  t,  0,\n\t    \t\t r, - t,  0,     r,  t,  0,\n\t\n\t    \t\t// (±φ, 0, ±1/φ)\n\t    \t\t- t,  0, - r,     t,  0, - r,\n\t    \t\t- t,  0,  r,     t,  0,  r\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t    \t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t    \t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t    \t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t    \t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t    \t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t    \t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t    \t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t    \t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t    \t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t    \t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t    \t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'DodecahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    DodecahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\t\n\t    /**\n\t     * @author WestLangley / https://github.com/WestLangley\n\t     * @author zz85 / https://github.com/zz85\n\t     * @author miningold / https://github.com/miningold\n\t     * @author jonobr1 / https://github.com/jonobr1\n\t     *\n\t     * Modified from the TorusKnotGeometry by @oosmoxiecode\n\t     *\n\t     * Creates a tube which extrudes along a 3d spline\n\t     *\n\t     * Uses parallel transport frames as described in\n\t     * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t     */\n\t\n\t    function TubeGeometry( path, segments, radius, radialSegments, closed, taper ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'TubeGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tpath: path,\n\t    \t\tsegments: segments,\n\t    \t\tradius: radius,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\tclosed: closed,\n\t    \t\ttaper: taper\n\t    \t};\n\t\n\t    \tsegments = segments || 64;\n\t    \tradius = radius || 1;\n\t    \tradialSegments = radialSegments || 8;\n\t    \tclosed = closed || false;\n\t    \ttaper = taper || TubeGeometry.NoTaper;\n\t\n\t    \tvar grid = [];\n\t\n\t    \tvar scope = this,\n\t\n\t    \t\ttangent,\n\t    \t\tnormal,\n\t    \t\tbinormal,\n\t\n\t    \t\tnumpoints = segments + 1,\n\t\n\t    \t\tu, v, r,\n\t\n\t    \t\tcx, cy,\n\t    \t\tpos, pos2 = new Vector3(),\n\t    \t\ti, j,\n\t    \t\tip, jp,\n\t    \t\ta, b, c, d,\n\t    \t\tuva, uvb, uvc, uvd;\n\t\n\t    \tvar frames = new TubeGeometry.FrenetFrames( path, segments, closed ),\n\t    \t\ttangents = frames.tangents,\n\t    \t\tnormals = frames.normals,\n\t    \t\tbinormals = frames.binormals;\n\t\n\t    \t// proxy internals\n\t    \tthis.tangents = tangents;\n\t    \tthis.normals = normals;\n\t    \tthis.binormals = binormals;\n\t\n\t    \tfunction vert( x, y, z ) {\n\t\n\t    \t\treturn scope.vertices.push( new Vector3( x, y, z ) ) - 1;\n\t\n\t    \t}\n\t\n\t    \t// construct the grid\n\t\n\t    \tfor ( i = 0; i < numpoints; i ++ ) {\n\t\n\t    \t\tgrid[ i ] = [];\n\t\n\t    \t\tu = i / ( numpoints - 1 );\n\t\n\t    \t\tpos = path.getPointAt( u );\n\t\n\t    \t\ttangent = tangents[ i ];\n\t    \t\tnormal = normals[ i ];\n\t    \t\tbinormal = binormals[ i ];\n\t\n\t    \t\tr = radius * taper( u );\n\t\n\t    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\t\n\t    \t\t\tv = j / radialSegments * 2 * Math.PI;\n\t\n\t    \t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t    \t\t\tcy = r * Math.sin( v );\n\t\n\t    \t\t\tpos2.copy( pos );\n\t    \t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n\t    \t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n\t    \t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\t\n\t    \t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// construct the mesh\n\t\n\t    \tfor ( i = 0; i < segments; i ++ ) {\n\t\n\t    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\t\n\t    \t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n\t    \t\t\tjp = ( j + 1 ) % radialSegments;\n\t\n\t    \t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n\t    \t\t\tb = grid[ ip ][ j ];\n\t    \t\t\tc = grid[ ip ][ jp ];\n\t    \t\t\td = grid[ i ][ jp ];\n\t\n\t    \t\t\tuva = new Vector2( i / segments, j / radialSegments );\n\t    \t\t\tuvb = new Vector2( ( i + 1 ) / segments, j / radialSegments );\n\t    \t\t\tuvc = new Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n\t    \t\t\tuvd = new Vector2( i / segments, ( j + 1 ) / radialSegments );\n\t\n\t    \t\t\tthis.faces.push( new Face3( a, b, d ) );\n\t    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\t\n\t    \t\t\tthis.faces.push( new Face3( b, c, d ) );\n\t    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.computeFaceNormals();\n\t    \tthis.computeVertexNormals();\n\t\n\t    }\n\t\n\t    TubeGeometry.prototype = Object.create( Geometry.prototype );\n\t    TubeGeometry.prototype.constructor = TubeGeometry;\n\t\n\t    TubeGeometry.NoTaper = function ( u ) {\n\t\n\t    \treturn 1;\n\t\n\t    };\n\t\n\t    TubeGeometry.SinusoidalTaper = function ( u ) {\n\t\n\t    \treturn Math.sin( Math.PI * u );\n\t\n\t    };\n\t\n\t    // For computing of Frenet frames, exposing the tangents, normals and binormals the spline\n\t    TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\t\n\t    \tvar\tnormal = new Vector3(),\n\t\n\t    \t\ttangents = [],\n\t    \t\tnormals = [],\n\t    \t\tbinormals = [],\n\t\n\t    \t\tvec = new Vector3(),\n\t    \t\tmat = new Matrix4(),\n\t\n\t    \t\tnumpoints = segments + 1,\n\t    \t\ttheta,\n\t    \t\tsmallest,\n\t\n\t    \t\ttx, ty, tz,\n\t    \t\ti, u;\n\t\n\t\n\t    \t// expose internals\n\t    \tthis.tangents = tangents;\n\t    \tthis.normals = normals;\n\t    \tthis.binormals = binormals;\n\t\n\t    \t// compute the tangent vectors for each segment on the path\n\t\n\t    \tfor ( i = 0; i < numpoints; i ++ ) {\n\t\n\t    \t\tu = i / ( numpoints - 1 );\n\t\n\t    \t\ttangents[ i ] = path.getTangentAt( u );\n\t    \t\ttangents[ i ].normalize();\n\t\n\t    \t}\n\t\n\t    \tinitialNormal3();\n\t\n\t    \t/*\n\t    \tfunction initialNormal1(lastBinormal) {\n\t    \t\t// fixed start binormal. Has dangers of 0 vectors\n\t    \t\tnormals[ 0 ] = new THREE.Vector3();\n\t    \t\tbinormals[ 0 ] = new THREE.Vector3();\n\t    \t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n\t    \t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n\t    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t    \t}\n\t\n\t    \tfunction initialNormal2() {\n\t\n\t    \t\t// This uses the Frenet-Serret formula for deriving binormal\n\t    \t\tvar t2 = path.getTangentAt( epsilon );\n\t\n\t    \t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n\t    \t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\t\n\t    \t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n\t    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t\n\t    \t}\n\t    \t*/\n\t\n\t    \tfunction initialNormal3() {\n\t\n\t    \t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t    \t\t// and in the direction of the smallest tangent xyz component\n\t\n\t    \t\tnormals[ 0 ] = new Vector3();\n\t    \t\tbinormals[ 0 ] = new Vector3();\n\t    \t\tsmallest = Number.MAX_VALUE;\n\t    \t\ttx = Math.abs( tangents[ 0 ].x );\n\t    \t\tty = Math.abs( tangents[ 0 ].y );\n\t    \t\ttz = Math.abs( tangents[ 0 ].z );\n\t\n\t    \t\tif ( tx <= smallest ) {\n\t\n\t    \t\t\tsmallest = tx;\n\t    \t\t\tnormal.set( 1, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ty <= smallest ) {\n\t\n\t    \t\t\tsmallest = ty;\n\t    \t\t\tnormal.set( 0, 1, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( tz <= smallest ) {\n\t\n\t    \t\t\tnormal.set( 0, 0, 1 );\n\t\n\t    \t\t}\n\t\n\t    \t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\t\n\t    \t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\t\n\t    \t}\n\t\n\t\n\t    \t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\t\n\t    \tfor ( i = 1; i < numpoints; i ++ ) {\n\t\n\t    \t\tnormals[ i ] = normals[ i - 1 ].clone();\n\t\n\t    \t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\t\n\t    \t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\t\n\t    \t\tif ( vec.length() > Number.EPSILON ) {\n\t\n\t    \t\t\tvec.normalize();\n\t\n\t    \t\t\ttheta = Math.acos( exports.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\t\n\t    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\t\n\t    \t}\n\t\n\t\n\t    \t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\t\n\t    \tif ( closed ) {\n\t\n\t    \t\ttheta = Math.acos( exports.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n\t    \t\ttheta /= ( numpoints - 1 );\n\t\n\t    \t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\t\n\t    \t\t\ttheta = - theta;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( i = 1; i < numpoints; i ++ ) {\n\t\n\t    \t\t\t// twist a little...\n\t    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t    \t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     *\n\t     * see: http://www.blackpawn.com/texts/pqtorus/\n\t     */\n\t    function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusKnotBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\tp: p,\n\t    \t\tq: q\n\t    \t};\n\t\n\t    \tradius = radius || 100;\n\t    \ttube = tube || 40;\n\t    \ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t    \tradialSegments = Math.floor( radialSegments ) || 8;\n\t    \tp = p || 2;\n\t    \tq = q || 3;\n\t\n\t    \t// used to calculate buffer length\n\t    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// helper variables\n\t    \tvar i, j, index = 0, indexOffset = 0;\n\t\n\t    \tvar vertex = new Vector3();\n\t    \tvar normal = new Vector3();\n\t    \tvar uv = new Vector2();\n\t\n\t    \tvar P1 = new Vector3();\n\t    \tvar P2 = new Vector3();\n\t\n\t    \tvar B = new Vector3();\n\t    \tvar T = new Vector3();\n\t    \tvar N = new Vector3();\n\t\n\t    \t// generate vertices, normals and uvs\n\t\n\t    \tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\t\n\t    \t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\n\t    \t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\t\n\t    \t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t    \t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\t\n\t    \t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t    \t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\t\n\t    \t\t// calculate orthonormal basis\n\t\n\t    \t\tT.subVectors( P2, P1 );\n\t    \t\tN.addVectors( P2, P1 );\n\t    \t\tB.crossVectors( T, N );\n\t    \t\tN.crossVectors( B, T );\n\t\n\t    \t\t// normalize B, N. T can be ignored, we don't use it\n\t\n\t    \t\tB.normalize();\n\t    \t\tN.normalize();\n\t\n\t    \t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\t\n\t    \t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t    \t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\n\t    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t    \t\t\tvar cx = - tube * Math.cos( v );\n\t    \t\t\tvar cy = tube * Math.sin( v );\n\t\n\t    \t\t\t// now calculate the final vertex position.\n\t    \t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\t\n\t    \t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t    \t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t    \t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\t    \t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\t    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = i / tubularSegments;\n\t    \t\t\tuv.y = j / radialSegments;\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t    \t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t    \t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t    \t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \t// this function calculates the current position on the torus curve\n\t\n\t    \tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\t\n\t    \t\tvar cu = Math.cos( u );\n\t    \t\tvar su = Math.sin( u );\n\t    \t\tvar quOverP = q / p * u;\n\t    \t\tvar cs = Math.cos( quOverP );\n\t\n\t    \t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t    \t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t    \t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\t\n\t    /**\n\t     * @author oosmoxiecode\n\t     */\n\t\n\t    function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusKnotGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\tp: p,\n\t    \t\tq: q\n\t    \t};\n\t\n\t    \tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\t\n\t    \tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    TorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\t    TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tarc: arc\n\t    \t};\n\t\n\t    \tradius = radius || 100;\n\t    \ttube = tube || 40;\n\t    \tradialSegments = Math.floor( radialSegments ) || 8;\n\t    \ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t    \tarc = arc || Math.PI * 2;\n\t\n\t    \t// used to calculate buffer length\n\t    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t    \tvar vertices = new Float32Array( vertexCount * 3 );\n\t    \tvar normals = new Float32Array( vertexCount * 3 );\n\t    \tvar uvs = new Float32Array( vertexCount * 2 );\n\t\n\t    \t// offset variables\n\t    \tvar vertexBufferOffset = 0;\n\t    \tvar uvBufferOffset = 0;\n\t    \tvar indexBufferOffset = 0;\n\t\n\t    \t// helper variables\n\t    \tvar center = new Vector3();\n\t    \tvar vertex = new Vector3();\n\t    \tvar normal = new Vector3();\n\t\n\t    \tvar j, i;\n\t\n\t    \t// generate vertices, normals and uvs\n\t\n\t    \tfor ( j = 0; j <= radialSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\t\n\t    \t\t\tvar u = i / tubularSegments * arc;\n\t    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t    \t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t    \t\t\tvertex.z = tube * Math.sin( v );\n\t\n\t    \t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n\t    \t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n\t    \t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\t\n\t    \t\t\t// this vector is used to calculate the normal\n\t    \t\t\tcenter.x = radius * Math.cos( u );\n\t    \t\t\tcenter.y = radius * Math.sin( u );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormal.subVectors( vertex, center ).normalize();\n\t\n\t    \t\t\tnormals[ vertexBufferOffset ] = normal.x;\n\t    \t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n\t    \t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n\t    \t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\t\n\t    \t\t\t// update offsets\n\t    \t\t\tvertexBufferOffset += 3;\n\t    \t\t\tuvBufferOffset += 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( j = 1; j <= radialSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t    \t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t    \t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t    \t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices[ indexBufferOffset ] = a;\n\t    \t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t    \t\t\tindices[ indexBufferOffset + 2 ] = d;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t    \t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t    \t\t\tindices[ indexBufferOffset + 5 ] = d;\n\t\n\t    \t\t\t// update offset\n\t    \t\t\tindexBufferOffset += 6;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    }\n\t\n\t    TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\t\n\t    /**\n\t     * @author oosmoxiecode\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n\t     */\n\t\n\t    function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tarc: arc\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\n\t    }\n\t\n\t    TorusGeometry.prototype = Object.create( Geometry.prototype );\n\t    TorusGeometry.prototype.constructor = TorusGeometry;\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     */\n\t\n\t    exports.ShapeUtils = {\n\t\n\t    \t// calculate area of the contour polygon\n\t\n\t    \tarea: function ( contour ) {\n\t\n\t    \t\tvar n = contour.length;\n\t    \t\tvar a = 0.0;\n\t\n\t    \t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\t\n\t    \t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn a * 0.5;\n\t\n\t    \t},\n\t\n\t    \ttriangulate: ( function () {\n\t\n\t    \t\t/**\n\t    \t\t * This code is a quick port of code written in C++ which was submitted to\n\t    \t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t    \t\t * See original code and more information here:\n\t    \t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t    \t\t *\n\t    \t\t * ported to actionscript by Zevan Rosser\n\t    \t\t * www.actionsnippet.com\n\t    \t\t *\n\t    \t\t * ported to javascript by Joshua Koo\n\t    \t\t * http://www.lab4games.net/zz85/blog\n\t    \t\t *\n\t    \t\t */\n\t\n\t    \t\tfunction snip( contour, u, v, w, n, verts ) {\n\t\n\t    \t\t\tvar p;\n\t    \t\t\tvar ax, ay, bx, by;\n\t    \t\t\tvar cx, cy, px, py;\n\t\n\t    \t\t\tax = contour[ verts[ u ] ].x;\n\t    \t\t\tay = contour[ verts[ u ] ].y;\n\t\n\t    \t\t\tbx = contour[ verts[ v ] ].x;\n\t    \t\t\tby = contour[ verts[ v ] ].y;\n\t\n\t    \t\t\tcx = contour[ verts[ w ] ].x;\n\t    \t\t\tcy = contour[ verts[ w ] ].y;\n\t\n\t    \t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\t\n\t    \t\t\tvar aX, aY, bX, bY, cX, cY;\n\t    \t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t    \t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\t\n\t    \t\t\taX = cx - bx;  aY = cy - by;\n\t    \t\t\tbX = ax - cx;  bY = ay - cy;\n\t    \t\t\tcX = bx - ax;  cY = by - ay;\n\t\n\t    \t\t\tfor ( p = 0; p < n; p ++ ) {\n\t\n\t    \t\t\t\tpx = contour[ verts[ p ] ].x;\n\t    \t\t\t\tpy = contour[ verts[ p ] ].y;\n\t\n\t    \t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t    \t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t    \t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\t\n\t    \t\t\t\tapx = px - ax;  apy = py - ay;\n\t    \t\t\t\tbpx = px - bx;  bpy = py - by;\n\t    \t\t\t\tcpx = px - cx;  cpy = py - cy;\n\t\n\t    \t\t\t\t// see if p is inside triangle abc\n\t\n\t    \t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t    \t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t    \t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\t\n\t    \t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// takes in an contour array and returns\n\t\n\t    \t\treturn function triangulate( contour, indices ) {\n\t\n\t    \t\t\tvar n = contour.length;\n\t\n\t    \t\t\tif ( n < 3 ) return null;\n\t\n\t    \t\t\tvar result = [],\n\t    \t\t\t\tverts = [],\n\t    \t\t\t\tvertIndices = [];\n\t\n\t    \t\t\t/* we want a counter-clockwise polygon in verts */\n\t\n\t    \t\t\tvar u, v, w;\n\t\n\t    \t\t\tif ( exports.ShapeUtils.area( contour ) > 0.0 ) {\n\t\n\t    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar nv = n;\n\t\n\t    \t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\t\n\t    \t\t\tvar count = 2 * nv;   /* error detection */\n\t\n\t    \t\t\tfor ( v = nv - 1; nv > 2; ) {\n\t\n\t    \t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\t\n\t    \t\t\t\tif ( ( count -- ) <= 0 ) {\n\t\n\t    \t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\t\n\t    \t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t    \t\t\t\t\t//return null;\n\t    \t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t    \t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\t\n\t    \t\t\t\t\tif ( indices ) return vertIndices;\n\t    \t\t\t\t\treturn result;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\t\n\t    \t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t    \t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t    \t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\t\n\t    \t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\t\n\t    \t\t\t\t\tvar a, b, c, s, t;\n\t\n\t    \t\t\t\t\t/* true names of the vertices */\n\t\n\t    \t\t\t\t\ta = verts[ u ];\n\t    \t\t\t\t\tb = verts[ v ];\n\t    \t\t\t\t\tc = verts[ w ];\n\t\n\t    \t\t\t\t\t/* output Triangle */\n\t\n\t    \t\t\t\t\tresult.push( [ contour[ a ],\n\t    \t\t\t\t\t\tcontour[ b ],\n\t    \t\t\t\t\t\tcontour[ c ] ] );\n\t\n\t\n\t    \t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\t\n\t    \t\t\t\t\t/* remove v from the remaining polygon */\n\t\n\t    \t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\t\n\t    \t\t\t\t\t\tverts[ s ] = verts[ t ];\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tnv --;\n\t\n\t    \t\t\t\t\t/* reset error detection counter */\n\t\n\t    \t\t\t\t\tcount = 2 * nv;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( indices ) return vertIndices;\n\t    \t\t\treturn result;\n\t\n\t    \t\t}\n\t\n\t    \t} )(),\n\t\n\t    \ttriangulateShape: function ( contour, holes ) {\n\t\n\t    \t\tfunction removeDupEndPts(points) {\n\t\n\t    \t\t\tvar l = points.length;\n\t\n\t    \t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\t\n\t    \t\t\t\tpoints.pop();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tremoveDupEndPts( contour );\n\t    \t\tholes.forEach( removeDupEndPts );\n\t\n\t    \t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\t\n\t    \t\t\t// inOtherPt needs to be collinear to the inSegment\n\t    \t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\t\n\t    \t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\t\n\t    \t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t    \t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\t\n\t    \t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t    \t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\t\n\t    \t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t    \t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\t\n\t    \t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\t\n\t    \t\t\t\t// not parallel\n\t\n\t    \t\t\t\tvar perpSeg2;\n\t    \t\t\t\tif ( limit > 0 ) {\n\t\n\t    \t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t    \t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t    \t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// i.e. to reduce rounding errors\n\t    \t\t\t\t// intersection at endpoint of segment#1?\n\t    \t\t\t\tif ( perpSeg2 === 0 ) {\n\t\n\t    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\tif ( perpSeg2 === limit ) {\n\t\n\t    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t    \t\t\t\t\treturn [ inSeg1Pt2 ];\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\t// intersection at endpoint of segment#2?\n\t    \t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t    \t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\t\n\t    \t\t\t\t// return real intersection point\n\t    \t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t    \t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t    \t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// parallel or collinear\n\t    \t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t    \t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\t\n\t    \t\t\t\t// they are collinear or degenerate\n\t    \t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t    \t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t    \t\t\t\t// both segments are points\n\t    \t\t\t\tif ( seg1Pt && seg2Pt ) {\n\t\n\t    \t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t    \t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t    \t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\t// segment#1  is a single point\n\t    \t\t\t\tif ( seg1Pt ) {\n\t\n\t    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\t// segment#2  is a single point\n\t    \t\t\t\tif ( seg2Pt ) {\n\t\n\t    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t    \t\t\t\t\treturn [ inSeg2Pt1 ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// they are collinear segments, which might overlap\n\t    \t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t    \t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t    \t\t\t\tif ( seg1dx !== 0 ) {\n\t\n\t    \t\t\t\t\t// the segments are NOT on a vertical line\n\t    \t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// the segments are on a vertical line\n\t    \t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\t\n\t    \t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t    \t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\t\n\t    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t    \t\t\t\t\t\treturn [ seg2min ];\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t    \t\t\t\t\treturn\t[ seg2min, seg2max ];\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t    \t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\t\n\t    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t    \t\t\t\t\t\treturn [ seg1min ];\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t    \t\t\t\t\treturn\t[ seg1min, seg2max ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\t\n\t    \t\t\t// The order of legs is important\n\t\n\t    \t\t\t// translation of all points, so that Vertex is at (0,0)\n\t    \t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t    \t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t    \t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\t\n\t    \t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t    \t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t    \t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\t\n\t    \t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\t\n\t    \t\t\t\t// angle != 180 deg.\n\t\n\t    \t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t    \t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\t\n\t    \t\t\t\tif ( from2toAngle > 0 ) {\n\t\n\t    \t\t\t\t\t// main angle < 180 deg.\n\t    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// main angle > 180 deg.\n\t    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// angle == 180 deg.\n\t    \t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t    \t\t\t\treturn\t( from2otherAngle > 0 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\tfunction removeHoles( contour, holes ) {\n\t\n\t    \t\t\tvar shape = contour.concat(); // work on this shape\n\t    \t\t\tvar hole;\n\t\n\t    \t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\t\n\t    \t\t\t\t// Check if hole point lies within angle around shape point\n\t    \t\t\t\tvar lastShapeIdx = shape.length - 1;\n\t\n\t    \t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t    \t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\t\n\t    \t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t    \t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\t\n\t    \t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t    \t\t\t\tif ( ! insideAngle ) {\n\t\n\t    \t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t    \t\t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// Check if shape point lies within angle around hole point\n\t    \t\t\t\tvar lastHoleIdx = hole.length - 1;\n\t\n\t    \t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t    \t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\t\n\t    \t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t    \t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\t\n\t    \t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t    \t\t\t\tif ( ! insideAngle ) {\n\t\n\t    \t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t    \t\t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn\ttrue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\t\n\t    \t\t\t\t// checks for intersections with shape edges\n\t    \t\t\t\tvar sIdx, nextIdx, intersection;\n\t    \t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\t\n\t    \t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t    \t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t    \t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar indepHoles = [];\n\t\n\t    \t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\t\n\t    \t\t\t\t// checks for intersections with hole edges\n\t    \t\t\t\tvar ihIdx, chkHole,\n\t    \t\t\t\t\thIdx, nextIdx, intersection;\n\t    \t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\t\n\t    \t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t    \t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\t\n\t    \t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t    \t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t    \t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar holeIndex, shapeIndex,\n\t    \t\t\t\tshapePt, holePt,\n\t    \t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t    \t\t\t\ttmpShape1, tmpShape2,\n\t    \t\t\t\ttmpHole1, tmpHole2;\n\t\n\t    \t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\t\tindepHoles.push( h );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar minShapeIndex = 0;\n\t    \t\t\tvar counter = indepHoles.length * 2;\n\t    \t\t\twhile ( indepHoles.length > 0 ) {\n\t\n\t    \t\t\t\tcounter --;\n\t    \t\t\t\tif ( counter < 0 ) {\n\t\n\t    \t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// search for shape-vertex and hole-vertex,\n\t    \t\t\t\t// which can be connected without intersections\n\t    \t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\t\n\t    \t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t    \t\t\t\t\tholeIndex\t= - 1;\n\t\n\t    \t\t\t\t\t// search for hole which can be reached without intersections\n\t    \t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\t\n\t    \t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\t\n\t    \t\t\t\t\t\t// prevent multiple checks\n\t    \t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t    \t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\t\n\t    \t\t\t\t\t\thole = holes[ holeIdx ];\n\t    \t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\t\n\t    \t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t    \t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t    \t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t    \t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\t\n\t    \t\t\t\t\t\t\tholeIndex = h2;\n\t    \t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\t\n\t    \t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t    \t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t    \t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t    \t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\t\n\t    \t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\t\n\t    \t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\t\n\t    \t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t    \t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t}\n\t    \t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\t\n\t    \t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn shape; \t\t\t/* shape with no holes */\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\tvar i, il, f, face,\n\t    \t\t\tkey, index,\n\t    \t\t\tallPointsMap = {};\n\t\n\t    \t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\t\n\t    \t\tvar allpoints = contour.concat();\n\t\n\t    \t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\t\n\t    \t\t}\n\t\n\t    \t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\t\n\t    \t\t// prepare all points map\n\t\n\t    \t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\t\n\t    \t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\t\n\t    \t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tallPointsMap[ key ] = i;\n\t\n\t    \t\t}\n\t\n\t    \t\t// remove holes by cutting paths to holes and adding them to the shape\n\t    \t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\t\n\t    \t\tvar triangles = exports.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t    \t\t//console.log( \"triangles\",triangles, triangles.length );\n\t\n\t    \t\t// check all face vertices against all points map\n\t\n\t    \t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\t\n\t    \t\t\tface = triangles[ i ];\n\t\n\t    \t\t\tfor ( f = 0; f < 3; f ++ ) {\n\t\n\t    \t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\t\n\t    \t\t\t\tindex = allPointsMap[ key ];\n\t\n\t    \t\t\t\tif ( index !== undefined ) {\n\t\n\t    \t\t\t\t\tface[ f ] = index;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn triangles.concat();\n\t\n\t    \t},\n\t\n\t    \tisClockWise: function ( pts ) {\n\t\n\t    \t\treturn exports.ShapeUtils.area( pts ) < 0;\n\t\n\t    \t},\n\t\n\t    \t// Bezier Curves formulas obtained from\n\t    \t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\t\n\t    \t// Quad Bezier Functions\n\t\n\t    \tb2: ( function () {\n\t\n\t    \t\tfunction b2p0( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn k * k * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b2p1( t, p ) {\n\t\n\t    \t\t\treturn 2 * ( 1 - t ) * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b2p2( t, p ) {\n\t\n\t    \t\t\treturn t * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function b2( t, p0, p1, p2 ) {\n\t\n\t    \t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \t// Cubic Bezier Functions\n\t\n\t    \tb3: ( function () {\n\t\n\t    \t\tfunction b3p0( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn k * k * k * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b3p1( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn 3 * k * k * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b3p2( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn 3 * k * t * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b3p3( t, p ) {\n\t\n\t    \t\t\treturn t * t * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function b3( t, p0, p1, p2, p3 ) {\n\t\n\t    \t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     *\n\t     * Creates extruded geometry from a path shape.\n\t     *\n\t     * parameters = {\n\t     *\n\t     *  curveSegments: <int>, // number of points on the curves\n\t     *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t     *  amount: <int>, // Depth to extrude the shape\n\t     *\n\t     *  bevelEnabled: <bool>, // turn on bevel\n\t     *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t     *  bevelSize: <float>, // how far from shape outline is bevel\n\t     *  bevelSegments: <int>, // number of bevel layers\n\t     *\n\t     *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n\t     *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n\t     *\n\t     *  uvGenerator: <Object> // object that provides UV generator functions\n\t     *\n\t     * }\n\t     **/\n\t\n\t    function ExtrudeGeometry( shapes, options ) {\n\t\n\t    \tif ( typeof( shapes ) === \"undefined\" ) {\n\t\n\t    \t\tshapes = [];\n\t    \t\treturn;\n\t\n\t    \t}\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'ExtrudeGeometry';\n\t\n\t    \tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\t\n\t    \tthis.addShapeList( shapes, options );\n\t\n\t    \tthis.computeFaceNormals();\n\t\n\t    \t// can't really use automatic vertex normals\n\t    \t// as then front and back sides get smoothed too\n\t    \t// should do separate smoothing just for sides\n\t\n\t    \t//this.computeVertexNormals();\n\t\n\t    \t//console.log( \"took\", ( Date.now() - startTime ) );\n\t\n\t    }\n\t\n\t    ExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\t    ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\t\n\t    ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\t\n\t    \tvar sl = shapes.length;\n\t\n\t    \tfor ( var s = 0; s < sl; s ++ ) {\n\t\n\t    \t\tvar shape = shapes[ s ];\n\t    \t\tthis.addShape( shape, options );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\t\n\t    \tvar amount = options.amount !== undefined ? options.amount : 100;\n\t\n\t    \tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\t    \tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\t    \tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\n\t    \tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\t\n\t    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\n\t    \tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\n\t    \tvar extrudePath = options.extrudePath;\n\t    \tvar extrudePts, extrudeByPath = false;\n\t\n\t    \t// Use default WorldUVGenerator if no UV generators are specified.\n\t    \tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\t\n\t    \tvar splineTube, binormal, normal, position2;\n\t    \tif ( extrudePath ) {\n\t\n\t    \t\textrudePts = extrudePath.getSpacedPoints( steps );\n\t\n\t    \t\textrudeByPath = true;\n\t    \t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\n\t    \t\t// SETUP TNB variables\n\t\n\t    \t\t// Reuse TNB from TubeGeomtry for now.\n\t    \t\t// TODO1 - have a .isClosed in spline?\n\t\n\t    \t\tsplineTube = options.frames !== undefined ? options.frames : new TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\t\n\t    \t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\t\n\t    \t\tbinormal = new Vector3();\n\t    \t\tnormal = new Vector3();\n\t    \t\tposition2 = new Vector3();\n\t\n\t    \t}\n\t\n\t    \t// Safeguards if bevels are not enabled\n\t\n\t    \tif ( ! bevelEnabled ) {\n\t\n\t    \t\tbevelSegments = 0;\n\t    \t\tbevelThickness = 0;\n\t    \t\tbevelSize = 0;\n\t\n\t    \t}\n\t\n\t    \t// Variables initialization\n\t\n\t    \tvar ahole, h, hl; // looping of holes\n\t    \tvar scope = this;\n\t\n\t    \tvar shapesOffset = this.vertices.length;\n\t\n\t    \tvar shapePoints = shape.extractPoints( curveSegments );\n\t\n\t    \tvar vertices = shapePoints.shape;\n\t    \tvar holes = shapePoints.holes;\n\t\n\t    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\t\n\t    \tif ( reverse ) {\n\t\n\t    \t\tvertices = vertices.reverse();\n\t\n\t    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t\n\t    \t\t\tif ( exports.ShapeUtils.isClockWise( ahole ) ) {\n\t\n\t    \t\t\t\tholes[ h ] = ahole.reverse();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\t\n\t    \t}\n\t\n\t\n\t    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\t\n\t    \t/* Vertices */\n\t\n\t    \tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\t\n\t    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\tahole = holes[ h ];\n\t\n\t    \t\tvertices = vertices.concat( ahole );\n\t\n\t    \t}\n\t\n\t\n\t    \tfunction scalePt2( pt, vec, size ) {\n\t\n\t    \t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\t\n\t    \t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\t\n\t    \t}\n\t\n\t    \tvar b, bs, t, z,\n\t    \t\tvert, vlen = vertices.length,\n\t    \t\tface, flen = faces.length;\n\t\n\t\n\t    \t// Find directions for point movement\n\t\n\t\n\t    \tfunction getBevelVec( inPt, inPrev, inNext ) {\n\t\n\t    \t\t// computes for inPt the corresponding point inPt' on a new contour\n\t    \t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t    \t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t    \t\t//\n\t    \t\t// inPt' is the intersection of the two lines parallel to the two\n\t    \t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\t\n\t    \t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\t\n\t    \t\t// good reading for geometry algorithms (here: line-line intersection)\n\t    \t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\t\n\t    \t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n\t    \t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\t\n\t    \t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\t\n\t    \t\t// check for collinear edges\n\t    \t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\t\n\t    \t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\t\n\t    \t\t\t// not collinear\n\t\n\t    \t\t\t// length of vectors for normalizing\n\t\n\t    \t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t    \t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\t\n\t    \t\t\t// shift adjacent points by unit vectors to the left\n\t\n\t    \t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t    \t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\t\n\t    \t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t    \t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\t\n\t    \t\t\t// scaling factor for v_prev to intersection point\n\t\n\t    \t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t    \t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n\t    \t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\t\n\t    \t\t\t// vector from inPt to intersection point\n\t\n\t    \t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t    \t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\t\n\t    \t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t    \t\t\t//  but prevent crazy spikes\n\t    \t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t    \t\t\tif ( v_trans_lensq <= 2 ) {\n\t\n\t    \t\t\t\treturn\tnew Vector2( v_trans_x, v_trans_y );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// handle special case of collinear edges\n\t\n\t    \t\t\tvar direction_eq = false;\t\t// assumes: opposite\n\t    \t\t\tif ( v_prev_x > Number.EPSILON ) {\n\t\n\t    \t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\t\n\t    \t\t\t\t\tdirection_eq = true;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\t\n\t    \t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\t\n\t    \t\t\t\t\t\tdirection_eq = true;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\t\n\t    \t\t\t\t\t\tdirection_eq = true;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( direction_eq ) {\n\t\n\t    \t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t    \t\t\t\tv_trans_x = - v_prev_y;\n\t    \t\t\t\tv_trans_y =  v_prev_x;\n\t    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t    \t\t\t\tv_trans_x = v_prev_x;\n\t    \t\t\t\tv_trans_y = v_prev_y;\n\t    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn\tnew Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\t\n\t    \t}\n\t\n\t\n\t    \tvar contourMovements = [];\n\t\n\t    \tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\t\n\t    \t\tif ( j === il ) j = 0;\n\t    \t\tif ( k === il ) k = 0;\n\t\n\t    \t\t//  (j)---(i)---(k)\n\t    \t\t// console.log('i,j,k', i, j , k)\n\t\n\t    \t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\t\n\t    \t}\n\t\n\t    \tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\t\n\t    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\tahole = holes[ h ];\n\t\n\t    \t\toneHoleMovements = [];\n\t\n\t    \t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\t\n\t    \t\t\tif ( j === il ) j = 0;\n\t    \t\t\tif ( k === il ) k = 0;\n\t\n\t    \t\t\t//  (j)---(i)---(k)\n\t    \t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\t\n\t    \t\t}\n\t\n\t    \t\tholesMovements.push( oneHoleMovements );\n\t    \t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Loop bevelSegments, 1 for the front, 1 for the back\n\t\n\t    \tfor ( b = 0; b < bevelSegments; b ++ ) {\n\t\n\t    \t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\n\t    \t\tt = b / bevelSegments;\n\t    \t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\t\n\t    \t\t// contract shape\n\t\n\t    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\n\t    \t\t\tv( vert.x, vert.y,  - z );\n\t\n\t    \t\t}\n\t\n\t    \t\t// expand holes\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t    \t\t\toneHoleMovements = holesMovements[ h ];\n\t\n\t    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\t\n\t    \t\t\t\tv( vert.x, vert.y,  - z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tbs = bevelSize;\n\t\n\t    \t// Back facing vertices\n\t\n\t    \tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t    \t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\t\n\t    \t\tif ( ! extrudeByPath ) {\n\t\n\t    \t\t\tv( vert.x, vert.y, 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\n\t    \t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t    \t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\t\n\t    \t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\t\n\t    \t\t\tv( position2.x, position2.y, position2.z );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Add stepped vertices...\n\t    \t// Including front facing vertices\n\t\n\t    \tvar s;\n\t\n\t    \tfor ( s = 1; s <= steps; s ++ ) {\n\t\n\t    \t\tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t    \t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\t\n\t    \t\t\tif ( ! extrudeByPath ) {\n\t\n\t    \t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\n\t    \t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t    \t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\t\n\t    \t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\t\n\t    \t\t\t\tv( position2.x, position2.y, position2.z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// Add bevel segments planes\n\t\n\t    \t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t    \tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\t\n\t    \t\tt = b / bevelSegments;\n\t    \t\tz = bevelThickness * Math.cos ( t * Math.PI / 2 );\n\t    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\t\n\t    \t\t// contract shape\n\t\n\t    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t    \t\t\tv( vert.x, vert.y,  amount + z );\n\t\n\t    \t\t}\n\t\n\t    \t\t// expand holes\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t    \t\t\toneHoleMovements = holesMovements[ h ];\n\t\n\t    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\t\n\t    \t\t\t\tif ( ! extrudeByPath ) {\n\t\n\t    \t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t/* Faces */\n\t\n\t    \t// Top and bottom faces\n\t\n\t    \tbuildLidFaces();\n\t\n\t    \t// Sides faces\n\t\n\t    \tbuildSideFaces();\n\t\n\t\n\t    \t/////  Internal functions\n\t\n\t    \tfunction buildLidFaces() {\n\t\n\t    \t\tif ( bevelEnabled ) {\n\t\n\t    \t\t\tvar layer = 0; // steps + 1\n\t    \t\t\tvar offset = vlen * layer;\n\t\n\t    \t\t\t// Bottom faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tlayer = steps + bevelSegments * 2;\n\t    \t\t\toffset = vlen * layer;\n\t\n\t    \t\t\t// Top faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// Bottom faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Top faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Create faces for the z-sides of the shape\n\t\n\t    \tfunction buildSideFaces() {\n\t\n\t    \t\tvar layeroffset = 0;\n\t    \t\tsidewalls( contour, layeroffset );\n\t    \t\tlayeroffset += contour.length;\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t    \t\t\tsidewalls( ahole, layeroffset );\n\t\n\t    \t\t\t//, true\n\t    \t\t\tlayeroffset += ahole.length;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction sidewalls( contour, layeroffset ) {\n\t\n\t    \t\tvar j, k;\n\t    \t\ti = contour.length;\n\t\n\t    \t\twhile ( -- i >= 0 ) {\n\t\n\t    \t\t\tj = i;\n\t    \t\t\tk = i - 1;\n\t    \t\t\tif ( k < 0 ) k = contour.length - 1;\n\t\n\t    \t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\t\n\t    \t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\t\n\t    \t\t\tfor ( s = 0; s < sl; s ++ ) {\n\t\n\t    \t\t\t\tvar slen1 = vlen * s;\n\t    \t\t\t\tvar slen2 = vlen * ( s + 1 );\n\t\n\t    \t\t\t\tvar a = layeroffset + j + slen1,\n\t    \t\t\t\t\tb = layeroffset + k + slen1,\n\t    \t\t\t\t\tc = layeroffset + k + slen2,\n\t    \t\t\t\t\td = layeroffset + j + slen2;\n\t\n\t    \t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \tfunction v( x, y, z ) {\n\t\n\t    \t\tscope.vertices.push( new Vector3( x, y, z ) );\n\t\n\t    \t}\n\t\n\t    \tfunction f3( a, b, c ) {\n\t\n\t    \t\ta += shapesOffset;\n\t    \t\tb += shapesOffset;\n\t    \t\tc += shapesOffset;\n\t\n\t    \t\tscope.faces.push( new Face3( a, b, c, null, null, 0 ) );\n\t\n\t    \t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\t\n\t    \t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\t\n\t    \t}\n\t\n\t    \tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\t\n\t    \t\ta += shapesOffset;\n\t    \t\tb += shapesOffset;\n\t    \t\tc += shapesOffset;\n\t    \t\td += shapesOffset;\n\t\n\t    \t\tscope.faces.push( new Face3( a, b, d, null, null, 1 ) );\n\t    \t\tscope.faces.push( new Face3( b, c, d, null, null, 1 ) );\n\t\n\t    \t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\t\n\t    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n\t    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    ExtrudeGeometry.WorldUVGenerator = {\n\t\n\t    \tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\t\n\t    \t\tvar vertices = geometry.vertices;\n\t\n\t    \t\tvar a = vertices[ indexA ];\n\t    \t\tvar b = vertices[ indexB ];\n\t    \t\tvar c = vertices[ indexC ];\n\t\n\t    \t\treturn [\n\t    \t\t\tnew Vector2( a.x, a.y ),\n\t    \t\t\tnew Vector2( b.x, b.y ),\n\t    \t\t\tnew Vector2( c.x, c.y )\n\t    \t\t];\n\t\n\t    \t},\n\t\n\t    \tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\t\n\t    \t\tvar vertices = geometry.vertices;\n\t\n\t    \t\tvar a = vertices[ indexA ];\n\t    \t\tvar b = vertices[ indexB ];\n\t    \t\tvar c = vertices[ indexC ];\n\t    \t\tvar d = vertices[ indexD ];\n\t\n\t    \t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\t\n\t    \t\t\treturn [\n\t    \t\t\t\tnew Vector2( a.x, 1 - a.z ),\n\t    \t\t\t\tnew Vector2( b.x, 1 - b.z ),\n\t    \t\t\t\tnew Vector2( c.x, 1 - c.z ),\n\t    \t\t\t\tnew Vector2( d.x, 1 - d.z )\n\t    \t\t\t];\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn [\n\t    \t\t\t\tnew Vector2( a.y, 1 - a.z ),\n\t    \t\t\t\tnew Vector2( b.y, 1 - b.z ),\n\t    \t\t\t\tnew Vector2( c.y, 1 - c.z ),\n\t    \t\t\t\tnew Vector2( d.y, 1 - d.z )\n\t    \t\t\t];\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * Text = 3D Text\n\t     *\n\t     * parameters = {\n\t     *  font: <THREE.Font>, // font\n\t     *\n\t     *  size: <float>, // size of the text\n\t     *  height: <float>, // thickness to extrude text\n\t     *  curveSegments: <int>, // number of points on the curves\n\t     *\n\t     *  bevelEnabled: <bool>, // turn on bevel\n\t     *  bevelThickness: <float>, // how deep into text bevel goes\n\t     *  bevelSize: <float> // how far from text outline is bevel\n\t     * }\n\t     */\n\t\n\t    function TextGeometry( text, parameters ) {\n\t\n\t    \tparameters = parameters || {};\n\t\n\t    \tvar font = parameters.font;\n\t\n\t    \tif ( (font && font.isFont) === false ) {\n\t\n\t    \t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t    \t\treturn new Geometry();\n\t\n\t    \t}\n\t\n\t    \tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\t\n\t    \t// translate parameters to ExtrudeGeometry API\n\t\n\t    \tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\t\n\t    \t// defaults\n\t\n\t    \tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t    \tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t    \tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\t\n\t    \tExtrudeGeometry.call( this, shapes, parameters );\n\t\n\t    \tthis.type = 'TextGeometry';\n\t\n\t    }\n\t\n\t    TextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );\n\t    TextGeometry.prototype.constructor = TextGeometry;\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     * based on THREE.SphereGeometry\n\t     */\n\t\n\t    function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'SphereBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tradius = radius || 50;\n\t\n\t    \twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t    \theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\t\n\t    \tphiStart = phiStart !== undefined ? phiStart : 0;\n\t    \tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\t\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\t\n\t    \tvar thetaEnd = thetaStart + thetaLength;\n\t\n\t    \tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\t\n\t    \tvar positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \tvar index = 0, vertices = [], normal = new Vector3();\n\t\n\t    \tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\t\n\t    \t\tvar verticesRow = [];\n\t\n\t    \t\tvar v = y / heightSegments;\n\t\n\t    \t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\t\n\t    \t\t\tvar u = x / widthSegments;\n\t\n\t    \t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t    \t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n\t    \t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\n\t    \t\t\tnormal.set( px, py, pz ).normalize();\n\t\n\t    \t\t\tpositions.setXYZ( index, px, py, pz );\n\t    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t    \t\t\tuvs.setXY( index, u, 1 - v );\n\t\n\t    \t\t\tverticesRow.push( index );\n\t\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t\tvertices.push( verticesRow );\n\t\n\t    \t}\n\t\n\t    \tvar indices = [];\n\t\n\t    \tfor ( var y = 0; y < heightSegments; y ++ ) {\n\t\n\t    \t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\t\n\t    \t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t    \t\t\tvar v2 = vertices[ y ][ x ];\n\t    \t\t\tvar v3 = vertices[ y + 1 ][ x ];\n\t    \t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\t\n\t    \t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n\t    \t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', positions );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t    }\n\t\n\t    SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'SphereGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\n\t    }\n\t\n\t    SphereGeometry.prototype = Object.create( Geometry.prototype );\n\t    SphereGeometry.prototype.constructor = SphereGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'RingBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tinnerRadius: innerRadius,\n\t    \t\touterRadius: outerRadius,\n\t    \t\tthetaSegments: thetaSegments,\n\t    \t\tphiSegments: phiSegments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tinnerRadius = innerRadius || 20;\n\t    \touterRadius = outerRadius || 50;\n\t\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\t\n\t    \tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t    \tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\t\n\t    \t// these are used to calculate buffer length\n\t    \tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n\t    \tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// some helper variables\n\t    \tvar index = 0, indexOffset = 0, segment;\n\t    \tvar radius = innerRadius;\n\t    \tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t    \tvar vertex = new Vector3();\n\t    \tvar uv = new Vector2();\n\t    \tvar j, i;\n\t\n\t    \t// generate vertices, normals and uvs\n\t\n\t    \t// values are generate from the inside of the ring to the outside\n\t\n\t    \tfor ( j = 0; j <= phiSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\t\n\t    \t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = radius * Math.cos( segment );\n\t    \t\t\tvertex.y = radius * Math.sin( segment );\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t    \t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex++;\n\t\n\t    \t\t}\n\t\n\t    \t\t// increase the radius for next row of vertices\n\t    \t\tradius += radiusStep;\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( j = 0; j < phiSegments; j ++ ) {\n\t\n\t    \t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\t\n\t    \t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\t\n\t    \t\t\tsegment = i + thetaSegmentLevel;\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = segment;\n\t    \t\t\tvar b = segment + thetaSegments + 1;\n\t    \t\t\tvar c = segment + thetaSegments + 2;\n\t    \t\t\tvar d = segment + 1;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    }\n\t\n\t    RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    RingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\t\n\t    /**\n\t     * @author Kaleb Murphy\n\t     */\n\t\n\t    function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'RingGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tinnerRadius: innerRadius,\n\t    \t\touterRadius: outerRadius,\n\t    \t\tthetaSegments: thetaSegments,\n\t    \t\tphiSegments: phiSegments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\n\t    }\n\t\n\t    RingGeometry.prototype = Object.create( Geometry.prototype );\n\t    RingGeometry.prototype.constructor = RingGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t     */\n\t\n\t    function PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'PlaneGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\n\t    }\n\t\n\t    PlaneGeometry.prototype = Object.create( Geometry.prototype );\n\t    PlaneGeometry.prototype.constructor = PlaneGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t     // points - to create a closed torus, one must use a set of points\n\t     //    like so: [ a, b, c, d, a ], see first is the same as last.\n\t     // segments - the number of circumference segments to create\n\t     // phiStart - the starting radian\n\t     // phiLength - the radian (0 to 2PI) range of the lathed section\n\t     //    2PI is a closed lathe, less than 2PI is a portion.\n\t\n\t    function LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'LatheBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tpoints: points,\n\t    \t\tsegments: segments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength\n\t    \t};\n\t\n\t    \tsegments = Math.floor( segments ) || 12;\n\t    \tphiStart = phiStart || 0;\n\t    \tphiLength = phiLength || Math.PI * 2;\n\t\n\t    \t// clamp phiLength so it's in range of [ 0, 2PI ]\n\t    \tphiLength = exports.Math.clamp( phiLength, 0, Math.PI * 2 );\n\t\n\t    \t// these are used to calculate buffer length\n\t    \tvar vertexCount = ( segments + 1 ) * points.length;\n\t    \tvar indexCount = segments * points.length * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// helper variables\n\t    \tvar index = 0, indexOffset = 0, base;\n\t    \tvar inverseSegments = 1.0 / segments;\n\t    \tvar vertex = new Vector3();\n\t    \tvar uv = new Vector2();\n\t    \tvar i, j;\n\t\n\t    \t// generate vertices and uvs\n\t\n\t    \tfor ( i = 0; i <= segments; i ++ ) {\n\t\n\t    \t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\t\n\t    \t\tvar sin = Math.sin( phi );\n\t    \t\tvar cos = Math.cos( phi );\n\t\n\t    \t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = points[ j ].x * sin;\n\t    \t\t\tvertex.y = points[ j ].y;\n\t    \t\t\tvertex.z = points[ j ].x * cos;\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = i / segments;\n\t    \t\t\tuv.y = j / ( points.length - 1 );\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( i = 0; i < segments; i ++ ) {\n\t\n\t    \t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\t\n\t    \t\t\tbase = j + i * points.length;\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = base;\n\t    \t\t\tvar b = base + points.length;\n\t    \t\t\tvar c = base + points.length + 1;\n\t    \t\t\tvar d = base + 1;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \t// generate normals\n\t\n\t    \tthis.computeVertexNormals();\n\t\n\t    \t// if the geometry is closed, we need to average the normals along the seam.\n\t    \t// because the corresponding vertices are identical (but still have different UVs).\n\t\n\t    \tif( phiLength === Math.PI * 2 ) {\n\t\n\t    \t\tvar normals = this.attributes.normal.array;\n\t    \t\tvar n1 = new Vector3();\n\t    \t\tvar n2 = new Vector3();\n\t    \t\tvar n = new Vector3();\n\t\n\t    \t\t// this is the buffer offset for the last line of vertices\n\t    \t\tbase = segments * points.length * 3;\n\t\n\t    \t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\t\n\t    \t\t\t// select the normal of the vertex in the first line\n\t    \t\t\tn1.x = normals[ j + 0 ];\n\t    \t\t\tn1.y = normals[ j + 1 ];\n\t    \t\t\tn1.z = normals[ j + 2 ];\n\t\n\t    \t\t\t// select the normal of the vertex in the last line\n\t    \t\t\tn2.x = normals[ base + j + 0 ];\n\t    \t\t\tn2.y = normals[ base + j + 1 ];\n\t    \t\t\tn2.z = normals[ base + j + 2 ];\n\t\n\t    \t\t\t// average normals\n\t    \t\t\tn.addVectors( n1, n2 ).normalize();\n\t\n\t    \t\t\t// assign the new values to both normals\n\t    \t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t    \t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t    \t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\t\n\t    \t\t} // next row\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\t\n\t    /**\n\t     * @author astrodud / http://astrodud.isgreat.org/\n\t     * @author zz85 / https://github.com/zz85\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    // points - to create a closed torus, one must use a set of points\n\t    //    like so: [ a, b, c, d, a ], see first is the same as last.\n\t    // segments - the number of circumference segments to create\n\t    // phiStart - the starting radian\n\t    // phiLength - the radian (0 to 2PI) range of the lathed section\n\t    //    2PI is a closed lathe, less than 2PI is a portion.\n\t\n\t    function LatheGeometry( points, segments, phiStart, phiLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'LatheGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tpoints: points,\n\t    \t\tsegments: segments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    LatheGeometry.prototype = Object.create( Geometry.prototype );\n\t    LatheGeometry.prototype.constructor = LatheGeometry;\n\t\n\t    /**\n\t     * @author jonobr1 / http://jonobr1.com\n\t     *\n\t     * Creates a one-sided polygonal geometry from a path shape. Similar to\n\t     * ExtrudeGeometry.\n\t     *\n\t     * parameters = {\n\t     *\n\t     *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n\t     *\n\t     *\tmaterial: <int> // material index for front and back faces\n\t     *\tuvGenerator: <Object> // object that provides UV generator functions\n\t     *\n\t     * }\n\t     **/\n\t\n\t    function ShapeGeometry( shapes, options ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'ShapeGeometry';\n\t\n\t    \tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\t\n\t    \tthis.addShapeList( shapes, options );\n\t\n\t    \tthis.computeFaceNormals();\n\t\n\t    }\n\t\n\t    ShapeGeometry.prototype = Object.create( Geometry.prototype );\n\t    ShapeGeometry.prototype.constructor = ShapeGeometry;\n\t\n\t    /**\n\t     * Add an array of shapes to THREE.ShapeGeometry.\n\t     */\n\t    ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\t\n\t    \tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\t\n\t    \t\tthis.addShape( shapes[ i ], options );\n\t\n\t    \t}\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n\t     */\n\t    ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\t\n\t    \tif ( options === undefined ) options = {};\n\t    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\n\t    \tvar material = options.material;\n\t    \tvar uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\t\n\t    \t//\n\t\n\t    \tvar i, l, hole;\n\t\n\t    \tvar shapesOffset = this.vertices.length;\n\t    \tvar shapePoints = shape.extractPoints( curveSegments );\n\t\n\t    \tvar vertices = shapePoints.shape;\n\t    \tvar holes = shapePoints.holes;\n\t\n\t    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\t\n\t    \tif ( reverse ) {\n\t\n\t    \t\tvertices = vertices.reverse();\n\t\n\t    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\t\n\t    \t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\t\n\t    \t\t\thole = holes[ i ];\n\t\n\t    \t\t\tif ( exports.ShapeUtils.isClockWise( hole ) ) {\n\t\n\t    \t\t\t\tholes[ i ] = hole.reverse();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treverse = false;\n\t\n\t    \t}\n\t\n\t    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\t\n\t    \t// Vertices\n\t\n\t    \tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\t\n\t    \t\thole = holes[ i ];\n\t    \t\tvertices = vertices.concat( hole );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar vert, vlen = vertices.length;\n\t    \tvar face, flen = faces.length;\n\t\n\t    \tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t    \t\tvert = vertices[ i ];\n\t\n\t    \t\tthis.vertices.push( new Vector3( vert.x, vert.y, 0 ) );\n\t\n\t    \t}\n\t\n\t    \tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\tface = faces[ i ];\n\t\n\t    \t\tvar a = face[ 0 ] + shapesOffset;\n\t    \t\tvar b = face[ 1 ] + shapesOffset;\n\t    \t\tvar c = face[ 2 ] + shapesOffset;\n\t\n\t    \t\tthis.faces.push( new Face3( a, b, c, null, null, material ) );\n\t    \t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function EdgesGeometry( geometry, thresholdAngle ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\t\n\t    \tvar thresholdDot = Math.cos( exports.Math.DEG2RAD * thresholdAngle );\n\t\n\t    \tvar edge = [ 0, 0 ], hash = {};\n\t\n\t    \tfunction sortFunction( a, b ) {\n\t\n\t    \t\treturn a - b;\n\t\n\t    \t}\n\t\n\t    \tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t    \tvar geometry2;\n\t\n\t    \tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\tgeometry2 = new Geometry();\n\t    \t\tgeometry2.fromBufferGeometry( geometry );\n\t\n\t    \t} else {\n\t\n\t    \t\tgeometry2 = geometry.clone();\n\t\n\t    \t}\n\t\n\t    \tgeometry2.mergeVertices();\n\t    \tgeometry2.computeFaceNormals();\n\t\n\t    \tvar vertices = geometry2.vertices;\n\t    \tvar faces = geometry2.faces;\n\t\n\t    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\tvar face = faces[ i ];\n\t\n\t    \t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t    \t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t    \t\t\tedge.sort( sortFunction );\n\t\n\t    \t\t\tvar key = edge.toString();\n\t\n\t    \t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t    \t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\thash[ key ].face2 = i;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar coords = [];\n\t\n\t    \tfor ( var key in hash ) {\n\t\n\t    \t\tvar h = hash[ key ];\n\t\n\t    \t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\t\n\t    \t\t\tvar vertex = vertices[ h.vert1 ];\n\t    \t\t\tcoords.push( vertex.x );\n\t    \t\t\tcoords.push( vertex.y );\n\t    \t\t\tcoords.push( vertex.z );\n\t\n\t    \t\t\tvertex = vertices[ h.vert2 ];\n\t    \t\t\tcoords.push( vertex.x );\n\t    \t\t\tcoords.push( vertex.y );\n\t    \t\t\tcoords.push( vertex.z );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );\n\t\n\t    }\n\t\n\t    EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    EdgesGeometry.prototype.constructor = EdgesGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'CylinderBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradiusTop: radiusTop,\n\t    \t\tradiusBottom: radiusBottom,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\topenEnded: openEnded,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tvar scope = this;\n\t\n\t    \tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\t    \tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\t    \theight = height !== undefined ? height : 100;\n\t\n\t    \tradialSegments = Math.floor( radialSegments ) || 8;\n\t    \theightSegments = Math.floor( heightSegments ) || 1;\n\t\n\t    \topenEnded = openEnded !== undefined ? openEnded : false;\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\t\n\t    \t// used to calculate buffer length\n\t\n\t    \tvar nbCap = 0;\n\t\n\t    \tif ( openEnded === false ) {\n\t\n\t    \t\tif ( radiusTop > 0 ) nbCap ++;\n\t    \t\tif ( radiusBottom > 0 ) nbCap ++;\n\t\n\t    \t}\n\t\n\t    \tvar vertexCount = calculateVertexCount();\n\t    \tvar indexCount = calculateIndexCount();\n\t\n\t    \t// buffers\n\t\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// helper variables\n\t\n\t    \tvar index = 0,\n\t    \t    indexOffset = 0,\n\t    \t    indexArray = [],\n\t    \t    halfHeight = height / 2;\n\t\n\t    \t// group variables\n\t    \tvar groupStart = 0;\n\t\n\t    \t// generate geometry\n\t\n\t    \tgenerateTorso();\n\t\n\t    \tif ( openEnded === false ) {\n\t\n\t    \t\tif ( radiusTop > 0 ) generateCap( true );\n\t    \t\tif ( radiusBottom > 0 ) generateCap( false );\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \t// helper functions\n\t\n\t    \tfunction calculateVertexCount() {\n\t\n\t    \t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\t\n\t    \t\tif ( openEnded === false ) {\n\t\n\t    \t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn count;\n\t\n\t    \t}\n\t\n\t    \tfunction calculateIndexCount() {\n\t\n\t    \t\tvar count = radialSegments * heightSegments * 2 * 3;\n\t\n\t    \t\tif ( openEnded === false ) {\n\t\n\t    \t\t\tcount += radialSegments * nbCap * 3;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn count;\n\t\n\t    \t}\n\t\n\t    \tfunction generateTorso() {\n\t\n\t    \t\tvar x, y;\n\t    \t\tvar normal = new Vector3();\n\t    \t\tvar vertex = new Vector3();\n\t\n\t    \t\tvar groupCount = 0;\n\t\n\t    \t\t// this will be used to calculate the normal\n\t    \t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\t\n\t    \t\t// generate vertices, normals and uvs\n\t\n\t    \t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\t\n\t    \t\t\tvar indexRow = [];\n\t\n\t    \t\t\tvar v = y / heightSegments;\n\t\n\t    \t\t\t// calculate the radius of the current row\n\t    \t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\t\n\t    \t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\t\n\t    \t\t\t\tvar u = x / radialSegments;\n\t\n\t    \t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\n\t    \t\t\t\tvar sinTheta = Math.sin( theta );\n\t    \t\t\t\tvar cosTheta = Math.cos( theta );\n\t\n\t    \t\t\t\t// vertex\n\t    \t\t\t\tvertex.x = radius * sinTheta;\n\t    \t\t\t\tvertex.y = - v * height + halfHeight;\n\t    \t\t\t\tvertex.z = radius * cosTheta;\n\t    \t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t\t// normal\n\t    \t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t    \t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\n\t    \t\t\t\t// uv\n\t    \t\t\t\tuvs.setXY( index, u, 1 - v );\n\t\n\t    \t\t\t\t// save index of vertex in respective row\n\t    \t\t\t\tindexRow.push( index );\n\t\n\t    \t\t\t\t// increase index\n\t    \t\t\t\tindex ++;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// now save vertices of the row in our index array\n\t    \t\t\tindexArray.push( indexRow );\n\t\n\t    \t\t}\n\t\n\t    \t\t// generate indices\n\t\n\t    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\t\n\t    \t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\t\n\t    \t\t\t\t// we use the index array to access the correct indices\n\t    \t\t\t\tvar i1 = indexArray[ y ][ x ];\n\t    \t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n\t    \t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n\t    \t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\t\n\t    \t\t\t\t// face one\n\t    \t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\t\n\t    \t\t\t\t// face two\n\t    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\t\n\t    \t\t\t\t// update counters\n\t    \t\t\t\tgroupCount += 6;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// add a group to the geometry. this will ensure multi material support\n\t    \t\tscope.addGroup( groupStart, groupCount, 0 );\n\t\n\t    \t\t// calculate new start value for groups\n\t    \t\tgroupStart += groupCount;\n\t\n\t    \t}\n\t\n\t    \tfunction generateCap( top ) {\n\t\n\t    \t\tvar x, centerIndexStart, centerIndexEnd;\n\t\n\t    \t\tvar uv = new Vector2();\n\t    \t\tvar vertex = new Vector3();\n\t\n\t    \t\tvar groupCount = 0;\n\t\n\t    \t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t    \t\tvar sign = ( top === true ) ? 1 : - 1;\n\t\n\t    \t\t// save the index of the first center vertex\n\t    \t\tcenterIndexStart = index;\n\t\n\t    \t\t// first we generate the center vertex data of the cap.\n\t    \t\t// because the geometry needs one set of uvs per face,\n\t    \t\t// we must generate a center vertex per face/segment\n\t\n\t    \t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = 0.5;\n\t    \t\t\tuv.y = 0.5;\n\t\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t\t// save the index of the last center vertex\n\t    \t\tcenterIndexEnd = index;\n\t\n\t    \t\t// now we generate the surrounding vertices, normals and uvs\n\t\n\t    \t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\t\n\t    \t\t\tvar u = x / radialSegments;\n\t    \t\t\tvar theta = u * thetaLength + thetaStart;\n\t\n\t    \t\t\tvar cosTheta = Math.cos( theta );\n\t    \t\t\tvar sinTheta = Math.sin( theta );\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = radius * sinTheta;\n\t    \t\t\tvertex.y = halfHeight * sign;\n\t    \t\t\tvertex.z = radius * cosTheta;\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t    \t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t\t// generate indices\n\t\n\t    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\t\n\t    \t\t\tvar c = centerIndexStart + x;\n\t    \t\t\tvar i = centerIndexEnd + x;\n\t\n\t    \t\t\tif ( top === true ) {\n\t\n\t    \t\t\t\t// face top\n\t    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// face bottom\n\t    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// update counters\n\t    \t\t\tgroupCount += 3;\n\t\n\t    \t\t}\n\t\n\t    \t\t// add a group to the geometry. this will ensure multi material support\n\t    \t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\t\n\t    \t\t// calculate new start value for groups\n\t    \t\tgroupStart += groupCount;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'CylinderGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradiusTop: radiusTop,\n\t    \t\tradiusBottom: radiusBottom,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\topenEnded: openEnded,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    CylinderGeometry.prototype = Object.create( Geometry.prototype );\n\t    CylinderGeometry.prototype.constructor = CylinderGeometry;\n\t\n\t    /**\n\t     * @author abelnation / http://github.com/abelnation\n\t     */\n\t\n\t    function ConeGeometry(\n\t    \tradius, height,\n\t    \tradialSegments, heightSegments,\n\t    \topenEnded, thetaStart, thetaLength ) {\n\t\n\t    \tCylinderGeometry.call( this,\n\t    \t\t0, radius, height,\n\t    \t\tradialSegments, heightSegments,\n\t    \t\topenEnded, thetaStart, thetaLength );\n\t\n\t    \tthis.type = 'ConeGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\topenEnded: openEnded,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    }\n\t\n\t    ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\t    ConeGeometry.prototype.constructor = ConeGeometry;\n\t\n\t    /*\n\t     * @author: abelnation / http://github.com/abelnation\n\t     */\n\t\n\t    function ConeBufferGeometry(\n\t    \tradius, height,\n\t    \tradialSegments, heightSegments,\n\t    \topenEnded, thetaStart, thetaLength ) {\n\t\n\t    \tCylinderBufferGeometry.call( this,\n\t    \t\t0, radius, height,\n\t    \t\tradialSegments, heightSegments,\n\t    \t\topenEnded, thetaStart, thetaLength );\n\t\n\t    \tthis.type = 'ConeBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    }\n\t\n\t    ConeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'CircleBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tsegments: segments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tradius = radius || 50;\n\t    \tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\t\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\t\n\t    \tvar vertices = segments + 2;\n\t\n\t    \tvar positions = new Float32Array( vertices * 3 );\n\t    \tvar normals = new Float32Array( vertices * 3 );\n\t    \tvar uvs = new Float32Array( vertices * 2 );\n\t\n\t    \t// center data is already zero, but need to set a few extras\n\t    \tnormals[ 2 ] = 1.0;\n\t    \tuvs[ 0 ] = 0.5;\n\t    \tuvs[ 1 ] = 0.5;\n\t\n\t    \tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\t\n\t    \t\tvar segment = thetaStart + s / segments * thetaLength;\n\t\n\t    \t\tpositions[ i ] = radius * Math.cos( segment );\n\t    \t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\t\n\t    \t\tnormals[ i + 2 ] = 1; // normal z\n\t\n\t    \t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n\t    \t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\t\n\t    \t}\n\t\n\t    \tvar indices = [];\n\t\n\t    \tfor ( var i = 1; i <= segments; i ++ ) {\n\t\n\t    \t\tindices.push( i, i + 1, 0 );\n\t\n\t    \t}\n\t\n\t    \tthis.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t    }\n\t\n\t    CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\t\n\t    /**\n\t     * @author hughes\n\t     */\n\t\n\t    function CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'CircleGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tsegments: segments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\n\t    }\n\t\n\t    CircleGeometry.prototype = Object.create( Geometry.prototype );\n\t    CircleGeometry.prototype.constructor = CircleGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n\t     */\n\t\n\t    function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'BoxGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\tdepth: depth,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tdepthSegments: depthSegments\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    BoxGeometry.prototype = Object.create( Geometry.prototype );\n\t    BoxGeometry.prototype.constructor = BoxGeometry;\n\t\n\t\n\t\n\t    var Geometries = Object.freeze({\n\t    \tWireframeGeometry: WireframeGeometry,\n\t    \tParametricGeometry: ParametricGeometry,\n\t    \tTetrahedronGeometry: TetrahedronGeometry,\n\t    \tOctahedronGeometry: OctahedronGeometry,\n\t    \tIcosahedronGeometry: IcosahedronGeometry,\n\t    \tDodecahedronGeometry: DodecahedronGeometry,\n\t    \tPolyhedronGeometry: PolyhedronGeometry,\n\t    \tTubeGeometry: TubeGeometry,\n\t    \tTorusKnotGeometry: TorusKnotGeometry,\n\t    \tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t    \tTorusGeometry: TorusGeometry,\n\t    \tTorusBufferGeometry: TorusBufferGeometry,\n\t    \tTextGeometry: TextGeometry,\n\t    \tSphereBufferGeometry: SphereBufferGeometry,\n\t    \tSphereGeometry: SphereGeometry,\n\t    \tRingGeometry: RingGeometry,\n\t    \tRingBufferGeometry: RingBufferGeometry,\n\t    \tPlaneBufferGeometry: PlaneBufferGeometry,\n\t    \tPlaneGeometry: PlaneGeometry,\n\t    \tLatheGeometry: LatheGeometry,\n\t    \tLatheBufferGeometry: LatheBufferGeometry,\n\t    \tShapeGeometry: ShapeGeometry,\n\t    \tExtrudeGeometry: ExtrudeGeometry,\n\t    \tEdgesGeometry: EdgesGeometry,\n\t    \tConeGeometry: ConeGeometry,\n\t    \tConeBufferGeometry: ConeBufferGeometry,\n\t    \tCylinderGeometry: CylinderGeometry,\n\t    \tCylinderBufferGeometry: CylinderBufferGeometry,\n\t    \tCircleBufferGeometry: CircleBufferGeometry,\n\t    \tCircleGeometry: CircleGeometry,\n\t    \tBoxBufferGeometry: BoxBufferGeometry,\n\t    \tBoxGeometry: BoxGeometry\n\t    });\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function ShadowMaterial() {\n\t\n\t    \tShaderMaterial.call( this, {\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t    \t\t\tUniformsLib[ \"lights\" ],\n\t    \t\t\t{\n\t    \t\t\t\topacity: { value: 1.0 }\n\t    \t\t\t}\n\t    \t\t] ),\n\t    \t\tvertexShader: ShaderChunk[ 'shadow_vert' ],\n\t    \t\tfragmentShader: ShaderChunk[ 'shadow_frag' ]\n\t    \t} );\n\t\n\t    \tthis.lights = true;\n\t    \tthis.transparent = true;\n\t\n\t    \tObject.defineProperties( this, {\n\t    \t\topacity: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tget: function () {\n\t    \t\t\t\treturn this.uniforms.opacity.value;\n\t    \t\t\t},\n\t    \t\t\tset: function ( value ) {\n\t    \t\t\t\tthis.uniforms.opacity.value = value;\n\t    \t\t\t}\n\t    \t\t}\n\t    \t} );\n\t\n\t    }\n\t\n\t    ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\t    ShadowMaterial.prototype.constructor = ShadowMaterial;\n\t\n\t    ShadowMaterial.prototype.isShadowMaterial = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function RawShaderMaterial( parameters ) {\n\t\n\t    \tShaderMaterial.call( this, parameters );\n\t\n\t    \tthis.type = 'RawShaderMaterial';\n\t\n\t    }\n\t\n\t    RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\t    RawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\t\n\t    RawShaderMaterial.prototype.isRawShaderMaterial = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function MultiMaterial( materials ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.type = 'MultiMaterial';\n\t\n\t    \tthis.materials = materials instanceof Array ? materials : [];\n\t\n\t    \tthis.visible = true;\n\t\n\t    }\n\t\n\t    MultiMaterial.prototype = {\n\t\n\t    \tconstructor: MultiMaterial,\n\t\n\t    \tisMultiMaterial: true,\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar output = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.2,\n\t    \t\t\t\ttype: 'material',\n\t    \t\t\t\tgenerator: 'MaterialExporter'\n\t    \t\t\t},\n\t    \t\t\tuuid: this.uuid,\n\t    \t\t\ttype: this.type,\n\t    \t\t\tmaterials: []\n\t    \t\t};\n\t\n\t    \t\tvar materials = this.materials;\n\t\n\t    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar material = materials[ i ].toJSON( meta );\n\t    \t\t\tdelete material.metadata;\n\t\n\t    \t\t\toutput.materials.push( material );\n\t\n\t    \t\t}\n\t\n\t    \t\toutput.visible = this.visible;\n\t\n\t    \t\treturn output;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\tvar material = new this.constructor();\n\t\n\t    \t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\t\n\t    \t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tmaterial.visible = this.visible;\n\t\n\t    \t\treturn material;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  roughness: <float>,\n\t     *  metalness: <float>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  lightMap: new THREE.Texture( <Image> ),\n\t     *  lightMapIntensity: <float>\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  emissive: <hex>,\n\t     *  emissiveIntensity: <float>\n\t     *  emissiveMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  bumpMap: new THREE.Texture( <Image> ),\n\t     *  bumpScale: <float>,\n\t     *\n\t     *  normalMap: new THREE.Texture( <Image> ),\n\t     *  normalScale: <Vector2>,\n\t     *\n\t     *  displacementMap: new THREE.Texture( <Image> ),\n\t     *  displacementScale: <float>,\n\t     *  displacementBias: <float>,\n\t     *\n\t     *  roughnessMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  metalnessMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t     *  envMapIntensity: <float>\n\t     *\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshStandardMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.defines = { 'STANDARD': '' };\n\t\n\t    \tthis.type = 'MeshStandardMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // diffuse\n\t    \tthis.roughness = 0.5;\n\t    \tthis.metalness = 0.5;\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.lightMap = null;\n\t    \tthis.lightMapIntensity = 1.0;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.emissive = new Color( 0x000000 );\n\t    \tthis.emissiveIntensity = 1.0;\n\t    \tthis.emissiveMap = null;\n\t\n\t    \tthis.bumpMap = null;\n\t    \tthis.bumpScale = 1;\n\t\n\t    \tthis.normalMap = null;\n\t    \tthis.normalScale = new Vector2( 1, 1 );\n\t\n\t    \tthis.displacementMap = null;\n\t    \tthis.displacementScale = 1;\n\t    \tthis.displacementBias = 0;\n\t\n\t    \tthis.roughnessMap = null;\n\t\n\t    \tthis.metalnessMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.envMapIntensity = 1.0;\n\t\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t    \tthis.morphNormals = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshStandardMaterial.prototype = Object.create( Material.prototype );\n\t    MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\t\n\t    MeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\t\n\t    MeshStandardMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.defines = { 'STANDARD': '' };\n\t\n\t    \tthis.color.copy( source.color );\n\t    \tthis.roughness = source.roughness;\n\t    \tthis.metalness = source.metalness;\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.lightMap = source.lightMap;\n\t    \tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.emissive.copy( source.emissive );\n\t    \tthis.emissiveMap = source.emissiveMap;\n\t    \tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t    \tthis.bumpMap = source.bumpMap;\n\t    \tthis.bumpScale = source.bumpScale;\n\t\n\t    \tthis.normalMap = source.normalMap;\n\t    \tthis.normalScale.copy( source.normalScale );\n\t\n\t    \tthis.displacementMap = source.displacementMap;\n\t    \tthis.displacementScale = source.displacementScale;\n\t    \tthis.displacementBias = source.displacementBias;\n\t\n\t    \tthis.roughnessMap = source.roughnessMap;\n\t\n\t    \tthis.metalnessMap = source.metalnessMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.envMapIntensity = source.envMapIntensity;\n\t\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * parameters = {\n\t     *  reflectivity: <float>\n\t     * }\n\t     */\n\t\n\t    function MeshPhysicalMaterial( parameters ) {\n\t\n\t    \tMeshStandardMaterial.call( this );\n\t\n\t    \tthis.defines = { 'PHYSICAL': '' };\n\t\n\t    \tthis.type = 'MeshPhysicalMaterial';\n\t\n\t    \tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\t\n\t    \tthis.clearCoat = 0.0;\n\t    \tthis.clearCoatRoughness = 0.0;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\t    MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\t\n\t    MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\t\n\t    MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMeshStandardMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.defines = { 'PHYSICAL': '' };\n\t\n\t    \tthis.reflectivity = source.reflectivity;\n\t\n\t    \tthis.clearCoat = source.clearCoat;\n\t    \tthis.clearCoatRoughness = source.clearCoatRoughness;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  specular: <hex>,\n\t     *  shininess: <float>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  lightMap: new THREE.Texture( <Image> ),\n\t     *  lightMapIntensity: <float>\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  emissive: <hex>,\n\t     *  emissiveIntensity: <float>\n\t     *  emissiveMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  bumpMap: new THREE.Texture( <Image> ),\n\t     *  bumpScale: <float>,\n\t     *\n\t     *  normalMap: new THREE.Texture( <Image> ),\n\t     *  normalScale: <Vector2>,\n\t     *\n\t     *  displacementMap: new THREE.Texture( <Image> ),\n\t     *  displacementScale: <float>,\n\t     *  displacementBias: <float>,\n\t     *\n\t     *  specularMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t     *  combine: THREE.Multiply,\n\t     *  reflectivity: <float>,\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshPhongMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshPhongMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // diffuse\n\t    \tthis.specular = new Color( 0x111111 );\n\t    \tthis.shininess = 30;\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.lightMap = null;\n\t    \tthis.lightMapIntensity = 1.0;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.emissive = new Color( 0x000000 );\n\t    \tthis.emissiveIntensity = 1.0;\n\t    \tthis.emissiveMap = null;\n\t\n\t    \tthis.bumpMap = null;\n\t    \tthis.bumpScale = 1;\n\t\n\t    \tthis.normalMap = null;\n\t    \tthis.normalScale = new Vector2( 1, 1 );\n\t\n\t    \tthis.displacementMap = null;\n\t    \tthis.displacementScale = 1;\n\t    \tthis.displacementBias = 0;\n\t\n\t    \tthis.specularMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.combine = MultiplyOperation;\n\t    \tthis.reflectivity = 1;\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t    \tthis.morphNormals = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshPhongMaterial.prototype = Object.create( Material.prototype );\n\t    MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\t\n\t    MeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\t\n\t    MeshPhongMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t    \tthis.specular.copy( source.specular );\n\t    \tthis.shininess = source.shininess;\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.lightMap = source.lightMap;\n\t    \tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.emissive.copy( source.emissive );\n\t    \tthis.emissiveMap = source.emissiveMap;\n\t    \tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t    \tthis.bumpMap = source.bumpMap;\n\t    \tthis.bumpScale = source.bumpScale;\n\t\n\t    \tthis.normalMap = source.normalMap;\n\t    \tthis.normalScale.copy( source.normalScale );\n\t\n\t    \tthis.displacementMap = source.displacementMap;\n\t    \tthis.displacementScale = source.displacementScale;\n\t    \tthis.displacementBias = source.displacementBias;\n\t\n\t    \tthis.specularMap = source.specularMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.combine = source.combine;\n\t    \tthis.reflectivity = source.reflectivity;\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     *\n\t     * parameters = {\n\t     *  opacity: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>\n\t     * }\n\t     */\n\t\n\t    function MeshNormalMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this, parameters );\n\t\n\t    \tthis.type = 'MeshNormalMaterial';\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t\n\t    \tthis.fog = false;\n\t    \tthis.lights = false;\n\t    \tthis.morphTargets = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshNormalMaterial.prototype = Object.create( Material.prototype );\n\t    MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\t\n\t    MeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\t\n\t    MeshNormalMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  lightMap: new THREE.Texture( <Image> ),\n\t     *  lightMapIntensity: <float>\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  emissive: <hex>,\n\t     *  emissiveIntensity: <float>\n\t     *  emissiveMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  specularMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t     *  combine: THREE.Multiply,\n\t     *  reflectivity: <float>,\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshLambertMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshLambertMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // diffuse\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.lightMap = null;\n\t    \tthis.lightMapIntensity = 1.0;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.emissive = new Color( 0x000000 );\n\t    \tthis.emissiveIntensity = 1.0;\n\t    \tthis.emissiveMap = null;\n\t\n\t    \tthis.specularMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.combine = MultiplyOperation;\n\t    \tthis.reflectivity = 1;\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t    \tthis.morphNormals = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshLambertMaterial.prototype = Object.create( Material.prototype );\n\t    MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\t\n\t    MeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\t\n\t    MeshLambertMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.lightMap = source.lightMap;\n\t    \tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.emissive.copy( source.emissive );\n\t    \tthis.emissiveMap = source.emissiveMap;\n\t    \tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t    \tthis.specularMap = source.specularMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.combine = source.combine;\n\t    \tthis.reflectivity = source.reflectivity;\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  linewidth: <float>,\n\t     *\n\t     *  scale: <float>,\n\t     *  dashSize: <float>,\n\t     *  gapSize: <float>\n\t     * }\n\t     */\n\t\n\t    function LineDashedMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'LineDashedMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t\n\t    \tthis.linewidth = 1;\n\t\n\t    \tthis.scale = 1;\n\t    \tthis.dashSize = 3;\n\t    \tthis.gapSize = 1;\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    LineDashedMaterial.prototype = Object.create( Material.prototype );\n\t    LineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\t\n\t    LineDashedMaterial.prototype.isLineDashedMaterial = true;\n\t\n\t    LineDashedMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.linewidth = source.linewidth;\n\t\n\t    \tthis.scale = source.scale;\n\t    \tthis.dashSize = source.dashSize;\n\t    \tthis.gapSize = source.gapSize;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t\n\t\n\t    var Materials = Object.freeze({\n\t    \tShadowMaterial: ShadowMaterial,\n\t    \tSpriteMaterial: SpriteMaterial,\n\t    \tRawShaderMaterial: RawShaderMaterial,\n\t    \tShaderMaterial: ShaderMaterial,\n\t    \tPointsMaterial: PointsMaterial,\n\t    \tMultiMaterial: MultiMaterial,\n\t    \tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t    \tMeshStandardMaterial: MeshStandardMaterial,\n\t    \tMeshPhongMaterial: MeshPhongMaterial,\n\t    \tMeshNormalMaterial: MeshNormalMaterial,\n\t    \tMeshLambertMaterial: MeshLambertMaterial,\n\t    \tMeshDepthMaterial: MeshDepthMaterial,\n\t    \tMeshBasicMaterial: MeshBasicMaterial,\n\t    \tLineDashedMaterial: LineDashedMaterial,\n\t    \tLineBasicMaterial: LineBasicMaterial,\n\t    \tMaterial: Material\n\t    });\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    exports.Cache = {\n\t\n\t    \tenabled: false,\n\t\n\t    \tfiles: {},\n\t\n\t    \tadd: function ( key, file ) {\n\t\n\t    \t\tif ( this.enabled === false ) return;\n\t\n\t    \t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\t\n\t    \t\tthis.files[ key ] = file;\n\t\n\t    \t},\n\t\n\t    \tget: function ( key ) {\n\t\n\t    \t\tif ( this.enabled === false ) return;\n\t\n\t    \t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\t\n\t    \t\treturn this.files[ key ];\n\t\n\t    \t},\n\t\n\t    \tremove: function ( key ) {\n\t\n\t    \t\tdelete this.files[ key ];\n\t\n\t    \t},\n\t\n\t    \tclear: function () {\n\t\n\t    \t\tthis.files = {};\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LoadingManager( onLoad, onProgress, onError ) {\n\t\n\t    \tvar scope = this;\n\t\n\t    \tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\t\n\t    \tthis.onStart = undefined;\n\t    \tthis.onLoad = onLoad;\n\t    \tthis.onProgress = onProgress;\n\t    \tthis.onError = onError;\n\t\n\t    \tthis.itemStart = function ( url ) {\n\t\n\t    \t\titemsTotal ++;\n\t\n\t    \t\tif ( isLoading === false ) {\n\t\n\t    \t\t\tif ( scope.onStart !== undefined ) {\n\t\n\t    \t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tisLoading = true;\n\t\n\t    \t};\n\t\n\t    \tthis.itemEnd = function ( url ) {\n\t\n\t    \t\titemsLoaded ++;\n\t\n\t    \t\tif ( scope.onProgress !== undefined ) {\n\t\n\t    \t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( itemsLoaded === itemsTotal ) {\n\t\n\t    \t\t\tisLoading = false;\n\t\n\t    \t\t\tif ( scope.onLoad !== undefined ) {\n\t\n\t    \t\t\t\tscope.onLoad();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tthis.itemError = function ( url ) {\n\t\n\t    \t\tif ( scope.onError !== undefined ) {\n\t\n\t    \t\t\tscope.onError( url );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    exports.DefaultLoadingManager = new LoadingManager();\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function XHRLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( XHRLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tif ( this.path !== undefined ) url = this.path + url;\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar cached = exports.Cache.get( url );\n\t\n\t    \t\tif ( cached !== undefined ) {\n\t\n\t    \t\t\tscope.manager.itemStart( url );\n\t\n\t    \t\t\tsetTimeout( function () {\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( cached );\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t}, 0 );\n\t\n\t    \t\t\treturn cached;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar request = new XMLHttpRequest();\n\t    \t\trequest.open( 'GET', url, true );\n\t\n\t    \t\trequest.addEventListener( 'load', function ( event ) {\n\t\n\t    \t\t\tvar response = event.target.response;\n\t\n\t    \t\t\texports.Cache.add( url, response );\n\t\n\t    \t\t\tif ( this.status === 200 ) {\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( response );\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t} else if ( this.status === 0 ) {\n\t\n\t    \t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t    \t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( response );\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( onError ) onError( event );\n\t\n\t    \t\t\t\tscope.manager.itemError( url );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}, false );\n\t\n\t    \t\tif ( onProgress !== undefined ) {\n\t\n\t    \t\t\trequest.addEventListener( 'progress', function ( event ) {\n\t\n\t    \t\t\t\tonProgress( event );\n\t\n\t    \t\t\t}, false );\n\t\n\t    \t\t}\n\t\n\t    \t\trequest.addEventListener( 'error', function ( event ) {\n\t\n\t    \t\t\tif ( onError ) onError( event );\n\t\n\t    \t\t\tscope.manager.itemError( url );\n\t\n\t    \t\t}, false );\n\t\n\t    \t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t    \t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\t\n\t    \t\tif ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );\n\t\n\t    \t\trequest.send( null );\n\t\n\t    \t\tscope.manager.itemStart( url );\n\t\n\t    \t\treturn request;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetResponseType: function ( value ) {\n\t\n\t    \t\tthis.responseType = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetWithCredentials: function ( value ) {\n\t\n\t    \t\tthis.withCredentials = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     *\n\t     * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t     */\n\t\n\t    function CompressedTextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    \t// override in sub classes\n\t    \tthis._parser = null;\n\t\n\t    }\n\t\n\t    Object.assign( CompressedTextureLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar images = [];\n\t\n\t    \t\tvar texture = new CompressedTexture();\n\t    \t\ttexture.image = images;\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setPath( this.path );\n\t    \t\tloader.setResponseType( 'arraybuffer' );\n\t\n\t    \t\tfunction loadTexture( i ) {\n\t\n\t    \t\t\tloader.load( url[ i ], function ( buffer ) {\n\t\n\t    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\t\n\t    \t\t\t\timages[ i ] = {\n\t    \t\t\t\t\twidth: texDatas.width,\n\t    \t\t\t\t\theight: texDatas.height,\n\t    \t\t\t\t\tformat: texDatas.format,\n\t    \t\t\t\t\tmipmaps: texDatas.mipmaps\n\t    \t\t\t\t};\n\t\n\t    \t\t\t\tloaded += 1;\n\t\n\t    \t\t\t\tif ( loaded === 6 ) {\n\t\n\t    \t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t    \t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t    \t\t\t\t\ttexture.format = texDatas.format;\n\t    \t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}, onProgress, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( Array.isArray( url ) ) {\n\t\n\t    \t\t\tvar loaded = 0;\n\t\n\t    \t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\t\n\t    \t\t\t\tloadTexture( i );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// compressed cubemap texture stored in a single DDS file\n\t\n\t    \t\t\tloader.load( url, function ( buffer ) {\n\t\n\t    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\t\n\t    \t\t\t\tif ( texDatas.isCubemap ) {\n\t\n\t    \t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\t\n\t    \t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\t\n\t    \t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\t\n\t    \t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t    \t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t    \t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t    \t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\ttexture.image.width = texDatas.width;\n\t    \t\t\t\t\ttexture.image.height = texDatas.height;\n\t    \t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\t\n\t    \t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture.format = texDatas.format;\n\t    \t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t    \t\t\t}, onProgress, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author Nikos M. / https://github.com/foo123/\n\t     *\n\t     * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t     */\n\t\n\t    var DataTextureLoader = BinaryTextureLoader;\n\t    function BinaryTextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    \t// override in sub classes\n\t    \tthis._parser = null;\n\t\n\t    }\n\t\n\t    Object.assign( BinaryTextureLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar texture = new DataTexture();\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setResponseType( 'arraybuffer' );\n\t\n\t    \t\tloader.load( url, function ( buffer ) {\n\t\n\t    \t\t\tvar texData = scope._parser( buffer );\n\t\n\t    \t\t\tif ( ! texData ) return;\n\t\n\t    \t\t\tif ( undefined !== texData.image ) {\n\t\n\t    \t\t\t\ttexture.image = texData.image;\n\t\n\t    \t\t\t} else if ( undefined !== texData.data ) {\n\t\n\t    \t\t\t\ttexture.image.width = texData.width;\n\t    \t\t\t\ttexture.image.height = texData.height;\n\t    \t\t\t\ttexture.image.data = texData.data;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n\t    \t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\t\n\t    \t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n\t    \t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\t\n\t    \t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\t\n\t    \t\t\tif ( undefined !== texData.format ) {\n\t\n\t    \t\t\t\ttexture.format = texData.format;\n\t\n\t    \t\t\t}\n\t    \t\t\tif ( undefined !== texData.type ) {\n\t\n\t    \t\t\t\ttexture.type = texData.type;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( undefined !== texData.mipmaps ) {\n\t\n\t    \t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( 1 === texData.mipmapCount ) {\n\t\n\t    \t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\tif ( onLoad ) onLoad( texture, texData );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t\n\t    \t\treturn texture;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function ImageLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( ImageLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\t    \t\timage.onload = function () {\n\t\n\t    \t\t\timage.onload = null;\n\t\n\t    \t\t\tURL.revokeObjectURL( image.src );\n\t\n\t    \t\t\tif ( onLoad ) onLoad( image );\n\t\n\t    \t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t};\n\t\n\t    \t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\t\n\t    \t\t\timage.src = url;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar loader = new XHRLoader();\n\t    \t\t\tloader.setPath( this.path );\n\t    \t\t\tloader.setResponseType( 'blob' );\n\t    \t\t\tloader.setWithCredentials( this.withCredentials );\n\t    \t\t\tloader.load( url, function ( blob ) {\n\t\n\t    \t\t\t\timage.src = URL.createObjectURL( blob );\n\t\n\t    \t\t\t}, onProgress, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\tscope.manager.itemStart( url );\n\t\n\t    \t\treturn image;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetWithCredentials: function ( value ) {\n\t\n\t    \t\tthis.withCredentials = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CubeTextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( CubeTextureLoader.prototype, {\n\t\n\t    \tload: function ( urls, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar texture = new CubeTexture();\n\t\n\t    \t\tvar loader = new ImageLoader( this.manager );\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t    \t\tloader.setPath( this.path );\n\t\n\t    \t\tvar loaded = 0;\n\t\n\t    \t\tfunction loadTexture( i ) {\n\t\n\t    \t\t\tloader.load( urls[ i ], function ( image ) {\n\t\n\t    \t\t\t\ttexture.images[ i ] = image;\n\t\n\t    \t\t\t\tloaded ++;\n\t\n\t    \t\t\t\tif ( loaded === 6 ) {\n\t\n\t    \t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}, undefined, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\t\n\t    \t\t\tloadTexture( i );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function TextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( TextureLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar texture = new Texture();\n\t\n\t    \t\tvar loader = new ImageLoader( this.manager );\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t    \t\tloader.setWithCredentials( this.withCredentials );\n\t    \t\tloader.setPath( this.path );\n\t    \t\tloader.load( url, function ( image ) {\n\t\n\t    \t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t    \t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\t\n\t    \t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t    \t\t\ttexture.image = image;\n\t    \t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\tif ( onLoad !== undefined ) {\n\t\n\t    \t\t\t\tonLoad( texture );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetWithCredentials: function ( value ) {\n\t\n\t    \t\tthis.withCredentials = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Light( color, intensity ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Light';\n\t\n\t    \tthis.color = new Color( color );\n\t    \tthis.intensity = intensity !== undefined ? intensity : 1;\n\t\n\t    \tthis.receiveShadow = undefined;\n\t\n\t    }\n\t\n\t    Light.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Light,\n\t\n\t    \tisLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.color.copy( source.color );\n\t    \t\tthis.intensity = source.intensity;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.color = this.color.getHex();\n\t    \t\tdata.object.intensity = this.intensity;\n\t\n\t    \t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\t\n\t    \t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t    \t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t    \t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t    \t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\t\n\t    \t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function HemisphereLight( skyColor, groundColor, intensity ) {\n\t\n\t    \tLight.call( this, skyColor, intensity );\n\t\n\t    \tthis.type = 'HemisphereLight';\n\t\n\t    \tthis.castShadow = undefined;\n\t\n\t    \tthis.position.copy( Object3D.DefaultUp );\n\t    \tthis.updateMatrix();\n\t\n\t    \tthis.groundColor = new Color( groundColor );\n\t\n\t    }\n\t\n\t    HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: HemisphereLight,\n\t\n\t    \tisHemisphereLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.groundColor.copy( source.groundColor );\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LightShadow( camera ) {\n\t\n\t    \tthis.camera = camera;\n\t\n\t    \tthis.bias = 0;\n\t    \tthis.radius = 1;\n\t\n\t    \tthis.mapSize = new Vector2( 512, 512 );\n\t\n\t    \tthis.map = null;\n\t    \tthis.matrix = new Matrix4();\n\t\n\t    }\n\t\n\t    Object.assign( LightShadow.prototype, {\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.camera = source.camera.clone();\n\t\n\t    \t\tthis.bias = source.bias;\n\t    \t\tthis.radius = source.radius;\n\t\n\t    \t\tthis.mapSize.copy( source.mapSize );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\tvar object = {};\n\t\n\t    \t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t    \t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t    \t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\t\n\t    \t\tobject.camera = this.camera.toJSON( false ).object;\n\t    \t\tdelete object.camera.matrix;\n\t\n\t    \t\treturn object;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function SpotLightShadow() {\n\t\n\t    \tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\t\n\t    }\n\t\n\t    SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\t\n\t    \tconstructor: SpotLightShadow,\n\t\n\t    \tisSpotLightShadow: true,\n\t\n\t    \tupdate: function ( light ) {\n\t\n\t    \t\tvar fov = exports.Math.RAD2DEG * 2 * light.angle;\n\t    \t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t    \t\tvar far = light.distance || 500;\n\t\n\t    \t\tvar camera = this.camera;\n\t\n\t    \t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\t\n\t    \t\t\tcamera.fov = fov;\n\t    \t\t\tcamera.aspect = aspect;\n\t    \t\t\tcamera.far = far;\n\t    \t\t\tcamera.updateProjectionMatrix();\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'SpotLight';\n\t\n\t    \tthis.position.copy( Object3D.DefaultUp );\n\t    \tthis.updateMatrix();\n\t\n\t    \tthis.target = new Object3D();\n\t\n\t    \tObject.defineProperty( this, 'power', {\n\t    \t\tget: function () {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\treturn this.intensity * Math.PI;\n\t    \t\t},\n\t    \t\tset: function ( power ) {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\tthis.intensity = power / Math.PI;\n\t    \t\t}\n\t    \t} );\n\t\n\t    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t    \tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t    \tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\t\n\t    \tthis.shadow = new SpotLightShadow();\n\t\n\t    }\n\t\n\t    SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: SpotLight,\n\t\n\t    \tisSpotLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.distance = source.distance;\n\t    \t\tthis.angle = source.angle;\n\t    \t\tthis.penumbra = source.penumbra;\n\t    \t\tthis.decay = source.decay;\n\t\n\t    \t\tthis.target = source.target.clone();\n\t\n\t    \t\tthis.shadow = source.shadow.clone();\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t\n\t    function PointLight( color, intensity, distance, decay ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'PointLight';\n\t\n\t    \tObject.defineProperty( this, 'power', {\n\t    \t\tget: function () {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\treturn this.intensity * 4 * Math.PI;\n\t\n\t    \t\t},\n\t    \t\tset: function ( power ) {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\tthis.intensity = power / ( 4 * Math.PI );\n\t    \t\t}\n\t    \t} );\n\t\n\t    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\t\n\t    \tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\t\n\t    }\n\t\n\t    PointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: PointLight,\n\t\n\t    \tisPointLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.distance = source.distance;\n\t    \t\tthis.decay = source.decay;\n\t\n\t    \t\tthis.shadow = source.shadow.clone();\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function DirectionalLightShadow( light ) {\n\t\n\t    \tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\t\n\t    }\n\t\n\t    DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\t\n\t    \tconstructor: DirectionalLightShadow\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function DirectionalLight( color, intensity ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'DirectionalLight';\n\t\n\t    \tthis.position.copy( Object3D.DefaultUp );\n\t    \tthis.updateMatrix();\n\t\n\t    \tthis.target = new Object3D();\n\t\n\t    \tthis.shadow = new DirectionalLightShadow();\n\t\n\t    }\n\t\n\t    DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: DirectionalLight,\n\t\n\t    \tisDirectionalLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.target = source.target.clone();\n\t\n\t    \t\tthis.shadow = source.shadow.clone();\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function AmbientLight( color, intensity ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'AmbientLight';\n\t\n\t    \tthis.castShadow = undefined;\n\t\n\t    }\n\t\n\t    AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: AmbientLight,\n\t\n\t    \tisAmbientLight: true,\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author tschw\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     */\n\t\n\t    exports.AnimationUtils = {\n\t\n\t    \t// same as Array.prototype.slice, but also works on typed arrays\n\t    \tarraySlice: function( array, from, to ) {\n\t\n\t    \t\tif ( exports.AnimationUtils.isTypedArray( array ) ) {\n\t\n\t    \t\t\treturn new array.constructor( array.subarray( from, to ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn array.slice( from, to );\n\t\n\t    \t},\n\t\n\t    \t// converts an array to a specific type\n\t    \tconvertArray: function( array, type, forceClone ) {\n\t\n\t    \t\tif ( ! array || // let 'undefined' and 'null' pass\n\t    \t\t\t\t! forceClone && array.constructor === type ) return array;\n\t\n\t    \t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\t\n\t    \t\t\treturn new type( array ); // create typed array\n\t\n\t    \t\t}\n\t\n\t    \t\treturn Array.prototype.slice.call( array ); // create Array\n\t\n\t    \t},\n\t\n\t    \tisTypedArray: function( object ) {\n\t\n\t    \t\treturn ArrayBuffer.isView( object ) &&\n\t    \t\t\t\t! ( object instanceof DataView );\n\t\n\t    \t},\n\t\n\t    \t// returns an array by which times and values can be sorted\n\t    \tgetKeyframeOrder: function( times ) {\n\t\n\t    \t\tfunction compareTime( i, j ) {\n\t\n\t    \t\t\treturn times[ i ] - times[ j ];\n\t\n\t    \t\t}\n\t\n\t    \t\tvar n = times.length;\n\t    \t\tvar result = new Array( n );\n\t    \t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\t\n\t    \t\tresult.sort( compareTime );\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t    \tsortedArray: function( values, stride, order ) {\n\t\n\t    \t\tvar nValues = values.length;\n\t    \t\tvar result = new values.constructor( nValues );\n\t\n\t    \t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\t\n\t    \t\t\tvar srcOffset = order[ i ] * stride;\n\t\n\t    \t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\t\n\t    \t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \t// function for parsing AOS keyframe formats\n\t    \tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\t\n\t    \t\tvar i = 1, key = jsonKeys[ 0 ];\n\t\n\t    \t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\t\n\t    \t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( key === undefined ) return; // no data\n\t\n\t    \t\tvar value = key[ valuePropertyName ];\n\t    \t\tif ( value === undefined ) return; // no data\n\t\n\t    \t\tif ( Array.isArray( value ) ) {\n\t\n\t    \t\t\tdo {\n\t\n\t    \t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t    \t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\ttimes.push( key.time );\n\t    \t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t\t} while ( key !== undefined );\n\t\n\t    \t\t} else if ( value.toArray !== undefined ) {\n\t    \t\t\t// ...assume THREE.Math-ish\n\t\n\t    \t\t\tdo {\n\t\n\t    \t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t    \t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\ttimes.push( key.time );\n\t    \t\t\t\t\tvalue.toArray( values, values.length );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t\t} while ( key !== undefined );\n\t\n\t    \t\t} else {\n\t    \t\t\t// otherwise push as-is\n\t\n\t    \t\t\tdo {\n\t\n\t    \t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t    \t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\ttimes.push( key.time );\n\t    \t\t\t\t\tvalues.push( value );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t\t} while ( key !== undefined );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * Abstract base class of interpolants over parametric samples.\n\t     *\n\t     * The parameter domain is one dimensional, typically the time or a path\n\t     * along a curve defined by the data.\n\t     *\n\t     * The sample values can have any dimensionality and derived classes may\n\t     * apply special interpretations to the data.\n\t     *\n\t     * This class provides the interval seek in a Template Method, deferring\n\t     * the actual interpolation to derived classes.\n\t     *\n\t     * Time complexity is O(1) for linear access crossing at most two points\n\t     * and O(log N) for random access, where N is the number of positions.\n\t     *\n\t     * References:\n\t     *\n\t     * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function Interpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tthis.parameterPositions = parameterPositions;\n\t    \tthis._cachedIndex = 0;\n\t\n\t    \tthis.resultBuffer = resultBuffer !== undefined ?\n\t    \t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t    \tthis.sampleValues = sampleValues;\n\t    \tthis.valueSize = sampleSize;\n\t\n\t    }\n\t\n\t    Interpolant.prototype = {\n\t\n\t    \tconstructor: Interpolant,\n\t\n\t    \tevaluate: function( t ) {\n\t\n\t    \t\tvar pp = this.parameterPositions,\n\t    \t\t\ti1 = this._cachedIndex,\n\t\n\t    \t\t\tt1 = pp[   i1   ],\n\t    \t\t\tt0 = pp[ i1 - 1 ];\n\t\n\t    \t\tvalidate_interval: {\n\t\n\t    \t\t\tseek: {\n\t\n\t    \t\t\t\tvar right;\n\t\n\t    \t\t\t\tlinear_scan: {\n\t    //- See http://jsperf.com/comparison-to-undefined/3\n\t    //- slower code:\n\t    //-\n\t    //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t    \t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\t\n\t    \t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\t\n\t    \t\t\t\t\t\t\tif ( t1 === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\t\n\t    \t\t\t\t\t\t\t\t// after end\n\t\n\t    \t\t\t\t\t\t\t\ti1 = pp.length;\n\t    \t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t    \t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\t\n\t    \t\t\t\t\t\t\tt0 = t1;\n\t    \t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( t < t1 ) {\n\t\n\t    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t    \t\t\t\t\t\t\t\tbreak seek;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t// prepare binary search on the right side of the index\n\t    \t\t\t\t\t\tright = pp.length;\n\t    \t\t\t\t\t\tbreak linear_scan;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    //- slower code:\n\t    //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t    \t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\t\n\t    \t\t\t\t\t\t// looping?\n\t\n\t    \t\t\t\t\t\tvar t1global = pp[ 1 ];\n\t\n\t    \t\t\t\t\t\tif ( t < t1global ) {\n\t\n\t    \t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t    \t\t\t\t\t\t\tt0 = t1global;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t// linear reverse scan\n\t\n\t    \t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\t\n\t    \t\t\t\t\t\t\tif ( t0 === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\t// before start\n\t\n\t    \t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t    \t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\t\n\t    \t\t\t\t\t\t\tt1 = t0;\n\t    \t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( t >= t0 ) {\n\t\n\t    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t    \t\t\t\t\t\t\t\tbreak seek;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t// prepare binary search on the left side of the index\n\t    \t\t\t\t\t\tright = i1;\n\t    \t\t\t\t\t\ti1 = 0;\n\t    \t\t\t\t\t\tbreak linear_scan;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// the interval is valid\n\t\n\t    \t\t\t\t\tbreak validate_interval;\n\t\n\t    \t\t\t\t} // linear scan\n\t\n\t    \t\t\t\t// binary search\n\t\n\t    \t\t\t\twhile ( i1 < right ) {\n\t\n\t    \t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\t\n\t    \t\t\t\t\tif ( t < pp[ mid ] ) {\n\t\n\t    \t\t\t\t\t\tright = mid;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\ti1 = mid + 1;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tt1 = pp[   i1   ];\n\t    \t\t\t\tt0 = pp[ i1 - 1 ];\n\t\n\t    \t\t\t\t// check boundary cases, again\n\t\n\t    \t\t\t\tif ( t0 === undefined ) {\n\t\n\t    \t\t\t\t\tthis._cachedIndex = 0;\n\t    \t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( t1 === undefined ) {\n\t\n\t    \t\t\t\t\ti1 = pp.length;\n\t    \t\t\t\t\tthis._cachedIndex = i1;\n\t    \t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} // seek\n\t\n\t    \t\t\tthis._cachedIndex = i1;\n\t\n\t    \t\t\tthis.intervalChanged_( i1, t0, t1 );\n\t\n\t    \t\t} // validate_interval\n\t\n\t    \t\treturn this.interpolate_( i1, t0, t, t1 );\n\t\n\t    \t},\n\t\n\t    \tsettings: null, // optional, subclass-specific settings structure\n\t    \t// Note: The indirection allows central control of many interpolants.\n\t\n\t    \t// --- Protected interface\n\t\n\t    \tDefaultSettings_: {},\n\t\n\t    \tgetSettings_: function() {\n\t\n\t    \t\treturn this.settings || this.DefaultSettings_;\n\t\n\t    \t},\n\t\n\t    \tcopySampleValue_: function( index ) {\n\t\n\t    \t\t// copies a sample value to the result buffer\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t    \t\t\toffset = index * stride;\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tresult[ i ] = values[ offset + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \t// Template methods for derived classes:\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tthrow new Error( \"call to abstract method\" );\n\t    \t\t// implementations shall return this.resultBuffer\n\t\n\t    \t},\n\t\n\t    \tintervalChanged_: function( i1, t0, t1 ) {\n\t\n\t    \t\t// empty\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( Interpolant.prototype, {\n\t\n\t    \tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n\t    \t\tInterpolant.prototype.copySampleValue_,\n\t\n\t    \tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n\t    \t\tInterpolant.prototype.copySampleValue_\n\t\n\t    } );\n\t\n\t    /**\n\t     * Fast and simple cubic spline interpolant.\n\t     *\n\t     * It was derived from a Hermitian construction setting the first derivative\n\t     * at each sample position to the linear slope between neighboring positions\n\t     * over their parameter interval.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function CubicInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    \tthis._weightPrev = -0;\n\t    \tthis._offsetPrev = -0;\n\t    \tthis._weightNext = -0;\n\t    \tthis._offsetNext = -0;\n\t\n\t    }\n\t\n\t    CubicInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: CubicInterpolant,\n\t\n\t    \tDefaultSettings_: {\n\t\n\t    \t\tendingStart: \tZeroCurvatureEnding,\n\t    \t\tendingEnd:\t\tZeroCurvatureEnding\n\t\n\t    \t},\n\t\n\t    \tintervalChanged_: function( i1, t0, t1 ) {\n\t\n\t    \t\tvar pp = this.parameterPositions,\n\t    \t\t\tiPrev = i1 - 2,\n\t    \t\t\tiNext = i1 + 1,\n\t\n\t    \t\t\ttPrev = pp[ iPrev ],\n\t    \t\t\ttNext = pp[ iNext ];\n\t\n\t    \t\tif ( tPrev === undefined ) {\n\t\n\t    \t\t\tswitch ( this.getSettings_().endingStart ) {\n\t\n\t    \t\t\t\tcase ZeroSlopeEnding:\n\t\n\t    \t\t\t\t\t// f'(t0) = 0\n\t    \t\t\t\t\tiPrev = i1;\n\t    \t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase WrapAroundEnding:\n\t\n\t    \t\t\t\t\t// use the other end of the curve\n\t    \t\t\t\t\tiPrev = pp.length - 2;\n\t    \t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault: // ZeroCurvatureEnding\n\t\n\t    \t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t    \t\t\t\t\tiPrev = i1;\n\t    \t\t\t\t\ttPrev = t1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( tNext === undefined ) {\n\t\n\t    \t\t\tswitch ( this.getSettings_().endingEnd ) {\n\t\n\t    \t\t\t\tcase ZeroSlopeEnding:\n\t\n\t    \t\t\t\t\t// f'(tN) = 0\n\t    \t\t\t\t\tiNext = i1;\n\t    \t\t\t\t\ttNext = 2 * t1 - t0;\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase WrapAroundEnding:\n\t\n\t    \t\t\t\t\t// use the other end of the curve\n\t    \t\t\t\t\tiNext = 1;\n\t    \t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault: // ZeroCurvatureEnding\n\t\n\t    \t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t    \t\t\t\t\tiNext = i1 - 1;\n\t    \t\t\t\t\ttNext = t0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t    \t\t\tstride = this.valueSize;\n\t\n\t    \t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t    \t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t    \t\tthis._offsetPrev = iPrev * stride;\n\t    \t\tthis._offsetNext = iNext * stride;\n\t\n\t    \t},\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t    \t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t    \t\t\twP = this._weightPrev,\twN = this._weightNext,\n\t\n\t    \t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t    \t\t\tpp = p * p,\n\t    \t\t\tppp = pp * p;\n\t\n\t    \t\t// evaluate polynomials\n\t\n\t    \t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n\t    \t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n\t    \t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n\t    \t\tvar sN =       wN   * ppp   -           wN      * pp;\n\t\n\t    \t\t// combine data linearly\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tresult[ i ] =\n\t    \t\t\t\t\tsP * values[ oP + i ] +\n\t    \t\t\t\t\ts0 * values[ o0 + i ] +\n\t    \t\t\t\t\ts1 * values[ o1 + i ] +\n\t    \t\t\t\t\tsN * values[ oN + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author tschw\n\t     */\n\t\n\t    function LinearInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    }\n\t\n\t    LinearInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: LinearInterpolant,\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\toffset1 = i1 * stride,\n\t    \t\t\toffset0 = offset1 - stride,\n\t\n\t    \t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t    \t\t\tweight0 = 1 - weight1;\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tresult[ i ] =\n\t    \t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t    \t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * Interpolant that evaluates to the sample value at the position preceeding\n\t     * the parameter.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function DiscreteInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    }\n\t\n\t    DiscreteInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: DiscreteInterpolant,\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\treturn this.copySampleValue_( i1 - 1 );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var KeyframeTrackPrototype;\n\t\n\t    KeyframeTrackPrototype = {\n\t\n\t    \tTimeBufferType: Float32Array,\n\t    \tValueBufferType: Float32Array,\n\t\n\t    \tDefaultInterpolation: InterpolateLinear,\n\t\n\t    \tInterpolantFactoryMethodDiscrete: function( result ) {\n\t\n\t    \t\treturn new DiscreteInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tInterpolantFactoryMethodLinear: function( result ) {\n\t\n\t    \t\treturn new LinearInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tInterpolantFactoryMethodSmooth: function( result ) {\n\t\n\t    \t\treturn new CubicInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tsetInterpolation: function( interpolation ) {\n\t\n\t    \t\tvar factoryMethod;\n\t\n\t    \t\tswitch ( interpolation ) {\n\t\n\t    \t\t\tcase InterpolateDiscrete:\n\t\n\t    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase InterpolateLinear:\n\t\n\t    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase InterpolateSmooth:\n\t\n\t    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( factoryMethod === undefined ) {\n\t\n\t    \t\t\tvar message = \"unsupported interpolation for \" +\n\t    \t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\t\n\t    \t\t\tif ( this.createInterpolant === undefined ) {\n\t\n\t    \t\t\t\t// fall back to default, unless the default itself is messed up\n\t    \t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\t\n\t    \t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tconsole.warn( message );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.createInterpolant = factoryMethod;\n\t\n\t    \t},\n\t\n\t    \tgetInterpolation: function() {\n\t\n\t    \t\tswitch ( this.createInterpolant ) {\n\t\n\t    \t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\n\t    \t\t\t\treturn InterpolateDiscrete;\n\t\n\t    \t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\n\t    \t\t\t\treturn InterpolateLinear;\n\t\n\t    \t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\n\t    \t\t\t\treturn InterpolateSmooth;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetValueSize: function() {\n\t\n\t    \t\treturn this.values.length / this.times.length;\n\t\n\t    \t},\n\t\n\t    \t// move all keyframes either forwards or backwards in time\n\t    \tshift: function( timeOffset ) {\n\t\n\t    \t\tif( timeOffset !== 0.0 ) {\n\t\n\t    \t\t\tvar times = this.times;\n\t\n\t    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\ttimes[ i ] += timeOffset;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t    \tscale: function( timeScale ) {\n\t\n\t    \t\tif( timeScale !== 1.0 ) {\n\t\n\t    \t\t\tvar times = this.times;\n\t\n\t    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\ttimes[ i ] *= timeScale;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t    \t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t    \ttrim: function( startTime, endTime ) {\n\t\n\t    \t\tvar times = this.times,\n\t    \t\t\tnKeys = times.length,\n\t    \t\t\tfrom = 0,\n\t    \t\t\tto = nKeys - 1;\n\t\n\t    \t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t    \t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\t\n\t    \t\t++ to; // inclusive -> exclusive bound\n\t\n\t    \t\tif( from !== 0 || to !== nKeys ) {\n\t\n\t    \t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t    \t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\t\n\t    \t\t\tvar stride = this.getValueSize();\n\t    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, from, to );\n\t    \t\t\tthis.values = exports.AnimationUtils.\n\t    \t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t    \tvalidate: function() {\n\t\n\t    \t\tvar valid = true;\n\t\n\t    \t\tvar valueSize = this.getValueSize();\n\t    \t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\t\n\t    \t\t\tconsole.error( \"invalid value size in track\", this );\n\t    \t\t\tvalid = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar times = this.times,\n\t    \t\t\tvalues = this.values,\n\t\n\t    \t\t\tnKeys = times.length;\n\t\n\t    \t\tif( nKeys === 0 ) {\n\t\n\t    \t\t\tconsole.error( \"track is empty\", this );\n\t    \t\t\tvalid = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar prevTime = null;\n\t\n\t    \t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\t\n\t    \t\t\tvar currTime = times[ i ];\n\t\n\t    \t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\t\n\t    \t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n\t    \t\t\t\tvalid = false;\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif( prevTime !== null && prevTime > currTime ) {\n\t\n\t    \t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n\t    \t\t\t\tvalid = false;\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tprevTime = currTime;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( values !== undefined ) {\n\t\n\t    \t\t\tif ( exports.AnimationUtils.isTypedArray( values ) ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tvar value = values[ i ];\n\t\n\t    \t\t\t\t\tif ( isNaN( value ) ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n\t    \t\t\t\t\t\tvalid = false;\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn valid;\n\t\n\t    \t},\n\t\n\t    \t// removes equivalent sequential keys as common in morph target sequences\n\t    \t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t    \toptimize: function() {\n\t\n\t    \t\tvar times = this.times,\n\t    \t\t\tvalues = this.values,\n\t    \t\t\tstride = this.getValueSize(),\n\t\n\t    \t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\n\t    \t\t\twriteIndex = 1,\n\t    \t\t\tlastIndex = times.length - 1;\n\t\n\t    \t\tfor( var i = 1; i < lastIndex; ++ i ) {\n\t\n\t    \t\t\tvar keep = false;\n\t\n\t    \t\t\tvar time = times[ i ];\n\t    \t\t\tvar timeNext = times[ i + 1 ];\n\t\n\t    \t\t\t// remove adjacent keyframes scheduled at the same time\n\t\n\t    \t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\t\n\t    \t\t\t\tif ( ! smoothInterpolation ) {\n\t\n\t    \t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\n\t    \t\t\t\t\tvar offset = i * stride,\n\t    \t\t\t\t\t\toffsetP = offset - stride,\n\t    \t\t\t\t\t\toffsetN = offset + stride;\n\t\n\t    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\t\n\t    \t\t\t\t\t\tvar value = values[ offset + j ];\n\t\n\t    \t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t    \t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\t\n\t    \t\t\t\t\t\t\tkeep = true;\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else keep = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// in-place compaction\n\t\n\t    \t\t\tif ( keep ) {\n\t\n\t    \t\t\t\tif ( i !== writeIndex ) {\n\t\n\t    \t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\t\n\t    \t\t\t\t\tvar readOffset = i * stride,\n\t    \t\t\t\t\t\twriteOffset = writeIndex * stride;\n\t\n\t    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j )\n\t\n\t    \t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t++ writeIndex;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// flush last keyframe (compaction looks ahead)\n\t\n\t    \t\tif ( lastIndex > 0 ) {\n\t\n\t    \t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\t\n\t    \t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )\n\t\n\t    \t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\t\n\t    \t\t\t++ writeIndex;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( writeIndex !== times.length ) {\n\t\n\t    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, 0, writeIndex );\n\t    \t\t\tthis.values = exports.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    function KeyframeTrackConstructor( name, times, values, interpolation ) {\n\t\n\t    \tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\t\n\t    \tif( times === undefined || times.length === 0 ) {\n\t\n\t    \t\tthrow new Error( \"no keyframes in track named \" + name );\n\t\n\t    \t}\n\t\n\t    \tthis.name = name;\n\t\n\t    \tthis.times = exports.AnimationUtils.convertArray( times, this.TimeBufferType );\n\t    \tthis.values = exports.AnimationUtils.convertArray( values, this.ValueBufferType );\n\t\n\t    \tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\t\n\t    \tthis.validate();\n\t    \tthis.optimize();\n\t\n\t    }\n\t\n\t    /**\n\t     *\n\t     * A Track of vectored keyframe values.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function VectorKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    VectorKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: VectorKeyframeTrack,\n\t\n\t    \tValueTypeName: 'vector'\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \t// DefaultInterpolation is inherited\n\t\n\t    } );\n\t\n\t    /**\n\t     * Spherical linear unit quaternion interpolant.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function QuaternionLinearInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    }\n\t\n\t    QuaternionLinearInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: QuaternionLinearInterpolant,\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\toffset = i1 * stride,\n\t\n\t    \t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\t\n\t    \t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\t\n\t    \t\t\tQuaternion.slerpFlat( result, 0,\n\t    \t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of quaternion keyframe values.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    QuaternionKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: QuaternionKeyframeTrack,\n\t\n\t    \tValueTypeName: 'quaternion',\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \tDefaultInterpolation: InterpolateLinear,\n\t\n\t    \tInterpolantFactoryMethodLinear: function( result ) {\n\t\n\t    \t\treturn new QuaternionLinearInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of numeric keyframe values.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function NumberKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    NumberKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: NumberKeyframeTrack,\n\t\n\t    \tValueTypeName: 'number',\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \t// DefaultInterpolation is inherited\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track that interpolates Strings\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function StringKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    StringKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: StringKeyframeTrack,\n\t\n\t    \tValueTypeName: 'string',\n\t    \tValueBufferType: Array,\n\t\n\t    \tDefaultInterpolation: InterpolateDiscrete,\n\t\n\t    \tInterpolantFactoryMethodLinear: undefined,\n\t\n\t    \tInterpolantFactoryMethodSmooth: undefined\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of Boolean keyframe values.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function BooleanKeyframeTrack( name, times, values ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values );\n\t\n\t    }\n\t\n\t    BooleanKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: BooleanKeyframeTrack,\n\t\n\t    \tValueTypeName: 'bool',\n\t    \tValueBufferType: Array,\n\t\n\t    \tDefaultInterpolation: InterpolateDiscrete,\n\t\n\t    \tInterpolantFactoryMethodLinear: undefined,\n\t    \tInterpolantFactoryMethodSmooth: undefined\n\t\n\t    \t// Note: Actually this track could have a optimized / compressed\n\t    \t// representation of a single value and a custom interpolant that\n\t    \t// computes \"firstValue ^ isOdd( index )\".\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of keyframe values that represent color.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function ColorKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    ColorKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: ColorKeyframeTrack,\n\t\n\t    \tValueTypeName: 'color'\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \t// DefaultInterpolation is inherited\n\t\n\t\n\t    \t// Note: Very basic implementation and nothing special yet.\n\t    \t// However, this is the place for color space parameterization.\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A timed sequence of keyframes for a specific property.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function KeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.apply( this, arguments );\n\t\n\t    }\n\t\n\t    KeyframeTrack.prototype = KeyframeTrackPrototype;\n\t    KeyframeTrackPrototype.constructor = KeyframeTrack;\n\t\n\t    // Static methods:\n\t\n\t    Object.assign( KeyframeTrack, {\n\t\n\t    \t// Serialization (in static context, because of constructor invocation\n\t    \t// and automatic invocation of .toJSON):\n\t\n\t    \tparse: function( json ) {\n\t\n\t    \t\tif( json.type === undefined ) {\n\t\n\t    \t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\t\n\t    \t\tif ( json.times === undefined ) {\n\t\n\t    \t\t\tvar times = [], values = [];\n\t\n\t    \t\t\texports.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\t\n\t    \t\t\tjson.times = times;\n\t    \t\t\tjson.values = values;\n\t\n\t    \t\t}\n\t\n\t    \t\t// derived classes can define a static parse method\n\t    \t\tif ( trackType.parse !== undefined ) {\n\t\n\t    \t\t\treturn trackType.parse( json );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// by default, we asssume a constructor compatible with the base\n\t    \t\t\treturn new trackType(\n\t    \t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function( track ) {\n\t\n\t    \t\tvar trackType = track.constructor;\n\t\n\t    \t\tvar json;\n\t\n\t    \t\t// derived classes can define a static toJSON method\n\t    \t\tif ( trackType.toJSON !== undefined ) {\n\t\n\t    \t\t\tjson = trackType.toJSON( track );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// by default, we assume the data can be serialized as-is\n\t    \t\t\tjson = {\n\t\n\t    \t\t\t\t'name': track.name,\n\t    \t\t\t\t'times': exports.AnimationUtils.convertArray( track.times, Array ),\n\t    \t\t\t\t'values': exports.AnimationUtils.convertArray( track.values, Array )\n\t\n\t    \t\t\t};\n\t\n\t    \t\t\tvar interpolation = track.getInterpolation();\n\t\n\t    \t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\t\n\t    \t\t\t\tjson.interpolation = interpolation;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tjson.type = track.ValueTypeName; // mandatory\n\t\n\t    \t\treturn json;\n\t\n\t    \t},\n\t\n\t    \t_getTrackTypeForValueTypeName: function( typeName ) {\n\t\n\t    \t\tswitch( typeName.toLowerCase() ) {\n\t\n\t    \t\t\tcase \"scalar\":\n\t    \t\t\tcase \"double\":\n\t    \t\t\tcase \"float\":\n\t    \t\t\tcase \"number\":\n\t    \t\t\tcase \"integer\":\n\t\n\t    \t\t\t\treturn NumberKeyframeTrack;\n\t\n\t    \t\t\tcase \"vector\":\n\t    \t\t\tcase \"vector2\":\n\t    \t\t\tcase \"vector3\":\n\t    \t\t\tcase \"vector4\":\n\t\n\t    \t\t\t\treturn VectorKeyframeTrack;\n\t\n\t    \t\t\tcase \"color\":\n\t\n\t    \t\t\t\treturn ColorKeyframeTrack;\n\t\n\t    \t\t\tcase \"quaternion\":\n\t\n\t    \t\t\t\treturn QuaternionKeyframeTrack;\n\t\n\t    \t\t\tcase \"bool\":\n\t    \t\t\tcase \"boolean\":\n\t\n\t    \t\t\t\treturn BooleanKeyframeTrack;\n\t\n\t    \t\t\tcase \"string\":\n\t\n\t    \t\t\t\treturn StringKeyframeTrack;\n\t\n\t    \t\t}\n\t\n\t    \t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * Reusable set of Tracks that represent an animation.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     */\n\t\n\t    function AnimationClip( name, duration, tracks ) {\n\t\n\t    \tthis.name = name;\n\t    \tthis.tracks = tracks;\n\t    \tthis.duration = ( duration !== undefined ) ? duration : -1;\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \t// this means it should figure out its duration by scanning the tracks\n\t    \tif ( this.duration < 0 ) {\n\t\n\t    \t\tthis.resetDuration();\n\t\n\t    \t}\n\t\n\t    \tthis.optimize();\n\t\n\t    }\n\t\n\t    AnimationClip.prototype = {\n\t\n\t    \tconstructor: AnimationClip,\n\t\n\t    \tresetDuration: function() {\n\t\n\t    \t\tvar tracks = this.tracks,\n\t    \t\t\tduration = 0;\n\t\n\t    \t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar track = this.tracks[ i ];\n\t\n\t    \t\t\tduration = Math.max(\n\t    \t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.duration = duration;\n\t\n\t    \t},\n\t\n\t    \ttrim: function() {\n\t\n\t    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\t\n\t    \t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \toptimize: function() {\n\t\n\t    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\t\n\t    \t\t\tthis.tracks[ i ].optimize();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    // Static methods:\n\t\n\t    Object.assign( AnimationClip, {\n\t\n\t    \tparse: function( json ) {\n\t\n\t    \t\tvar tracks = [],\n\t    \t\t\tjsonTracks = json.tracks,\n\t    \t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\t\n\t    \t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\t\n\t    \t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn new AnimationClip( json.name, json.duration, tracks );\n\t\n\t    \t},\n\t\n\t\n\t    \ttoJSON: function( clip ) {\n\t\n\t    \t\tvar tracks = [],\n\t    \t\t\tclipTracks = clip.tracks;\n\t\n\t    \t\tvar json = {\n\t\n\t    \t\t\t'name': clip.name,\n\t    \t\t\t'duration': clip.duration,\n\t    \t\t\t'tracks': tracks\n\t\n\t    \t\t};\n\t\n\t    \t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\t\n\t    \t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn json;\n\t\n\t    \t},\n\t\n\t\n\t    \tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\t\n\t    \t\tvar numMorphTargets = morphTargetSequence.length;\n\t    \t\tvar tracks = [];\n\t\n\t    \t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\t\n\t    \t\t\tvar times = [];\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\ttimes.push(\n\t    \t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t    \t\t\t\t\ti,\n\t    \t\t\t\t\t( i + 1 ) % numMorphTargets );\n\t\n\t    \t\t\tvalues.push( 0, 1, 0 );\n\t\n\t    \t\t\tvar order = exports.AnimationUtils.getKeyframeOrder( times );\n\t    \t\t\ttimes = exports.AnimationUtils.sortedArray( times, 1, order );\n\t    \t\t\tvalues = exports.AnimationUtils.sortedArray( values, 1, order );\n\t\n\t    \t\t\t// if there is a key at the first frame, duplicate it as the\n\t    \t\t\t// last frame as well for perfect loop.\n\t    \t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\t\n\t    \t\t\t\ttimes.push( numMorphTargets );\n\t    \t\t\t\tvalues.push( values[ 0 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttracks.push(\n\t    \t\t\t\t\tnew NumberKeyframeTrack(\n\t    \t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t    \t\t\t\t\t\ttimes, values\n\t    \t\t\t\t\t).scale( 1.0 / fps ) );\n\t    \t\t}\n\t\n\t    \t\treturn new AnimationClip( name, -1, tracks );\n\t\n\t    \t},\n\t\n\t    \tfindByName: function( objectOrClipArray, name ) {\n\t\n\t    \t\tvar clipArray = objectOrClipArray;\n\t\n\t    \t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\t\n\t    \t\t\tvar o = objectOrClipArray;\n\t    \t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\t\n\t    \t\t\tif ( clipArray[ i ].name === name ) {\n\t\n\t    \t\t\t\treturn clipArray[ i ];\n\t\n\t    \t\t\t}\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t},\n\t\n\t    \tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\t\n\t    \t\tvar animationToMorphTargets = {};\n\t\n\t    \t\t// tested with https://regex101.com/ on trick sequences\n\t    \t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t    \t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\t\n\t    \t\t// sort morph target names into animation groups based\n\t    \t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t    \t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar morphTarget = morphTargets[ i ];\n\t    \t\t\tvar parts = morphTarget.name.match( pattern );\n\t\n\t    \t\t\tif ( parts && parts.length > 1 ) {\n\t\n\t    \t\t\t\tvar name = parts[ 1 ];\n\t\n\t    \t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t    \t\t\t\tif ( ! animationMorphTargets ) {\n\t\n\t    \t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tanimationMorphTargets.push( morphTarget );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar clips = [];\n\t\n\t    \t\tfor ( var name in animationToMorphTargets ) {\n\t\n\t    \t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn clips;\n\t\n\t    \t},\n\t\n\t    \t// parse the animation.hierarchy format\n\t    \tparseAnimation: function( animation, bones ) {\n\t\n\t    \t\tif ( ! animation ) {\n\t\n\t    \t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar addNonemptyTrack = function(\n\t    \t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\t\n\t    \t\t\t// only return track if there are actually keys.\n\t    \t\t\tif ( animationKeys.length !== 0 ) {\n\t\n\t    \t\t\t\tvar times = [];\n\t    \t\t\t\tvar values = [];\n\t\n\t    \t\t\t\texports.AnimationUtils.flattenJSON(\n\t    \t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\t\n\t    \t\t\t\t// empty keys are filtered out, so check again\n\t    \t\t\t\tif ( times.length !== 0 ) {\n\t\n\t    \t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t\tvar tracks = [];\n\t\n\t    \t\tvar clipName = animation.name || 'default';\n\t    \t\t// automatic length determination in AnimationClip.\n\t    \t\tvar duration = animation.length || -1;\n\t    \t\tvar fps = animation.fps || 30;\n\t\n\t    \t\tvar hierarchyTracks = animation.hierarchy || [];\n\t\n\t    \t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\t\n\t    \t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\t\n\t    \t\t\t// skip empty tracks\n\t    \t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\t\n\t    \t\t\t// process morph targets in a way exactly compatible\n\t    \t\t\t// with AnimationHandler.init( animation )\n\t    \t\t\tif ( animationKeys[0].morphTargets ) {\n\t\n\t    \t\t\t\t// figure out all morph targets used in this track\n\t    \t\t\t\tvar morphTargetNames = {};\n\t    \t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\t\n\t    \t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\t\n\t    \t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\t\n\t    \t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// create a track for each morph target with all zero\n\t    \t\t\t\t// morphTargetInfluences except for the keys in which\n\t    \t\t\t\t// the morphTarget is named.\n\t    \t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\t\n\t    \t\t\t\t\tvar times = [];\n\t    \t\t\t\t\tvar values = [];\n\t\n\t    \t\t\t\t\tfor ( var m = 0;\n\t    \t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\t\n\t    \t\t\t\t\t\tvar animationKey = animationKeys[k];\n\t\n\t    \t\t\t\t\t\ttimes.push( animationKey.time );\n\t    \t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\ttracks.push( new NumberKeyframeTrack(\n\t    \t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\t\n\t    \t\t\t} else {\n\t    \t\t\t\t// ...assume skeletal animation\n\t\n\t    \t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\t\n\t    \t\t\t\taddNonemptyTrack(\n\t    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t    \t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\t\n\t    \t\t\t\taddNonemptyTrack(\n\t    \t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t    \t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\t\n\t    \t\t\t\taddNonemptyTrack(\n\t    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t    \t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( tracks.length === 0 ) {\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\t\n\t    \t\treturn clip;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function MaterialLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t    \tthis.textures = {};\n\t\n\t    }\n\t\n\t    Object.assign( MaterialLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( scope.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tsetTextures: function ( value ) {\n\t\n\t    \t\tthis.textures = value;\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json ) {\n\t\n\t    \t\tvar textures = this.textures;\n\t\n\t    \t\tfunction getTexture( name ) {\n\t\n\t    \t\t\tif ( textures[ name ] === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn textures[ name ];\n\t\n\t    \t\t}\n\t\n\t    \t\tvar material = new Materials[ json.type ]();\n\t\n\t    \t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t    \t\tif ( json.name !== undefined ) material.name = json.name;\n\t    \t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t    \t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t    \t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t    \t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t    \t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t    \t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t    \t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t    \t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t    \t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t    \t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t    \t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t    \t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t    \t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t    \t\tif ( json.side !== undefined ) material.side = json.side;\n\t    \t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t    \t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t    \t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t    \t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t    \t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t    \t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t    \t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t    \t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t    \t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t    \t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\t    \t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t    \t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\t\n\t    \t\t// for PointsMaterial\n\t\n\t    \t\tif ( json.size !== undefined ) material.size = json.size;\n\t    \t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\t\n\t    \t\t// maps\n\t\n\t    \t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\n\t    \t\tif ( json.alphaMap !== undefined ) {\n\t\n\t    \t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t    \t\t\tmaterial.transparent = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t    \t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\t\n\t    \t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t    \t\tif ( json.normalScale !== undefined ) {\n\t\n\t    \t\t\tvar normalScale = json.normalScale;\n\t\n\t    \t\t\tif ( Array.isArray( normalScale ) === false ) {\n\t\n\t    \t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\n\t    \t\t\t\tnormalScale = [ normalScale, normalScale ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t    \t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t    \t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\t\n\t    \t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t    \t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\t\n\t    \t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t    \t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\t\n\t    \t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\n\t    \t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\n\t    \t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\n\t    \t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t    \t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\t\n\t    \t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t    \t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\t\n\t    \t\t// MultiMaterial\n\t\n\t    \t\tif ( json.materials !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn material;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BufferGeometryLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( BufferGeometryLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( scope.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json ) {\n\t\n\t    \t\tvar geometry = new BufferGeometry();\n\t\n\t    \t\tvar index = json.data.index;\n\t\n\t    \t\tvar TYPED_ARRAYS = {\n\t    \t\t\t'Int8Array': Int8Array,\n\t    \t\t\t'Uint8Array': Uint8Array,\n\t    \t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n\t    \t\t\t'Int16Array': Int16Array,\n\t    \t\t\t'Uint16Array': Uint16Array,\n\t    \t\t\t'Int32Array': Int32Array,\n\t    \t\t\t'Uint32Array': Uint32Array,\n\t    \t\t\t'Float32Array': Float32Array,\n\t    \t\t\t'Float64Array': Float64Array\n\t    \t\t};\n\t\n\t    \t\tif ( index !== undefined ) {\n\t\n\t    \t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t    \t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = json.data.attributes;\n\t\n\t    \t\tfor ( var key in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ key ];\n\t    \t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\n\t    \t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\t\n\t    \t\tif ( groups !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar group = groups[ i ];\n\t\n\t    \t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar boundingSphere = json.data.boundingSphere;\n\t\n\t    \t\tif ( boundingSphere !== undefined ) {\n\t\n\t    \t\t\tvar center = new Vector3();\n\t\n\t    \t\t\tif ( boundingSphere.center !== undefined ) {\n\t\n\t    \t\t\t\tcenter.fromArray( boundingSphere.center );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Loader() {\n\t\n\t    \tthis.onLoadStart = function () {};\n\t    \tthis.onLoadProgress = function () {};\n\t    \tthis.onLoadComplete = function () {};\n\t\n\t    }\n\t\n\t    Loader.prototype = {\n\t\n\t    \tconstructor: Loader,\n\t\n\t    \tcrossOrigin: undefined,\n\t\n\t    \textractUrlBase: function ( url ) {\n\t\n\t    \t\tvar parts = url.split( '/' );\n\t\n\t    \t\tif ( parts.length === 1 ) return './';\n\t\n\t    \t\tparts.pop();\n\t\n\t    \t\treturn parts.join( '/' ) + '/';\n\t\n\t    \t},\n\t\n\t    \tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\t\n\t    \t\tvar array = [];\n\t\n\t    \t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\t\n\t    \t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tcreateMaterial: ( function () {\n\t\n\t    \t\tvar color, textureLoader, materialLoader;\n\t\n\t    \t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\t\n\t    \t\t\tif ( color === undefined ) color = new Color();\n\t    \t\t\tif ( textureLoader === undefined ) textureLoader = new TextureLoader();\n\t    \t\t\tif ( materialLoader === undefined ) materialLoader = new MaterialLoader();\n\t\n\t    \t\t\t// convert from old material format\n\t\n\t    \t\t\tvar textures = {};\n\t\n\t    \t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\t\n\t    \t\t\t\tvar fullPath = texturePath + path;\n\t    \t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\t\n\t    \t\t\t\tvar texture;\n\t\n\t    \t\t\t\tif ( loader !== null ) {\n\t\n\t    \t\t\t\t\ttexture = loader.load( fullPath );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t    \t\t\t\t\ttexture = textureLoader.load( fullPath );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( repeat !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.repeat.fromArray( repeat );\n\t\n\t    \t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t    \t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( offset !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.offset.fromArray( offset );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( wrap !== undefined ) {\n\t\n\t    \t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t    \t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\t\n\t    \t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t    \t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( anisotropy !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.anisotropy = anisotropy;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar uuid = exports.Math.generateUUID();\n\t\n\t    \t\t\t\ttextures[ uuid ] = texture;\n\t\n\t    \t\t\t\treturn uuid;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tvar json = {\n\t    \t\t\t\tuuid: exports.Math.generateUUID(),\n\t    \t\t\t\ttype: 'MeshLambertMaterial'\n\t    \t\t\t};\n\t\n\t    \t\t\tfor ( var name in m ) {\n\t\n\t    \t\t\t\tvar value = m[ name ];\n\t\n\t    \t\t\t\tswitch ( name ) {\n\t    \t\t\t\t\tcase 'DbgColor':\n\t    \t\t\t\t\tcase 'DbgIndex':\n\t    \t\t\t\t\tcase 'opticalDensity':\n\t    \t\t\t\t\tcase 'illumination':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'DbgName':\n\t    \t\t\t\t\t\tjson.name = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'blending':\n\t    \t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorAmbient':\n\t    \t\t\t\t\tcase 'mapAmbient':\n\t    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorDiffuse':\n\t    \t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorSpecular':\n\t    \t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorEmissive':\n\t    \t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'specularCoef':\n\t    \t\t\t\t\t\tjson.shininess = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'shading':\n\t    \t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t    \t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t    \t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapDiffuse':\n\t    \t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapDiffuseRepeat':\n\t    \t\t\t\t\tcase 'mapDiffuseOffset':\n\t    \t\t\t\t\tcase 'mapDiffuseWrap':\n\t    \t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapEmissive':\n\t    \t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapEmissiveRepeat':\n\t    \t\t\t\t\tcase 'mapEmissiveOffset':\n\t    \t\t\t\t\tcase 'mapEmissiveWrap':\n\t    \t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapLight':\n\t    \t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapLightRepeat':\n\t    \t\t\t\t\tcase 'mapLightOffset':\n\t    \t\t\t\t\tcase 'mapLightWrap':\n\t    \t\t\t\t\tcase 'mapLightAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAO':\n\t    \t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAORepeat':\n\t    \t\t\t\t\tcase 'mapAOOffset':\n\t    \t\t\t\t\tcase 'mapAOWrap':\n\t    \t\t\t\t\tcase 'mapAOAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapBump':\n\t    \t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapBumpScale':\n\t    \t\t\t\t\t\tjson.bumpScale = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapBumpRepeat':\n\t    \t\t\t\t\tcase 'mapBumpOffset':\n\t    \t\t\t\t\tcase 'mapBumpWrap':\n\t    \t\t\t\t\tcase 'mapBumpAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapNormal':\n\t    \t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapNormalFactor':\n\t    \t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapNormalRepeat':\n\t    \t\t\t\t\tcase 'mapNormalOffset':\n\t    \t\t\t\t\tcase 'mapNormalWrap':\n\t    \t\t\t\t\tcase 'mapNormalAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapSpecular':\n\t    \t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapSpecularRepeat':\n\t    \t\t\t\t\tcase 'mapSpecularOffset':\n\t    \t\t\t\t\tcase 'mapSpecularWrap':\n\t    \t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapMetalness':\n\t    \t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapMetalnessRepeat':\n\t    \t\t\t\t\tcase 'mapMetalnessOffset':\n\t    \t\t\t\t\tcase 'mapMetalnessWrap':\n\t    \t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapRoughness':\n\t    \t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapRoughnessRepeat':\n\t    \t\t\t\t\tcase 'mapRoughnessOffset':\n\t    \t\t\t\t\tcase 'mapRoughnessWrap':\n\t    \t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAlpha':\n\t    \t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAlphaRepeat':\n\t    \t\t\t\t\tcase 'mapAlphaOffset':\n\t    \t\t\t\t\tcase 'mapAlphaWrap':\n\t    \t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'flipSided':\n\t    \t\t\t\t\t\tjson.side = BackSide;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'doubleSided':\n\t    \t\t\t\t\t\tjson.side = DoubleSide;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'transparency':\n\t    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t    \t\t\t\t\t\tjson.opacity = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'depthTest':\n\t    \t\t\t\t\tcase 'depthWrite':\n\t    \t\t\t\t\tcase 'colorWrite':\n\t    \t\t\t\t\tcase 'opacity':\n\t    \t\t\t\t\tcase 'reflectivity':\n\t    \t\t\t\t\tcase 'transparent':\n\t    \t\t\t\t\tcase 'visible':\n\t    \t\t\t\t\tcase 'wireframe':\n\t    \t\t\t\t\t\tjson[ name ] = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'vertexColors':\n\t    \t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t    \t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tdefault:\n\t    \t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t    \t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\t\n\t    \t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\t\n\t    \t\t\tmaterialLoader.setTextures( textures );\n\t\n\t    \t\t\treturn materialLoader.parse( json );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    };\n\t\n\t    Loader.Handlers = {\n\t\n\t    \thandlers: [],\n\t\n\t    \tadd: function ( regex, loader ) {\n\t\n\t    \t\tthis.handlers.push( regex, loader );\n\t\n\t    \t},\n\t\n\t    \tget: function ( file ) {\n\t\n\t    \t\tvar handlers = this.handlers;\n\t\n\t    \t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\t\n\t    \t\t\tvar regex = handlers[ i ];\n\t    \t\t\tvar loader  = handlers[ i + 1 ];\n\t\n\t    \t\t\tif ( regex.test( file ) ) {\n\t\n\t    \t\t\t\treturn loader;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function JSONLoader( manager ) {\n\t\n\t    \tif ( typeof manager === 'boolean' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t    \t\tmanager = undefined;\n\t\n\t    \t}\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    \tthis.withCredentials = false;\n\t\n\t    }\n\t\n\t    Object.assign( JSONLoader.prototype, {\n\t\n\t    \tload: function( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setWithCredentials( this.withCredentials );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tvar json = JSON.parse( text );\n\t    \t\t\tvar metadata = json.metadata;\n\t\n\t    \t\t\tif ( metadata !== undefined ) {\n\t\n\t    \t\t\t\tvar type = metadata.type;\n\t\n\t    \t\t\t\tif ( type !== undefined ) {\n\t\n\t    \t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar object = scope.parse( json, texturePath );\n\t    \t\t\tonLoad( object.geometry, object.materials );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tsetTexturePath: function ( value ) {\n\t\n\t    \t\tthis.texturePath = value;\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json, texturePath ) {\n\t\n\t    \t\tvar geometry = new Geometry(),\n\t    \t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\t\n\t    \t\tparseModel( scale );\n\t\n\t    \t\tparseSkin();\n\t    \t\tparseMorphing( scale );\n\t    \t\tparseAnimations();\n\t\n\t    \t\tgeometry.computeFaceNormals();\n\t    \t\tgeometry.computeBoundingSphere();\n\t\n\t    \t\tfunction parseModel( scale ) {\n\t\n\t    \t\t\tfunction isBitSet( value, position ) {\n\t\n\t    \t\t\t\treturn value & ( 1 << position );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar i, j, fi,\n\t\n\t    \t\t\toffset, zLength,\n\t\n\t    \t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\t\n\t    \t\t\ttype,\n\t    \t\t\tisQuad,\n\t    \t\t\thasMaterial,\n\t    \t\t\thasFaceVertexUv,\n\t    \t\t\thasFaceNormal, hasFaceVertexNormal,\n\t    \t\t\thasFaceColor, hasFaceVertexColor,\n\t\n\t    \t\tvertex, face, faceA, faceB, hex, normal,\n\t\n\t    \t\t\tuvLayer, uv, u, v,\n\t\n\t    \t\t\tfaces = json.faces,\n\t    \t\t\tvertices = json.vertices,\n\t    \t\t\tnormals = json.normals,\n\t    \t\t\tcolors = json.colors,\n\t\n\t    \t\t\tnUvLayers = 0;\n\t\n\t    \t\t\tif ( json.uvs !== undefined ) {\n\t\n\t    \t\t\t\t// disregard empty arrays\n\t\n\t    \t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t    \t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\toffset = 0;\n\t    \t\t\tzLength = vertices.length;\n\t\n\t    \t\t\twhile ( offset < zLength ) {\n\t\n\t    \t\t\t\tvertex = new Vector3();\n\t\n\t    \t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t    \t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t    \t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\t\n\t    \t\t\t\tgeometry.vertices.push( vertex );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\toffset = 0;\n\t    \t\t\tzLength = faces.length;\n\t\n\t    \t\t\twhile ( offset < zLength ) {\n\t\n\t    \t\t\t\ttype = faces[ offset ++ ];\n\t\n\t\n\t    \t\t\t\tisQuad              = isBitSet( type, 0 );\n\t    \t\t\t\thasMaterial         = isBitSet( type, 1 );\n\t    \t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t    \t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t    \t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t    \t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t    \t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\t\n\t    \t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\t\n\t    \t\t\t\tif ( isQuad ) {\n\t\n\t    \t\t\t\t\tfaceA = new Face3();\n\t    \t\t\t\t\tfaceA.a = faces[ offset ];\n\t    \t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t    \t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\t\n\t    \t\t\t\t\tfaceB = new Face3();\n\t    \t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t    \t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t    \t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\t\n\t    \t\t\t\t\toffset += 4;\n\t\n\t    \t\t\t\t\tif ( hasMaterial ) {\n\t\n\t    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t    \t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// to get face <=> uv index correspondence\n\t\n\t    \t\t\t\t\tfi = geometry.faces.length;\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\t\n\t    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\t\n\t    \t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\t\n\t    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\t\n\t    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\t\n\t    \t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t    \t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceNormal ) {\n\t\n\t    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\tfaceA.normal.set(\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\t\tnormal = new Vector3(\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t\t);\n\t\n\t\n\t    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceColor ) {\n\t\n\t    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\thex = colors[ colorIndex ];\n\t\n\t    \t\t\t\t\t\tfaceA.color.setHex( hex );\n\t    \t\t\t\t\t\tfaceB.color.setHex( hex );\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\t\thex = colors[ colorIndex ];\n\t\n\t    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tgeometry.faces.push( faceA );\n\t    \t\t\t\t\tgeometry.faces.push( faceB );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tface = new Face3();\n\t    \t\t\t\t\tface.a = faces[ offset ++ ];\n\t    \t\t\t\t\tface.b = faces[ offset ++ ];\n\t    \t\t\t\t\tface.c = faces[ offset ++ ];\n\t\n\t    \t\t\t\t\tif ( hasMaterial ) {\n\t\n\t    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\tface.materialIndex = materialIndex;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// to get face <=> uv index correspondence\n\t\n\t    \t\t\t\t\tfi = geometry.faces.length;\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\t\n\t    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\n\t    \t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\t\n\t    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\t\n\t    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\t\n\t    \t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceNormal ) {\n\t\n\t    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\tface.normal.set(\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\t\tnormal = new Vector3(\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceColor ) {\n\t\n\t    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tgeometry.faces.push( face );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction parseSkin() {\n\t\n\t    \t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\t\n\t    \t\t\tif ( json.skinWeights ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\t\n\t    \t\t\t\t\tvar x =                               json.skinWeights[ i ];\n\t    \t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t    \t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t    \t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\t\n\t    \t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.skinIndices ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\t\n\t    \t\t\t\t\tvar a =                               json.skinIndices[ i ];\n\t    \t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t    \t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t    \t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\t\n\t    \t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.bones = json.bones;\n\t\n\t    \t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\t\n\t    \t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t    \t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction parseMorphing( scale ) {\n\t\n\t    \t\t\tif ( json.morphTargets !== undefined ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t    \t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t    \t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\t\n\t    \t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t    \t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\t\n\t    \t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\t\n\t    \t\t\t\t\t\tvar vertex = new Vector3();\n\t    \t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t    \t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t    \t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\t\n\t    \t\t\t\t\t\tdstVertices.push( vertex );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\t\n\t    \t\t\t\tvar faces = geometry.faces;\n\t    \t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\t\n\t    \t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction parseAnimations() {\n\t\n\t    \t\t\tvar outputAnimations = [];\n\t\n\t    \t\t\t// parse old style Bone/Hierarchy animations\n\t    \t\t\tvar animations = [];\n\t\n\t    \t\t\tif ( json.animation !== undefined ) {\n\t\n\t    \t\t\t\tanimations.push( json.animation );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.animations !== undefined ) {\n\t\n\t    \t\t\t\tif ( json.animations.length ) {\n\t\n\t    \t\t\t\t\tanimations = animations.concat( json.animations );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tanimations.push( json.animations );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\t\n\t    \t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t    \t\t\t\tif ( clip ) outputAnimations.push( clip );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// parse implicit morph animations\n\t    \t\t\tif ( geometry.morphTargets ) {\n\t\n\t    \t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t    \t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t    \t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\t\n\t    \t\t\treturn { geometry: geometry };\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\t\n\t    \t\t\treturn { geometry: geometry, materials: materials };\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function ObjectLoader ( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t    \tthis.texturePath = '';\n\t\n\t    }\n\t\n\t    Object.assign( ObjectLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tif ( this.texturePath === '' ) {\n\t\n\t    \t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( scope.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tscope.parse( JSON.parse( text ), onLoad );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tsetTexturePath: function ( value ) {\n\t\n\t    \t\tthis.texturePath = value;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json, onLoad ) {\n\t\n\t    \t\tvar geometries = this.parseGeometries( json.geometries );\n\t\n\t    \t\tvar images = this.parseImages( json.images, function () {\n\t\n\t    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\t\n\t    \t\t} );\n\t\n\t    \t\tvar textures  = this.parseTextures( json.textures, images );\n\t    \t\tvar materials = this.parseMaterials( json.materials, textures );\n\t\n\t    \t\tvar object = this.parseObject( json.object, geometries, materials );\n\t\n\t    \t\tif ( json.animations ) {\n\t\n\t    \t\t\tobject.animations = this.parseAnimations( json.animations );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.images === undefined || json.images.length === 0 ) {\n\t\n\t    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn object;\n\t\n\t    \t},\n\t\n\t    \tparseGeometries: function ( json ) {\n\t\n\t    \t\tvar geometries = {};\n\t\n\t    \t\tif ( json !== undefined ) {\n\t\n\t    \t\t\tvar geometryLoader = new JSONLoader();\n\t    \t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar geometry;\n\t    \t\t\t\tvar data = json[ i ];\n\t\n\t    \t\t\t\tswitch ( data.type ) {\n\t\n\t    \t\t\t\t\tcase 'PlaneGeometry':\n\t    \t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.width,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.widthSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'BoxGeometry':\n\t    \t\t\t\t\tcase 'BoxBufferGeometry':\n\t    \t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.width,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.depth,\n\t    \t\t\t\t\t\t\tdata.widthSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.depthSegments\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'CircleGeometry':\n\t    \t\t\t\t\tcase 'CircleBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.segments,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'CylinderGeometry':\n\t    \t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radiusTop,\n\t    \t\t\t\t\t\t\tdata.radiusBottom,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.openEnded,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'ConeGeometry':\n\t    \t\t\t\t\tcase 'ConeBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.openEnded,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'SphereGeometry':\n\t    \t\t\t\t\tcase 'SphereBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.widthSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.phiStart,\n\t    \t\t\t\t\t\t\tdata.phiLength,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'DodecahedronGeometry':\n\t    \t\t\t\t\tcase 'IcosahedronGeometry':\n\t    \t\t\t\t\tcase 'OctahedronGeometry':\n\t    \t\t\t\t\tcase 'TetrahedronGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.detail\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'RingGeometry':\n\t    \t\t\t\t\tcase 'RingBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.innerRadius,\n\t    \t\t\t\t\t\t\tdata.outerRadius,\n\t    \t\t\t\t\t\t\tdata.thetaSegments,\n\t    \t\t\t\t\t\t\tdata.phiSegments,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'TorusGeometry':\n\t    \t\t\t\t\tcase 'TorusBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.tube,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.tubularSegments,\n\t    \t\t\t\t\t\t\tdata.arc\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'TorusKnotGeometry':\n\t    \t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.tube,\n\t    \t\t\t\t\t\t\tdata.tubularSegments,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.p,\n\t    \t\t\t\t\t\t\tdata.q\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'LatheGeometry':\n\t    \t\t\t\t\tcase 'LatheBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.points,\n\t    \t\t\t\t\t\t\tdata.segments,\n\t    \t\t\t\t\t\t\tdata.phiStart,\n\t    \t\t\t\t\t\t\tdata.phiLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'BufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'Geometry':\n\t\n\t    \t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tdefault:\n\t\n\t    \t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\t\n\t    \t\t\t\t\t\tcontinue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tgeometry.uuid = data.uuid;\n\t\n\t    \t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\n\t    \t\t\t\tgeometries[ data.uuid ] = geometry;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometries;\n\t\n\t    \t},\n\t\n\t    \tparseMaterials: function ( json, textures ) {\n\t\n\t    \t\tvar materials = {};\n\t\n\t    \t\tif ( json !== undefined ) {\n\t\n\t    \t\t\tvar loader = new MaterialLoader();\n\t    \t\t\tloader.setTextures( textures );\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar material = loader.parse( json[ i ] );\n\t    \t\t\t\tmaterials[ material.uuid ] = material;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn materials;\n\t\n\t    \t},\n\t\n\t    \tparseAnimations: function ( json ) {\n\t\n\t    \t\tvar animations = [];\n\t\n\t    \t\tfor ( var i = 0; i < json.length; i ++ ) {\n\t\n\t    \t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\t\n\t    \t\t\tanimations.push( clip );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn animations;\n\t\n\t    \t},\n\t\n\t    \tparseImages: function ( json, onLoad ) {\n\t\n\t    \t\tvar scope = this;\n\t    \t\tvar images = {};\n\t\n\t    \t\tfunction loadImage( url ) {\n\t\n\t    \t\t\tscope.manager.itemStart( url );\n\t\n\t    \t\t\treturn loader.load( url, function () {\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t}, undefined, function () {\n\t\n\t    \t\t\t\tscope.manager.itemError( url );\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json !== undefined && json.length > 0 ) {\n\t\n\t    \t\t\tvar manager = new LoadingManager( onLoad );\n\t\n\t    \t\t\tvar loader = new ImageLoader( manager );\n\t    \t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar image = json[ i ];\n\t    \t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\t\n\t    \t\t\t\timages[ image.uuid ] = loadImage( path );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn images;\n\t\n\t    \t},\n\t\n\t    \tparseTextures: function ( json, images ) {\n\t\n\t    \t\tfunction parseConstant( value, type ) {\n\t\n\t    \t\t\tif ( typeof( value ) === 'number' ) return value;\n\t\n\t    \t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\t\n\t    \t\t\treturn type[ value ];\n\t\n\t    \t\t}\n\t\n\t    \t\tvar textures = {};\n\t\n\t    \t\tif ( json !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar data = json[ i ];\n\t\n\t    \t\t\t\tif ( data.image === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( images[ data.image ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar texture = new Texture( images[ data.image ] );\n\t    \t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\ttexture.uuid = data.uuid;\n\t\n\t    \t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\t\n\t    \t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );\n\t\n\t    \t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t    \t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t    \t\t\t\tif ( data.wrap !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );\n\t    \t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );\n\t    \t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );\n\t    \t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\t\n\t    \t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\t\n\t    \t\t\t\ttextures[ data.uuid ] = texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn textures;\n\t\n\t    \t},\n\t\n\t    \tparseObject: function () {\n\t\n\t    \t\tvar matrix = new Matrix4();\n\t\n\t    \t\treturn function parseObject( data, geometries, materials ) {\n\t\n\t    \t\t\tvar object;\n\t\n\t    \t\t\tfunction getGeometry( name ) {\n\t\n\t    \t\t\t\tif ( geometries[ name ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn geometries[ name ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfunction getMaterial( name ) {\n\t\n\t    \t\t\t\tif ( name === undefined ) return undefined;\n\t\n\t    \t\t\t\tif ( materials[ name ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn materials[ name ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tswitch ( data.type ) {\n\t\n\t    \t\t\t\tcase 'Scene':\n\t\n\t    \t\t\t\t\tobject = new Scene();\n\t\n\t    \t\t\t\t\tif ( data.background !== undefined ) {\n\t\n\t    \t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\t\n\t    \t\t\t\t\t\t\tobject.background = new Color( data.background );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( data.fog !== undefined ) {\n\t\n\t    \t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\t\n\t    \t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\t\n\t    \t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\t\n\t    \t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PerspectiveCamera':\n\t\n\t    \t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\t\n\t    \t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t    \t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t    \t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t    \t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t    \t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'OrthographicCamera':\n\t\n\t    \t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'AmbientLight':\n\t\n\t    \t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'DirectionalLight':\n\t\n\t    \t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PointLight':\n\t\n\t    \t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'SpotLight':\n\t\n\t    \t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'HemisphereLight':\n\t\n\t    \t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Mesh':\n\t\n\t    \t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t    \t\t\t\t\tvar material = getMaterial( data.material );\n\t\n\t    \t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\t\n\t    \t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tobject = new Mesh( geometry, material );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'LOD':\n\t\n\t    \t\t\t\t\tobject = new LOD();\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Line':\n\t\n\t    \t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'LineSegments':\n\t\n\t    \t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PointCloud':\n\t    \t\t\t\tcase 'Points':\n\t\n\t    \t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Sprite':\n\t\n\t    \t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Group':\n\t\n\t    \t\t\t\t\tobject = new Group();\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault:\n\t\n\t    \t\t\t\t\tobject = new Object3D();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.uuid = data.uuid;\n\t\n\t    \t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t    \t\t\tif ( data.matrix !== undefined ) {\n\t\n\t    \t\t\t\tmatrix.fromArray( data.matrix );\n\t    \t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t    \t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t    \t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t    \t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t    \t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\t\n\t    \t\t\tif ( data.shadow ) {\n\t\n\t    \t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t    \t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t    \t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t    \t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t    \t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\n\t    \t\t\tif ( data.children !== undefined ) {\n\t\n\t    \t\t\t\tfor ( var child in data.children ) {\n\t\n\t    \t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( data.type === 'LOD' ) {\n\t\n\t    \t\t\t\tvar levels = data.levels;\n\t\n\t    \t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\t\n\t    \t\t\t\t\tvar level = levels[ l ];\n\t    \t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\t\n\t    \t\t\t\t\tif ( child !== undefined ) {\n\t\n\t    \t\t\t\t\t\tobject.addLevel( child, level.distance );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn object;\n\t\n\t    \t\t};\n\t\n\t    \t}()\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * Extensible curve object\n\t     *\n\t     * Some common of Curve methods\n\t     * .getPoint(t), getTangent(t)\n\t     * .getPointAt(u), getTangentAt(u)\n\t     * .getPoints(), .getSpacedPoints()\n\t     * .getLength()\n\t     * .updateArcLengths()\n\t     *\n\t     * This following classes subclasses THREE.Curve:\n\t     *\n\t     * -- 2d classes --\n\t     * THREE.LineCurve\n\t     * THREE.QuadraticBezierCurve\n\t     * THREE.CubicBezierCurve\n\t     * THREE.SplineCurve\n\t     * THREE.ArcCurve\n\t     * THREE.EllipseCurve\n\t     *\n\t     * -- 3d classes --\n\t     * THREE.LineCurve3\n\t     * THREE.QuadraticBezierCurve3\n\t     * THREE.CubicBezierCurve3\n\t     * THREE.SplineCurve3\n\t     *\n\t     * A series of curves can be represented as a THREE.CurvePath\n\t     *\n\t     **/\n\t\n\t    /**************************************************************\n\t     *\tAbstract Curve base class\n\t     **************************************************************/\n\t\n\t    function Curve() {}\n\t\n\t    Curve.prototype = {\n\t\n\t    \tconstructor: Curve,\n\t\n\t    \t// Virtual base class method to overwrite and implement in subclasses\n\t    \t//\t- t [0 .. 1]\n\t\n\t    \tgetPoint: function ( t ) {\n\t\n\t    \t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n\t    \t\treturn null;\n\t\n\t    \t},\n\t\n\t    \t// Get point at relative position in curve according to arc length\n\t    \t// - u [0 .. 1]\n\t\n\t    \tgetPointAt: function ( u ) {\n\t\n\t    \t\tvar t = this.getUtoTmapping( u );\n\t    \t\treturn this.getPoint( t );\n\t\n\t    \t},\n\t\n\t    \t// Get sequence of points using getPoint( t )\n\t\n\t    \tgetPoints: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = 5;\n\t\n\t    \t\tvar points = [];\n\t\n\t    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\t\n\t    \t\t\tpoints.push( this.getPoint( d / divisions ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \t// Get sequence of points using getPointAt( u )\n\t\n\t    \tgetSpacedPoints: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = 5;\n\t\n\t    \t\tvar points = [];\n\t\n\t    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\t\n\t    \t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \t// Get total curve arc length\n\t\n\t    \tgetLength: function () {\n\t\n\t    \t\tvar lengths = this.getLengths();\n\t    \t\treturn lengths[ lengths.length - 1 ];\n\t\n\t    \t},\n\t\n\t    \t// Get list of cumulative segment lengths\n\t\n\t    \tgetLengths: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\t\n\t    \t\tif ( this.cacheArcLengths\n\t    \t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n\t    \t\t\t&& ! this.needsUpdate ) {\n\t\n\t    \t\t\t//console.log( \"cached\", this.cacheArcLengths );\n\t    \t\t\treturn this.cacheArcLengths;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.needsUpdate = false;\n\t\n\t    \t\tvar cache = [];\n\t    \t\tvar current, last = this.getPoint( 0 );\n\t    \t\tvar p, sum = 0;\n\t\n\t    \t\tcache.push( 0 );\n\t\n\t    \t\tfor ( p = 1; p <= divisions; p ++ ) {\n\t\n\t    \t\t\tcurrent = this.getPoint ( p / divisions );\n\t    \t\t\tsum += current.distanceTo( last );\n\t    \t\t\tcache.push( sum );\n\t    \t\t\tlast = current;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cacheArcLengths = cache;\n\t\n\t    \t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\t\n\t    \t},\n\t\n\t    \tupdateArcLengths: function() {\n\t\n\t    \t\tthis.needsUpdate = true;\n\t    \t\tthis.getLengths();\n\t\n\t    \t},\n\t\n\t    \t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\t\n\t    \tgetUtoTmapping: function ( u, distance ) {\n\t\n\t    \t\tvar arcLengths = this.getLengths();\n\t\n\t    \t\tvar i = 0, il = arcLengths.length;\n\t\n\t    \t\tvar targetArcLength; // The targeted u distance value to get\n\t\n\t    \t\tif ( distance ) {\n\t\n\t    \t\t\ttargetArcLength = distance;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\t\n\t    \t\t}\n\t\n\t    \t\t//var time = Date.now();\n\t\n\t    \t\t// binary search for the index with largest value smaller than target u distance\n\t\n\t    \t\tvar low = 0, high = il - 1, comparison;\n\t\n\t    \t\twhile ( low <= high ) {\n\t\n\t    \t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\t\n\t    \t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\t\n\t    \t\t\tif ( comparison < 0 ) {\n\t\n\t    \t\t\t\tlow = i + 1;\n\t\n\t    \t\t\t} else if ( comparison > 0 ) {\n\t\n\t    \t\t\t\thigh = i - 1;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\thigh = i;\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t\t// DONE\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\ti = high;\n\t\n\t    \t\t//console.log('b' , i, low, high, Date.now()- time);\n\t\n\t    \t\tif ( arcLengths[ i ] === targetArcLength ) {\n\t\n\t    \t\t\tvar t = i / ( il - 1 );\n\t    \t\t\treturn t;\n\t\n\t    \t\t}\n\t\n\t    \t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\t\n\t    \t\tvar lengthBefore = arcLengths[ i ];\n\t    \t\tvar lengthAfter = arcLengths[ i + 1 ];\n\t\n\t    \t\tvar segmentLength = lengthAfter - lengthBefore;\n\t\n\t    \t\t// determine where we are between the 'before' and 'after' points\n\t\n\t    \t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\t\n\t    \t\t// add that fractional amount to t\n\t\n\t    \t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\t\n\t    \t\treturn t;\n\t\n\t    \t},\n\t\n\t    \t// Returns a unit vector tangent at t\n\t    \t// In case any sub curve does not implement its tangent derivation,\n\t    \t// 2 points a small delta apart will be used to find its gradient\n\t    \t// which seems to give a reasonable approximation\n\t\n\t    \tgetTangent: function( t ) {\n\t\n\t    \t\tvar delta = 0.0001;\n\t    \t\tvar t1 = t - delta;\n\t    \t\tvar t2 = t + delta;\n\t\n\t    \t\t// Capping in case of danger\n\t\n\t    \t\tif ( t1 < 0 ) t1 = 0;\n\t    \t\tif ( t2 > 1 ) t2 = 1;\n\t\n\t    \t\tvar pt1 = this.getPoint( t1 );\n\t    \t\tvar pt2 = this.getPoint( t2 );\n\t\n\t    \t\tvar vec = pt2.clone().sub( pt1 );\n\t    \t\treturn vec.normalize();\n\t\n\t    \t},\n\t\n\t    \tgetTangentAt: function ( u ) {\n\t\n\t    \t\tvar t = this.getUtoTmapping( u );\n\t    \t\treturn this.getTangent( t );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    // TODO: Transformation for Curves?\n\t\n\t    /**************************************************************\n\t     *\t3D Curves\n\t     **************************************************************/\n\t\n\t    // A Factory method for creating new curve subclasses\n\t\n\t    Curve.create = function ( constructor, getPointFunc ) {\n\t\n\t    \tconstructor.prototype = Object.create( Curve.prototype );\n\t    \tconstructor.prototype.constructor = constructor;\n\t    \tconstructor.prototype.getPoint = getPointFunc;\n\t\n\t    \treturn constructor;\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tLine\n\t     **************************************************************/\n\t\n\t    function LineCurve( v1, v2 ) {\n\t\n\t    \tthis.v1 = v1;\n\t    \tthis.v2 = v2;\n\t\n\t    }\n\t\n\t    LineCurve.prototype = Object.create( Curve.prototype );\n\t    LineCurve.prototype.constructor = LineCurve;\n\t\n\t    LineCurve.prototype.isLineCurve = true;\n\t\n\t    LineCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tif ( t === 1 ) {\n\t\n\t    \t\treturn this.v2.clone();\n\t\n\t    \t}\n\t\n\t    \tvar point = this.v2.clone().sub( this.v1 );\n\t    \tpoint.multiplyScalar( t ).add( this.v1 );\n\t\n\t    \treturn point;\n\t\n\t    };\n\t\n\t    // Line curve is linear, so we can overwrite default getPointAt\n\t\n\t    LineCurve.prototype.getPointAt = function ( u ) {\n\t\n\t    \treturn this.getPoint( u );\n\t\n\t    };\n\t\n\t    LineCurve.prototype.getTangent = function( t ) {\n\t\n\t    \tvar tangent = this.v2.clone().sub( this.v1 );\n\t\n\t    \treturn tangent.normalize();\n\t\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     *\n\t     **/\n\t\n\t    /**************************************************************\n\t     *\tCurved Path - a curve path is simply a array of connected\n\t     *  curves, but retains the api of a curve\n\t     **************************************************************/\n\t\n\t    function CurvePath() {\n\t\n\t    \tthis.curves = [];\n\t\n\t    \tthis.autoClose = false; // Automatically closes the path\n\t\n\t    }\n\t\n\t    CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\t\n\t    \tconstructor: CurvePath,\n\t\n\t    \tadd: function ( curve ) {\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t},\n\t\n\t    \tclosePath: function () {\n\t\n\t    \t\t// Add a line curve if start and end of lines are not connected\n\t    \t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t    \t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\t\n\t    \t\tif ( ! startPoint.equals( endPoint ) ) {\n\t\n\t    \t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// To get accurate point with reference to\n\t    \t// entire path distance at time t,\n\t    \t// following has to be done:\n\t\n\t    \t// 1. Length of each sub path have to be known\n\t    \t// 2. Locate and identify type of curve\n\t    \t// 3. Get t for the curve\n\t    \t// 4. Return curve.getPointAt(t')\n\t\n\t    \tgetPoint: function ( t ) {\n\t\n\t    \t\tvar d = t * this.getLength();\n\t    \t\tvar curveLengths = this.getCurveLengths();\n\t    \t\tvar i = 0;\n\t\n\t    \t\t// To think about boundaries points.\n\t\n\t    \t\twhile ( i < curveLengths.length ) {\n\t\n\t    \t\t\tif ( curveLengths[ i ] >= d ) {\n\t\n\t    \t\t\t\tvar diff = curveLengths[ i ] - d;\n\t    \t\t\t\tvar curve = this.curves[ i ];\n\t\n\t    \t\t\t\tvar segmentLength = curve.getLength();\n\t    \t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\n\t    \t\t\t\treturn curve.getPointAt( u );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ti ++;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t\t// loop where sum != 0, sum > d , sum+1 <d\n\t\n\t    \t},\n\t\n\t    \t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t    \t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t    \t// getPoint() depends on getLength\n\t\n\t    \tgetLength: function () {\n\t\n\t    \t\tvar lens = this.getCurveLengths();\n\t    \t\treturn lens[ lens.length - 1 ];\n\t\n\t    \t},\n\t\n\t    \t// cacheLengths must be recalculated.\n\t    \tupdateArcLengths: function () {\n\t\n\t    \t\tthis.needsUpdate = true;\n\t    \t\tthis.cacheLengths = null;\n\t    \t\tthis.getLengths();\n\t\n\t    \t},\n\t\n\t    \t// Compute lengths and cache them\n\t    \t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\n\t    \tgetCurveLengths: function () {\n\t\n\t    \t\t// We use cache values if curves and cache array are same length\n\t\n\t    \t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\t\n\t    \t\t\treturn this.cacheLengths;\n\t\n\t    \t\t}\n\t\n\t    \t\t// Get length of sub-curve\n\t    \t\t// Push sums into cached array\n\t\n\t    \t\tvar lengths = [], sums = 0;\n\t\n\t    \t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\t\n\t    \t\t\tsums += this.curves[ i ].getLength();\n\t    \t\t\tlengths.push( sums );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cacheLengths = lengths;\n\t\n\t    \t\treturn lengths;\n\t\n\t    \t},\n\t\n\t    \tgetSpacedPoints: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = 40;\n\t\n\t    \t\tvar points = [];\n\t\n\t    \t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\t\n\t    \t\t\tpoints.push( this.getPoint( i / divisions ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.autoClose ) {\n\t\n\t    \t\t\tpoints.push( points[ 0 ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \tgetPoints: function ( divisions ) {\n\t\n\t    \t\tdivisions = divisions || 12;\n\t\n\t    \t\tvar points = [], last;\n\t\n\t    \t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\t\n\t    \t\t\tvar curve = curves[ i ];\n\t    \t\t\tvar resolution = (curve && curve.isEllipseCurve) ? divisions * 2\n\t    \t\t\t\t: (curve && curve.isLineCurve) ? 1\n\t    \t\t\t\t: (curve && curve.isSplineCurve) ? divisions * curve.points.length\n\t    \t\t\t\t: divisions;\n\t\n\t    \t\t\tvar pts = curve.getPoints( resolution );\n\t\n\t    \t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\t\n\t    \t\t\t\tvar point = pts[ j ];\n\t\n\t    \t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\t\n\t    \t\t\t\tpoints.push( point );\n\t    \t\t\t\tlast = point;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\t\n\t    \t\t\tpoints.push( points[ 0 ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \t/**************************************************************\n\t    \t *\tCreate Geometries Helpers\n\t    \t **************************************************************/\n\t\n\t    \t/// Generate geometry from path points (for Line or Points objects)\n\t\n\t    \tcreatePointsGeometry: function ( divisions ) {\n\t\n\t    \t\tvar pts = this.getPoints( divisions );\n\t    \t\treturn this.createGeometry( pts );\n\t\n\t    \t},\n\t\n\t    \t// Generate geometry from equidistant sampling along the path\n\t\n\t    \tcreateSpacedPointsGeometry: function ( divisions ) {\n\t\n\t    \t\tvar pts = this.getSpacedPoints( divisions );\n\t    \t\treturn this.createGeometry( pts );\n\t\n\t    \t},\n\t\n\t    \tcreateGeometry: function ( points ) {\n\t\n\t    \t\tvar geometry = new Geometry();\n\t\n\t    \t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar point = points[ i ];\n\t    \t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**************************************************************\n\t     *\tEllipse curve\n\t     **************************************************************/\n\t\n\t    function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t    \tthis.aX = aX;\n\t    \tthis.aY = aY;\n\t\n\t    \tthis.xRadius = xRadius;\n\t    \tthis.yRadius = yRadius;\n\t\n\t    \tthis.aStartAngle = aStartAngle;\n\t    \tthis.aEndAngle = aEndAngle;\n\t\n\t    \tthis.aClockwise = aClockwise;\n\t\n\t    \tthis.aRotation = aRotation || 0;\n\t\n\t    }\n\t\n\t    EllipseCurve.prototype = Object.create( Curve.prototype );\n\t    EllipseCurve.prototype.constructor = EllipseCurve;\n\t\n\t    EllipseCurve.prototype.isEllipseCurve = true;\n\t\n\t    EllipseCurve.prototype.getPoint = function( t ) {\n\t\n\t    \tvar twoPi = Math.PI * 2;\n\t    \tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t    \tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\t\n\t    \t// ensures that deltaAngle is 0 .. 2 PI\n\t    \twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t    \twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\t\n\t    \tif ( deltaAngle < Number.EPSILON ) {\n\t\n\t    \t\tif ( samePoints ) {\n\t\n\t    \t\t\tdeltaAngle = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdeltaAngle = twoPi;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tif ( this.aClockwise === true && ! samePoints ) {\n\t\n\t    \t\tif ( deltaAngle === twoPi ) {\n\t\n\t    \t\t\tdeltaAngle = - twoPi;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar angle = this.aStartAngle + t * deltaAngle;\n\t    \tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t    \tvar y = this.aY + this.yRadius * Math.sin( angle );\n\t\n\t    \tif ( this.aRotation !== 0 ) {\n\t\n\t    \t\tvar cos = Math.cos( this.aRotation );\n\t    \t\tvar sin = Math.sin( this.aRotation );\n\t\n\t    \t\tvar tx = x - this.aX;\n\t    \t\tvar ty = y - this.aY;\n\t\n\t    \t\t// Rotate the point about the center of the ellipse.\n\t    \t\tx = tx * cos - ty * sin + this.aX;\n\t    \t\ty = tx * sin + ty * cos + this.aY;\n\t\n\t    \t}\n\t\n\t    \treturn new Vector2( x, y );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     */\n\t\n\t    exports.CurveUtils = {\n\t\n\t    \ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\t\n\t    \t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\t\n\t    \t},\n\t\n\t    \t// Puay Bing, thanks for helping with this derivative!\n\t\n\t    \ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\t\n\t    \t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n\t    \t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n\t    \t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n\t    \t\t\t3 * t * t * p3;\n\t\n\t    \t},\n\t\n\t    \ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\t\n\t    \t\t// To check if my formulas are correct\n\t\n\t    \t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n\t    \t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\t    \t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n\t    \t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\t\n\t    \t\treturn h00 + h10 + h01 + h11;\n\t\n\t    \t},\n\t\n\t    \t// Catmull-Rom\n\t\n\t    \tinterpolate: function( p0, p1, p2, p3, t ) {\n\t\n\t    \t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t    \t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t    \t\tvar t2 = t * t;\n\t    \t\tvar t3 = t * t2;\n\t    \t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tSpline curve\n\t     **************************************************************/\n\t\n\t    function SplineCurve( points /* array of Vector2 */ ) {\n\t\n\t    \tthis.points = ( points === undefined ) ? [] : points;\n\t\n\t    }\n\t\n\t    SplineCurve.prototype = Object.create( Curve.prototype );\n\t    SplineCurve.prototype.constructor = SplineCurve;\n\t\n\t    SplineCurve.prototype.isSplineCurve = true;\n\t\n\t    SplineCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tvar points = this.points;\n\t    \tvar point = ( points.length - 1 ) * t;\n\t\n\t    \tvar intPoint = Math.floor( point );\n\t    \tvar weight = point - intPoint;\n\t\n\t    \tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t    \tvar point1 = points[ intPoint ];\n\t    \tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t    \tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\t\n\t    \tvar interpolate = exports.CurveUtils.interpolate;\n\t\n\t    \treturn new Vector2(\n\t    \t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t    \t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n\t    \t);\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tCubic Bezier curve\n\t     **************************************************************/\n\t\n\t    function CubicBezierCurve( v0, v1, v2, v3 ) {\n\t\n\t    \tthis.v0 = v0;\n\t    \tthis.v1 = v1;\n\t    \tthis.v2 = v2;\n\t    \tthis.v3 = v3;\n\t\n\t    }\n\t\n\t    CubicBezierCurve.prototype = Object.create( Curve.prototype );\n\t    CubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\t\n\t    CubicBezierCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tvar b3 = exports.ShapeUtils.b3;\n\t\n\t    \treturn new Vector2(\n\t    \t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t    \t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t    \t);\n\t\n\t    };\n\t\n\t    CubicBezierCurve.prototype.getTangent = function( t ) {\n\t\n\t    \tvar tangentCubicBezier = exports.CurveUtils.tangentCubicBezier;\n\t\n\t    \treturn new Vector2(\n\t    \t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t    \t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t    \t).normalize();\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tQuadratic Bezier curve\n\t     **************************************************************/\n\t\n\t\n\t    function QuadraticBezierCurve( v0, v1, v2 ) {\n\t\n\t    \tthis.v0 = v0;\n\t    \tthis.v1 = v1;\n\t    \tthis.v2 = v2;\n\t\n\t    }\n\t\n\t    QuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\t    QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\t\n\t\n\t    QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tvar b2 = exports.ShapeUtils.b2;\n\t\n\t    \treturn new Vector2(\n\t    \t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t    \t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n\t    \t);\n\t\n\t    };\n\t\n\t\n\t    QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\t\n\t    \tvar tangentQuadraticBezier = exports.CurveUtils.tangentQuadraticBezier;\n\t\n\t    \treturn new Vector2(\n\t    \t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n\t    \t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n\t    \t).normalize();\n\t\n\t    };\n\t\n\t    var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {\n\t\n\t    \tfromPoints: function ( vectors ) {\n\t\n\t    \t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\t\n\t    \t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tmoveTo: function ( x, y ) {\n\t\n\t    \t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\t\n\t    \t},\n\t\n\t    \tlineTo: function ( x, y ) {\n\t\n\t    \t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.set( x, y );\n\t\n\t    \t},\n\t\n\t    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t\n\t    \t\tvar curve = new QuadraticBezierCurve(\n\t    \t\t\tthis.currentPoint.clone(),\n\t    \t\t\tnew Vector2( aCPx, aCPy ),\n\t    \t\t\tnew Vector2( aX, aY )\n\t    \t\t);\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.set( aX, aY );\n\t\n\t    \t},\n\t\n\t    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t\n\t    \t\tvar curve = new CubicBezierCurve(\n\t    \t\t\tthis.currentPoint.clone(),\n\t    \t\t\tnew Vector2( aCP1x, aCP1y ),\n\t    \t\t\tnew Vector2( aCP2x, aCP2y ),\n\t    \t\t\tnew Vector2( aX, aY )\n\t    \t\t);\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.set( aX, aY );\n\t\n\t    \t},\n\t\n\t    \tsplineThru: function ( pts /*Array of Vector*/ ) {\n\t\n\t    \t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\t\n\t    \t\tvar curve = new SplineCurve( npts );\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\t\n\t    \t},\n\t\n\t    \tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t    \t\tvar x0 = this.currentPoint.x;\n\t    \t\tvar y0 = this.currentPoint.y;\n\t\n\t    \t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t    \t\t\taStartAngle, aEndAngle, aClockwise );\n\t\n\t    \t},\n\t\n\t    \tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t    \t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\t\n\t    \t},\n\t\n\t    \tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t    \t\tvar x0 = this.currentPoint.x;\n\t    \t\tvar y0 = this.currentPoint.y;\n\t\n\t    \t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\n\t    \t},\n\t\n\t    \tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t    \t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\n\t    \t\tif ( this.curves.length > 0 ) {\n\t\n\t    \t\t\t// if a previous curve is present, attempt to join\n\t    \t\t\tvar firstPoint = curve.getPoint( 0 );\n\t\n\t    \t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\t\n\t    \t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tvar lastPoint = curve.getPoint( 1 );\n\t    \t\tthis.currentPoint.copy( lastPoint );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * Defines a 2d shape plane using paths.\n\t     **/\n\t\n\t    // STEP 1 Create a path.\n\t    // STEP 2 Turn path into shape.\n\t    // STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t    // STEP 3a - Extract points from each shape, turn to vertices\n\t    // STEP 3b - Triangulate each shape, add faces.\n\t\n\t    function Shape() {\n\t\n\t    \tPath.apply( this, arguments );\n\t\n\t    \tthis.holes = [];\n\t\n\t    }\n\t\n\t    Shape.prototype = Object.assign( Object.create( PathPrototype ), {\n\t\n\t    \tconstructor: Shape,\n\t\n\t    \tgetPointsHoles: function ( divisions ) {\n\t\n\t    \t\tvar holesPts = [];\n\t\n\t    \t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\t\n\t    \t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn holesPts;\n\t\n\t    \t},\n\t\n\t    \t// Get points of shape and holes (keypoints based on segments parameter)\n\t\n\t    \textractAllPoints: function ( divisions ) {\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tshape: this.getPoints( divisions ),\n\t    \t\t\tholes: this.getPointsHoles( divisions )\n\t\n\t    \t\t};\n\t\n\t    \t},\n\t\n\t    \textractPoints: function ( divisions ) {\n\t\n\t    \t\treturn this.extractAllPoints( divisions );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * Creates free form 2d path using series of points, lines or curves.\n\t     *\n\t     **/\n\t\n\t    function Path( points ) {\n\t\n\t    \tCurvePath.call( this );\n\t    \tthis.currentPoint = new Vector2();\n\t\n\t    \tif ( points ) {\n\t\n\t    \t\tthis.fromPoints( points );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Path.prototype = PathPrototype;\n\t    PathPrototype.constructor = Path;\n\t\n\t\n\t    // minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t    function ShapePath() {\n\t    \tthis.subPaths = [];\n\t    \tthis.currentPath = null;\n\t    }\n\t\n\t    ShapePath.prototype = {\n\t    \tmoveTo: function ( x, y ) {\n\t    \t\tthis.currentPath = new Path();\n\t    \t\tthis.subPaths.push(this.currentPath);\n\t    \t\tthis.currentPath.moveTo( x, y );\n\t    \t},\n\t    \tlineTo: function ( x, y ) {\n\t    \t\tthis.currentPath.lineTo( x, y );\n\t    \t},\n\t    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t    \t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\t    \t},\n\t    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t    \t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\t    \t},\n\t    \tsplineThru: function ( pts ) {\n\t    \t\tthis.currentPath.splineThru( pts );\n\t    \t},\n\t\n\t    \ttoShapes: function ( isCCW, noHoles ) {\n\t\n\t    \t\tfunction toShapesNoHoles( inSubpaths ) {\n\t\n\t    \t\t\tvar shapes = [];\n\t\n\t    \t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar tmpPath = inSubpaths[ i ];\n\t\n\t    \t\t\t\tvar tmpShape = new Shape();\n\t    \t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\n\t    \t\t\t\tshapes.push( tmpShape );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn shapes;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\t\n\t    \t\t\tvar polyLen = inPolygon.length;\n\t\n\t    \t\t\t// inPt on polygon contour => immediate success    or\n\t    \t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t    \t\t\t//  with the horizontal line through inPt, left of inPt\n\t    \t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t    \t\t\tvar inside = false;\n\t    \t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\t\n\t    \t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t    \t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\t\n\t    \t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t    \t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\t\n\t    \t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\t\n\t    \t\t\t\t\t// not parallel\n\t    \t\t\t\t\tif ( edgeDy < 0 ) {\n\t\n\t    \t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t    \t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\t\n\t    \t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\t\n\t    \t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t    \t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t    \t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t    \t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t    \t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// parallel or collinear\n\t    \t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t    \t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t    \t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t    \t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t    \t\t\t\t\t// continue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn\tinside;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar isClockWise = exports.ShapeUtils.isClockWise;\n\t\n\t    \t\tvar subPaths = this.subPaths;\n\t    \t\tif ( subPaths.length === 0 ) return [];\n\t\n\t    \t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\t\n\t\n\t    \t\tvar solid, tmpPath, tmpShape, shapes = [];\n\t\n\t    \t\tif ( subPaths.length === 1 ) {\n\t\n\t    \t\t\ttmpPath = subPaths[ 0 ];\n\t    \t\t\ttmpShape = new Shape();\n\t    \t\t\ttmpShape.curves = tmpPath.curves;\n\t    \t\t\tshapes.push( tmpShape );\n\t    \t\t\treturn shapes;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t    \t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\t\n\t    \t\t// console.log(\"Holes first\", holesFirst);\n\t\n\t    \t\tvar betterShapeHoles = [];\n\t    \t\tvar newShapes = [];\n\t    \t\tvar newShapeHoles = [];\n\t    \t\tvar mainIdx = 0;\n\t    \t\tvar tmpPoints;\n\t\n\t    \t\tnewShapes[ mainIdx ] = undefined;\n\t    \t\tnewShapeHoles[ mainIdx ] = [];\n\t\n\t    \t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\t\n\t    \t\t\ttmpPath = subPaths[ i ];\n\t    \t\t\ttmpPoints = tmpPath.getPoints();\n\t    \t\t\tsolid = isClockWise( tmpPoints );\n\t    \t\t\tsolid = isCCW ? ! solid : solid;\n\t\n\t    \t\t\tif ( solid ) {\n\t\n\t    \t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\t\n\t    \t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t    \t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\t\n\t    \t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t    \t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\t\n\t    \t\t\t\t//console.log('cw', i);\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\t\n\t    \t\t\t\t//console.log('ccw', i);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// only Holes? -> probably all Shapes with wrong orientation\n\t    \t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\t\n\t\n\t    \t\tif ( newShapes.length > 1 ) {\n\t\n\t    \t\t\tvar ambiguous = false;\n\t    \t\t\tvar toChange = [];\n\t\n\t    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\t\n\t    \t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\t\n\t    \t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\t\n\t    \t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\t\n\t    \t\t\t\t\tvar ho = sho[ hIdx ];\n\t    \t\t\t\t\tvar hole_unassigned = true;\n\t\n\t    \t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\t\n\t    \t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\t\n\t    \t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t    \t\t\t\t\t\t\tif ( hole_unassigned ) {\n\t\n\t    \t\t\t\t\t\t\t\thole_unassigned = false;\n\t    \t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\t\n\t    \t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\tambiguous = true;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( hole_unassigned ) {\n\t\n\t    \t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t    \t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t    \t\t\tif ( toChange.length > 0 ) {\n\t\n\t    \t\t\t\t// console.log(\"to change: \", toChange);\n\t    \t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar tmpHoles;\n\t\n\t    \t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\t\n\t    \t\t\ttmpShape = newShapes[ i ].s;\n\t    \t\t\tshapes.push( tmpShape );\n\t    \t\t\ttmpHoles = newShapeHoles[ i ];\n\t\n\t    \t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t//console.log(\"shape\", shapes);\n\t\n\t    \t\treturn shapes;\n\t\n\t    \t}\n\t    }\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Font( data ) {\n\t\n\t    \tthis.data = data;\n\t\n\t    }\n\t\n\t    Object.assign( Font.prototype, {\n\t\n\t    \tisFont: true,\n\t\n\t    \tgenerateShapes: function ( text, size, divisions ) {\n\t\n\t    \t\tfunction createPaths( text ) {\n\t\n\t    \t\t\tvar chars = String( text ).split( '' );\n\t    \t\t\tvar scale = size / data.resolution;\n\t    \t\t\tvar offset = 0;\n\t\n\t    \t\t\tvar paths = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\t\n\t    \t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n\t    \t\t\t\toffset += ret.offset;\n\t\n\t    \t\t\t\tpaths.push( ret.path );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn paths;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction createPath( c, scale, offset ) {\n\t\n\t    \t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\t\n\t    \t\t\tif ( ! glyph ) return;\n\t\n\t    \t\t\tvar path = new ShapePath();\n\t\n\t    \t\t\tvar pts = [], b2 = exports.ShapeUtils.b2, b3 = exports.ShapeUtils.b3;\n\t    \t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\t\n\t    \t\t\tif ( glyph.o ) {\n\t\n\t    \t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\t\n\t    \t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\t\n\t    \t\t\t\t\tvar action = outline[ i ++ ];\n\t\n\t    \t\t\t\t\tswitch ( action ) {\n\t\n\t    \t\t\t\t\t\tcase 'm': // moveTo\n\t\n\t    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.moveTo( x, y );\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\tcase 'l': // lineTo\n\t\n\t    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.lineTo( x, y );\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\t\n\t    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\t\n\t    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( laste ) {\n\t\n\t    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\t\n\t    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t    \t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n\t    \t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\tcase 'b': // bezierCurveTo\n\t\n\t    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t    \t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\t\n\t    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( laste ) {\n\t\n\t    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\t\n\t    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t    \t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n\t    \t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn { offset: glyph.ha * scale, path: path };\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( size === undefined ) size = 100;\n\t    \t\tif ( divisions === undefined ) divisions = 4;\n\t\n\t    \t\tvar data = this.data;\n\t\n\t    \t\tvar paths = createPaths( text );\n\t    \t\tvar shapes = [];\n\t\n\t    \t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\t\n\t    \t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn shapes;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function FontLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( FontLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tvar json;\n\t\n\t    \t\t\ttry {\n\t\n\t    \t\t\t\tjson = JSON.parse( text );\n\t\n\t    \t\t\t} catch ( e ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t    \t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar font = scope.parse( json );\n\t\n\t    \t\t\tif ( onLoad ) onLoad( font );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json ) {\n\t\n\t    \t\treturn new Font( json );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var context;\n\t\n\t    function getAudioContext() {\n\t\n\t    \tif ( context === undefined ) {\n\t\n\t    \t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\t\n\t    \t}\n\t\n\t    \treturn context;\n\t\n\t    }\n\t\n\t    /**\n\t     * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t     */\n\t\n\t    function AudioLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( AudioLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setResponseType( 'arraybuffer' );\n\t    \t\tloader.load( url, function ( buffer ) {\n\t\n\t    \t\t\tvar context = getAudioContext();\n\t\n\t    \t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\t\n\t    \t\t\t\tonLoad( audioBuffer );\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function StereoCamera() {\n\t\n\t    \tthis.type = 'StereoCamera';\n\t\n\t    \tthis.aspect = 1;\n\t\n\t    \tthis.eyeSep = 0.064;\n\t\n\t    \tthis.cameraL = new PerspectiveCamera();\n\t    \tthis.cameraL.layers.enable( 1 );\n\t    \tthis.cameraL.matrixAutoUpdate = false;\n\t\n\t    \tthis.cameraR = new PerspectiveCamera();\n\t    \tthis.cameraR.layers.enable( 2 );\n\t    \tthis.cameraR.matrixAutoUpdate = false;\n\t\n\t    }\n\t\n\t    Object.assign( StereoCamera.prototype, {\n\t\n\t    \tupdate: ( function () {\n\t\n\t    \t\tvar instance, focus, fov, aspect, near, far, zoom;\n\t\n\t    \t\tvar eyeRight = new Matrix4();\n\t    \t\tvar eyeLeft = new Matrix4();\n\t\n\t    \t\treturn function update( camera ) {\n\t\n\t    \t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n\t    \t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t    \t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom;\n\t\n\t    \t\t\tif ( needsUpdate ) {\n\t\n\t    \t\t\t\tinstance = this;\n\t    \t\t\t\tfocus = camera.focus;\n\t    \t\t\t\tfov = camera.fov;\n\t    \t\t\t\taspect = camera.aspect * this.aspect;\n\t    \t\t\t\tnear = camera.near;\n\t    \t\t\t\tfar = camera.far;\n\t    \t\t\t\tzoom = camera.zoom;\n\t\n\t    \t\t\t\t// Off-axis stereoscopic effect based on\n\t    \t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\t\n\t    \t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t    \t\t\t\tvar eyeSep = this.eyeSep / 2;\n\t    \t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t    \t\t\t\tvar ymax = ( near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n\t    \t\t\t\tvar xmin, xmax;\n\t\n\t    \t\t\t\t// translate xOffset\n\t\n\t    \t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t    \t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\t\n\t    \t\t\t\t// for left eye\n\t\n\t    \t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t    \t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\t\n\t    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\t\n\t    \t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\t\n\t    \t\t\t\t// for right eye\n\t\n\t    \t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t    \t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\t\n\t    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\t\n\t    \t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t    \t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    } );\n\t\n\t    /**\n\t     * Camera for rendering cube maps\n\t     *\t- renders scene into axis-aligned cube\n\t     *\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function CubeCamera( near, far, cubeResolution ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'CubeCamera';\n\t\n\t    \tvar fov = 90, aspect = 1;\n\t\n\t    \tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraPX.up.set( 0, - 1, 0 );\n\t    \tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t    \tthis.add( cameraPX );\n\t\n\t    \tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraNX.up.set( 0, - 1, 0 );\n\t    \tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t    \tthis.add( cameraNX );\n\t\n\t    \tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraPY.up.set( 0, 0, 1 );\n\t    \tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t    \tthis.add( cameraPY );\n\t\n\t    \tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraNY.up.set( 0, 0, - 1 );\n\t    \tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t    \tthis.add( cameraNY );\n\t\n\t    \tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraPZ.up.set( 0, - 1, 0 );\n\t    \tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t    \tthis.add( cameraPZ );\n\t\n\t    \tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraNZ.up.set( 0, - 1, 0 );\n\t    \tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t    \tthis.add( cameraNZ );\n\t\n\t    \tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\t\n\t    \tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\t\n\t    \tthis.updateCubeMap = function ( renderer, scene ) {\n\t\n\t    \t\tif ( this.parent === null ) this.updateMatrixWorld();\n\t\n\t    \t\tvar renderTarget = this.renderTarget;\n\t    \t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\n\t    \t\trenderTarget.texture.generateMipmaps = false;\n\t\n\t    \t\trenderTarget.activeCubeFace = 0;\n\t    \t\trenderer.render( scene, cameraPX, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 1;\n\t    \t\trenderer.render( scene, cameraNX, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 2;\n\t    \t\trenderer.render( scene, cameraPY, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 3;\n\t    \t\trenderer.render( scene, cameraNY, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 4;\n\t    \t\trenderer.render( scene, cameraPZ, renderTarget );\n\t\n\t    \t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\n\t    \t\trenderTarget.activeCubeFace = 5;\n\t    \t\trenderer.render( scene, cameraNZ, renderTarget );\n\t\n\t    \t\trenderer.setRenderTarget( null );\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    CubeCamera.prototype = Object.create( Object3D.prototype );\n\t    CubeCamera.prototype.constructor = CubeCamera;\n\t\n\t    function AudioListener() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'AudioListener';\n\t\n\t    \tthis.context = getAudioContext();\n\t\n\t    \tthis.gain = this.context.createGain();\n\t    \tthis.gain.connect( this.context.destination );\n\t\n\t    \tthis.filter = null;\n\t\n\t    }\n\t\n\t    AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: AudioListener,\n\t\n\t    \tgetInput: function () {\n\t\n\t    \t\treturn this.gain;\n\t\n\t    \t},\n\t\n\t    \tremoveFilter: function ( ) {\n\t\n\t    \t\tif ( this.filter !== null ) {\n\t\n\t    \t\t\tthis.gain.disconnect( this.filter );\n\t    \t\t\tthis.filter.disconnect( this.context.destination );\n\t    \t\t\tthis.gain.connect( this.context.destination );\n\t    \t\t\tthis.filter = null;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetFilter: function () {\n\t\n\t    \t\treturn this.filter;\n\t\n\t    \t},\n\t\n\t    \tsetFilter: function ( value ) {\n\t\n\t    \t\tif ( this.filter !== null ) {\n\t\n\t    \t\t\tthis.gain.disconnect( this.filter );\n\t    \t\t\tthis.filter.disconnect( this.context.destination );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.gain.disconnect( this.context.destination );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.filter = value;\n\t    \t\tthis.gain.connect( this.filter );\n\t    \t\tthis.filter.connect( this.context.destination );\n\t\n\t    \t},\n\t\n\t    \tgetMasterVolume: function () {\n\t\n\t    \t\treturn this.gain.gain.value;\n\t\n\t    \t},\n\t\n\t    \tsetMasterVolume: function ( value ) {\n\t\n\t    \t\tthis.gain.gain.value = value;\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: ( function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t    \t\tvar quaternion = new Quaternion();\n\t    \t\tvar scale = new Vector3();\n\t\n\t    \t\tvar orientation = new Vector3();\n\t\n\t    \t\treturn function updateMatrixWorld( force ) {\n\t\n\t    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t    \t\t\tvar listener = this.context.listener;\n\t    \t\t\tvar up = this.up;\n\t\n\t    \t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\t\n\t    \t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\t\n\t    \t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t    \t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    } );\n\t\n\t    function Audio( listener ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Audio';\n\t\n\t    \tthis.context = listener.context;\n\t    \tthis.source = this.context.createBufferSource();\n\t    \tthis.source.onended = this.onEnded.bind( this );\n\t\n\t    \tthis.gain = this.context.createGain();\n\t    \tthis.gain.connect( listener.getInput() );\n\t\n\t    \tthis.autoplay = false;\n\t\n\t    \tthis.startTime = 0;\n\t    \tthis.playbackRate = 1;\n\t    \tthis.isPlaying = false;\n\t    \tthis.hasPlaybackControl = true;\n\t    \tthis.sourceType = 'empty';\n\t\n\t    \tthis.filters = [];\n\t\n\t    }\n\t\n\t    Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Audio,\n\t\n\t    \tgetOutput: function () {\n\t\n\t    \t\treturn this.gain;\n\t\n\t    \t},\n\t\n\t    \tsetNodeSource: function ( audioNode ) {\n\t\n\t    \t\tthis.hasPlaybackControl = false;\n\t    \t\tthis.sourceType = 'audioNode';\n\t    \t\tthis.source = audioNode;\n\t    \t\tthis.connect();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetBuffer: function ( audioBuffer ) {\n\t\n\t    \t\tthis.source.buffer = audioBuffer;\n\t    \t\tthis.sourceType = 'buffer';\n\t\n\t    \t\tif ( this.autoplay ) this.play();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tplay: function () {\n\t\n\t    \t\tif ( this.isPlaying === true ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar source = this.context.createBufferSource();\n\t\n\t    \t\tsource.buffer = this.source.buffer;\n\t    \t\tsource.loop = this.source.loop;\n\t    \t\tsource.onended = this.source.onended;\n\t    \t\tsource.start( 0, this.startTime );\n\t    \t\tsource.playbackRate.value = this.playbackRate;\n\t\n\t    \t\tthis.isPlaying = true;\n\t\n\t    \t\tthis.source = source;\n\t\n\t    \t\treturn this.connect();\n\t\n\t    \t},\n\t\n\t    \tpause: function () {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.source.stop();\n\t    \t\tthis.startTime = this.context.currentTime;\n\t    \t\tthis.isPlaying = false;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tstop: function () {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.source.stop();\n\t    \t\tthis.startTime = 0;\n\t    \t\tthis.isPlaying = false;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tconnect: function () {\n\t\n\t    \t\tif ( this.filters.length > 0 ) {\n\t\n\t    \t\t\tthis.source.connect( this.filters[ 0 ] );\n\t\n\t    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.source.connect( this.getOutput() );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdisconnect: function () {\n\t\n\t    \t\tif ( this.filters.length > 0 ) {\n\t\n\t    \t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\t\n\t    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.source.disconnect( this.getOutput() );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetFilters: function () {\n\t\n\t    \t\treturn this.filters;\n\t\n\t    \t},\n\t\n\t    \tsetFilters: function ( value ) {\n\t\n\t    \t\tif ( ! value ) value = [];\n\t\n\t    \t\tif ( this.isPlaying === true ) {\n\t\n\t    \t\t\tthis.disconnect();\n\t    \t\t\tthis.filters = value;\n\t    \t\t\tthis.connect();\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.filters = value;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetFilter: function () {\n\t\n\t    \t\treturn this.getFilters()[ 0 ];\n\t\n\t    \t},\n\t\n\t    \tsetFilter: function ( filter ) {\n\t\n\t    \t\treturn this.setFilters( filter ? [ filter ] : [] );\n\t\n\t    \t},\n\t\n\t    \tsetPlaybackRate: function ( value ) {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.playbackRate = value;\n\t\n\t    \t\tif ( this.isPlaying === true ) {\n\t\n\t    \t\t\tthis.source.playbackRate.value = this.playbackRate;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetPlaybackRate: function () {\n\t\n\t    \t\treturn this.playbackRate;\n\t\n\t    \t},\n\t\n\t    \tonEnded: function () {\n\t\n\t    \t\tthis.isPlaying = false;\n\t\n\t    \t},\n\t\n\t    \tgetLoop: function () {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.source.loop;\n\t\n\t    \t},\n\t\n\t    \tsetLoop: function ( value ) {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.source.loop = value;\n\t\n\t    \t},\n\t\n\t    \tgetVolume: function () {\n\t\n\t    \t\treturn this.gain.gain.value;\n\t\n\t    \t},\n\t\n\t\n\t    \tsetVolume: function ( value ) {\n\t\n\t    \t\tthis.gain.gain.value = value;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    function PositionalAudio( listener ) {\n\t\n\t    \tAudio.call( this, listener );\n\t\n\t    \tthis.panner = this.context.createPanner();\n\t    \tthis.panner.connect( this.gain );\n\t\n\t    }\n\t\n\t    PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\t\n\t    \tconstructor: PositionalAudio,\n\t\n\t    \tgetOutput: function () {\n\t\n\t    \t\treturn this.panner;\n\t\n\t    \t},\n\t\n\t    \tgetRefDistance: function () {\n\t\n\t    \t\treturn this.panner.refDistance;\n\t\n\t    \t},\n\t\n\t    \tsetRefDistance: function ( value ) {\n\t\n\t    \t\tthis.panner.refDistance = value;\n\t\n\t    \t},\n\t\n\t    \tgetRolloffFactor: function () {\n\t\n\t    \t\treturn this.panner.rolloffFactor;\n\t\n\t    \t},\n\t\n\t    \tsetRolloffFactor: function ( value ) {\n\t\n\t    \t\tthis.panner.rolloffFactor = value;\n\t\n\t    \t},\n\t\n\t    \tgetDistanceModel: function () {\n\t\n\t    \t\treturn this.panner.distanceModel;\n\t\n\t    \t},\n\t\n\t    \tsetDistanceModel: function ( value ) {\n\t\n\t    \t\tthis.panner.distanceModel = value;\n\t\n\t    \t},\n\t\n\t    \tgetMaxDistance: function () {\n\t\n\t    \t\treturn this.panner.maxDistance;\n\t\n\t    \t},\n\t\n\t    \tsetMaxDistance: function ( value ) {\n\t\n\t    \t\tthis.panner.maxDistance = value;\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: ( function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t\n\t    \t\treturn function updateMatrixWorld( force ) {\n\t\n\t    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t    \t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function AudioAnalyser( audio, fftSize ) {\n\t\n\t    \tthis.analyser = audio.context.createAnalyser();\n\t    \tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\t\n\t    \tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\t\n\t    \taudio.getOutput().connect( this.analyser );\n\t\n\t    }\n\t\n\t    Object.assign( AudioAnalyser.prototype, {\n\t\n\t    \tgetFrequencyData: function () {\n\t\n\t    \t\tthis.analyser.getByteFrequencyData( this.data );\n\t\n\t    \t\treturn this.data;\n\t\n\t    \t},\n\t\n\t    \tgetAverageFrequency: function () {\n\t\n\t    \t\tvar value = 0, data = this.getFrequencyData();\n\t\n\t    \t\tfor ( var i = 0; i < data.length; i ++ ) {\n\t\n\t    \t\t\tvalue += data[ i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn value / data.length;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * Buffered scene graph property that allows weighted accumulation.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function PropertyMixer( binding, typeName, valueSize ) {\n\t\n\t    \tthis.binding = binding;\n\t    \tthis.valueSize = valueSize;\n\t\n\t    \tvar bufferType = Float64Array,\n\t    \t\tmixFunction;\n\t\n\t    \tswitch ( typeName ) {\n\t\n\t    \t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\t\n\t    \t\tcase 'string':\n\t    \t\tcase 'bool':\n\t\n\t    \t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\t\n\t    \t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\t\n\t    \t}\n\t\n\t    \tthis.buffer = new bufferType( valueSize * 4 );\n\t    \t// layout: [ incoming | accu0 | accu1 | orig ]\n\t    \t//\n\t    \t// interpolators can use .buffer as their .result\n\t    \t// the data then goes to 'incoming'\n\t    \t//\n\t    \t// 'accu0' and 'accu1' are used frame-interleaved for\n\t    \t// the cumulative result and are compared to detect\n\t    \t// changes\n\t    \t//\n\t    \t// 'orig' stores the original state of the property\n\t\n\t    \tthis._mixBufferRegion = mixFunction;\n\t\n\t    \tthis.cumulativeWeight = 0;\n\t\n\t    \tthis.useCount = 0;\n\t    \tthis.referenceCount = 0;\n\t\n\t    }\n\t\n\t    PropertyMixer.prototype = {\n\t\n\t    \tconstructor: PropertyMixer,\n\t\n\t    \t// accumulate data in the 'incoming' region into 'accu<i>'\n\t    \taccumulate: function( accuIndex, weight ) {\n\t\n\t    \t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t    \t\t// the weight and shouldn't have made the call in the first place\n\t\n\t    \t\tvar buffer = this.buffer,\n\t    \t\t\tstride = this.valueSize,\n\t    \t\t\toffset = accuIndex * stride + stride,\n\t\n\t    \t\t\tcurrentWeight = this.cumulativeWeight;\n\t\n\t    \t\tif ( currentWeight === 0 ) {\n\t\n\t    \t\t\t// accuN := incoming * weight\n\t\n\t    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcurrentWeight = weight;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// accuN := accuN + incoming * weight\n\t\n\t    \t\t\tcurrentWeight += weight;\n\t    \t\t\tvar mix = weight / currentWeight;\n\t    \t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cumulativeWeight = currentWeight;\n\t\n\t    \t},\n\t\n\t    \t// apply the state of 'accu<i>' to the binding when accus differ\n\t    \tapply: function( accuIndex ) {\n\t\n\t    \t\tvar stride = this.valueSize,\n\t    \t\t\tbuffer = this.buffer,\n\t    \t\t\toffset = accuIndex * stride + stride,\n\t\n\t    \t\t\tweight = this.cumulativeWeight,\n\t\n\t    \t\t\tbinding = this.binding;\n\t\n\t    \t\tthis.cumulativeWeight = 0;\n\t\n\t    \t\tif ( weight < 1 ) {\n\t\n\t    \t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\n\t    \t\t\tvar originalValueOffset = stride * 3;\n\t\n\t    \t\t\tthis._mixBufferRegion(\n\t    \t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\t\n\t    \t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\t\n\t    \t\t\t\t// value has changed -> update scene graph\n\t\n\t    \t\t\t\tbinding.setValue( buffer, offset );\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// remember the state of the bound property and copy it to both accus\n\t    \tsaveOriginalState: function() {\n\t\n\t    \t\tvar binding = this.binding;\n\t\n\t    \t\tvar buffer = this.buffer,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\toriginalValueOffset = stride * 3;\n\t\n\t    \t\tbinding.getValue( buffer, originalValueOffset );\n\t\n\t    \t\t// accu[0..1] := orig -- initially detect changes against the original\n\t    \t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\t\n\t    \t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cumulativeWeight = 0;\n\t\n\t    \t},\n\t\n\t    \t// apply the state previously taken via 'saveOriginalState' to the binding\n\t    \trestoreOriginalState: function() {\n\t\n\t    \t\tvar originalValueOffset = this.valueSize * 3;\n\t    \t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\t\n\t    \t},\n\t\n\t\n\t    \t// mix functions\n\t\n\t    \t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t    \t\tif ( t >= 0.5 ) {\n\t\n\t    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t    \t\tQuaternion.slerpFlat( buffer, dstOffset,\n\t    \t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\t\n\t    \t},\n\t\n\t    \t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t    \t\tvar s = 1 - t;\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tvar j = dstOffset + i;\n\t\n\t    \t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * A reference to a real property in the scene graph.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function PropertyBinding( rootNode, path, parsedPath ) {\n\t\n\t    \tthis.path = path;\n\t    \tthis.parsedPath = parsedPath ||\n\t    \t\t\tPropertyBinding.parseTrackName( path );\n\t\n\t    \tthis.node = PropertyBinding.findNode(\n\t    \t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\t\n\t    \tthis.rootNode = rootNode;\n\t\n\t    }\n\t\n\t    PropertyBinding.prototype = {\n\t\n\t    \tconstructor: PropertyBinding,\n\t\n\t    \tgetValue: function getValue_unbound( targetArray, offset ) {\n\t\n\t    \t\tthis.bind();\n\t    \t\tthis.getValue( targetArray, offset );\n\t\n\t    \t\t// Note: This class uses a State pattern on a per-method basis:\n\t    \t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t    \t\t// prototype version of these methods with one that represents\n\t    \t\t// the bound state. When the property is not found, the methods\n\t    \t\t// become no-ops.\n\t\n\t    \t},\n\t\n\t    \tsetValue: function getValue_unbound( sourceArray, offset ) {\n\t\n\t    \t\tthis.bind();\n\t    \t\tthis.setValue( sourceArray, offset );\n\t\n\t    \t},\n\t\n\t    \t// create getter / setter pair for a property in the scene graph\n\t    \tbind: function() {\n\t\n\t    \t\tvar targetObject = this.node,\n\t    \t\t\tparsedPath = this.parsedPath,\n\t\n\t    \t\t\tobjectName = parsedPath.objectName,\n\t    \t\t\tpropertyName = parsedPath.propertyName,\n\t    \t\t\tpropertyIndex = parsedPath.propertyIndex;\n\t\n\t    \t\tif ( ! targetObject ) {\n\t\n\t    \t\t\ttargetObject = PropertyBinding.findNode(\n\t    \t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\t\n\t    \t\t\tthis.node = targetObject;\n\t\n\t    \t\t}\n\t\n\t    \t\t// set fail state so we can just 'return' on error\n\t    \t\tthis.getValue = this._getValue_unavailable;\n\t    \t\tthis.setValue = this._setValue_unavailable;\n\t\n\t     \t\t// ensure there is a value node\n\t    \t\tif ( ! targetObject ) {\n\t\n\t    \t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( objectName ) {\n\t\n\t    \t\t\tvar objectIndex = parsedPath.objectIndex;\n\t\n\t    \t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t    \t\t\tswitch ( objectName ) {\n\t\n\t    \t\t\t\tcase 'materials':\n\t\n\t    \t\t\t\t\tif ( ! targetObject.material ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( ! targetObject.material.materials ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'bones':\n\t\n\t    \t\t\t\t\tif ( ! targetObject.skeleton ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t    \t\t\t\t\t// and convert the integer string to a true integer.\n\t\n\t    \t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\t\n\t    \t\t\t\t\t// support resolving morphTarget names into indices.\n\t    \t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\t\n\t    \t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\t\n\t    \t\t\t\t\t\t\tobjectIndex = i;\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault:\n\t\n\t    \t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\ttargetObject = targetObject[ objectName ];\n\t\n\t    \t\t\t}\n\t\n\t\n\t    \t\t\tif ( objectIndex !== undefined ) {\n\t\n\t    \t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttargetObject = targetObject[ objectIndex ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// resolve property\n\t    \t\tvar nodeProperty = targetObject[ propertyName ];\n\t\n\t    \t\tif ( nodeProperty === undefined ) {\n\t\n\t    \t\t\tvar nodeName = parsedPath.nodeName;\n\t\n\t    \t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n\t    \t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\t// determine versioning scheme\n\t    \t\tvar versioning = this.Versioning.None;\n\t\n\t    \t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\t\n\t    \t\t\tversioning = this.Versioning.NeedsUpdate;\n\t    \t\t\tthis.targetObject = targetObject;\n\t\n\t    \t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\t\n\t    \t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t    \t\t\tthis.targetObject = targetObject;\n\t\n\t    \t\t}\n\t\n\t    \t\t// determine how the property gets bound\n\t    \t\tvar bindingType = this.BindingType.Direct;\n\t\n\t    \t\tif ( propertyIndex !== undefined ) {\n\t    \t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\n\t    \t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\t    \t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\n\t    \t\t\t\t// support resolving morphTarget names into indices.\n\t    \t\t\t\tif ( ! targetObject.geometry ) {\n\t\n\t    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\t\n\t    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\t\n\t    \t\t\t\t\t\tpropertyIndex = i;\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tbindingType = this.BindingType.ArrayElement;\n\t\n\t    \t\t\tthis.resolvedProperty = nodeProperty;\n\t    \t\t\tthis.propertyIndex = propertyIndex;\n\t\n\t    \t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\t    \t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\n\t    \t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\n\t    \t\t\tthis.resolvedProperty = nodeProperty;\n\t\n\t    \t\t} else if ( nodeProperty.length !== undefined ) {\n\t\n\t    \t\t\tbindingType = this.BindingType.EntireArray;\n\t\n\t    \t\t\tthis.resolvedProperty = nodeProperty;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.propertyName = propertyName;\n\t\n\t    \t\t}\n\t\n\t    \t\t// select getter / setter\n\t    \t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t    \t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\t\n\t    \t},\n\t\n\t    \tunbind: function() {\n\t\n\t    \t\tthis.node = null;\n\t\n\t    \t\t// back to the prototype version of getValue / setValue\n\t    \t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t    \t\tthis.getValue = this._getValue_unbound;\n\t    \t\tthis.setValue = this._setValue_unbound;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( PropertyBinding.prototype, { // prototype, continued\n\t\n\t    \t// these are used to \"bind\" a nonexistent property\n\t    \t_getValue_unavailable: function() {},\n\t    \t_setValue_unavailable: function() {},\n\t\n\t    \t// initial state of these methods that calls 'bind'\n\t    \t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t    \t_setValue_unbound: PropertyBinding.prototype.setValue,\n\t\n\t    \tBindingType: {\n\t    \t\tDirect: 0,\n\t    \t\tEntireArray: 1,\n\t    \t\tArrayElement: 2,\n\t    \t\tHasFromToArray: 3\n\t    \t},\n\t\n\t    \tVersioning: {\n\t    \t\tNone: 0,\n\t    \t\tNeedsUpdate: 1,\n\t    \t\tMatrixWorldNeedsUpdate: 2\n\t    \t},\n\t\n\t    \tGetterByBindingType: [\n\t\n\t    \t\tfunction getValue_direct( buffer, offset ) {\n\t\n\t    \t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction getValue_array( buffer, offset ) {\n\t\n\t    \t\t\tvar source = this.resolvedProperty;\n\t\n\t    \t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction getValue_arrayElement( buffer, offset ) {\n\t\n\t    \t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction getValue_toArray( buffer, offset ) {\n\t\n\t    \t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\t\n\t    \t\t}\n\t\n\t    \t],\n\t\n\t    \tSetterByBindingTypeAndVersioning: [\n\t\n\t    \t\t[\n\t    \t\t\t// Direct\n\t\n\t    \t\t\tfunction setValue_direct( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t], [\n\t\n\t    \t\t\t// EntireArray\n\t\n\t    \t\t\tfunction setValue_array( buffer, offset ) {\n\t\n\t    \t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t], [\n\t\n\t    \t\t\t// ArrayElement\n\t\n\t    \t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t], [\n\t\n\t    \t\t\t// HasToFromArray\n\t\n\t    \t\t\tfunction setValue_fromArray( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t]\n\t\n\t    \t]\n\t\n\t    } );\n\t\n\t    PropertyBinding.Composite =\n\t    \t\tfunction( targetGroup, path, optionalParsedPath ) {\n\t\n\t    \tvar parsedPath = optionalParsedPath ||\n\t    \t\t\tPropertyBinding.parseTrackName( path );\n\t\n\t    \tthis._targetGroup = targetGroup;\n\t    \tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\t\n\t    };\n\t\n\t    PropertyBinding.Composite.prototype = {\n\t\n\t    \tconstructor: PropertyBinding.Composite,\n\t\n\t    \tgetValue: function( array, offset ) {\n\t\n\t    \t\tthis.bind(); // bind all binding\n\t\n\t    \t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t    \t\t\tbinding = this._bindings[ firstValidIndex ];\n\t\n\t    \t\t// and only call .getValue on the first\n\t    \t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\t\n\t    \t},\n\t\n\t    \tsetValue: function( array, offset ) {\n\t\n\t    \t\tvar bindings = this._bindings;\n\t\n\t    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].setValue( array, offset );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tbind: function() {\n\t\n\t    \t\tvar bindings = this._bindings;\n\t\n\t    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].bind();\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tunbind: function() {\n\t\n\t    \t\tvar bindings = this._bindings;\n\t\n\t    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].unbind();\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    PropertyBinding.create = function( root, path, parsedPath ) {\n\t\n\t    \tif ( ! ( (root && root.isAnimationObjectGroup) ) ) {\n\t\n\t    \t\treturn new PropertyBinding( root, path, parsedPath );\n\t\n\t    \t} else {\n\t\n\t    \t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    PropertyBinding.parseTrackName = function( trackName ) {\n\t\n\t    \t// matches strings in the form of:\n\t    \t//    nodeName.property\n\t    \t//    nodeName.property[accessor]\n\t    \t//    nodeName.material.property[accessor]\n\t    \t//    uuid.property[accessor]\n\t    \t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t    \t//    parentName/nodeName.property\n\t    \t//    parentName/parentName/nodeName.property[index]\n\t    \t//    .bone[Armature.DEF_cog].position\n\t    \t//    scene:helium_balloon_model:helium_balloon_model.position\n\t    \t// created and tested via https://regex101.com/#javascript\n\t\n\t    \tvar re = /^((?:\\w+[\\/:])*)(\\w+)?(?:\\.(\\w+)(?:\\[(.+)\\])?)?\\.(\\w+)(?:\\[(.+)\\])?$/;\n\t    \tvar matches = re.exec( trackName );\n\t\n\t    \tif ( ! matches ) {\n\t\n\t    \t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\t\n\t    \t}\n\t\n\t    \tvar results = {\n\t    \t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t    \t\tnodeName: matches[ 2 ], \t// allowed to be null, specified root node.\n\t    \t\tobjectName: matches[ 3 ],\n\t    \t\tobjectIndex: matches[ 4 ],\n\t    \t\tpropertyName: matches[ 5 ],\n\t    \t\tpropertyIndex: matches[ 6 ]\t// allowed to be null, specifies that the whole property is set.\n\t    \t};\n\t\n\t    \tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\t\n\t    \t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\t\n\t    \t}\n\t\n\t    \treturn results;\n\t\n\t    };\n\t\n\t    PropertyBinding.findNode = function( root, nodeName ) {\n\t\n\t    \tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\t\n\t    \t\treturn root;\n\t\n\t    \t}\n\t\n\t    \t// search into skeleton bones.\n\t    \tif ( root.skeleton ) {\n\t\n\t    \t\tvar searchSkeleton = function( skeleton ) {\n\t\n\t    \t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\t\n\t    \t\t\t\tvar bone = skeleton.bones[ i ];\n\t\n\t    \t\t\t\tif ( bone.name === nodeName ) {\n\t\n\t    \t\t\t\t\treturn bone;\n\t\n\t    \t\t\t\t}\n\t    \t\t\t}\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t};\n\t\n\t    \t\tvar bone = searchSkeleton( root.skeleton );\n\t\n\t    \t\tif ( bone ) {\n\t\n\t    \t\t\treturn bone;\n\t\n\t    \t\t}\n\t    \t}\n\t\n\t    \t// search into node subtree.\n\t    \tif ( root.children ) {\n\t\n\t    \t\tvar searchNodeSubtree = function( children ) {\n\t\n\t    \t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\t\n\t    \t\t\t\tvar childNode = children[ i ];\n\t\n\t    \t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\t\n\t    \t\t\t\t\treturn childNode;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\t\n\t    \t\t\t\tif ( result ) return result;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t};\n\t\n\t    \t\tvar subTreeNode = searchNodeSubtree( root.children );\n\t\n\t    \t\tif ( subTreeNode ) {\n\t\n\t    \t\t\treturn subTreeNode;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn null;\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * A group of objects that receives a shared animation state.\n\t     *\n\t     * Usage:\n\t     *\n\t     * \t-\tAdd objects you would otherwise pass as 'root' to the\n\t     * \t\tconstructor or the .clipAction method of AnimationMixer.\n\t     *\n\t     * \t-\tInstead pass this object as 'root'.\n\t     *\n\t     * \t-\tYou can also add and remove objects later when the mixer\n\t     * \t\tis running.\n\t     *\n\t     * Note:\n\t     *\n\t     *  \tObjects of this class appear as one object to the mixer,\n\t     *  \tso cache control of the individual objects must be done\n\t     *  \ton the group.\n\t     *\n\t     * Limitation:\n\t     *\n\t     * \t- \tThe animated properties must be compatible among the\n\t     * \t\tall objects in the group.\n\t     *\n\t     *  -\tA single property can either be controlled through a\n\t     *  \ttarget group or directly, but not both.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function AnimationObjectGroup( var_args ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \t// cached objects followed by the active ones\n\t    \tthis._objects = Array.prototype.slice.call( arguments );\n\t\n\t    \tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t    \t// note: read by PropertyBinding.Composite\n\t\n\t    \tvar indices = {};\n\t    \tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\t\n\t    \tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\tindices[ arguments[ i ].uuid ] = i;\n\t\n\t    \t}\n\t\n\t    \tthis._paths = [];\t\t\t\t\t// inside: string\n\t    \tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\t    \tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\t    \tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\t\n\t    \tvar scope = this;\n\t\n\t    \tthis.stats = {\n\t\n\t    \t\tobjects: {\n\t    \t\t\tget total() { return scope._objects.length; },\n\t    \t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n\t    \t\t},\n\t\n\t    \t\tget bindingsPerObject() { return scope._bindings.length; }\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    AnimationObjectGroup.prototype = {\n\t\n\t    \tconstructor: AnimationObjectGroup,\n\t\n\t    \tisAnimationObjectGroup: true,\n\t\n\t    \tadd: function( var_args ) {\n\t\n\t    \t\tvar objects = this._objects,\n\t    \t\t\tnObjects = objects.length,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tindicesByUUID = this._indicesByUUID,\n\t    \t\t\tpaths = this._paths,\n\t    \t\t\tparsedPaths = this._parsedPaths,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = bindings.length;\n\t\n\t    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = arguments[ i ],\n\t    \t\t\t\tuuid = object.uuid,\n\t    \t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t    \t\t\tif ( index === undefined ) {\n\t\n\t    \t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\n\t    \t\t\t\tindex = nObjects ++;\n\t    \t\t\t\tindicesByUUID[ uuid ] = index;\n\t    \t\t\t\tobjects.push( object );\n\t\n\t    \t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\tbindings[ j ].push(\n\t    \t\t\t\t\t\t\tnew PropertyBinding(\n\t    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( index < nCachedObjects ) {\n\t\n\t    \t\t\t\tvar knownObject = objects[ index ];\n\t\n\t    \t\t\t\t// move existing object to the ACTIVE region\n\t\n\t    \t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t    \t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\t\n\t    \t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t    \t\t\t\tobjects[ index ] = lastCachedObject;\n\t\n\t    \t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t    \t\t\t\tobjects[ firstActiveIndex ] = object;\n\t\n\t    \t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t    \t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\t\n\t    \t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\n\t    \t\t\t\t\tif ( binding === undefined ) {\n\t\n\t    \t\t\t\t\t\t// since we do not bother to create new bindings\n\t    \t\t\t\t\t\t// for objects that are cached, the binding may\n\t    \t\t\t\t\t\t// or may not exist\n\t\n\t    \t\t\t\t\t\tbinding = new PropertyBinding(\n\t    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( objects[ index ] !== knownObject) {\n\t\n\t    \t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n\t    \t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n\t    \t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\t\n\t    \t\t\t} // else the object is already where we want it to be\n\t\n\t    \t\t} // for arguments\n\t\n\t    \t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t    \t},\n\t\n\t    \tremove: function( var_args ) {\n\t\n\t    \t\tvar objects = this._objects,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tindicesByUUID = this._indicesByUUID,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = bindings.length;\n\t\n\t    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = arguments[ i ],\n\t    \t\t\t\tuuid = object.uuid,\n\t    \t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t    \t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\t\n\t    \t\t\t\t// move existing object into the CACHED region\n\t\n\t    \t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t    \t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\t\n\t    \t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t    \t\t\t\tobjects[ index ] = firstActiveObject;\n\t\n\t    \t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t    \t\t\t\tobjects[ lastCachedIndex ] = object;\n\t\n\t    \t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t    \t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\t\n\t    \t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t    \t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} // for arguments\n\t\n\t    \t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t    \t},\n\t\n\t    \t// remove & forget\n\t    \tuncache: function( var_args ) {\n\t\n\t    \t\tvar objects = this._objects,\n\t    \t\t\tnObjects = objects.length,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tindicesByUUID = this._indicesByUUID,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = bindings.length;\n\t\n\t    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = arguments[ i ],\n\t    \t\t\t\tuuid = object.uuid,\n\t    \t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t    \t\t\tif ( index !== undefined ) {\n\t\n\t    \t\t\t\tdelete indicesByUUID[ uuid ];\n\t\n\t    \t\t\t\tif ( index < nCachedObjects ) {\n\t\n\t    \t\t\t\t\t// object is cached, shrink the CACHED region\n\t\n\t    \t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t    \t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t    \t\t\t\t\t\tlastIndex = -- nObjects,\n\t    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\t\n\t    \t\t\t\t\t// last cached object takes this object's place\n\t    \t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t    \t\t\t\t\tobjects[ index ] = lastCachedObject;\n\t\n\t    \t\t\t\t\t// last object goes to the activated slot and pop\n\t    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t    \t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t    \t\t\t\t\tobjects.pop();\n\t\n\t    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t    \t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t    \t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\t\n\t    \t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t    \t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t    \t\t\t\t\t\tbindingsForPath.pop();\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// object is active, just swap with the last and pop\n\t\n\t    \t\t\t\t\tvar lastIndex = -- nObjects,\n\t    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\t\n\t    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t    \t\t\t\t\tobjects[ index ] = lastObject;\n\t    \t\t\t\t\tobjects.pop();\n\t\n\t    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\t\n\t    \t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t    \t\t\t\t\t\tbindingsForPath.pop();\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} // cached or active\n\t\n\t    \t\t\t} // if object is known\n\t\n\t    \t\t} // for arguments\n\t\n\t    \t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t    \t},\n\t\n\t    \t// Internal interface used by befriended PropertyBinding.Composite:\n\t\n\t    \tsubscribe_: function( path, parsedPath ) {\n\t    \t\t// returns an array of bindings for the given path that is changed\n\t    \t\t// according to the contained objects in the group\n\t\n\t    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t    \t\t\tindex = indicesByPath[ path ],\n\t    \t\t\tbindings = this._bindings;\n\t\n\t    \t\tif ( index !== undefined ) return bindings[ index ];\n\t\n\t    \t\tvar paths = this._paths,\n\t    \t\t\tparsedPaths = this._parsedPaths,\n\t    \t\t\tobjects = this._objects,\n\t    \t\t\tnObjects = objects.length,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tbindingsForPath = new Array( nObjects );\n\t\n\t    \t\tindex = bindings.length;\n\t\n\t    \t\tindicesByPath[ path ] = index;\n\t\n\t    \t\tpaths.push( path );\n\t    \t\tparsedPaths.push( parsedPath );\n\t    \t\tbindings.push( bindingsForPath );\n\t\n\t    \t\tfor ( var i = nCachedObjects,\n\t    \t\t\t\tn = objects.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = objects[ i ];\n\t\n\t    \t\t\tbindingsForPath[ i ] =\n\t    \t\t\t\t\tnew PropertyBinding( object, path, parsedPath );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn bindingsForPath;\n\t\n\t    \t},\n\t\n\t    \tunsubscribe_: function( path ) {\n\t    \t\t// tells the group to forget about a property path and no longer\n\t    \t\t// update the array previously obtained with 'subscribe_'\n\t\n\t    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t    \t\t\tindex = indicesByPath[ path ];\n\t\n\t    \t\tif ( index !== undefined ) {\n\t\n\t    \t\t\tvar paths = this._paths,\n\t    \t\t\t\tparsedPaths = this._parsedPaths,\n\t    \t\t\t\tbindings = this._bindings,\n\t    \t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t    \t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t    \t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\t\n\t    \t\t\tindicesByPath[ lastBindingsPath ] = index;\n\t\n\t    \t\t\tbindings[ index ] = lastBindings;\n\t    \t\t\tbindings.pop();\n\t\n\t    \t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t    \t\t\tparsedPaths.pop();\n\t\n\t    \t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t    \t\t\tpaths.pop();\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * Action provided by AnimationMixer for scheduling clip playback on specific\n\t     * objects.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     *\n\t     */\n\t\n\t    function AnimationAction( mixer, clip, localRoot ) {\n\t\n\t    \tthis._mixer = mixer;\n\t    \tthis._clip = clip;\n\t    \tthis._localRoot = localRoot || null;\n\t\n\t    \tvar tracks = clip.tracks,\n\t    \t\tnTracks = tracks.length,\n\t    \t\tinterpolants = new Array( nTracks );\n\t\n\t    \tvar interpolantSettings = {\n\t    \t\t\tendingStart: \tZeroCurvatureEnding,\n\t    \t\t\tendingEnd:\t\tZeroCurvatureEnding\n\t    \t};\n\t\n\t    \tfor ( var i = 0; i !== nTracks; ++ i ) {\n\t\n\t    \t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t    \t\tinterpolants[ i ] = interpolant;\n\t    \t\tinterpolant.settings = interpolantSettings;\n\t\n\t    \t}\n\t\n\t    \tthis._interpolantSettings = interpolantSettings;\n\t\n\t    \tthis._interpolants = interpolants;\t// bound by the mixer\n\t\n\t    \t// inside: PropertyMixer (managed by the mixer)\n\t    \tthis._propertyBindings = new Array( nTracks );\n\t\n\t    \tthis._cacheIndex = null;\t\t\t// for the memory manager\n\t    \tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\t\n\t    \tthis._timeScaleInterpolant = null;\n\t    \tthis._weightInterpolant = null;\n\t\n\t    \tthis.loop = LoopRepeat;\n\t    \tthis._loopCount = -1;\n\t\n\t    \t// global mixer time when the action is to be started\n\t    \t// it's set back to 'null' upon start of the action\n\t    \tthis._startTime = null;\n\t\n\t    \t// scaled local time of the action\n\t    \t// gets clamped or wrapped to 0..clip.duration according to loop\n\t    \tthis.time = 0;\n\t\n\t    \tthis.timeScale = 1;\n\t    \tthis._effectiveTimeScale = 1;\n\t\n\t    \tthis.weight = 1;\n\t    \tthis._effectiveWeight = 1;\n\t\n\t    \tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\t\n\t    \tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n\t    \tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\t\n\t    \tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\t\n\t    \tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\t    \tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\t\n\t    };\n\t\n\t    AnimationAction.prototype = {\n\t\n\t    \tconstructor: AnimationAction,\n\t\n\t    \t// State & Scheduling\n\t\n\t    \tplay: function() {\n\t\n\t    \t\tthis._mixer._activateAction( this );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tstop: function() {\n\t\n\t    \t\tthis._mixer._deactivateAction( this );\n\t\n\t    \t\treturn this.reset();\n\t\n\t    \t},\n\t\n\t    \treset: function() {\n\t\n\t    \t\tthis.paused = false;\n\t    \t\tthis.enabled = true;\n\t\n\t    \t\tthis.time = 0;\t\t\t// restart clip\n\t    \t\tthis._loopCount = -1;\t// forget previous loops\n\t    \t\tthis._startTime = null;\t// forget scheduling\n\t\n\t    \t\treturn this.stopFading().stopWarping();\n\t\n\t    \t},\n\t\n\t    \tisRunning: function() {\n\t\n\t    \t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t    \t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\t\n\t    \t},\n\t\n\t    \t// return true when play has been called\n\t    \tisScheduled: function() {\n\t\n\t    \t\treturn this._mixer._isActiveAction( this );\n\t\n\t    \t},\n\t\n\t    \tstartAt: function( time ) {\n\t\n\t    \t\tthis._startTime = time;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetLoop: function( mode, repetitions ) {\n\t\n\t    \t\tthis.loop = mode;\n\t    \t\tthis.repetitions = repetitions;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// Weight\n\t\n\t    \t// set the weight stopping any scheduled fading\n\t    \t// although .enabled = false yields an effective weight of zero, this\n\t    \t// method does *not* change .enabled, because it would be confusing\n\t    \tsetEffectiveWeight: function( weight ) {\n\t\n\t    \t\tthis.weight = weight;\n\t\n\t    \t\t// note: same logic as when updated at runtime\n\t    \t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\n\t    \t\treturn this.stopFading();\n\t\n\t    \t},\n\t\n\t    \t// return the weight considering fading and .enabled\n\t    \tgetEffectiveWeight: function() {\n\t\n\t    \t\treturn this._effectiveWeight;\n\t\n\t    \t},\n\t\n\t    \tfadeIn: function( duration ) {\n\t\n\t    \t\treturn this._scheduleFading( duration, 0, 1 );\n\t\n\t    \t},\n\t\n\t    \tfadeOut: function( duration ) {\n\t\n\t    \t\treturn this._scheduleFading( duration, 1, 0 );\n\t\n\t    \t},\n\t\n\t    \tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\t\n\t    \t\tfadeOutAction.fadeOut( duration );\n\t    \t\tthis.fadeIn( duration );\n\t\n\t    \t\tif( warp ) {\n\t\n\t    \t\t\tvar fadeInDuration = this._clip.duration,\n\t    \t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\n\t    \t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t    \t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\n\t    \t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t    \t\t\tthis.warp( endStartRatio, 1.0, duration );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\t\n\t    \t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\t\n\t    \t},\n\t\n\t    \tstopFading: function() {\n\t\n\t    \t\tvar weightInterpolant = this._weightInterpolant;\n\t\n\t    \t\tif ( weightInterpolant !== null ) {\n\t\n\t    \t\t\tthis._weightInterpolant = null;\n\t    \t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// Time Scale Control\n\t\n\t    \t// set the weight stopping any scheduled warping\n\t    \t// although .paused = true yields an effective time scale of zero, this\n\t    \t// method does *not* change .paused, because it would be confusing\n\t    \tsetEffectiveTimeScale: function( timeScale ) {\n\t\n\t    \t\tthis.timeScale = timeScale;\n\t    \t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\t\n\t    \t\treturn this.stopWarping();\n\t\n\t    \t},\n\t\n\t    \t// return the time scale considering warping and .paused\n\t    \tgetEffectiveTimeScale: function() {\n\t\n\t    \t\treturn this._effectiveTimeScale;\n\t\n\t    \t},\n\t\n\t    \tsetDuration: function( duration ) {\n\t\n\t    \t\tthis.timeScale = this._clip.duration / duration;\n\t\n\t    \t\treturn this.stopWarping();\n\t\n\t    \t},\n\t\n\t    \tsyncWith: function( action ) {\n\t\n\t    \t\tthis.time = action.time;\n\t    \t\tthis.timeScale = action.timeScale;\n\t\n\t    \t\treturn this.stopWarping();\n\t\n\t    \t},\n\t\n\t    \thalt: function( duration ) {\n\t\n\t    \t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\t\n\t    \t},\n\t\n\t    \twarp: function( startTimeScale, endTimeScale, duration ) {\n\t\n\t    \t\tvar mixer = this._mixer, now = mixer.time,\n\t    \t\t\tinterpolant = this._timeScaleInterpolant,\n\t\n\t    \t\t\ttimeScale = this.timeScale;\n\t\n\t    \t\tif ( interpolant === null ) {\n\t\n\t    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t    \t\t\tthis._timeScaleInterpolant = interpolant;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar times = interpolant.parameterPositions,\n\t    \t\t\tvalues = interpolant.sampleValues;\n\t\n\t    \t\ttimes[ 0 ] = now;\n\t    \t\ttimes[ 1 ] = now + duration;\n\t\n\t    \t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t    \t\tvalues[ 1 ] = endTimeScale / timeScale;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tstopWarping: function() {\n\t\n\t    \t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\t\n\t    \t\tif ( timeScaleInterpolant !== null ) {\n\t\n\t    \t\t\tthis._timeScaleInterpolant = null;\n\t    \t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// Object Accessors\n\t\n\t    \tgetMixer: function() {\n\t\n\t    \t\treturn this._mixer;\n\t\n\t    \t},\n\t\n\t    \tgetClip: function() {\n\t\n\t    \t\treturn this._clip;\n\t\n\t    \t},\n\t\n\t    \tgetRoot: function() {\n\t\n\t    \t\treturn this._localRoot || this._mixer._root;\n\t\n\t    \t},\n\t\n\t    \t// Interna\n\t\n\t    \t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n\t    \t\t// called by the mixer\n\t\n\t    \t\tvar startTime = this._startTime;\n\t\n\t    \t\tif ( startTime !== null ) {\n\t\n\t    \t\t\t// check for scheduled start of action\n\t\n\t    \t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t    \t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\t\n\t    \t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// start\n\t\n\t    \t\t\tthis._startTime = null; // unschedule\n\t    \t\t\tdeltaTime = timeDirection * timeRunning;\n\t\n\t    \t\t}\n\t\n\t    \t\t// apply time scale and advance time\n\t\n\t    \t\tdeltaTime *= this._updateTimeScale( time );\n\t    \t\tvar clipTime = this._updateTime( deltaTime );\n\t\n\t    \t\t// note: _updateTime may disable the action resulting in\n\t    \t\t// an effective weight of 0\n\t\n\t    \t\tvar weight = this._updateWeight( time );\n\t\n\t    \t\tif ( weight > 0 ) {\n\t\n\t    \t\t\tvar interpolants = this._interpolants;\n\t    \t\t\tvar propertyMixers = this._propertyBindings;\n\t\n\t    \t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\t\n\t    \t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t    \t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_updateWeight: function( time ) {\n\t\n\t    \t\tvar weight = 0;\n\t\n\t    \t\tif ( this.enabled ) {\n\t\n\t    \t\t\tweight = this.weight;\n\t    \t\t\tvar interpolant = this._weightInterpolant;\n\t\n\t    \t\t\tif ( interpolant !== null ) {\n\t\n\t    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\t\n\t    \t\t\t\tweight *= interpolantValue;\n\t\n\t    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\t\n\t    \t\t\t\t\tthis.stopFading();\n\t\n\t    \t\t\t\t\tif ( interpolantValue === 0 ) {\n\t\n\t    \t\t\t\t\t\t// faded out, disable\n\t    \t\t\t\t\t\tthis.enabled = false;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._effectiveWeight = weight;\n\t    \t\treturn weight;\n\t\n\t    \t},\n\t\n\t    \t_updateTimeScale: function( time ) {\n\t\n\t    \t\tvar timeScale = 0;\n\t\n\t    \t\tif ( ! this.paused ) {\n\t\n\t    \t\t\ttimeScale = this.timeScale;\n\t\n\t    \t\t\tvar interpolant = this._timeScaleInterpolant;\n\t\n\t    \t\t\tif ( interpolant !== null ) {\n\t\n\t    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\t\n\t    \t\t\t\ttimeScale *= interpolantValue;\n\t\n\t    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\t\n\t    \t\t\t\t\tthis.stopWarping();\n\t\n\t    \t\t\t\t\tif ( timeScale === 0 ) {\n\t\n\t    \t\t\t\t\t\t// motion has halted, pause\n\t    \t\t\t\t\t\tthis.paused = true;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t// warp done - apply final time scale\n\t    \t\t\t\t\t\tthis.timeScale = timeScale;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._effectiveTimeScale = timeScale;\n\t    \t\treturn timeScale;\n\t\n\t    \t},\n\t\n\t    \t_updateTime: function( deltaTime ) {\n\t\n\t    \t\tvar time = this.time + deltaTime;\n\t\n\t    \t\tif ( deltaTime === 0 ) return time;\n\t\n\t    \t\tvar duration = this._clip.duration,\n\t\n\t    \t\t\tloop = this.loop,\n\t    \t\t\tloopCount = this._loopCount;\n\t\n\t    \t\tif ( loop === LoopOnce ) {\n\t\n\t    \t\t\tif ( loopCount === -1 ) {\n\t    \t\t\t\t// just started\n\t\n\t    \t\t\t\tthis.loopCount = 0;\n\t    \t\t\t\tthis._setEndings( true, true, false );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\thandle_stop: {\n\t\n\t    \t\t\t\tif ( time >= duration ) {\n\t\n\t    \t\t\t\t\ttime = duration;\n\t\n\t    \t\t\t\t} else if ( time < 0 ) {\n\t\n\t    \t\t\t\t\ttime = 0;\n\t\n\t    \t\t\t\t} else break handle_stop;\n\t\n\t    \t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t    \t\t\t\telse this.enabled = false;\n\t\n\t    \t\t\t\tthis._mixer.dispatchEvent( {\n\t    \t\t\t\t\ttype: 'finished', action: this,\n\t    \t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t    \t\t\t\t} );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else { // repetitive Repeat or PingPong\n\t\n\t    \t\t\tvar pingPong = ( loop === LoopPingPong );\n\t\n\t    \t\t\tif ( loopCount === -1 ) {\n\t    \t\t\t\t// just started\n\t\n\t    \t\t\t\tif ( deltaTime >= 0 ) {\n\t\n\t    \t\t\t\t\tloopCount = 0;\n\t\n\t    \t\t\t\t\tthis._setEndings(\n\t    \t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// when looping in reverse direction, the initial\n\t    \t\t\t\t\t// transition through zero counts as a repetition,\n\t    \t\t\t\t\t// so leave loopCount at -1\n\t\n\t    \t\t\t\t\tthis._setEndings(\n\t    \t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( time >= duration || time < 0 ) {\n\t    \t\t\t\t// wrap around\n\t\n\t    \t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t    \t\t\t\ttime -= duration * loopDelta;\n\t\n\t    \t\t\t\tloopCount += Math.abs( loopDelta );\n\t\n\t    \t\t\t\tvar pending = this.repetitions - loopCount;\n\t\n\t    \t\t\t\tif ( pending < 0 ) {\n\t    \t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\n\t    \t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t    \t\t\t\t\telse this.enabled = false;\n\t\n\t    \t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\n\t    \t\t\t\t\tthis._mixer.dispatchEvent( {\n\t    \t\t\t\t\t\ttype: 'finished', action: this,\n\t    \t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t} else {\n\t    \t\t\t\t\t// keep running\n\t\n\t    \t\t\t\t\tif ( pending === 0 ) {\n\t    \t\t\t\t\t\t// entering the last round\n\t\n\t    \t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t    \t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tthis._loopCount = loopCount;\n\t\n\t    \t\t\t\t\tthis._mixer.dispatchEvent( {\n\t    \t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\t    \t\t\t\t// invert time for the \"pong round\"\n\t\n\t    \t\t\t\tthis.time = time;\n\t    \t\t\t\treturn duration - time;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.time = time;\n\t    \t\treturn time;\n\t\n\t    \t},\n\t\n\t    \t_setEndings: function( atStart, atEnd, pingPong ) {\n\t\n\t    \t\tvar settings = this._interpolantSettings;\n\t\n\t    \t\tif ( pingPong ) {\n\t\n\t    \t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n\t    \t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\n\t    \t\t\tif ( atStart ) {\n\t\n\t    \t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n\t    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( atEnd ) {\n\t\n\t    \t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n\t    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_scheduleFading: function( duration, weightNow, weightThen ) {\n\t\n\t    \t\tvar mixer = this._mixer, now = mixer.time,\n\t    \t\t\tinterpolant = this._weightInterpolant;\n\t\n\t    \t\tif ( interpolant === null ) {\n\t\n\t    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t    \t\t\tthis._weightInterpolant = interpolant;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar times = interpolant.parameterPositions,\n\t    \t\t\tvalues = interpolant.sampleValues;\n\t\n\t    \t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t    \t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * Player for AnimationClips.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function AnimationMixer( root ) {\n\t\n\t    \tthis._root = root;\n\t    \tthis._initMemoryManager();\n\t    \tthis._accuIndex = 0;\n\t\n\t    \tthis.time = 0;\n\t\n\t    \tthis.timeScale = 1.0;\n\t\n\t    }\n\t\n\t    Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {\n\t\n\t    \t// return an action for a clip optionally using a custom root target\n\t    \t// object (this method allocates a lot of dynamic memory in case a\n\t    \t// previously unknown clip/root combination is specified)\n\t    \tclipAction: function( clip, optionalRoot ) {\n\t\n\t    \t\tvar root = optionalRoot || this._root,\n\t    \t\t\trootUuid = root.uuid,\n\t\n\t    \t\t\tclipObject = typeof clip === 'string' ?\n\t    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\t\n\t    \t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\t\n\t    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t    \t\t\tprototypeAction = null;\n\t\n\t    \t\tif ( actionsForClip !== undefined ) {\n\t\n\t    \t\t\tvar existingAction =\n\t    \t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\t\n\t    \t\t\tif ( existingAction !== undefined ) {\n\t\n\t    \t\t\t\treturn existingAction;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// we know the clip, so we don't have to parse all\n\t    \t\t\t// the bindings again but can just copy\n\t    \t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\t\n\t    \t\t\t// also, take the clip from the prototype action\n\t    \t\t\tif ( clipObject === null )\n\t    \t\t\t\tclipObject = prototypeAction._clip;\n\t\n\t    \t\t}\n\t\n\t    \t\t// clip must be known when specified via string\n\t    \t\tif ( clipObject === null ) return null;\n\t\n\t    \t\t// allocate all resources required to run it\n\t    \t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\t\n\t    \t\tthis._bindAction( newAction, prototypeAction );\n\t\n\t    \t\t// and make the action known to the memory manager\n\t    \t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\t\n\t    \t\treturn newAction;\n\t\n\t    \t},\n\t\n\t    \t// get an existing action\n\t    \texistingAction: function( clip, optionalRoot ) {\n\t\n\t    \t\tvar root = optionalRoot || this._root,\n\t    \t\t\trootUuid = root.uuid,\n\t\n\t    \t\t\tclipObject = typeof clip === 'string' ?\n\t    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\t\n\t    \t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\n\t    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\t\n\t    \t\tif ( actionsForClip !== undefined ) {\n\t\n\t    \t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t},\n\t\n\t    \t// deactivates all previously scheduled actions\n\t    \tstopAllAction: function() {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tnActions = this._nActiveActions,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = this._nActiveBindings;\n\t\n\t    \t\tthis._nActiveActions = 0;\n\t    \t\tthis._nActiveBindings = 0;\n\t\n\t    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\t\n\t    \t\t\tactions[ i ].reset();\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].useCount = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// advance the time and update apply the animation\n\t    \tupdate: function( deltaTime ) {\n\t\n\t    \t\tdeltaTime *= this.timeScale;\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tnActions = this._nActiveActions,\n\t\n\t    \t\t\ttime = this.time += deltaTime,\n\t    \t\t\ttimeDirection = Math.sign( deltaTime ),\n\t\n\t    \t\t\taccuIndex = this._accuIndex ^= 1;\n\t\n\t    \t\t// run active actions\n\t\n\t    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\t\n\t    \t\t\tvar action = actions[ i ];\n\t\n\t    \t\t\tif ( action.enabled ) {\n\t\n\t    \t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// update scene graph\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tnBindings = this._nActiveBindings;\n\t\n\t    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].apply( accuIndex );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// return this mixer's root target object\n\t    \tgetRoot: function() {\n\t\n\t    \t\treturn this._root;\n\t\n\t    \t},\n\t\n\t    \t// free all resources specific to a particular clip\n\t    \tuncacheClip: function( clip ) {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tclipUuid = clip.uuid,\n\t    \t\t\tactionsByClip = this._actionsByClip,\n\t    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\t\n\t    \t\tif ( actionsForClip !== undefined ) {\n\t\n\t    \t\t\t// note: just calling _removeInactiveAction would mess up the\n\t    \t\t\t// iteration state and also require updating the state we can\n\t    \t\t\t// just throw away\n\t\n\t    \t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\t\n\t    \t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar action = actionsToRemove[ i ];\n\t\n\t    \t\t\t\tthis._deactivateAction( action );\n\t\n\t    \t\t\t\tvar cacheIndex = action._cacheIndex,\n\t    \t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\t\n\t    \t\t\t\taction._cacheIndex = null;\n\t    \t\t\t\taction._byClipCacheIndex = null;\n\t\n\t    \t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t    \t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t    \t\t\t\tactions.pop();\n\t\n\t    \t\t\t\tthis._removeInactiveBindingsForAction( action );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tdelete actionsByClip[ clipUuid ];\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// free all resources specific to a particular root target object\n\t    \tuncacheRoot: function( root ) {\n\t\n\t    \t\tvar rootUuid = root.uuid,\n\t    \t\t\tactionsByClip = this._actionsByClip;\n\t\n\t    \t\tfor ( var clipUuid in actionsByClip ) {\n\t\n\t    \t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t    \t\t\t\taction = actionByRoot[ rootUuid ];\n\t\n\t    \t\t\tif ( action !== undefined ) {\n\t\n\t    \t\t\t\tthis._deactivateAction( action );\n\t    \t\t\t\tthis._removeInactiveAction( action );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\t\n\t    \t\tif ( bindingByName !== undefined ) {\n\t\n\t    \t\t\tfor ( var trackName in bindingByName ) {\n\t\n\t    \t\t\t\tvar binding = bindingByName[ trackName ];\n\t    \t\t\t\tbinding.restoreOriginalState();\n\t    \t\t\t\tthis._removeInactiveBinding( binding );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// remove a targeted clip from the cache\n\t    \tuncacheAction: function( clip, optionalRoot ) {\n\t\n\t    \t\tvar action = this.existingAction( clip, optionalRoot );\n\t\n\t    \t\tif ( action !== null ) {\n\t\n\t    \t\t\tthis._deactivateAction( action );\n\t    \t\t\tthis._removeInactiveAction( action );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    // Implementation details:\n\t\n\t    Object.assign( AnimationMixer.prototype, {\n\t\n\t    \t_bindAction: function( action, prototypeAction ) {\n\t\n\t    \t\tvar root = action._localRoot || this._root,\n\t    \t\t\ttracks = action._clip.tracks,\n\t    \t\t\tnTracks = tracks.length,\n\t    \t\t\tbindings = action._propertyBindings,\n\t    \t\t\tinterpolants = action._interpolants,\n\t    \t\t\trootUuid = root.uuid,\n\t    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\t\n\t    \t\tif ( bindingsByName === undefined ) {\n\t\n\t    \t\t\tbindingsByName = {};\n\t    \t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\t\n\t    \t\t\tvar track = tracks[ i ],\n\t    \t\t\t\ttrackName = track.name,\n\t    \t\t\t\tbinding = bindingsByName[ trackName ];\n\t\n\t    \t\t\tif ( binding !== undefined ) {\n\t\n\t    \t\t\t\tbindings[ i ] = binding;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tbinding = bindings[ i ];\n\t\n\t    \t\t\t\tif ( binding !== undefined ) {\n\t\n\t    \t\t\t\t\t// existing binding, make sure the cache knows\n\t\n\t    \t\t\t\t\tif ( binding._cacheIndex === null ) {\n\t\n\t    \t\t\t\t\t\t++ binding.referenceCount;\n\t    \t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tcontinue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar path = prototypeAction && prototypeAction.\n\t    \t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\t\n\t    \t\t\t\tbinding = new PropertyMixer(\n\t    \t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t    \t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\t\n\t    \t\t\t\t++ binding.referenceCount;\n\t    \t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\t\n\t    \t\t\t\tbindings[ i ] = binding;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_activateAction: function( action ) {\n\t\n\t    \t\tif ( ! this._isActiveAction( action ) ) {\n\t\n\t    \t\t\tif ( action._cacheIndex === null ) {\n\t\n\t    \t\t\t\t// this action has been forgotten by the cache, but the user\n\t    \t\t\t\t// appears to be still using it -> rebind\n\t\n\t    \t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t    \t\t\t\t\tclipUuid = action._clip.uuid,\n\t    \t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\t\n\t    \t\t\t\tthis._bindAction( action,\n\t    \t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\t\n\t    \t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar bindings = action._propertyBindings;\n\t\n\t    \t\t\t// increment reference counts / sort out state\n\t    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar binding = bindings[ i ];\n\t\n\t    \t\t\t\tif ( binding.useCount ++ === 0 ) {\n\t\n\t    \t\t\t\t\tthis._lendBinding( binding );\n\t    \t\t\t\t\tbinding.saveOriginalState();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis._lendAction( action );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_deactivateAction: function( action ) {\n\t\n\t    \t\tif ( this._isActiveAction( action ) ) {\n\t\n\t    \t\t\tvar bindings = action._propertyBindings;\n\t\n\t    \t\t\t// decrement reference counts / sort out state\n\t    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar binding = bindings[ i ];\n\t\n\t    \t\t\t\tif ( -- binding.useCount === 0 ) {\n\t\n\t    \t\t\t\t\tbinding.restoreOriginalState();\n\t    \t\t\t\t\tthis._takeBackBinding( binding );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis._takeBackAction( action );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// Memory manager\n\t\n\t    \t_initMemoryManager: function() {\n\t\n\t    \t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t    \t\tthis._nActiveActions = 0;\n\t\n\t    \t\tthis._actionsByClip = {};\n\t    \t\t// inside:\n\t    \t\t// {\n\t    \t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n\t    \t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n\t    \t\t// }\n\t\n\t\n\t    \t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t    \t\tthis._nActiveBindings = 0;\n\t\n\t    \t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\t\n\t\n\t    \t\tthis._controlInterpolants = []; // same game as above\n\t    \t\tthis._nActiveControlInterpolants = 0;\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tthis.stats = {\n\t\n\t    \t\t\tactions: {\n\t    \t\t\t\tget total() { return scope._actions.length; },\n\t    \t\t\t\tget inUse() { return scope._nActiveActions; }\n\t    \t\t\t},\n\t    \t\t\tbindings: {\n\t    \t\t\t\tget total() { return scope._bindings.length; },\n\t    \t\t\t\tget inUse() { return scope._nActiveBindings; }\n\t    \t\t\t},\n\t    \t\t\tcontrolInterpolants: {\n\t    \t\t\t\tget total() { return scope._controlInterpolants.length; },\n\t    \t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t},\n\t\n\t    \t// Memory management for AnimationAction objects\n\t\n\t    \t_isActiveAction: function( action ) {\n\t\n\t    \t\tvar index = action._cacheIndex;\n\t    \t\treturn index !== null && index < this._nActiveActions;\n\t\n\t    \t},\n\t\n\t    \t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tactionsByClip = this._actionsByClip,\n\t    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\t\n\t    \t\tif ( actionsForClip === undefined ) {\n\t\n\t    \t\t\tactionsForClip = {\n\t\n\t    \t\t\t\tknownActions: [ action ],\n\t    \t\t\t\tactionByRoot: {}\n\t\n\t    \t\t\t};\n\t\n\t    \t\t\taction._byClipCacheIndex = 0;\n\t\n\t    \t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar knownActions = actionsForClip.knownActions;\n\t\n\t    \t\t\taction._byClipCacheIndex = knownActions.length;\n\t    \t\t\tknownActions.push( action );\n\t\n\t    \t\t}\n\t\n\t    \t\taction._cacheIndex = actions.length;\n\t    \t\tactions.push( action );\n\t\n\t    \t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\t\n\t    \t},\n\t\n\t    \t_removeInactiveAction: function( action ) {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t    \t\t\tcacheIndex = action._cacheIndex;\n\t\n\t    \t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t    \t\tactions[ cacheIndex ] = lastInactiveAction;\n\t    \t\tactions.pop();\n\t\n\t    \t\taction._cacheIndex = null;\n\t\n\t\n\t    \t\tvar clipUuid = action._clip.uuid,\n\t    \t\t\tactionsByClip = this._actionsByClip,\n\t    \t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t    \t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\n\t    \t\t\tlastKnownAction =\n\t    \t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\t\n\t    \t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\n\t    \t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t    \t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t    \t\tknownActionsForClip.pop();\n\t\n\t    \t\taction._byClipCacheIndex = null;\n\t\n\t\n\t    \t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t    \t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\t\n\t    \t\tdelete actionByRoot[ rootUuid ];\n\t\n\t    \t\tif ( knownActionsForClip.length === 0 ) {\n\t\n\t    \t\t\tdelete actionsByClip[ clipUuid ];\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._removeInactiveBindingsForAction( action );\n\t\n\t    \t},\n\t\n\t    \t_removeInactiveBindingsForAction: function( action ) {\n\t\n\t    \t\tvar bindings = action._propertyBindings;\n\t    \t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar binding = bindings[ i ];\n\t\n\t    \t\t\tif ( -- binding.referenceCount === 0 ) {\n\t\n\t    \t\t\t\tthis._removeInactiveBinding( binding );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_lendAction: function( action ) {\n\t\n\t    \t\t// [ active actions |  inactive actions  ]\n\t    \t\t// [  active actions >| inactive actions ]\n\t    \t\t//                 s        a\n\t    \t\t//                  <-swap->\n\t    \t\t//                 a        s\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tprevIndex = action._cacheIndex,\n\t\n\t    \t\t\tlastActiveIndex = this._nActiveActions ++,\n\t\n\t    \t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\t\n\t    \t\taction._cacheIndex = lastActiveIndex;\n\t    \t\tactions[ lastActiveIndex ] = action;\n\t\n\t    \t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t    \t\tactions[ prevIndex ] = firstInactiveAction;\n\t\n\t    \t},\n\t\n\t    \t_takeBackAction: function( action ) {\n\t\n\t    \t\t// [  active actions  | inactive actions ]\n\t    \t\t// [ active actions |< inactive actions  ]\n\t    \t\t//        a        s\n\t    \t\t//         <-swap->\n\t    \t\t//        s        a\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tprevIndex = action._cacheIndex,\n\t\n\t    \t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\t\n\t    \t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\t\n\t    \t\taction._cacheIndex = firstInactiveIndex;\n\t    \t\tactions[ firstInactiveIndex ] = action;\n\t\n\t    \t\tlastActiveAction._cacheIndex = prevIndex;\n\t    \t\tactions[ prevIndex ] = lastActiveAction;\n\t\n\t    \t},\n\t\n\t    \t// Memory management for PropertyMixer objects\n\t\n\t    \t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\t\n\t    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\t\n\t    \t\t\tbindings = this._bindings;\n\t\n\t    \t\tif ( bindingByName === undefined ) {\n\t\n\t    \t\t\tbindingByName = {};\n\t    \t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\t\n\t    \t\t}\n\t\n\t    \t\tbindingByName[ trackName ] = binding;\n\t\n\t    \t\tbinding._cacheIndex = bindings.length;\n\t    \t\tbindings.push( binding );\n\t\n\t    \t},\n\t\n\t    \t_removeInactiveBinding: function( binding ) {\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tpropBinding = binding.binding,\n\t    \t\t\trootUuid = propBinding.rootNode.uuid,\n\t    \t\t\ttrackName = propBinding.path,\n\t    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\t\n\t    \t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t    \t\t\tcacheIndex = binding._cacheIndex;\n\t\n\t    \t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t    \t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t    \t\tbindings.pop();\n\t\n\t    \t\tdelete bindingByName[ trackName ];\n\t\n\t    \t\tremove_empty_map: {\n\t\n\t    \t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\t\n\t    \t\t\tdelete bindingsByRoot[ rootUuid ];\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_lendBinding: function( binding ) {\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tprevIndex = binding._cacheIndex,\n\t\n\t    \t\t\tlastActiveIndex = this._nActiveBindings ++,\n\t\n\t    \t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\t\n\t    \t\tbinding._cacheIndex = lastActiveIndex;\n\t    \t\tbindings[ lastActiveIndex ] = binding;\n\t\n\t    \t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t    \t\tbindings[ prevIndex ] = firstInactiveBinding;\n\t\n\t    \t},\n\t\n\t    \t_takeBackBinding: function( binding ) {\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tprevIndex = binding._cacheIndex,\n\t\n\t    \t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\t\n\t    \t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\t\n\t    \t\tbinding._cacheIndex = firstInactiveIndex;\n\t    \t\tbindings[ firstInactiveIndex ] = binding;\n\t\n\t    \t\tlastActiveBinding._cacheIndex = prevIndex;\n\t    \t\tbindings[ prevIndex ] = lastActiveBinding;\n\t\n\t    \t},\n\t\n\t\n\t    \t// Memory management of Interpolants for weight and time scale\n\t\n\t    \t_lendControlInterpolant: function() {\n\t\n\t    \t\tvar interpolants = this._controlInterpolants,\n\t    \t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t    \t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\t\n\t    \t\tif ( interpolant === undefined ) {\n\t\n\t    \t\t\tinterpolant = new LinearInterpolant(\n\t    \t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t    \t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\t\n\t    \t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t    \t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn interpolant;\n\t\n\t    \t},\n\t\n\t    \t_takeBackControlInterpolant: function( interpolant ) {\n\t\n\t    \t\tvar interpolants = this._controlInterpolants,\n\t    \t\t\tprevIndex = interpolant.__cacheIndex,\n\t\n\t    \t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\t\n\t    \t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\t\n\t    \t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t    \t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\t\n\t    \t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t    \t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\t\n\t    \t},\n\t\n\t    \t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Uniform( value ) {\n\t\n\t    \tif ( typeof value === 'string' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t    \t\tvalue = arguments[ 1 ];\n\t\n\t    \t}\n\t\n\t    \tthis.value = value;\n\t\n\t    \tthis.dynamic = false;\n\t\n\t    }\n\t\n\t    Uniform.prototype = {\n\t\n\t    \tconstructor: Uniform,\n\t\n\t    \tonUpdate: function ( callback ) {\n\t\n\t    \t\tthis.dynamic = true;\n\t    \t\tthis.onUpdateCallback = callback;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InstancedBufferGeometry() {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'InstancedBufferGeometry';\n\t    \tthis.maxInstancedCount = undefined;\n\t\n\t    }\n\t\n\t    InstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;\n\t\n\t    InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\t\n\t    InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\t\n\t    \tthis.groups.push( {\n\t\n\t    \t\tstart: start,\n\t    \t\tcount: count,\n\t    \t\tinstances: instances\n\t\n\t    \t} );\n\t\n\t    };\n\t\n\t    InstancedBufferGeometry.prototype.copy = function ( source ) {\n\t\n\t    \tvar index = source.index;\n\t\n\t    \tif ( index !== null ) {\n\t\n\t    \t\tthis.setIndex( index.clone() );\n\t\n\t    \t}\n\t\n\t    \tvar attributes = source.attributes;\n\t\n\t    \tfor ( var name in attributes ) {\n\t\n\t    \t\tvar attribute = attributes[ name ];\n\t    \t\tthis.addAttribute( name, attribute.clone() );\n\t\n\t    \t}\n\t\n\t    \tvar groups = source.groups;\n\t\n\t    \tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t    \t\tvar group = groups[ i ];\n\t    \t\tthis.addGroup( group.start, group.count, group.instances );\n\t\n\t    \t}\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.data = interleavedBuffer;\n\t    \tthis.itemSize = itemSize;\n\t    \tthis.offset = offset;\n\t\n\t    \tthis.normalized = normalized === true;\n\t\n\t    }\n\t\n\t\n\t    InterleavedBufferAttribute.prototype = {\n\t\n\t    \tconstructor: InterleavedBufferAttribute,\n\t\n\t    \tisInterleavedBufferAttribute: true,\n\t\n\t    \tget count() {\n\t\n\t    \t\treturn this.data.count;\n\t\n\t    \t},\n\t\n\t    \tget array() {\n\t\n\t    \t\treturn this.data.array;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( index, x ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( index, y ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( index, z ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetW: function ( index, w ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetX: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\t\n\t    \t},\n\t\n\t    \tgetY: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\t\n\t    \t},\n\t\n\t    \tgetZ: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\t\n\t    \t},\n\t\n\t    \tgetW: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\t\n\t    \t},\n\t\n\t    \tsetXY: function ( index, x, y ) {\n\t\n\t    \t\tindex = index * this.data.stride + this.offset;\n\t\n\t    \t\tthis.data.array[ index + 0 ] = x;\n\t    \t\tthis.data.array[ index + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZ: function ( index, x, y, z ) {\n\t\n\t    \t\tindex = index * this.data.stride + this.offset;\n\t\n\t    \t\tthis.data.array[ index + 0 ] = x;\n\t    \t\tthis.data.array[ index + 1 ] = y;\n\t    \t\tthis.data.array[ index + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZW: function ( index, x, y, z, w ) {\n\t\n\t    \t\tindex = index * this.data.stride + this.offset;\n\t\n\t    \t\tthis.data.array[ index + 0 ] = x;\n\t    \t\tthis.data.array[ index + 1 ] = y;\n\t    \t\tthis.data.array[ index + 2 ] = z;\n\t    \t\tthis.data.array[ index + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InterleavedBuffer( array, stride ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.array = array;\n\t    \tthis.stride = stride;\n\t    \tthis.count = array !== undefined ? array.length / stride : 0;\n\t\n\t    \tthis.dynamic = false;\n\t    \tthis.updateRange = { offset: 0, count: - 1 };\n\t\n\t    \tthis.version = 0;\n\t\n\t    }\n\t\n\t    InterleavedBuffer.prototype = {\n\t\n\t    \tconstructor: InterleavedBuffer,\n\t\n\t    \tisInterleavedBuffer: true,\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.version ++;\n\t\n\t    \t},\n\t\n\t    \tsetDynamic: function ( value ) {\n\t\n\t    \t\tthis.dynamic = value;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.array = new source.array.constructor( source.array );\n\t    \t\tthis.count = source.count;\n\t    \t\tthis.stride = source.stride;\n\t    \t\tthis.dynamic = source.dynamic;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyAt: function ( index1, attribute, index2 ) {\n\t\n\t    \t\tindex1 *= this.stride;\n\t    \t\tindex2 *= attribute.stride;\n\t\n\t    \t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tset: function ( value, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.array.set( value, offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\t\n\t    \tInterleavedBuffer.call( this, array, stride );\n\t\n\t    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\n\t    }\n\t\n\t    InstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );\n\t    InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;\n\t\n\t    InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\t\n\t    InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\t\n\t    \tInterleavedBuffer.prototype.copy.call( this, source );\n\t\n\t    \tthis.meshPerAttribute = source.meshPerAttribute;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\t\n\t    \tBufferAttribute.call( this, array, itemSize );\n\t\n\t    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\n\t    }\n\t\n\t    InstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\t    InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;\n\t\n\t    InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\t\n\t    InstancedBufferAttribute.prototype.copy = function ( source ) {\n\t\n\t    \tBufferAttribute.prototype.copy.call( this, source );\n\t\n\t    \tthis.meshPerAttribute = source.meshPerAttribute;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author bhouston / http://clara.io/\n\t     * @author stephomi / http://stephaneginier.com/\n\t     */\n\t\n\t    function Raycaster( origin, direction, near, far ) {\n\t\n\t    \tthis.ray = new Ray( origin, direction );\n\t    \t// direction is assumed to be normalized (for accurate distance calculations)\n\t\n\t    \tthis.near = near || 0;\n\t    \tthis.far = far || Infinity;\n\t\n\t    \tthis.params = {\n\t    \t\tMesh: {},\n\t    \t\tLine: {},\n\t    \t\tLOD: {},\n\t    \t\tPoints: { threshold: 1 },\n\t    \t\tSprite: {}\n\t    \t};\n\t\n\t    \tObject.defineProperties( this.params, {\n\t    \t\tPointCloud: {\n\t    \t\t\tget: function () {\n\t    \t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t    \t\t\t\treturn this.Points;\n\t    \t\t\t}\n\t    \t\t}\n\t    \t} );\n\t\n\t    }\n\t\n\t    function ascSort( a, b ) {\n\t\n\t    \treturn a.distance - b.distance;\n\t\n\t    }\n\t\n\t    function intersectObject( object, raycaster, intersects, recursive ) {\n\t\n\t    \tif ( object.visible === false ) return;\n\t\n\t    \tobject.raycast( raycaster, intersects );\n\t\n\t    \tif ( recursive === true ) {\n\t\n\t    \t\tvar children = object.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    //\n\t\n\t    Raycaster.prototype = {\n\t\n\t    \tconstructor: Raycaster,\n\t\n\t    \tlinePrecision: 1,\n\t\n\t    \tset: function ( origin, direction ) {\n\t\n\t    \t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\n\t    \t\tthis.ray.set( origin, direction );\n\t\n\t    \t},\n\t\n\t    \tsetFromCamera: function ( coords, camera ) {\n\t\n\t    \t\tif ( (camera && camera.isPerspectiveCamera) ) {\n\t\n\t    \t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t    \t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\n\t    \t\t} else if ( (camera && camera.isOrthographicCamera) ) {\n\t\n\t    \t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t    \t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tintersectObject: function ( object, recursive ) {\n\t\n\t    \t\tvar intersects = [];\n\t\n\t    \t\tintersectObject( object, this, intersects, recursive );\n\t\n\t    \t\tintersects.sort( ascSort );\n\t\n\t    \t\treturn intersects;\n\t\n\t    \t},\n\t\n\t    \tintersectObjects: function ( objects, recursive ) {\n\t\n\t    \t\tvar intersects = [];\n\t\n\t    \t\tif ( Array.isArray( objects ) === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t    \t\t\treturn intersects;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\t\n\t    \t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\t\n\t    \t\t}\n\t\n\t    \t\tintersects.sort( ascSort );\n\t\n\t    \t\treturn intersects;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Clock( autoStart ) {\n\t\n\t    \tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\t\n\t    \tthis.startTime = 0;\n\t    \tthis.oldTime = 0;\n\t    \tthis.elapsedTime = 0;\n\t\n\t    \tthis.running = false;\n\t\n\t    }\n\t\n\t    Clock.prototype = {\n\t\n\t    \tconstructor: Clock,\n\t\n\t    \tstart: function () {\n\t\n\t    \t\tthis.startTime = ( performance || Date ).now();\n\t\n\t    \t\tthis.oldTime = this.startTime;\n\t    \t\tthis.running = true;\n\t\n\t    \t},\n\t\n\t    \tstop: function () {\n\t\n\t    \t\tthis.getElapsedTime();\n\t    \t\tthis.running = false;\n\t\n\t    \t},\n\t\n\t    \tgetElapsedTime: function () {\n\t\n\t    \t\tthis.getDelta();\n\t    \t\treturn this.elapsedTime;\n\t\n\t    \t},\n\t\n\t    \tgetDelta: function () {\n\t\n\t    \t\tvar diff = 0;\n\t\n\t    \t\tif ( this.autoStart && ! this.running ) {\n\t\n\t    \t\t\tthis.start();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.running ) {\n\t\n\t    \t\t\tvar newTime = ( performance || Date ).now();\n\t\n\t    \t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t    \t\t\tthis.oldTime = newTime;\n\t\n\t    \t\t\tthis.elapsedTime += diff;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn diff;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * Spline from Tween.js, slightly optimized (and trashed)\n\t     * http://sole.github.com/tween.js/examples/05_spline.html\n\t     *\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Spline( points ) {\n\t\n\t    \tthis.points = points;\n\t\n\t    \tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n\t    \tpoint, intPoint, weight, w2, w3,\n\t    \tpa, pb, pc, pd;\n\t\n\t    \tthis.initFromArray = function ( a ) {\n\t\n\t    \t\tthis.points = [];\n\t\n\t    \t\tfor ( var i = 0; i < a.length; i ++ ) {\n\t\n\t    \t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tthis.getPoint = function ( k ) {\n\t\n\t    \t\tpoint = ( this.points.length - 1 ) * k;\n\t    \t\tintPoint = Math.floor( point );\n\t    \t\tweight = point - intPoint;\n\t\n\t    \t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t    \t\tc[ 1 ] = intPoint;\n\t    \t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n\t    \t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\t\n\t    \t\tpa = this.points[ c[ 0 ] ];\n\t    \t\tpb = this.points[ c[ 1 ] ];\n\t    \t\tpc = this.points[ c[ 2 ] ];\n\t    \t\tpd = this.points[ c[ 3 ] ];\n\t\n\t    \t\tw2 = weight * weight;\n\t    \t\tw3 = weight * w2;\n\t\n\t    \t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n\t    \t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n\t    \t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\t\n\t    \t\treturn v3;\n\t\n\t    \t};\n\t\n\t    \tthis.getControlPointsArray = function () {\n\t\n\t    \t\tvar i, p, l = this.points.length,\n\t    \t\t\tcoords = [];\n\t\n\t    \t\tfor ( i = 0; i < l; i ++ ) {\n\t\n\t    \t\t\tp = this.points[ i ];\n\t    \t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn coords;\n\t\n\t    \t};\n\t\n\t    \t// approximate length by summing linear segments\n\t\n\t    \tthis.getLength = function ( nSubDivisions ) {\n\t\n\t    \t\tvar i, index, nSamples, position,\n\t    \t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n\t    \t\t\toldPosition = new Vector3(),\n\t    \t\t\ttmpVec = new Vector3(),\n\t    \t\t\tchunkLengths = [],\n\t    \t\t\ttotalLength = 0;\n\t\n\t    \t\t// first point has 0 length\n\t\n\t    \t\tchunkLengths[ 0 ] = 0;\n\t\n\t    \t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\t\n\t    \t\tnSamples = this.points.length * nSubDivisions;\n\t\n\t    \t\toldPosition.copy( this.points[ 0 ] );\n\t\n\t    \t\tfor ( i = 1; i < nSamples; i ++ ) {\n\t\n\t    \t\t\tindex = i / nSamples;\n\t\n\t    \t\t\tposition = this.getPoint( index );\n\t    \t\t\ttmpVec.copy( position );\n\t\n\t    \t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\t\n\t    \t\t\toldPosition.copy( position );\n\t\n\t    \t\t\tpoint = ( this.points.length - 1 ) * index;\n\t    \t\t\tintPoint = Math.floor( point );\n\t\n\t    \t\t\tif ( intPoint !== oldIntPoint ) {\n\t\n\t    \t\t\t\tchunkLengths[ intPoint ] = totalLength;\n\t    \t\t\t\toldIntPoint = intPoint;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// last point ends with total length\n\t\n\t    \t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\t\n\t    \t\treturn { chunks: chunkLengths, total: totalLength };\n\t\n\t    \t};\n\t\n\t    \tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\t\n\t    \t\tvar i, j,\n\t    \t\t\tindex, indexCurrent, indexNext,\n\t    \t\t\trealDistance,\n\t    \t\t\tsampling, position,\n\t    \t\t\tnewpoints = [],\n\t    \t\t\ttmpVec = new Vector3(),\n\t    \t\t\tsl = this.getLength();\n\t\n\t    \t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\t\n\t    \t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\t\n\t    \t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n\t    \t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\t\n\t    \t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\t\n\t    \t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\t\n\t    \t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n\t    \t\t\tindexNext = i / ( this.points.length - 1 );\n\t\n\t    \t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\t\n\t    \t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\t\n\t    \t\t\t\tposition = this.getPoint( index );\n\t    \t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.points = newpoints;\n\t\n\t    \t};\n\t\n\t    \t// Catmull-Rom\n\t\n\t    \tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\t\n\t    \t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t    \t\t\tv1 = ( p3 - p1 ) * 0.5;\n\t\n\t    \t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t     *\n\t     * The poles (phi) are at the positive and negative y axis.\n\t     * The equator starts at positive z.\n\t     */\n\t\n\t    function Spherical( radius, phi, theta ) {\n\t\n\t    \tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t    \tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\t    \tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\t\n\t    \treturn this;\n\t\n\t    }\n\t\n\t    Spherical.prototype = {\n\t\n\t    \tconstructor: Spherical,\n\t\n\t    \tset: function ( radius, phi, theta ) {\n\t\n\t    \t\tthis.radius = radius;\n\t    \t\tthis.phi = phi;\n\t    \t\tthis.theta = theta;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( other ) {\n\t\n\t    \t\tthis.radius.copy( other.radius );\n\t    \t\tthis.phi.copy( other.phi );\n\t    \t\tthis.theta.copy( other.theta );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// restrict phi to be betwee EPS and PI-EPS\n\t    \tmakeSafe: function() {\n\t\n\t    \t\tvar EPS = 0.000001;\n\t    \t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromVector3: function( vec3 ) {\n\t\n\t    \t\tthis.radius = vec3.length();\n\t\n\t    \t\tif ( this.radius === 0 ) {\n\t\n\t    \t\t\tthis.theta = 0;\n\t    \t\t\tthis.phi = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t    \t\t\tthis.phi = Math.acos( exports.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    };\n\t\n\t    /**\r\n\t     * @author alteredq / http://alteredqualia.com/\r\n\t     */\r\n\t\r\n\t    function MorphBlendMesh( geometry, material ) {\n\t\r\n\t    \tMesh.call( this, geometry, material );\r\n\t\r\n\t    \tthis.animationsMap = {};\r\n\t    \tthis.animationsList = [];\r\n\t\r\n\t    \t// prepare default animation\r\n\t    \t// (all frames played together in 1 second)\r\n\t\r\n\t    \tvar numFrames = this.geometry.morphTargets.length;\r\n\t\r\n\t    \tvar name = \"__default\";\r\n\t\r\n\t    \tvar startFrame = 0;\r\n\t    \tvar endFrame = numFrames - 1;\r\n\t\r\n\t    \tvar fps = numFrames / 1;\r\n\t\r\n\t    \tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\t    \tthis.setAnimationWeight( name, 1 );\r\n\t\r\n\t    }\r\n\t\r\n\t    MorphBlendMesh.prototype = Object.create( Mesh.prototype );\r\n\t    MorphBlendMesh.prototype.constructor = MorphBlendMesh;\r\n\t\r\n\t    MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\t\r\n\t    \tvar animation = {\r\n\t\r\n\t    \t\tstart: start,\r\n\t    \t\tend: end,\r\n\t\r\n\t    \t\tlength: end - start + 1,\r\n\t\r\n\t    \t\tfps: fps,\r\n\t    \t\tduration: ( end - start ) / fps,\r\n\t\r\n\t    \t\tlastFrame: 0,\r\n\t    \t\tcurrentFrame: 0,\r\n\t\r\n\t    \t\tactive: false,\r\n\t\r\n\t    \t\ttime: 0,\r\n\t    \t\tdirection: 1,\r\n\t    \t\tweight: 1,\r\n\t\r\n\t    \t\tdirectionBackwards: false,\r\n\t    \t\tmirroredLoop: false\r\n\t\r\n\t    \t};\r\n\t\r\n\t    \tthis.animationsMap[ name ] = animation;\r\n\t    \tthis.animationsList.push( animation );\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\t\r\n\t    \tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\t\r\n\t    \tvar firstAnimation, frameRanges = {};\r\n\t\r\n\t    \tvar geometry = this.geometry;\r\n\t\r\n\t    \tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\t\r\n\t    \t\tvar morph = geometry.morphTargets[ i ];\r\n\t    \t\tvar chunks = morph.name.match( pattern );\r\n\t\r\n\t    \t\tif ( chunks && chunks.length > 1 ) {\r\n\t\r\n\t    \t\t\tvar name = chunks[ 1 ];\r\n\t\r\n\t    \t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\t\r\n\t    \t\t\tvar range = frameRanges[ name ];\r\n\t\r\n\t    \t\t\tif ( i < range.start ) range.start = i;\r\n\t    \t\t\tif ( i > range.end ) range.end = i;\r\n\t\r\n\t    \t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \tfor ( var name in frameRanges ) {\r\n\t\r\n\t    \t\tvar range = frameRanges[ name ];\r\n\t    \t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \tthis.firstAnimation = firstAnimation;\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.direction = 1;\r\n\t    \t\tanimation.directionBackwards = false;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.direction = - 1;\r\n\t    \t\tanimation.directionBackwards = true;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.fps = fps;\r\n\t    \t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.duration = duration;\r\n\t    \t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.weight = weight;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.time = time;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\t\r\n\t    \tvar time = 0;\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\ttime = animation.time;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \treturn time;\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\t\r\n\t    \tvar duration = - 1;\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tduration = animation.duration;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \treturn duration;\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.time = 0;\r\n\t    \t\tanimation.active = true;\r\n\t\r\n\t    \t} else {\r\n\t\r\n\t    \t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.active = false;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.update = function ( delta ) {\r\n\t\r\n\t    \tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\t\r\n\t    \t\tvar animation = this.animationsList[ i ];\r\n\t\r\n\t    \t\tif ( ! animation.active ) continue;\r\n\t\r\n\t    \t\tvar frameTime = animation.duration / animation.length;\r\n\t\r\n\t    \t\tanimation.time += animation.direction * delta;\r\n\t\r\n\t    \t\tif ( animation.mirroredLoop ) {\r\n\t\r\n\t    \t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\t\r\n\t    \t\t\t\tanimation.direction *= - 1;\r\n\t\r\n\t    \t\t\t\tif ( animation.time > animation.duration ) {\r\n\t\r\n\t    \t\t\t\t\tanimation.time = animation.duration;\r\n\t    \t\t\t\t\tanimation.directionBackwards = true;\r\n\t\r\n\t    \t\t\t\t}\r\n\t\r\n\t    \t\t\t\tif ( animation.time < 0 ) {\r\n\t\r\n\t    \t\t\t\t\tanimation.time = 0;\r\n\t    \t\t\t\t\tanimation.directionBackwards = false;\r\n\t\r\n\t    \t\t\t\t}\r\n\t\r\n\t    \t\t\t}\r\n\t\r\n\t    \t\t} else {\r\n\t\r\n\t    \t\t\tanimation.time = animation.time % animation.duration;\r\n\t\r\n\t    \t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t\tvar keyframe = animation.start + exports.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t    \t\tvar weight = animation.weight;\r\n\t\r\n\t    \t\tif ( keyframe !== animation.currentFrame ) {\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\t\r\n\t    \t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t    \t\t\tanimation.currentFrame = keyframe;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\t\r\n\t    \t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\t\r\n\t    \t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\t\r\n\t    \t\t} else {\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function ImmediateRenderObject( material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.material = material;\n\t    \tthis.render = function ( renderCallback ) {};\n\t\n\t    }\n\t\n\t    ImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\t    ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\t\n\t    ImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function VertexNormalsHelper( object, size, hex, linewidth ) {\n\t\n\t    \tthis.object = object;\n\t\n\t    \tthis.size = ( size !== undefined ) ? size : 1;\n\t\n\t    \tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\t\n\t    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\t\n\t    \t//\n\t\n\t    \tvar nNormals = 0;\n\t\n\t    \tvar objGeometry = this.object.geometry;\n\t\n\t    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t    \t\tnNormals = objGeometry.faces.length * 3;\n\t\n\t    \t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\t\n\t    \t\tnNormals = objGeometry.attributes.normal.count;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t\n\t    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\t\n\t    \tgeometry.addAttribute( 'position', positions );\n\t\n\t    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\t\n\t    \t//\n\t\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\t    VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\t\n\t    VertexNormalsHelper.prototype.update = ( function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t    \tvar normalMatrix = new Matrix3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t    \t\tthis.object.updateMatrixWorld( true );\n\t\n\t    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\t\n\t    \t\tvar matrixWorld = this.object.matrixWorld;\n\t\n\t    \t\tvar position = this.geometry.attributes.position;\n\t\n\t    \t\t//\n\t\n\t    \t\tvar objGeometry = this.object.geometry;\n\t\n\t    \t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t    \t\t\tvar vertices = objGeometry.vertices;\n\t\n\t    \t\t\tvar faces = objGeometry.faces;\n\t\n\t    \t\t\tvar idx = 0;\n\t\n\t    \t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\t\n\t    \t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\t\n\t    \t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\t\n\t    \t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t    \t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t    \t\t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\t\n\t    \t\t\tvar objPos = objGeometry.attributes.position;\n\t\n\t    \t\t\tvar objNorm = objGeometry.attributes.normal;\n\t\n\t    \t\t\tvar idx = 0;\n\t\n\t    \t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\t\n\t    \t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\t\n\t    \t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\t\n\t    \t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t    \t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t    \t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tposition.needsUpdate = true;\n\t\n\t    \t\treturn this;\n\t\n\t    \t};\n\t\n\t    }() );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function SpotLightHelper( light ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tthis.matrix = light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t\n\t    \tvar positions = [\n\t    \t\t0, 0, 0,   0,   0,   1,\n\t    \t\t0, 0, 0,   1,   0,   1,\n\t    \t\t0, 0, 0, - 1,   0,   1,\n\t    \t\t0, 0, 0,   0,   1,   1,\n\t    \t\t0, 0, 0,   0, - 1,   1\n\t    \t];\n\t\n\t    \tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\t\n\t    \t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t    \t\tvar p2 = ( j / l ) * Math.PI * 2;\n\t\n\t    \t\tpositions.push(\n\t    \t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t    \t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { fog: false } );\n\t\n\t    \tthis.cone = new LineSegments( geometry, material );\n\t    \tthis.add( this.cone );\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    SpotLightHelper.prototype = Object.create( Object3D.prototype );\n\t    SpotLightHelper.prototype.constructor = SpotLightHelper;\n\t\n\t    SpotLightHelper.prototype.dispose = function () {\n\t\n\t    \tthis.cone.geometry.dispose();\n\t    \tthis.cone.material.dispose();\n\t\n\t    };\n\t\n\t    SpotLightHelper.prototype.update = function () {\n\t\n\t    \tvar vector = new Vector3();\n\t    \tvar vector2 = new Vector3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t    \t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\t\n\t    \t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\t\n\t    \t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t    \t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\n\t    \t\tthis.cone.lookAt( vector2.sub( vector ) );\n\t\n\t    \t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author Sean Griffin / http://twitter.com/sgrif\n\t     * @author Michael Guerrero / http://realitymeltdown.com\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function SkeletonHelper( object ) {\n\t\n\t    \tthis.bones = this.getBoneList( object );\n\t\n\t    \tvar geometry = new Geometry();\n\t\n\t    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\t\n\t    \t\tvar bone = this.bones[ i ];\n\t\n\t    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t    \t\t\tgeometry.vertices.push( new Vector3() );\n\t    \t\t\tgeometry.vertices.push( new Vector3() );\n\t    \t\t\tgeometry.colors.push( new Color( 0, 0, 1 ) );\n\t    \t\t\tgeometry.colors.push( new Color( 0, 1, 0 ) );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tgeometry.dynamic = true;\n\t\n\t    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    \tthis.root = object;\n\t\n\t    \tthis.matrix = object.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t\n\t    SkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\t    SkeletonHelper.prototype.constructor = SkeletonHelper;\n\t\n\t    SkeletonHelper.prototype.getBoneList = function( object ) {\n\t\n\t    \tvar boneList = [];\n\t\n\t    \tif ( (object && object.isBone) ) {\n\t\n\t    \t\tboneList.push( object );\n\t\n\t    \t}\n\t\n\t    \tfor ( var i = 0; i < object.children.length; i ++ ) {\n\t\n\t    \t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\t\n\t    \t}\n\t\n\t    \treturn boneList;\n\t\n\t    };\n\t\n\t    SkeletonHelper.prototype.update = function () {\n\t\n\t    \tvar geometry = this.geometry;\n\t\n\t    \tvar matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );\n\t\n\t    \tvar boneMatrix = new Matrix4();\n\t\n\t    \tvar j = 0;\n\t\n\t    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\t\n\t    \t\tvar bone = this.bones[ i ];\n\t\n\t    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t    \t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\t\n\t    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t    \t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\t\n\t    \t\t\tj += 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tgeometry.verticesNeedUpdate = true;\n\t\n\t    \tgeometry.computeBoundingSphere();\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function PointLightHelper( light, sphereSize ) {\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t    \tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t    \tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \tMesh.call( this, geometry, material );\n\t\n\t    \tthis.matrix = this.light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \t/*\n\t    \tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\t    \tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\n\t    \tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t    \tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\n\t    \tvar d = light.distance;\n\t\n\t    \tif ( d === 0.0 ) {\n\t\n\t    \t\tthis.lightDistance.visible = false;\n\t\n\t    \t} else {\n\t\n\t    \t\tthis.lightDistance.scale.set( d, d, d );\n\t\n\t    \t}\n\t\n\t    \tthis.add( this.lightDistance );\n\t    \t*/\n\t\n\t    }\n\t\n\t    PointLightHelper.prototype = Object.create( Mesh.prototype );\n\t    PointLightHelper.prototype.constructor = PointLightHelper;\n\t\n\t    PointLightHelper.prototype.dispose = function () {\n\t\n\t    \tthis.geometry.dispose();\n\t    \tthis.material.dispose();\n\t\n\t    };\n\t\n\t    PointLightHelper.prototype.update = function () {\n\t\n\t    \tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \t/*\n\t    \tvar d = this.light.distance;\n\t\n\t    \tif ( d === 0.0 ) {\n\t\n\t    \t\tthis.lightDistance.visible = false;\n\t\n\t    \t} else {\n\t\n\t    \t\tthis.lightDistance.visible = true;\n\t    \t\tthis.lightDistance.scale.set( d, d, d );\n\t\n\t    \t}\n\t    \t*/\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function HemisphereLightHelper( light, sphereSize ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tthis.matrix = light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.colors = [ new Color(), new Color() ];\n\t\n\t    \tvar geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t    \tgeometry.rotateX( - Math.PI / 2 );\n\t\n\t    \tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\t\n\t    \t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\t\n\t    \t}\n\t\n\t    \tvar material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );\n\t\n\t    \tthis.lightSphere = new Mesh( geometry, material );\n\t    \tthis.add( this.lightSphere );\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    HemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\t    HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\t\n\t    HemisphereLightHelper.prototype.dispose = function () {\n\t\n\t    \tthis.lightSphere.geometry.dispose();\n\t    \tthis.lightSphere.material.dispose();\n\t\n\t    };\n\t\n\t    HemisphereLightHelper.prototype.update = function () {\n\t\n\t    \tvar vector = new Vector3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t    \t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\t\n\t    \t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\t    \t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function GridHelper( size, divisions, color1, color2 ) {\n\t\n\t    \tdivisions = divisions || 1;\n\t    \tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t    \tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\t\n\t    \tvar center = divisions / 2;\n\t    \tvar step = ( size * 2 ) / divisions;\n\t    \tvar vertices = [], colors = [];\n\t\n\t    \tfor ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {\n\t\n\t    \t\tvertices.push( - size, 0, k, size, 0, k );\n\t    \t\tvertices.push( k, 0, - size, k, 0, size );\n\t\n\t    \t\tvar color = i === center ? color1 : color2;\n\t\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t\n\t    \t}\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );\n\t    \tgeometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    }\n\t\n\t    GridHelper.prototype = Object.create( LineSegments.prototype );\n\t    GridHelper.prototype.constructor = GridHelper;\n\t\n\t    GridHelper.prototype.setColors = function () {\n\t\n\t    \tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function FaceNormalsHelper( object, size, hex, linewidth ) {\n\t\n\t    \t// FaceNormalsHelper only supports THREE.Geometry\n\t\n\t    \tthis.object = object;\n\t\n\t    \tthis.size = ( size !== undefined ) ? size : 1;\n\t\n\t    \tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\t\n\t    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\t\n\t    \t//\n\t\n\t    \tvar nNormals = 0;\n\t\n\t    \tvar objGeometry = this.object.geometry;\n\t\n\t    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t    \t\tnNormals = objGeometry.faces.length;\n\t\n\t    \t} else {\n\t\n\t    \t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t\n\t    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\t\n\t    \tgeometry.addAttribute( 'position', positions );\n\t\n\t    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\t\n\t    \t//\n\t\n\t    \tthis.matrixAutoUpdate = false;\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\t    FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\t\n\t    FaceNormalsHelper.prototype.update = ( function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t    \tvar normalMatrix = new Matrix3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tthis.object.updateMatrixWorld( true );\n\t\n\t    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\t\n\t    \t\tvar matrixWorld = this.object.matrixWorld;\n\t\n\t    \t\tvar position = this.geometry.attributes.position;\n\t\n\t    \t\t//\n\t\n\t    \t\tvar objGeometry = this.object.geometry;\n\t\n\t    \t\tvar vertices = objGeometry.vertices;\n\t\n\t    \t\tvar faces = objGeometry.faces;\n\t\n\t    \t\tvar idx = 0;\n\t\n\t    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\tvar normal = face.normal;\n\t\n\t    \t\t\tv1.copy( vertices[ face.a ] )\n\t    \t\t\t\t.add( vertices[ face.b ] )\n\t    \t\t\t\t.add( vertices[ face.c ] )\n\t    \t\t\t\t.divideScalar( 3 )\n\t    \t\t\t\t.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t    \t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t    \t\t\tidx = idx + 1;\n\t\n\t    \t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t    \t\t\tidx = idx + 1;\n\t\n\t    \t\t}\n\t\n\t    \t\tposition.needsUpdate = true;\n\t\n\t    \t\treturn this;\n\t\n\t    \t};\n\t\n\t    }() );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function DirectionalLightHelper( light, size ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tthis.matrix = light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tif ( size === undefined ) size = 1;\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( [\n\t    \t\t- size,   size, 0,\n\t    \t\t  size,   size, 0,\n\t    \t\t  size, - size, 0,\n\t    \t\t- size, - size, 0,\n\t    \t\t- size,   size, 0\n\t    \t], 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { fog: false } );\n\t\n\t    \tthis.add( new Line( geometry, material ) );\n\t\n\t    \tgeometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\t\n\t    \tthis.add( new Line( geometry, material ));\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    DirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\t    DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\t\n\t    DirectionalLightHelper.prototype.dispose = function () {\n\t\n\t    \tvar lightPlane = this.children[ 0 ];\n\t    \tvar targetLine = this.children[ 1 ];\n\t\n\t    \tlightPlane.geometry.dispose();\n\t    \tlightPlane.material.dispose();\n\t    \ttargetLine.geometry.dispose();\n\t    \ttargetLine.material.dispose();\n\t\n\t    };\n\t\n\t    DirectionalLightHelper.prototype.update = function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t    \tvar v3 = new Vector3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t    \t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t    \t\tv3.subVectors( v2, v1 );\n\t\n\t    \t\tvar lightPlane = this.children[ 0 ];\n\t    \t\tvar targetLine = this.children[ 1 ];\n\t\n\t    \t\tlightPlane.lookAt( v3 );\n\t    \t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \t\ttargetLine.lookAt( v3 );\n\t    \t\ttargetLine.scale.z = v3.length();\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     *\t- shows frustum, line of sight and up of the camera\n\t     *\t- suitable for fast updates\n\t     * \t- based on frustum visualization in lightgl.js shadowmap example\n\t     *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t     */\n\t\n\t    function CameraHelper( camera ) {\n\t\n\t    \tvar geometry = new Geometry();\n\t    \tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\t\n\t    \tvar pointMap = {};\n\t\n\t    \t// colors\n\t\n\t    \tvar hexFrustum = 0xffaa00;\n\t    \tvar hexCone = 0xff0000;\n\t    \tvar hexUp = 0x00aaff;\n\t    \tvar hexTarget = 0xffffff;\n\t    \tvar hexCross = 0x333333;\n\t\n\t    \t// near\n\t\n\t    \taddLine( \"n1\", \"n2\", hexFrustum );\n\t    \taddLine( \"n2\", \"n4\", hexFrustum );\n\t    \taddLine( \"n4\", \"n3\", hexFrustum );\n\t    \taddLine( \"n3\", \"n1\", hexFrustum );\n\t\n\t    \t// far\n\t\n\t    \taddLine( \"f1\", \"f2\", hexFrustum );\n\t    \taddLine( \"f2\", \"f4\", hexFrustum );\n\t    \taddLine( \"f4\", \"f3\", hexFrustum );\n\t    \taddLine( \"f3\", \"f1\", hexFrustum );\n\t\n\t    \t// sides\n\t\n\t    \taddLine( \"n1\", \"f1\", hexFrustum );\n\t    \taddLine( \"n2\", \"f2\", hexFrustum );\n\t    \taddLine( \"n3\", \"f3\", hexFrustum );\n\t    \taddLine( \"n4\", \"f4\", hexFrustum );\n\t\n\t    \t// cone\n\t\n\t    \taddLine( \"p\", \"n1\", hexCone );\n\t    \taddLine( \"p\", \"n2\", hexCone );\n\t    \taddLine( \"p\", \"n3\", hexCone );\n\t    \taddLine( \"p\", \"n4\", hexCone );\n\t\n\t    \t// up\n\t\n\t    \taddLine( \"u1\", \"u2\", hexUp );\n\t    \taddLine( \"u2\", \"u3\", hexUp );\n\t    \taddLine( \"u3\", \"u1\", hexUp );\n\t\n\t    \t// target\n\t\n\t    \taddLine( \"c\", \"t\", hexTarget );\n\t    \taddLine( \"p\", \"c\", hexCross );\n\t\n\t    \t// cross\n\t\n\t    \taddLine( \"cn1\", \"cn2\", hexCross );\n\t    \taddLine( \"cn3\", \"cn4\", hexCross );\n\t\n\t    \taddLine( \"cf1\", \"cf2\", hexCross );\n\t    \taddLine( \"cf3\", \"cf4\", hexCross );\n\t\n\t    \tfunction addLine( a, b, hex ) {\n\t\n\t    \t\taddPoint( a, hex );\n\t    \t\taddPoint( b, hex );\n\t\n\t    \t}\n\t\n\t    \tfunction addPoint( id, hex ) {\n\t\n\t    \t\tgeometry.vertices.push( new Vector3() );\n\t    \t\tgeometry.colors.push( new Color( hex ) );\n\t\n\t    \t\tif ( pointMap[ id ] === undefined ) {\n\t\n\t    \t\t\tpointMap[ id ] = [];\n\t\n\t    \t\t}\n\t\n\t    \t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\t\n\t    \t}\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    \tthis.camera = camera;\n\t    \tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\t\n\t    \tthis.matrix = camera.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.pointMap = pointMap;\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    CameraHelper.prototype = Object.create( LineSegments.prototype );\n\t    CameraHelper.prototype.constructor = CameraHelper;\n\t\n\t    CameraHelper.prototype.update = function () {\n\t\n\t    \tvar geometry, pointMap;\n\t\n\t    \tvar vector = new Vector3();\n\t    \tvar camera = new Camera();\n\t\n\t    \tfunction setPoint( point, x, y, z ) {\n\t\n\t    \t\tvector.set( x, y, z ).unproject( camera );\n\t\n\t    \t\tvar points = pointMap[ point ];\n\t\n\t    \t\tif ( points !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tgeometry = this.geometry;\n\t    \t\tpointMap = this.pointMap;\n\t\n\t    \t\tvar w = 1, h = 1;\n\t\n\t    \t\t// we need just camera projection matrix\n\t    \t\t// world matrix must be identity\n\t\n\t    \t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\t\n\t    \t\t// center / target\n\t\n\t    \t\tsetPoint( \"c\", 0, 0, - 1 );\n\t    \t\tsetPoint( \"t\", 0, 0,  1 );\n\t\n\t    \t\t// near\n\t\n\t    \t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t    \t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t    \t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t    \t\tsetPoint( \"n4\",   w,   h, - 1 );\n\t\n\t    \t\t// far\n\t\n\t    \t\tsetPoint( \"f1\", - w, - h, 1 );\n\t    \t\tsetPoint( \"f2\",   w, - h, 1 );\n\t    \t\tsetPoint( \"f3\", - w,   h, 1 );\n\t    \t\tsetPoint( \"f4\",   w,   h, 1 );\n\t\n\t    \t\t// up\n\t\n\t    \t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t    \t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t    \t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\t\n\t    \t\t// cross\n\t\n\t    \t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t    \t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t    \t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t    \t\tsetPoint( \"cf4\",   0,   h, 1 );\n\t\n\t    \t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t    \t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t    \t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t    \t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\t\n\t    \t\tgeometry.verticesNeedUpdate = true;\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    // a helper to show the world-axis-aligned bounding box for an object\n\t\n\t    function BoundingBoxHelper( object, hex ) {\n\t\n\t    \tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\t\n\t    \tthis.object = object;\n\t\n\t    \tthis.box = new Box3();\n\t\n\t    \tMesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );\n\t\n\t    }\n\t\n\t    BoundingBoxHelper.prototype = Object.create( Mesh.prototype );\n\t    BoundingBoxHelper.prototype.constructor = BoundingBoxHelper;\n\t\n\t    BoundingBoxHelper.prototype.update = function () {\n\t\n\t    \tthis.box.setFromObject( this.object );\n\t\n\t    \tthis.box.size( this.scale );\n\t\n\t    \tthis.box.getCenter( this.position );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BoxHelper( object, color ) {\n\t\n\t    \tif ( color === undefined ) color = 0xffff00;\n\t\n\t    \tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t    \tvar positions = new Float32Array( 8 * 3 );\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t\n\t    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\t\n\t    \tif ( object !== undefined ) {\n\t\n\t    \t\tthis.update( object );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    BoxHelper.prototype = Object.create( LineSegments.prototype );\n\t    BoxHelper.prototype.constructor = BoxHelper;\n\t\n\t    BoxHelper.prototype.update = ( function () {\n\t\n\t    \tvar box = new Box3();\n\t\n\t    \treturn function update( object ) {\n\t\n\t    \t\tif ( (object && object.isBox3) ) {\n\t\n\t    \t\t\tbox.copy( object );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tbox.setFromObject( object );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( box.isEmpty() ) return;\n\t\n\t    \t\tvar min = box.min;\n\t    \t\tvar max = box.max;\n\t\n\t    \t\t/*\n\t    \t\t  5____4\n\t    \t\t1/___0/|\n\t    \t\t| 6__|_7\n\t    \t\t2/___3/\n\t\n\t    \t\t0: max.x, max.y, max.z\n\t    \t\t1: min.x, max.y, max.z\n\t    \t\t2: min.x, min.y, max.z\n\t    \t\t3: max.x, min.y, max.z\n\t    \t\t4: max.x, max.y, min.z\n\t    \t\t5: min.x, max.y, min.z\n\t    \t\t6: min.x, min.y, min.z\n\t    \t\t7: max.x, min.y, min.z\n\t    \t\t*/\n\t\n\t    \t\tvar position = this.geometry.attributes.position;\n\t    \t\tvar array = position.array;\n\t\n\t    \t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t    \t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t    \t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t    \t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t    \t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t    \t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t    \t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t    \t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\t\n\t    \t\tposition.needsUpdate = true;\n\t\n\t    \t\tthis.geometry.computeBoundingSphere();\n\t\n\t    \t};\n\t\n\t    } )();\n\t\n\t    var lineGeometry = new BufferGeometry();\n\t    lineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\t\n\t    var coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t    coneGeometry.translate( 0, - 0.5, 0 );\n\t\n\t    function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\t\n\t    \t// dir is assumed to be normalized\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tif ( color === undefined ) color = 0xffff00;\n\t    \tif ( length === undefined ) length = 1;\n\t    \tif ( headLength === undefined ) headLength = 0.2 * length;\n\t    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\t\n\t    \tthis.position.copy( origin );\n\t\n\t    \tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t    \tthis.line.matrixAutoUpdate = false;\n\t    \tthis.add( this.line );\n\t\n\t    \tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t    \tthis.cone.matrixAutoUpdate = false;\n\t    \tthis.add( this.cone );\n\t\n\t    \tthis.setDirection( dir );\n\t    \tthis.setLength( length, headLength, headWidth );\n\t\n\t    }\n\t\n\t    ArrowHelper.prototype = Object.create( Object3D.prototype );\n\t    ArrowHelper.prototype.constructor = ArrowHelper;\n\t\n\t    ArrowHelper.prototype.setDirection = ( function () {\n\t\n\t    \tvar axis = new Vector3();\n\t    \tvar radians;\n\t\n\t    \treturn function setDirection( dir ) {\n\t\n\t    \t\t// dir is assumed to be normalized\n\t\n\t    \t\tif ( dir.y > 0.99999 ) {\n\t\n\t    \t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\t\n\t    \t\t} else if ( dir.y < - 0.99999 ) {\n\t\n\t    \t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\t\n\t    \t\t\tradians = Math.acos( dir.y );\n\t\n\t    \t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }() );\n\t\n\t    ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\t\n\t    \tif ( headLength === undefined ) headLength = 0.2 * length;\n\t    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\t\n\t    \tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\t    \tthis.line.updateMatrix();\n\t\n\t    \tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t    \tthis.cone.position.y = length;\n\t    \tthis.cone.updateMatrix();\n\t\n\t    };\n\t\n\t    ArrowHelper.prototype.setColor = function ( color ) {\n\t\n\t    \tthis.line.material.color.copy( color );\n\t    \tthis.cone.material.color.copy( color );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author sroucheray / http://sroucheray.org/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function AxisHelper( size ) {\n\t\n\t    \tsize = size || 1;\n\t\n\t    \tvar vertices = new Float32Array( [\n\t    \t\t0, 0, 0,  size, 0, 0,\n\t    \t\t0, 0, 0,  0, size, 0,\n\t    \t\t0, 0, 0,  0, 0, size\n\t    \t] );\n\t\n\t    \tvar colors = new Float32Array( [\n\t    \t\t1, 0, 0,  1, 0.6, 0,\n\t    \t\t0, 1, 0,  0.6, 1, 0,\n\t    \t\t0, 0, 1,  0, 0.6, 1\n\t    \t] );\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    }\n\t\n\t    AxisHelper.prototype = Object.create( LineSegments.prototype );\n\t    AxisHelper.prototype.constructor = AxisHelper;\n\t\n\t    /**\n\t     * @author zz85 https://github.com/zz85\n\t     *\n\t     * Centripetal CatmullRom Curve - which is useful for avoiding\n\t     * cusps and self-intersections in non-uniform catmull rom curves.\n\t     * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t     *\n\t     * curve.type accepts centripetal(default), chordal and catmullrom\n\t     * curve.tension is used for catmullrom which defaults to 0.5\n\t     */\n\t\n\t    exports.CatmullRomCurve3 = ( function() {\n\t\n\t    \tvar\n\t    \t\ttmp = new Vector3(),\n\t    \t\tpx = new CubicPoly(),\n\t    \t\tpy = new CubicPoly(),\n\t    \t\tpz = new CubicPoly();\n\t\n\t    \t/*\n\t    \tBased on an optimized c++ solution in\n\t    \t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t    \t - http://ideone.com/NoEbVM\n\t\n\t    \tThis CubicPoly class could be used for reusing some variables and calculations,\n\t    \tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\t    \twhich can be placed in CurveUtils.\n\t    \t*/\n\t\n\t    \tfunction CubicPoly() {\n\t\n\t    \t}\n\t\n\t    \t/*\n\t    \t * Compute coefficients for a cubic polynomial\n\t    \t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t    \t * such that\n\t    \t *   p(0) = x0, p(1) = x1\n\t    \t *  and\n\t    \t *   p'(0) = t0, p'(1) = t1.\n\t    \t */\n\t    \tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\t\n\t    \t\tthis.c0 = x0;\n\t    \t\tthis.c1 = t0;\n\t    \t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t    \t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\n\t    \t};\n\t\n\t    \tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\t\n\t    \t\t// compute tangents when parameterized in [t1,t2]\n\t    \t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t    \t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\t\n\t    \t\t// rescale tangents for parametrization in [0,1]\n\t    \t\tt1 *= dt1;\n\t    \t\tt2 *= dt1;\n\t\n\t    \t\t// initCubicPoly\n\t    \t\tthis.init( x1, x2, t1, t2 );\n\t\n\t    \t};\n\t\n\t    \t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\t    \tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\t\n\t    \t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\t\n\t    \t};\n\t\n\t    \tCubicPoly.prototype.calc = function( t ) {\n\t\n\t    \t\tvar t2 = t * t;\n\t    \t\tvar t3 = t2 * t;\n\t    \t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\t\n\t    \t};\n\t\n\t    \t// Subclass Three.js curve\n\t    \treturn Curve.create(\n\t\n\t    \t\tfunction ( p /* array of Vector3 */ ) {\n\t\n\t    \t\t\tthis.points = p || [];\n\t    \t\t\tthis.closed = false;\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction ( t ) {\n\t\n\t    \t\t\tvar points = this.points,\n\t    \t\t\t\tpoint, intPoint, weight, l;\n\t\n\t    \t\t\tl = points.length;\n\t\n\t    \t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\t\n\t    \t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t    \t\t\tintPoint = Math.floor( point );\n\t    \t\t\tweight = point - intPoint;\n\t\n\t    \t\t\tif ( this.closed ) {\n\t\n\t    \t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\t\n\t    \t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\t\n\t    \t\t\t\tintPoint = l - 2;\n\t    \t\t\t\tweight = 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar p0, p1, p2, p3; // 4 points\n\t\n\t    \t\t\tif ( this.closed || intPoint > 0 ) {\n\t\n\t    \t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// extrapolate first point\n\t    \t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t    \t\t\t\tp0 = tmp;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tp1 = points[ intPoint % l ];\n\t    \t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\t\n\t    \t\t\tif ( this.closed || intPoint + 2 < l ) {\n\t\n\t    \t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// extrapolate last point\n\t    \t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t    \t\t\t\tp3 = tmp;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\t\n\t    \t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t    \t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t    \t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t    \t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t    \t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\t\n\t    \t\t\t\t// safety check for repeated points\n\t    \t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t    \t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t    \t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\t\n\t    \t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t    \t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t    \t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\t\n\t    \t\t\t} else if ( this.type === 'catmullrom' ) {\n\t\n\t    \t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t    \t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t    \t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t    \t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar v = new Vector3(\n\t    \t\t\t\tpx.calc( weight ),\n\t    \t\t\t\tpy.calc( weight ),\n\t    \t\t\t\tpz.calc( weight )\n\t    \t\t\t);\n\t\n\t    \t\t\treturn v;\n\t\n\t    \t\t}\n\t\n\t    \t);\n\t\n\t    } )();\n\t\n\t    /**************************************************************\n\t     *\tClosed Spline 3D curve\n\t     **************************************************************/\n\t\n\t\n\t    function ClosedSplineCurve3( points ) {\n\t\n\t    \tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\t\n\t    \texports.CatmullRomCurve3.call( this, points );\n\t    \tthis.type = 'catmullrom';\n\t    \tthis.closed = true;\n\t\n\t    }\n\t\n\t    ClosedSplineCurve3.prototype = Object.create( exports.CatmullRomCurve3.prototype );\n\t\n\t    /**************************************************************\n\t     *\tSpline 3D curve\n\t     **************************************************************/\n\t\n\t\n\t    var SplineCurve3 = Curve.create(\n\t\n\t    \tfunction ( points /* array of Vector3 */ ) {\n\t\n\t    \t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n\t    \t\tthis.points = ( points === undefined ) ? [] : points;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tvar points = this.points;\n\t    \t\tvar point = ( points.length - 1 ) * t;\n\t\n\t    \t\tvar intPoint = Math.floor( point );\n\t    \t\tvar weight = point - intPoint;\n\t\n\t    \t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n\t    \t\tvar point1 = points[ intPoint ];\n\t    \t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t    \t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\t\n\t    \t\tvar interpolate = exports.CurveUtils.interpolate;\n\t\n\t    \t\treturn new Vector3(\n\t    \t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t    \t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n\t    \t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tCubic Bezier 3D curve\n\t     **************************************************************/\n\t\n\t    exports.CubicBezierCurve3 = Curve.create(\n\t\n\t    \tfunction ( v0, v1, v2, v3 ) {\n\t\n\t    \t\tthis.v0 = v0;\n\t    \t\tthis.v1 = v1;\n\t    \t\tthis.v2 = v2;\n\t    \t\tthis.v3 = v3;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tvar b3 = exports.ShapeUtils.b3;\n\t\n\t    \t\treturn new Vector3(\n\t    \t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t    \t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n\t    \t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tQuadratic Bezier 3D curve\n\t     **************************************************************/\n\t\n\t    exports.QuadraticBezierCurve3 = Curve.create(\n\t\n\t    \tfunction ( v0, v1, v2 ) {\n\t\n\t    \t\tthis.v0 = v0;\n\t    \t\tthis.v1 = v1;\n\t    \t\tthis.v2 = v2;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tvar b2 = exports.ShapeUtils.b2;\t\t\n\t\n\t    \t\treturn new Vector3(\n\t    \t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t    \t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n\t    \t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tLine3D\n\t     **************************************************************/\n\t\n\t    exports.LineCurve3 = Curve.create(\n\t\n\t    \tfunction ( v1, v2 ) {\n\t\n\t    \t\tthis.v1 = v1;\n\t    \t\tthis.v2 = v2;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tif ( t === 1 ) {\n\t\n\t    \t\t\treturn this.v2.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar vector = new Vector3();\n\t\n\t    \t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t    \t\tvector.multiplyScalar( t );\n\t    \t\tvector.add( this.v1 );\n\t\n\t    \t\treturn vector;\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tArc curve\n\t     **************************************************************/\n\t\n\t    function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t    \tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\t\n\t    }\n\t\n\t    ArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\t    ArcCurve.prototype.constructor = ArcCurve;\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    exports.SceneUtils = {\n\t\n\t    \tcreateMultiMaterialObject: function ( geometry, materials ) {\n\t\n\t    \t\tvar group = new Group();\n\t\n\t    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\t\n\t    \t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn group;\n\t\n\t    \t},\n\t\n\t    \tdetach: function ( child, parent, scene ) {\n\t\n\t    \t\tchild.applyMatrix( parent.matrixWorld );\n\t    \t\tparent.remove( child );\n\t    \t\tscene.add( child );\n\t\n\t    \t},\n\t\n\t    \tattach: function ( child, scene, parent ) {\n\t\n\t    \t\tvar matrixWorldInverse = new Matrix4();\n\t    \t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\t    \t\tchild.applyMatrix( matrixWorldInverse );\n\t\n\t    \t\tscene.remove( child );\n\t    \t\tparent.add( child );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    function Face4 ( a, b, c, d, normal, color, materialIndex ) {\n\t    \tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t    \treturn new Face3( a, b, c, normal, color, materialIndex );\n\t    }\n\t\n\t    var LineStrip = 0;\n\t\n\t    var LinePieces = 1;\n\t\n\t    function PointCloud ( geometry, material ) {\n\t    \tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t    \treturn new Points( geometry, material );\n\t    }\n\t\n\t    function ParticleSystem ( geometry, material ) {\n\t    \tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t    \treturn new Points( geometry, material );\n\t    }\n\t\n\t    function PointCloudMaterial ( parameters ) {\n\t    \tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t    \treturn new PointsMaterial( parameters );\n\t    }\n\t\n\t    function ParticleBasicMaterial ( parameters ) {\n\t    \tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t    \treturn new PointsMaterial( parameters );\n\t    }\n\t\n\t    function ParticleSystemMaterial ( parameters ) {\n\t    \tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t    \treturn new PointsMaterial( parameters );\n\t    }\n\t\n\t    function Vertex ( x, y, z ) {\n\t    \tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t    \treturn new Vector3( x, y, z );\n\t    }\n\t\n\t    //\n\t\n\t    function EdgesHelper( object, hex ) {\n\t    \tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t    \treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\t    }\n\t\n\t    function WireframeHelper( object, hex ) {\n\t    \tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t    \treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\t    }\n\t\n\t    //\n\t\n\t    Object.assign( Box2.prototype, {\n\t    \tcenter: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t    \t\treturn this.getCenter( optionalTarget );\n\t    \t},\n\t    \tempty: function () {\n\t    \t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t    \t\treturn this.isEmpty();\n\t    \t},\n\t    \tisIntersectionBox: function ( box ) {\n\t    \t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t    \t\treturn this.intersectsBox( box );\n\t    \t},\n\t    \tsize: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t    \t\treturn this.getSize( optionalTarget );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Box3.prototype, {\n\t    \tcenter: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t    \t\treturn this.getCenter( optionalTarget );\n\t    \t},\n\t    \tempty: function () {\n\t    \t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t    \t\treturn this.isEmpty();\n\t    \t},\n\t    \tisIntersectionBox: function ( box ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t    \t\treturn this.intersectsBox( box );\n\t    \t},\n\t    \tisIntersectionSphere: function ( sphere ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t    \t\treturn this.intersectsSphere( sphere );\n\t    \t},\n\t    \tsize: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t    \t\treturn this.getSize( optionalTarget );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Line3.prototype, {\n\t    \tcenter: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t    \t\treturn this.getCenter( optionalTarget );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Matrix3.prototype, {\n\t    \tmultiplyVector3: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t    \t\treturn vector.applyMatrix3( this );\n\t    \t},\n\t    \tmultiplyVector3Array: function ( a ) {\n\t    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t    \t\treturn this.applyToVector3Array( a );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Matrix4.prototype, {\n\t    \textractPosition: function ( m ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t    \t\treturn this.copyPosition( m );\n\t    \t},\n\t    \tsetRotationFromQuaternion: function ( q ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t    \t\treturn this.makeRotationFromQuaternion( q );\n\t    \t},\n\t    \tmultiplyVector3: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n\t    \t\treturn vector.applyProjection( this );\n\t    \t},\n\t    \tmultiplyVector4: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t    \t\treturn vector.applyMatrix4( this );\n\t    \t},\n\t    \tmultiplyVector3Array: function ( a ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t    \t\treturn this.applyToVector3Array( a );\n\t    \t},\n\t    \trotateAxis: function ( v ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t    \t\tv.transformDirection( this );\n\t    \t},\n\t    \tcrossVector: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t    \t\treturn vector.applyMatrix4( this );\n\t    \t},\n\t    \ttranslate: function ( v ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\t    \t},\n\t    \trotateX: function ( angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\t    \t},\n\t    \trotateY: function ( angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\t    \t},\n\t    \trotateZ: function ( angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\t    \t},\n\t    \trotateByAxis: function ( axis, angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Plane.prototype, {\n\t    \tisIntersectionLine: function ( line ) {\n\t    \t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t    \t\treturn this.intersectsLine( line );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Quaternion.prototype, {\n\t    \tmultiplyVector3: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t    \t\treturn vector.applyQuaternion( this );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Ray.prototype, {\n\t    \tisIntersectionBox: function ( box ) {\n\t    \t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t    \t\treturn this.intersectsBox( box );\n\t    \t},\n\t    \tisIntersectionPlane: function ( plane ) {\n\t    \t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t    \t\treturn this.intersectsPlane( plane );\n\t    \t},\n\t    \tisIntersectionSphere: function ( sphere ) {\n\t    \t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t    \t\treturn this.intersectsSphere( sphere );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Shape.prototype, {\n\t    \textrude: function ( options ) {\n\t    \t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t    \t\treturn new ExtrudeGeometry( this, options );\n\t    \t},\n\t    \tmakeGeometry: function ( options ) {\n\t    \t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t    \t\treturn new ShapeGeometry( this, options );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Vector3.prototype, {\n\t    \tsetEulerFromRotationMatrix: function () {\n\t    \t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\t    \t},\n\t    \tsetEulerFromQuaternion: function () {\n\t    \t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\t    \t},\n\t    \tgetPositionFromMatrix: function ( m ) {\n\t    \t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t    \t\treturn this.setFromMatrixPosition( m );\n\t    \t},\n\t    \tgetScaleFromMatrix: function ( m ) {\n\t    \t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t    \t\treturn this.setFromMatrixScale( m );\n\t    \t},\n\t    \tgetColumnFromMatrix: function ( index, matrix ) {\n\t    \t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t    \t\treturn this.setFromMatrixColumn( matrix, index );\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.assign( Object3D.prototype, {\n\t    \tgetChildByName: function ( name ) {\n\t    \t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t    \t\treturn this.getObjectByName( name );\n\t    \t},\n\t    \trenderDepth: function ( value ) {\n\t    \t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\t    \t},\n\t    \ttranslate: function ( distance, axis ) {\n\t    \t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t    \t\treturn this.translateOnAxis( axis, distance );\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( Object3D.prototype, {\n\t    \teulerOrder: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t    \t\t\treturn this.rotation.order;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t    \t\t\tthis.rotation.order = value;\n\t    \t\t}\n\t    \t},\n\t    \tuseQuaternion: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( LOD.prototype, {\n\t    \tobjects: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t    \t\t\treturn this.levels;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\t\n\t    \tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t    \t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\t\n\t    \tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\t    \tthis.setFocalLength( focalLength );\n\t\n\t    };\n\t\n\t    //\n\t\n\t    Object.defineProperties( Light.prototype, {\n\t    \tonlyShadow: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraFov: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t    \t\t\tthis.shadow.camera.fov = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraLeft: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t    \t\t\tthis.shadow.camera.left = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraRight: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t    \t\t\tthis.shadow.camera.right = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraTop: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t    \t\t\tthis.shadow.camera.top = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraBottom: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t    \t\t\tthis.shadow.camera.bottom = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraNear: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t    \t\t\tthis.shadow.camera.near = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraFar: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t    \t\t\tthis.shadow.camera.far = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraVisible: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\t    \t\t}\n\t    \t},\n\t    \tshadowBias: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t    \t\t\tthis.shadow.bias = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowDarkness: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapWidth: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t    \t\t\tthis.shadow.mapSize.width = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapHeight: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t    \t\t\tthis.shadow.mapSize.height = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.defineProperties( BufferAttribute.prototype, {\n\t    \tlength: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t    \t\t\treturn this.array.length;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( BufferGeometry.prototype, {\n\t    \taddIndex: function ( index ) {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t    \t\tthis.setIndex( index );\n\t    \t},\n\t    \taddDrawCall: function ( start, count, indexOffset ) {\n\t    \t\tif ( indexOffset !== undefined ) {\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\t    \t\t}\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t    \t\tthis.addGroup( start, count );\n\t    \t},\n\t    \tclearDrawCalls: function () {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t    \t\tthis.clearGroups();\n\t    \t},\n\t    \tcomputeTangents: function () {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\t    \t},\n\t    \tcomputeOffsets: function () {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( BufferGeometry.prototype, {\n\t    \tdrawcalls: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t    \t\t\treturn this.groups;\n\t    \t\t}\n\t    \t},\n\t    \toffsets: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t    \t\t\treturn this.groups;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.defineProperties( Material.prototype, {\n\t    \twrapAround: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t    \t\t}\n\t    \t},\n\t    \twrapRGB: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n\t    \t\t\treturn new Color();\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( MeshPhongMaterial.prototype, {\n\t    \tmetal: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t    \t\t\treturn false;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( ShaderMaterial.prototype, {\n\t    \tderivatives: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t    \t\t\treturn this.extensions.derivatives;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t    \t\t\tthis.extensions.derivatives = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    EventDispatcher.prototype = Object.assign( Object.create( {\n\t\n\t    \t// Note: Extra base ensures these properties are not 'assign'ed.\n\t\n\t    \tconstructor: EventDispatcher,\n\t\n\t    \tapply: function ( target ) {\n\t\n\t    \t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n\t    \t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\t\n\t    \t\tObject.assign( target, this );\n\t\n\t    \t}\n\t\n\t    } ), EventDispatcher.prototype );\n\t\n\t    //\n\t\n\t    Object.assign( WebGLRenderer.prototype, {\n\t    \tsupportsFloatTextures: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t    \t\treturn this.extensions.get( 'OES_texture_float' );\n\t    \t},\n\t    \tsupportsHalfFloatTextures: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t    \t\treturn this.extensions.get( 'OES_texture_half_float' );\n\t    \t},\n\t    \tsupportsStandardDerivatives: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t    \t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\t    \t},\n\t    \tsupportsCompressedTextureS3TC: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t    \t},\n\t    \tsupportsCompressedTexturePVRTC: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t    \t},\n\t    \tsupportsBlendMinMax: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t    \t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\t    \t},\n\t    \tsupportsVertexTextures: function () {\n\t    \t\treturn this.capabilities.vertexTextures;\n\t    \t},\n\t    \tsupportsInstancedArrays: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t    \t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\t    \t},\n\t    \tenableScissorTest: function ( boolean ) {\n\t    \t\t// console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t    \t\tthis.setScissorTest( boolean );\n\t    \t},\n\t    \tinitMaterial: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\t    \t},\n\t    \taddPrePlugin: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\t    \t},\n\t    \taddPostPlugin: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\t    \t},\n\t    \tupdateShadowMap: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( WebGLRenderer.prototype, {\n\t    \tshadowMapEnabled: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.shadowMap.enabled;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t    \t\t\tthis.shadowMap.enabled = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapType: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.shadowMap.type;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t    \t\t\tthis.shadowMap.type = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapCullFace: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.shadowMap.cullFace;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t    \t\t\tthis.shadowMap.cullFace = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( WebGLShadowMap.prototype, {\n\t    \tcullFace: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n\t    \t\t},\n\t    \t\tset: function ( cullFace ) {\n\t    \t\t\tvar value = ( cullFace !== CullFaceBack );\n\t    \t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t    \t\t\tthis.renderReverseSided = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.defineProperties( WebGLRenderTarget.prototype, {\n\t    \twrapS: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t    \t\t\treturn this.texture.wrapS;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t    \t\t\tthis.texture.wrapS = value;\n\t    \t\t}\n\t    \t},\n\t    \twrapT: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t    \t\t\treturn this.texture.wrapT;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t    \t\t\tthis.texture.wrapT = value;\n\t    \t\t}\n\t    \t},\n\t    \tmagFilter: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t    \t\t\treturn this.texture.magFilter;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t    \t\t\tthis.texture.magFilter = value;\n\t    \t\t}\n\t    \t},\n\t    \tminFilter: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t    \t\t\treturn this.texture.minFilter;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t    \t\t\tthis.texture.minFilter = value;\n\t    \t\t}\n\t    \t},\n\t    \tanisotropy: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t    \t\t\treturn this.texture.anisotropy;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t    \t\t\tthis.texture.anisotropy = value;\n\t    \t\t}\n\t    \t},\n\t    \toffset: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t    \t\t\treturn this.texture.offset;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t    \t\t\tthis.texture.offset = value;\n\t    \t\t}\n\t    \t},\n\t    \trepeat: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t    \t\t\treturn this.texture.repeat;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t    \t\t\tthis.texture.repeat = value;\n\t    \t\t}\n\t    \t},\n\t    \tformat: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t    \t\t\treturn this.texture.format;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t    \t\t\tthis.texture.format = value;\n\t    \t\t}\n\t    \t},\n\t    \ttype: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t    \t\t\treturn this.texture.type;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t    \t\t\tthis.texture.type = value;\n\t    \t\t}\n\t    \t},\n\t    \tgenerateMipmaps: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t    \t\t\treturn this.texture.generateMipmaps;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t    \t\t\tthis.texture.generateMipmaps = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.assign( Audio.prototype, {\n\t    \tload: function ( file ) {\n\t    \t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n\t    \t\tvar scope = this;\n\t    \t\tvar audioLoader = new AudioLoader();\n\t    \t\taudioLoader.load( file, function ( buffer ) {\n\t    \t\t\tscope.setBuffer( buffer );\n\t    \t\t} );\n\t    \t\treturn this;\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( AudioAnalyser.prototype, {\n\t    \tgetData: function ( file ) {\n\t    \t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t    \t\treturn this.getFrequencyData();\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    var GeometryUtils = {\n\t\n\t    \tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\t\n\t    \t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\tif ( geometry2.isMesh ) {\n\t\n\t    \t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\t\n\t    \t\t\tmatrix = geometry2.matrix;\n\t    \t\t\tgeometry2 = geometry2.geometry;\n\t\n\t    \t\t}\n\t\n\t    \t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\t\n\t    \t},\n\t\n\t    \tcenter: function ( geometry ) {\n\t\n\t    \t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t    \t\treturn geometry.center();\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    var ImageUtils = {\n\t\n\t    \tcrossOrigin: undefined,\n\t\n\t    \tloadTexture: function ( url, mapping, onLoad, onError ) {\n\t\n\t    \t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\t\n\t    \t\tvar loader = new TextureLoader();\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t    \t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\t\n\t    \t\tif ( mapping ) texture.mapping = mapping;\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\t\n\t    \t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\t\n\t    \t\tvar loader = new CubeTextureLoader();\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t    \t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\t\n\t    \t\tif ( mapping ) texture.mapping = mapping;\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tloadCompressedTexture: function () {\n\t\n\t    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\t\n\t    \t},\n\t\n\t    \tloadCompressedTextureCube: function () {\n\t\n\t    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    //\n\t\n\t    function Projector () {\n\t\n\t    \tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\t\n\t    \tthis.projectVector = function ( vector, camera ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t    \t\tvector.project( camera );\n\t\n\t    \t};\n\t\n\t    \tthis.unprojectVector = function ( vector, camera ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t    \t\tvector.unproject( camera );\n\t\n\t    \t};\n\t\n\t    \tthis.pickingRay = function ( vector, camera ) {\n\t\n\t    \t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    //\n\t\n\t    function CanvasRenderer () {\n\t\n\t    \tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\t\n\t    \tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \tthis.clear = function () {};\n\t    \tthis.render = function () {};\n\t    \tthis.setClearColor = function () {};\n\t    \tthis.setSize = function () {};\n\t\n\t    }\n\t\n\t    Object.defineProperty( exports, 'AudioContext', {\n\t    \tget: function () {\n\t    \t\treturn exports.getAudioContext();\n\t    \t}\n\t    });\n\t\n\t    exports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\t    exports.WebGLRenderTarget = WebGLRenderTarget;\n\t    exports.WebGLRenderer = WebGLRenderer;\n\t    exports.ShaderLib = ShaderLib;\n\t    exports.UniformsLib = UniformsLib;\n\t    exports.ShaderChunk = ShaderChunk;\n\t    exports.FogExp2 = FogExp2;\n\t    exports.Fog = Fog;\n\t    exports.Scene = Scene;\n\t    exports.LensFlare = LensFlare;\n\t    exports.Sprite = Sprite;\n\t    exports.LOD = LOD;\n\t    exports.SkinnedMesh = SkinnedMesh;\n\t    exports.Skeleton = Skeleton;\n\t    exports.Bone = Bone;\n\t    exports.Mesh = Mesh;\n\t    exports.LineSegments = LineSegments;\n\t    exports.Line = Line;\n\t    exports.Points = Points;\n\t    exports.Group = Group;\n\t    exports.VideoTexture = VideoTexture;\n\t    exports.DataTexture = DataTexture;\n\t    exports.CompressedTexture = CompressedTexture;\n\t    exports.CubeTexture = CubeTexture;\n\t    exports.CanvasTexture = CanvasTexture;\n\t    exports.DepthTexture = DepthTexture;\n\t    exports.TextureIdCount = TextureIdCount;\n\t    exports.Texture = Texture;\n\t    exports.MaterialIdCount = MaterialIdCount;\n\t    exports.CompressedTextureLoader = CompressedTextureLoader;\n\t    exports.BinaryTextureLoader = BinaryTextureLoader;\n\t    exports.DataTextureLoader = DataTextureLoader;\n\t    exports.CubeTextureLoader = CubeTextureLoader;\n\t    exports.TextureLoader = TextureLoader;\n\t    exports.ObjectLoader = ObjectLoader;\n\t    exports.MaterialLoader = MaterialLoader;\n\t    exports.BufferGeometryLoader = BufferGeometryLoader;\n\t    exports.LoadingManager = LoadingManager;\n\t    exports.JSONLoader = JSONLoader;\n\t    exports.ImageLoader = ImageLoader;\n\t    exports.FontLoader = FontLoader;\n\t    exports.XHRLoader = XHRLoader;\n\t    exports.Loader = Loader;\n\t    exports.AudioLoader = AudioLoader;\n\t    exports.SpotLightShadow = SpotLightShadow;\n\t    exports.SpotLight = SpotLight;\n\t    exports.PointLight = PointLight;\n\t    exports.HemisphereLight = HemisphereLight;\n\t    exports.DirectionalLightShadow = DirectionalLightShadow;\n\t    exports.DirectionalLight = DirectionalLight;\n\t    exports.AmbientLight = AmbientLight;\n\t    exports.LightShadow = LightShadow;\n\t    exports.Light = Light;\n\t    exports.StereoCamera = StereoCamera;\n\t    exports.PerspectiveCamera = PerspectiveCamera;\n\t    exports.OrthographicCamera = OrthographicCamera;\n\t    exports.CubeCamera = CubeCamera;\n\t    exports.Camera = Camera;\n\t    exports.AudioListener = AudioListener;\n\t    exports.PositionalAudio = PositionalAudio;\n\t    exports.getAudioContext = getAudioContext;\n\t    exports.AudioAnalyser = AudioAnalyser;\n\t    exports.Audio = Audio;\n\t    exports.VectorKeyframeTrack = VectorKeyframeTrack;\n\t    exports.StringKeyframeTrack = StringKeyframeTrack;\n\t    exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\t    exports.NumberKeyframeTrack = NumberKeyframeTrack;\n\t    exports.ColorKeyframeTrack = ColorKeyframeTrack;\n\t    exports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\t    exports.PropertyMixer = PropertyMixer;\n\t    exports.PropertyBinding = PropertyBinding;\n\t    exports.KeyframeTrack = KeyframeTrack;\n\t    exports.AnimationObjectGroup = AnimationObjectGroup;\n\t    exports.AnimationMixer = AnimationMixer;\n\t    exports.AnimationClip = AnimationClip;\n\t    exports.Uniform = Uniform;\n\t    exports.InstancedBufferGeometry = InstancedBufferGeometry;\n\t    exports.BufferGeometry = BufferGeometry;\n\t    exports.GeometryIdCount = GeometryIdCount;\n\t    exports.Geometry = Geometry;\n\t    exports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\t    exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\t    exports.InterleavedBuffer = InterleavedBuffer;\n\t    exports.InstancedBufferAttribute = InstancedBufferAttribute;\n\t    exports.DynamicBufferAttribute = DynamicBufferAttribute;\n\t    exports.Float64Attribute = Float64Attribute;\n\t    exports.Float32Attribute = Float32Attribute;\n\t    exports.Uint32Attribute = Uint32Attribute;\n\t    exports.Int32Attribute = Int32Attribute;\n\t    exports.Uint16Attribute = Uint16Attribute;\n\t    exports.Int16Attribute = Int16Attribute;\n\t    exports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\t    exports.Uint8Attribute = Uint8Attribute;\n\t    exports.Int8Attribute = Int8Attribute;\n\t    exports.BufferAttribute = BufferAttribute;\n\t    exports.Face3 = Face3;\n\t    exports.Object3DIdCount = Object3DIdCount;\n\t    exports.Object3D = Object3D;\n\t    exports.Raycaster = Raycaster;\n\t    exports.Layers = Layers;\n\t    exports.EventDispatcher = EventDispatcher;\n\t    exports.Clock = Clock;\n\t    exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\t    exports.LinearInterpolant = LinearInterpolant;\n\t    exports.DiscreteInterpolant = DiscreteInterpolant;\n\t    exports.CubicInterpolant = CubicInterpolant;\n\t    exports.Interpolant = Interpolant;\n\t    exports.Triangle = Triangle;\n\t    exports.Spline = Spline;\n\t    exports.Spherical = Spherical;\n\t    exports.Plane = Plane;\n\t    exports.Frustum = Frustum;\n\t    exports.Sphere = Sphere;\n\t    exports.Ray = Ray;\n\t    exports.Matrix4 = Matrix4;\n\t    exports.Matrix3 = Matrix3;\n\t    exports.Box3 = Box3;\n\t    exports.Box2 = Box2;\n\t    exports.Line3 = Line3;\n\t    exports.Euler = Euler;\n\t    exports.Vector4 = Vector4;\n\t    exports.Vector3 = Vector3;\n\t    exports.Vector2 = Vector2;\n\t    exports.Quaternion = Quaternion;\n\t    exports.Color = Color;\n\t    exports.MorphBlendMesh = MorphBlendMesh;\n\t    exports.ImmediateRenderObject = ImmediateRenderObject;\n\t    exports.VertexNormalsHelper = VertexNormalsHelper;\n\t    exports.SpotLightHelper = SpotLightHelper;\n\t    exports.SkeletonHelper = SkeletonHelper;\n\t    exports.PointLightHelper = PointLightHelper;\n\t    exports.HemisphereLightHelper = HemisphereLightHelper;\n\t    exports.GridHelper = GridHelper;\n\t    exports.FaceNormalsHelper = FaceNormalsHelper;\n\t    exports.DirectionalLightHelper = DirectionalLightHelper;\n\t    exports.CameraHelper = CameraHelper;\n\t    exports.BoundingBoxHelper = BoundingBoxHelper;\n\t    exports.BoxHelper = BoxHelper;\n\t    exports.ArrowHelper = ArrowHelper;\n\t    exports.AxisHelper = AxisHelper;\n\t    exports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\t    exports.SplineCurve3 = SplineCurve3;\n\t    exports.ArcCurve = ArcCurve;\n\t    exports.EllipseCurve = EllipseCurve;\n\t    exports.SplineCurve = SplineCurve;\n\t    exports.CubicBezierCurve = CubicBezierCurve;\n\t    exports.QuadraticBezierCurve = QuadraticBezierCurve;\n\t    exports.LineCurve = LineCurve;\n\t    exports.Shape = Shape;\n\t    exports.ShapePath = ShapePath;\n\t    exports.Path = Path;\n\t    exports.Font = Font;\n\t    exports.CurvePath = CurvePath;\n\t    exports.Curve = Curve;\n\t    exports.WireframeGeometry = WireframeGeometry;\n\t    exports.ParametricGeometry = ParametricGeometry;\n\t    exports.TetrahedronGeometry = TetrahedronGeometry;\n\t    exports.OctahedronGeometry = OctahedronGeometry;\n\t    exports.IcosahedronGeometry = IcosahedronGeometry;\n\t    exports.DodecahedronGeometry = DodecahedronGeometry;\n\t    exports.PolyhedronGeometry = PolyhedronGeometry;\n\t    exports.TubeGeometry = TubeGeometry;\n\t    exports.TorusKnotGeometry = TorusKnotGeometry;\n\t    exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\t    exports.TorusGeometry = TorusGeometry;\n\t    exports.TorusBufferGeometry = TorusBufferGeometry;\n\t    exports.TextGeometry = TextGeometry;\n\t    exports.SphereBufferGeometry = SphereBufferGeometry;\n\t    exports.SphereGeometry = SphereGeometry;\n\t    exports.RingGeometry = RingGeometry;\n\t    exports.RingBufferGeometry = RingBufferGeometry;\n\t    exports.PlaneBufferGeometry = PlaneBufferGeometry;\n\t    exports.PlaneGeometry = PlaneGeometry;\n\t    exports.LatheGeometry = LatheGeometry;\n\t    exports.LatheBufferGeometry = LatheBufferGeometry;\n\t    exports.ShapeGeometry = ShapeGeometry;\n\t    exports.ExtrudeGeometry = ExtrudeGeometry;\n\t    exports.EdgesGeometry = EdgesGeometry;\n\t    exports.ConeGeometry = ConeGeometry;\n\t    exports.ConeBufferGeometry = ConeBufferGeometry;\n\t    exports.CylinderGeometry = CylinderGeometry;\n\t    exports.CylinderBufferGeometry = CylinderBufferGeometry;\n\t    exports.CircleBufferGeometry = CircleBufferGeometry;\n\t    exports.CircleGeometry = CircleGeometry;\n\t    exports.BoxBufferGeometry = BoxBufferGeometry;\n\t    exports.BoxGeometry = BoxGeometry;\n\t    exports.ShadowMaterial = ShadowMaterial;\n\t    exports.SpriteMaterial = SpriteMaterial;\n\t    exports.RawShaderMaterial = RawShaderMaterial;\n\t    exports.ShaderMaterial = ShaderMaterial;\n\t    exports.PointsMaterial = PointsMaterial;\n\t    exports.MultiMaterial = MultiMaterial;\n\t    exports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\t    exports.MeshStandardMaterial = MeshStandardMaterial;\n\t    exports.MeshPhongMaterial = MeshPhongMaterial;\n\t    exports.MeshNormalMaterial = MeshNormalMaterial;\n\t    exports.MeshLambertMaterial = MeshLambertMaterial;\n\t    exports.MeshDepthMaterial = MeshDepthMaterial;\n\t    exports.MeshBasicMaterial = MeshBasicMaterial;\n\t    exports.LineDashedMaterial = LineDashedMaterial;\n\t    exports.LineBasicMaterial = LineBasicMaterial;\n\t    exports.Material = Material;\n\t    exports.REVISION = REVISION;\n\t    exports.MOUSE = MOUSE;\n\t    exports.CullFaceNone = CullFaceNone;\n\t    exports.CullFaceBack = CullFaceBack;\n\t    exports.CullFaceFront = CullFaceFront;\n\t    exports.CullFaceFrontBack = CullFaceFrontBack;\n\t    exports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\t    exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\t    exports.BasicShadowMap = BasicShadowMap;\n\t    exports.PCFShadowMap = PCFShadowMap;\n\t    exports.PCFSoftShadowMap = PCFSoftShadowMap;\n\t    exports.FrontSide = FrontSide;\n\t    exports.BackSide = BackSide;\n\t    exports.DoubleSide = DoubleSide;\n\t    exports.FlatShading = FlatShading;\n\t    exports.SmoothShading = SmoothShading;\n\t    exports.NoColors = NoColors;\n\t    exports.FaceColors = FaceColors;\n\t    exports.VertexColors = VertexColors;\n\t    exports.NoBlending = NoBlending;\n\t    exports.NormalBlending = NormalBlending;\n\t    exports.AdditiveBlending = AdditiveBlending;\n\t    exports.SubtractiveBlending = SubtractiveBlending;\n\t    exports.MultiplyBlending = MultiplyBlending;\n\t    exports.CustomBlending = CustomBlending;\n\t    exports.BlendingMode = BlendingMode;\n\t    exports.AddEquation = AddEquation;\n\t    exports.SubtractEquation = SubtractEquation;\n\t    exports.ReverseSubtractEquation = ReverseSubtractEquation;\n\t    exports.MinEquation = MinEquation;\n\t    exports.MaxEquation = MaxEquation;\n\t    exports.ZeroFactor = ZeroFactor;\n\t    exports.OneFactor = OneFactor;\n\t    exports.SrcColorFactor = SrcColorFactor;\n\t    exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\t    exports.SrcAlphaFactor = SrcAlphaFactor;\n\t    exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\t    exports.DstAlphaFactor = DstAlphaFactor;\n\t    exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\t    exports.DstColorFactor = DstColorFactor;\n\t    exports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\t    exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\t    exports.NeverDepth = NeverDepth;\n\t    exports.AlwaysDepth = AlwaysDepth;\n\t    exports.LessDepth = LessDepth;\n\t    exports.LessEqualDepth = LessEqualDepth;\n\t    exports.EqualDepth = EqualDepth;\n\t    exports.GreaterEqualDepth = GreaterEqualDepth;\n\t    exports.GreaterDepth = GreaterDepth;\n\t    exports.NotEqualDepth = NotEqualDepth;\n\t    exports.MultiplyOperation = MultiplyOperation;\n\t    exports.MixOperation = MixOperation;\n\t    exports.AddOperation = AddOperation;\n\t    exports.NoToneMapping = NoToneMapping;\n\t    exports.LinearToneMapping = LinearToneMapping;\n\t    exports.ReinhardToneMapping = ReinhardToneMapping;\n\t    exports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\t    exports.CineonToneMapping = CineonToneMapping;\n\t    exports.UVMapping = UVMapping;\n\t    exports.CubeReflectionMapping = CubeReflectionMapping;\n\t    exports.CubeRefractionMapping = CubeRefractionMapping;\n\t    exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\t    exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\t    exports.SphericalReflectionMapping = SphericalReflectionMapping;\n\t    exports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\t    exports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\t    exports.TextureMapping = TextureMapping;\n\t    exports.RepeatWrapping = RepeatWrapping;\n\t    exports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\t    exports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\t    exports.TextureWrapping = TextureWrapping;\n\t    exports.NearestFilter = NearestFilter;\n\t    exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\t    exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\t    exports.LinearFilter = LinearFilter;\n\t    exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\t    exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\t    exports.TextureFilter = TextureFilter;\n\t    exports.UnsignedByteType = UnsignedByteType;\n\t    exports.ByteType = ByteType;\n\t    exports.ShortType = ShortType;\n\t    exports.UnsignedShortType = UnsignedShortType;\n\t    exports.IntType = IntType;\n\t    exports.UnsignedIntType = UnsignedIntType;\n\t    exports.FloatType = FloatType;\n\t    exports.HalfFloatType = HalfFloatType;\n\t    exports.UnsignedShort4444Type = UnsignedShort4444Type;\n\t    exports.UnsignedShort5551Type = UnsignedShort5551Type;\n\t    exports.UnsignedShort565Type = UnsignedShort565Type;\n\t    exports.UnsignedInt248Type = UnsignedInt248Type;\n\t    exports.AlphaFormat = AlphaFormat;\n\t    exports.RGBFormat = RGBFormat;\n\t    exports.RGBAFormat = RGBAFormat;\n\t    exports.LuminanceFormat = LuminanceFormat;\n\t    exports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\t    exports.RGBEFormat = RGBEFormat;\n\t    exports.DepthFormat = DepthFormat;\n\t    exports.DepthStencilFormat = DepthStencilFormat;\n\t    exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\t    exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\t    exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\t    exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\t    exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\t    exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\t    exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\t    exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\t    exports.RGB_ETC1_Format = RGB_ETC1_Format;\n\t    exports.LoopOnce = LoopOnce;\n\t    exports.LoopRepeat = LoopRepeat;\n\t    exports.LoopPingPong = LoopPingPong;\n\t    exports.InterpolateDiscrete = InterpolateDiscrete;\n\t    exports.InterpolateLinear = InterpolateLinear;\n\t    exports.InterpolateSmooth = InterpolateSmooth;\n\t    exports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\t    exports.ZeroSlopeEnding = ZeroSlopeEnding;\n\t    exports.WrapAroundEnding = WrapAroundEnding;\n\t    exports.TrianglesDrawMode = TrianglesDrawMode;\n\t    exports.TriangleStripDrawMode = TriangleStripDrawMode;\n\t    exports.TriangleFanDrawMode = TriangleFanDrawMode;\n\t    exports.LinearEncoding = LinearEncoding;\n\t    exports.sRGBEncoding = sRGBEncoding;\n\t    exports.GammaEncoding = GammaEncoding;\n\t    exports.RGBEEncoding = RGBEEncoding;\n\t    exports.LogLuvEncoding = LogLuvEncoding;\n\t    exports.RGBM7Encoding = RGBM7Encoding;\n\t    exports.RGBM16Encoding = RGBM16Encoding;\n\t    exports.RGBDEncoding = RGBDEncoding;\n\t    exports.BasicDepthPacking = BasicDepthPacking;\n\t    exports.RGBADepthPacking = RGBADepthPacking;\n\t    exports.CubeGeometry = BoxGeometry;\n\t    exports.Face4 = Face4;\n\t    exports.LineStrip = LineStrip;\n\t    exports.LinePieces = LinePieces;\n\t    exports.MeshFaceMaterial = MultiMaterial;\n\t    exports.PointCloud = PointCloud;\n\t    exports.Particle = Sprite;\n\t    exports.ParticleSystem = ParticleSystem;\n\t    exports.PointCloudMaterial = PointCloudMaterial;\n\t    exports.ParticleBasicMaterial = ParticleBasicMaterial;\n\t    exports.ParticleSystemMaterial = ParticleSystemMaterial;\n\t    exports.Vertex = Vertex;\n\t    exports.EdgesHelper = EdgesHelper;\n\t    exports.WireframeHelper = WireframeHelper;\n\t    exports.GeometryUtils = GeometryUtils;\n\t    exports.ImageUtils = ImageUtils;\n\t    exports.Projector = Projector;\n\t    exports.CanvasRenderer = CanvasRenderer;\n\t\n\t    Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t})));\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = new RegExp(\n\t\t'^' +\n\t\n\t\t// protocol identifier\n\t\t'(?:(?:(?:https?):)?//)' +\n\t\n\t\t// user:pass authentication\n\t\t'(?:\\\\S+(?::\\\\S*)?@)?' +\n\t\t'(?:' +\n\t\n\t\t// IP address exclusion\n\t\t// private & local networks\n\t\t'(' +\n\t\t'(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})' +\n\t\t'(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})' +\n\t\t'(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})' +\n\t\n\t\t// IP address dotted notation octets\n\t\t// excludes loopback network 0.0.0.0\n\t\t// excludes reserved space >= 224.0.0.0\n\t\t// excludes network & broacast addresses\n\t\t// (first & last IP address of each class)\n\t\t'(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])' +\n\t\t'(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}' +\n\t\t'(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))' +\n\t\t'|' +\n\t\n\t\t// host name\n\t\t'(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)' +\n\t\n\t\t// domain name\n\t\t'(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*' +\n\t\n\t\t// TLD identifier\n\t\t'(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))?' +\n\t\t')' +\n\t\n\t\t')' +\n\t\n\t\t// port number\n\t\t'(?::(\\\\d{2,5}))?' +\n\t\n\t\t// resource path\n\t\t'(?:/\\\\S*)?' +\n\t\t'$', 'i'\n\t);\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.3 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar arrayEach = __webpack_require__(40),\n\t    baseEach = __webpack_require__(41),\n\t    bindCallback = __webpack_require__(42),\n\t    isArray = __webpack_require__(43);\n\t\n\t/**\n\t * Creates a function for `_.forEach` or `_.forEachRight`.\n\t *\n\t * @private\n\t * @param {Function} arrayFunc The function to iterate over an array.\n\t * @param {Function} eachFunc The function to iterate over a collection.\n\t * @returns {Function} Returns the new each function.\n\t */\n\tfunction createForEach(arrayFunc, eachFunc) {\n\t  return function(collection, iteratee, thisArg) {\n\t    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))\n\t      ? arrayFunc(collection, iteratee)\n\t      : eachFunc(collection, bindCallback(iteratee, thisArg, 3));\n\t  };\n\t}\n\t\n\t/**\n\t * Iterates over elements of `collection` invoking `iteratee` for each element.\n\t * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n\t * (value, index|key, collection). Iteratee functions may exit iteration early\n\t * by explicitly returning `false`.\n\t *\n\t * **Note:** As with other \"Collections\" methods, objects with a \"length\" property\n\t * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\n\t * may be used for object iteration.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @alias each\n\t * @category Collection\n\t * @param {Array|Object|string} collection The collection to iterate over.\n\t * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n\t * @param {*} [thisArg] The `this` binding of `iteratee`.\n\t * @returns {Array|Object|string} Returns `collection`.\n\t * @example\n\t *\n\t * _([1, 2]).forEach(function(n) {\n\t *   console.log(n);\n\t * }).value();\n\t * // => logs each value from left to right and returns the array\n\t *\n\t * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {\n\t *   console.log(n, key);\n\t * });\n\t * // => logs each value-key pair and returns the object (iteration order is not guaranteed)\n\t */\n\tvar forEach = createForEach(arrayEach, baseEach);\n\t\n\tmodule.exports = forEach;\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.2.0 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar baseAssign = __webpack_require__(44),\n\t    createAssigner = __webpack_require__(47),\n\t    keys = __webpack_require__(48);\n\t\n\t/**\n\t * A specialized version of `_.assign` for customizing assigned values without\n\t * support for argument juggling, multiple sources, and `this` binding `customizer`\n\t * functions.\n\t *\n\t * @private\n\t * @param {Object} object The destination object.\n\t * @param {Object} source The source object.\n\t * @param {Function} customizer The function to customize assigned values.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction assignWith(object, source, customizer) {\n\t  var index = -1,\n\t      props = keys(source),\n\t      length = props.length;\n\t\n\t  while (++index < length) {\n\t    var key = props[index],\n\t        value = object[key],\n\t        result = customizer(value, source[key], key, object, source);\n\t\n\t    if ((result === result ? (result !== value) : (value === value)) ||\n\t        (value === undefined && !(key in object))) {\n\t      object[key] = result;\n\t    }\n\t  }\n\t  return object;\n\t}\n\t\n\t/**\n\t * Assigns own enumerable properties of source object(s) to the destination\n\t * object. Subsequent sources overwrite property assignments of previous sources.\n\t * If `customizer` is provided it is invoked to produce the assigned values.\n\t * The `customizer` is bound to `thisArg` and invoked with five arguments:\n\t * (objectValue, sourceValue, key, object, source).\n\t *\n\t * **Note:** This method mutates `object` and is based on\n\t * [`Object.assign`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @alias extend\n\t * @category Object\n\t * @param {Object} object The destination object.\n\t * @param {...Object} [sources] The source objects.\n\t * @param {Function} [customizer] The function to customize assigned values.\n\t * @param {*} [thisArg] The `this` binding of `customizer`.\n\t * @returns {Object} Returns `object`.\n\t * @example\n\t *\n\t * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });\n\t * // => { 'user': 'fred', 'age': 40 }\n\t *\n\t * // using a customizer callback\n\t * var defaults = _.partialRight(_.assign, function(value, other) {\n\t *   return _.isUndefined(value) ? other : value;\n\t * });\n\t *\n\t * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n\t * // => { 'user': 'barney', 'age': 36 }\n\t */\n\tvar assign = createAssigner(function(object, source, customizer) {\n\t  return customizer\n\t    ? assignWith(object, source, customizer)\n\t    : baseAssign(object, source);\n\t});\n\t\n\tmodule.exports = assign;\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(32);\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.Audio = function ( listener ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'Audio';\n\t\tthis.started = false;\n\t\n\t\tif (listener.context) {\n\t\n\t\t\tthis.context = listener.context;\n\t\t\t// this.source = this.context.createBufferSource();\n\t\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect( listener.input );\n\t\n\t\t\tthis.panner = this.context.createPanner();\n\t\t\tthis.panner.connect( this.gain );\n\t\n\t\t} else {\n\t\n\t\t\tthis.source = new Audio();\n\t\n\t\t}\n\t};\n\t\n\tTHREE.Audio.prototype = Object.create( THREE.Object3D.prototype );\n\t\n\tTHREE.Audio.prototype.load = function ( sources ) {\n\t\t//todo: support multiple sources for different audio formats\n\t\n\t\tvar scope = this;\n\t\tvar file;\n\t\tvar i;\n\t\tvar match;\n\t\tvar element = this.source instanceof window.HTMLAudioElement ? this.source : new Audio();\n\t\n\t\tif (typeof sources === 'string') {\n\t\t\tsources = [sources];\n\t\t}\n\t\n\t\tfor (i = 0; i < sources.length; i++) {\n\t\t\tfile = sources[i];\n\t\t\tmatch = /\\.([a-z0-9]+)$/i.exec(file);\n\t\t\tif (match && element.canPlayType('audio/' + match[1])) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\n\t\tif (this.context) {\n\t\t\tvar request = new XMLHttpRequest();\n\t\t\trequest.open( 'GET', file, true );\n\t\t\trequest.responseType = 'arraybuffer';\n\t\t\trequest.onload = function ( e ) {\n\t\t\t\tconsole.log('audio buffer loaded. decoding...', e );\n\t\t\t\tscope.context.decodeAudioData( this.response, function ( buffer ) {\n\t\n\t\t\t\t\tscope.buffer = buffer;\n\t\t\t\t\tif (scope.started) {\n\t\t\t\t\t\tscope.start();\n\t\t\t\t\t}\n\t\n\t\t\t\t}, function onFailure(e) {\n\t\t\t\t\tconsole.log('Decoding the audio buffer failed', e);\n\t\t\t\t} );\n\t\n\t\t\t};\n\t\n\t\t\trequest.onerror = function ( e ) {\n\t\t\t\tconsole.log('error', e);\n\t\t\t};\n\t\n\t\t\trequest.send();\n\t\n\t\t} else {\n\t\n\t\t\tthis.source.src = file;\n\t\t\tthis.source.play();\n\t\n\t\t}\n\t\n\t\treturn this;\n\t};\n\t\n\tTHREE.Audio.prototype.stop = function ( value ) {\n\t\n\t\tif (this.context) {\n\t\t\tthis.source.stop();\n\t\t\tthis.source.disconnect( this.panner );\n\t\t\tthis.source = null;\n\t\t} else {\n\t\t\tthis.source.pause();\n\t\t\tthis.source.currentTime = 0;\n\t\t}\n\t\tthis.started = false;\n\t};\n\t\n\tTHREE.Audio.prototype.start = function ( value ) {\n\t\n\t\tthis.started = true;\n\t\tif (this.context) {\n\t\t\tif (this.source) {\n\t\t\t\tthis.source.disconnect( this.panner );\n\t\t\t}\n\t\n\t\t\tif (this.buffer) {\n\t\t\t\tthis.source = this.context.createBufferSource();\n\t\t\t\tthis.source.buffer = this.buffer;\n\t\t\t\tthis.source.connect( this.panner );\n\t\t\t\tthis.source.start( 0 );\n\t\t\t}\n\t\t} else {\n\t\t\tthis.source.currentTime = 0;\n\t\t\tthis.source.play();\n\t\t}\n\t\n\t};\n\t\n\tTHREE.Audio.prototype.setLoop = function ( value ) {\n\t\n\t\tthis.source.loop = value;\n\t\n\t};\n\t\n\tTHREE.Audio.prototype.setRefDistance = function ( value ) {\n\t\n\t\tif ( this.panner ) {\n\t\n\t\t\tthis.panner.refDistance = value;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.Audio.prototype.setRolloffFactor = function ( value ) {\n\t\n\t\tif ( this.panner ) {\n\t\n\t\t\tthis.panner.rolloffFactor = value;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.Audio.prototype.volume = function ( volume, time ) {\n\t\n\t\tif ( this.gain ) {\n\t\n\t\t\tif ( volume !== undefined ) {\n\t\t\t\tthis.gain.gain.linearRampToValueAtTime( volume, this.context.currentTime + (time || 0));\n\t\t\t}\n\t\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\t\n\t\tif ( volume !== undefined ) {\n\t\t\tthis.source.volume = volume;\n\t\t}\n\t\n\t\treturn this.source.volume;\n\t};\n\t\n\tTHREE.Audio.prototype.updateMatrixWorld = ( function () {\n\t\n\t\tvar position = new THREE.Vector3();\n\t\n\t\treturn function ( force ) {\n\t\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t\t\tif (this.panner) {\n\t\n\t\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t} )();\n\t\n\t// File:src/extras/audio/AudioListener.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.AudioListener = function () {\n\t\tvar AudioContext = window.AudioContext || window.webkitAudioContext;\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'AudioListener';\n\t\n\t\tif (AudioContext) {\n\t\t\tthis.context = new AudioContext();\n\t\t\tthis.input = this.context.createGain();\n\t\n\t\t\tthis.input.connect( this.context.destination );\n\t\t}\n\t};\n\t\n\tTHREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );\n\t\n\tTHREE.AudioListener.prototype.volume = function (val) {\n\t\tif (this.input) {\n\t\t\tval = val !== undefined && parseFloat(val);\n\t\t\tif (!isNaN(val)) {\n\t\t\t\tthis.input.gain.value = val;\n\t\t\t}\n\t\n\t\t\treturn this.input.gain.value;\n\t\t}\n\t};\n\t\n\tTHREE.AudioListener.prototype.updateMatrixWorld = ( function () {\n\t\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar scale = new THREE.Vector3();\n\t\n\t\tvar orientation = new THREE.Vector3();\n\t\n\t\treturn function ( force ) {\n\t\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t\t\tvar listener;\n\t\n\t\t\tif (this.context) {\n\t\t\t\tlistener = this.context.listener;\n\t\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\t\n\t\t\t\torientation.set( 0, 0, -1 ).applyQuaternion( quaternion );\n\t\n\t            // Error Fixed\n\t            try {\n\t\t\t\t    listener.setPosition( position.x, position.y, position.z );\n\t\t\t\t    listener.setOrientation( orientation.x, orientation.y, orientation.z, this.up.x, this.up.y, this.up.z );\n\t            } catch (e) {}\n\t\n\t\t\t}\n\t\t};\n\t\n\t} ());\n\t\n\t\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(32);\n\t\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t *\n\t * Based on \"A Practical Analytic Model for Daylight\"\n\t * aka The Preetham Model, the de facto standard analytic skydome model\n\t * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\n\t *\n\t * First implemented by Simon Wallner\n\t * http://www.simonwallner.at/projects/atmospheric-scattering\n\t *\n\t * Improved by Martin Upitis\n\t * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n\t *\n\t * Three.js integration by zz85 http://twitter.com/blurspline\n\t*/\n\t\n\tTHREE.ShaderLib[ 'sky' ] = {\n\t\n\t\tuniforms: {\n\t\n\t\t\tluminance: { value: 1 },\n\t\t\tturbidity: { value: 2 },\n\t\t\treileigh: { value: 1 },\n\t\t\tmieCoefficient: { value: 0.005 },\n\t\t\tmieDirectionalG: { value: 0.8 },\n\t\t\tsunPosition: { value: new THREE.Vector3() }\n\t\n\t\t},\n\t\n\t\tvertexShader: [\n\t\n\t\t\t\"varying vec3 vWorldPosition;\",\n\t\n\t\t\t\"void main() {\",\n\t\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n\t\t\t\t\"vWorldPosition = worldPosition.xyz;\",\n\t\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\n\t\t\t\"}\",\n\t\n\t\t].join( \"\\n\" ),\n\t\n\t\tfragmentShader: [\n\t\n\t\t\t\"uniform sampler2D skySampler;\",\n\t\t\t\"uniform vec3 sunPosition;\",\n\t\t\t\"varying vec3 vWorldPosition;\",\n\t\n\t\t\t\"vec3 cameraPos = vec3(0., 0., 0.);\",\n\t\t\t\"// uniform sampler2D sDiffuse;\",\n\t\t\t\"// const float turbidity = 10.0; //\",\n\t\t\t\"// const float reileigh = 2.; //\",\n\t\t\t\"// const float luminance = 1.0; //\",\n\t\t\t\"// const float mieCoefficient = 0.005;\",\n\t\t\t\"// const float mieDirectionalG = 0.8;\",\n\t\n\t\t\t\"uniform float luminance;\",\n\t\t\t\"uniform float turbidity;\",\n\t\t\t\"uniform float reileigh;\",\n\t\t\t\"uniform float mieCoefficient;\",\n\t\t\t\"uniform float mieDirectionalG;\",\n\t\n\t\t\t\"// constants for atmospheric scattering\",\n\t\t\t\"const float e = 2.71828182845904523536028747135266249775724709369995957;\",\n\t\t\t\"const float pi = 3.141592653589793238462643383279502884197169;\",\n\t\n\t\t\t\"const float n = 1.0003; // refractive index of air\",\n\t\t\t\"const float N = 2.545E25; // number of molecules per unit volume for air at\",\n\t\t\t\t\t\t\t\t\t\"// 288.15K and 1013mb (sea level -45 celsius)\",\n\t\t\t\"const float pn = 0.035;\t// depolatization factor for standard air\",\n\t\n\t\t\t\"// wavelength of used primaries, according to preetham\",\n\t\t\t\"const vec3 lambda = vec3(680E-9, 550E-9, 450E-9);\",\n\t\n\t\t\t\"// mie stuff\",\n\t\t\t\"// K coefficient for the primaries\",\n\t\t\t\"const vec3 K = vec3(0.686, 0.678, 0.666);\",\n\t\t\t\"const float v = 4.0;\",\n\t\n\t\t\t\"// optical length at zenith for molecules\",\n\t\t\t\"const float rayleighZenithLength = 8.4E3;\",\n\t\t\t\"const float mieZenithLength = 1.25E3;\",\n\t\t\t\"const vec3 up = vec3(0.0, 1.0, 0.0);\",\n\t\n\t\t\t\"const float EE = 1000.0;\",\n\t\t\t\"const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\",\n\t\t\t\"// 66 arc seconds -> degrees, and the cosine of that\",\n\t\n\t\t\t\"// earth shadow hack\",\n\t\t\t\"const float cutoffAngle = pi/1.95;\",\n\t\t\t\"const float steepness = 1.5;\",\n\t\n\t\n\t\t\t\"vec3 totalRayleigh(vec3 lambda)\",\n\t\t\t\"{\",\n\t\t\t\t\"return (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));\",\n\t\t\t\"}\",\n\t\n\t\t\t// see http://blenderartists.org/forum/showthread.php?321110-Shaders-and-Skybox-madness\n\t\t\t\"// A simplied version of the total Reayleigh scattering to works on browsers that use ANGLE\",\n\t\t\t\"vec3 simplifiedRayleigh()\",\n\t\t\t\"{\",\n\t\t\t\t\"return 0.0005 / vec3(94, 40, 18);\",\n\t\t\t\t// return 0.00054532832366 / (3.0 * 2.545E25 * pow(vec3(680E-9, 550E-9, 450E-9), vec3(4.0)) * 6.245);\n\t\t\t\"}\",\n\t\n\t\t\t\"float rayleighPhase(float cosTheta)\",\n\t\t\t\"{\t \",\n\t\t\t\t\"return (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\t\"//\treturn (1.0 / (3.0*pi)) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\t\"//\treturn (3.0 / 4.0) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\t\"}\",\n\t\n\t\t\t\"vec3 totalMie(vec3 lambda, vec3 K, float T)\",\n\t\t\t\"{\",\n\t\t\t\t\"float c = (0.2 * T ) * 10E-18;\",\n\t\t\t\t\"return 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;\",\n\t\t\t\"}\",\n\t\n\t\t\t\"float hgPhase(float cosTheta, float g)\",\n\t\t\t\"{\",\n\t\t\t\t\"return (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));\",\n\t\t\t\"}\",\n\t\n\t\t\t\"float sunIntensity(float zenithAngleCos)\",\n\t\t\t\"{\",\n\t\t\t// This function originally used `exp(n)`, but it returns an incorrect value\n\t\t\t// on Samsung S6 phones. So it has been replaced with the equivalent `pow(e, n)`.\n\t\t\t// See https://github.com/mrdoob/three.js/issues/8382\n\t\t\t\t\"return EE * max(0.0, 1.0 - pow(e, -((cutoffAngle - acos(zenithAngleCos))/steepness)));\",\n\t\t\t\"}\",\n\t\n\t\t\t\"// float logLuminance(vec3 c)\",\n\t\t\t\"// {\",\n\t\t\t\"// \treturn log(c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722);\",\n\t\t\t\"// }\",\n\t\n\t\t\t\"// Filmic ToneMapping http://filmicgames.com/archives/75\",\n\t\t\t\"float A = 0.15;\",\n\t\t\t\"float B = 0.50;\",\n\t\t\t\"float C = 0.10;\",\n\t\t\t\"float D = 0.20;\",\n\t\t\t\"float E = 0.02;\",\n\t\t\t\"float F = 0.30;\",\n\t\t\t\"float W = 1000.0;\",\n\t\n\t\t\t\"vec3 Uncharted2Tonemap(vec3 x)\",\n\t\t\t\"{\",\n\t\t\t   \"return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\",\n\t\t\t\"}\",\n\t\n\t\n\t\t\t\"void main() \",\n\t\t\t\"{\",\n\t\t\t\t\"float sunfade = 1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);\",\n\t\n\t\t\t\t\"// luminance =  1.0 ;// vWorldPosition.y / 450000. + 0.5; //sunPosition.y / 450000. * 1. + 0.5;\",\n\t\n\t\t\t\t \"// gl_FragColor = vec4(sunfade, sunfade, sunfade, 1.0);\",\n\t\n\t\t\t\t\"float reileighCoefficient = reileigh - (1.0* (1.0-sunfade));\",\n\t\n\t\t\t\t\"vec3 sunDirection = normalize(sunPosition);\",\n\t\n\t\t\t\t\"float sunE = sunIntensity(dot(sunDirection, up));\",\n\t\n\t\t\t\t\"// extinction (absorbtion + out scattering) \",\n\t\t\t\t\"// rayleigh coefficients\",\n\t\n\t\t\t\t// \"vec3 betaR = totalRayleigh(lambda) * reileighCoefficient;\",\n\t\t\t\t\"vec3 betaR = simplifiedRayleigh() * reileighCoefficient;\",\n\t\n\t\t\t\t\"// mie coefficients\",\n\t\t\t\t\"vec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;\",\n\t\n\t\t\t\t\"// optical length\",\n\t\t\t\t\"// cutoff angle at 90 to avoid singularity in next formula.\",\n\t\t\t\t\"float zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPos))));\",\n\t\t\t\t\"float sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\",\n\t\t\t\t\"float sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\",\n\t\n\t\n\t\n\t\t\t\t\"// combined extinction factor\t\",\n\t\t\t\t\"vec3 Fex = exp(-(betaR * sR + betaM * sM));\",\n\t\n\t\t\t\t\"// in scattering\",\n\t\t\t\t\"float cosTheta = dot(normalize(vWorldPosition - cameraPos), sunDirection);\",\n\t\n\t\t\t\t\"float rPhase = rayleighPhase(cosTheta*0.5+0.5);\",\n\t\t\t\t\"vec3 betaRTheta = betaR * rPhase;\",\n\t\n\t\t\t\t\"float mPhase = hgPhase(cosTheta, mieDirectionalG);\",\n\t\t\t\t\"vec3 betaMTheta = betaM * mPhase;\",\n\t\n\t\n\t\t\t\t\"vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));\",\n\t\t\t\t\"Lin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up, sunDirection),5.0),0.0,1.0));\",\n\t\n\t\t\t\t\"//nightsky\",\n\t\t\t\t\"vec3 direction = normalize(vWorldPosition - cameraPos);\",\n\t\t\t\t\"float theta = acos(direction.y); // elevation --> y-axis, [-pi/2, pi/2]\",\n\t\t\t\t\"float phi = atan(direction.z, direction.x); // azimuth --> x-axis [-pi/2, pi/2]\",\n\t\t\t\t\"vec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);\",\n\t\t\t\t\"// vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;\",\n\t\t\t\t\"vec3 L0 = vec3(0.1) * Fex;\",\n\t\n\t\t\t\t\"// composition + solar disc\",\n\t\t\t\t\"//if (cosTheta > sunAngularDiameterCos)\",\n\t\t\t\t\"float sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);\",\n\t\t\t\t\"// if (normalize(vWorldPosition - cameraPos).y>0.0)\",\n\t\t\t\t\"L0 += (sunE * 19000.0 * Fex)*sundisk;\",\n\t\n\t\n\t\t\t\t\"vec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));\",\n\t\n\t\t\t\t\"vec3 texColor = (Lin+L0);   \",\n\t\t\t\t\"texColor *= 0.04 ;\",\n\t\t\t\t\"texColor += vec3(0.0,0.001,0.0025)*0.3;\",\n\t\n\t\t\t\t\"float g_fMaxLuminance = 1.0;\",\n\t\t\t\t\"float fLumScaled = 0.1 / luminance;     \",\n\t\t\t\t\"float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (g_fMaxLuminance * g_fMaxLuminance)))) / (1.0 + fLumScaled); \",\n\t\n\t\t\t\t\"float ExposureBias = fLumCompressed;\",\n\t\n\t\t\t\t\"vec3 curr = Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);\",\n\t\t\t\t\"vec3 color = curr*whiteScale;\",\n\t\n\t\t\t\t\"vec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));\",\n\t\n\t\n\t\t\t\t\"gl_FragColor.rgb = retColor;\",\n\t\n\t\t\t\t\"gl_FragColor.a = 1.0;\",\n\t\t\t\"}\",\n\t\n\t\t].join( \"\\n\" )\n\t\n\t};\n\t\n\tTHREE.Sky = function () {\n\t\n\t\tvar skyShader = THREE.ShaderLib[ \"sky\" ];\n\t\tvar skyUniforms = THREE.UniformsUtils.clone( skyShader.uniforms );\n\t\n\t\tvar skyMat = new THREE.ShaderMaterial( {\n\t\t\tfragmentShader: skyShader.fragmentShader,\n\t\t\tvertexShader: skyShader.vertexShader,\n\t\t\tuniforms: skyUniforms,\n\t\t\tside: THREE.BackSide\n\t\t} );\n\t\n\t\tvar skyGeo = new THREE.SphereBufferGeometry( 450000, 32, 15 );\n\t\tvar skyMesh = new THREE.Mesh( skyGeo, skyMat );\n\t\n\t\n\t\t// Expose variables\n\t\tthis.mesh = skyMesh;\n\t\tthis.uniforms = skyUniforms;\n\t\n\t};\n\t\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar assign        = __webpack_require__(49)\n\t  , normalizeOpts = __webpack_require__(45)\n\t  , isCallable    = __webpack_require__(46)\n\t  , contains      = __webpack_require__(50)\n\t\n\t  , d;\n\t\n\td = module.exports = function (dscr, value/*, options*/) {\n\t\tvar c, e, w, options, desc;\n\t\tif ((arguments.length < 2) || (typeof dscr !== 'string')) {\n\t\t\toptions = value;\n\t\t\tvalue = dscr;\n\t\t\tdscr = null;\n\t\t} else {\n\t\t\toptions = arguments[2];\n\t\t}\n\t\tif (dscr == null) {\n\t\t\tc = w = true;\n\t\t\te = false;\n\t\t} else {\n\t\t\tc = contains.call(dscr, 'c');\n\t\t\te = contains.call(dscr, 'e');\n\t\t\tw = contains.call(dscr, 'w');\n\t\t}\n\t\n\t\tdesc = { value: value, configurable: c, enumerable: e, writable: w };\n\t\treturn !options ? desc : assign(normalizeOpts(options), desc);\n\t};\n\t\n\td.gs = function (dscr, get, set/*, options*/) {\n\t\tvar c, e, options, desc;\n\t\tif (typeof dscr !== 'string') {\n\t\t\toptions = set;\n\t\t\tset = get;\n\t\t\tget = dscr;\n\t\t\tdscr = null;\n\t\t} else {\n\t\t\toptions = arguments[3];\n\t\t}\n\t\tif (get == null) {\n\t\t\tget = undefined;\n\t\t} else if (!isCallable(get)) {\n\t\t\toptions = get;\n\t\t\tget = set = undefined;\n\t\t} else if (set == null) {\n\t\t\tset = undefined;\n\t\t} else if (!isCallable(set)) {\n\t\t\toptions = set;\n\t\t\tset = undefined;\n\t\t}\n\t\tif (dscr == null) {\n\t\t\tc = true;\n\t\t\te = false;\n\t\t} else {\n\t\t\tc = contains.call(dscr, 'c');\n\t\t\te = contains.call(dscr, 'e');\n\t\t}\n\t\n\t\tdesc = { get: get, set: set, configurable: c, enumerable: e };\n\t\treturn !options ? desc : assign(normalizeOpts(options), desc);\n\t};\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = function (fn) {\n\t\tif (typeof fn !== 'function') throw new TypeError(fn + \" is not a function\");\n\t\treturn fn;\n\t};\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.0 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/**\n\t * A specialized version of `_.forEach` for arrays without support for callback\n\t * shorthands or `this` binding.\n\t *\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Array} Returns `array`.\n\t */\n\tfunction arrayEach(array, iteratee) {\n\t  var index = -1,\n\t      length = array.length;\n\t\n\t  while (++index < length) {\n\t    if (iteratee(array[index], index, array) === false) {\n\t      break;\n\t    }\n\t  }\n\t  return array;\n\t}\n\t\n\tmodule.exports = arrayEach;\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar keys = __webpack_require__(55);\n\t\n\t/**\n\t * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n\t * of an array-like value.\n\t */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/**\n\t * The base implementation of `_.forEach` without support for callback\n\t * shorthands and `this` binding.\n\t *\n\t * @private\n\t * @param {Array|Object|string} collection The collection to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Array|Object|string} Returns `collection`.\n\t */\n\tvar baseEach = createBaseEach(baseForOwn);\n\t\n\t/**\n\t * The base implementation of `baseForIn` and `baseForOwn` which iterates\n\t * over `object` properties returned by `keysFunc` invoking `iteratee` for\n\t * each property. Iteratee functions may exit iteration early by explicitly\n\t * returning `false`.\n\t *\n\t * @private\n\t * @param {Object} object The object to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @param {Function} keysFunc The function to get the keys of `object`.\n\t * @returns {Object} Returns `object`.\n\t */\n\tvar baseFor = createBaseFor();\n\t\n\t/**\n\t * The base implementation of `_.forOwn` without support for callback\n\t * shorthands and `this` binding.\n\t *\n\t * @private\n\t * @param {Object} object The object to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction baseForOwn(object, iteratee) {\n\t  return baseFor(object, iteratee, keys);\n\t}\n\t\n\t/**\n\t * The base implementation of `_.property` without support for deep paths.\n\t *\n\t * @private\n\t * @param {string} key The key of the property to get.\n\t * @returns {Function} Returns the new function.\n\t */\n\tfunction baseProperty(key) {\n\t  return function(object) {\n\t    return object == null ? undefined : object[key];\n\t  };\n\t}\n\t\n\t/**\n\t * Creates a `baseEach` or `baseEachRight` function.\n\t *\n\t * @private\n\t * @param {Function} eachFunc The function to iterate over a collection.\n\t * @param {boolean} [fromRight] Specify iterating from right to left.\n\t * @returns {Function} Returns the new base function.\n\t */\n\tfunction createBaseEach(eachFunc, fromRight) {\n\t  return function(collection, iteratee) {\n\t    var length = collection ? getLength(collection) : 0;\n\t    if (!isLength(length)) {\n\t      return eachFunc(collection, iteratee);\n\t    }\n\t    var index = fromRight ? length : -1,\n\t        iterable = toObject(collection);\n\t\n\t    while ((fromRight ? index-- : ++index < length)) {\n\t      if (iteratee(iterable[index], index, iterable) === false) {\n\t        break;\n\t      }\n\t    }\n\t    return collection;\n\t  };\n\t}\n\t\n\t/**\n\t * Creates a base function for `_.forIn` or `_.forInRight`.\n\t *\n\t * @private\n\t * @param {boolean} [fromRight] Specify iterating from right to left.\n\t * @returns {Function} Returns the new base function.\n\t */\n\tfunction createBaseFor(fromRight) {\n\t  return function(object, iteratee, keysFunc) {\n\t    var iterable = toObject(object),\n\t        props = keysFunc(object),\n\t        length = props.length,\n\t        index = fromRight ? length : -1;\n\t\n\t    while ((fromRight ? index-- : ++index < length)) {\n\t      var key = props[index];\n\t      if (iteratee(iterable[key], key, iterable) === false) {\n\t        break;\n\t      }\n\t    }\n\t    return object;\n\t  };\n\t}\n\t\n\t/**\n\t * Gets the \"length\" property value of `object`.\n\t *\n\t * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n\t * that affects Safari on at least iOS 8.1-8.3 ARM64.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {*} Returns the \"length\" value.\n\t */\n\tvar getLength = baseProperty('length');\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * Converts `value` to an object if it's not one.\n\t *\n\t * @private\n\t * @param {*} value The value to process.\n\t * @returns {Object} Returns the object.\n\t */\n\tfunction toObject(value) {\n\t  return isObject(value) ? value : Object(value);\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\tmodule.exports = baseEach;\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/**\n\t * A specialized version of `baseCallback` which only supports `this` binding\n\t * and specifying the number of arguments to provide to `func`.\n\t *\n\t * @private\n\t * @param {Function} func The function to bind.\n\t * @param {*} thisArg The `this` binding of `func`.\n\t * @param {number} [argCount] The number of arguments to provide to `func`.\n\t * @returns {Function} Returns the callback.\n\t */\n\tfunction bindCallback(func, thisArg, argCount) {\n\t  if (typeof func != 'function') {\n\t    return identity;\n\t  }\n\t  if (thisArg === undefined) {\n\t    return func;\n\t  }\n\t  switch (argCount) {\n\t    case 1: return function(value) {\n\t      return func.call(thisArg, value);\n\t    };\n\t    case 3: return function(value, index, collection) {\n\t      return func.call(thisArg, value, index, collection);\n\t    };\n\t    case 4: return function(accumulator, value, index, collection) {\n\t      return func.call(thisArg, accumulator, value, index, collection);\n\t    };\n\t    case 5: return function(value, other, key, object, source) {\n\t      return func.call(thisArg, value, other, key, object, source);\n\t    };\n\t  }\n\t  return function() {\n\t    return func.apply(thisArg, arguments);\n\t  };\n\t}\n\t\n\t/**\n\t * This method returns the first argument provided to it.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Utility\n\t * @param {*} value Any value.\n\t * @returns {*} Returns `value`.\n\t * @example\n\t *\n\t * var object = { 'user': 'fred' };\n\t *\n\t * _.identity(object) === object;\n\t * // => true\n\t */\n\tfunction identity(value) {\n\t  return value;\n\t}\n\t\n\tmodule.exports = bindCallback;\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/** `Object#toString` result references. */\n\tvar arrayTag = '[object Array]',\n\t    funcTag = '[object Function]';\n\t\n\t/** Used to detect host constructors (Safari > 5). */\n\tvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\t\n\t/**\n\t * Checks if `value` is object-like.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\t\n\t/** Used for native method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/** Used to resolve the decompiled source of functions. */\n\tvar fnToString = Function.prototype.toString;\n\t\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t/**\n\t * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objToString = objectProto.toString;\n\t\n\t/** Used to detect if a method is native. */\n\tvar reIsNative = RegExp('^' +\n\t  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n\t  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n\t);\n\t\n\t/* Native method references for those with the same name as other `lodash` methods. */\n\tvar nativeIsArray = getNative(Array, 'isArray');\n\t\n\t/**\n\t * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n\t * of an array-like value.\n\t */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/**\n\t * Gets the native function at `key` of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {string} key The key of the method to get.\n\t * @returns {*} Returns the function if it's native, else `undefined`.\n\t */\n\tfunction getNative(object, key) {\n\t  var value = object == null ? undefined : object[key];\n\t  return isNative(value) ? value : undefined;\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as an `Array` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n\t * @example\n\t *\n\t * _.isArray([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArray(function() { return arguments; }());\n\t * // => false\n\t */\n\tvar isArray = nativeIsArray || function(value) {\n\t  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;\n\t};\n\t\n\t/**\n\t * Checks if `value` is classified as a `Function` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n\t * @example\n\t *\n\t * _.isFunction(_);\n\t * // => true\n\t *\n\t * _.isFunction(/abc/);\n\t * // => false\n\t */\n\tfunction isFunction(value) {\n\t  // The use of `Object#toString` avoids issues with the `typeof` operator\n\t  // in older versions of Chrome and Safari which return 'function' for regexes\n\t  // and Safari 8 equivalents which return 'object' for typed array constructors.\n\t  return isObject(value) && objToString.call(value) == funcTag;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Checks if `value` is a native function.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n\t * @example\n\t *\n\t * _.isNative(Array.prototype.push);\n\t * // => true\n\t *\n\t * _.isNative(_);\n\t * // => false\n\t */\n\tfunction isNative(value) {\n\t  if (value == null) {\n\t    return false;\n\t  }\n\t  if (isFunction(value)) {\n\t    return reIsNative.test(fnToString.call(value));\n\t  }\n\t  return isObjectLike(value) && reIsHostCtor.test(value);\n\t}\n\t\n\tmodule.exports = isArray;\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.2.0 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar baseCopy = __webpack_require__(56),\n\t    keys = __webpack_require__(48);\n\t\n\t/**\n\t * The base implementation of `_.assign` without support for argument juggling,\n\t * multiple sources, and `customizer` functions.\n\t *\n\t * @private\n\t * @param {Object} object The destination object.\n\t * @param {Object} source The source object.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction baseAssign(object, source) {\n\t  return source == null\n\t    ? object\n\t    : baseCopy(source, keys(source), object);\n\t}\n\t\n\tmodule.exports = baseAssign;\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar forEach = Array.prototype.forEach, create = Object.create;\n\t\n\tvar process = function (src, obj) {\n\t\tvar key;\n\t\tfor (key in src) obj[key] = src[key];\n\t};\n\t\n\tmodule.exports = function (options/*, …options*/) {\n\t\tvar result = create(null);\n\t\tforEach.call(arguments, function (options) {\n\t\t\tif (options == null) return;\n\t\t\tprocess(Object(options), result);\n\t\t});\n\t\treturn result;\n\t};\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Deprecated\n\t\n\t'use strict';\n\t\n\tmodule.exports = function (obj) { return typeof obj === 'function'; };\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.1.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar bindCallback = __webpack_require__(60),\n\t    isIterateeCall = __webpack_require__(61),\n\t    restParam = __webpack_require__(62);\n\t\n\t/**\n\t * Creates a function that assigns properties of source object(s) to a given\n\t * destination object.\n\t *\n\t * **Note:** This function is used to create `_.assign`, `_.defaults`, and `_.merge`.\n\t *\n\t * @private\n\t * @param {Function} assigner The function to assign values.\n\t * @returns {Function} Returns the new assigner function.\n\t */\n\tfunction createAssigner(assigner) {\n\t  return restParam(function(object, sources) {\n\t    var index = -1,\n\t        length = object == null ? 0 : sources.length,\n\t        customizer = length > 2 ? sources[length - 2] : undefined,\n\t        guard = length > 2 ? sources[2] : undefined,\n\t        thisArg = length > 1 ? sources[length - 1] : undefined;\n\t\n\t    if (typeof customizer == 'function') {\n\t      customizer = bindCallback(customizer, thisArg, 5);\n\t      length -= 2;\n\t    } else {\n\t      customizer = typeof thisArg == 'function' ? thisArg : undefined;\n\t      length -= (customizer ? 1 : 0);\n\t    }\n\t    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n\t      customizer = length < 3 ? undefined : customizer;\n\t      length = 1;\n\t    }\n\t    while (++index < length) {\n\t      var source = sources[index];\n\t      if (source) {\n\t        assigner(object, source, customizer);\n\t      }\n\t    }\n\t    return object;\n\t  });\n\t}\n\t\n\tmodule.exports = createAssigner;\n\n\n/***/ },\n/* 48 */\n[69, 57, 59, 58],\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(51)()\n\t\t? Object.assign\n\t\t: __webpack_require__(52);\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(53)()\n\t\t? String.prototype.contains\n\t\t: __webpack_require__(54);\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = function () {\n\t\tvar assign = Object.assign, obj;\n\t\tif (typeof assign !== 'function') return false;\n\t\tobj = { foo: 'raz' };\n\t\tassign(obj, { bar: 'dwa' }, { trzy: 'trzy' });\n\t\treturn (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';\n\t};\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar keys  = __webpack_require__(64)\n\t  , value = __webpack_require__(63)\n\t\n\t  , max = Math.max;\n\t\n\tmodule.exports = function (dest, src/*, …srcn*/) {\n\t\tvar error, i, l = max(arguments.length, 2), assign;\n\t\tdest = Object(value(dest));\n\t\tassign = function (key) {\n\t\t\ttry { dest[key] = src[key]; } catch (e) {\n\t\t\t\tif (!error) error = e;\n\t\t\t}\n\t\t};\n\t\tfor (i = 1; i < l; ++i) {\n\t\t\tsrc = arguments[i];\n\t\t\tkeys(src).forEach(assign);\n\t\t}\n\t\tif (error !== undefined) throw error;\n\t\treturn dest;\n\t};\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar str = 'razdwatrzy';\n\t\n\tmodule.exports = function () {\n\t\tif (typeof str.contains !== 'function') return false;\n\t\treturn ((str.contains('dwa') === true) && (str.contains('foo') === false));\n\t};\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar indexOf = String.prototype.indexOf;\n\t\n\tmodule.exports = function (searchString/*, position*/) {\n\t\treturn indexOf.call(this, searchString, arguments[1]) > -1;\n\t};\n\n\n/***/ },\n/* 55 */\n[69, 67, 68, 43],\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/**\n\t * Copies properties of `source` to `object`.\n\t *\n\t * @private\n\t * @param {Object} source The object to copy properties from.\n\t * @param {Array} props The property names to copy.\n\t * @param {Object} [object={}] The object to copy properties to.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction baseCopy(source, props, object) {\n\t  object || (object = {});\n\t\n\t  var index = -1,\n\t      length = props.length;\n\t\n\t  while (++index < length) {\n\t    var key = props[index];\n\t    object[key] = source[key];\n\t  }\n\t  return object;\n\t}\n\t\n\tmodule.exports = baseCopy;\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.9.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/** `Object#toString` result references. */\n\tvar funcTag = '[object Function]';\n\t\n\t/** Used to detect host constructors (Safari > 5). */\n\tvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\t\n\t/**\n\t * Checks if `value` is object-like.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\t\n\t/** Used for native method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/** Used to resolve the decompiled source of functions. */\n\tvar fnToString = Function.prototype.toString;\n\t\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t/**\n\t * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objToString = objectProto.toString;\n\t\n\t/** Used to detect if a method is native. */\n\tvar reIsNative = RegExp('^' +\n\t  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n\t  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n\t);\n\t\n\t/**\n\t * Gets the native function at `key` of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {string} key The key of the method to get.\n\t * @returns {*} Returns the function if it's native, else `undefined`.\n\t */\n\tfunction getNative(object, key) {\n\t  var value = object == null ? undefined : object[key];\n\t  return isNative(value) ? value : undefined;\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as a `Function` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n\t * @example\n\t *\n\t * _.isFunction(_);\n\t * // => true\n\t *\n\t * _.isFunction(/abc/);\n\t * // => false\n\t */\n\tfunction isFunction(value) {\n\t  // The use of `Object#toString` avoids issues with the `typeof` operator\n\t  // in older versions of Chrome and Safari which return 'function' for regexes\n\t  // and Safari 8 equivalents which return 'object' for typed array constructors.\n\t  return isObject(value) && objToString.call(value) == funcTag;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Checks if `value` is a native function.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n\t * @example\n\t *\n\t * _.isNative(Array.prototype.push);\n\t * // => true\n\t *\n\t * _.isNative(_);\n\t * // => false\n\t */\n\tfunction isNative(value) {\n\t  if (value == null) {\n\t    return false;\n\t  }\n\t  if (isFunction(value)) {\n\t    return reIsNative.test(fnToString.call(value));\n\t  }\n\t  return isObjectLike(value) && reIsHostCtor.test(value);\n\t}\n\t\n\tmodule.exports = getNative;\n\n\n/***/ },\n/* 58 */\n43,\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modularize exports=\"npm\" -o ./`\n\t * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n\t * Released under MIT license <https://lodash.com/license>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t */\n\t\n\t/** Used as references for various `Number` constants. */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/** `Object#toString` result references. */\n\tvar argsTag = '[object Arguments]',\n\t    funcTag = '[object Function]',\n\t    genTag = '[object GeneratorFunction]';\n\t\n\t/** Used for built-in method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t/**\n\t * Used to resolve the\n\t * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objectToString = objectProto.toString;\n\t\n\t/** Built-in value references. */\n\tvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\t\n\t/**\n\t * Checks if `value` is likely an `arguments` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n\t *  else `false`.\n\t * @example\n\t *\n\t * _.isArguments(function() { return arguments; }());\n\t * // => true\n\t *\n\t * _.isArguments([1, 2, 3]);\n\t * // => false\n\t */\n\tfunction isArguments(value) {\n\t  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n\t  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n\t    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n\t}\n\t\n\t/**\n\t * Checks if `value` is array-like. A value is considered array-like if it's\n\t * not a function and has a `value.length` that's an integer greater than or\n\t * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t * @example\n\t *\n\t * _.isArrayLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArrayLike(document.body.children);\n\t * // => true\n\t *\n\t * _.isArrayLike('abc');\n\t * // => true\n\t *\n\t * _.isArrayLike(_.noop);\n\t * // => false\n\t */\n\tfunction isArrayLike(value) {\n\t  return value != null && isLength(value.length) && !isFunction(value);\n\t}\n\t\n\t/**\n\t * This method is like `_.isArrayLike` except that it also checks if `value`\n\t * is an object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an array-like object,\n\t *  else `false`.\n\t * @example\n\t *\n\t * _.isArrayLikeObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArrayLikeObject(document.body.children);\n\t * // => true\n\t *\n\t * _.isArrayLikeObject('abc');\n\t * // => false\n\t *\n\t * _.isArrayLikeObject(_.noop);\n\t * // => false\n\t */\n\tfunction isArrayLikeObject(value) {\n\t  return isObjectLike(value) && isArrayLike(value);\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as a `Function` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n\t * @example\n\t *\n\t * _.isFunction(_);\n\t * // => true\n\t *\n\t * _.isFunction(/abc/);\n\t * // => false\n\t */\n\tfunction isFunction(value) {\n\t  // The use of `Object#toString` avoids issues with the `typeof` operator\n\t  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n\t  var tag = isObject(value) ? objectToString.call(value) : '';\n\t  return tag == funcTag || tag == genTag;\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This method is loosely based on\n\t * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t * @example\n\t *\n\t * _.isLength(3);\n\t * // => true\n\t *\n\t * _.isLength(Number.MIN_VALUE);\n\t * // => false\n\t *\n\t * _.isLength(Infinity);\n\t * // => false\n\t *\n\t * _.isLength('3');\n\t * // => false\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' &&\n\t    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the\n\t * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n\t * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(_.noop);\n\t * // => true\n\t *\n\t * _.isObject(null);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Checks if `value` is object-like. A value is object-like if it's not `null`\n\t * and has a `typeof` result of \"object\".\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t * @example\n\t *\n\t * _.isObjectLike({});\n\t * // => true\n\t *\n\t * _.isObjectLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObjectLike(_.noop);\n\t * // => false\n\t *\n\t * _.isObjectLike(null);\n\t * // => false\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\t\n\tmodule.exports = isArguments;\n\n\n/***/ },\n/* 60 */\n42,\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.9 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/** Used to detect unsigned integer values. */\n\tvar reIsUint = /^\\d+$/;\n\t\n\t/**\n\t * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n\t * of an array-like value.\n\t */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/**\n\t * The base implementation of `_.property` without support for deep paths.\n\t *\n\t * @private\n\t * @param {string} key The key of the property to get.\n\t * @returns {Function} Returns the new function.\n\t */\n\tfunction baseProperty(key) {\n\t  return function(object) {\n\t    return object == null ? undefined : object[key];\n\t  };\n\t}\n\t\n\t/**\n\t * Gets the \"length\" property value of `object`.\n\t *\n\t * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n\t * that affects Safari on at least iOS 8.1-8.3 ARM64.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {*} Returns the \"length\" value.\n\t */\n\tvar getLength = baseProperty('length');\n\t\n\t/**\n\t * Checks if `value` is array-like.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t */\n\tfunction isArrayLike(value) {\n\t  return value != null && isLength(getLength(value));\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like index.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n\t * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n\t */\n\tfunction isIndex(value, length) {\n\t  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n\t  length = length == null ? MAX_SAFE_INTEGER : length;\n\t  return value > -1 && value % 1 == 0 && value < length;\n\t}\n\t\n\t/**\n\t * Checks if the provided arguments are from an iteratee call.\n\t *\n\t * @private\n\t * @param {*} value The potential iteratee value argument.\n\t * @param {*} index The potential iteratee index or key argument.\n\t * @param {*} object The potential iteratee object argument.\n\t * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.\n\t */\n\tfunction isIterateeCall(value, index, object) {\n\t  if (!isObject(object)) {\n\t    return false;\n\t  }\n\t  var type = typeof index;\n\t  if (type == 'number'\n\t      ? (isArrayLike(object) && isIndex(index, object.length))\n\t      : (type == 'string' && index in object)) {\n\t    var other = object[index];\n\t    return value === value ? (value === other) : (other !== other);\n\t  }\n\t  return false;\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\tmodule.exports = isIterateeCall;\n\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.6.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/** Used as the `TypeError` message for \"Functions\" methods. */\n\tvar FUNC_ERROR_TEXT = 'Expected a function';\n\t\n\t/* Native method references for those with the same name as other `lodash` methods. */\n\tvar nativeMax = Math.max;\n\t\n\t/**\n\t * Creates a function that invokes `func` with the `this` binding of the\n\t * created function and arguments from `start` and beyond provided as an array.\n\t *\n\t * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Function\n\t * @param {Function} func The function to apply a rest parameter to.\n\t * @param {number} [start=func.length-1] The start position of the rest parameter.\n\t * @returns {Function} Returns the new function.\n\t * @example\n\t *\n\t * var say = _.restParam(function(what, names) {\n\t *   return what + ' ' + _.initial(names).join(', ') +\n\t *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n\t * });\n\t *\n\t * say('hello', 'fred', 'barney', 'pebbles');\n\t * // => 'hello fred, barney, & pebbles'\n\t */\n\tfunction restParam(func, start) {\n\t  if (typeof func != 'function') {\n\t    throw new TypeError(FUNC_ERROR_TEXT);\n\t  }\n\t  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);\n\t  return function() {\n\t    var args = arguments,\n\t        index = -1,\n\t        length = nativeMax(args.length - start, 0),\n\t        rest = Array(length);\n\t\n\t    while (++index < length) {\n\t      rest[index] = args[start + index];\n\t    }\n\t    switch (start) {\n\t      case 0: return func.call(this, rest);\n\t      case 1: return func.call(this, args[0], rest);\n\t      case 2: return func.call(this, args[0], args[1], rest);\n\t    }\n\t    var otherArgs = Array(start + 1);\n\t    index = -1;\n\t    while (++index < start) {\n\t      otherArgs[index] = args[index];\n\t    }\n\t    otherArgs[start] = rest;\n\t    return func.apply(this, otherArgs);\n\t  };\n\t}\n\t\n\tmodule.exports = restParam;\n\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = function (value) {\n\t\tif (value == null) throw new TypeError(\"Cannot use null or undefined\");\n\t\treturn value;\n\t};\n\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(65)()\n\t\t? Object.keys\n\t\t: __webpack_require__(66);\n\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = function () {\n\t\ttry {\n\t\t\tObject.keys('primitive');\n\t\t\treturn true;\n\t\t} catch (e) { return false; }\n\t};\n\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar keys = Object.keys;\n\t\n\tmodule.exports = function (object) {\n\t\treturn keys(object == null ? object : Object(object));\n\t};\n\n\n/***/ },\n/* 67 */\n57,\n/* 68 */\n59,\n/* 69 */\n/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {\n\n\t/**\n\t * lodash 3.1.2 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar getNative = __webpack_require__(__webpack_module_template_argument_0__),\n\t    isArguments = __webpack_require__(__webpack_module_template_argument_1__),\n\t    isArray = __webpack_require__(__webpack_module_template_argument_2__);\n\t\n\t/** Used to detect unsigned integer values. */\n\tvar reIsUint = /^\\d+$/;\n\t\n\t/** Used for native method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t/* Native method references for those with the same name as other `lodash` methods. */\n\tvar nativeKeys = getNative(Object, 'keys');\n\t\n\t/**\n\t * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n\t * of an array-like value.\n\t */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/**\n\t * The base implementation of `_.property` without support for deep paths.\n\t *\n\t * @private\n\t * @param {string} key The key of the property to get.\n\t * @returns {Function} Returns the new function.\n\t */\n\tfunction baseProperty(key) {\n\t  return function(object) {\n\t    return object == null ? undefined : object[key];\n\t  };\n\t}\n\t\n\t/**\n\t * Gets the \"length\" property value of `object`.\n\t *\n\t * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n\t * that affects Safari on at least iOS 8.1-8.3 ARM64.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {*} Returns the \"length\" value.\n\t */\n\tvar getLength = baseProperty('length');\n\t\n\t/**\n\t * Checks if `value` is array-like.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t */\n\tfunction isArrayLike(value) {\n\t  return value != null && isLength(getLength(value));\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like index.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n\t * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n\t */\n\tfunction isIndex(value, length) {\n\t  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n\t  length = length == null ? MAX_SAFE_INTEGER : length;\n\t  return value > -1 && value % 1 == 0 && value < length;\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * A fallback implementation of `Object.keys` which creates an array of the\n\t * own enumerable property names of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t */\n\tfunction shimKeys(object) {\n\t  var props = keysIn(object),\n\t      propsLength = props.length,\n\t      length = propsLength && object.length;\n\t\n\t  var allowIndexes = !!length && isLength(length) &&\n\t    (isArray(object) || isArguments(object));\n\t\n\t  var index = -1,\n\t      result = [];\n\t\n\t  while (++index < propsLength) {\n\t    var key = props[index];\n\t    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {\n\t      result.push(key);\n\t    }\n\t  }\n\t  return result;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Creates an array of the own enumerable property names of `object`.\n\t *\n\t * **Note:** Non-object values are coerced to objects. See the\n\t * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n\t * for more details.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Object\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t * @example\n\t *\n\t * function Foo() {\n\t *   this.a = 1;\n\t *   this.b = 2;\n\t * }\n\t *\n\t * Foo.prototype.c = 3;\n\t *\n\t * _.keys(new Foo);\n\t * // => ['a', 'b'] (iteration order is not guaranteed)\n\t *\n\t * _.keys('hi');\n\t * // => ['0', '1']\n\t */\n\tvar keys = !nativeKeys ? shimKeys : function(object) {\n\t  var Ctor = object == null ? undefined : object.constructor;\n\t  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||\n\t      (typeof object != 'function' && isArrayLike(object))) {\n\t    return shimKeys(object);\n\t  }\n\t  return isObject(object) ? nativeKeys(object) : [];\n\t};\n\t\n\t/**\n\t * Creates an array of the own and inherited enumerable property names of `object`.\n\t *\n\t * **Note:** Non-object values are coerced to objects.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Object\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t * @example\n\t *\n\t * function Foo() {\n\t *   this.a = 1;\n\t *   this.b = 2;\n\t * }\n\t *\n\t * Foo.prototype.c = 3;\n\t *\n\t * _.keysIn(new Foo);\n\t * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n\t */\n\tfunction keysIn(object) {\n\t  if (object == null) {\n\t    return [];\n\t  }\n\t  if (!isObject(object)) {\n\t    object = Object(object);\n\t  }\n\t  var length = object.length;\n\t  length = (length && isLength(length) &&\n\t    (isArray(object) || isArguments(object)) && length) || 0;\n\t\n\t  var Ctor = object.constructor,\n\t      index = -1,\n\t      isProto = typeof Ctor == 'function' && Ctor.prototype === object,\n\t      result = Array(length),\n\t      skipIndexes = length > 0;\n\t\n\t  while (++index < length) {\n\t    result[index] = (index + '');\n\t  }\n\t  for (var key in object) {\n\t    if (!(skipIndexes && isIndex(key, length)) &&\n\t        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n\t      result.push(key);\n\t    }\n\t  }\n\t  return result;\n\t}\n\t\n\tmodule.exports = keys;\n\n\n/***/ }\n/******/ ])))\n\n\n/** WEBPACK FOOTER **\n ** vr.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7ffd0cf75965f65b640a\n **/","(function () {\n\t'use strict';\n\n\t//global-ish declarations\n\tvar VR,\n\t\tNoSleep = require('nosleep').NoSleep,\n\t\tisMobile = require('ismobilejs');\n\n\tfunction initRequirements() {\n\t\t//load styles\n\t\trequire('!style!css!./css/style.css');\n\n\t\tVR = require('./vr');\n\t}\n\n\tfunction initialize() {\n\t\tinitRequirements();\n\n\t\t//todo: set up button/info elements\n\n\t\tVR.init();\n\n        VR.noSleep = new NoSleep();\n\t\twindow.addEventListener('resize', VR.resize, false);\n\n\t\tif (!isMobile.any) {\n\t\t\tVR.disableOrientation();\n\t\t}\n\n\t\t/*\n\t\texport global things\n\t\t*/\n\t\twindow.VR = VR;\n\t\twindow.THREE = VR.THREE;\n\t}\n\n\tinitialize();\n\tVR.start();\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/entry.js\n ** module id = 0\n ** module chunks = 0\n **/","(function () {\n\t'use strict';\n\n\t//constants\n\tvar NEAR = 1,\n\t\tFAR = 1000000,\n\n\t//global-ish declarations\n\t\tTHREE,\n\t\teventEmitter,\n\t\tmaterials = require('./materials'),\n\t\tnop = function () {},\n\t\trequestFullscreen = nop,\n\t\texitFullscreen = (\n\t\t\tdocument.exitFullscreen ||\n\t\t\tdocument.mozCancelFullScreen ||\n\t\t\tdocument.webkitExitFullscreen ||\n\t\t\tdocument.msExitFullscreen ||\n\t\t\tnop\n\t\t).bind(document),\n\n\t//scene assets\n\t\tcamera,\n\t\tscene,\n\t\tbody,\n\t\trenderer,\n\t\taudioListener,\n\t\tvrControls,\n\t\tvrEffect,\n\t\tmouseControls,\n\t\traycaster,\n\t\ttarget,\n\n\t\tbodyWrapper,\n\t\tcameraWrapper,\n\n\t\tfloor,\n\n\t//state\n\t\tgoing = false,\n\t\tvrMode = false,\n\t\torientationEnabled,\n\t\torientationPossible = false,\n\n\t//exported object\n\t\tVR,\n\n\t\tVRObject = require('./vr-object'),\n\t\tobjectMethods = [\n\t\t\t'box',\n\t\t\t'cylinder',\n\t\t\t'torus',\n\t\t\t'sphere',\n\t\t\t'empty',\n\t\t\t'sound',\n\t\t\t'floor',\n\t\t\t'sky',\n\t\t\t'panorama',\n\t\t\t'image',\n\t\t\t'video',\n\t\t\t'text',\n\t\t\t'grid'\n\t\t],\n\n\t\t//todo: use a weak map or set instead\n\t\tvrObjects = [],\n\t\traycastable = [],\n\n\t\tlastTick = 0,\n        waitRenderInative = 0,\n\t\tanimationCallbacks = [];\n\n    var isSupportWebgl = (function () {\n        var canvas = document.createElement('canvas');\n        var gl = null;\n        var experimental = false;\n        try {\n            gl = canvas.getContext('webgl');\n        } catch (x) {\n            gl = null;\n        }\n\n        if (gl === null) {\n            try {\n                gl = canvas.getContext('experimental-webgl');\n                experimental = true;\n            } catch (x) {\n                gl = null;\n            }\n        }\n        // return false;\n        return Boolean(gl);\n    })();\n\n    window.isSupportWebgl = isSupportWebgl;\n\n\tfunction isFullscreen() {\n\t\treturn !!(document.fullscreenElement ||\n\t\t\tdocument.mozFullScreenElement ||\n\t\t\tdocument.webkitFullscreenElement ||\n\t\t\tdocument.msFullscreenElement);\n\t}\n\n\tfunction fullScreenError() {\n\t\tvrMode = false;\n\t\tif (vrEffect) {\n\t\t\tvrEffect.exit();\n\t\t}\n\t}\n\n\tfunction pruneObject(object) {\n\t\tvar i = raycastable.indexOf(object);\n\t\tif (i >= 0) {\n\t\t\traycastable.splice(i, 1);\n\t\t}\n\n\t\ti = vrObjects.indexOf(VRObject.findObject(object));\n\t\tif (i >= 0) {\n\t\t\tvrObjects.splice(i, 1);\n\t\t}\n\n\t\tobject.children.forEach(pruneObject);\n\t}\n\n\tfunction raycast() {\n\t\tvar i,\n\t\t\tintersect,\n\t\t\tobject,\n\t\t\tintersects,\n\t\t\tparent,\n\t\t\tprune = [],\n\t\t\tvrObject;\n\n\t\traycaster.ray.origin.setFromMatrixPosition(camera.matrixWorld); // world position\n\t\traycaster.ray.direction.set(0, 0, 0.5).unproject(camera).sub(raycaster.ray.origin).normalize();\n\n\t\tintersects = raycaster.intersectObjects(raycastable, true);\n\t\tfor (i = 0; i < intersects.length; i++) {\n\t\t\tintersect = intersects[i];\n\n\t\t\t// if object has been removed from scene, remove it from raycastable\n\t\t\tparent = intersect.object;\n\t\t\twhile (parent && parent !== scene) {\n\t\t\t\tif (!parent.parent) {\n\t\t\t\t\tprune.push(parent);\n\t\t\t\t}\n\t\t\t\tparent = parent.parent;\n\t\t\t}\n\n\t\t\tif (parent && intersect.object instanceof THREE.Mesh) {\n\t\t\t\tobject = intersect.object;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tprune.forEach(pruneObject);\n\n\t\tif (target !== object) {\n\t\t\tif (target) {\n\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\tvrObject.emit('lookaway');\n\t\t\t\tVR.emit('lookaway', vrObject);\n\t\t\t}\n\t\t\ttarget = object;\n\t\t\tif (target) {\n\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\twhile (!vrObject && target.parent) {\n\t\t\t\t\ttarget = target.parent;\n\t\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\t}\n\t\t\t\tif (vrObject) {\n\t\t\t\t\tvrObject.emit('lookat', intersect);\n\t\t\t\t\tVR.emit('lookat', vrObject, intersect);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction render() {\n       // if (CLOSE_RENDER) {\n       //     return;\n       // }\n        // Will not start render when application has been active.\n        // The case only in taobao client. Very suck!\n        if (Date.now() / 1000 - lastTick > 5) {\n            if (waitRenderInative === 0) {\n                waitRenderInative = Date.now() / 1000;\n            }\n            if (Date.now() / 1000 - waitRenderInative > 1) {\n                lastTick = Date.now();\n            }\n            return;\n        }\n        waitRenderInative = 0;\n\n\t\tvar now = Date.now() / 1000,\n\t\t\tdelta = Math.min(1, now - lastTick);\n\n\t\tvrControls.update();\n\n\t\tanimationCallbacks.forEach(function (cb) {\n\t\t\tcb(delta, now);\n\t\t});\n\n\t\tscene.updateMatrixWorld();\n\n\t\tvrObjects.forEach(function (object) {\n\t\t\tobject.update(now);\n\t\t});\n        mouseControls.update();\n\n\t\traycast();\n\n\t\tvrEffect.render(scene, camera);\n\n\t\tlastTick = now;\n\t}\n\n\tfunction renderLoop() {\n\t\tif (going) {\n\t\t\trender();\n\t\t\trequestAnimationFrame(renderLoop);\n\t\t}\n\t}\n\n\tfunction stop() {\n\t\tgoing = false;\n\t}\n\n\tfunction start() {\n\t\tif (!going) {\n\t\t\tgoing = true;\n\t\t\trenderLoop();\n\t\t}\n\t}\n\n\t/*\n\tMute any sounds when this browser tab is in the background or minimized.\n\t*/\n\tfunction visibilityChange() {\n\t\tif (document.hidden || document.mozHidden || document.msHidden || document.webkitHidden) {\n\t\t\taudioListener.volume(0);\n            stop();\n\t\t} else {\n\t\t\taudioListener.volume(1);\n            start();\n\t\t}\n\t}\n\n\tfunction resize(width, height) {\n\t\twidth = typeof width === 'number' && width || window.innerWidth;\n\t\theight = typeof height === 'number' && height || window.innerHeight;\n\n\t\tcamera.aspect = width / height;\n\t\tcamera.updateProjectionMatrix();\n\t\trenderer.setSize(width, height);\n\t}\n\n\tfunction initShake() {\n\t\tvar lastTime = 0,\n\t\t\tlastX,\n\t\t\tlastY,\n\t\t\tlastZ,\n\t\t\tthreshold = 15;\n\n\t\twindow.addEventListener('devicemotion', function (evt) {\n\t\t\tvar current = evt.accelerationIncludingGravity,\n\t\t\t\ttime,\n\t\t\t\tdiff,\n\t\t\t\tdeltaX = 0,\n\t\t\t\tdeltaY = 0,\n\t\t\t\tdeltaZ = 0,\n\t\t\t\tdist;\n\n\t\t\tif (lastX !== undefined) {\n\t\t\t\tdeltaX = Math.abs(lastX - current.x);\n\t\t\t\tdeltaY = Math.abs(lastY - current.y);\n\t\t\t\tdeltaZ = Math.abs(lastZ - current.z);\n\n\t\t\t\t// if (deltaX > threshold &&\n\t\t\t\t// \t\t(deltaY > threshold || deltaZ > threshold)\n\t\t\t\t// \t) {\n\t\t\t\tdist = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);\n\t\t\t\tif (dist > threshold) {\n\n\t\t\t\t\ttime = Date.now();\n\t\t\t\t\tdiff = time - lastTime;\n\t\t\t\t\tif (diff > 1000) {\n\t\t\t\t\t\tif (navigator.vibrate) {\n\t\t\t\t\t\t\tnavigator.vibrate(100);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlastTime = Date.now();\n\n\t\t\t\t\t\tVR.emit('shake');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlastX = current.x;\n\t\t\tlastY = current.y;\n\t\t\tlastZ = current.z;\n\n\t\t\torientationPossible = true;\n\t\t}, false);\n\t}\n\n\tfunction initScene() {\n\t\tfunction attachCanvas() {\n\t\t\tdocument.body.insertBefore(renderer.domElement, document.body.firstChild || null);\n\t\t\tresize();\n\t\t}\n\n\t\tif (renderer) {\n\t\t\treturn;\n\t\t}\n\n\t\t//create renderer and place in document\n        // Antialiasing temporarily disabled to improve performance.\n\t\trenderer = !isSupportWebgl?new THREE.CanvasRenderer():new THREE.WebGLRenderer({ antialias: false });\n        renderer.setClearColor(0x000000, 0);\n        renderer.setPixelRatio( window.devicePixelRatio );\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\t\tif (isSupportWebgl) {\n            renderer.domElement.addEventListener('webglcontextlost', function contextLost(event) {\n                console.log('lost context', event);\n            });\n        }\n\t\t// renderer.shadowMapEnabled = true;\n\t\t// renderer.shadowMapSoft = true;\n\n\t\t//need a scene to put all our objects in\n\t\tscene = new THREE.Scene();\n\n\t\tbodyWrapper = new VRObject(scene, require('./objects/empty'), null, {\n\t\t\tname: 'body'\n\t\t}).moveTo(0, 1.5, 4);\n\t\tbody = bodyWrapper.object;\n\n\t\tcameraWrapper = new VRObject(body, function (parent) {\n        //    camera = new THREE.OrthographicCamera(\n        //            window.innerWidth / - 24, window.innerWidth / 24,window.innerHeight / 24, window.innerHeight / - 24, -310, 100000);\n        //    camera.position.x = 0;\n        //    camera.position.y = 0;\n        //    camera.zoom = 0.4;\n\t\t//\tcamera.position.set(-0.000001, 0.0001, 0.0001);\n\t\t//\tcamera.rotation.set(0, 0, 0);\n\n\t\t\t//need a camera with which to look at stuff\n            // The viewer proportion will be a square not a rect.\n\t\t\tcamera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, NEAR, FAR);\n            camera.setFocalLength(8);\n            // camera.zoom = 0.8;\n\t\t\t// camera.position.set(-0.000001, 1, 0.0001);\n            // camera.autoBackward = true;\n\t\t\tparent.add(camera);\n\t\t\treturn camera;\n\t\t})\n\t\t// set camera position so that OrbitControls works properly.\n\t\t\t.moveTo(0, 0.0001, 0.0001);\n\n\t\taudioListener = new THREE.AudioListener();\n\t\taudioListener.name = 'audio-listener';\n\t\tcamera.add(audioListener);\n\n\t\t//VRControls point the camera wherever we're looking\n\t\tvrControls = new THREE.VRControls(camera);\n\t\tvrControls.freeze = !orientationEnabled;\n\n\t\t//render left and right eye\n\t\tvrEffect = new THREE.VRStereoEffect(renderer);\n\t\tvrEffect.near = NEAR;\n\t\tvrEffect.far = FAR;\n\t\tvrEffect.addEventListener('fullscreenchange', function (evt) {\n\t\t\tvar screen;\n\t\t\tif (isFullscreen()) {\n\t\t\t\tif (vrMode) {\n\t\t\t\t\t//no mouse control\n\t\t\t\t\tmouseControls.enabled = false;\n\n\t\t\t\t\tvrControls.freeze = false;\n\t\t\t\t\tvrControls.reset();\n\n\t\t\t\t\tscreen = window.screen;\n\t\t\t\t\tif (screen.lockOrientation) {\n\t\t\t\t\t\tscreen.lockOrientation('landscape-primary');\n\t\t\t\t\t} else if (screen.mozLockOrientation) {\n\t\t\t\t\t\tscreen.mozLockOrientation('landscape-primary');\n\t\t\t\t\t} else if (screen.orientation && screen.orientation.lock) {\n\t\t\t\t\t\tscreen.orientation.lock('landscape-primary');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tVR.exitVR();\n\t\t\t}\n\n\t\t\tcamera.position.set(0, 0.0001, 0.0001);\n\t\t\tcamera.rotation.set(0, 0, 0);\n\n\t\t\tVR.emit('fullscreenchange', evt);\n\t\t});\n        scene.isWebview = vrEffect.isWebview;\n\n\t\t//report on HMD\n\t\tvrControls.addEventListener('devicechange', function () {\n\t\t\torientationPossible = true;\n\t\t\tif (orientationEnabled === undefined) {\n\t\t\t\torientationEnabled = vrControls.mode() === 'deviceorientation';\n\t\t\t}\n\n\t\t\tvrControls.freeze = !orientationEnabled && !vrMode;\n\n\t\t\tVR.emit('devicechange', vrControls.mode(), vrEffect.hmd());\n\t\t});\n\n\t\t// mouse control in case got no orientation device\n        // Re-start autorotate if user has not been controlled.\n        var autoRotateTimer = null;\n\t\tmouseControls = new THREE.OrbitControls(camera, renderer.domElement);\n\t\tmouseControls.target0.set(0, 0.0001, 0.000);\n\t\tmouseControls.target.copy(mouseControls.target0);\n        mouseControls.enableZoom = true;\n        mouseControls.enablePan = false;\n        mouseControls.autoRotate = true;\n        mouseControls.autoRotateSpeed = 1.0;\n        mouseControls.enableDamping = true;\n        mouseControls.dampingFactor = 0.55;\n        mouseControls.addEventListener('start', function(){\n            if (autoRotateTimer) {\n                clearTimeout(autoRotateTimer);\n            }\n            mouseControls.autoRotate = false;\n        });\n        mouseControls.addEventListener('end', function(){\n            autoRotateTimer = setTimeout(function(){\n                mouseControls.autoRotate = true;\n            }, 2000);\n        });\n\t\tmouseControls.update();\n\n\t\t//todo: remove any default lights once other lights are added\n        // Will not use this way because memory\n\t\tvar dLight = new THREE.DirectionalLight(0xffffff, 0.8);\n\t\tdLight.name = 'directional-light';\n\t\tdLight.position.set(20, 100, 100);\n\n\t\tdLight.castShadow = true;\n\t\tdLight.shadowCameraVisible = true;\n\n\t\tdLight.shadowMapWidth = 2048;\n\t\tdLight.shadowMapHeight = 2048;\n\n\t\tdLight.shadowCameraLeft = -10;\n\t\tdLight.shadowCameraRight = 10;\n\t\tdLight.shadowCameraTop = 10;\n\t\tdLight.shadowCameraBottom = -10;\n\n\t\tdLight.shadowCameraFar = 150;\n\t\tdLight.shadowCameraNear = 100;\n\t\tdLight.shadowDarkness = 1;\n\n\t\tscene.add(dLight);\n\n\t\tscene.add(new THREE.AmbientLight(0x444444));\n\n\t\tif (VR) {\n\t\t\tVR.camera = cameraWrapper;\n\t\t\tVR.body = bodyWrapper;\n\t\t\tVR.scene = scene;\n\t\t\tVR.canvas = renderer.domElement;\n\t\t\tVR.renderer = renderer;\n\t\t\tVR.zeroSensor = vrControls.zeroSensor;\n\t\t}\n\n\t\traycaster = new THREE.Raycaster();\n\n\t\tif (document.body) {\n\t\t\tattachCanvas();\n\t\t} else {\n\t\t\twindow.addEventListener('load', attachCanvas, false);\n\t\t}\n\n\t\tVR.canvas.addEventListener('webkitfullscreenerror', fullScreenError, false);\n\t\tVR.canvas.addEventListener('fullscreenerror', fullScreenError, false);\n\t}\n\n\tfunction initRequirements() {\n\t\t//load external requirements\n\t\tTHREE = require('three');\n\t\trequire('imports?THREE=three!DeviceOrientationControls');\n\t\trequire('imports?THREE=three!OrbitControls');\n\n\t\t//if (typeof __DEV__ !== 'undefined' && __DEV__) {\n\t\t\trequire('imports?THREE=three!AugmentedConsole');\n\t\t//}\n\n\t\tTHREE.ImageUtils.crossOrigin = '';\n\n\t\teventEmitter = require('event-emitter');\n\n        //if (!isSupportWebgl) {\n            require('imports?THREE=three!./lib/CanvasRenderer.js');\n            require('imports?THREE=three!./lib/Projector.js');\n          //  return;\n        //}\n\n\t\t//my VR stuff. todo: move these to a separate repo or two for easy packaging\n\t\trequire('imports?THREE=three!./lib/VRStereoEffect');\n\t\trequire('imports?THREE=three!./lib/VRControls');\n\t}\n\n\n\tfunction initialize() {\n\t\t//todo: set up button/info elements\n\n\t\tinitScene();\n\n\t\tinitShake();\n\n\t\tresize();\n\n\n\t\tdocument.addEventListener('visibilitychange', visibilityChange);\n\t\tdocument.addEventListener('mozvisibilitychange', visibilityChange);\n\t\tdocument.addEventListener('msvisibilitychange', visibilityChange);\n\t\tdocument.addEventListener('webkitvisibilitychange', visibilityChange);\n\t}\n\n\tinitRequirements();\n\n\tmodule.exports = VR = {\n\t\tinit: initialize,\n\t\trender: render,\n\t\tstart: start,\n\t\tstop: stop,\n\t\tresize: resize,\n\n\t\tTHREE: THREE,\n\n\t\tmaterials: materials,\n\n\t\tanimate: function (callback) {\n\t\t\tvar i;\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\ti = animationCallbacks.indexOf(callback);\n\t\t\t\tif (i < 0) {\n\t\t\t\t\tanimationCallbacks.push(callback);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tend: function (callback) {\n\t\t\tvar i;\n\n\t\t\tif (!callback) {\n\t\t\t\tanimationCallbacks.length = 0;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\ti = animationCallbacks.indexOf(callback);\n\t\t\t\tif (i >= 0) {\n\t\t\t\t\tanimationCallbacks.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\trequestVR: function () {\n\t\t\t//todo: check if it's possible\n\t\t\tif (vrMode || !vrEffect) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvrMode = true;\n\n\t\t\t//full screen and render two eyes\n\t\t\t//always full screen\n\t\t\tvrEffect.requestFullScreen();\n\t\t},\n\n\t\texitVR: function () {\n\t\t\tvrMode = false;\n\t\t\tif (!vrEffect.isWebview() && isFullscreen()) {\n\t\t\t\texitFullscreen();\n\t\t\t\treturn;\n\t\t\t}\n            vrEffect.exit();\n\n\t\t\tmouseControls.enabled = true;\n\t\t\tvrControls.freeze = !orientationEnabled;\n\t\t\tcamera.rotation.set(0, 0, 0);\n\t\t},\n\n\t\tvrMode: function () {\n\t\t\treturn vrMode && isFullscreen();\n\t\t},\n\n\t\torientationEnabled: function () {\n\t\t\treturn !!orientationEnabled;\n\t\t},\n\t\tenableOrientation: function () {\n\t\t\torientationEnabled = true;\n            mouseControls.autoRotate = false;\n\t\t\tif (!vrMode) {\n\t\t\t\tvrControls.freeze = false;\n\t\t\t}\n\t\t},\n\t\tdisableOrientation: function () {\n\t\t\torientationEnabled = false;\n            mouseControls.autoRotate = true;\n\t\t\tcamera.rotation.set(0, 0, 0);\n\t\t\tvrControls.freeze = !vrMode;\n\t\t},\n\n\t\tisFullscreen: isFullscreen,\n\t\trequestFullscreen: requestFullscreen,\n\t\texitFullscreen: function () {\n\t\t\tif (isFullscreen()) {\n\t\t\t\texitFullscreen();\n\t\t\t}\n\t\t},\n\n\t\tcontrolMode: function () {\n\t\t\treturn vrControls && vrControls.mode();\n\t\t},\n\n\t\tzeroSensor: nop,\n\n\t\tvibrate: navigator.vibrate ? navigator.vibrate.bind(navigator) : nop,\n\n\t\t// Utility\n\t\ttimes: function (n, callback) {\n\t\t\tvar i;\n\n\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\tcallback(i);\n\t\t\t}\n\t\t},\n\n\t\tcamera: cameraWrapper,\n\t\tbody: bodyWrapper,\n\t\tscene: scene,\n\t\trenderer: renderer || null,\n\t\tcanvas: renderer && renderer.domElement || null,\n        isSupportWebgl: isSupportWebgl\n\t};\n\n\tobjectMethods.forEach(function (method) {\n\t\tvar creator = require('./objects/' + method),\n\t\t\tkey;\n\n\t\tVR[method] = function (options) {\n\t\t\tvar obj = new VRObject(scene, creator, body, options);\n\t\t\tvrObjects.push(obj);\n\t\t\tif (obj.raycastable) {\n\t\t\t\traycastable.push(obj.object);\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tVRObject.prototype[method] = function (options) {\n\t\t\tvar obj = new VRObject(this.object, creator, body, options);\n\t\t\tvrObjects.push(obj);\n\t\t\tif (obj.raycastable) {\n\t\t\t\traycastable.push(obj.object);\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tfor (key in creator) {\n\t\t\tif (creator.hasOwnProperty(key) && typeof creator[key] === 'function') {\n\t\t\t\tVR[method][key] = creator[key];\n\t\t\t\tVRObject.prototype[method][key] = creator[key];\n\t\t\t}\n\t\t}\n\t});\n\n\teventEmitter(VR);\n\n\tObject.defineProperty(VR, 'target', {\n\t\tget: function () {\n\t\t\treturn target;\n\t\t}\n\t});\n    // Compatible in android < 5.0\n    // Fix something what VR was undefined.\n    window.VR = VR;\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/vr.js\n ** module id = 1\n ** module chunks = 0\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../node_modules/css-loader/index.js!./style.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../node_modules/css-loader/index.js!./style.css\", function() {\n\t\t\tvar newContent = require(\"!!./../../node_modules/css-loader/index.js!./style.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/style-loader!./~/css-loader!./src/css/style.css\n ** module id = 2\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"body{font-family:Helvetica Neue,Helvetica,Arial,sans-serif;color:#eee;overflow:hidden;background:#282828;height:100%;width:100%;margin:0;padding:0}canvas{width:100%!important;height:100%!important;top:0;left:0}#buttons{position:absolute;bottom:0;left:0;padding:12px;margin:8px;border-radius:8px;background-color:hsla(0,0%,50%,.6)}#buttons>*{margin:0 10px;display:inline-block;width:18px;height:18px;cursor:pointer}#buttons>:first-child{margin-left:0}#buttons>.unsupported,#fs-disable{display:none}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./src/css/style.css\n ** module id = 3\n ** module chunks = 0\n **/","/**\n * isMobile.js v0.3.9\n *\n * A simple library to detect Apple phones and tablets,\n * Android phones and tablets, other mobile devices (like blackberry, mini-opera and windows phone),\n * and any kind of seven inch device, via user agent sniffing.\n *\n * @author: Kai Mallea (kmallea@gmail.com)\n *\n * @license: http://creativecommons.org/publicdomain/zero/1.0/\n */\n(function (global) {\n\n    var apple_phone         = /iPhone/i,\n        apple_ipod          = /iPod/i,\n        apple_tablet        = /iPad/i,\n        android_phone       = /(?=.*\\bAndroid\\b)(?=.*\\bMobile\\b)/i, // Match 'Android' AND 'Mobile'\n        android_tablet      = /Android/i,\n        amazon_phone        = /(?=.*\\bAndroid\\b)(?=.*\\bSD4930UR\\b)/i,\n        amazon_tablet       = /(?=.*\\bAndroid\\b)(?=.*\\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\\b)/i,\n        windows_phone       = /IEMobile/i,\n        windows_tablet      = /(?=.*\\bWindows\\b)(?=.*\\bARM\\b)/i, // Match 'Windows' AND 'ARM'\n        other_blackberry    = /BlackBerry/i,\n        other_blackberry_10 = /BB10/i,\n        other_opera         = /Opera Mini/i,\n        other_chrome        = /(CriOS|Chrome)(?=.*\\bMobile\\b)/i,\n        other_firefox       = /(?=.*\\bFirefox\\b)(?=.*\\bMobile\\b)/i, // Match 'Firefox' AND 'Mobile'\n        seven_inch = new RegExp(\n            '(?:' +         // Non-capturing group\n\n            'Nexus 7' +     // Nexus 7\n\n            '|' +           // OR\n\n            'BNTV250' +     // B&N Nook Tablet 7 inch\n\n            '|' +           // OR\n\n            'Kindle Fire' + // Kindle Fire\n\n            '|' +           // OR\n\n            'Silk' +        // Kindle Fire, Silk Accelerated\n\n            '|' +           // OR\n\n            'GT-P1000' +    // Galaxy Tab 7 inch\n\n            ')',            // End non-capturing group\n\n            'i');           // Case-insensitive matching\n\n    var match = function(regex, userAgent) {\n        return regex.test(userAgent);\n    };\n\n    var IsMobileClass = function(userAgent) {\n        var ua = userAgent || navigator.userAgent;\n        // Facebook mobile app's integrated browser adds a bunch of strings that\n        // match everything. Strip it out if it exists.\n        var tmp = ua.split('[FBAN');\n        if (typeof tmp[1] !== 'undefined') {\n            ua = tmp[0];\n        }\n\n        this.apple = {\n            phone:  match(apple_phone, ua),\n            ipod:   match(apple_ipod, ua),\n            tablet: !match(apple_phone, ua) && match(apple_tablet, ua),\n            device: match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)\n        };\n        this.amazon = {\n            phone:  match(amazon_phone, ua),\n            tablet: !match(amazon_phone, ua) && match(amazon_tablet, ua),\n            device: match(amazon_phone, ua) || match(amazon_tablet, ua)\n        };\n        this.android = {\n            phone:  match(amazon_phone, ua) || match(android_phone, ua),\n            tablet: !match(amazon_phone, ua) && !match(android_phone, ua) && (match(amazon_tablet, ua) || match(android_tablet, ua)),\n            device: match(amazon_phone, ua) || match(amazon_tablet, ua) || match(android_phone, ua) || match(android_tablet, ua)\n        };\n        this.windows = {\n            phone:  match(windows_phone, ua),\n            tablet: match(windows_tablet, ua),\n            device: match(windows_phone, ua) || match(windows_tablet, ua)\n        };\n        this.other = {\n            blackberry:   match(other_blackberry, ua),\n            blackberry10: match(other_blackberry_10, ua),\n            opera:        match(other_opera, ua),\n            firefox:      match(other_firefox, ua),\n            chrome:       match(other_chrome, ua),\n            device:       match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(other_opera, ua) || match(other_firefox, ua) || match(other_chrome, ua)\n        };\n        this.seven_inch = match(seven_inch, ua);\n        this.any = this.apple.device || this.android.device || this.windows.device || this.other.device || this.seven_inch;\n        // excludes 'other' devices and ipods, targeting touchscreen phones\n        this.phone = this.apple.phone || this.android.phone || this.windows.phone;\n        // excludes 7 inch devices, classifying as phone or tablet is left to the user\n        this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet;\n\n        if (typeof window === 'undefined') {\n            return this;\n        }\n    };\n\n    var instantiate = function() {\n        var IM = new IsMobileClass();\n        IM.Class = IsMobileClass;\n        return IM;\n    };\n\n    if (typeof module != 'undefined' && module.exports && typeof window === 'undefined') {\n        //node\n        module.exports = IsMobileClass;\n    } else if (typeof module != 'undefined' && module.exports && typeof window !== 'undefined') {\n        //browserify\n        module.exports = instantiate();\n    } else if (typeof define === 'function' && define.amd) {\n        //AMD\n        define('isMobile', [], global.isMobile = instantiate());\n    } else {\n        global.isMobile = instantiate();\n    }\n\n})(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ismobilejs/isMobile.js\n ** module id = 4\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tlinkElement.rel = \"stylesheet\";\r\n\tinsertStyleElement(options, linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement(options);\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/style-loader/addStyles.js\n ** module id = 5\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar THREE = require('three'),\n\t\tforEach = require('lodash.foreach'),\n\t\tassign = require('lodash.assign'),\n\n\t\tiOS = navigator.userAgent.match(/(iPad|iPhone|iPod)/g),\n\t\tandroid = navigator.userAgent.toLowerCase().match(/android/g),\n\n\t\t// https://gist.github.com/dperini/729294\n\t\t//urlRegex = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/i,\n\t\turlRegex = require('./utils/urlregex'),\n\n\t\tdataUri = /^data:image\\/(?:png|jpe?g|gif);/,\n\t\tassetPath = '//gw.alicdn.com/tps/',\n\n\t\timages = {},\n\n\t\tmaterialTypes = {\n\t\t\tlambert: THREE.MeshLambertMaterial,\n\t\t\tbasic: THREE.MeshBasicMaterial,\n\t\t\tphong: THREE.MeshPhongMaterial,\n\t\t\tnormal: THREE.MeshNormalMaterial,\n\t\t\tdepth: THREE.MeshDepthMaterial\n\t\t},\n\t\ttextureFiles = {\n    // Will use these when you need it.\n\t\t\t'asphalt': {\n                map:'TB1kK63NVXXXXaVaFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 12\n\t\t\t},\n\t\t\t'brick-tiles': {\n                map:'TB1YcUKNVXXXXbpXXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 2\n\t\t\t},\n\t\t\t'bricks': {\n\t\t\t\ttype: 'phong',\n\t\t\t\trepeat: 4,\n                map:'TB1rswLNVXXXXbcXXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\tnormalMap: 'TB1T.7hNVXXXXXlXVXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\tspecularMap: 'TB1WIn.NVXXXXaPapXXXXXXXXXX-512-512.jpg_320x320.jpg'\n\t\t\t},\n\t\t\t'checkerboard': {\n\t\t\t\trepeat: 10,\n\t\t\t\tmap: 'TB17ZseNVXXXXbfaXXXXXXXXXXX-256-256.png_140x140.jpg'\n\t\t\t},\n\t\t\t'grass': {\n                map:'TB17jZqNVXXXXc4XFXXXXXXXXXX-256-256.jpg_140x140.jpg',\n\t\t\t\trepeat: 12\n\t\t\t},\n\t\t\t'metal-floor': {\n\t\t\t\ttype: 'phong',\n\t\t\t\tshininess: 100,\n                map:'TB18JAwNVXXXXbiXFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 2\n\t\t\t},\n\t\t\t'metal': {\n                map:'TB1sEEhNVXXXXbSXVXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\ttype: 'phong',\n\t\t\t\tshininess: 100,\n\t\t\t\tshading: THREE.SmoothShading,\n\t\t\t\trepeat: 2\n\t\t\t},\n\t\t\t'stone': {\n                map:'TB1c37bNVXXXXXwaXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 8\n\t\t\t},\n\t\t\t'tiles': {\n                map:'TB1BbZCNVXXXXaMXpXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 4\n\t\t\t},\n\t\t\t'weathered-wood': {\n                map:'TB12QIwNVXXXXXGXFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 8\n\t\t\t},\n\t\t\t'wood': {\n                map:'TB1rpEANVXXXXa8XpXXXXXXXXXX-512-512.jpg_320x320.jpg',\n                repeat: 4\n\t\t\t}\n\t\t},\n\t\ttextures = {},\n\t\tmaterials;\n\n\tfunction imageTexture(src, mapping, callback) {\n\t\tvar image,\n\t\t\tparse,\n\t\t\ttexture,\n\t\t\tisDataUri;\n\n\t\tfunction imageLoaded() {\n\t\t\tvar scale,\n\t\t\t\tcanvas,\n\t\t\t\tctx,\n\t\t\t\tsmallImage;\n\n\t\t\t/*\n\t\t\tiOS doesn't know how to handle large images. Even though the MAX_TEXTURE_SIZE\n\t\t\tmay be 4096, it still breaks on images that large. So we scale them down.\n            Change 2048 to 1024 fix memory is too high in iOS.\n            Modify by KeynesQ\n\t\t\t*/\n\t\t//\tif (iOS && (image.naturalWidth > 2048 || image.naturalHeight > 2048)) {\n\t\t//\t\tscale = 1024 / Math.max( image.naturalWidth, image.naturalHeight );\n\n\t\t//\t\tcanvas = document.createElement('canvas');\n\t\t//\t\tcanvas.width = 1024;\n\t\t//\t\tcanvas.height = 512;\n\n\t\t//\t\tctx = canvas.getContext('2d');\n\t\t//\t\tctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, canvas.width, canvas.height);\n\n\t\t//\t\timage = canvas;\n\t\t//\t}\n                // Reduce momery in mobile device.\n                if ((iOS || android) && (image.naturalWidth > 2048 || image.naturalHeight > 2048)) {\n                // scales the image by (float) scale < 1\n\n                    scale = 1024 / Math.max( image.naturalWidth, image.naturalHeight );\n                    canvas = document.createElement('canvas');\n                    canvas.width = Math.floor(image.naturalWidth * scale);\n                    canvas.height = Math.floor(image.naturalHeight * scale);\n\n                    ctx = canvas.getContext('2d');\n\n                    ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, canvas.width, canvas.height);\n                   // if (iOS) {\n                   //     var dstData = ctx.createImageData(canvas.width, canvas.height),\n                   //         dstBuff = dstData.data,\n                   //         srcBuff = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n                   //     var _worker = new Worker('//h5.m.taobao.com/js/trip/hotel/worker.js');\n                   //     _worker.onmessage = function (e) {\n                   //         var data = e.data[0];\n                   //         // Get new image data\n                   //         ctx.putImageData(data, 0, 0);\n                   //         texture.image = canvas;\n                   //         texture.needsUpdate = true;\n                   //         if (typeof callback === 'function') {\n                   //             setTimeout(callback.bind(null, texture, image), 1);\n                   //         }\n                   //         _worker.terminate();\n                   //     };\n                   //     _worker.postMessage([dstData, srcBuff, canvas.width, canvas.height]);\n                   //     return;\n                   // }\n\n                    image = canvas;\n                }\n\n                texture.image = image;\n                texture.needsUpdate = true;\n                if (typeof callback === 'function') {\n                    setTimeout(callback.bind(null, texture, image), 1);\n                }\n            }\n\n            parse = dataUri.exec(src);\n            isDataUri = !!parse;\n            if (!parse) {\n                parse = urlRegex.exec(src);\n            }\n\n            // if (!parse) {\n            // \tconsole.error('Invalid image URL: ' + src);\n            // \treturn;\n            // }\n\n            if (images[src]) {\n                image = images[src];\n            } else {\n                image = document.createElement('img');\n                if (parse && (parse[1] && parse[1] !== window.location.hostname || parse[2] && parse[2] !== window.location.port)) {\n                    image.crossOrigin = 'anonymous';\n                }\n                image.src = src;\n                images[src] = image;\n            }\n\n            texture = new THREE.Texture(undefined, mapping);\n\n            if (image.naturalWidth || isDataUri) {\n                setTimeout(imageLoaded, 1);\n            } else {\n                image.addEventListener('load', imageLoaded);\n            }\n\n            return texture;\n        }\n\n\n\tfunction material(options) {\n\t\tvar opts,\n\t\t\tMaterial = materialTypes[options.type] || THREE.MeshLambertMaterial;\n\n\t\tfunction threeTexture(fn) {\n\t\t\tif (typeof fn === 'string') {\n\t\t\t\tif (urlRegex.test(fn) || dataUri.test(fn)) {\n\t\t\t\t\treturn imageTexture(fn);\n\t\t\t\t}\n\n\t\t\t\tfn = textures[fn];\n\t\t\t}\n\t\t\tif (typeof fn === 'function') {\n\t\t\t\treturn fn(options);\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\n\t\tif (typeof options === 'string') {\n\t\t\toptions = {\n\t\t\t\tmap: options\n\t\t\t};\n\t\t}\n\n\t\topts = assign({}, options);\n\t\tforEach({\n\t\t\tambient: options.ambient || options.color,\n\t\t\temissive: options.emissive || options.color,\n\t\t\tmap: threeTexture(options.map),\n\t\t\tspecularMap: threeTexture(options.specularMap),\n\t\t\tnormalMap: threeTexture(options.normalMap),\n\t\t\talphaMap: threeTexture(options.alphaMap),\n\t\t\tenvMap: threeTexture(options.envMap),\n\t\t\tlightMap: threeTexture(options.lightMap)\n\t\t}, function (val, key) {\n\t\t\tif (val !== undefined) {\n\t\t\t\topts[key] = val;\n\t\t\t}\n\t\t});\n\n\t\tdelete opts.type;\n\n\t\treturn new Material(opts);\n\t}\n\n\t//figure out if script is loaded relative so we know where to find the images\n//\tassetPath = (function () {\n//\t\tvar url,\n//\t\t\tscripts;\n//\n//\t\tif (document.currentScript) {\n//\t\t\turl = document.currentScript.getAttribute('src');\n//\t\t} else {\n//\t\t\tscripts = document.getElementsByTagName('script');\n//\t\t\turl = scripts[scripts.length - 1].getAttribute('src');\n//\t\t}\n//\n//\t\tif (!urlRegex.test(url)) {\n//\t\t\treturn url.replace(/[a-z\\-\\.]+\\.js$/i, '');\n//\t\t}\n//\n//\t\treturn __ASSET_PATH__;\n//\t}());\n\n\tmaterials = {\n\t\tstandard: function () {\n\t\t\treturn new THREE.MeshLambertMaterial();\n\t\t},\n\t\ttextures: textures,\n\t\timageTexture: imageTexture,\n\t\tmaterial: material,\n\t\tlibrary: ['standard']\n\t};\n\n\tforEach(textureFiles, function (props, key) {\n\t\tfunction textureFactory(file, options) {\n\t\t\tfunction imagePath(url) {\n\t\t\t\tif ((/\\.(png|jpg)$/i).test(url)) {\n\t\t\t\t\treturn assetPath + url;\n\t\t\t\t}\n\n\t\t\t\treturn url;\n\t\t\t}\n\n\t\t\toptions = options || {};\n\n\t\t\treturn function (opts) {\n\t\t\t\tvar texture = imageTexture(imagePath(file));\n\n\t\t\t\topts = assign({}, options, opts);\n\n\t\t\t\tif (opts.repeat) {\n\t\t\t\t\tif (opts.repeat > 0) {\n\t\t\t\t\t\ttexture.repeat.set(opts.repeat, opts.repeat);\n\t\t\t\t\t} else if (opts.repeat instanceof THREE.Vector2) {\n\t\t\t\t\t\ttexture.repeat.copy(opts.repeat);\n\t\t\t\t\t}\n\t\t\t\t\ttexture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t}\n\t\t\t\treturn texture;\n\t\t\t};\n\t\t}\n\n\t\tvar map = textureFactory(props.map || key + '.jpg', props),\n\t\t\tmaterialDef;\n\n\t\tmaterialDef = assign({}, props, {\n\t\t\tmap: map\n\t\t});\n\t\ttextures[key] = map;\n\n\t\tif (props.normalMap) {\n\t\t\tmaterialDef.normalMap = textures[key + '-normal'] = textureFactory(props.normalMap, props);\n\t\t}\n\n\t\tif (props.specularMap) {\n\t\t\tmaterialDef.specularMap = textures[key + '-specular'] = textureFactory(props.specularMap, props);\n\t\t}\n\n\t\tmaterials.library.push(key);\n\t\tmaterials[key] = function (options) {\n\t\t\tvar opts = assign({}, materialDef, options);\n\n\t\t\treturn material(opts);\n\t\t};\n\t});\n\n\treturn materials;\n\n\t//var parse = urlRegex.exec('https://lh5.googleusercontent.com:80/-SNO8rWDqbUM/U085rfOBRuI/AAAAAAAAEdM/nWEWCtNceZ0/w955-h382-no/PANO_20130225_131211.jpg');\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/materials.js\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar\tNEAR_DISTANCE = 3,\n\t\tmaterials = require('./materials'),\n\t\tTHREE = require('three'),\n\t\teventEmitter = require('event-emitter'),\n\n\t\txAxis = new THREE.Vector3(1, 0, 0),\n\t\tyAxis = new THREE.Vector3(0, 1, 0),\n\t\tzAxis = new THREE.Vector3(0, 0, 1),\n\n\t\tscratchVector1 = new THREE.Vector3(),\n\t\tscratchVector2 = new THREE.Vector3(),\n\n\t\tallObjects = window.WeakMap ? new window.WeakMap() : {};\n\n\tfunction distance(object, origin) {\n\t\tvar geometry;\n\n\t\tgeometry = object.geometry;\n\n\t\t//assumes object world matrix has been updated\n\t\tscratchVector1.setFromMatrixPosition(origin.matrixWorld);\n\n\t\tif (!geometry) {\n\t\t\t//first convert to world coordinate\n\t\t\tscratchVector2.setFromMatrixPosition(object.matrixWorld);\n\t\t\treturn scratchVector2.distanceTo(scratchVector1);\n\t\t}\n\n\t\tobject.worldToLocal(scratchVector1);\n\t\treturn object.geometry.boundingBox.distanceToPoint(scratchVector1);\n\t}\n\n\tfunction VRObject(parent, creator, body, options) {\n\t\tvar material,\n\t\t\tobject,\n\t\t\tself = this,\n\n\t\t\tisNear = false,\n\t\t\tisTarget = false,\n\n\t\t\tcamera = body && (function () {\n\t\t\t\tvar i,\n\t\t\t\t\tc;\n\t\t\t\tfor (i = 0; i < body.children.length; i++) {\n\t\t\t\t\tc = body.children[i];\n\t\t\t\t\tif (c instanceof THREE.PerspectiveCamera) {\n\t\t\t\t\t\treturn c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}()),\n\t\t\tfrustum,\n\t\t\tcameraViewProjectionMatrix,\n\n\t\t\traycaster;\n\n\t\toptions = options || {};\n\n\t\teventEmitter(this);\n\n\t\tif (body) {\n\t\t\t// raycaster = new THREE.Raycaster();\n\n\t\t\tthis.update = function () {\n\t\t\t\tvar wasNear = isNear,\n\t\t\t\t\twasTarget = isTarget,\n\n\t\t\t\t\tintersects, intersect, i;\n\n\t\t\t\tisNear = self.distance < NEAR_DISTANCE;\n\t\t\t\tif (isNear !== wasNear) {\n\t\t\t\t\tif (isNear) {\n\t\t\t\t\t\tself.emit('near', self);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.emit('far', self);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\traycaster.ray.origin.copy(origin);\n\t\t\t\traycaster.ray.direction.set(0, 0, 0.5).unproject(camera).sub(origin).normalize();\n\n\t\t\t\t//todo: consider whether this needs to be recursive. maybe a different event\n\t\t\t\tintersects = raycaster.intersectObject(object);\n\t\t\t\tif (intersects.length) {\n\t\t\t\t\tisTarget = true;\n\t\t\t\t\tif (!wasTarget) {\n\t\t\t\t\t\tself.emit('target-on', intersects[0]);\n\t\t\t\t\t}\n\t\t\t\t} else if (wasTarget) {\n\t\t\t\t\tself.emit('target-off');\n\t\t\t\t}\n\t\t\t\t*/\n\t\t\t};\n\t\t}\n\n\t\t//todo: get material from options\n\t\tthis.object = object = creator.call(this, parent, options);\n\t\tthis.parent = this.object.parent || parent;\n\n\t\tif (object instanceof THREE.Mesh) {\n\t\t\tif (options.castShadow !== false) {\n\t\t\t\tobject.castShadow = true;\n\t\t\t}\n\t\t\tif (options.receiveShadow !== false) {\n\t\t\t\tobject.receiveShadow = true;\n\t\t\t}\n\n\t\t\tif (object.geometry) {\n\t\t\t\tobject.geometry.computeBoundingBox();\n\t\t\t}\n\t\t}\n\n\t\tif (options.name !== undefined) {\n\t\t\tobject.name = options.name;\n\t\t}\n\t\tself.name = object.name;\n\n\t\tif (allObjects.set) {\n\t\t\tallObjects.set(object, this);\n\t\t} else {\n\t\t\tallObjects[object.id] = this;\n\t\t}\n\n\t\tobject.position.set(\n\t\t\tparseFloat(options.x) || 0,\n\t\t\tparseFloat(options.y) || 0,\n\t\t\tparseFloat(options.z) || 0\n\t\t);\n\n\t\tthis.setMaterial(options.material);\n\n\t\tif (options.color) {\n\t\t\tmaterial = object.material;\n\t\t\tmaterial.color = new THREE.Color(options.color);\n\t\t\tmaterial.ambient = material.color;\n\t\t}\n\n\t\t['position', 'scale', 'rotation', 'quaternion', 'material'].forEach(function (prop) {\n\t\t\tif (prop in object && !self[prop]) {\n\t\t\t\tself[prop] = object[prop];\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'visible', {\n\t\t\tset: function (val) {\n\t\t\t\tself.object.visible = !!val;\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn self.object.visible;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'distance', {\n\t\t\tget: function () {\n\t\t\t\treturn distance(self.object, body || parent);\n\t\t\t}\n\t\t});\n\n\t\tif (camera) {\n\t\t\tfrustum = new THREE.Frustum();\n\t\t\tcameraViewProjectionMatrix = new THREE.Matrix4();\n\t\t\tObject.defineProperty(this, 'inView', {\n\t\t\t\tget: function () {\n\t\t\t\t\tcamera.updateMatrixWorld(); // make sure the camera matrix is updated\n\t\t\t\t\tcamera.matrixWorldInverse.getInverse(camera.matrixWorld);\n\t\t\t\t\tcameraViewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\t\t\t\t\tfrustum.setFromMatrix(cameraViewProjectionMatrix);\n\t\t\t\t\treturn frustum.intersectsObject(self.object);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tVRObject.prototype.hide = function () {\n\t\tthis.object.visible = false;\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.show = function () {\n\t\tthis.object.visible = true;\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.moveTo = function (x, y, z) {\n\t\tvar position = this.object.position;\n\n\t\tx = !isNaN(x) ? x : position.x;\n\t\ty = !isNaN(y) ? y : position.y;\n\t\tz = !isNaN(z) ? z : position.z;\n\n\t\tposition.set(x, y, z);\n\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.moveX = function (distance) {\n\t\tthis.object.translateX(distance);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.moveY = function (distance) {\n\t\tthis.object.translateY(distance);\n\t\treturn this;\n\t};\n\tVRObject.prototype.moveUp = VRObject.prototype.moveY;\n\tVRObject.prototype.moveDown = function (distance) {\n\t\tthis.moveY(-distance);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.moveZ = function (distance) {\n\t\tthis.object.translateZ(distance);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.rotateX = function (angle) {\n\t\tthis.object.rotateOnAxis(xAxis, angle);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.rotateY = function (angle) {\n\t\tthis.object.rotateOnAxis(yAxis, angle);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.rotateZ = function (angle) {\n\t\tthis.object.rotateOnAxis(zAxis, angle);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.setScale = function (x, y, z) {\n\t\tvar scale = this.object.scale;\n\n\t\tif (x !== undefined && !isNaN(x)) {\n\t\t\tif (y === undefined && z === undefined) {\n\t\t\t\ty = z = x;\n\t\t\t}\n\t\t}\n\n\t\tx = !isNaN(x) ? x : scale.x;\n\t\ty = !isNaN(y) ? y : scale.y;\n\t\tz = !isNaN(z) ? z : scale.z;\n\n\t\tscale.set(x, y, z);\n\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.setMaterial = function (material, options) {\n\t\tif (material && this.object instanceof THREE.Mesh) {\n\t\t\tif (typeof material === 'function') {\n\t\t\t\tmaterial = material();\n\t\t\t} else if (typeof material === 'string' && materials[material]) {\n\t\t\t\tmaterial = materials[material](options);\n\t\t\t} else if (material && !(material instanceof THREE.Material) && typeof material !== 'number') {\n\t\t\t\ttry {\n\t\t\t\t\tmaterial = materials.material(material);\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\tif (material instanceof THREE.Material) {\n\t\t\t\tthis.object.material = material;\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.update = function () {};\n\n\tVRObject.prototype.raycastable = true;\n\n\tVRObject.repeat = function (count, options) {\n\t\tvar i,\n\t\t\tchange = false,\n\t\t\tlastObject = this,\n\t\t\tcurrentPosition = new THREE.Vector3(),\n\t\t\tdeltaPosition = new THREE.Vector3(),\n\t\t\tcurrentQuaternion = new THREE.Quaternion(),\n\t\t\tdeltaQuaternion = new THREE.Quaternion();\n\n\t\tif (!options) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.offset) {}\n\n\t\tfor (i = 0; i < count; i++) {\n\n\t\t}\n\t};\n\n\tVRObject.findObject = function (object) {\n\t\tif (object instanceof VRObject) {\n\t\t\treturn object;\n\t\t}\n\n\t\tif (object && object instanceof THREE.Object3D) {\n\t\t\tif (allObjects.get) {\n\t\t\t\treturn allObjects.get(object);\n\t\t\t}\n\n\t\t\treturn allObjects[object.id];\n\t\t}\n\n\t\t// if (typeof object === 'number') {\n\t\t// \treturn allObjects[object];\n\t\t// }\n\t};\n\n\treturn VRObject;\n\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/vr-object.js\n ** module id = 7\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\treturn function empty(parent, options) {\n\t\tvar obj = new THREE.Object3D();\n\n\t\tobj.name = 'empty';\n\n\t\tparent.add(obj);\n\n\t\treturn obj;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/empty.js\n ** module id = 8\n ** module chunks = 0\n **/","var map = {\n\t\"./box\": 11,\n\t\"./box.js\": 11,\n\t\"./cylinder\": 12,\n\t\"./cylinder.js\": 12,\n\t\"./empty\": 8,\n\t\"./empty.js\": 8,\n\t\"./floor\": 13,\n\t\"./floor.js\": 13,\n\t\"./grid\": 14,\n\t\"./grid.js\": 14,\n\t\"./image\": 15,\n\t\"./image.js\": 15,\n\t\"./panorama\": 16,\n\t\"./panorama.js\": 16,\n\t\"./sky\": 17,\n\t\"./sky.js\": 17,\n\t\"./sound\": 18,\n\t\"./sound.js\": 18,\n\t\"./sphere\": 19,\n\t\"./sphere.js\": 19,\n\t\"./text\": 20,\n\t\"./text.js\": 20,\n\t\"./torus\": 21,\n\t\"./torus.js\": 21,\n\t\"./video\": 22,\n\t\"./video.js\": 22\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 9;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects ^\\.\\/.*$\n ** module id = 9\n ** module chunks = 0\n **/","/**\n * NoSleep.js v0.5.0 - git.io/vfn01\n * Rich Tibbett\n * MIT license\n **/\n(function(root) {\n  // UA matching\n  var ua = {\n    Android: /Android/ig.test(navigator.userAgent),\n    iOS: /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent)\n  };\n\n  var media = {\n    WebM: \"data:video/webm;base64,GkXfo0AgQoaBAUL3gQFC8oEEQvOBCEKCQAR3ZWJtQoeBAkKFgQIYU4BnQI0VSalmQCgq17FAAw9CQE2AQAZ3aGFtbXlXQUAGd2hhbW15RIlACECPQAAAAAAAFlSua0AxrkAu14EBY8WBAZyBACK1nEADdW5khkAFVl9WUDglhohAA1ZQOIOBAeBABrCBCLqBCB9DtnVAIueBAKNAHIEAAIAwAQCdASoIAAgAAUAmJaQAA3AA/vz0AAA=\",\n    MP4: \"data:video/mp4;base64,AAAAHGZ0eXBpc29tAAACAGlzb21pc28ybXA0MQAAAAhmcmVlAAAAG21kYXQAAAGzABAHAAABthADAowdbb9/AAAC6W1vb3YAAABsbXZoZAAAAAB8JbCAfCWwgAAAA+gAAAAAAAEAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIVdHJhawAAAFx0a2hkAAAAD3wlsIB8JbCAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAIAAAACAAAAAABsW1kaWEAAAAgbWRoZAAAAAB8JbCAfCWwgAAAA+gAAAAAVcQAAAAAAC1oZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVmlkZW9IYW5kbGVyAAAAAVxtaW5mAAAAFHZtaGQAAAABAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEAAAAMdXJsIAAAAAEAAAEcc3RibAAAALhzdHNkAAAAAAAAAAEAAACobXA0dgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIAAgASAAAAEgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABj//wAAAFJlc2RzAAAAAANEAAEABDwgEQAAAAADDUAAAAAABS0AAAGwAQAAAbWJEwAAAQAAAAEgAMSNiB9FAEQBFGMAAAGyTGF2YzUyLjg3LjQGAQIAAAAYc3R0cwAAAAAAAAABAAAAAQAAAAAAAAAcc3RzYwAAAAAAAAABAAAAAQAAAAEAAAABAAAAFHN0c3oAAAAAAAAAEwAAAAEAAAAUc3RjbwAAAAAAAAABAAAALAAAAGB1ZHRhAAAAWG1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAAK2lsc3QAAAAjqXRvbwAAABtkYXRhAAAAAQAAAABMYXZmNTIuNzguMw==\"\n  };\n\n  function addSourceToVideo(element, type, dataURI) {\n    var source = document.createElement('source');\n    source.src = dataURI;\n    source.type = \"video/\" + type;\n    element.appendChild(source);\n  }\n\n  // NoSleep instance constructor\n  var NoSleep = function() {\n    if (ua.iOS) {\n      this.noSleepTimer = null;\n    } else if (ua.Android) {\n      // Set up no sleep video element\n      this.noSleepVideo = document.createElement('video');\n      this.noSleepVideo.setAttribute(\"loop\", \"\");\n\n      // Append nosleep video sources\n      addSourceToVideo(this.noSleepVideo, \"webm\", media.WebM);\n      addSourceToVideo(this.noSleepVideo, \"mp4\", media.MP4);\n    }\n\n    return this;\n  };\n\n  // Enable NoSleep instance\n  NoSleep.prototype.enable = function(duration) {\n    if (ua.iOS) {\n      this.disable();\n      this.noSleepTimer = window.setInterval(function() {\n        window.location = window.location;\n        window.setTimeout(window.stop, 0);\n      }, duration || 15000);\n    } else if (ua.Android) {\n      this.noSleepVideo.play();\n    }\n  };\n\n  // Disable NoSleep instance\n  NoSleep.prototype.disable = function() {\n    if (ua.iOS) {\n      if (this.noSleepTimer) {\n        window.clearInterval(this.noSleepTimer);\n        this.noSleepTimer = null;\n      }\n    } else if (ua.Android) {\n      this.noSleepVideo.pause();\n    }\n  };\n\n  // Append NoSleep API to root object\n  root.NoSleep = NoSleep;\n})(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./bower_components/nosleep/NoSleep.js\n ** module id = 10\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three'),\n\t\tgeometry = new THREE.BoxGeometry( 1, 1, 1 );\n\n\treturn function box(parent, options) {\n\t\tvar mesh;\n\n\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\tmesh.name = 'box';\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/box.js\n ** module id = 11\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\tfunction cylinder(parent, options) {\n\t\tvar geometry,\n\t\t\tmesh;\n\n\t\tgeometry = new THREE.CylinderGeometry(\n\t\t\toptions.radiusTop === undefined ? 0.5 : options.radiusTop,\n\t\t\toptions.radiusBottom === undefined ? 0.5 : options.radiusBottom,\n\t\t\toptions.height === undefined ? 1 : options.height,\n\t\t\toptions.radiusSegments === undefined ? 16 : options.radiusSegments,\n\t\t\toptions.heightSegments,\n\t\t\toptions.openEnded\n\t\t);\n\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\tmesh.name = 'cylinder';\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t}\n\n\treturn cylinder;\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/cylinder.js\n ** module id = 12\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\tfunction floor(parent, options) {\n\t\tvar obj,\n\t\t\tgeometry;\n\n\t\tgeometry = new THREE.CircleGeometry( options.radius || 100, options.segments || 16 );\n\t\tgeometry.applyMatrix( new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\n\t\tobj = new THREE.Mesh(\n\t\t\tgeometry,\n\t\t\tmaterials.checkerboard({\n\t\t\t\trepeat: 100\n\t\t\t})\n\t\t);\n\t\tobj.name = 'floor';\n\n\t\tobj.receiveShadow = true;\n\n\t\tparent.add(obj);\n\n\t\treturn obj;\n\t}\n\n\treturn floor;\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/floor.js\n ** module id = 13\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar THREE = require('three');\n\n\treturn function box(parent, options) {\n\t\tvar obj,\n\t\t\tsize = options && options.size || 10,\n\t\t\tstep = options && options.step || 1;\n\n\t\tobj = new THREE.GridHelper(size, step);\n\t\tobj.name = 'grid';\n\t\tif (options) {\n\t\t\tobj.setColors(options.colorCenterLine || obj.color1, options.colorGrid || obj.color2);\n\t\t}\n\t\tobj.geometry.computeBoundingBox();\n\n\t\tparent.add(obj);\n\n\t\treturn obj;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/grid.js\n ** module id = 14\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\treturn function image(parent, options) {\n\t\tvar geometry,\n\t\t\tmaterial,\n\t\t\tmesh,\n\t\t\tsrc,\n\t\t\ttex,\n\t\t\tself = this;\n\n\t\tif (typeof options === 'string') {\n\t\t\tsrc = options;\n\t\t} else if (options) {\n\t\t\tsrc = options.src;\n\t\t}\n\n\t\tif (src) {\n\t\t\ttex = materials.imageTexture(src, THREE.UVMapping, function (t, image) {\n\t\t\t\t//todo: don't do any of this if object has been deleted\n\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(1, image.naturalHeight / image.naturalWidth, 1));\n\t\t\t\tmaterial.map = tex;\n\t\t\t\tmaterial.visible = true;\n\t\t\t\tmesh.visible = true;\n\t\t\t\tparent.add(mesh);\n\n\t\t\t\tself.emit('loaded');\n\t\t\t});\n\t\t}\n\n\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1, 8);\n\n\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\tside: THREE.DoubleSide,\n\t\t\ttransparent: true,\n\t\t\tmap: tex\n\t\t});\n\n\t\tmesh = new THREE.Mesh( geometry, material );\n\n\t\tmesh.visible = false;\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/image.js\n ** module id = 15\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n    var p = {};\n        p.scaleX = p.scaleX || 1;\n        p.scaleY = p.scaleY || 1;\n        p.offsetX = p.offsetX || 0;\n        p.offsetY = p.offsetY || 0;\n        p.phiStart = p.phiStart || 0;\n        p.phiLength = p.phiLength || Math.PI * 2;\n        p.thetaStart = p.thetaStart || 0;\n        p.thetaLength = p.thetaLength || Math.PI;\n    // Reduce ptr.\n    var isSupportWebgl = Boolean(window.isSupportWebgl);\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three'),\n        // geometry = new THREE.BoxGeometry(15, 15, 15, 10, 10, 10);\n            // geometry = new THREE.SphereGeometry(100, 60, 60);\n        // geometry = new THREE.SphereGeometry(60, 100, 100,\n        geometry = new THREE.SphereGeometry(16, 32, 32, p.phiStart, p.phiLength, p.thetaStart, p.thetaLength);\n        geometry.applyMatrix(new THREE.Matrix4().makeScale(-2, 2, 2.3));\n        geometry.applyMatrix(new THREE.Matrix4().makeRotationY(- Math.PI / 3));\n    // Will not render panorama if already contains the key.\n    var mapRender = {};\n    var isListener = false;\n    // Will use css3drenderer if not support webgl.\n    \n    var texturePlaceholder = document.createElement( 'canvas' );\n    texturePlaceholder.width = 128;\n    texturePlaceholder.height = 128;\n    var context = texturePlaceholder.getContext( '2d' );\n    context.fillStyle = 'rgb( 200, 200, 200 )';\n    context.fillRect( 0, 0, texturePlaceholder.width, texturePlaceholder.height );\n\n    function loadTexture( path, _parent ) {\n        var texture = new THREE.Texture( texturePlaceholder );\n        var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5 } );\n        var image = new Image();\n        image.onload = function () {\n            texture.image = this;\n            texture.needsUpdate = true;\n            _parent.dispatchEvent({\n                type: 'img-loaded'\n            });\n        };\n        image.src = path;\n        return material;\n    }\n\n\treturn function panorama(parent, options) {\n        var src,\n            preview,\n            cubeSrc = {};\n\t\tvar self = this;\n\t\tvar material,\n\t\t\tmesh,\n            pretex,\n            mapKey,\n\t\t\ttex;\n\n\t\tif (typeof options === 'string') {\n\t\t\tsrc = options;\n\t\t} else if (options) {\n\t\t\tsrc = options.src;\n            preview = options.preview;\n            if (options.left) {\n                cubeSrc.left = options.left;\n                cubeSrc.right = options.right;\n                cubeSrc.down = options.down;\n                cubeSrc.top = options.top;\n                cubeSrc.front = options.front;\n                cubeSrc.back = options.back;\n            }\n\t\t}\n        mapKey = src;\n        if (!isSupportWebgl) {\n            mapKey = cubeSrc.left;\n        }\n        if (mapRender[mapKey]) {\n            // Remove all mesh object if scene contains them.\n            // Optimezei and Reduce Memory Usage for Panorama Model.\n            for (var key in mapRender) {\n                if(mapRender.hasOwnProperty(key)) {\n                    while (parent.getObjectByName(key)) {\n                        parent.remove(parent.getObjectByName(key));\n                    }\n                }\n            }\n            parent.add(mapRender[mapKey]);\n            parent.dispatchEvent({\n                type: 'img-loaded'\n            });\n            return mapRender[mapKey];\n        }\n        if (!isSupportWebgl) {\n            var arrMaterial = [\n                loadTexture( cubeSrc.right, parent ), // right\n                loadTexture( cubeSrc.left, parent ), // left\n                loadTexture( cubeSrc.top, parent ), // top\n                loadTexture( cubeSrc.down, parent ), // bottom\n                loadTexture( cubeSrc.front, parent ), // front\n                loadTexture( cubeSrc.back, parent ) // back\n            ];\n\n            mesh = new THREE.Mesh( new THREE.BoxGeometry( 30, 30, 30, 10, 10, 10 ), new THREE.MultiMaterial( arrMaterial ) );\n            mesh.scale.x = - 1;\n            // The primy name use one of array.\n            mesh.name = mapKey;\n            // Fisheye\n            // for ( var i = 0, l = mesh.geometry.vertices.length; i < l; i ++ ) {\n            //     var vertex = mesh.geometry.vertices[ i ];\n            //     vertex.normalize();\n            //     vertex.multiplyScalar( 550 );\n            // }\n            mapRender[mapKey] = mesh;\n            parent.add( mesh );\n            return mesh;\n        }\n\n\t\tif (preview) {\n\t\t\tpretex = materials.imageTexture(preview, THREE.UVMapping, function () {\n\t\t\t});\n\t\t}\n\n\t\tif (src) {\n            if (!isListener) {\n                parent.addEventListener('loaded', function (event) {\n                    var data = event.data;\n                    while (parent.getObjectByName('preview')) {\n                        parent.remove(parent.getObjectByName('preview'));\n                    }\n\n                    material = new THREE.MeshBasicMaterial({\n                        map: data.tex\n                    });\n                    mesh = new THREE.Mesh(geometry, material);\n                    mapRender[data.src] = mesh;\n\n                    mesh.name = src;\n\n                    parent.add(mesh);\n                    parent.dispatchEvent({\n                        type: 'img-loaded'\n                    });\n                });\n                isListener = true;\n            }\n\t\t\ttex = materials.imageTexture(src, THREE.UVMapping, function () {\n                parent.dispatchEvent({\n                    type: 'loaded',\n                    data: {\n                        src: src,\n                        tex: tex\n                    }\n                });\n\t\t\t\tself.emit('loaded');\n\t\t\t});\n\t\t}\n\n\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t// transparent: true,\n\t\t\t// envMap: tex,\n\t\t\tmap: pretex\n            // side: THREE.DoubleSide,\n            // debug\n            // wireframe: true,\n            // depthWrite: false\n            // envMap:cubemap\n\t\t});\n\n\t\tmesh = new THREE.Mesh(geometry, material);\n\n\t\tif (options && options.stereo) {\n\t\t\tif (options.stereo === 'vertical') {\n\t\t\t\ttex.repeat.y = 0.5;\n\t\t\t} else {\n\t\t\t\ttex.repeat.x = 0.5;\n\t\t\t}\n\t\t\tmesh.userData.stereo = options.stereo;\n\t\t}\n\n        mesh.name = 'preview';\n\n        parent.add(mesh);\n\n\t\tthis.raycastable = false;\n\n\t\treturn mesh;\n\t};\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/panorama.js\n ** module id = 16\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three'),\n\t\tTAU = Math.PI * 2,\n\t\tHALF_PI = Math.PI / 2,\n\n\t\tdistance = 400000,\n\t\tscratchVector = new THREE.Vector3(),\n\n\t\tparams = [\n\t\t\t'luminance',\n\t\t\t'turbidity',\n\t\t\t'reileigh',\n\t\t\t'mieCoefficient',\n\t\t\t'mieDirectionalG'\n\t\t];\n\n\trequire('imports?THREE=three!SkyShader');\n\n\treturn function sky(parent, options) {\n\t\tvar obj = new THREE.Sky(),\n\t\t\tself = this,\n\t\t\tscene = parent,\n\t\t\tlight,\n\t\t\tsunPosition,\n\t\t\tazimuth = Math.PI / 6,\n\t\t\taltitude = Math.PI / 6;\n\n\t\tfunction mod(x, y) {\n\t\t\treturn x - y * Math.floor(x / y);\n\t\t}\n\n\t\tfunction update() {\n\t\t\tvar sinTheta,\n\t\t\t\tcosTheta,\n\t\t\t\tphi,\n\t\t\t\tsinPhi,\n\t\t\t\tcosPhi;\n\n\t\t\tsinTheta = Math.sin(altitude);\n\t\t\tcosTheta = Math.cos(altitude);\n\t\t\tphi = -HALF_PI - azimuth;\n\t\t\tsinPhi = Math.sin(phi);\n\t\t\tcosPhi = Math.cos(phi);\n\n\t\t\tsunPosition.set(\n\t\t\t\tdistance * cosPhi * cosTheta,\n\t\t\t\tdistance * sinTheta,\n\t\t\t\tdistance * sinPhi * cosTheta\n\t\t\t);\n\n\t\t\tif (light) {\n\t\t\t\tlight.intensity = 1.5 * Math.max(0.0, 1.0 - Math.exp(-((Math.PI / 1.95 - Math.abs(HALF_PI - altitude)) / 1.5)));\n\t\t\t\tlight.position.copy(sunPosition).normalize().multiplyScalar(100);\n\t\t\t}\n\t\t}\n\n\t\tobj.mesh.name = 'sky';\n\n\t\tparent.add(obj.mesh);\n\n\t\twhile (!(scene instanceof THREE.Scene) && scene.parent) {\n\t\t\tscene = scene.parent;\n\t\t}\n\t\tlight = scene.getObjectByName('directional-light');\n\n\t\tthis.setOptions = function (options) {\n\t\t\tvar needUpdate = false,\n\t\t\t\taltitude,\n\t\t\t\tazimuth;\n\n\t\t\tif (options) {\n\t\t\t\tparams.forEach(function (param) {\n\t\t\t\t\tvar val = options[param];\n\t\t\t\t\tif (val !== undefined) {\n\t\t\t\t\t\tval = parseFloat(val);\n\t\t\t\t\t\tif (!isNaN(val)) {\n\t\t\t\t\t\t\tobj.uniforms[param].value = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (options.sunPosition instanceof THREE.Vector3) {\n\t\t\t\t\tobj.uniforms.sunPosition.value.copy(options.sunPosition);\n\t\t\t\t} else if (Array.isArray(options.sunPosition)) {\n\t\t\t\t\tobj.uniforms.sunPosition.value.set(obj.uniforms.sunPosition.value, options.sunPosition);\n\t\t\t\t} else {\n\t\t\t\t\tself.altitude = options.altitude;\n\t\t\t\t\tself.azimuth = options.azimuth;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tObject.defineProperty(this, 'azimuth', {\n\t\t\tset: function (val) {\n\t\t\t\tval = mod(parseFloat(val), TAU);\n\t\t\t\tif (!isNaN(val) && val !== azimuth) {\n\t\t\t\t\tazimuth = val;\n\t\t\t\t\tupdate();\n\t\t\t\t}\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn azimuth;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'altitude', {\n\t\t\tset: function (val) {\n\t\t\t\tval = mod(parseFloat(val), TAU);\n\t\t\t\tif (!isNaN(val) && val !== altitude) {\n\t\t\t\t\taltitude = val;\n\t\t\t\t\tupdate();\n\t\t\t\t}\n\t\t\t},\n\t\t\tget: function() {\n\t\t\t\treturn altitude;\n\t\t\t}\n\t\t});\n\n\t\tthis.setAltitude = function (val) {\n\t\t\tself.altitude = val;\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.setAzimuth = function (val) {\n\t\t\tself.azimuth = val;\n\t\t\treturn this;\n\t\t};\n\n\t\tsunPosition = obj.uniforms.sunPosition.value;\n\t\tupdate();\n\n\t\tthis.setOptions(options);\n\n\t\tthis.raycastable = false;\n\n\t\treturn obj.mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/sky.js\n ** module id = 17\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\trequire('imports?THREE=three!../lib/ThreeAudio');\n\n\treturn function sound(parent, options) {\n\t\tvar obj,\n\t\t\tsrc,\n\t\t\tlistener,\n\t\t\tscene = parent;\n\n\t\tif (typeof options === 'string' || Array.isArray(options)) {\n\t\t\tsrc = options;\n\t\t} else if (options) {\n\t\t\tsrc = options.src;\n\t\t}\n\n\t\twhile (!(scene instanceof THREE.Scene) && scene.parent) {\n\t\t\tscene = scene.parent;\n\t\t}\n\n\t\tlistener = scene.getObjectByName('audio-listener');\n\t\tobj = new THREE.Audio(listener);\n\t\t// obj.setLoop(true);\n\t\tobj.load(src);\n\n\t\tthis.start = obj.start.bind(obj);\n\t\tthis.volume = obj.volume.bind(obj);\n\n\t\tparent.add(obj);\n\n\t\treturn obj;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/sound.js\n ** module id = 18\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\treturn function box(parent, options) {\n\t\tvar geometry,\n\t\t\tmesh;\n\n\t\tgeometry = new THREE.SphereGeometry(\n\t\t\toptions.radius === undefined ? 0.5 : options.radius,\n\t\t\toptions.widthSegments === undefined ? 16 : options.widthSegments,\n\t\t\toptions.heightSegments === undefined ? 12 : options.heightSegments,\n\t\t\toptions.phiStart,\n\t\t\toptions.phiLength,\n\t\t\toptions.thetaStart,\n\t\t\toptions.thetaLength\n\t\t);\n\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\tmesh.name = 'sphere';\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/sphere.js\n ** module id = 19\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar THREE = require('three'),\n\t\tfontSizeRegex = /(\\d+)px/i,\n\t\tnewLineRegex = /[\\n\\r]/,\n\t\tspaceRegex = /[\\t ]/,\n\t\tlog2 = Math.log(2),\n\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1);\n\n\treturn function text(parent, options) {\n\t\tvar self = this,\n\t\t\tmaterial,\n\t\t\tcanvas,\n\t\t\tctx,\n\t\t\tmesh,\n\t\t\tcontainer,\n\t\t\tsrc,\n\t\t\ttextWidth = 0,\n\t\t\ttextHeight = 0,\n\t\t\tprops = {\n\t\t\t\ttext: '',\n\t\t\t\tfont: '80px sans-serif',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\ttextBaseline: '',\n\t\t\t\tdirection: '',\n\t\t\t\tfillStyle: 'white',\n\t\t\t\tresolution: 256, //pixels per meter\n\t\t\t\twrap: 5 //in meters\n\t\t\t},\n\t\t\ttex;\n\n\t\tfunction nextPowerOfTwo(n) {\n\t\t\treturn Math.pow(2, Math.ceil(Math.log(n) / log2));\n\t\t}\n\n\t\tfunction Line(word) {\n\t\t\tthis.spaceWidth = ctx.measureText(' ').width;\n\t\t\tthis.totalWidth = 0;\n\t\t\tthis.wordsWidth = 0;\n\t\t\tthis.words = [];\n\t\t\tthis.wrap = false;\n\t\t\tif (word) {\n\t\t\t\tthis.add(word);\n\t\t\t}\n\t\t}\n\n\t\tLine.prototype.text = function () {\n\t\t\treturn this.words.join(' ');\n\t\t};\n\n\t\tLine.prototype.add = function(word) {\n\t\t\tvar wordWidth;\n\t\t\tif (this.words.length) {\n\t\t\t\tthis.totalWidth += this.spaceWidth;\n\t\t\t}\n\t\t\tthis.words.push(word);\n\t\t\twordWidth = Line.measure(word);\n\t\t\tthis.totalWidth += wordWidth;\n\t\t\tthis.wordsWidth += wordWidth;\n\t\t};\n\n\t\tLine.prototype.measure = function(word) {\n\t\t\tvar width = this.totalWidth;\n\t\t\tif (word) {\n\t\t\t\twidth += Line.measure(word);\n\t\t\t\tif (this.words.length) {\n\t\t\t\t\twidth += this.spaceWidth;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn width;\n\t\t};\n\n\t\tLine.measure = function(word) {\n\t\t\treturn ctx.measureText(word).width;\n\t\t};\n\n\t\tfunction update() {\n\t\t\t//text stuffs\n\t\t\tvar text,\n\t\t\t\tword = '',\n\t\t\t\tletter,\n\t\t\t\tisSpace,\n\t\t\t\tline,\n\t\t\t\tlines = [],\n\t\t\t\tparse,\n\n\t\t\t\t//layout\n\t\t\t\tdirection = getComputedStyle(document.body).direction,\n\t\t\t\tinherit,\n\t\t\t\tresolution = parseFloat(props.resolution) || 256,\n\t\t\t\twrap,\n\t\t\t\twrapped = false,\n\t\t\t\tfontSize,\n\t\t\t\tpadding,\n\n\t\t\t\t//measurements\n\t\t\t\tlineHeight,\n\t\t\t\ti, start, y, measure,\n\t\t\t\twidth,\n\t\t\t\theight = 0;\n\n\t\t\twrap = parseFloat(props.wrap);\n\t\t\tif (isNaN(wrap) || wrap < 0) {\n\t\t\t\twrap = 5;\n\t\t\t}\n\t\t\twidth = resolution * wrap;\n\n\t\t\tctx.font = props.font;\n\t\t\tparse = fontSizeRegex.exec(ctx.font);\n\t\t\tfontSize = parseFloat(parse && parse[1]) || 50;\n\n\t\t\tlineHeight = fontSize * 1.5;\n\n\t\t\tline = new Line();\n\n\t\t\ttext = props.text === 0 ? '0' : String(props.text || '');\n\t\t\tif (wrap) {\n\t\t\t\ttext = text.trim() + ' ';\n\t\t\t\tfor (i = 0; i < text.length; i++) {\n\t\t\t\t\tletter = text.charAt(i);\n\t\t\t\t\tif (newLineRegex.test(letter)) {\n\t\t\t\t\t\tline.add(word);\n\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t\tword = '';\n\t\t\t\t\t\tline = new Line();\n\t\t\t\t\t} else if (spaceRegex.test(letter)) {\n\t\t\t\t\t\tmeasure = line.measure(word);\n\t\t\t\t\t\tif (measure < width) {\n\t\t\t\t\t\t\tif (line) {\n\t\t\t\t\t\t\t\tline.add(word);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tline = new Line(word);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (!line && Line.measure(word) >= width) {\n\t\t\t\t\t\t\t//one very long word\n\t\t\t\t\t\t\tlines.push(new Line(word));\n\t\t\t\t\t\t\tword = '';\n\t\t\t\t\t\t\tline = new Line();\n\t\t\t\t\t\t\twrapped = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tline.wrap = true;\n\t\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t\t\tline = new Line(word);\n\t\t\t\t\t\t\twrapped = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tword = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tword += letter;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (line) {\n\t\t\t\t\tlines.push(line);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlines.push(new Line(text));\n\t\t\t}\n\n\t\t\tif (!width || !wrapped) {\n\t\t\t\twidth = lines.reduce(function (previous, line) {\n\t\t\t\t\treturn Math.max(previous, line.totalWidth);\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t\twidth = Math.min(width, 2048);\n\n\t\t\theight = lines.length * lineHeight;\n\n\t\t\tif (options && options.mipmap === false) {\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\t\t\t} else {\n\t\t\t\tcanvas.width = nextPowerOfTwo(width);\n\t\t\t\tcanvas.height = nextPowerOfTwo(height);\n\t\t\t}\n\n\t\t\tmesh.scale.set(canvas.width / resolution, canvas.height / resolution, 1);\n\n\t\t\t//debug\n\t\t\t// ctx.fillStyle = 'rgba(100, 100, 100, 0.5)';\n\t\t\t// ctx.fillRect(0, 0, canvas.width, canvas.height);\n\t\t\t// document.body.appendChild(canvas);\n\t\t\t// canvas.style.cssText = 'position: absolute; width: auto !important; height: auto !important; max-width: 80%';\n\n\t\t\t/*\n\t\t\tset all these properties again because they get reset\n\t\t\twhen you resize the canvas\n\t\t\t*/\n\t\t\tctx.font = props.font;\n\t\t\tctx.textAlign = props.textAlign;\n\t\t\tctx.textBaseline = props.textBaseline;\n\t\t\tctx.direction = props.direction;\n\t\t\tctx.fillStyle = props.fillStyle;\n\t\t\t//todo: add maxWidth?\n\n\t\t\tpadding = (canvas.width - width) / 2;\n\t\t\ty = (canvas.height - height) / 2 + lineHeight / 2;\n\n\t\t\tinherit = (ctx.direction === '' || ctx.direction === 'inherit');\n\t\t\tif (ctx.textAlign === 'center') {\n\t\t\t\tstart = canvas.width / 2;\n\t\t\t} else if (ctx.textAlign === 'right' ||\n\t\t\t\tctx.textAlign === 'end' && (ctx.direction === 'ltr' || inherit && direction === 'ltr') ||\n\t\t\t\tctx.textAlign === 'start' && (ctx.direction === 'rtl' || inherit && direction === 'rtl')) {\n\n\t\t\t\tstart = canvas.width - padding;\n\t\t\t} else {\n\t\t\t\tstart = padding;\n\t\t\t}\n\n\t\t\tlines.forEach(function (line) {\n\t\t\t\tvar x,\n\t\t\t\t\tspace;\n\t\t\t\tif (props.textAlign === 'justify' && line.wrap && line.words.length > 1) {\n\t\t\t\t\tx = start;\n\t\t\t\t\tspace = (width - line.wordsWidth) / (line.words.length - 1);\n\t\t\t\t\tline.words.forEach(function (word) {\n\t\t\t\t\t\tctx.fillText(word, x, y);\n\t\t\t\t\t\tx += space + Line.measure(word);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tctx.fillText(line.text(), start, y);\n\t\t\t\t}\n\t\t\t\ty += lineHeight;\n\t\t\t});\n\n\t\t\ttextWidth = width / resolution;\n\t\t\ttextHeight = lines.length * lineHeight / resolution;\n\n\t\t\ttex.needsUpdate = true;\n\n\t\t\tmesh.name = text.trim();\n\t\t}\n\n\t\tcanvas = document.createElement('canvas');\n\t\tctx = canvas.getContext('2d');\n\t\ttex = new THREE.Texture(canvas);\n\n\t\tif (canvas.width === nextPowerOfTwo(canvas.width) &&\n\t\t\tcanvas.height === nextPowerOfTwo(canvas.height)) {\n\n\t\t\ttex.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\ttex.generateMipmaps = true;\n\t\t}\n\n\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\tside: THREE.DoubleSide,\n\t\t\ttransparent: true,\n\t\t\tmap: tex\n\t\t});\n\n\t\tmesh = new THREE.Mesh(geometry, material);\n\n\t\tcontainer = new THREE.Object3D();\n\t\tcontainer.name = 'text';\n\t\tcontainer.add(mesh);\n\t\tparent.add(container);\n\n\t\tif (typeof options === 'string') {\n\t\t\tprops.text = options;\n\t\t} else if (options) {\n\t\t\tObject.keys(props).forEach(function (key) {\n\t\t\t\tprops[key] = options[key] || props[key];\n\t\t\t});\n\t\t}\n\t\tupdate();\n\n\t\tObject.keys(props).forEach(function (key) {\n\t\t\tObject.defineProperty(self, key, {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn props[key];\n\t\t\t\t},\n\t\t\t\tset: function (val) {\n\t\t\t\t\tprops[key] = val;\n\t\t\t\t\tupdate();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tObject.defineProperty(self, 'width', {\n\t\t\tget: function () {\n\t\t\t\treturn textWidth;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(self, 'height', {\n\t\t\tget: function () {\n\t\t\t\treturn textHeight;\n\t\t\t}\n\t\t});\n\n\t\tthis.material = material;\n\n\t\treturn container;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/text.js\n ** module id = 20\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\treturn function torus(parent, options) {\n\t\tvar geometry,\n\t\t\tmesh;\n\n\t\tgeometry = new THREE.TorusGeometry(\n\t\t\toptions.radius === undefined ? 0.5 : options.radius,\n\t\t\toptions.tube === undefined ? 0.125 : options.tube,\n\t\t\toptions.radialSegments === undefined ? 12 : options.radialSegments,\n\t\t\toptions.tubularSegments === undefined ? 16 : options.tubularSegments,\n\t\t\toptions.arc\n\t\t);\n\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\tmesh.name = 'torus';\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/torus.js\n ** module id = 21\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar THREE = require('three'),\n\t\turlRegex = require('../utils/urlregex'),\n\t\textRegex = /\\.(webm|ogg|ogv|m4v|mp4|mov)/i,\n\t\tvideo;\n\n\tvideo = function (parent, options) {\n\t\tvar geometry,\n\t\t\tmaterial,\n\t\t\tmesh,\n\t\t\tvid,\n\t\t\ttex,\n\t\t\taspectRatio = 1,\n\t\t\tplaying = false,\n\t\t\tself = this;\n\n\t\tfunction isPowerOfTwo(num) {\n\t\t\treturn num > 0 && (num & (num-1)) === 0; // jshint ignore:line\n\t\t}\n\n\t\tfunction loadedMetadata() {\n\t\t\t//todo: don't do any of this if object has been deleted\n\n\t\t\tvar newAspectRatio = vid.videoWidth / vid.videoHeight;\n\t\t\tif (!options || !options.sphere) {\n\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(1, aspectRatio / newAspectRatio, 1));\n\t\t\t}\n\t\t\taspectRatio = newAspectRatio;\n\n\t\t\tif (vid.videoWidth === vid.videoHeight &&\n\t\t\t\t\tisPowerOfTwo(vid.videoWidth) && isPowerOfTwo(vid.videoHeight)) {\n\n\t\t\t\ttex.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\t\ttex.generateMipmaps = true;\n\t\t\t} else {\n\t\t\t\ttex.minFilter = THREE.LinearFilter;\n\t\t\t\ttex.generateMipmaps = false;\n\t\t\t}\n\n\t\t\tmaterial.map = tex;\n\t\t\tmaterial.visible = true;\n\n\t\t\tif (playing) {\n\t\t\t\tvid.play();\n\t\t\t}\n\t\t}\n\n\t\tfunction setSource(sources) {\n\t\t\tsources.forEach(function (src) {\n\t\t\t\tvar parse,\n\t\t\t\t\text,\n\t\t\t\t\tsource;\n\n\t\t\t\tif (!src) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tparse = urlRegex.exec(src);\n\t\t\t\tif (parse &&\n\t\t\t\t\t\t(parse[1] && parse[1] !== window.location.hostΩ ||\n\t\t\t\t\t\t\tparse[2] && parse[2] !== window.location.port)) {\n\n\t\t\t\t\tif (vid.crossOrigin !== undefined) {\n\t\t\t\t\t\tvid.crossOrigin = 'anonymous';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('Browser does not support cross-origin video');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsource = document.createElement('source');\n\t\t\t\tsource.src = src;\n\n\t\t\t\text = extRegex.exec(src);\n\t\t\t\tif (!ext || vid.canPlayType('video/' + ext[1])) {\n\t\t\t\t\tvid.appendChild(source);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/*\n\t\tPause the video when this browser tab is in the background or minimized.\n\t\tResume when it comes back in focus, but only if the user didn't pause manually.\n\t\t*/\n\t\tfunction visibilityChange() {\n\t\t\tif (document.hidden || document.mozHidden || document.msHidden || document.webkitHidden) {\n\t\t\t\tvid.pause();\n\t\t\t} else if (playing) {\n\t\t\t\tvid.play();\n\t\t\t}\n\t\t}\n\n\t\tvid = document.createElement('video');\n\t\tvid.loop = true;\n\t\tvid.addEventListener('loadedmetadata', loadedMetadata, false);\n\n\t\tif (Array.isArray(options)) {\n\t\t\tsetSource(options);\n\t\t} if (typeof options === 'string') {\n\t\t\tsetSource([options]);\n\t\t} else if (typeof options.src === 'string') {\n\t\t\tsetSource([options.src]);\n\t\t} else if (Array.isArray(options.src)) {\n\t\t\tsetSource(options.src);\n\t\t}\n\n\t\tvid.load();\n\n\t\ttex = new THREE.VideoTexture(vid, THREE.UVMapping);\n\t\ttex.format = THREE.RGBFormat;\n\n\t\tif (options && options.sphere) {\n\t\t\tgeometry = new THREE.SphereGeometry(\n\t\t\t\t994, //radius\n\t\t\t\t60, //widthSegments\n\t\t\t\t60, //heightSegments\n\t\t\t\t(parseFloat(options.phiStart) || 0) * Math.PI * 2,\n\t\t\t\t(parseFloat(options.phiLength) || 1) * Math.PI * 2,\n\t\t\t\t(parseFloat(options.thetaStart) || 0) * Math.PI,\n\t\t\t\t(parseFloat(options.thetaLength) || 1) * Math.PI\n\t\t\t);\n\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(-1, 1, 1));\n\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeRotationY(- Math.PI / 2));\n\t\t} else {\n\t\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1, 8);\n\t\t}\n\n\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\tside: THREE.DoubleSide,\n\t\t\tmap: tex,\n\t\t\tvisible: false\n\t\t});\n\n\t\tmesh = new THREE.Mesh(geometry, material);\n\n\t\tif (options && options.stereo) {\n\t\t\tif (options.stereo === 'vertical') {\n\t\t\t\ttex.repeat.y = 0.5;\n\t\t\t} else {\n\t\t\t\ttex.repeat.x = 0.5;\n\t\t\t}\n\t\t\tmesh.userData.stereo = options.stereo;\n\t\t}\n\n\t\tif (vid.readyState) {\n\t\t\tloadedMetadata();\n\t\t}\n\n\t\tthis.play = function play() {\n\t\t\tplaying = true;\n\t\t\tvid.play();\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.pause = function pause() {\n\t\t\tplaying = false;\n\t\t\tvid.pause();\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.canPlayType = video.canPlayType;\n\n\t\tObject.defineProperty(this, 'width', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.videoWidth;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'height', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.videoHeight;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'paused', {\n\t\t\tget: function () {\n\t\t\t\treturn !playing;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'volume', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.volume;\n\t\t\t},\n\t\t\tset: function (vol) {\n\t\t\t\tvid.volume = vol;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'muted', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.muted;\n\t\t\t},\n\t\t\tset: function (muted) {\n\t\t\t\tvid.muted = muted;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'duration', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.duration || 0;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'currentTime', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.currentTime;\n\t\t\t},\n\t\t\tset: function (currentTime) {\n\t\t\t\tif (vid.readyState && currentTime < vid.duration && currentTime >= 0) {\n\t\t\t\t\tvid.currentTime = currentTime;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t[\n\t\t\t'loadedmetadata',\n\t\t\t'play',\n\t\t\t'pause',\n\t\t\t'playing',\n\t\t\t'progress'\n\t\t].forEach(function registerMediaEvent(event) {\n\t\t\tvid.addEventListener(event, self.emit.bind(self, event));\n\t\t});\n\n\t\t//sometimes video fails to play because it's too big. remove it and try again\n\t\tvid.addEventListener('error', function (evt) {\n\t\t\tif (vid.error.code === window.MediaError.MEDIA_ERR_DECODE && vid.childNodes.length > 1) {\n\t\t\t\tmaterial.visible = false;\n\t\t\t\tvid.removeChild(vid.firstChild);\n\t\t\t\tvid.load();\n\t\t\t}\n\n\t\t\tself.emit(event, evt);\n\t\t}, true);\n\n\t\tthis.element = vid;\n\n\t\twindow.addEventListener('touchstart', function touchStart() {\n\t\t\tif (playing) {\n\t\t\t\tvid.play();\n\t\t\t} else {\n\t\t\t\tvid.load();\n\t\t\t}\n\t\t\twindow.removeEventListener('touchstart', touchStart, true);\n\t\t}, true);\n\n\t\t//pause when window is hidden\n\t\tdocument.addEventListener('visibilitychange', visibilityChange);\n\t\tdocument.addEventListener('mozvisibilitychange', visibilityChange);\n\t\tdocument.addEventListener('msvisibilitychange', visibilityChange);\n\t\tdocument.addEventListener('webkitvisibilitychange', visibilityChange);\n\n\t\tmesh.name = 'video';\n\t\tthis.raycastable = !(options && options.sphere);\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n\n\tvideo.canPlayType = function canPlayType(type) {\n\t\tvar element = document.createElement('video');\n\t\treturn element.canPlayType(type);\n\t};\n\n\treturn video;\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/video.js\n ** module id = 22\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author richt / http://richt.me\n * @author WestLangley / http://github.com/WestLangley\n *\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n */\n\nTHREE.DeviceOrientationControls = function( object ) {\n\n\tvar scope = this;\n\n\tthis.object = object;\n\tthis.object.rotation.reorder( \"YXZ\" );\n\n\tthis.enabled = true;\n\n\tthis.deviceOrientation = {};\n\tthis.screenOrientation = 0;\n\n\tthis.alpha = 0;\n\tthis.alphaOffsetAngle = 0;\n\n\n\tvar onDeviceOrientationChangeEvent = function( event ) {\n\n\t\tscope.deviceOrientation = event;\n\n\t};\n\n\tvar onScreenOrientationChangeEvent = function() {\n\n\t\tscope.screenOrientation = window.orientation || 0;\n\n\t};\n\n\t// The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\n\tvar setObjectQuaternion = function() {\n\n\t\tvar zee = new THREE.Vector3( 0, 0, 1 );\n\n\t\tvar euler = new THREE.Euler();\n\n\t\tvar q0 = new THREE.Quaternion();\n\n\t\tvar q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\n\n\t\treturn function( quaternion, alpha, beta, gamma, orient ) {\n\n\t\t\teuler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\n\n\t\t\tquaternion.setFromEuler( euler ); // orient the device\n\n\t\t\tquaternion.multiply( q1 ); // camera looks out the back of the device, not the top\n\n\t\t\tquaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\n\n\t\t}\n\n\t}();\n\n\tthis.connect = function() {\n\n\t\tonScreenOrientationChangeEvent(); // run once on load\n\n\t\twindow.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\twindow.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\n\t\tscope.enabled = true;\n\n\t};\n\n\tthis.disconnect = function() {\n\n\t\twindow.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\twindow.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\n\t\tscope.enabled = false;\n\n\t};\n\n\tthis.update = function() {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tvar alpha = scope.deviceOrientation.alpha ? THREE.Math.degToRad( scope.deviceOrientation.alpha ) + this.alphaOffsetAngle : 0; // Z\n\t\tvar beta = scope.deviceOrientation.beta ? THREE.Math.degToRad( scope.deviceOrientation.beta ) : 0; // X'\n\t\tvar gamma = scope.deviceOrientation.gamma ? THREE.Math.degToRad( scope.deviceOrientation.gamma ) : 0; // Y''\n\t\tvar orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\n\n\t\tsetObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\n\t\tthis.alpha = alpha;\n\n\t};\n\n\tthis.updateAlphaOffsetAngle = function( angle ) {\n\n\t\tthis.alphaOffsetAngle = angle;\n\t\tthis.update();\n\n\t};\n\n\tthis.dispose = function() {\n\n\t\tthis.disconnect();\n\n\t};\n\n\tthis.connect();\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./bower_components/DeviceOrientationControls/index.js\n ** module id = 23\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tthis.object = object;\n\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.25;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function() {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\treturn function update () {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\t\t\tscope.target.add( panOffset );\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function() {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function() {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function() {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function() {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan ( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\t//console.log( 'handleMouseDownPan' );\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t// rotating across whole screen goes 360 degrees around\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\t//console.log( 'handleMouseMovePan' );\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( event ) {\n\n\t\t//console.log( 'handleMouseUp' );\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\t//console.log( 'handleMouseWheel' );\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\t//console.log( 'handleKeyDown' );\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\t//console.log( 'handleTouchStartDolly' );\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\t//console.log( 'handleTouchStartPan' );\n\n\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t// rotating across whole screen goes 360 degrees around\n\t\trotateLeft( -2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\trotateUp( -2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\t//console.log( 'handleTouchMoveDolly' );\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\t//console.log( 'handleTouchMovePan' );\n\n\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchEnd( event ) {\n\n\t\t//console.log( 'handleTouchEnd' );\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\n\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\thandleMouseDownRotate( event );\n\n\t\t\tstate = STATE.ROTATE;\n\n\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\n\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\thandleMouseDownDolly( event );\n\n\t\t\tstate = STATE.DOLLY;\n\n\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\n\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\thandleMouseDownPan( event );\n\n\t\t\tstate = STATE.PAN;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\thandleMouseMoveRotate( event );\n\n\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\thandleMouseMoveDolly( event );\n\n\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\thandleMouseMovePan( event );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleTouchStartDolly( event );\n\n\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\n\n\t\t\t\thandleTouchMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\nObject.defineProperties( THREE.OrbitControls.prototype, {\n\n\tcenter: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\treturn this.target;\n\n\t\t}\n\n\t},\n\n\t// backward compatibility\n\n\tnoZoom: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\treturn ! this.enableZoom;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\tthis.enableZoom = ! value;\n\n\t\t}\n\n\t},\n\n\tnoRotate: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\treturn ! this.enableRotate;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\tthis.enableRotate = ! value;\n\n\t\t}\n\n\t},\n\n\tnoPan: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\treturn ! this.enablePan;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\tthis.enablePan = ! value;\n\n\t\t}\n\n\t},\n\n\tnoKeys: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\treturn ! this.enableKeys;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\tthis.enableKeys = ! value;\n\n\t\t}\n\n\t},\n\n\tstaticMoving : {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\treturn ! this.enableDamping;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\tthis.enableDamping = ! value;\n\n\t\t}\n\n\t},\n\n\tdynamicDampingFactor : {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\treturn this.dampingFactor;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\tthis.dampingFactor = value;\n\n\t\t}\n\n\t}\n\n} );\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./bower_components/OrbitControls/index.js\n ** module id = 24\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n( function() {\n\n\tvar _oldConsole = console.log;\n\n\tvar supportedTypes = [];\n\n\tfunction addSupportedType( type, format ) {\n\n\t\tsupportedTypes.push( {\n\t\t\ttype: type,\n\t\t\tformat: format\n\t\t} );\n\n\t}\n\n\taddSupportedType( THREE.Matrix4, function( v ) {\n\n\t\tvar e = v.elements;\n\t\t\t\t\n\t\treturn [\n\t\t\t[ e[ 0 ], e[ 4 ], e[ 8 ], e[ 12 ] ],\n\t\t\t[ e[ 1 ], e[ 5 ], e[ 9 ], e[ 13 ] ],\n\t\t\t[ e[ 2 ], e[ 6 ], e[ 10 ], e[ 14 ] ],\n\t\t\t[ e[ 3 ], e[ 7 ], e[ 11 ], e[ 15 ] ]\n\t\t];\n\n\t} );\n\n\taddSupportedType( THREE.Matrix3, function( v ) {\n\n\t\tvar e = v.elements;\n\t\t\t\t\n\t\treturn [\n\t\t\t[ e[ 0 ], e[ 3 ], e[ 6 ] ],\n\t\t\t[ e[ 1 ], e[ 4 ], e[ 7 ] ],\n\t\t\t[ e[ 2 ], e[ 5 ], e[ 8 ] ]\n\t\t];\n\n\t} );\n\n\taddSupportedType( THREE.Vector2, function( v ) {\n\n\t\treturn {\n\t\t\tVector2: { x: v.x, y: v.y }\n\t\t};\n\n\t} );\n\n\taddSupportedType( THREE.Vector3, function( v ) {\n\n\t\treturn {\n\t\t\tVector3: { x: v.x, y: v.y, z: v.z }\n\t\t};\n\n\t} );\n\n\taddSupportedType( THREE.Vector4, function( v ) {\n\n\t\treturn {\n\t\t\tVector4: { x: v.x, y: v.y, z: v.z, w: v.w }\n\t\t};\n\n\t} );\n\n\taddSupportedType( THREE.Euler, function( v ) {\n\n\t\treturn {\n\t\t\tVector4: { x: v.x, y: v.y, z: v.z, order: v.order }\n\t\t};\n\n\t} );\n\n\taddSupportedType( THREE.Ray, function( v ) {\n\n\t\treturn { \n\t\t\t'Ray origin': { x: v.origin.x, y: v.origin.y, z: v.origin.z },\n\t\t\t'Ray direction': { x: v.direction.x, y: v.direction.y, z: v.direction.z }\n\t\t};\n\n\t} );\n\n\tfunction stacktrace() { \n\t\tvar err = new Error();\n\t\treturn err.stack;\n\t}\n\n\tconsole.log = function() {\n\n\t\t//console.trace ();\n\n\t\tvar special = false;\n\n\t\t[].forEach.call( arguments, function( a ) { \n\t\t\tsupportedTypes.forEach( function( t ) {\n\t\t\t\tif( a instanceof t.type ) special = true;;\n\t\t\t} );\n\t\t} );\n\n\t\tif( special ) {\n\n\t\t\t[].forEach.call( arguments, function( a ) { \n\t\t\t\n\t\t\t\t_oldConsole.apply( console, [ a ] );\n\n\t\t\t\tsupportedTypes.forEach( function( t ) {\n\n\t\t\t\t\tif( a instanceof t.type ) {\n\n\t\t\t\t\t\tconsole.table( t.format( a ) );\n\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\t_oldConsole.apply( console, arguments );\n\n\t\t}\n\n\t}\n\n} )();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./bower_components/AugmentedConsole/index.js\n ** module id = 25\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SpriteCanvasMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'SpriteCanvasMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\tthis.program = function ( context, color ) {};\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\nTHREE.SpriteCanvasMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.SpriteCanvasMaterial();\n\n\tmaterial.copy( this );\n\tmaterial.color.copy( this.color );\n\tmaterial.program = this.program;\n\n\treturn material;\n\n};\n\n//\n\nTHREE.CanvasRenderer = function ( parameters ) {\n\n\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _this = this,\n\t_renderData, _elements, _lights,\n\t_projector = new THREE.Projector(),\n\n\t_canvas = parameters.canvas !== undefined\n\t\t\t ? parameters.canvas\n\t\t\t : document.createElement( 'canvas' ),\n\n\t_canvasWidth = _canvas.width,\n\t_canvasHeight = _canvas.height,\n\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\n\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\n\n\t_viewportX = 0,\n\t_viewportY = 0,\n\t_viewportWidth = _canvasWidth,\n\t_viewportHeight = _canvasHeight,\n\n\t_pixelRatio = 1,\n\n\t_context = _canvas.getContext( '2d', {\n\t\talpha: parameters.alpha === true\n\t} ),\n\n\t_clearColor = new THREE.Color( 0x000000 ),\n\t_clearAlpha = parameters.alpha === true ? 0 : 1,\n\n\t_contextGlobalAlpha = 1,\n\t_contextGlobalCompositeOperation = 0,\n\t_contextStrokeStyle = null,\n\t_contextFillStyle = null,\n\t_contextLineWidth = null,\n\t_contextLineCap = null,\n\t_contextLineJoin = null,\n\t_contextLineDash = [],\n\n\t_camera,\n\n\t_v1, _v2, _v3, _v4,\n\t_v5 = new THREE.RenderableVertex(),\n\t_v6 = new THREE.RenderableVertex(),\n\n\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\n\t_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\n\n\t_color = new THREE.Color(),\n\t_color1 = new THREE.Color(),\n\t_color2 = new THREE.Color(),\n\t_color3 = new THREE.Color(),\n\t_color4 = new THREE.Color(),\n\n\t_diffuseColor = new THREE.Color(),\n\t_emissiveColor = new THREE.Color(),\n\n\t_lightColor = new THREE.Color(),\n\n\t_patterns = {},\n\n\t_image, _uvs,\n\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\n\n\t_clipBox = new THREE.Box2(),\n\t_clearBox = new THREE.Box2(),\n\t_elemBox = new THREE.Box2(),\n\n\t_ambientLight = new THREE.Color(),\n\t_directionalLights = new THREE.Color(),\n\t_pointLights = new THREE.Color(),\n\n\t_vector3 = new THREE.Vector3(), // Needed for PointLight\n\t_centroid = new THREE.Vector3(),\n\t_normal = new THREE.Vector3(),\n\t_normalViewMatrix = new THREE.Matrix3();\n\n\t/* TODO\n\t_canvas.mozImageSmoothingEnabled = false;\n\t_canvas.webkitImageSmoothingEnabled = false;\n\t_canvas.msImageSmoothingEnabled = false;\n\t_canvas.imageSmoothingEnabled = false;\n\t*/\n\n\t// dash+gap fallbacks for Firefox and everything else\n\n\tif ( _context.setLineDash === undefined ) {\n\n\t\t_context.setLineDash = function () {};\n\n\t}\n\n\tthis.domElement = _canvas;\n\n\tthis.autoClear = true;\n\tthis.sortObjects = true;\n\tthis.sortElements = true;\n\n\tthis.info = {\n\n\t\trender: {\n\n\t\t\tvertices: 0,\n\t\t\tfaces: 0\n\n\t\t}\n\n\t};\n\n\t// WebGLRenderer compatibility\n\n\tthis.supportsVertexTextures = function () {};\n\tthis.setFaceCulling = function () {};\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _context;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _context.getContextAttributes();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value !== undefined ) _pixelRatio = value;\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t_canvasWidth = width * _pixelRatio;\n\t\t_canvasHeight = height * _pixelRatio;\n\n\t\t_canvas.width = _canvasWidth;\n\t\t_canvas.height = _canvasHeight;\n\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\t_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t_contextGlobalAlpha = 1;\n\t\t_contextGlobalCompositeOperation = 0;\n\t\t_contextStrokeStyle = null;\n\t\t_contextFillStyle = null;\n\t\t_contextLineWidth = null;\n\t\t_contextLineCap = null;\n\t\t_contextLineJoin = null;\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t_viewportX = x * _pixelRatio;\n\t\t_viewportY = y * _pixelRatio;\n\n\t\t_viewportWidth = width * _pixelRatio;\n\t\t_viewportHeight = height * _pixelRatio;\n\n\t};\n\n\tthis.setScissor = function () {};\n\tthis.setScissorTest = function () {};\n\n\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t_clearColor.set( color );\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t};\n\n\tthis.setClearColorHex = function ( hex, alpha ) {\n\n\t\tconsole.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n\t\tthis.setClearColor( hex, alpha );\n\n\t};\n\n\tthis.getClearColor = function () {\n\n\t\treturn _clearColor;\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn _clearAlpha;\n\n\t};\n\n\tthis.getMaxAnisotropy = function () {\n\n\t\treturn 0;\n\n\t};\n\n\tthis.clear = function () {\n\n\t\tif ( _clearBox.isEmpty() === false ) {\n\n\t\t\t_clearBox.intersect( _clipBox );\n\t\t\t_clearBox.expandByScalar( 2 );\n\n\t\t\t_clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t\t\t_clearBox.min.y =  - _clearBox.min.y + _canvasHeightHalf;\t\t// higher y value !\n\t\t\t_clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t\t\t_clearBox.max.y =  - _clearBox.max.y + _canvasHeightHalf;\t\t// lower y value !\n\n\t\t\tif ( _clearAlpha < 1 ) {\n\n\t\t\t\t_context.clearRect(\n\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( _clearAlpha > 0 ) {\n\n\t\t\t\tsetBlending( THREE.NormalBlending );\n\t\t\t\tsetOpacity( 1 );\n\n\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\n\n\t\t\t\t_context.fillRect(\n\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t_clearBox.makeEmpty();\n\n\t\t}\n\n\t};\n\n\t// compatibility\n\n\tthis.clearColor = function () {};\n\tthis.clearDepth = function () {};\n\tthis.clearStencil = function () {};\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.autoClear === true ) this.clear();\n\n\t\t_this.info.render.vertices = 0;\n\t\t_this.info.render.faces = 0;\n\n\t\t_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );\n\t\t_context.translate( _canvasWidthHalf, _canvasHeightHalf );\n\n\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t_elements = _renderData.elements;\n\t\t_lights = _renderData.lights;\n\t\t_camera = camera;\n\n\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\n\t\t/* DEBUG\n\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n\t\t*/\n\n\t\tcalculateLights();\n\n\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\n\n\t\t\tvar element = _elements[ e ];\n\n\t\t\tvar material = element.material;\n\n\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\n\t\t\t_elemBox.makeEmpty();\n\n\t\t\tif ( element instanceof THREE.RenderableSprite ) {\n\n\t\t\t\t_v1 = element;\n\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\n\n\t\t\t\trenderSprite( _v1, element, material );\n\n\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderLine( _v1, _v2, element, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\n\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\tif ( material.overdraw > 0 ) {\n\n\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\n\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\n\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\n\n\t\t\t\t}\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t_v3.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* DEBUG\n\t\t\tsetLineWidth( 1 );\n\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n\t\t\t*/\n\n\t\t\t_clearBox.union( _elemBox );\n\n\t\t}\n\n\t\t/* DEBUG\n\t\tsetLineWidth( 1 );\n\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n\t\t*/\n\n\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\n\n\t};\n\n\t//\n\n\tfunction calculateLights() {\n\n\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t_pointLights.setRGB( 0, 0, 0 );\n\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = _lights[ l ];\n\t\t\tvar lightColor = light.color;\n\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\n\t\t\t\t_ambientLight.add( lightColor );\n\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\t// for sprites\n\n\t\t\t\t_directionalLights.add( lightColor );\n\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\t// for sprites\n\n\t\t\t\t_pointLights.add( lightColor );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction calculateLight( position, normal, color ) {\n\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = _lights[ l ];\n\n\t\t\t_lightColor.copy( light.color );\n\n\t\t\tif ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\n\t\t\t\tvar amount = normal.dot( lightPosition );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\n\t\t\t\tif ( amount == 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderSprite( v1, element, material ) {\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\tvar scaleX = element.scale.x * _canvasWidthHalf;\n\t\tvar scaleY = element.scale.y * _canvasHeightHalf;\n\n\t\tvar dist = 0.5 * Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite\n\t\t_elemBox.min.set( v1.x - dist, v1.y - dist );\n\t\t_elemBox.max.set( v1.x + dist, v1.y + dist );\n\n\t\tif ( material instanceof THREE.SpriteMaterial ) {\n\n\t\t\tvar texture = material.map;\n\n\t\t\tif ( texture !== null ) {\n\n\t\t\t\tvar pattern = _patterns[ texture.id ];\n\n\t\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t\t\t\tvar bitmap = texture.image;\n\n\t\t\t\t\tvar ox = bitmap.width * texture.offset.x;\n\t\t\t\t\tvar oy = bitmap.height * texture.offset.y;\n\n\t\t\t\t\tvar sx = bitmap.width * texture.repeat.x;\n\t\t\t\t\tvar sy = bitmap.height * texture.repeat.y;\n\n\t\t\t\t\tvar cx = scaleX / sx;\n\t\t\t\t\tvar cy = scaleY / sy;\n\n\t\t\t\t\t_context.save();\n\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t_context.translate( - scaleX / 2, - scaleY / 2 );\n\t\t\t\t\t_context.scale( cx, cy );\n\t\t\t\t\t_context.translate( - ox, - oy );\n\t\t\t\t\t_context.fillRect( ox, oy, sx, sy );\n\t\t\t\t\t_context.restore();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// no texture\n\n\t\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t\t_context.save();\n\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t_context.scale( scaleX, - scaleY );\n\t\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t\t_context.restore();\n\n\t\t\t}\n\n\t\t} else if ( material instanceof THREE.SpriteCanvasMaterial ) {\n\n\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t_context.save();\n\t\t\t_context.translate( v1.x, v1.y );\n\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t_context.scale( scaleX, scaleY );\n\n\t\t\tmaterial.program( _context );\n\n\t\t\t_context.restore();\n\n\t\t}\n\n\t\t/* DEBUG\n\t\tsetStrokeStyle( 'rgb(255,255,0)' );\n\t\t_context.beginPath();\n\t\t_context.moveTo( v1.x - 10, v1.y );\n\t\t_context.lineTo( v1.x + 10, v1.y );\n\t\t_context.moveTo( v1.x, v1.y - 10 );\n\t\t_context.lineTo( v1.x, v1.y + 10 );\n\t\t_context.stroke();\n\t\t*/\n\n\t}\n\n\tfunction renderLine( v1, v2, element, material ) {\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\t_context.beginPath();\n\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\n\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\n\n\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\n\t\t\tsetLineWidth( material.linewidth );\n\t\t\tsetLineCap( material.linecap );\n\t\t\tsetLineJoin( material.linejoin );\n\n\t\t\tif ( material.vertexColors !== THREE.VertexColors ) {\n\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\n\t\t\t} else {\n\n\t\t\t\tvar colorStyle1 = element.vertexColors[ 0 ].getStyle();\n\t\t\t\tvar colorStyle2 = element.vertexColors[ 1 ].getStyle();\n\n\t\t\t\tif ( colorStyle1 === colorStyle2 ) {\n\n\t\t\t\t\tsetStrokeStyle( colorStyle1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar grad = _context.createLinearGradient(\n\t\t\t\t\t\t\tv1.positionScreen.x,\n\t\t\t\t\t\t\tv1.positionScreen.y,\n\t\t\t\t\t\t\tv2.positionScreen.x,\n\t\t\t\t\t\t\tv2.positionScreen.y\n\t\t\t\t\t\t);\n\t\t\t\t\t\tgrad.addColorStop( 0, colorStyle1 );\n\t\t\t\t\t\tgrad.addColorStop( 1, colorStyle2 );\n\n\t\t\t\t\t} catch ( exception ) {\n\n\t\t\t\t\t\tgrad = colorStyle1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tsetStrokeStyle( grad );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_context.stroke();\n\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\n\t\t\tsetLineWidth( material.linewidth );\n\t\t\tsetLineCap( material.linecap );\n\t\t\tsetLineJoin( material.linejoin );\n\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\tsetLineDash( [ material.dashSize, material.gapSize ] );\n\n\t\t\t_context.stroke();\n\n\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t\tsetLineDash( [] );\n\n\t\t}\n\n\t}\n\n\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\n\n\t\t_this.info.render.vertices += 3;\n\t\t_this.info.render.faces ++;\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\n\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\n\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\n\n\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\n\n\t\tif ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {\n\n\t\t\t_diffuseColor.copy( material.color );\n\t\t\t_emissiveColor.copy( material.emissive );\n\n\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t_diffuseColor.multiply( element.color );\n\n\t\t\t}\n\n\t\t\t_color.copy( _ambientLight );\n\n\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\n\t\t\tcalculateLight( _centroid, element.normalModel, _color );\n\n\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t} else if ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t    material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t    material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tvar mapping = material.map.mapping;\n\n\t\t\t\tif ( mapping === THREE.UVMapping ) {\n\n\t\t\t\t\t_uvs = element.uvs;\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.envMap !== null ) {\n\n\t\t\t\tif ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv1x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv1y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv2x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv2y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv3x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv3y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_color.copy( material.color );\n\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t\t_color.multiply( element.color );\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\n\t\t\t}\n\n\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\n\n\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t} else {\n\n\t\t\t_color.setRGB( 1, 1, 1 );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\n\n\t\t_context.beginPath();\n\t\t_context.moveTo( x0, y0 );\n\t\t_context.lineTo( x1, y1 );\n\t\t_context.lineTo( x2, y2 );\n\t\t_context.closePath();\n\n\t}\n\n\tfunction strokePath( color, linewidth, linecap, linejoin ) {\n\n\t\tsetLineWidth( linewidth );\n\t\tsetLineCap( linecap );\n\t\tsetLineJoin( linejoin );\n\t\tsetStrokeStyle( color.getStyle() );\n\n\t\t_context.stroke();\n\n\t\t_elemBox.expandByScalar( linewidth * 2 );\n\n\t}\n\n\tfunction fillPath( color ) {\n\n\t\tsetFillStyle( color.getStyle() );\n\t\t_context.fill();\n\n\t}\n\n\tfunction textureToPattern( texture ) {\n\n\t\tif ( texture.version === 0 ||\n\t\t\ttexture instanceof THREE.CompressedTexture ||\n\t\t\ttexture instanceof THREE.DataTexture ) {\n\n\t\t\treturn {\n\t\t\t\tcanvas: undefined,\n\t\t\t\tversion: texture.version\n\t\t\t};\n\n\t\t}\n\n\t\tvar image = texture.image;\n\n\t\tif ( image.complete === false ) {\n\n\t\t\treturn {\n\t\t\t\tcanvas: undefined,\n\t\t\t\tversion: 0\n\t\t\t};\n\n\t\t}\n\n\t\tvar canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = image.width;\n\t\tcanvas.height = image.height;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.setTransform( 1, 0, 0, - 1, 0, image.height );\n\t\tcontext.drawImage( image, 0, 0 );\n\n\t\tvar repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t\tvar repeatY = texture.wrapT === THREE.RepeatWrapping;\n\n\t\tvar repeat = 'no-repeat';\n\n\t\tif ( repeatX === true && repeatY === true ) {\n\n\t\t\trepeat = 'repeat';\n\n\t\t} else if ( repeatX === true ) {\n\n\t\t\trepeat = 'repeat-x';\n\n\t\t} else if ( repeatY === true ) {\n\n\t\t\trepeat = 'repeat-y';\n\n\t\t}\n\n\t\tvar pattern = _context.createPattern( canvas, repeat );\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\treturn {\n\t\t\tcanvas: pattern,\n\t\t\tversion: texture.version\n\t\t};\n\n\t}\n\n\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\n\n\t\tvar pattern = _patterns[ texture.id ];\n\n\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\tpattern = textureToPattern( texture );\n\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t}\n\n\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t} else {\n\n\t\t\tsetFillStyle( 'rgba( 0, 0, 0, 1)' );\n\t\t\t_context.fill();\n\t\t\treturn;\n\n\t\t}\n\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\tvar a, b, c, d, e, f, det, idet,\n\t\toffsetX = texture.offset.x / texture.repeat.x,\n\t\toffsetY = texture.offset.y / texture.repeat.y,\n\t\twidth = texture.image.width * texture.repeat.x,\n\t\theight = texture.image.height * texture.repeat.y;\n\n\t\tu0 = ( u0 + offsetX ) * width;\n\t\tv0 = ( v0 + offsetY ) * height;\n\n\t\tu1 = ( u1 + offsetX ) * width;\n\t\tv1 = ( v1 + offsetY ) * height;\n\n\t\tu2 = ( u2 + offsetX ) * width;\n\t\tv2 = ( v2 + offsetY ) * height;\n\n\t\tx1 -= x0; y1 -= y0;\n\t\tx2 -= x0; y2 -= y0;\n\n\t\tu1 -= u0; v1 -= v0;\n\t\tu2 -= u0; v2 -= v0;\n\n\t\tdet = u1 * v2 - u2 * v1;\n\n\t\tif ( det === 0 ) return;\n\n\t\tidet = 1 / det;\n\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\te = x0 - a * u0 - c * v0;\n\t\tf = y0 - b * u0 - d * v0;\n\n\t\t_context.save();\n\t\t_context.transform( a, b, c, d, e, f );\n\t\t_context.fill();\n\t\t_context.restore();\n\n\t}\n\n\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\n\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\tvar a, b, c, d, e, f, det, idet,\n\t\twidth = image.width - 1,\n\t\theight = image.height - 1;\n\n\t\tu0 *= width; v0 *= height;\n\t\tu1 *= width; v1 *= height;\n\t\tu2 *= width; v2 *= height;\n\n\t\tx1 -= x0; y1 -= y0;\n\t\tx2 -= x0; y2 -= y0;\n\n\t\tu1 -= u0; v1 -= v0;\n\t\tu2 -= u0; v2 -= v0;\n\n\t\tdet = u1 * v2 - u2 * v1;\n\n\t\tidet = 1 / det;\n\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\te = x0 - a * u0 - c * v0;\n\t\tf = y0 - b * u0 - d * v0;\n\n\t\t_context.save();\n\t\t_context.transform( a, b, c, d, e, f );\n\t\t_context.clip();\n\t\t_context.drawImage( image, 0, 0 );\n\t\t_context.restore();\n\n\t}\n\n\t// Hide anti-alias gaps\n\n\tfunction expand( v1, v2, pixels ) {\n\n\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\n\t\tdet = x * x + y * y, idet;\n\n\t\tif ( det === 0 ) return;\n\n\t\tidet = pixels / Math.sqrt( det );\n\n\t\tx *= idet; y *= idet;\n\n\t\tv2.x += x; v2.y += y;\n\t\tv1.x -= x; v1.y -= y;\n\n\t}\n\n\t// Context cached methods.\n\n\tfunction setOpacity( value ) {\n\n\t\tif ( _contextGlobalAlpha !== value ) {\n\n\t\t\t_context.globalAlpha = value;\n\t\t\t_contextGlobalAlpha = value;\n\n\t\t}\n\n\t}\n\n\tfunction setBlending( value ) {\n\n\t\tif ( _contextGlobalCompositeOperation !== value ) {\n\n\t\t\tif ( value === THREE.NormalBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'source-over';\n\n\t\t\t} else if ( value === THREE.AdditiveBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'lighter';\n\n\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'darker';\n\n\t\t\t} else if ( value === THREE.MultiplyBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'multiply';\n\n\t\t\t}\n\n\t\t\t_contextGlobalCompositeOperation = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineWidth( value ) {\n\n\t\tif ( _contextLineWidth !== value ) {\n\n\t\t\t_context.lineWidth = value;\n\t\t\t_contextLineWidth = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineCap( value ) {\n\n\t\t// \"butt\", \"round\", \"square\"\n\n\t\tif ( _contextLineCap !== value ) {\n\n\t\t\t_context.lineCap = value;\n\t\t\t_contextLineCap = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineJoin( value ) {\n\n\t\t// \"round\", \"bevel\", \"miter\"\n\n\t\tif ( _contextLineJoin !== value ) {\n\n\t\t\t_context.lineJoin = value;\n\t\t\t_contextLineJoin = value;\n\n\t\t}\n\n\t}\n\n\tfunction setStrokeStyle( value ) {\n\n\t\tif ( _contextStrokeStyle !== value ) {\n\n\t\t\t_context.strokeStyle = value;\n\t\t\t_contextStrokeStyle = value;\n\n\t\t}\n\n\t}\n\n\tfunction setFillStyle( value ) {\n\n\t\tif ( _contextFillStyle !== value ) {\n\n\t\t\t_context.fillStyle = value;\n\t\t\t_contextFillStyle = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineDash( value ) {\n\n\t\tif ( _contextLineDash.length !== value.length ) {\n\n\t\t\t_context.setLineDash( value );\n\t\t\t_contextLineDash = value;\n\n\t\t}\n\n\t}\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/CanvasRenderer.js\n ** module id = 26\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author julianwa / https://github.com/julianwa\n */\n\nTHREE.RenderableObject = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableFace = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\tthis.v3 = new THREE.RenderableVertex();\n\n\tthis.normalModel = new THREE.Vector3();\n\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\tthis.vertexNormalsLength = 0;\n\n\tthis.color = new THREE.Color();\n\tthis.material = null;\n\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableVertex = function () {\n\n\tthis.position = new THREE.Vector3();\n\tthis.positionWorld = new THREE.Vector3();\n\tthis.positionScreen = new THREE.Vector4();\n\n\tthis.visible = true;\n\n};\n\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\n\tthis.positionWorld.copy( vertex.positionWorld );\n\tthis.positionScreen.copy( vertex.positionScreen );\n\n};\n\n//\n\nTHREE.RenderableLine = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\n\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\tthis.material = null;\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableSprite = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\n\tthis.x = 0;\n\tthis.y = 0;\n\tthis.z = 0;\n\n\tthis.rotation = 0;\n\tthis.scale = new THREE.Vector2();\n\n\tthis.material = null;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.Projector = function () {\n\n\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\n\t_renderData = { objects: [], lights: [], elements: [] },\n\n\t_vector3 = new THREE.Vector3(),\n\t_vector4 = new THREE.Vector4(),\n\n\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t_boundingBox = new THREE.Box3(),\n\t_points3 = new Array( 3 ),\n\t_points4 = new Array( 4 ),\n\n\t_viewMatrix = new THREE.Matrix4(),\n\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t_modelMatrix,\n\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\n\t_normalMatrix = new THREE.Matrix3(),\n\n\t_frustum = new THREE.Frustum(),\n\n\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\n\t//\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function ( vector, camera ) {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n\t//\n\n\tvar RenderList = function () {\n\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar object = null;\n\t\tvar material = null;\n\n\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\tfunction setObject( value ) {\n\n\t\t\tobject = value;\n\t\t\tmaterial = object.material;\n\n\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\n\t\t\tnormals.length = 0;\n\t\t\tuvs.length = 0;\n\n\t\t}\n\n\t\tfunction projectVertex( vertex ) {\n\n\t\t\tvar position = vertex.position;\n\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\tvar positionScreen = vertex.positionScreen;\n\n\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n\t\t\tvar invW = 1 / positionScreen.w;\n\n\t\t\tpositionScreen.x *= invW;\n\t\t\tpositionScreen.y *= invW;\n\t\t\tpositionScreen.z *= invW;\n\n\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\n\t\t}\n\n\t\tfunction pushVertex( x, y, z ) {\n\n\t\t\t_vertex = getNextVertexInPool();\n\t\t\t_vertex.position.set( x, y, z );\n\n\t\t\tprojectVertex( _vertex );\n\n\t\t}\n\n\t\tfunction pushNormal( x, y, z ) {\n\n\t\t\tnormals.push( x, y, z );\n\n\t\t}\n\n\t\tfunction pushUv( x, y ) {\n\n\t\t\tuvs.push( x, y );\n\n\t\t}\n\n\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\n\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\n\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t_points3[ 2 ] = v3.positionScreen;\n\n\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\n\t\t}\n\n\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\n\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n\t\t}\n\n\t\tfunction pushLine( a, b ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\n\t\t\t_line = getNextLineInPool();\n\n\t\t\t_line.id = object.id;\n\t\t\t_line.v1.copy( v1 );\n\t\t\t_line.v2.copy( v2 );\n\t\t\t_line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;\n\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t_line.material = object.material;\n\n\t\t\t_renderData.elements.push( _line );\n\n\t\t}\n\n\t\tfunction pushTriangle( a, b, c ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\tvar v3 = _vertexPool[ c ];\n\n\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\n\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\n\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t_face.id = object.id;\n\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t// use first vertex normal as face normal\n\n\t\t\t\t_face.normalModel.fromArray( normals, a * 3 );\n\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\n\t\t\t\t}\n\n\t\t\t\t_face.vertexNormalsLength = 3;\n\n\t\t\t\t_face.material = object.material;\n\n\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetObject: setObject,\n\t\t\tprojectVertex: projectVertex,\n\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\tpushVertex: pushVertex,\n\t\t\tpushNormal: pushNormal,\n\t\t\tpushUv: pushUv,\n\t\t\tpushLine: pushLine,\n\t\t\tpushTriangle: pushTriangle\n\t\t}\n\n\t};\n\n\tvar renderList = new RenderList();\n\n\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n\t\t_faceCount = 0;\n\t\t_lineCount = 0;\n\t\t_spriteCount = 0;\n\n\t\t_renderData.elements.length = 0;\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\n\t\t//\n\n\t\t_objectCount = 0;\n\n\t\t_renderData.objects.length = 0;\n\t\t_renderData.lights.length = 0;\n\n\t\tfunction addObject( object ) {\n\n\t\t\t_object = getNextObjectInPool();\n\t\t\t_object.id = object.id;\n\t\t\t_object.object = object;\n\n\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\n\t\t\t_object.z = _vector3.z;\n\t\t\t_object.renderOrder = object.renderOrder;\n\n\t\t\t_renderData.objects.push( _object );\n\n\t\t}\n\n\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\t_renderData.lights.push( object );\n\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line ) {\n\n\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\n\n\t\t\t\taddObject( object );\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\n\n\t\t\t\taddObject( object );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( sortObjects === true ) {\n\n\t\t\t_renderData.objects.sort( painterSort );\n\n\t\t}\n\n\t\t//\n\n\t\tfor ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\n\n\t\t\tvar object = _renderData.objects[ o ].object;\n\t\t\tvar geometry = object.geometry;\n\n\t\t\trenderList.setObject( object );\n\n\t\t\t_modelMatrix = object.matrixWorld;\n\n\t\t\t_vertexCount = 0;\n\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\n\t\t\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( var o = 0; o < groups.length; o ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\n\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material : null;\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector3.copy( vertex );\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\n\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\n\t\t\t\t\t\tmaterial = isFaceMaterial === true\n\t\t\t\t\t\t\t ? objectMaterials.materials[ face.materialIndex ]\n\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\tvar side = material.side;\n\n\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\n\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\n\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\n\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\n\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t_face.v3.copy( v3 );\n\n\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\n\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t_face.normalModel.negate();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\n\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\n\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\tnormalModel.negate();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\n\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\n\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\n\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\n\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\n\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\n\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\n\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\n\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\n\t\t\t\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\n\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tvar invW = 1 / _vector4.w;\n\n\t\t\t\t_vector4.z *= invW;\n\n\t\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\n\t\t\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t\t\t_sprite.id = object.id;\n\t\t\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t\t\t_sprite.z = _vector4.z;\n\t\t\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t\t\t_sprite.object = object;\n\n\t\t\t\t\t_sprite.rotation = object.rotation;\n\n\t\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\n\t\t\t\t\t_sprite.material = object.material;\n\n\t\t\t\t\t_renderData.elements.push( _sprite );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( sortElements === true ) {\n\n\t\t\t_renderData.elements.sort( painterSort );\n\n\t\t}\n\n\t\treturn _renderData;\n\n\t};\n\n\t// Pools\n\n\tfunction getNextObjectInPool() {\n\n\t\tif ( _objectCount === _objectPoolLength ) {\n\n\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t_objectPool.push( object );\n\t\t\t_objectPoolLength ++;\n\t\t\t_objectCount ++;\n\t\t\treturn object;\n\n\t\t}\n\n\t\treturn _objectPool[ _objectCount ++ ];\n\n\t}\n\n\tfunction getNextVertexInPool() {\n\n\t\tif ( _vertexCount === _vertexPoolLength ) {\n\n\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t_vertexPool.push( vertex );\n\t\t\t_vertexPoolLength ++;\n\t\t\t_vertexCount ++;\n\t\t\treturn vertex;\n\n\t\t}\n\n\t\treturn _vertexPool[ _vertexCount ++ ];\n\n\t}\n\n\tfunction getNextFaceInPool() {\n\n\t\tif ( _faceCount === _facePoolLength ) {\n\n\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t_facePool.push( face );\n\t\t\t_facePoolLength ++;\n\t\t\t_faceCount ++;\n\t\t\treturn face;\n\n\t\t}\n\n\t\treturn _facePool[ _faceCount ++ ];\n\n\n\t}\n\n\tfunction getNextLineInPool() {\n\n\t\tif ( _lineCount === _linePoolLength ) {\n\n\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t_linePool.push( line );\n\t\t\t_linePoolLength ++;\n\t\t\t_lineCount ++;\n\t\t\treturn line;\n\n\t\t}\n\n\t\treturn _linePool[ _lineCount ++ ];\n\n\t}\n\n\tfunction getNextSpriteInPool() {\n\n\t\tif ( _spriteCount === _spritePoolLength ) {\n\n\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t_spritePool.push( sprite );\n\t\t\t_spritePoolLength ++;\n\t\t\t_spriteCount ++;\n\t\t\treturn sprite;\n\n\t\t}\n\n\t\treturn _spritePool[ _spriteCount ++ ];\n\n\t}\n\n\t//\n\n\tfunction painterSort( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else if ( a.id !== b.id ) {\n\n\t\t\treturn a.id - b.id;\n\n\t\t} else {\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t}\n\n\tfunction clipLine( s1, s2 ) {\n\n\t\tvar alpha1 = 0, alpha2 = 1,\n\n\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t// Z = -1 and Z = +1, respectively.\n\t\tbc1near =  s1.z + s1.w,\n\t\tbc2near =  s2.z + s2.w,\n\t\tbc1far =  - s1.z + s1.w,\n\t\tbc2far =  - s2.z + s2.w;\n\n\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\treturn true;\n\n\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\n\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\treturn false;\n\n\t\t} else {\n\n\t\t\t// The line segment spans at least one clip plane.\n\n\t\t\tif ( bc1near < 0 ) {\n\n\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t} else if ( bc2near < 0 ) {\n\n\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t}\n\n\t\t\tif ( bc1far < 0 ) {\n\n\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t} else if ( bc2far < 0 ) {\n\n\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t}\n\n\t\t\tif ( alpha2 < alpha1 ) {\n\n\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/Projector.js\n ** module id = 27\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author bchirls / http://bchirls.com/\n */\n\nTHREE.VRStereoEffect = function ( renderer, fullScreenElement, options ) {\n\n\t// internals\n\tvar self = this;\n\tvar width = 0, height = 0;\n\tvar hmdWidth, hmdHeight;\n\n\tvar hmdDevice;\n\tvar vrMode;\n    var inWebview = false;\n\tvar vrPreview = false;\n\tvar eyeOffsetLeft = new THREE.Vector3();\n\tvar eyeOffsetRight = new THREE.Vector3();\n\n\tvar position = new THREE.Vector3();\n\tvar quaternion = new THREE.Quaternion();\n\tvar scale = new THREE.Vector3();\n\n\tvar cameraLeft = new THREE.PerspectiveCamera();\n\tvar cameraRight = new THREE.PerspectiveCamera();\n\tvar leftRenderRect = {\n\t\tx: 0, y: 0, width: 0, height: 0\n\t};\n\tvar rightRenderRect = {\n\t\tx: 0, y: 0, width: 0, height: 0\n\t};\n\n\tvar near = 2;\n\tvar far = 40000;\n\n\tvar requestFullscreen;\n\tvar fullScreenParam = {\n\t\tvrDisplay: null\n\t};\n\tvar fovScale;\n\n\tvar RADIANS = Math.PI / 180;\n\n\tvar poll = options && options.poll || 1000;\n\tvar pollTimeout;\n\n\tfunction perspectiveMatrixFromVRFieldOfView(fov, zNear, zFar) {\n\t\tvar outMat = new THREE.Matrix4(),\n\t\t\tout = outMat.elements,\n\t\t\tupTan = Math.tan(fov.upDegrees * RADIANS),\n\t\t\tdownTan = Math.tan(fov.downDegrees * RADIANS),\n\t\t\tleftTan = Math.tan(fov.leftDegrees * RADIANS),\n\t\t\trightTan = Math.tan(fov.rightDegrees * RADIANS),\n\n\t\t\txScale = 2 / (leftTan + rightTan),\n\t\t\tyScale = 2 / (upTan + downTan);\n\n\t\tout[0] = xScale;\n\t\tout[4] = 0;\n\t\tout[8] = -((leftTan - rightTan) * xScale * 0.5);\n\t\tout[12] = 0;\n\n\t\tout[1] = 0;\n\t\tout[5] = yScale;\n\t\tout[9] = ((upTan - downTan) * yScale * 0.5);\n\t\tout[13] = 0;\n\n\t\tout[2] = 0;\n\t\tout[6] = 0;\n\t\tout[10] = zFar / (zNear - zFar);\n\t\tout[14] = (zFar * zNear) / (zNear - zFar);\n\n\t\tout[3] = 0;\n\t\tout[7] = 0;\n\t\tout[11] = -1;\n\t\tout[15] = 0;\n\n\t\treturn outMat;\n\t}\n\n\tfunction resize() {\n\t\tvar w, h;\n\n\t\tif (hmdDevice && vrMode) {\n\t\t\tw = hmdWidth;// / Math.pow(window.devicePixelRatio || 1, 2);\n\t\t\th = hmdHeight;// / Math.pow(window.devicePixelRatio || 1, 2);\n\t\t} else {\n\t\t\tw = width || renderer.domElement.offsetWidth || window.innerWidth;\n\t\t\th = height || renderer.domElement.offsetHeight || window.innerHeight;\n\t\t}\n\n\t\trenderer.setSize(w, h);\n\t}\n\n\tfunction updateProjection() {\n\t\tvar fovLeft,\n\t\t\tfovRight,\n\n\t\t\tleftEyeParams,\n\t\t\trightEyeParams,\n\t\t\tleftEyeRect,\n\t\t\trightEyeRect,\n\n\t\t\tleftEyeViewport,\n\t\t\trightEyeViewport;\n\n\t\tif (!hmdDevice) {\n\t\t\tcameraLeft.fov = 80;\n\t\t\tcameraRight.fov = 80;\n\t\t\treturn;\n\t\t}\n\n\t\t// if (amount && hmdDevice.setFieldOfView) {\n\t\t// \tfovScale += amount;\n\t\t// \tfovScale = Math.max(0.1, fovScale);\n\n\t\t// \tfovLeft = hmdDevice.getRecommendedEyeFieldOfView('left');\n\n\t\t// \tfovLeft.upDegrees *= fovScale;\n\t\t// \tfovLeft.downDegrees *= fovScale;\n\t\t// \tfovLeft.leftDegrees *= fovScale;\n\t\t// \tfovLeft.rightDegrees *= fovScale;\n\n\t\t// \tfovRight = hmdDevice.getRecommendedEyeFieldOfView('right');\n\t\t// \tfovRight.upDegrees *= fovScale;\n\t\t// \tfovRight.downDegrees *= fovScale;\n\t\t// \tfovRight.leftDegrees *= fovScale;\n\t\t// \tfovRight.rightDegrees *= fovScale;\n\n\t\t// \thmdDevice.setFieldOfView(fovLeft, fovRight);\n\t\t// }\n\n\t\tif (hmdDevice.getEyeParameters) {\n\t\t\tleftEyeParams = hmdDevice.getEyeParameters('left');\n\t\t\trightEyeParams = hmdDevice.getEyeParameters('right');\n\t\t\tleftEyeRect = leftEyeParams.renderRect;\n\t\t\trightEyeRect = rightEyeParams.renderRect;\n\n\t\t\thmdWidth = rightEyeRect.x + rightEyeRect.width;\n\t\t\thmdHeight = Math.max(leftEyeRect.y + leftEyeRect.height, rightEyeRect.y + rightEyeRect.height);\n\n\t\t\tfovLeft = leftEyeParams.currentFieldOfView;\n\t\t\tfovRight = rightEyeParams.currentFieldOfView;\n\n\t\t\thmdDevice.setFieldOfView(fovLeft, fovRight, near, far);\n\n\t\t\teyeOffsetLeft.copy(leftEyeParams.eyeTranslation);\n\t\t\teyeOffsetRight.copy(rightEyeParams.eyeTranslation);\n\n\t\t\tleftRenderRect = leftEyeParams.renderRect;\n\t\t\trightRenderRect = rightEyeParams.renderRect;\n\t\t} else if (hmdDevice.getRecommendedEyeRenderRect) {\n\t\t\tleftEyeViewport = hmdDevice.getRecommendedEyeRenderRect('left');\n\t\t\trightEyeViewport = hmdDevice.getRecommendedEyeRenderRect('right');\n\n\t\t\thmdWidth = leftEyeViewport.width + rightEyeViewport.width;\n\t\t\thmdHeight = Math.max(leftEyeViewport.height, rightEyeViewport.height);\n\n\t\t\tif (hmdDevice.getCurrentEyeFieldOfView) {\n\t\t\t\tfovLeft = hmdDevice.getCurrentEyeFieldOfView('left');\n\t\t\t\tfovRight = hmdDevice.getCurrentEyeFieldOfView('right');\n\t\t\t} else {\n\t\t\t\tfovLeft = hmdDevice.getRecommendedEyeFieldOfView('left');\n\t\t\t\tfovRight = hmdDevice.getRecommendedEyeFieldOfView('right');\n\t\t\t}\n\n\t\t\teyeOffsetLeft.copy(hmdDevice.getEyeTranslation('left'));\n\t\t\teyeOffsetRight.copy(hmdDevice.getEyeTranslation('right'));\n\n\t\t\tleftRenderRect.x = leftEyeViewport.left;\n\t\t\tleftRenderRect.y = leftEyeViewport.top;\n\t\t\tleftRenderRect.width = leftEyeViewport.width;\n\t\t\tleftRenderRect.height = leftEyeViewport.height;\n\n\t\t\trightRenderRect.x = rightEyeViewport.left;\n\t\t\trightRenderRect.y = rightEyeViewport.top;\n\t\t\trightRenderRect.width = rightEyeViewport.width;\n\t\t\trightRenderRect.height = rightEyeViewport.height;\n\t\t}\n\n\t\tresize();\n\n\t\tcameraLeft.projectionMatrix = perspectiveMatrixFromVRFieldOfView(fovLeft, near, far);\n\t\tcameraRight.projectionMatrix = perspectiveMatrixFromVRFieldOfView(fovRight, near, far);\n\t}\n\n\tfunction gotVRDevices(devices) {\n\t\tvar i,\n\t\t\tdevice;\n\n\t\tfor (i = 0; i < devices.length; i++) {\n\t\t\tdevice = devices[i];\n\t\t\tif ( device instanceof HMDVRDevice ) {\n\n\t\t\t\tif ( hmdDevice && device.hardwareUnitId === hmdDevice.hardwareUnitId ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thmdDevice = device;\n\t\t\t\tconsole.log('Using HMD Device:', hmdDevice.deviceName);\n\n\t\t\t\tif (hmdDevice.setTimewarp) {\n\t\t\t\t\t//hmdDevice.setTimewarp(false);\n\t\t\t\t}\n\n\t\t\t\tupdateProjection();\n\n\t\t\t\tfullScreenParam.vrDisplay = hmdDevice;\n\n\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t} );\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (poll) {\n\t\t\tclearTimeout(pollTimeout);\n\t\t\tsetTimeout(self.scan, poll);\n\t\t}\n\t}\n\n\tfunction onFullscreenChange() {\n\t\tif (!document.webkitFullscreenElement &&\n\t\t\t\t!document.mozFullScreenElement &&\n\t\t\t\t!document.msFullscreenElement) {\n\t\t\tvrMode = false;\n\t\t}\n\n\t\tupdateProjection();\n\n\t\tself.dispatchEvent( {\n\t\t\ttype: \"fullscreenchange\"\n\t\t} );\n\t}\n\n\t// API\n\n\tthis.separation = 0.01;\n\n\t// initialization\n\n\trenderer.autoClear = false;\n\n\tif (!fullScreenElement) {\n\t\tfullScreenElement = renderer.domElement;\n\t}\n\trequestFullscreen = fullScreenElement.webkitRequestFullscreen ||\n\t\tfullScreenElement.mozRequestFullScreen ||\n\t\tfullScreenElement.msRequestFullscreen;\n\tif (requestFullscreen) {\n\t\trequestFullscreen = requestFullscreen.bind(fullScreenElement, fullScreenParam);\n\t}\n\n\tdocument.addEventListener('fullscreenchange', onFullscreenChange, false);\n\tdocument.addEventListener('webkitfullscreenchange', onFullscreenChange, false);\n\tdocument.addEventListener('mozfullscreenchange', onFullscreenChange, false);\n\tdocument.addEventListener('MSFullscreenChange', onFullscreenChange, false);\n\n\t//todo: method for adjusting HMD FOV\n\n\tthis.scan = function () {\n\t\tif (navigator.getVRDevices) {\n\t\t\tnavigator.getVRDevices().then(gotVRDevices);\n\t\t} else if (navigator.mozGetVRDevices) {\n\t\t\tnavigator.mozGetVRDevices(gotVRDevices);\n\t\t}\n\t};\n\n\tthis.requestFullScreen = function () {\n\t\tvrMode = true;\n\t\trequestFullscreen();\n\t};\n\n\tthis.exit = function () {\n\t\tvrMode = false;\n\t\tvrPreview = false;\n\t};\n\n\tthis.setSize = function ( w, h ) {\n\t\twidth = w;\n\t\theight = h;\n\n\t\tresize();\n\t};\n\n\tthis.vrPreview = function (val) {\n\t\tif (val !== undefined) {\n\t\t\tvrPreview = !!val;\n\t\t}\n\t\treturn vrPreview;\n\t};\n\n\tthis.isFullscreen = function () {\n\t\treturn vrMode;\n\t};\n\n    // Add by kuilin.qkl\n    this.isWebview = function (bool) {\n        if (typeof bool === 'undefined') return inWebview;\n        inWebview = bool;\n        return inWebview;\n    };\n\n\tthis.hmd = function () {\n\t\treturn hmdDevice;\n\t};\n\n\tthis.render = function ( leftScene, rightScene, camera, renderTarget, forceClear ) {\n\t\tvar w, h;\n\n\t\tif ( rightScene && rightScene instanceof THREE.Scene ) {\n\t\t\t//rightScene.updateMatrixWorld();\n\t\t} else {\n\t\t\tif ( (!camera || camera instanceof THREE.WebGLRenderTarget) && rightScene instanceof THREE.Camera ) {\n\t\t\t\tforceClear = renderTarget;\n\t\t\t\trenderTarget = camera;\n\t\t\t\tcamera = rightScene;\n\t\t\t}\n\t\t\trightScene = leftScene;\n\t\t}\n\n\t\t//leftScene.updateMatrixWorld();\n\n\t\tif ( camera.parent === undefined ) {\n\t\t\tcamera.updateMatrixWorld();\n\t\t}\n\n\t\tw = width || renderer.domElement.width;\n\t\th = height || renderer.domElement.height;\n        // This code would not be annotated if mobile model.\n\t\tw /= window.devicePixelRatio || 1;\n\t\th /= window.devicePixelRatio || 1;\n\n\t\t/**\n\t\t *  TODO: make this work when CSS VR Rendering is fixed\n\t\t *  http://blog.bitops.com/blog/2014/08/20/updated-firefox-vr-builds/\n         *  Open by kuilin.qkl\n         */\n\t\tif (renderer instanceof THREE.CanvasRenderer) {\n\t\t\trenderer.render( leftScene, camera );\n\t\t\treturn;\n\t\t}\n\n\t\tif (!vrMode && !vrPreview) {\n\t\t\trenderer.enableScissorTest( false );\n\t\t\trenderer.setViewport( 0, 0, w, h );\n\t\t\trenderer.render( leftScene, camera, renderTarget, true );\n\t\t\treturn;\n\t\t}\n\n\t\tcamera.matrixWorld.decompose( position, quaternion, scale );\n\n\t\tif (!hmdDevice) {\n\t\t\t// left\n\t\t\tcameraLeft.fov = camera.fov;\n\t\t\tcameraLeft.aspect = 0.5 * camera.aspect;\n\t\t\tcameraLeft.near = camera.near;\n\t\t\tcameraLeft.far = camera.far;\n\t\t\tcameraLeft.updateProjectionMatrix();\n\n\t\t\t// right\n\n\t\t\tcameraRight.fov = camera.fov;\n\t\t\tcameraRight.aspect = 0.5 * camera.aspect;\n\t\t\tcameraRight.near = camera.near;\n\t\t\tcameraRight.far = camera.far;\n\t\t\tcameraRight.updateProjectionMatrix();\n\t\t}\n\n\t\tcameraLeft.position.copy( position );\n\t\tcameraLeft.quaternion.copy( quaternion );\n\n\t\tcameraRight.position.copy( position );\n\t\tcameraRight.quaternion.copy( quaternion );\n\n\t\tif (hmdDevice) {\n\t\t\tcameraLeft.position.add( eyeOffsetLeft ) ;\n\t\t\tcameraRight.position.add( eyeOffsetRight );\n\t\t} else {\n\t\t\tcameraLeft.translateX( - this.separation );\n\t\t\tcameraRight.translateX( this.separation );\n\t\t}\n\n\t\tcameraLeft.updateMatrixWorld();\n\t\tcameraRight.updateMatrixWorld();\n\n        // Bug fixed if device's Ratio > 1\n        w = renderer.context.drawingBufferWidth / ( 2 * window.devicePixelRatio );\n\n\t\tif (renderTarget) {\n\t\t\trenderer.setRenderTarget(renderTarget);\n\t\t}\n\n\t\trightScene.traverseVisible(function (obj) {\n\t\t\tif (obj.material && obj.material.map) {\n\t\t\t\tif (obj.userData.stereo === 'vertical') {\n\t\t\t\t\tobj.material.map.offset.set(0, 0.5);\n\t\t\t\t} else if (obj.userData.stereo) {\n\t\t\t\t\tobj.material.map.offset.set(0.5, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n        // Modify by kuilin.qkl\n        // Not use Fullscreen\n        if (inWebview) {\n            renderer.setScissor( 0, h >> 1, w * 2, h >> 1 );\n            renderer.setViewport( 0, h >> 1, w * 2, h >> 1 );\n        } else {\n            renderer.setScissor( w, 0, w, h );\n            renderer.setViewport( w, 0, w, h );\n        }\n\t\trenderer.render( rightScene, cameraRight, renderTarget, forceClear );\n\n\t\tleftScene.traverseVisible(function (obj) {\n\t\t\tif (obj.userData.stereo && obj.material && obj.material.map) {\n\t\t\t\tobj.material.map.offset.set(0, 0);\n\t\t\t}\n\t\t});\n        if (inWebview) {\n            renderer.setScissor( 0, 0, w * 2, h >> 1 );\n            renderer.setViewport( 0, 0, w * 2, h >> 1 );\n        } else {\n            renderer.setScissor( 0, 0, w, h );\n            renderer.setViewport( 0, 0, w, h );\n        }\n\t\trenderer.render( leftScene, cameraLeft, renderTarget, forceClear );\n\n\t\t//reset viewport, scissor\n\t\tw *= 2;\n        renderer.setViewport( 0, 0, w, h );\n        renderer.setScissor( 0, 0, w, h );\n\t\trenderer.enableScissorTest( false );\n\t};\n\n\tObject.defineProperty(this, 'near', {\n\t\tget: function () {\n\t\t\treturn near;\n\t\t},\n\t\tset: function (val) {\n\t\t\tval = parseFloat(val);\n\t\t\tif (val && !isNaN(val)) {\n\t\t\t\tnear = Math.max(0, val);\n\t\t\t\tupdateProjection();\n\t\t\t}\n\t\t}\n\t});\n\n\tObject.defineProperty(this, 'far', {\n\t\tget: function () {\n\t\t\treturn far;\n\t\t},\n\t\tset: function (val) {\n\t\t\tval = parseFloat(val);\n\t\t\tif (val && !isNaN(val)) {\n\t\t\t\tfar = Math.max(0, val);\n\t\t\t\tupdateProjection();\n\t\t\t}\n\t\t}\n\t});\n\n\tthis.scan();\n\tresize();\n};\n\nTHREE.VRStereoEffect.prototype = Object.create( THREE.EventDispatcher.prototype );\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/VRStereoEffect.js\n ** module id = 28\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\nTHREE.VRControls = function ( object, options ) {\n\n\tvar self = this;\n\n\t//HMD sensor stuff\n\tvar sensorDevice;\n\tvar vrState;\n\n\t//device orientation stuff\n\tvar deviceControls;\n\tvar zeroAngle = 0;\n\n\tvar mode = '';\n\n\tvar vrBrowser = navigator.getVRDevices || navigator.mozGetVRDevices;\n\n\tvar poll = options && options.poll || 1000;\n\tvar pollTimeout;\n\n\tfunction gotVRDevices( devices ) {\n\t\tvar i,\n\t\t\tdevice;\n\n\t\tfor ( i = 0; i < devices.length; ++i ) {\n\t\t\tdevice = devices[i];\n\t\t\tif ( devices[i] instanceof PositionSensorVRDevice ) {\n\n\t\t\t\tif ( sensorDevice && devices[i].hardwareUnitId === sensorDevice.hardwareUnitId ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tsensorDevice = device;\n\t\t\t\tconsole.log('Using Sensor Device:', sensorDevice.deviceName);\n\n\t\t\t\tif ( sensorDevice.zeroSensor ) {\n\t\t\t\t\tself.zeroSensor = sensorDevice.zeroSensor.bind(sensorDevice);\n\t\t\t\t} else if ( sensorDevice.resetSensor ) {\n\t\t\t\t\tself.zeroSensor = sensorDevice.resetSensor.bind(sensorDevice);\n\t\t\t\t}\n\t\t\t\tself.zeroSensor();\n\n\t\t\t\tmode = 'hmd';\n\n\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t} );\n\n\t\t\t\tbreak; // We keep the first we encounter\n\t\t\t}\n\t\t}\n\n\t\tif (poll) {\n\t\t\tclearTimeout(pollTimeout);\n\t\t\tsetTimeout(self.scan, poll);\n\t\t}\n\t}\n\n\tfunction deviceOrientationChange( event ) {\n\t\tif ( typeof event.gamma === 'number' ) {\n\t\t\tmode = 'deviceorientation';\n\t\t\twindow.removeEventListener( 'deviceorientation', deviceOrientationChange, false );\n\t\t\tdeviceControls = new THREE.DeviceOrientationControls( object );\n\t\t\tdeviceControls.connect();\n\t\t\tif (!this.freeze) {\n\t\t\t\tdeviceControls.update();\n\t\t\t}\n\n\t\t\tself.dispatchEvent( {\n\t\t\t\ttype: \"devicechange\"\n\t\t\t} );\n\t\t}\n\t}\n\n\tthis.update = function() {\n\t\t// Applies head rotation from sensor data.\n\t\tif (self.freeze) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( sensorDevice ) {\n\t\t\tvrState = sensorDevice.getState();\n\t\t\tif ( vrState ) {\n\t\t\t\tif ( vrState.orientation && vrState.hasOrientation !== false ) {\n\t\t\t\t\tobject.quaternion.copy( vrState.orientation );\n\t\t\t\t}\n\n\t\t\t\tif ( vrState.position && vrState.hasPosition !== false ) {\n\t\t\t\t\t// vrState.position is null if using DK1 or if DK2 camera is not plugged in\n\t\t\t\t\tobject.position.copy( vrState.position );\n\t\t\t\t}\n\n\t\t\t\tobject.updateMatrixWorld();\n\t\t\t}\n\t\t} else if (deviceControls && deviceControls.deviceOrientation.gamma !== undefined) {\n\t\t\tdeviceControls.update();\n\t\t\tobject.rotateY(-zeroAngle);\n\t\t\tobject.updateMatrixWorld();\n\t\t}\n\t};\n\n\t//only useful when frozen\n\tthis.reset = function () {\n\t\tif ( object ) {\n\t\t\tobject.quaternion.set( 0, 0, 0, 1 );\n\t\t\tobject.position.set( 0, 0, 0 );\n\t\t}\n\t};\n\n\t//zeros only rotation on Y axis\n\t//todo: find out if it zeros out position. need a DK2 to test\n\tthis.zeroSensor = function () {\n\t\tif (sensorDevice && sensorDevice.zeroSensor) {\n\t\t\tsensorDevice.zeroSensor();\n\t\t}\n\t\tzeroAngle = object.rotation.y;\n\t\tself.update();\n\t};\n\n\tthis.freeze = false;\n\n\t//method to query which tech we're using\n\tthis.mode = function () {\n\t\treturn mode;\n\t};\n\n\tthis.scan = function () {\n\t\tif ( navigator.getVRDevices ) {\n\t\t\tnavigator.getVRDevices().then( gotVRDevices );\n\t\t} else if ( navigator.mozGetVRDevices ) {\n\t\t\tnavigator.mozGetVRDevices( gotVRDevices );\n\t\t}\n\t};\n\n\t//todo: connect/disconnect methods\n\t//todo: method to query orientation/position without changing object\n\t//todo: work without an object\n\n\tif ( vrBrowser ) {\n\t\tthis.scan();\n\t} else if ( \"DeviceOrientationEvent\" in window && THREE.DeviceOrientationControls) {\n\t\t//device orientation\n\t\twindow.addEventListener( \"deviceorientation\", deviceOrientationChange, false );\n\t}\n};\n\nTHREE.VRControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/VRControls.js\n ** module id = 29\n ** module chunks = 0\n **/","'use strict';\n\nvar d        = require('d')\n  , callable = require('es5-ext/object/valid-callable')\n\n  , apply = Function.prototype.apply, call = Function.prototype.call\n  , create = Object.create, defineProperty = Object.defineProperty\n  , defineProperties = Object.defineProperties\n  , hasOwnProperty = Object.prototype.hasOwnProperty\n  , descriptor = { configurable: true, enumerable: false, writable: true }\n\n  , on, once, off, emit, methods, descriptors, base;\n\non = function (type, listener) {\n\tvar data;\n\n\tcallable(listener);\n\n\tif (!hasOwnProperty.call(this, '__ee__')) {\n\t\tdata = descriptor.value = create(null);\n\t\tdefineProperty(this, '__ee__', descriptor);\n\t\tdescriptor.value = null;\n\t} else {\n\t\tdata = this.__ee__;\n\t}\n\tif (!data[type]) data[type] = listener;\n\telse if (typeof data[type] === 'object') data[type].push(listener);\n\telse data[type] = [data[type], listener];\n\n\treturn this;\n};\n\nonce = function (type, listener) {\n\tvar once, self;\n\n\tcallable(listener);\n\tself = this;\n\ton.call(this, type, once = function () {\n\t\toff.call(self, type, once);\n\t\tapply.call(listener, this, arguments);\n\t});\n\n\tonce.__eeOnceListener__ = listener;\n\treturn this;\n};\n\noff = function (type, listener) {\n\tvar data, listeners, candidate, i;\n\n\tcallable(listener);\n\n\tif (!hasOwnProperty.call(this, '__ee__')) return this;\n\tdata = this.__ee__;\n\tif (!data[type]) return this;\n\tlisteners = data[type];\n\n\tif (typeof listeners === 'object') {\n\t\tfor (i = 0; (candidate = listeners[i]); ++i) {\n\t\t\tif ((candidate === listener) ||\n\t\t\t\t\t(candidate.__eeOnceListener__ === listener)) {\n\t\t\t\tif (listeners.length === 2) data[type] = listeners[i ? 0 : 1];\n\t\t\t\telse listeners.splice(i, 1);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ((listeners === listener) ||\n\t\t\t\t(listeners.__eeOnceListener__ === listener)) {\n\t\t\tdelete data[type];\n\t\t}\n\t}\n\n\treturn this;\n};\n\nemit = function (type) {\n\tvar i, l, listener, listeners, args;\n\n\tif (!hasOwnProperty.call(this, '__ee__')) return;\n\tlisteners = this.__ee__[type];\n\tif (!listeners) return;\n\n\tif (typeof listeners === 'object') {\n\t\tl = arguments.length;\n\t\targs = new Array(l - 1);\n\t\tfor (i = 1; i < l; ++i) args[i - 1] = arguments[i];\n\n\t\tlisteners = listeners.slice();\n\t\tfor (i = 0; (listener = listeners[i]); ++i) {\n\t\t\tapply.call(listener, this, args);\n\t\t}\n\t} else {\n\t\tswitch (arguments.length) {\n\t\tcase 1:\n\t\t\tcall.call(listeners, this);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcall.call(listeners, this, arguments[1]);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcall.call(listeners, this, arguments[1], arguments[2]);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tl = arguments.length;\n\t\t\targs = new Array(l - 1);\n\t\t\tfor (i = 1; i < l; ++i) {\n\t\t\t\targs[i - 1] = arguments[i];\n\t\t\t}\n\t\t\tapply.call(listeners, this, args);\n\t\t}\n\t}\n};\n\nmethods = {\n\ton: on,\n\tonce: once,\n\toff: off,\n\temit: emit\n};\n\ndescriptors = {\n\ton: d(on),\n\tonce: d(once),\n\toff: d(off),\n\temit: d(emit)\n};\n\nbase = defineProperties({}, descriptors);\n\nmodule.exports = exports = function (o) {\n\treturn (o == null) ? create(base) : defineProperties(Object(o), descriptors);\n};\nexports.methods = methods;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/index.js\n ** module id = 30\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader/lib/css-base.js\n ** module id = 31\n ** module chunks = 0\n **/","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (factory((global.THREE = global.THREE || {})));\n}(this, (function (exports) { 'use strict';\n\n    // Polyfills\n\n    if ( Number.EPSILON === undefined ) {\n\n    \tNumber.EPSILON = Math.pow( 2, - 52 );\n\n    }\n\n    //\n\n    if ( Math.sign === undefined ) {\n\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n    \tMath.sign = function ( x ) {\n\n    \t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n    \t};\n\n    }\n\n    if ( Function.prototype.name === undefined ) {\n\n    \t// Missing in IE9-11.\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n    \tObject.defineProperty( Function.prototype, 'name', {\n\n    \t\tget: function () {\n\n    \t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\n    \t\t}\n\n    \t} );\n\n    }\n\n    if ( Object.assign === undefined ) {\n\n    \t// Missing in IE.\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n    \t( function () {\n\n    \t\tObject.assign = function ( target ) {\n\n    \t\t\t'use strict';\n\n    \t\t\tif ( target === undefined || target === null ) {\n\n    \t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n    \t\t\t}\n\n    \t\t\tvar output = Object( target );\n\n    \t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n    \t\t\t\tvar source = arguments[ index ];\n\n    \t\t\t\tif ( source !== undefined && source !== null ) {\n\n    \t\t\t\t\tfor ( var nextKey in source ) {\n\n    \t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n    \t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn output;\n\n    \t\t};\n\n    \t} )();\n\n    }\n\n    /**\n     * https://github.com/mrdoob/eventdispatcher.js/\n     */\n\n    function EventDispatcher() {}\n\n    Object.assign( EventDispatcher.prototype, {\n\n    \taddEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) this._listeners = {};\n\n    \t\tvar listeners = this._listeners;\n\n    \t\tif ( listeners[ type ] === undefined ) {\n\n    \t\t\tlisteners[ type ] = [];\n\n    \t\t}\n\n    \t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n    \t\t\tlisteners[ type ].push( listener );\n\n    \t\t}\n\n    \t},\n\n    \thasEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) return false;\n\n    \t\tvar listeners = this._listeners;\n\n    \t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tremoveEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) return;\n\n    \t\tvar listeners = this._listeners;\n    \t\tvar listenerArray = listeners[ type ];\n\n    \t\tif ( listenerArray !== undefined ) {\n\n    \t\t\tvar index = listenerArray.indexOf( listener );\n\n    \t\t\tif ( index !== - 1 ) {\n\n    \t\t\t\tlistenerArray.splice( index, 1 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tdispatchEvent: function ( event ) {\n\n    \t\tif ( this._listeners === undefined ) return;\n\n    \t\tvar listeners = this._listeners;\n    \t\tvar listenerArray = listeners[ event.type ];\n\n    \t\tif ( listenerArray !== undefined ) {\n\n    \t\t\tevent.target = this;\n\n    \t\t\tvar array = [], i = 0;\n    \t\t\tvar length = listenerArray.length;\n\n    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\n    \t\t\t\tarray[ i ] = listenerArray[ i ];\n\n    \t\t\t}\n\n    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\n    \t\t\t\tarray[ i ].call( this, event );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    var REVISION = '81';\n    var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n    var CullFaceNone = 0;\n    var CullFaceBack = 1;\n    var CullFaceFront = 2;\n    var CullFaceFrontBack = 3;\n    var FrontFaceDirectionCW = 0;\n    var FrontFaceDirectionCCW = 1;\n    var BasicShadowMap = 0;\n    var PCFShadowMap = 1;\n    var PCFSoftShadowMap = 2;\n    var FrontSide = 0;\n    var BackSide = 1;\n    var DoubleSide = 2;\n    var FlatShading = 1;\n    var SmoothShading = 2;\n    var NoColors = 0;\n    var FaceColors = 1;\n    var VertexColors = 2;\n    var NoBlending = 0;\n    var NormalBlending = 1;\n    var AdditiveBlending = 2;\n    var SubtractiveBlending = 3;\n    var MultiplyBlending = 4;\n    var CustomBlending = 5;\n    var BlendingMode = {\n        NoBlending: NoBlending,\n        NormalBlending: NormalBlending,\n        AdditiveBlending: AdditiveBlending,\n        SubtractiveBlending: SubtractiveBlending,\n        MultiplyBlending: MultiplyBlending,\n        CustomBlending: CustomBlending\n    };\n    var AddEquation = 100;\n    var SubtractEquation = 101;\n    var ReverseSubtractEquation = 102;\n    var MinEquation = 103;\n    var MaxEquation = 104;\n    var ZeroFactor = 200;\n    var OneFactor = 201;\n    var SrcColorFactor = 202;\n    var OneMinusSrcColorFactor = 203;\n    var SrcAlphaFactor = 204;\n    var OneMinusSrcAlphaFactor = 205;\n    var DstAlphaFactor = 206;\n    var OneMinusDstAlphaFactor = 207;\n    var DstColorFactor = 208;\n    var OneMinusDstColorFactor = 209;\n    var SrcAlphaSaturateFactor = 210;\n    var NeverDepth = 0;\n    var AlwaysDepth = 1;\n    var LessDepth = 2;\n    var LessEqualDepth = 3;\n    var EqualDepth = 4;\n    var GreaterEqualDepth = 5;\n    var GreaterDepth = 6;\n    var NotEqualDepth = 7;\n    var MultiplyOperation = 0;\n    var MixOperation = 1;\n    var AddOperation = 2;\n    var NoToneMapping = 0;\n    var LinearToneMapping = 1;\n    var ReinhardToneMapping = 2;\n    var Uncharted2ToneMapping = 3;\n    var CineonToneMapping = 4;\n    var UVMapping = 300;\n    var CubeReflectionMapping = 301;\n    var CubeRefractionMapping = 302;\n    var EquirectangularReflectionMapping = 303;\n    var EquirectangularRefractionMapping = 304;\n    var SphericalReflectionMapping = 305;\n    var CubeUVReflectionMapping = 306;\n    var CubeUVRefractionMapping = 307;\n    var TextureMapping = {\n        UVMapping: UVMapping,\n        CubeReflectionMapping: CubeReflectionMapping,\n        CubeRefractionMapping: CubeRefractionMapping,\n        EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n        EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n        SphericalReflectionMapping: SphericalReflectionMapping,\n        CubeUVReflectionMapping: CubeUVReflectionMapping,\n        CubeUVRefractionMapping: CubeUVRefractionMapping\n    };\n    var RepeatWrapping = 1000;\n    var ClampToEdgeWrapping = 1001;\n    var MirroredRepeatWrapping = 1002;\n    var TextureWrapping = {\n        RepeatWrapping: RepeatWrapping,\n        ClampToEdgeWrapping: ClampToEdgeWrapping,\n        MirroredRepeatWrapping: MirroredRepeatWrapping\n    };\n    var NearestFilter = 1003;\n    var NearestMipMapNearestFilter = 1004;\n    var NearestMipMapLinearFilter = 1005;\n    var LinearFilter = 1006;\n    var LinearMipMapNearestFilter = 1007;\n    var LinearMipMapLinearFilter = 1008;\n    var TextureFilter = {\n        NearestFilter: NearestFilter,\n        NearestMipMapNearestFilter: NearestMipMapNearestFilter,\n        NearestMipMapLinearFilter: NearestMipMapLinearFilter,\n        LinearFilter: LinearFilter,\n        LinearMipMapNearestFilter: LinearMipMapNearestFilter,\n        LinearMipMapLinearFilter: LinearMipMapLinearFilter\n    };\n    var UnsignedByteType = 1009;\n    var ByteType = 1010;\n    var ShortType = 1011;\n    var UnsignedShortType = 1012;\n    var IntType = 1013;\n    var UnsignedIntType = 1014;\n    var FloatType = 1015;\n    var HalfFloatType = 1016;\n    var UnsignedShort4444Type = 1017;\n    var UnsignedShort5551Type = 1018;\n    var UnsignedShort565Type = 1019;\n    var UnsignedInt248Type = 1020;\n    var AlphaFormat = 1021;\n    var RGBFormat = 1022;\n    var RGBAFormat = 1023;\n    var LuminanceFormat = 1024;\n    var LuminanceAlphaFormat = 1025;\n    var RGBEFormat = RGBAFormat;\n    var DepthFormat = 1026;\n    var DepthStencilFormat = 1027;\n    var RGB_S3TC_DXT1_Format = 2001;\n    var RGBA_S3TC_DXT1_Format = 2002;\n    var RGBA_S3TC_DXT3_Format = 2003;\n    var RGBA_S3TC_DXT5_Format = 2004;\n    var RGB_PVRTC_4BPPV1_Format = 2100;\n    var RGB_PVRTC_2BPPV1_Format = 2101;\n    var RGBA_PVRTC_4BPPV1_Format = 2102;\n    var RGBA_PVRTC_2BPPV1_Format = 2103;\n    var RGB_ETC1_Format = 2151;\n    var LoopOnce = 2200;\n    var LoopRepeat = 2201;\n    var LoopPingPong = 2202;\n    var InterpolateDiscrete = 2300;\n    var InterpolateLinear = 2301;\n    var InterpolateSmooth = 2302;\n    var ZeroCurvatureEnding = 2400;\n    var ZeroSlopeEnding = 2401;\n    var WrapAroundEnding = 2402;\n    var TrianglesDrawMode = 0;\n    var TriangleStripDrawMode = 1;\n    var TriangleFanDrawMode = 2;\n    var LinearEncoding = 3000;\n    var sRGBEncoding = 3001;\n    var GammaEncoding = 3007;\n    var RGBEEncoding = 3002;\n    var LogLuvEncoding = 3003;\n    var RGBM7Encoding = 3004;\n    var RGBM16Encoding = 3005;\n    var RGBDEncoding = 3006;\n    var BasicDepthPacking = 3200;\n    var RGBADepthPacking = 3201;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    exports.Math = {\n\n    \tDEG2RAD: Math.PI / 180,\n    \tRAD2DEG: 180 / Math.PI,\n\n    \tgenerateUUID: function () {\n\n    \t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n    \t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n    \t\tvar uuid = new Array( 36 );\n    \t\tvar rnd = 0, r;\n\n    \t\treturn function generateUUID() {\n\n    \t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n    \t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n    \t\t\t\t\tuuid[ i ] = '-';\n\n    \t\t\t\t} else if ( i === 14 ) {\n\n    \t\t\t\t\tuuid[ i ] = '4';\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n    \t\t\t\t\tr = rnd & 0xf;\n    \t\t\t\t\trnd = rnd >> 4;\n    \t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn uuid.join( '' );\n\n    \t\t};\n\n    \t}(),\n\n    \tclamp: function ( value, min, max ) {\n\n    \t\treturn Math.max( min, Math.min( max, value ) );\n\n    \t},\n\n    \t// compute euclidian modulo of m % n\n    \t// https://en.wikipedia.org/wiki/Modulo_operation\n\n    \teuclideanModulo: function ( n, m ) {\n\n    \t\treturn ( ( n % m ) + m ) % m;\n\n    \t},\n\n    \t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n    \tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n    \t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n    \t},\n\n    \t// http://en.wikipedia.org/wiki/Smoothstep\n\n    \tsmoothstep: function ( x, min, max ) {\n\n    \t\tif ( x <= min ) return 0;\n    \t\tif ( x >= max ) return 1;\n\n    \t\tx = ( x - min ) / ( max - min );\n\n    \t\treturn x * x * ( 3 - 2 * x );\n\n    \t},\n\n    \tsmootherstep: function ( x, min, max ) {\n\n    \t\tif ( x <= min ) return 0;\n    \t\tif ( x >= max ) return 1;\n\n    \t\tx = ( x - min ) / ( max - min );\n\n    \t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n    \t},\n\n    \trandom16: function () {\n\n    \t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n    \t\treturn Math.random();\n\n    \t},\n\n    \t// Random integer from <low, high> interval\n\n    \trandInt: function ( low, high ) {\n\n    \t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n    \t},\n\n    \t// Random float from <low, high> interval\n\n    \trandFloat: function ( low, high ) {\n\n    \t\treturn low + Math.random() * ( high - low );\n\n    \t},\n\n    \t// Random float from <-range/2, range/2> interval\n\n    \trandFloatSpread: function ( range ) {\n\n    \t\treturn range * ( 0.5 - Math.random() );\n\n    \t},\n\n    \tdegToRad: function ( degrees ) {\n\n    \t\treturn degrees * exports.Math.DEG2RAD;\n\n    \t},\n\n    \tradToDeg: function ( radians ) {\n\n    \t\treturn radians * exports.Math.RAD2DEG;\n\n    \t},\n\n    \tisPowerOfTwo: function ( value ) {\n\n    \t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n    \t},\n\n    \tnearestPowerOfTwo: function ( value ) {\n\n    \t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\n    \t},\n\n    \tnextPowerOfTwo: function ( value ) {\n\n    \t\tvalue --;\n    \t\tvalue |= value >> 1;\n    \t\tvalue |= value >> 2;\n    \t\tvalue |= value >> 4;\n    \t\tvalue |= value >> 8;\n    \t\tvalue |= value >> 16;\n    \t\tvalue ++;\n\n    \t\treturn value;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author philogb / http://blog.thejit.org/\n     * @author egraether / http://egraether.com/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    function Vector2( x, y ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n\n    }\n\n    Vector2.prototype = {\n\n    \tconstructor: Vector2,\n\n    \tisVector2: true,\n\n    \tget width() {\n\n    \t\treturn this.x;\n\n    \t},\n\n    \tset width( value ) {\n\n    \t\tthis.x = value;\n\n    \t},\n\n    \tget height() {\n\n    \t\treturn this.y;\n\n    \t},\n\n    \tset height( value ) {\n\n    \t\tthis.y = value;\n\n    \t},\n\n    \t//\n\n    \tset: function ( x, y ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( v ) {\n\n    \t\tthis.x *= v.x;\n    \t\tthis.y *= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivide: function ( v ) {\n\n    \t\tthis.x /= v.x;\n    \t\tthis.y /= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector2();\n    \t\t\t\tmax = new Vector2();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tclampLength: function ( min, max ) {\n\n    \t\tvar length = this.length();\n\n    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n    \t},\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n    \t},\n\n    \tlengthManhattan: function() {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tangle: function () {\n\n    \t\t// computes the angle in radians with respect to the positive x-axis\n\n    \t\tvar angle = Math.atan2( this.y, this.x );\n\n    \t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n    \t\treturn angle;\n\n    \t},\n\n    \tdistanceTo: function ( v ) {\n\n    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n    \t},\n\n    \tdistanceToSquared: function ( v ) {\n\n    \t\tvar dx = this.x - v.x, dy = this.y - v.y;\n    \t\treturn dx * dx + dy * dy;\n\n    \t},\n\n    \tdistanceToManhattan: function ( v ) {\n\n    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateAround: function ( center, angle ) {\n\n    \t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n    \t\tvar x = this.x - center.x;\n    \t\tvar y = this.y - center.y;\n\n    \t\tthis.x = x * c - y * s + center.x;\n    \t\tthis.y = x * s + y * c + center.y;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author szimek / https://github.com/szimek/\n     */\n\n    function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n    \tObject.defineProperty( this, 'id', { value: TextureIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.sourceFile = '';\n\n    \tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n    \tthis.mipmaps = [];\n\n    \tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n    \tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n    \tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n    \tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n    \tthis.format = format !== undefined ? format : RGBAFormat;\n    \tthis.type = type !== undefined ? type : UnsignedByteType;\n\n    \tthis.offset = new Vector2( 0, 0 );\n    \tthis.repeat = new Vector2( 1, 1 );\n\n    \tthis.generateMipmaps = true;\n    \tthis.premultiplyAlpha = false;\n    \tthis.flipY = true;\n    \tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\n    \t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n    \t//\n    \t// Also changing the encoding after already used by a Material will not automatically make the Material\n    \t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n    \tthis.encoding = encoding !== undefined ? encoding :  LinearEncoding;\n\n    \tthis.version = 0;\n    \tthis.onUpdate = null;\n\n    }\n\n    Texture.DEFAULT_IMAGE = undefined;\n    Texture.DEFAULT_MAPPING = UVMapping;\n\n    Texture.prototype = {\n\n    \tconstructor: Texture,\n\n    \tisTexture: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.image = source.image;\n    \t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n    \t\tthis.mapping = source.mapping;\n\n    \t\tthis.wrapS = source.wrapS;\n    \t\tthis.wrapT = source.wrapT;\n\n    \t\tthis.magFilter = source.magFilter;\n    \t\tthis.minFilter = source.minFilter;\n\n    \t\tthis.anisotropy = source.anisotropy;\n\n    \t\tthis.format = source.format;\n    \t\tthis.type = source.type;\n\n    \t\tthis.offset.copy( source.offset );\n    \t\tthis.repeat.copy( source.repeat );\n\n    \t\tthis.generateMipmaps = source.generateMipmaps;\n    \t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n    \t\tthis.flipY = source.flipY;\n    \t\tthis.unpackAlignment = source.unpackAlignment;\n    \t\tthis.encoding = source.encoding;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\n    \t\t\treturn meta.textures[ this.uuid ];\n\n    \t\t}\n\n    \t\tfunction getDataURL( image ) {\n\n    \t\t\tvar canvas;\n\n    \t\t\tif ( image.toDataURL !== undefined ) {\n\n    \t\t\t\tcanvas = image;\n\n    \t\t\t} else {\n\n    \t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\t\tcanvas.width = image.width;\n    \t\t\t\tcanvas.height = image.height;\n\n    \t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\n    \t\t\t}\n\n    \t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n    \t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n    \t\t\t} else {\n\n    \t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar output = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Texture',\n    \t\t\t\tgenerator: 'Texture.toJSON'\n    \t\t\t},\n\n    \t\t\tuuid: this.uuid,\n    \t\t\tname: this.name,\n\n    \t\t\tmapping: this.mapping,\n\n    \t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n    \t\t\toffset: [ this.offset.x, this.offset.y ],\n    \t\t\twrap: [ this.wrapS, this.wrapT ],\n\n    \t\t\tminFilter: this.minFilter,\n    \t\t\tmagFilter: this.magFilter,\n    \t\t\tanisotropy: this.anisotropy,\n\n    \t\t\tflipY: this.flipY\n    \t\t};\n\n    \t\tif ( this.image !== undefined ) {\n\n    \t\t\t// TODO: Move to THREE.Image\n\n    \t\t\tvar image = this.image;\n\n    \t\t\tif ( image.uuid === undefined ) {\n\n    \t\t\t\timage.uuid = exports.Math.generateUUID(); // UGH\n\n    \t\t\t}\n\n    \t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.images[ image.uuid ] = {\n    \t\t\t\t\tuuid: image.uuid,\n    \t\t\t\t\turl: getDataURL( image )\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t\toutput.image = image.uuid;\n\n    \t\t}\n\n    \t\tmeta.textures[ this.uuid ] = output;\n\n    \t\treturn output;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t},\n\n    \ttransformUv: function ( uv ) {\n\n    \t\tif ( this.mapping !== UVMapping )  return;\n\n    \t\tuv.multiply( this.repeat );\n    \t\tuv.add( this.offset );\n\n    \t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n    \t\t\tswitch ( this.wrapS ) {\n\n    \t\t\t\tcase RepeatWrapping:\n\n    \t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase ClampToEdgeWrapping:\n\n    \t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase MirroredRepeatWrapping:\n\n    \t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n    \t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n    \t\t\t\t\t}\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n    \t\t\tswitch ( this.wrapT ) {\n\n    \t\t\t\tcase RepeatWrapping:\n\n    \t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase ClampToEdgeWrapping:\n\n    \t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase MirroredRepeatWrapping:\n\n    \t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n    \t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n    \t\t\t\t\t}\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.flipY ) {\n\n    \t\t\tuv.y = 1 - uv.y;\n\n    \t\t}\n\n    \t}\n\n    };\n\n    Object.assign( Texture.prototype, EventDispatcher.prototype );\n\n    var count = 0;\n    function TextureIdCount() { return count++; };\n\n    /**\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author philogb / http://blog.thejit.org/\n     * @author mikael emtinger / http://gomo.se/\n     * @author egraether / http://egraether.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Vector4( x, y, z, w ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n    \tthis.z = z || 0;\n    \tthis.w = ( w !== undefined ) ? w : 1;\n\n    }\n\n    Vector4.prototype = {\n\n    \tconstructor: Vector4,\n\n    \tisVector4: true,\n\n    \tset: function ( x, y, z, w ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n    \t\tthis.z = z;\n    \t\tthis.w = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n    \t\tthis.z = scalar;\n    \t\tthis.w = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( z ) {\n\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetW: function ( w ) {\n\n    \t\tthis.w = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tcase 2: this.z = value; break;\n    \t\t\tcase 3: this.w = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tcase 2: return this.z;\n    \t\t\tcase 3: return this.w;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n    \t\tthis.z = v.z;\n    \t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n    \t\tthis.z += v.z;\n    \t\tthis.w += v.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n    \t\tthis.z += s;\n    \t\tthis.w += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n    \t\tthis.z = a.z + b.z;\n    \t\tthis.w = a.w + b.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n    \t\tthis.z += v.z * s;\n    \t\tthis.w += v.w * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n    \t\tthis.z -= v.z;\n    \t\tthis.w -= v.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n    \t\tthis.z -= s;\n    \t\tthis.w -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n    \t\tthis.z = a.z - b.z;\n    \t\tthis.w = a.w - b.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n    \t\t\tthis.z *= scalar;\n    \t\t\tthis.w *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n    \t\t\tthis.z = 0;\n    \t\t\tthis.w = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function ( m ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n    \t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tsetAxisAngleFromQuaternion: function ( q ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n    \t\t// q is assumed to be normalized\n\n    \t\tthis.w = 2 * Math.acos( q.w );\n\n    \t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n    \t\tif ( s < 0.0001 ) {\n\n    \t\t\t this.x = 1;\n    \t\t\t this.y = 0;\n    \t\t\t this.z = 0;\n\n    \t\t} else {\n\n    \t\t\t this.x = q.x / s;\n    \t\t\t this.y = q.y / s;\n    \t\t\t this.z = q.z / s;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar angle, x, y, z,\t\t// variables for result\n    \t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n    \t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n    \t\t\tte = m.elements,\n\n    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n    \t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n    \t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n    \t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n    \t\t\t// singularity found\n    \t\t\t// first check for identity matrix which must have +1 for all terms\n    \t\t\t// in leading diagonal and zero in other terms\n\n    \t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n    \t\t\t\t// this singularity is identity matrix so angle = 0\n\n    \t\t\t\tthis.set( 1, 0, 0, 0 );\n\n    \t\t\t\treturn this; // zero angle, arbitrary axis\n\n    \t\t\t}\n\n    \t\t\t// otherwise this singularity is angle = 180\n\n    \t\t\tangle = Math.PI;\n\n    \t\t\tvar xx = ( m11 + 1 ) / 2;\n    \t\t\tvar yy = ( m22 + 1 ) / 2;\n    \t\t\tvar zz = ( m33 + 1 ) / 2;\n    \t\t\tvar xy = ( m12 + m21 ) / 4;\n    \t\t\tvar xz = ( m13 + m31 ) / 4;\n    \t\t\tvar yz = ( m23 + m32 ) / 4;\n\n    \t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n    \t\t\t\t// m11 is the largest diagonal term\n\n    \t\t\t\tif ( xx < epsilon ) {\n\n    \t\t\t\t\tx = 0;\n    \t\t\t\t\ty = 0.707106781;\n    \t\t\t\t\tz = 0.707106781;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tx = Math.sqrt( xx );\n    \t\t\t\t\ty = xy / x;\n    \t\t\t\t\tz = xz / x;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( yy > zz ) {\n\n    \t\t\t\t// m22 is the largest diagonal term\n\n    \t\t\t\tif ( yy < epsilon ) {\n\n    \t\t\t\t\tx = 0.707106781;\n    \t\t\t\t\ty = 0;\n    \t\t\t\t\tz = 0.707106781;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ty = Math.sqrt( yy );\n    \t\t\t\t\tx = xy / y;\n    \t\t\t\t\tz = yz / y;\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// m33 is the largest diagonal term so base result on this\n\n    \t\t\t\tif ( zz < epsilon ) {\n\n    \t\t\t\t\tx = 0.707106781;\n    \t\t\t\t\ty = 0.707106781;\n    \t\t\t\t\tz = 0;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tz = Math.sqrt( zz );\n    \t\t\t\t\tx = xz / z;\n    \t\t\t\t\ty = yz / z;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.set( x, y, z, angle );\n\n    \t\t\treturn this; // return 180 deg rotation\n\n    \t\t}\n\n    \t\t// as we have reached here there are no singularities so we can handle normally\n\n    \t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n    \t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n    \t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n    \t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n    \t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n    \t\t// caught by singularity test above, but I've left it in just in case\n\n    \t\tthis.x = ( m32 - m23 ) / s;\n    \t\tthis.y = ( m13 - m31 ) / s;\n    \t\tthis.z = ( m21 - m12 ) / s;\n    \t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n    \t\tthis.z = Math.min( this.z, v.z );\n    \t\tthis.w = Math.min( this.w, v.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n    \t\tthis.z = Math.max( this.z, v.z );\n    \t\tthis.w = Math.max( this.w, v.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n    \t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector4();\n    \t\t\t\tmax = new Vector4();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal, minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n    \t\tthis.z = Math.floor( this.z );\n    \t\tthis.w = Math.floor( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n    \t\tthis.z = Math.ceil( this.z );\n    \t\tthis.w = Math.ceil( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n    \t\tthis.z = Math.round( this.z );\n    \t\tthis.w = Math.round( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n    \t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n    \t\tthis.z = - this.z;\n    \t\tthis.w = - this.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n    \t},\n\n    \tlengthManhattan: function () {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n    \t\tthis.z += ( v.z - this.z ) * alpha;\n    \t\tthis.w += ( v.w - this.w ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n    \t\tthis.z = array[ offset + 2 ];\n    \t\tthis.w = array[ offset + 3 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n    \t\tarray[ offset + 2 ] = this.z;\n    \t\tarray[ offset + 3 ] = this.w;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n    \t\tthis.z = attribute.array[ index + 2 ];\n    \t\tthis.w = attribute.array[ index + 3 ];\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author szimek / https://github.com/szimek/\n     * @author alteredq / http://alteredqualia.com/\n     * @author Marius Kintel / https://github.com/kintel\n     */\n\n    /*\n     In options, we can specify:\n     * Texture parameters for an auto-generated target texture\n     * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n    */\n    function WebGLRenderTarget( width, height, options ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.width = width;\n    \tthis.height = height;\n\n    \tthis.scissor = new Vector4( 0, 0, width, height );\n    \tthis.scissorTest = false;\n\n    \tthis.viewport = new Vector4( 0, 0, width, height );\n\n    \toptions = options || {};\n\n    \tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\n    \tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n    \tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n    \tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n    \tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n    }\n\n    Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {\n\n    \tisWebGLRenderTarget: true,\n\n    \tsetSize: function ( width, height ) {\n\n    \t\tif ( this.width !== width || this.height !== height ) {\n\n    \t\t\tthis.width = width;\n    \t\t\tthis.height = height;\n\n    \t\t\tthis.dispose();\n\n    \t\t}\n\n    \t\tthis.viewport.set( 0, 0, width, height );\n    \t\tthis.scissor.set( 0, 0, width, height );\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.width = source.width;\n    \t\tthis.height = source.height;\n\n    \t\tthis.viewport.copy( source.viewport );\n\n    \t\tthis.texture = source.texture.clone();\n\n    \t\tthis.depthBuffer = source.depthBuffer;\n    \t\tthis.stencilBuffer = source.stencilBuffer;\n    \t\tthis.depthTexture = source.depthTexture;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com\n     */\n\n    function WebGLRenderTargetCube( width, height, options ) {\n\n    \tWebGLRenderTarget.call( this, width, height, options );\n\n    \tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n    \tthis.activeMipMapLevel = 0;\n\n    }\n\n    WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n    WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\n    WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     */\n\n    function Quaternion( x, y, z, w ) {\n\n    \tthis._x = x || 0;\n    \tthis._y = y || 0;\n    \tthis._z = z || 0;\n    \tthis._w = ( w !== undefined ) ? w : 1;\n\n    }\n\n    Quaternion.prototype = {\n\n    \tconstructor: Quaternion,\n\n    \tget x () {\n\n    \t\treturn this._x;\n\n    \t},\n\n    \tset x ( value ) {\n\n    \t\tthis._x = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget y () {\n\n    \t\treturn this._y;\n\n    \t},\n\n    \tset y ( value ) {\n\n    \t\tthis._y = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget z () {\n\n    \t\treturn this._z;\n\n    \t},\n\n    \tset z ( value ) {\n\n    \t\tthis._z = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget w () {\n\n    \t\treturn this._w;\n\n    \t},\n\n    \tset w ( value ) {\n\n    \t\tthis._w = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tset: function ( x, y, z, w ) {\n\n    \t\tthis._x = x;\n    \t\tthis._y = y;\n    \t\tthis._z = z;\n    \t\tthis._w = w;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n    \t},\n\n    \tcopy: function ( quaternion ) {\n\n    \t\tthis._x = quaternion.x;\n    \t\tthis._y = quaternion.y;\n    \t\tthis._z = quaternion.z;\n    \t\tthis._w = quaternion.w;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromEuler: function ( euler, update ) {\n\n    \t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n    \t\t}\n\n    \t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n    \t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    \t\t//\tcontent/SpinCalc.m\n\n    \t\tvar c1 = Math.cos( euler._x / 2 );\n    \t\tvar c2 = Math.cos( euler._y / 2 );\n    \t\tvar c3 = Math.cos( euler._z / 2 );\n    \t\tvar s1 = Math.sin( euler._x / 2 );\n    \t\tvar s2 = Math.sin( euler._y / 2 );\n    \t\tvar s3 = Math.sin( euler._z / 2 );\n\n    \t\tvar order = euler.order;\n\n    \t\tif ( order === 'XYZ' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'YXZ' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t} else if ( order === 'ZXY' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'ZYX' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t} else if ( order === 'YZX' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'XZY' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t}\n\n    \t\tif ( update !== false ) this.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromAxisAngle: function ( axis, angle ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n    \t\t// assumes axis is normalized\n\n    \t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n    \t\tthis._x = axis.x * s;\n    \t\tthis._y = axis.y * s;\n    \t\tthis._z = axis.z * s;\n    \t\tthis._w = Math.cos( halfAngle );\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromRotationMatrix: function ( m ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar te = m.elements,\n\n    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n    \t\t\ttrace = m11 + m22 + m33,\n    \t\t\ts;\n\n    \t\tif ( trace > 0 ) {\n\n    \t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n    \t\t\tthis._w = 0.25 / s;\n    \t\t\tthis._x = ( m32 - m23 ) * s;\n    \t\t\tthis._y = ( m13 - m31 ) * s;\n    \t\t\tthis._z = ( m21 - m12 ) * s;\n\n    \t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n    \t\t\tthis._w = ( m32 - m23 ) / s;\n    \t\t\tthis._x = 0.25 * s;\n    \t\t\tthis._y = ( m12 + m21 ) / s;\n    \t\t\tthis._z = ( m13 + m31 ) / s;\n\n    \t\t} else if ( m22 > m33 ) {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n    \t\t\tthis._w = ( m13 - m31 ) / s;\n    \t\t\tthis._x = ( m12 + m21 ) / s;\n    \t\t\tthis._y = 0.25 * s;\n    \t\t\tthis._z = ( m23 + m32 ) / s;\n\n    \t\t} else {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n    \t\t\tthis._w = ( m21 - m12 ) / s;\n    \t\t\tthis._x = ( m13 + m31 ) / s;\n    \t\t\tthis._y = ( m23 + m32 ) / s;\n    \t\t\tthis._z = 0.25 * s;\n\n    \t\t}\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromUnitVectors: function () {\n\n    \t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\n    \t\t// assumes direction vectors vFrom and vTo are normalized\n\n    \t\tvar v1, r;\n\n    \t\tvar EPS = 0.000001;\n\n    \t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tr = vFrom.dot( vTo ) + 1;\n\n    \t\t\tif ( r < EPS ) {\n\n    \t\t\t\tr = 0;\n\n    \t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n    \t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tv1.crossVectors( vFrom, vTo );\n\n    \t\t\t}\n\n    \t\t\tthis._x = v1.x;\n    \t\t\tthis._y = v1.y;\n    \t\t\tthis._z = v1.z;\n    \t\t\tthis._w = r;\n\n    \t\t\treturn this.normalize();\n\n    \t\t};\n\n    \t}(),\n\n    \tinverse: function () {\n\n    \t\treturn this.conjugate().normalize();\n\n    \t},\n\n    \tconjugate: function () {\n\n    \t\tthis._x *= - 1;\n    \t\tthis._y *= - 1;\n    \t\tthis._z *= - 1;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\tvar l = this.length();\n\n    \t\tif ( l === 0 ) {\n\n    \t\t\tthis._x = 0;\n    \t\t\tthis._y = 0;\n    \t\t\tthis._z = 0;\n    \t\t\tthis._w = 1;\n\n    \t\t} else {\n\n    \t\t\tl = 1 / l;\n\n    \t\t\tthis._x = this._x * l;\n    \t\t\tthis._y = this._y * l;\n    \t\t\tthis._z = this._z * l;\n    \t\t\tthis._w = this._w * l;\n\n    \t\t}\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( q, p ) {\n\n    \t\tif ( p !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n    \t\t\treturn this.multiplyQuaternions( q, p );\n\n    \t\t}\n\n    \t\treturn this.multiplyQuaternions( this, q );\n\n    \t},\n\n    \tpremultiply: function ( q ) {\n\n    \t\treturn this.multiplyQuaternions( q, this );\n\n    \t},\n\n    \tmultiplyQuaternions: function ( a, b ) {\n\n    \t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n    \t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n    \t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n    \t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    \t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    \t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    \t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tslerp: function ( qb, t ) {\n\n    \t\tif ( t === 0 ) return this;\n    \t\tif ( t === 1 ) return this.copy( qb );\n\n    \t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n    \t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    \t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n    \t\tif ( cosHalfTheta < 0 ) {\n\n    \t\t\tthis._w = - qb._w;\n    \t\t\tthis._x = - qb._x;\n    \t\t\tthis._y = - qb._y;\n    \t\t\tthis._z = - qb._z;\n\n    \t\t\tcosHalfTheta = - cosHalfTheta;\n\n    \t\t} else {\n\n    \t\t\tthis.copy( qb );\n\n    \t\t}\n\n    \t\tif ( cosHalfTheta >= 1.0 ) {\n\n    \t\t\tthis._w = w;\n    \t\t\tthis._x = x;\n    \t\t\tthis._y = y;\n    \t\t\tthis._z = z;\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n    \t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n    \t\t\tthis._w = 0.5 * ( w + this._w );\n    \t\t\tthis._x = 0.5 * ( x + this._x );\n    \t\t\tthis._y = 0.5 * ( y + this._y );\n    \t\t\tthis._z = 0.5 * ( z + this._z );\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n    \t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n    \t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n    \t\tthis._w = ( w * ratioA + this._w * ratioB );\n    \t\tthis._x = ( x * ratioA + this._x * ratioB );\n    \t\tthis._y = ( y * ratioA + this._y * ratioB );\n    \t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( quaternion ) {\n\n    \t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis._x = array[ offset ];\n    \t\tthis._y = array[ offset + 1 ];\n    \t\tthis._z = array[ offset + 2 ];\n    \t\tthis._w = array[ offset + 3 ];\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this._x;\n    \t\tarray[ offset + 1 ] = this._y;\n    \t\tarray[ offset + 2 ] = this._z;\n    \t\tarray[ offset + 3 ] = this._w;\n\n    \t\treturn array;\n\n    \t},\n\n    \tonChange: function ( callback ) {\n\n    \t\tthis.onChangeCallback = callback;\n\n    \t\treturn this;\n\n    \t},\n\n    \tonChangeCallback: function () {}\n\n    };\n\n    Object.assign( Quaternion, {\n\n    \tslerp: function( qa, qb, qm, t ) {\n\n    \t\treturn qm.copy( qa ).slerp( qb, t );\n\n    \t},\n\n    \tslerpFlat: function(\n    \t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n    \t\t// fuzz-free, array-based Quaternion SLERP operation\n\n    \t\tvar x0 = src0[ srcOffset0 + 0 ],\n    \t\t\ty0 = src0[ srcOffset0 + 1 ],\n    \t\t\tz0 = src0[ srcOffset0 + 2 ],\n    \t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n    \t\t\tx1 = src1[ srcOffset1 + 0 ],\n    \t\t\ty1 = src1[ srcOffset1 + 1 ],\n    \t\t\tz1 = src1[ srcOffset1 + 2 ],\n    \t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n    \t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n    \t\t\tvar s = 1 - t,\n\n    \t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n    \t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n    \t\t\t\tsqrSin = 1 - cos * cos;\n\n    \t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n    \t\t\tif ( sqrSin > Number.EPSILON ) {\n\n    \t\t\t\tvar sin = Math.sqrt( sqrSin ),\n    \t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n    \t\t\t\ts = Math.sin( s * len ) / sin;\n    \t\t\t\tt = Math.sin( t * len ) / sin;\n\n    \t\t\t}\n\n    \t\t\tvar tDir = t * dir;\n\n    \t\t\tx0 = x0 * s + x1 * tDir;\n    \t\t\ty0 = y0 * s + y1 * tDir;\n    \t\t\tz0 = z0 * s + z1 * tDir;\n    \t\t\tw0 = w0 * s + w1 * tDir;\n\n    \t\t\t// Normalize in case we just did a lerp:\n    \t\t\tif ( s === 1 - t ) {\n\n    \t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n    \t\t\t\tx0 *= f;\n    \t\t\t\ty0 *= f;\n    \t\t\t\tz0 *= f;\n    \t\t\t\tw0 *= f;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tdst[ dstOffset ] = x0;\n    \t\tdst[ dstOffset + 1 ] = y0;\n    \t\tdst[ dstOffset + 2 ] = z0;\n    \t\tdst[ dstOffset + 3 ] = w0;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author *kile / http://kile.stravaganza.org/\n     * @author philogb / http://blog.thejit.org/\n     * @author mikael emtinger / http://gomo.se/\n     * @author egraether / http://egraether.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Vector3( x, y, z ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n    \tthis.z = z || 0;\n\n    }\n\n    Vector3.prototype = {\n\n    \tconstructor: Vector3,\n\n    \tisVector3: true,\n\n    \tset: function ( x, y, z ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n    \t\tthis.z = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( z ) {\n\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tcase 2: this.z = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tcase 2: return this.z;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y, this.z );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n    \t\tthis.z = v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n    \t\tthis.z += v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n    \t\tthis.z += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n    \t\tthis.z = a.z + b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n    \t\tthis.z += v.z * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n    \t\tthis.z -= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n    \t\tthis.z -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n    \t\tthis.z = a.z - b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n    \t\t\treturn this.multiplyVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x *= v.x;\n    \t\tthis.y *= v.y;\n    \t\tthis.z *= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n    \t\t\tthis.z *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n    \t\t\tthis.z = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x * b.x;\n    \t\tthis.y = a.y * b.y;\n    \t\tthis.z = a.z * b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyEuler: function () {\n\n    \t\tvar quaternion;\n\n    \t\treturn function applyEuler( euler ) {\n\n    \t\t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n    \t\t\t}\n\n    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\n    \t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyAxisAngle: function () {\n\n    \t\tvar quaternion;\n\n    \t\treturn function applyAxisAngle( axis, angle ) {\n\n    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\n    \t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyMatrix3: function ( m ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n    \t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n    \t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 affine matrix\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyProjection: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 projection matrix\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n    \t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\n    \t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n    \t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n    \t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyQuaternion: function ( q ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n    \t\t// calculate quat * vector\n\n    \t\tvar ix =  qw * x + qy * z - qz * y;\n    \t\tvar iy =  qw * y + qz * x - qx * z;\n    \t\tvar iz =  qw * z + qx * y - qy * x;\n    \t\tvar iw = - qx * x - qy * y - qz * z;\n\n    \t\t// calculate result * inverse quat\n\n    \t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n    \t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n    \t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n    \t\treturn this;\n\n    \t},\n\n    \tproject: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function project( camera ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n    \t\t\treturn this.applyProjection( matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tunproject: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function unproject( camera ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n    \t\t\treturn this.applyProjection( matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \ttransformDirection: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 affine matrix\n    \t\t// vector interpreted as a direction\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n    \t\treturn this.normalize();\n\n    \t},\n\n    \tdivide: function ( v ) {\n\n    \t\tthis.x /= v.x;\n    \t\tthis.y /= v.y;\n    \t\tthis.z /= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n    \t\tthis.z = Math.min( this.z, v.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n    \t\tthis.z = Math.max( this.z, v.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector3();\n    \t\t\t\tmax = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tclampLength: function ( min, max ) {\n\n    \t\tvar length = this.length();\n\n    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n    \t},\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n    \t\tthis.z = Math.floor( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n    \t\tthis.z = Math.ceil( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n    \t\tthis.z = Math.round( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n    \t\tthis.z = - this.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n    \t},\n\n    \tlengthManhattan: function () {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n    \t\tthis.z += ( v.z - this.z ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tcross: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n    \t\t\treturn this.crossVectors( v, w );\n\n    \t\t}\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n\n    \t\tthis.x = y * v.z - z * v.y;\n    \t\tthis.y = z * v.x - x * v.z;\n    \t\tthis.z = x * v.y - y * v.x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcrossVectors: function ( a, b ) {\n\n    \t\tvar ax = a.x, ay = a.y, az = a.z;\n    \t\tvar bx = b.x, by = b.y, bz = b.z;\n\n    \t\tthis.x = ay * bz - az * by;\n    \t\tthis.y = az * bx - ax * bz;\n    \t\tthis.z = ax * by - ay * bx;\n\n    \t\treturn this;\n\n    \t},\n\n    \tprojectOnVector: function ( vector ) {\n\n    \t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n    \t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n    \t},\n\n    \tprojectOnPlane: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function projectOnPlane( planeNormal ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n    \t\t\treturn this.sub( v1 );\n\n    \t\t};\n\n    \t}(),\n\n    \treflect: function () {\n\n    \t\t// reflect incident vector off plane orthogonal to normal\n    \t\t// normal is assumed to have unit length\n\n    \t\tvar v1;\n\n    \t\treturn function reflect( normal ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tangleTo: function ( v ) {\n\n    \t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n    \t\t// clamp, to handle numerical problems\n\n    \t\treturn Math.acos( exports.Math.clamp( theta, - 1, 1 ) );\n\n    \t},\n\n    \tdistanceTo: function ( v ) {\n\n    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n    \t},\n\n    \tdistanceToSquared: function ( v ) {\n\n    \t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n    \t\treturn dx * dx + dy * dy + dz * dz;\n\n    \t},\n\n    \tdistanceToManhattan: function ( v ) {\n\n    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n    \t},\n\n    \tsetFromSpherical: function( s ) {\n\n    \t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n    \t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n    \t\tthis.y = Math.cos( s.phi ) * s.radius;\n    \t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrixPosition: function ( m ) {\n\n    \t\treturn this.setFromMatrixColumn( m, 3 );\n\n    \t},\n\n    \tsetFromMatrixScale: function ( m ) {\n\n    \t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n    \t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n    \t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n    \t\tthis.x = sx;\n    \t\tthis.y = sy;\n    \t\tthis.z = sz;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrixColumn: function ( m, index ) {\n\n    \t\tif ( typeof m === 'number' ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n    \t\t\tvar temp = m\n    \t\t\tm = index;\n    \t\t\tindex = temp;\n\n    \t\t}\n\n    \t\treturn this.fromArray( m.elements, index * 4 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n    \t\tthis.z = array[ offset + 2 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n    \t\tarray[ offset + 2 ] = this.z;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n    \t\tthis.z = attribute.array[ index + 2 ];\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author philogb / http://blog.thejit.org/\n     * @author jordi_ros / http://plattsoft.com\n     * @author D1plo1d / http://github.com/D1plo1d\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author timknip / http://www.floorplanner.com/\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Matrix4() {\n\n    \tthis.elements = new Float32Array( [\n\n    \t\t1, 0, 0, 0,\n    \t\t0, 1, 0, 0,\n    \t\t0, 0, 1, 0,\n    \t\t0, 0, 0, 1\n\n    \t] );\n\n    \tif ( arguments.length > 0 ) {\n\n    \t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n    \t}\n\n    }\n\n    Matrix4.prototype = {\n\n    \tconstructor: Matrix4,\n\n    \tisMatrix4: true,\n\n    \tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n    \t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n    \t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n    \t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n    \t\treturn this;\n\n    \t},\n\n    \tidentity: function () {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0, 0,\n    \t\t\t0, 1, 0, 0,\n    \t\t\t0, 0, 1, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new Matrix4().fromArray( this.elements );\n\n    \t},\n\n    \tcopy: function ( m ) {\n\n    \t\tthis.elements.set( m.elements );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyPosition: function ( m ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar me = m.elements;\n\n    \t\tte[ 12 ] = me[ 12 ];\n    \t\tte[ 13 ] = me[ 13 ];\n    \t\tte[ 14 ] = me[ 14 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n    \t\txAxis.setFromMatrixColumn( this, 0 );\n    \t\tyAxis.setFromMatrixColumn( this, 1 );\n    \t\tzAxis.setFromMatrixColumn( this, 2 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n    \t\tthis.set(\n    \t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n    \t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n    \t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n    \t\t\t0,       0,       0,       1\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \textractRotation: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function extractRotation( m ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tvar te = this.elements;\n    \t\t\tvar me = m.elements;\n\n    \t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n    \t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n    \t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n    \t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n    \t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n    \t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n    \t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n    \t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n    \t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n    \t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n    \t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n    \t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmakeRotationFromEuler: function ( euler ) {\n\n    \t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n    \t\t}\n\n    \t\tvar te = this.elements;\n\n    \t\tvar x = euler.x, y = euler.y, z = euler.z;\n    \t\tvar a = Math.cos( x ), b = Math.sin( x );\n    \t\tvar c = Math.cos( y ), d = Math.sin( y );\n    \t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n    \t\tif ( euler.order === 'XYZ' ) {\n\n    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = - c * f;\n    \t\t\tte[ 8 ] = d;\n\n    \t\t\tte[ 1 ] = af + be * d;\n    \t\t\tte[ 5 ] = ae - bf * d;\n    \t\t\tte[ 9 ] = - b * c;\n\n    \t\t\tte[ 2 ] = bf - ae * d;\n    \t\t\tte[ 6 ] = be + af * d;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'YXZ' ) {\n\n    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n    \t\t\tte[ 0 ] = ce + df * b;\n    \t\t\tte[ 4 ] = de * b - cf;\n    \t\t\tte[ 8 ] = a * d;\n\n    \t\t\tte[ 1 ] = a * f;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = - b;\n\n    \t\t\tte[ 2 ] = cf * b - de;\n    \t\t\tte[ 6 ] = df + ce * b;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'ZXY' ) {\n\n    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n    \t\t\tte[ 0 ] = ce - df * b;\n    \t\t\tte[ 4 ] = - a * f;\n    \t\t\tte[ 8 ] = de + cf * b;\n\n    \t\t\tte[ 1 ] = cf + de * b;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = df - ce * b;\n\n    \t\t\tte[ 2 ] = - a * d;\n    \t\t\tte[ 6 ] = b;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'ZYX' ) {\n\n    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = be * d - af;\n    \t\t\tte[ 8 ] = ae * d + bf;\n\n    \t\t\tte[ 1 ] = c * f;\n    \t\t\tte[ 5 ] = bf * d + ae;\n    \t\t\tte[ 9 ] = af * d - be;\n\n    \t\t\tte[ 2 ] = - d;\n    \t\t\tte[ 6 ] = b * c;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'YZX' ) {\n\n    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = bd - ac * f;\n    \t\t\tte[ 8 ] = bc * f + ad;\n\n    \t\t\tte[ 1 ] = f;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = - b * e;\n\n    \t\t\tte[ 2 ] = - d * e;\n    \t\t\tte[ 6 ] = ad * f + bc;\n    \t\t\tte[ 10 ] = ac - bd * f;\n\n    \t\t} else if ( euler.order === 'XZY' ) {\n\n    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = - f;\n    \t\t\tte[ 8 ] = d * e;\n\n    \t\t\tte[ 1 ] = ac * f + bd;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = ad * f - bc;\n\n    \t\t\tte[ 2 ] = bc * f - ad;\n    \t\t\tte[ 6 ] = b * e;\n    \t\t\tte[ 10 ] = bd * f + ac;\n\n    \t\t}\n\n    \t\t// last column\n    \t\tte[ 3 ] = 0;\n    \t\tte[ 7 ] = 0;\n    \t\tte[ 11 ] = 0;\n\n    \t\t// bottom row\n    \t\tte[ 12 ] = 0;\n    \t\tte[ 13 ] = 0;\n    \t\tte[ 14 ] = 0;\n    \t\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationFromQuaternion: function ( q ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n    \t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n    \t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n    \t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n    \t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n    \t\tte[ 0 ] = 1 - ( yy + zz );\n    \t\tte[ 4 ] = xy - wz;\n    \t\tte[ 8 ] = xz + wy;\n\n    \t\tte[ 1 ] = xy + wz;\n    \t\tte[ 5 ] = 1 - ( xx + zz );\n    \t\tte[ 9 ] = yz - wx;\n\n    \t\tte[ 2 ] = xz - wy;\n    \t\tte[ 6 ] = yz + wx;\n    \t\tte[ 10 ] = 1 - ( xx + yy );\n\n    \t\t// last column\n    \t\tte[ 3 ] = 0;\n    \t\tte[ 7 ] = 0;\n    \t\tte[ 11 ] = 0;\n\n    \t\t// bottom row\n    \t\tte[ 12 ] = 0;\n    \t\tte[ 13 ] = 0;\n    \t\tte[ 14 ] = 0;\n    \t\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlookAt: function () {\n\n    \t\tvar x, y, z;\n\n    \t\treturn function lookAt( eye, target, up ) {\n\n    \t\t\tif ( x === undefined ) {\n\n    \t\t\t\tx = new Vector3();\n    \t\t\t\ty = new Vector3();\n    \t\t\t\tz = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tvar te = this.elements;\n\n    \t\t\tz.subVectors( eye, target ).normalize();\n\n    \t\t\tif ( z.lengthSq() === 0 ) {\n\n    \t\t\t\tz.z = 1;\n\n    \t\t\t}\n\n    \t\t\tx.crossVectors( up, z ).normalize();\n\n    \t\t\tif ( x.lengthSq() === 0 ) {\n\n    \t\t\t\tz.z += 0.0001;\n    \t\t\t\tx.crossVectors( up, z ).normalize();\n\n    \t\t\t}\n\n    \t\t\ty.crossVectors( z, x );\n\n\n    \t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n    \t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n    \t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmultiply: function ( m, n ) {\n\n    \t\tif ( n !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n    \t\t\treturn this.multiplyMatrices( m, n );\n\n    \t\t}\n\n    \t\treturn this.multiplyMatrices( this, m );\n\n    \t},\n\n    \tpremultiply: function ( m ) {\n\n    \t\treturn this.multiplyMatrices( m, this );\n\n    \t},\n\n    \tmultiplyMatrices: function ( a, b ) {\n\n    \t\tvar ae = a.elements;\n    \t\tvar be = b.elements;\n    \t\tvar te = this.elements;\n\n    \t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n    \t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n    \t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n    \t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n    \t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n    \t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n    \t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n    \t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n    \t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n    \t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n    \t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n    \t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n    \t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n    \t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n    \t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n    \t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n    \t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n    \t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n    \t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n    \t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n    \t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n    \t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n    \t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n    \t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyToArray: function ( a, b, r ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tthis.multiplyMatrices( a, b );\n\n    \t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n    \t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n    \t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n    \t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n    \t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n    \t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n    \t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyToVector3Array: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToVector3Array( array, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = array.length;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n    \t\t\t\tv1.fromArray( array, j );\n    \t\t\t\tv1.applyMatrix4( this );\n    \t\t\t\tv1.toArray( array, j );\n\n    \t\t\t}\n\n    \t\t\treturn array;\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyToBuffer: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n    \t\t\t\tv1.x = buffer.getX( j );\n    \t\t\t\tv1.y = buffer.getY( j );\n    \t\t\t\tv1.z = buffer.getZ( j );\n\n    \t\t\t\tv1.applyMatrix4( this );\n\n    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n    \t\t\t}\n\n    \t\t\treturn buffer;\n\n    \t\t};\n\n    \t}(),\n\n    \tdeterminant: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n    \t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n    \t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n    \t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n    \t\t//TODO: make this more efficient\n    \t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n    \t\treturn (\n    \t\t\tn41 * (\n    \t\t\t\t+ n14 * n23 * n32\n    \t\t\t\t - n13 * n24 * n32\n    \t\t\t\t - n14 * n22 * n33\n    \t\t\t\t + n12 * n24 * n33\n    \t\t\t\t + n13 * n22 * n34\n    \t\t\t\t - n12 * n23 * n34\n    \t\t\t) +\n    \t\t\tn42 * (\n    \t\t\t\t+ n11 * n23 * n34\n    \t\t\t\t - n11 * n24 * n33\n    \t\t\t\t + n14 * n21 * n33\n    \t\t\t\t - n13 * n21 * n34\n    \t\t\t\t + n13 * n24 * n31\n    \t\t\t\t - n14 * n23 * n31\n    \t\t\t) +\n    \t\t\tn43 * (\n    \t\t\t\t+ n11 * n24 * n32\n    \t\t\t\t - n11 * n22 * n34\n    \t\t\t\t - n14 * n21 * n32\n    \t\t\t\t + n12 * n21 * n34\n    \t\t\t\t + n14 * n22 * n31\n    \t\t\t\t - n12 * n24 * n31\n    \t\t\t) +\n    \t\t\tn44 * (\n    \t\t\t\t- n13 * n22 * n31\n    \t\t\t\t - n11 * n23 * n32\n    \t\t\t\t + n11 * n22 * n33\n    \t\t\t\t + n13 * n21 * n32\n    \t\t\t\t - n12 * n21 * n33\n    \t\t\t\t + n12 * n23 * n31\n    \t\t\t)\n\n    \t\t);\n\n    \t},\n\n    \ttranspose: function () {\n\n    \t\tvar te = this.elements;\n    \t\tvar tmp;\n\n    \t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n    \t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n    \t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n    \t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n    \t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n    \t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n    \t\treturn this;\n\n    \t},\n\n    \tflattenToArrayOffset: function ( array, offset ) {\n\n    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n    \t\t\t\t\"- just use .toArray instead.\" );\n\n    \t\treturn this.toArray( array, offset );\n\n    \t},\n\n    \tgetPosition: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function getPosition() {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\n    \t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n    \t\t};\n\n    \t}(),\n\n    \tsetPosition: function ( v ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 12 ] = v.x;\n    \t\tte[ 13 ] = v.y;\n    \t\tte[ 14 ] = v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetInverse: function ( m, throwOnDegenerate ) {\n\n    \t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    \t\tvar te = this.elements,\n    \t\t\tme = m.elements,\n\n    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n    \t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n    \t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n    \t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n    \t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n    \t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n    \t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n    \t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n    \t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n    \t\tif ( det === 0 ) {\n\n    \t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n    \t\t\tif ( throwOnDegenerate === true ) {\n\n    \t\t\t\tthrow new Error( msg );\n\n    \t\t\t} else {\n\n    \t\t\t\tconsole.warn( msg );\n\n    \t\t\t}\n\n    \t\t\treturn this.identity();\n\n    \t\t}\n\n    \t\tvar detInv = 1 / det;\n\n    \t\tte[ 0 ] = t11 * detInv;\n    \t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n    \t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n    \t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n    \t\tte[ 4 ] = t12 * detInv;\n    \t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n    \t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n    \t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n    \t\tte[ 8 ] = t13 * detInv;\n    \t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n    \t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n    \t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n    \t\tte[ 12 ] = t14 * detInv;\n    \t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n    \t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n    \t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n    \t\treturn this;\n\n    \t},\n\n    \tscale: function ( v ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar x = v.x, y = v.y, z = v.z;\n\n    \t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n    \t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n    \t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n    \t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetMaxScaleOnAxis: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n    \t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n    \t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n    \t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n    \t},\n\n    \tmakeTranslation: function ( x, y, z ) {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0, x,\n    \t\t\t0, 1, 0, y,\n    \t\t\t0, 0, 1, z,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationX: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\t1, 0,  0, 0,\n    \t\t\t0, c, - s, 0,\n    \t\t\t0, s,  c, 0,\n    \t\t\t0, 0,  0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationY: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\t c, 0, s, 0,\n    \t\t\t 0, 1, 0, 0,\n    \t\t\t- s, 0, c, 0,\n    \t\t\t 0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationZ: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\tc, - s, 0, 0,\n    \t\t\ts,  c, 0, 0,\n    \t\t\t0,  0, 1, 0,\n    \t\t\t0,  0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationAxis: function ( axis, angle ) {\n\n    \t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n    \t\tvar c = Math.cos( angle );\n    \t\tvar s = Math.sin( angle );\n    \t\tvar t = 1 - c;\n    \t\tvar x = axis.x, y = axis.y, z = axis.z;\n    \t\tvar tx = t * x, ty = t * y;\n\n    \t\tthis.set(\n\n    \t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n    \t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n    \t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\t return this;\n\n    \t},\n\n    \tmakeScale: function ( x, y, z ) {\n\n    \t\tthis.set(\n\n    \t\t\tx, 0, 0, 0,\n    \t\t\t0, y, 0, 0,\n    \t\t\t0, 0, z, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tcompose: function ( position, quaternion, scale ) {\n\n    \t\tthis.makeRotationFromQuaternion( quaternion );\n    \t\tthis.scale( scale );\n    \t\tthis.setPosition( position );\n\n    \t\treturn this;\n\n    \t},\n\n    \tdecompose: function () {\n\n    \t\tvar vector, matrix;\n\n    \t\treturn function decompose( position, quaternion, scale ) {\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tvector = new Vector3();\n    \t\t\t\tmatrix = new Matrix4();\n\n    \t\t\t}\n\n    \t\t\tvar te = this.elements;\n\n    \t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n    \t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n    \t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n    \t\t\t// if determine is negative, we need to invert one scale\n    \t\t\tvar det = this.determinant();\n    \t\t\tif ( det < 0 ) {\n\n    \t\t\t\tsx = - sx;\n\n    \t\t\t}\n\n    \t\t\tposition.x = te[ 12 ];\n    \t\t\tposition.y = te[ 13 ];\n    \t\t\tposition.z = te[ 14 ];\n\n    \t\t\t// scale the rotation part\n\n    \t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\n    \t\t\tvar invSX = 1 / sx;\n    \t\t\tvar invSY = 1 / sy;\n    \t\t\tvar invSZ = 1 / sz;\n\n    \t\t\tmatrix.elements[ 0 ] *= invSX;\n    \t\t\tmatrix.elements[ 1 ] *= invSX;\n    \t\t\tmatrix.elements[ 2 ] *= invSX;\n\n    \t\t\tmatrix.elements[ 4 ] *= invSY;\n    \t\t\tmatrix.elements[ 5 ] *= invSY;\n    \t\t\tmatrix.elements[ 6 ] *= invSY;\n\n    \t\t\tmatrix.elements[ 8 ] *= invSZ;\n    \t\t\tmatrix.elements[ 9 ] *= invSZ;\n    \t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n    \t\t\tquaternion.setFromRotationMatrix( matrix );\n\n    \t\t\tscale.x = sx;\n    \t\t\tscale.y = sy;\n    \t\t\tscale.z = sz;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar x = 2 * near / ( right - left );\n    \t\tvar y = 2 * near / ( top - bottom );\n\n    \t\tvar a = ( right + left ) / ( right - left );\n    \t\tvar b = ( top + bottom ) / ( top - bottom );\n    \t\tvar c = - ( far + near ) / ( far - near );\n    \t\tvar d = - 2 * far * near / ( far - near );\n\n    \t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n    \t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakePerspective: function ( fov, aspect, near, far ) {\n\n    \t\tvar ymax = near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 );\n    \t\tvar ymin = - ymax;\n    \t\tvar xmin = ymin * aspect;\n    \t\tvar xmax = ymax * aspect;\n\n    \t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\n    \t},\n\n    \tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar w = 1.0 / ( right - left );\n    \t\tvar h = 1.0 / ( top - bottom );\n    \t\tvar p = 1.0 / ( far - near );\n\n    \t\tvar x = ( right + left ) * w;\n    \t\tvar y = ( top + bottom ) * h;\n    \t\tvar z = ( far + near ) * p;\n\n    \t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n    \t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( matrix ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar me = matrix.elements;\n\n    \t\tfor ( var i = 0; i < 16; i ++ ) {\n\n    \t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tfor( var i = 0; i < 16; i ++ ) {\n\n    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar te = this.elements;\n\n    \t\tarray[ offset ] = te[ 0 ];\n    \t\tarray[ offset + 1 ] = te[ 1 ];\n    \t\tarray[ offset + 2 ] = te[ 2 ];\n    \t\tarray[ offset + 3 ] = te[ 3 ];\n\n    \t\tarray[ offset + 4 ] = te[ 4 ];\n    \t\tarray[ offset + 5 ] = te[ 5 ];\n    \t\tarray[ offset + 6 ] = te[ 6 ];\n    \t\tarray[ offset + 7 ] = te[ 7 ];\n\n    \t\tarray[ offset + 8 ]  = te[ 8 ];\n    \t\tarray[ offset + 9 ]  = te[ 9 ];\n    \t\tarray[ offset + 10 ] = te[ 10 ];\n    \t\tarray[ offset + 11 ] = te[ 11 ];\n\n    \t\tarray[ offset + 12 ] = te[ 12 ];\n    \t\tarray[ offset + 13 ] = te[ 13 ];\n    \t\tarray[ offset + 14 ] = te[ 14 ];\n    \t\tarray[ offset + 15 ] = te[ 15 ];\n\n    \t\treturn array;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n    \timages = images !== undefined ? images : [];\n    \tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n    \tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.flipY = false;\n\n    }\n\n    CubeTexture.prototype = Object.create( Texture.prototype );\n    CubeTexture.prototype.constructor = CubeTexture;\n\n    CubeTexture.prototype.isCubeTexture = true;\n\n    Object.defineProperty( CubeTexture.prototype, 'images', {\n\n    \tget: function () {\n\n    \t\treturn this.image;\n\n    \t},\n\n    \tset: function ( value ) {\n\n    \t\tthis.image = value;\n\n    \t}\n\n    } );\n\n    var emptyTexture = new Texture();\n    var emptyCubeTexture = new CubeTexture();\n\n    // --- Base for inner nodes (including the root) ---\n\n    function UniformContainer() {\n\n    \tthis.seq = [];\n    \tthis.map = {};\n\n    }\n\n    // --- Utilities ---\n\n    // Array Caches (provide typed arrays for temporary by size)\n\n    var arrayCacheF32 = [];\n    var arrayCacheI32 = [];\n\n    // Flattening for arrays of vectors and matrices\n\n    function flatten( array, nBlocks, blockSize ) {\n\n    \tvar firstElem = array[ 0 ];\n\n    \tif ( firstElem <= 0 || firstElem > 0 ) return array;\n    \t// unoptimized: ! isNaN( firstElem )\n    \t// see http://jacksondunstan.com/articles/983\n\n    \tvar n = nBlocks * blockSize,\n    \t\tr = arrayCacheF32[ n ];\n\n    \tif ( r === undefined ) {\n\n    \t\tr = new Float32Array( n );\n    \t\tarrayCacheF32[ n ] = r;\n\n    \t}\n\n    \tif ( nBlocks !== 0 ) {\n\n    \t\tfirstElem.toArray( r, 0 );\n\n    \t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n    \t\t\toffset += blockSize;\n    \t\t\tarray[ i ].toArray( r, offset );\n\n    \t\t}\n\n    \t}\n\n    \treturn r;\n\n    }\n\n    // Texture unit allocation\n\n    function allocTexUnits( renderer, n ) {\n\n    \tvar r = arrayCacheI32[ n ];\n\n    \tif ( r === undefined ) {\n\n    \t\tr = new Int32Array( n );\n    \t\tarrayCacheI32[ n ] = r;\n\n    \t}\n\n    \tfor ( var i = 0; i !== n; ++ i )\n    \t\tr[ i ] = renderer.allocTextureUnit();\n\n    \treturn r;\n\n    }\n\n    // --- Setters ---\n\n    // Note: Defining these methods externally, because they come in a bunch\n    // and this way their names minify.\n\n    // Single scalar\n\n    function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }\n    function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }\n\n    // Single float vector (from flat array or THREE.VectorN)\n\n    function setValue2fv( gl, v ) {\n\n    \tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n    \telse gl.uniform2f( this.addr, v.x, v.y );\n\n    }\n\n    function setValue3fv( gl, v ) {\n\n    \tif ( v.x !== undefined )\n    \t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n    \telse if ( v.r !== undefined )\n    \t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n    \telse\n    \t\tgl.uniform3fv( this.addr, v );\n\n    }\n\n    function setValue4fv( gl, v ) {\n\n    \tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n    \telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n    }\n\n    // Single matrix (from flat array or MatrixN)\n\n    function setValue2fm( gl, v ) {\n\n    \tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n    }\n\n    function setValue3fm( gl, v ) {\n\n    \tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\n    }\n\n    function setValue4fm( gl, v ) {\n\n    \tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\n    }\n\n    // Single texture (2D / Cube)\n\n    function setValueT1( gl, v, renderer ) {\n\n    \tvar unit = renderer.allocTextureUnit();\n    \tgl.uniform1i( this.addr, unit );\n    \trenderer.setTexture2D( v || emptyTexture, unit );\n\n    }\n\n    function setValueT6( gl, v, renderer ) {\n\n    \tvar unit = renderer.allocTextureUnit();\n    \tgl.uniform1i( this.addr, unit );\n    \trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n    }\n\n    // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n    function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }\n    function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }\n    function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }\n\n    // Helper to pick the right setter for the singular case\n\n    function getSingularSetter( type ) {\n\n    \tswitch ( type ) {\n\n    \t\tcase 0x1406: return setValue1f; // FLOAT\n    \t\tcase 0x8b50: return setValue2fv; // _VEC2\n    \t\tcase 0x8b51: return setValue3fv; // _VEC3\n    \t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n    \t\tcase 0x8b5a: return setValue2fm; // _MAT2\n    \t\tcase 0x8b5b: return setValue3fm; // _MAT3\n    \t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n    \t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n    \t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n    \t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n    \t}\n\n    }\n\n    // Array of scalars\n\n    function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }\n    function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }\n\n    // Array of vectors (flat or from THREE classes)\n\n    function setValueV2a( gl, v ) {\n\n    \tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n    }\n\n    function setValueV3a( gl, v ) {\n\n    \tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n    }\n\n    function setValueV4a( gl, v ) {\n\n    \tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n    }\n\n    // Array of matrices (flat or from THREE clases)\n\n    function setValueM2a( gl, v ) {\n\n    \tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n    }\n\n    function setValueM3a( gl, v ) {\n\n    \tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n    }\n\n    function setValueM4a( gl, v ) {\n\n    \tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n    }\n\n    // Array of textures (2D / Cube)\n\n    function setValueT1a( gl, v, renderer ) {\n\n    \tvar n = v.length,\n    \t\tunits = allocTexUnits( renderer, n );\n\n    \tgl.uniform1iv( this.addr, units );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n    \t}\n\n    }\n\n    function setValueT6a( gl, v, renderer ) {\n\n    \tvar n = v.length,\n    \t\tunits = allocTexUnits( renderer, n );\n\n    \tgl.uniform1iv( this.addr, units );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n    \t}\n\n    }\n\n    // Helper to pick the right setter for a pure (bottom-level) array\n\n    function getPureArraySetter( type ) {\n\n    \tswitch ( type ) {\n\n    \t\tcase 0x1406: return setValue1fv; // FLOAT\n    \t\tcase 0x8b50: return setValueV2a; // _VEC2\n    \t\tcase 0x8b51: return setValueV3a; // _VEC3\n    \t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n    \t\tcase 0x8b5a: return setValueM2a; // _MAT2\n    \t\tcase 0x8b5b: return setValueM3a; // _MAT3\n    \t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n    \t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n    \t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n    \t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n    \t}\n\n    }\n\n    // --- Uniform Classes ---\n\n    function SingleUniform( id, activeInfo, addr ) {\n\n    \tthis.id = id;\n    \tthis.addr = addr;\n    \tthis.setValue = getSingularSetter( activeInfo.type );\n\n    \t// this.path = activeInfo.name; // DEBUG\n\n    }\n\n    function PureArrayUniform( id, activeInfo, addr ) {\n\n    \tthis.id = id;\n    \tthis.addr = addr;\n    \tthis.size = activeInfo.size;\n    \tthis.setValue = getPureArraySetter( activeInfo.type );\n\n    \t// this.path = activeInfo.name; // DEBUG\n\n    }\n\n    function StructuredUniform( id ) {\n\n    \tthis.id = id;\n\n    \tUniformContainer.call( this ); // mix-in\n\n    }\n\n    StructuredUniform.prototype.setValue = function( gl, value ) {\n\n    \t// Note: Don't need an extra 'renderer' parameter, since samplers\n    \t// are not allowed in structured uniforms.\n\n    \tvar seq = this.seq;\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ];\n    \t\tu.setValue( gl, value[ u.id ] );\n\n    \t}\n\n    };\n\n    // --- Top-level ---\n\n    // Parser - builds up the property tree from the path strings\n\n    var RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n    // extracts\n    // \t- the identifier (member name or array index)\n    //  - followed by an optional right bracket (found when array index)\n    //  - followed by an optional left bracket or dot (type of subscript)\n    //\n    // Note: These portions can be read in a non-overlapping fashion and\n    // allow straightforward parsing of the hierarchy that WebGL encodes\n    // in the uniform names.\n\n    function addUniform( container, uniformObject ) {\n\n    \tcontainer.seq.push( uniformObject );\n    \tcontainer.map[ uniformObject.id ] = uniformObject;\n\n    }\n\n    function parseUniform( activeInfo, addr, container ) {\n\n    \tvar path = activeInfo.name,\n    \t\tpathLength = path.length;\n\n    \t// reset RegExp object, because of the early exit of a previous run\n    \tRePathPart.lastIndex = 0;\n\n    \tfor (; ;) {\n\n    \t\tvar match = RePathPart.exec( path ),\n    \t\t\tmatchEnd = RePathPart.lastIndex,\n\n    \t\t\tid = match[ 1 ],\n    \t\t\tidIsIndex = match[ 2 ] === ']',\n    \t\t\tsubscript = match[ 3 ];\n\n    \t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n    \t\tif ( subscript === undefined ||\n    \t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n    \t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n    \t\t\taddUniform( container, subscript === undefined ?\n    \t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n    \t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n    \t\t\tbreak;\n\n    \t\t} else {\n    \t\t\t// step into inner node / create it in case it doesn't exist\n\n    \t\t\tvar map = container.map,\n    \t\t\t\tnext = map[ id ];\n\n    \t\t\tif ( next === undefined ) {\n\n    \t\t\t\tnext = new StructuredUniform( id );\n    \t\t\t\taddUniform( container, next );\n\n    \t\t\t}\n\n    \t\t\tcontainer = next;\n\n    \t\t}\n\n    \t}\n\n    }\n\n    // Root Container\n\n    function WebGLUniforms( gl, program, renderer ) {\n\n    \tUniformContainer.call( this );\n\n    \tthis.renderer = renderer;\n\n    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\tvar info = gl.getActiveUniform( program, i ),\n    \t\t\tpath = info.name,\n    \t\t\taddr = gl.getUniformLocation( program, path );\n\n    \t\tparseUniform( info, addr, this );\n\n    \t}\n\n    }\n\n    WebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\n    \tvar u = this.map[ name ];\n\n    \tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n    };\n\n    WebGLUniforms.prototype.set = function( gl, object, name ) {\n\n    \tvar u = this.map[ name ];\n\n    \tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\n    };\n\n    WebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\n    \tvar v = object[ name ];\n\n    \tif ( v !== undefined ) this.setValue( gl, name, v );\n\n    };\n\n\n    // Static interface\n\n    WebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ],\n    \t\t\tv = values[ u.id ];\n\n    \t\tif ( v.needsUpdate !== false ) {\n    \t\t\t// note: always updating when .needsUpdate is undefined\n\n    \t\t\tu.setValue( gl, v.value, renderer );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    WebGLUniforms.seqWithValue = function( seq, values ) {\n\n    \tvar r = [];\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ];\n    \t\tif ( u.id in values ) r.push( u );\n\n    \t}\n\n    \treturn r;\n\n    };\n\n    WebGLUniforms.splitDynamic = function( seq, values ) {\n\n    \tvar r = null,\n    \t\tn = seq.length,\n    \t\tw = 0;\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ],\n    \t\t\tv = values[ u.id ];\n\n    \t\tif ( v && v.dynamic === true ) {\n\n    \t\t\tif ( r === null ) r = [];\n    \t\t\tr.push( u );\n\n    \t\t} else {\n\n    \t\t\t// in-place compact 'seq', removing the matches\n    \t\t\tif ( w < i ) seq[ w ] = u;\n    \t\t\t++ w;\n\n    \t\t}\n\n    \t}\n\n    \tif ( w < n ) seq.length = w;\n\n    \treturn r;\n\n    };\n\n    WebGLUniforms.evalDynamic = function( seq, values, object, material, camera ) {\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar v = values[ seq[ i ].id ],\n    \t\t\tf = v.onUpdateCallback;\n\n    \t\tif ( f !== undefined ) f.call( v, object, material, camera );\n\n    \t}\n\n    };\n\n    /**\n     * Uniform Utilities\n     */\n\n    exports.UniformsUtils = {\n\n    \tmerge: function ( uniforms ) {\n\n    \t\tvar merged = {};\n\n    \t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n    \t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n    \t\t\tfor ( var p in tmp ) {\n\n    \t\t\t\tmerged[ p ] = tmp[ p ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn merged;\n\n    \t},\n\n    \tclone: function ( uniforms_src ) {\n\n    \t\tvar uniforms_dst = {};\n\n    \t\tfor ( var u in uniforms_src ) {\n\n    \t\t\tuniforms_dst[ u ] = {};\n\n    \t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n    \t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n    \t\t\t\tif ( (parameter_src && parameter_src.isColor) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector2) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector3) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector4) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isMatrix3) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isMatrix4) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isTexture) ) {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n    \t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn uniforms_dst;\n\n    \t}\n\n    };\n\n    var alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n    var alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n    var alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n    var aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\n    var aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n    var begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\n    var beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n    var bsdfs = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n    var bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\n    var clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n#endif\\n\";\n\n    var clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n    var clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n    var clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n    var color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n    var color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\n    var color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n    var color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n    var common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\n    var cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n    var defaultnormal_vertex = \"#ifdef FLIP_SIDED\\n\\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\n    var displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\n    var displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n    var emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n    var emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n    var encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n    var encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n    var envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\n    var fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\t#else\\n\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\t#endif\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n    var fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n    var lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n    var lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n    var lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n    var lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\\t\\t\\tdirectLight.color = pointLight.color;\\n\\t\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\t#include <normal_flip>\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\t#include <normal_flip>\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\n    var lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n    var lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\n    var lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n    var lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n    var lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t \\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\t\\t\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n    var logdepthbuf_fragment = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\n    var logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\n    var logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\n    var logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\n    var map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n    var map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n    var map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n    var map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n    var metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\n    var metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n    var morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n    var morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n    var morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\n    var normal_flip = \"#ifdef DOUBLE_SIDED\\n\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\n    var normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n    var normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\n    var packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n    var premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n    var project_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n    var roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\n    var roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n    var shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n    var shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\n    var shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\n    var shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\n    var skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n    var skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureWidth;\\n\\t\\tuniform int boneTextureHeight;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureWidth ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureWidth );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\n    var skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\n    var skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n    var specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n    var specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n    var tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n    var tonemapping_pars_fragment = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n    var uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n    var uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\n    var uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\n    var uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n    var uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n    var uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\n    var worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\t#ifdef USE_SKINNING\\n\\t\\tvec4 worldPosition = modelMatrix * skinned;\\n\\t#else\\n\\t\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\t#endif\\n#endif\\n\";\n\n    var cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\n    var cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n    var depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\n    var depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var distanceRGBA_frag = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\n    var distanceRGBA_vert = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\n\n    var equirect_frag = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\n    var equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n    var linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight;\\n\\treflectedLight.directDiffuse = vec3( 0.0 );\\n\\treflectedLight.directSpecular = vec3( 0.0 );\\n\\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n}\\n\";\n\n    var meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var normal_frag = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n    var normal_vert = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvNormal = normalize( normalMatrix * normal );\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var shadow_frag = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\n    var shadow_vert = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var ShaderChunk = {\n    \talphamap_fragment: alphamap_fragment,\n    \talphamap_pars_fragment: alphamap_pars_fragment,\n    \talphatest_fragment: alphatest_fragment,\n    \taomap_fragment: aomap_fragment,\n    \taomap_pars_fragment: aomap_pars_fragment,\n    \tbegin_vertex: begin_vertex,\n    \tbeginnormal_vertex: beginnormal_vertex,\n    \tbsdfs: bsdfs,\n    \tbumpmap_pars_fragment: bumpmap_pars_fragment,\n    \tclipping_planes_fragment: clipping_planes_fragment,\n    \tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n    \tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n    \tclipping_planes_vertex: clipping_planes_vertex,\n    \tcolor_fragment: color_fragment,\n    \tcolor_pars_fragment: color_pars_fragment,\n    \tcolor_pars_vertex: color_pars_vertex,\n    \tcolor_vertex: color_vertex,\n    \tcommon: common,\n    \tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n    \tdefaultnormal_vertex: defaultnormal_vertex,\n    \tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n    \tdisplacementmap_vertex: displacementmap_vertex,\n    \temissivemap_fragment: emissivemap_fragment,\n    \temissivemap_pars_fragment: emissivemap_pars_fragment,\n    \tencodings_fragment: encodings_fragment,\n    \tencodings_pars_fragment: encodings_pars_fragment,\n    \tenvmap_fragment: envmap_fragment,\n    \tenvmap_pars_fragment: envmap_pars_fragment,\n    \tenvmap_pars_vertex: envmap_pars_vertex,\n    \tenvmap_vertex: envmap_vertex,\n    \tfog_fragment: fog_fragment,\n    \tfog_pars_fragment: fog_pars_fragment,\n    \tlightmap_fragment: lightmap_fragment,\n    \tlightmap_pars_fragment: lightmap_pars_fragment,\n    \tlights_lambert_vertex: lights_lambert_vertex,\n    \tlights_pars: lights_pars,\n    \tlights_phong_fragment: lights_phong_fragment,\n    \tlights_phong_pars_fragment: lights_phong_pars_fragment,\n    \tlights_physical_fragment: lights_physical_fragment,\n    \tlights_physical_pars_fragment: lights_physical_pars_fragment,\n    \tlights_template: lights_template,\n    \tlogdepthbuf_fragment: logdepthbuf_fragment,\n    \tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n    \tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n    \tlogdepthbuf_vertex: logdepthbuf_vertex,\n    \tmap_fragment: map_fragment,\n    \tmap_pars_fragment: map_pars_fragment,\n    \tmap_particle_fragment: map_particle_fragment,\n    \tmap_particle_pars_fragment: map_particle_pars_fragment,\n    \tmetalnessmap_fragment: metalnessmap_fragment,\n    \tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n    \tmorphnormal_vertex: morphnormal_vertex,\n    \tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n    \tmorphtarget_vertex: morphtarget_vertex,\n    \tnormal_flip: normal_flip,\n    \tnormal_fragment: normal_fragment,\n    \tnormalmap_pars_fragment: normalmap_pars_fragment,\n    \tpacking: packing,\n    \tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n    \tproject_vertex: project_vertex,\n    \troughnessmap_fragment: roughnessmap_fragment,\n    \troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n    \tshadowmap_pars_fragment: shadowmap_pars_fragment,\n    \tshadowmap_pars_vertex: shadowmap_pars_vertex,\n    \tshadowmap_vertex: shadowmap_vertex,\n    \tshadowmask_pars_fragment: shadowmask_pars_fragment,\n    \tskinbase_vertex: skinbase_vertex,\n    \tskinning_pars_vertex: skinning_pars_vertex,\n    \tskinning_vertex: skinning_vertex,\n    \tskinnormal_vertex: skinnormal_vertex,\n    \tspecularmap_fragment: specularmap_fragment,\n    \tspecularmap_pars_fragment: specularmap_pars_fragment,\n    \ttonemapping_fragment: tonemapping_fragment,\n    \ttonemapping_pars_fragment: tonemapping_pars_fragment,\n    \tuv_pars_fragment: uv_pars_fragment,\n    \tuv_pars_vertex: uv_pars_vertex,\n    \tuv_vertex: uv_vertex,\n    \tuv2_pars_fragment: uv2_pars_fragment,\n    \tuv2_pars_vertex: uv2_pars_vertex,\n    \tuv2_vertex: uv2_vertex,\n    \tworldpos_vertex: worldpos_vertex,\n\n    \tcube_frag: cube_frag,\n    \tcube_vert: cube_vert,\n    \tdepth_frag: depth_frag,\n    \tdepth_vert: depth_vert,\n    \tdistanceRGBA_frag: distanceRGBA_frag,\n    \tdistanceRGBA_vert: distanceRGBA_vert,\n    \tequirect_frag: equirect_frag,\n    \tequirect_vert: equirect_vert,\n    \tlinedashed_frag: linedashed_frag,\n    \tlinedashed_vert: linedashed_vert,\n    \tmeshbasic_frag: meshbasic_frag,\n    \tmeshbasic_vert: meshbasic_vert,\n    \tmeshlambert_frag: meshlambert_frag,\n    \tmeshlambert_vert: meshlambert_vert,\n    \tmeshphong_frag: meshphong_frag,\n    \tmeshphong_vert: meshphong_vert,\n    \tmeshphysical_frag: meshphysical_frag,\n    \tmeshphysical_vert: meshphysical_vert,\n    \tnormal_frag: normal_frag,\n    \tnormal_vert: normal_vert,\n    \tpoints_frag: points_frag,\n    \tpoints_vert: points_vert,\n    \tshadow_frag: shadow_frag,\n    \tshadow_vert: shadow_vert\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Color( r, g, b ) {\n\n    \tif ( g === undefined && b === undefined ) {\n\n    \t\t// r is THREE.Color, hex or string\n    \t\treturn this.set( r );\n\n    \t}\n\n    \treturn this.setRGB( r, g, b );\n\n    }\n\n    Color.prototype = {\n\n    \tconstructor: Color,\n\n    \tisColor: true,\n\n    \tr: 1, g: 1, b: 1,\n\n    \tset: function ( value ) {\n\n    \t\tif ( (value && value.isColor) ) {\n\n    \t\t\tthis.copy( value );\n\n    \t\t} else if ( typeof value === 'number' ) {\n\n    \t\t\tthis.setHex( value );\n\n    \t\t} else if ( typeof value === 'string' ) {\n\n    \t\t\tthis.setStyle( value );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.r = scalar;\n    \t\tthis.g = scalar;\n    \t\tthis.b = scalar;\n\n    \t},\n\n    \tsetHex: function ( hex ) {\n\n    \t\thex = Math.floor( hex );\n\n    \t\tthis.r = ( hex >> 16 & 255 ) / 255;\n    \t\tthis.g = ( hex >> 8 & 255 ) / 255;\n    \t\tthis.b = ( hex & 255 ) / 255;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetRGB: function ( r, g, b ) {\n\n    \t\tthis.r = r;\n    \t\tthis.g = g;\n    \t\tthis.b = b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetHSL: function () {\n\n    \t\tfunction hue2rgb( p, q, t ) {\n\n    \t\t\tif ( t < 0 ) t += 1;\n    \t\t\tif ( t > 1 ) t -= 1;\n    \t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n    \t\t\tif ( t < 1 / 2 ) return q;\n    \t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n    \t\t\treturn p;\n\n    \t\t}\n\n    \t\treturn function setHSL( h, s, l ) {\n\n    \t\t\t// h,s,l ranges are in 0.0 - 1.0\n    \t\t\th = exports.Math.euclideanModulo( h, 1 );\n    \t\t\ts = exports.Math.clamp( s, 0, 1 );\n    \t\t\tl = exports.Math.clamp( l, 0, 1 );\n\n    \t\t\tif ( s === 0 ) {\n\n    \t\t\t\tthis.r = this.g = this.b = l;\n\n    \t\t\t} else {\n\n    \t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n    \t\t\t\tvar q = ( 2 * l ) - p;\n\n    \t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n    \t\t\t\tthis.g = hue2rgb( q, p, h );\n    \t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n    \t\t\t}\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tsetStyle: function ( style ) {\n\n    \t\tfunction handleAlpha( string ) {\n\n    \t\t\tif ( string === undefined ) return;\n\n    \t\t\tif ( parseFloat( string ) < 1 ) {\n\n    \t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\tvar m;\n\n    \t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n    \t\t\t// rgb / hsl\n\n    \t\t\tvar color;\n    \t\t\tvar name = m[ 1 ];\n    \t\t\tvar components = m[ 2 ];\n\n    \t\t\tswitch ( name ) {\n\n    \t\t\t\tcase 'rgb':\n    \t\t\t\tcase 'rgba':\n\n    \t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n    \t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n    \t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n    \t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n    \t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n    \t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n    \t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'hsl':\n    \t\t\t\tcase 'hsla':\n\n    \t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n    \t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n    \t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n    \t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n    \t\t\t// hex color\n\n    \t\t\tvar hex = m[ 1 ];\n    \t\t\tvar size = hex.length;\n\n    \t\t\tif ( size === 3 ) {\n\n    \t\t\t\t// #ff0\n    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n    \t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n    \t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n    \t\t\t\treturn this;\n\n    \t\t\t} else if ( size === 6 ) {\n\n    \t\t\t\t// #ff0000\n    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n    \t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n    \t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n    \t\t\t\treturn this;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( style && style.length > 0 ) {\n\n    \t\t\t// color keywords\n    \t\t\tvar hex = exports.ColorKeywords[ style ];\n\n    \t\t\tif ( hex !== undefined ) {\n\n    \t\t\t\t// red\n    \t\t\t\tthis.setHex( hex );\n\n    \t\t\t} else {\n\n    \t\t\t\t// unknown color\n    \t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.r, this.g, this.b );\n\n    \t},\n\n    \tcopy: function ( color ) {\n\n    \t\tthis.r = color.r;\n    \t\tthis.g = color.g;\n    \t\tthis.b = color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n    \t\tthis.r = Math.pow( color.r, gammaFactor );\n    \t\tthis.g = Math.pow( color.g, gammaFactor );\n    \t\tthis.b = Math.pow( color.b, gammaFactor );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n    \t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n    \t\tthis.r = Math.pow( color.r, safeInverse );\n    \t\tthis.g = Math.pow( color.g, safeInverse );\n    \t\tthis.b = Math.pow( color.b, safeInverse );\n\n    \t\treturn this;\n\n    \t},\n\n    \tconvertGammaToLinear: function () {\n\n    \t\tvar r = this.r, g = this.g, b = this.b;\n\n    \t\tthis.r = r * r;\n    \t\tthis.g = g * g;\n    \t\tthis.b = b * b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tconvertLinearToGamma: function () {\n\n    \t\tthis.r = Math.sqrt( this.r );\n    \t\tthis.g = Math.sqrt( this.g );\n    \t\tthis.b = Math.sqrt( this.b );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetHex: function () {\n\n    \t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n    \t},\n\n    \tgetHexString: function () {\n\n    \t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n    \t},\n\n    \tgetHSL: function ( optionalTarget ) {\n\n    \t\t// h,s,l ranges are in 0.0 - 1.0\n\n    \t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n    \t\tvar r = this.r, g = this.g, b = this.b;\n\n    \t\tvar max = Math.max( r, g, b );\n    \t\tvar min = Math.min( r, g, b );\n\n    \t\tvar hue, saturation;\n    \t\tvar lightness = ( min + max ) / 2.0;\n\n    \t\tif ( min === max ) {\n\n    \t\t\thue = 0;\n    \t\t\tsaturation = 0;\n\n    \t\t} else {\n\n    \t\t\tvar delta = max - min;\n\n    \t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n    \t\t\tswitch ( max ) {\n\n    \t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n    \t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n    \t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n    \t\t\t}\n\n    \t\t\thue /= 6;\n\n    \t\t}\n\n    \t\thsl.h = hue;\n    \t\thsl.s = saturation;\n    \t\thsl.l = lightness;\n\n    \t\treturn hsl;\n\n    \t},\n\n    \tgetStyle: function () {\n\n    \t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n    \t},\n\n    \toffsetHSL: function ( h, s, l ) {\n\n    \t\tvar hsl = this.getHSL();\n\n    \t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n    \t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( color ) {\n\n    \t\tthis.r += color.r;\n    \t\tthis.g += color.g;\n    \t\tthis.b += color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddColors: function ( color1, color2 ) {\n\n    \t\tthis.r = color1.r + color2.r;\n    \t\tthis.g = color1.g + color2.g;\n    \t\tthis.b = color1.b + color2.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.r += s;\n    \t\tthis.g += s;\n    \t\tthis.b += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function( color ) {\n\n    \t\tthis.r = Math.max( 0, this.r - color.r );\n    \t\tthis.g = Math.max( 0, this.g - color.g );\n    \t\tthis.b = Math.max( 0, this.b - color.b );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( color ) {\n\n    \t\tthis.r *= color.r;\n    \t\tthis.g *= color.g;\n    \t\tthis.b *= color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tthis.r *= s;\n    \t\tthis.g *= s;\n    \t\tthis.b *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerp: function ( color, alpha ) {\n\n    \t\tthis.r += ( color.r - this.r ) * alpha;\n    \t\tthis.g += ( color.g - this.g ) * alpha;\n    \t\tthis.b += ( color.b - this.b ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( c ) {\n\n    \t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.r = array[ offset ];\n    \t\tthis.g = array[ offset + 1 ];\n    \t\tthis.b = array[ offset + 2 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.r;\n    \t\tarray[ offset + 1 ] = this.g;\n    \t\tarray[ offset + 2 ] = this.b;\n\n    \t\treturn array;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\treturn this.getHex();\n\n    \t}\n\n    };\n\n    exports.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n    'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n    'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n    'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n    'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n    'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n    'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n    'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n    'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n    'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n    'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n    'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n    'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n    'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n    'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n    'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n    'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n    'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n    'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n    'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n    'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n    'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n    'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n    'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n    /**\n     * Uniforms library for shared webgl shaders\n     */\n\n    var UniformsLib = {\n\n    \tcommon: {\n\n    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n    \t\topacity: { value: 1.0 },\n\n    \t\tmap: { value: null },\n    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },\n\n    \t\tspecularMap: { value: null },\n    \t\talphaMap: { value: null },\n\n    \t\tenvMap: { value: null },\n    \t\tflipEnvMap: { value: - 1 },\n    \t\treflectivity: { value: 1.0 },\n    \t\trefractionRatio: { value: 0.98 }\n\n    \t},\n\n    \taomap: {\n\n    \t\taoMap: { value: null },\n    \t\taoMapIntensity: { value: 1 }\n\n    \t},\n\n    \tlightmap: {\n\n    \t\tlightMap: { value: null },\n    \t\tlightMapIntensity: { value: 1 }\n\n    \t},\n\n    \temissivemap: {\n\n    \t\temissiveMap: { value: null }\n\n    \t},\n\n    \tbumpmap: {\n\n    \t\tbumpMap: { value: null },\n    \t\tbumpScale: { value: 1 }\n\n    \t},\n\n    \tnormalmap: {\n\n    \t\tnormalMap: { value: null },\n    \t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n    \t},\n\n    \tdisplacementmap: {\n\n    \t\tdisplacementMap: { value: null },\n    \t\tdisplacementScale: { value: 1 },\n    \t\tdisplacementBias: { value: 0 }\n\n    \t},\n\n    \troughnessmap: {\n\n    \t\troughnessMap: { value: null }\n\n    \t},\n\n    \tmetalnessmap: {\n\n    \t\tmetalnessMap: { value: null }\n\n    \t},\n\n    \tfog: {\n\n    \t\tfogDensity: { value: 0.00025 },\n    \t\tfogNear: { value: 1 },\n    \t\tfogFar: { value: 2000 },\n    \t\tfogColor: { value: new Color( 0xffffff ) }\n\n    \t},\n\n    \tlights: {\n\n    \t\tambientLightColor: { value: [] },\n\n    \t\tdirectionalLights: { value: [], properties: {\n    \t\t\tdirection: {},\n    \t\t\tcolor: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tdirectionalShadowMap: { value: [] },\n    \t\tdirectionalShadowMatrix: { value: [] },\n\n    \t\tspotLights: { value: [], properties: {\n    \t\t\tcolor: {},\n    \t\t\tposition: {},\n    \t\t\tdirection: {},\n    \t\t\tdistance: {},\n    \t\t\tconeCos: {},\n    \t\t\tpenumbraCos: {},\n    \t\t\tdecay: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tspotShadowMap: { value: [] },\n    \t\tspotShadowMatrix: { value: [] },\n\n    \t\tpointLights: { value: [], properties: {\n    \t\t\tcolor: {},\n    \t\t\tposition: {},\n    \t\t\tdecay: {},\n    \t\t\tdistance: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tpointShadowMap: { value: [] },\n    \t\tpointShadowMatrix: { value: [] },\n\n    \t\themisphereLights: { value: [], properties: {\n    \t\t\tdirection: {},\n    \t\t\tskyColor: {},\n    \t\t\tgroundColor: {}\n    \t\t} }\n\n    \t},\n\n    \tpoints: {\n\n    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n    \t\topacity: { value: 1.0 },\n    \t\tsize: { value: 1.0 },\n    \t\tscale: { value: 1.0 },\n    \t\tmap: { value: null },\n    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     */\n\n    var ShaderLib = {\n\n    \tbasic: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.fog\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshbasic_vert,\n    \t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n    \t},\n\n    \tlambert: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshlambert_vert,\n    \t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n    \t},\n\n    \tphong: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.bumpmap,\n    \t\t\tUniformsLib.normalmap,\n    \t\t\tUniformsLib.displacementmap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n    \t\t\t\tspecular : { value: new Color( 0x111111 ) },\n    \t\t\t\tshininess: { value: 30 }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshphong_vert,\n    \t\tfragmentShader: ShaderChunk.meshphong_frag\n\n    \t},\n\n    \tstandard: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.bumpmap,\n    \t\t\tUniformsLib.normalmap,\n    \t\t\tUniformsLib.displacementmap,\n    \t\t\tUniformsLib.roughnessmap,\n    \t\t\tUniformsLib.metalnessmap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n    \t\t\t\troughness: { value: 0.5 },\n    \t\t\t\tmetalness: { value: 0 },\n    \t\t\t\tenvMapIntensity : { value: 1 }, // temporary\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshphysical_vert,\n    \t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n    \t},\n\n    \tpoints: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.points,\n    \t\t\tUniformsLib.fog\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.points_vert,\n    \t\tfragmentShader: ShaderChunk.points_frag\n\n    \t},\n\n    \tdashed: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.fog,\n\n    \t\t\t{\n    \t\t\t\tscale    : { value: 1 },\n    \t\t\t\tdashSize : { value: 1 },\n    \t\t\t\ttotalSize: { value: 2 }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.linedashed_vert,\n    \t\tfragmentShader: ShaderChunk.linedashed_frag\n\n    \t},\n\n    \tdepth: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.displacementmap\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.depth_vert,\n    \t\tfragmentShader: ShaderChunk.depth_frag\n\n    \t},\n\n    \tnormal: {\n\n    \t\tuniforms: {\n\n    \t\t\topacity : { value: 1.0 }\n\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.normal_vert,\n    \t\tfragmentShader: ShaderChunk.normal_frag\n\n    \t},\n\n    \t/* -------------------------------------------------------------------------\n    \t//\tCube map shader\n    \t ------------------------------------------------------------------------- */\n\n    \tcube: {\n\n    \t\tuniforms: {\n    \t\t\ttCube: { value: null },\n    \t\t\ttFlip: { value: - 1 },\n    \t\t\topacity: { value: 1.0 }\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.cube_vert,\n    \t\tfragmentShader: ShaderChunk.cube_frag\n\n    \t},\n\n    \t/* -------------------------------------------------------------------------\n    \t//\tCube map shader\n    \t ------------------------------------------------------------------------- */\n\n    \tequirect: {\n\n    \t\tuniforms: {\n    \t\t\ttEquirect: { value: null },\n    \t\t\ttFlip: { value: - 1 }\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.equirect_vert,\n    \t\tfragmentShader: ShaderChunk.equirect_frag\n\n    \t},\n\n    \tdistanceRGBA: {\n\n    \t\tuniforms: {\n\n    \t\t\tlightPos: { value: new Vector3() }\n\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n    \t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n    \t}\n\n    };\n\n    ShaderLib.physical = {\n\n    \tuniforms: exports.UniformsUtils.merge( [\n\n    \t\tShaderLib.standard.uniforms,\n\n    \t\t{\n    \t\t\tclearCoat: { value: 0 },\n    \t\t\tclearCoatRoughness: { value: 0 }\n    \t\t}\n\n    \t] ),\n\n    \tvertexShader: ShaderChunk.meshphysical_vert,\n    \tfragmentShader: ShaderChunk.meshphysical_frag\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Box2( min, max ) {\n\n    \tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n    \tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n    }\n\n    Box2.prototype = {\n\n    \tconstructor: Box2,\n\n    \tset: function ( min, max ) {\n\n    \t\tthis.min.copy( min );\n    \t\tthis.max.copy( max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPoints: function ( points ) {\n\n    \t\tthis.makeEmpty();\n\n    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\tthis.expandByPoint( points[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCenterAndSize: function () {\n\n    \t\tvar v1 = new Vector2();\n\n    \t\treturn function setFromCenterAndSize( center, size ) {\n\n    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n    \t\t\tthis.min.copy( center ).sub( halfSize );\n    \t\t\tthis.max.copy( center ).add( halfSize );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( box ) {\n\n    \t\tthis.min.copy( box.min );\n    \t\tthis.max.copy( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeEmpty: function () {\n\n    \t\tthis.min.x = this.min.y = + Infinity;\n    \t\tthis.max.x = this.max.y = - Infinity;\n\n    \t\treturn this;\n\n    \t},\n\n    \tisEmpty: function () {\n\n    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tgetSize: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\n    \t},\n\n    \texpandByPoint: function ( point ) {\n\n    \t\tthis.min.min( point );\n    \t\tthis.max.max( point );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByVector: function ( vector ) {\n\n    \t\tthis.min.sub( vector );\n    \t\tthis.max.add( vector );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByScalar: function ( scalar ) {\n\n    \t\tthis.min.addScalar( - scalar );\n    \t\tthis.max.addScalar( scalar );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n    \t\t     point.y < this.min.y || point.y > this.max.y ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tcontainsBox: function ( box ) {\n\n    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n    \t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tgetParameter: function ( point, optionalTarget ) {\n\n    \t\t// This can potentially have a divide by zero if the box\n    \t\t// has a size dimension of 0.\n\n    \t\tvar result = optionalTarget || new Vector2();\n\n    \t\treturn result.set(\n    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n    \t\t);\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\t// using 6 splitting planes to rule out intersections.\n\n    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n    \t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\n    \t},\n\n    \tdistanceToPoint: function () {\n\n    \t\tvar v1 = new Vector2();\n\n    \t\treturn function distanceToPoint( point ) {\n\n    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n    \t\t\treturn clampedPoint.sub( point ).length();\n\n    \t\t};\n\n    \t}(),\n\n    \tintersect: function ( box ) {\n\n    \t\tthis.min.max( box.min );\n    \t\tthis.max.min( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tunion: function ( box ) {\n\n    \t\tthis.min.min( box.min );\n    \t\tthis.max.max( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.min.add( offset );\n    \t\tthis.max.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( box ) {\n\n    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n    \t}\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function LensFlarePlugin( renderer, flares ) {\n\n    \tvar gl = renderer.context;\n    \tvar state = renderer.state;\n\n    \tvar vertexBuffer, elementBuffer;\n    \tvar shader, program, attributes, uniforms;\n\n    \tvar tempTexture, occlusionTexture;\n\n    \tfunction init() {\n\n    \t\tvar vertices = new Float32Array( [\n    \t\t\t- 1, - 1,  0, 0,\n    \t\t\t 1, - 1,  1, 0,\n    \t\t\t 1,  1,  1, 1,\n    \t\t\t- 1,  1,  0, 1\n    \t\t] );\n\n    \t\tvar faces = new Uint16Array( [\n    \t\t\t0, 1, 2,\n    \t\t\t0, 2, 3\n    \t\t] );\n\n    \t\t// buffers\n\n    \t\tvertexBuffer     = gl.createBuffer();\n    \t\telementBuffer    = gl.createBuffer();\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n    \t\t// textures\n\n    \t\ttempTexture      = gl.createTexture();\n    \t\tocclusionTexture = gl.createTexture();\n\n    \t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n    \t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n    \t\tshader = {\n\n    \t\t\tvertexShader: [\n\n    \t\t\t\t\"uniform lowp int renderType;\",\n\n    \t\t\t\t\"uniform vec3 screenPosition;\",\n    \t\t\t\t\"uniform vec2 scale;\",\n    \t\t\t\t\"uniform float rotation;\",\n\n    \t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n    \t\t\t\t\"attribute vec2 position;\",\n    \t\t\t\t\"attribute vec2 uv;\",\n\n    \t\t\t\t\"varying vec2 vUV;\",\n    \t\t\t\t\"varying float vVisibility;\",\n\n    \t\t\t\t\"void main() {\",\n\n    \t\t\t\t\t\"vUV = uv;\",\n\n    \t\t\t\t\t\"vec2 pos = position;\",\n\n    \t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n    \t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n    \t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n    \t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n    \t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n    \t\t\t\t\t\"}\",\n\n    \t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n    \t\t\t\t\"}\"\n\n    \t\t\t].join( \"\\n\" ),\n\n    \t\t\tfragmentShader: [\n\n    \t\t\t\t\"uniform lowp int renderType;\",\n\n    \t\t\t\t\"uniform sampler2D map;\",\n    \t\t\t\t\"uniform float opacity;\",\n    \t\t\t\t\"uniform vec3 color;\",\n\n    \t\t\t\t\"varying vec2 vUV;\",\n    \t\t\t\t\"varying float vVisibility;\",\n\n    \t\t\t\t\"void main() {\",\n\n    \t\t\t\t\t// pink square\n\n    \t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n    \t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n    \t\t\t\t\t// restore\n\n    \t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n    \t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n    \t\t\t\t\t// flare\n\n    \t\t\t\t\t\"} else {\",\n\n    \t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n    \t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n    \t\t\t\t\t\t\"gl_FragColor = texture;\",\n    \t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n    \t\t\t\t\t\"}\",\n\n    \t\t\t\t\"}\"\n\n    \t\t\t].join( \"\\n\" )\n\n    \t\t};\n\n    \t\tprogram = createProgram( shader );\n\n    \t\tattributes = {\n    \t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n    \t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n    \t\t};\n\n    \t\tuniforms = {\n    \t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n    \t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n    \t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n    \t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n    \t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n    \t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n    \t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n    \t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n    \t\t};\n\n    \t}\n\n    \t/*\n    \t * Render lens flares\n    \t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n    \t *         reads these back and calculates occlusion.\n    \t */\n\n    \tthis.render = function ( scene, camera, viewport ) {\n\n    \t\tif ( flares.length === 0 ) return;\n\n    \t\tvar tempPosition = new Vector3();\n\n    \t\tvar invAspect = viewport.w / viewport.z,\n    \t\t\thalfViewportWidth = viewport.z * 0.5,\n    \t\t\thalfViewportHeight = viewport.w * 0.5;\n\n    \t\tvar size = 16 / viewport.w,\n    \t\t\tscale = new Vector2( size * invAspect, size );\n\n    \t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n    \t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\n    \t\tvar validArea = new Box2();\n\n    \t\tvalidArea.min.set( 0, 0 );\n    \t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tinit();\n\n    \t\t}\n\n    \t\tgl.useProgram( program );\n\n    \t\tstate.initAttributes();\n    \t\tstate.enableAttribute( attributes.vertex );\n    \t\tstate.enableAttribute( attributes.uv );\n    \t\tstate.disableUnusedAttributes();\n\n    \t\t// loop through all lens flares to update their occlusion and positions\n    \t\t// setup gl and common used attribs/uniforms\n\n    \t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n    \t\tgl.uniform1i( uniforms.map, 1 );\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n    \t\tstate.disable( gl.CULL_FACE );\n    \t\tstate.setDepthWrite( false );\n\n    \t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n    \t\t\tsize = 16 / viewport.w;\n    \t\t\tscale.set( size * invAspect, size );\n\n    \t\t\t// calc object screen position\n\n    \t\t\tvar flare = flares[ i ];\n\n    \t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n    \t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n    \t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\n    \t\t\t// setup arrays for gl programs\n\n    \t\t\tscreenPosition.copy( tempPosition );\n\n    \t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n    \t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n    \t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n    \t\t\t// screen cull\n\n    \t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n    \t\t\t\t// save current RGB to temp texture\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n    \t\t\t\t// render pink quad\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n    \t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n    \t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n    \t\t\t\tstate.disable( gl.BLEND );\n    \t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n    \t\t\t\t// copy result to occlusionMap\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n    \t\t\t\t// restore graphics\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n    \t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n    \t\t\t\t// update object positions\n\n    \t\t\t\tflare.positionScreen.copy( screenPosition );\n\n    \t\t\t\tif ( flare.customUpdateCallback ) {\n\n    \t\t\t\t\tflare.customUpdateCallback( flare );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tflare.updateLensFlares();\n\n    \t\t\t\t}\n\n    \t\t\t\t// render flares\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n    \t\t\t\tstate.enable( gl.BLEND );\n\n    \t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n    \t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n    \t\t\t\t\t\tscreenPosition.x = sprite.x;\n    \t\t\t\t\t\tscreenPosition.y = sprite.y;\n    \t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n    \t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n    \t\t\t\t\t\tscale.x = size * invAspect;\n    \t\t\t\t\t\tscale.y = size;\n\n    \t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n    \t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n    \t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n    \t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n    \t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n    \t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n    \t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\n    \t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// restore gl\n\n    \t\tstate.enable( gl.CULL_FACE );\n    \t\tstate.enable( gl.DEPTH_TEST );\n    \t\tstate.setDepthWrite( true );\n\n    \t\trenderer.resetGLState();\n\n    \t};\n\n    \tfunction createProgram( shader ) {\n\n    \t\tvar program = gl.createProgram();\n\n    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n    \t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n    \t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n    \t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n    \t\tgl.compileShader( fragmentShader );\n    \t\tgl.compileShader( vertexShader );\n\n    \t\tgl.attachShader( program, fragmentShader );\n    \t\tgl.attachShader( program, vertexShader );\n\n    \t\tgl.linkProgram( program );\n\n    \t\treturn program;\n\n    \t}\n\n    }\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function SpritePlugin( renderer, sprites ) {\n\n    \tvar gl = renderer.context;\n    \tvar state = renderer.state;\n\n    \tvar vertexBuffer, elementBuffer;\n    \tvar program, attributes, uniforms;\n\n    \tvar texture;\n\n    \t// decompose matrixWorld\n\n    \tvar spritePosition = new Vector3();\n    \tvar spriteRotation = new Quaternion();\n    \tvar spriteScale = new Vector3();\n\n    \tfunction init() {\n\n    \t\tvar vertices = new Float32Array( [\n    \t\t\t- 0.5, - 0.5,  0, 0,\n    \t\t\t  0.5, - 0.5,  1, 0,\n    \t\t\t  0.5,   0.5,  1, 1,\n    \t\t\t- 0.5,   0.5,  0, 1\n    \t\t] );\n\n    \t\tvar faces = new Uint16Array( [\n    \t\t\t0, 1, 2,\n    \t\t\t0, 2, 3\n    \t\t] );\n\n    \t\tvertexBuffer  = gl.createBuffer();\n    \t\telementBuffer = gl.createBuffer();\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n    \t\tprogram = createProgram();\n\n    \t\tattributes = {\n    \t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n    \t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n    \t\t};\n\n    \t\tuniforms = {\n    \t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n    \t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n    \t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n    \t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n    \t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n    \t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n    \t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n    \t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n    \t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n    \t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n    \t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n    \t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n    \t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n    \t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n    \t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n    \t\t};\n\n    \t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\tcanvas.width = 8;\n    \t\tcanvas.height = 8;\n\n    \t\tvar context = canvas.getContext( '2d' );\n    \t\tcontext.fillStyle = 'white';\n    \t\tcontext.fillRect( 0, 0, 8, 8 );\n\n    \t\ttexture = new Texture( canvas );\n    \t\ttexture.needsUpdate = true;\n\n    \t}\n\n    \tthis.render = function ( scene, camera ) {\n\n    \t\tif ( sprites.length === 0 ) return;\n\n    \t\t// setup gl\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tinit();\n\n    \t\t}\n\n    \t\tgl.useProgram( program );\n\n    \t\tstate.initAttributes();\n    \t\tstate.enableAttribute( attributes.position );\n    \t\tstate.enableAttribute( attributes.uv );\n    \t\tstate.disableUnusedAttributes();\n\n    \t\tstate.disable( gl.CULL_FACE );\n    \t\tstate.enable( gl.BLEND );\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n    \t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n    \t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\tgl.uniform1i( uniforms.map, 0 );\n\n    \t\tvar oldFogType = 0;\n    \t\tvar sceneFogType = 0;\n    \t\tvar fog = scene.fog;\n\n    \t\tif ( fog ) {\n\n    \t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n    \t\t\tif ( (fog && fog.isFog) ) {\n\n    \t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n    \t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n    \t\t\t\toldFogType = 1;\n    \t\t\t\tsceneFogType = 1;\n\n    \t\t\t} else if ( (fog && fog.isFogExp2) ) {\n\n    \t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n    \t\t\t\toldFogType = 2;\n    \t\t\t\tsceneFogType = 2;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tgl.uniform1i( uniforms.fogType, 0 );\n    \t\t\toldFogType = 0;\n    \t\t\tsceneFogType = 0;\n\n    \t\t}\n\n\n    \t\t// update positions and sort\n\n    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n    \t\t\tvar sprite = sprites[ i ];\n\n    \t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n    \t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n    \t\t}\n\n    \t\tsprites.sort( painterSortStable );\n\n    \t\t// render all sprites\n\n    \t\tvar scale = [];\n\n    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n    \t\t\tvar sprite = sprites[ i ];\n    \t\t\tvar material = sprite.material;\n\n    \t\t\tif ( material.visible === false ) continue;\n\n    \t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n    \t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n    \t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n    \t\t\tscale[ 0 ] = spriteScale.x;\n    \t\t\tscale[ 1 ] = spriteScale.y;\n\n    \t\t\tvar fogType = 0;\n\n    \t\t\tif ( scene.fog && material.fog ) {\n\n    \t\t\t\tfogType = sceneFogType;\n\n    \t\t\t}\n\n    \t\t\tif ( oldFogType !== fogType ) {\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n    \t\t\t\toldFogType = fogType;\n\n    \t\t\t}\n\n    \t\t\tif ( material.map !== null ) {\n\n    \t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n    \t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n    \t\t\t} else {\n\n    \t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n    \t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n    \t\t\t}\n\n    \t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n    \t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n    \t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n    \t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n    \t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n    \t\t\tstate.setDepthTest( material.depthTest );\n    \t\t\tstate.setDepthWrite( material.depthWrite );\n\n    \t\t\tif ( material.map ) {\n\n    \t\t\t\trenderer.setTexture2D( material.map, 0 );\n\n    \t\t\t} else {\n\n    \t\t\t\trenderer.setTexture2D( texture, 0 );\n\n    \t\t\t}\n\n    \t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n    \t\t}\n\n    \t\t// restore gl\n\n    \t\tstate.enable( gl.CULL_FACE );\n\n    \t\trenderer.resetGLState();\n\n    \t};\n\n    \tfunction createProgram() {\n\n    \t\tvar program = gl.createProgram();\n\n    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n    \t\tgl.shaderSource( vertexShader, [\n\n    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n    \t\t\t'uniform mat4 modelViewMatrix;',\n    \t\t\t'uniform mat4 projectionMatrix;',\n    \t\t\t'uniform float rotation;',\n    \t\t\t'uniform vec2 scale;',\n    \t\t\t'uniform vec2 uvOffset;',\n    \t\t\t'uniform vec2 uvScale;',\n\n    \t\t\t'attribute vec2 position;',\n    \t\t\t'attribute vec2 uv;',\n\n    \t\t\t'varying vec2 vUV;',\n\n    \t\t\t'void main() {',\n\n    \t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n    \t\t\t\t'vec2 alignedPosition = position * scale;',\n\n    \t\t\t\t'vec2 rotatedPosition;',\n    \t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n    \t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n    \t\t\t\t'vec4 finalPosition;',\n\n    \t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n    \t\t\t\t'finalPosition.xy += rotatedPosition;',\n    \t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n    \t\t\t\t'gl_Position = finalPosition;',\n\n    \t\t\t'}'\n\n    \t\t].join( '\\n' ) );\n\n    \t\tgl.shaderSource( fragmentShader, [\n\n    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n    \t\t\t'uniform vec3 color;',\n    \t\t\t'uniform sampler2D map;',\n    \t\t\t'uniform float opacity;',\n\n    \t\t\t'uniform int fogType;',\n    \t\t\t'uniform vec3 fogColor;',\n    \t\t\t'uniform float fogDensity;',\n    \t\t\t'uniform float fogNear;',\n    \t\t\t'uniform float fogFar;',\n    \t\t\t'uniform float alphaTest;',\n\n    \t\t\t'varying vec2 vUV;',\n\n    \t\t\t'void main() {',\n\n    \t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n    \t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n    \t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n    \t\t\t\t'if ( fogType > 0 ) {',\n\n    \t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n    \t\t\t\t\t'float fogFactor = 0.0;',\n\n    \t\t\t\t\t'if ( fogType == 1 ) {',\n\n    \t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n    \t\t\t\t\t'} else {',\n\n    \t\t\t\t\t\t'const float LOG2 = 1.442695;',\n    \t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n    \t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n    \t\t\t\t\t'}',\n\n    \t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n    \t\t\t\t'}',\n\n    \t\t\t'}'\n\n    \t\t].join( '\\n' ) );\n\n    \t\tgl.compileShader( vertexShader );\n    \t\tgl.compileShader( fragmentShader );\n\n    \t\tgl.attachShader( program, vertexShader );\n    \t\tgl.attachShader( program, fragmentShader );\n\n    \t\tgl.linkProgram( program );\n\n    \t\treturn program;\n\n    \t}\n\n    \tfunction painterSortStable( a, b ) {\n\n    \t\tif ( a.renderOrder !== b.renderOrder ) {\n\n    \t\t\treturn a.renderOrder - b.renderOrder;\n\n    \t\t} else if ( a.z !== b.z ) {\n\n    \t\t\treturn b.z - a.z;\n\n    \t\t} else {\n\n    \t\t\treturn b.id - a.id;\n\n    \t\t}\n\n    \t}\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Material() {\n\n    \tObject.defineProperty( this, 'id', { value: MaterialIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Material';\n\n    \tthis.fog = true;\n    \tthis.lights = true;\n\n    \tthis.blending = NormalBlending;\n    \tthis.side = FrontSide;\n    \tthis.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n    \tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n    \tthis.opacity = 1;\n    \tthis.transparent = false;\n\n    \tthis.blendSrc = SrcAlphaFactor;\n    \tthis.blendDst = OneMinusSrcAlphaFactor;\n    \tthis.blendEquation = AddEquation;\n    \tthis.blendSrcAlpha = null;\n    \tthis.blendDstAlpha = null;\n    \tthis.blendEquationAlpha = null;\n\n    \tthis.depthFunc = LessEqualDepth;\n    \tthis.depthTest = true;\n    \tthis.depthWrite = true;\n\n    \tthis.clippingPlanes = null;\n    \tthis.clipShadows = false;\n\n    \tthis.colorWrite = true;\n\n    \tthis.precision = null; // override the renderer's default precision for this material\n\n    \tthis.polygonOffset = false;\n    \tthis.polygonOffsetFactor = 0;\n    \tthis.polygonOffsetUnits = 0;\n\n    \tthis.alphaTest = 0;\n    \tthis.premultipliedAlpha = false;\n\n    \tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n    \tthis.visible = true;\n\n    \tthis._needsUpdate = true;\n\n    }\n\n    Material.prototype = {\n\n    \tconstructor: Material,\n\n    \tisMaterial: true,\n\n    \tget needsUpdate() {\n\n    \t\treturn this._needsUpdate;\n\n    \t},\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.update();\n    \t\tthis._needsUpdate = value;\n\n    \t},\n\n    \tsetValues: function ( values ) {\n\n    \t\tif ( values === undefined ) return;\n\n    \t\tfor ( var key in values ) {\n\n    \t\t\tvar newValue = values[ key ];\n\n    \t\t\tif ( newValue === undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tvar currentValue = this[ key ];\n\n    \t\t\tif ( currentValue === undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tif ( (currentValue && currentValue.isColor) ) {\n\n    \t\t\t\tcurrentValue.set( newValue );\n\n    \t\t\t} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {\n\n    \t\t\t\tcurrentValue.copy( newValue );\n\n    \t\t\t} else if ( key === 'overdraw' ) {\n\n    \t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n    \t\t\t\tthis[ key ] = Number( newValue );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis[ key ] = newValue;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar isRoot = meta === undefined;\n\n    \t\tif ( isRoot ) {\n\n    \t\t\tmeta = {\n    \t\t\t\ttextures: {},\n    \t\t\t\timages: {}\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Material',\n    \t\t\t\tgenerator: 'Material.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard Material serialization\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( (this.color && this.color.isColor) ) data.color = this.color.getHex();\n\n    \t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n    \t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n    \t\tif ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();\n    \t\tif ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();\n    \t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\n    \t\tif ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;\n    \t\tif ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n    \t\tif ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n    \t\tif ( (this.bumpMap && this.bumpMap.isTexture) ) {\n\n    \t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n    \t\t\tdata.bumpScale = this.bumpScale;\n\n    \t\t}\n    \t\tif ( (this.normalMap && this.normalMap.isTexture) ) {\n\n    \t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n    \t\t\tdata.normalScale = this.normalScale.toArray();\n\n    \t\t}\n    \t\tif ( (this.displacementMap && this.displacementMap.isTexture) ) {\n\n    \t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n    \t\t\tdata.displacementScale = this.displacementScale;\n    \t\t\tdata.displacementBias = this.displacementBias;\n\n    \t\t}\n    \t\tif ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n    \t\tif ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n    \t\tif ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n    \t\tif ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n    \t\tif ( (this.envMap && this.envMap.isTexture) ) {\n\n    \t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n    \t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n    \t\t}\n\n    \t\tif ( this.size !== undefined ) data.size = this.size;\n    \t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n    \t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n    \t\tif ( this.shading !== SmoothShading ) data.shading = this.shading;\n    \t\tif ( this.side !== FrontSide ) data.side = this.side;\n    \t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n    \t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n    \t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n    \t\tdata.depthFunc = this.depthFunc;\n    \t\tdata.depthTest = this.depthTest;\n    \t\tdata.depthWrite = this.depthWrite;\n\n    \t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n    \t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n    \t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n    \t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n    \t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n    \t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n    \t\tdata.skinning = this.skinning;\n    \t\tdata.morphTargets = this.morphTargets;\n\n    \t\t// TODO: Copied from Object3D.toJSON\n\n    \t\tfunction extractFromCache( cache ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in cache ) {\n\n    \t\t\t\tvar data = cache[ key ];\n    \t\t\t\tdelete data.metadata;\n    \t\t\t\tvalues.push( data );\n\n    \t\t\t}\n\n    \t\t\treturn values;\n\n    \t\t}\n\n    \t\tif ( isRoot ) {\n\n    \t\t\tvar textures = extractFromCache( meta.textures );\n    \t\t\tvar images = extractFromCache( meta.images );\n\n    \t\t\tif ( textures.length > 0 ) data.textures = textures;\n    \t\t\tif ( images.length > 0 ) data.images = images;\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.name = source.name;\n\n    \t\tthis.fog = source.fog;\n    \t\tthis.lights = source.lights;\n\n    \t\tthis.blending = source.blending;\n    \t\tthis.side = source.side;\n    \t\tthis.shading = source.shading;\n    \t\tthis.vertexColors = source.vertexColors;\n\n    \t\tthis.opacity = source.opacity;\n    \t\tthis.transparent = source.transparent;\n\n    \t\tthis.blendSrc = source.blendSrc;\n    \t\tthis.blendDst = source.blendDst;\n    \t\tthis.blendEquation = source.blendEquation;\n    \t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n    \t\tthis.blendDstAlpha = source.blendDstAlpha;\n    \t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n    \t\tthis.depthFunc = source.depthFunc;\n    \t\tthis.depthTest = source.depthTest;\n    \t\tthis.depthWrite = source.depthWrite;\n\n    \t\tthis.colorWrite = source.colorWrite;\n\n    \t\tthis.precision = source.precision;\n\n    \t\tthis.polygonOffset = source.polygonOffset;\n    \t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n    \t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n    \t\tthis.alphaTest = source.alphaTest;\n\n    \t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n    \t\tthis.overdraw = source.overdraw;\n\n    \t\tthis.visible = source.visible;\n    \t\tthis.clipShadows = source.clipShadows;\n\n    \t\tvar srcPlanes = source.clippingPlanes,\n    \t\t\tdstPlanes = null;\n\n    \t\tif ( srcPlanes !== null ) {\n\n    \t\t\tvar n = srcPlanes.length;\n    \t\t\tdstPlanes = new Array( n );\n\n    \t\t\tfor ( var i = 0; i !== n; ++ i )\n    \t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n    \t\t}\n\n    \t\tthis.clippingPlanes = dstPlanes;\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdate: function () {\n\n    \t\tthis.dispatchEvent( { type: 'update' } );\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    };\n\n    Object.assign( Material.prototype, EventDispatcher.prototype );\n\n    var count$1 = 0;\n    function MaterialIdCount() { return count$1++; };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  defines: { \"label\" : \"value\" },\n     *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n     *\n     *  fragmentShader: <string>,\n     *  vertexShader: <string>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  lights: <bool>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function ShaderMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'ShaderMaterial';\n\n    \tthis.defines = {};\n    \tthis.uniforms = {};\n\n    \tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n    \tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n    \tthis.linewidth = 1;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false; // set to use scene fog\n    \tthis.lights = false; // set to use scene lights\n    \tthis.clipping = false; // set to use user-defined clipping planes\n\n    \tthis.skinning = false; // set to use skinning attribute streams\n    \tthis.morphTargets = false; // set to use morph targets\n    \tthis.morphNormals = false; // set to use morph normals\n\n    \tthis.extensions = {\n    \t\tderivatives: false, // set to use derivatives\n    \t\tfragDepth: false, // set to use fragment depth values\n    \t\tdrawBuffers: false, // set to use draw buffers\n    \t\tshaderTextureLOD: false // set to use shader texture LOD\n    \t};\n\n    \t// When rendered geometry doesn't include these attributes but the material does,\n    \t// use these default values in WebGL. This avoids errors when buffer data is missing.\n    \tthis.defaultAttributeValues = {\n    \t\t'color': [ 1, 1, 1 ],\n    \t\t'uv': [ 0, 0 ],\n    \t\t'uv2': [ 0, 0 ]\n    \t};\n\n    \tthis.index0AttributeName = undefined;\n\n    \tif ( parameters !== undefined ) {\n\n    \t\tif ( parameters.attributes !== undefined ) {\n\n    \t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n    \t\t}\n\n    \t\tthis.setValues( parameters );\n\n    \t}\n\n    }\n\n    ShaderMaterial.prototype = Object.create( Material.prototype );\n    ShaderMaterial.prototype.constructor = ShaderMaterial;\n\n    ShaderMaterial.prototype.isShaderMaterial = true;\n\n    ShaderMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.fragmentShader = source.fragmentShader;\n    \tthis.vertexShader = source.vertexShader;\n\n    \tthis.uniforms = exports.UniformsUtils.clone( source.uniforms );\n\n    \tthis.defines = source.defines;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \tthis.lights = source.lights;\n    \tthis.clipping = source.clipping;\n\n    \tthis.skinning = source.skinning;\n\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \tthis.extensions = source.extensions;\n\n    \treturn this;\n\n    };\n\n    ShaderMaterial.prototype.toJSON = function ( meta ) {\n\n    \tvar data = Material.prototype.toJSON.call( this, meta );\n\n    \tdata.uniforms = this.uniforms;\n    \tdata.vertexShader = this.vertexShader;\n    \tdata.fragmentShader = this.fragmentShader;\n\n    \treturn data;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author bhouston / https://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>\n     * }\n     */\n\n    function MeshDepthMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshDepthMaterial';\n\n    \tthis.depthPacking = BasicDepthPacking;\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n\n    \tthis.map = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshDepthMaterial.prototype = Object.create( Material.prototype );\n    MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n    MeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n    MeshDepthMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.depthPacking = source.depthPacking;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n\n    \tthis.map = source.map;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Box3( min, max ) {\n\n    \tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n    \tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n    }\n\n    Box3.prototype = {\n\n    \tconstructor: Box3,\n\n    \tisBox3: true,\n\n    \tset: function ( min, max ) {\n\n    \t\tthis.min.copy( min );\n    \t\tthis.max.copy( max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromArray: function ( array ) {\n\n    \t\tvar minX = + Infinity;\n    \t\tvar minY = + Infinity;\n    \t\tvar minZ = + Infinity;\n\n    \t\tvar maxX = - Infinity;\n    \t\tvar maxY = - Infinity;\n    \t\tvar maxZ = - Infinity;\n\n    \t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n    \t\t\tvar x = array[ i ];\n    \t\t\tvar y = array[ i + 1 ];\n    \t\t\tvar z = array[ i + 2 ];\n\n    \t\t\tif ( x < minX ) minX = x;\n    \t\t\tif ( y < minY ) minY = y;\n    \t\t\tif ( z < minZ ) minZ = z;\n\n    \t\t\tif ( x > maxX ) maxX = x;\n    \t\t\tif ( y > maxY ) maxY = y;\n    \t\t\tif ( z > maxZ ) maxZ = z;\n\n    \t\t}\n\n    \t\tthis.min.set( minX, minY, minZ );\n    \t\tthis.max.set( maxX, maxY, maxZ );\n\n    \t},\n\n    \tsetFromPoints: function ( points ) {\n\n    \t\tthis.makeEmpty();\n\n    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\tthis.expandByPoint( points[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCenterAndSize: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function setFromCenterAndSize( center, size ) {\n\n    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n    \t\t\tthis.min.copy( center ).sub( halfSize );\n    \t\t\tthis.max.copy( center ).add( halfSize );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tsetFromObject: function () {\n\n    \t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n    \t\t// accounting for both the object's, and children's, world transforms\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function setFromObject( object ) {\n\n    \t\t\tvar scope = this;\n\n    \t\t\tobject.updateMatrixWorld( true );\n\n    \t\t\tthis.makeEmpty();\n\n    \t\t\tobject.traverse( function ( node ) {\n\n    \t\t\t\tvar geometry = node.geometry;\n\n    \t\t\t\tif ( geometry !== undefined ) {\n\n    \t\t\t\t\tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\t\t\tvar vertices = geometry.vertices;\n\n    \t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n    \t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n    \t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n    \t\t\t\t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\t\t\t\tvar array, offset, stride;\n\n    \t\t\t\t\t\t\tif ( (attribute && attribute.isInterleavedBufferAttribute) ) {\n\n    \t\t\t\t\t\t\t\tarray = attribute.data.array;\n    \t\t\t\t\t\t\t\toffset = attribute.offset;\n    \t\t\t\t\t\t\t\tstride = attribute.data.stride;\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tarray = attribute.array;\n    \t\t\t\t\t\t\t\toffset = 0;\n    \t\t\t\t\t\t\t\tstride = 3;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tfor ( var i = offset, il = array.length; i < il; i += stride ) {\n\n    \t\t\t\t\t\t\t\tv1.fromArray( array, i );\n    \t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n    \t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( box ) {\n\n    \t\tthis.min.copy( box.min );\n    \t\tthis.max.copy( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeEmpty: function () {\n\n    \t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n    \t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n    \t\treturn this;\n\n    \t},\n\n    \tisEmpty: function () {\n\n    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tgetSize: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\n    \t},\n\n    \texpandByPoint: function ( point ) {\n\n    \t\tthis.min.min( point );\n    \t\tthis.max.max( point );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByVector: function ( vector ) {\n\n    \t\tthis.min.sub( vector );\n    \t\tthis.max.add( vector );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByScalar: function ( scalar ) {\n\n    \t\tthis.min.addScalar( - scalar );\n    \t\tthis.max.addScalar( scalar );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n    \t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n    \t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tcontainsBox: function ( box ) {\n\n    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n    \t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n    \t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tgetParameter: function ( point, optionalTarget ) {\n\n    \t\t// This can potentially have a divide by zero if the box\n    \t\t// has a size dimension of 0.\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn result.set(\n    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n    \t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n    \t\t);\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\t// using 6 splitting planes to rule out intersections.\n\n    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n    \t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n    \t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tintersectsSphere: ( function () {\n\n    \t\tvar closestPoint;\n\n    \t\treturn function intersectsSphere( sphere ) {\n\n    \t\t\tif ( closestPoint === undefined ) closestPoint = new Vector3();\n\n    \t\t\t// Find the point on the AABB closest to the sphere center.\n    \t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n    \t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n    \t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n    \t\t};\n\n    \t} )(),\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// We compute the minimum and maximum dot product values. If those values\n    \t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n    \t\tvar min, max;\n\n    \t\tif ( plane.normal.x > 0 ) {\n\n    \t\t\tmin = plane.normal.x * this.min.x;\n    \t\t\tmax = plane.normal.x * this.max.x;\n\n    \t\t} else {\n\n    \t\t\tmin = plane.normal.x * this.max.x;\n    \t\t\tmax = plane.normal.x * this.min.x;\n\n    \t\t}\n\n    \t\tif ( plane.normal.y > 0 ) {\n\n    \t\t\tmin += plane.normal.y * this.min.y;\n    \t\t\tmax += plane.normal.y * this.max.y;\n\n    \t\t} else {\n\n    \t\t\tmin += plane.normal.y * this.max.y;\n    \t\t\tmax += plane.normal.y * this.min.y;\n\n    \t\t}\n\n    \t\tif ( plane.normal.z > 0 ) {\n\n    \t\t\tmin += plane.normal.z * this.min.z;\n    \t\t\tmax += plane.normal.z * this.max.z;\n\n    \t\t} else {\n\n    \t\t\tmin += plane.normal.z * this.max.z;\n    \t\t\tmax += plane.normal.z * this.min.z;\n\n    \t\t}\n\n    \t\treturn ( min <= plane.constant && max >= plane.constant );\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\n    \t},\n\n    \tdistanceToPoint: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function distanceToPoint( point ) {\n\n    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n    \t\t\treturn clampedPoint.sub( point ).length();\n\n    \t\t};\n\n    \t}(),\n\n    \tgetBoundingSphere: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function getBoundingSphere( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Sphere();\n\n    \t\t\tthis.getCenter( result.center );\n\n    \t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tintersect: function ( box ) {\n\n    \t\tthis.min.max( box.min );\n    \t\tthis.max.min( box.max );\n\n    \t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n    \t\tif( this.isEmpty() ) this.makeEmpty();\n\n    \t\treturn this;\n\n    \t},\n\n    \tunion: function ( box ) {\n\n    \t\tthis.min.min( box.min );\n    \t\tthis.max.max( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function () {\n\n    \t\tvar points = [\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3()\n    \t\t];\n\n    \t\treturn function applyMatrix4( matrix ) {\n\n    \t\t\t// transform of empty box is an empty box.\n    \t\t\tif( this.isEmpty() ) return this;\n\n    \t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n    \t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n    \t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n    \t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n    \t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n    \t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n    \t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n    \t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n    \t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n    \t\t\tthis.setFromPoints( points );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.min.add( offset );\n    \t\tthis.max.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( box ) {\n\n    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Sphere( center, radius ) {\n\n    \tthis.center = ( center !== undefined ) ? center : new Vector3();\n    \tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n    }\n\n    Sphere.prototype = {\n\n    \tconstructor: Sphere,\n\n    \tset: function ( center, radius ) {\n\n    \t\tthis.center.copy( center );\n    \t\tthis.radius = radius;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPoints: function () {\n\n    \t\tvar box = new Box3();\n\n    \t\treturn function setFromPoints( points, optionalCenter ) {\n\n    \t\t\tvar center = this.center;\n\n    \t\t\tif ( optionalCenter !== undefined ) {\n\n    \t\t\t\tcenter.copy( optionalCenter );\n\n    \t\t\t} else {\n\n    \t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\n    \t\t\t}\n\n    \t\t\tvar maxRadiusSq = 0;\n\n    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n    \t\t\t}\n\n    \t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( sphere ) {\n\n    \t\tthis.center.copy( sphere.center );\n    \t\tthis.radius = sphere.radius;\n\n    \t\treturn this;\n\n    \t},\n\n    \tempty: function () {\n\n    \t\treturn ( this.radius <= 0 );\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n    \t},\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\tvar radiusSum = this.radius + sphere.radius;\n\n    \t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\treturn box.intersectsSphere( this );\n\n    \t},\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// We use the following equation to compute the signed distance from\n    \t\t// the center of the sphere to the plane.\n    \t\t//\n    \t\t// distance = q * n - d\n    \t\t//\n    \t\t// If this distance is greater than the radius of the sphere,\n    \t\t// then there is no intersection.\n\n    \t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tresult.copy( point );\n\n    \t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n    \t\t\tresult.sub( this.center ).normalize();\n    \t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \tgetBoundingBox: function ( optionalTarget ) {\n\n    \t\tvar box = optionalTarget || new Box3();\n\n    \t\tbox.set( this.center, this.center );\n    \t\tbox.expandByScalar( this.radius );\n\n    \t\treturn box;\n\n    \t},\n\n    \tapplyMatrix4: function ( matrix ) {\n\n    \t\tthis.center.applyMatrix4( matrix );\n    \t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.center.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( sphere ) {\n\n    \t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     * @author tschw\n     */\n\n    function Matrix3() {\n\n    \tthis.elements = new Float32Array( [\n\n    \t\t1, 0, 0,\n    \t\t0, 1, 0,\n    \t\t0, 0, 1\n\n    \t] );\n\n    \tif ( arguments.length > 0 ) {\n\n    \t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n    \t}\n\n    }\n\n    Matrix3.prototype = {\n\n    \tconstructor: Matrix3,\n\n    \tisMatrix3: true,\n\n    \tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n    \t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n    \t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n    \t\treturn this;\n\n    \t},\n\n    \tidentity: function () {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0,\n    \t\t\t0, 1, 0,\n    \t\t\t0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().fromArray( this.elements );\n\n    \t},\n\n    \tcopy: function ( m ) {\n\n    \t\tvar me = m.elements;\n\n    \t\tthis.set(\n\n    \t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n    \t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n    \t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrix4: function( m ) {\n\n    \t\tvar me = m.elements;\n\n    \t\tthis.set(\n\n    \t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n    \t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n    \t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyToVector3Array: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToVector3Array( array, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = array.length;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n    \t\t\t\tv1.fromArray( array, j );\n    \t\t\t\tv1.applyMatrix3( this );\n    \t\t\t\tv1.toArray( array, j );\n\n    \t\t\t}\n\n    \t\t\treturn array;\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyToBuffer: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n    \t\t\t\tv1.x = buffer.getX( j );\n    \t\t\t\tv1.y = buffer.getY( j );\n    \t\t\t\tv1.z = buffer.getZ( j );\n\n    \t\t\t\tv1.applyMatrix3( this );\n\n    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n    \t\t\t}\n\n    \t\t\treturn buffer;\n\n    \t\t};\n\n    \t}(),\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n    \t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n    \t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdeterminant: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n    \t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n    \t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n    \t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n    \t},\n\n    \tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n    \t\tif ( (matrix && matrix.isMatrix4) ) {\n\n    \t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\n    \t\t}\n\n    \t\tvar me = matrix.elements,\n    \t\t\tte = this.elements,\n\n    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n    \t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n    \t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n    \t\t\tt11 = n33 * n22 - n32 * n23,\n    \t\t\tt12 = n32 * n13 - n33 * n12,\n    \t\t\tt13 = n23 * n12 - n22 * n13,\n\n    \t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n    \t\tif ( det === 0 ) {\n\n    \t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n    \t\t\tif ( throwOnDegenerate === true ) {\n\n    \t\t\t\tthrow new Error( msg );\n\n    \t\t\t} else {\n\n    \t\t\t\tconsole.warn( msg );\n\n    \t\t\t}\n\n    \t\t\treturn this.identity();\n    \t\t}\n\n    \t\tvar detInv = 1 / det;\n\n    \t\tte[ 0 ] = t11 * detInv;\n    \t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n    \t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n    \t\tte[ 3 ] = t12 * detInv;\n    \t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n    \t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n    \t\tte[ 6 ] = t13 * detInv;\n    \t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n    \t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranspose: function () {\n\n    \t\tvar tmp, m = this.elements;\n\n    \t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n    \t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n    \t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n    \t\treturn this;\n\n    \t},\n\n    \tflattenToArrayOffset: function ( array, offset ) {\n\n    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n    \t\t\t\t\"- just use .toArray instead.\" );\n\n    \t\treturn this.toArray( array, offset );\n\n    \t},\n\n    \tgetNormalMatrix: function ( matrix4 ) {\n\n    \t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n    \t},\n\n    \ttransposeIntoArray: function ( r ) {\n\n    \t\tvar m = this.elements;\n\n    \t\tr[ 0 ] = m[ 0 ];\n    \t\tr[ 1 ] = m[ 3 ];\n    \t\tr[ 2 ] = m[ 6 ];\n    \t\tr[ 3 ] = m[ 1 ];\n    \t\tr[ 4 ] = m[ 4 ];\n    \t\tr[ 5 ] = m[ 7 ];\n    \t\tr[ 6 ] = m[ 2 ];\n    \t\tr[ 7 ] = m[ 5 ];\n    \t\tr[ 8 ] = m[ 8 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tfor( var i = 0; i < 9; i ++ ) {\n\n    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar te = this.elements;\n\n    \t\tarray[ offset ] = te[ 0 ];\n    \t\tarray[ offset + 1 ] = te[ 1 ];\n    \t\tarray[ offset + 2 ] = te[ 2 ];\n\n    \t\tarray[ offset + 3 ] = te[ 3 ];\n    \t\tarray[ offset + 4 ] = te[ 4 ];\n    \t\tarray[ offset + 5 ] = te[ 5 ];\n\n    \t\tarray[ offset + 6 ] = te[ 6 ];\n    \t\tarray[ offset + 7 ] = te[ 7 ];\n    \t\tarray[ offset + 8 ]  = te[ 8 ];\n\n    \t\treturn array;\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Plane( normal, constant ) {\n\n    \tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n    \tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n    }\n\n    Plane.prototype = {\n\n    \tconstructor: Plane,\n\n    \tset: function ( normal, constant ) {\n\n    \t\tthis.normal.copy( normal );\n    \t\tthis.constant = constant;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponents: function ( x, y, z, w ) {\n\n    \t\tthis.normal.set( x, y, z );\n    \t\tthis.constant = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n    \t\tthis.normal.copy( normal );\n    \t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCoplanarPoints: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar v2 = new Vector3();\n\n    \t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n    \t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n    \t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n    \t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( plane ) {\n\n    \t\tthis.normal.copy( plane.normal );\n    \t\tthis.constant = plane.constant;\n\n    \t\treturn this;\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n    \t\tvar inverseNormalLength = 1.0 / this.normal.length();\n    \t\tthis.normal.multiplyScalar( inverseNormalLength );\n    \t\tthis.constant *= inverseNormalLength;\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.constant *= - 1;\n    \t\tthis.normal.negate();\n\n    \t\treturn this;\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn this.normal.dot( point ) + this.constant;\n\n    \t},\n\n    \tdistanceToSphere: function ( sphere ) {\n\n    \t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n    \t},\n\n    \tprojectPoint: function ( point, optionalTarget ) {\n\n    \t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n    \t},\n\n    \torthoPoint: function ( point, optionalTarget ) {\n\n    \t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n    \t},\n\n    \tintersectLine: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function intersectLine( line, optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tvar direction = line.delta( v1 );\n\n    \t\t\tvar denominator = this.normal.dot( direction );\n\n    \t\t\tif ( denominator === 0 ) {\n\n    \t\t\t\t// line is coplanar, return origin\n    \t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n    \t\t\t\t\treturn result.copy( line.start );\n\n    \t\t\t\t}\n\n    \t\t\t\t// Unsure if this is the correct method to handle this case.\n    \t\t\t\treturn undefined;\n\n    \t\t\t}\n\n    \t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n    \t\t\tif ( t < 0 || t > 1 ) {\n\n    \t\t\t\treturn undefined;\n\n    \t\t\t}\n\n    \t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsLine: function ( line ) {\n\n    \t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n    \t\tvar startSign = this.distanceToPoint( line.start );\n    \t\tvar endSign = this.distanceToPoint( line.end );\n\n    \t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\treturn box.intersectsPlane( this );\n\n    \t},\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\treturn sphere.intersectsPlane( this );\n\n    \t},\n\n    \tcoplanarPoint: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n    \t},\n\n    \tapplyMatrix4: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar m1 = new Matrix3();\n\n    \t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n    \t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n    \t\t\t// transform normal based on theory here:\n    \t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n    \t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n    \t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n    \t\t\tthis.constant = - referencePoint.dot( normal );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.constant = this.constant - offset.dot( this.normal );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( plane ) {\n\n    \t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author bhouston / http://clara.io\n     */\n\n    function Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n    \tthis.planes = [\n\n    \t\t( p0 !== undefined ) ? p0 : new Plane(),\n    \t\t( p1 !== undefined ) ? p1 : new Plane(),\n    \t\t( p2 !== undefined ) ? p2 : new Plane(),\n    \t\t( p3 !== undefined ) ? p3 : new Plane(),\n    \t\t( p4 !== undefined ) ? p4 : new Plane(),\n    \t\t( p5 !== undefined ) ? p5 : new Plane()\n\n    \t];\n\n    }\n\n    Frustum.prototype = {\n\n    \tconstructor: Frustum,\n\n    \tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tplanes[ 0 ].copy( p0 );\n    \t\tplanes[ 1 ].copy( p1 );\n    \t\tplanes[ 2 ].copy( p2 );\n    \t\tplanes[ 3 ].copy( p3 );\n    \t\tplanes[ 4 ].copy( p4 );\n    \t\tplanes[ 5 ].copy( p5 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( frustum ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrix: function ( m ) {\n\n    \t\tvar planes = this.planes;\n    \t\tvar me = m.elements;\n    \t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n    \t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n    \t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n    \t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n    \t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n    \t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n    \t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n    \t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n    \t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n    \t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \tintersectsObject: function () {\n\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function intersectsObject( object ) {\n\n    \t\t\tvar geometry = object.geometry;\n\n    \t\t\tif ( geometry.boundingSphere === null )\n    \t\t\t\tgeometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere )\n    \t\t\t\t.applyMatrix4( object.matrixWorld );\n\n    \t\t\treturn this.intersectsSphere( sphere );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSprite: function () {\n\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function intersectsSprite( sprite ) {\n\n    \t\t\tsphere.center.set( 0, 0, 0 );\n    \t\t\tsphere.radius = 0.7071067811865476;\n    \t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n    \t\t\treturn this.intersectsSphere( sphere );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\tvar planes = this.planes;\n    \t\tvar center = sphere.center;\n    \t\tvar negRadius = - sphere.radius;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n    \t\t\tif ( distance < negRadius ) {\n\n    \t\t\t\treturn false;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tintersectsBox: function () {\n\n    \t\tvar p1 = new Vector3(),\n    \t\t\tp2 = new Vector3();\n\n    \t\treturn function intersectsBox( box ) {\n\n    \t\t\tvar planes = this.planes;\n\n    \t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\n    \t\t\t\tvar plane = planes[ i ];\n\n    \t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n    \t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n    \t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n    \t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n    \t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n    \t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n    \t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n    \t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n    \t\t\t\t// if both outside plane, no intersection\n\n    \t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n    \t\t\t\t\treturn false;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn true;\n\n    \t\t};\n\n    \t}(),\n\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n    \t\t\t\treturn false;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t}\n\n    };\n\n    function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {\n\n    \tvar _gl = _renderer.context,\n    \t_state = _renderer.state,\n    \t_frustum = new Frustum(),\n    \t_projScreenMatrix = new Matrix4(),\n\n    \t_lightShadows = _lights.shadows,\n\n    \t_shadowMapSize = new Vector2(),\n    \t_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\n    \t_lookTarget = new Vector3(),\n    \t_lightPositionWorld = new Vector3(),\n\n    \t_renderList = [],\n\n    \t_MorphingFlag = 1,\n    \t_SkinningFlag = 2,\n\n    \t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n    \t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n    \t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n    \t_materialCache = {};\n\n    \tvar cubeDirections = [\n    \t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n    \t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n    \t];\n\n    \tvar cubeUps = [\n    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n    \t];\n\n    \tvar cube2DViewPorts = [\n    \t\tnew Vector4(), new Vector4(), new Vector4(),\n    \t\tnew Vector4(), new Vector4(), new Vector4()\n    \t];\n\n    \t// init\n\n    \tvar depthMaterialTemplate = new MeshDepthMaterial();\n    \tdepthMaterialTemplate.depthPacking = RGBADepthPacking;\n    \tdepthMaterialTemplate.clipping = true;\n\n    \tvar distanceShader = ShaderLib[ \"distanceRGBA\" ];\n    \tvar distanceUniforms = exports.UniformsUtils.clone( distanceShader.uniforms );\n\n    \tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n    \t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n    \t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n    \t\tvar depthMaterial = depthMaterialTemplate.clone();\n    \t\tdepthMaterial.morphTargets = useMorphing;\n    \t\tdepthMaterial.skinning = useSkinning;\n\n    \t\t_depthMaterials[ i ] = depthMaterial;\n\n    \t\tvar distanceMaterial = new ShaderMaterial( {\n    \t\t\tdefines: {\n    \t\t\t\t'USE_SHADOWMAP': ''\n    \t\t\t},\n    \t\t\tuniforms: distanceUniforms,\n    \t\t\tvertexShader: distanceShader.vertexShader,\n    \t\t\tfragmentShader: distanceShader.fragmentShader,\n    \t\t\tmorphTargets: useMorphing,\n    \t\t\tskinning: useSkinning,\n    \t\t\tclipping: true\n    \t\t} );\n\n    \t\t_distanceMaterials[ i ] = distanceMaterial;\n\n    \t}\n\n    \t//\n\n    \tvar scope = this;\n\n    \tthis.enabled = false;\n\n    \tthis.autoUpdate = true;\n    \tthis.needsUpdate = false;\n\n    \tthis.type = PCFShadowMap;\n\n    \tthis.renderReverseSided = true;\n    \tthis.renderSingleSided = true;\n\n    \tthis.render = function ( scene, camera ) {\n\n    \t\tif ( scope.enabled === false ) return;\n    \t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n    \t\tif ( _lightShadows.length === 0 ) return;\n\n    \t\t// Set GL state for depth map.\n    \t\t_state.clearColor( 1, 1, 1, 1 );\n    \t\t_state.disable( _gl.BLEND );\n    \t\t_state.setDepthTest( true );\n    \t\t_state.setScissorTest( false );\n\n    \t\t// render depth map\n\n    \t\tvar faceCount, isPointLight;\n\n    \t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\n    \t\t\tvar light = _lightShadows[ i ];\n    \t\t\tvar shadow = light.shadow;\n\n    \t\t\tif ( shadow === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tvar shadowCamera = shadow.camera;\n\n    \t\t\t_shadowMapSize.copy( shadow.mapSize );\n    \t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n    \t\t\tif ( (light && light.isPointLight) ) {\n\n    \t\t\t\tfaceCount = 6;\n    \t\t\t\tisPointLight = true;\n\n    \t\t\t\tvar vpWidth = _shadowMapSize.x;\n    \t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n    \t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n    \t\t\t\t// following orientation:\n    \t\t\t\t//\n    \t\t\t\t//  xzXZ\n    \t\t\t\t//   y Y\n    \t\t\t\t//\n    \t\t\t\t// X - Positive x direction\n    \t\t\t\t// x - Negative x direction\n    \t\t\t\t// Y - Positive y direction\n    \t\t\t\t// y - Negative y direction\n    \t\t\t\t// Z - Positive z direction\n    \t\t\t\t// z - Negative z direction\n\n    \t\t\t\t// positive X\n    \t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// negative X\n    \t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// positive Z\n    \t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// negative Z\n    \t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// positive Y\n    \t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n    \t\t\t\t// negative Y\n    \t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n    \t\t\t\t_shadowMapSize.x *= 4.0;\n    \t\t\t\t_shadowMapSize.y *= 2.0;\n\n    \t\t\t} else {\n\n    \t\t\t\tfaceCount = 1;\n    \t\t\t\tisPointLight = false;\n\n    \t\t\t}\n\n    \t\t\tif ( shadow.map === null ) {\n\n    \t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n    \t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n    \t\t\t\tshadowCamera.updateProjectionMatrix();\n\n    \t\t\t}\n\n    \t\t\tif ( (shadow && shadow.isSpotLightShadow) ) {\n\n    \t\t\t\tshadow.update( light );\n\n    \t\t\t}\n\n    \t\t\tvar shadowMap = shadow.map;\n    \t\t\tvar shadowMatrix = shadow.matrix;\n\n    \t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n    \t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n    \t\t\t_renderer.setRenderTarget( shadowMap );\n    \t\t\t_renderer.clear();\n\n    \t\t\t// render shadow map for each cube face (if omni-directional) or\n    \t\t\t// run a single pass if not\n\n    \t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n    \t\t\t\tif ( isPointLight ) {\n\n    \t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n    \t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n    \t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n    \t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n    \t\t\t\t\t_state.viewport( vpDimensions );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n    \t\t\t\t}\n\n    \t\t\t\tshadowCamera.updateMatrixWorld();\n    \t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\n    \t\t\t\t// compute shadow matrix\n\n    \t\t\t\tshadowMatrix.set(\n    \t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n    \t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n    \t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n    \t\t\t\t\t0.0, 0.0, 0.0, 1.0\n    \t\t\t\t);\n\n    \t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n    \t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n    \t\t\t\t// update camera matrices and frustum\n\n    \t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n    \t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n    \t\t\t\t// set object matrices & frustum culling\n\n    \t\t\t\t_renderList.length = 0;\n\n    \t\t\t\tprojectObject( scene, camera, shadowCamera );\n\n    \t\t\t\t// render shadow map\n    \t\t\t\t// render regular objects\n\n    \t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar object = _renderList[ j ];\n    \t\t\t\t\tvar geometry = _objects.update( object );\n    \t\t\t\t\tvar material = object.material;\n\n    \t\t\t\t\tif ( (material && material.isMultiMaterial) ) {\n\n    \t\t\t\t\t\tvar groups = geometry.groups;\n    \t\t\t\t\t\tvar materials = material.materials;\n\n    \t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n    \t\t\t\t\t\t\tvar group = groups[ k ];\n    \t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n    \t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n    \t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n    \t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n    \t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Restore GL state.\n    \t\tvar clearColor = _renderer.getClearColor(),\n    \t\tclearAlpha = _renderer.getClearAlpha();\n    \t\t_renderer.setClearColor( clearColor, clearAlpha );\n\n    \t\tscope.needsUpdate = false;\n\n    \t};\n\n    \tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tvar result = null;\n\n    \t\tvar materialVariants = _depthMaterials;\n    \t\tvar customMaterial = object.customDepthMaterial;\n\n    \t\tif ( isPointLight ) {\n\n    \t\t\tmaterialVariants = _distanceMaterials;\n    \t\t\tcustomMaterial = object.customDistanceMaterial;\n\n    \t\t}\n\n    \t\tif ( ! customMaterial ) {\n\n    \t\t\tvar useMorphing = false;\n\n    \t\t\tif ( material.morphTargets ) {\n\n    \t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n    \t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n    \t\t\tvar variantIndex = 0;\n\n    \t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n    \t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n    \t\t\tresult = materialVariants[ variantIndex ];\n\n    \t\t} else {\n\n    \t\t\tresult = customMaterial;\n\n    \t\t}\n\n    \t\tif ( _renderer.localClippingEnabled &&\n    \t\t\t material.clipShadows === true &&\n    \t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n    \t\t\t// in this case we need a unique material instance reflecting the\n    \t\t\t// appropriate state\n\n    \t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n    \t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n    \t\t\tif ( materialsForVariant === undefined ) {\n\n    \t\t\t\tmaterialsForVariant = {};\n    \t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n    \t\t\t}\n\n    \t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n    \t\t\tif ( cachedMaterial === undefined ) {\n\n    \t\t\t\tcachedMaterial = result.clone();\n    \t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n    \t\t\t}\n\n    \t\t\tresult = cachedMaterial;\n\n    \t\t}\n\n    \t\tresult.visible = material.visible;\n    \t\tresult.wireframe = material.wireframe;\n\n    \t\tvar side = material.side;\n\n    \t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\n    \t\t\tside = FrontSide;\n\n    \t\t}\n\n    \t\tif ( scope.renderReverseSided ) {\n\n    \t\t\tif ( side === FrontSide ) side = BackSide;\n    \t\t\telse if ( side === BackSide ) side = FrontSide;\n\n    \t\t}\n\n    \t\tresult.side = side;\n\n    \t\tresult.clipShadows = material.clipShadows;\n    \t\tresult.clippingPlanes = material.clippingPlanes;\n\n    \t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n    \t\tresult.linewidth = material.linewidth;\n\n    \t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\n    \t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    \tfunction projectObject( object, camera, shadowCamera ) {\n\n    \t\tif ( object.visible === false ) return;\n\n    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\n    \t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n    \t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\n    \t\t\t\tvar material = object.material;\n\n    \t\t\t\tif ( material.visible === true ) {\n\n    \t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n    \t\t\t\t\t_renderList.push( object );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Ray( origin, direction ) {\n\n    \tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n    \tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n    }\n\n    Ray.prototype = {\n\n    \tconstructor: Ray,\n\n    \tset: function ( origin, direction ) {\n\n    \t\tthis.origin.copy( origin );\n    \t\tthis.direction.copy( direction );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( ray ) {\n\n    \t\tthis.origin.copy( ray.origin );\n    \t\tthis.direction.copy( ray.direction );\n\n    \t\treturn this;\n\n    \t},\n\n    \tat: function ( t, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n    \t},\n\n    \tlookAt: function ( v ) {\n\n    \t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \trecast: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function recast( t ) {\n\n    \t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclosestPointToPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\tresult.subVectors( point, this.origin );\n    \t\tvar directionDistance = result.dot( this.direction );\n\n    \t\tif ( directionDistance < 0 ) {\n\n    \t\t\treturn result.copy( this.origin );\n\n    \t\t}\n\n    \t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n    \t},\n\n    \tdistanceSqToPoint: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function distanceSqToPoint( point ) {\n\n    \t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n    \t\t\t// point behind the ray\n\n    \t\t\tif ( directionDistance < 0 ) {\n\n    \t\t\t\treturn this.origin.distanceToSquared( point );\n\n    \t\t\t}\n\n    \t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n    \t\t\treturn v1.distanceToSquared( point );\n\n    \t\t};\n\n    \t}(),\n\n    \tdistanceSqToSegment: function () {\n\n    \t\tvar segCenter = new Vector3();\n    \t\tvar segDir = new Vector3();\n    \t\tvar diff = new Vector3();\n\n    \t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n    \t\t\t// It returns the min distance between the ray and the segment\n    \t\t\t// defined by v0 and v1\n    \t\t\t// It can also set two optional targets :\n    \t\t\t// - The closest point on the ray\n    \t\t\t// - The closest point on the segment\n\n    \t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n    \t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n    \t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n    \t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n    \t\t\tvar a01 = - this.direction.dot( segDir );\n    \t\t\tvar b0 = diff.dot( this.direction );\n    \t\t\tvar b1 = - diff.dot( segDir );\n    \t\t\tvar c = diff.lengthSq();\n    \t\t\tvar det = Math.abs( 1 - a01 * a01 );\n    \t\t\tvar s0, s1, sqrDist, extDet;\n\n    \t\t\tif ( det > 0 ) {\n\n    \t\t\t\t// The ray and segment are not parallel.\n\n    \t\t\t\ts0 = a01 * b1 - b0;\n    \t\t\t\ts1 = a01 * b0 - b1;\n    \t\t\t\textDet = segExtent * det;\n\n    \t\t\t\tif ( s0 >= 0 ) {\n\n    \t\t\t\t\tif ( s1 >= - extDet ) {\n\n    \t\t\t\t\t\tif ( s1 <= extDet ) {\n\n    \t\t\t\t\t\t\t// region 0\n    \t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n    \t\t\t\t\t\t\tvar invDet = 1 / det;\n    \t\t\t\t\t\t\ts0 *= invDet;\n    \t\t\t\t\t\t\ts1 *= invDet;\n    \t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t// region 1\n\n    \t\t\t\t\t\t\ts1 = segExtent;\n    \t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// region 5\n\n    \t\t\t\t\t\ts1 = - segExtent;\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( s1 <= - extDet ) {\n\n    \t\t\t\t\t\t// region 4\n\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t} else if ( s1 <= extDet ) {\n\n    \t\t\t\t\t\t// region 3\n\n    \t\t\t\t\t\ts0 = 0;\n    \t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// region 2\n\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// Ray and segment are parallel.\n\n    \t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n    \t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t}\n\n    \t\t\tif ( optionalPointOnRay ) {\n\n    \t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n    \t\t\t}\n\n    \t\t\tif ( optionalPointOnSegment ) {\n\n    \t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n    \t\t\t}\n\n    \t\t\treturn sqrDist;\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectSphere: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n    \t\t\tv1.subVectors( sphere.center, this.origin );\n    \t\t\tvar tca = v1.dot( this.direction );\n    \t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n    \t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n    \t\t\tif ( d2 > radius2 ) return null;\n\n    \t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n    \t\t\t// t0 = first intersect point - entrance on front of sphere\n    \t\t\tvar t0 = tca - thc;\n\n    \t\t\t// t1 = second intersect point - exit point on back of sphere\n    \t\t\tvar t1 = tca + thc;\n\n    \t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n    \t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n    \t\t\t// test to see if t0 is behind the ray:\n    \t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n    \t\t\t// in order to always return an intersect point that is in front of the ray.\n    \t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n    \t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n    \t\t\treturn this.at( t0, optionalTarget );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n    \t},\n\n    \tdistanceToPlane: function ( plane ) {\n\n    \t\tvar denominator = plane.normal.dot( this.direction );\n\n    \t\tif ( denominator === 0 ) {\n\n    \t\t\t// line is coplanar, return origin\n    \t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n    \t\t\t\treturn 0;\n\n    \t\t\t}\n\n    \t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n    \t\t// Return if the ray never intersects the plane\n\n    \t\treturn t >= 0 ? t :  null;\n\n    \t},\n\n    \tintersectPlane: function ( plane, optionalTarget ) {\n\n    \t\tvar t = this.distanceToPlane( plane );\n\n    \t\tif ( t === null ) {\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\treturn this.at( t, optionalTarget );\n\n    \t},\n\n\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// check if the ray lies on the plane first\n\n    \t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n    \t\tif ( distToPoint === 0 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\tvar denominator = plane.normal.dot( this.direction );\n\n    \t\tif ( denominator * distToPoint < 0 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\t// ray origin is behind the plane (and is pointing behind it)\n\n    \t\treturn false;\n\n    \t},\n\n    \tintersectBox: function ( box, optionalTarget ) {\n\n    \t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n    \t\tvar invdirx = 1 / this.direction.x,\n    \t\t\tinvdiry = 1 / this.direction.y,\n    \t\t\tinvdirz = 1 / this.direction.z;\n\n    \t\tvar origin = this.origin;\n\n    \t\tif ( invdirx >= 0 ) {\n\n    \t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n    \t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n    \t\t} else {\n\n    \t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n    \t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n    \t\t}\n\n    \t\tif ( invdiry >= 0 ) {\n\n    \t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n    \t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n    \t\t} else {\n\n    \t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n    \t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n    \t\t}\n\n    \t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n    \t\t// These lines also handle the case where tmin or tmax is NaN\n    \t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n    \t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n    \t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n    \t\tif ( invdirz >= 0 ) {\n\n    \t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n    \t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n    \t\t} else {\n\n    \t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n    \t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n    \t\t}\n\n    \t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n    \t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n    \t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n    \t\t//return point closest to the ray (positive side)\n\n    \t\tif ( tmax < 0 ) return null;\n\n    \t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n    \t},\n\n    \tintersectsBox: ( function () {\n\n    \t\tvar v = new Vector3();\n\n    \t\treturn function intersectsBox( box ) {\n\n    \t\t\treturn this.intersectBox( box, v ) !== null;\n\n    \t\t};\n\n    \t} )(),\n\n    \tintersectTriangle: function () {\n\n    \t\t// Compute the offset origin, edges, and normal.\n    \t\tvar diff = new Vector3();\n    \t\tvar edge1 = new Vector3();\n    \t\tvar edge2 = new Vector3();\n    \t\tvar normal = new Vector3();\n\n    \t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n    \t\t\tedge1.subVectors( b, a );\n    \t\t\tedge2.subVectors( c, a );\n    \t\t\tnormal.crossVectors( edge1, edge2 );\n\n    \t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n    \t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n    \t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n    \t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n    \t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n    \t\t\tvar DdN = this.direction.dot( normal );\n    \t\t\tvar sign;\n\n    \t\t\tif ( DdN > 0 ) {\n\n    \t\t\t\tif ( backfaceCulling ) return null;\n    \t\t\t\tsign = 1;\n\n    \t\t\t} else if ( DdN < 0 ) {\n\n    \t\t\t\tsign = - 1;\n    \t\t\t\tDdN = - DdN;\n\n    \t\t\t} else {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\tdiff.subVectors( this.origin, a );\n    \t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n    \t\t\t// b1 < 0, no intersection\n    \t\t\tif ( DdQxE2 < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n    \t\t\t// b2 < 0, no intersection\n    \t\t\tif ( DdE1xQ < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// b1+b2 > 1, no intersection\n    \t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// Line intersects triangle, check if ray does.\n    \t\t\tvar QdN = - sign * diff.dot( normal );\n\n    \t\t\t// t < 0, no intersection\n    \t\t\tif ( QdN < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// Ray intersects triangle.\n    \t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyMatrix4: function ( matrix4 ) {\n\n    \t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n    \t\tthis.origin.applyMatrix4( matrix4 );\n    \t\tthis.direction.sub( this.origin );\n    \t\tthis.direction.normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( ray ) {\n\n    \t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     */\n\n    function Euler( x, y, z, order ) {\n\n    \tthis._x = x || 0;\n    \tthis._y = y || 0;\n    \tthis._z = z || 0;\n    \tthis._order = order || Euler.DefaultOrder;\n\n    }\n\n    Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n    Euler.DefaultOrder = 'XYZ';\n\n    Euler.prototype = {\n\n    \tconstructor: Euler,\n\n    \tisEuler: true,\n\n    \tget x () {\n\n    \t\treturn this._x;\n\n    \t},\n\n    \tset x ( value ) {\n\n    \t\tthis._x = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget y () {\n\n    \t\treturn this._y;\n\n    \t},\n\n    \tset y ( value ) {\n\n    \t\tthis._y = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget z () {\n\n    \t\treturn this._z;\n\n    \t},\n\n    \tset z ( value ) {\n\n    \t\tthis._z = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget order () {\n\n    \t\treturn this._order;\n\n    \t},\n\n    \tset order ( value ) {\n\n    \t\tthis._order = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tset: function ( x, y, z, order ) {\n\n    \t\tthis._x = x;\n    \t\tthis._y = y;\n    \t\tthis._z = z;\n    \t\tthis._order = order || this._order;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n    \t},\n\n    \tcopy: function ( euler ) {\n\n    \t\tthis._x = euler._x;\n    \t\tthis._y = euler._y;\n    \t\tthis._z = euler._z;\n    \t\tthis._order = euler._order;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromRotationMatrix: function ( m, order, update ) {\n\n    \t\tvar clamp = exports.Math.clamp;\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar te = m.elements;\n    \t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n    \t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n    \t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n    \t\torder = order || this._order;\n\n    \t\tif ( order === 'XYZ' ) {\n\n    \t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n    \t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n    \t\t\t\tthis._z = 0;\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'YXZ' ) {\n\n    \t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n    \t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n    \t\t\t\tthis._z = 0;\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'ZXY' ) {\n\n    \t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n    \t\t\t\tthis._y = Math.atan2( - m31, m33 );\n    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._y = 0;\n    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'ZYX' ) {\n\n    \t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m33 );\n    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = 0;\n    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'YZX' ) {\n\n    \t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m22 );\n    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = 0;\n    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'XZY' ) {\n\n    \t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n    \t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n    \t\t\t\tthis._y = 0;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n    \t\t}\n\n    \t\tthis._order = order;\n\n    \t\tif ( update !== false ) this.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromQuaternion: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function setFromQuaternion( q, order, update ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.makeRotationFromQuaternion( q );\n\n    \t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n    \t\t};\n\n    \t}(),\n\n    \tsetFromVector3: function ( v, order ) {\n\n    \t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n    \t},\n\n    \treorder: function () {\n\n    \t\t// WARNING: this discards revolution information -bhouston\n\n    \t\tvar q = new Quaternion();\n\n    \t\treturn function reorder( newOrder ) {\n\n    \t\t\tq.setFromEuler( this );\n\n    \t\t\treturn this.setFromQuaternion( q, newOrder );\n\n    \t\t};\n\n    \t}(),\n\n    \tequals: function ( euler ) {\n\n    \t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n    \t},\n\n    \tfromArray: function ( array ) {\n\n    \t\tthis._x = array[ 0 ];\n    \t\tthis._y = array[ 1 ];\n    \t\tthis._z = array[ 2 ];\n    \t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this._x;\n    \t\tarray[ offset + 1 ] = this._y;\n    \t\tarray[ offset + 2 ] = this._z;\n    \t\tarray[ offset + 3 ] = this._order;\n\n    \t\treturn array;\n\n    \t},\n\n    \ttoVector3: function ( optionalResult ) {\n\n    \t\tif ( optionalResult ) {\n\n    \t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n    \t\t} else {\n\n    \t\t\treturn new Vector3( this._x, this._y, this._z );\n\n    \t\t}\n\n    \t},\n\n    \tonChange: function ( callback ) {\n\n    \t\tthis.onChangeCallback = callback;\n\n    \t\treturn this;\n\n    \t},\n\n    \tonChangeCallback: function () {}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Layers() {\n\n    \tthis.mask = 1;\n\n    }\n\n    Layers.prototype = {\n\n    \tconstructor: Layers,\n\n    \tset: function ( channel ) {\n\n    \t\tthis.mask = 1 << channel;\n\n    \t},\n\n    \tenable: function ( channel ) {\n\n    \t\tthis.mask |= 1 << channel;\n\n    \t},\n\n    \ttoggle: function ( channel ) {\n\n    \t\tthis.mask ^= 1 << channel;\n\n    \t},\n\n    \tdisable: function ( channel ) {\n\n    \t\tthis.mask &= ~ ( 1 << channel );\n\n    \t},\n\n    \ttest: function ( layers ) {\n\n    \t\treturn ( this.mask & layers.mask ) !== 0;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author elephantatwork / www.elephantatwork.ch\n     */\n\n    function Object3D() {\n\n    \tObject.defineProperty( this, 'id', { value: Object3DIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Object3D';\n\n    \tthis.parent = null;\n    \tthis.children = [];\n\n    \tthis.up = Object3D.DefaultUp.clone();\n\n    \tvar position = new Vector3();\n    \tvar rotation = new Euler();\n    \tvar quaternion = new Quaternion();\n    \tvar scale = new Vector3( 1, 1, 1 );\n\n    \tfunction onRotationChange() {\n\n    \t\tquaternion.setFromEuler( rotation, false );\n\n    \t}\n\n    \tfunction onQuaternionChange() {\n\n    \t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n    \t}\n\n    \trotation.onChange( onRotationChange );\n    \tquaternion.onChange( onQuaternionChange );\n\n    \tObject.defineProperties( this, {\n    \t\tposition: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: position\n    \t\t},\n    \t\trotation: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: rotation\n    \t\t},\n    \t\tquaternion: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: quaternion\n    \t\t},\n    \t\tscale: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: scale\n    \t\t},\n    \t\tmodelViewMatrix: {\n    \t\t\tvalue: new Matrix4()\n    \t\t},\n    \t\tnormalMatrix: {\n    \t\t\tvalue: new Matrix3()\n    \t\t}\n    \t} );\n\n    \tthis.matrix = new Matrix4();\n    \tthis.matrixWorld = new Matrix4();\n\n    \tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n    \tthis.matrixWorldNeedsUpdate = false;\n\n    \tthis.layers = new Layers();\n    \tthis.visible = true;\n\n    \tthis.castShadow = false;\n    \tthis.receiveShadow = false;\n\n    \tthis.frustumCulled = true;\n    \tthis.renderOrder = 0;\n\n    \tthis.userData = {};\n\n    \tthis.onBeforeRender = null;\n\n    }\n\n    Object3D.DefaultUp = new Vector3( 0, 1, 0 );\n    Object3D.DefaultMatrixAutoUpdate = true;\n\n    Object.assign( Object3D.prototype, EventDispatcher.prototype, {\n\n    \tisObject3D: true,\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n    \t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n    \t},\n\n    \tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n    \t\t// assumes axis is normalized\n\n    \t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n    \t},\n\n    \tsetRotationFromEuler: function ( euler ) {\n\n    \t\tthis.quaternion.setFromEuler( euler, true );\n\n    \t},\n\n    \tsetRotationFromMatrix: function ( m ) {\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tthis.quaternion.setFromRotationMatrix( m );\n\n    \t},\n\n    \tsetRotationFromQuaternion: function ( q ) {\n\n    \t\t// assumes q is normalized\n\n    \t\tthis.quaternion.copy( q );\n\n    \t},\n\n    \trotateOnAxis: function () {\n\n    \t\t// rotate object on axis in object space\n    \t\t// axis is assumed to be normalized\n\n    \t\tvar q1 = new Quaternion();\n\n    \t\treturn function rotateOnAxis( axis, angle ) {\n\n    \t\t\tq1.setFromAxisAngle( axis, angle );\n\n    \t\t\tthis.quaternion.multiply( q1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateX: function () {\n\n    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateOnAxis: function () {\n\n    \t\t// translate object by distance along axis in object space\n    \t\t// axis is assumed to be normalized\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function translateOnAxis( axis, distance ) {\n\n    \t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n    \t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateX: function () {\n\n    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\n    \t\treturn function translateX( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateY: function () {\n\n    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\n    \t\treturn function translateY( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateZ: function () {\n\n    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\n    \t\treturn function translateZ( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \tlocalToWorld: function ( vector ) {\n\n    \t\treturn vector.applyMatrix4( this.matrixWorld );\n\n    \t},\n\n    \tworldToLocal: function () {\n\n    \t\tvar m1 = new Matrix4();\n\n    \t\treturn function worldToLocal( vector ) {\n\n    \t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\t// This routine does not support objects with rotated and/or translated parent(s)\n\n    \t\tvar m1 = new Matrix4();\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tm1.lookAt( vector, this.position, this.up );\n\n    \t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n    \t\t};\n\n    \t}(),\n\n    \tadd: function ( object ) {\n\n    \t\tif ( arguments.length > 1 ) {\n\n    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n    \t\t\t\tthis.add( arguments[ i ] );\n\n    \t\t\t}\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tif ( object === this ) {\n\n    \t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tif ( (object && object.isObject3D) ) {\n\n    \t\t\tif ( object.parent !== null ) {\n\n    \t\t\t\tobject.parent.remove( object );\n\n    \t\t\t}\n\n    \t\t\tobject.parent = this;\n    \t\t\tobject.dispatchEvent( { type: 'added' } );\n\n    \t\t\tthis.children.push( object );\n\n    \t\t} else {\n\n    \t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tremove: function ( object ) {\n\n    \t\tif ( arguments.length > 1 ) {\n\n    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n    \t\t\t\tthis.remove( arguments[ i ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar index = this.children.indexOf( object );\n\n    \t\tif ( index !== - 1 ) {\n\n    \t\t\tobject.parent = null;\n\n    \t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n    \t\t\tthis.children.splice( index, 1 );\n\n    \t\t}\n\n    \t},\n\n    \tgetObjectById: function ( id ) {\n\n    \t\treturn this.getObjectByProperty( 'id', id );\n\n    \t},\n\n    \tgetObjectByName: function ( name ) {\n\n    \t\treturn this.getObjectByProperty( 'name', name );\n\n    \t},\n\n    \tgetObjectByProperty: function ( name, value ) {\n\n    \t\tif ( this[ name ] === value ) return this;\n\n    \t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n    \t\t\tvar child = this.children[ i ];\n    \t\t\tvar object = child.getObjectByProperty( name, value );\n\n    \t\t\tif ( object !== undefined ) {\n\n    \t\t\t\treturn object;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn undefined;\n\n    \t},\n\n    \tgetWorldPosition: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tthis.updateMatrixWorld( true );\n\n    \t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n    \t},\n\n    \tgetWorldQuaternion: function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar scale = new Vector3();\n\n    \t\treturn function getWorldQuaternion( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Quaternion();\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldRotation: function () {\n\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldRotation( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Euler();\n\n    \t\t\tthis.getWorldQuaternion( quaternion );\n\n    \t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldScale: function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldScale( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldDirection: function () {\n\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldDirection( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tthis.getWorldQuaternion( quaternion );\n\n    \t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n    \t\t};\n\n    \t}(),\n\n    \traycast: function () {},\n\n    \ttraverse: function ( callback ) {\n\n    \t\tcallback( this );\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].traverse( callback );\n\n    \t\t}\n\n    \t},\n\n    \ttraverseVisible: function ( callback ) {\n\n    \t\tif ( this.visible === false ) return;\n\n    \t\tcallback( this );\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].traverseVisible( callback );\n\n    \t\t}\n\n    \t},\n\n    \ttraverseAncestors: function ( callback ) {\n\n    \t\tvar parent = this.parent;\n\n    \t\tif ( parent !== null ) {\n\n    \t\t\tcallback( parent );\n\n    \t\t\tparent.traverseAncestors( callback );\n\n    \t\t}\n\n    \t},\n\n    \tupdateMatrix: function () {\n\n    \t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n    \t\tthis.matrixWorldNeedsUpdate = true;\n\n    \t},\n\n    \tupdateMatrixWorld: function ( force ) {\n\n    \t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\n    \t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\n    \t\t\tif ( this.parent === null ) {\n\n    \t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n    \t\t\t}\n\n    \t\t\tthis.matrixWorldNeedsUpdate = false;\n\n    \t\t\tforce = true;\n\n    \t\t}\n\n    \t\t// update children\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].updateMatrixWorld( force );\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\t// meta is '' when called from JSON.stringify\n    \t\tvar isRootObject = ( meta === undefined || meta === '' );\n\n    \t\tvar output = {};\n\n    \t\t// meta is a hash used to collect geometries, materials.\n    \t\t// not providing it implies that this is the root object\n    \t\t// being serialized.\n    \t\tif ( isRootObject ) {\n\n    \t\t\t// initialize meta obj\n    \t\t\tmeta = {\n    \t\t\t\tgeometries: {},\n    \t\t\t\tmaterials: {},\n    \t\t\t\ttextures: {},\n    \t\t\t\timages: {}\n    \t\t\t};\n\n    \t\t\toutput.metadata = {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Object',\n    \t\t\t\tgenerator: 'Object3D.toJSON'\n    \t\t\t};\n\n    \t\t}\n\n    \t\t// standard Object3D serialization\n\n    \t\tvar object = {};\n\n    \t\tobject.uuid = this.uuid;\n    \t\tobject.type = this.type;\n\n    \t\tif ( this.name !== '' ) object.name = this.name;\n    \t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n    \t\tif ( this.castShadow === true ) object.castShadow = true;\n    \t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n    \t\tif ( this.visible === false ) object.visible = false;\n\n    \t\tobject.matrix = this.matrix.toArray();\n\n    \t\t//\n\n    \t\tif ( this.geometry !== undefined ) {\n\n    \t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\n    \t\t\t}\n\n    \t\t\tobject.geometry = this.geometry.uuid;\n\n    \t\t}\n\n    \t\tif ( this.material !== undefined ) {\n\n    \t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\n    \t\t\t}\n\n    \t\t\tobject.material = this.material.uuid;\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( this.children.length > 0 ) {\n\n    \t\t\tobject.children = [];\n\n    \t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n    \t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( isRootObject ) {\n\n    \t\t\tvar geometries = extractFromCache( meta.geometries );\n    \t\t\tvar materials = extractFromCache( meta.materials );\n    \t\t\tvar textures = extractFromCache( meta.textures );\n    \t\t\tvar images = extractFromCache( meta.images );\n\n    \t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n    \t\t\tif ( materials.length > 0 ) output.materials = materials;\n    \t\t\tif ( textures.length > 0 ) output.textures = textures;\n    \t\t\tif ( images.length > 0 ) output.images = images;\n\n    \t\t}\n\n    \t\toutput.object = object;\n\n    \t\treturn output;\n\n    \t\t// extract data from the cache hash\n    \t\t// remove metadata on each item\n    \t\t// and return as array\n    \t\tfunction extractFromCache( cache ) {\n\n    \t\t\tvar values = [];\n    \t\t\tfor ( var key in cache ) {\n\n    \t\t\t\tvar data = cache[ key ];\n    \t\t\t\tdelete data.metadata;\n    \t\t\t\tvalues.push( data );\n\n    \t\t\t}\n    \t\t\treturn values;\n\n    \t\t}\n\n    \t},\n\n    \tclone: function ( recursive ) {\n\n    \t\treturn new this.constructor().copy( this, recursive );\n\n    \t},\n\n    \tcopy: function ( source, recursive ) {\n\n    \t\tif ( recursive === undefined ) recursive = true;\n\n    \t\tthis.name = source.name;\n\n    \t\tthis.up.copy( source.up );\n\n    \t\tthis.position.copy( source.position );\n    \t\tthis.quaternion.copy( source.quaternion );\n    \t\tthis.scale.copy( source.scale );\n\n    \t\tthis.matrix.copy( source.matrix );\n    \t\tthis.matrixWorld.copy( source.matrixWorld );\n\n    \t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n    \t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n    \t\tthis.visible = source.visible;\n\n    \t\tthis.castShadow = source.castShadow;\n    \t\tthis.receiveShadow = source.receiveShadow;\n\n    \t\tthis.frustumCulled = source.frustumCulled;\n    \t\tthis.renderOrder = source.renderOrder;\n\n    \t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n    \t\tif ( recursive === true ) {\n\n    \t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n    \t\t\t\tvar child = source.children[ i ];\n    \t\t\t\tthis.add( child.clone() );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    var count$2 = 0;\n    function Object3DIdCount() { return count$2++; };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Line3( start, end ) {\n\n    \tthis.start = ( start !== undefined ) ? start : new Vector3();\n    \tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n    }\n\n    Line3.prototype = {\n\n    \tconstructor: Line3,\n\n    \tset: function ( start, end ) {\n\n    \t\tthis.start.copy( start );\n    \t\tthis.end.copy( end );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( line ) {\n\n    \t\tthis.start.copy( line.start );\n    \t\tthis.end.copy( line.end );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tdelta: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.subVectors( this.end, this.start );\n\n    \t},\n\n    \tdistanceSq: function () {\n\n    \t\treturn this.start.distanceToSquared( this.end );\n\n    \t},\n\n    \tdistance: function () {\n\n    \t\treturn this.start.distanceTo( this.end );\n\n    \t},\n\n    \tat: function ( t, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n    \t},\n\n    \tclosestPointToPointParameter: function () {\n\n    \t\tvar startP = new Vector3();\n    \t\tvar startEnd = new Vector3();\n\n    \t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n    \t\t\tstartP.subVectors( point, this.start );\n    \t\t\tstartEnd.subVectors( this.end, this.start );\n\n    \t\t\tvar startEnd2 = startEnd.dot( startEnd );\n    \t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n    \t\t\tvar t = startEnd_startP / startEnd2;\n\n    \t\t\tif ( clampToLine ) {\n\n    \t\t\t\tt = exports.Math.clamp( t, 0, 1 );\n\n    \t\t\t}\n\n    \t\t\treturn t;\n\n    \t\t};\n\n    \t}(),\n\n    \tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n    \t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n    \t},\n\n    \tapplyMatrix4: function ( matrix ) {\n\n    \t\tthis.start.applyMatrix4( matrix );\n    \t\tthis.end.applyMatrix4( matrix );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( line ) {\n\n    \t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Triangle( a, b, c ) {\n\n    \tthis.a = ( a !== undefined ) ? a : new Vector3();\n    \tthis.b = ( b !== undefined ) ? b : new Vector3();\n    \tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n    }\n\n    Triangle.normal = function () {\n\n    \tvar v0 = new Vector3();\n\n    \treturn function normal( a, b, c, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tresult.subVectors( c, b );\n    \t\tv0.subVectors( a, b );\n    \t\tresult.cross( v0 );\n\n    \t\tvar resultLengthSq = result.lengthSq();\n    \t\tif ( resultLengthSq > 0 ) {\n\n    \t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n    \t\t}\n\n    \t\treturn result.set( 0, 0, 0 );\n\n    \t};\n\n    }();\n\n    // static/instance method to calculate barycentric coordinates\n    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n    Triangle.barycoordFromPoint = function () {\n\n    \tvar v0 = new Vector3();\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n\n    \treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n    \t\tv0.subVectors( c, a );\n    \t\tv1.subVectors( b, a );\n    \t\tv2.subVectors( point, a );\n\n    \t\tvar dot00 = v0.dot( v0 );\n    \t\tvar dot01 = v0.dot( v1 );\n    \t\tvar dot02 = v0.dot( v2 );\n    \t\tvar dot11 = v1.dot( v1 );\n    \t\tvar dot12 = v1.dot( v2 );\n\n    \t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\t// collinear or singular triangle\n    \t\tif ( denom === 0 ) {\n\n    \t\t\t// arbitrary location outside of triangle?\n    \t\t\t// not sure if this is the best idea, maybe should be returning undefined\n    \t\t\treturn result.set( - 2, - 1, - 1 );\n\n    \t\t}\n\n    \t\tvar invDenom = 1 / denom;\n    \t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n    \t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n    \t\t// barycentric coordinates must always sum to 1\n    \t\treturn result.set( 1 - u - v, v, u );\n\n    \t};\n\n    }();\n\n    Triangle.containsPoint = function () {\n\n    \tvar v1 = new Vector3();\n\n    \treturn function containsPoint( point, a, b, c ) {\n\n    \t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n    \t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n    \t};\n\n    }();\n\n    Triangle.prototype = {\n\n    \tconstructor: Triangle,\n\n    \tset: function ( a, b, c ) {\n\n    \t\tthis.a.copy( a );\n    \t\tthis.b.copy( b );\n    \t\tthis.c.copy( c );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n    \t\tthis.a.copy( points[ i0 ] );\n    \t\tthis.b.copy( points[ i1 ] );\n    \t\tthis.c.copy( points[ i2 ] );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( triangle ) {\n\n    \t\tthis.a.copy( triangle.a );\n    \t\tthis.b.copy( triangle.b );\n    \t\tthis.c.copy( triangle.c );\n\n    \t\treturn this;\n\n    \t},\n\n    \tarea: function () {\n\n    \t\tvar v0 = new Vector3();\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function area() {\n\n    \t\t\tv0.subVectors( this.c, this.b );\n    \t\t\tv1.subVectors( this.a, this.b );\n\n    \t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n    \t\t};\n\n    \t}(),\n\n    \tmidpoint: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n    \t},\n\n    \tnormal: function ( optionalTarget ) {\n\n    \t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n    \t},\n\n    \tplane: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Plane();\n\n    \t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n    \t},\n\n    \tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n    \t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n    \t},\n\n    \tclosestPointToPoint: function () {\n\n    \t\tvar plane, edgeList, projectedPoint, closestPoint;\n\n    \t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n    \t\t\tif ( plane === undefined ) {\n\n    \t\t\t\tplane = new Plane();\n    \t\t\t\tedgeList = [ new Line3(), new Line3(), new Line3() ];\n    \t\t\t\tprojectedPoint = new Vector3();\n    \t\t\t\tclosestPoint = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n    \t\t\tvar minDistance = Infinity;\n\n    \t\t\t// project the point onto the plane of the triangle\n\n    \t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n    \t\t\tplane.projectPoint( point, projectedPoint );\n\n    \t\t\t// check if the projection lies within the triangle\n\n    \t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\n    \t\t\t\t// if so, this is the closest point\n\n    \t\t\t\tresult.copy( projectedPoint );\n\n    \t\t\t} else {\n\n    \t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n    \t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n    \t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n    \t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n    \t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\n    \t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n    \t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n    \t\t\t\t\tif( distance < minDistance ) {\n\n    \t\t\t\t\t\tminDistance = distance;\n\n    \t\t\t\t\t\tresult.copy( closestPoint );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tequals: function ( triangle ) {\n\n    \t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Face3( a, b, c, normal, color, materialIndex ) {\n\n    \tthis.a = a;\n    \tthis.b = b;\n    \tthis.c = c;\n\n    \tthis.normal = (normal && normal.isVector3) ? normal : new Vector3();\n    \tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n    \tthis.color = (color && color.isColor) ? color : new Color();\n    \tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n    \tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n    }\n\n    Face3.prototype = {\n\n    \tconstructor: Face3,\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.a = source.a;\n    \t\tthis.b = source.b;\n    \t\tthis.c = source.c;\n\n    \t\tthis.normal.copy( source.normal );\n    \t\tthis.color.copy( source.color );\n\n    \t\tthis.materialIndex = source.materialIndex;\n\n    \t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  shading: THREE.SmoothShading,\n     *  depthTest: <bool>,\n     *  depthWrite: <bool>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>\n     * }\n     */\n\n    function MeshBasicMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshBasicMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // emissive\n\n    \tthis.map = null;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshBasicMaterial.prototype = Object.create( Material.prototype );\n    MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n    MeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n    MeshBasicMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferAttribute( array, itemSize, normalized ) {\n\n    \tif ( Array.isArray( array ) ) {\n\n    \t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n    \t}\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.array = array;\n    \tthis.itemSize = itemSize;\n    \tthis.count = array !== undefined ? array.length / itemSize : 0;\n    \tthis.normalized = normalized === true;\n\n    \tthis.dynamic = false;\n    \tthis.updateRange = { offset: 0, count: - 1 };\n\n    \tthis.version = 0;\n\n    }\n\n    BufferAttribute.prototype = {\n\n    \tconstructor: BufferAttribute,\n\n    \tisBufferAttribute: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tsetDynamic: function ( value ) {\n\n    \t\tthis.dynamic = value;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.array = new source.array.constructor( source.array );\n    \t\tthis.itemSize = source.itemSize;\n    \t\tthis.count = source.count;\n    \t\tthis.normalized = source.normalized;\n\n    \t\tthis.dynamic = source.dynamic;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyAt: function ( index1, attribute, index2 ) {\n\n    \t\tindex1 *= this.itemSize;\n    \t\tindex2 *= attribute.itemSize;\n\n    \t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyArray: function ( array ) {\n\n    \t\tthis.array.set( array );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyColorsArray: function ( colors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n    \t\t\tvar color = colors[ i ];\n\n    \t\t\tif ( color === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n    \t\t\t\tcolor = new Color();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = color.r;\n    \t\t\tarray[ offset ++ ] = color.g;\n    \t\t\tarray[ offset ++ ] = color.b;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyIndicesArray: function ( indices ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n    \t\t\tvar index = indices[ i ];\n\n    \t\t\tarray[ offset ++ ] = index.a;\n    \t\t\tarray[ offset ++ ] = index.b;\n    \t\t\tarray[ offset ++ ] = index.c;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector2sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector2();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector3sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n    \t\t\tarray[ offset ++ ] = vector.z;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector4sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector4();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n    \t\t\tarray[ offset ++ ] = vector.z;\n    \t\t\tarray[ offset ++ ] = vector.w;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tset: function ( value, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.array.set( value, offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetX: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize ];\n\n    \t},\n\n    \tsetX: function ( index, x ) {\n\n    \t\tthis.array[ index * this.itemSize ] = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetY: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 1 ];\n\n    \t},\n\n    \tsetY: function ( index, y ) {\n\n    \t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetZ: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 2 ];\n\n    \t},\n\n    \tsetZ: function ( index, z ) {\n\n    \t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetW: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 3 ];\n\n    \t},\n\n    \tsetW: function ( index, w ) {\n\n    \t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXY: function ( index, x, y ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZ: function ( index, x, y, z ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n    \t\tthis.array[ index + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZW: function ( index, x, y, z, w ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n    \t\tthis.array[ index + 2 ] = z;\n    \t\tthis.array[ index + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t}\n\n    };\n\n    //\n\n    function Int8Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int8Array( array ), itemSize );\n\n    }\n\n    function Uint8Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint8Array( array ), itemSize );\n\n    }\n\n    function Uint8ClampedAttribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\n    }\n\n    function Int16Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int16Array( array ), itemSize );\n\n    }\n\n    function Uint16Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint16Array( array ), itemSize );\n\n    }\n\n    function Int32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int32Array( array ), itemSize );\n\n    }\n\n    function Uint32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint32Array( array ), itemSize );\n\n    }\n\n    function Float32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Float32Array( array ), itemSize );\n\n    }\n\n    function Float64Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Float64Array( array ), itemSize );\n\n    }\n\n    // Deprecated\n\n    function DynamicBufferAttribute( array, itemSize ) {\n\n    \tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n    \treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author kile / http://kile.stravaganza.org/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author bhouston / http://clara.io\n     */\n\n    function Geometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Geometry';\n\n    \tthis.vertices = [];\n    \tthis.colors = [];\n    \tthis.faces = [];\n    \tthis.faceVertexUvs = [ [] ];\n\n    \tthis.morphTargets = [];\n    \tthis.morphNormals = [];\n\n    \tthis.skinWeights = [];\n    \tthis.skinIndices = [];\n\n    \tthis.lineDistances = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \t// update flags\n\n    \tthis.elementsNeedUpdate = false;\n    \tthis.verticesNeedUpdate = false;\n    \tthis.uvsNeedUpdate = false;\n    \tthis.normalsNeedUpdate = false;\n    \tthis.colorsNeedUpdate = false;\n    \tthis.lineDistancesNeedUpdate = false;\n    \tthis.groupsNeedUpdate = false;\n\n    }\n\n    Object.assign( Geometry.prototype, EventDispatcher.prototype, {\n\n    \tisGeometry: true,\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n    \t\t\tvar vertex = this.vertices[ i ];\n    \t\t\tvertex.applyMatrix4( matrix );\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n    \t\t\tvar face = this.faces[ i ];\n    \t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.boundingBox !== null ) {\n\n    \t\t\tthis.computeBoundingBox();\n\n    \t\t}\n\n    \t\tif ( this.boundingSphere !== null ) {\n\n    \t\t\tthis.computeBoundingSphere();\n\n    \t\t}\n\n    \t\tthis.verticesNeedUpdate = true;\n    \t\tthis.normalsNeedUpdate = true;\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateX: function () {\n\n    \t\t// rotate geometry around world x-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationX( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\t// rotate geometry around world y-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationY( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\t// rotate geometry around world z-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationZ( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function () {\n\n    \t\t// translate geometry\n\n    \t\tvar m1;\n\n    \t\treturn function translate( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeTranslation( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tscale: function () {\n\n    \t\t// scale geometry\n\n    \t\tvar m1;\n\n    \t\treturn function scale( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeScale( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\tvar obj;\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\n    \t\t\tobj.lookAt( vector );\n\n    \t\t\tobj.updateMatrix();\n\n    \t\t\tthis.applyMatrix( obj.matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tfromBufferGeometry: function ( geometry ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n    \t\tvar attributes = geometry.attributes;\n\n    \t\tvar positions = attributes.position.array;\n    \t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n    \t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n    \t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n    \t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n    \t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n    \t\tvar tempNormals = [];\n    \t\tvar tempUVs = [];\n    \t\tvar tempUVs2 = [];\n\n    \t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n    \t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n    \t\t\tif ( normals !== undefined ) {\n\n    \t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( colors !== undefined ) {\n\n    \t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs !== undefined ) {\n\n    \t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs2 !== undefined ) {\n\n    \t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction addFace( a, b, c, materialIndex ) {\n\n    \t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n    \t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n    \t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n    \t\t\tscope.faces.push( face );\n\n    \t\t\tif ( uvs !== undefined ) {\n\n    \t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs2 !== undefined ) {\n\n    \t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( indices !== undefined ) {\n\n    \t\t\tvar groups = geometry.groups;\n\n    \t\t\tif ( groups.length > 0 ) {\n\n    \t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n    \t\t\t\t\tvar group = groups[ i ];\n\n    \t\t\t\t\tvar start = group.start;\n    \t\t\t\t\tvar count = group.count;\n\n    \t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n    \t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n    \t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n    \t\t\t\taddFace( i, i + 1, i + 2 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.computeFaceNormals();\n\n    \t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t}\n\n    \t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcenter: function () {\n\n    \t\tthis.computeBoundingBox();\n\n    \t\tvar offset = this.boundingBox.getCenter().negate();\n\n    \t\tthis.translate( offset.x, offset.y, offset.z );\n\n    \t\treturn offset;\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\tthis.computeBoundingSphere();\n\n    \t\tvar center = this.boundingSphere.center;\n    \t\tvar radius = this.boundingSphere.radius;\n\n    \t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n    \t\tvar matrix = new Matrix4();\n    \t\tmatrix.set(\n    \t\t\ts, 0, 0, - s * center.x,\n    \t\t\t0, s, 0, - s * center.y,\n    \t\t\t0, 0, s, - s * center.z,\n    \t\t\t0, 0, 0, 1\n    \t\t);\n\n    \t\tthis.applyMatrix( matrix );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcomputeFaceNormals: function () {\n\n    \t\tvar cb = new Vector3(), ab = new Vector3();\n\n    \t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tvar face = this.faces[ f ];\n\n    \t\t\tvar vA = this.vertices[ face.a ];\n    \t\t\tvar vB = this.vertices[ face.b ];\n    \t\t\tvar vC = this.vertices[ face.c ];\n\n    \t\t\tcb.subVectors( vC, vB );\n    \t\t\tab.subVectors( vA, vB );\n    \t\t\tcb.cross( ab );\n\n    \t\t\tcb.normalize();\n\n    \t\t\tface.normal.copy( cb );\n\n    \t\t}\n\n    \t},\n\n    \tcomputeVertexNormals: function ( areaWeighted ) {\n\n    \t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n    \t\tvar v, vl, f, fl, face, vertices;\n\n    \t\tvertices = new Array( this.vertices.length );\n\n    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n    \t\t\tvertices[ v ] = new Vector3();\n\n    \t\t}\n\n    \t\tif ( areaWeighted ) {\n\n    \t\t\t// vertex normals weighted by triangle areas\n    \t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n    \t\t\tvar vA, vB, vC;\n    \t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tvA = this.vertices[ face.a ];\n    \t\t\t\tvB = this.vertices[ face.b ];\n    \t\t\t\tvC = this.vertices[ face.c ];\n\n    \t\t\t\tcb.subVectors( vC, vB );\n    \t\t\t\tab.subVectors( vA, vB );\n    \t\t\t\tcb.cross( ab );\n\n    \t\t\t\tvertices[ face.a ].add( cb );\n    \t\t\t\tvertices[ face.b ].add( cb );\n    \t\t\t\tvertices[ face.c ].add( cb );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tvertices[ face.a ].add( face.normal );\n    \t\t\t\tvertices[ face.b ].add( face.normal );\n    \t\t\t\tvertices[ face.c ].add( face.normal );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n    \t\t\tvertices[ v ].normalize();\n\n    \t\t}\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\tif ( vertexNormals.length === 3 ) {\n\n    \t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n    \t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n    \t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n    \t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n    \t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.faces.length > 0 ) {\n\n    \t\t\tthis.normalsNeedUpdate = true;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeMorphNormals: function () {\n\n    \t\tvar i, il, f, fl, face;\n\n    \t\t// save original normals\n    \t\t// - create temp variables on first access\n    \t\t//   otherwise just copy (for faster repeated calls)\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tif ( ! face.__originalFaceNormal ) {\n\n    \t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n    \t\t\t} else {\n\n    \t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n    \t\t\t}\n\n    \t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n    \t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n    \t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n    \t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// use temp geometry to compute face and vertex normals for each morph\n\n    \t\tvar tmpGeo = new Geometry();\n    \t\ttmpGeo.faces = this.faces;\n\n    \t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n    \t\t\t// create on first access\n\n    \t\t\tif ( ! this.morphNormals[ i ] ) {\n\n    \t\t\t\tthis.morphNormals[ i ] = {};\n    \t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n    \t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n    \t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n    \t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n    \t\t\t\tvar faceNormal, vertexNormals;\n\n    \t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\t\tfaceNormal = new Vector3();\n    \t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n    \t\t\t\t\tdstNormalsFace.push( faceNormal );\n    \t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar morphNormals = this.morphNormals[ i ];\n\n    \t\t\t// set vertices to morph target\n\n    \t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n    \t\t\t// compute morph normals\n\n    \t\t\ttmpGeo.computeFaceNormals();\n    \t\t\ttmpGeo.computeVertexNormals();\n\n    \t\t\t// store morph normals\n\n    \t\t\tvar faceNormal, vertexNormals;\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n    \t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n    \t\t\t\tfaceNormal.copy( face.normal );\n\n    \t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n    \t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n    \t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// restore original normals\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tface.normal = face.__originalFaceNormal;\n    \t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeTangents: function () {\n\n    \t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n    \t},\n\n    \tcomputeLineDistances: function () {\n\n    \t\tvar d = 0;\n    \t\tvar vertices = this.vertices;\n\n    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\tif ( i > 0 ) {\n\n    \t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n    \t\t\t}\n\n    \t\t\tthis.lineDistances[ i ] = d;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeBoundingBox: function () {\n\n    \t\tif ( this.boundingBox === null ) {\n\n    \t\t\tthis.boundingBox = new Box3();\n\n    \t\t}\n\n    \t\tthis.boundingBox.setFromPoints( this.vertices );\n\n    \t},\n\n    \tcomputeBoundingSphere: function () {\n\n    \t\tif ( this.boundingSphere === null ) {\n\n    \t\t\tthis.boundingSphere = new Sphere();\n\n    \t\t}\n\n    \t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n    \t},\n\n    \tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n    \t\tif ( (geometry && geometry.isGeometry) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar normalMatrix,\n    \t\tvertexOffset = this.vertices.length,\n    \t\tvertices1 = this.vertices,\n    \t\tvertices2 = geometry.vertices,\n    \t\tfaces1 = this.faces,\n    \t\tfaces2 = geometry.faces,\n    \t\tuvs1 = this.faceVertexUvs[ 0 ],\n    \t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n    \t\tcolors1 = this.colors,\n    \t\tcolors2 = geometry.colors;\n\n    \t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n    \t\tif ( matrix !== undefined ) {\n\n    \t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\t}\n\n    \t\t// vertices\n\n    \t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n    \t\t\tvar vertex = vertices2[ i ];\n\n    \t\t\tvar vertexCopy = vertex.clone();\n\n    \t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n    \t\t\tvertices1.push( vertexCopy );\n\n    \t\t}\n\n    \t\t// colors\n\n    \t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n    \t\t\tcolors1.push( colors2[ i ].clone() );\n\n    \t\t}\n\n    \t\t// faces\n\n    \t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n    \t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n    \t\t\tfaceVertexNormals = face.vertexNormals,\n    \t\t\tfaceVertexColors = face.vertexColors;\n\n    \t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n    \t\t\tfaceCopy.normal.copy( face.normal );\n\n    \t\t\tif ( normalMatrix !== undefined ) {\n\n    \t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n    \t\t\t\tif ( normalMatrix !== undefined ) {\n\n    \t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t\t}\n\n    \t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n    \t\t\t}\n\n    \t\t\tfaceCopy.color.copy( face.color );\n\n    \t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n    \t\t\t\tcolor = faceVertexColors[ j ];\n    \t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n    \t\t\t}\n\n    \t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n    \t\t\tfaces1.push( faceCopy );\n\n    \t\t}\n\n    \t\t// uvs\n\n    \t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n    \t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n    \t\t\tif ( uv === undefined ) {\n\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n    \t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n    \t\t\t}\n\n    \t\t\tuvs1.push( uvCopy );\n\n    \t\t}\n\n    \t},\n\n    \tmergeMesh: function ( mesh ) {\n\n    \t\tif ( (mesh && mesh.isMesh) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n    \t\tthis.merge( mesh.geometry, mesh.matrix );\n\n    \t},\n\n    \t/*\n    \t * Checks for duplicate vertices with hashmap.\n    \t * Duplicated vertices are removed\n    \t * and faces' vertices are updated.\n    \t */\n\n    \tmergeVertices: function () {\n\n    \t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n    \t\tvar unique = [], changes = [];\n\n    \t\tvar v, key;\n    \t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n    \t\tvar precision = Math.pow( 10, precisionPoints );\n    \t\tvar i, il, face;\n    \t\tvar indices, j, jl;\n\n    \t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n    \t\t\tv = this.vertices[ i ];\n    \t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n    \t\t\tif ( verticesMap[ key ] === undefined ) {\n\n    \t\t\t\tverticesMap[ key ] = i;\n    \t\t\t\tunique.push( this.vertices[ i ] );\n    \t\t\t\tchanges[ i ] = unique.length - 1;\n\n    \t\t\t} else {\n\n    \t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n    \t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\t// if faces are completely degenerate after merging vertices, we\n    \t\t// have to remove them from the geometry.\n    \t\tvar faceIndicesToRemove = [];\n\n    \t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n    \t\t\tface = this.faces[ i ];\n\n    \t\t\tface.a = changes[ face.a ];\n    \t\t\tface.b = changes[ face.b ];\n    \t\t\tface.c = changes[ face.c ];\n\n    \t\t\tindices = [ face.a, face.b, face.c ];\n\n    \t\t\tvar dupIndex = - 1;\n\n    \t\t\t// if any duplicate vertices are found in a Face3\n    \t\t\t// we have to remove the face as nothing can be saved\n    \t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n    \t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n    \t\t\t\t\tdupIndex = n;\n    \t\t\t\t\tfaceIndicesToRemove.push( i );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n    \t\t\tvar idx = faceIndicesToRemove[ i ];\n\n    \t\t\tthis.faces.splice( idx, 1 );\n\n    \t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n    \t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Use unique set of vertices\n\n    \t\tvar diff = this.vertices.length - unique.length;\n    \t\tthis.vertices = unique;\n    \t\treturn diff;\n\n    \t},\n\n    \tsortFacesByMaterialIndex: function () {\n\n    \t\tvar faces = this.faces;\n    \t\tvar length = faces.length;\n\n    \t\t// tag faces\n\n    \t\tfor ( var i = 0; i < length; i ++ ) {\n\n    \t\t\tfaces[ i ]._id = i;\n\n    \t\t}\n\n    \t\t// sort faces\n\n    \t\tfunction materialIndexSort( a, b ) {\n\n    \t\t\treturn a.materialIndex - b.materialIndex;\n\n    \t\t}\n\n    \t\tfaces.sort( materialIndexSort );\n\n    \t\t// sort uvs\n\n    \t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n    \t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n    \t\tvar newUvs1, newUvs2;\n\n    \t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n    \t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n    \t\tfor ( var i = 0; i < length; i ++ ) {\n\n    \t\t\tvar id = faces[ i ]._id;\n\n    \t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n    \t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n    \t\t}\n\n    \t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n    \t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Geometry',\n    \t\t\t\tgenerator: 'Geometry.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard Geometry serialization\n\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( this.parameters !== undefined ) {\n\n    \t\t\tvar parameters = this.parameters;\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n    \t\t\t}\n\n    \t\t\treturn data;\n\n    \t\t}\n\n    \t\tvar vertices = [];\n\n    \t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n    \t\t\tvar vertex = this.vertices[ i ];\n    \t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n    \t\t}\n\n    \t\tvar faces = [];\n    \t\tvar normals = [];\n    \t\tvar normalsHash = {};\n    \t\tvar colors = [];\n    \t\tvar colorsHash = {};\n    \t\tvar uvs = [];\n    \t\tvar uvsHash = {};\n\n    \t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n    \t\t\tvar face = this.faces[ i ];\n\n    \t\t\tvar hasMaterial = true;\n    \t\t\tvar hasFaceUv = false; // deprecated\n    \t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n    \t\t\tvar hasFaceNormal = face.normal.length() > 0;\n    \t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n    \t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n    \t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n    \t\t\tvar faceType = 0;\n\n    \t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n    \t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n    \t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n    \t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n    \t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n    \t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n    \t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n    \t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n    \t\t\tfaces.push( faceType );\n    \t\t\tfaces.push( face.a, face.b, face.c );\n    \t\t\tfaces.push( face.materialIndex );\n\n    \t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\tvar vertexColors = face.vertexColors;\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n    \t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n    \t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction setBit( value, position, enabled ) {\n\n    \t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n    \t\t}\n\n    \t\tfunction getNormalIndex( normal ) {\n\n    \t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n    \t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn normalsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tnormalsHash[ hash ] = normals.length / 3;\n    \t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n    \t\t\treturn normalsHash[ hash ];\n\n    \t\t}\n\n    \t\tfunction getColorIndex( color ) {\n\n    \t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n    \t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn colorsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tcolorsHash[ hash ] = colors.length;\n    \t\t\tcolors.push( color.getHex() );\n\n    \t\t\treturn colorsHash[ hash ];\n\n    \t\t}\n\n    \t\tfunction getUvIndex( uv ) {\n\n    \t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n    \t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn uvsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tuvsHash[ hash ] = uvs.length / 2;\n    \t\t\tuvs.push( uv.x, uv.y );\n\n    \t\t\treturn uvsHash[ hash ];\n\n    \t\t}\n\n    \t\tdata.data = {};\n\n    \t\tdata.data.vertices = vertices;\n    \t\tdata.data.normals = normals;\n    \t\tif ( colors.length > 0 ) data.data.colors = colors;\n    \t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n    \t\tdata.data.faces = faces;\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\t/*\n    \t\t// Handle primitives\n\n    \t\tvar parameters = this.parameters;\n\n    \t\tif ( parameters !== undefined ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tvalues.push( parameters[ key ] );\n\n    \t\t\t}\n\n    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n    \t\t\tthis.constructor.apply( geometry, values );\n    \t\t\treturn geometry;\n\n    \t\t}\n\n    \t\treturn new this.constructor().copy( this );\n    \t\t*/\n\n    \t\treturn new Geometry().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.vertices = [];\n    \t\tthis.faces = [];\n    \t\tthis.faceVertexUvs = [ [] ];\n    \t\tthis.colors = [];\n\n    \t\tvar vertices = source.vertices;\n\n    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n    \t\t}\n\n    \t\tvar colors = source.colors;\n\n    \t\tfor ( var i = 0, il = colors.length; i < il; i ++ ) {\n\n    \t\t\tthis.colors.push( colors[ i ].clone() );\n\n    \t\t}\n\n    \t\tvar faces = source.faces;\n\n    \t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\n    \t\t\tthis.faces.push( faces[ i ].clone() );\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n    \t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n    \t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n    \t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n    \t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n    \t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n    \t\t\t\t\tvar uv = uvs[ k ];\n\n    \t\t\t\t\tuvsCopy.push( uv.clone() );\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    var count$3 = 0;\n    function GeometryIdCount() { return count$3++; };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function DirectGeometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'DirectGeometry';\n\n    \tthis.indices = [];\n    \tthis.vertices = [];\n    \tthis.normals = [];\n    \tthis.colors = [];\n    \tthis.uvs = [];\n    \tthis.uvs2 = [];\n\n    \tthis.groups = [];\n\n    \tthis.morphTargets = {};\n\n    \tthis.skinWeights = [];\n    \tthis.skinIndices = [];\n\n    \t// this.lineDistances = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \t// update flags\n\n    \tthis.verticesNeedUpdate = false;\n    \tthis.normalsNeedUpdate = false;\n    \tthis.colorsNeedUpdate = false;\n    \tthis.uvsNeedUpdate = false;\n    \tthis.groupsNeedUpdate = false;\n\n    }\n\n    Object.assign( DirectGeometry.prototype, EventDispatcher.prototype, {\n\n    \tcomputeBoundingBox: Geometry.prototype.computeBoundingBox,\n    \tcomputeBoundingSphere: Geometry.prototype.computeBoundingSphere,\n\n    \tcomputeFaceNormals: function () {\n\n    \t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\n    \t},\n\n    \tcomputeVertexNormals: function () {\n\n    \t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\n    \t},\n\n    \tcomputeGroups: function ( geometry ) {\n\n    \t\tvar group;\n    \t\tvar groups = [];\n    \t\tvar materialIndex;\n\n    \t\tvar faces = geometry.faces;\n\n    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\t// materials\n\n    \t\t\tif ( face.materialIndex !== materialIndex ) {\n\n    \t\t\t\tmaterialIndex = face.materialIndex;\n\n    \t\t\t\tif ( group !== undefined ) {\n\n    \t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n    \t\t\t\t\tgroups.push( group );\n\n    \t\t\t\t}\n\n    \t\t\t\tgroup = {\n    \t\t\t\t\tstart: i * 3,\n    \t\t\t\t\tmaterialIndex: materialIndex\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( group !== undefined ) {\n\n    \t\t\tgroup.count = ( i * 3 ) - group.start;\n    \t\t\tgroups.push( group );\n\n    \t\t}\n\n    \t\tthis.groups = groups;\n\n    \t},\n\n    \tfromGeometry: function ( geometry ) {\n\n    \t\tvar faces = geometry.faces;\n    \t\tvar vertices = geometry.vertices;\n    \t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n    \t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n    \t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n    \t\t// morphs\n\n    \t\tvar morphTargets = geometry.morphTargets;\n    \t\tvar morphTargetsLength = morphTargets.length;\n\n    \t\tvar morphTargetsPosition;\n\n    \t\tif ( morphTargetsLength > 0 ) {\n\n    \t\t\tmorphTargetsPosition = [];\n\n    \t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n    \t\t\t\tmorphTargetsPosition[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n    \t\t}\n\n    \t\tvar morphNormals = geometry.morphNormals;\n    \t\tvar morphNormalsLength = morphNormals.length;\n\n    \t\tvar morphTargetsNormal;\n\n    \t\tif ( morphNormalsLength > 0 ) {\n\n    \t\t\tmorphTargetsNormal = [];\n\n    \t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n    \t\t\t\tmorphTargetsNormal[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n    \t\t}\n\n    \t\t// skins\n\n    \t\tvar skinIndices = geometry.skinIndices;\n    \t\tvar skinWeights = geometry.skinWeights;\n\n    \t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n    \t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n    \t\t//\n\n    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n    \t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\tif ( vertexNormals.length === 3 ) {\n\n    \t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvar normal = face.normal;\n\n    \t\t\t\tthis.normals.push( normal, normal, normal );\n\n    \t\t\t}\n\n    \t\t\tvar vertexColors = face.vertexColors;\n\n    \t\t\tif ( vertexColors.length === 3 ) {\n\n    \t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvar color = face.color;\n\n    \t\t\t\tthis.colors.push( color, color, color );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexUv === true ) {\n\n    \t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n    \t\t\t\tif ( vertexUvs !== undefined ) {\n\n    \t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n    \t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexUv2 === true ) {\n\n    \t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n    \t\t\t\tif ( vertexUvs !== undefined ) {\n\n    \t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n    \t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\t// morphs\n\n    \t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n    \t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n    \t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n    \t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n    \t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n    \t\t\t}\n\n    \t\t\t// skins\n\n    \t\t\tif ( hasSkinIndices ) {\n\n    \t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n    \t\t\t}\n\n    \t\t\tif ( hasSkinWeights ) {\n\n    \t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.computeGroups( geometry );\n\n    \t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    \t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    \t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    \t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    \t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferGeometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'BufferGeometry';\n\n    \tthis.index = null;\n    \tthis.attributes = {};\n\n    \tthis.morphAttributes = {};\n\n    \tthis.groups = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \tthis.drawRange = { start: 0, count: Infinity };\n\n    }\n\n    Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {\n\n    \tisBufferGeometry: true,\n\n    \tgetIndex: function () {\n\n    \t\treturn this.index;\n\n    \t},\n\n    \tsetIndex: function ( index ) {\n\n    \t\tthis.index = index;\n\n    \t},\n\n    \taddAttribute: function ( name, attribute ) {\n\n    \t\tif ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n    \t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( name === 'index' ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n    \t\t\tthis.setIndex( attribute );\n\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.attributes[ name ] = attribute;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetAttribute: function ( name ) {\n\n    \t\treturn this.attributes[ name ];\n\n    \t},\n\n    \tremoveAttribute: function ( name ) {\n\n    \t\tdelete this.attributes[ name ];\n\n    \t\treturn this;\n\n    \t},\n\n    \taddGroup: function ( start, count, materialIndex ) {\n\n    \t\tthis.groups.push( {\n\n    \t\t\tstart: start,\n    \t\t\tcount: count,\n    \t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n    \t\t} );\n\n    \t},\n\n    \tclearGroups: function () {\n\n    \t\tthis.groups = [];\n\n    \t},\n\n    \tsetDrawRange: function ( start, count ) {\n\n    \t\tthis.drawRange.start = start;\n    \t\tthis.drawRange.count = count;\n\n    \t},\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tvar position = this.attributes.position;\n\n    \t\tif ( position !== undefined ) {\n\n    \t\t\tmatrix.applyToVector3Array( position.array );\n    \t\t\tposition.needsUpdate = true;\n\n    \t\t}\n\n    \t\tvar normal = this.attributes.normal;\n\n    \t\tif ( normal !== undefined ) {\n\n    \t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\t\tnormalMatrix.applyToVector3Array( normal.array );\n    \t\t\tnormal.needsUpdate = true;\n\n    \t\t}\n\n    \t\tif ( this.boundingBox !== null ) {\n\n    \t\t\tthis.computeBoundingBox();\n\n    \t\t}\n\n    \t\tif ( this.boundingSphere !== null ) {\n\n    \t\t\tthis.computeBoundingSphere();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateX: function () {\n\n    \t\t// rotate geometry around world x-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationX( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\t// rotate geometry around world y-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationY( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\t// rotate geometry around world z-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationZ( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function () {\n\n    \t\t// translate geometry\n\n    \t\tvar m1;\n\n    \t\treturn function translate( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeTranslation( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tscale: function () {\n\n    \t\t// scale geometry\n\n    \t\tvar m1;\n\n    \t\treturn function scale( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeScale( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\tvar obj;\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\n    \t\t\tobj.lookAt( vector );\n\n    \t\t\tobj.updateMatrix();\n\n    \t\t\tthis.applyMatrix( obj.matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tcenter: function () {\n\n    \t\tthis.computeBoundingBox();\n\n    \t\tvar offset = this.boundingBox.getCenter().negate();\n\n    \t\tthis.translate( offset.x, offset.y, offset.z );\n\n    \t\treturn offset;\n\n    \t},\n\n    \tsetFromObject: function ( object ) {\n\n    \t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( (object && object.isPoints) || (object && object.isLine) ) {\n\n    \t\t\tvar positions = new Float32Attribute( geometry.vertices.length * 3, 3 );\n    \t\t\tvar colors = new Float32Attribute( geometry.colors.length * 3, 3 );\n\n    \t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n    \t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n    \t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n    \t\t\t\tvar lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );\n\n    \t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n    \t\t\t}\n\n    \t\t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t\t}\n\n    \t\t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t\t}\n\n    \t\t} else if ( (object && object.isMesh) ) {\n\n    \t\t\tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tthis.fromGeometry( geometry );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdateFromObject: function ( object ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( (object && object.isMesh) ) {\n\n    \t\t\tvar direct = geometry.__directGeometry;\n\n    \t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n    \t\t\t\tdirect = undefined;\n    \t\t\t\tgeometry.elementsNeedUpdate = false;\n\n    \t\t\t}\n\n    \t\t\tif ( direct === undefined ) {\n\n    \t\t\t\treturn this.fromGeometry( geometry );\n\n    \t\t\t}\n\n    \t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    \t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    \t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    \t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    \t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n    \t\t\tgeometry.verticesNeedUpdate = false;\n    \t\t\tgeometry.normalsNeedUpdate = false;\n    \t\t\tgeometry.colorsNeedUpdate = false;\n    \t\t\tgeometry.uvsNeedUpdate = false;\n    \t\t\tgeometry.groupsNeedUpdate = false;\n\n    \t\t\tgeometry = direct;\n\n    \t\t}\n\n    \t\tvar attribute;\n\n    \t\tif ( geometry.verticesNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.position;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.verticesNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.normalsNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.normal;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector3sArray( geometry.normals );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.normalsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.colorsNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.color;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyColorsArray( geometry.colors );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.colorsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.uvsNeedUpdate ) {\n\n    \t\t\tattribute = this.attributes.uv;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.uvsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n    \t\t\tattribute = this.attributes.lineDistance;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyArray( geometry.lineDistances );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.groupsNeedUpdate ) {\n\n    \t\t\tgeometry.computeGroups( object.geometry );\n    \t\t\tthis.groups = geometry.groups;\n\n    \t\t\tgeometry.groupsNeedUpdate = false;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tfromGeometry: function ( geometry ) {\n\n    \t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n    \t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n    \t},\n\n    \tfromDirectGeometry: function ( geometry ) {\n\n    \t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n    \t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n    \t\tif ( geometry.normals.length > 0 ) {\n\n    \t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n    \t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n    \t\t}\n\n    \t\tif ( geometry.colors.length > 0 ) {\n\n    \t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n    \t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n    \t\t}\n\n    \t\tif ( geometry.uvs.length > 0 ) {\n\n    \t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n    \t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n    \t\t}\n\n    \t\tif ( geometry.uvs2.length > 0 ) {\n\n    \t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n    \t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n    \t\t}\n\n    \t\tif ( geometry.indices.length > 0 ) {\n\n    \t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n    \t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n    \t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n    \t\t}\n\n    \t\t// groups\n\n    \t\tthis.groups = geometry.groups;\n\n    \t\t// morphs\n\n    \t\tfor ( var name in geometry.morphTargets ) {\n\n    \t\t\tvar array = [];\n    \t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n    \t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n    \t\t\t\tvar morphTarget = morphTargets[ i ];\n\n    \t\t\t\tvar attribute = new Float32Attribute( morphTarget.length * 3, 3 );\n\n    \t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n    \t\t\t}\n\n    \t\t\tthis.morphAttributes[ name ] = array;\n\n    \t\t}\n\n    \t\t// skinning\n\n    \t\tif ( geometry.skinIndices.length > 0 ) {\n\n    \t\t\tvar skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );\n    \t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n    \t\t}\n\n    \t\tif ( geometry.skinWeights.length > 0 ) {\n\n    \t\t\tvar skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );\n    \t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t}\n\n    \t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcomputeBoundingBox: function () {\n\n    \t\tif ( this.boundingBox === null ) {\n\n    \t\t\tthis.boundingBox = new Box3();\n\n    \t\t}\n\n    \t\tvar positions = this.attributes.position.array;\n\n    \t\tif ( positions !== undefined ) {\n\n    \t\t\tthis.boundingBox.setFromArray( positions );\n\n    \t\t} else {\n\n    \t\t\tthis.boundingBox.makeEmpty();\n\n    \t\t}\n\n    \t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n    \t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n    \t\t}\n\n    \t},\n\n    \tcomputeBoundingSphere: function () {\n\n    \t\tvar box = new Box3();\n    \t\tvar vector = new Vector3();\n\n    \t\treturn function computeBoundingSphere() {\n\n    \t\t\tif ( this.boundingSphere === null ) {\n\n    \t\t\t\tthis.boundingSphere = new Sphere();\n\n    \t\t\t}\n\n    \t\t\tvar positions = this.attributes.position;\n\n    \t\t\tif ( positions ) {\n\n    \t\t\t\tvar array = positions.array;\n    \t\t\t\tvar center = this.boundingSphere.center;\n\n    \t\t\t\tbox.setFromArray( array );\n    \t\t\t\tbox.getCenter( center );\n\n    \t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n    \t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n    \t\t\t\tvar maxRadiusSq = 0;\n\n    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\n    \t\t\t\t\tvector.fromArray( array, i );\n    \t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n    \t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}(),\n\n    \tcomputeFaceNormals: function () {\n\n    \t\t// backwards compatibility\n\n    \t},\n\n    \tcomputeVertexNormals: function () {\n\n    \t\tvar index = this.index;\n    \t\tvar attributes = this.attributes;\n    \t\tvar groups = this.groups;\n\n    \t\tif ( attributes.position ) {\n\n    \t\t\tvar positions = attributes.position.array;\n\n    \t\t\tif ( attributes.normal === undefined ) {\n\n    \t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n    \t\t\t} else {\n\n    \t\t\t\t// reset existing normals to zero\n\n    \t\t\t\tvar array = attributes.normal.array;\n\n    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n    \t\t\t\t\tarray[ i ] = 0;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar normals = attributes.normal.array;\n\n    \t\t\tvar vA, vB, vC,\n\n    \t\t\tpA = new Vector3(),\n    \t\t\tpB = new Vector3(),\n    \t\t\tpC = new Vector3(),\n\n    \t\t\tcb = new Vector3(),\n    \t\t\tab = new Vector3();\n\n    \t\t\t// indexed elements\n\n    \t\t\tif ( index ) {\n\n    \t\t\t\tvar indices = index.array;\n\n    \t\t\t\tif ( groups.length === 0 ) {\n\n    \t\t\t\t\tthis.addGroup( 0, indices.length );\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n    \t\t\t\t\tvar group = groups[ j ];\n\n    \t\t\t\t\tvar start = group.start;\n    \t\t\t\t\tvar count = group.count;\n\n    \t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n    \t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n    \t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n    \t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n    \t\t\t\t\t\tpA.fromArray( positions, vA );\n    \t\t\t\t\t\tpB.fromArray( positions, vB );\n    \t\t\t\t\t\tpC.fromArray( positions, vC );\n\n    \t\t\t\t\t\tcb.subVectors( pC, pB );\n    \t\t\t\t\t\tab.subVectors( pA, pB );\n    \t\t\t\t\t\tcb.cross( ab );\n\n    \t\t\t\t\t\tnormals[ vA ] += cb.x;\n    \t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n    \t\t\t\t\t\tnormals[ vB ] += cb.x;\n    \t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n    \t\t\t\t\t\tnormals[ vC ] += cb.x;\n    \t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n    \t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n    \t\t\t\t\tpA.fromArray( positions, i );\n    \t\t\t\t\tpB.fromArray( positions, i + 3 );\n    \t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n    \t\t\t\t\tcb.subVectors( pC, pB );\n    \t\t\t\t\tab.subVectors( pA, pB );\n    \t\t\t\t\tcb.cross( ab );\n\n    \t\t\t\t\tnormals[ i ] = cb.x;\n    \t\t\t\t\tnormals[ i + 1 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n    \t\t\t\t\tnormals[ i + 3 ] = cb.x;\n    \t\t\t\t\tnormals[ i + 4 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n    \t\t\t\t\tnormals[ i + 6 ] = cb.x;\n    \t\t\t\t\tnormals[ i + 7 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.normalizeNormals();\n\n    \t\t\tattributes.normal.needsUpdate = true;\n\n    \t\t}\n\n    \t},\n\n    \tmerge: function ( geometry, offset ) {\n\n    \t\tif ( (geometry && geometry.isBufferGeometry) === false ) {\n\n    \t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n    \t\t\tvar attribute1 = attributes[ key ];\n    \t\t\tvar attributeArray1 = attribute1.array;\n\n    \t\t\tvar attribute2 = geometry.attributes[ key ];\n    \t\t\tvar attributeArray2 = attribute2.array;\n\n    \t\t\tvar attributeSize = attribute2.itemSize;\n\n    \t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n    \t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tnormalizeNormals: function () {\n\n    \t\tvar normals = this.attributes.normal.array;\n\n    \t\tvar x, y, z, n;\n\n    \t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\n    \t\t\tx = normals[ i ];\n    \t\t\ty = normals[ i + 1 ];\n    \t\t\tz = normals[ i + 2 ];\n\n    \t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n    \t\t\tnormals[ i ] *= n;\n    \t\t\tnormals[ i + 1 ] *= n;\n    \t\t\tnormals[ i + 2 ] *= n;\n\n    \t\t}\n\n    \t},\n\n    \ttoNonIndexed: function () {\n\n    \t\tif ( this.index === null ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar geometry2 = new BufferGeometry();\n\n    \t\tvar indices = this.index.array;\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tvar attribute = attributes[ name ];\n\n    \t\t\tvar array = attribute.array;\n    \t\t\tvar itemSize = attribute.itemSize;\n\n    \t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n    \t\t\tvar index = 0, index2 = 0;\n\n    \t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n    \t\t\t\tindex = indices[ i ] * itemSize;\n\n    \t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n    \t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\n    \t\t}\n\n    \t\treturn geometry2;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'BufferGeometry',\n    \t\t\t\tgenerator: 'BufferGeometry.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard BufferGeometry serialization\n\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( this.parameters !== undefined ) {\n\n    \t\t\tvar parameters = this.parameters;\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n    \t\t\t}\n\n    \t\t\treturn data;\n\n    \t\t}\n\n    \t\tdata.data = { attributes: {} };\n\n    \t\tvar index = this.index;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tvar array = Array.prototype.slice.call( index.array );\n\n    \t\t\tdata.data.index = {\n    \t\t\t\ttype: index.array.constructor.name,\n    \t\t\t\tarray: array\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tvar attribute = attributes[ key ];\n\n    \t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n    \t\t\tdata.data.attributes[ key ] = {\n    \t\t\t\titemSize: attribute.itemSize,\n    \t\t\t\ttype: attribute.array.constructor.name,\n    \t\t\t\tarray: array,\n    \t\t\t\tnormalized: attribute.normalized\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar groups = this.groups;\n\n    \t\tif ( groups.length > 0 ) {\n\n    \t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n    \t\t}\n\n    \t\tvar boundingSphere = this.boundingSphere;\n\n    \t\tif ( boundingSphere !== null ) {\n\n    \t\t\tdata.data.boundingSphere = {\n    \t\t\t\tcenter: boundingSphere.center.toArray(),\n    \t\t\t\tradius: boundingSphere.radius\n    \t\t\t};\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\t/*\n    \t\t// Handle primitives\n\n    \t\tvar parameters = this.parameters;\n\n    \t\tif ( parameters !== undefined ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tvalues.push( parameters[ key ] );\n\n    \t\t\t}\n\n    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n    \t\t\tthis.constructor.apply( geometry, values );\n    \t\t\treturn geometry;\n\n    \t\t}\n\n    \t\treturn new this.constructor().copy( this );\n    \t\t*/\n\n    \t\treturn new BufferGeometry().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tvar index = source.index;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tthis.setIndex( index.clone() );\n\n    \t\t}\n\n    \t\tvar attributes = source.attributes;\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tvar attribute = attributes[ name ];\n    \t\t\tthis.addAttribute( name, attribute.clone() );\n\n    \t\t}\n\n    \t\tvar groups = source.groups;\n\n    \t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\t\tvar group = groups[ i ];\n    \t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    BufferGeometry.MaxIndex = 65535;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author jonobr1 / http://jonobr1.com/\n     */\n\n    function Mesh( geometry, material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Mesh';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n    \tthis.drawMode = TrianglesDrawMode;\n\n    \tthis.updateMorphTargets();\n\n    }\n\n    Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Mesh,\n\n    \tisMesh: true,\n\n    \tsetDrawMode: function ( value ) {\n\n    \t\tthis.drawMode = value;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.drawMode = source.drawMode;\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdateMorphTargets: function () {\n\n    \t\tvar morphTargets = this.geometry.morphTargets;\n\n    \t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n    \t\t\tthis.morphTargetInfluences = [];\n    \t\t\tthis.morphTargetDictionary = {};\n\n    \t\t\tfor ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\n    \t\t\t\tthis.morphTargetInfluences.push( 0 );\n    \t\t\t\tthis.morphTargetDictionary[ morphTargets[ m ].name ] = m;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\tvar vA = new Vector3();\n    \t\tvar vB = new Vector3();\n    \t\tvar vC = new Vector3();\n\n    \t\tvar tempA = new Vector3();\n    \t\tvar tempB = new Vector3();\n    \t\tvar tempC = new Vector3();\n\n    \t\tvar uvA = new Vector2();\n    \t\tvar uvB = new Vector2();\n    \t\tvar uvC = new Vector2();\n\n    \t\tvar barycoord = new Vector3();\n\n    \t\tvar intersectionPoint = new Vector3();\n    \t\tvar intersectionPointWorld = new Vector3();\n\n    \t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n    \t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n    \t\t\tuv1.multiplyScalar( barycoord.x );\n    \t\t\tuv2.multiplyScalar( barycoord.y );\n    \t\t\tuv3.multiplyScalar( barycoord.z );\n\n    \t\t\tuv1.add( uv2 ).add( uv3 );\n\n    \t\t\treturn uv1.clone();\n\n    \t\t}\n\n    \t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\n    \t\t\tvar intersect;\n    \t\t\tvar material = object.material;\n\n    \t\t\tif ( material.side === BackSide ) {\n\n    \t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n    \t\t\t} else {\n\n    \t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n    \t\t\t}\n\n    \t\t\tif ( intersect === null ) return null;\n\n    \t\t\tintersectionPointWorld.copy( point );\n    \t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n    \t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n    \t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n    \t\t\treturn {\n    \t\t\t\tdistance: distance,\n    \t\t\t\tpoint: intersectionPointWorld.clone(),\n    \t\t\t\tobject: object\n    \t\t\t};\n\n    \t\t}\n\n    \t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\n    \t\t\tvA.fromArray( positions, a * 3 );\n    \t\t\tvB.fromArray( positions, b * 3 );\n    \t\t\tvC.fromArray( positions, c * 3 );\n\n    \t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n    \t\t\tif ( intersection ) {\n\n    \t\t\t\tif ( uvs ) {\n\n    \t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n    \t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n    \t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\n    \t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\n    \t\t\t\t}\n\n    \t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n    \t\t\t\tintersection.faceIndex = a;\n\n    \t\t\t}\n\n    \t\t\treturn intersection;\n\n    \t\t}\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar material = this.material;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n\n    \t\t\tif ( material === undefined ) return;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\t// Check boundingBox before continuing\n\n    \t\t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n    \t\t\t}\n\n    \t\t\tvar uvs, intersection;\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar a, b, c;\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( attributes.uv !== undefined ) {\n\n    \t\t\t\t\tuvs = attributes.uv.array;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n    \t\t\t\t\t\ta = indices[ i ];\n    \t\t\t\t\t\tb = indices[ i + 1 ];\n    \t\t\t\t\t\tc = indices[ i + 2 ];\n\n    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n    \t\t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n    \t\t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\n    \t\t\t\t\t\ta = i / 3;\n    \t\t\t\t\t\tb = a + 1;\n    \t\t\t\t\t\tc = a + 2;\n\n    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n    \t\t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n    \t\t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tvar fvA, fvB, fvC;\n    \t\t\t\tvar isFaceMaterial = (material && material.isMultiMaterial);\n    \t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\n    \t\t\t\tvar vertices = geometry.vertices;\n    \t\t\t\tvar faces = geometry.faces;\n    \t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n    \t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n    \t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n    \t\t\t\t\tvar face = faces[ f ];\n    \t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\n    \t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n    \t\t\t\t\tfvA = vertices[ face.a ];\n    \t\t\t\t\tfvB = vertices[ face.b ];\n    \t\t\t\t\tfvC = vertices[ face.c ];\n\n    \t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n    \t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n    \t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n    \t\t\t\t\t\tvA.set( 0, 0, 0 );\n    \t\t\t\t\t\tvB.set( 0, 0, 0 );\n    \t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n    \t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n    \t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n    \t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n    \t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n    \t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n    \t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n    \t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tvA.add( fvA );\n    \t\t\t\t\t\tvB.add( fvB );\n    \t\t\t\t\t\tvC.add( fvC );\n\n    \t\t\t\t\t\tfvA = vA;\n    \t\t\t\t\t\tfvB = vB;\n    \t\t\t\t\t\tfvC = vC;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n    \t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\tif ( uvs ) {\n\n    \t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n    \t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n    \t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n    \t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n    \t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tintersection.face = face;\n    \t\t\t\t\t\tintersection.faceIndex = f;\n    \t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'BoxBufferGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\tdepth: depth,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tdepthSegments: depthSegments\n    \t};\n\n    \tvar scope = this;\n\n    \t// segments\n    \twidthSegments = Math.floor( widthSegments ) || 1;\n    \theightSegments = Math.floor( heightSegments ) || 1;\n    \tdepthSegments = Math.floor( depthSegments ) || 1;\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n    \tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\n    \t// buffers\n    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n    \tvar vertices = new Float32Array( vertexCount * 3 );\n    \tvar normals = new Float32Array( vertexCount * 3 );\n    \tvar uvs = new Float32Array( vertexCount * 2 );\n\n    \t// offset variables\n    \tvar vertexBufferOffset = 0;\n    \tvar uvBufferOffset = 0;\n    \tvar indexBufferOffset = 0;\n    \tvar numberOfVertices = 0;\n\n    \t// group variables\n    \tvar groupStart = 0;\n\n    \t// build each side of the box geometry\n    \tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n    \tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n    \tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n    \tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n    \tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n    \tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\n    \t// build geometry\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    \t// helper functions\n\n    \tfunction calculateVertexCount( w, h, d ) {\n\n    \t\tvar vertices = 0;\n\n    \t\t// calculate the amount of vertices for each side (plane)\n    \t\tvertices += (w + 1) * (h + 1) * 2; // xy\n    \t\tvertices += (w + 1) * (d + 1) * 2; // xz\n    \t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\n    \t\treturn vertices;\n\n    \t}\n\n    \tfunction calculateIndexCount( w, h, d ) {\n\n    \t\tvar index = 0;\n\n    \t\t// calculate the amount of squares for each side\n    \t\tindex += w * h * 2; // xy\n    \t\tindex += w * d * 2; // xz\n    \t\tindex += d * h * 2; // zy\n\n    \t\treturn index * 6; // two triangles per square => six vertices per square\n\n    \t}\n\n    \tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n    \t\tvar segmentWidth\t= width / gridX;\n    \t\tvar segmentHeight = height / gridY;\n\n    \t\tvar widthHalf = width / 2;\n    \t\tvar heightHalf = height / 2;\n    \t\tvar depthHalf = depth / 2;\n\n    \t\tvar gridX1 = gridX + 1;\n    \t\tvar gridY1 = gridY + 1;\n\n    \t\tvar vertexCounter = 0;\n    \t\tvar groupCount = 0;\n\n    \t\tvar vector = new Vector3();\n\n    \t\t// generate vertices, normals and uvs\n\n    \t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n    \t\t\tvar y = iy * segmentHeight - heightHalf;\n\n    \t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n    \t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n    \t\t\t\t// set values to correct vector component\n    \t\t\t\tvector[ u ] = x * udir;\n    \t\t\t\tvector[ v ] = y * vdir;\n    \t\t\t\tvector[ w ] = depthHalf;\n\n    \t\t\t\t// now apply vector to vertex buffer\n    \t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n    \t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n    \t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\n    \t\t\t\t// set values to correct vector component\n    \t\t\t\tvector[ u ] = 0;\n    \t\t\t\tvector[ v ] = 0;\n    \t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n    \t\t\t\t// now apply vector to normal buffer\n    \t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n    \t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n    \t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\n    \t\t\t\t// uvs\n    \t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n    \t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\n    \t\t\t\t// update offsets and counters\n    \t\t\t\tvertexBufferOffset += 3;\n    \t\t\t\tuvBufferOffset += 2;\n    \t\t\t\tvertexCounter += 1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// 1. you need three indices to draw a single face\n    \t\t// 2. a single segment consists of two faces\n    \t\t// 3. so we need to generate six (2*3) indices per segment\n\n    \t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n    \t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n    \t\t\t\t// indices\n    \t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n    \t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n    \t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n    \t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n    \t\t\t\t// face one\n    \t\t\t\tindices[ indexBufferOffset ] = a;\n    \t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n    \t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n    \t\t\t\t// face two\n    \t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n    \t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n    \t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n    \t\t\t\t// update offsets and counters\n    \t\t\t\tindexBufferOffset += 6;\n    \t\t\t\tgroupCount += 6;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t\t// update total number of vertices\n    \t\tnumberOfVertices += vertexCounter;\n\n    \t}\n\n    }\n\n    BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n     */\n\n    function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'PlaneBufferGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments\n    \t};\n\n    \tvar width_half = width / 2;\n    \tvar height_half = height / 2;\n\n    \tvar gridX = Math.floor( widthSegments ) || 1;\n    \tvar gridY = Math.floor( heightSegments ) || 1;\n\n    \tvar gridX1 = gridX + 1;\n    \tvar gridY1 = gridY + 1;\n\n    \tvar segment_width = width / gridX;\n    \tvar segment_height = height / gridY;\n\n    \tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n    \tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n    \tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\n    \tvar offset = 0;\n    \tvar offset2 = 0;\n\n    \tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n    \t\tvar y = iy * segment_height - height_half;\n\n    \t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n    \t\t\tvar x = ix * segment_width - width_half;\n\n    \t\t\tvertices[ offset ] = x;\n    \t\t\tvertices[ offset + 1 ] = - y;\n\n    \t\t\tnormals[ offset + 2 ] = 1;\n\n    \t\t\tuvs[ offset2 ] = ix / gridX;\n    \t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\n    \t\t\toffset += 3;\n    \t\t\toffset2 += 2;\n\n    \t\t}\n\n    \t}\n\n    \toffset = 0;\n\n    \tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\n    \tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\n    \t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\n    \t\t\tvar a = ix + gridX1 * iy;\n    \t\t\tvar b = ix + gridX1 * ( iy + 1 );\n    \t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n    \t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n    \t\t\tindices[ offset ] = a;\n    \t\t\tindices[ offset + 1 ] = b;\n    \t\t\tindices[ offset + 2 ] = d;\n\n    \t\t\tindices[ offset + 3 ] = b;\n    \t\t\tindices[ offset + 4 ] = c;\n    \t\t\tindices[ offset + 5 ] = d;\n\n    \t\t\toffset += 6;\n\n    \t\t}\n\n    \t}\n\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    }\n\n    PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function Camera() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Camera';\n\n    \tthis.matrixWorldInverse = new Matrix4();\n    \tthis.projectionMatrix = new Matrix4();\n\n    }\n\n    Camera.prototype = Object.create( Object3D.prototype );\n    Camera.prototype.constructor = Camera;\n\n    Camera.prototype.isCamera = true;\n\n    Camera.prototype.getWorldDirection = function () {\n\n    \tvar quaternion = new Quaternion();\n\n    \treturn function getWorldDirection( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tthis.getWorldQuaternion( quaternion );\n\n    \t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n    \t};\n\n    }();\n\n    Camera.prototype.lookAt = function () {\n\n    \t// This routine does not support cameras with rotated and/or translated parent(s)\n\n    \tvar m1 = new Matrix4();\n\n    \treturn function lookAt( vector ) {\n\n    \t\tm1.lookAt( this.position, vector, this.up );\n\n    \t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n    \t};\n\n    }();\n\n    Camera.prototype.clone = function () {\n\n    \treturn new this.constructor().copy( this );\n\n    };\n\n    Camera.prototype.copy = function ( source ) {\n\n    \tObject3D.prototype.copy.call( this, source );\n\n    \tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n    \tthis.projectionMatrix.copy( source.projectionMatrix );\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author greggman / http://games.greggman.com/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author tschw\n     */\n\n    function PerspectiveCamera( fov, aspect, near, far ) {\n\n    \tCamera.call( this );\n\n    \tthis.type = 'PerspectiveCamera';\n\n    \tthis.fov = fov !== undefined ? fov : 50;\n    \tthis.zoom = 1;\n\n    \tthis.near = near !== undefined ? near : 0.1;\n    \tthis.far = far !== undefined ? far : 2000;\n    \tthis.focus = 10;\n\n    \tthis.aspect = aspect !== undefined ? aspect : 1;\n    \tthis.view = null;\n\n    \tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n    \tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n    \tthis.updateProjectionMatrix();\n\n    }\n\n    PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n    \tconstructor: PerspectiveCamera,\n\n    \tisPerspectiveCamera: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tCamera.prototype.copy.call( this, source );\n\n    \t\tthis.fov = source.fov;\n    \t\tthis.zoom = source.zoom;\n\n    \t\tthis.near = source.near;\n    \t\tthis.far = source.far;\n    \t\tthis.focus = source.focus;\n\n    \t\tthis.aspect = source.aspect;\n    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n    \t\tthis.filmGauge = source.filmGauge;\n    \t\tthis.filmOffset = source.filmOffset;\n\n    \t\treturn this;\n\n    \t},\n\n    \t/**\n    \t * Sets the FOV by focal length in respect to the current .filmGauge.\n    \t *\n    \t * The default film gauge is 35, so that the focal length can be specified for\n    \t * a 35mm (full frame) camera.\n    \t *\n    \t * Values for focal length and film gauge must have the same unit.\n    \t */\n    \tsetFocalLength: function ( focalLength ) {\n\n    \t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n    \t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n    \t\tthis.fov = exports.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \t/**\n    \t * Calculates the focal length from the current .fov and .filmGauge.\n    \t */\n    \tgetFocalLength: function () {\n\n    \t\tvar vExtentSlope = Math.tan( exports.Math.DEG2RAD * 0.5 * this.fov );\n\n    \t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n    \t},\n\n    \tgetEffectiveFOV: function () {\n\n    \t\treturn exports.Math.RAD2DEG * 2 * Math.atan(\n    \t\t\t\tMath.tan( exports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n    \t},\n\n    \tgetFilmWidth: function () {\n\n    \t\t// film not completely covered in portrait format (aspect < 1)\n    \t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n    \t},\n\n    \tgetFilmHeight: function () {\n\n    \t\t// film not completely covered in landscape format (aspect > 1)\n    \t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n    \t},\n\n    \t/**\n    \t * Sets an offset in a larger frustum. This is useful for multi-window or\n    \t * multi-monitor/multi-machine setups.\n    \t *\n    \t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n    \t * the monitors are in grid like this\n    \t *\n    \t *   +---+---+---+\n    \t *   | A | B | C |\n    \t *   +---+---+---+\n    \t *   | D | E | F |\n    \t *   +---+---+---+\n    \t *\n    \t * then for each monitor you would call it like this\n    \t *\n    \t *   var w = 1920;\n    \t *   var h = 1080;\n    \t *   var fullWidth = w * 3;\n    \t *   var fullHeight = h * 2;\n    \t *\n    \t *   --A--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n    \t *   --B--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n    \t *   --C--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n    \t *   --D--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n    \t *   --E--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n    \t *   --F--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n    \t *\n    \t *   Note there is no reason monitors have to be the same size or in a grid.\n    \t */\n    \tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n    \t\tthis.aspect = fullWidth / fullHeight;\n\n    \t\tthis.view = {\n    \t\t\tfullWidth: fullWidth,\n    \t\t\tfullHeight: fullHeight,\n    \t\t\toffsetX: x,\n    \t\t\toffsetY: y,\n    \t\t\twidth: width,\n    \t\t\theight: height\n    \t\t};\n\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tclearViewOffset: function() {\n\n    \t\tthis.view = null;\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tupdateProjectionMatrix: function () {\n\n    \t\tvar near = this.near,\n    \t\t\ttop = near * Math.tan(\n    \t\t\t\t\texports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n    \t\t\theight = 2 * top,\n    \t\t\twidth = this.aspect * height,\n    \t\t\tleft = - 0.5 * width,\n    \t\t\tview = this.view;\n\n    \t\tif ( view !== null ) {\n\n    \t\t\tvar fullWidth = view.fullWidth,\n    \t\t\t\tfullHeight = view.fullHeight;\n\n    \t\t\tleft += view.offsetX * width / fullWidth;\n    \t\t\ttop -= view.offsetY * height / fullHeight;\n    \t\t\twidth *= view.width / fullWidth;\n    \t\t\theight *= view.height / fullHeight;\n\n    \t\t}\n\n    \t\tvar skew = this.filmOffset;\n    \t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n    \t\tthis.projectionMatrix.makeFrustum(\n    \t\t\t\tleft, left + width, top - height, top, near, this.far );\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.fov = this.fov;\n    \t\tdata.object.zoom = this.zoom;\n\n    \t\tdata.object.near = this.near;\n    \t\tdata.object.far = this.far;\n    \t\tdata.object.focus = this.focus;\n\n    \t\tdata.object.aspect = this.aspect;\n\n    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n    \t\tdata.object.filmGauge = this.filmGauge;\n    \t\tdata.object.filmOffset = this.filmOffset;\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author arose / http://github.com/arose\n     */\n\n    function OrthographicCamera( left, right, top, bottom, near, far ) {\n\n    \tCamera.call( this );\n\n    \tthis.type = 'OrthographicCamera';\n\n    \tthis.zoom = 1;\n    \tthis.view = null;\n\n    \tthis.left = left;\n    \tthis.right = right;\n    \tthis.top = top;\n    \tthis.bottom = bottom;\n\n    \tthis.near = ( near !== undefined ) ? near : 0.1;\n    \tthis.far = ( far !== undefined ) ? far : 2000;\n\n    \tthis.updateProjectionMatrix();\n\n    }\n\n    OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n    \tconstructor: OrthographicCamera,\n\n    \tisOrthographicCamera: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tCamera.prototype.copy.call( this, source );\n\n    \t\tthis.left = source.left;\n    \t\tthis.right = source.right;\n    \t\tthis.top = source.top;\n    \t\tthis.bottom = source.bottom;\n    \t\tthis.near = source.near;\n    \t\tthis.far = source.far;\n\n    \t\tthis.zoom = source.zoom;\n    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\n    \t\tthis.view = {\n    \t\t\tfullWidth: fullWidth,\n    \t\t\tfullHeight: fullHeight,\n    \t\t\toffsetX: x,\n    \t\t\toffsetY: y,\n    \t\t\twidth: width,\n    \t\t\theight: height\n    \t\t};\n\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tclearViewOffset: function() {\n\n    \t\tthis.view = null;\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tupdateProjectionMatrix: function () {\n\n    \t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n    \t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n    \t\tvar cx = ( this.right + this.left ) / 2;\n    \t\tvar cy = ( this.top + this.bottom ) / 2;\n\n    \t\tvar left = cx - dx;\n    \t\tvar right = cx + dx;\n    \t\tvar top = cy + dy;\n    \t\tvar bottom = cy - dy;\n\n    \t\tif ( this.view !== null ) {\n\n    \t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n    \t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n    \t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n    \t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n    \t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n    \t\t\tright = left + scaleW * ( this.view.width / zoomW );\n    \t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n    \t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n    \t\t}\n\n    \t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.zoom = this.zoom;\n    \t\tdata.object.left = this.left;\n    \t\tdata.object.right = this.right;\n    \t\tdata.object.top = this.top;\n    \t\tdata.object.bottom = this.bottom;\n    \t\tdata.object.near = this.near;\n    \t\tdata.object.far = this.far;\n\n    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\n    \tvar mode;\n\n    \tfunction setMode( value ) {\n\n    \t\tmode = value;\n\n    \t}\n\n    \tvar type, size;\n\n    \tfunction setIndex( index ) {\n\n    \t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\n    \t\t\ttype = gl.UNSIGNED_INT;\n    \t\t\tsize = 4;\n\n    \t\t} else {\n\n    \t\t\ttype = gl.UNSIGNED_SHORT;\n    \t\t\tsize = 2;\n\n    \t\t}\n\n    \t}\n\n    \tfunction render( start, count ) {\n\n    \t\tgl.drawElements( mode, count, type, start * size );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n    \t}\n\n    \tfunction renderInstances( geometry, start, count ) {\n\n    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\tif ( extension === null ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n    \t}\n\n    \treturn {\n\n    \t\tsetMode: setMode,\n    \t\tsetIndex: setIndex,\n    \t\trender: render,\n    \t\trenderInstances: renderInstances\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLBufferRenderer( gl, extensions, infoRender ) {\n\n    \tvar mode;\n\n    \tfunction setMode( value ) {\n\n    \t\tmode = value;\n\n    \t}\n\n    \tfunction render( start, count ) {\n\n    \t\tgl.drawArrays( mode, start, count );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n    \t}\n\n    \tfunction renderInstances( geometry ) {\n\n    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\tif ( extension === null ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar position = geometry.attributes.position;\n\n    \t\tvar count = 0;\n\n    \t\tif ( (position && position.isInterleavedBufferAttribute) ) {\n\n    \t\t\tcount = position.data.count;\n\n    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n    \t\t} else {\n\n    \t\t\tcount = position.count;\n\n    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n    \t\t}\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n    \t}\n\n    \treturn {\n    \t\tsetMode: setMode,\n    \t\trender: render,\n    \t\trenderInstances: renderInstances\n    \t};\n\n    }\n\n    function WebGLLights() {\n\n    \tvar lights = {};\n\n    \treturn {\n\n    \t\tget: function ( light ) {\n\n    \t\t\tif ( lights[ light.id ] !== undefined ) {\n\n    \t\t\t\treturn lights[ light.id ];\n\n    \t\t\t}\n\n    \t\t\tvar uniforms;\n\n    \t\t\tswitch ( light.type ) {\n\n    \t\t\t\tcase 'DirectionalLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'SpotLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tposition: new Vector3(),\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n    \t\t\t\t\t\tdistance: 0,\n    \t\t\t\t\t\tconeCos: 0,\n    \t\t\t\t\t\tpenumbraCos: 0,\n    \t\t\t\t\t\tdecay: 0,\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tposition: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n    \t\t\t\t\t\tdistance: 0,\n    \t\t\t\t\t\tdecay: 0,\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'HemisphereLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tskyColor: new Color(),\n    \t\t\t\t\t\tgroundColor: new Color()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tlights[ light.id ] = uniforms;\n\n    \t\t\treturn uniforms;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function addLineNumbers( string ) {\n\n    \tvar lines = string.split( '\\n' );\n\n    \tfor ( var i = 0; i < lines.length; i ++ ) {\n\n    \t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n    \t}\n\n    \treturn lines.join( '\\n' );\n\n    }\n\n    function WebGLShader( gl, type, string ) {\n\n    \tvar shader = gl.createShader( type );\n\n    \tgl.shaderSource( shader, string );\n    \tgl.compileShader( shader );\n\n    \tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n    \t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n    \t}\n\n    \tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n    \t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n    \t}\n\n    \t// --enable-privileged-webgl-extension\n    \t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n    \treturn shader;\n\n    }\n\n    var programIdCount = 0;\n\n    function getEncodingComponents( encoding ) {\n\n    \tswitch ( encoding ) {\n\n    \t\tcase LinearEncoding:\n    \t\t\treturn [ 'Linear','( value )' ];\n    \t\tcase sRGBEncoding:\n    \t\t\treturn [ 'sRGB','( value )' ];\n    \t\tcase RGBEEncoding:\n    \t\t\treturn [ 'RGBE','( value )' ];\n    \t\tcase RGBM7Encoding:\n    \t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n    \t\tcase RGBM16Encoding:\n    \t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n    \t\tcase RGBDEncoding:\n    \t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n    \t\tcase GammaEncoding:\n    \t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n    \t\tdefault:\n    \t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n    \t}\n\n    }\n\n    function getTexelDecodingFunction( functionName, encoding ) {\n\n    \tvar components = getEncodingComponents( encoding );\n    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\n    }\n\n    function getTexelEncodingFunction( functionName, encoding ) {\n\n    \tvar components = getEncodingComponents( encoding );\n    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\n    }\n\n    function getToneMappingFunction( functionName, toneMapping ) {\n\n    \tvar toneMappingName;\n\n    \tswitch ( toneMapping ) {\n\n    \t\tcase LinearToneMapping:\n    \t\t\ttoneMappingName = \"Linear\";\n    \t\t\tbreak;\n\n    \t\tcase ReinhardToneMapping:\n    \t\t\ttoneMappingName = \"Reinhard\";\n    \t\t\tbreak;\n\n    \t\tcase Uncharted2ToneMapping:\n    \t\t\ttoneMappingName = \"Uncharted2\";\n    \t\t\tbreak;\n\n    \t\tcase CineonToneMapping:\n    \t\t\ttoneMappingName = \"OptimizedCineon\";\n    \t\t\tbreak;\n\n    \t\tdefault:\n    \t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n    \t}\n\n    \treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\n    }\n\n    function generateExtensions( extensions, parameters, rendererExtensions ) {\n\n    \textensions = extensions || {};\n\n    \tvar chunks = [\n    \t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n    \t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n    \t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n    \t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n    \t];\n\n    \treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n    }\n\n    function generateDefines( defines ) {\n\n    \tvar chunks = [];\n\n    \tfor ( var name in defines ) {\n\n    \t\tvar value = defines[ name ];\n\n    \t\tif ( value === false ) continue;\n\n    \t\tchunks.push( '#define ' + name + ' ' + value );\n\n    \t}\n\n    \treturn chunks.join( '\\n' );\n\n    }\n\n    function fetchAttributeLocations( gl, program, identifiers ) {\n\n    \tvar attributes = {};\n\n    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n    \tfor ( var i = 0; i < n; i ++ ) {\n\n    \t\tvar info = gl.getActiveAttrib( program, i );\n    \t\tvar name = info.name;\n\n    \t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n    \t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n    \t}\n\n    \treturn attributes;\n\n    }\n\n    function filterEmptyLine( string ) {\n\n    \treturn string !== '';\n\n    }\n\n    function replaceLightNums( string, parameters ) {\n\n    \treturn string\n    \t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n    \t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n    \t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n    \t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n    }\n\n    function parseIncludes( string ) {\n\n    \tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\n    \tfunction replace( match, include ) {\n\n    \t\tvar replace = ShaderChunk[ include ];\n\n    \t\tif ( replace === undefined ) {\n\n    \t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n    \t\t}\n\n    \t\treturn parseIncludes( replace );\n\n    \t}\n\n    \treturn string.replace( pattern, replace );\n\n    }\n\n    function unrollLoops( string ) {\n\n    \tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n    \tfunction replace( match, start, end, snippet ) {\n\n    \t\tvar unroll = '';\n\n    \t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n    \t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n    \t\t}\n\n    \t\treturn unroll;\n\n    \t}\n\n    \treturn string.replace( pattern, replace );\n\n    }\n\n    function WebGLProgram( renderer, code, material, parameters ) {\n\n    \tvar gl = renderer.context;\n\n    \tvar extensions = material.extensions;\n    \tvar defines = material.defines;\n\n    \tvar vertexShader = material.__webglShader.vertexShader;\n    \tvar fragmentShader = material.__webglShader.fragmentShader;\n\n    \tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n    \tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n    \t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n    \t}\n\n    \tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n    \tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n    \tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n    \tif ( parameters.envMap ) {\n\n    \t\tswitch ( material.envMap.mapping ) {\n\n    \t\t\tcase CubeReflectionMapping:\n    \t\t\tcase CubeRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n    \t\t\t\tbreak;\n\n    \t\t\tcase CubeUVReflectionMapping:\n    \t\t\tcase CubeUVRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n    \t\t\t\tbreak;\n\n    \t\t\tcase EquirectangularReflectionMapping:\n    \t\t\tcase EquirectangularRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n    \t\t\t\tbreak;\n\n    \t\t\tcase SphericalReflectionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tswitch ( material.envMap.mapping ) {\n\n    \t\t\tcase CubeRefractionMapping:\n    \t\t\tcase EquirectangularRefractionMapping:\n    \t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tswitch ( material.combine ) {\n\n    \t\t\tcase MultiplyOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n    \t\t\t\tbreak;\n\n    \t\t\tcase MixOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n    \t\t\t\tbreak;\n\n    \t\t\tcase AddOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t}\n\n    \tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n    \t// console.log( 'building new program ' );\n\n    \t//\n\n    \tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\n    \tvar customDefines = generateDefines( defines );\n\n    \t//\n\n    \tvar program = gl.createProgram();\n\n    \tvar prefixVertex, prefixFragment;\n\n    \tif ( material.isRawShaderMaterial ) {\n\n    \t\tprefixVertex = [\n\n    \t\t\tcustomDefines,\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t\tprefixFragment = [\n\n    \t\t\tcustomExtensions,\n    \t\t\tcustomDefines,\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t} else {\n\n    \t\tprefixVertex = [\n\n    \t\t\t'precision ' + parameters.precision + ' float;',\n    \t\t\t'precision ' + parameters.precision + ' int;',\n\n    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n    \t\t\tcustomDefines,\n\n    \t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n    \t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\n    \t\t\tparameters.map ? '#define USE_MAP' : '',\n    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n    \t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n    \t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n    \t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n    \t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n    \t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n    \t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n    \t\t\t'uniform mat4 modelMatrix;',\n    \t\t\t'uniform mat4 modelViewMatrix;',\n    \t\t\t'uniform mat4 projectionMatrix;',\n    \t\t\t'uniform mat4 viewMatrix;',\n    \t\t\t'uniform mat3 normalMatrix;',\n    \t\t\t'uniform vec3 cameraPosition;',\n\n    \t\t\t'attribute vec3 position;',\n    \t\t\t'attribute vec3 normal;',\n    \t\t\t'attribute vec2 uv;',\n\n    \t\t\t'#ifdef USE_COLOR',\n\n    \t\t\t'\tattribute vec3 color;',\n\n    \t\t\t'#endif',\n\n    \t\t\t'#ifdef USE_MORPHTARGETS',\n\n    \t\t\t'\tattribute vec3 morphTarget0;',\n    \t\t\t'\tattribute vec3 morphTarget1;',\n    \t\t\t'\tattribute vec3 morphTarget2;',\n    \t\t\t'\tattribute vec3 morphTarget3;',\n\n    \t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n    \t\t\t'\t\tattribute vec3 morphNormal0;',\n    \t\t\t'\t\tattribute vec3 morphNormal1;',\n    \t\t\t'\t\tattribute vec3 morphNormal2;',\n    \t\t\t'\t\tattribute vec3 morphNormal3;',\n\n    \t\t\t'\t#else',\n\n    \t\t\t'\t\tattribute vec3 morphTarget4;',\n    \t\t\t'\t\tattribute vec3 morphTarget5;',\n    \t\t\t'\t\tattribute vec3 morphTarget6;',\n    \t\t\t'\t\tattribute vec3 morphTarget7;',\n\n    \t\t\t'\t#endif',\n\n    \t\t\t'#endif',\n\n    \t\t\t'#ifdef USE_SKINNING',\n\n    \t\t\t'\tattribute vec4 skinIndex;',\n    \t\t\t'\tattribute vec4 skinWeight;',\n\n    \t\t\t'#endif',\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t\tprefixFragment = [\n\n    \t\t\tcustomExtensions,\n\n    \t\t\t'precision ' + parameters.precision + ' float;',\n    \t\t\t'precision ' + parameters.precision + ' int;',\n\n    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n    \t\t\tcustomDefines,\n\n    \t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n    \t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n    \t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n    \t\t\tparameters.map ? '#define USE_MAP' : '',\n    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n    \t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n    \t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n    \t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n    \t\t\t'uniform mat4 viewMatrix;',\n    \t\t\t'uniform vec3 cameraPosition;',\n\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\n    \t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n    \t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n    \t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n    \t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n    \t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\n    \t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t}\n\n    \tvertexShader = parseIncludes( vertexShader, parameters );\n    \tvertexShader = replaceLightNums( vertexShader, parameters );\n\n    \tfragmentShader = parseIncludes( fragmentShader, parameters );\n    \tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n    \tif ( ! material.isShaderMaterial ) {\n\n    \t\tvertexShader = unrollLoops( vertexShader );\n    \t\tfragmentShader = unrollLoops( fragmentShader );\n\n    \t}\n\n    \tvar vertexGlsl = prefixVertex + vertexShader;\n    \tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n    \t// console.log( '*VERTEX*', vertexGlsl );\n    \t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n    \tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n    \tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n    \tgl.attachShader( program, glVertexShader );\n    \tgl.attachShader( program, glFragmentShader );\n\n    \t// Force a particular attribute to index 0.\n\n    \tif ( material.index0AttributeName !== undefined ) {\n\n    \t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n    \t} else if ( parameters.morphTargets === true ) {\n\n    \t\t// programs with morphTargets displace position out of attribute 0\n    \t\tgl.bindAttribLocation( program, 0, 'position' );\n\n    \t}\n\n    \tgl.linkProgram( program );\n\n    \tvar programLog = gl.getProgramInfoLog( program );\n    \tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n    \tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n    \tvar runnable = true;\n    \tvar haveDiagnostics = true;\n\n    \t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n    \t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n    \tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n    \t\trunnable = false;\n\n    \t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n    \t} else if ( programLog !== '' ) {\n\n    \t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n    \t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n    \t\thaveDiagnostics = false;\n\n    \t}\n\n    \tif ( haveDiagnostics ) {\n\n    \t\tthis.diagnostics = {\n\n    \t\t\trunnable: runnable,\n    \t\t\tmaterial: material,\n\n    \t\t\tprogramLog: programLog,\n\n    \t\t\tvertexShader: {\n\n    \t\t\t\tlog: vertexLog,\n    \t\t\t\tprefix: prefixVertex\n\n    \t\t\t},\n\n    \t\t\tfragmentShader: {\n\n    \t\t\t\tlog: fragmentLog,\n    \t\t\t\tprefix: prefixFragment\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \t// clean up\n\n    \tgl.deleteShader( glVertexShader );\n    \tgl.deleteShader( glFragmentShader );\n\n    \t// set up caching for uniform locations\n\n    \tvar cachedUniforms;\n\n    \tthis.getUniforms = function() {\n\n    \t\tif ( cachedUniforms === undefined ) {\n\n    \t\t\tcachedUniforms =\n    \t\t\t\t\tnew WebGLUniforms( gl, program, renderer );\n\n    \t\t}\n\n    \t\treturn cachedUniforms;\n\n    \t};\n\n    \t// set up caching for attribute locations\n\n    \tvar cachedAttributes;\n\n    \tthis.getAttributes = function() {\n\n    \t\tif ( cachedAttributes === undefined ) {\n\n    \t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n    \t\t}\n\n    \t\treturn cachedAttributes;\n\n    \t};\n\n    \t// free resource\n\n    \tthis.destroy = function() {\n\n    \t\tgl.deleteProgram( program );\n    \t\tthis.program = undefined;\n\n    \t};\n\n    \t// DEPRECATED\n\n    \tObject.defineProperties( this, {\n\n    \t\tuniforms: {\n    \t\t\tget: function() {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n    \t\t\t\treturn this.getUniforms();\n\n    \t\t\t}\n    \t\t},\n\n    \t\tattributes: {\n    \t\t\tget: function() {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n    \t\t\t\treturn this.getAttributes();\n\n    \t\t\t}\n    \t\t}\n\n    \t} );\n\n\n    \t//\n\n    \tthis.id = programIdCount ++;\n    \tthis.code = code;\n    \tthis.usedTimes = 1;\n    \tthis.program = program;\n    \tthis.vertexShader = glVertexShader;\n    \tthis.fragmentShader = glFragmentShader;\n\n    \treturn this;\n\n    }\n\n    function WebGLPrograms( renderer, capabilities ) {\n\n    \tvar programs = [];\n\n    \tvar shaderIDs = {\n    \t\tMeshDepthMaterial: 'depth',\n    \t\tMeshNormalMaterial: 'normal',\n    \t\tMeshBasicMaterial: 'basic',\n    \t\tMeshLambertMaterial: 'lambert',\n    \t\tMeshPhongMaterial: 'phong',\n    \t\tMeshStandardMaterial: 'physical',\n    \t\tMeshPhysicalMaterial: 'physical',\n    \t\tLineBasicMaterial: 'basic',\n    \t\tLineDashedMaterial: 'dashed',\n    \t\tPointsMaterial: 'points'\n    \t};\n\n    \tvar parameterNames = [\n    \t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n    \t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n    \t\t\"roughnessMap\", \"metalnessMap\",\n    \t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n    \t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n    \t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n    \t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n    \t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n    \t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n    \t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n    \t];\n\n\n    \tfunction allocateBones( object ) {\n\n    \t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\n    \t\t\treturn 1024;\n\n    \t\t} else {\n\n    \t\t\t// default for when object is not specified\n    \t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n    \t\t\t//\n    \t\t\t//  - leave some extra space for other uniforms\n    \t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n    \t\t\t//    (up to 54 should be safe)\n\n    \t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n    \t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n    \t\t\tvar maxBones = nVertexMatrices;\n\n    \t\t\tif ( object !== undefined && (object && object.isSkinnedMesh) ) {\n\n    \t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\n    \t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\n    \t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn maxBones;\n\n    \t\t}\n\n    \t}\n\n    \tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n    \t\tvar encoding;\n\n    \t\tif ( ! map ) {\n\n    \t\t\tencoding = LinearEncoding;\n\n    \t\t} else if ( (map && map.isTexture) ) {\n\n    \t\t\tencoding = map.encoding;\n\n    \t\t} else if ( (map && map.isWebGLRenderTarget) ) {\n\n    \t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n    \t\t\tencoding = map.texture.encoding;\n\n    \t\t}\n\n    \t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n    \t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n    \t\t\tencoding = GammaEncoding;\n\n    \t\t}\n\n    \t\treturn encoding;\n\n    \t}\n\n    \tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\n    \t\tvar shaderID = shaderIDs[ material.type ];\n\n    \t\t// heuristics to create shader parameters according to lights in the scene\n    \t\t// (not to blow over maxLights budget)\n\n    \t\tvar maxBones = allocateBones( object );\n    \t\tvar precision = renderer.getPrecision();\n\n    \t\tif ( material.precision !== null ) {\n\n    \t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n    \t\t\tif ( precision !== material.precision ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\n    \t\tvar parameters = {\n\n    \t\t\tshaderID: shaderID,\n\n    \t\t\tprecision: precision,\n    \t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n    \t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n    \t\t\tmap: !! material.map,\n    \t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n    \t\t\tenvMap: !! material.envMap,\n    \t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n    \t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n    \t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n    \t\t\tlightMap: !! material.lightMap,\n    \t\t\taoMap: !! material.aoMap,\n    \t\t\temissiveMap: !! material.emissiveMap,\n    \t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n    \t\t\tbumpMap: !! material.bumpMap,\n    \t\t\tnormalMap: !! material.normalMap,\n    \t\t\tdisplacementMap: !! material.displacementMap,\n    \t\t\troughnessMap: !! material.roughnessMap,\n    \t\t\tmetalnessMap: !! material.metalnessMap,\n    \t\t\tspecularMap: !! material.specularMap,\n    \t\t\talphaMap: !! material.alphaMap,\n\n    \t\t\tcombine: material.combine,\n\n    \t\t\tvertexColors: material.vertexColors,\n\n    \t\t\tfog: !! fog,\n    \t\t\tuseFog: material.fog,\n    \t\t\tfogExp: (fog && fog.isFogExp2),\n\n    \t\t\tflatShading: material.shading === FlatShading,\n\n    \t\t\tsizeAttenuation: material.sizeAttenuation,\n    \t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n    \t\t\tskinning: material.skinning,\n    \t\t\tmaxBones: maxBones,\n    \t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\n    \t\t\tmorphTargets: material.morphTargets,\n    \t\t\tmorphNormals: material.morphNormals,\n    \t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n    \t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n    \t\t\tnumDirLights: lights.directional.length,\n    \t\t\tnumPointLights: lights.point.length,\n    \t\t\tnumSpotLights: lights.spot.length,\n    \t\t\tnumHemiLights: lights.hemi.length,\n\n    \t\t\tnumClippingPlanes: nClipPlanes,\n\n    \t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n    \t\t\tshadowMapType: renderer.shadowMap.type,\n\n    \t\t\ttoneMapping: renderer.toneMapping,\n    \t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n    \t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n    \t\t\talphaTest: material.alphaTest,\n    \t\t\tdoubleSided: material.side === DoubleSide,\n    \t\t\tflipSided: material.side === BackSide,\n\n    \t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n    \t\t};\n\n    \t\treturn parameters;\n\n    \t};\n\n    \tthis.getProgramCode = function ( material, parameters ) {\n\n    \t\tvar array = [];\n\n    \t\tif ( parameters.shaderID ) {\n\n    \t\t\tarray.push( parameters.shaderID );\n\n    \t\t} else {\n\n    \t\t\tarray.push( material.fragmentShader );\n    \t\t\tarray.push( material.vertexShader );\n\n    \t\t}\n\n    \t\tif ( material.defines !== undefined ) {\n\n    \t\t\tfor ( var name in material.defines ) {\n\n    \t\t\t\tarray.push( name );\n    \t\t\t\tarray.push( material.defines[ name ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n    \t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n    \t\t}\n\n    \t\treturn array.join();\n\n    \t};\n\n    \tthis.acquireProgram = function ( material, parameters, code ) {\n\n    \t\tvar program;\n\n    \t\t// Check if code has been already compiled\n    \t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n    \t\t\tvar programInfo = programs[ p ];\n\n    \t\t\tif ( programInfo.code === code ) {\n\n    \t\t\t\tprogram = programInfo;\n    \t\t\t\t++ program.usedTimes;\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tprogram = new WebGLProgram( renderer, code, material, parameters );\n    \t\t\tprograms.push( program );\n\n    \t\t}\n\n    \t\treturn program;\n\n    \t};\n\n    \tthis.releaseProgram = function( program ) {\n\n    \t\tif ( -- program.usedTimes === 0 ) {\n\n    \t\t\t// Remove from unordered set\n    \t\t\tvar i = programs.indexOf( program );\n    \t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n    \t\t\tprograms.pop();\n\n    \t\t\t// Free WebGL resources\n    \t\t\tprogram.destroy();\n\n    \t\t}\n\n    \t};\n\n    \t// Exposed for resource monitoring & error feedback via renderer.info:\n    \tthis.programs = programs;\n\n    }\n\n    function WebGLGeometries( gl, properties, info ) {\n\n    \tvar geometries = {};\n\n    \tfunction onGeometryDispose( event ) {\n\n    \t\tvar geometry = event.target;\n    \t\tvar buffergeometry = geometries[ geometry.id ];\n\n    \t\tif ( buffergeometry.index !== null ) {\n\n    \t\t\tdeleteAttribute( buffergeometry.index );\n\n    \t\t}\n\n    \t\tdeleteAttributes( buffergeometry.attributes );\n\n    \t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n    \t\tdelete geometries[ geometry.id ];\n\n    \t\t// TODO\n\n    \t\tvar property = properties.get( geometry );\n\n    \t\tif ( property.wireframe ) {\n\n    \t\t\tdeleteAttribute( property.wireframe );\n\n    \t\t}\n\n    \t\tproperties.delete( geometry );\n\n    \t\tvar bufferproperty = properties.get( buffergeometry );\n\n    \t\tif ( bufferproperty.wireframe ) {\n\n    \t\t\tdeleteAttribute( bufferproperty.wireframe );\n\n    \t\t}\n\n    \t\tproperties.delete( buffergeometry );\n\n    \t\t//\n\n    \t\tinfo.memory.geometries --;\n\n    \t}\n\n    \tfunction getAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n    \t\t}\n\n    \t\treturn properties.get( attribute ).__webglBuffer;\n\n    \t}\n\n    \tfunction deleteAttribute( attribute ) {\n\n    \t\tvar buffer = getAttributeBuffer( attribute );\n\n    \t\tif ( buffer !== undefined ) {\n\n    \t\t\tgl.deleteBuffer( buffer );\n    \t\t\tremoveAttributeBuffer( attribute );\n\n    \t\t}\n\n    \t}\n\n    \tfunction deleteAttributes( attributes ) {\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tdeleteAttribute( attributes[ name ] );\n\n    \t\t}\n\n    \t}\n\n    \tfunction removeAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\tproperties.delete( attribute.data );\n\n    \t\t} else {\n\n    \t\t\tproperties.delete( attribute );\n\n    \t\t}\n\n    \t}\n\n    \treturn {\n\n    \t\tget: function ( object ) {\n\n    \t\t\tvar geometry = object.geometry;\n\n    \t\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\n    \t\t\t\treturn geometries[ geometry.id ];\n\n    \t\t\t}\n\n    \t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n    \t\t\tvar buffergeometry;\n\n    \t\t\tif ( geometry.isBufferGeometry ) {\n\n    \t\t\t\tbuffergeometry = geometry;\n\n    \t\t\t} else if ( geometry.isGeometry ) {\n\n    \t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n    \t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n    \t\t\t\t}\n\n    \t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n    \t\t\t}\n\n    \t\t\tgeometries[ geometry.id ] = buffergeometry;\n\n    \t\t\tinfo.memory.geometries ++;\n\n    \t\t\treturn buffergeometry;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLObjects( gl, properties, info ) {\n\n    \tvar geometries = new WebGLGeometries( gl, properties, info );\n\n    \t//\n\n    \tfunction update( object ) {\n\n    \t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\n    \t\tvar geometry = geometries.get( object );\n\n    \t\tif ( object.geometry.isGeometry ) {\n\n    \t\t\tgeometry.updateFromObject( object );\n\n    \t\t}\n\n    \t\tvar index = geometry.index;\n    \t\tvar attributes = geometry.attributes;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\n    \t\t}\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\n    \t\t}\n\n    \t\t// morph targets\n\n    \t\tvar morphAttributes = geometry.morphAttributes;\n\n    \t\tfor ( var name in morphAttributes ) {\n\n    \t\t\tvar array = morphAttributes[ name ];\n\n    \t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n    \t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    \tfunction updateAttribute( attribute, bufferType ) {\n\n    \t\tvar data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;\n\n    \t\tvar attributeProperties = properties.get( data );\n\n    \t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\n    \t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\n    \t\t} else if ( attributeProperties.version !== data.version ) {\n\n    \t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\n    \t\t}\n\n    \t}\n\n    \tfunction createBuffer( attributeProperties, data, bufferType ) {\n\n    \t\tattributeProperties.__webglBuffer = gl.createBuffer();\n    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n    \t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n    \t\tgl.bufferData( bufferType, data.array, usage );\n\n    \t\tattributeProperties.version = data.version;\n\n    \t}\n\n    \tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\n    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n    \t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\n    \t\t\t// Not using update ranges\n\n    \t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\n    \t\t} else if ( data.updateRange.count === 0 ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n    \t\t} else {\n\n    \t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n    \t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\n    \t\t\tdata.updateRange.count = 0; // reset range\n\n    \t\t}\n\n    \t\tattributeProperties.version = data.version;\n\n    \t}\n\n    \tfunction getAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n    \t\t}\n\n    \t\treturn properties.get( attribute ).__webglBuffer;\n\n    \t}\n\n    \tfunction getWireframeAttribute( geometry ) {\n\n    \t\tvar property = properties.get( geometry );\n\n    \t\tif ( property.wireframe !== undefined ) {\n\n    \t\t\treturn property.wireframe;\n\n    \t\t}\n\n    \t\tvar indices = [];\n\n    \t\tvar index = geometry.index;\n    \t\tvar attributes = geometry.attributes;\n    \t\tvar position = attributes.position;\n\n    \t\t// console.time( 'wireframe' );\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tvar edges = {};\n    \t\t\tvar array = index.array;\n\n    \t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n    \t\t\t\tvar a = array[ i + 0 ];\n    \t\t\t\tvar b = array[ i + 1 ];\n    \t\t\t\tvar c = array[ i + 2 ];\n\n    \t\t\t\tindices.push( a, b, b, c, c, a );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tvar array = attributes.position.array;\n\n    \t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n    \t\t\t\tvar a = i + 0;\n    \t\t\t\tvar b = i + 1;\n    \t\t\t\tvar c = i + 2;\n\n    \t\t\t\tindices.push( a, b, b, c, c, a );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// console.timeEnd( 'wireframe' );\n\n    \t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n    \t\tvar attribute = new BufferAttribute( new TypeArray( indices ), 1 );\n\n    \t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n    \t\tproperty.wireframe = attribute;\n\n    \t\treturn attribute;\n\n    \t}\n\n    \treturn {\n\n    \t\tgetAttributeBuffer: getAttributeBuffer,\n    \t\tgetWireframeAttribute: getWireframeAttribute,\n\n    \t\tupdate: update\n\n    \t};\n\n    }\n\n    function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\n    \tvar _infoMemory = info.memory;\n    \tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\n    \t//\n\n    \tfunction clampToMaxSize( image, maxSize ) {\n\n    \t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n    \t\t\t// Warning: Scaling through the canvas will only work with images that use\n    \t\t\t// premultiplied alpha.\n\n    \t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\tcanvas.width = Math.floor( image.width * scale );\n    \t\t\tcanvas.height = Math.floor( image.height * scale );\n\n    \t\t\tvar context = canvas.getContext( '2d' );\n    \t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n    \t\t\treturn canvas;\n\n    \t\t}\n\n    \t\treturn image;\n\n    \t}\n\n    \tfunction isPowerOfTwo( image ) {\n\n    \t\treturn exports.Math.isPowerOfTwo( image.width ) && exports.Math.isPowerOfTwo( image.height );\n\n    \t}\n\n    \tfunction makePowerOfTwo( image ) {\n\n    \t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\n    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\tcanvas.width = exports.Math.nearestPowerOfTwo( image.width );\n    \t\t\tcanvas.height = exports.Math.nearestPowerOfTwo( image.height );\n\n    \t\t\tvar context = canvas.getContext( '2d' );\n    \t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n    \t\t\treturn canvas;\n\n    \t\t}\n\n    \t\treturn image;\n\n    \t}\n\n    \tfunction textureNeedsPowerOfTwo( texture ) {\n\n    \t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;\n    \t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;\n\n    \t\treturn false;\n\n    \t}\n\n    \t// Fallback filters for non-power-of-2 textures\n\n    \tfunction filterFallback( f ) {\n\n    \t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\n    \t\t\treturn _gl.NEAREST;\n\n    \t\t}\n\n    \t\treturn _gl.LINEAR;\n\n    \t}\n\n    \t//\n\n    \tfunction onTextureDispose( event ) {\n\n    \t\tvar texture = event.target;\n\n    \t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n    \t\tdeallocateTexture( texture );\n\n    \t\t_infoMemory.textures --;\n\n\n    \t}\n\n    \tfunction onRenderTargetDispose( event ) {\n\n    \t\tvar renderTarget = event.target;\n\n    \t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n    \t\tdeallocateRenderTarget( renderTarget );\n\n    \t\t_infoMemory.textures --;\n\n    \t}\n\n    \t//\n\n    \tfunction deallocateTexture( texture ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n    \t\t\t// cube texture\n\n    \t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n    \t\t} else {\n\n    \t\t\t// 2D texture\n\n    \t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n    \t\t}\n\n    \t\t// remove all webgl properties\n    \t\tproperties.delete( texture );\n\n    \t}\n\n    \tfunction deallocateRenderTarget( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\n    \t\tif ( ! renderTarget ) return;\n\n    \t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n    \t\t}\n\n    \t\tif ( renderTarget.depthTexture ) {\n\n    \t\t\trenderTarget.depthTexture.dispose();\n\n    \t\t}\n\n    \t\tif ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n    \t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n    \t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n    \t\t}\n\n    \t\tproperties.delete( renderTarget.texture );\n    \t\tproperties.delete( renderTarget );\n\n    \t}\n\n    \t//\n\n\n\n    \tfunction setTexture2D( texture, slot ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n    \t\t\tvar image = texture.image;\n\n    \t\t\tif ( image === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n    \t\t\t} else if ( image.complete === false ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n    \t\t\t} else {\n\n    \t\t\t\tuploadTexture( textureProperties, texture, slot );\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n    \t}\n\n    \tfunction setTextureCube( texture, slot ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.image.length === 6 ) {\n\n    \t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n    \t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n    \t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n    \t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n    \t\t\t\t\t_infoMemory.textures ++;\n\n    \t\t\t\t}\n\n    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n    \t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n    \t\t\t\tvar isCompressed = (texture && texture.isCompressedTexture);\n    \t\t\t\tvar isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);\n\n    \t\t\t\tvar cubeImage = [];\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n    \t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tvar image = cubeImage[ 0 ],\n    \t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n    \t\t\t\tglFormat = paramThreeToGL( texture.format ),\n    \t\t\t\tglType = paramThreeToGL( texture.type );\n\n    \t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\tif ( ! isCompressed ) {\n\n    \t\t\t\t\t\tif ( isDataTexture ) {\n\n    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n    \t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n    \t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n    \t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n    \t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n    \t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n    \t\t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\n    \t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n    \t\t\t\t}\n\n    \t\t\t\ttextureProperties.__version = texture.version;\n\n    \t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction setTextureCubeDynamic( texture, slot ) {\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n    \t}\n\n    \tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\n    \t\tvar extension;\n\n    \t\tif ( isPowerOfTwoImage ) {\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n    \t\t} else {\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n    \t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n    \t\t\t}\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n    \t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n    \t\tif ( extension ) {\n\n    \t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n    \t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n    \t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n    \t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n    \t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction uploadTexture( textureProperties, texture, slot ) {\n\n    \t\tif ( textureProperties.__webglInit === undefined ) {\n\n    \t\t\ttextureProperties.__webglInit = true;\n\n    \t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n    \t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n    \t\t\t_infoMemory.textures ++;\n\n    \t\t}\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n    \t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n    \t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n    \t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n    \t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n    \t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n    \t\t\timage = makePowerOfTwo( image );\n\n    \t\t}\n\n    \t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n    \t\tglFormat = paramThreeToGL( texture.format ),\n    \t\tglType = paramThreeToGL( texture.type );\n\n    \t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n    \t\tvar mipmap, mipmaps = texture.mipmaps;\n\n    \t\tif ( (texture && texture.isDepthTexture) ) {\n\n    \t\t\t// populate depth texture with dummy data\n\n    \t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n    \t\t\tif ( texture.type === FloatType ) {\n\n    \t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n    \t\t\t} else if ( _isWebGL2 ) {\n\n    \t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n    \t\t\t}\n\n    \t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n    \t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n    \t\t\tif ( texture.format === DepthStencilFormat ) {\n\n    \t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\n    \t\t\t}\n\n    \t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n    \t\t} else if ( (texture && texture.isDataTexture) ) {\n\n    \t\t\t// use manually created mipmaps if available\n    \t\t\t// if there are no manual mipmaps\n    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\t\tmipmap = mipmaps[ i ];\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.generateMipmaps = false;\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n    \t\t\t}\n\n    \t\t} else if ( (texture && texture.isCompressedTexture) ) {\n\n    \t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\tmipmap = mipmaps[ i ];\n\n    \t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n    \t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n    \t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// regular Texture (image, video, canvas)\n\n    \t\t\t// use manually created mipmaps if available\n    \t\t\t// if there are no manual mipmaps\n    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\t\tmipmap = mipmaps[ i ];\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.generateMipmaps = false;\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n    \t\ttextureProperties.__version = texture.version;\n\n    \t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n    \t}\n\n    \t// Render targets\n\n    \t// Setup storage for target texture and bind it to correct framebuffer\n    \tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n    \t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n    \t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n    \t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n    \t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n    \t}\n\n    \t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n    \tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\n    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n    \t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n    \t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n    \t\t} else {\n\n    \t\t\t// FIXME: We don't support !depth !stencil\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n    \t\t}\n\n    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n    \t}\n\n    \t// Setup resources for a Depth Texture for a FBO (needs an extension)\n    \tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n    \t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n    \t\tif ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {\n\n    \t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\n    \t\t}\n\n    \t\t// upload an empty depth texture with framebuffer size\n    \t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n    \t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n    \t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n    \t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n    \t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n    \t\t\trenderTarget.depthTexture.needsUpdate = true;\n    \t\t}\n\n    \t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n    \t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n    \t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n    \t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n    \t\t} else {\n\n    \t\t\tthrow new Error('Unknown depthTexture format')\n\n    \t\t}\n\n    \t}\n\n    \t// Setup GL resources for a non-texture depth buffer\n    \tfunction setupDepthRenderbuffer( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\n    \t\tif ( renderTarget.depthTexture ) {\n\n    \t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\n    \t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n    \t\t} else {\n\n    \t\t\tif ( isCube ) {\n\n    \t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n    \t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n    \t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n    \t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n    \t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n    \t}\n\n    \t// Set up GL resources for the render target\n    \tfunction setupRenderTarget( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\n    \t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n    \t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n    \t\t_infoMemory.textures ++;\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n    \t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n    \t\t// Setup framebuffer\n\n    \t\tif ( isCube ) {\n\n    \t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n    \t\t}\n\n    \t\t// Setup color buffer\n\n    \t\tif ( isCube ) {\n\n    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n    \t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n    \t\t\t}\n\n    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n    \t\t} else {\n\n    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n    \t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n    \t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n    \t\t}\n\n    \t\t// Setup depth and stencil buffers\n\n    \t\tif ( renderTarget.depthBuffer ) {\n\n    \t\t\tsetupDepthRenderbuffer( renderTarget );\n\n    \t\t}\n\n    \t}\n\n    \tfunction updateRenderTargetMipmap( renderTarget ) {\n\n    \t\tvar texture = renderTarget.texture;\n\n    \t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n    \t\t\t\ttexture.minFilter !== NearestFilter &&\n    \t\t\t\ttexture.minFilter !== LinearFilter ) {\n\n    \t\t\tvar target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n    \t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n    \t\t\tstate.bindTexture( target, webglTexture );\n    \t\t\t_gl.generateMipmap( target );\n    \t\t\tstate.bindTexture( target, null );\n\n    \t\t}\n\n    \t}\n\n    \tthis.setTexture2D = setTexture2D;\n    \tthis.setTextureCube = setTextureCube;\n    \tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n    \tthis.setupRenderTarget = setupRenderTarget;\n    \tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n    }\n\n    /**\n     * @author fordacious / fordacious.github.io\n     */\n\n    function WebGLProperties() {\n\n    \tvar properties = {};\n\n    \treturn {\n\n    \t\tget: function ( object ) {\n\n    \t\t\tvar uuid = object.uuid;\n    \t\t\tvar map = properties[ uuid ];\n\n    \t\t\tif ( map === undefined ) {\n\n    \t\t\t\tmap = {};\n    \t\t\t\tproperties[ uuid ] = map;\n\n    \t\t\t}\n\n    \t\t\treturn map;\n\n    \t\t},\n\n    \t\tdelete: function ( object ) {\n\n    \t\t\tdelete properties[ object.uuid ];\n\n    \t\t},\n\n    \t\tclear: function () {\n\n    \t\t\tproperties = {};\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLState( gl, extensions, paramThreeToGL ) {\n\n    \tfunction ColorBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar color = new Vector4();\n    \t\tvar currentColorMask = null;\n    \t\tvar currentColorClear = new Vector4();\n\n    \t\treturn {\n\n    \t\t\tsetMask: function ( colorMask ) {\n\n    \t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n    \t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n    \t\t\t\t\tcurrentColorMask = colorMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( r, g, b, a ) {\n\n    \t\t\t\tcolor.set( r, g, b, a );\n\n    \t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n    \t\t\t\t\tgl.clearColor( r, g, b, a );\n    \t\t\t\t\tcurrentColorClear.copy( color );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentColorMask = null;\n    \t\t\t\tcurrentColorClear.set( 0, 0, 0, 1 );\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \tfunction DepthBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar currentDepthMask = null;\n    \t\tvar currentDepthFunc = null;\n    \t\tvar currentDepthClear = null;\n\n    \t\treturn {\n\n    \t\t\tsetTest: function ( depthTest ) {\n\n    \t\t\t\tif ( depthTest ) {\n\n    \t\t\t\t\tenable( gl.DEPTH_TEST );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetMask: function ( depthMask ) {\n\n    \t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n    \t\t\t\t\tgl.depthMask( depthMask );\n    \t\t\t\t\tcurrentDepthMask = depthMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetFunc: function ( depthFunc ) {\n\n    \t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n    \t\t\t\t\tif ( depthFunc ) {\n\n    \t\t\t\t\t\tswitch ( depthFunc ) {\n\n    \t\t\t\t\t\t\tcase NeverDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase AlwaysDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase LessDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase LessEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase EqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase GreaterDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase NotEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tdefault:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( depth ) {\n\n    \t\t\t\tif ( currentDepthClear !== depth ) {\n\n    \t\t\t\t\tgl.clearDepth( depth );\n    \t\t\t\t\tcurrentDepthClear = depth;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentDepthMask = null;\n    \t\t\t\tcurrentDepthFunc = null;\n    \t\t\t\tcurrentDepthClear = null;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \tfunction StencilBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar currentStencilMask = null;\n    \t\tvar currentStencilFunc = null;\n    \t\tvar currentStencilRef = null;\n    \t\tvar currentStencilFuncMask = null;\n    \t\tvar currentStencilFail  = null;\n    \t\tvar currentStencilZFail = null;\n    \t\tvar currentStencilZPass = null;\n    \t\tvar currentStencilClear = null;\n\n    \t\treturn {\n\n    \t\t\tsetTest: function ( stencilTest ) {\n\n    \t\t\t\tif ( stencilTest ) {\n\n    \t\t\t\t\tenable( gl.STENCIL_TEST );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetMask: function ( stencilMask ) {\n\n    \t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n    \t\t\t\t\tgl.stencilMask( stencilMask );\n    \t\t\t\t\tcurrentStencilMask = stencilMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n    \t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n    \t\t\t\t     currentStencilRef \t!== stencilRef \t||\n    \t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n    \t\t\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\n    \t\t\t\t\tcurrentStencilFunc = stencilFunc;\n    \t\t\t\t\tcurrentStencilRef  = stencilRef;\n    \t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n    \t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n    \t\t\t\t     currentStencilZFail !== stencilZFail ||\n    \t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n    \t\t\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\n    \t\t\t\t\tcurrentStencilFail  = stencilFail;\n    \t\t\t\t\tcurrentStencilZFail = stencilZFail;\n    \t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( stencil ) {\n\n    \t\t\t\tif ( currentStencilClear !== stencil ) {\n\n    \t\t\t\t\tgl.clearStencil( stencil );\n    \t\t\t\t\tcurrentStencilClear = stencil;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentStencilMask = null;\n    \t\t\t\tcurrentStencilFunc = null;\n    \t\t\t\tcurrentStencilRef = null;\n    \t\t\t\tcurrentStencilFuncMask = null;\n    \t\t\t\tcurrentStencilFail = null;\n    \t\t\t\tcurrentStencilZFail = null;\n    \t\t\t\tcurrentStencilZPass = null;\n    \t\t\t\tcurrentStencilClear = null;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \t//\n\n    \tvar colorBuffer = new ColorBuffer();\n    \tvar depthBuffer = new DepthBuffer();\n    \tvar stencilBuffer = new StencilBuffer();\n\n    \tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    \tvar newAttributes = new Uint8Array( maxVertexAttributes );\n    \tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n    \tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n    \tvar capabilities = {};\n\n    \tvar compressedTextureFormats = null;\n\n    \tvar currentBlending = null;\n    \tvar currentBlendEquation = null;\n    \tvar currentBlendSrc = null;\n    \tvar currentBlendDst = null;\n    \tvar currentBlendEquationAlpha = null;\n    \tvar currentBlendSrcAlpha = null;\n    \tvar currentBlendDstAlpha = null;\n    \tvar currentPremultipledAlpha = false;\n\n    \tvar currentFlipSided = null;\n    \tvar currentCullFace = null;\n\n    \tvar currentLineWidth = null;\n\n    \tvar currentPolygonOffsetFactor = null;\n    \tvar currentPolygonOffsetUnits = null;\n\n    \tvar currentScissorTest = null;\n\n    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\n    \tvar currentTextureSlot = null;\n    \tvar currentBoundTextures = {};\n\n    \tvar currentScissor = new Vector4();\n    \tvar currentViewport = new Vector4();\n\n    \tfunction createTexture( type, target, count ) {\n\n    \t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n    \t\tvar texture = gl.createTexture();\n\n    \t\tgl.bindTexture( type, texture );\n    \t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n    \t\tfor ( var i = 0; i < count; i ++ ) {\n\n    \t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t}\n\n    \tvar emptyTextures = {};\n    \temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n    \temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n    \t//\n\n    \tfunction init() {\n\n    \t\tclearColor( 0, 0, 0, 1 );\n    \t\tclearDepth( 1 );\n    \t\tclearStencil( 0 );\n\n    \t\tenable( gl.DEPTH_TEST );\n    \t\tsetDepthFunc( LessEqualDepth );\n\n    \t\tsetFlipSided( false );\n    \t\tsetCullFace( CullFaceBack );\n    \t\tenable( gl.CULL_FACE );\n\n    \t\tenable( gl.BLEND );\n    \t\tsetBlending( NormalBlending );\n\n    \t}\n\n    \tfunction initAttributes() {\n\n    \t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n    \t\t\tnewAttributes[ i ] = 0;\n\n    \t\t}\n\n    \t}\n\n    \tfunction enableAttribute( attribute ) {\n\n    \t\tnewAttributes[ attribute ] = 1;\n\n    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n    \t\t\tgl.enableVertexAttribArray( attribute );\n    \t\t\tenabledAttributes[ attribute ] = 1;\n\n    \t\t}\n\n    \t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n    \t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n    \t\t\tattributeDivisors[ attribute ] = 0;\n\n    \t\t}\n\n    \t}\n\n    \tfunction enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {\n\n    \t\tnewAttributes[ attribute ] = 1;\n\n    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n    \t\t\tgl.enableVertexAttribArray( attribute );\n    \t\t\tenabledAttributes[ attribute ] = 1;\n\n    \t\t}\n\n    \t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n    \t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n    \t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n    \t\t}\n\n    \t}\n\n    \tfunction disableUnusedAttributes() {\n\n    \t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n    \t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n    \t\t\t\tgl.disableVertexAttribArray( i );\n    \t\t\t\tenabledAttributes[ i ] = 0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction enable( id ) {\n\n    \t\tif ( capabilities[ id ] !== true ) {\n\n    \t\t\tgl.enable( id );\n    \t\t\tcapabilities[ id ] = true;\n\n    \t\t}\n\n    \t}\n\n    \tfunction disable( id ) {\n\n    \t\tif ( capabilities[ id ] !== false ) {\n\n    \t\t\tgl.disable( id );\n    \t\t\tcapabilities[ id ] = false;\n\n    \t\t}\n\n    \t}\n\n    \tfunction getCompressedTextureFormats() {\n\n    \t\tif ( compressedTextureFormats === null ) {\n\n    \t\t\tcompressedTextureFormats = [];\n\n    \t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n    \t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n    \t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n    \t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n    \t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n    \t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn compressedTextureFormats;\n\n    \t}\n\n    \tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n    \t\tif ( blending !== NoBlending ) {\n\n    \t\t\tenable( gl.BLEND );\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.BLEND );\n    \t\t\tcurrentBlending = blending; // no blending, that is\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n    \t\t\tif ( blending === AdditiveBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( blending === SubtractiveBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( blending === MultiplyBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tcurrentBlending = blending;\n    \t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n    \t\t}\n\n    \t\tif ( blending === CustomBlending ) {\n\n    \t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n    \t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n    \t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n    \t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n    \t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\n    \t\t\t\tcurrentBlendEquation = blendEquation;\n    \t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n    \t\t\t}\n\n    \t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n    \t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\n    \t\t\t\tcurrentBlendSrc = blendSrc;\n    \t\t\t\tcurrentBlendDst = blendDst;\n    \t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n    \t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tcurrentBlendEquation = null;\n    \t\t\tcurrentBlendSrc = null;\n    \t\t\tcurrentBlendDst = null;\n    \t\t\tcurrentBlendEquationAlpha = null;\n    \t\t\tcurrentBlendSrcAlpha = null;\n    \t\t\tcurrentBlendDstAlpha = null;\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Deprecate\n\n    \tfunction setColorWrite( colorWrite ) {\n\n    \t\tcolorBuffer.setMask( colorWrite );\n\n    \t}\n\n    \tfunction setDepthTest( depthTest ) {\n\n    \t\tdepthBuffer.setTest( depthTest );\n\n    \t}\n\n    \tfunction setDepthWrite( depthWrite ) {\n\n    \t\tdepthBuffer.setMask( depthWrite );\n\n    \t}\n\n    \tfunction setDepthFunc( depthFunc ) {\n\n    \t\tdepthBuffer.setFunc( depthFunc );\n\n    \t}\n\n    \tfunction setStencilTest( stencilTest ) {\n\n    \t\tstencilBuffer.setTest( stencilTest );\n\n    \t}\n\n    \tfunction setStencilWrite( stencilWrite ) {\n\n    \t\tstencilBuffer.setMask( stencilWrite );\n\n    \t}\n\n    \tfunction setStencilFunc( stencilFunc, stencilRef, stencilMask ) {\n\n    \t\tstencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );\n\n    \t}\n\n    \tfunction setStencilOp( stencilFail, stencilZFail, stencilZPass ) {\n\n    \t\tstencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );\n\n    \t}\n\n    \t//\n\n    \tfunction setFlipSided( flipSided ) {\n\n    \t\tif ( currentFlipSided !== flipSided ) {\n\n    \t\t\tif ( flipSided ) {\n\n    \t\t\t\tgl.frontFace( gl.CW );\n\n    \t\t\t} else {\n\n    \t\t\t\tgl.frontFace( gl.CCW );\n\n    \t\t\t}\n\n    \t\t\tcurrentFlipSided = flipSided;\n\n    \t\t}\n\n    \t}\n\n    \tfunction setCullFace( cullFace ) {\n\n    \t\tif ( cullFace !== CullFaceNone ) {\n\n    \t\t\tenable( gl.CULL_FACE );\n\n    \t\t\tif ( cullFace !== currentCullFace ) {\n\n    \t\t\t\tif ( cullFace === CullFaceBack ) {\n\n    \t\t\t\t\tgl.cullFace( gl.BACK );\n\n    \t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n    \t\t\t\t\tgl.cullFace( gl.FRONT );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.CULL_FACE );\n\n    \t\t}\n\n    \t\tcurrentCullFace = cullFace;\n\n    \t}\n\n    \tfunction setLineWidth( width ) {\n\n    \t\tif ( width !== currentLineWidth ) {\n\n    \t\t\tgl.lineWidth( width );\n\n    \t\t\tcurrentLineWidth = width;\n\n    \t\t}\n\n    \t}\n\n    \tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n    \t\tif ( polygonOffset ) {\n\n    \t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n    \t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n    \t\t\t\tgl.polygonOffset( factor, units );\n\n    \t\t\t\tcurrentPolygonOffsetFactor = factor;\n    \t\t\t\tcurrentPolygonOffsetUnits = units;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n    \t\t}\n\n    \t}\n\n    \tfunction getScissorTest() {\n\n    \t\treturn currentScissorTest;\n\n    \t}\n\n    \tfunction setScissorTest( scissorTest ) {\n\n    \t\tcurrentScissorTest = scissorTest;\n\n    \t\tif ( scissorTest ) {\n\n    \t\t\tenable( gl.SCISSOR_TEST );\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.SCISSOR_TEST );\n\n    \t\t}\n\n    \t}\n\n    \t// texture\n\n    \tfunction activeTexture( webglSlot ) {\n\n    \t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n    \t\tif ( currentTextureSlot !== webglSlot ) {\n\n    \t\t\tgl.activeTexture( webglSlot );\n    \t\t\tcurrentTextureSlot = webglSlot;\n\n    \t\t}\n\n    \t}\n\n    \tfunction bindTexture( webglType, webglTexture ) {\n\n    \t\tif ( currentTextureSlot === null ) {\n\n    \t\t\tactiveTexture();\n\n    \t\t}\n\n    \t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n    \t\tif ( boundTexture === undefined ) {\n\n    \t\t\tboundTexture = { type: undefined, texture: undefined };\n    \t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n    \t\t}\n\n    \t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n    \t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n    \t\t\tboundTexture.type = webglType;\n    \t\t\tboundTexture.texture = webglTexture;\n\n    \t\t}\n\n    \t}\n\n    \tfunction compressedTexImage2D() {\n\n    \t\ttry {\n\n    \t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n    \t\t} catch ( error ) {\n\n    \t\t\tconsole.error( error );\n\n    \t\t}\n\n    \t}\n\n    \tfunction texImage2D() {\n\n    \t\ttry {\n\n    \t\t\tgl.texImage2D.apply( gl, arguments );\n\n    \t\t} catch ( error ) {\n\n    \t\t\tconsole.error( error );\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Deprecate\n\n    \tfunction clearColor( r, g, b, a ) {\n\n    \t\tcolorBuffer.setClear( r, g, b, a );\n\n    \t}\n\n    \tfunction clearDepth( depth ) {\n\n    \t\tdepthBuffer.setClear( depth );\n\n    \t}\n\n    \tfunction clearStencil( stencil ) {\n\n    \t\tstencilBuffer.setClear( stencil );\n\n    \t}\n\n    \t//\n\n    \tfunction scissor( scissor ) {\n\n    \t\tif ( currentScissor.equals( scissor ) === false ) {\n\n    \t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n    \t\t\tcurrentScissor.copy( scissor );\n\n    \t\t}\n\n    \t}\n\n    \tfunction viewport( viewport ) {\n\n    \t\tif ( currentViewport.equals( viewport ) === false ) {\n\n    \t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n    \t\t\tcurrentViewport.copy( viewport );\n\n    \t\t}\n\n    \t}\n\n    \t//\n\n    \tfunction reset() {\n\n    \t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n    \t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n    \t\t\t\tgl.disableVertexAttribArray( i );\n    \t\t\t\tenabledAttributes[ i ] = 0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tcapabilities = {};\n\n    \t\tcompressedTextureFormats = null;\n\n    \t\tcurrentTextureSlot = null;\n    \t\tcurrentBoundTextures = {};\n\n    \t\tcurrentBlending = null;\n\n    \t\tcurrentFlipSided = null;\n    \t\tcurrentCullFace = null;\n\n    \t\tcolorBuffer.reset();\n    \t\tdepthBuffer.reset();\n    \t\tstencilBuffer.reset();\n\n    \t}\n\n    \treturn {\n\n    \t\tbuffers: {\n    \t\t\tcolor: colorBuffer,\n    \t\t\tdepth: depthBuffer,\n    \t\t\tstencil: stencilBuffer\n    \t\t},\n\n    \t\tinit: init,\n    \t\tinitAttributes: initAttributes,\n    \t\tenableAttribute: enableAttribute,\n    \t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n    \t\tdisableUnusedAttributes: disableUnusedAttributes,\n    \t\tenable: enable,\n    \t\tdisable: disable,\n    \t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n    \t\tsetBlending: setBlending,\n\n    \t\tsetColorWrite: setColorWrite,\n    \t\tsetDepthTest: setDepthTest,\n    \t\tsetDepthWrite: setDepthWrite,\n    \t\tsetDepthFunc: setDepthFunc,\n    \t\tsetStencilTest: setStencilTest,\n    \t\tsetStencilWrite: setStencilWrite,\n    \t\tsetStencilFunc: setStencilFunc,\n    \t\tsetStencilOp: setStencilOp,\n\n    \t\tsetFlipSided: setFlipSided,\n    \t\tsetCullFace: setCullFace,\n\n    \t\tsetLineWidth: setLineWidth,\n    \t\tsetPolygonOffset: setPolygonOffset,\n\n    \t\tgetScissorTest: getScissorTest,\n    \t\tsetScissorTest: setScissorTest,\n\n    \t\tactiveTexture: activeTexture,\n    \t\tbindTexture: bindTexture,\n    \t\tcompressedTexImage2D: compressedTexImage2D,\n    \t\ttexImage2D: texImage2D,\n\n    \t\tclearColor: clearColor,\n    \t\tclearDepth: clearDepth,\n    \t\tclearStencil: clearStencil,\n\n    \t\tscissor: scissor,\n    \t\tviewport: viewport,\n\n    \t\treset: reset\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLCapabilities( gl, extensions, parameters ) {\n\n    \tvar maxAnisotropy;\n\n    \tfunction getMaxAnisotropy() {\n\n    \t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n    \t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n    \t\t} else {\n\n    \t\t\tmaxAnisotropy = 0;\n\n    \t\t}\n\n    \t\treturn maxAnisotropy;\n\n    \t}\n\n    \tfunction getMaxPrecision( precision ) {\n\n    \t\tif ( precision === 'highp' ) {\n\n    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n    \t\t\t\treturn 'highp';\n\n    \t\t\t}\n\n    \t\t\tprecision = 'mediump';\n\n    \t\t}\n\n    \t\tif ( precision === 'mediump' ) {\n\n    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n    \t\t\t\treturn 'mediump';\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn 'lowp';\n\n    \t}\n\n    \tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    \tvar maxPrecision = getMaxPrecision( precision );\n\n    \tif ( maxPrecision !== precision ) {\n\n    \t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n    \t\tprecision = maxPrecision;\n\n    \t}\n\n    \tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );\n\n    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n    \tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n    \tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n    \tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n    \tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    \tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n    \tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n    \tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n    \tvar vertexTextures = maxVertexTextures > 0;\n    \tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n    \tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n    \treturn {\n\n    \t\tgetMaxAnisotropy: getMaxAnisotropy,\n    \t\tgetMaxPrecision: getMaxPrecision,\n\n    \t\tprecision: precision,\n    \t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n    \t\tmaxTextures: maxTextures,\n    \t\tmaxVertexTextures: maxVertexTextures,\n    \t\tmaxTextureSize: maxTextureSize,\n    \t\tmaxCubemapSize: maxCubemapSize,\n\n    \t\tmaxAttributes: maxAttributes,\n    \t\tmaxVertexUniforms: maxVertexUniforms,\n    \t\tmaxVaryings: maxVaryings,\n    \t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n    \t\tvertexTextures: vertexTextures,\n    \t\tfloatFragmentTextures: floatFragmentTextures,\n    \t\tfloatVertexTextures: floatVertexTextures\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLExtensions( gl ) {\n\n    \tvar extensions = {};\n\n    \treturn {\n\n    \t\tget: function ( name ) {\n\n    \t\t\tif ( extensions[ name ] !== undefined ) {\n\n    \t\t\t\treturn extensions[ name ];\n\n    \t\t\t}\n\n    \t\t\tvar extension;\n\n    \t\t\tswitch ( name ) {\n\n    \t\t\t\tcase 'WEBGL_depth_texture':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'EXT_texture_filter_anisotropic':\n    \t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n    \t\t\t\t\textension = gl.getExtension( name );\n\n    \t\t\t}\n\n    \t\t\tif ( extension === null ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n    \t\t\t}\n\n    \t\t\textensions[ name ] = extension;\n\n    \t\t\treturn extension;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLClipping() {\n\n    \tvar scope = this,\n\n    \t\tglobalState = null,\n    \t\tnumGlobalPlanes = 0,\n    \t\tlocalClippingEnabled = false,\n    \t\trenderingShadows = false,\n\n    \t\tplane = new Plane(),\n    \t\tviewNormalMatrix = new Matrix3(),\n\n    \t\tuniform = { value: null, needsUpdate: false };\n\n    \tthis.uniform = uniform;\n    \tthis.numPlanes = 0;\n\n    \tthis.init = function( planes, enableLocalClipping, camera ) {\n\n    \t\tvar enabled =\n    \t\t\tplanes.length !== 0 ||\n    \t\t\tenableLocalClipping ||\n    \t\t\t// enable state of previous frame - the clipping code has to\n    \t\t\t// run another frame in order to reset the state:\n    \t\t\tnumGlobalPlanes !== 0 ||\n    \t\t\tlocalClippingEnabled;\n\n    \t\tlocalClippingEnabled = enableLocalClipping;\n\n    \t\tglobalState = projectPlanes( planes, camera, 0 );\n    \t\tnumGlobalPlanes = planes.length;\n\n    \t\treturn enabled;\n\n    \t};\n\n    \tthis.beginShadows = function() {\n\n    \t\trenderingShadows = true;\n    \t\tprojectPlanes( null );\n\n    \t};\n\n    \tthis.endShadows = function() {\n\n    \t\trenderingShadows = false;\n    \t\tresetGlobalState();\n\n    \t};\n\n    \tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\n    \t\tif ( ! localClippingEnabled ||\n    \t\t\t\tplanes === null || planes.length === 0 ||\n    \t\t\t\trenderingShadows && ! clipShadows ) {\n    \t\t\t// there's no local clipping\n\n    \t\t\tif ( renderingShadows ) {\n    \t\t\t\t// there's no global clipping\n\n    \t\t\t\tprojectPlanes( null );\n\n    \t\t\t} else {\n\n    \t\t\t\tresetGlobalState();\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n    \t\t\t\tlGlobal = nGlobal * 4,\n\n    \t\t\t\tdstArray = cache.clippingState || null;\n\n    \t\t\tuniform.value = dstArray; // ensure unique state\n\n    \t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n    \t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n    \t\t\t\tdstArray[ i ] = globalState[ i ];\n\n    \t\t\t}\n\n    \t\t\tcache.clippingState = dstArray;\n    \t\t\tthis.numPlanes += nGlobal;\n\n    \t\t}\n\n\n    \t};\n\n    \tfunction resetGlobalState() {\n\n    \t\tif ( uniform.value !== globalState ) {\n\n    \t\t\tuniform.value = globalState;\n    \t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n    \t\t}\n\n    \t\tscope.numPlanes = numGlobalPlanes;\n\n    \t}\n\n    \tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n    \t\tvar nPlanes = planes !== null ? planes.length : 0,\n    \t\t\tdstArray = null;\n\n    \t\tif ( nPlanes !== 0 ) {\n\n    \t\t\tdstArray = uniform.value;\n\n    \t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n    \t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n    \t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n    \t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n    \t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n    \t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var i = 0, i4 = dstOffset;\n    \t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\n    \t\t\t\t\tplane.copy( planes[ i ] ).\n    \t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\n    \t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n    \t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tuniform.value = dstArray;\n    \t\t\tuniform.needsUpdate = true;\n\n    \t\t}\n\n    \t\tscope.numPlanes = nPlanes;\n    \t\treturn dstArray;\n\n    \t}\n\n    }\n\n    /**\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author szimek / https://github.com/szimek/\n     * @author tschw\n     */\n\n    function WebGLRenderer( parameters ) {\n\n    \tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\n    \tparameters = parameters || {};\n\n    \tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n    \t_context = parameters.context !== undefined ? parameters.context : null,\n\n    \t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n    \t_depth = parameters.depth !== undefined ? parameters.depth : true,\n    \t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n    \t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n    \t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n    \t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n    \tvar lights = [];\n\n    \tvar opaqueObjects = [];\n    \tvar opaqueObjectsLastIndex = - 1;\n    \tvar transparentObjects = [];\n    \tvar transparentObjectsLastIndex = - 1;\n\n    \tvar morphInfluences = new Float32Array( 8 );\n\n    \tvar sprites = [];\n    \tvar lensFlares = [];\n\n    \t// public properties\n\n    \tthis.domElement = _canvas;\n    \tthis.context = null;\n\n    \t// clearing\n\n    \tthis.autoClear = true;\n    \tthis.autoClearColor = true;\n    \tthis.autoClearDepth = true;\n    \tthis.autoClearStencil = true;\n\n    \t// scene graph\n\n    \tthis.sortObjects = true;\n\n    \t// user-defined clipping\n\n    \tthis.clippingPlanes = [];\n    \tthis.localClippingEnabled = false;\n\n    \t// physically based shading\n\n    \tthis.gammaFactor = 2.0;\t// for backwards compatibility\n    \tthis.gammaInput = false;\n    \tthis.gammaOutput = false;\n\n    \t// physical lights\n\n    \tthis.physicallyCorrectLights = false;\n\n    \t// tone mapping\n\n    \tthis.toneMapping = LinearToneMapping;\n    \tthis.toneMappingExposure = 1.0;\n    \tthis.toneMappingWhitePoint = 1.0;\n\n    \t// morphs\n\n    \tthis.maxMorphTargets = 8;\n    \tthis.maxMorphNormals = 4;\n\n    \t// internal properties\n\n    \tvar _this = this,\n\n    \t// internal state cache\n\n    \t_currentProgram = null,\n    \t_currentRenderTarget = null,\n    \t_currentFramebuffer = null,\n    \t_currentMaterialId = - 1,\n    \t_currentGeometryProgram = '',\n    \t_currentCamera = null,\n\n    \t_currentScissor = new Vector4(),\n    \t_currentScissorTest = null,\n\n    \t_currentViewport = new Vector4(),\n\n    \t//\n\n    \t_usedTextureUnits = 0,\n\n    \t//\n\n    \t_clearColor = new Color( 0x000000 ),\n    \t_clearAlpha = 0,\n\n    \t_width = _canvas.width,\n    \t_height = _canvas.height,\n\n    \t_pixelRatio = 1,\n\n    \t_scissor = new Vector4( 0, 0, _width, _height ),\n    \t_scissorTest = false,\n\n    \t_viewport = new Vector4( 0, 0, _width, _height ),\n\n    \t// frustum\n\n    \t_frustum = new Frustum(),\n\n    \t// clipping\n\n    \t_clipping = new WebGLClipping(),\n    \t_clippingEnabled = false,\n    \t_localClippingEnabled = false,\n\n    \t_sphere = new Sphere(),\n\n    \t// camera matrices cache\n\n    \t_projScreenMatrix = new Matrix4(),\n\n    \t_vector3 = new Vector3(),\n\n    \t// light arrays cache\n\n    \t_lights = {\n\n    \t\thash: '',\n\n    \t\tambient: [ 0, 0, 0 ],\n    \t\tdirectional: [],\n    \t\tdirectionalShadowMap: [],\n    \t\tdirectionalShadowMatrix: [],\n    \t\tspot: [],\n    \t\tspotShadowMap: [],\n    \t\tspotShadowMatrix: [],\n    \t\tpoint: [],\n    \t\tpointShadowMap: [],\n    \t\tpointShadowMatrix: [],\n    \t\themi: [],\n\n    \t\tshadows: []\n\n    \t},\n\n    \t// info\n\n    \t_infoRender = {\n\n    \t\tcalls: 0,\n    \t\tvertices: 0,\n    \t\tfaces: 0,\n    \t\tpoints: 0\n\n    \t};\n\n    \tthis.info = {\n\n    \t\trender: _infoRender,\n    \t\tmemory: {\n\n    \t\t\tgeometries: 0,\n    \t\t\ttextures: 0\n\n    \t\t},\n    \t\tprograms: null\n\n    \t};\n\n\n    \t// initialize\n\n    \tvar _gl;\n\n    \ttry {\n\n    \t\tvar attributes = {\n    \t\t\talpha: _alpha,\n    \t\t\tdepth: _depth,\n    \t\t\tstencil: _stencil,\n    \t\t\tantialias: _antialias,\n    \t\t\tpremultipliedAlpha: _premultipliedAlpha,\n    \t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n    \t\t};\n\n    \t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\n    \t\tif ( _gl === null ) {\n\n    \t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n    \t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n    \t\t\t} else {\n\n    \t\t\t\tthrow 'Error creating WebGL context.';\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n    \t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n    \t\t\t_gl.getShaderPrecisionFormat = function () {\n\n    \t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n    \t\t\t};\n\n    \t\t}\n\n    \t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\n    \t} catch ( error ) {\n\n    \t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n    \t}\n\n    \tvar extensions = new WebGLExtensions( _gl );\n\n    \textensions.get( 'WEBGL_depth_texture' );\n    \textensions.get( 'OES_texture_float' );\n    \textensions.get( 'OES_texture_float_linear' );\n    \textensions.get( 'OES_texture_half_float' );\n    \textensions.get( 'OES_texture_half_float_linear' );\n    \textensions.get( 'OES_standard_derivatives' );\n    \textensions.get( 'ANGLE_instanced_arrays' );\n\n    \tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\n    \t\tBufferGeometry.MaxIndex = 4294967296;\n\n    \t}\n\n    \tvar capabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n    \tvar state = new WebGLState( _gl, extensions, paramThreeToGL );\n    \tvar properties = new WebGLProperties();\n    \tvar textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n    \tvar objects = new WebGLObjects( _gl, properties, this.info );\n    \tvar programCache = new WebGLPrograms( this, capabilities );\n    \tvar lightCache = new WebGLLights();\n\n    \tthis.info.programs = programCache.programs;\n\n    \tvar bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n    \tvar indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n    \t//\n\n    \tvar backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n    \tvar backgroundCamera2 = new PerspectiveCamera();\n    \tvar backgroundPlaneMesh = new Mesh(\n    \t\tnew PlaneBufferGeometry( 2, 2 ),\n    \t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n    \t);\n    \tvar backgroundBoxShader = ShaderLib[ 'cube' ];\n    \tvar backgroundBoxMesh = new Mesh(\n    \t\tnew BoxBufferGeometry( 5, 5, 5 ),\n    \t\tnew ShaderMaterial( {\n    \t\t\tuniforms: backgroundBoxShader.uniforms,\n    \t\t\tvertexShader: backgroundBoxShader.vertexShader,\n    \t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n    \t\t\tside: BackSide,\n    \t\t\tdepthTest: false,\n    \t\t\tdepthWrite: false,\n    \t\t\tfog: false\n    \t\t} )\n    \t);\n\n    \t//\n\n    \tfunction getTargetPixelRatio() {\n\n    \t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n    \t}\n\n    \tfunction glClearColor( r, g, b, a ) {\n\n    \t\tif ( _premultipliedAlpha === true ) {\n\n    \t\t\tr *= a; g *= a; b *= a;\n\n    \t\t}\n\n    \t\tstate.clearColor( r, g, b, a );\n\n    \t}\n\n    \tfunction setDefaultGLState() {\n\n    \t\tstate.init();\n\n    \t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n    \t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t}\n\n    \tfunction resetGLState() {\n\n    \t\t_currentProgram = null;\n    \t\t_currentCamera = null;\n\n    \t\t_currentGeometryProgram = '';\n    \t\t_currentMaterialId = - 1;\n\n    \t\tstate.reset();\n\n    \t}\n\n    \tsetDefaultGLState();\n\n    \tthis.context = _gl;\n    \tthis.capabilities = capabilities;\n    \tthis.extensions = extensions;\n    \tthis.properties = properties;\n    \tthis.state = state;\n\n    \t// shadow map\n\n    \tvar shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );\n\n    \tthis.shadowMap = shadowMap;\n\n\n    \t// Plugins\n\n    \tvar spritePlugin = new SpritePlugin( this, sprites );\n    \tvar lensFlarePlugin = new LensFlarePlugin( this, lensFlares );\n\n    \t// API\n\n    \tthis.getContext = function () {\n\n    \t\treturn _gl;\n\n    \t};\n\n    \tthis.getContextAttributes = function () {\n\n    \t\treturn _gl.getContextAttributes();\n\n    \t};\n\n    \tthis.forceContextLoss = function () {\n\n    \t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\n    \t};\n\n    \tthis.getMaxAnisotropy = function () {\n\n    \t\treturn capabilities.getMaxAnisotropy();\n\n    \t};\n\n    \tthis.getPrecision = function () {\n\n    \t\treturn capabilities.precision;\n\n    \t};\n\n    \tthis.getPixelRatio = function () {\n\n    \t\treturn _pixelRatio;\n\n    \t};\n\n    \tthis.setPixelRatio = function ( value ) {\n\n    \t\tif ( value === undefined ) return;\n\n    \t\t_pixelRatio = value;\n\n    \t\tthis.setSize( _viewport.z, _viewport.w, false );\n\n    \t};\n\n    \tthis.getSize = function () {\n\n    \t\treturn {\n    \t\t\twidth: _width,\n    \t\t\theight: _height\n    \t\t};\n\n    \t};\n\n    \tthis.setSize = function ( width, height, updateStyle ) {\n\n    \t\t_width = width;\n    \t\t_height = height;\n\n    \t\t_canvas.width = width * _pixelRatio;\n    \t\t_canvas.height = height * _pixelRatio;\n\n    \t\tif ( updateStyle !== false ) {\n\n    \t\t\t_canvas.style.width = width + 'px';\n    \t\t\t_canvas.style.height = height + 'px';\n\n    \t\t}\n\n    \t\tthis.setViewport( 0, 0, width, height );\n\n    \t};\n\n    \tthis.setViewport = function ( x, y, width, height ) {\n\n    \t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\n    \t};\n\n    \tthis.setScissor = function ( x, y, width, height ) {\n\n    \t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\n    \t};\n\n    \tthis.setScissorTest = function ( boolean ) {\n\n    \t\tstate.setScissorTest( _scissorTest = boolean );\n\n    \t};\n\n    \t// Clearing\n\n    \tthis.getClearColor = function () {\n\n    \t\treturn _clearColor;\n\n    \t};\n\n    \tthis.setClearColor = function ( color, alpha ) {\n\n    \t\t_clearColor.set( color );\n\n    \t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t};\n\n    \tthis.getClearAlpha = function () {\n\n    \t\treturn _clearAlpha;\n\n    \t};\n\n    \tthis.setClearAlpha = function ( alpha ) {\n\n    \t\t_clearAlpha = alpha;\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t};\n\n    \tthis.clear = function ( color, depth, stencil ) {\n\n    \t\tvar bits = 0;\n\n    \t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n    \t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n    \t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n    \t\t_gl.clear( bits );\n\n    \t};\n\n    \tthis.clearColor = function () {\n\n    \t\tthis.clear( true, false, false );\n\n    \t};\n\n    \tthis.clearDepth = function () {\n\n    \t\tthis.clear( false, true, false );\n\n    \t};\n\n    \tthis.clearStencil = function () {\n\n    \t\tthis.clear( false, false, true );\n\n    \t};\n\n    \tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n    \t\tthis.setRenderTarget( renderTarget );\n    \t\tthis.clear( color, depth, stencil );\n\n    \t};\n\n    \t// Reset\n\n    \tthis.resetGLState = resetGLState;\n\n    \tthis.dispose = function() {\n\n    \t\ttransparentObjects = [];\n    \t\ttransparentObjectsLastIndex = -1;\n    \t\topaqueObjects = [];\n    \t\topaqueObjectsLastIndex = -1;\n\n    \t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\n    \t};\n\n    \t// Events\n\n    \tfunction onContextLost( event ) {\n\n    \t\tevent.preventDefault();\n\n    \t\tresetGLState();\n    \t\tsetDefaultGLState();\n\n    \t\tproperties.clear();\n\n    \t}\n\n    \tfunction onMaterialDispose( event ) {\n\n    \t\tvar material = event.target;\n\n    \t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n    \t\tdeallocateMaterial( material );\n\n    \t}\n\n    \t// Buffer deallocation\n\n    \tfunction deallocateMaterial( material ) {\n\n    \t\treleaseMaterialProgramReference( material );\n\n    \t\tproperties.delete( material );\n\n    \t}\n\n\n    \tfunction releaseMaterialProgramReference( material ) {\n\n    \t\tvar programInfo = properties.get( material ).program;\n\n    \t\tmaterial.program = undefined;\n\n    \t\tif ( programInfo !== undefined ) {\n\n    \t\t\tprogramCache.releaseProgram( programInfo );\n\n    \t\t}\n\n    \t}\n\n    \t// Buffer rendering\n\n    \tthis.renderBufferImmediate = function ( object, program, material ) {\n\n    \t\tstate.initAttributes();\n\n    \t\tvar buffers = properties.get( object );\n\n    \t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n    \t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n    \t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n    \t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n    \t\tvar attributes = program.getAttributes();\n\n    \t\tif ( object.hasPositions ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.position );\n    \t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasNormals ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n    \t\t\tif ( ! material.isMeshPhongMaterial &&\n    \t\t\t     ! material.isMeshStandardMaterial &&\n    \t\t\t       material.shading === FlatShading ) {\n\n    \t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n    \t\t\t\t\tvar array = object.normalArray;\n\n    \t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n    \t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n    \t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n    \t\t\t\t\tarray[ i + 0 ] = nx;\n    \t\t\t\t\tarray[ i + 1 ] = ny;\n    \t\t\t\t\tarray[ i + 2 ] = nz;\n\n    \t\t\t\t\tarray[ i + 3 ] = nx;\n    \t\t\t\t\tarray[ i + 4 ] = ny;\n    \t\t\t\t\tarray[ i + 5 ] = nz;\n\n    \t\t\t\t\tarray[ i + 6 ] = nx;\n    \t\t\t\t\tarray[ i + 7 ] = ny;\n    \t\t\t\t\tarray[ i + 8 ] = nz;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.normal );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasUvs && material.map ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.uv );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.color );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tstate.disableUnusedAttributes();\n\n    \t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n    \t\tobject.count = 0;\n\n    \t};\n\n    \tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n    \t\tsetMaterial( material );\n\n    \t\tvar program = setProgram( camera, fog, material, object );\n\n    \t\tvar updateBuffers = false;\n    \t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\n    \t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n    \t\t\t_currentGeometryProgram = geometryProgram;\n    \t\t\tupdateBuffers = true;\n\n    \t\t}\n\n    \t\t// morph targets\n\n    \t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\n    \t\tif ( morphTargetInfluences !== undefined ) {\n\n    \t\t\tvar activeInfluences = [];\n\n    \t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\n    \t\t\t\tvar influence = morphTargetInfluences[ i ];\n    \t\t\t\tactiveInfluences.push( [ influence, i ] );\n\n    \t\t\t}\n\n    \t\t\tactiveInfluences.sort( absNumericalSort );\n\n    \t\t\tif ( activeInfluences.length > 8 ) {\n\n    \t\t\t\tactiveInfluences.length = 8;\n\n    \t\t\t}\n\n    \t\t\tvar morphAttributes = geometry.morphAttributes;\n\n    \t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\n    \t\t\t\tvar influence = activeInfluences[ i ];\n    \t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\n    \t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\n    \t\t\t\t\tvar index = influence[ 1 ];\n\n    \t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n    \t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n    \t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tfor ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {\n\n    \t\t\t\tmorphInfluences[ i ] = 0.0;\n\n    \t\t\t}\n\n    \t\t\tprogram.getUniforms().setValue(\n    \t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\n    \t\t\tupdateBuffers = true;\n\n    \t\t}\n\n    \t\t//\n\n    \t\tvar index = geometry.index;\n    \t\tvar position = geometry.attributes.position;\n    \t\tvar rangeFactor = 1;\n\n    \t\tif ( material.wireframe === true ) {\n\n    \t\t\tindex = objects.getWireframeAttribute( geometry );\n    \t\t\trangeFactor = 2;\n\n    \t\t}\n\n    \t\tvar renderer;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\trenderer = indexedBufferRenderer;\n    \t\t\trenderer.setIndex( index );\n\n    \t\t} else {\n\n    \t\t\trenderer = bufferRenderer;\n\n    \t\t}\n\n    \t\tif ( updateBuffers ) {\n\n    \t\t\tsetupVertexAttributes( material, program, geometry );\n\n    \t\t\tif ( index !== null ) {\n\n    \t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t//\n\n    \t\tvar dataCount = 0;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tdataCount = index.count;\n\n    \t\t} else if ( position !== undefined ) {\n\n    \t\t\tdataCount = position.count;\n\n    \t\t}\n\n    \t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n    \t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n    \t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n    \t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n    \t\tvar drawStart = Math.max( rangeStart, groupStart );\n    \t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n    \t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n    \t\tif ( drawCount === 0 ) return;\n\n    \t\t//\n\n    \t\tif ( object.isMesh ) {\n\n    \t\t\tif ( material.wireframe === true ) {\n\n    \t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n    \t\t\t\trenderer.setMode( _gl.LINES );\n\n    \t\t\t} else {\n\n    \t\t\t\tswitch ( object.drawMode ) {\n\n    \t\t\t\t\tcase TrianglesDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase TriangleStripDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase TriangleFanDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n\n    \t\t} else if ( object.isLine ) {\n\n    \t\t\tvar lineWidth = material.linewidth;\n\n    \t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n    \t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n    \t\t\tif ( object.isLineSegments ) {\n\n    \t\t\t\trenderer.setMode( _gl.LINES );\n\n    \t\t\t} else {\n\n    \t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n    \t\t\t}\n\n    \t\t} else if ( object.isPoints ) {\n\n    \t\t\trenderer.setMode( _gl.POINTS );\n\n    \t\t}\n\n    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n    \t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n    \t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\trenderer.render( drawStart, drawCount );\n\n    \t\t}\n\n    \t};\n\n    \tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n    \t\tvar extension;\n\n    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n    \t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\t\tif ( extension === null ) {\n\n    \t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( startIndex === undefined ) startIndex = 0;\n\n    \t\tstate.initAttributes();\n\n    \t\tvar geometryAttributes = geometry.attributes;\n\n    \t\tvar programAttributes = program.getAttributes();\n\n    \t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n    \t\tfor ( var name in programAttributes ) {\n\n    \t\t\tvar programAttribute = programAttributes[ name ];\n\n    \t\t\tif ( programAttribute >= 0 ) {\n\n    \t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n    \t\t\t\tif ( geometryAttribute !== undefined ) {\n\n    \t\t\t\t\tvar type = _gl.FLOAT;\n    \t\t\t\t\tvar array = geometryAttribute.array;\n    \t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\n    \t\t\t\t\tif ( array instanceof Float32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.FLOAT;\n\n    \t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\n    \t\t\t\t\t\tconsole.warn( \"Unsupported data buffer format: Float64Array\" );\n\n    \t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\n    \t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\n    \t\t\t\t\t\ttype = _gl.SHORT;\n\n    \t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\n    \t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.INT;\n\n    \t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\n    \t\t\t\t\t\ttype = _gl.BYTE;\n\n    \t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tvar size = geometryAttribute.itemSize;\n    \t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\n    \t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInterleavedBufferAttribute ) {\n\n    \t\t\t\t\t\tvar data = geometryAttribute.data;\n    \t\t\t\t\t\tvar stride = data.stride;\n    \t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n    \t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\n    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInstancedBufferAttribute ) {\n\n    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\n    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n    \t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n    \t\t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\t\tswitch ( value.length ) {\n\n    \t\t\t\t\t\t\tcase 2:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase 3:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase 4:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tdefault:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tstate.disableUnusedAttributes();\n\n    \t}\n\n    \t// Sorting\n\n    \tfunction absNumericalSort( a, b ) {\n\n    \t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\n    \t}\n\n    \tfunction painterSortStable( a, b ) {\n\n    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n    \t\t} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {\n\n    \t\t\treturn a.material.program.id - b.material.program.id;\n\n    \t\t} else if ( a.material.id !== b.material.id ) {\n\n    \t\t\treturn a.material.id - b.material.id;\n\n    \t\t} else if ( a.z !== b.z ) {\n\n    \t\t\treturn a.z - b.z;\n\n    \t\t} else {\n\n    \t\t\treturn a.id - b.id;\n\n    \t\t}\n\n    \t}\n\n    \tfunction reversePainterSortStable( a, b ) {\n\n    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n    \t\t} if ( a.z !== b.z ) {\n\n    \t\t\treturn b.z - a.z;\n\n    \t\t} else {\n\n    \t\t\treturn a.id - b.id;\n\n    \t\t}\n\n    \t}\n\n    \t// Rendering\n\n    \tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n    \t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar fog = scene.fog;\n\n    \t\t// reset caching for this frame\n\n    \t\t_currentGeometryProgram = '';\n    \t\t_currentMaterialId = - 1;\n    \t\t_currentCamera = null;\n\n    \t\t// update scene graph\n\n    \t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n    \t\t// update camera matrices and frustum\n\n    \t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n    \t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n    \t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n    \t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n    \t\tlights.length = 0;\n\n    \t\topaqueObjectsLastIndex = - 1;\n    \t\ttransparentObjectsLastIndex = - 1;\n\n    \t\tsprites.length = 0;\n    \t\tlensFlares.length = 0;\n\n    \t\t_localClippingEnabled = this.localClippingEnabled;\n    \t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n    \t\tprojectObject( scene, camera );\n\n    \t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n    \t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\n    \t\tif ( _this.sortObjects === true ) {\n\n    \t\t\topaqueObjects.sort( painterSortStable );\n    \t\t\ttransparentObjects.sort( reversePainterSortStable );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n    \t\tsetupShadows( lights );\n\n    \t\tshadowMap.render( scene, camera );\n\n    \t\tsetupLights( lights, camera );\n\n    \t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n    \t\t//\n\n    \t\t_infoRender.calls = 0;\n    \t\t_infoRender.vertices = 0;\n    \t\t_infoRender.faces = 0;\n    \t\t_infoRender.points = 0;\n\n    \t\tif ( renderTarget === undefined ) {\n\n    \t\t\trenderTarget = null;\n\n    \t\t}\n\n    \t\tthis.setRenderTarget( renderTarget );\n\n    \t\t//\n\n    \t\tvar background = scene.background;\n\n    \t\tif ( background === null ) {\n\n    \t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t\t} else if ( background && background.isColor ) {\n\n    \t\t\tglClearColor( background.r, background.g, background.b, 1 );\n    \t\t\tforceClear = true;\n\n    \t\t}\n\n    \t\tif ( this.autoClear || forceClear ) {\n\n    \t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\n    \t\t}\n\n    \t\tif ( background && background.isCubeTexture ) {\n\n    \t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\n    \t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n    \t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\n    \t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n    \t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\n    \t\t\tobjects.update( backgroundBoxMesh );\n\n    \t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\n    \t\t} else if ( background && background.isTexture ) {\n\n    \t\t\tbackgroundPlaneMesh.material.map = background;\n\n    \t\t\tobjects.update( backgroundPlaneMesh );\n\n    \t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( scene.overrideMaterial ) {\n\n    \t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n    \t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n    \t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\n    \t\t} else {\n\n    \t\t\t// opaque pass (front-to-back order)\n\n    \t\t\tstate.setBlending( NoBlending );\n    \t\t\trenderObjects( opaqueObjects, camera, fog );\n\n    \t\t\t// transparent pass (back-to-front order)\n\n    \t\t\trenderObjects( transparentObjects, camera, fog );\n\n    \t\t}\n\n    \t\t// custom render plugins (post pass)\n\n    \t\tspritePlugin.render( scene, camera );\n    \t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\n    \t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n    \t\tif ( renderTarget ) {\n\n    \t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n    \t\t}\n\n    \t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n    \t\tstate.setDepthTest( true );\n    \t\tstate.setDepthWrite( true );\n    \t\tstate.setColorWrite( true );\n\n    \t\t// _gl.finish();\n\n    \t};\n\n    \tfunction pushRenderItem( object, geometry, material, z, group ) {\n\n    \t\tvar array, index;\n\n    \t\t// allocate the next position in the appropriate array\n\n    \t\tif ( material.transparent ) {\n\n    \t\t\tarray = transparentObjects;\n    \t\t\tindex = ++ transparentObjectsLastIndex;\n\n    \t\t} else {\n\n    \t\t\tarray = opaqueObjects;\n    \t\t\tindex = ++ opaqueObjectsLastIndex;\n\n    \t\t}\n\n    \t\t// recycle existing render item or grow the array\n\n    \t\tvar renderItem = array[ index ];\n\n    \t\tif ( renderItem !== undefined ) {\n\n    \t\t\trenderItem.id = object.id;\n    \t\t\trenderItem.object = object;\n    \t\t\trenderItem.geometry = geometry;\n    \t\t\trenderItem.material = material;\n    \t\t\trenderItem.z = _vector3.z;\n    \t\t\trenderItem.group = group;\n\n    \t\t} else {\n\n    \t\t\trenderItem = {\n    \t\t\t\tid: object.id,\n    \t\t\t\tobject: object,\n    \t\t\t\tgeometry: geometry,\n    \t\t\t\tmaterial: material,\n    \t\t\t\tz: _vector3.z,\n    \t\t\t\tgroup: group\n    \t\t\t};\n\n    \t\t\t// assert( index === array.length );\n    \t\t\tarray.push( renderItem );\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Duplicated code (Frustum)\n\n    \tfunction isObjectViewable( object ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( geometry.boundingSphere === null )\n    \t\t\tgeometry.computeBoundingSphere();\n\n    \t\t_sphere.copy( geometry.boundingSphere ).\n    \t\t\tapplyMatrix4( object.matrixWorld );\n\n    \t\treturn isSphereViewable( _sphere );\n\n    \t}\n\n    \tfunction isSpriteViewable( sprite ) {\n\n    \t\t_sphere.center.set( 0, 0, 0 );\n    \t\t_sphere.radius = 0.7071067811865476;\n    \t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n    \t\treturn isSphereViewable( _sphere );\n\n    \t}\n\n    \tfunction isSphereViewable( sphere ) {\n\n    \t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n    \t\tvar numPlanes = _clipping.numPlanes;\n\n    \t\tif ( numPlanes === 0 ) return true;\n\n    \t\tvar planes = _this.clippingPlanes,\n\n    \t\t\tcenter = sphere.center,\n    \t\t\tnegRad = - sphere.radius,\n    \t\t\ti = 0;\n\n    \t\tdo {\n\n    \t\t\t// out when deeper than radius in the negative halfspace\n    \t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n    \t\t} while ( ++ i !== numPlanes );\n\n    \t\treturn true;\n\n    \t}\n\n    \tfunction projectObject( object, camera ) {\n\n    \t\tif ( object.visible === false ) return;\n\n    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\n    \t\tif ( visible ) {\n\n    \t\t\tif ( object.isLight ) {\n\n    \t\t\t\tlights.push( object );\n\n    \t\t\t} else if ( object.isSprite ) {\n\n    \t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\n    \t\t\t\t\tsprites.push( object );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( object.isLensFlare ) {\n\n    \t\t\t\tlensFlares.push( object );\n\n    \t\t\t} else if ( object.isImmediateRenderObject ) {\n\n    \t\t\t\tif ( _this.sortObjects === true ) {\n\n    \t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n    \t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n    \t\t\t\t}\n\n    \t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\n    \t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n    \t\t\t\tif ( object.isSkinnedMesh ) {\n\n    \t\t\t\t\tobject.skeleton.update();\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\n    \t\t\t\t\tvar material = object.material;\n\n    \t\t\t\t\tif ( material.visible === true ) {\n\n    \t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n    \t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tvar geometry = objects.update( object );\n\n    \t\t\t\t\t\tif ( material.isMultiMaterial ) {\n\n    \t\t\t\t\t\t\tvar groups = geometry.groups;\n    \t\t\t\t\t\t\tvar materials = material.materials;\n\n    \t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\t\t\t\t\t\t\tvar group = groups[ i ];\n    \t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n    \t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n    \t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tprojectObject( children[ i ], camera );\n\n    \t\t}\n\n    \t}\n\n    \tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\n    \t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n    \t\t\tvar renderItem = renderList[ i ];\n\n    \t\t\tvar object = renderItem.object;\n    \t\t\tvar geometry = renderItem.geometry;\n    \t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n    \t\t\tvar group = renderItem.group;\n\n    \t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n    \t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n    \t\t\tif ( object.isImmediateRenderObject ) {\n\n    \t\t\t\tsetMaterial( material );\n\n    \t\t\t\tvar program = setProgram( camera, fog, material, object );\n\n    \t\t\t\t_currentGeometryProgram = '';\n\n    \t\t\t\tobject.render( function ( object ) {\n\n    \t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n    \t\t\t\t} );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( object.onBeforeRender !== null ) object.onBeforeRender();\n\n    \t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction initMaterial( material, fog, object ) {\n\n    \t\tvar materialProperties = properties.get( material );\n\n    \t\tvar parameters = programCache.getParameters(\n    \t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\n    \t\tvar code = programCache.getProgramCode( material, parameters );\n\n    \t\tvar program = materialProperties.program;\n    \t\tvar programChange = true;\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\t// new material\n    \t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n    \t\t} else if ( program.code !== code ) {\n\n    \t\t\t// changed glsl or parameters\n    \t\t\treleaseMaterialProgramReference( material );\n\n    \t\t} else if ( parameters.shaderID !== undefined ) {\n\n    \t\t\t// same glsl and uniform list\n    \t\t\treturn;\n\n    \t\t} else {\n\n    \t\t\t// only rebuild uniform list\n    \t\t\tprogramChange = false;\n\n    \t\t}\n\n    \t\tif ( programChange ) {\n\n    \t\t\tif ( parameters.shaderID ) {\n\n    \t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n    \t\t\t\tmaterialProperties.__webglShader = {\n    \t\t\t\t\tname: material.type,\n    \t\t\t\t\tuniforms: exports.UniformsUtils.clone( shader.uniforms ),\n    \t\t\t\t\tvertexShader: shader.vertexShader,\n    \t\t\t\t\tfragmentShader: shader.fragmentShader\n    \t\t\t\t};\n\n    \t\t\t} else {\n\n    \t\t\t\tmaterialProperties.__webglShader = {\n    \t\t\t\t\tname: material.type,\n    \t\t\t\t\tuniforms: material.uniforms,\n    \t\t\t\t\tvertexShader: material.vertexShader,\n    \t\t\t\t\tfragmentShader: material.fragmentShader\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\n    \t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\n    \t\t\tmaterialProperties.program = program;\n    \t\t\tmaterial.program = program;\n\n    \t\t}\n\n    \t\tvar attributes = program.getAttributes();\n\n    \t\tif ( material.morphTargets ) {\n\n    \t\t\tmaterial.numSupportedMorphTargets = 0;\n\n    \t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n    \t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\n    \t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.morphNormals ) {\n\n    \t\t\tmaterial.numSupportedMorphNormals = 0;\n\n    \t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n    \t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\n    \t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\n    \t\tif ( ! material.isShaderMaterial &&\n    \t\t     ! material.isRawShaderMaterial ||\n    \t\t       material.clipping === true ) {\n\n    \t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n    \t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n    \t\t}\n\n    \t\tmaterialProperties.fog = fog;\n\n    \t\t// store the light setup it was created for\n\n    \t\tmaterialProperties.lightsHash = _lights.hash;\n\n    \t\tif ( material.lights ) {\n\n    \t\t\t// wire up the material to this renderer's lighting state\n\n    \t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n    \t\t\tuniforms.directionalLights.value = _lights.directional;\n    \t\t\tuniforms.spotLights.value = _lights.spot;\n    \t\t\tuniforms.pointLights.value = _lights.point;\n    \t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\n    \t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n    \t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n    \t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n    \t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n    \t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n    \t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\n    \t\t}\n\n    \t\tvar progUniforms = materialProperties.program.getUniforms(),\n    \t\t\tuniformsList =\n    \t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n    \t\tmaterialProperties.uniformsList = uniformsList;\n    \t\tmaterialProperties.dynamicUniforms =\n    \t\t\t\tWebGLUniforms.splitDynamic( uniformsList, uniforms );\n\n    \t}\n\n    \tfunction setMaterial( material ) {\n\n    \t\tmaterial.side === DoubleSide\n    \t\t\t? state.disable( _gl.CULL_FACE )\n    \t\t\t: state.enable( _gl.CULL_FACE );\n\n    \t\tstate.setFlipSided( material.side === BackSide );\n\n    \t\tmaterial.transparent === true\n    \t\t\t? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n    \t\t\t: state.setBlending( NoBlending );\n\n    \t\tstate.setDepthFunc( material.depthFunc );\n    \t\tstate.setDepthTest( material.depthTest );\n    \t\tstate.setDepthWrite( material.depthWrite );\n    \t\tstate.setColorWrite( material.colorWrite );\n    \t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n    \t}\n\n    \tfunction setProgram( camera, fog, material, object ) {\n\n    \t\t_usedTextureUnits = 0;\n\n    \t\tvar materialProperties = properties.get( material );\n\n    \t\tif ( _clippingEnabled ) {\n\n    \t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n    \t\t\t\tvar useCache =\n    \t\t\t\t\t\tcamera === _currentCamera &&\n    \t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n    \t\t\t\t// we might want to call this function with some ClippingGroup\n    \t\t\t\t// object instead of the material, once it becomes feasible\n    \t\t\t\t// (#8465, #8379)\n    \t\t\t\t_clipping.setState(\n    \t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n    \t\t\t\t\t\tcamera, materialProperties, useCache );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.needsUpdate === false ) {\n\n    \t\t\tif ( materialProperties.program === undefined ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n    \t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.needsUpdate ) {\n\n    \t\t\tinitMaterial( material, fog, object );\n    \t\t\tmaterial.needsUpdate = false;\n\n    \t\t}\n\n    \t\tvar refreshProgram = false;\n    \t\tvar refreshMaterial = false;\n    \t\tvar refreshLights = false;\n\n    \t\tvar program = materialProperties.program,\n    \t\t\tp_uniforms = program.getUniforms(),\n    \t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\n    \t\tif ( program.id !== _currentProgram ) {\n\n    \t\t\t_gl.useProgram( program.program );\n    \t\t\t_currentProgram = program.id;\n\n    \t\t\trefreshProgram = true;\n    \t\t\trefreshMaterial = true;\n    \t\t\trefreshLights = true;\n\n    \t\t}\n\n    \t\tif ( material.id !== _currentMaterialId ) {\n\n    \t\t\t_currentMaterialId = material.id;\n\n    \t\t\trefreshMaterial = true;\n\n    \t\t}\n\n    \t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n    \t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\n    \t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n    \t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n    \t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n    \t\t\t}\n\n\n    \t\t\tif ( camera !== _currentCamera ) {\n\n    \t\t\t\t_currentCamera = camera;\n\n    \t\t\t\t// lighting uniforms depend on the camera so enforce an update\n    \t\t\t\t// now, in case this material supports lights - or later, when\n    \t\t\t\t// the next material that does gets activated:\n\n    \t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n    \t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n    \t\t\t}\n\n    \t\t\t// load material specific uniforms\n    \t\t\t// (shader material also gets them for the sake of genericity)\n\n    \t\t\tif ( material.isShaderMaterial ||\n    \t\t\t     material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.envMap ) {\n\n    \t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n    \t\t\t\tif ( uCamPos !== undefined ) {\n\n    \t\t\t\t\tuCamPos.setValue( _gl,\n    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshLambertMaterial ||\n    \t\t\t     material.isMeshBasicMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.isShaderMaterial ||\n    \t\t\t     material.skinning ) {\n\n    \t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n    \t\t\t}\n\n    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\n    \t\t}\n\n    \t\t// skinning uniforms must be set even if material didn't change\n    \t\t// auto-setting of texture unit for bone texture must go before other textures\n    \t\t// not sure why, but otherwise weird things happen\n\n    \t\tif ( material.skinning ) {\n\n    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n    \t\t\tvar skeleton = object.skeleton;\n\n    \t\t\tif ( skeleton ) {\n\n    \t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( refreshMaterial ) {\n\n    \t\t\tif ( material.lights ) {\n\n    \t\t\t\t// the current material requires lighting info\n\n    \t\t\t\t// note: all lighting uniforms are always set correctly\n    \t\t\t\t// they simply reference the renderer's state for their\n    \t\t\t\t// values\n    \t\t\t\t//\n    \t\t\t\t// use the current material's .needsUpdate flags to set\n    \t\t\t\t// the GL state when required\n\n    \t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n    \t\t\t}\n\n    \t\t\t// refresh uniforms common to several materials\n\n    \t\t\tif ( fog && material.fog ) {\n\n    \t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n    \t\t\t}\n\n    \t\t\tif ( material.isMeshBasicMaterial ||\n    \t\t\t     material.isMeshLambertMaterial ||\n    \t\t\t     material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.isMeshDepthMaterial ) {\n\n    \t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n    \t\t\t}\n\n    \t\t\t// refresh single material specific uniforms\n\n    \t\t\tif ( material.isLineBasicMaterial ) {\n\n    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n    \t\t\t} else if ( material.isLineDashedMaterial ) {\n\n    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n    \t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n    \t\t\t} else if ( material.isPointsMaterial ) {\n\n    \t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n    \t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n    \t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshPhysicalMaterial ) {\n\n    \t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n    \t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n    \t\t\t\tif ( material.displacementMap ) {\n\n    \t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n    \t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n    \t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n    \t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n    \t\t\t}\n\n    \t\t\tWebGLUniforms.upload(\n    \t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n    \t\t}\n\n\n    \t\t// common matrices\n\n    \t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n    \t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n    \t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\n    \t\t// dynamic uniforms\n\n    \t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\n    \t\tif ( dynUniforms !== null ) {\n\n    \t\t\tWebGLUniforms.evalDynamic( dynUniforms, m_uniforms, object, material, camera );\n    \t\t\tWebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\n    \t\t}\n\n    \t\treturn program;\n\n    \t}\n\n    \t// Uniforms (refresh uniforms objects)\n\n    \tfunction refreshUniformsCommon( uniforms, material ) {\n\n    \t\tuniforms.opacity.value = material.opacity;\n\n    \t\tuniforms.diffuse.value = material.color;\n\n    \t\tif ( material.emissive ) {\n\n    \t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n    \t\t}\n\n    \t\tuniforms.map.value = material.map;\n    \t\tuniforms.specularMap.value = material.specularMap;\n    \t\tuniforms.alphaMap.value = material.alphaMap;\n\n    \t\tif ( material.aoMap ) {\n\n    \t\t\tuniforms.aoMap.value = material.aoMap;\n    \t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n    \t\t}\n\n    \t\t// uv repeat and offset setting priorities\n    \t\t// 1. color map\n    \t\t// 2. specular map\n    \t\t// 3. normal map\n    \t\t// 4. bump map\n    \t\t// 5. alpha map\n    \t\t// 6. emissive map\n\n    \t\tvar uvScaleMap;\n\n    \t\tif ( material.map ) {\n\n    \t\t\tuvScaleMap = material.map;\n\n    \t\t} else if ( material.specularMap ) {\n\n    \t\t\tuvScaleMap = material.specularMap;\n\n    \t\t} else if ( material.displacementMap ) {\n\n    \t\t\tuvScaleMap = material.displacementMap;\n\n    \t\t} else if ( material.normalMap ) {\n\n    \t\t\tuvScaleMap = material.normalMap;\n\n    \t\t} else if ( material.bumpMap ) {\n\n    \t\t\tuvScaleMap = material.bumpMap;\n\n    \t\t} else if ( material.roughnessMap ) {\n\n    \t\t\tuvScaleMap = material.roughnessMap;\n\n    \t\t} else if ( material.metalnessMap ) {\n\n    \t\t\tuvScaleMap = material.metalnessMap;\n\n    \t\t} else if ( material.alphaMap ) {\n\n    \t\t\tuvScaleMap = material.alphaMap;\n\n    \t\t} else if ( material.emissiveMap ) {\n\n    \t\t\tuvScaleMap = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( uvScaleMap !== undefined ) {\n\n    \t\t\t// backwards compatibility\n    \t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n    \t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n    \t\t\t}\n\n    \t\t\tvar offset = uvScaleMap.offset;\n    \t\t\tvar repeat = uvScaleMap.repeat;\n\n    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n    \t\t}\n\n    \t\tuniforms.envMap.value = material.envMap;\n\n    \t\t// don't flip CubeTexture envMaps, flip everything else:\n    \t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n    \t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n    \t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n    \t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\n    \t\tuniforms.reflectivity.value = material.reflectivity;\n    \t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n    \t}\n\n    \tfunction refreshUniformsLine( uniforms, material ) {\n\n    \t\tuniforms.diffuse.value = material.color;\n    \t\tuniforms.opacity.value = material.opacity;\n\n    \t}\n\n    \tfunction refreshUniformsDash( uniforms, material ) {\n\n    \t\tuniforms.dashSize.value = material.dashSize;\n    \t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n    \t\tuniforms.scale.value = material.scale;\n\n    \t}\n\n    \tfunction refreshUniformsPoints( uniforms, material ) {\n\n    \t\tuniforms.diffuse.value = material.color;\n    \t\tuniforms.opacity.value = material.opacity;\n    \t\tuniforms.size.value = material.size * _pixelRatio;\n    \t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\n    \t\tuniforms.map.value = material.map;\n\n    \t\tif ( material.map !== null ) {\n\n    \t\t\tvar offset = material.map.offset;\n    \t\t\tvar repeat = material.map.repeat;\n\n    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsFog( uniforms, fog ) {\n\n    \t\tuniforms.fogColor.value = fog.color;\n\n    \t\tif ( fog.isFog ) {\n\n    \t\t\tuniforms.fogNear.value = fog.near;\n    \t\t\tuniforms.fogFar.value = fog.far;\n\n    \t\t} else if ( fog.isFogExp2 ) {\n\n    \t\t\tuniforms.fogDensity.value = fog.density;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsLambert( uniforms, material ) {\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsPhong( uniforms, material ) {\n\n    \t\tuniforms.specular.value = material.specular;\n    \t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( material.bumpMap ) {\n\n    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n    \t\t}\n\n    \t\tif ( material.normalMap ) {\n\n    \t\t\tuniforms.normalMap.value = material.normalMap;\n    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n    \t\t}\n\n    \t\tif ( material.displacementMap ) {\n\n    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsStandard( uniforms, material ) {\n\n    \t\tuniforms.roughness.value = material.roughness;\n    \t\tuniforms.metalness.value = material.metalness;\n\n    \t\tif ( material.roughnessMap ) {\n\n    \t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n    \t\t}\n\n    \t\tif ( material.metalnessMap ) {\n\n    \t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n    \t\t}\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( material.bumpMap ) {\n\n    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n    \t\t}\n\n    \t\tif ( material.normalMap ) {\n\n    \t\t\tuniforms.normalMap.value = material.normalMap;\n    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n    \t\t}\n\n    \t\tif ( material.displacementMap ) {\n\n    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n    \t\t}\n\n    \t\tif ( material.envMap ) {\n\n    \t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n    \t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsPhysical( uniforms, material ) {\n\n    \t\tuniforms.clearCoat.value = material.clearCoat;\n    \t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n    \t\trefreshUniformsStandard( uniforms, material );\n\n    \t}\n\n    \t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n    \tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n    \t\tuniforms.ambientLightColor.needsUpdate = value;\n\n    \t\tuniforms.directionalLights.needsUpdate = value;\n    \t\tuniforms.pointLights.needsUpdate = value;\n    \t\tuniforms.spotLights.needsUpdate = value;\n    \t\tuniforms.hemisphereLights.needsUpdate = value;\n\n    \t}\n\n    \t// Lighting\n\n    \tfunction setupShadows( lights ) {\n\n    \t\tvar lightShadowsLength = 0;\n\n    \t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n    \t\t\tvar light = lights[ i ];\n\n    \t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_lights.shadows.length = lightShadowsLength;\n\n    \t}\n\n    \tfunction setupLights( lights, camera ) {\n\n    \t\tvar l, ll, light,\n    \t\tr = 0, g = 0, b = 0,\n    \t\tcolor,\n    \t\tintensity,\n    \t\tdistance,\n    \t\tshadowMap,\n\n    \t\tviewMatrix = camera.matrixWorldInverse,\n\n    \t\tdirectionalLength = 0,\n    \t\tpointLength = 0,\n    \t\tspotLength = 0,\n    \t\themiLength = 0;\n\n    \t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n    \t\t\tlight = lights[ l ];\n\n    \t\t\tcolor = light.color;\n    \t\t\tintensity = light.intensity;\n    \t\t\tdistance = light.distance;\n\n    \t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n    \t\t\tif ( light.isAmbientLight ) {\n\n    \t\t\t\tr += color.r * intensity;\n    \t\t\t\tg += color.g * intensity;\n    \t\t\t\tb += color.b * intensity;\n\n    \t\t\t} else if ( light.isDirectionalLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\tuniforms.direction.sub( _vector3 );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n    \t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n    \t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isSpotLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n    \t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n    \t\t\t\tuniforms.distance = distance;\n\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\tuniforms.direction.sub( _vector3 );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n    \t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n    \t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n    \t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n    \t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isPointLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n    \t\t\t\tuniforms.distance = light.distance;\n    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\n    \t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\n    \t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new Matrix4();\n\n    \t\t\t\t}\n\n    \t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n    \t\t\t\t// equal to inverse of the light's position\n    \t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n    \t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\n    \t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isHemisphereLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n    \t\t\t\tuniforms.direction.normalize();\n\n    \t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n    \t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n    \t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_lights.ambient[ 0 ] = r;\n    \t\t_lights.ambient[ 1 ] = g;\n    \t\t_lights.ambient[ 2 ] = b;\n\n    \t\t_lights.directional.length = directionalLength;\n    \t\t_lights.spot.length = spotLength;\n    \t\t_lights.point.length = pointLength;\n    \t\t_lights.hemi.length = hemiLength;\n\n    \t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\n    \t}\n\n    \t// GL state setting\n\n    \tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n    \t\tstate.setCullFace( cullFace );\n    \t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\n    \t};\n\n    \t// Textures\n\n    \tfunction allocTextureUnit() {\n\n    \t\tvar textureUnit = _usedTextureUnits;\n\n    \t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n    \t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n    \t\t}\n\n    \t\t_usedTextureUnits += 1;\n\n    \t\treturn textureUnit;\n\n    \t}\n\n    \tthis.allocTextureUnit = allocTextureUnit;\n\n    \t// this.setTexture2D = setTexture2D;\n    \tthis.setTexture2D = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\t// backwards compatibility: peel texture.texture\n    \t\treturn function setTexture2D( texture, slot ) {\n\n    \t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n    \t\t\t\tif ( ! warned ) {\n\n    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n    \t\t\t\t\twarned = true;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture = texture.texture;\n\n    \t\t\t}\n\n    \t\t\ttextures.setTexture2D( texture, slot );\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.setTexture = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\treturn function setTexture( texture, slot ) {\n\n    \t\t\tif ( ! warned ) {\n\n    \t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n    \t\t\t\twarned = true;\n\n    \t\t\t}\n\n    \t\t\ttextures.setTexture2D( texture, slot );\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.setTextureCube = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\treturn function setTextureCube( texture, slot ) {\n\n    \t\t\t// backwards compatibility: peel texture.texture\n    \t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n    \t\t\t\tif ( ! warned ) {\n\n    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n    \t\t\t\t\twarned = true;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture = texture.texture;\n\n    \t\t\t}\n\n    \t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n    \t\t\t// TODO: unify these code paths\n    \t\t\tif ( ( texture && texture.isCubeTexture ) ||\n    \t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n    \t\t\t\t// CompressedTexture can have Array in image :/\n\n    \t\t\t\t// this function alone should take care of cube textures\n    \t\t\t\ttextures.setTextureCube( texture, slot );\n\n    \t\t\t} else {\n\n    \t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n    \t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.getCurrentRenderTarget = function() {\n\n    \t\treturn _currentRenderTarget;\n\n    \t};\n\n    \tthis.setRenderTarget = function ( renderTarget ) {\n\n    \t\t_currentRenderTarget = renderTarget;\n\n    \t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n    \t\t\ttextures.setupRenderTarget( renderTarget );\n\n    \t\t}\n\n    \t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n    \t\tvar framebuffer;\n\n    \t\tif ( renderTarget ) {\n\n    \t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n    \t\t\tif ( isCube ) {\n\n    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n    \t\t\t} else {\n\n    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\n    \t\t\t}\n\n    \t\t\t_currentScissor.copy( renderTarget.scissor );\n    \t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n    \t\t\t_currentViewport.copy( renderTarget.viewport );\n\n    \t\t} else {\n\n    \t\t\tframebuffer = null;\n\n    \t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n    \t\t\t_currentScissorTest = _scissorTest;\n\n    \t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\n    \t\t}\n\n    \t\tif ( _currentFramebuffer !== framebuffer ) {\n\n    \t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n    \t\t\t_currentFramebuffer = framebuffer;\n\n    \t\t}\n\n    \t\tstate.scissor( _currentScissor );\n    \t\tstate.setScissorTest( _currentScissorTest );\n\n    \t\tstate.viewport( _currentViewport );\n\n    \t\tif ( isCube ) {\n\n    \t\t\tvar textureProperties = properties.get( renderTarget.texture );\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n    \t\t}\n\n    \t};\n\n    \tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n    \t\tif ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n    \t\tif ( framebuffer ) {\n\n    \t\t\tvar restore = false;\n\n    \t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n    \t\t\t\trestore = true;\n\n    \t\t\t}\n\n    \t\t\ttry {\n\n    \t\t\t\tvar texture = renderTarget.texture;\n    \t\t\t\tvar textureFormat = texture.format;\n    \t\t\t\tvar textureType = texture.type;\n\n    \t\t\t\tif ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n    \t\t\t\t     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n    \t\t\t\t     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n    \t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n    \t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n    \t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n    \t\t\t\t}\n\n    \t\t\t} finally {\n\n    \t\t\t\tif ( restore ) {\n\n    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t};\n\n    \t// Map three.js constants to WebGL constants\n\n    \tfunction paramThreeToGL( p ) {\n\n    \t\tvar extension;\n\n    \t\tif ( p === RepeatWrapping ) return _gl.REPEAT;\n    \t\tif ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n    \t\tif ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n    \t\tif ( p === NearestFilter ) return _gl.NEAREST;\n    \t\tif ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n    \t\tif ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n    \t\tif ( p === LinearFilter ) return _gl.LINEAR;\n    \t\tif ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n    \t\tif ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n    \t\tif ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n    \t\tif ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n    \t\tif ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n    \t\tif ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n    \t\tif ( p === ByteType ) return _gl.BYTE;\n    \t\tif ( p === ShortType ) return _gl.SHORT;\n    \t\tif ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n    \t\tif ( p === IntType ) return _gl.INT;\n    \t\tif ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;\n    \t\tif ( p === FloatType ) return _gl.FLOAT;\n\n    \t\textension = extensions.get( 'OES_texture_half_float' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === HalfFloatType ) return extension.HALF_FLOAT_OES;\n\n    \t\t}\n\n    \t\tif ( p === AlphaFormat ) return _gl.ALPHA;\n    \t\tif ( p === RGBFormat ) return _gl.RGB;\n    \t\tif ( p === RGBAFormat ) return _gl.RGBA;\n    \t\tif ( p === LuminanceFormat ) return _gl.LUMINANCE;\n    \t\tif ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n    \t\tif ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;\n    \t\tif ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;\n\n    \t\tif ( p === AddEquation ) return _gl.FUNC_ADD;\n    \t\tif ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;\n    \t\tif ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n    \t\tif ( p === ZeroFactor ) return _gl.ZERO;\n    \t\tif ( p === OneFactor ) return _gl.ONE;\n    \t\tif ( p === SrcColorFactor ) return _gl.SRC_COLOR;\n    \t\tif ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n    \t\tif ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;\n    \t\tif ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n    \t\tif ( p === DstAlphaFactor ) return _gl.DST_ALPHA;\n    \t\tif ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n    \t\tif ( p === DstColorFactor ) return _gl.DST_COLOR;\n    \t\tif ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n    \t\tif ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n    \t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n    \t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n    \t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'EXT_blend_minmax' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n    \t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n    \t\tif ( extension !== null ){\n\n    \t\t\tif ( p === UnsignedInt248Type ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n    \t\t}\n\n    \t\treturn 0;\n\n    \t}\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function FogExp2 ( color, density ) {\n\n    \tthis.name = '';\n\n    \tthis.color = new Color( color );\n    \tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n    }\n\n    FogExp2.prototype.isFogExp2 = true;\n\n    FogExp2.prototype.clone = function () {\n\n    \treturn new FogExp2( this.color.getHex(), this.density );\n\n    };\n\n    FogExp2.prototype.toJSON = function ( meta ) {\n\n    \treturn {\n    \t\ttype: 'FogExp2',\n    \t\tcolor: this.color.getHex(),\n    \t\tdensity: this.density\n    \t};\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Fog ( color, near, far ) {\n\n    \tthis.name = '';\n\n    \tthis.color = new Color( color );\n\n    \tthis.near = ( near !== undefined ) ? near : 1;\n    \tthis.far = ( far !== undefined ) ? far : 1000;\n\n    }\n\n    Fog.prototype.isFog = true;\n\n    Fog.prototype.clone = function () {\n\n    \treturn new Fog( this.color.getHex(), this.near, this.far );\n\n    };\n\n    Fog.prototype.toJSON = function ( meta ) {\n\n    \treturn {\n    \t\ttype: 'Fog',\n    \t\tcolor: this.color.getHex(),\n    \t\tnear: this.near,\n    \t\tfar: this.far\n    \t};\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Scene () {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Scene';\n\n    \tthis.background = null;\n    \tthis.fog = null;\n    \tthis.overrideMaterial = null;\n\n    \tthis.autoUpdate = true; // checked by the renderer\n\n    }\n\n    Scene.prototype = Object.create( Object3D.prototype );\n\n    Scene.prototype.constructor = Scene;\n\n    Scene.prototype.copy = function ( source, recursive ) {\n\n    \tObject3D.prototype.copy.call( this, source, recursive );\n\n    \tif ( source.background !== null ) this.background = source.background.clone();\n    \tif ( source.fog !== null ) this.fog = source.fog.clone();\n    \tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n    \tthis.autoUpdate = source.autoUpdate;\n    \tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n    \treturn this;\n\n    };\n\n    Scene.prototype.toJSON = function ( meta ) {\n\n    \tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n    \tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n    \treturn data;\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function LensFlare( texture, size, distance, blending, color ) {\n\n    \tObject3D.call( this );\n\n    \tthis.lensFlares = [];\n\n    \tthis.positionScreen = new Vector3();\n    \tthis.customUpdateCallback = undefined;\n\n    \tif ( texture !== undefined ) {\n\n    \t\tthis.add( texture, size, distance, blending, color );\n\n    \t}\n\n    }\n\n    LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: LensFlare,\n\n    \tisLensFlare: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.positionScreen.copy( source.positionScreen );\n    \t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n    \t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n    \t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n    \t\tif ( size === undefined ) size = - 1;\n    \t\tif ( distance === undefined ) distance = 0;\n    \t\tif ( opacity === undefined ) opacity = 1;\n    \t\tif ( color === undefined ) color = new Color( 0xffffff );\n    \t\tif ( blending === undefined ) blending = NormalBlending;\n\n    \t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n    \t\tthis.lensFlares.push( {\n    \t\t\ttexture: texture,\t// THREE.Texture\n    \t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n    \t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n    \t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n    \t\t\tscale: 1, \t\t// scale\n    \t\t\trotation: 0, \t\t// rotation\n    \t\t\topacity: opacity,\t// opacity\n    \t\t\tcolor: color,\t\t// color\n    \t\t\tblending: blending\t// blending\n    \t\t} );\n\n    \t},\n\n    \t/*\n    \t * Update lens flares update positions on all flares based on the screen position\n    \t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n    \t */\n\n    \tupdateLensFlares: function () {\n\n    \t\tvar f, fl = this.lensFlares.length;\n    \t\tvar flare;\n    \t\tvar vecX = - this.positionScreen.x * 2;\n    \t\tvar vecY = - this.positionScreen.y * 2;\n\n    \t\tfor ( f = 0; f < fl; f ++ ) {\n\n    \t\t\tflare = this.lensFlares[ f ];\n\n    \t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n    \t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n    \t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n    \t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *\tuvOffset: new THREE.Vector2(),\n     *\tuvScale: new THREE.Vector2()\n     * }\n     */\n\n    function SpriteMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'SpriteMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n    \tthis.map = null;\n\n    \tthis.rotation = 0;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    SpriteMaterial.prototype = Object.create( Material.prototype );\n    SpriteMaterial.prototype.constructor = SpriteMaterial;\n\n    SpriteMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n    \tthis.map = source.map;\n\n    \tthis.rotation = source.rotation;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Sprite( material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Sprite';\n\n    \tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n    }\n\n    Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Sprite,\n\n    \tisSprite: true,\n\n    \traycast: ( function () {\n\n    \t\tvar matrixPosition = new Vector3();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n    \t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\n    \t\t\tif ( distanceSq > guessSizeSq ) {\n\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t\tintersects.push( {\n\n    \t\t\t\tdistance: Math.sqrt( distanceSq ),\n    \t\t\t\tpoint: this.position,\n    \t\t\t\tface: null,\n    \t\t\t\tobject: this\n\n    \t\t\t} );\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LOD() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'LOD';\n\n    \tObject.defineProperties( this, {\n    \t\tlevels: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: []\n    \t\t}\n    \t} );\n\n    }\n\n\n    LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: LOD,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source, false );\n\n    \t\tvar levels = source.levels;\n\n    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tvar level = levels[ i ];\n\n    \t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \taddLevel: function ( object, distance ) {\n\n    \t\tif ( distance === undefined ) distance = 0;\n\n    \t\tdistance = Math.abs( distance );\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n    \t\t\tif ( distance < levels[ l ].distance ) {\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n    \t\tthis.add( object );\n\n    \t},\n\n    \tgetObjectForDistance: function ( distance ) {\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tif ( distance < levels[ i ].distance ) {\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn levels[ i - 1 ].object;\n\n    \t},\n\n    \traycast: ( function () {\n\n    \t\tvar matrixPosition = new Vector3();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n    \t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n    \t\t};\n\n    \t}() ),\n\n    \tupdate: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar v2 = new Vector3();\n\n    \t\treturn function update( camera ) {\n\n    \t\t\tvar levels = this.levels;\n\n    \t\t\tif ( levels.length > 1 ) {\n\n    \t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n    \t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\t\tvar distance = v1.distanceTo( v2 );\n\n    \t\t\t\tlevels[ 0 ].object.visible = true;\n\n    \t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n    \t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n    \t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n    \t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( ; i < l; i ++ ) {\n\n    \t\t\t\t\tlevels[ i ].object.visible = false;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}(),\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.levels = [];\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tvar level = levels[ i ];\n\n    \t\t\tdata.object.levels.push( {\n    \t\t\t\tobject: level.object.uuid,\n    \t\t\t\tdistance: level.distance\n    \t\t\t} );\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.image = { data: data, width: width, height: height };\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n    \tthis.flipY = false;\n    \tthis.generateMipmaps  = false;\n\n    }\n\n    DataTexture.prototype = Object.create( Texture.prototype );\n    DataTexture.prototype.constructor = DataTexture;\n\n    DataTexture.prototype.isDataTexture = true;\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author michael guerrero / http://realitymeltdown.com\n     * @author ikerr / http://verold.com\n     */\n\n    function Skeleton( bones, boneInverses, useVertexTexture ) {\n\n    \tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\n    \tthis.identityMatrix = new Matrix4();\n\n    \t// copy the bone array\n\n    \tbones = bones || [];\n\n    \tthis.bones = bones.slice( 0 );\n\n    \t// create a bone texture or an array of floats\n\n    \tif ( this.useVertexTexture ) {\n\n    \t\t// layout (1 matrix = 4 pixels)\n    \t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n    \t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n    \t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n    \t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n    \t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n    \t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n    \t\tsize = exports.Math.nextPowerOfTwo( Math.ceil( size ) );\n    \t\tsize = Math.max( size, 4 );\n\n    \t\tthis.boneTextureWidth = size;\n    \t\tthis.boneTextureHeight = size;\n\n    \t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n    \t\tthis.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );\n\n    \t} else {\n\n    \t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\n    \t}\n\n    \t// use the supplied bone inverses or calculate the inverses\n\n    \tif ( boneInverses === undefined ) {\n\n    \t\tthis.calculateInverses();\n\n    \t} else {\n\n    \t\tif ( this.bones.length === boneInverses.length ) {\n\n    \t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\n    \t\t\tthis.boneInverses = [];\n\n    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    }\n\n    Object.assign( Skeleton.prototype, {\n\n    \tcalculateInverses: function () {\n\n    \t\tthis.boneInverses = [];\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tvar inverse = new Matrix4();\n\n    \t\t\tif ( this.bones[ b ] ) {\n\n    \t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\n    \t\t\t}\n\n    \t\t\tthis.boneInverses.push( inverse );\n\n    \t\t}\n\n    \t},\n\n    \tpose: function () {\n\n    \t\tvar bone;\n\n    \t\t// recover the bind-time world matrices\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tbone = this.bones[ b ];\n\n    \t\t\tif ( bone ) {\n\n    \t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// compute the local matrices, positions, rotations and scales\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tbone = this.bones[ b ];\n\n    \t\t\tif ( bone ) {\n\n    \t\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n    \t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n    \t\t\t\t}\n\n    \t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tupdate: ( function () {\n\n    \t\tvar offsetMatrix = new Matrix4();\n\n    \t\treturn function update() {\n\n    \t\t\t// flatten bone matrices to array\n\n    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\t\t// compute the offset between the current and the original transform\n\n    \t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\n    \t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n    \t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\n    \t\t\t}\n\n    \t\t\tif ( this.useVertexTexture ) {\n\n    \t\t\t\tthis.boneTexture.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t} )(),\n\n    \tclone: function () {\n\n    \t\treturn new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function Bone( skin ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Bone';\n\n    \tthis.skin = skin;\n\n    }\n\n    Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Bone,\n\n    \tisBone: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.skin = source.skin;\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function SkinnedMesh( geometry, material, useVertexTexture ) {\n\n    \tMesh.call( this, geometry, material );\n\n    \tthis.type = 'SkinnedMesh';\n\n    \tthis.bindMode = \"attached\";\n    \tthis.bindMatrix = new Matrix4();\n    \tthis.bindMatrixInverse = new Matrix4();\n\n    \t// init bones\n\n    \t// TODO: remove bone creation as there is no reason (other than\n    \t// convenience) for THREE.SkinnedMesh to do this.\n\n    \tvar bones = [];\n\n    \tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n    \t\tvar bone, gbone;\n\n    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n    \t\t\tgbone = this.geometry.bones[ b ];\n\n    \t\t\tbone = new Bone( this );\n    \t\t\tbones.push( bone );\n\n    \t\t\tbone.name = gbone.name;\n    \t\t\tbone.position.fromArray( gbone.pos );\n    \t\t\tbone.quaternion.fromArray( gbone.rotq );\n    \t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n    \t\t}\n\n    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n    \t\t\tgbone = this.geometry.bones[ b ];\n\n    \t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n    \t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\n    \t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis.add( bones[ b ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tthis.normalizeSkinWeights();\n\n    \tthis.updateMatrixWorld( true );\n    \tthis.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\n    }\n\n\n    SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n    \tconstructor: SkinnedMesh,\n\n    \tisSkinnedMesh: true,\n\n    \tbind: function( skeleton, bindMatrix ) {\n\n    \t\tthis.skeleton = skeleton;\n\n    \t\tif ( bindMatrix === undefined ) {\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.skeleton.calculateInverses();\n\n    \t\t\tbindMatrix = this.matrixWorld;\n\n    \t\t}\n\n    \t\tthis.bindMatrix.copy( bindMatrix );\n    \t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n    \t},\n\n    \tpose: function () {\n\n    \t\tthis.skeleton.pose();\n\n    \t},\n\n    \tnormalizeSkinWeights: function () {\n\n    \t\tif ( (this.geometry && this.geometry.isGeometry) ) {\n\n    \t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n    \t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n    \t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\n    \t\t\t\tif ( scale !== Infinity ) {\n\n    \t\t\t\t\tsw.multiplyScalar( scale );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {\n\n    \t\t\tvar vec = new Vector4();\n\n    \t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n    \t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\n    \t\t\t\tvec.x = skinWeight.getX( i );\n    \t\t\t\tvec.y = skinWeight.getY( i );\n    \t\t\t\tvec.z = skinWeight.getZ( i );\n    \t\t\t\tvec.w = skinWeight.getW( i );\n\n    \t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\n    \t\t\t\tif ( scale !== Infinity ) {\n\n    \t\t\t\t\tvec.multiplyScalar( scale );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n    \t\t\t\t}\n\n    \t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tupdateMatrixWorld: function( force ) {\n\n    \t\tMesh.prototype.updateMatrixWorld.call( this, true );\n\n    \t\tif ( this.bindMode === \"attached\" ) {\n\n    \t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n    \t\t} else if ( this.bindMode === \"detached\" ) {\n\n    \t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function() {\n\n    \t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  linewidth: <float>,\n     *  linecap: \"round\",\n     *  linejoin: \"round\"\n     * }\n     */\n\n    function LineBasicMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'LineBasicMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.linewidth = 1;\n    \tthis.linecap = 'round';\n    \tthis.linejoin = 'round';\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    LineBasicMaterial.prototype = Object.create( Material.prototype );\n    LineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n    LineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n    LineBasicMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.linewidth = source.linewidth;\n    \tthis.linecap = source.linecap;\n    \tthis.linejoin = source.linejoin;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Line( geometry, material, mode ) {\n\n    \tif ( mode === 1 ) {\n\n    \t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n    \t\treturn new LineSegments( geometry, material );\n\n    \t}\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Line';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n    }\n\n    Line.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Line,\n\n    \tisLine: true,\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar precision = raycaster.linePrecision;\n    \t\t\tvar precisionSq = precision * precision;\n\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\tvar vStart = new Vector3();\n    \t\t\tvar vEnd = new Vector3();\n    \t\t\tvar interSegment = new Vector3();\n    \t\t\tvar interRay = new Vector3();\n    \t\t\tvar step = (this && this.isLineSegments) ? 2 : 1;\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n    \t\t\t\t\t\tvar a = indices[ i ];\n    \t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n    \t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n    \t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\t\tface: null,\n    \t\t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t\t} );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n    \t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n    \t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\t\tface: null,\n    \t\t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t\t} );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tvar vertices = geometry.vertices;\n    \t\t\t\tvar nbVertices = vertices.length;\n\n    \t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n    \t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n    \t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\tface: null,\n    \t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LineSegments( geometry, material ) {\n\n    \tLine.call( this, geometry, material );\n\n    \tthis.type = 'LineSegments';\n\n    }\n\n    LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n    \tconstructor: LineSegments,\n\n    \tisLineSegments: true\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  size: <float>,\n     *  sizeAttenuation: <bool>\n     * }\n     */\n\n    function PointsMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'PointsMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.map = null;\n\n    \tthis.size = 1;\n    \tthis.sizeAttenuation = true;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    PointsMaterial.prototype = Object.create( Material.prototype );\n    PointsMaterial.prototype.constructor = PointsMaterial;\n\n    PointsMaterial.prototype.isPointsMaterial = true;\n\n    PointsMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.size = source.size;\n    \tthis.sizeAttenuation = source.sizeAttenuation;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Points( geometry, material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Points';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n    }\n\n    Points.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Points,\n\n    \tisPoints: true,\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar object = this;\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n    \t\t\tvar threshold = raycaster.params.Points.threshold;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n    \t\t\tvar localThresholdSq = localThreshold * localThreshold;\n    \t\t\tvar position = new Vector3();\n\n    \t\t\tfunction testPoint( point, index ) {\n\n    \t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n    \t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n    \t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n    \t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n    \t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n    \t\t\t\t\t\tpoint: intersectPoint.clone(),\n    \t\t\t\t\t\tindex: index,\n    \t\t\t\t\t\tface: null,\n    \t\t\t\t\t\tobject: object\n\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n    \t\t\t\t\t\tvar a = indices[ i ];\n\n    \t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n    \t\t\t\t\t\ttestPoint( position, a );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n    \t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n    \t\t\t\t\t\ttestPoint( position, i );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tvar vertices = geometry.vertices;\n\n    \t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n    \t\t\t\t\ttestPoint( vertices[ i ], i );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Group() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Group';\n\n    }\n\n    Group.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Group\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n    \tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.generateMipmaps = false;\n\n    \tvar scope = this;\n\n    \tfunction update() {\n\n    \t\trequestAnimationFrame( update );\n\n    \t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n    \t\t\tscope.needsUpdate = true;\n\n    \t\t}\n\n    \t}\n\n    \tupdate();\n\n    }\n\n    VideoTexture.prototype = Object.create( Texture.prototype );\n    VideoTexture.prototype.constructor = VideoTexture;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.image = { width: width, height: height };\n    \tthis.mipmaps = mipmaps;\n\n    \t// no flipping for cube textures\n    \t// (also flipping doesn't work for compressed textures )\n\n    \tthis.flipY = false;\n\n    \t// can't generate mipmaps for compressed textures\n    \t// mips must be embedded in DDS files\n\n    \tthis.generateMipmaps = false;\n\n    }\n\n    CompressedTexture.prototype = Object.create( Texture.prototype );\n    CompressedTexture.prototype.constructor = CompressedTexture;\n\n    CompressedTexture.prototype.isCompressedTexture = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n    \tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.needsUpdate = true;\n\n    }\n\n    CanvasTexture.prototype = Object.create( Texture.prototype );\n    CanvasTexture.prototype.constructor = CanvasTexture;\n\n    /**\n     * @author Matt DesLauriers / @mattdesl\n     * @author atix / arthursilber.de\n     */\n\n    function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n    \tformat = format !== undefined ? format : DepthFormat;\n\n    \tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n    \t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )\n\n    \t}\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.image = { width: width, height: height };\n\n    \tthis.type = type !== undefined ? type : UnsignedShortType;\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n    \tthis.flipY = false;\n    \tthis.generateMipmaps\t= false;\n\n    }\n\n    DepthTexture.prototype = Object.create( Texture.prototype );\n    DepthTexture.prototype.constructor = DepthTexture;\n    DepthTexture.prototype.isDepthTexture = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WireframeGeometry( geometry ) {\n\n    \tBufferGeometry.call( this );\n\n    \tvar edge = [ 0, 0 ], hash = {};\n\n    \tfunction sortFunction( a, b ) {\n\n    \t\treturn a - b;\n\n    \t}\n\n    \tvar keys = [ 'a', 'b', 'c' ];\n\n    \tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\tvar vertices = geometry.vertices;\n    \t\tvar faces = geometry.faces;\n    \t\tvar numEdges = 0;\n\n    \t\t// allocate maximal size\n    \t\tvar edges = new Uint32Array( 6 * faces.length );\n\n    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n    \t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n    \t\t\t\tedge.sort( sortFunction );\n\n    \t\t\t\tvar key = edge.toString();\n\n    \t\t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n    \t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n    \t\t\t\t\thash[ key ] = true;\n    \t\t\t\t\tnumEdges ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n    \t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n    \t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\n    \t\t\t\tvar index = 6 * i + 3 * j;\n    \t\t\t\tcoords[ index + 0 ] = vertex.x;\n    \t\t\t\tcoords[ index + 1 ] = vertex.y;\n    \t\t\t\tcoords[ index + 2 ] = vertex.z;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\tif ( geometry.index !== null ) {\n\n    \t\t\t// Indexed BufferGeometry\n\n    \t\t\tvar indices = geometry.index.array;\n    \t\t\tvar vertices = geometry.attributes.position;\n    \t\t\tvar groups = geometry.groups;\n    \t\t\tvar numEdges = 0;\n\n    \t\t\tif ( groups.length === 0 ) {\n\n    \t\t\t\tgeometry.addGroup( 0, indices.length );\n\n    \t\t\t}\n\n    \t\t\t// allocate maximal size\n    \t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\n    \t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\n    \t\t\t\tvar group = groups[ o ];\n\n    \t\t\t\tvar start = group.start;\n    \t\t\t\tvar count = group.count;\n\n    \t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n    \t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n    \t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n    \t\t\t\t\t\tedge.sort( sortFunction );\n\n    \t\t\t\t\t\tvar key = edge.toString();\n\n    \t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n    \t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n    \t\t\t\t\t\t\thash[ key ] = true;\n    \t\t\t\t\t\t\tnumEdges ++;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n    \t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n    \t\t\t\t\tvar index = 6 * i + 3 * j;\n    \t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\n    \t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n    \t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n    \t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t\t} else {\n\n    \t\t\t// non-indexed BufferGeometry\n\n    \t\t\tvar vertices = geometry.attributes.position.array;\n    \t\t\tvar numEdges = vertices.length / 3;\n    \t\t\tvar numTris = numEdges / 3;\n\n    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\n    \t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\tvar index = 18 * i + 6 * j;\n\n    \t\t\t\t\tvar index1 = 9 * i + 3 * j;\n    \t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n    \t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n    \t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\n    \t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n    \t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n    \t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n    \t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n    WireframeGeometry.prototype.constructor = WireframeGeometry;\n\n    /**\n     * @author zz85 / https://github.com/zz85\n     * Parametric Surfaces Geometry\n     * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n     *\n     * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n     *\n     */\n\n    function ParametricGeometry( func, slices, stacks ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ParametricGeometry';\n\n    \tthis.parameters = {\n    \t\tfunc: func,\n    \t\tslices: slices,\n    \t\tstacks: stacks\n    \t};\n\n    \tvar verts = this.vertices;\n    \tvar faces = this.faces;\n    \tvar uvs = this.faceVertexUvs[ 0 ];\n\n    \tvar i, j, p;\n    \tvar u, v;\n\n    \tvar sliceCount = slices + 1;\n\n    \tfor ( i = 0; i <= stacks; i ++ ) {\n\n    \t\tv = i / stacks;\n\n    \t\tfor ( j = 0; j <= slices; j ++ ) {\n\n    \t\t\tu = j / slices;\n\n    \t\t\tp = func( u, v );\n    \t\t\tverts.push( p );\n\n    \t\t}\n\n    \t}\n\n    \tvar a, b, c, d;\n    \tvar uva, uvb, uvc, uvd;\n\n    \tfor ( i = 0; i < stacks; i ++ ) {\n\n    \t\tfor ( j = 0; j < slices; j ++ ) {\n\n    \t\t\ta = i * sliceCount + j;\n    \t\t\tb = i * sliceCount + j + 1;\n    \t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n    \t\t\td = ( i + 1 ) * sliceCount + j;\n\n    \t\t\tuva = new Vector2( j / slices, i / stacks );\n    \t\t\tuvb = new Vector2( ( j + 1 ) / slices, i / stacks );\n    \t\t\tuvc = new Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n    \t\t\tuvd = new Vector2( j / slices, ( i + 1 ) / stacks );\n\n    \t\t\tfaces.push( new Face3( a, b, d ) );\n    \t\t\tuvs.push( [ uva, uvb, uvd ] );\n\n    \t\t\tfaces.push( new Face3( b, c, d ) );\n    \t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n    \t\t}\n\n    \t}\n\n    \t// console.log(this);\n\n    \t// magic bullet\n    \t// var diff = this.mergeVertices();\n    \t// console.log('removed ', diff, ' vertices by merging');\n\n    \tthis.computeFaceNormals();\n    \tthis.computeVertexNormals();\n\n    }\n\n    ParametricGeometry.prototype = Object.create( Geometry.prototype );\n    ParametricGeometry.prototype.constructor = ParametricGeometry;\n\n    /**\n     * @author clockworkgeek / https://github.com/clockworkgeek\n     * @author timothypratley / https://github.com/timothypratley\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'PolyhedronGeometry';\n\n    \tthis.parameters = {\n    \t\tvertices: vertices,\n    \t\tindices: indices,\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    \tradius = radius || 1;\n    \tdetail = detail || 0;\n\n    \tvar that = this;\n\n    \tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\n    \t\tprepare( new Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\n    \t}\n\n    \tvar p = this.vertices;\n\n    \tvar faces = [];\n\n    \tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\n    \t\tvar v1 = p[ indices[ i ] ];\n    \t\tvar v2 = p[ indices[ i + 1 ] ];\n    \t\tvar v3 = p[ indices[ i + 2 ] ];\n\n    \t\tfaces[ j ] = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\n    \t}\n\n    \tvar centroid = new Vector3();\n\n    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\tsubdivide( faces[ i ], detail );\n\n    \t}\n\n\n    \t// Handle case when face straddles the seam\n\n    \tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\n    \t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\n    \t\tvar x0 = uvs[ 0 ].x;\n    \t\tvar x1 = uvs[ 1 ].x;\n    \t\tvar x2 = uvs[ 2 ].x;\n\n    \t\tvar max = Math.max( x0, x1, x2 );\n    \t\tvar min = Math.min( x0, x1, x2 );\n\n    \t\tif ( max > 0.9 && min < 0.1 ) {\n\n    \t\t\t// 0.9 is somewhat arbitrary\n\n    \t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n    \t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n    \t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\n    \t\t}\n\n    \t}\n\n\n    \t// Apply radius\n\n    \tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n    \t\tthis.vertices[ i ].multiplyScalar( radius );\n\n    \t}\n\n\n    \t// Merge vertices\n\n    \tthis.mergeVertices();\n\n    \tthis.computeFaceNormals();\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n\n    \t// Project vector onto sphere's surface\n\n    \tfunction prepare( vector ) {\n\n    \t\tvar vertex = vector.normalize().clone();\n    \t\tvertex.index = that.vertices.push( vertex ) - 1;\n\n    \t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n    \t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n    \t\tvar v = inclination( vector ) / Math.PI + 0.5;\n    \t\tvertex.uv = new Vector2( u, 1 - v );\n\n    \t\treturn vertex;\n\n    \t}\n\n\n    \t// Approximate a curved face with recursively sub-divided triangles.\n\n    \tfunction make( v1, v2, v3 ) {\n\n    \t\tvar face = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n    \t\tthat.faces.push( face );\n\n    \t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\n    \t\tvar azi = azimuth( centroid );\n\n    \t\tthat.faceVertexUvs[ 0 ].push( [\n    \t\t\tcorrectUV( v1.uv, v1, azi ),\n    \t\t\tcorrectUV( v2.uv, v2, azi ),\n    \t\t\tcorrectUV( v3.uv, v3, azi )\n    \t\t] );\n\n    \t}\n\n\n    \t// Analytically subdivide a face to the required detail level.\n\n    \tfunction subdivide( face, detail ) {\n\n    \t\tvar cols = Math.pow( 2, detail );\n    \t\tvar a = prepare( that.vertices[ face.a ] );\n    \t\tvar b = prepare( that.vertices[ face.b ] );\n    \t\tvar c = prepare( that.vertices[ face.c ] );\n    \t\tvar v = [];\n\n    \t\t// Construct all of the vertices for this subdivision.\n\n    \t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\n    \t\t\tv[ i ] = [];\n\n    \t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n    \t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n    \t\t\tvar rows = cols - i;\n\n    \t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\n    \t\t\t\tif ( j === 0 && i === cols ) {\n\n    \t\t\t\t\tv[ i ][ j ] = aj;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Construct all of the faces.\n\n    \t\tfor ( var i = 0; i < cols ; i ++ ) {\n\n    \t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n    \t\t\t\tvar k = Math.floor( j / 2 );\n\n    \t\t\t\tif ( j % 2 === 0 ) {\n\n    \t\t\t\t\tmake(\n    \t\t\t\t\t\tv[ i ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k ],\n    \t\t\t\t\t\tv[ i ][ k ]\n    \t\t\t\t\t);\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tmake(\n    \t\t\t\t\t\tv[ i ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k ]\n    \t\t\t\t\t);\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \t// Angle around the Y axis, counter-clockwise when looking from above.\n\n    \tfunction azimuth( vector ) {\n\n    \t\treturn Math.atan2( vector.z, - vector.x );\n\n    \t}\n\n\n    \t// Angle above the XZ plane.\n\n    \tfunction inclination( vector ) {\n\n    \t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n    \t}\n\n\n    \t// Texture fixing helper. Spheres have some odd behaviours.\n\n    \tfunction correctUV( uv, vector, azimuth ) {\n\n    \t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new Vector2( uv.x - 1, uv.y );\n    \t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n    \t\treturn uv.clone();\n\n    \t}\n\n    }\n\n    PolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n    PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function TetrahedronGeometry( radius, detail ) {\n\n    \tvar vertices = [\n    \t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n    \t];\n\n    \tvar indices = [\n    \t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'TetrahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    TetrahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function OctahedronGeometry( radius, detail ) {\n\n    \tvar vertices = [\n    \t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n    \t];\n\n    \tvar indices = [\n    \t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'OctahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    OctahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    OctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function IcosahedronGeometry( radius, detail ) {\n\n    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n    \tvar vertices = [\n    \t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n    \t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n    \t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n    \t];\n\n    \tvar indices = [\n    \t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n    \t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n    \t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n    \t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'IcosahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    IcosahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n    /**\n     * @author Abe Pazos / https://hamoid.com\n     */\n\n    function DodecahedronGeometry( radius, detail ) {\n\n    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n    \tvar r = 1 / t;\n\n    \tvar vertices = [\n\n    \t\t// (±1, ±1, ±1)\n    \t\t- 1, - 1, - 1,    - 1, - 1,  1,\n    \t\t- 1,  1, - 1,    - 1,  1,  1,\n    \t\t 1, - 1, - 1,     1, - 1,  1,\n    \t\t 1,  1, - 1,     1,  1,  1,\n\n    \t\t// (0, ±1/φ, ±φ)\n    \t\t 0, - r, - t,     0, - r,  t,\n    \t\t 0,  r, - t,     0,  r,  t,\n\n    \t\t// (±1/φ, ±φ, 0)\n    \t\t- r, - t,  0,    - r,  t,  0,\n    \t\t r, - t,  0,     r,  t,  0,\n\n    \t\t// (±φ, 0, ±1/φ)\n    \t\t- t,  0, - r,     t,  0, - r,\n    \t\t- t,  0,  r,     t,  0,  r\n    \t];\n\n    \tvar indices = [\n    \t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n    \t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n    \t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n    \t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n    \t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n    \t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n    \t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n    \t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n    \t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n    \t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n    \t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n    \t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'DodecahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    DodecahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n    /**\n     * @author WestLangley / https://github.com/WestLangley\n     * @author zz85 / https://github.com/zz85\n     * @author miningold / https://github.com/miningold\n     * @author jonobr1 / https://github.com/jonobr1\n     *\n     * Modified from the TorusKnotGeometry by @oosmoxiecode\n     *\n     * Creates a tube which extrudes along a 3d spline\n     *\n     * Uses parallel transport frames as described in\n     * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n     */\n\n    function TubeGeometry( path, segments, radius, radialSegments, closed, taper ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TubeGeometry';\n\n    \tthis.parameters = {\n    \t\tpath: path,\n    \t\tsegments: segments,\n    \t\tradius: radius,\n    \t\tradialSegments: radialSegments,\n    \t\tclosed: closed,\n    \t\ttaper: taper\n    \t};\n\n    \tsegments = segments || 64;\n    \tradius = radius || 1;\n    \tradialSegments = radialSegments || 8;\n    \tclosed = closed || false;\n    \ttaper = taper || TubeGeometry.NoTaper;\n\n    \tvar grid = [];\n\n    \tvar scope = this,\n\n    \t\ttangent,\n    \t\tnormal,\n    \t\tbinormal,\n\n    \t\tnumpoints = segments + 1,\n\n    \t\tu, v, r,\n\n    \t\tcx, cy,\n    \t\tpos, pos2 = new Vector3(),\n    \t\ti, j,\n    \t\tip, jp,\n    \t\ta, b, c, d,\n    \t\tuva, uvb, uvc, uvd;\n\n    \tvar frames = new TubeGeometry.FrenetFrames( path, segments, closed ),\n    \t\ttangents = frames.tangents,\n    \t\tnormals = frames.normals,\n    \t\tbinormals = frames.binormals;\n\n    \t// proxy internals\n    \tthis.tangents = tangents;\n    \tthis.normals = normals;\n    \tthis.binormals = binormals;\n\n    \tfunction vert( x, y, z ) {\n\n    \t\treturn scope.vertices.push( new Vector3( x, y, z ) ) - 1;\n\n    \t}\n\n    \t// construct the grid\n\n    \tfor ( i = 0; i < numpoints; i ++ ) {\n\n    \t\tgrid[ i ] = [];\n\n    \t\tu = i / ( numpoints - 1 );\n\n    \t\tpos = path.getPointAt( u );\n\n    \t\ttangent = tangents[ i ];\n    \t\tnormal = normals[ i ];\n    \t\tbinormal = binormals[ i ];\n\n    \t\tr = radius * taper( u );\n\n    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n    \t\t\tv = j / radialSegments * 2 * Math.PI;\n\n    \t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n    \t\t\tcy = r * Math.sin( v );\n\n    \t\t\tpos2.copy( pos );\n    \t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n    \t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n    \t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\n    \t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\n    \t\t}\n\n    \t}\n\n\n    \t// construct the mesh\n\n    \tfor ( i = 0; i < segments; i ++ ) {\n\n    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n    \t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n    \t\t\tjp = ( j + 1 ) % radialSegments;\n\n    \t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n    \t\t\tb = grid[ ip ][ j ];\n    \t\t\tc = grid[ ip ][ jp ];\n    \t\t\td = grid[ i ][ jp ];\n\n    \t\t\tuva = new Vector2( i / segments, j / radialSegments );\n    \t\t\tuvb = new Vector2( ( i + 1 ) / segments, j / radialSegments );\n    \t\t\tuvc = new Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n    \t\t\tuvd = new Vector2( i / segments, ( j + 1 ) / radialSegments );\n\n    \t\t\tthis.faces.push( new Face3( a, b, d ) );\n    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n    \t\t\tthis.faces.push( new Face3( b, c, d ) );\n    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n    \t\t}\n\n    \t}\n\n    \tthis.computeFaceNormals();\n    \tthis.computeVertexNormals();\n\n    }\n\n    TubeGeometry.prototype = Object.create( Geometry.prototype );\n    TubeGeometry.prototype.constructor = TubeGeometry;\n\n    TubeGeometry.NoTaper = function ( u ) {\n\n    \treturn 1;\n\n    };\n\n    TubeGeometry.SinusoidalTaper = function ( u ) {\n\n    \treturn Math.sin( Math.PI * u );\n\n    };\n\n    // For computing of Frenet frames, exposing the tangents, normals and binormals the spline\n    TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\n    \tvar\tnormal = new Vector3(),\n\n    \t\ttangents = [],\n    \t\tnormals = [],\n    \t\tbinormals = [],\n\n    \t\tvec = new Vector3(),\n    \t\tmat = new Matrix4(),\n\n    \t\tnumpoints = segments + 1,\n    \t\ttheta,\n    \t\tsmallest,\n\n    \t\ttx, ty, tz,\n    \t\ti, u;\n\n\n    \t// expose internals\n    \tthis.tangents = tangents;\n    \tthis.normals = normals;\n    \tthis.binormals = binormals;\n\n    \t// compute the tangent vectors for each segment on the path\n\n    \tfor ( i = 0; i < numpoints; i ++ ) {\n\n    \t\tu = i / ( numpoints - 1 );\n\n    \t\ttangents[ i ] = path.getTangentAt( u );\n    \t\ttangents[ i ].normalize();\n\n    \t}\n\n    \tinitialNormal3();\n\n    \t/*\n    \tfunction initialNormal1(lastBinormal) {\n    \t\t// fixed start binormal. Has dangers of 0 vectors\n    \t\tnormals[ 0 ] = new THREE.Vector3();\n    \t\tbinormals[ 0 ] = new THREE.Vector3();\n    \t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n    \t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n    \t}\n\n    \tfunction initialNormal2() {\n\n    \t\t// This uses the Frenet-Serret formula for deriving binormal\n    \t\tvar t2 = path.getTangentAt( epsilon );\n\n    \t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n    \t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n    \t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\n    \t}\n    \t*/\n\n    \tfunction initialNormal3() {\n\n    \t\t// select an initial normal vector perpendicular to the first tangent vector,\n    \t\t// and in the direction of the smallest tangent xyz component\n\n    \t\tnormals[ 0 ] = new Vector3();\n    \t\tbinormals[ 0 ] = new Vector3();\n    \t\tsmallest = Number.MAX_VALUE;\n    \t\ttx = Math.abs( tangents[ 0 ].x );\n    \t\tty = Math.abs( tangents[ 0 ].y );\n    \t\ttz = Math.abs( tangents[ 0 ].z );\n\n    \t\tif ( tx <= smallest ) {\n\n    \t\t\tsmallest = tx;\n    \t\t\tnormal.set( 1, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( ty <= smallest ) {\n\n    \t\t\tsmallest = ty;\n    \t\t\tnormal.set( 0, 1, 0 );\n\n    \t\t}\n\n    \t\tif ( tz <= smallest ) {\n\n    \t\t\tnormal.set( 0, 0, 1 );\n\n    \t\t}\n\n    \t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n    \t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n    \t}\n\n\n    \t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\n    \tfor ( i = 1; i < numpoints; i ++ ) {\n\n    \t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n    \t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n    \t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n    \t\tif ( vec.length() > Number.EPSILON ) {\n\n    \t\t\tvec.normalize();\n\n    \t\t\ttheta = Math.acos( exports.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n    \t\t}\n\n    \t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n    \t}\n\n\n    \t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n    \tif ( closed ) {\n\n    \t\ttheta = Math.acos( exports.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n    \t\ttheta /= ( numpoints - 1 );\n\n    \t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\n    \t\t\ttheta = - theta;\n\n    \t\t}\n\n    \t\tfor ( i = 1; i < numpoints; i ++ ) {\n\n    \t\t\t// twist a little...\n    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n    \t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     *\n     * see: http://www.blackpawn.com/texts/pqtorus/\n     */\n    function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'TorusKnotBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\ttubularSegments: tubularSegments,\n    \t\tradialSegments: radialSegments,\n    \t\tp: p,\n    \t\tq: q\n    \t};\n\n    \tradius = radius || 100;\n    \ttube = tube || 40;\n    \ttubularSegments = Math.floor( tubularSegments ) || 64;\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \tp = p || 2;\n    \tq = q || 3;\n\n    \t// used to calculate buffer length\n    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n    \tvar i, j, index = 0, indexOffset = 0;\n\n    \tvar vertex = new Vector3();\n    \tvar normal = new Vector3();\n    \tvar uv = new Vector2();\n\n    \tvar P1 = new Vector3();\n    \tvar P2 = new Vector3();\n\n    \tvar B = new Vector3();\n    \tvar T = new Vector3();\n    \tvar N = new Vector3();\n\n    \t// generate vertices, normals and uvs\n\n    \tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n    \t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n    \t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n    \t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n    \t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n    \t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n    \t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n    \t\t// calculate orthonormal basis\n\n    \t\tT.subVectors( P2, P1 );\n    \t\tN.addVectors( P2, P1 );\n    \t\tB.crossVectors( T, N );\n    \t\tN.crossVectors( B, T );\n\n    \t\t// normalize B, N. T can be ignored, we don't use it\n\n    \t\tB.normalize();\n    \t\tN.normalize();\n\n    \t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n    \t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n    \t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n    \t\t\tvar cx = - tube * Math.cos( v );\n    \t\t\tvar cy = tube * Math.sin( v );\n\n    \t\t\t// now calculate the final vertex position.\n    \t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n    \t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n    \t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n    \t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n    \t\t\t// vertex\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n    \t\t\tnormal.subVectors( vertex, P1 ).normalize();\n    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n    \t\t\t// uv\n    \t\t\tuv.x = i / tubularSegments;\n    \t\t\tuv.y = j / radialSegments;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n    \t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n    \t\t\t// indices\n    \t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n    \t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n    \t\t\tvar c = ( radialSegments + 1 ) * j + i;\n    \t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// this function calculates the current position on the torus curve\n\n    \tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n    \t\tvar cu = Math.cos( u );\n    \t\tvar su = Math.sin( u );\n    \t\tvar quOverP = q / p * u;\n    \t\tvar cs = Math.cos( quOverP );\n\n    \t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n    \t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n    \t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n    \t}\n\n    }\n\n    TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n    /**\n     * @author oosmoxiecode\n     */\n\n    function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TorusKnotGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\ttubularSegments: tubularSegments,\n    \t\tradialSegments: radialSegments,\n    \t\tp: p,\n    \t\tq: q\n    \t};\n\n    \tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n    \tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n    \tthis.mergeVertices();\n\n    }\n\n    TorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n    TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'TorusBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\tradialSegments: radialSegments,\n    \t\ttubularSegments: tubularSegments,\n    \t\tarc: arc\n    \t};\n\n    \tradius = radius || 100;\n    \ttube = tube || 40;\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \ttubularSegments = Math.floor( tubularSegments ) || 6;\n    \tarc = arc || Math.PI * 2;\n\n    \t// used to calculate buffer length\n    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n    \tvar vertices = new Float32Array( vertexCount * 3 );\n    \tvar normals = new Float32Array( vertexCount * 3 );\n    \tvar uvs = new Float32Array( vertexCount * 2 );\n\n    \t// offset variables\n    \tvar vertexBufferOffset = 0;\n    \tvar uvBufferOffset = 0;\n    \tvar indexBufferOffset = 0;\n\n    \t// helper variables\n    \tvar center = new Vector3();\n    \tvar vertex = new Vector3();\n    \tvar normal = new Vector3();\n\n    \tvar j, i;\n\n    \t// generate vertices, normals and uvs\n\n    \tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n    \t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n    \t\t\tvar u = i / tubularSegments * arc;\n    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n    \t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n    \t\t\tvertex.z = tube * Math.sin( v );\n\n    \t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n    \t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n    \t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\n    \t\t\t// this vector is used to calculate the normal\n    \t\t\tcenter.x = radius * Math.cos( u );\n    \t\t\tcenter.y = radius * Math.sin( u );\n\n    \t\t\t// normal\n    \t\t\tnormal.subVectors( vertex, center ).normalize();\n\n    \t\t\tnormals[ vertexBufferOffset ] = normal.x;\n    \t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n    \t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\n    \t\t\t// uv\n    \t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n    \t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\n    \t\t\t// update offsets\n    \t\t\tvertexBufferOffset += 3;\n    \t\t\tuvBufferOffset += 2;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n    \t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n    \t\t\t// indices\n    \t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n    \t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n    \t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n    \t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n    \t\t\t// face one\n    \t\t\tindices[ indexBufferOffset ] = a;\n    \t\t\tindices[ indexBufferOffset + 1 ] = b;\n    \t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n    \t\t\t// face two\n    \t\t\tindices[ indexBufferOffset + 3 ] = b;\n    \t\t\tindices[ indexBufferOffset + 4 ] = c;\n    \t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n    \t\t\t// update offset\n    \t\t\tindexBufferOffset += 6;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    }\n\n    TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n    /**\n     * @author oosmoxiecode\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n     */\n\n    function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TorusGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\tradialSegments: radialSegments,\n    \t\ttubularSegments: tubularSegments,\n    \t\tarc: arc\n    \t};\n\n    \tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\n    }\n\n    TorusGeometry.prototype = Object.create( Geometry.prototype );\n    TorusGeometry.prototype.constructor = TorusGeometry;\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    exports.ShapeUtils = {\n\n    \t// calculate area of the contour polygon\n\n    \tarea: function ( contour ) {\n\n    \t\tvar n = contour.length;\n    \t\tvar a = 0.0;\n\n    \t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n    \t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n    \t\t}\n\n    \t\treturn a * 0.5;\n\n    \t},\n\n    \ttriangulate: ( function () {\n\n    \t\t/**\n    \t\t * This code is a quick port of code written in C++ which was submitted to\n    \t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n    \t\t * See original code and more information here:\n    \t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n    \t\t *\n    \t\t * ported to actionscript by Zevan Rosser\n    \t\t * www.actionsnippet.com\n    \t\t *\n    \t\t * ported to javascript by Joshua Koo\n    \t\t * http://www.lab4games.net/zz85/blog\n    \t\t *\n    \t\t */\n\n    \t\tfunction snip( contour, u, v, w, n, verts ) {\n\n    \t\t\tvar p;\n    \t\t\tvar ax, ay, bx, by;\n    \t\t\tvar cx, cy, px, py;\n\n    \t\t\tax = contour[ verts[ u ] ].x;\n    \t\t\tay = contour[ verts[ u ] ].y;\n\n    \t\t\tbx = contour[ verts[ v ] ].x;\n    \t\t\tby = contour[ verts[ v ] ].y;\n\n    \t\t\tcx = contour[ verts[ w ] ].x;\n    \t\t\tcy = contour[ verts[ w ] ].y;\n\n    \t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\n    \t\t\tvar aX, aY, bX, bY, cX, cY;\n    \t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n    \t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n    \t\t\taX = cx - bx;  aY = cy - by;\n    \t\t\tbX = ax - cx;  bY = ay - cy;\n    \t\t\tcX = bx - ax;  cY = by - ay;\n\n    \t\t\tfor ( p = 0; p < n; p ++ ) {\n\n    \t\t\t\tpx = contour[ verts[ p ] ].x;\n    \t\t\t\tpy = contour[ verts[ p ] ].y;\n\n    \t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n    \t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n    \t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n    \t\t\t\tapx = px - ax;  apy = py - ay;\n    \t\t\t\tbpx = px - bx;  bpy = py - by;\n    \t\t\t\tcpx = px - cx;  cpy = py - cy;\n\n    \t\t\t\t// see if p is inside triangle abc\n\n    \t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n    \t\t\t\tcCROSSap = cX * apy - cY * apx;\n    \t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n    \t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n    \t\t\t}\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\t// takes in an contour array and returns\n\n    \t\treturn function triangulate( contour, indices ) {\n\n    \t\t\tvar n = contour.length;\n\n    \t\t\tif ( n < 3 ) return null;\n\n    \t\t\tvar result = [],\n    \t\t\t\tverts = [],\n    \t\t\t\tvertIndices = [];\n\n    \t\t\t/* we want a counter-clockwise polygon in verts */\n\n    \t\t\tvar u, v, w;\n\n    \t\t\tif ( exports.ShapeUtils.area( contour ) > 0.0 ) {\n\n    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n    \t\t\t} else {\n\n    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n    \t\t\t}\n\n    \t\t\tvar nv = n;\n\n    \t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n    \t\t\tvar count = 2 * nv;   /* error detection */\n\n    \t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n    \t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n    \t\t\t\tif ( ( count -- ) <= 0 ) {\n\n    \t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n    \t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n    \t\t\t\t\t//return null;\n    \t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n    \t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n    \t\t\t\t\tif ( indices ) return vertIndices;\n    \t\t\t\t\treturn result;\n\n    \t\t\t\t}\n\n    \t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n    \t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n    \t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n    \t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n    \t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n    \t\t\t\t\tvar a, b, c, s, t;\n\n    \t\t\t\t\t/* true names of the vertices */\n\n    \t\t\t\t\ta = verts[ u ];\n    \t\t\t\t\tb = verts[ v ];\n    \t\t\t\t\tc = verts[ w ];\n\n    \t\t\t\t\t/* output Triangle */\n\n    \t\t\t\t\tresult.push( [ contour[ a ],\n    \t\t\t\t\t\tcontour[ b ],\n    \t\t\t\t\t\tcontour[ c ] ] );\n\n\n    \t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n    \t\t\t\t\t/* remove v from the remaining polygon */\n\n    \t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n    \t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tnv --;\n\n    \t\t\t\t\t/* reset error detection counter */\n\n    \t\t\t\t\tcount = 2 * nv;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( indices ) return vertIndices;\n    \t\t\treturn result;\n\n    \t\t}\n\n    \t} )(),\n\n    \ttriangulateShape: function ( contour, holes ) {\n\n    \t\tfunction removeDupEndPts(points) {\n\n    \t\t\tvar l = points.length;\n\n    \t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n    \t\t\t\tpoints.pop();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tremoveDupEndPts( contour );\n    \t\tholes.forEach( removeDupEndPts );\n\n    \t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n    \t\t\t// inOtherPt needs to be collinear to the inSegment\n    \t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n    \t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n    \t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n    \t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n    \t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n    \t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n    \t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n    \t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n    \t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n    \t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n    \t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n    \t\t\t\t// not parallel\n\n    \t\t\t\tvar perpSeg2;\n    \t\t\t\tif ( limit > 0 ) {\n\n    \t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n    \t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n    \t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n    \t\t\t\t}\n\n    \t\t\t\t// i.e. to reduce rounding errors\n    \t\t\t\t// intersection at endpoint of segment#1?\n    \t\t\t\tif ( perpSeg2 === 0 ) {\n\n    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\n    \t\t\t\t}\n    \t\t\t\tif ( perpSeg2 === limit ) {\n\n    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n    \t\t\t\t\treturn [ inSeg1Pt2 ];\n\n    \t\t\t\t}\n    \t\t\t\t// intersection at endpoint of segment#2?\n    \t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n    \t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n    \t\t\t\t// return real intersection point\n    \t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n    \t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n    \t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// parallel or collinear\n    \t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n    \t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n    \t\t\t\t// they are collinear or degenerate\n    \t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n    \t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n    \t\t\t\t// both segments are points\n    \t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n    \t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n    \t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n    \t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\n    \t\t\t\t}\n    \t\t\t\t// segment#1  is a single point\n    \t\t\t\tif ( seg1Pt ) {\n\n    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\n    \t\t\t\t}\n    \t\t\t\t// segment#2  is a single point\n    \t\t\t\tif ( seg2Pt ) {\n\n    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n    \t\t\t\t\treturn [ inSeg2Pt1 ];\n\n    \t\t\t\t}\n\n    \t\t\t\t// they are collinear segments, which might overlap\n    \t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n    \t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n    \t\t\t\tif ( seg1dx !== 0 ) {\n\n    \t\t\t\t\t// the segments are NOT on a vertical line\n    \t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// the segments are on a vertical line\n    \t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n    \t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n    \t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n    \t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n    \t\t\t\t\t\treturn [ seg2min ];\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n    \t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n    \t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n    \t\t\t\t\t\treturn [ seg1min ];\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n    \t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n    \t\t\t// The order of legs is important\n\n    \t\t\t// translation of all points, so that Vertex is at (0,0)\n    \t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n    \t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n    \t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n    \t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n    \t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n    \t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n    \t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n    \t\t\t\t// angle != 180 deg.\n\n    \t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n    \t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n    \t\t\t\tif ( from2toAngle > 0 ) {\n\n    \t\t\t\t\t// main angle < 180 deg.\n    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// main angle > 180 deg.\n    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// angle == 180 deg.\n    \t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n    \t\t\t\treturn\t( from2otherAngle > 0 );\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\tfunction removeHoles( contour, holes ) {\n\n    \t\t\tvar shape = contour.concat(); // work on this shape\n    \t\t\tvar hole;\n\n    \t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n    \t\t\t\t// Check if hole point lies within angle around shape point\n    \t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n    \t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n    \t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n    \t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n    \t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n    \t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n    \t\t\t\tif ( ! insideAngle ) {\n\n    \t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n    \t\t\t\t\treturn\tfalse;\n\n    \t\t\t\t}\n\n    \t\t\t\t// Check if shape point lies within angle around hole point\n    \t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n    \t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n    \t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n    \t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n    \t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n    \t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n    \t\t\t\tif ( ! insideAngle ) {\n\n    \t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n    \t\t\t\t\treturn\tfalse;\n\n    \t\t\t\t}\n\n    \t\t\t\treturn\ttrue;\n\n    \t\t\t}\n\n    \t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n    \t\t\t\t// checks for intersections with shape edges\n    \t\t\t\tvar sIdx, nextIdx, intersection;\n    \t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n    \t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n    \t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n    \t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n    \t\t\t\t}\n\n    \t\t\t\treturn\tfalse;\n\n    \t\t\t}\n\n    \t\t\tvar indepHoles = [];\n\n    \t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n    \t\t\t\t// checks for intersections with hole edges\n    \t\t\t\tvar ihIdx, chkHole,\n    \t\t\t\t\thIdx, nextIdx, intersection;\n    \t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n    \t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n    \t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n    \t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n    \t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n    \t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n    \t\t\t\treturn\tfalse;\n\n    \t\t\t}\n\n    \t\t\tvar holeIndex, shapeIndex,\n    \t\t\t\tshapePt, holePt,\n    \t\t\t\tholeIdx, cutKey, failedCuts = [],\n    \t\t\t\ttmpShape1, tmpShape2,\n    \t\t\t\ttmpHole1, tmpHole2;\n\n    \t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\t\tindepHoles.push( h );\n\n    \t\t\t}\n\n    \t\t\tvar minShapeIndex = 0;\n    \t\t\tvar counter = indepHoles.length * 2;\n    \t\t\twhile ( indepHoles.length > 0 ) {\n\n    \t\t\t\tcounter --;\n    \t\t\t\tif ( counter < 0 ) {\n\n    \t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t\t// search for shape-vertex and hole-vertex,\n    \t\t\t\t// which can be connected without intersections\n    \t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n    \t\t\t\t\tshapePt = shape[ shapeIndex ];\n    \t\t\t\t\tholeIndex\t= - 1;\n\n    \t\t\t\t\t// search for hole which can be reached without intersections\n    \t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n    \t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n    \t\t\t\t\t\t// prevent multiple checks\n    \t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n    \t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n    \t\t\t\t\t\thole = holes[ holeIdx ];\n    \t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n    \t\t\t\t\t\t\tholePt = hole[ h2 ];\n    \t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n    \t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n    \t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n    \t\t\t\t\t\t\tholeIndex = h2;\n    \t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n    \t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n    \t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n    \t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n    \t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n    \t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n    \t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n    \t\t\t\t\t\t\t// Debug only, to show the selected cuts\n    \t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n    \t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n    \t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn shape; \t\t\t/* shape with no holes */\n\n    \t\t}\n\n\n    \t\tvar i, il, f, face,\n    \t\t\tkey, index,\n    \t\t\tallPointsMap = {};\n\n    \t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n    \t\tvar allpoints = contour.concat();\n\n    \t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n    \t\t}\n\n    \t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n    \t\t// prepare all points map\n\n    \t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n    \t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n    \t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\n    \t\t\t}\n\n    \t\t\tallPointsMap[ key ] = i;\n\n    \t\t}\n\n    \t\t// remove holes by cutting paths to holes and adding them to the shape\n    \t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n    \t\tvar triangles = exports.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n    \t\t//console.log( \"triangles\",triangles, triangles.length );\n\n    \t\t// check all face vertices against all points map\n\n    \t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n    \t\t\tface = triangles[ i ];\n\n    \t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n    \t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n    \t\t\t\tindex = allPointsMap[ key ];\n\n    \t\t\t\tif ( index !== undefined ) {\n\n    \t\t\t\t\tface[ f ] = index;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn triangles.concat();\n\n    \t},\n\n    \tisClockWise: function ( pts ) {\n\n    \t\treturn exports.ShapeUtils.area( pts ) < 0;\n\n    \t},\n\n    \t// Bezier Curves formulas obtained from\n    \t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n    \t// Quad Bezier Functions\n\n    \tb2: ( function () {\n\n    \t\tfunction b2p0( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn k * k * p;\n\n    \t\t}\n\n    \t\tfunction b2p1( t, p ) {\n\n    \t\t\treturn 2 * ( 1 - t ) * t * p;\n\n    \t\t}\n\n    \t\tfunction b2p2( t, p ) {\n\n    \t\t\treturn t * t * p;\n\n    \t\t}\n\n    \t\treturn function b2( t, p0, p1, p2 ) {\n\n    \t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\n    \t\t};\n\n    \t} )(),\n\n    \t// Cubic Bezier Functions\n\n    \tb3: ( function () {\n\n    \t\tfunction b3p0( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn k * k * k * p;\n\n    \t\t}\n\n    \t\tfunction b3p1( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn 3 * k * k * t * p;\n\n    \t\t}\n\n    \t\tfunction b3p2( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn 3 * k * t * t * p;\n\n    \t\t}\n\n    \t\tfunction b3p3( t, p ) {\n\n    \t\t\treturn t * t * t * p;\n\n    \t\t}\n\n    \t\treturn function b3( t, p0, p1, p2, p3 ) {\n\n    \t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\n    \t\t};\n\n    \t} )()\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     *\n     * Creates extruded geometry from a path shape.\n     *\n     * parameters = {\n     *\n     *  curveSegments: <int>, // number of points on the curves\n     *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n     *  amount: <int>, // Depth to extrude the shape\n     *\n     *  bevelEnabled: <bool>, // turn on bevel\n     *  bevelThickness: <float>, // how deep into the original shape bevel goes\n     *  bevelSize: <float>, // how far from shape outline is bevel\n     *  bevelSegments: <int>, // number of bevel layers\n     *\n     *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n     *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n     *\n     *  uvGenerator: <Object> // object that provides UV generator functions\n     *\n     * }\n     **/\n\n    function ExtrudeGeometry( shapes, options ) {\n\n    \tif ( typeof( shapes ) === \"undefined\" ) {\n\n    \t\tshapes = [];\n    \t\treturn;\n\n    \t}\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ExtrudeGeometry';\n\n    \tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n    \tthis.addShapeList( shapes, options );\n\n    \tthis.computeFaceNormals();\n\n    \t// can't really use automatic vertex normals\n    \t// as then front and back sides get smoothed too\n    \t// should do separate smoothing just for sides\n\n    \t//this.computeVertexNormals();\n\n    \t//console.log( \"took\", ( Date.now() - startTime ) );\n\n    }\n\n    ExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n    ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n    ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n    \tvar sl = shapes.length;\n\n    \tfor ( var s = 0; s < sl; s ++ ) {\n\n    \t\tvar shape = shapes[ s ];\n    \t\tthis.addShape( shape, options );\n\n    \t}\n\n    };\n\n    ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\n    \tvar amount = options.amount !== undefined ? options.amount : 100;\n\n    \tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n    \tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n    \tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n    \tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n    \tvar steps = options.steps !== undefined ? options.steps : 1;\n\n    \tvar extrudePath = options.extrudePath;\n    \tvar extrudePts, extrudeByPath = false;\n\n    \t// Use default WorldUVGenerator if no UV generators are specified.\n    \tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\n    \tvar splineTube, binormal, normal, position2;\n    \tif ( extrudePath ) {\n\n    \t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n    \t\textrudeByPath = true;\n    \t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n    \t\t// SETUP TNB variables\n\n    \t\t// Reuse TNB from TubeGeomtry for now.\n    \t\t// TODO1 - have a .isClosed in spline?\n\n    \t\tsplineTube = options.frames !== undefined ? options.frames : new TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\n    \t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n    \t\tbinormal = new Vector3();\n    \t\tnormal = new Vector3();\n    \t\tposition2 = new Vector3();\n\n    \t}\n\n    \t// Safeguards if bevels are not enabled\n\n    \tif ( ! bevelEnabled ) {\n\n    \t\tbevelSegments = 0;\n    \t\tbevelThickness = 0;\n    \t\tbevelSize = 0;\n\n    \t}\n\n    \t// Variables initialization\n\n    \tvar ahole, h, hl; // looping of holes\n    \tvar scope = this;\n\n    \tvar shapesOffset = this.vertices.length;\n\n    \tvar shapePoints = shape.extractPoints( curveSegments );\n\n    \tvar vertices = shapePoints.shape;\n    \tvar holes = shapePoints.holes;\n\n    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\n    \tif ( reverse ) {\n\n    \t\tvertices = vertices.reverse();\n\n    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n\n    \t\t\tif ( exports.ShapeUtils.isClockWise( ahole ) ) {\n\n    \t\t\t\tholes[ h ] = ahole.reverse();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\n    \t}\n\n\n    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\n    \t/* Vertices */\n\n    \tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\tahole = holes[ h ];\n\n    \t\tvertices = vertices.concat( ahole );\n\n    \t}\n\n\n    \tfunction scalePt2( pt, vec, size ) {\n\n    \t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n    \t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n    \t}\n\n    \tvar b, bs, t, z,\n    \t\tvert, vlen = vertices.length,\n    \t\tface, flen = faces.length;\n\n\n    \t// Find directions for point movement\n\n\n    \tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n    \t\t// computes for inPt the corresponding point inPt' on a new contour\n    \t\t//   shifted by 1 unit (length of normalized vector) to the left\n    \t\t// if we walk along contour clockwise, this new contour is outside the old one\n    \t\t//\n    \t\t// inPt' is the intersection of the two lines parallel to the two\n    \t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n    \t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\n    \t\t// good reading for geometry algorithms (here: line-line intersection)\n    \t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n    \t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n    \t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\n    \t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n    \t\t// check for collinear edges\n    \t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n    \t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n    \t\t\t// not collinear\n\n    \t\t\t// length of vectors for normalizing\n\n    \t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n    \t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n    \t\t\t// shift adjacent points by unit vectors to the left\n\n    \t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n    \t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n    \t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n    \t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n    \t\t\t// scaling factor for v_prev to intersection point\n\n    \t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n    \t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n    \t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n    \t\t\t// vector from inPt to intersection point\n\n    \t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n    \t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n    \t\t\t// Don't normalize!, otherwise sharp corners become ugly\n    \t\t\t//  but prevent crazy spikes\n    \t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n    \t\t\tif ( v_trans_lensq <= 2 ) {\n\n    \t\t\t\treturn\tnew Vector2( v_trans_x, v_trans_y );\n\n    \t\t\t} else {\n\n    \t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// handle special case of collinear edges\n\n    \t\t\tvar direction_eq = false;\t\t// assumes: opposite\n    \t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n    \t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n    \t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n    \t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n    \t\t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n    \t\t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( direction_eq ) {\n\n    \t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n    \t\t\t\tv_trans_x = - v_prev_y;\n    \t\t\t\tv_trans_y =  v_prev_x;\n    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n    \t\t\t} else {\n\n    \t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n    \t\t\t\tv_trans_x = v_prev_x;\n    \t\t\t\tv_trans_y = v_prev_y;\n    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn\tnew Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n    \t}\n\n\n    \tvar contourMovements = [];\n\n    \tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n    \t\tif ( j === il ) j = 0;\n    \t\tif ( k === il ) k = 0;\n\n    \t\t//  (j)---(i)---(k)\n    \t\t// console.log('i,j,k', i, j , k)\n\n    \t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n    \t}\n\n    \tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\n    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\tahole = holes[ h ];\n\n    \t\toneHoleMovements = [];\n\n    \t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n    \t\t\tif ( j === il ) j = 0;\n    \t\t\tif ( k === il ) k = 0;\n\n    \t\t\t//  (j)---(i)---(k)\n    \t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n    \t\t}\n\n    \t\tholesMovements.push( oneHoleMovements );\n    \t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n    \t}\n\n\n    \t// Loop bevelSegments, 1 for the front, 1 for the back\n\n    \tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n    \t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n    \t\tt = b / bevelSegments;\n    \t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n    \t\t// contract shape\n\n    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n    \t\t\tv( vert.x, vert.y,  - z );\n\n    \t\t}\n\n    \t\t// expand holes\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\toneHoleMovements = holesMovements[ h ];\n\n    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n    \t\t\t\tv( vert.x, vert.y,  - z );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tbs = bevelSize;\n\n    \t// Back facing vertices\n\n    \tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n    \t\tif ( ! extrudeByPath ) {\n\n    \t\t\tv( vert.x, vert.y, 0 );\n\n    \t\t} else {\n\n    \t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n    \t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n    \t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n    \t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n    \t\t\tv( position2.x, position2.y, position2.z );\n\n    \t\t}\n\n    \t}\n\n    \t// Add stepped vertices...\n    \t// Including front facing vertices\n\n    \tvar s;\n\n    \tfor ( s = 1; s <= steps; s ++ ) {\n\n    \t\tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n    \t\t\tif ( ! extrudeByPath ) {\n\n    \t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n    \t\t\t} else {\n\n    \t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n    \t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n    \t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n    \t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n    \t\t\t\tv( position2.x, position2.y, position2.z );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \t// Add bevel segments planes\n\n    \t//for ( b = 1; b <= bevelSegments; b ++ ) {\n    \tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n    \t\tt = b / bevelSegments;\n    \t\tz = bevelThickness * Math.cos ( t * Math.PI / 2 );\n    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n    \t\t// contract shape\n\n    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n    \t\t\tv( vert.x, vert.y,  amount + z );\n\n    \t\t}\n\n    \t\t// expand holes\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\toneHoleMovements = holesMovements[ h ];\n\n    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n    \t\t\t\tif ( ! extrudeByPath ) {\n\n    \t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \t/* Faces */\n\n    \t// Top and bottom faces\n\n    \tbuildLidFaces();\n\n    \t// Sides faces\n\n    \tbuildSideFaces();\n\n\n    \t/////  Internal functions\n\n    \tfunction buildLidFaces() {\n\n    \t\tif ( bevelEnabled ) {\n\n    \t\t\tvar layer = 0; // steps + 1\n    \t\t\tvar offset = vlen * layer;\n\n    \t\t\t// Bottom faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n    \t\t\t}\n\n    \t\t\tlayer = steps + bevelSegments * 2;\n    \t\t\toffset = vlen * layer;\n\n    \t\t\t// Top faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// Bottom faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n    \t\t\t}\n\n    \t\t\t// Top faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \t// Create faces for the z-sides of the shape\n\n    \tfunction buildSideFaces() {\n\n    \t\tvar layeroffset = 0;\n    \t\tsidewalls( contour, layeroffset );\n    \t\tlayeroffset += contour.length;\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\tsidewalls( ahole, layeroffset );\n\n    \t\t\t//, true\n    \t\t\tlayeroffset += ahole.length;\n\n    \t\t}\n\n    \t}\n\n    \tfunction sidewalls( contour, layeroffset ) {\n\n    \t\tvar j, k;\n    \t\ti = contour.length;\n\n    \t\twhile ( -- i >= 0 ) {\n\n    \t\t\tj = i;\n    \t\t\tk = i - 1;\n    \t\t\tif ( k < 0 ) k = contour.length - 1;\n\n    \t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n    \t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\n    \t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n    \t\t\t\tvar slen1 = vlen * s;\n    \t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n    \t\t\t\tvar a = layeroffset + j + slen1,\n    \t\t\t\t\tb = layeroffset + k + slen1,\n    \t\t\t\t\tc = layeroffset + k + slen2,\n    \t\t\t\t\td = layeroffset + j + slen2;\n\n    \t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \tfunction v( x, y, z ) {\n\n    \t\tscope.vertices.push( new Vector3( x, y, z ) );\n\n    \t}\n\n    \tfunction f3( a, b, c ) {\n\n    \t\ta += shapesOffset;\n    \t\tb += shapesOffset;\n    \t\tc += shapesOffset;\n\n    \t\tscope.faces.push( new Face3( a, b, c, null, null, 0 ) );\n\n    \t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\n    \t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\n    \t}\n\n    \tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n    \t\ta += shapesOffset;\n    \t\tb += shapesOffset;\n    \t\tc += shapesOffset;\n    \t\td += shapesOffset;\n\n    \t\tscope.faces.push( new Face3( a, b, d, null, null, 1 ) );\n    \t\tscope.faces.push( new Face3( b, c, d, null, null, 1 ) );\n\n    \t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\n    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\n    \t}\n\n    };\n\n    ExtrudeGeometry.WorldUVGenerator = {\n\n    \tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\n    \t\tvar vertices = geometry.vertices;\n\n    \t\tvar a = vertices[ indexA ];\n    \t\tvar b = vertices[ indexB ];\n    \t\tvar c = vertices[ indexC ];\n\n    \t\treturn [\n    \t\t\tnew Vector2( a.x, a.y ),\n    \t\t\tnew Vector2( b.x, b.y ),\n    \t\t\tnew Vector2( c.x, c.y )\n    \t\t];\n\n    \t},\n\n    \tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\n    \t\tvar vertices = geometry.vertices;\n\n    \t\tvar a = vertices[ indexA ];\n    \t\tvar b = vertices[ indexB ];\n    \t\tvar c = vertices[ indexC ];\n    \t\tvar d = vertices[ indexD ];\n\n    \t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\n    \t\t\treturn [\n    \t\t\t\tnew Vector2( a.x, 1 - a.z ),\n    \t\t\t\tnew Vector2( b.x, 1 - b.z ),\n    \t\t\t\tnew Vector2( c.x, 1 - c.z ),\n    \t\t\t\tnew Vector2( d.x, 1 - d.z )\n    \t\t\t];\n\n    \t\t} else {\n\n    \t\t\treturn [\n    \t\t\t\tnew Vector2( a.y, 1 - a.z ),\n    \t\t\t\tnew Vector2( b.y, 1 - b.z ),\n    \t\t\t\tnew Vector2( c.y, 1 - c.z ),\n    \t\t\t\tnew Vector2( d.y, 1 - d.z )\n    \t\t\t];\n\n    \t\t}\n\n    \t}\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * Text = 3D Text\n     *\n     * parameters = {\n     *  font: <THREE.Font>, // font\n     *\n     *  size: <float>, // size of the text\n     *  height: <float>, // thickness to extrude text\n     *  curveSegments: <int>, // number of points on the curves\n     *\n     *  bevelEnabled: <bool>, // turn on bevel\n     *  bevelThickness: <float>, // how deep into text bevel goes\n     *  bevelSize: <float> // how far from text outline is bevel\n     * }\n     */\n\n    function TextGeometry( text, parameters ) {\n\n    \tparameters = parameters || {};\n\n    \tvar font = parameters.font;\n\n    \tif ( (font && font.isFont) === false ) {\n\n    \t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n    \t\treturn new Geometry();\n\n    \t}\n\n    \tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n    \t// translate parameters to ExtrudeGeometry API\n\n    \tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n    \t// defaults\n\n    \tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n    \tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n    \tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n    \tExtrudeGeometry.call( this, shapes, parameters );\n\n    \tthis.type = 'TextGeometry';\n\n    }\n\n    TextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );\n    TextGeometry.prototype.constructor = TextGeometry;\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     * based on THREE.SphereGeometry\n     */\n\n    function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'SphereBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tradius = radius || 50;\n\n    \twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n    \theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n    \tphiStart = phiStart !== undefined ? phiStart : 0;\n    \tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n    \tvar thetaEnd = thetaStart + thetaLength;\n\n    \tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\n    \tvar positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \tvar index = 0, vertices = [], normal = new Vector3();\n\n    \tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n    \t\tvar verticesRow = [];\n\n    \t\tvar v = y / heightSegments;\n\n    \t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\n    \t\t\tvar u = x / widthSegments;\n\n    \t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n    \t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n    \t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n    \t\t\tnormal.set( px, py, pz ).normalize();\n\n    \t\t\tpositions.setXYZ( index, px, py, pz );\n    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n    \t\t\tuvs.setXY( index, u, 1 - v );\n\n    \t\t\tverticesRow.push( index );\n\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\tvertices.push( verticesRow );\n\n    \t}\n\n    \tvar indices = [];\n\n    \tfor ( var y = 0; y < heightSegments; y ++ ) {\n\n    \t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\n    \t\t\tvar v1 = vertices[ y ][ x + 1 ];\n    \t\t\tvar v2 = vertices[ y ][ x ];\n    \t\t\tvar v3 = vertices[ y + 1 ][ x ];\n    \t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\n    \t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n    \t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\n    \t\t}\n\n    \t}\n\n    \tthis.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n    \tthis.addAttribute( 'position', positions );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n    }\n\n    SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'SphereGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\n    }\n\n    SphereGeometry.prototype = Object.create( Geometry.prototype );\n    SphereGeometry.prototype.constructor = SphereGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'RingBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tinnerRadius: innerRadius,\n    \t\touterRadius: outerRadius,\n    \t\tthetaSegments: thetaSegments,\n    \t\tphiSegments: phiSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tinnerRadius = innerRadius || 20;\n    \touterRadius = outerRadius || 50;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    \tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n    \tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n    \tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// some helper variables\n    \tvar index = 0, indexOffset = 0, segment;\n    \tvar radius = innerRadius;\n    \tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n    \tvar vertex = new Vector3();\n    \tvar uv = new Vector2();\n    \tvar j, i;\n\n    \t// generate vertices, normals and uvs\n\n    \t// values are generate from the inside of the ring to the outside\n\n    \tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n    \t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n    \t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = radius * Math.cos( segment );\n    \t\t\tvertex.y = radius * Math.sin( segment );\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n    \t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex++;\n\n    \t\t}\n\n    \t\t// increase the radius for next row of vertices\n    \t\tradius += radiusStep;\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 0; j < phiSegments; j ++ ) {\n\n    \t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n    \t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n    \t\t\tsegment = i + thetaSegmentLevel;\n\n    \t\t\t// indices\n    \t\t\tvar a = segment;\n    \t\t\tvar b = segment + thetaSegments + 1;\n    \t\t\tvar c = segment + thetaSegments + 2;\n    \t\t\tvar d = segment + 1;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    }\n\n    RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    RingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n    /**\n     * @author Kaleb Murphy\n     */\n\n    function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'RingGeometry';\n\n    \tthis.parameters = {\n    \t\tinnerRadius: innerRadius,\n    \t\touterRadius: outerRadius,\n    \t\tthetaSegments: thetaSegments,\n    \t\tphiSegments: phiSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\n    }\n\n    RingGeometry.prototype = Object.create( Geometry.prototype );\n    RingGeometry.prototype.constructor = RingGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n     */\n\n    function PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'PlaneGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments\n    \t};\n\n    \tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\n    }\n\n    PlaneGeometry.prototype = Object.create( Geometry.prototype );\n    PlaneGeometry.prototype.constructor = PlaneGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n     // points - to create a closed torus, one must use a set of points\n     //    like so: [ a, b, c, d, a ], see first is the same as last.\n     // segments - the number of circumference segments to create\n     // phiStart - the starting radian\n     // phiLength - the radian (0 to 2PI) range of the lathed section\n     //    2PI is a closed lathe, less than 2PI is a portion.\n\n    function LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'LatheBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tpoints: points,\n    \t\tsegments: segments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength\n    \t};\n\n    \tsegments = Math.floor( segments ) || 12;\n    \tphiStart = phiStart || 0;\n    \tphiLength = phiLength || Math.PI * 2;\n\n    \t// clamp phiLength so it's in range of [ 0, 2PI ]\n    \tphiLength = exports.Math.clamp( phiLength, 0, Math.PI * 2 );\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = ( segments + 1 ) * points.length;\n    \tvar indexCount = segments * points.length * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n    \tvar index = 0, indexOffset = 0, base;\n    \tvar inverseSegments = 1.0 / segments;\n    \tvar vertex = new Vector3();\n    \tvar uv = new Vector2();\n    \tvar i, j;\n\n    \t// generate vertices and uvs\n\n    \tfor ( i = 0; i <= segments; i ++ ) {\n\n    \t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n    \t\tvar sin = Math.sin( phi );\n    \t\tvar cos = Math.cos( phi );\n\n    \t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = points[ j ].x * sin;\n    \t\t\tvertex.y = points[ j ].y;\n    \t\t\tvertex.z = points[ j ].x * cos;\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// uv\n    \t\t\tuv.x = i / segments;\n    \t\t\tuv.y = j / ( points.length - 1 );\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( i = 0; i < segments; i ++ ) {\n\n    \t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n    \t\t\tbase = j + i * points.length;\n\n    \t\t\t// indices\n    \t\t\tvar a = base;\n    \t\t\tvar b = base + points.length;\n    \t\t\tvar c = base + points.length + 1;\n    \t\t\tvar d = base + 1;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// generate normals\n\n    \tthis.computeVertexNormals();\n\n    \t// if the geometry is closed, we need to average the normals along the seam.\n    \t// because the corresponding vertices are identical (but still have different UVs).\n\n    \tif( phiLength === Math.PI * 2 ) {\n\n    \t\tvar normals = this.attributes.normal.array;\n    \t\tvar n1 = new Vector3();\n    \t\tvar n2 = new Vector3();\n    \t\tvar n = new Vector3();\n\n    \t\t// this is the buffer offset for the last line of vertices\n    \t\tbase = segments * points.length * 3;\n\n    \t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n    \t\t\t// select the normal of the vertex in the first line\n    \t\t\tn1.x = normals[ j + 0 ];\n    \t\t\tn1.y = normals[ j + 1 ];\n    \t\t\tn1.z = normals[ j + 2 ];\n\n    \t\t\t// select the normal of the vertex in the last line\n    \t\t\tn2.x = normals[ base + j + 0 ];\n    \t\t\tn2.y = normals[ base + j + 1 ];\n    \t\t\tn2.z = normals[ base + j + 2 ];\n\n    \t\t\t// average normals\n    \t\t\tn.addVectors( n1, n2 ).normalize();\n\n    \t\t\t// assign the new values to both normals\n    \t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n    \t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n    \t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n    \t\t} // next row\n\n    \t}\n\n    }\n\n    LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n    /**\n     * @author astrodud / http://astrodud.isgreat.org/\n     * @author zz85 / https://github.com/zz85\n     * @author bhouston / http://clara.io\n     */\n\n    // points - to create a closed torus, one must use a set of points\n    //    like so: [ a, b, c, d, a ], see first is the same as last.\n    // segments - the number of circumference segments to create\n    // phiStart - the starting radian\n    // phiLength - the radian (0 to 2PI) range of the lathed section\n    //    2PI is a closed lathe, less than 2PI is a portion.\n\n    function LatheGeometry( points, segments, phiStart, phiLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'LatheGeometry';\n\n    \tthis.parameters = {\n    \t\tpoints: points,\n    \t\tsegments: segments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength\n    \t};\n\n    \tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n    \tthis.mergeVertices();\n\n    }\n\n    LatheGeometry.prototype = Object.create( Geometry.prototype );\n    LatheGeometry.prototype.constructor = LatheGeometry;\n\n    /**\n     * @author jonobr1 / http://jonobr1.com\n     *\n     * Creates a one-sided polygonal geometry from a path shape. Similar to\n     * ExtrudeGeometry.\n     *\n     * parameters = {\n     *\n     *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n     *\n     *\tmaterial: <int> // material index for front and back faces\n     *\tuvGenerator: <Object> // object that provides UV generator functions\n     *\n     * }\n     **/\n\n    function ShapeGeometry( shapes, options ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ShapeGeometry';\n\n    \tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\n    \tthis.addShapeList( shapes, options );\n\n    \tthis.computeFaceNormals();\n\n    }\n\n    ShapeGeometry.prototype = Object.create( Geometry.prototype );\n    ShapeGeometry.prototype.constructor = ShapeGeometry;\n\n    /**\n     * Add an array of shapes to THREE.ShapeGeometry.\n     */\n    ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n    \tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n    \t\tthis.addShape( shapes[ i ], options );\n\n    \t}\n\n    \treturn this;\n\n    };\n\n    /**\n     * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n     */\n    ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\n    \tif ( options === undefined ) options = {};\n    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n    \tvar material = options.material;\n    \tvar uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\n    \t//\n\n    \tvar i, l, hole;\n\n    \tvar shapesOffset = this.vertices.length;\n    \tvar shapePoints = shape.extractPoints( curveSegments );\n\n    \tvar vertices = shapePoints.shape;\n    \tvar holes = shapePoints.holes;\n\n    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\n    \tif ( reverse ) {\n\n    \t\tvertices = vertices.reverse();\n\n    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n    \t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n    \t\t\thole = holes[ i ];\n\n    \t\t\tif ( exports.ShapeUtils.isClockWise( hole ) ) {\n\n    \t\t\t\tholes[ i ] = hole.reverse();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treverse = false;\n\n    \t}\n\n    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\n    \t// Vertices\n\n    \tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n    \t\thole = holes[ i ];\n    \t\tvertices = vertices.concat( hole );\n\n    \t}\n\n    \t//\n\n    \tvar vert, vlen = vertices.length;\n    \tvar face, flen = faces.length;\n\n    \tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\tvert = vertices[ i ];\n\n    \t\tthis.vertices.push( new Vector3( vert.x, vert.y, 0 ) );\n\n    \t}\n\n    \tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\tface = faces[ i ];\n\n    \t\tvar a = face[ 0 ] + shapesOffset;\n    \t\tvar b = face[ 1 ] + shapesOffset;\n    \t\tvar c = face[ 2 ] + shapesOffset;\n\n    \t\tthis.faces.push( new Face3( a, b, c, null, null, material ) );\n    \t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\n    \t}\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function EdgesGeometry( geometry, thresholdAngle ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n    \tvar thresholdDot = Math.cos( exports.Math.DEG2RAD * thresholdAngle );\n\n    \tvar edge = [ 0, 0 ], hash = {};\n\n    \tfunction sortFunction( a, b ) {\n\n    \t\treturn a - b;\n\n    \t}\n\n    \tvar keys = [ 'a', 'b', 'c' ];\n\n    \tvar geometry2;\n\n    \tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\tgeometry2 = new Geometry();\n    \t\tgeometry2.fromBufferGeometry( geometry );\n\n    \t} else {\n\n    \t\tgeometry2 = geometry.clone();\n\n    \t}\n\n    \tgeometry2.mergeVertices();\n    \tgeometry2.computeFaceNormals();\n\n    \tvar vertices = geometry2.vertices;\n    \tvar faces = geometry2.faces;\n\n    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\tvar face = faces[ i ];\n\n    \t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\tedge[ 0 ] = face[ keys[ j ] ];\n    \t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n    \t\t\tedge.sort( sortFunction );\n\n    \t\t\tvar key = edge.toString();\n\n    \t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\n    \t\t\t} else {\n\n    \t\t\t\thash[ key ].face2 = i;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tvar coords = [];\n\n    \tfor ( var key in hash ) {\n\n    \t\tvar h = hash[ key ];\n\n    \t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\n    \t\t\tvar vertex = vertices[ h.vert1 ];\n    \t\t\tcoords.push( vertex.x );\n    \t\t\tcoords.push( vertex.y );\n    \t\t\tcoords.push( vertex.z );\n\n    \t\t\tvertex = vertices[ h.vert2 ];\n    \t\t\tcoords.push( vertex.x );\n    \t\t\tcoords.push( vertex.y );\n    \t\t\tcoords.push( vertex.z );\n\n    \t\t}\n\n    \t}\n\n    \tthis.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );\n\n    }\n\n    EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n    EdgesGeometry.prototype.constructor = EdgesGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'CylinderBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradiusTop: radiusTop,\n    \t\tradiusBottom: radiusBottom,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tvar scope = this;\n\n    \tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n    \tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n    \theight = height !== undefined ? height : 100;\n\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \theightSegments = Math.floor( heightSegments ) || 1;\n\n    \topenEnded = openEnded !== undefined ? openEnded : false;\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\n    \t// used to calculate buffer length\n\n    \tvar nbCap = 0;\n\n    \tif ( openEnded === false ) {\n\n    \t\tif ( radiusTop > 0 ) nbCap ++;\n    \t\tif ( radiusBottom > 0 ) nbCap ++;\n\n    \t}\n\n    \tvar vertexCount = calculateVertexCount();\n    \tvar indexCount = calculateIndexCount();\n\n    \t// buffers\n\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n\n    \tvar index = 0,\n    \t    indexOffset = 0,\n    \t    indexArray = [],\n    \t    halfHeight = height / 2;\n\n    \t// group variables\n    \tvar groupStart = 0;\n\n    \t// generate geometry\n\n    \tgenerateTorso();\n\n    \tif ( openEnded === false ) {\n\n    \t\tif ( radiusTop > 0 ) generateCap( true );\n    \t\tif ( radiusBottom > 0 ) generateCap( false );\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// helper functions\n\n    \tfunction calculateVertexCount() {\n\n    \t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\n    \t\tif ( openEnded === false ) {\n\n    \t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\n    \t\t}\n\n    \t\treturn count;\n\n    \t}\n\n    \tfunction calculateIndexCount() {\n\n    \t\tvar count = radialSegments * heightSegments * 2 * 3;\n\n    \t\tif ( openEnded === false ) {\n\n    \t\t\tcount += radialSegments * nbCap * 3;\n\n    \t\t}\n\n    \t\treturn count;\n\n    \t}\n\n    \tfunction generateTorso() {\n\n    \t\tvar x, y;\n    \t\tvar normal = new Vector3();\n    \t\tvar vertex = new Vector3();\n\n    \t\tvar groupCount = 0;\n\n    \t\t// this will be used to calculate the normal\n    \t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n    \t\t// generate vertices, normals and uvs\n\n    \t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n    \t\t\tvar indexRow = [];\n\n    \t\t\tvar v = y / heightSegments;\n\n    \t\t\t// calculate the radius of the current row\n    \t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n    \t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n    \t\t\t\tvar u = x / radialSegments;\n\n    \t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n    \t\t\t\tvar sinTheta = Math.sin( theta );\n    \t\t\t\tvar cosTheta = Math.cos( theta );\n\n    \t\t\t\t// vertex\n    \t\t\t\tvertex.x = radius * sinTheta;\n    \t\t\t\tvertex.y = - v * height + halfHeight;\n    \t\t\t\tvertex.z = radius * cosTheta;\n    \t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t\t// normal\n    \t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n    \t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n    \t\t\t\t// uv\n    \t\t\t\tuvs.setXY( index, u, 1 - v );\n\n    \t\t\t\t// save index of vertex in respective row\n    \t\t\t\tindexRow.push( index );\n\n    \t\t\t\t// increase index\n    \t\t\t\tindex ++;\n\n    \t\t\t}\n\n    \t\t\t// now save vertices of the row in our index array\n    \t\t\tindexArray.push( indexRow );\n\n    \t\t}\n\n    \t\t// generate indices\n\n    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n    \t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n    \t\t\t\t// we use the index array to access the correct indices\n    \t\t\t\tvar i1 = indexArray[ y ][ x ];\n    \t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n    \t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n    \t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\n    \t\t\t\t// face one\n    \t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n    \t\t\t\t// face two\n    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n    \t\t\t\t// update counters\n    \t\t\t\tgroupCount += 6;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, 0 );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t}\n\n    \tfunction generateCap( top ) {\n\n    \t\tvar x, centerIndexStart, centerIndexEnd;\n\n    \t\tvar uv = new Vector2();\n    \t\tvar vertex = new Vector3();\n\n    \t\tvar groupCount = 0;\n\n    \t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n    \t\tvar sign = ( top === true ) ? 1 : - 1;\n\n    \t\t// save the index of the first center vertex\n    \t\tcenterIndexStart = index;\n\n    \t\t// first we generate the center vertex data of the cap.\n    \t\t// because the geometry needs one set of uvs per face,\n    \t\t// we must generate a center vertex per face/segment\n\n    \t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n    \t\t\t// vertex\n    \t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = 0.5;\n    \t\t\tuv.y = 0.5;\n\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\t// save the index of the last center vertex\n    \t\tcenterIndexEnd = index;\n\n    \t\t// now we generate the surrounding vertices, normals and uvs\n\n    \t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n    \t\t\tvar u = x / radialSegments;\n    \t\t\tvar theta = u * thetaLength + thetaStart;\n\n    \t\t\tvar cosTheta = Math.cos( theta );\n    \t\t\tvar sinTheta = Math.sin( theta );\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = radius * sinTheta;\n    \t\t\tvertex.y = halfHeight * sign;\n    \t\t\tvertex.z = radius * cosTheta;\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n    \t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\t// generate indices\n\n    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n    \t\t\tvar c = centerIndexStart + x;\n    \t\t\tvar i = centerIndexEnd + x;\n\n    \t\t\tif ( top === true ) {\n\n    \t\t\t\t// face top\n    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n    \t\t\t} else {\n\n    \t\t\t\t// face bottom\n    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n    \t\t\t}\n\n    \t\t\t// update counters\n    \t\t\tgroupCount += 3;\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t}\n\n    }\n\n    CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'CylinderGeometry';\n\n    \tthis.parameters = {\n    \t\tradiusTop: radiusTop,\n    \t\tradiusBottom: radiusBottom,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n    \tthis.mergeVertices();\n\n    }\n\n    CylinderGeometry.prototype = Object.create( Geometry.prototype );\n    CylinderGeometry.prototype.constructor = CylinderGeometry;\n\n    /**\n     * @author abelnation / http://github.com/abelnation\n     */\n\n    function ConeGeometry(\n    \tradius, height,\n    \tradialSegments, heightSegments,\n    \topenEnded, thetaStart, thetaLength ) {\n\n    \tCylinderGeometry.call( this,\n    \t\t0, radius, height,\n    \t\tradialSegments, heightSegments,\n    \t\topenEnded, thetaStart, thetaLength );\n\n    \tthis.type = 'ConeGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    }\n\n    ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n    ConeGeometry.prototype.constructor = ConeGeometry;\n\n    /*\n     * @author: abelnation / http://github.com/abelnation\n     */\n\n    function ConeBufferGeometry(\n    \tradius, height,\n    \tradialSegments, heightSegments,\n    \topenEnded, thetaStart, thetaLength ) {\n\n    \tCylinderBufferGeometry.call( this,\n    \t\t0, radius, height,\n    \t\tradialSegments, heightSegments,\n    \t\topenEnded, thetaStart, thetaLength );\n\n    \tthis.type = 'ConeBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    }\n\n    ConeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'CircleBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tsegments: segments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tradius = radius || 50;\n    \tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    \tvar vertices = segments + 2;\n\n    \tvar positions = new Float32Array( vertices * 3 );\n    \tvar normals = new Float32Array( vertices * 3 );\n    \tvar uvs = new Float32Array( vertices * 2 );\n\n    \t// center data is already zero, but need to set a few extras\n    \tnormals[ 2 ] = 1.0;\n    \tuvs[ 0 ] = 0.5;\n    \tuvs[ 1 ] = 0.5;\n\n    \tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\n    \t\tvar segment = thetaStart + s / segments * thetaLength;\n\n    \t\tpositions[ i ] = radius * Math.cos( segment );\n    \t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\n    \t\tnormals[ i + 2 ] = 1; // normal z\n\n    \t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n    \t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\n    \t}\n\n    \tvar indices = [];\n\n    \tfor ( var i = 1; i <= segments; i ++ ) {\n\n    \t\tindices.push( i, i + 1, 0 );\n\n    \t}\n\n    \tthis.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n    }\n\n    CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n    /**\n     * @author hughes\n     */\n\n    function CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'CircleGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tsegments: segments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\n    }\n\n    CircleGeometry.prototype = Object.create( Geometry.prototype );\n    CircleGeometry.prototype.constructor = CircleGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n     */\n\n    function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'BoxGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\tdepth: depth,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tdepthSegments: depthSegments\n    \t};\n\n    \tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n    \tthis.mergeVertices();\n\n    }\n\n    BoxGeometry.prototype = Object.create( Geometry.prototype );\n    BoxGeometry.prototype.constructor = BoxGeometry;\n\n\n\n    var Geometries = Object.freeze({\n    \tWireframeGeometry: WireframeGeometry,\n    \tParametricGeometry: ParametricGeometry,\n    \tTetrahedronGeometry: TetrahedronGeometry,\n    \tOctahedronGeometry: OctahedronGeometry,\n    \tIcosahedronGeometry: IcosahedronGeometry,\n    \tDodecahedronGeometry: DodecahedronGeometry,\n    \tPolyhedronGeometry: PolyhedronGeometry,\n    \tTubeGeometry: TubeGeometry,\n    \tTorusKnotGeometry: TorusKnotGeometry,\n    \tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n    \tTorusGeometry: TorusGeometry,\n    \tTorusBufferGeometry: TorusBufferGeometry,\n    \tTextGeometry: TextGeometry,\n    \tSphereBufferGeometry: SphereBufferGeometry,\n    \tSphereGeometry: SphereGeometry,\n    \tRingGeometry: RingGeometry,\n    \tRingBufferGeometry: RingBufferGeometry,\n    \tPlaneBufferGeometry: PlaneBufferGeometry,\n    \tPlaneGeometry: PlaneGeometry,\n    \tLatheGeometry: LatheGeometry,\n    \tLatheBufferGeometry: LatheBufferGeometry,\n    \tShapeGeometry: ShapeGeometry,\n    \tExtrudeGeometry: ExtrudeGeometry,\n    \tEdgesGeometry: EdgesGeometry,\n    \tConeGeometry: ConeGeometry,\n    \tConeBufferGeometry: ConeBufferGeometry,\n    \tCylinderGeometry: CylinderGeometry,\n    \tCylinderBufferGeometry: CylinderBufferGeometry,\n    \tCircleBufferGeometry: CircleBufferGeometry,\n    \tCircleGeometry: CircleGeometry,\n    \tBoxBufferGeometry: BoxBufferGeometry,\n    \tBoxGeometry: BoxGeometry\n    });\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ShadowMaterial() {\n\n    \tShaderMaterial.call( this, {\n    \t\tuniforms: exports.UniformsUtils.merge( [\n    \t\t\tUniformsLib[ \"lights\" ],\n    \t\t\t{\n    \t\t\t\topacity: { value: 1.0 }\n    \t\t\t}\n    \t\t] ),\n    \t\tvertexShader: ShaderChunk[ 'shadow_vert' ],\n    \t\tfragmentShader: ShaderChunk[ 'shadow_frag' ]\n    \t} );\n\n    \tthis.lights = true;\n    \tthis.transparent = true;\n\n    \tObject.defineProperties( this, {\n    \t\topacity: {\n    \t\t\tenumerable: true,\n    \t\t\tget: function () {\n    \t\t\t\treturn this.uniforms.opacity.value;\n    \t\t\t},\n    \t\t\tset: function ( value ) {\n    \t\t\t\tthis.uniforms.opacity.value = value;\n    \t\t\t}\n    \t\t}\n    \t} );\n\n    }\n\n    ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );\n    ShadowMaterial.prototype.constructor = ShadowMaterial;\n\n    ShadowMaterial.prototype.isShadowMaterial = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function RawShaderMaterial( parameters ) {\n\n    \tShaderMaterial.call( this, parameters );\n\n    \tthis.type = 'RawShaderMaterial';\n\n    }\n\n    RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n    RawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n    RawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function MultiMaterial( materials ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.type = 'MultiMaterial';\n\n    \tthis.materials = materials instanceof Array ? materials : [];\n\n    \tthis.visible = true;\n\n    }\n\n    MultiMaterial.prototype = {\n\n    \tconstructor: MultiMaterial,\n\n    \tisMultiMaterial: true,\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar output = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.2,\n    \t\t\t\ttype: 'material',\n    \t\t\t\tgenerator: 'MaterialExporter'\n    \t\t\t},\n    \t\t\tuuid: this.uuid,\n    \t\t\ttype: this.type,\n    \t\t\tmaterials: []\n    \t\t};\n\n    \t\tvar materials = this.materials;\n\n    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n    \t\t\tvar material = materials[ i ].toJSON( meta );\n    \t\t\tdelete material.metadata;\n\n    \t\t\toutput.materials.push( material );\n\n    \t\t}\n\n    \t\toutput.visible = this.visible;\n\n    \t\treturn output;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\tvar material = new this.constructor();\n\n    \t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\n    \t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\n    \t\t}\n\n    \t\tmaterial.visible = this.visible;\n\n    \t\treturn material;\n\n    \t}\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  roughness: <float>,\n     *  metalness: <float>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  bumpMap: new THREE.Texture( <Image> ),\n     *  bumpScale: <float>,\n     *\n     *  normalMap: new THREE.Texture( <Image> ),\n     *  normalScale: <Vector2>,\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  roughnessMap: new THREE.Texture( <Image> ),\n     *\n     *  metalnessMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n     *  envMapIntensity: <float>\n     *\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshStandardMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.defines = { 'STANDARD': '' };\n\n    \tthis.type = 'MeshStandardMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n    \tthis.roughness = 0.5;\n    \tthis.metalness = 0.5;\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.bumpMap = null;\n    \tthis.bumpScale = 1;\n\n    \tthis.normalMap = null;\n    \tthis.normalScale = new Vector2( 1, 1 );\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.roughnessMap = null;\n\n    \tthis.metalnessMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.envMapIntensity = 1.0;\n\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshStandardMaterial.prototype = Object.create( Material.prototype );\n    MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n    MeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n    MeshStandardMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.defines = { 'STANDARD': '' };\n\n    \tthis.color.copy( source.color );\n    \tthis.roughness = source.roughness;\n    \tthis.metalness = source.metalness;\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.bumpMap = source.bumpMap;\n    \tthis.bumpScale = source.bumpScale;\n\n    \tthis.normalMap = source.normalMap;\n    \tthis.normalScale.copy( source.normalScale );\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.roughnessMap = source.roughnessMap;\n\n    \tthis.metalnessMap = source.metalnessMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.envMapIntensity = source.envMapIntensity;\n\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *  reflectivity: <float>\n     * }\n     */\n\n    function MeshPhysicalMaterial( parameters ) {\n\n    \tMeshStandardMaterial.call( this );\n\n    \tthis.defines = { 'PHYSICAL': '' };\n\n    \tthis.type = 'MeshPhysicalMaterial';\n\n    \tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n    \tthis.clearCoat = 0.0;\n    \tthis.clearCoatRoughness = 0.0;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n    MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n    MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n    MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n    \tMeshStandardMaterial.prototype.copy.call( this, source );\n\n    \tthis.defines = { 'PHYSICAL': '' };\n\n    \tthis.reflectivity = source.reflectivity;\n\n    \tthis.clearCoat = source.clearCoat;\n    \tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  specular: <hex>,\n     *  shininess: <float>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  bumpMap: new THREE.Texture( <Image> ),\n     *  bumpScale: <float>,\n     *\n     *  normalMap: new THREE.Texture( <Image> ),\n     *  normalScale: <Vector2>,\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshPhongMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshPhongMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n    \tthis.specular = new Color( 0x111111 );\n    \tthis.shininess = 30;\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.bumpMap = null;\n    \tthis.bumpScale = 1;\n\n    \tthis.normalMap = null;\n    \tthis.normalScale = new Vector2( 1, 1 );\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshPhongMaterial.prototype = Object.create( Material.prototype );\n    MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n    MeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n    MeshPhongMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n    \tthis.specular.copy( source.specular );\n    \tthis.shininess = source.shininess;\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.bumpMap = source.bumpMap;\n    \tthis.bumpScale = source.bumpScale;\n\n    \tthis.normalMap = source.normalMap;\n    \tthis.normalScale.copy( source.normalScale );\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     *\n     * parameters = {\n     *  opacity: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>\n     * }\n     */\n\n    function MeshNormalMaterial( parameters ) {\n\n    \tMaterial.call( this, parameters );\n\n    \tthis.type = 'MeshNormalMaterial';\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n    \tthis.morphTargets = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshNormalMaterial.prototype = Object.create( Material.prototype );\n    MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n    MeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n    MeshNormalMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshLambertMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshLambertMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshLambertMaterial.prototype = Object.create( Material.prototype );\n    MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n    MeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n    MeshLambertMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  linewidth: <float>,\n     *\n     *  scale: <float>,\n     *  dashSize: <float>,\n     *  gapSize: <float>\n     * }\n     */\n\n    function LineDashedMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'LineDashedMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.linewidth = 1;\n\n    \tthis.scale = 1;\n    \tthis.dashSize = 3;\n    \tthis.gapSize = 1;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    LineDashedMaterial.prototype = Object.create( Material.prototype );\n    LineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n    LineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n    LineDashedMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.linewidth = source.linewidth;\n\n    \tthis.scale = source.scale;\n    \tthis.dashSize = source.dashSize;\n    \tthis.gapSize = source.gapSize;\n\n    \treturn this;\n\n    };\n\n\n\n    var Materials = Object.freeze({\n    \tShadowMaterial: ShadowMaterial,\n    \tSpriteMaterial: SpriteMaterial,\n    \tRawShaderMaterial: RawShaderMaterial,\n    \tShaderMaterial: ShaderMaterial,\n    \tPointsMaterial: PointsMaterial,\n    \tMultiMaterial: MultiMaterial,\n    \tMeshPhysicalMaterial: MeshPhysicalMaterial,\n    \tMeshStandardMaterial: MeshStandardMaterial,\n    \tMeshPhongMaterial: MeshPhongMaterial,\n    \tMeshNormalMaterial: MeshNormalMaterial,\n    \tMeshLambertMaterial: MeshLambertMaterial,\n    \tMeshDepthMaterial: MeshDepthMaterial,\n    \tMeshBasicMaterial: MeshBasicMaterial,\n    \tLineDashedMaterial: LineDashedMaterial,\n    \tLineBasicMaterial: LineBasicMaterial,\n    \tMaterial: Material\n    });\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    exports.Cache = {\n\n    \tenabled: false,\n\n    \tfiles: {},\n\n    \tadd: function ( key, file ) {\n\n    \t\tif ( this.enabled === false ) return;\n\n    \t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n    \t\tthis.files[ key ] = file;\n\n    \t},\n\n    \tget: function ( key ) {\n\n    \t\tif ( this.enabled === false ) return;\n\n    \t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n    \t\treturn this.files[ key ];\n\n    \t},\n\n    \tremove: function ( key ) {\n\n    \t\tdelete this.files[ key ];\n\n    \t},\n\n    \tclear: function () {\n\n    \t\tthis.files = {};\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LoadingManager( onLoad, onProgress, onError ) {\n\n    \tvar scope = this;\n\n    \tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\n    \tthis.onStart = undefined;\n    \tthis.onLoad = onLoad;\n    \tthis.onProgress = onProgress;\n    \tthis.onError = onError;\n\n    \tthis.itemStart = function ( url ) {\n\n    \t\titemsTotal ++;\n\n    \t\tif ( isLoading === false ) {\n\n    \t\t\tif ( scope.onStart !== undefined ) {\n\n    \t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tisLoading = true;\n\n    \t};\n\n    \tthis.itemEnd = function ( url ) {\n\n    \t\titemsLoaded ++;\n\n    \t\tif ( scope.onProgress !== undefined ) {\n\n    \t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n    \t\t}\n\n    \t\tif ( itemsLoaded === itemsTotal ) {\n\n    \t\t\tisLoading = false;\n\n    \t\t\tif ( scope.onLoad !== undefined ) {\n\n    \t\t\t\tscope.onLoad();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t};\n\n    \tthis.itemError = function ( url ) {\n\n    \t\tif ( scope.onError !== undefined ) {\n\n    \t\t\tscope.onError( url );\n\n    \t\t}\n\n    \t};\n\n    }\n\n    exports.DefaultLoadingManager = new LoadingManager();\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function XHRLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( XHRLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tif ( this.path !== undefined ) url = this.path + url;\n\n    \t\tvar scope = this;\n\n    \t\tvar cached = exports.Cache.get( url );\n\n    \t\tif ( cached !== undefined ) {\n\n    \t\t\tscope.manager.itemStart( url );\n\n    \t\t\tsetTimeout( function () {\n\n    \t\t\t\tif ( onLoad ) onLoad( cached );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t}, 0 );\n\n    \t\t\treturn cached;\n\n    \t\t}\n\n    \t\tvar request = new XMLHttpRequest();\n    \t\trequest.open( 'GET', url, true );\n\n    \t\trequest.addEventListener( 'load', function ( event ) {\n\n    \t\t\tvar response = event.target.response;\n\n    \t\t\texports.Cache.add( url, response );\n\n    \t\t\tif ( this.status === 200 ) {\n\n    \t\t\t\tif ( onLoad ) onLoad( response );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t} else if ( this.status === 0 ) {\n\n    \t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n    \t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n    \t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\n    \t\t\t\tif ( onLoad ) onLoad( response );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( onError ) onError( event );\n\n    \t\t\t\tscope.manager.itemError( url );\n\n    \t\t\t}\n\n    \t\t}, false );\n\n    \t\tif ( onProgress !== undefined ) {\n\n    \t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n    \t\t\t\tonProgress( event );\n\n    \t\t\t}, false );\n\n    \t\t}\n\n    \t\trequest.addEventListener( 'error', function ( event ) {\n\n    \t\t\tif ( onError ) onError( event );\n\n    \t\t\tscope.manager.itemError( url );\n\n    \t\t}, false );\n\n    \t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n    \t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n    \t\tif ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );\n\n    \t\trequest.send( null );\n\n    \t\tscope.manager.itemStart( url );\n\n    \t\treturn request;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetResponseType: function ( value ) {\n\n    \t\tthis.responseType = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     *\n     * Abstract Base class to block based textures loader (dds, pvr, ...)\n     */\n\n    function CompressedTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \t// override in sub classes\n    \tthis._parser = null;\n\n    }\n\n    Object.assign( CompressedTextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar images = [];\n\n    \t\tvar texture = new CompressedTexture();\n    \t\ttexture.image = images;\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setPath( this.path );\n    \t\tloader.setResponseType( 'arraybuffer' );\n\n    \t\tfunction loadTexture( i ) {\n\n    \t\t\tloader.load( url[ i ], function ( buffer ) {\n\n    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n    \t\t\t\timages[ i ] = {\n    \t\t\t\t\twidth: texDatas.width,\n    \t\t\t\t\theight: texDatas.height,\n    \t\t\t\t\tformat: texDatas.format,\n    \t\t\t\t\tmipmaps: texDatas.mipmaps\n    \t\t\t\t};\n\n    \t\t\t\tloaded += 1;\n\n    \t\t\t\tif ( loaded === 6 ) {\n\n    \t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n    \t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t\t\ttexture.format = texDatas.format;\n    \t\t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t\t}\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\tif ( Array.isArray( url ) ) {\n\n    \t\t\tvar loaded = 0;\n\n    \t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n    \t\t\t\tloadTexture( i );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// compressed cubemap texture stored in a single DDS file\n\n    \t\t\tloader.load( url, function ( buffer ) {\n\n    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n    \t\t\t\tif ( texDatas.isCubemap ) {\n\n    \t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n    \t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n    \t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n    \t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n    \t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n    \t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n    \t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n    \t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ttexture.image.width = texDatas.width;\n    \t\t\t\t\ttexture.image.height = texDatas.height;\n    \t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n    \t\t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.format = texDatas.format;\n    \t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author Nikos M. / https://github.com/foo123/\n     *\n     * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n     */\n\n    var DataTextureLoader = BinaryTextureLoader;\n    function BinaryTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \t// override in sub classes\n    \tthis._parser = null;\n\n    }\n\n    Object.assign( BinaryTextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar texture = new DataTexture();\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setResponseType( 'arraybuffer' );\n\n    \t\tloader.load( url, function ( buffer ) {\n\n    \t\t\tvar texData = scope._parser( buffer );\n\n    \t\t\tif ( ! texData ) return;\n\n    \t\t\tif ( undefined !== texData.image ) {\n\n    \t\t\t\ttexture.image = texData.image;\n\n    \t\t\t} else if ( undefined !== texData.data ) {\n\n    \t\t\t\ttexture.image.width = texData.width;\n    \t\t\t\ttexture.image.height = texData.height;\n    \t\t\t\ttexture.image.data = texData.data;\n\n    \t\t\t}\n\n    \t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n    \t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n    \t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n    \t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\n    \t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n    \t\t\tif ( undefined !== texData.format ) {\n\n    \t\t\t\ttexture.format = texData.format;\n\n    \t\t\t}\n    \t\t\tif ( undefined !== texData.type ) {\n\n    \t\t\t\ttexture.type = texData.type;\n\n    \t\t\t}\n\n    \t\t\tif ( undefined !== texData.mipmaps ) {\n\n    \t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n    \t\t\t}\n\n    \t\t\tif ( 1 === texData.mipmapCount ) {\n\n    \t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t}\n\n    \t\t\ttexture.needsUpdate = true;\n\n    \t\t\tif ( onLoad ) onLoad( texture, texData );\n\n    \t\t}, onProgress, onError );\n\n\n    \t\treturn texture;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ImageLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( ImageLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n    \t\timage.onload = function () {\n\n    \t\t\timage.onload = null;\n\n    \t\t\tURL.revokeObjectURL( image.src );\n\n    \t\t\tif ( onLoad ) onLoad( image );\n\n    \t\t\tscope.manager.itemEnd( url );\n\n    \t\t};\n\n    \t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\n    \t\t\timage.src = url;\n\n    \t\t} else {\n\n    \t\t\tvar loader = new XHRLoader();\n    \t\t\tloader.setPath( this.path );\n    \t\t\tloader.setResponseType( 'blob' );\n    \t\t\tloader.setWithCredentials( this.withCredentials );\n    \t\t\tloader.load( url, function ( blob ) {\n\n    \t\t\t\timage.src = URL.createObjectURL( blob );\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\tscope.manager.itemStart( url );\n\n    \t\treturn image;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CubeTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( CubeTextureLoader.prototype, {\n\n    \tload: function ( urls, onLoad, onProgress, onError ) {\n\n    \t\tvar texture = new CubeTexture();\n\n    \t\tvar loader = new ImageLoader( this.manager );\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n    \t\tloader.setPath( this.path );\n\n    \t\tvar loaded = 0;\n\n    \t\tfunction loadTexture( i ) {\n\n    \t\t\tloader.load( urls[ i ], function ( image ) {\n\n    \t\t\t\ttexture.images[ i ] = image;\n\n    \t\t\t\tloaded ++;\n\n    \t\t\t\tif ( loaded === 6 ) {\n\n    \t\t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t\t}\n\n    \t\t\t}, undefined, onError );\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n    \t\t\tloadTexture( i );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function TextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( TextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar texture = new Texture();\n\n    \t\tvar loader = new ImageLoader( this.manager );\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n    \t\tloader.setWithCredentials( this.withCredentials );\n    \t\tloader.setPath( this.path );\n    \t\tloader.load( url, function ( image ) {\n\n    \t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n    \t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n    \t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n    \t\t\ttexture.image = image;\n    \t\t\ttexture.needsUpdate = true;\n\n    \t\t\tif ( onLoad !== undefined ) {\n\n    \t\t\t\tonLoad( texture );\n\n    \t\t\t}\n\n    \t\t}, onProgress, onError );\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Light( color, intensity ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Light';\n\n    \tthis.color = new Color( color );\n    \tthis.intensity = intensity !== undefined ? intensity : 1;\n\n    \tthis.receiveShadow = undefined;\n\n    }\n\n    Light.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Light,\n\n    \tisLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.color.copy( source.color );\n    \t\tthis.intensity = source.intensity;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.color = this.color.getHex();\n    \t\tdata.object.intensity = this.intensity;\n\n    \t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n    \t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n    \t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n    \t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n    \t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n    \t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function HemisphereLight( skyColor, groundColor, intensity ) {\n\n    \tLight.call( this, skyColor, intensity );\n\n    \tthis.type = 'HemisphereLight';\n\n    \tthis.castShadow = undefined;\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.groundColor = new Color( groundColor );\n\n    }\n\n    HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: HemisphereLight,\n\n    \tisHemisphereLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.groundColor.copy( source.groundColor );\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LightShadow( camera ) {\n\n    \tthis.camera = camera;\n\n    \tthis.bias = 0;\n    \tthis.radius = 1;\n\n    \tthis.mapSize = new Vector2( 512, 512 );\n\n    \tthis.map = null;\n    \tthis.matrix = new Matrix4();\n\n    }\n\n    Object.assign( LightShadow.prototype, {\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.camera = source.camera.clone();\n\n    \t\tthis.bias = source.bias;\n    \t\tthis.radius = source.radius;\n\n    \t\tthis.mapSize.copy( source.mapSize );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar object = {};\n\n    \t\tif ( this.bias !== 0 ) object.bias = this.bias;\n    \t\tif ( this.radius !== 1 ) object.radius = this.radius;\n    \t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n    \t\tobject.camera = this.camera.toJSON( false ).object;\n    \t\tdelete object.camera.matrix;\n\n    \t\treturn object;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function SpotLightShadow() {\n\n    \tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n    }\n\n    SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n    \tconstructor: SpotLightShadow,\n\n    \tisSpotLightShadow: true,\n\n    \tupdate: function ( light ) {\n\n    \t\tvar fov = exports.Math.RAD2DEG * 2 * light.angle;\n    \t\tvar aspect = this.mapSize.width / this.mapSize.height;\n    \t\tvar far = light.distance || 500;\n\n    \t\tvar camera = this.camera;\n\n    \t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n    \t\t\tcamera.fov = fov;\n    \t\t\tcamera.aspect = aspect;\n    \t\t\tcamera.far = far;\n    \t\t\tcamera.updateProjectionMatrix();\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'SpotLight';\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.target = new Object3D();\n\n    \tObject.defineProperty( this, 'power', {\n    \t\tget: function () {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\treturn this.intensity * Math.PI;\n    \t\t},\n    \t\tset: function ( power ) {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\tthis.intensity = power / Math.PI;\n    \t\t}\n    \t} );\n\n    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n    \tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n    \tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n    \tthis.shadow = new SpotLightShadow();\n\n    }\n\n    SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: SpotLight,\n\n    \tisSpotLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.distance = source.distance;\n    \t\tthis.angle = source.angle;\n    \t\tthis.penumbra = source.penumbra;\n    \t\tthis.decay = source.decay;\n\n    \t\tthis.target = source.target.clone();\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n\n    function PointLight( color, intensity, distance, decay ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'PointLight';\n\n    \tObject.defineProperty( this, 'power', {\n    \t\tget: function () {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\treturn this.intensity * 4 * Math.PI;\n\n    \t\t},\n    \t\tset: function ( power ) {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\tthis.intensity = power / ( 4 * Math.PI );\n    \t\t}\n    \t} );\n\n    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n    \tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n    }\n\n    PointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: PointLight,\n\n    \tisPointLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.distance = source.distance;\n    \t\tthis.decay = source.decay;\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function DirectionalLightShadow( light ) {\n\n    \tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n    }\n\n    DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n    \tconstructor: DirectionalLightShadow\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function DirectionalLight( color, intensity ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'DirectionalLight';\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.target = new Object3D();\n\n    \tthis.shadow = new DirectionalLightShadow();\n\n    }\n\n    DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: DirectionalLight,\n\n    \tisDirectionalLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.target = source.target.clone();\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AmbientLight( color, intensity ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'AmbientLight';\n\n    \tthis.castShadow = undefined;\n\n    }\n\n    AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: AmbientLight,\n\n    \tisAmbientLight: true,\n\n    } );\n\n    /**\n     * @author tschw\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     */\n\n    exports.AnimationUtils = {\n\n    \t// same as Array.prototype.slice, but also works on typed arrays\n    \tarraySlice: function( array, from, to ) {\n\n    \t\tif ( exports.AnimationUtils.isTypedArray( array ) ) {\n\n    \t\t\treturn new array.constructor( array.subarray( from, to ) );\n\n    \t\t}\n\n    \t\treturn array.slice( from, to );\n\n    \t},\n\n    \t// converts an array to a specific type\n    \tconvertArray: function( array, type, forceClone ) {\n\n    \t\tif ( ! array || // let 'undefined' and 'null' pass\n    \t\t\t\t! forceClone && array.constructor === type ) return array;\n\n    \t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n    \t\t\treturn new type( array ); // create typed array\n\n    \t\t}\n\n    \t\treturn Array.prototype.slice.call( array ); // create Array\n\n    \t},\n\n    \tisTypedArray: function( object ) {\n\n    \t\treturn ArrayBuffer.isView( object ) &&\n    \t\t\t\t! ( object instanceof DataView );\n\n    \t},\n\n    \t// returns an array by which times and values can be sorted\n    \tgetKeyframeOrder: function( times ) {\n\n    \t\tfunction compareTime( i, j ) {\n\n    \t\t\treturn times[ i ] - times[ j ];\n\n    \t\t}\n\n    \t\tvar n = times.length;\n    \t\tvar result = new Array( n );\n    \t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n    \t\tresult.sort( compareTime );\n\n    \t\treturn result;\n\n    \t},\n\n    \t// uses the array previously returned by 'getKeyframeOrder' to sort data\n    \tsortedArray: function( values, stride, order ) {\n\n    \t\tvar nValues = values.length;\n    \t\tvar result = new values.constructor( nValues );\n\n    \t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n    \t\t\tvar srcOffset = order[ i ] * stride;\n\n    \t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n    \t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \t// function for parsing AOS keyframe formats\n    \tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\n    \t\tvar i = 1, key = jsonKeys[ 0 ];\n\n    \t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n    \t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t}\n\n    \t\tif ( key === undefined ) return; // no data\n\n    \t\tvar value = key[ valuePropertyName ];\n    \t\tif ( value === undefined ) return; // no data\n\n    \t\tif ( Array.isArray( value ) ) {\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t} else if ( value.toArray !== undefined ) {\n    \t\t\t// ...assume THREE.Math-ish\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalue.toArray( values, values.length );\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t} else {\n    \t\t\t// otherwise push as-is\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalues.push( value );\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     * Abstract base class of interpolants over parametric samples.\n     *\n     * The parameter domain is one dimensional, typically the time or a path\n     * along a curve defined by the data.\n     *\n     * The sample values can have any dimensionality and derived classes may\n     * apply special interpretations to the data.\n     *\n     * This class provides the interval seek in a Template Method, deferring\n     * the actual interpolation to derived classes.\n     *\n     * Time complexity is O(1) for linear access crossing at most two points\n     * and O(log N) for random access, where N is the number of positions.\n     *\n     * References:\n     *\n     * \t\thttp://www.oodesign.com/template-method-pattern.html\n     *\n     * @author tschw\n     */\n\n    function Interpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tthis.parameterPositions = parameterPositions;\n    \tthis._cachedIndex = 0;\n\n    \tthis.resultBuffer = resultBuffer !== undefined ?\n    \t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n    \tthis.sampleValues = sampleValues;\n    \tthis.valueSize = sampleSize;\n\n    }\n\n    Interpolant.prototype = {\n\n    \tconstructor: Interpolant,\n\n    \tevaluate: function( t ) {\n\n    \t\tvar pp = this.parameterPositions,\n    \t\t\ti1 = this._cachedIndex,\n\n    \t\t\tt1 = pp[   i1   ],\n    \t\t\tt0 = pp[ i1 - 1 ];\n\n    \t\tvalidate_interval: {\n\n    \t\t\tseek: {\n\n    \t\t\t\tvar right;\n\n    \t\t\t\tlinear_scan: {\n    //- See http://jsperf.com/comparison-to-undefined/3\n    //- slower code:\n    //-\n    //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n    \t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n    \t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\n    \t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n    \t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n    \t\t\t\t\t\t\t\t// after end\n\n    \t\t\t\t\t\t\t\ti1 = pp.length;\n    \t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n    \t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n    \t\t\t\t\t\t\tt0 = t1;\n    \t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n    \t\t\t\t\t\t\tif ( t < t1 ) {\n\n    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n    \t\t\t\t\t\t\t\tbreak seek;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// prepare binary search on the right side of the index\n    \t\t\t\t\t\tright = pp.length;\n    \t\t\t\t\t\tbreak linear_scan;\n\n    \t\t\t\t\t}\n\n    //- slower code:\n    //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n    \t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n    \t\t\t\t\t\t// looping?\n\n    \t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n    \t\t\t\t\t\tif ( t < t1global ) {\n\n    \t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n    \t\t\t\t\t\t\tt0 = t1global;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// linear reverse scan\n\n    \t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\n    \t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n    \t\t\t\t\t\t\t\t// before start\n\n    \t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n    \t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n    \t\t\t\t\t\t\tt1 = t0;\n    \t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n    \t\t\t\t\t\t\tif ( t >= t0 ) {\n\n    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n    \t\t\t\t\t\t\t\tbreak seek;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// prepare binary search on the left side of the index\n    \t\t\t\t\t\tright = i1;\n    \t\t\t\t\t\ti1 = 0;\n    \t\t\t\t\t\tbreak linear_scan;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// the interval is valid\n\n    \t\t\t\t\tbreak validate_interval;\n\n    \t\t\t\t} // linear scan\n\n    \t\t\t\t// binary search\n\n    \t\t\t\twhile ( i1 < right ) {\n\n    \t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n    \t\t\t\t\tif ( t < pp[ mid ] ) {\n\n    \t\t\t\t\t\tright = mid;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\ti1 = mid + 1;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tt1 = pp[   i1   ];\n    \t\t\t\tt0 = pp[ i1 - 1 ];\n\n    \t\t\t\t// check boundary cases, again\n\n    \t\t\t\tif ( t0 === undefined ) {\n\n    \t\t\t\t\tthis._cachedIndex = 0;\n    \t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( t1 === undefined ) {\n\n    \t\t\t\t\ti1 = pp.length;\n    \t\t\t\t\tthis._cachedIndex = i1;\n    \t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n    \t\t\t\t}\n\n    \t\t\t} // seek\n\n    \t\t\tthis._cachedIndex = i1;\n\n    \t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n    \t\t} // validate_interval\n\n    \t\treturn this.interpolate_( i1, t0, t, t1 );\n\n    \t},\n\n    \tsettings: null, // optional, subclass-specific settings structure\n    \t// Note: The indirection allows central control of many interpolants.\n\n    \t// --- Protected interface\n\n    \tDefaultSettings_: {},\n\n    \tgetSettings_: function() {\n\n    \t\treturn this.settings || this.DefaultSettings_;\n\n    \t},\n\n    \tcopySampleValue_: function( index ) {\n\n    \t\t// copies a sample value to the result buffer\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n    \t\t\toffset = index * stride;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] = values[ offset + i ];\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \t// Template methods for derived classes:\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tthrow new Error( \"call to abstract method\" );\n    \t\t// implementations shall return this.resultBuffer\n\n    \t},\n\n    \tintervalChanged_: function( i1, t0, t1 ) {\n\n    \t\t// empty\n\n    \t}\n\n    };\n\n    Object.assign( Interpolant.prototype, {\n\n    \tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n    \t\tInterpolant.prototype.copySampleValue_,\n\n    \tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n    \t\tInterpolant.prototype.copySampleValue_\n\n    } );\n\n    /**\n     * Fast and simple cubic spline interpolant.\n     *\n     * It was derived from a Hermitian construction setting the first derivative\n     * at each sample position to the linear slope between neighboring positions\n     * over their parameter interval.\n     *\n     * @author tschw\n     */\n\n    function CubicInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    \tthis._weightPrev = -0;\n    \tthis._offsetPrev = -0;\n    \tthis._weightNext = -0;\n    \tthis._offsetNext = -0;\n\n    }\n\n    CubicInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: CubicInterpolant,\n\n    \tDefaultSettings_: {\n\n    \t\tendingStart: \tZeroCurvatureEnding,\n    \t\tendingEnd:\t\tZeroCurvatureEnding\n\n    \t},\n\n    \tintervalChanged_: function( i1, t0, t1 ) {\n\n    \t\tvar pp = this.parameterPositions,\n    \t\t\tiPrev = i1 - 2,\n    \t\t\tiNext = i1 + 1,\n\n    \t\t\ttPrev = pp[ iPrev ],\n    \t\t\ttNext = pp[ iNext ];\n\n    \t\tif ( tPrev === undefined ) {\n\n    \t\t\tswitch ( this.getSettings_().endingStart ) {\n\n    \t\t\t\tcase ZeroSlopeEnding:\n\n    \t\t\t\t\t// f'(t0) = 0\n    \t\t\t\t\tiPrev = i1;\n    \t\t\t\t\ttPrev = 2 * t0 - t1;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase WrapAroundEnding:\n\n    \t\t\t\t\t// use the other end of the curve\n    \t\t\t\t\tiPrev = pp.length - 2;\n    \t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault: // ZeroCurvatureEnding\n\n    \t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n    \t\t\t\t\tiPrev = i1;\n    \t\t\t\t\ttPrev = t1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( tNext === undefined ) {\n\n    \t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n    \t\t\t\tcase ZeroSlopeEnding:\n\n    \t\t\t\t\t// f'(tN) = 0\n    \t\t\t\t\tiNext = i1;\n    \t\t\t\t\ttNext = 2 * t1 - t0;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase WrapAroundEnding:\n\n    \t\t\t\t\t// use the other end of the curve\n    \t\t\t\t\tiNext = 1;\n    \t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault: // ZeroCurvatureEnding\n\n    \t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n    \t\t\t\t\tiNext = i1 - 1;\n    \t\t\t\t\ttNext = t0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar halfDt = ( t1 - t0 ) * 0.5,\n    \t\t\tstride = this.valueSize;\n\n    \t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n    \t\tthis._weightNext = halfDt / ( tNext - t1 );\n    \t\tthis._offsetPrev = iPrev * stride;\n    \t\tthis._offsetNext = iNext * stride;\n\n    \t},\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n    \t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n    \t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n    \t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n    \t\t\tpp = p * p,\n    \t\t\tppp = pp * p;\n\n    \t\t// evaluate polynomials\n\n    \t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n    \t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n    \t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n    \t\tvar sN =       wN   * ppp   -           wN      * pp;\n\n    \t\t// combine data linearly\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] =\n    \t\t\t\t\tsP * values[ oP + i ] +\n    \t\t\t\t\ts0 * values[ o0 + i ] +\n    \t\t\t\t\ts1 * values[ o1 + i ] +\n    \t\t\t\t\tsN * values[ oN + i ];\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     * @author tschw\n     */\n\n    function LinearInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    LinearInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: LinearInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toffset1 = i1 * stride,\n    \t\t\toffset0 = offset1 - stride,\n\n    \t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n    \t\t\tweight0 = 1 - weight1;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] =\n    \t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n    \t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Interpolant that evaluates to the sample value at the position preceeding\n     * the parameter.\n     *\n     * @author tschw\n     */\n\n    function DiscreteInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    DiscreteInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: DiscreteInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\treturn this.copySampleValue_( i1 - 1 );\n\n    \t}\n\n    } );\n\n    var KeyframeTrackPrototype;\n\n    KeyframeTrackPrototype = {\n\n    \tTimeBufferType: Float32Array,\n    \tValueBufferType: Float32Array,\n\n    \tDefaultInterpolation: InterpolateLinear,\n\n    \tInterpolantFactoryMethodDiscrete: function( result ) {\n\n    \t\treturn new DiscreteInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodLinear: function( result ) {\n\n    \t\treturn new LinearInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodSmooth: function( result ) {\n\n    \t\treturn new CubicInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tsetInterpolation: function( interpolation ) {\n\n    \t\tvar factoryMethod;\n\n    \t\tswitch ( interpolation ) {\n\n    \t\t\tcase InterpolateDiscrete:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n    \t\t\t\tbreak;\n\n    \t\t\tcase InterpolateLinear:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n    \t\t\t\tbreak;\n\n    \t\t\tcase InterpolateSmooth:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tif ( factoryMethod === undefined ) {\n\n    \t\t\tvar message = \"unsupported interpolation for \" +\n    \t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n    \t\t\tif ( this.createInterpolant === undefined ) {\n\n    \t\t\t\t// fall back to default, unless the default itself is messed up\n    \t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n    \t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tconsole.warn( message );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.createInterpolant = factoryMethod;\n\n    \t},\n\n    \tgetInterpolation: function() {\n\n    \t\tswitch ( this.createInterpolant ) {\n\n    \t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n    \t\t\t\treturn InterpolateDiscrete;\n\n    \t\t\tcase this.InterpolantFactoryMethodLinear:\n\n    \t\t\t\treturn InterpolateLinear;\n\n    \t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n    \t\t\t\treturn InterpolateSmooth;\n\n    \t\t}\n\n    \t},\n\n    \tgetValueSize: function() {\n\n    \t\treturn this.values.length / this.times.length;\n\n    \t},\n\n    \t// move all keyframes either forwards or backwards in time\n    \tshift: function( timeOffset ) {\n\n    \t\tif( timeOffset !== 0.0 ) {\n\n    \t\t\tvar times = this.times;\n\n    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n    \t\t\t\ttimes[ i ] += timeOffset;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n    \tscale: function( timeScale ) {\n\n    \t\tif( timeScale !== 1.0 ) {\n\n    \t\t\tvar times = this.times;\n\n    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n    \t\t\t\ttimes[ i ] *= timeScale;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n    \t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n    \ttrim: function( startTime, endTime ) {\n\n    \t\tvar times = this.times,\n    \t\t\tnKeys = times.length,\n    \t\t\tfrom = 0,\n    \t\t\tto = nKeys - 1;\n\n    \t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n    \t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\n    \t\t++ to; // inclusive -> exclusive bound\n\n    \t\tif( from !== 0 || to !== nKeys ) {\n\n    \t\t\t// empty tracks are forbidden, so keep at least one keyframe\n    \t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\n    \t\t\tvar stride = this.getValueSize();\n    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, from, to );\n    \t\t\tthis.values = exports.AnimationUtils.\n    \t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n    \tvalidate: function() {\n\n    \t\tvar valid = true;\n\n    \t\tvar valueSize = this.getValueSize();\n    \t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n    \t\t\tconsole.error( \"invalid value size in track\", this );\n    \t\t\tvalid = false;\n\n    \t\t}\n\n    \t\tvar times = this.times,\n    \t\t\tvalues = this.values,\n\n    \t\t\tnKeys = times.length;\n\n    \t\tif( nKeys === 0 ) {\n\n    \t\t\tconsole.error( \"track is empty\", this );\n    \t\t\tvalid = false;\n\n    \t\t}\n\n    \t\tvar prevTime = null;\n\n    \t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\n    \t\t\tvar currTime = times[ i ];\n\n    \t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n    \t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n    \t\t\t\tvalid = false;\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tif( prevTime !== null && prevTime > currTime ) {\n\n    \t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n    \t\t\t\tvalid = false;\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tprevTime = currTime;\n\n    \t\t}\n\n    \t\tif ( values !== undefined ) {\n\n    \t\t\tif ( exports.AnimationUtils.isTypedArray( values ) ) {\n\n    \t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tvar value = values[ i ];\n\n    \t\t\t\t\tif ( isNaN( value ) ) {\n\n    \t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n    \t\t\t\t\t\tvalid = false;\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn valid;\n\n    \t},\n\n    \t// removes equivalent sequential keys as common in morph target sequences\n    \t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n    \toptimize: function() {\n\n    \t\tvar times = this.times,\n    \t\t\tvalues = this.values,\n    \t\t\tstride = this.getValueSize(),\n\n    \t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n    \t\t\twriteIndex = 1,\n    \t\t\tlastIndex = times.length - 1;\n\n    \t\tfor( var i = 1; i < lastIndex; ++ i ) {\n\n    \t\t\tvar keep = false;\n\n    \t\t\tvar time = times[ i ];\n    \t\t\tvar timeNext = times[ i + 1 ];\n\n    \t\t\t// remove adjacent keyframes scheduled at the same time\n\n    \t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n    \t\t\t\tif ( ! smoothInterpolation ) {\n\n    \t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n    \t\t\t\t\tvar offset = i * stride,\n    \t\t\t\t\t\toffsetP = offset - stride,\n    \t\t\t\t\t\toffsetN = offset + stride;\n\n    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n    \t\t\t\t\t\tvar value = values[ offset + j ];\n\n    \t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n    \t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n    \t\t\t\t\t\t\tkeep = true;\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else keep = true;\n\n    \t\t\t}\n\n    \t\t\t// in-place compaction\n\n    \t\t\tif ( keep ) {\n\n    \t\t\t\tif ( i !== writeIndex ) {\n\n    \t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n    \t\t\t\t\tvar readOffset = i * stride,\n    \t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j )\n\n    \t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n    \t\t\t\t}\n\n    \t\t\t\t++ writeIndex;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// flush last keyframe (compaction looks ahead)\n\n    \t\tif ( lastIndex > 0 ) {\n\n    \t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n    \t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )\n\n    \t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n    \t\t\t++ writeIndex;\n\n    \t\t}\n\n    \t\tif ( writeIndex !== times.length ) {\n\n    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, 0, writeIndex );\n    \t\t\tthis.values = exports.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    }\n\n    function KeyframeTrackConstructor( name, times, values, interpolation ) {\n\n    \tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\n    \tif( times === undefined || times.length === 0 ) {\n\n    \t\tthrow new Error( \"no keyframes in track named \" + name );\n\n    \t}\n\n    \tthis.name = name;\n\n    \tthis.times = exports.AnimationUtils.convertArray( times, this.TimeBufferType );\n    \tthis.values = exports.AnimationUtils.convertArray( values, this.ValueBufferType );\n\n    \tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n    \tthis.validate();\n    \tthis.optimize();\n\n    }\n\n    /**\n     *\n     * A Track of vectored keyframe values.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function VectorKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    VectorKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: VectorKeyframeTrack,\n\n    \tValueTypeName: 'vector'\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n    } );\n\n    /**\n     * Spherical linear unit quaternion interpolant.\n     *\n     * @author tschw\n     */\n\n    function QuaternionLinearInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    QuaternionLinearInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: QuaternionLinearInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toffset = i1 * stride,\n\n    \t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n    \t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n    \t\t\tQuaternion.slerpFlat( result, 0,\n    \t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * A Track of quaternion keyframe values.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    QuaternionKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: QuaternionKeyframeTrack,\n\n    \tValueTypeName: 'quaternion',\n\n    \t// ValueBufferType is inherited\n\n    \tDefaultInterpolation: InterpolateLinear,\n\n    \tInterpolantFactoryMethodLinear: function( result ) {\n\n    \t\treturn new QuaternionLinearInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n    } );\n\n    /**\n     *\n     * A Track of numeric keyframe values.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function NumberKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    NumberKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: NumberKeyframeTrack,\n\n    \tValueTypeName: 'number',\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n    } );\n\n    /**\n     *\n     * A Track that interpolates Strings\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function StringKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    StringKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: StringKeyframeTrack,\n\n    \tValueTypeName: 'string',\n    \tValueBufferType: Array,\n\n    \tDefaultInterpolation: InterpolateDiscrete,\n\n    \tInterpolantFactoryMethodLinear: undefined,\n\n    \tInterpolantFactoryMethodSmooth: undefined\n\n    } );\n\n    /**\n     *\n     * A Track of Boolean keyframe values.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function BooleanKeyframeTrack( name, times, values ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values );\n\n    }\n\n    BooleanKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: BooleanKeyframeTrack,\n\n    \tValueTypeName: 'bool',\n    \tValueBufferType: Array,\n\n    \tDefaultInterpolation: InterpolateDiscrete,\n\n    \tInterpolantFactoryMethodLinear: undefined,\n    \tInterpolantFactoryMethodSmooth: undefined\n\n    \t// Note: Actually this track could have a optimized / compressed\n    \t// representation of a single value and a custom interpolant that\n    \t// computes \"firstValue ^ isOdd( index )\".\n\n    } );\n\n    /**\n     *\n     * A Track of keyframe values that represent color.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function ColorKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    ColorKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: ColorKeyframeTrack,\n\n    \tValueTypeName: 'color'\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n\n    \t// Note: Very basic implementation and nothing special yet.\n    \t// However, this is the place for color space parameterization.\n\n    } );\n\n    /**\n     *\n     * A timed sequence of keyframes for a specific property.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function KeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.apply( this, arguments );\n\n    }\n\n    KeyframeTrack.prototype = KeyframeTrackPrototype;\n    KeyframeTrackPrototype.constructor = KeyframeTrack;\n\n    // Static methods:\n\n    Object.assign( KeyframeTrack, {\n\n    \t// Serialization (in static context, because of constructor invocation\n    \t// and automatic invocation of .toJSON):\n\n    \tparse: function( json ) {\n\n    \t\tif( json.type === undefined ) {\n\n    \t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\n    \t\t}\n\n    \t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n    \t\tif ( json.times === undefined ) {\n\n    \t\t\tvar times = [], values = [];\n\n    \t\t\texports.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n    \t\t\tjson.times = times;\n    \t\t\tjson.values = values;\n\n    \t\t}\n\n    \t\t// derived classes can define a static parse method\n    \t\tif ( trackType.parse !== undefined ) {\n\n    \t\t\treturn trackType.parse( json );\n\n    \t\t} else {\n\n    \t\t\t// by default, we asssume a constructor compatible with the base\n    \t\t\treturn new trackType(\n    \t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function( track ) {\n\n    \t\tvar trackType = track.constructor;\n\n    \t\tvar json;\n\n    \t\t// derived classes can define a static toJSON method\n    \t\tif ( trackType.toJSON !== undefined ) {\n\n    \t\t\tjson = trackType.toJSON( track );\n\n    \t\t} else {\n\n    \t\t\t// by default, we assume the data can be serialized as-is\n    \t\t\tjson = {\n\n    \t\t\t\t'name': track.name,\n    \t\t\t\t'times': exports.AnimationUtils.convertArray( track.times, Array ),\n    \t\t\t\t'values': exports.AnimationUtils.convertArray( track.values, Array )\n\n    \t\t\t};\n\n    \t\t\tvar interpolation = track.getInterpolation();\n\n    \t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n    \t\t\t\tjson.interpolation = interpolation;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tjson.type = track.ValueTypeName; // mandatory\n\n    \t\treturn json;\n\n    \t},\n\n    \t_getTrackTypeForValueTypeName: function( typeName ) {\n\n    \t\tswitch( typeName.toLowerCase() ) {\n\n    \t\t\tcase \"scalar\":\n    \t\t\tcase \"double\":\n    \t\t\tcase \"float\":\n    \t\t\tcase \"number\":\n    \t\t\tcase \"integer\":\n\n    \t\t\t\treturn NumberKeyframeTrack;\n\n    \t\t\tcase \"vector\":\n    \t\t\tcase \"vector2\":\n    \t\t\tcase \"vector3\":\n    \t\t\tcase \"vector4\":\n\n    \t\t\t\treturn VectorKeyframeTrack;\n\n    \t\t\tcase \"color\":\n\n    \t\t\t\treturn ColorKeyframeTrack;\n\n    \t\t\tcase \"quaternion\":\n\n    \t\t\t\treturn QuaternionKeyframeTrack;\n\n    \t\t\tcase \"bool\":\n    \t\t\tcase \"boolean\":\n\n    \t\t\t\treturn BooleanKeyframeTrack;\n\n    \t\t\tcase \"string\":\n\n    \t\t\t\treturn StringKeyframeTrack;\n\n    \t\t}\n\n    \t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Reusable set of Tracks that represent an animation.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     */\n\n    function AnimationClip( name, duration, tracks ) {\n\n    \tthis.name = name;\n    \tthis.tracks = tracks;\n    \tthis.duration = ( duration !== undefined ) ? duration : -1;\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \t// this means it should figure out its duration by scanning the tracks\n    \tif ( this.duration < 0 ) {\n\n    \t\tthis.resetDuration();\n\n    \t}\n\n    \tthis.optimize();\n\n    }\n\n    AnimationClip.prototype = {\n\n    \tconstructor: AnimationClip,\n\n    \tresetDuration: function() {\n\n    \t\tvar tracks = this.tracks,\n    \t\t\tduration = 0;\n\n    \t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n    \t\t\tvar track = this.tracks[ i ];\n\n    \t\t\tduration = Math.max(\n    \t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\n    \t\t}\n\n    \t\tthis.duration = duration;\n\n    \t},\n\n    \ttrim: function() {\n\n    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n    \t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \toptimize: function() {\n\n    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n    \t\t\tthis.tracks[ i ].optimize();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    // Static methods:\n\n    Object.assign( AnimationClip, {\n\n    \tparse: function( json ) {\n\n    \t\tvar tracks = [],\n    \t\t\tjsonTracks = json.tracks,\n    \t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n    \t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n    \t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n    \t\t}\n\n    \t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n    \t},\n\n\n    \ttoJSON: function( clip ) {\n\n    \t\tvar tracks = [],\n    \t\t\tclipTracks = clip.tracks;\n\n    \t\tvar json = {\n\n    \t\t\t'name': clip.name,\n    \t\t\t'duration': clip.duration,\n    \t\t\t'tracks': tracks\n\n    \t\t};\n\n    \t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n    \t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n    \t\t}\n\n    \t\treturn json;\n\n    \t},\n\n\n    \tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\n    \t\tvar numMorphTargets = morphTargetSequence.length;\n    \t\tvar tracks = [];\n\n    \t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n    \t\t\tvar times = [];\n    \t\t\tvar values = [];\n\n    \t\t\ttimes.push(\n    \t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n    \t\t\t\t\ti,\n    \t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n    \t\t\tvalues.push( 0, 1, 0 );\n\n    \t\t\tvar order = exports.AnimationUtils.getKeyframeOrder( times );\n    \t\t\ttimes = exports.AnimationUtils.sortedArray( times, 1, order );\n    \t\t\tvalues = exports.AnimationUtils.sortedArray( values, 1, order );\n\n    \t\t\t// if there is a key at the first frame, duplicate it as the\n    \t\t\t// last frame as well for perfect loop.\n    \t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n    \t\t\t\ttimes.push( numMorphTargets );\n    \t\t\t\tvalues.push( values[ 0 ] );\n\n    \t\t\t}\n\n    \t\t\ttracks.push(\n    \t\t\t\t\tnew NumberKeyframeTrack(\n    \t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n    \t\t\t\t\t\ttimes, values\n    \t\t\t\t\t).scale( 1.0 / fps ) );\n    \t\t}\n\n    \t\treturn new AnimationClip( name, -1, tracks );\n\n    \t},\n\n    \tfindByName: function( objectOrClipArray, name ) {\n\n    \t\tvar clipArray = objectOrClipArray;\n\n    \t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n    \t\t\tvar o = objectOrClipArray;\n    \t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n    \t\t\tif ( clipArray[ i ].name === name ) {\n\n    \t\t\t\treturn clipArray[ i ];\n\n    \t\t\t}\n    \t\t}\n\n    \t\treturn null;\n\n    \t},\n\n    \tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\n    \t\tvar animationToMorphTargets = {};\n\n    \t\t// tested with https://regex101.com/ on trick sequences\n    \t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n    \t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n    \t\t// sort morph target names into animation groups based\n    \t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n    \t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n    \t\t\tvar morphTarget = morphTargets[ i ];\n    \t\t\tvar parts = morphTarget.name.match( pattern );\n\n    \t\t\tif ( parts && parts.length > 1 ) {\n\n    \t\t\t\tvar name = parts[ 1 ];\n\n    \t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n    \t\t\t\tif ( ! animationMorphTargets ) {\n\n    \t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n    \t\t\t\t}\n\n    \t\t\t\tanimationMorphTargets.push( morphTarget );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar clips = [];\n\n    \t\tfor ( var name in animationToMorphTargets ) {\n\n    \t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n    \t\t}\n\n    \t\treturn clips;\n\n    \t},\n\n    \t// parse the animation.hierarchy format\n    \tparseAnimation: function( animation, bones ) {\n\n    \t\tif ( ! animation ) {\n\n    \t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar addNonemptyTrack = function(\n    \t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\n    \t\t\t// only return track if there are actually keys.\n    \t\t\tif ( animationKeys.length !== 0 ) {\n\n    \t\t\t\tvar times = [];\n    \t\t\t\tvar values = [];\n\n    \t\t\t\texports.AnimationUtils.flattenJSON(\n    \t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\n    \t\t\t\t// empty keys are filtered out, so check again\n    \t\t\t\tif ( times.length !== 0 ) {\n\n    \t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t\tvar tracks = [];\n\n    \t\tvar clipName = animation.name || 'default';\n    \t\t// automatic length determination in AnimationClip.\n    \t\tvar duration = animation.length || -1;\n    \t\tvar fps = animation.fps || 30;\n\n    \t\tvar hierarchyTracks = animation.hierarchy || [];\n\n    \t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n    \t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n    \t\t\t// skip empty tracks\n    \t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n    \t\t\t// process morph targets in a way exactly compatible\n    \t\t\t// with AnimationHandler.init( animation )\n    \t\t\tif ( animationKeys[0].morphTargets ) {\n\n    \t\t\t\t// figure out all morph targets used in this track\n    \t\t\t\tvar morphTargetNames = {};\n    \t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n    \t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\n    \t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\n    \t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\t// create a track for each morph target with all zero\n    \t\t\t\t// morphTargetInfluences except for the keys in which\n    \t\t\t\t// the morphTarget is named.\n    \t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n    \t\t\t\t\tvar times = [];\n    \t\t\t\t\tvar values = [];\n\n    \t\t\t\t\tfor ( var m = 0;\n    \t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\n    \t\t\t\t\t\tvar animationKey = animationKeys[k];\n\n    \t\t\t\t\t\ttimes.push( animationKey.time );\n    \t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttracks.push( new NumberKeyframeTrack(\n    \t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n    \t\t\t\t}\n\n    \t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n    \t\t\t} else {\n    \t\t\t\t// ...assume skeletal animation\n\n    \t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n    \t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n    \t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n    \t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( tracks.length === 0 ) {\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n    \t\treturn clip;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function MaterialLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n    \tthis.textures = {};\n\n    }\n\n    Object.assign( MaterialLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTextures: function ( value ) {\n\n    \t\tthis.textures = value;\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\tvar textures = this.textures;\n\n    \t\tfunction getTexture( name ) {\n\n    \t\t\tif ( textures[ name ] === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n    \t\t\t}\n\n    \t\t\treturn textures[ name ];\n\n    \t\t}\n\n    \t\tvar material = new Materials[ json.type ]();\n\n    \t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n    \t\tif ( json.name !== undefined ) material.name = json.name;\n    \t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n    \t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n    \t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n    \t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n    \t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n    \t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n    \t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n    \t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n    \t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n    \t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n    \t\tif ( json.fog !== undefined ) material.fog = json.fog;\n    \t\tif ( json.shading !== undefined ) material.shading = json.shading;\n    \t\tif ( json.blending !== undefined ) material.blending = json.blending;\n    \t\tif ( json.side !== undefined ) material.side = json.side;\n    \t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n    \t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n    \t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n    \t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n    \t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n    \t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n    \t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n    \t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n    \t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n    \t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n    \t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n    \t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\n    \t\t// for PointsMaterial\n\n    \t\tif ( json.size !== undefined ) material.size = json.size;\n    \t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n    \t\t// maps\n\n    \t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\n    \t\tif ( json.alphaMap !== undefined ) {\n\n    \t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n    \t\t\tmaterial.transparent = true;\n\n    \t\t}\n\n    \t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n    \t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n    \t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n    \t\tif ( json.normalScale !== undefined ) {\n\n    \t\t\tvar normalScale = json.normalScale;\n\n    \t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n    \t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n    \t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n    \t\t\t}\n\n    \t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n    \t\t}\n\n    \t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n    \t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n    \t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n    \t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n    \t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n    \t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n    \t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n    \t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n    \t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\n    \t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n    \t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n    \t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n    \t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n    \t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n    \t\t// MultiMaterial\n\n    \t\tif ( json.materials !== undefined ) {\n\n    \t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n    \t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn material;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferGeometryLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( BufferGeometryLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\tvar geometry = new BufferGeometry();\n\n    \t\tvar index = json.data.index;\n\n    \t\tvar TYPED_ARRAYS = {\n    \t\t\t'Int8Array': Int8Array,\n    \t\t\t'Uint8Array': Uint8Array,\n    \t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n    \t\t\t'Int16Array': Int16Array,\n    \t\t\t'Uint16Array': Uint16Array,\n    \t\t\t'Int32Array': Int32Array,\n    \t\t\t'Uint32Array': Uint32Array,\n    \t\t\t'Float32Array': Float32Array,\n    \t\t\t'Float64Array': Float64Array\n    \t\t};\n\n    \t\tif ( index !== undefined ) {\n\n    \t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n    \t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n    \t\t}\n\n    \t\tvar attributes = json.data.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tvar attribute = attributes[ key ];\n    \t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n    \t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n    \t\t}\n\n    \t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n    \t\tif ( groups !== undefined ) {\n\n    \t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar group = groups[ i ];\n\n    \t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar boundingSphere = json.data.boundingSphere;\n\n    \t\tif ( boundingSphere !== undefined ) {\n\n    \t\t\tvar center = new Vector3();\n\n    \t\t\tif ( boundingSphere.center !== undefined ) {\n\n    \t\t\t\tcenter.fromArray( boundingSphere.center );\n\n    \t\t\t}\n\n    \t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Loader() {\n\n    \tthis.onLoadStart = function () {};\n    \tthis.onLoadProgress = function () {};\n    \tthis.onLoadComplete = function () {};\n\n    }\n\n    Loader.prototype = {\n\n    \tconstructor: Loader,\n\n    \tcrossOrigin: undefined,\n\n    \textractUrlBase: function ( url ) {\n\n    \t\tvar parts = url.split( '/' );\n\n    \t\tif ( parts.length === 1 ) return './';\n\n    \t\tparts.pop();\n\n    \t\treturn parts.join( '/' ) + '/';\n\n    \t},\n\n    \tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n    \t\tvar array = [];\n\n    \t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n    \t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n    \t\t}\n\n    \t\treturn array;\n\n    \t},\n\n    \tcreateMaterial: ( function () {\n\n    \t\tvar color, textureLoader, materialLoader;\n\n    \t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n    \t\t\tif ( color === undefined ) color = new Color();\n    \t\t\tif ( textureLoader === undefined ) textureLoader = new TextureLoader();\n    \t\t\tif ( materialLoader === undefined ) materialLoader = new MaterialLoader();\n\n    \t\t\t// convert from old material format\n\n    \t\t\tvar textures = {};\n\n    \t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n    \t\t\t\tvar fullPath = texturePath + path;\n    \t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n    \t\t\t\tvar texture;\n\n    \t\t\t\tif ( loader !== null ) {\n\n    \t\t\t\t\ttexture = loader.load( fullPath );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n    \t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( repeat !== undefined ) {\n\n    \t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n    \t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n    \t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( offset !== undefined ) {\n\n    \t\t\t\t\ttexture.offset.fromArray( offset );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( wrap !== undefined ) {\n\n    \t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n    \t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n    \t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n    \t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( anisotropy !== undefined ) {\n\n    \t\t\t\t\ttexture.anisotropy = anisotropy;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar uuid = exports.Math.generateUUID();\n\n    \t\t\t\ttextures[ uuid ] = texture;\n\n    \t\t\t\treturn uuid;\n\n    \t\t\t}\n\n    \t\t\t//\n\n    \t\t\tvar json = {\n    \t\t\t\tuuid: exports.Math.generateUUID(),\n    \t\t\t\ttype: 'MeshLambertMaterial'\n    \t\t\t};\n\n    \t\t\tfor ( var name in m ) {\n\n    \t\t\t\tvar value = m[ name ];\n\n    \t\t\t\tswitch ( name ) {\n    \t\t\t\t\tcase 'DbgColor':\n    \t\t\t\t\tcase 'DbgIndex':\n    \t\t\t\t\tcase 'opticalDensity':\n    \t\t\t\t\tcase 'illumination':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'DbgName':\n    \t\t\t\t\t\tjson.name = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'blending':\n    \t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorAmbient':\n    \t\t\t\t\tcase 'mapAmbient':\n    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorDiffuse':\n    \t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorSpecular':\n    \t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorEmissive':\n    \t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'specularCoef':\n    \t\t\t\t\t\tjson.shininess = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'shading':\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapDiffuse':\n    \t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapDiffuseRepeat':\n    \t\t\t\t\tcase 'mapDiffuseOffset':\n    \t\t\t\t\tcase 'mapDiffuseWrap':\n    \t\t\t\t\tcase 'mapDiffuseAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapEmissive':\n    \t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapEmissiveRepeat':\n    \t\t\t\t\tcase 'mapEmissiveOffset':\n    \t\t\t\t\tcase 'mapEmissiveWrap':\n    \t\t\t\t\tcase 'mapEmissiveAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapLight':\n    \t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapLightRepeat':\n    \t\t\t\t\tcase 'mapLightOffset':\n    \t\t\t\t\tcase 'mapLightWrap':\n    \t\t\t\t\tcase 'mapLightAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAO':\n    \t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAORepeat':\n    \t\t\t\t\tcase 'mapAOOffset':\n    \t\t\t\t\tcase 'mapAOWrap':\n    \t\t\t\t\tcase 'mapAOAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBump':\n    \t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBumpScale':\n    \t\t\t\t\t\tjson.bumpScale = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBumpRepeat':\n    \t\t\t\t\tcase 'mapBumpOffset':\n    \t\t\t\t\tcase 'mapBumpWrap':\n    \t\t\t\t\tcase 'mapBumpAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormal':\n    \t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormalFactor':\n    \t\t\t\t\t\tjson.normalScale = [ value, value ];\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormalRepeat':\n    \t\t\t\t\tcase 'mapNormalOffset':\n    \t\t\t\t\tcase 'mapNormalWrap':\n    \t\t\t\t\tcase 'mapNormalAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapSpecular':\n    \t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapSpecularRepeat':\n    \t\t\t\t\tcase 'mapSpecularOffset':\n    \t\t\t\t\tcase 'mapSpecularWrap':\n    \t\t\t\t\tcase 'mapSpecularAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapMetalness':\n    \t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapMetalnessRepeat':\n    \t\t\t\t\tcase 'mapMetalnessOffset':\n    \t\t\t\t\tcase 'mapMetalnessWrap':\n    \t\t\t\t\tcase 'mapMetalnessAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapRoughness':\n    \t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapRoughnessRepeat':\n    \t\t\t\t\tcase 'mapRoughnessOffset':\n    \t\t\t\t\tcase 'mapRoughnessWrap':\n    \t\t\t\t\tcase 'mapRoughnessAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAlpha':\n    \t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAlphaRepeat':\n    \t\t\t\t\tcase 'mapAlphaOffset':\n    \t\t\t\t\tcase 'mapAlphaWrap':\n    \t\t\t\t\tcase 'mapAlphaAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'flipSided':\n    \t\t\t\t\t\tjson.side = BackSide;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'doubleSided':\n    \t\t\t\t\t\tjson.side = DoubleSide;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'transparency':\n    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n    \t\t\t\t\t\tjson.opacity = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'depthTest':\n    \t\t\t\t\tcase 'depthWrite':\n    \t\t\t\t\tcase 'colorWrite':\n    \t\t\t\t\tcase 'opacity':\n    \t\t\t\t\tcase 'reflectivity':\n    \t\t\t\t\tcase 'transparent':\n    \t\t\t\t\tcase 'visible':\n    \t\t\t\t\tcase 'wireframe':\n    \t\t\t\t\t\tjson[ name ] = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'vertexColors':\n    \t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n    \t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tdefault:\n    \t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n    \t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n    \t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n    \t\t\tmaterialLoader.setTextures( textures );\n\n    \t\t\treturn materialLoader.parse( json );\n\n    \t\t};\n\n    \t} )()\n\n    };\n\n    Loader.Handlers = {\n\n    \thandlers: [],\n\n    \tadd: function ( regex, loader ) {\n\n    \t\tthis.handlers.push( regex, loader );\n\n    \t},\n\n    \tget: function ( file ) {\n\n    \t\tvar handlers = this.handlers;\n\n    \t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n    \t\t\tvar regex = handlers[ i ];\n    \t\t\tvar loader  = handlers[ i + 1 ];\n\n    \t\t\tif ( regex.test( file ) ) {\n\n    \t\t\t\treturn loader;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function JSONLoader( manager ) {\n\n    \tif ( typeof manager === 'boolean' ) {\n\n    \t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n    \t\tmanager = undefined;\n\n    \t}\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \tthis.withCredentials = false;\n\n    }\n\n    Object.assign( JSONLoader.prototype, {\n\n    \tload: function( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setWithCredentials( this.withCredentials );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tvar json = JSON.parse( text );\n    \t\t\tvar metadata = json.metadata;\n\n    \t\t\tif ( metadata !== undefined ) {\n\n    \t\t\t\tvar type = metadata.type;\n\n    \t\t\t\tif ( type !== undefined ) {\n\n    \t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar object = scope.parse( json, texturePath );\n    \t\t\tonLoad( object.geometry, object.materials );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTexturePath: function ( value ) {\n\n    \t\tthis.texturePath = value;\n\n    \t},\n\n    \tparse: function ( json, texturePath ) {\n\n    \t\tvar geometry = new Geometry(),\n    \t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n    \t\tparseModel( scale );\n\n    \t\tparseSkin();\n    \t\tparseMorphing( scale );\n    \t\tparseAnimations();\n\n    \t\tgeometry.computeFaceNormals();\n    \t\tgeometry.computeBoundingSphere();\n\n    \t\tfunction parseModel( scale ) {\n\n    \t\t\tfunction isBitSet( value, position ) {\n\n    \t\t\t\treturn value & ( 1 << position );\n\n    \t\t\t}\n\n    \t\t\tvar i, j, fi,\n\n    \t\t\toffset, zLength,\n\n    \t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n    \t\t\ttype,\n    \t\t\tisQuad,\n    \t\t\thasMaterial,\n    \t\t\thasFaceVertexUv,\n    \t\t\thasFaceNormal, hasFaceVertexNormal,\n    \t\t\thasFaceColor, hasFaceVertexColor,\n\n    \t\tvertex, face, faceA, faceB, hex, normal,\n\n    \t\t\tuvLayer, uv, u, v,\n\n    \t\t\tfaces = json.faces,\n    \t\t\tvertices = json.vertices,\n    \t\t\tnormals = json.normals,\n    \t\t\tcolors = json.colors,\n\n    \t\t\tnUvLayers = 0;\n\n    \t\t\tif ( json.uvs !== undefined ) {\n\n    \t\t\t\t// disregard empty arrays\n\n    \t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n    \t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\toffset = 0;\n    \t\t\tzLength = vertices.length;\n\n    \t\t\twhile ( offset < zLength ) {\n\n    \t\t\t\tvertex = new Vector3();\n\n    \t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n    \t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n    \t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n    \t\t\t\tgeometry.vertices.push( vertex );\n\n    \t\t\t}\n\n    \t\t\toffset = 0;\n    \t\t\tzLength = faces.length;\n\n    \t\t\twhile ( offset < zLength ) {\n\n    \t\t\t\ttype = faces[ offset ++ ];\n\n\n    \t\t\t\tisQuad              = isBitSet( type, 0 );\n    \t\t\t\thasMaterial         = isBitSet( type, 1 );\n    \t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n    \t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n    \t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n    \t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n    \t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\n    \t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n    \t\t\t\tif ( isQuad ) {\n\n    \t\t\t\t\tfaceA = new Face3();\n    \t\t\t\t\tfaceA.a = faces[ offset ];\n    \t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n    \t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n    \t\t\t\t\tfaceB = new Face3();\n    \t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n    \t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n    \t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n    \t\t\t\t\toffset += 4;\n\n    \t\t\t\t\tif ( hasMaterial ) {\n\n    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n    \t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// to get face <=> uv index correspondence\n\n    \t\t\t\t\tfi = geometry.faces.length;\n\n    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n    \t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n    \t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n    \t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\tfaceA.normal.set(\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\t\tnormal = new Vector3(\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t\t);\n\n\n    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\thex = colors[ colorIndex ];\n\n    \t\t\t\t\t\tfaceA.color.setHex( hex );\n    \t\t\t\t\t\tfaceB.color.setHex( hex );\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tgeometry.faces.push( faceA );\n    \t\t\t\t\tgeometry.faces.push( faceB );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tface = new Face3();\n    \t\t\t\t\tface.a = faces[ offset ++ ];\n    \t\t\t\t\tface.b = faces[ offset ++ ];\n    \t\t\t\t\tface.c = faces[ offset ++ ];\n\n    \t\t\t\t\tif ( hasMaterial ) {\n\n    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tface.materialIndex = materialIndex;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// to get face <=> uv index correspondence\n\n    \t\t\t\t\tfi = geometry.faces.length;\n\n    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n    \t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n    \t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\tface.normal.set(\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\t\tnormal = new Vector3(\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t\t);\n\n    \t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tgeometry.faces.push( face );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseSkin() {\n\n    \t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n    \t\t\tif ( json.skinWeights ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n    \t\t\t\t\tvar x =                               json.skinWeights[ i ];\n    \t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n    \t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n    \t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n    \t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.skinIndices ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n    \t\t\t\t\tvar a =                               json.skinIndices[ i ];\n    \t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n    \t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n    \t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n    \t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tgeometry.bones = json.bones;\n\n    \t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n    \t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n    \t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseMorphing( scale ) {\n\n    \t\t\tif ( json.morphTargets !== undefined ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n    \t\t\t\t\tgeometry.morphTargets[ i ] = {};\n    \t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n    \t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n    \t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n    \t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n    \t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n    \t\t\t\t\t\tvar vertex = new Vector3();\n    \t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n    \t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n    \t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n    \t\t\t\t\t\tdstVertices.push( vertex );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n    \t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n    \t\t\t\tvar faces = geometry.faces;\n    \t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n    \t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseAnimations() {\n\n    \t\t\tvar outputAnimations = [];\n\n    \t\t\t// parse old style Bone/Hierarchy animations\n    \t\t\tvar animations = [];\n\n    \t\t\tif ( json.animation !== undefined ) {\n\n    \t\t\t\tanimations.push( json.animation );\n\n    \t\t\t}\n\n    \t\t\tif ( json.animations !== undefined ) {\n\n    \t\t\t\tif ( json.animations.length ) {\n\n    \t\t\t\t\tanimations = animations.concat( json.animations );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tanimations.push( json.animations );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n    \t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n    \t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n    \t\t\t}\n\n    \t\t\t// parse implicit morph animations\n    \t\t\tif ( geometry.morphTargets ) {\n\n    \t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n    \t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n    \t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n    \t\t\t}\n\n    \t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n    \t\t}\n\n    \t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n    \t\t\treturn { geometry: geometry };\n\n    \t\t} else {\n\n    \t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n    \t\t\treturn { geometry: geometry, materials: materials };\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ObjectLoader ( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n    \tthis.texturePath = '';\n\n    }\n\n    Object.assign( ObjectLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tif ( this.texturePath === '' ) {\n\n    \t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n    \t\t}\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tscope.parse( JSON.parse( text ), onLoad );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTexturePath: function ( value ) {\n\n    \t\tthis.texturePath = value;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n\n    \t},\n\n    \tparse: function ( json, onLoad ) {\n\n    \t\tvar geometries = this.parseGeometries( json.geometries );\n\n    \t\tvar images = this.parseImages( json.images, function () {\n\n    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n    \t\t} );\n\n    \t\tvar textures  = this.parseTextures( json.textures, images );\n    \t\tvar materials = this.parseMaterials( json.materials, textures );\n\n    \t\tvar object = this.parseObject( json.object, geometries, materials );\n\n    \t\tif ( json.animations ) {\n\n    \t\t\tobject.animations = this.parseAnimations( json.animations );\n\n    \t\t}\n\n    \t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n    \t\t}\n\n    \t\treturn object;\n\n    \t},\n\n    \tparseGeometries: function ( json ) {\n\n    \t\tvar geometries = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tvar geometryLoader = new JSONLoader();\n    \t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar geometry;\n    \t\t\t\tvar data = json[ i ];\n\n    \t\t\t\tswitch ( data.type ) {\n\n    \t\t\t\t\tcase 'PlaneGeometry':\n    \t\t\t\t\tcase 'PlaneBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.width,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'BoxGeometry':\n    \t\t\t\t\tcase 'BoxBufferGeometry':\n    \t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.width,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.depth,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.depthSegments\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'CircleGeometry':\n    \t\t\t\t\tcase 'CircleBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.segments,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'CylinderGeometry':\n    \t\t\t\t\tcase 'CylinderBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radiusTop,\n    \t\t\t\t\t\t\tdata.radiusBottom,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.openEnded,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'ConeGeometry':\n    \t\t\t\t\tcase 'ConeBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.openEnded,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'SphereGeometry':\n    \t\t\t\t\tcase 'SphereBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.phiStart,\n    \t\t\t\t\t\t\tdata.phiLength,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'DodecahedronGeometry':\n    \t\t\t\t\tcase 'IcosahedronGeometry':\n    \t\t\t\t\tcase 'OctahedronGeometry':\n    \t\t\t\t\tcase 'TetrahedronGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.detail\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'RingGeometry':\n    \t\t\t\t\tcase 'RingBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.innerRadius,\n    \t\t\t\t\t\t\tdata.outerRadius,\n    \t\t\t\t\t\t\tdata.thetaSegments,\n    \t\t\t\t\t\t\tdata.phiSegments,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'TorusGeometry':\n    \t\t\t\t\tcase 'TorusBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.tube,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.tubularSegments,\n    \t\t\t\t\t\t\tdata.arc\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'TorusKnotGeometry':\n    \t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.tube,\n    \t\t\t\t\t\t\tdata.tubularSegments,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.p,\n    \t\t\t\t\t\t\tdata.q\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'LatheGeometry':\n    \t\t\t\t\tcase 'LatheBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.points,\n    \t\t\t\t\t\t\tdata.segments,\n    \t\t\t\t\t\t\tdata.phiStart,\n    \t\t\t\t\t\t\tdata.phiLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'BufferGeometry':\n\n    \t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'Geometry':\n\n    \t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tdefault:\n\n    \t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n    \t\t\t\t\t\tcontinue;\n\n    \t\t\t\t}\n\n    \t\t\t\tgeometry.uuid = data.uuid;\n\n    \t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n    \t\t\t\tgeometries[ data.uuid ] = geometry;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn geometries;\n\n    \t},\n\n    \tparseMaterials: function ( json, textures ) {\n\n    \t\tvar materials = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tvar loader = new MaterialLoader();\n    \t\t\tloader.setTextures( textures );\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar material = loader.parse( json[ i ] );\n    \t\t\t\tmaterials[ material.uuid ] = material;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn materials;\n\n    \t},\n\n    \tparseAnimations: function ( json ) {\n\n    \t\tvar animations = [];\n\n    \t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n    \t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n    \t\t\tanimations.push( clip );\n\n    \t\t}\n\n    \t\treturn animations;\n\n    \t},\n\n    \tparseImages: function ( json, onLoad ) {\n\n    \t\tvar scope = this;\n    \t\tvar images = {};\n\n    \t\tfunction loadImage( url ) {\n\n    \t\t\tscope.manager.itemStart( url );\n\n    \t\t\treturn loader.load( url, function () {\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t}, undefined, function () {\n\n    \t\t\t\tscope.manager.itemError( url );\n\n    \t\t\t} );\n\n    \t\t}\n\n    \t\tif ( json !== undefined && json.length > 0 ) {\n\n    \t\t\tvar manager = new LoadingManager( onLoad );\n\n    \t\t\tvar loader = new ImageLoader( manager );\n    \t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar image = json[ i ];\n    \t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n    \t\t\t\timages[ image.uuid ] = loadImage( path );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn images;\n\n    \t},\n\n    \tparseTextures: function ( json, images ) {\n\n    \t\tfunction parseConstant( value, type ) {\n\n    \t\t\tif ( typeof( value ) === 'number' ) return value;\n\n    \t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n    \t\t\treturn type[ value ];\n\n    \t\t}\n\n    \t\tvar textures = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar data = json[ i ];\n\n    \t\t\t\tif ( data.image === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( images[ data.image ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n    \t\t\t\t}\n\n    \t\t\t\tvar texture = new Texture( images[ data.image ] );\n    \t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\ttexture.uuid = data.uuid;\n\n    \t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n    \t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );\n\n    \t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n    \t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n    \t\t\t\tif ( data.wrap !== undefined ) {\n\n    \t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );\n    \t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );\n    \t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );\n    \t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n    \t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n    \t\t\t\ttextures[ data.uuid ] = texture;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn textures;\n\n    \t},\n\n    \tparseObject: function () {\n\n    \t\tvar matrix = new Matrix4();\n\n    \t\treturn function parseObject( data, geometries, materials ) {\n\n    \t\t\tvar object;\n\n    \t\t\tfunction getGeometry( name ) {\n\n    \t\t\t\tif ( geometries[ name ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n    \t\t\t\t}\n\n    \t\t\t\treturn geometries[ name ];\n\n    \t\t\t}\n\n    \t\t\tfunction getMaterial( name ) {\n\n    \t\t\t\tif ( name === undefined ) return undefined;\n\n    \t\t\t\tif ( materials[ name ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n    \t\t\t\t}\n\n    \t\t\t\treturn materials[ name ];\n\n    \t\t\t}\n\n    \t\t\tswitch ( data.type ) {\n\n    \t\t\t\tcase 'Scene':\n\n    \t\t\t\t\tobject = new Scene();\n\n    \t\t\t\t\tif ( data.background !== undefined ) {\n\n    \t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n    \t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( data.fog !== undefined ) {\n\n    \t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n    \t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n    \t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n    \t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PerspectiveCamera':\n\n    \t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n    \t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n    \t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n    \t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n    \t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n    \t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'OrthographicCamera':\n\n    \t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'AmbientLight':\n\n    \t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'DirectionalLight':\n\n    \t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointLight':\n\n    \t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'SpotLight':\n\n    \t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'HemisphereLight':\n\n    \t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Mesh':\n\n    \t\t\t\t\tvar geometry = getGeometry( data.geometry );\n    \t\t\t\t\tvar material = getMaterial( data.material );\n\n    \t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n    \t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'LOD':\n\n    \t\t\t\t\tobject = new LOD();\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Line':\n\n    \t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'LineSegments':\n\n    \t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointCloud':\n    \t\t\t\tcase 'Points':\n\n    \t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Sprite':\n\n    \t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Group':\n\n    \t\t\t\t\tobject = new Group();\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n\n    \t\t\t\t\tobject = new Object3D();\n\n    \t\t\t}\n\n    \t\t\tobject.uuid = data.uuid;\n\n    \t\t\tif ( data.name !== undefined ) object.name = data.name;\n    \t\t\tif ( data.matrix !== undefined ) {\n\n    \t\t\t\tmatrix.fromArray( data.matrix );\n    \t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n    \t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n    \t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n    \t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n    \t\t\t}\n\n    \t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n    \t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n    \t\t\tif ( data.shadow ) {\n\n    \t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n    \t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n    \t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n    \t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n    \t\t\t}\n\n    \t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n    \t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n    \t\t\tif ( data.children !== undefined ) {\n\n    \t\t\t\tfor ( var child in data.children ) {\n\n    \t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( data.type === 'LOD' ) {\n\n    \t\t\t\tvar levels = data.levels;\n\n    \t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n    \t\t\t\t\tvar level = levels[ l ];\n    \t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n    \t\t\t\t\tif ( child !== undefined ) {\n\n    \t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn object;\n\n    \t\t};\n\n    \t}()\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Extensible curve object\n     *\n     * Some common of Curve methods\n     * .getPoint(t), getTangent(t)\n     * .getPointAt(u), getTangentAt(u)\n     * .getPoints(), .getSpacedPoints()\n     * .getLength()\n     * .updateArcLengths()\n     *\n     * This following classes subclasses THREE.Curve:\n     *\n     * -- 2d classes --\n     * THREE.LineCurve\n     * THREE.QuadraticBezierCurve\n     * THREE.CubicBezierCurve\n     * THREE.SplineCurve\n     * THREE.ArcCurve\n     * THREE.EllipseCurve\n     *\n     * -- 3d classes --\n     * THREE.LineCurve3\n     * THREE.QuadraticBezierCurve3\n     * THREE.CubicBezierCurve3\n     * THREE.SplineCurve3\n     *\n     * A series of curves can be represented as a THREE.CurvePath\n     *\n     **/\n\n    /**************************************************************\n     *\tAbstract Curve base class\n     **************************************************************/\n\n    function Curve() {}\n\n    Curve.prototype = {\n\n    \tconstructor: Curve,\n\n    \t// Virtual base class method to overwrite and implement in subclasses\n    \t//\t- t [0 .. 1]\n\n    \tgetPoint: function ( t ) {\n\n    \t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n    \t\treturn null;\n\n    \t},\n\n    \t// Get point at relative position in curve according to arc length\n    \t// - u [0 .. 1]\n\n    \tgetPointAt: function ( u ) {\n\n    \t\tvar t = this.getUtoTmapping( u );\n    \t\treturn this.getPoint( t );\n\n    \t},\n\n    \t// Get sequence of points using getPoint( t )\n\n    \tgetPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 5;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n    \t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t// Get sequence of points using getPointAt( u )\n\n    \tgetSpacedPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 5;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n    \t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t// Get total curve arc length\n\n    \tgetLength: function () {\n\n    \t\tvar lengths = this.getLengths();\n    \t\treturn lengths[ lengths.length - 1 ];\n\n    \t},\n\n    \t// Get list of cumulative segment lengths\n\n    \tgetLengths: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\n    \t\tif ( this.cacheArcLengths\n    \t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n    \t\t\t&& ! this.needsUpdate ) {\n\n    \t\t\t//console.log( \"cached\", this.cacheArcLengths );\n    \t\t\treturn this.cacheArcLengths;\n\n    \t\t}\n\n    \t\tthis.needsUpdate = false;\n\n    \t\tvar cache = [];\n    \t\tvar current, last = this.getPoint( 0 );\n    \t\tvar p, sum = 0;\n\n    \t\tcache.push( 0 );\n\n    \t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n    \t\t\tcurrent = this.getPoint ( p / divisions );\n    \t\t\tsum += current.distanceTo( last );\n    \t\t\tcache.push( sum );\n    \t\t\tlast = current;\n\n    \t\t}\n\n    \t\tthis.cacheArcLengths = cache;\n\n    \t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\n    \t},\n\n    \tupdateArcLengths: function() {\n\n    \t\tthis.needsUpdate = true;\n    \t\tthis.getLengths();\n\n    \t},\n\n    \t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n    \tgetUtoTmapping: function ( u, distance ) {\n\n    \t\tvar arcLengths = this.getLengths();\n\n    \t\tvar i = 0, il = arcLengths.length;\n\n    \t\tvar targetArcLength; // The targeted u distance value to get\n\n    \t\tif ( distance ) {\n\n    \t\t\ttargetArcLength = distance;\n\n    \t\t} else {\n\n    \t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n    \t\t}\n\n    \t\t//var time = Date.now();\n\n    \t\t// binary search for the index with largest value smaller than target u distance\n\n    \t\tvar low = 0, high = il - 1, comparison;\n\n    \t\twhile ( low <= high ) {\n\n    \t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n    \t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n    \t\t\tif ( comparison < 0 ) {\n\n    \t\t\t\tlow = i + 1;\n\n    \t\t\t} else if ( comparison > 0 ) {\n\n    \t\t\t\thigh = i - 1;\n\n    \t\t\t} else {\n\n    \t\t\t\thigh = i;\n    \t\t\t\tbreak;\n\n    \t\t\t\t// DONE\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\ti = high;\n\n    \t\t//console.log('b' , i, low, high, Date.now()- time);\n\n    \t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n    \t\t\tvar t = i / ( il - 1 );\n    \t\t\treturn t;\n\n    \t\t}\n\n    \t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n    \t\tvar lengthBefore = arcLengths[ i ];\n    \t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n    \t\tvar segmentLength = lengthAfter - lengthBefore;\n\n    \t\t// determine where we are between the 'before' and 'after' points\n\n    \t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n    \t\t// add that fractional amount to t\n\n    \t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n    \t\treturn t;\n\n    \t},\n\n    \t// Returns a unit vector tangent at t\n    \t// In case any sub curve does not implement its tangent derivation,\n    \t// 2 points a small delta apart will be used to find its gradient\n    \t// which seems to give a reasonable approximation\n\n    \tgetTangent: function( t ) {\n\n    \t\tvar delta = 0.0001;\n    \t\tvar t1 = t - delta;\n    \t\tvar t2 = t + delta;\n\n    \t\t// Capping in case of danger\n\n    \t\tif ( t1 < 0 ) t1 = 0;\n    \t\tif ( t2 > 1 ) t2 = 1;\n\n    \t\tvar pt1 = this.getPoint( t1 );\n    \t\tvar pt2 = this.getPoint( t2 );\n\n    \t\tvar vec = pt2.clone().sub( pt1 );\n    \t\treturn vec.normalize();\n\n    \t},\n\n    \tgetTangentAt: function ( u ) {\n\n    \t\tvar t = this.getUtoTmapping( u );\n    \t\treturn this.getTangent( t );\n\n    \t}\n\n    };\n\n    // TODO: Transformation for Curves?\n\n    /**************************************************************\n     *\t3D Curves\n     **************************************************************/\n\n    // A Factory method for creating new curve subclasses\n\n    Curve.create = function ( constructor, getPointFunc ) {\n\n    \tconstructor.prototype = Object.create( Curve.prototype );\n    \tconstructor.prototype.constructor = constructor;\n    \tconstructor.prototype.getPoint = getPointFunc;\n\n    \treturn constructor;\n\n    };\n\n    /**************************************************************\n     *\tLine\n     **************************************************************/\n\n    function LineCurve( v1, v2 ) {\n\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n\n    }\n\n    LineCurve.prototype = Object.create( Curve.prototype );\n    LineCurve.prototype.constructor = LineCurve;\n\n    LineCurve.prototype.isLineCurve = true;\n\n    LineCurve.prototype.getPoint = function ( t ) {\n\n    \tif ( t === 1 ) {\n\n    \t\treturn this.v2.clone();\n\n    \t}\n\n    \tvar point = this.v2.clone().sub( this.v1 );\n    \tpoint.multiplyScalar( t ).add( this.v1 );\n\n    \treturn point;\n\n    };\n\n    // Line curve is linear, so we can overwrite default getPointAt\n\n    LineCurve.prototype.getPointAt = function ( u ) {\n\n    \treturn this.getPoint( u );\n\n    };\n\n    LineCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangent = this.v2.clone().sub( this.v1 );\n\n    \treturn tangent.normalize();\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     *\n     **/\n\n    /**************************************************************\n     *\tCurved Path - a curve path is simply a array of connected\n     *  curves, but retains the api of a curve\n     **************************************************************/\n\n    function CurvePath() {\n\n    \tthis.curves = [];\n\n    \tthis.autoClose = false; // Automatically closes the path\n\n    }\n\n    CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n    \tconstructor: CurvePath,\n\n    \tadd: function ( curve ) {\n\n    \t\tthis.curves.push( curve );\n\n    \t},\n\n    \tclosePath: function () {\n\n    \t\t// Add a line curve if start and end of lines are not connected\n    \t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n    \t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n    \t\tif ( ! startPoint.equals( endPoint ) ) {\n\n    \t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n    \t\t}\n\n    \t},\n\n    \t// To get accurate point with reference to\n    \t// entire path distance at time t,\n    \t// following has to be done:\n\n    \t// 1. Length of each sub path have to be known\n    \t// 2. Locate and identify type of curve\n    \t// 3. Get t for the curve\n    \t// 4. Return curve.getPointAt(t')\n\n    \tgetPoint: function ( t ) {\n\n    \t\tvar d = t * this.getLength();\n    \t\tvar curveLengths = this.getCurveLengths();\n    \t\tvar i = 0;\n\n    \t\t// To think about boundaries points.\n\n    \t\twhile ( i < curveLengths.length ) {\n\n    \t\t\tif ( curveLengths[ i ] >= d ) {\n\n    \t\t\t\tvar diff = curveLengths[ i ] - d;\n    \t\t\t\tvar curve = this.curves[ i ];\n\n    \t\t\t\tvar segmentLength = curve.getLength();\n    \t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n    \t\t\t\treturn curve.getPointAt( u );\n\n    \t\t\t}\n\n    \t\t\ti ++;\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t\t// loop where sum != 0, sum > d , sum+1 <d\n\n    \t},\n\n    \t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n    \t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n    \t// getPoint() depends on getLength\n\n    \tgetLength: function () {\n\n    \t\tvar lens = this.getCurveLengths();\n    \t\treturn lens[ lens.length - 1 ];\n\n    \t},\n\n    \t// cacheLengths must be recalculated.\n    \tupdateArcLengths: function () {\n\n    \t\tthis.needsUpdate = true;\n    \t\tthis.cacheLengths = null;\n    \t\tthis.getLengths();\n\n    \t},\n\n    \t// Compute lengths and cache them\n    \t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n    \tgetCurveLengths: function () {\n\n    \t\t// We use cache values if curves and cache array are same length\n\n    \t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n    \t\t\treturn this.cacheLengths;\n\n    \t\t}\n\n    \t\t// Get length of sub-curve\n    \t\t// Push sums into cached array\n\n    \t\tvar lengths = [], sums = 0;\n\n    \t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n    \t\t\tsums += this.curves[ i ].getLength();\n    \t\t\tlengths.push( sums );\n\n    \t\t}\n\n    \t\tthis.cacheLengths = lengths;\n\n    \t\treturn lengths;\n\n    \t},\n\n    \tgetSpacedPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 40;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n    \t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n    \t\t}\n\n    \t\tif ( this.autoClose ) {\n\n    \t\t\tpoints.push( points[ 0 ] );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \tgetPoints: function ( divisions ) {\n\n    \t\tdivisions = divisions || 12;\n\n    \t\tvar points = [], last;\n\n    \t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n    \t\t\tvar curve = curves[ i ];\n    \t\t\tvar resolution = (curve && curve.isEllipseCurve) ? divisions * 2\n    \t\t\t\t: (curve && curve.isLineCurve) ? 1\n    \t\t\t\t: (curve && curve.isSplineCurve) ? divisions * curve.points.length\n    \t\t\t\t: divisions;\n\n    \t\t\tvar pts = curve.getPoints( resolution );\n\n    \t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\n    \t\t\t\tvar point = pts[ j ];\n\n    \t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n    \t\t\t\tpoints.push( point );\n    \t\t\t\tlast = point;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n    \t\t\tpoints.push( points[ 0 ] );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t/**************************************************************\n    \t *\tCreate Geometries Helpers\n    \t **************************************************************/\n\n    \t/// Generate geometry from path points (for Line or Points objects)\n\n    \tcreatePointsGeometry: function ( divisions ) {\n\n    \t\tvar pts = this.getPoints( divisions );\n    \t\treturn this.createGeometry( pts );\n\n    \t},\n\n    \t// Generate geometry from equidistant sampling along the path\n\n    \tcreateSpacedPointsGeometry: function ( divisions ) {\n\n    \t\tvar pts = this.getSpacedPoints( divisions );\n    \t\treturn this.createGeometry( pts );\n\n    \t},\n\n    \tcreateGeometry: function ( points ) {\n\n    \t\tvar geometry = new Geometry();\n\n    \t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n    \t\t\tvar point = points[ i ];\n    \t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    } );\n\n    /**************************************************************\n     *\tEllipse curve\n     **************************************************************/\n\n    function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \tthis.aX = aX;\n    \tthis.aY = aY;\n\n    \tthis.xRadius = xRadius;\n    \tthis.yRadius = yRadius;\n\n    \tthis.aStartAngle = aStartAngle;\n    \tthis.aEndAngle = aEndAngle;\n\n    \tthis.aClockwise = aClockwise;\n\n    \tthis.aRotation = aRotation || 0;\n\n    }\n\n    EllipseCurve.prototype = Object.create( Curve.prototype );\n    EllipseCurve.prototype.constructor = EllipseCurve;\n\n    EllipseCurve.prototype.isEllipseCurve = true;\n\n    EllipseCurve.prototype.getPoint = function( t ) {\n\n    \tvar twoPi = Math.PI * 2;\n    \tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n    \tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n    \t// ensures that deltaAngle is 0 .. 2 PI\n    \twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n    \twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n    \tif ( deltaAngle < Number.EPSILON ) {\n\n    \t\tif ( samePoints ) {\n\n    \t\t\tdeltaAngle = 0;\n\n    \t\t} else {\n\n    \t\t\tdeltaAngle = twoPi;\n\n    \t\t}\n\n    \t}\n\n    \tif ( this.aClockwise === true && ! samePoints ) {\n\n    \t\tif ( deltaAngle === twoPi ) {\n\n    \t\t\tdeltaAngle = - twoPi;\n\n    \t\t} else {\n\n    \t\t\tdeltaAngle = deltaAngle - twoPi;\n\n    \t\t}\n\n    \t}\n\n    \tvar angle = this.aStartAngle + t * deltaAngle;\n    \tvar x = this.aX + this.xRadius * Math.cos( angle );\n    \tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n    \tif ( this.aRotation !== 0 ) {\n\n    \t\tvar cos = Math.cos( this.aRotation );\n    \t\tvar sin = Math.sin( this.aRotation );\n\n    \t\tvar tx = x - this.aX;\n    \t\tvar ty = y - this.aY;\n\n    \t\t// Rotate the point about the center of the ellipse.\n    \t\tx = tx * cos - ty * sin + this.aX;\n    \t\ty = tx * sin + ty * cos + this.aY;\n\n    \t}\n\n    \treturn new Vector2( x, y );\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    exports.CurveUtils = {\n\n    \ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\n    \t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\n    \t},\n\n    \t// Puay Bing, thanks for helping with this derivative!\n\n    \ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\n    \t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n    \t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n    \t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n    \t\t\t3 * t * t * p3;\n\n    \t},\n\n    \ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\n    \t\t// To check if my formulas are correct\n\n    \t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n    \t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n    \t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n    \t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\n    \t\treturn h00 + h10 + h01 + h11;\n\n    \t},\n\n    \t// Catmull-Rom\n\n    \tinterpolate: function( p0, p1, p2, p3, t ) {\n\n    \t\tvar v0 = ( p2 - p0 ) * 0.5;\n    \t\tvar v1 = ( p3 - p1 ) * 0.5;\n    \t\tvar t2 = t * t;\n    \t\tvar t3 = t * t2;\n    \t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n    \t}\n\n    };\n\n    /**************************************************************\n     *\tSpline curve\n     **************************************************************/\n\n    function SplineCurve( points /* array of Vector2 */ ) {\n\n    \tthis.points = ( points === undefined ) ? [] : points;\n\n    }\n\n    SplineCurve.prototype = Object.create( Curve.prototype );\n    SplineCurve.prototype.constructor = SplineCurve;\n\n    SplineCurve.prototype.isSplineCurve = true;\n\n    SplineCurve.prototype.getPoint = function ( t ) {\n\n    \tvar points = this.points;\n    \tvar point = ( points.length - 1 ) * t;\n\n    \tvar intPoint = Math.floor( point );\n    \tvar weight = point - intPoint;\n\n    \tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n    \tvar point1 = points[ intPoint ];\n    \tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n    \tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n    \tvar interpolate = exports.CurveUtils.interpolate;\n\n    \treturn new Vector2(\n    \t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n    \t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n    \t);\n\n    };\n\n    /**************************************************************\n     *\tCubic Bezier curve\n     **************************************************************/\n\n    function CubicBezierCurve( v0, v1, v2, v3 ) {\n\n    \tthis.v0 = v0;\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n    \tthis.v3 = v3;\n\n    }\n\n    CubicBezierCurve.prototype = Object.create( Curve.prototype );\n    CubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n    CubicBezierCurve.prototype.getPoint = function ( t ) {\n\n    \tvar b3 = exports.ShapeUtils.b3;\n\n    \treturn new Vector2(\n    \t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n    \t);\n\n    };\n\n    CubicBezierCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangentCubicBezier = exports.CurveUtils.tangentCubicBezier;\n\n    \treturn new Vector2(\n    \t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n    \t).normalize();\n\n    };\n\n    /**************************************************************\n     *\tQuadratic Bezier curve\n     **************************************************************/\n\n\n    function QuadraticBezierCurve( v0, v1, v2 ) {\n\n    \tthis.v0 = v0;\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n\n    }\n\n    QuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n    QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\n    QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n    \tvar b2 = exports.ShapeUtils.b2;\n\n    \treturn new Vector2(\n    \t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n    \t);\n\n    };\n\n\n    QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangentQuadraticBezier = exports.CurveUtils.tangentQuadraticBezier;\n\n    \treturn new Vector2(\n    \t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n    \t).normalize();\n\n    };\n\n    var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n    \tfromPoints: function ( vectors ) {\n\n    \t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n    \t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\n    \t\t}\n\n    \t},\n\n    \tmoveTo: function ( x, y ) {\n\n    \t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n    \t},\n\n    \tlineTo: function ( x, y ) {\n\n    \t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( x, y );\n\n    \t},\n\n    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n    \t\tvar curve = new QuadraticBezierCurve(\n    \t\t\tthis.currentPoint.clone(),\n    \t\t\tnew Vector2( aCPx, aCPy ),\n    \t\t\tnew Vector2( aX, aY )\n    \t\t);\n\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( aX, aY );\n\n    \t},\n\n    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n    \t\tvar curve = new CubicBezierCurve(\n    \t\t\tthis.currentPoint.clone(),\n    \t\t\tnew Vector2( aCP1x, aCP1y ),\n    \t\t\tnew Vector2( aCP2x, aCP2y ),\n    \t\t\tnew Vector2( aX, aY )\n    \t\t);\n\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( aX, aY );\n\n    \t},\n\n    \tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n    \t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n    \t\tvar curve = new SplineCurve( npts );\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n    \t},\n\n    \tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \t\tvar x0 = this.currentPoint.x;\n    \t\tvar y0 = this.currentPoint.y;\n\n    \t\tthis.absarc( aX + x0, aY + y0, aRadius,\n    \t\t\taStartAngle, aEndAngle, aClockwise );\n\n    \t},\n\n    \tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n    \t},\n\n    \tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \t\tvar x0 = this.currentPoint.x;\n    \t\tvar y0 = this.currentPoint.y;\n\n    \t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n    \t},\n\n    \tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n    \t\tif ( this.curves.length > 0 ) {\n\n    \t\t\t// if a previous curve is present, attempt to join\n    \t\t\tvar firstPoint = curve.getPoint( 0 );\n\n    \t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n    \t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.curves.push( curve );\n\n    \t\tvar lastPoint = curve.getPoint( 1 );\n    \t\tthis.currentPoint.copy( lastPoint );\n\n    \t}\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Defines a 2d shape plane using paths.\n     **/\n\n    // STEP 1 Create a path.\n    // STEP 2 Turn path into shape.\n    // STEP 3 ExtrudeGeometry takes in Shape/Shapes\n    // STEP 3a - Extract points from each shape, turn to vertices\n    // STEP 3b - Triangulate each shape, add faces.\n\n    function Shape() {\n\n    \tPath.apply( this, arguments );\n\n    \tthis.holes = [];\n\n    }\n\n    Shape.prototype = Object.assign( Object.create( PathPrototype ), {\n\n    \tconstructor: Shape,\n\n    \tgetPointsHoles: function ( divisions ) {\n\n    \t\tvar holesPts = [];\n\n    \t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n    \t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n    \t\t}\n\n    \t\treturn holesPts;\n\n    \t},\n\n    \t// Get points of shape and holes (keypoints based on segments parameter)\n\n    \textractAllPoints: function ( divisions ) {\n\n    \t\treturn {\n\n    \t\t\tshape: this.getPoints( divisions ),\n    \t\t\tholes: this.getPointsHoles( divisions )\n\n    \t\t};\n\n    \t},\n\n    \textractPoints: function ( divisions ) {\n\n    \t\treturn this.extractAllPoints( divisions );\n\n    \t}\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Creates free form 2d path using series of points, lines or curves.\n     *\n     **/\n\n    function Path( points ) {\n\n    \tCurvePath.call( this );\n    \tthis.currentPoint = new Vector2();\n\n    \tif ( points ) {\n\n    \t\tthis.fromPoints( points );\n\n    \t}\n\n    }\n\n    Path.prototype = PathPrototype;\n    PathPrototype.constructor = Path;\n\n\n    // minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n    function ShapePath() {\n    \tthis.subPaths = [];\n    \tthis.currentPath = null;\n    }\n\n    ShapePath.prototype = {\n    \tmoveTo: function ( x, y ) {\n    \t\tthis.currentPath = new Path();\n    \t\tthis.subPaths.push(this.currentPath);\n    \t\tthis.currentPath.moveTo( x, y );\n    \t},\n    \tlineTo: function ( x, y ) {\n    \t\tthis.currentPath.lineTo( x, y );\n    \t},\n    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n    \t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n    \t},\n    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n    \t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n    \t},\n    \tsplineThru: function ( pts ) {\n    \t\tthis.currentPath.splineThru( pts );\n    \t},\n\n    \ttoShapes: function ( isCCW, noHoles ) {\n\n    \t\tfunction toShapesNoHoles( inSubpaths ) {\n\n    \t\t\tvar shapes = [];\n\n    \t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n    \t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n    \t\t\t\tvar tmpShape = new Shape();\n    \t\t\t\ttmpShape.curves = tmpPath.curves;\n\n    \t\t\t\tshapes.push( tmpShape );\n\n    \t\t\t}\n\n    \t\t\treturn shapes;\n\n    \t\t}\n\n    \t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n    \t\t\tvar polyLen = inPolygon.length;\n\n    \t\t\t// inPt on polygon contour => immediate success    or\n    \t\t\t// toggling of inside/outside at every single! intersection point of an edge\n    \t\t\t//  with the horizontal line through inPt, left of inPt\n    \t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n    \t\t\tvar inside = false;\n    \t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n    \t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n    \t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n    \t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n    \t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n    \t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n    \t\t\t\t\t// not parallel\n    \t\t\t\t\tif ( edgeDy < 0 ) {\n\n    \t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n    \t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n    \t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n    \t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n    \t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n    \t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n    \t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n    \t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// parallel or collinear\n    \t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n    \t\t\t\t\t// edge lies on the same horizontal line as inPt\n    \t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n    \t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n    \t\t\t\t\t// continue;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn\tinside;\n\n    \t\t}\n\n    \t\tvar isClockWise = exports.ShapeUtils.isClockWise;\n\n    \t\tvar subPaths = this.subPaths;\n    \t\tif ( subPaths.length === 0 ) return [];\n\n    \t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n    \t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n    \t\tif ( subPaths.length === 1 ) {\n\n    \t\t\ttmpPath = subPaths[ 0 ];\n    \t\t\ttmpShape = new Shape();\n    \t\t\ttmpShape.curves = tmpPath.curves;\n    \t\t\tshapes.push( tmpShape );\n    \t\t\treturn shapes;\n\n    \t\t}\n\n    \t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n    \t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n    \t\t// console.log(\"Holes first\", holesFirst);\n\n    \t\tvar betterShapeHoles = [];\n    \t\tvar newShapes = [];\n    \t\tvar newShapeHoles = [];\n    \t\tvar mainIdx = 0;\n    \t\tvar tmpPoints;\n\n    \t\tnewShapes[ mainIdx ] = undefined;\n    \t\tnewShapeHoles[ mainIdx ] = [];\n\n    \t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n    \t\t\ttmpPath = subPaths[ i ];\n    \t\t\ttmpPoints = tmpPath.getPoints();\n    \t\t\tsolid = isClockWise( tmpPoints );\n    \t\t\tsolid = isCCW ? ! solid : solid;\n\n    \t\t\tif ( solid ) {\n\n    \t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n    \t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n    \t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n    \t\t\t\tif ( holesFirst )\tmainIdx ++;\n    \t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n    \t\t\t\t//console.log('cw', i);\n\n    \t\t\t} else {\n\n    \t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n    \t\t\t\t//console.log('ccw', i);\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// only Holes? -> probably all Shapes with wrong orientation\n    \t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n    \t\tif ( newShapes.length > 1 ) {\n\n    \t\t\tvar ambiguous = false;\n    \t\t\tvar toChange = [];\n\n    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n    \t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n    \t\t\t}\n\n    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n    \t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n    \t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n    \t\t\t\t\tvar ho = sho[ hIdx ];\n    \t\t\t\t\tvar hole_unassigned = true;\n\n    \t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n    \t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n    \t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n    \t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n    \t\t\t\t\t\t\t\thole_unassigned = false;\n    \t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tambiguous = true;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( hole_unassigned ) {\n\n    \t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n    \t\t\t// console.log(\"ambiguous: \", ambiguous);\n    \t\t\tif ( toChange.length > 0 ) {\n\n    \t\t\t\t// console.log(\"to change: \", toChange);\n    \t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar tmpHoles;\n\n    \t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n    \t\t\ttmpShape = newShapes[ i ].s;\n    \t\t\tshapes.push( tmpShape );\n    \t\t\ttmpHoles = newShapeHoles[ i ];\n\n    \t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n    \t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t//console.log(\"shape\", shapes);\n\n    \t\treturn shapes;\n\n    \t}\n    }\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Font( data ) {\n\n    \tthis.data = data;\n\n    }\n\n    Object.assign( Font.prototype, {\n\n    \tisFont: true,\n\n    \tgenerateShapes: function ( text, size, divisions ) {\n\n    \t\tfunction createPaths( text ) {\n\n    \t\t\tvar chars = String( text ).split( '' );\n    \t\t\tvar scale = size / data.resolution;\n    \t\t\tvar offset = 0;\n\n    \t\t\tvar paths = [];\n\n    \t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n    \t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n    \t\t\t\toffset += ret.offset;\n\n    \t\t\t\tpaths.push( ret.path );\n\n    \t\t\t}\n\n    \t\t\treturn paths;\n\n    \t\t}\n\n    \t\tfunction createPath( c, scale, offset ) {\n\n    \t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n    \t\t\tif ( ! glyph ) return;\n\n    \t\t\tvar path = new ShapePath();\n\n    \t\t\tvar pts = [], b2 = exports.ShapeUtils.b2, b3 = exports.ShapeUtils.b3;\n    \t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n    \t\t\tif ( glyph.o ) {\n\n    \t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n    \t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n    \t\t\t\t\tvar action = outline[ i ++ ];\n\n    \t\t\t\t\tswitch ( action ) {\n\n    \t\t\t\t\t\tcase 'm': // moveTo\n\n    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.moveTo( x, y );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'l': // lineTo\n\n    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.lineTo( x, y );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n    \t\t\t\t\t\t\tif ( laste ) {\n\n    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n    \t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n    \t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n    \t\t\t\t\t\t\tif ( laste ) {\n\n    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n    \t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n    \t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn { offset: glyph.ha * scale, path: path };\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( size === undefined ) size = 100;\n    \t\tif ( divisions === undefined ) divisions = 4;\n\n    \t\tvar data = this.data;\n\n    \t\tvar paths = createPaths( text );\n    \t\tvar shapes = [];\n\n    \t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n    \t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n    \t\t}\n\n    \t\treturn shapes;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function FontLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( FontLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tvar json;\n\n    \t\t\ttry {\n\n    \t\t\t\tjson = JSON.parse( text );\n\n    \t\t\t} catch ( e ) {\n\n    \t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n    \t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n    \t\t\t}\n\n    \t\t\tvar font = scope.parse( json );\n\n    \t\t\tif ( onLoad ) onLoad( font );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\treturn new Font( json );\n\n    \t}\n\n    } );\n\n    var context;\n\n    function getAudioContext() {\n\n    \tif ( context === undefined ) {\n\n    \t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n    \t}\n\n    \treturn context;\n\n    }\n\n    /**\n     * @author Reece Aaron Lecrivain / http://reecenotes.com/\n     */\n\n    function AudioLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( AudioLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setResponseType( 'arraybuffer' );\n    \t\tloader.load( url, function ( buffer ) {\n\n    \t\t\tvar context = getAudioContext();\n\n    \t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n    \t\t\t\tonLoad( audioBuffer );\n\n    \t\t\t} );\n\n    \t\t}, onProgress, onError );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function StereoCamera() {\n\n    \tthis.type = 'StereoCamera';\n\n    \tthis.aspect = 1;\n\n    \tthis.eyeSep = 0.064;\n\n    \tthis.cameraL = new PerspectiveCamera();\n    \tthis.cameraL.layers.enable( 1 );\n    \tthis.cameraL.matrixAutoUpdate = false;\n\n    \tthis.cameraR = new PerspectiveCamera();\n    \tthis.cameraR.layers.enable( 2 );\n    \tthis.cameraR.matrixAutoUpdate = false;\n\n    }\n\n    Object.assign( StereoCamera.prototype, {\n\n    \tupdate: ( function () {\n\n    \t\tvar instance, focus, fov, aspect, near, far, zoom;\n\n    \t\tvar eyeRight = new Matrix4();\n    \t\tvar eyeLeft = new Matrix4();\n\n    \t\treturn function update( camera ) {\n\n    \t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n    \t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n    \t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom;\n\n    \t\t\tif ( needsUpdate ) {\n\n    \t\t\t\tinstance = this;\n    \t\t\t\tfocus = camera.focus;\n    \t\t\t\tfov = camera.fov;\n    \t\t\t\taspect = camera.aspect * this.aspect;\n    \t\t\t\tnear = camera.near;\n    \t\t\t\tfar = camera.far;\n    \t\t\t\tzoom = camera.zoom;\n\n    \t\t\t\t// Off-axis stereoscopic effect based on\n    \t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n    \t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n    \t\t\t\tvar eyeSep = this.eyeSep / 2;\n    \t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n    \t\t\t\tvar ymax = ( near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n    \t\t\t\tvar xmin, xmax;\n\n    \t\t\t\t// translate xOffset\n\n    \t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n    \t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n    \t\t\t\t// for left eye\n\n    \t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n    \t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n    \t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n    \t\t\t\t// for right eye\n\n    \t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n    \t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n    \t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n    \t\t\t}\n\n    \t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n    \t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n    \t\t};\n\n    \t} )()\n\n    } );\n\n    /**\n     * Camera for rendering cube maps\n     *\t- renders scene into axis-aligned cube\n     *\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function CubeCamera( near, far, cubeResolution ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'CubeCamera';\n\n    \tvar fov = 90, aspect = 1;\n\n    \tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPX.up.set( 0, - 1, 0 );\n    \tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n    \tthis.add( cameraPX );\n\n    \tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNX.up.set( 0, - 1, 0 );\n    \tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n    \tthis.add( cameraNX );\n\n    \tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPY.up.set( 0, 0, 1 );\n    \tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n    \tthis.add( cameraPY );\n\n    \tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNY.up.set( 0, 0, - 1 );\n    \tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n    \tthis.add( cameraNY );\n\n    \tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPZ.up.set( 0, - 1, 0 );\n    \tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n    \tthis.add( cameraPZ );\n\n    \tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNZ.up.set( 0, - 1, 0 );\n    \tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n    \tthis.add( cameraNZ );\n\n    \tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n    \tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\n    \tthis.updateCubeMap = function ( renderer, scene ) {\n\n    \t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n    \t\tvar renderTarget = this.renderTarget;\n    \t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n    \t\trenderTarget.texture.generateMipmaps = false;\n\n    \t\trenderTarget.activeCubeFace = 0;\n    \t\trenderer.render( scene, cameraPX, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 1;\n    \t\trenderer.render( scene, cameraNX, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 2;\n    \t\trenderer.render( scene, cameraPY, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 3;\n    \t\trenderer.render( scene, cameraNY, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 4;\n    \t\trenderer.render( scene, cameraPZ, renderTarget );\n\n    \t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n    \t\trenderTarget.activeCubeFace = 5;\n    \t\trenderer.render( scene, cameraNZ, renderTarget );\n\n    \t\trenderer.setRenderTarget( null );\n\n    \t};\n\n    }\n\n    CubeCamera.prototype = Object.create( Object3D.prototype );\n    CubeCamera.prototype.constructor = CubeCamera;\n\n    function AudioListener() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'AudioListener';\n\n    \tthis.context = getAudioContext();\n\n    \tthis.gain = this.context.createGain();\n    \tthis.gain.connect( this.context.destination );\n\n    \tthis.filter = null;\n\n    }\n\n    AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: AudioListener,\n\n    \tgetInput: function () {\n\n    \t\treturn this.gain;\n\n    \t},\n\n    \tremoveFilter: function ( ) {\n\n    \t\tif ( this.filter !== null ) {\n\n    \t\t\tthis.gain.disconnect( this.filter );\n    \t\t\tthis.filter.disconnect( this.context.destination );\n    \t\t\tthis.gain.connect( this.context.destination );\n    \t\t\tthis.filter = null;\n\n    \t\t}\n\n    \t},\n\n    \tgetFilter: function () {\n\n    \t\treturn this.filter;\n\n    \t},\n\n    \tsetFilter: function ( value ) {\n\n    \t\tif ( this.filter !== null ) {\n\n    \t\t\tthis.gain.disconnect( this.filter );\n    \t\t\tthis.filter.disconnect( this.context.destination );\n\n    \t\t} else {\n\n    \t\t\tthis.gain.disconnect( this.context.destination );\n\n    \t\t}\n\n    \t\tthis.filter = value;\n    \t\tthis.gain.connect( this.filter );\n    \t\tthis.filter.connect( this.context.destination );\n\n    \t},\n\n    \tgetMasterVolume: function () {\n\n    \t\treturn this.gain.gain.value;\n\n    \t},\n\n    \tsetMasterVolume: function ( value ) {\n\n    \t\tthis.gain.gain.value = value;\n\n    \t},\n\n    \tupdateMatrixWorld: ( function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar quaternion = new Quaternion();\n    \t\tvar scale = new Vector3();\n\n    \t\tvar orientation = new Vector3();\n\n    \t\treturn function updateMatrixWorld( force ) {\n\n    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n    \t\t\tvar listener = this.context.listener;\n    \t\t\tvar up = this.up;\n\n    \t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n    \t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n    \t\t\tlistener.setPosition( position.x, position.y, position.z );\n    \t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n    \t\t};\n\n    \t} )()\n\n    } );\n\n    function Audio( listener ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Audio';\n\n    \tthis.context = listener.context;\n    \tthis.source = this.context.createBufferSource();\n    \tthis.source.onended = this.onEnded.bind( this );\n\n    \tthis.gain = this.context.createGain();\n    \tthis.gain.connect( listener.getInput() );\n\n    \tthis.autoplay = false;\n\n    \tthis.startTime = 0;\n    \tthis.playbackRate = 1;\n    \tthis.isPlaying = false;\n    \tthis.hasPlaybackControl = true;\n    \tthis.sourceType = 'empty';\n\n    \tthis.filters = [];\n\n    }\n\n    Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Audio,\n\n    \tgetOutput: function () {\n\n    \t\treturn this.gain;\n\n    \t},\n\n    \tsetNodeSource: function ( audioNode ) {\n\n    \t\tthis.hasPlaybackControl = false;\n    \t\tthis.sourceType = 'audioNode';\n    \t\tthis.source = audioNode;\n    \t\tthis.connect();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetBuffer: function ( audioBuffer ) {\n\n    \t\tthis.source.buffer = audioBuffer;\n    \t\tthis.sourceType = 'buffer';\n\n    \t\tif ( this.autoplay ) this.play();\n\n    \t\treturn this;\n\n    \t},\n\n    \tplay: function () {\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar source = this.context.createBufferSource();\n\n    \t\tsource.buffer = this.source.buffer;\n    \t\tsource.loop = this.source.loop;\n    \t\tsource.onended = this.source.onended;\n    \t\tsource.start( 0, this.startTime );\n    \t\tsource.playbackRate.value = this.playbackRate;\n\n    \t\tthis.isPlaying = true;\n\n    \t\tthis.source = source;\n\n    \t\treturn this.connect();\n\n    \t},\n\n    \tpause: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.stop();\n    \t\tthis.startTime = this.context.currentTime;\n    \t\tthis.isPlaying = false;\n\n    \t\treturn this;\n\n    \t},\n\n    \tstop: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.stop();\n    \t\tthis.startTime = 0;\n    \t\tthis.isPlaying = false;\n\n    \t\treturn this;\n\n    \t},\n\n    \tconnect: function () {\n\n    \t\tif ( this.filters.length > 0 ) {\n\n    \t\t\tthis.source.connect( this.filters[ 0 ] );\n\n    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n    \t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n    \t\t\t}\n\n    \t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n    \t\t} else {\n\n    \t\t\tthis.source.connect( this.getOutput() );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdisconnect: function () {\n\n    \t\tif ( this.filters.length > 0 ) {\n\n    \t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n    \t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n    \t\t\t}\n\n    \t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n    \t\t} else {\n\n    \t\t\tthis.source.disconnect( this.getOutput() );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetFilters: function () {\n\n    \t\treturn this.filters;\n\n    \t},\n\n    \tsetFilters: function ( value ) {\n\n    \t\tif ( ! value ) value = [];\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tthis.disconnect();\n    \t\t\tthis.filters = value;\n    \t\t\tthis.connect();\n\n    \t\t} else {\n\n    \t\t\tthis.filters = value;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetFilter: function () {\n\n    \t\treturn this.getFilters()[ 0 ];\n\n    \t},\n\n    \tsetFilter: function ( filter ) {\n\n    \t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n    \t},\n\n    \tsetPlaybackRate: function ( value ) {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.playbackRate = value;\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tthis.source.playbackRate.value = this.playbackRate;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetPlaybackRate: function () {\n\n    \t\treturn this.playbackRate;\n\n    \t},\n\n    \tonEnded: function () {\n\n    \t\tthis.isPlaying = false;\n\n    \t},\n\n    \tgetLoop: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn this.source.loop;\n\n    \t},\n\n    \tsetLoop: function ( value ) {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.loop = value;\n\n    \t},\n\n    \tgetVolume: function () {\n\n    \t\treturn this.gain.gain.value;\n\n    \t},\n\n\n    \tsetVolume: function ( value ) {\n\n    \t\tthis.gain.gain.value = value;\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    function PositionalAudio( listener ) {\n\n    \tAudio.call( this, listener );\n\n    \tthis.panner = this.context.createPanner();\n    \tthis.panner.connect( this.gain );\n\n    }\n\n    PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n    \tconstructor: PositionalAudio,\n\n    \tgetOutput: function () {\n\n    \t\treturn this.panner;\n\n    \t},\n\n    \tgetRefDistance: function () {\n\n    \t\treturn this.panner.refDistance;\n\n    \t},\n\n    \tsetRefDistance: function ( value ) {\n\n    \t\tthis.panner.refDistance = value;\n\n    \t},\n\n    \tgetRolloffFactor: function () {\n\n    \t\treturn this.panner.rolloffFactor;\n\n    \t},\n\n    \tsetRolloffFactor: function ( value ) {\n\n    \t\tthis.panner.rolloffFactor = value;\n\n    \t},\n\n    \tgetDistanceModel: function () {\n\n    \t\treturn this.panner.distanceModel;\n\n    \t},\n\n    \tsetDistanceModel: function ( value ) {\n\n    \t\tthis.panner.distanceModel = value;\n\n    \t},\n\n    \tgetMaxDistance: function () {\n\n    \t\treturn this.panner.maxDistance;\n\n    \t},\n\n    \tsetMaxDistance: function ( value ) {\n\n    \t\tthis.panner.maxDistance = value;\n\n    \t},\n\n    \tupdateMatrixWorld: ( function () {\n\n    \t\tvar position = new Vector3();\n\n    \t\treturn function updateMatrixWorld( force ) {\n\n    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n    \t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n    \t\t};\n\n    \t} )()\n\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AudioAnalyser( audio, fftSize ) {\n\n    \tthis.analyser = audio.context.createAnalyser();\n    \tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n    \tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n    \taudio.getOutput().connect( this.analyser );\n\n    }\n\n    Object.assign( AudioAnalyser.prototype, {\n\n    \tgetFrequencyData: function () {\n\n    \t\tthis.analyser.getByteFrequencyData( this.data );\n\n    \t\treturn this.data;\n\n    \t},\n\n    \tgetAverageFrequency: function () {\n\n    \t\tvar value = 0, data = this.getFrequencyData();\n\n    \t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n    \t\t\tvalue += data[ i ];\n\n    \t\t}\n\n    \t\treturn value / data.length;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Buffered scene graph property that allows weighted accumulation.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function PropertyMixer( binding, typeName, valueSize ) {\n\n    \tthis.binding = binding;\n    \tthis.valueSize = valueSize;\n\n    \tvar bufferType = Float64Array,\n    \t\tmixFunction;\n\n    \tswitch ( typeName ) {\n\n    \t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\n    \t\tcase 'string':\n    \t\tcase 'bool':\n\n    \t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\n    \t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\n    \t}\n\n    \tthis.buffer = new bufferType( valueSize * 4 );\n    \t// layout: [ incoming | accu0 | accu1 | orig ]\n    \t//\n    \t// interpolators can use .buffer as their .result\n    \t// the data then goes to 'incoming'\n    \t//\n    \t// 'accu0' and 'accu1' are used frame-interleaved for\n    \t// the cumulative result and are compared to detect\n    \t// changes\n    \t//\n    \t// 'orig' stores the original state of the property\n\n    \tthis._mixBufferRegion = mixFunction;\n\n    \tthis.cumulativeWeight = 0;\n\n    \tthis.useCount = 0;\n    \tthis.referenceCount = 0;\n\n    }\n\n    PropertyMixer.prototype = {\n\n    \tconstructor: PropertyMixer,\n\n    \t// accumulate data in the 'incoming' region into 'accu<i>'\n    \taccumulate: function( accuIndex, weight ) {\n\n    \t\t// note: happily accumulating nothing when weight = 0, the caller knows\n    \t\t// the weight and shouldn't have made the call in the first place\n\n    \t\tvar buffer = this.buffer,\n    \t\t\tstride = this.valueSize,\n    \t\t\toffset = accuIndex * stride + stride,\n\n    \t\t\tcurrentWeight = this.cumulativeWeight;\n\n    \t\tif ( currentWeight === 0 ) {\n\n    \t\t\t// accuN := incoming * weight\n\n    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n    \t\t\t}\n\n    \t\t\tcurrentWeight = weight;\n\n    \t\t} else {\n\n    \t\t\t// accuN := accuN + incoming * weight\n\n    \t\t\tcurrentWeight += weight;\n    \t\t\tvar mix = weight / currentWeight;\n    \t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n    \t\t}\n\n    \t\tthis.cumulativeWeight = currentWeight;\n\n    \t},\n\n    \t// apply the state of 'accu<i>' to the binding when accus differ\n    \tapply: function( accuIndex ) {\n\n    \t\tvar stride = this.valueSize,\n    \t\t\tbuffer = this.buffer,\n    \t\t\toffset = accuIndex * stride + stride,\n\n    \t\t\tweight = this.cumulativeWeight,\n\n    \t\t\tbinding = this.binding;\n\n    \t\tthis.cumulativeWeight = 0;\n\n    \t\tif ( weight < 1 ) {\n\n    \t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n    \t\t\tvar originalValueOffset = stride * 3;\n\n    \t\t\tthis._mixBufferRegion(\n    \t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n    \t\t}\n\n    \t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n    \t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n    \t\t\t\t// value has changed -> update scene graph\n\n    \t\t\t\tbinding.setValue( buffer, offset );\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t// remember the state of the bound property and copy it to both accus\n    \tsaveOriginalState: function() {\n\n    \t\tvar binding = this.binding;\n\n    \t\tvar buffer = this.buffer,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toriginalValueOffset = stride * 3;\n\n    \t\tbinding.getValue( buffer, originalValueOffset );\n\n    \t\t// accu[0..1] := orig -- initially detect changes against the original\n    \t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n    \t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n    \t\t}\n\n    \t\tthis.cumulativeWeight = 0;\n\n    \t},\n\n    \t// apply the state previously taken via 'saveOriginalState' to the binding\n    \trestoreOriginalState: function() {\n\n    \t\tvar originalValueOffset = this.valueSize * 3;\n    \t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n    \t},\n\n\n    \t// mix functions\n\n    \t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tif ( t >= 0.5 ) {\n\n    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tQuaternion.slerpFlat( buffer, dstOffset,\n    \t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\n    \t},\n\n    \t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tvar s = 1 - t;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tvar j = dstOffset + i;\n\n    \t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     *\n     * A reference to a real property in the scene graph.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function PropertyBinding( rootNode, path, parsedPath ) {\n\n    \tthis.path = path;\n    \tthis.parsedPath = parsedPath ||\n    \t\t\tPropertyBinding.parseTrackName( path );\n\n    \tthis.node = PropertyBinding.findNode(\n    \t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\n    \tthis.rootNode = rootNode;\n\n    }\n\n    PropertyBinding.prototype = {\n\n    \tconstructor: PropertyBinding,\n\n    \tgetValue: function getValue_unbound( targetArray, offset ) {\n\n    \t\tthis.bind();\n    \t\tthis.getValue( targetArray, offset );\n\n    \t\t// Note: This class uses a State pattern on a per-method basis:\n    \t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n    \t\t// prototype version of these methods with one that represents\n    \t\t// the bound state. When the property is not found, the methods\n    \t\t// become no-ops.\n\n    \t},\n\n    \tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n    \t\tthis.bind();\n    \t\tthis.setValue( sourceArray, offset );\n\n    \t},\n\n    \t// create getter / setter pair for a property in the scene graph\n    \tbind: function() {\n\n    \t\tvar targetObject = this.node,\n    \t\t\tparsedPath = this.parsedPath,\n\n    \t\t\tobjectName = parsedPath.objectName,\n    \t\t\tpropertyName = parsedPath.propertyName,\n    \t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n    \t\tif ( ! targetObject ) {\n\n    \t\t\ttargetObject = PropertyBinding.findNode(\n    \t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n    \t\t\tthis.node = targetObject;\n\n    \t\t}\n\n    \t\t// set fail state so we can just 'return' on error\n    \t\tthis.getValue = this._getValue_unavailable;\n    \t\tthis.setValue = this._setValue_unavailable;\n\n     \t\t// ensure there is a value node\n    \t\tif ( ! targetObject ) {\n\n    \t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( objectName ) {\n\n    \t\t\tvar objectIndex = parsedPath.objectIndex;\n\n    \t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n    \t\t\tswitch ( objectName ) {\n\n    \t\t\t\tcase 'materials':\n\n    \t\t\t\t\tif ( ! targetObject.material ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttargetObject = targetObject.material.materials;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'bones':\n\n    \t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n    \t\t\t\t\t// and convert the integer string to a true integer.\n\n    \t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n    \t\t\t\t\t// support resolving morphTarget names into indices.\n    \t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n    \t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n    \t\t\t\t\t\t\tobjectIndex = i;\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n\n    \t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n    \t\t\t}\n\n\n    \t\t\tif ( objectIndex !== undefined ) {\n\n    \t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n    \t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// resolve property\n    \t\tvar nodeProperty = targetObject[ propertyName ];\n\n    \t\tif ( nodeProperty === undefined ) {\n\n    \t\t\tvar nodeName = parsedPath.nodeName;\n\n    \t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n    \t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\t// determine versioning scheme\n    \t\tvar versioning = this.Versioning.None;\n\n    \t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n    \t\t\tversioning = this.Versioning.NeedsUpdate;\n    \t\t\tthis.targetObject = targetObject;\n\n    \t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n    \t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n    \t\t\tthis.targetObject = targetObject;\n\n    \t\t}\n\n    \t\t// determine how the property gets bound\n    \t\tvar bindingType = this.BindingType.Direct;\n\n    \t\tif ( propertyIndex !== undefined ) {\n    \t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n    \t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n    \t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n    \t\t\t\t// support resolving morphTarget names into indices.\n    \t\t\t\tif ( ! targetObject.geometry ) {\n\n    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n    \t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n    \t\t\t\t\t\tpropertyIndex = i;\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tbindingType = this.BindingType.ArrayElement;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n    \t\t\tthis.propertyIndex = propertyIndex;\n\n    \t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n    \t\t\t// must use copy for Object3D.Euler/Quaternion\n\n    \t\t\tbindingType = this.BindingType.HasFromToArray;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n\n    \t\t} else if ( nodeProperty.length !== undefined ) {\n\n    \t\t\tbindingType = this.BindingType.EntireArray;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n\n    \t\t} else {\n\n    \t\t\tthis.propertyName = propertyName;\n\n    \t\t}\n\n    \t\t// select getter / setter\n    \t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n    \t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n    \t},\n\n    \tunbind: function() {\n\n    \t\tthis.node = null;\n\n    \t\t// back to the prototype version of getValue / setValue\n    \t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n    \t\tthis.getValue = this._getValue_unbound;\n    \t\tthis.setValue = this._setValue_unbound;\n\n    \t}\n\n    };\n\n    Object.assign( PropertyBinding.prototype, { // prototype, continued\n\n    \t// these are used to \"bind\" a nonexistent property\n    \t_getValue_unavailable: function() {},\n    \t_setValue_unavailable: function() {},\n\n    \t// initial state of these methods that calls 'bind'\n    \t_getValue_unbound: PropertyBinding.prototype.getValue,\n    \t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n    \tBindingType: {\n    \t\tDirect: 0,\n    \t\tEntireArray: 1,\n    \t\tArrayElement: 2,\n    \t\tHasFromToArray: 3\n    \t},\n\n    \tVersioning: {\n    \t\tNone: 0,\n    \t\tNeedsUpdate: 1,\n    \t\tMatrixWorldNeedsUpdate: 2\n    \t},\n\n    \tGetterByBindingType: [\n\n    \t\tfunction getValue_direct( buffer, offset ) {\n\n    \t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n    \t\t},\n\n    \t\tfunction getValue_array( buffer, offset ) {\n\n    \t\t\tvar source = this.resolvedProperty;\n\n    \t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n    \t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n    \t\t\t}\n\n    \t\t},\n\n    \t\tfunction getValue_arrayElement( buffer, offset ) {\n\n    \t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n    \t\t},\n\n    \t\tfunction getValue_toArray( buffer, offset ) {\n\n    \t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n    \t\t}\n\n    \t],\n\n    \tSetterByBindingTypeAndVersioning: [\n\n    \t\t[\n    \t\t\t// Direct\n\n    \t\t\tfunction setValue_direct( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// EntireArray\n\n    \t\t\tfunction setValue_array( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// ArrayElement\n\n    \t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// HasToFromArray\n\n    \t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t]\n\n    \t]\n\n    } );\n\n    PropertyBinding.Composite =\n    \t\tfunction( targetGroup, path, optionalParsedPath ) {\n\n    \tvar parsedPath = optionalParsedPath ||\n    \t\t\tPropertyBinding.parseTrackName( path );\n\n    \tthis._targetGroup = targetGroup;\n    \tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n    };\n\n    PropertyBinding.Composite.prototype = {\n\n    \tconstructor: PropertyBinding.Composite,\n\n    \tgetValue: function( array, offset ) {\n\n    \t\tthis.bind(); // bind all binding\n\n    \t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n    \t\t\tbinding = this._bindings[ firstValidIndex ];\n\n    \t\t// and only call .getValue on the first\n    \t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n    \t},\n\n    \tsetValue: function( array, offset ) {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].setValue( array, offset );\n\n    \t\t}\n\n    \t},\n\n    \tbind: function() {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].bind();\n\n    \t\t}\n\n    \t},\n\n    \tunbind: function() {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].unbind();\n\n    \t\t}\n\n    \t}\n\n    };\n\n    PropertyBinding.create = function( root, path, parsedPath ) {\n\n    \tif ( ! ( (root && root.isAnimationObjectGroup) ) ) {\n\n    \t\treturn new PropertyBinding( root, path, parsedPath );\n\n    \t} else {\n\n    \t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n    \t}\n\n    };\n\n    PropertyBinding.parseTrackName = function( trackName ) {\n\n    \t// matches strings in the form of:\n    \t//    nodeName.property\n    \t//    nodeName.property[accessor]\n    \t//    nodeName.material.property[accessor]\n    \t//    uuid.property[accessor]\n    \t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n    \t//    parentName/nodeName.property\n    \t//    parentName/parentName/nodeName.property[index]\n    \t//    .bone[Armature.DEF_cog].position\n    \t//    scene:helium_balloon_model:helium_balloon_model.position\n    \t// created and tested via https://regex101.com/#javascript\n\n    \tvar re = /^((?:\\w+[\\/:])*)(\\w+)?(?:\\.(\\w+)(?:\\[(.+)\\])?)?\\.(\\w+)(?:\\[(.+)\\])?$/;\n    \tvar matches = re.exec( trackName );\n\n    \tif ( ! matches ) {\n\n    \t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\n    \t}\n\n    \tvar results = {\n    \t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n    \t\tnodeName: matches[ 2 ], \t// allowed to be null, specified root node.\n    \t\tobjectName: matches[ 3 ],\n    \t\tobjectIndex: matches[ 4 ],\n    \t\tpropertyName: matches[ 5 ],\n    \t\tpropertyIndex: matches[ 6 ]\t// allowed to be null, specifies that the whole property is set.\n    \t};\n\n    \tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n    \t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\n    \t}\n\n    \treturn results;\n\n    };\n\n    PropertyBinding.findNode = function( root, nodeName ) {\n\n    \tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n    \t\treturn root;\n\n    \t}\n\n    \t// search into skeleton bones.\n    \tif ( root.skeleton ) {\n\n    \t\tvar searchSkeleton = function( skeleton ) {\n\n    \t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n    \t\t\t\tvar bone = skeleton.bones[ i ];\n\n    \t\t\t\tif ( bone.name === nodeName ) {\n\n    \t\t\t\t\treturn bone;\n\n    \t\t\t\t}\n    \t\t\t}\n\n    \t\t\treturn null;\n\n    \t\t};\n\n    \t\tvar bone = searchSkeleton( root.skeleton );\n\n    \t\tif ( bone ) {\n\n    \t\t\treturn bone;\n\n    \t\t}\n    \t}\n\n    \t// search into node subtree.\n    \tif ( root.children ) {\n\n    \t\tvar searchNodeSubtree = function( children ) {\n\n    \t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\n    \t\t\t\tvar childNode = children[ i ];\n\n    \t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n    \t\t\t\t\treturn childNode;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n    \t\t\t\tif ( result ) return result;\n\n    \t\t\t}\n\n    \t\t\treturn null;\n\n    \t\t};\n\n    \t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n    \t\tif ( subTreeNode ) {\n\n    \t\t\treturn subTreeNode;\n\n    \t\t}\n\n    \t}\n\n    \treturn null;\n\n    };\n\n    /**\n     *\n     * A group of objects that receives a shared animation state.\n     *\n     * Usage:\n     *\n     * \t-\tAdd objects you would otherwise pass as 'root' to the\n     * \t\tconstructor or the .clipAction method of AnimationMixer.\n     *\n     * \t-\tInstead pass this object as 'root'.\n     *\n     * \t-\tYou can also add and remove objects later when the mixer\n     * \t\tis running.\n     *\n     * Note:\n     *\n     *  \tObjects of this class appear as one object to the mixer,\n     *  \tso cache control of the individual objects must be done\n     *  \ton the group.\n     *\n     * Limitation:\n     *\n     * \t- \tThe animated properties must be compatible among the\n     * \t\tall objects in the group.\n     *\n     *  -\tA single property can either be controlled through a\n     *  \ttarget group or directly, but not both.\n     *\n     * @author tschw\n     */\n\n    function AnimationObjectGroup( var_args ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \t// cached objects followed by the active ones\n    \tthis._objects = Array.prototype.slice.call( arguments );\n\n    \tthis.nCachedObjects_ = 0;\t\t\t// threshold\n    \t// note: read by PropertyBinding.Composite\n\n    \tvar indices = {};\n    \tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n    \tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\tindices[ arguments[ i ].uuid ] = i;\n\n    \t}\n\n    \tthis._paths = [];\t\t\t\t\t// inside: string\n    \tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n    \tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n    \tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n    \tvar scope = this;\n\n    \tthis.stats = {\n\n    \t\tobjects: {\n    \t\t\tget total() { return scope._objects.length; },\n    \t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n    \t\t},\n\n    \t\tget bindingsPerObject() { return scope._bindings.length; }\n\n    \t};\n\n    }\n\n    AnimationObjectGroup.prototype = {\n\n    \tconstructor: AnimationObjectGroup,\n\n    \tisAnimationObjectGroup: true,\n\n    \tadd: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tpaths = this._paths,\n    \t\t\tparsedPaths = this._parsedPaths,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index === undefined ) {\n\n    \t\t\t\t// unknown object -> add it to the ACTIVE region\n\n    \t\t\t\tindex = nObjects ++;\n    \t\t\t\tindicesByUUID[ uuid ] = index;\n    \t\t\t\tobjects.push( object );\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tbindings[ j ].push(\n    \t\t\t\t\t\t\tnew PropertyBinding(\n    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( index < nCachedObjects ) {\n\n    \t\t\t\tvar knownObject = objects[ index ];\n\n    \t\t\t\t// move existing object to the ACTIVE region\n\n    \t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n    \t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n    \t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n    \t\t\t\tobjects[ index ] = lastCachedObject;\n\n    \t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n    \t\t\t\tobjects[ firstActiveIndex ] = object;\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n    \t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n    \t\t\t\t\tif ( binding === undefined ) {\n\n    \t\t\t\t\t\t// since we do not bother to create new bindings\n    \t\t\t\t\t\t// for objects that are cached, the binding may\n    \t\t\t\t\t\t// or may not exist\n\n    \t\t\t\t\t\tbinding = new PropertyBinding(\n    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( objects[ index ] !== knownObject) {\n\n    \t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n    \t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n    \t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\n    \t\t\t} // else the object is already where we want it to be\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \tremove: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n    \t\t\t\t// move existing object into the CACHED region\n\n    \t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n    \t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n    \t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n    \t\t\t\tobjects[ index ] = firstActiveObject;\n\n    \t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n    \t\t\t\tobjects[ lastCachedIndex ] = object;\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n    \t\t\t\t\tbindingsForPath[ index ] = firstActive;\n    \t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \t// remove & forget\n    \tuncache: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index !== undefined ) {\n\n    \t\t\t\tdelete indicesByUUID[ uuid ];\n\n    \t\t\t\tif ( index < nCachedObjects ) {\n\n    \t\t\t\t\t// object is cached, shrink the CACHED region\n\n    \t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n    \t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n    \t\t\t\t\t\tlastIndex = -- nObjects,\n    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n    \t\t\t\t\t// last cached object takes this object's place\n    \t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n    \t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n    \t\t\t\t\t// last object goes to the activated slot and pop\n    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n    \t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n    \t\t\t\t\tobjects.pop();\n\n    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n    \t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n    \t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n    \t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n    \t\t\t\t\t\tbindingsForPath.pop();\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// object is active, just swap with the last and pop\n\n    \t\t\t\t\tvar lastIndex = -- nObjects,\n    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n    \t\t\t\t\tobjects[ index ] = lastObject;\n    \t\t\t\t\tobjects.pop();\n\n    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n    \t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n    \t\t\t\t\t\tbindingsForPath.pop();\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} // cached or active\n\n    \t\t\t} // if object is known\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \t// Internal interface used by befriended PropertyBinding.Composite:\n\n    \tsubscribe_: function( path, parsedPath ) {\n    \t\t// returns an array of bindings for the given path that is changed\n    \t\t// according to the contained objects in the group\n\n    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n    \t\t\tindex = indicesByPath[ path ],\n    \t\t\tbindings = this._bindings;\n\n    \t\tif ( index !== undefined ) return bindings[ index ];\n\n    \t\tvar paths = this._paths,\n    \t\t\tparsedPaths = this._parsedPaths,\n    \t\t\tobjects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tbindingsForPath = new Array( nObjects );\n\n    \t\tindex = bindings.length;\n\n    \t\tindicesByPath[ path ] = index;\n\n    \t\tpaths.push( path );\n    \t\tparsedPaths.push( parsedPath );\n    \t\tbindings.push( bindingsForPath );\n\n    \t\tfor ( var i = nCachedObjects,\n    \t\t\t\tn = objects.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = objects[ i ];\n\n    \t\t\tbindingsForPath[ i ] =\n    \t\t\t\t\tnew PropertyBinding( object, path, parsedPath );\n\n    \t\t}\n\n    \t\treturn bindingsForPath;\n\n    \t},\n\n    \tunsubscribe_: function( path ) {\n    \t\t// tells the group to forget about a property path and no longer\n    \t\t// update the array previously obtained with 'subscribe_'\n\n    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n    \t\t\tindex = indicesByPath[ path ];\n\n    \t\tif ( index !== undefined ) {\n\n    \t\t\tvar paths = this._paths,\n    \t\t\t\tparsedPaths = this._parsedPaths,\n    \t\t\t\tbindings = this._bindings,\n    \t\t\t\tlastBindingsIndex = bindings.length - 1,\n    \t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n    \t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n    \t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n    \t\t\tbindings[ index ] = lastBindings;\n    \t\t\tbindings.pop();\n\n    \t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n    \t\t\tparsedPaths.pop();\n\n    \t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n    \t\t\tpaths.pop();\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     *\n     * Action provided by AnimationMixer for scheduling clip playback on specific\n     * objects.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     *\n     */\n\n    function AnimationAction( mixer, clip, localRoot ) {\n\n    \tthis._mixer = mixer;\n    \tthis._clip = clip;\n    \tthis._localRoot = localRoot || null;\n\n    \tvar tracks = clip.tracks,\n    \t\tnTracks = tracks.length,\n    \t\tinterpolants = new Array( nTracks );\n\n    \tvar interpolantSettings = {\n    \t\t\tendingStart: \tZeroCurvatureEnding,\n    \t\t\tendingEnd:\t\tZeroCurvatureEnding\n    \t};\n\n    \tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n    \t\tvar interpolant = tracks[ i ].createInterpolant( null );\n    \t\tinterpolants[ i ] = interpolant;\n    \t\tinterpolant.settings = interpolantSettings;\n\n    \t}\n\n    \tthis._interpolantSettings = interpolantSettings;\n\n    \tthis._interpolants = interpolants;\t// bound by the mixer\n\n    \t// inside: PropertyMixer (managed by the mixer)\n    \tthis._propertyBindings = new Array( nTracks );\n\n    \tthis._cacheIndex = null;\t\t\t// for the memory manager\n    \tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n    \tthis._timeScaleInterpolant = null;\n    \tthis._weightInterpolant = null;\n\n    \tthis.loop = LoopRepeat;\n    \tthis._loopCount = -1;\n\n    \t// global mixer time when the action is to be started\n    \t// it's set back to 'null' upon start of the action\n    \tthis._startTime = null;\n\n    \t// scaled local time of the action\n    \t// gets clamped or wrapped to 0..clip.duration according to loop\n    \tthis.time = 0;\n\n    \tthis.timeScale = 1;\n    \tthis._effectiveTimeScale = 1;\n\n    \tthis.weight = 1;\n    \tthis._effectiveWeight = 1;\n\n    \tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n    \tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n    \tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\n    \tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n    \tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n    \tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n    };\n\n    AnimationAction.prototype = {\n\n    \tconstructor: AnimationAction,\n\n    \t// State & Scheduling\n\n    \tplay: function() {\n\n    \t\tthis._mixer._activateAction( this );\n\n    \t\treturn this;\n\n    \t},\n\n    \tstop: function() {\n\n    \t\tthis._mixer._deactivateAction( this );\n\n    \t\treturn this.reset();\n\n    \t},\n\n    \treset: function() {\n\n    \t\tthis.paused = false;\n    \t\tthis.enabled = true;\n\n    \t\tthis.time = 0;\t\t\t// restart clip\n    \t\tthis._loopCount = -1;\t// forget previous loops\n    \t\tthis._startTime = null;\t// forget scheduling\n\n    \t\treturn this.stopFading().stopWarping();\n\n    \t},\n\n    \tisRunning: function() {\n\n    \t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n    \t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n    \t},\n\n    \t// return true when play has been called\n    \tisScheduled: function() {\n\n    \t\treturn this._mixer._isActiveAction( this );\n\n    \t},\n\n    \tstartAt: function( time ) {\n\n    \t\tthis._startTime = time;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetLoop: function( mode, repetitions ) {\n\n    \t\tthis.loop = mode;\n    \t\tthis.repetitions = repetitions;\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Weight\n\n    \t// set the weight stopping any scheduled fading\n    \t// although .enabled = false yields an effective weight of zero, this\n    \t// method does *not* change .enabled, because it would be confusing\n    \tsetEffectiveWeight: function( weight ) {\n\n    \t\tthis.weight = weight;\n\n    \t\t// note: same logic as when updated at runtime\n    \t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n    \t\treturn this.stopFading();\n\n    \t},\n\n    \t// return the weight considering fading and .enabled\n    \tgetEffectiveWeight: function() {\n\n    \t\treturn this._effectiveWeight;\n\n    \t},\n\n    \tfadeIn: function( duration ) {\n\n    \t\treturn this._scheduleFading( duration, 0, 1 );\n\n    \t},\n\n    \tfadeOut: function( duration ) {\n\n    \t\treturn this._scheduleFading( duration, 1, 0 );\n\n    \t},\n\n    \tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\n    \t\tfadeOutAction.fadeOut( duration );\n    \t\tthis.fadeIn( duration );\n\n    \t\tif( warp ) {\n\n    \t\t\tvar fadeInDuration = this._clip.duration,\n    \t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n    \t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n    \t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n    \t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n    \t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\n    \t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n    \t},\n\n    \tstopFading: function() {\n\n    \t\tvar weightInterpolant = this._weightInterpolant;\n\n    \t\tif ( weightInterpolant !== null ) {\n\n    \t\t\tthis._weightInterpolant = null;\n    \t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Time Scale Control\n\n    \t// set the weight stopping any scheduled warping\n    \t// although .paused = true yields an effective time scale of zero, this\n    \t// method does *not* change .paused, because it would be confusing\n    \tsetEffectiveTimeScale: function( timeScale ) {\n\n    \t\tthis.timeScale = timeScale;\n    \t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \t// return the time scale considering warping and .paused\n    \tgetEffectiveTimeScale: function() {\n\n    \t\treturn this._effectiveTimeScale;\n\n    \t},\n\n    \tsetDuration: function( duration ) {\n\n    \t\tthis.timeScale = this._clip.duration / duration;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \tsyncWith: function( action ) {\n\n    \t\tthis.time = action.time;\n    \t\tthis.timeScale = action.timeScale;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \thalt: function( duration ) {\n\n    \t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n    \t},\n\n    \twarp: function( startTimeScale, endTimeScale, duration ) {\n\n    \t\tvar mixer = this._mixer, now = mixer.time,\n    \t\t\tinterpolant = this._timeScaleInterpolant,\n\n    \t\t\ttimeScale = this.timeScale;\n\n    \t\tif ( interpolant === null ) {\n\n    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n    \t\t\tthis._timeScaleInterpolant = interpolant;\n\n    \t\t}\n\n    \t\tvar times = interpolant.parameterPositions,\n    \t\t\tvalues = interpolant.sampleValues;\n\n    \t\ttimes[ 0 ] = now;\n    \t\ttimes[ 1 ] = now + duration;\n\n    \t\tvalues[ 0 ] = startTimeScale / timeScale;\n    \t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n    \t\treturn this;\n\n    \t},\n\n    \tstopWarping: function() {\n\n    \t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n    \t\tif ( timeScaleInterpolant !== null ) {\n\n    \t\t\tthis._timeScaleInterpolant = null;\n    \t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Object Accessors\n\n    \tgetMixer: function() {\n\n    \t\treturn this._mixer;\n\n    \t},\n\n    \tgetClip: function() {\n\n    \t\treturn this._clip;\n\n    \t},\n\n    \tgetRoot: function() {\n\n    \t\treturn this._localRoot || this._mixer._root;\n\n    \t},\n\n    \t// Interna\n\n    \t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n    \t\t// called by the mixer\n\n    \t\tvar startTime = this._startTime;\n\n    \t\tif ( startTime !== null ) {\n\n    \t\t\t// check for scheduled start of action\n\n    \t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n    \t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n    \t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n    \t\t\t}\n\n    \t\t\t// start\n\n    \t\t\tthis._startTime = null; // unschedule\n    \t\t\tdeltaTime = timeDirection * timeRunning;\n\n    \t\t}\n\n    \t\t// apply time scale and advance time\n\n    \t\tdeltaTime *= this._updateTimeScale( time );\n    \t\tvar clipTime = this._updateTime( deltaTime );\n\n    \t\t// note: _updateTime may disable the action resulting in\n    \t\t// an effective weight of 0\n\n    \t\tvar weight = this._updateWeight( time );\n\n    \t\tif ( weight > 0 ) {\n\n    \t\t\tvar interpolants = this._interpolants;\n    \t\t\tvar propertyMixers = this._propertyBindings;\n\n    \t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n    \t\t\t\tinterpolants[ j ].evaluate( clipTime );\n    \t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_updateWeight: function( time ) {\n\n    \t\tvar weight = 0;\n\n    \t\tif ( this.enabled ) {\n\n    \t\t\tweight = this.weight;\n    \t\t\tvar interpolant = this._weightInterpolant;\n\n    \t\t\tif ( interpolant !== null ) {\n\n    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n    \t\t\t\tweight *= interpolantValue;\n\n    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n    \t\t\t\t\tthis.stopFading();\n\n    \t\t\t\t\tif ( interpolantValue === 0 ) {\n\n    \t\t\t\t\t\t// faded out, disable\n    \t\t\t\t\t\tthis.enabled = false;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis._effectiveWeight = weight;\n    \t\treturn weight;\n\n    \t},\n\n    \t_updateTimeScale: function( time ) {\n\n    \t\tvar timeScale = 0;\n\n    \t\tif ( ! this.paused ) {\n\n    \t\t\ttimeScale = this.timeScale;\n\n    \t\t\tvar interpolant = this._timeScaleInterpolant;\n\n    \t\t\tif ( interpolant !== null ) {\n\n    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n    \t\t\t\ttimeScale *= interpolantValue;\n\n    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n    \t\t\t\t\tthis.stopWarping();\n\n    \t\t\t\t\tif ( timeScale === 0 ) {\n\n    \t\t\t\t\t\t// motion has halted, pause\n    \t\t\t\t\t\tthis.paused = true;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// warp done - apply final time scale\n    \t\t\t\t\t\tthis.timeScale = timeScale;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis._effectiveTimeScale = timeScale;\n    \t\treturn timeScale;\n\n    \t},\n\n    \t_updateTime: function( deltaTime ) {\n\n    \t\tvar time = this.time + deltaTime;\n\n    \t\tif ( deltaTime === 0 ) return time;\n\n    \t\tvar duration = this._clip.duration,\n\n    \t\t\tloop = this.loop,\n    \t\t\tloopCount = this._loopCount;\n\n    \t\tif ( loop === LoopOnce ) {\n\n    \t\t\tif ( loopCount === -1 ) {\n    \t\t\t\t// just started\n\n    \t\t\t\tthis.loopCount = 0;\n    \t\t\t\tthis._setEndings( true, true, false );\n\n    \t\t\t}\n\n    \t\t\thandle_stop: {\n\n    \t\t\t\tif ( time >= duration ) {\n\n    \t\t\t\t\ttime = duration;\n\n    \t\t\t\t} else if ( time < 0 ) {\n\n    \t\t\t\t\ttime = 0;\n\n    \t\t\t\t} else break handle_stop;\n\n    \t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n    \t\t\t\telse this.enabled = false;\n\n    \t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\ttype: 'finished', action: this,\n    \t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n    \t\t\t\t} );\n\n    \t\t\t}\n\n    \t\t} else { // repetitive Repeat or PingPong\n\n    \t\t\tvar pingPong = ( loop === LoopPingPong );\n\n    \t\t\tif ( loopCount === -1 ) {\n    \t\t\t\t// just started\n\n    \t\t\t\tif ( deltaTime >= 0 ) {\n\n    \t\t\t\t\tloopCount = 0;\n\n    \t\t\t\t\tthis._setEndings(\n    \t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// when looping in reverse direction, the initial\n    \t\t\t\t\t// transition through zero counts as a repetition,\n    \t\t\t\t\t// so leave loopCount at -1\n\n    \t\t\t\t\tthis._setEndings(\n    \t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( time >= duration || time < 0 ) {\n    \t\t\t\t// wrap around\n\n    \t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n    \t\t\t\ttime -= duration * loopDelta;\n\n    \t\t\t\tloopCount += Math.abs( loopDelta );\n\n    \t\t\t\tvar pending = this.repetitions - loopCount;\n\n    \t\t\t\tif ( pending < 0 ) {\n    \t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n    \t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n    \t\t\t\t\telse this.enabled = false;\n\n    \t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n    \t\t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\t\ttype: 'finished', action: this,\n    \t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n    \t\t\t\t\t} );\n\n    \t\t\t\t} else {\n    \t\t\t\t\t// keep running\n\n    \t\t\t\t\tif ( pending === 0 ) {\n    \t\t\t\t\t\t// entering the last round\n\n    \t\t\t\t\t\tvar atStart = deltaTime < 0;\n    \t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tthis._loopCount = loopCount;\n\n    \t\t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n    \t\t\t\t// invert time for the \"pong round\"\n\n    \t\t\t\tthis.time = time;\n    \t\t\t\treturn duration - time;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.time = time;\n    \t\treturn time;\n\n    \t},\n\n    \t_setEndings: function( atStart, atEnd, pingPong ) {\n\n    \t\tvar settings = this._interpolantSettings;\n\n    \t\tif ( pingPong ) {\n\n    \t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n    \t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\n    \t\t} else {\n\n    \t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n    \t\t\tif ( atStart ) {\n\n    \t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n    \t\t\t} else {\n\n    \t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n    \t\t\t}\n\n    \t\t\tif ( atEnd ) {\n\n    \t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n    \t\t\t} else {\n\n    \t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_scheduleFading: function( duration, weightNow, weightThen ) {\n\n    \t\tvar mixer = this._mixer, now = mixer.time,\n    \t\t\tinterpolant = this._weightInterpolant;\n\n    \t\tif ( interpolant === null ) {\n\n    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n    \t\t\tthis._weightInterpolant = interpolant;\n\n    \t\t}\n\n    \t\tvar times = interpolant.parameterPositions,\n    \t\t\tvalues = interpolant.sampleValues;\n\n    \t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n    \t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     *\n     * Player for AnimationClips.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function AnimationMixer( root ) {\n\n    \tthis._root = root;\n    \tthis._initMemoryManager();\n    \tthis._accuIndex = 0;\n\n    \tthis.time = 0;\n\n    \tthis.timeScale = 1.0;\n\n    }\n\n    Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {\n\n    \t// return an action for a clip optionally using a custom root target\n    \t// object (this method allocates a lot of dynamic memory in case a\n    \t// previously unknown clip/root combination is specified)\n    \tclipAction: function( clip, optionalRoot ) {\n\n    \t\tvar root = optionalRoot || this._root,\n    \t\t\trootUuid = root.uuid,\n\n    \t\t\tclipObject = typeof clip === 'string' ?\n    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n    \t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n    \t\t\tprototypeAction = null;\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\tvar existingAction =\n    \t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n    \t\t\tif ( existingAction !== undefined ) {\n\n    \t\t\t\treturn existingAction;\n\n    \t\t\t}\n\n    \t\t\t// we know the clip, so we don't have to parse all\n    \t\t\t// the bindings again but can just copy\n    \t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n    \t\t\t// also, take the clip from the prototype action\n    \t\t\tif ( clipObject === null )\n    \t\t\t\tclipObject = prototypeAction._clip;\n\n    \t\t}\n\n    \t\t// clip must be known when specified via string\n    \t\tif ( clipObject === null ) return null;\n\n    \t\t// allocate all resources required to run it\n    \t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n    \t\tthis._bindAction( newAction, prototypeAction );\n\n    \t\t// and make the action known to the memory manager\n    \t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n    \t\treturn newAction;\n\n    \t},\n\n    \t// get an existing action\n    \texistingAction: function( clip, optionalRoot ) {\n\n    \t\tvar root = optionalRoot || this._root,\n    \t\t\trootUuid = root.uuid,\n\n    \t\t\tclipObject = typeof clip === 'string' ?\n    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n    \t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t},\n\n    \t// deactivates all previously scheduled actions\n    \tstopAllAction: function() {\n\n    \t\tvar actions = this._actions,\n    \t\t\tnActions = this._nActiveActions,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = this._nActiveBindings;\n\n    \t\tthis._nActiveActions = 0;\n    \t\tthis._nActiveBindings = 0;\n\n    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n    \t\t\tactions[ i ].reset();\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n    \t\t\tbindings[ i ].useCount = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// advance the time and update apply the animation\n    \tupdate: function( deltaTime ) {\n\n    \t\tdeltaTime *= this.timeScale;\n\n    \t\tvar actions = this._actions,\n    \t\t\tnActions = this._nActiveActions,\n\n    \t\t\ttime = this.time += deltaTime,\n    \t\t\ttimeDirection = Math.sign( deltaTime ),\n\n    \t\t\taccuIndex = this._accuIndex ^= 1;\n\n    \t\t// run active actions\n\n    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n    \t\t\tvar action = actions[ i ];\n\n    \t\t\tif ( action.enabled ) {\n\n    \t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// update scene graph\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tnBindings = this._nActiveBindings;\n\n    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n    \t\t\tbindings[ i ].apply( accuIndex );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// return this mixer's root target object\n    \tgetRoot: function() {\n\n    \t\treturn this._root;\n\n    \t},\n\n    \t// free all resources specific to a particular clip\n    \tuncacheClip: function( clip ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tclipUuid = clip.uuid,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\t// note: just calling _removeInactiveAction would mess up the\n    \t\t\t// iteration state and also require updating the state we can\n    \t\t\t// just throw away\n\n    \t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n    \t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar action = actionsToRemove[ i ];\n\n    \t\t\t\tthis._deactivateAction( action );\n\n    \t\t\t\tvar cacheIndex = action._cacheIndex,\n    \t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n    \t\t\t\taction._cacheIndex = null;\n    \t\t\t\taction._byClipCacheIndex = null;\n\n    \t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n    \t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n    \t\t\t\tactions.pop();\n\n    \t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n    \t\t\t}\n\n    \t\t\tdelete actionsByClip[ clipUuid ];\n\n    \t\t}\n\n    \t},\n\n    \t// free all resources specific to a particular root target object\n    \tuncacheRoot: function( root ) {\n\n    \t\tvar rootUuid = root.uuid,\n    \t\t\tactionsByClip = this._actionsByClip;\n\n    \t\tfor ( var clipUuid in actionsByClip ) {\n\n    \t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n    \t\t\t\taction = actionByRoot[ rootUuid ];\n\n    \t\t\tif ( action !== undefined ) {\n\n    \t\t\t\tthis._deactivateAction( action );\n    \t\t\t\tthis._removeInactiveAction( action );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n    \t\tif ( bindingByName !== undefined ) {\n\n    \t\t\tfor ( var trackName in bindingByName ) {\n\n    \t\t\t\tvar binding = bindingByName[ trackName ];\n    \t\t\t\tbinding.restoreOriginalState();\n    \t\t\t\tthis._removeInactiveBinding( binding );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t// remove a targeted clip from the cache\n    \tuncacheAction: function( clip, optionalRoot ) {\n\n    \t\tvar action = this.existingAction( clip, optionalRoot );\n\n    \t\tif ( action !== null ) {\n\n    \t\t\tthis._deactivateAction( action );\n    \t\t\tthis._removeInactiveAction( action );\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    // Implementation details:\n\n    Object.assign( AnimationMixer.prototype, {\n\n    \t_bindAction: function( action, prototypeAction ) {\n\n    \t\tvar root = action._localRoot || this._root,\n    \t\t\ttracks = action._clip.tracks,\n    \t\t\tnTracks = tracks.length,\n    \t\t\tbindings = action._propertyBindings,\n    \t\t\tinterpolants = action._interpolants,\n    \t\t\trootUuid = root.uuid,\n    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n    \t\tif ( bindingsByName === undefined ) {\n\n    \t\t\tbindingsByName = {};\n    \t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n    \t\t\tvar track = tracks[ i ],\n    \t\t\t\ttrackName = track.name,\n    \t\t\t\tbinding = bindingsByName[ trackName ];\n\n    \t\t\tif ( binding !== undefined ) {\n\n    \t\t\t\tbindings[ i ] = binding;\n\n    \t\t\t} else {\n\n    \t\t\t\tbinding = bindings[ i ];\n\n    \t\t\t\tif ( binding !== undefined ) {\n\n    \t\t\t\t\t// existing binding, make sure the cache knows\n\n    \t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n    \t\t\t\t\t\t++ binding.referenceCount;\n    \t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tcontinue;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar path = prototypeAction && prototypeAction.\n    \t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n    \t\t\t\tbinding = new PropertyMixer(\n    \t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n    \t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n    \t\t\t\t++ binding.referenceCount;\n    \t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n    \t\t\t\tbindings[ i ] = binding;\n\n    \t\t\t}\n\n    \t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n    \t\t}\n\n    \t},\n\n    \t_activateAction: function( action ) {\n\n    \t\tif ( ! this._isActiveAction( action ) ) {\n\n    \t\t\tif ( action._cacheIndex === null ) {\n\n    \t\t\t\t// this action has been forgotten by the cache, but the user\n    \t\t\t\t// appears to be still using it -> rebind\n\n    \t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n    \t\t\t\t\tclipUuid = action._clip.uuid,\n    \t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n    \t\t\t\tthis._bindAction( action,\n    \t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n    \t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n    \t\t\t}\n\n    \t\t\tvar bindings = action._propertyBindings;\n\n    \t\t\t// increment reference counts / sort out state\n    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar binding = bindings[ i ];\n\n    \t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n    \t\t\t\t\tthis._lendBinding( binding );\n    \t\t\t\t\tbinding.saveOriginalState();\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis._lendAction( action );\n\n    \t\t}\n\n    \t},\n\n    \t_deactivateAction: function( action ) {\n\n    \t\tif ( this._isActiveAction( action ) ) {\n\n    \t\t\tvar bindings = action._propertyBindings;\n\n    \t\t\t// decrement reference counts / sort out state\n    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar binding = bindings[ i ];\n\n    \t\t\t\tif ( -- binding.useCount === 0 ) {\n\n    \t\t\t\t\tbinding.restoreOriginalState();\n    \t\t\t\t\tthis._takeBackBinding( binding );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis._takeBackAction( action );\n\n    \t\t}\n\n    \t},\n\n    \t// Memory manager\n\n    \t_initMemoryManager: function() {\n\n    \t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n    \t\tthis._nActiveActions = 0;\n\n    \t\tthis._actionsByClip = {};\n    \t\t// inside:\n    \t\t// {\n    \t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n    \t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n    \t\t// }\n\n\n    \t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n    \t\tthis._nActiveBindings = 0;\n\n    \t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n    \t\tthis._controlInterpolants = []; // same game as above\n    \t\tthis._nActiveControlInterpolants = 0;\n\n    \t\tvar scope = this;\n\n    \t\tthis.stats = {\n\n    \t\t\tactions: {\n    \t\t\t\tget total() { return scope._actions.length; },\n    \t\t\t\tget inUse() { return scope._nActiveActions; }\n    \t\t\t},\n    \t\t\tbindings: {\n    \t\t\t\tget total() { return scope._bindings.length; },\n    \t\t\t\tget inUse() { return scope._nActiveBindings; }\n    \t\t\t},\n    \t\t\tcontrolInterpolants: {\n    \t\t\t\tget total() { return scope._controlInterpolants.length; },\n    \t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n    \t\t\t}\n\n    \t\t};\n\n    \t},\n\n    \t// Memory management for AnimationAction objects\n\n    \t_isActiveAction: function( action ) {\n\n    \t\tvar index = action._cacheIndex;\n    \t\treturn index !== null && index < this._nActiveActions;\n\n    \t},\n\n    \t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip === undefined ) {\n\n    \t\t\tactionsForClip = {\n\n    \t\t\t\tknownActions: [ action ],\n    \t\t\t\tactionByRoot: {}\n\n    \t\t\t};\n\n    \t\t\taction._byClipCacheIndex = 0;\n\n    \t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n    \t\t} else {\n\n    \t\t\tvar knownActions = actionsForClip.knownActions;\n\n    \t\t\taction._byClipCacheIndex = knownActions.length;\n    \t\t\tknownActions.push( action );\n\n    \t\t}\n\n    \t\taction._cacheIndex = actions.length;\n    \t\tactions.push( action );\n\n    \t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n    \t},\n\n    \t_removeInactiveAction: function( action ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n    \t\t\tcacheIndex = action._cacheIndex;\n\n    \t\tlastInactiveAction._cacheIndex = cacheIndex;\n    \t\tactions[ cacheIndex ] = lastInactiveAction;\n    \t\tactions.pop();\n\n    \t\taction._cacheIndex = null;\n\n\n    \t\tvar clipUuid = action._clip.uuid,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ],\n    \t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n    \t\t\tlastKnownAction =\n    \t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n    \t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n    \t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n    \t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n    \t\tknownActionsForClip.pop();\n\n    \t\taction._byClipCacheIndex = null;\n\n\n    \t\tvar actionByRoot = actionsForClip.actionByRoot,\n    \t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\n    \t\tdelete actionByRoot[ rootUuid ];\n\n    \t\tif ( knownActionsForClip.length === 0 ) {\n\n    \t\t\tdelete actionsByClip[ clipUuid ];\n\n    \t\t}\n\n    \t\tthis._removeInactiveBindingsForAction( action );\n\n    \t},\n\n    \t_removeInactiveBindingsForAction: function( action ) {\n\n    \t\tvar bindings = action._propertyBindings;\n    \t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tvar binding = bindings[ i ];\n\n    \t\t\tif ( -- binding.referenceCount === 0 ) {\n\n    \t\t\t\tthis._removeInactiveBinding( binding );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_lendAction: function( action ) {\n\n    \t\t// [ active actions |  inactive actions  ]\n    \t\t// [  active actions >| inactive actions ]\n    \t\t//                 s        a\n    \t\t//                  <-swap->\n    \t\t//                 a        s\n\n    \t\tvar actions = this._actions,\n    \t\t\tprevIndex = action._cacheIndex,\n\n    \t\t\tlastActiveIndex = this._nActiveActions ++,\n\n    \t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n    \t\taction._cacheIndex = lastActiveIndex;\n    \t\tactions[ lastActiveIndex ] = action;\n\n    \t\tfirstInactiveAction._cacheIndex = prevIndex;\n    \t\tactions[ prevIndex ] = firstInactiveAction;\n\n    \t},\n\n    \t_takeBackAction: function( action ) {\n\n    \t\t// [  active actions  | inactive actions ]\n    \t\t// [ active actions |< inactive actions  ]\n    \t\t//        a        s\n    \t\t//         <-swap->\n    \t\t//        s        a\n\n    \t\tvar actions = this._actions,\n    \t\t\tprevIndex = action._cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n    \t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n    \t\taction._cacheIndex = firstInactiveIndex;\n    \t\tactions[ firstInactiveIndex ] = action;\n\n    \t\tlastActiveAction._cacheIndex = prevIndex;\n    \t\tactions[ prevIndex ] = lastActiveAction;\n\n    \t},\n\n    \t// Memory management for PropertyMixer objects\n\n    \t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\n    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n    \t\t\tbindings = this._bindings;\n\n    \t\tif ( bindingByName === undefined ) {\n\n    \t\t\tbindingByName = {};\n    \t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n    \t\t}\n\n    \t\tbindingByName[ trackName ] = binding;\n\n    \t\tbinding._cacheIndex = bindings.length;\n    \t\tbindings.push( binding );\n\n    \t},\n\n    \t_removeInactiveBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tpropBinding = binding.binding,\n    \t\t\trootUuid = propBinding.rootNode.uuid,\n    \t\t\ttrackName = propBinding.path,\n    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n    \t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n    \t\t\tcacheIndex = binding._cacheIndex;\n\n    \t\tlastInactiveBinding._cacheIndex = cacheIndex;\n    \t\tbindings[ cacheIndex ] = lastInactiveBinding;\n    \t\tbindings.pop();\n\n    \t\tdelete bindingByName[ trackName ];\n\n    \t\tremove_empty_map: {\n\n    \t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\n    \t\t\tdelete bindingsByRoot[ rootUuid ];\n\n    \t\t}\n\n    \t},\n\n    \t_lendBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tprevIndex = binding._cacheIndex,\n\n    \t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n    \t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n    \t\tbinding._cacheIndex = lastActiveIndex;\n    \t\tbindings[ lastActiveIndex ] = binding;\n\n    \t\tfirstInactiveBinding._cacheIndex = prevIndex;\n    \t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n    \t},\n\n    \t_takeBackBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tprevIndex = binding._cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n    \t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n    \t\tbinding._cacheIndex = firstInactiveIndex;\n    \t\tbindings[ firstInactiveIndex ] = binding;\n\n    \t\tlastActiveBinding._cacheIndex = prevIndex;\n    \t\tbindings[ prevIndex ] = lastActiveBinding;\n\n    \t},\n\n\n    \t// Memory management of Interpolants for weight and time scale\n\n    \t_lendControlInterpolant: function() {\n\n    \t\tvar interpolants = this._controlInterpolants,\n    \t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n    \t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n    \t\tif ( interpolant === undefined ) {\n\n    \t\t\tinterpolant = new LinearInterpolant(\n    \t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n    \t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n    \t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n    \t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n    \t\t}\n\n    \t\treturn interpolant;\n\n    \t},\n\n    \t_takeBackControlInterpolant: function( interpolant ) {\n\n    \t\tvar interpolants = this._controlInterpolants,\n    \t\t\tprevIndex = interpolant.__cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n    \t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n    \t\tinterpolant.__cacheIndex = firstInactiveIndex;\n    \t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n    \t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n    \t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n    \t},\n\n    \t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Uniform( value ) {\n\n    \tif ( typeof value === 'string' ) {\n\n    \t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n    \t\tvalue = arguments[ 1 ];\n\n    \t}\n\n    \tthis.value = value;\n\n    \tthis.dynamic = false;\n\n    }\n\n    Uniform.prototype = {\n\n    \tconstructor: Uniform,\n\n    \tonUpdate: function ( callback ) {\n\n    \t\tthis.dynamic = true;\n    \t\tthis.onUpdateCallback = callback;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedBufferGeometry() {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'InstancedBufferGeometry';\n    \tthis.maxInstancedCount = undefined;\n\n    }\n\n    InstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;\n\n    InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\n    InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\n    \tthis.groups.push( {\n\n    \t\tstart: start,\n    \t\tcount: count,\n    \t\tinstances: instances\n\n    \t} );\n\n    };\n\n    InstancedBufferGeometry.prototype.copy = function ( source ) {\n\n    \tvar index = source.index;\n\n    \tif ( index !== null ) {\n\n    \t\tthis.setIndex( index.clone() );\n\n    \t}\n\n    \tvar attributes = source.attributes;\n\n    \tfor ( var name in attributes ) {\n\n    \t\tvar attribute = attributes[ name ];\n    \t\tthis.addAttribute( name, attribute.clone() );\n\n    \t}\n\n    \tvar groups = source.groups;\n\n    \tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\tvar group = groups[ i ];\n    \t\tthis.addGroup( group.start, group.count, group.instances );\n\n    \t}\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.data = interleavedBuffer;\n    \tthis.itemSize = itemSize;\n    \tthis.offset = offset;\n\n    \tthis.normalized = normalized === true;\n\n    }\n\n\n    InterleavedBufferAttribute.prototype = {\n\n    \tconstructor: InterleavedBufferAttribute,\n\n    \tisInterleavedBufferAttribute: true,\n\n    \tget count() {\n\n    \t\treturn this.data.count;\n\n    \t},\n\n    \tget array() {\n\n    \t\treturn this.data.array;\n\n    \t},\n\n    \tsetX: function ( index, x ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( index, y ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( index, z ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetW: function ( index, w ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetX: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n    \t},\n\n    \tgetY: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n    \t},\n\n    \tgetZ: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n    \t},\n\n    \tgetW: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n    \t},\n\n    \tsetXY: function ( index, x, y ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZ: function ( index, x, y, z ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n    \t\tthis.data.array[ index + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZW: function ( index, x, y, z, w ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n    \t\tthis.data.array[ index + 2 ] = z;\n    \t\tthis.data.array[ index + 3 ] = w;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InterleavedBuffer( array, stride ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.array = array;\n    \tthis.stride = stride;\n    \tthis.count = array !== undefined ? array.length / stride : 0;\n\n    \tthis.dynamic = false;\n    \tthis.updateRange = { offset: 0, count: - 1 };\n\n    \tthis.version = 0;\n\n    }\n\n    InterleavedBuffer.prototype = {\n\n    \tconstructor: InterleavedBuffer,\n\n    \tisInterleavedBuffer: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tsetDynamic: function ( value ) {\n\n    \t\tthis.dynamic = value;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.array = new source.array.constructor( source.array );\n    \t\tthis.count = source.count;\n    \t\tthis.stride = source.stride;\n    \t\tthis.dynamic = source.dynamic;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyAt: function ( index1, attribute, index2 ) {\n\n    \t\tindex1 *= this.stride;\n    \t\tindex2 *= attribute.stride;\n\n    \t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tset: function ( value, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.array.set( value, offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n    \tInterleavedBuffer.call( this, array, stride );\n\n    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\n    }\n\n    InstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );\n    InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;\n\n    InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\n    InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\n    \tInterleavedBuffer.prototype.copy.call( this, source );\n\n    \tthis.meshPerAttribute = source.meshPerAttribute;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\n    \tBufferAttribute.call( this, array, itemSize );\n\n    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\n    }\n\n    InstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n    InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;\n\n    InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\n    InstancedBufferAttribute.prototype.copy = function ( source ) {\n\n    \tBufferAttribute.prototype.copy.call( this, source );\n\n    \tthis.meshPerAttribute = source.meshPerAttribute;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author bhouston / http://clara.io/\n     * @author stephomi / http://stephaneginier.com/\n     */\n\n    function Raycaster( origin, direction, near, far ) {\n\n    \tthis.ray = new Ray( origin, direction );\n    \t// direction is assumed to be normalized (for accurate distance calculations)\n\n    \tthis.near = near || 0;\n    \tthis.far = far || Infinity;\n\n    \tthis.params = {\n    \t\tMesh: {},\n    \t\tLine: {},\n    \t\tLOD: {},\n    \t\tPoints: { threshold: 1 },\n    \t\tSprite: {}\n    \t};\n\n    \tObject.defineProperties( this.params, {\n    \t\tPointCloud: {\n    \t\t\tget: function () {\n    \t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n    \t\t\t\treturn this.Points;\n    \t\t\t}\n    \t\t}\n    \t} );\n\n    }\n\n    function ascSort( a, b ) {\n\n    \treturn a.distance - b.distance;\n\n    }\n\n    function intersectObject( object, raycaster, intersects, recursive ) {\n\n    \tif ( object.visible === false ) return;\n\n    \tobject.raycast( raycaster, intersects );\n\n    \tif ( recursive === true ) {\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    //\n\n    Raycaster.prototype = {\n\n    \tconstructor: Raycaster,\n\n    \tlinePrecision: 1,\n\n    \tset: function ( origin, direction ) {\n\n    \t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n    \t\tthis.ray.set( origin, direction );\n\n    \t},\n\n    \tsetFromCamera: function ( coords, camera ) {\n\n    \t\tif ( (camera && camera.isPerspectiveCamera) ) {\n\n    \t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n    \t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n    \t\t} else if ( (camera && camera.isOrthographicCamera) ) {\n\n    \t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n    \t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n    \t\t} else {\n\n    \t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n    \t\t}\n\n    \t},\n\n    \tintersectObject: function ( object, recursive ) {\n\n    \t\tvar intersects = [];\n\n    \t\tintersectObject( object, this, intersects, recursive );\n\n    \t\tintersects.sort( ascSort );\n\n    \t\treturn intersects;\n\n    \t},\n\n    \tintersectObjects: function ( objects, recursive ) {\n\n    \t\tvar intersects = [];\n\n    \t\tif ( Array.isArray( objects ) === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n    \t\t\treturn intersects;\n\n    \t\t}\n\n    \t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n    \t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n    \t\t}\n\n    \t\tintersects.sort( ascSort );\n\n    \t\treturn intersects;\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Clock( autoStart ) {\n\n    \tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n    \tthis.startTime = 0;\n    \tthis.oldTime = 0;\n    \tthis.elapsedTime = 0;\n\n    \tthis.running = false;\n\n    }\n\n    Clock.prototype = {\n\n    \tconstructor: Clock,\n\n    \tstart: function () {\n\n    \t\tthis.startTime = ( performance || Date ).now();\n\n    \t\tthis.oldTime = this.startTime;\n    \t\tthis.running = true;\n\n    \t},\n\n    \tstop: function () {\n\n    \t\tthis.getElapsedTime();\n    \t\tthis.running = false;\n\n    \t},\n\n    \tgetElapsedTime: function () {\n\n    \t\tthis.getDelta();\n    \t\treturn this.elapsedTime;\n\n    \t},\n\n    \tgetDelta: function () {\n\n    \t\tvar diff = 0;\n\n    \t\tif ( this.autoStart && ! this.running ) {\n\n    \t\t\tthis.start();\n\n    \t\t}\n\n    \t\tif ( this.running ) {\n\n    \t\t\tvar newTime = ( performance || Date ).now();\n\n    \t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n    \t\t\tthis.oldTime = newTime;\n\n    \t\t\tthis.elapsedTime += diff;\n\n    \t\t}\n\n    \t\treturn diff;\n\n    \t}\n\n    };\n\n    /**\n     * Spline from Tween.js, slightly optimized (and trashed)\n     * http://sole.github.com/tween.js/examples/05_spline.html\n     *\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Spline( points ) {\n\n    \tthis.points = points;\n\n    \tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n    \tpoint, intPoint, weight, w2, w3,\n    \tpa, pb, pc, pd;\n\n    \tthis.initFromArray = function ( a ) {\n\n    \t\tthis.points = [];\n\n    \t\tfor ( var i = 0; i < a.length; i ++ ) {\n\n    \t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\n    \t\t}\n\n    \t};\n\n    \tthis.getPoint = function ( k ) {\n\n    \t\tpoint = ( this.points.length - 1 ) * k;\n    \t\tintPoint = Math.floor( point );\n    \t\tweight = point - intPoint;\n\n    \t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n    \t\tc[ 1 ] = intPoint;\n    \t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n    \t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\n    \t\tpa = this.points[ c[ 0 ] ];\n    \t\tpb = this.points[ c[ 1 ] ];\n    \t\tpc = this.points[ c[ 2 ] ];\n    \t\tpd = this.points[ c[ 3 ] ];\n\n    \t\tw2 = weight * weight;\n    \t\tw3 = weight * w2;\n\n    \t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n    \t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n    \t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\n    \t\treturn v3;\n\n    \t};\n\n    \tthis.getControlPointsArray = function () {\n\n    \t\tvar i, p, l = this.points.length,\n    \t\t\tcoords = [];\n\n    \t\tfor ( i = 0; i < l; i ++ ) {\n\n    \t\t\tp = this.points[ i ];\n    \t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\n    \t\t}\n\n    \t\treturn coords;\n\n    \t};\n\n    \t// approximate length by summing linear segments\n\n    \tthis.getLength = function ( nSubDivisions ) {\n\n    \t\tvar i, index, nSamples, position,\n    \t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n    \t\t\toldPosition = new Vector3(),\n    \t\t\ttmpVec = new Vector3(),\n    \t\t\tchunkLengths = [],\n    \t\t\ttotalLength = 0;\n\n    \t\t// first point has 0 length\n\n    \t\tchunkLengths[ 0 ] = 0;\n\n    \t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\n    \t\tnSamples = this.points.length * nSubDivisions;\n\n    \t\toldPosition.copy( this.points[ 0 ] );\n\n    \t\tfor ( i = 1; i < nSamples; i ++ ) {\n\n    \t\t\tindex = i / nSamples;\n\n    \t\t\tposition = this.getPoint( index );\n    \t\t\ttmpVec.copy( position );\n\n    \t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\n    \t\t\toldPosition.copy( position );\n\n    \t\t\tpoint = ( this.points.length - 1 ) * index;\n    \t\t\tintPoint = Math.floor( point );\n\n    \t\t\tif ( intPoint !== oldIntPoint ) {\n\n    \t\t\t\tchunkLengths[ intPoint ] = totalLength;\n    \t\t\t\toldIntPoint = intPoint;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// last point ends with total length\n\n    \t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\n    \t\treturn { chunks: chunkLengths, total: totalLength };\n\n    \t};\n\n    \tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\n    \t\tvar i, j,\n    \t\t\tindex, indexCurrent, indexNext,\n    \t\t\trealDistance,\n    \t\t\tsampling, position,\n    \t\t\tnewpoints = [],\n    \t\t\ttmpVec = new Vector3(),\n    \t\t\tsl = this.getLength();\n\n    \t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\n    \t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\n    \t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n    \t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\n    \t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\n    \t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\n    \t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n    \t\t\tindexNext = i / ( this.points.length - 1 );\n\n    \t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\n    \t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\n    \t\t\t\tposition = this.getPoint( index );\n    \t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\n    \t\t\t}\n\n    \t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\n    \t\t}\n\n    \t\tthis.points = newpoints;\n\n    \t};\n\n    \t// Catmull-Rom\n\n    \tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\n    \t\tvar v0 = ( p2 - p0 ) * 0.5,\n    \t\t\tv1 = ( p3 - p1 ) * 0.5;\n\n    \t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n    \t}\n\n    }\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n     *\n     * The poles (phi) are at the positive and negative y axis.\n     * The equator starts at positive z.\n     */\n\n    function Spherical( radius, phi, theta ) {\n\n    \tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n    \tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n    \tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n    \treturn this;\n\n    }\n\n    Spherical.prototype = {\n\n    \tconstructor: Spherical,\n\n    \tset: function ( radius, phi, theta ) {\n\n    \t\tthis.radius = radius;\n    \t\tthis.phi = phi;\n    \t\tthis.theta = theta;\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( other ) {\n\n    \t\tthis.radius.copy( other.radius );\n    \t\tthis.phi.copy( other.phi );\n    \t\tthis.theta.copy( other.theta );\n\n    \t\treturn this;\n\n    \t},\n\n    \t// restrict phi to be betwee EPS and PI-EPS\n    \tmakeSafe: function() {\n\n    \t\tvar EPS = 0.000001;\n    \t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromVector3: function( vec3 ) {\n\n    \t\tthis.radius = vec3.length();\n\n    \t\tif ( this.radius === 0 ) {\n\n    \t\t\tthis.theta = 0;\n    \t\t\tthis.phi = 0;\n\n    \t\t} else {\n\n    \t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n    \t\t\tthis.phi = Math.acos( exports.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    };\n\n    /**\r\n     * @author alteredq / http://alteredqualia.com/\r\n     */\r\n\r\n    function MorphBlendMesh( geometry, material ) {\n\r\n    \tMesh.call( this, geometry, material );\r\n\r\n    \tthis.animationsMap = {};\r\n    \tthis.animationsList = [];\r\n\r\n    \t// prepare default animation\r\n    \t// (all frames played together in 1 second)\r\n\r\n    \tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n    \tvar name = \"__default\";\r\n\r\n    \tvar startFrame = 0;\r\n    \tvar endFrame = numFrames - 1;\r\n\r\n    \tvar fps = numFrames / 1;\r\n\r\n    \tthis.createAnimation( name, startFrame, endFrame, fps );\r\n    \tthis.setAnimationWeight( name, 1 );\r\n\r\n    }\r\n\r\n    MorphBlendMesh.prototype = Object.create( Mesh.prototype );\r\n    MorphBlendMesh.prototype.constructor = MorphBlendMesh;\r\n\r\n    MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n    \tvar animation = {\r\n\r\n    \t\tstart: start,\r\n    \t\tend: end,\r\n\r\n    \t\tlength: end - start + 1,\r\n\r\n    \t\tfps: fps,\r\n    \t\tduration: ( end - start ) / fps,\r\n\r\n    \t\tlastFrame: 0,\r\n    \t\tcurrentFrame: 0,\r\n\r\n    \t\tactive: false,\r\n\r\n    \t\ttime: 0,\r\n    \t\tdirection: 1,\r\n    \t\tweight: 1,\r\n\r\n    \t\tdirectionBackwards: false,\r\n    \t\tmirroredLoop: false\r\n\r\n    \t};\r\n\r\n    \tthis.animationsMap[ name ] = animation;\r\n    \tthis.animationsList.push( animation );\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n    \tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\r\n    \tvar firstAnimation, frameRanges = {};\r\n\r\n    \tvar geometry = this.geometry;\r\n\r\n    \tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n    \t\tvar morph = geometry.morphTargets[ i ];\r\n    \t\tvar chunks = morph.name.match( pattern );\r\n\r\n    \t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n    \t\t\tvar name = chunks[ 1 ];\r\n\r\n    \t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\r\n    \t\t\tvar range = frameRanges[ name ];\r\n\r\n    \t\t\tif ( i < range.start ) range.start = i;\r\n    \t\t\tif ( i > range.end ) range.end = i;\r\n\r\n    \t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n    \t\t}\r\n\r\n    \t}\r\n\r\n    \tfor ( var name in frameRanges ) {\r\n\r\n    \t\tvar range = frameRanges[ name ];\r\n    \t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n    \t}\r\n\r\n    \tthis.firstAnimation = firstAnimation;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.direction = 1;\r\n    \t\tanimation.directionBackwards = false;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.direction = - 1;\r\n    \t\tanimation.directionBackwards = true;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.fps = fps;\r\n    \t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.duration = duration;\r\n    \t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.weight = weight;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.time = time;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n    \tvar time = 0;\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\ttime = animation.time;\r\n\r\n    \t}\r\n\r\n    \treturn time;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n    \tvar duration = - 1;\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tduration = animation.duration;\r\n\r\n    \t}\r\n\r\n    \treturn duration;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.time = 0;\r\n    \t\tanimation.active = true;\r\n\r\n    \t} else {\r\n\r\n    \t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.active = false;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n    \tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n    \t\tvar animation = this.animationsList[ i ];\r\n\r\n    \t\tif ( ! animation.active ) continue;\r\n\r\n    \t\tvar frameTime = animation.duration / animation.length;\r\n\r\n    \t\tanimation.time += animation.direction * delta;\r\n\r\n    \t\tif ( animation.mirroredLoop ) {\r\n\r\n    \t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n    \t\t\t\tanimation.direction *= - 1;\r\n\r\n    \t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n    \t\t\t\t\tanimation.time = animation.duration;\r\n    \t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n    \t\t\t\t}\r\n\r\n    \t\t\t\tif ( animation.time < 0 ) {\r\n\r\n    \t\t\t\t\tanimation.time = 0;\r\n    \t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n    \t\t\t\t}\r\n\r\n    \t\t\t}\r\n\r\n    \t\t} else {\r\n\r\n    \t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n    \t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n    \t\t}\r\n\r\n    \t\tvar keyframe = animation.start + exports.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n    \t\tvar weight = animation.weight;\r\n\r\n    \t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n    \t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n    \t\t\tanimation.lastFrame = animation.currentFrame;\r\n    \t\t\tanimation.currentFrame = keyframe;\r\n\r\n    \t\t}\r\n\r\n    \t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n    \t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n    \t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n    \t\t} else {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\r\n    \t\t}\r\n\r\n    \t}\r\n\r\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function ImmediateRenderObject( material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.material = material;\n    \tthis.render = function ( renderCallback ) {};\n\n    }\n\n    ImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n    ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n    ImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function VertexNormalsHelper( object, size, hex, linewidth ) {\n\n    \tthis.object = object;\n\n    \tthis.size = ( size !== undefined ) ? size : 1;\n\n    \tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n    \t//\n\n    \tvar nNormals = 0;\n\n    \tvar objGeometry = this.object.geometry;\n\n    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\tnNormals = objGeometry.faces.length * 3;\n\n    \t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\n    \t\tnNormals = objGeometry.attributes.normal.count;\n\n    \t}\n\n    \t//\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\n    \tgeometry.addAttribute( 'position', positions );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n    \t//\n\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.update();\n\n    }\n\n    VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n    VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\n    VertexNormalsHelper.prototype.update = ( function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar normalMatrix = new Matrix3();\n\n    \treturn function update() {\n\n    \t\tvar keys = [ 'a', 'b', 'c' ];\n\n    \t\tthis.object.updateMatrixWorld( true );\n\n    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n    \t\tvar matrixWorld = this.object.matrixWorld;\n\n    \t\tvar position = this.geometry.attributes.position;\n\n    \t\t//\n\n    \t\tvar objGeometry = this.object.geometry;\n\n    \t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\t\tvar vertices = objGeometry.vertices;\n\n    \t\t\tvar faces = objGeometry.faces;\n\n    \t\t\tvar idx = 0;\n\n    \t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\t\tvar face = faces[ i ];\n\n    \t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n    \t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n    \t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n    \t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\t\t\tidx = idx + 1;\n\n    \t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\t\t\tidx = idx + 1;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\n    \t\t\tvar objPos = objGeometry.attributes.position;\n\n    \t\t\tvar objNorm = objGeometry.attributes.normal;\n\n    \t\t\tvar idx = 0;\n\n    \t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n    \t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n    \t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n    \t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n    \t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\t\tidx = idx + 1;\n\n    \t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\t\tidx = idx + 1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tposition.needsUpdate = true;\n\n    \t\treturn this;\n\n    \t};\n\n    }() );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function SpotLightHelper( light ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = [\n    \t\t0, 0, 0,   0,   0,   1,\n    \t\t0, 0, 0,   1,   0,   1,\n    \t\t0, 0, 0, - 1,   0,   1,\n    \t\t0, 0, 0,   0,   1,   1,\n    \t\t0, 0, 0,   0, - 1,   1\n    \t];\n\n    \tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n    \t\tvar p1 = ( i / l ) * Math.PI * 2;\n    \t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n    \t\tpositions.push(\n    \t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n    \t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n    \t\t);\n\n    \t}\n\n    \tgeometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { fog: false } );\n\n    \tthis.cone = new LineSegments( geometry, material );\n    \tthis.add( this.cone );\n\n    \tthis.update();\n\n    }\n\n    SpotLightHelper.prototype = Object.create( Object3D.prototype );\n    SpotLightHelper.prototype.constructor = SpotLightHelper;\n\n    SpotLightHelper.prototype.dispose = function () {\n\n    \tthis.cone.geometry.dispose();\n    \tthis.cone.material.dispose();\n\n    };\n\n    SpotLightHelper.prototype.update = function () {\n\n    \tvar vector = new Vector3();\n    \tvar vector2 = new Vector3();\n\n    \treturn function update() {\n\n    \t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n    \t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n    \t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n    \t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n    \t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n    \t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n    \t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t};\n\n    }();\n\n    /**\n     * @author Sean Griffin / http://twitter.com/sgrif\n     * @author Michael Guerrero / http://realitymeltdown.com\n     * @author mrdoob / http://mrdoob.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function SkeletonHelper( object ) {\n\n    \tthis.bones = this.getBoneList( object );\n\n    \tvar geometry = new Geometry();\n\n    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n    \t\tvar bone = this.bones[ i ];\n\n    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\tgeometry.vertices.push( new Vector3() );\n    \t\t\tgeometry.vertices.push( new Vector3() );\n    \t\t\tgeometry.colors.push( new Color( 0, 0, 1 ) );\n    \t\t\tgeometry.colors.push( new Color( 0, 1, 0 ) );\n\n    \t\t}\n\n    \t}\n\n    \tgeometry.dynamic = true;\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    \tthis.root = object;\n\n    \tthis.matrix = object.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.update();\n\n    }\n\n\n    SkeletonHelper.prototype = Object.create( LineSegments.prototype );\n    SkeletonHelper.prototype.constructor = SkeletonHelper;\n\n    SkeletonHelper.prototype.getBoneList = function( object ) {\n\n    \tvar boneList = [];\n\n    \tif ( (object && object.isBone) ) {\n\n    \t\tboneList.push( object );\n\n    \t}\n\n    \tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n    \t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\n    \t}\n\n    \treturn boneList;\n\n    };\n\n    SkeletonHelper.prototype.update = function () {\n\n    \tvar geometry = this.geometry;\n\n    \tvar matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );\n\n    \tvar boneMatrix = new Matrix4();\n\n    \tvar j = 0;\n\n    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n    \t\tvar bone = this.bones[ i ];\n\n    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n    \t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\n    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n    \t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\n    \t\t\tj += 2;\n\n    \t\t}\n\n    \t}\n\n    \tgeometry.verticesNeedUpdate = true;\n\n    \tgeometry.computeBoundingSphere();\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function PointLightHelper( light, sphereSize ) {\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n    \tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n    \tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \tMesh.call( this, geometry, material );\n\n    \tthis.matrix = this.light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \t/*\n    \tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n    \tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n    \tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n    \tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n    \tvar d = light.distance;\n\n    \tif ( d === 0.0 ) {\n\n    \t\tthis.lightDistance.visible = false;\n\n    \t} else {\n\n    \t\tthis.lightDistance.scale.set( d, d, d );\n\n    \t}\n\n    \tthis.add( this.lightDistance );\n    \t*/\n\n    }\n\n    PointLightHelper.prototype = Object.create( Mesh.prototype );\n    PointLightHelper.prototype.constructor = PointLightHelper;\n\n    PointLightHelper.prototype.dispose = function () {\n\n    \tthis.geometry.dispose();\n    \tthis.material.dispose();\n\n    };\n\n    PointLightHelper.prototype.update = function () {\n\n    \tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t/*\n    \tvar d = this.light.distance;\n\n    \tif ( d === 0.0 ) {\n\n    \t\tthis.lightDistance.visible = false;\n\n    \t} else {\n\n    \t\tthis.lightDistance.visible = true;\n    \t\tthis.lightDistance.scale.set( d, d, d );\n\n    \t}\n    \t*/\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function HemisphereLightHelper( light, sphereSize ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.colors = [ new Color(), new Color() ];\n\n    \tvar geometry = new SphereGeometry( sphereSize, 4, 2 );\n    \tgeometry.rotateX( - Math.PI / 2 );\n\n    \tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\n    \t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\n    \t}\n\n    \tvar material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );\n\n    \tthis.lightSphere = new Mesh( geometry, material );\n    \tthis.add( this.lightSphere );\n\n    \tthis.update();\n\n    }\n\n    HemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n    HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n    HemisphereLightHelper.prototype.dispose = function () {\n\n    \tthis.lightSphere.geometry.dispose();\n    \tthis.lightSphere.material.dispose();\n\n    };\n\n    HemisphereLightHelper.prototype.update = function () {\n\n    \tvar vector = new Vector3();\n\n    \treturn function update() {\n\n    \t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n    \t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\n    \t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n    \t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\n    \t};\n\n    }();\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function GridHelper( size, divisions, color1, color2 ) {\n\n    \tdivisions = divisions || 1;\n    \tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n    \tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n    \tvar center = divisions / 2;\n    \tvar step = ( size * 2 ) / divisions;\n    \tvar vertices = [], colors = [];\n\n    \tfor ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {\n\n    \t\tvertices.push( - size, 0, k, size, 0, k );\n    \t\tvertices.push( k, 0, - size, k, 0, size );\n\n    \t\tvar color = i === center ? color1 : color2;\n\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n\n    \t}\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );\n    \tgeometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    }\n\n    GridHelper.prototype = Object.create( LineSegments.prototype );\n    GridHelper.prototype.constructor = GridHelper;\n\n    GridHelper.prototype.setColors = function () {\n\n    \tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function FaceNormalsHelper( object, size, hex, linewidth ) {\n\n    \t// FaceNormalsHelper only supports THREE.Geometry\n\n    \tthis.object = object;\n\n    \tthis.size = ( size !== undefined ) ? size : 1;\n\n    \tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n    \t//\n\n    \tvar nNormals = 0;\n\n    \tvar objGeometry = this.object.geometry;\n\n    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\tnNormals = objGeometry.faces.length;\n\n    \t} else {\n\n    \t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n    \t}\n\n    \t//\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\n    \tgeometry.addAttribute( 'position', positions );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n    \t//\n\n    \tthis.matrixAutoUpdate = false;\n    \tthis.update();\n\n    }\n\n    FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n    FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\n    FaceNormalsHelper.prototype.update = ( function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar normalMatrix = new Matrix3();\n\n    \treturn function update() {\n\n    \t\tthis.object.updateMatrixWorld( true );\n\n    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n    \t\tvar matrixWorld = this.object.matrixWorld;\n\n    \t\tvar position = this.geometry.attributes.position;\n\n    \t\t//\n\n    \t\tvar objGeometry = this.object.geometry;\n\n    \t\tvar vertices = objGeometry.vertices;\n\n    \t\tvar faces = objGeometry.faces;\n\n    \t\tvar idx = 0;\n\n    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tvar normal = face.normal;\n\n    \t\t\tv1.copy( vertices[ face.a ] )\n    \t\t\t\t.add( vertices[ face.b ] )\n    \t\t\t\t.add( vertices[ face.c ] )\n    \t\t\t\t.divideScalar( 3 )\n    \t\t\t\t.applyMatrix4( matrixWorld );\n\n    \t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\tidx = idx + 1;\n\n    \t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\tidx = idx + 1;\n\n    \t\t}\n\n    \t\tposition.needsUpdate = true;\n\n    \t\treturn this;\n\n    \t};\n\n    }() );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function DirectionalLightHelper( light, size ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tif ( size === undefined ) size = 1;\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( [\n    \t\t- size,   size, 0,\n    \t\t  size,   size, 0,\n    \t\t  size, - size, 0,\n    \t\t- size, - size, 0,\n    \t\t- size,   size, 0\n    \t], 3 ) );\n\n    \tvar material = new LineBasicMaterial( { fog: false } );\n\n    \tthis.add( new Line( geometry, material ) );\n\n    \tgeometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n    \tthis.add( new Line( geometry, material ));\n\n    \tthis.update();\n\n    }\n\n    DirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n    DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n    DirectionalLightHelper.prototype.dispose = function () {\n\n    \tvar lightPlane = this.children[ 0 ];\n    \tvar targetLine = this.children[ 1 ];\n\n    \tlightPlane.geometry.dispose();\n    \tlightPlane.material.dispose();\n    \ttargetLine.geometry.dispose();\n    \ttargetLine.material.dispose();\n\n    };\n\n    DirectionalLightHelper.prototype.update = function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar v3 = new Vector3();\n\n    \treturn function update() {\n\n    \t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n    \t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n    \t\tv3.subVectors( v2, v1 );\n\n    \t\tvar lightPlane = this.children[ 0 ];\n    \t\tvar targetLine = this.children[ 1 ];\n\n    \t\tlightPlane.lookAt( v3 );\n    \t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t\ttargetLine.lookAt( v3 );\n    \t\ttargetLine.scale.z = v3.length();\n\n    \t};\n\n    }();\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     *\t- shows frustum, line of sight and up of the camera\n     *\t- suitable for fast updates\n     * \t- based on frustum visualization in lightgl.js shadowmap example\n     *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n     */\n\n    function CameraHelper( camera ) {\n\n    \tvar geometry = new Geometry();\n    \tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n    \tvar pointMap = {};\n\n    \t// colors\n\n    \tvar hexFrustum = 0xffaa00;\n    \tvar hexCone = 0xff0000;\n    \tvar hexUp = 0x00aaff;\n    \tvar hexTarget = 0xffffff;\n    \tvar hexCross = 0x333333;\n\n    \t// near\n\n    \taddLine( \"n1\", \"n2\", hexFrustum );\n    \taddLine( \"n2\", \"n4\", hexFrustum );\n    \taddLine( \"n4\", \"n3\", hexFrustum );\n    \taddLine( \"n3\", \"n1\", hexFrustum );\n\n    \t// far\n\n    \taddLine( \"f1\", \"f2\", hexFrustum );\n    \taddLine( \"f2\", \"f4\", hexFrustum );\n    \taddLine( \"f4\", \"f3\", hexFrustum );\n    \taddLine( \"f3\", \"f1\", hexFrustum );\n\n    \t// sides\n\n    \taddLine( \"n1\", \"f1\", hexFrustum );\n    \taddLine( \"n2\", \"f2\", hexFrustum );\n    \taddLine( \"n3\", \"f3\", hexFrustum );\n    \taddLine( \"n4\", \"f4\", hexFrustum );\n\n    \t// cone\n\n    \taddLine( \"p\", \"n1\", hexCone );\n    \taddLine( \"p\", \"n2\", hexCone );\n    \taddLine( \"p\", \"n3\", hexCone );\n    \taddLine( \"p\", \"n4\", hexCone );\n\n    \t// up\n\n    \taddLine( \"u1\", \"u2\", hexUp );\n    \taddLine( \"u2\", \"u3\", hexUp );\n    \taddLine( \"u3\", \"u1\", hexUp );\n\n    \t// target\n\n    \taddLine( \"c\", \"t\", hexTarget );\n    \taddLine( \"p\", \"c\", hexCross );\n\n    \t// cross\n\n    \taddLine( \"cn1\", \"cn2\", hexCross );\n    \taddLine( \"cn3\", \"cn4\", hexCross );\n\n    \taddLine( \"cf1\", \"cf2\", hexCross );\n    \taddLine( \"cf3\", \"cf4\", hexCross );\n\n    \tfunction addLine( a, b, hex ) {\n\n    \t\taddPoint( a, hex );\n    \t\taddPoint( b, hex );\n\n    \t}\n\n    \tfunction addPoint( id, hex ) {\n\n    \t\tgeometry.vertices.push( new Vector3() );\n    \t\tgeometry.colors.push( new Color( hex ) );\n\n    \t\tif ( pointMap[ id ] === undefined ) {\n\n    \t\t\tpointMap[ id ] = [];\n\n    \t\t}\n\n    \t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\n    \t}\n\n    \tLineSegments.call( this, geometry, material );\n\n    \tthis.camera = camera;\n    \tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n    \tthis.matrix = camera.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.pointMap = pointMap;\n\n    \tthis.update();\n\n    }\n\n    CameraHelper.prototype = Object.create( LineSegments.prototype );\n    CameraHelper.prototype.constructor = CameraHelper;\n\n    CameraHelper.prototype.update = function () {\n\n    \tvar geometry, pointMap;\n\n    \tvar vector = new Vector3();\n    \tvar camera = new Camera();\n\n    \tfunction setPoint( point, x, y, z ) {\n\n    \t\tvector.set( x, y, z ).unproject( camera );\n\n    \t\tvar points = pointMap[ point ];\n\n    \t\tif ( points !== undefined ) {\n\n    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \treturn function update() {\n\n    \t\tgeometry = this.geometry;\n    \t\tpointMap = this.pointMap;\n\n    \t\tvar w = 1, h = 1;\n\n    \t\t// we need just camera projection matrix\n    \t\t// world matrix must be identity\n\n    \t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n    \t\t// center / target\n\n    \t\tsetPoint( \"c\", 0, 0, - 1 );\n    \t\tsetPoint( \"t\", 0, 0,  1 );\n\n    \t\t// near\n\n    \t\tsetPoint( \"n1\", - w, - h, - 1 );\n    \t\tsetPoint( \"n2\",   w, - h, - 1 );\n    \t\tsetPoint( \"n3\", - w,   h, - 1 );\n    \t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n    \t\t// far\n\n    \t\tsetPoint( \"f1\", - w, - h, 1 );\n    \t\tsetPoint( \"f2\",   w, - h, 1 );\n    \t\tsetPoint( \"f3\", - w,   h, 1 );\n    \t\tsetPoint( \"f4\",   w,   h, 1 );\n\n    \t\t// up\n\n    \t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n    \t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n    \t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n    \t\t// cross\n\n    \t\tsetPoint( \"cf1\", - w,   0, 1 );\n    \t\tsetPoint( \"cf2\",   w,   0, 1 );\n    \t\tsetPoint( \"cf3\",   0, - h, 1 );\n    \t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n    \t\tsetPoint( \"cn1\", - w,   0, - 1 );\n    \t\tsetPoint( \"cn2\",   w,   0, - 1 );\n    \t\tsetPoint( \"cn3\",   0, - h, - 1 );\n    \t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n    \t\tgeometry.verticesNeedUpdate = true;\n\n    \t};\n\n    }();\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    // a helper to show the world-axis-aligned bounding box for an object\n\n    function BoundingBoxHelper( object, hex ) {\n\n    \tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\n    \tthis.object = object;\n\n    \tthis.box = new Box3();\n\n    \tMesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );\n\n    }\n\n    BoundingBoxHelper.prototype = Object.create( Mesh.prototype );\n    BoundingBoxHelper.prototype.constructor = BoundingBoxHelper;\n\n    BoundingBoxHelper.prototype.update = function () {\n\n    \tthis.box.setFromObject( this.object );\n\n    \tthis.box.size( this.scale );\n\n    \tthis.box.getCenter( this.position );\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BoxHelper( object, color ) {\n\n    \tif ( color === undefined ) color = 0xffff00;\n\n    \tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n    \tvar positions = new Float32Array( 8 * 3 );\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n    \tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n    \tif ( object !== undefined ) {\n\n    \t\tthis.update( object );\n\n    \t}\n\n    }\n\n    BoxHelper.prototype = Object.create( LineSegments.prototype );\n    BoxHelper.prototype.constructor = BoxHelper;\n\n    BoxHelper.prototype.update = ( function () {\n\n    \tvar box = new Box3();\n\n    \treturn function update( object ) {\n\n    \t\tif ( (object && object.isBox3) ) {\n\n    \t\t\tbox.copy( object );\n\n    \t\t} else {\n\n    \t\t\tbox.setFromObject( object );\n\n    \t\t}\n\n    \t\tif ( box.isEmpty() ) return;\n\n    \t\tvar min = box.min;\n    \t\tvar max = box.max;\n\n    \t\t/*\n    \t\t  5____4\n    \t\t1/___0/|\n    \t\t| 6__|_7\n    \t\t2/___3/\n\n    \t\t0: max.x, max.y, max.z\n    \t\t1: min.x, max.y, max.z\n    \t\t2: min.x, min.y, max.z\n    \t\t3: max.x, min.y, max.z\n    \t\t4: max.x, max.y, min.z\n    \t\t5: min.x, max.y, min.z\n    \t\t6: min.x, min.y, min.z\n    \t\t7: max.x, min.y, min.z\n    \t\t*/\n\n    \t\tvar position = this.geometry.attributes.position;\n    \t\tvar array = position.array;\n\n    \t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n    \t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n    \t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n    \t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n    \t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n    \t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n    \t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n    \t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n    \t\tposition.needsUpdate = true;\n\n    \t\tthis.geometry.computeBoundingSphere();\n\n    \t};\n\n    } )();\n\n    var lineGeometry = new BufferGeometry();\n    lineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n    var coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n    coneGeometry.translate( 0, - 0.5, 0 );\n\n    function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n    \t// dir is assumed to be normalized\n\n    \tObject3D.call( this );\n\n    \tif ( color === undefined ) color = 0xffff00;\n    \tif ( length === undefined ) length = 1;\n    \tif ( headLength === undefined ) headLength = 0.2 * length;\n    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n    \tthis.position.copy( origin );\n\n    \tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n    \tthis.line.matrixAutoUpdate = false;\n    \tthis.add( this.line );\n\n    \tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n    \tthis.cone.matrixAutoUpdate = false;\n    \tthis.add( this.cone );\n\n    \tthis.setDirection( dir );\n    \tthis.setLength( length, headLength, headWidth );\n\n    }\n\n    ArrowHelper.prototype = Object.create( Object3D.prototype );\n    ArrowHelper.prototype.constructor = ArrowHelper;\n\n    ArrowHelper.prototype.setDirection = ( function () {\n\n    \tvar axis = new Vector3();\n    \tvar radians;\n\n    \treturn function setDirection( dir ) {\n\n    \t\t// dir is assumed to be normalized\n\n    \t\tif ( dir.y > 0.99999 ) {\n\n    \t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n    \t\t} else if ( dir.y < - 0.99999 ) {\n\n    \t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n    \t\t} else {\n\n    \t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n    \t\t\tradians = Math.acos( dir.y );\n\n    \t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n    \t\t}\n\n    \t};\n\n    }() );\n\n    ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n    \tif ( headLength === undefined ) headLength = 0.2 * length;\n    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n    \tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n    \tthis.line.updateMatrix();\n\n    \tthis.cone.scale.set( headWidth, headLength, headWidth );\n    \tthis.cone.position.y = length;\n    \tthis.cone.updateMatrix();\n\n    };\n\n    ArrowHelper.prototype.setColor = function ( color ) {\n\n    \tthis.line.material.color.copy( color );\n    \tthis.cone.material.color.copy( color );\n\n    };\n\n    /**\n     * @author sroucheray / http://sroucheray.org/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AxisHelper( size ) {\n\n    \tsize = size || 1;\n\n    \tvar vertices = new Float32Array( [\n    \t\t0, 0, 0,  size, 0, 0,\n    \t\t0, 0, 0,  0, size, 0,\n    \t\t0, 0, 0,  0, 0, size\n    \t] );\n\n    \tvar colors = new Float32Array( [\n    \t\t1, 0, 0,  1, 0.6, 0,\n    \t\t0, 1, 0,  0.6, 1, 0,\n    \t\t0, 0, 1,  0, 0.6, 1\n    \t] );\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    }\n\n    AxisHelper.prototype = Object.create( LineSegments.prototype );\n    AxisHelper.prototype.constructor = AxisHelper;\n\n    /**\n     * @author zz85 https://github.com/zz85\n     *\n     * Centripetal CatmullRom Curve - which is useful for avoiding\n     * cusps and self-intersections in non-uniform catmull rom curves.\n     * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n     *\n     * curve.type accepts centripetal(default), chordal and catmullrom\n     * curve.tension is used for catmullrom which defaults to 0.5\n     */\n\n    exports.CatmullRomCurve3 = ( function() {\n\n    \tvar\n    \t\ttmp = new Vector3(),\n    \t\tpx = new CubicPoly(),\n    \t\tpy = new CubicPoly(),\n    \t\tpz = new CubicPoly();\n\n    \t/*\n    \tBased on an optimized c++ solution in\n    \t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n    \t - http://ideone.com/NoEbVM\n\n    \tThis CubicPoly class could be used for reusing some variables and calculations,\n    \tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n    \twhich can be placed in CurveUtils.\n    \t*/\n\n    \tfunction CubicPoly() {\n\n    \t}\n\n    \t/*\n    \t * Compute coefficients for a cubic polynomial\n    \t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n    \t * such that\n    \t *   p(0) = x0, p(1) = x1\n    \t *  and\n    \t *   p'(0) = t0, p'(1) = t1.\n    \t */\n    \tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\n    \t\tthis.c0 = x0;\n    \t\tthis.c1 = t0;\n    \t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n    \t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n    \t};\n\n    \tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n    \t\t// compute tangents when parameterized in [t1,t2]\n    \t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n    \t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n    \t\t// rescale tangents for parametrization in [0,1]\n    \t\tt1 *= dt1;\n    \t\tt2 *= dt1;\n\n    \t\t// initCubicPoly\n    \t\tthis.init( x1, x2, t1, t2 );\n\n    \t};\n\n    \t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n    \tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\n    \t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n    \t};\n\n    \tCubicPoly.prototype.calc = function( t ) {\n\n    \t\tvar t2 = t * t;\n    \t\tvar t3 = t2 * t;\n    \t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\n    \t};\n\n    \t// Subclass Three.js curve\n    \treturn Curve.create(\n\n    \t\tfunction ( p /* array of Vector3 */ ) {\n\n    \t\t\tthis.points = p || [];\n    \t\t\tthis.closed = false;\n\n    \t\t},\n\n    \t\tfunction ( t ) {\n\n    \t\t\tvar points = this.points,\n    \t\t\t\tpoint, intPoint, weight, l;\n\n    \t\t\tl = points.length;\n\n    \t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\n    \t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n    \t\t\tintPoint = Math.floor( point );\n    \t\t\tweight = point - intPoint;\n\n    \t\t\tif ( this.closed ) {\n\n    \t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n    \t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n    \t\t\t\tintPoint = l - 2;\n    \t\t\t\tweight = 1;\n\n    \t\t\t}\n\n    \t\t\tvar p0, p1, p2, p3; // 4 points\n\n    \t\t\tif ( this.closed || intPoint > 0 ) {\n\n    \t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// extrapolate first point\n    \t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n    \t\t\t\tp0 = tmp;\n\n    \t\t\t}\n\n    \t\t\tp1 = points[ intPoint % l ];\n    \t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n    \t\t\tif ( this.closed || intPoint + 2 < l ) {\n\n    \t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// extrapolate last point\n    \t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n    \t\t\t\tp3 = tmp;\n\n    \t\t\t}\n\n    \t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\n    \t\t\t\t// init Centripetal / Chordal Catmull-Rom\n    \t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n    \t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n    \t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n    \t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n    \t\t\t\t// safety check for repeated points\n    \t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n    \t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n    \t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n    \t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n    \t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n    \t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n    \t\t\t} else if ( this.type === 'catmullrom' ) {\n\n    \t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n    \t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n    \t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n    \t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\n    \t\t\t}\n\n    \t\t\tvar v = new Vector3(\n    \t\t\t\tpx.calc( weight ),\n    \t\t\t\tpy.calc( weight ),\n    \t\t\t\tpz.calc( weight )\n    \t\t\t);\n\n    \t\t\treturn v;\n\n    \t\t}\n\n    \t);\n\n    } )();\n\n    /**************************************************************\n     *\tClosed Spline 3D curve\n     **************************************************************/\n\n\n    function ClosedSplineCurve3( points ) {\n\n    \tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\n    \texports.CatmullRomCurve3.call( this, points );\n    \tthis.type = 'catmullrom';\n    \tthis.closed = true;\n\n    }\n\n    ClosedSplineCurve3.prototype = Object.create( exports.CatmullRomCurve3.prototype );\n\n    /**************************************************************\n     *\tSpline 3D curve\n     **************************************************************/\n\n\n    var SplineCurve3 = Curve.create(\n\n    \tfunction ( points /* array of Vector3 */ ) {\n\n    \t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n    \t\tthis.points = ( points === undefined ) ? [] : points;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar points = this.points;\n    \t\tvar point = ( points.length - 1 ) * t;\n\n    \t\tvar intPoint = Math.floor( point );\n    \t\tvar weight = point - intPoint;\n\n    \t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n    \t\tvar point1 = points[ intPoint ];\n    \t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n    \t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n    \t\tvar interpolate = exports.CurveUtils.interpolate;\n\n    \t\treturn new Vector3(\n    \t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n    \t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n    \t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tCubic Bezier 3D curve\n     **************************************************************/\n\n    exports.CubicBezierCurve3 = Curve.create(\n\n    \tfunction ( v0, v1, v2, v3 ) {\n\n    \t\tthis.v0 = v0;\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n    \t\tthis.v3 = v3;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar b3 = exports.ShapeUtils.b3;\n\n    \t\treturn new Vector3(\n    \t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n    \t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tQuadratic Bezier 3D curve\n     **************************************************************/\n\n    exports.QuadraticBezierCurve3 = Curve.create(\n\n    \tfunction ( v0, v1, v2 ) {\n\n    \t\tthis.v0 = v0;\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar b2 = exports.ShapeUtils.b2;\t\t\n\n    \t\treturn new Vector3(\n    \t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n    \t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tLine3D\n     **************************************************************/\n\n    exports.LineCurve3 = Curve.create(\n\n    \tfunction ( v1, v2 ) {\n\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tif ( t === 1 ) {\n\n    \t\t\treturn this.v2.clone();\n\n    \t\t}\n\n    \t\tvar vector = new Vector3();\n\n    \t\tvector.subVectors( this.v2, this.v1 ); // diff\n    \t\tvector.multiplyScalar( t );\n    \t\tvector.add( this.v1 );\n\n    \t\treturn vector;\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tArc curve\n     **************************************************************/\n\n    function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n    }\n\n    ArcCurve.prototype = Object.create( EllipseCurve.prototype );\n    ArcCurve.prototype.constructor = ArcCurve;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    exports.SceneUtils = {\n\n    \tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n    \t\tvar group = new Group();\n\n    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n    \t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\n    \t\t}\n\n    \t\treturn group;\n\n    \t},\n\n    \tdetach: function ( child, parent, scene ) {\n\n    \t\tchild.applyMatrix( parent.matrixWorld );\n    \t\tparent.remove( child );\n    \t\tscene.add( child );\n\n    \t},\n\n    \tattach: function ( child, scene, parent ) {\n\n    \t\tvar matrixWorldInverse = new Matrix4();\n    \t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n    \t\tchild.applyMatrix( matrixWorldInverse );\n\n    \t\tscene.remove( child );\n    \t\tparent.add( child );\n\n    \t}\n\n    };\n\n    function Face4 ( a, b, c, d, normal, color, materialIndex ) {\n    \tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n    \treturn new Face3( a, b, c, normal, color, materialIndex );\n    }\n\n    var LineStrip = 0;\n\n    var LinePieces = 1;\n\n    function PointCloud ( geometry, material ) {\n    \tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n    \treturn new Points( geometry, material );\n    }\n\n    function ParticleSystem ( geometry, material ) {\n    \tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n    \treturn new Points( geometry, material );\n    }\n\n    function PointCloudMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function ParticleBasicMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function ParticleSystemMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function Vertex ( x, y, z ) {\n    \tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n    \treturn new Vector3( x, y, z );\n    }\n\n    //\n\n    function EdgesHelper( object, hex ) {\n    \tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n    \treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n    }\n\n    function WireframeHelper( object, hex ) {\n    \tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n    \treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n    }\n\n    //\n\n    Object.assign( Box2.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t},\n    \tempty: function () {\n    \t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n    \t\treturn this.isEmpty();\n    \t},\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tsize: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n    \t\treturn this.getSize( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Box3.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t},\n    \tempty: function () {\n    \t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n    \t\treturn this.isEmpty();\n    \t},\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tisIntersectionSphere: function ( sphere ) {\n    \t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n    \t\treturn this.intersectsSphere( sphere );\n    \t},\n    \tsize: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n    \t\treturn this.getSize( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Line3.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Matrix3.prototype, {\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n    \t\treturn vector.applyMatrix3( this );\n    \t},\n    \tmultiplyVector3Array: function ( a ) {\n    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n    \t\treturn this.applyToVector3Array( a );\n    \t}\n    } );\n\n    Object.assign( Matrix4.prototype, {\n    \textractPosition: function ( m ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n    \t\treturn this.copyPosition( m );\n    \t},\n    \tsetRotationFromQuaternion: function ( q ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n    \t\treturn this.makeRotationFromQuaternion( q );\n    \t},\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n    \t\treturn vector.applyProjection( this );\n    \t},\n    \tmultiplyVector4: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n    \t\treturn vector.applyMatrix4( this );\n    \t},\n    \tmultiplyVector3Array: function ( a ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n    \t\treturn this.applyToVector3Array( a );\n    \t},\n    \trotateAxis: function ( v ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n    \t\tv.transformDirection( this );\n    \t},\n    \tcrossVector: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n    \t\treturn vector.applyMatrix4( this );\n    \t},\n    \ttranslate: function ( v ) {\n    \t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n    \t},\n    \trotateX: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n    \t},\n    \trotateY: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n    \t},\n    \trotateZ: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n    \t},\n    \trotateByAxis: function ( axis, angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n    \t}\n    } );\n\n    Object.assign( Plane.prototype, {\n    \tisIntersectionLine: function ( line ) {\n    \t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n    \t\treturn this.intersectsLine( line );\n    \t}\n    } );\n\n    Object.assign( Quaternion.prototype, {\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n    \t\treturn vector.applyQuaternion( this );\n    \t}\n    } );\n\n    Object.assign( Ray.prototype, {\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tisIntersectionPlane: function ( plane ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n    \t\treturn this.intersectsPlane( plane );\n    \t},\n    \tisIntersectionSphere: function ( sphere ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n    \t\treturn this.intersectsSphere( sphere );\n    \t}\n    } );\n\n    Object.assign( Shape.prototype, {\n    \textrude: function ( options ) {\n    \t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n    \t\treturn new ExtrudeGeometry( this, options );\n    \t},\n    \tmakeGeometry: function ( options ) {\n    \t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n    \t\treturn new ShapeGeometry( this, options );\n    \t}\n    } );\n\n    Object.assign( Vector3.prototype, {\n    \tsetEulerFromRotationMatrix: function () {\n    \t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n    \t},\n    \tsetEulerFromQuaternion: function () {\n    \t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n    \t},\n    \tgetPositionFromMatrix: function ( m ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n    \t\treturn this.setFromMatrixPosition( m );\n    \t},\n    \tgetScaleFromMatrix: function ( m ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n    \t\treturn this.setFromMatrixScale( m );\n    \t},\n    \tgetColumnFromMatrix: function ( index, matrix ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n    \t\treturn this.setFromMatrixColumn( matrix, index );\n    \t}\n    } );\n\n    //\n\n    Object.assign( Object3D.prototype, {\n    \tgetChildByName: function ( name ) {\n    \t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n    \t\treturn this.getObjectByName( name );\n    \t},\n    \trenderDepth: function ( value ) {\n    \t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n    \t},\n    \ttranslate: function ( distance, axis ) {\n    \t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n    \t\treturn this.translateOnAxis( axis, distance );\n    \t}\n    } );\n\n    Object.defineProperties( Object3D.prototype, {\n    \teulerOrder: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n    \t\t\treturn this.rotation.order;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n    \t\t\tthis.rotation.order = value;\n    \t\t}\n    \t},\n    \tuseQuaternion: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( LOD.prototype, {\n    \tobjects: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n    \t\t\treturn this.levels;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n    \tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n    \t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n    \tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n    \tthis.setFocalLength( focalLength );\n\n    };\n\n    //\n\n    Object.defineProperties( Light.prototype, {\n    \tonlyShadow: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n    \t\t}\n    \t},\n    \tshadowCameraFov: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n    \t\t\tthis.shadow.camera.fov = value;\n    \t\t}\n    \t},\n    \tshadowCameraLeft: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n    \t\t\tthis.shadow.camera.left = value;\n    \t\t}\n    \t},\n    \tshadowCameraRight: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n    \t\t\tthis.shadow.camera.right = value;\n    \t\t}\n    \t},\n    \tshadowCameraTop: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n    \t\t\tthis.shadow.camera.top = value;\n    \t\t}\n    \t},\n    \tshadowCameraBottom: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n    \t\t\tthis.shadow.camera.bottom = value;\n    \t\t}\n    \t},\n    \tshadowCameraNear: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n    \t\t\tthis.shadow.camera.near = value;\n    \t\t}\n    \t},\n    \tshadowCameraFar: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n    \t\t\tthis.shadow.camera.far = value;\n    \t\t}\n    \t},\n    \tshadowCameraVisible: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n    \t\t}\n    \t},\n    \tshadowBias: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n    \t\t\tthis.shadow.bias = value;\n    \t\t}\n    \t},\n    \tshadowDarkness: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n    \t\t}\n    \t},\n    \tshadowMapWidth: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n    \t\t\tthis.shadow.mapSize.width = value;\n    \t\t}\n    \t},\n    \tshadowMapHeight: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n    \t\t\tthis.shadow.mapSize.height = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( BufferAttribute.prototype, {\n    \tlength: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n    \t\t\treturn this.array.length;\n    \t\t}\n    \t}\n    } );\n\n    Object.assign( BufferGeometry.prototype, {\n    \taddIndex: function ( index ) {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n    \t\tthis.setIndex( index );\n    \t},\n    \taddDrawCall: function ( start, count, indexOffset ) {\n    \t\tif ( indexOffset !== undefined ) {\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n    \t\t}\n    \t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n    \t\tthis.addGroup( start, count );\n    \t},\n    \tclearDrawCalls: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n    \t\tthis.clearGroups();\n    \t},\n    \tcomputeTangents: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n    \t},\n    \tcomputeOffsets: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n    \t}\n    } );\n\n    Object.defineProperties( BufferGeometry.prototype, {\n    \tdrawcalls: {\n    \t\tget: function () {\n    \t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n    \t\t\treturn this.groups;\n    \t\t}\n    \t},\n    \toffsets: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n    \t\t\treturn this.groups;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( Material.prototype, {\n    \twrapAround: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n    \t\t}\n    \t},\n    \twrapRGB: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n    \t\t\treturn new Color();\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( MeshPhongMaterial.prototype, {\n    \tmetal: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n    \t\t\treturn false;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( ShaderMaterial.prototype, {\n    \tderivatives: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n    \t\t\treturn this.extensions.derivatives;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n    \t\t\tthis.extensions.derivatives = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    EventDispatcher.prototype = Object.assign( Object.create( {\n\n    \t// Note: Extra base ensures these properties are not 'assign'ed.\n\n    \tconstructor: EventDispatcher,\n\n    \tapply: function ( target ) {\n\n    \t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n    \t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\n    \t\tObject.assign( target, this );\n\n    \t}\n\n    } ), EventDispatcher.prototype );\n\n    //\n\n    Object.assign( WebGLRenderer.prototype, {\n    \tsupportsFloatTextures: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n    \t\treturn this.extensions.get( 'OES_texture_float' );\n    \t},\n    \tsupportsHalfFloatTextures: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n    \t\treturn this.extensions.get( 'OES_texture_half_float' );\n    \t},\n    \tsupportsStandardDerivatives: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n    \t\treturn this.extensions.get( 'OES_standard_derivatives' );\n    \t},\n    \tsupportsCompressedTextureS3TC: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n    \t},\n    \tsupportsCompressedTexturePVRTC: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n    \t},\n    \tsupportsBlendMinMax: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n    \t\treturn this.extensions.get( 'EXT_blend_minmax' );\n    \t},\n    \tsupportsVertexTextures: function () {\n    \t\treturn this.capabilities.vertexTextures;\n    \t},\n    \tsupportsInstancedArrays: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n    \t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n    \t},\n    \tenableScissorTest: function ( boolean ) {\n    \t\t// console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n    \t\tthis.setScissorTest( boolean );\n    \t},\n    \tinitMaterial: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n    \t},\n    \taddPrePlugin: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n    \t},\n    \taddPostPlugin: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n    \t},\n    \tupdateShadowMap: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n    \t}\n    } );\n\n    Object.defineProperties( WebGLRenderer.prototype, {\n    \tshadowMapEnabled: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.enabled;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n    \t\t\tthis.shadowMap.enabled = value;\n    \t\t}\n    \t},\n    \tshadowMapType: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.type;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n    \t\t\tthis.shadowMap.type = value;\n    \t\t}\n    \t},\n    \tshadowMapCullFace: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.cullFace;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n    \t\t\tthis.shadowMap.cullFace = value;\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( WebGLShadowMap.prototype, {\n    \tcullFace: {\n    \t\tget: function () {\n    \t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n    \t\t},\n    \t\tset: function ( cullFace ) {\n    \t\t\tvar value = ( cullFace !== CullFaceBack );\n    \t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n    \t\t\tthis.renderReverseSided = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( WebGLRenderTarget.prototype, {\n    \twrapS: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n    \t\t\treturn this.texture.wrapS;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n    \t\t\tthis.texture.wrapS = value;\n    \t\t}\n    \t},\n    \twrapT: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n    \t\t\treturn this.texture.wrapT;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n    \t\t\tthis.texture.wrapT = value;\n    \t\t}\n    \t},\n    \tmagFilter: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n    \t\t\treturn this.texture.magFilter;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n    \t\t\tthis.texture.magFilter = value;\n    \t\t}\n    \t},\n    \tminFilter: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n    \t\t\treturn this.texture.minFilter;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n    \t\t\tthis.texture.minFilter = value;\n    \t\t}\n    \t},\n    \tanisotropy: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n    \t\t\treturn this.texture.anisotropy;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n    \t\t\tthis.texture.anisotropy = value;\n    \t\t}\n    \t},\n    \toffset: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n    \t\t\treturn this.texture.offset;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n    \t\t\tthis.texture.offset = value;\n    \t\t}\n    \t},\n    \trepeat: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n    \t\t\treturn this.texture.repeat;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n    \t\t\tthis.texture.repeat = value;\n    \t\t}\n    \t},\n    \tformat: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n    \t\t\treturn this.texture.format;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n    \t\t\tthis.texture.format = value;\n    \t\t}\n    \t},\n    \ttype: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n    \t\t\treturn this.texture.type;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n    \t\t\tthis.texture.type = value;\n    \t\t}\n    \t},\n    \tgenerateMipmaps: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n    \t\t\treturn this.texture.generateMipmaps;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n    \t\t\tthis.texture.generateMipmaps = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.assign( Audio.prototype, {\n    \tload: function ( file ) {\n    \t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n    \t\tvar scope = this;\n    \t\tvar audioLoader = new AudioLoader();\n    \t\taudioLoader.load( file, function ( buffer ) {\n    \t\t\tscope.setBuffer( buffer );\n    \t\t} );\n    \t\treturn this;\n    \t}\n    } );\n\n    Object.assign( AudioAnalyser.prototype, {\n    \tgetData: function ( file ) {\n    \t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n    \t\treturn this.getFrequencyData();\n    \t}\n    } );\n\n    //\n\n    var GeometryUtils = {\n\n    \tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n    \t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\n    \t\tvar matrix;\n\n    \t\tif ( geometry2.isMesh ) {\n\n    \t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n    \t\t\tmatrix = geometry2.matrix;\n    \t\t\tgeometry2 = geometry2.geometry;\n\n    \t\t}\n\n    \t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n    \t},\n\n    \tcenter: function ( geometry ) {\n\n    \t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n    \t\treturn geometry.center();\n\n    \t}\n\n    };\n\n    var ImageUtils = {\n\n    \tcrossOrigin: undefined,\n\n    \tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n    \t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n    \t\tvar loader = new TextureLoader();\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n    \t\tif ( mapping ) texture.mapping = mapping;\n\n    \t\treturn texture;\n\n    \t},\n\n    \tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n    \t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n    \t\tvar loader = new CubeTextureLoader();\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n    \t\tif ( mapping ) texture.mapping = mapping;\n\n    \t\treturn texture;\n\n    \t},\n\n    \tloadCompressedTexture: function () {\n\n    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n    \t},\n\n    \tloadCompressedTextureCube: function () {\n\n    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n    \t}\n\n    };\n\n    //\n\n    function Projector () {\n\n    \tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n    \tthis.projectVector = function ( vector, camera ) {\n\n    \t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n    \t\tvector.project( camera );\n\n    \t};\n\n    \tthis.unprojectVector = function ( vector, camera ) {\n\n    \t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n    \t\tvector.unproject( camera );\n\n    \t};\n\n    \tthis.pickingRay = function ( vector, camera ) {\n\n    \t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n    \t};\n\n    }\n\n    //\n\n    function CanvasRenderer () {\n\n    \tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n    \tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \tthis.clear = function () {};\n    \tthis.render = function () {};\n    \tthis.setClearColor = function () {};\n    \tthis.setSize = function () {};\n\n    }\n\n    Object.defineProperty( exports, 'AudioContext', {\n    \tget: function () {\n    \t\treturn exports.getAudioContext();\n    \t}\n    });\n\n    exports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n    exports.WebGLRenderTarget = WebGLRenderTarget;\n    exports.WebGLRenderer = WebGLRenderer;\n    exports.ShaderLib = ShaderLib;\n    exports.UniformsLib = UniformsLib;\n    exports.ShaderChunk = ShaderChunk;\n    exports.FogExp2 = FogExp2;\n    exports.Fog = Fog;\n    exports.Scene = Scene;\n    exports.LensFlare = LensFlare;\n    exports.Sprite = Sprite;\n    exports.LOD = LOD;\n    exports.SkinnedMesh = SkinnedMesh;\n    exports.Skeleton = Skeleton;\n    exports.Bone = Bone;\n    exports.Mesh = Mesh;\n    exports.LineSegments = LineSegments;\n    exports.Line = Line;\n    exports.Points = Points;\n    exports.Group = Group;\n    exports.VideoTexture = VideoTexture;\n    exports.DataTexture = DataTexture;\n    exports.CompressedTexture = CompressedTexture;\n    exports.CubeTexture = CubeTexture;\n    exports.CanvasTexture = CanvasTexture;\n    exports.DepthTexture = DepthTexture;\n    exports.TextureIdCount = TextureIdCount;\n    exports.Texture = Texture;\n    exports.MaterialIdCount = MaterialIdCount;\n    exports.CompressedTextureLoader = CompressedTextureLoader;\n    exports.BinaryTextureLoader = BinaryTextureLoader;\n    exports.DataTextureLoader = DataTextureLoader;\n    exports.CubeTextureLoader = CubeTextureLoader;\n    exports.TextureLoader = TextureLoader;\n    exports.ObjectLoader = ObjectLoader;\n    exports.MaterialLoader = MaterialLoader;\n    exports.BufferGeometryLoader = BufferGeometryLoader;\n    exports.LoadingManager = LoadingManager;\n    exports.JSONLoader = JSONLoader;\n    exports.ImageLoader = ImageLoader;\n    exports.FontLoader = FontLoader;\n    exports.XHRLoader = XHRLoader;\n    exports.Loader = Loader;\n    exports.AudioLoader = AudioLoader;\n    exports.SpotLightShadow = SpotLightShadow;\n    exports.SpotLight = SpotLight;\n    exports.PointLight = PointLight;\n    exports.HemisphereLight = HemisphereLight;\n    exports.DirectionalLightShadow = DirectionalLightShadow;\n    exports.DirectionalLight = DirectionalLight;\n    exports.AmbientLight = AmbientLight;\n    exports.LightShadow = LightShadow;\n    exports.Light = Light;\n    exports.StereoCamera = StereoCamera;\n    exports.PerspectiveCamera = PerspectiveCamera;\n    exports.OrthographicCamera = OrthographicCamera;\n    exports.CubeCamera = CubeCamera;\n    exports.Camera = Camera;\n    exports.AudioListener = AudioListener;\n    exports.PositionalAudio = PositionalAudio;\n    exports.getAudioContext = getAudioContext;\n    exports.AudioAnalyser = AudioAnalyser;\n    exports.Audio = Audio;\n    exports.VectorKeyframeTrack = VectorKeyframeTrack;\n    exports.StringKeyframeTrack = StringKeyframeTrack;\n    exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n    exports.NumberKeyframeTrack = NumberKeyframeTrack;\n    exports.ColorKeyframeTrack = ColorKeyframeTrack;\n    exports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n    exports.PropertyMixer = PropertyMixer;\n    exports.PropertyBinding = PropertyBinding;\n    exports.KeyframeTrack = KeyframeTrack;\n    exports.AnimationObjectGroup = AnimationObjectGroup;\n    exports.AnimationMixer = AnimationMixer;\n    exports.AnimationClip = AnimationClip;\n    exports.Uniform = Uniform;\n    exports.InstancedBufferGeometry = InstancedBufferGeometry;\n    exports.BufferGeometry = BufferGeometry;\n    exports.GeometryIdCount = GeometryIdCount;\n    exports.Geometry = Geometry;\n    exports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n    exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n    exports.InterleavedBuffer = InterleavedBuffer;\n    exports.InstancedBufferAttribute = InstancedBufferAttribute;\n    exports.DynamicBufferAttribute = DynamicBufferAttribute;\n    exports.Float64Attribute = Float64Attribute;\n    exports.Float32Attribute = Float32Attribute;\n    exports.Uint32Attribute = Uint32Attribute;\n    exports.Int32Attribute = Int32Attribute;\n    exports.Uint16Attribute = Uint16Attribute;\n    exports.Int16Attribute = Int16Attribute;\n    exports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n    exports.Uint8Attribute = Uint8Attribute;\n    exports.Int8Attribute = Int8Attribute;\n    exports.BufferAttribute = BufferAttribute;\n    exports.Face3 = Face3;\n    exports.Object3DIdCount = Object3DIdCount;\n    exports.Object3D = Object3D;\n    exports.Raycaster = Raycaster;\n    exports.Layers = Layers;\n    exports.EventDispatcher = EventDispatcher;\n    exports.Clock = Clock;\n    exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n    exports.LinearInterpolant = LinearInterpolant;\n    exports.DiscreteInterpolant = DiscreteInterpolant;\n    exports.CubicInterpolant = CubicInterpolant;\n    exports.Interpolant = Interpolant;\n    exports.Triangle = Triangle;\n    exports.Spline = Spline;\n    exports.Spherical = Spherical;\n    exports.Plane = Plane;\n    exports.Frustum = Frustum;\n    exports.Sphere = Sphere;\n    exports.Ray = Ray;\n    exports.Matrix4 = Matrix4;\n    exports.Matrix3 = Matrix3;\n    exports.Box3 = Box3;\n    exports.Box2 = Box2;\n    exports.Line3 = Line3;\n    exports.Euler = Euler;\n    exports.Vector4 = Vector4;\n    exports.Vector3 = Vector3;\n    exports.Vector2 = Vector2;\n    exports.Quaternion = Quaternion;\n    exports.Color = Color;\n    exports.MorphBlendMesh = MorphBlendMesh;\n    exports.ImmediateRenderObject = ImmediateRenderObject;\n    exports.VertexNormalsHelper = VertexNormalsHelper;\n    exports.SpotLightHelper = SpotLightHelper;\n    exports.SkeletonHelper = SkeletonHelper;\n    exports.PointLightHelper = PointLightHelper;\n    exports.HemisphereLightHelper = HemisphereLightHelper;\n    exports.GridHelper = GridHelper;\n    exports.FaceNormalsHelper = FaceNormalsHelper;\n    exports.DirectionalLightHelper = DirectionalLightHelper;\n    exports.CameraHelper = CameraHelper;\n    exports.BoundingBoxHelper = BoundingBoxHelper;\n    exports.BoxHelper = BoxHelper;\n    exports.ArrowHelper = ArrowHelper;\n    exports.AxisHelper = AxisHelper;\n    exports.ClosedSplineCurve3 = ClosedSplineCurve3;\n    exports.SplineCurve3 = SplineCurve3;\n    exports.ArcCurve = ArcCurve;\n    exports.EllipseCurve = EllipseCurve;\n    exports.SplineCurve = SplineCurve;\n    exports.CubicBezierCurve = CubicBezierCurve;\n    exports.QuadraticBezierCurve = QuadraticBezierCurve;\n    exports.LineCurve = LineCurve;\n    exports.Shape = Shape;\n    exports.ShapePath = ShapePath;\n    exports.Path = Path;\n    exports.Font = Font;\n    exports.CurvePath = CurvePath;\n    exports.Curve = Curve;\n    exports.WireframeGeometry = WireframeGeometry;\n    exports.ParametricGeometry = ParametricGeometry;\n    exports.TetrahedronGeometry = TetrahedronGeometry;\n    exports.OctahedronGeometry = OctahedronGeometry;\n    exports.IcosahedronGeometry = IcosahedronGeometry;\n    exports.DodecahedronGeometry = DodecahedronGeometry;\n    exports.PolyhedronGeometry = PolyhedronGeometry;\n    exports.TubeGeometry = TubeGeometry;\n    exports.TorusKnotGeometry = TorusKnotGeometry;\n    exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n    exports.TorusGeometry = TorusGeometry;\n    exports.TorusBufferGeometry = TorusBufferGeometry;\n    exports.TextGeometry = TextGeometry;\n    exports.SphereBufferGeometry = SphereBufferGeometry;\n    exports.SphereGeometry = SphereGeometry;\n    exports.RingGeometry = RingGeometry;\n    exports.RingBufferGeometry = RingBufferGeometry;\n    exports.PlaneBufferGeometry = PlaneBufferGeometry;\n    exports.PlaneGeometry = PlaneGeometry;\n    exports.LatheGeometry = LatheGeometry;\n    exports.LatheBufferGeometry = LatheBufferGeometry;\n    exports.ShapeGeometry = ShapeGeometry;\n    exports.ExtrudeGeometry = ExtrudeGeometry;\n    exports.EdgesGeometry = EdgesGeometry;\n    exports.ConeGeometry = ConeGeometry;\n    exports.ConeBufferGeometry = ConeBufferGeometry;\n    exports.CylinderGeometry = CylinderGeometry;\n    exports.CylinderBufferGeometry = CylinderBufferGeometry;\n    exports.CircleBufferGeometry = CircleBufferGeometry;\n    exports.CircleGeometry = CircleGeometry;\n    exports.BoxBufferGeometry = BoxBufferGeometry;\n    exports.BoxGeometry = BoxGeometry;\n    exports.ShadowMaterial = ShadowMaterial;\n    exports.SpriteMaterial = SpriteMaterial;\n    exports.RawShaderMaterial = RawShaderMaterial;\n    exports.ShaderMaterial = ShaderMaterial;\n    exports.PointsMaterial = PointsMaterial;\n    exports.MultiMaterial = MultiMaterial;\n    exports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n    exports.MeshStandardMaterial = MeshStandardMaterial;\n    exports.MeshPhongMaterial = MeshPhongMaterial;\n    exports.MeshNormalMaterial = MeshNormalMaterial;\n    exports.MeshLambertMaterial = MeshLambertMaterial;\n    exports.MeshDepthMaterial = MeshDepthMaterial;\n    exports.MeshBasicMaterial = MeshBasicMaterial;\n    exports.LineDashedMaterial = LineDashedMaterial;\n    exports.LineBasicMaterial = LineBasicMaterial;\n    exports.Material = Material;\n    exports.REVISION = REVISION;\n    exports.MOUSE = MOUSE;\n    exports.CullFaceNone = CullFaceNone;\n    exports.CullFaceBack = CullFaceBack;\n    exports.CullFaceFront = CullFaceFront;\n    exports.CullFaceFrontBack = CullFaceFrontBack;\n    exports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n    exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n    exports.BasicShadowMap = BasicShadowMap;\n    exports.PCFShadowMap = PCFShadowMap;\n    exports.PCFSoftShadowMap = PCFSoftShadowMap;\n    exports.FrontSide = FrontSide;\n    exports.BackSide = BackSide;\n    exports.DoubleSide = DoubleSide;\n    exports.FlatShading = FlatShading;\n    exports.SmoothShading = SmoothShading;\n    exports.NoColors = NoColors;\n    exports.FaceColors = FaceColors;\n    exports.VertexColors = VertexColors;\n    exports.NoBlending = NoBlending;\n    exports.NormalBlending = NormalBlending;\n    exports.AdditiveBlending = AdditiveBlending;\n    exports.SubtractiveBlending = SubtractiveBlending;\n    exports.MultiplyBlending = MultiplyBlending;\n    exports.CustomBlending = CustomBlending;\n    exports.BlendingMode = BlendingMode;\n    exports.AddEquation = AddEquation;\n    exports.SubtractEquation = SubtractEquation;\n    exports.ReverseSubtractEquation = ReverseSubtractEquation;\n    exports.MinEquation = MinEquation;\n    exports.MaxEquation = MaxEquation;\n    exports.ZeroFactor = ZeroFactor;\n    exports.OneFactor = OneFactor;\n    exports.SrcColorFactor = SrcColorFactor;\n    exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n    exports.SrcAlphaFactor = SrcAlphaFactor;\n    exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n    exports.DstAlphaFactor = DstAlphaFactor;\n    exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n    exports.DstColorFactor = DstColorFactor;\n    exports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n    exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n    exports.NeverDepth = NeverDepth;\n    exports.AlwaysDepth = AlwaysDepth;\n    exports.LessDepth = LessDepth;\n    exports.LessEqualDepth = LessEqualDepth;\n    exports.EqualDepth = EqualDepth;\n    exports.GreaterEqualDepth = GreaterEqualDepth;\n    exports.GreaterDepth = GreaterDepth;\n    exports.NotEqualDepth = NotEqualDepth;\n    exports.MultiplyOperation = MultiplyOperation;\n    exports.MixOperation = MixOperation;\n    exports.AddOperation = AddOperation;\n    exports.NoToneMapping = NoToneMapping;\n    exports.LinearToneMapping = LinearToneMapping;\n    exports.ReinhardToneMapping = ReinhardToneMapping;\n    exports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n    exports.CineonToneMapping = CineonToneMapping;\n    exports.UVMapping = UVMapping;\n    exports.CubeReflectionMapping = CubeReflectionMapping;\n    exports.CubeRefractionMapping = CubeRefractionMapping;\n    exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n    exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n    exports.SphericalReflectionMapping = SphericalReflectionMapping;\n    exports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n    exports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n    exports.TextureMapping = TextureMapping;\n    exports.RepeatWrapping = RepeatWrapping;\n    exports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n    exports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n    exports.TextureWrapping = TextureWrapping;\n    exports.NearestFilter = NearestFilter;\n    exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n    exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n    exports.LinearFilter = LinearFilter;\n    exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n    exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n    exports.TextureFilter = TextureFilter;\n    exports.UnsignedByteType = UnsignedByteType;\n    exports.ByteType = ByteType;\n    exports.ShortType = ShortType;\n    exports.UnsignedShortType = UnsignedShortType;\n    exports.IntType = IntType;\n    exports.UnsignedIntType = UnsignedIntType;\n    exports.FloatType = FloatType;\n    exports.HalfFloatType = HalfFloatType;\n    exports.UnsignedShort4444Type = UnsignedShort4444Type;\n    exports.UnsignedShort5551Type = UnsignedShort5551Type;\n    exports.UnsignedShort565Type = UnsignedShort565Type;\n    exports.UnsignedInt248Type = UnsignedInt248Type;\n    exports.AlphaFormat = AlphaFormat;\n    exports.RGBFormat = RGBFormat;\n    exports.RGBAFormat = RGBAFormat;\n    exports.LuminanceFormat = LuminanceFormat;\n    exports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n    exports.RGBEFormat = RGBEFormat;\n    exports.DepthFormat = DepthFormat;\n    exports.DepthStencilFormat = DepthStencilFormat;\n    exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n    exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n    exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n    exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n    exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n    exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n    exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n    exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n    exports.RGB_ETC1_Format = RGB_ETC1_Format;\n    exports.LoopOnce = LoopOnce;\n    exports.LoopRepeat = LoopRepeat;\n    exports.LoopPingPong = LoopPingPong;\n    exports.InterpolateDiscrete = InterpolateDiscrete;\n    exports.InterpolateLinear = InterpolateLinear;\n    exports.InterpolateSmooth = InterpolateSmooth;\n    exports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n    exports.ZeroSlopeEnding = ZeroSlopeEnding;\n    exports.WrapAroundEnding = WrapAroundEnding;\n    exports.TrianglesDrawMode = TrianglesDrawMode;\n    exports.TriangleStripDrawMode = TriangleStripDrawMode;\n    exports.TriangleFanDrawMode = TriangleFanDrawMode;\n    exports.LinearEncoding = LinearEncoding;\n    exports.sRGBEncoding = sRGBEncoding;\n    exports.GammaEncoding = GammaEncoding;\n    exports.RGBEEncoding = RGBEEncoding;\n    exports.LogLuvEncoding = LogLuvEncoding;\n    exports.RGBM7Encoding = RGBM7Encoding;\n    exports.RGBM16Encoding = RGBM16Encoding;\n    exports.RGBDEncoding = RGBDEncoding;\n    exports.BasicDepthPacking = BasicDepthPacking;\n    exports.RGBADepthPacking = RGBADepthPacking;\n    exports.CubeGeometry = BoxGeometry;\n    exports.Face4 = Face4;\n    exports.LineStrip = LineStrip;\n    exports.LinePieces = LinePieces;\n    exports.MeshFaceMaterial = MultiMaterial;\n    exports.PointCloud = PointCloud;\n    exports.Particle = Sprite;\n    exports.ParticleSystem = ParticleSystem;\n    exports.PointCloudMaterial = PointCloudMaterial;\n    exports.ParticleBasicMaterial = ParticleBasicMaterial;\n    exports.ParticleSystemMaterial = ParticleSystemMaterial;\n    exports.Vertex = Vertex;\n    exports.EdgesHelper = EdgesHelper;\n    exports.WireframeHelper = WireframeHelper;\n    exports.GeometryUtils = GeometryUtils;\n    exports.ImageUtils = ImageUtils;\n    exports.Projector = Projector;\n    exports.CanvasRenderer = CanvasRenderer;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/build/three.js\n ** module id = 32\n ** module chunks = 0\n **/","module.exports = new RegExp(\n\t'^' +\n\n\t// protocol identifier\n\t'(?:(?:(?:https?):)?//)' +\n\n\t// user:pass authentication\n\t'(?:\\\\S+(?::\\\\S*)?@)?' +\n\t'(?:' +\n\n\t// IP address exclusion\n\t// private & local networks\n\t'(' +\n\t'(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})' +\n\t'(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})' +\n\t'(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})' +\n\n\t// IP address dotted notation octets\n\t// excludes loopback network 0.0.0.0\n\t// excludes reserved space >= 224.0.0.0\n\t// excludes network & broacast addresses\n\t// (first & last IP address of each class)\n\t'(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])' +\n\t'(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}' +\n\t'(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))' +\n\t'|' +\n\n\t// host name\n\t'(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)' +\n\n\t// domain name\n\t'(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*' +\n\n\t// TLD identifier\n\t'(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))?' +\n\t')' +\n\n\t')' +\n\n\t// port number\n\t'(?::(\\\\d{2,5}))?' +\n\n\t// resource path\n\t'(?:/\\\\S*)?' +\n\t'$', 'i'\n);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils/urlregex.js\n ** module id = 33\n ** module chunks = 0\n **/","/**\n * lodash 3.0.3 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar arrayEach = require('lodash._arrayeach'),\n    baseEach = require('lodash._baseeach'),\n    bindCallback = require('lodash._bindcallback'),\n    isArray = require('lodash.isarray');\n\n/**\n * Creates a function for `_.forEach` or `_.forEachRight`.\n *\n * @private\n * @param {Function} arrayFunc The function to iterate over an array.\n * @param {Function} eachFunc The function to iterate over a collection.\n * @returns {Function} Returns the new each function.\n */\nfunction createForEach(arrayFunc, eachFunc) {\n  return function(collection, iteratee, thisArg) {\n    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))\n      ? arrayFunc(collection, iteratee)\n      : eachFunc(collection, bindCallback(iteratee, thisArg, 3));\n  };\n}\n\n/**\n * Iterates over elements of `collection` invoking `iteratee` for each element.\n * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n * (value, index|key, collection). Iteratee functions may exit iteration early\n * by explicitly returning `false`.\n *\n * **Note:** As with other \"Collections\" methods, objects with a \"length\" property\n * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\n * may be used for object iteration.\n *\n * @static\n * @memberOf _\n * @alias each\n * @category Collection\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {Array|Object|string} Returns `collection`.\n * @example\n *\n * _([1, 2]).forEach(function(n) {\n *   console.log(n);\n * }).value();\n * // => logs each value from left to right and returns the array\n *\n * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {\n *   console.log(n, key);\n * });\n * // => logs each value-key pair and returns the object (iteration order is not guaranteed)\n */\nvar forEach = createForEach(arrayEach, baseEach);\n\nmodule.exports = forEach;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/index.js\n ** module id = 34\n ** module chunks = 0\n **/","/**\n * lodash 3.2.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar baseAssign = require('lodash._baseassign'),\n    createAssigner = require('lodash._createassigner'),\n    keys = require('lodash.keys');\n\n/**\n * A specialized version of `_.assign` for customizing assigned values without\n * support for argument juggling, multiple sources, and `this` binding `customizer`\n * functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {Function} customizer The function to customize assigned values.\n * @returns {Object} Returns `object`.\n */\nfunction assignWith(object, source, customizer) {\n  var index = -1,\n      props = keys(source),\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index],\n        value = object[key],\n        result = customizer(value, source[key], key, object, source);\n\n    if ((result === result ? (result !== value) : (value === value)) ||\n        (value === undefined && !(key in object))) {\n      object[key] = result;\n    }\n  }\n  return object;\n}\n\n/**\n * Assigns own enumerable properties of source object(s) to the destination\n * object. Subsequent sources overwrite property assignments of previous sources.\n * If `customizer` is provided it is invoked to produce the assigned values.\n * The `customizer` is bound to `thisArg` and invoked with five arguments:\n * (objectValue, sourceValue, key, object, source).\n *\n * **Note:** This method mutates `object` and is based on\n * [`Object.assign`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign).\n *\n * @static\n * @memberOf _\n * @alias extend\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {*} [thisArg] The `this` binding of `customizer`.\n * @returns {Object} Returns `object`.\n * @example\n *\n * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });\n * // => { 'user': 'fred', 'age': 40 }\n *\n * // using a customizer callback\n * var defaults = _.partialRight(_.assign, function(value, other) {\n *   return _.isUndefined(value) ? other : value;\n * });\n *\n * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n * // => { 'user': 'barney', 'age': 36 }\n */\nvar assign = createAssigner(function(object, source, customizer) {\n  return customizer\n    ? assignWith(object, source, customizer)\n    : baseAssign(object, source);\n});\n\nmodule.exports = assign;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/index.js\n ** module id = 35\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Audio = function ( listener ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Audio';\n\tthis.started = false;\n\n\tif (listener.context) {\n\n\t\tthis.context = listener.context;\n\t\t// this.source = this.context.createBufferSource();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.input );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.connect( this.gain );\n\n\t} else {\n\n\t\tthis.source = new Audio();\n\n\t}\n};\n\nTHREE.Audio.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Audio.prototype.load = function ( sources ) {\n\t//todo: support multiple sources for different audio formats\n\n\tvar scope = this;\n\tvar file;\n\tvar i;\n\tvar match;\n\tvar element = this.source instanceof window.HTMLAudioElement ? this.source : new Audio();\n\n\tif (typeof sources === 'string') {\n\t\tsources = [sources];\n\t}\n\n\tfor (i = 0; i < sources.length; i++) {\n\t\tfile = sources[i];\n\t\tmatch = /\\.([a-z0-9]+)$/i.exec(file);\n\t\tif (match && element.canPlayType('audio/' + match[1])) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (this.context) {\n\t\tvar request = new XMLHttpRequest();\n\t\trequest.open( 'GET', file, true );\n\t\trequest.responseType = 'arraybuffer';\n\t\trequest.onload = function ( e ) {\n\t\t\tconsole.log('audio buffer loaded. decoding...', e );\n\t\t\tscope.context.decodeAudioData( this.response, function ( buffer ) {\n\n\t\t\t\tscope.buffer = buffer;\n\t\t\t\tif (scope.started) {\n\t\t\t\t\tscope.start();\n\t\t\t\t}\n\n\t\t\t}, function onFailure(e) {\n\t\t\t\tconsole.log('Decoding the audio buffer failed', e);\n\t\t\t} );\n\n\t\t};\n\n\t\trequest.onerror = function ( e ) {\n\t\t\tconsole.log('error', e);\n\t\t};\n\n\t\trequest.send();\n\n\t} else {\n\n\t\tthis.source.src = file;\n\t\tthis.source.play();\n\n\t}\n\n\treturn this;\n};\n\nTHREE.Audio.prototype.stop = function ( value ) {\n\n\tif (this.context) {\n\t\tthis.source.stop();\n\t\tthis.source.disconnect( this.panner );\n\t\tthis.source = null;\n\t} else {\n\t\tthis.source.pause();\n\t\tthis.source.currentTime = 0;\n\t}\n\tthis.started = false;\n};\n\nTHREE.Audio.prototype.start = function ( value ) {\n\n\tthis.started = true;\n\tif (this.context) {\n\t\tif (this.source) {\n\t\t\tthis.source.disconnect( this.panner );\n\t\t}\n\n\t\tif (this.buffer) {\n\t\t\tthis.source = this.context.createBufferSource();\n\t\t\tthis.source.buffer = this.buffer;\n\t\t\tthis.source.connect( this.panner );\n\t\t\tthis.source.start( 0 );\n\t\t}\n\t} else {\n\t\tthis.source.currentTime = 0;\n\t\tthis.source.play();\n\t}\n\n};\n\nTHREE.Audio.prototype.setLoop = function ( value ) {\n\n\tthis.source.loop = value;\n\n};\n\nTHREE.Audio.prototype.setRefDistance = function ( value ) {\n\n\tif ( this.panner ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t}\n\n};\n\nTHREE.Audio.prototype.setRolloffFactor = function ( value ) {\n\n\tif ( this.panner ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t}\n\n};\n\nTHREE.Audio.prototype.volume = function ( volume, time ) {\n\n\tif ( this.gain ) {\n\n\t\tif ( volume !== undefined ) {\n\t\t\tthis.gain.gain.linearRampToValueAtTime( volume, this.context.currentTime + (time || 0));\n\t\t}\n\n\t\treturn this.gain.gain.value;\n\t}\n\n\tif ( volume !== undefined ) {\n\t\tthis.source.volume = volume;\n\t}\n\n\treturn this.source.volume;\n};\n\nTHREE.Audio.prototype.updateMatrixWorld = ( function () {\n\n\tvar position = new THREE.Vector3();\n\n\treturn function ( force ) {\n\n\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif (this.panner) {\n\n\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t}\n\n\t};\n\n} )();\n\n// File:src/extras/audio/AudioListener.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AudioListener = function () {\n\tvar AudioContext = window.AudioContext || window.webkitAudioContext;\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'AudioListener';\n\n\tif (AudioContext) {\n\t\tthis.context = new AudioContext();\n\t\tthis.input = this.context.createGain();\n\n\t\tthis.input.connect( this.context.destination );\n\t}\n};\n\nTHREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.AudioListener.prototype.volume = function (val) {\n\tif (this.input) {\n\t\tval = val !== undefined && parseFloat(val);\n\t\tif (!isNaN(val)) {\n\t\t\tthis.input.gain.value = val;\n\t\t}\n\n\t\treturn this.input.gain.value;\n\t}\n};\n\nTHREE.AudioListener.prototype.updateMatrixWorld = ( function () {\n\n\tvar position = new THREE.Vector3();\n\tvar quaternion = new THREE.Quaternion();\n\tvar scale = new THREE.Vector3();\n\n\tvar orientation = new THREE.Vector3();\n\n\treturn function ( force ) {\n\n\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tvar listener;\n\n\t\tif (this.context) {\n\t\t\tlistener = this.context.listener;\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\torientation.set( 0, 0, -1 ).applyQuaternion( quaternion );\n\n            // Error Fixed\n            try {\n\t\t\t    listener.setPosition( position.x, position.y, position.z );\n\t\t\t    listener.setOrientation( orientation.x, orientation.y, orientation.z, this.up.x, this.up.y, this.up.z );\n            } catch (e) {}\n\n\t\t}\n\t};\n\n} ());\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/ThreeAudio.js\n ** module id = 36\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author zz85 / https://github.com/zz85\n *\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\n *\n * First implemented by Simon Wallner\n * http://www.simonwallner.at/projects/atmospheric-scattering\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n*/\n\nTHREE.ShaderLib[ 'sky' ] = {\n\n\tuniforms: {\n\n\t\tluminance: { value: 1 },\n\t\tturbidity: { value: 2 },\n\t\treileigh: { value: 1 },\n\t\tmieCoefficient: { value: 0.005 },\n\t\tmieDirectionalG: { value: 0.8 },\n\t\tsunPosition: { value: new THREE.Vector3() }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec3 vWorldPosition;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n\t\t\t\"vWorldPosition = worldPosition.xyz;\",\n\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\",\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform sampler2D skySampler;\",\n\t\t\"uniform vec3 sunPosition;\",\n\t\t\"varying vec3 vWorldPosition;\",\n\n\t\t\"vec3 cameraPos = vec3(0., 0., 0.);\",\n\t\t\"// uniform sampler2D sDiffuse;\",\n\t\t\"// const float turbidity = 10.0; //\",\n\t\t\"// const float reileigh = 2.; //\",\n\t\t\"// const float luminance = 1.0; //\",\n\t\t\"// const float mieCoefficient = 0.005;\",\n\t\t\"// const float mieDirectionalG = 0.8;\",\n\n\t\t\"uniform float luminance;\",\n\t\t\"uniform float turbidity;\",\n\t\t\"uniform float reileigh;\",\n\t\t\"uniform float mieCoefficient;\",\n\t\t\"uniform float mieDirectionalG;\",\n\n\t\t\"// constants for atmospheric scattering\",\n\t\t\"const float e = 2.71828182845904523536028747135266249775724709369995957;\",\n\t\t\"const float pi = 3.141592653589793238462643383279502884197169;\",\n\n\t\t\"const float n = 1.0003; // refractive index of air\",\n\t\t\"const float N = 2.545E25; // number of molecules per unit volume for air at\",\n\t\t\t\t\t\t\t\t\"// 288.15K and 1013mb (sea level -45 celsius)\",\n\t\t\"const float pn = 0.035;\t// depolatization factor for standard air\",\n\n\t\t\"// wavelength of used primaries, according to preetham\",\n\t\t\"const vec3 lambda = vec3(680E-9, 550E-9, 450E-9);\",\n\n\t\t\"// mie stuff\",\n\t\t\"// K coefficient for the primaries\",\n\t\t\"const vec3 K = vec3(0.686, 0.678, 0.666);\",\n\t\t\"const float v = 4.0;\",\n\n\t\t\"// optical length at zenith for molecules\",\n\t\t\"const float rayleighZenithLength = 8.4E3;\",\n\t\t\"const float mieZenithLength = 1.25E3;\",\n\t\t\"const vec3 up = vec3(0.0, 1.0, 0.0);\",\n\n\t\t\"const float EE = 1000.0;\",\n\t\t\"const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\",\n\t\t\"// 66 arc seconds -> degrees, and the cosine of that\",\n\n\t\t\"// earth shadow hack\",\n\t\t\"const float cutoffAngle = pi/1.95;\",\n\t\t\"const float steepness = 1.5;\",\n\n\n\t\t\"vec3 totalRayleigh(vec3 lambda)\",\n\t\t\"{\",\n\t\t\t\"return (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));\",\n\t\t\"}\",\n\n\t\t// see http://blenderartists.org/forum/showthread.php?321110-Shaders-and-Skybox-madness\n\t\t\"// A simplied version of the total Reayleigh scattering to works on browsers that use ANGLE\",\n\t\t\"vec3 simplifiedRayleigh()\",\n\t\t\"{\",\n\t\t\t\"return 0.0005 / vec3(94, 40, 18);\",\n\t\t\t// return 0.00054532832366 / (3.0 * 2.545E25 * pow(vec3(680E-9, 550E-9, 450E-9), vec3(4.0)) * 6.245);\n\t\t\"}\",\n\n\t\t\"float rayleighPhase(float cosTheta)\",\n\t\t\"{\t \",\n\t\t\t\"return (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\"//\treturn (1.0 / (3.0*pi)) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\"//\treturn (3.0 / 4.0) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\"}\",\n\n\t\t\"vec3 totalMie(vec3 lambda, vec3 K, float T)\",\n\t\t\"{\",\n\t\t\t\"float c = (0.2 * T ) * 10E-18;\",\n\t\t\t\"return 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;\",\n\t\t\"}\",\n\n\t\t\"float hgPhase(float cosTheta, float g)\",\n\t\t\"{\",\n\t\t\t\"return (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));\",\n\t\t\"}\",\n\n\t\t\"float sunIntensity(float zenithAngleCos)\",\n\t\t\"{\",\n\t\t// This function originally used `exp(n)`, but it returns an incorrect value\n\t\t// on Samsung S6 phones. So it has been replaced with the equivalent `pow(e, n)`.\n\t\t// See https://github.com/mrdoob/three.js/issues/8382\n\t\t\t\"return EE * max(0.0, 1.0 - pow(e, -((cutoffAngle - acos(zenithAngleCos))/steepness)));\",\n\t\t\"}\",\n\n\t\t\"// float logLuminance(vec3 c)\",\n\t\t\"// {\",\n\t\t\"// \treturn log(c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722);\",\n\t\t\"// }\",\n\n\t\t\"// Filmic ToneMapping http://filmicgames.com/archives/75\",\n\t\t\"float A = 0.15;\",\n\t\t\"float B = 0.50;\",\n\t\t\"float C = 0.10;\",\n\t\t\"float D = 0.20;\",\n\t\t\"float E = 0.02;\",\n\t\t\"float F = 0.30;\",\n\t\t\"float W = 1000.0;\",\n\n\t\t\"vec3 Uncharted2Tonemap(vec3 x)\",\n\t\t\"{\",\n\t\t   \"return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\",\n\t\t\"}\",\n\n\n\t\t\"void main() \",\n\t\t\"{\",\n\t\t\t\"float sunfade = 1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);\",\n\n\t\t\t\"// luminance =  1.0 ;// vWorldPosition.y / 450000. + 0.5; //sunPosition.y / 450000. * 1. + 0.5;\",\n\n\t\t\t \"// gl_FragColor = vec4(sunfade, sunfade, sunfade, 1.0);\",\n\n\t\t\t\"float reileighCoefficient = reileigh - (1.0* (1.0-sunfade));\",\n\n\t\t\t\"vec3 sunDirection = normalize(sunPosition);\",\n\n\t\t\t\"float sunE = sunIntensity(dot(sunDirection, up));\",\n\n\t\t\t\"// extinction (absorbtion + out scattering) \",\n\t\t\t\"// rayleigh coefficients\",\n\n\t\t\t// \"vec3 betaR = totalRayleigh(lambda) * reileighCoefficient;\",\n\t\t\t\"vec3 betaR = simplifiedRayleigh() * reileighCoefficient;\",\n\n\t\t\t\"// mie coefficients\",\n\t\t\t\"vec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;\",\n\n\t\t\t\"// optical length\",\n\t\t\t\"// cutoff angle at 90 to avoid singularity in next formula.\",\n\t\t\t\"float zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPos))));\",\n\t\t\t\"float sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\",\n\t\t\t\"float sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\",\n\n\n\n\t\t\t\"// combined extinction factor\t\",\n\t\t\t\"vec3 Fex = exp(-(betaR * sR + betaM * sM));\",\n\n\t\t\t\"// in scattering\",\n\t\t\t\"float cosTheta = dot(normalize(vWorldPosition - cameraPos), sunDirection);\",\n\n\t\t\t\"float rPhase = rayleighPhase(cosTheta*0.5+0.5);\",\n\t\t\t\"vec3 betaRTheta = betaR * rPhase;\",\n\n\t\t\t\"float mPhase = hgPhase(cosTheta, mieDirectionalG);\",\n\t\t\t\"vec3 betaMTheta = betaM * mPhase;\",\n\n\n\t\t\t\"vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));\",\n\t\t\t\"Lin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up, sunDirection),5.0),0.0,1.0));\",\n\n\t\t\t\"//nightsky\",\n\t\t\t\"vec3 direction = normalize(vWorldPosition - cameraPos);\",\n\t\t\t\"float theta = acos(direction.y); // elevation --> y-axis, [-pi/2, pi/2]\",\n\t\t\t\"float phi = atan(direction.z, direction.x); // azimuth --> x-axis [-pi/2, pi/2]\",\n\t\t\t\"vec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);\",\n\t\t\t\"// vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;\",\n\t\t\t\"vec3 L0 = vec3(0.1) * Fex;\",\n\n\t\t\t\"// composition + solar disc\",\n\t\t\t\"//if (cosTheta > sunAngularDiameterCos)\",\n\t\t\t\"float sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);\",\n\t\t\t\"// if (normalize(vWorldPosition - cameraPos).y>0.0)\",\n\t\t\t\"L0 += (sunE * 19000.0 * Fex)*sundisk;\",\n\n\n\t\t\t\"vec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));\",\n\n\t\t\t\"vec3 texColor = (Lin+L0);   \",\n\t\t\t\"texColor *= 0.04 ;\",\n\t\t\t\"texColor += vec3(0.0,0.001,0.0025)*0.3;\",\n\n\t\t\t\"float g_fMaxLuminance = 1.0;\",\n\t\t\t\"float fLumScaled = 0.1 / luminance;     \",\n\t\t\t\"float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (g_fMaxLuminance * g_fMaxLuminance)))) / (1.0 + fLumScaled); \",\n\n\t\t\t\"float ExposureBias = fLumCompressed;\",\n\n\t\t\t\"vec3 curr = Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);\",\n\t\t\t\"vec3 color = curr*whiteScale;\",\n\n\t\t\t\"vec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));\",\n\n\n\t\t\t\"gl_FragColor.rgb = retColor;\",\n\n\t\t\t\"gl_FragColor.a = 1.0;\",\n\t\t\"}\",\n\n\t].join( \"\\n\" )\n\n};\n\nTHREE.Sky = function () {\n\n\tvar skyShader = THREE.ShaderLib[ \"sky\" ];\n\tvar skyUniforms = THREE.UniformsUtils.clone( skyShader.uniforms );\n\n\tvar skyMat = new THREE.ShaderMaterial( {\n\t\tfragmentShader: skyShader.fragmentShader,\n\t\tvertexShader: skyShader.vertexShader,\n\t\tuniforms: skyUniforms,\n\t\tside: THREE.BackSide\n\t} );\n\n\tvar skyGeo = new THREE.SphereBufferGeometry( 450000, 32, 15 );\n\tvar skyMesh = new THREE.Mesh( skyGeo, skyMat );\n\n\n\t// Expose variables\n\tthis.mesh = skyMesh;\n\tthis.uniforms = skyUniforms;\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./bower_components/SkyShader/index.js\n ** module id = 37\n ** module chunks = 0\n **/","'use strict';\n\nvar assign        = require('es5-ext/object/assign')\n  , normalizeOpts = require('es5-ext/object/normalize-options')\n  , isCallable    = require('es5-ext/object/is-callable')\n  , contains      = require('es5-ext/string/#/contains')\n\n  , d;\n\nd = module.exports = function (dscr, value/*, options*/) {\n\tvar c, e, w, options, desc;\n\tif ((arguments.length < 2) || (typeof dscr !== 'string')) {\n\t\toptions = value;\n\t\tvalue = dscr;\n\t\tdscr = null;\n\t} else {\n\t\toptions = arguments[2];\n\t}\n\tif (dscr == null) {\n\t\tc = w = true;\n\t\te = false;\n\t} else {\n\t\tc = contains.call(dscr, 'c');\n\t\te = contains.call(dscr, 'e');\n\t\tw = contains.call(dscr, 'w');\n\t}\n\n\tdesc = { value: value, configurable: c, enumerable: e, writable: w };\n\treturn !options ? desc : assign(normalizeOpts(options), desc);\n};\n\nd.gs = function (dscr, get, set/*, options*/) {\n\tvar c, e, options, desc;\n\tif (typeof dscr !== 'string') {\n\t\toptions = set;\n\t\tset = get;\n\t\tget = dscr;\n\t\tdscr = null;\n\t} else {\n\t\toptions = arguments[3];\n\t}\n\tif (get == null) {\n\t\tget = undefined;\n\t} else if (!isCallable(get)) {\n\t\toptions = get;\n\t\tget = set = undefined;\n\t} else if (set == null) {\n\t\tset = undefined;\n\t} else if (!isCallable(set)) {\n\t\toptions = set;\n\t\tset = undefined;\n\t}\n\tif (dscr == null) {\n\t\tc = true;\n\t\te = false;\n\t} else {\n\t\tc = contains.call(dscr, 'c');\n\t\te = contains.call(dscr, 'e');\n\t}\n\n\tdesc = { get: get, set: set, configurable: c, enumerable: e };\n\treturn !options ? desc : assign(normalizeOpts(options), desc);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/d/index.js\n ** module id = 38\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = function (fn) {\n\tif (typeof fn !== 'function') throw new TypeError(fn + \" is not a function\");\n\treturn fn;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/valid-callable.js\n ** module id = 39\n ** module chunks = 0\n **/","/**\n * lodash 3.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * A specialized version of `_.forEach` for arrays without support for callback\n * shorthands or `this` binding.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash._arrayeach/index.js\n ** module id = 40\n ** module chunks = 0\n **/","/**\n * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar keys = require('lodash.keys');\n\n/**\n * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * The base implementation of `_.forEach` without support for callback\n * shorthands and `this` binding.\n *\n * @private\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object|string} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `baseForIn` and `baseForOwn` which iterates\n * over `object` properties returned by `keysFunc` invoking `iteratee` for\n * each property. Iteratee functions may exit iteration early by explicitly\n * returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for callback\n * shorthands and `this` binding.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    var length = collection ? getLength(collection) : 0;\n    if (!isLength(length)) {\n      return eachFunc(collection, iteratee);\n    }\n    var index = fromRight ? length : -1,\n        iterable = toObject(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for `_.forIn` or `_.forInRight`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var iterable = toObject(object),\n        props = keysFunc(object),\n        length = props.length,\n        index = fromRight ? length : -1;\n\n    while ((fromRight ? index-- : ++index < length)) {\n      var key = props[index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * Gets the \"length\" property value of `object`.\n *\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n * that affects Safari on at least iOS 8.1-8.3 ARM64.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {*} Returns the \"length\" value.\n */\nvar getLength = baseProperty('length');\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Converts `value` to an object if it's not one.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {Object} Returns the object.\n */\nfunction toObject(value) {\n  return isObject(value) ? value : Object(value);\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = baseEach;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash._baseeach/index.js\n ** module id = 41\n ** module chunks = 0\n **/","/**\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * A specialized version of `baseCallback` which only supports `this` binding\n * and specifying the number of arguments to provide to `func`.\n *\n * @private\n * @param {Function} func The function to bind.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {number} [argCount] The number of arguments to provide to `func`.\n * @returns {Function} Returns the callback.\n */\nfunction bindCallback(func, thisArg, argCount) {\n  if (typeof func != 'function') {\n    return identity;\n  }\n  if (thisArg === undefined) {\n    return func;\n  }\n  switch (argCount) {\n    case 1: return function(value) {\n      return func.call(thisArg, value);\n    };\n    case 3: return function(value, index, collection) {\n      return func.call(thisArg, value, index, collection);\n    };\n    case 4: return function(accumulator, value, index, collection) {\n      return func.call(thisArg, accumulator, value, index, collection);\n    };\n    case 5: return function(value, other, key, object, source) {\n      return func.call(thisArg, value, other, key, object, source);\n    };\n  }\n  return function() {\n    return func.apply(thisArg, arguments);\n  };\n}\n\n/**\n * This method returns the first argument provided to it.\n *\n * @static\n * @memberOf _\n * @category Utility\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'user': 'fred' };\n *\n * _.identity(object) === object;\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = bindCallback;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash._bindcallback/index.js\n ** module id = 42\n ** module chunks = 0\n **/","/**\n * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar arrayTag = '[object Array]',\n    funcTag = '[object Function]';\n\n/** Used to detect host constructors (Safari > 5). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/**\n * Checks if `value` is object-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar fnToString = Function.prototype.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeIsArray = getNative(Array, 'isArray');\n\n/**\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = object == null ? undefined : object[key];\n  return isNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(function() { return arguments; }());\n * // => false\n */\nvar isArray = nativeIsArray || function(value) {\n  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;\n};\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in older versions of Chrome and Safari which return 'function' for regexes\n  // and Safari 8 equivalents which return 'object' for typed array constructors.\n  return isObject(value) && objToString.call(value) == funcTag;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is a native function.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n * @example\n *\n * _.isNative(Array.prototype.push);\n * // => true\n *\n * _.isNative(_);\n * // => false\n */\nfunction isNative(value) {\n  if (value == null) {\n    return false;\n  }\n  if (isFunction(value)) {\n    return reIsNative.test(fnToString.call(value));\n  }\n  return isObjectLike(value) && reIsHostCtor.test(value);\n}\n\nmodule.exports = isArray;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash.isarray/index.js\n ** module id = 43\n ** module chunks = 0\n **/","/**\n * lodash 3.2.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar baseCopy = require('lodash._basecopy'),\n    keys = require('lodash.keys');\n\n/**\n * The base implementation of `_.assign` without support for argument juggling,\n * multiple sources, and `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return source == null\n    ? object\n    : baseCopy(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._baseassign/index.js\n ** module id = 44\n ** module chunks = 0\n **/","'use strict';\n\nvar forEach = Array.prototype.forEach, create = Object.create;\n\nvar process = function (src, obj) {\n\tvar key;\n\tfor (key in src) obj[key] = src[key];\n};\n\nmodule.exports = function (options/*, …options*/) {\n\tvar result = create(null);\n\tforEach.call(arguments, function (options) {\n\t\tif (options == null) return;\n\t\tprocess(Object(options), result);\n\t});\n\treturn result;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/normalize-options.js\n ** module id = 45\n ** module chunks = 0\n **/","// Deprecated\n\n'use strict';\n\nmodule.exports = function (obj) { return typeof obj === 'function'; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/is-callable.js\n ** module id = 46\n ** module chunks = 0\n **/","/**\n * lodash 3.1.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar bindCallback = require('lodash._bindcallback'),\n    isIterateeCall = require('lodash._isiterateecall'),\n    restParam = require('lodash.restparam');\n\n/**\n * Creates a function that assigns properties of source object(s) to a given\n * destination object.\n *\n * **Note:** This function is used to create `_.assign`, `_.defaults`, and `_.merge`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return restParam(function(object, sources) {\n    var index = -1,\n        length = object == null ? 0 : sources.length,\n        customizer = length > 2 ? sources[length - 2] : undefined,\n        guard = length > 2 ? sources[2] : undefined,\n        thisArg = length > 1 ? sources[length - 1] : undefined;\n\n    if (typeof customizer == 'function') {\n      customizer = bindCallback(customizer, thisArg, 5);\n      length -= 2;\n    } else {\n      customizer = typeof thisArg == 'function' ? thisArg : undefined;\n      length -= (customizer ? 1 : 0);\n    }\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._createassigner/index.js\n ** module id = 47\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? Object.assign\n\t: require('./shim');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/assign/index.js\n ** module id = 49\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? String.prototype.contains\n\t: require('./shim');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/string/#/contains/index.js\n ** module id = 50\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = function () {\n\tvar assign = Object.assign, obj;\n\tif (typeof assign !== 'function') return false;\n\tobj = { foo: 'raz' };\n\tassign(obj, { bar: 'dwa' }, { trzy: 'trzy' });\n\treturn (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/assign/is-implemented.js\n ** module id = 51\n ** module chunks = 0\n **/","'use strict';\n\nvar keys  = require('../keys')\n  , value = require('../valid-value')\n\n  , max = Math.max;\n\nmodule.exports = function (dest, src/*, …srcn*/) {\n\tvar error, i, l = max(arguments.length, 2), assign;\n\tdest = Object(value(dest));\n\tassign = function (key) {\n\t\ttry { dest[key] = src[key]; } catch (e) {\n\t\t\tif (!error) error = e;\n\t\t}\n\t};\n\tfor (i = 1; i < l; ++i) {\n\t\tsrc = arguments[i];\n\t\tkeys(src).forEach(assign);\n\t}\n\tif (error !== undefined) throw error;\n\treturn dest;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/assign/shim.js\n ** module id = 52\n ** module chunks = 0\n **/","'use strict';\n\nvar str = 'razdwatrzy';\n\nmodule.exports = function () {\n\tif (typeof str.contains !== 'function') return false;\n\treturn ((str.contains('dwa') === true) && (str.contains('foo') === false));\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/string/#/contains/is-implemented.js\n ** module id = 53\n ** module chunks = 0\n **/","'use strict';\n\nvar indexOf = String.prototype.indexOf;\n\nmodule.exports = function (searchString/*, position*/) {\n\treturn indexOf.call(this, searchString, arguments[1]) > -1;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/string/#/contains/shim.js\n ** module id = 54\n ** module chunks = 0\n **/","/**\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property names to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @returns {Object} Returns `object`.\n */\nfunction baseCopy(source, props, object) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n    object[key] = source[key];\n  }\n  return object;\n}\n\nmodule.exports = baseCopy;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._baseassign/~/lodash._basecopy/index.js\n ** module id = 56\n ** module chunks = 0\n **/","/**\n * lodash 3.9.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]';\n\n/** Used to detect host constructors (Safari > 5). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/**\n * Checks if `value` is object-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar fnToString = Function.prototype.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = object == null ? undefined : object[key];\n  return isNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in older versions of Chrome and Safari which return 'function' for regexes\n  // and Safari 8 equivalents which return 'object' for typed array constructors.\n  return isObject(value) && objToString.call(value) == funcTag;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is a native function.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n * @example\n *\n * _.isNative(Array.prototype.push);\n * // => true\n *\n * _.isNative(_);\n * // => false\n */\nfunction isNative(value) {\n  if (value == null) {\n    return false;\n  }\n  if (isFunction(value)) {\n    return reIsNative.test(fnToString.call(value));\n  }\n  return isObjectLike(value) && reIsHostCtor.test(value);\n}\n\nmodule.exports = getNative;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash.keys/~/lodash._getnative/index.js\n ** module id = 57\n ** module chunks = 0\n **/","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\nmodule.exports = isArguments;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash.keys/~/lodash.isarguments/index.js\n ** module id = 59\n ** module chunks = 0\n **/","/**\n * lodash 3.0.9 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^\\d+$/;\n\n/**\n * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Gets the \"length\" property value of `object`.\n *\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n * that affects Safari on at least iOS 8.1-8.3 ARM64.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {*} Returns the \"length\" value.\n */\nvar getLength = baseProperty('length');\n\n/**\n * Checks if `value` is array-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(getLength(value));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return value > -1 && value % 1 == 0 && value < length;\n}\n\n/**\n * Checks if the provided arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n      ? (isArrayLike(object) && isIndex(index, object.length))\n      : (type == 'string' && index in object)) {\n    var other = object[index];\n    return value === value ? (value === other) : (other !== other);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isIterateeCall;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._createassigner/~/lodash._isiterateecall/index.js\n ** module id = 61\n ** module chunks = 0\n **/","/**\n * lodash 3.6.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that invokes `func` with the `this` binding of the\n * created function and arguments from `start` and beyond provided as an array.\n *\n * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n * @example\n *\n * var say = _.restParam(function(what, names) {\n *   return what + ' ' + _.initial(names).join(', ') +\n *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n * });\n *\n * say('hello', 'fred', 'barney', 'pebbles');\n * // => 'hello fred, barney, & pebbles'\n */\nfunction restParam(func, start) {\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        rest = Array(length);\n\n    while (++index < length) {\n      rest[index] = args[start + index];\n    }\n    switch (start) {\n      case 0: return func.call(this, rest);\n      case 1: return func.call(this, args[0], rest);\n      case 2: return func.call(this, args[0], args[1], rest);\n    }\n    var otherArgs = Array(start + 1);\n    index = -1;\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = rest;\n    return func.apply(this, otherArgs);\n  };\n}\n\nmodule.exports = restParam;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._createassigner/~/lodash.restparam/index.js\n ** module id = 62\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = function (value) {\n\tif (value == null) throw new TypeError(\"Cannot use null or undefined\");\n\treturn value;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/valid-value.js\n ** module id = 63\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? Object.keys\n\t: require('./shim');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/keys/index.js\n ** module id = 64\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = function () {\n\ttry {\n\t\tObject.keys('primitive');\n\t\treturn true;\n\t} catch (e) { return false; }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/keys/is-implemented.js\n ** module id = 65\n ** module chunks = 0\n **/","'use strict';\n\nvar keys = Object.keys;\n\nmodule.exports = function (object) {\n\treturn keys(object == null ? object : Object(object));\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/keys/shim.js\n ** module id = 66\n ** module chunks = 0\n **/","/**\n * lodash 3.1.2 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar getNative = require('lodash._getnative'),\n    isArguments = require('lodash.isarguments'),\n    isArray = require('lodash.isarray');\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^\\d+$/;\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = getNative(Object, 'keys');\n\n/**\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Gets the \"length\" property value of `object`.\n *\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n * that affects Safari on at least iOS 8.1-8.3 ARM64.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {*} Returns the \"length\" value.\n */\nvar getLength = baseProperty('length');\n\n/**\n * Checks if `value` is array-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(getLength(value));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return value > -1 && value % 1 == 0 && value < length;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * A fallback implementation of `Object.keys` which creates an array of the\n * own enumerable property names of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction shimKeys(object) {\n  var props = keysIn(object),\n      propsLength = props.length,\n      length = propsLength && object.length;\n\n  var allowIndexes = !!length && isLength(length) &&\n    (isArray(object) || isArguments(object));\n\n  var index = -1,\n      result = [];\n\n  while (++index < propsLength) {\n    var key = props[index];\n    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nvar keys = !nativeKeys ? shimKeys : function(object) {\n  var Ctor = object == null ? undefined : object.constructor;\n  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||\n      (typeof object != 'function' && isArrayLike(object))) {\n    return shimKeys(object);\n  }\n  return isObject(object) ? nativeKeys(object) : [];\n};\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  if (object == null) {\n    return [];\n  }\n  if (!isObject(object)) {\n    object = Object(object);\n  }\n  var length = object.length;\n  length = (length && isLength(length) &&\n    (isArray(object) || isArguments(object)) && length) || 0;\n\n  var Ctor = object.constructor,\n      index = -1,\n      isProto = typeof Ctor == 'function' && Ctor.prototype === object,\n      result = Array(length),\n      skipIndexes = length > 0;\n\n  while (++index < length) {\n    result[index] = (index + '');\n  }\n  for (var key in object) {\n    if (!(skipIndexes && isIndex(key, length)) &&\n        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = keys;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash._baseeach/~/lodash.keys/index.js\n ** module id = 55\n ** module chunks = 0\n **/"],"sourceRoot":"","file":"vr.js"}