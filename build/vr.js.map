{"version":3,"sources":["webpack:///vr.js","webpack:///webpack/bootstrap d668c44a558eab0535d8","webpack:///./src/entry.js","webpack:///./src/vr.js","webpack:///./src/css/style.css?21aa","webpack:///./src/css/style.css","webpack:///./~/ismobilejs/isMobile.js","webpack:///./~/style-loader/addStyles.js","webpack:///./bower_components/nosleep/NoSleep.js","webpack:///./src/materials.js","webpack:///./src/vr-object.js","webpack:///./src/objects/empty.js","webpack:///./src/objects ^\\.\\/.*$","webpack:///./src/objects/box.js","webpack:///./src/objects/cylinder.js","webpack:///./src/objects/floor.js","webpack:///./src/objects/grid.js","webpack:///./src/objects/image.js","webpack:///./src/objects/panorama.js","webpack:///./src/objects/sky.js","webpack:///./src/objects/sound.js","webpack:///./src/objects/sphere.js","webpack:///./src/objects/text.js","webpack:///./src/objects/torus.js","webpack:///./src/objects/video.js","webpack:///./bower_components/DeviceOrientationControls/index.js","webpack:///./bower_components/OrbitControls/index.js","webpack:///./bower_components/AugmentedConsole/index.js","webpack:///./src/lib/CSS3DRenderer.js","webpack:///./src/lib/CanvasRenderer.js","webpack:///./src/lib/Projector.js","webpack:///./src/lib/VRStereoEffect.js","webpack:///./src/lib/VRControls.js","webpack:///./~/css-loader/lib/css-base.js","webpack:///./~/event-emitter/index.js","webpack:///./~/three/build/three.js","webpack:///./src/utils/urlregex.js","webpack:///./~/lodash.foreach/index.js","webpack:///./~/lodash.assign/index.js","webpack:///./src/lib/ThreeAudio.js","webpack:///./bower_components/SkyShader/index.js","webpack:///./~/event-emitter/~/d/index.js","webpack:///./~/event-emitter/~/es5-ext/object/valid-callable.js","webpack:///./~/lodash.foreach/~/lodash._arrayeach/index.js","webpack:///./~/lodash.foreach/~/lodash._baseeach/index.js","webpack:///./~/lodash.foreach/~/lodash._bindcallback/index.js","webpack:///./~/lodash.foreach/~/lodash.isarray/index.js","webpack:///./~/lodash.assign/~/lodash._baseassign/index.js","webpack:///./~/lodash.assign/~/lodash._createassigner/index.js","webpack:///./~/event-emitter/~/es5-ext/object/normalize-options.js","webpack:///./~/event-emitter/~/es5-ext/object/is-callable.js","webpack:///./~/event-emitter/~/es5-ext/object/assign/index.js","webpack:///./~/event-emitter/~/es5-ext/string/#/contains/index.js","webpack:///./~/event-emitter/~/es5-ext/object/assign/is-implemented.js","webpack:///./~/event-emitter/~/es5-ext/object/assign/shim.js","webpack:///./~/event-emitter/~/es5-ext/string/#/contains/is-implemented.js","webpack:///./~/event-emitter/~/es5-ext/string/#/contains/shim.js","webpack:///./~/lodash.assign/~/lodash._baseassign/~/lodash._basecopy/index.js","webpack:///./~/lodash.assign/~/lodash._createassigner/~/lodash._isiterateecall/index.js","webpack:///./~/lodash.assign/~/lodash._createassigner/~/lodash.restparam/index.js","webpack:///./~/lodash.assign/~/lodash.keys/~/lodash._getnative/index.js","webpack:///./~/lodash.assign/~/lodash.keys/~/lodash.isarguments/index.js","webpack:///./~/event-emitter/~/es5-ext/object/valid-value.js","webpack:///./~/event-emitter/~/es5-ext/object/keys/index.js","webpack:///./~/event-emitter/~/es5-ext/object/keys/is-implemented.js","webpack:///./~/event-emitter/~/es5-ext/object/keys/shim.js","webpack:///./~/lodash.foreach/~/lodash._baseeach/~/lodash.keys/index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","i","_m","args","slice","fn","a","b","apply","concat","initRequirements","VR","initialize","noSleep","NoSleep","window","addEventListener","resize","isMobile","any","disableOrientation","THREE","isFullscreen","document","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","fullScreenError","vrMode","vrEffect","exit","pruneObject","object","raycastable","indexOf","splice","vrObjects","VRObject","findObject","children","forEach","raycast","intersect","intersects","parent","vrObject","prune","raycaster","ray","origin","setFromMatrixPosition","camera","matrixWorld","direction","set","unproject","sub","normalize","intersectObjects","length","scene","push","Mesh","target","emit","render","Date","now","lastTick","waitRenderInative","delta","Math","min","vrControls","update","animationCallbacks","cb","updateMatrixWorld","mouseControls","autoRotate","renderLoop","going","requestAnimationFrame","stop","start","visibilityChange","hidden","mozHidden","msHidden","webkitHidden","audioListener","volume","width","height","innerWidth","innerHeight","aspect","updateProjectionMatrix","renderer","setSize","initShake","lastX","lastY","lastZ","lastTime","threshold","evt","time","diff","dist","current","accelerationIncludingGravity","deltaX","deltaY","deltaZ","undefined","abs","x","y","z","sqrt","navigator","vibrate","orientationPossible","initScene","mode","attachCanvas","body","insertBefore","domElement","firstChild","renderMode","MODE_CSS","CSS3DRenderer","MODE_CANVAS","CanvasRenderer","setPixelRatio","devicePixelRatio","isSupportWebgl","WebGLRenderer","antialias","setClearColor","event","Scene","bodyWrapper","name","moveTo","cameraWrapper","PerspectiveCamera","NEAR","FAR","setFocalLength","add","AudioListener","VRControls","freeze","orientationEnabled","VRStereoEffect","near","far","screen","enabled","reset","lockOrientation","mozLockOrientation","orientation","lock","exitVR","position","rotation","isWebview","hmd","OrbitControls","target0","copy","enableZoom","enablePan","autoRotateSpeed","enableDamping","dampingFactor","autoRotateTimer","clearTimeout","setTimeout","dLight","DirectionalLight","castShadow","shadowCameraVisible","shadowMapWidth","shadowMapHeight","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraFar","shadowCameraNear","shadowDarkness","AmbientLight","canvas","zeroSensor","Raycaster","ImageUtils","crossOrigin","eventEmitter","materials","nop","requestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","bind","objectMethods","createElement","gl","experimental","getContext","Boolean","init","controls","animate","callback","end","requestVR","requestFullScreen","enableOrientation","controlMode","times","n","method","key","creator","options","obj","prototype","this","hasOwnProperty","Object","defineProperty","get","content","locals","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","global","apple_phone","apple_ipod","apple_tablet","android_phone","android_tablet","amazon_phone","amazon_tablet","windows_phone","windows_tablet","other_blackberry","other_blackberry_10","other_opera","other_chrome","other_firefox","seven_inch","RegExp","match","regex","userAgent","test","IsMobileClass","ua","tmp","split","apple","phone","ipod","tablet","device","amazon","android","windows","other","blackberry","blackberry10","opera","firefox","chrome","instantiate","IM","Class","addStylesToDom","styles","item","domStyle","stylesInDom","refs","j","parts","addStyle","listToStyles","list","newStyles","css","media","sourceMap","part","insertStyleElement","styleElement","head","getHeadElement","lastStyleElementInsertedAtTop","styleElementsInsertedAtTop","insertAt","nextSibling","appendChild","Error","removeStyleElement","parentNode","removeChild","idx","createStyleElement","type","createLinkElement","linkElement","rel","remove","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","URL","createObjectURL","revokeObjectURL","Blob","btoa","updateLink","href","applyToTag","newObj","index","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","setAttribute","unescape","encodeURIComponent","JSON","stringify","blob","oldSrc","memoize","memo","arguments","isOldIE","toLowerCase","getElementsByTagName","newList","mayRemove","textStore","replacement","filter","join","root","addSourceToVideo","element","dataURI","source","src","Android","iOS","WebM","MP4","noSleepTimer","noSleepVideo","enable","duration","disable","setInterval","location","play","clearInterval","pause","imageTexture","mapping","imageLoaded","scale","ctx","image","naturalWidth","naturalHeight","max","floor","drawImage","texture","needsUpdate","parse","isDataUri","dataUri","exec","urlRegex","images","hostname","port","Texture","material","threeTexture","textures","opts","Material","materialTypes","MeshLambertMaterial","map","assign","ambient","color","emissive","specularMap","normalMap","alphaMap","envMap","lightMap","val","assetPath","lambert","basic","MeshBasicMaterial","phong","MeshPhongMaterial","normal","MeshNormalMaterial","depth","MeshDepthMaterial","textureFiles","asphalt","repeat","brick-tiles","bricks","checkerboard","grass","metal-floor","shininess","metal","shading","SmoothShading","stone","tiles","weathered-wood","wood","standard","library","props","textureFactory","file","imagePath","url","Vector2","wrapS","wrapT","RepeatWrapping","materialDef","distance","geometry","scratchVector1","worldToLocal","boundingBox","distanceToPoint","scratchVector2","distanceTo","frustum","cameraViewProjectionMatrix","self","isNear","wasNear","NEAR_DISTANCE","receiveShadow","computeBoundingBox","allObjects","parseFloat","setMaterial","Color","prop","visible","Frustum","Matrix4","matrixWorldInverse","getInverse","multiplyMatrices","projectionMatrix","setFromMatrix","intersectsObject","xAxis","Vector3","yAxis","zAxis","WeakMap","hide","show","isNaN","moveX","translateX","moveY","translateY","moveUp","moveDown","moveZ","translateZ","rotateX","angle","rotateOnAxis","rotateY","rotateZ","setScale","e","count","Quaternion","offset","Object3D","webpackContext","req","webpackContextResolve","./box","./box.js","./cylinder","./cylinder.js","./empty","./empty.js","./floor","./floor.js","./grid","./grid.js","./image","./image.js","./panorama","./panorama.js","./sky","./sky.js","./sound","./sound.js","./sphere","./sphere.js","./text","./text.js","./torus","./torus.js","./video","./video.js","keys","resolve","BoxGeometry","mesh","cylinder","CylinderGeometry","radiusTop","radiusBottom","radiusSegments","heightSegments","openEnded","CircleGeometry","radius","segments","applyMatrix","makeRotationX","PI","size","step","GridHelper","setColors","colorCenterLine","color1","colorGrid","color2","tex","UVMapping","t","makeScale","PlaneBufferGeometry","side","DoubleSide","transparent","loadTexture","path","_parent","texturePlaceholder","overdraw","Image","onload","dispatchEvent","scaleX","scaleY","offsetX","offsetY","phiStart","phiLength","thetaStart","thetaLength","SphereGeometry","makeRotationY","mapRender","isListener","context","fillStyle","fillRect","STR_CHILDEN_NAME","preview","pretex","mapKey","cubeSrc","left","right","down","top","front","back","getObjectByName","cube","sides","callbackOnload","CSS3DObject","fromArray","arrMaterial","MultiMaterial","data","stereo","userData","TAU","HALF_PI","params","mod","sinTheta","cosTheta","phi","sinPhi","cosPhi","sin","altitude","cos","azimuth","sunPosition","light","intensity","exp","multiplyScalar","Sky","setOptions","param","uniforms","value","Array","isArray","setAltitude","setAzimuth","listener","Audio","load","widthSegments","fontSizeRegex","newLineRegex","spaceRegex","log2","log","nextPowerOfTwo","pow","ceil","Line","word","spaceWidth","measureText","totalWidth","wordsWidth","words","wrap","text","letter","line","inherit","fontSize","padding","lineHeight","measure","lines","getComputedStyle","resolution","wrapped","font","String","trim","charAt","reduce","previous","mipmap","textAlign","textBaseline","space","fillText","textWidth","textHeight","container","wordWidth","minFilter","LinearMipMapLinearFilter","generateMipmaps","TorusGeometry","tube","radialSegments","tubularSegments","arc","video","extRegex","isPowerOfTwo","num","loadedMetadata","newAspectRatio","vid","videoWidth","videoHeight","sphere","aspectRatio","LinearFilter","playing","setSource","sources","ext","hostΩ","canPlayType","loop","VideoTexture","format","RGBFormat","readyState","vol","muted","currentTime","error","code","MediaError","MEDIA_ERR_DECODE","touchStart","removeEventListener","DeviceOrientationControls","scope","reorder","deviceOrientation","screenOrientation","alpha","alphaOffsetAngle","onDeviceOrientationChangeEvent","onScreenOrientationChangeEvent","setObjectQuaternion","zee","euler","Euler","q0","q1","quaternion","beta","gamma","orient","setFromEuler","multiply","setFromAxisAngle","connect","disconnect","degToRad","updateAlphaOffsetAngle","dispose","getAutoRotationAngle","getZoomScale","zoomSpeed","rotateLeft","sphericalDelta","theta","rotateUp","dollyIn","dollyScale","OrthographicCamera","zoom","minZoom","maxZoom","zoomChanged","dollyOut","handleMouseDownRotate","rotateStart","clientX","clientY","handleMouseDownDolly","dollyStart","handleMouseDownPan","panStart","handleMouseMoveRotate","rotateEnd","rotateDelta","subVectors","clientWidth","rotateSpeed","clientHeight","handleMouseMoveDolly","dollyEnd","dollyDelta","handleMouseMovePan","panEnd","panDelta","pan","handleMouseUp","handleMouseWheel","handleKeyDown","keyCode","UP","keyPanSpeed","BOTTOM","LEFT","RIGHT","handleTouchStartRotate","touches","pageX","pageY","handleTouchStartDolly","dx","dy","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleTouchEnd","onMouseDown","preventDefault","button","mouseButtons","ORBIT","enableRotate","state","STATE","ROTATE","ZOOM","DOLLY","PAN","NONE","onMouseMove","onMouseUp","startEvent","endEvent","onMouseWheel","stopPropagation","onKeyDown","enableKeys","onTouchStart","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","onTouchMove","onTouchEnd","onContextMenu","minDistance","maxDistance","Infinity","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","MOUSE","MIDDLE","clone","position0","zoom0","getPolarAngle","spherical","getAzimuthalAngle","changeEvent","quat","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","applyQuaternion","setFromVector3","makeSafe","panOffset","setFromSpherical","lookAt","distanceToSquared","EPS","dot","Spherical","panLeft","v","objectMatrix","setFromMatrixColumn","panUp","targetDistance","tan","fov","matrix","bottom","create","EventDispatcher","constructor","defineProperties","center","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","addSupportedType","supportedTypes","_oldConsole","console","elements","Matrix3","Vector4","w","order","Ray","Ray origin","Ray direction","special","style","CSS3DSprite","_width","_height","_widthHalf","_heightHalf","cache","objects","overflow","WebkitTransformStyle","MozTransformStyle","oTransformStyle","transformStyle","cameraElement","getSize","epsilon","getCameraCSSMatrix","getObjectCSSMatrix","renderObject","transpose","copyPosition","cachedStyle","WebkitTransform","MozTransform","oTransform","transform","l","getEffectiveFOV","WebkitPerspective","MozPerspective","oPerspective","perspective","SpriteCanvasMaterial","parameters","program","setValues","calculateLights","_ambientLight","setRGB","_directionalLights","_pointLights","ll","_lights","lightColor","PointLight","calculateLight","_lightColor","lightPosition","_vector3","amount","renderSprite","v1","setOpacity","opacity","setBlending","blending","_canvasWidthHalf","_canvasHeightHalf","_elemBox","SpriteMaterial","pattern","_patterns","version","textureToPattern","setFillStyle","bitmap","ox","oy","sx","sy","cx","cy","_context","save","translate","rotate","restore","getStyle","setStrokeStyle","renderLine","v2","beginPath","positionScreen","lineTo","LineBasicMaterial","setLineWidth","linewidth","setLineCap","linecap","setLineJoin","linejoin","vertexColors","VertexColors","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","expandByScalar","LineDashedMaterial","setLineDash","dashSize","gapSize","renderFace3","v3","uv1","uv2","uv3","_this","info","vertices","faces","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","drawTriangle","_diffuseColor","_emissiveColor","FaceColors","_color","_centroid","positionWorld","divideScalar","normalModel","wireframe","strokePath","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","fillPath","_uvs","uvs","patternPath","SphericalReflectionMapping","_normal","vertexNormalsModel","applyMatrix3","_normalViewMatrix","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","addScalar","x0","y0","x1","y1","x2","y2","closePath","fill","CompressedTexture","DataTexture","complete","setTransform","repeatX","repeatY","createPattern","onUpdate","u0","v0","u1","u2","d","f","det","idet","expand","pixels","_contextGlobalAlpha","globalAlpha","_contextGlobalCompositeOperation","NormalBlending","globalCompositeOperation","AdditiveBlending","SubtractiveBlending","MultiplyBlending","_contextLineWidth","lineWidth","_contextLineCap","lineCap","_contextLineJoin","lineJoin","_contextStrokeStyle","strokeStyle","_contextFillStyle","_contextLineDash","_renderData","_elements","_camera","_v1","_v2","_v3","_projector","Projector","_canvas","_canvasWidth","_canvasHeight","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_pixelRatio","_clearColor","_clearAlpha","RenderableVertex","_clipBox","Box2","_clearBox","autoClear","sortObjects","sortElements","supportsVertexTextures","setFaceCulling","getContextAttributes","getPixelRatio","updateStyle","setViewport","setScissor","setScissorTest","setClearColorHex","hex","getClearColor","getClearAlpha","getMaxAnisotropy","clear","isEmpty","clearRect","r","g","makeEmpty","clearColor","clearDepth","clearStencil","Camera","projectScene","lights","getNormalMatrix","el","RenderableSprite","RenderableLine","setFromPoints","intersectsBox","RenderableFace","union","RenderableObject","renderOrder","vertexNormalsLength","vertex","getNextObjectInPool","_objectCount","_objectPoolLength","_objectPool","getNextVertexInPool","_vertexCount","_vertexPoolLength","_vertexPool","getNextFaceInPool","_faceCount","_facePoolLength","face","_facePool","getNextLineInPool","_lineCount","_linePoolLength","_linePool","getNextSpriteInPool","_spriteCount","_spritePoolLength","sprite","_spritePool","painterSort","clipLine","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","lerp","_object","_vertex","_face","_line","_sprite","_modelMatrix","_vector4","Box3","_boundingBox","_points3","_viewMatrix","_viewProjectionMatrix","_modelViewProjectionMatrix","_normalMatrix","_frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","project","unprojectVector","pickingRay","RenderList","setObject","normalMatrix","normals","projectVertex","applyMatrix4","invW","pushVertex","pushNormal","pushUv","checkTriangleVisibility","checkBackfaceCulling","pushLine","pushTriangle","uv","renderList","addObject","applyProjection","autoUpdate","traverseVisible","Light","frustumCulled","Sprite","intersectsSprite","sort","o","ol","BufferGeometry","attributes","groups","positions","array","indices","group","Geometry","faceVertexUvs","isFaceMaterial","objectMaterials","vl","morphTargets","morphInfluences","morphTargetInfluences","tl","influence","targetVertex","fl","materialIndex","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","nl","vertexUvs","u","LineSegments","colors","fullScreenElement","perspectiveMatrixFromVRFieldOfView","zNear","zFar","outMat","out","upTan","upDegrees","RADIANS","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","h","hmdDevice","hmdWidth","hmdHeight","offsetWidth","offsetHeight","updateProjection","fovLeft","fovRight","leftEyeParams","rightEyeParams","leftEyeRect","rightEyeRect","leftEyeViewport","rightEyeViewport","getEyeParameters","renderRect","currentFieldOfView","setFieldOfView","eyeOffsetLeft","eyeTranslation","eyeOffsetRight","leftRenderRect","rightRenderRect","getRecommendedEyeRenderRect","getCurrentEyeFieldOfView","getRecommendedEyeFieldOfView","getEyeTranslation","cameraLeft","cameraRight","gotVRDevices","devices","HMDVRDevice","hardwareUnitId","setTimewarp","fullScreenParam","vrDisplay","poll","pollTimeout","scan","onFullscreenChange","inWebview","vrPreview","separation","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","getVRDevices","then","mozGetVRDevices","bool","leftScene","rightScene","renderTarget","forceClear","WebGLRenderTarget","decompose","drawingBufferWidth","setRenderTarget","enableScissorTest","PositionSensorVRDevice","sensorDevice","resetSensor","deviceOrientationChange","deviceControls","vrState","zeroAngle","vrBrowser","getState","hasOrientation","hasPosition","toString","result","mediaQuery","alreadyImportedModules","on","once","off","methods","descriptors","base","callable","Function","descriptor","configurable","enumerable","writable","__ee__","__eeOnceListener__","listeners","candidate","factory","magFilter","anisotropy","encoding","TextureIdCount","uuid","generateUUID","sourceFile","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","ClampToEdgeWrapping","RGBAFormat","UnsignedByteType","premultiplyAlpha","flipY","unpackAlignment","LinearEncoding","scissor","scissorTest","viewport","depthBuffer","stencilBuffer","depthTexture","WebGLRenderTargetCube","activeCubeFace","activeMipMapLevel","_x","_y","_z","_w","Float32Array","CubeTexture","CubeReflectionMapping","UniformContainer","seq","flatten","nBlocks","blockSize","firstElem","arrayCacheF32","toArray","allocTexUnits","arrayCacheI32","Int32Array","allocTextureUnit","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setTexture2D","emptyTexture","setValueT6","setTextureCube","emptyCubeTexture","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","getSingularSetter","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","units","setValueT6a","getPureArraySetter","SingleUniform","activeInfo","setValue","PureArrayUniform","StructuredUniform","addUniform","uniformObject","parseUniform","pathLength","RePathPart","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","LensFlarePlugin","flares","Uint16Array","vertexBuffer","createBuffer","elementBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","tempTexture","createTexture","occlusionTexture","bindTexture","TEXTURE_2D","texImage2D","RGB","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","RGBA","shader","vertexShader","fragmentShader","createProgram","getAttribLocation","renderType","occlusionMap","screenPosition","createShader","FRAGMENT_SHADER","VERTEX_SHADER","prefix","getPrecision","shaderSource","compileShader","attachShader","linkProgram","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","useProgram","initAttributes","enableAttribute","disableUnusedAttributes","vertexAttribPointer","FLOAT","CULL_FACE","setDepthWrite","flare","containsPoint","activeTexture","TEXTURE0","TEXTURE1","copyTexImage2D","BLEND","DEPTH_TEST","drawElements","TRIANGLES","UNSIGNED_SHORT","customUpdateCallback","updateLensFlares","jl","lensFlares","blendEquation","blendSrc","blendDst","resetGLState","SpritePlugin","sprites","uvOffset","uvScale","modelViewMatrix","fogType","fogDensity","fogNear","fogFar","fogColor","alphaTest","createElementNS","painterSortStable","spritePosition","spriteRotation","spriteScale","oldFogType","sceneFogType","fog","isFog","isFogExp2","density","setDepthTest","depthTest","depthWrite","MaterialIdCount","NoColors","SrcAlphaFactor","OneMinusSrcAlphaFactor","AddEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","LessEqualDepth","clippingPlanes","clipShadows","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","_needsUpdate","count$1","ShaderMaterial","defines","clipping","skinning","morphNormals","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","depthPacking","BasicDepthPacking","displacementMap","displacementScale","displacementBias","Sphere","Plane","constant","p0","p1","p2","p3","p4","p5","planes","WebGLShadowMap","_renderer","_objects","capabilities","getDepthMaterial","isPointLight","lightPositionWorld","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","isBufferGeometry","morphAttributes","isGeometry","useSkinning","isSkinnedMesh","variantIndex","_MorphingFlag","_SkinningFlag","localClippingEnabled","keyA","keyB","materialsForVariant","_materialCache","cachedMaterial","renderSingleSided","renderReverseSided","lightPos","projectObject","shadowCamera","layers","mask","isMesh","isLine","isPoints","_renderList","_gl","_state","_projScreenMatrix","_lightShadows","shadows","_shadowMapSize","_maxShadowMapSize","maxTextureSize","_lookTarget","_lightPositionWorld","_NumberOfMaterialVariants","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","RGBADepthPacking","distanceShader","ShaderLib","distanceUniforms","UniformsUtils","depthMaterial","distanceMaterial","USE_SHADOWMAP","PCFShadowMap","faceCount","il","shadow","mapSize","vpWidth","vpHeight","pars","NearestFilter","isSpotLightShadow","shadowMap","shadowMatrix","vpDimensions","isMultiMaterial","k","kl","groupMaterial","renderBufferDirect","clearAlpha","_order","DefaultOrder","Layers","onRotationChange","onQuaternionChange","setFromQuaternion","Object3DIdCount","DefaultUp","onChange","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","onBeforeRender","count$2","Line3","Triangle","Face3","isVector3","isColor","aoMap","aoMapIntensity","combine","MultiplyOperation","reflectivity","refractionRatio","BufferAttribute","itemSize","normalized","TypeError","dynamic","updateRange","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Int32Attribute","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","setDynamic","GeometryIdCount","skinWeights","skinIndices","lineDistances","boundingSphere","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","count$3","DirectGeometry","uvs2","drawRange","random","drawMode","TrianglesDrawMode","updateMorphTargets","BoxBufferGeometry","depthSegments","calculateVertexCount","calculateIndexCount","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy","ix","vertexBufferOffset","uvBufferOffset","numberOfVertices","indexBufferOffset","addGroup","groupStart","vertexCount","indexCount","setIndex","addAttribute","width_half","height_half","segment_width","segment_height","offset2","focus","view","filmGauge","filmOffset","WebGLIndexedBufferRenderer","infoRender","setMode","UNSIGNED_INT","calls","renderInstances","extension","drawElementsInstancedANGLE","maxInstancedCount","WebGLBufferRenderer","drawArrays","isInterleavedBufferAttribute","drawArraysInstancedANGLE","WebGLLights","shadowBias","shadowRadius","shadowMapSize","coneCos","penumbraCos","decay","skyColor","groundColor","WebGLShader","string","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getEncodingComponents","sRGBEncoding","RGBEEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","GammaEncoding","getTexelDecodingFunction","functionName","components","getTexelEncodingFunction","getToneMappingFunction","toneMapping","toneMappingName","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","generateExtensions","rendererExtensions","chunks","envMapCubeUV","bumpMap","flatShading","logarithmicDepthBuffer","filterEmptyLine","generateDefines","fetchAttributeLocations","identifiers","ACTIVE_ATTRIBUTES","getActiveAttrib","replaceLightNums","replace","numDirLights","numSpotLights","numPointLights","numHemiLights","parseIncludes","include","ShaderChunk","unrollLoops","snippet","unroll","parseInt","WebGLProgram","__webglShader","shadowMapTypeDefine","shadowMapType","PCFSoftShadowMap","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","CubeRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","MixOperation","AddOperation","prefixVertex","prefixFragment","gammaFactorDefine","gammaFactor","customExtensions","customDefines","isRawShaderMaterial","maxBones","emissiveMap","roughnessMap","metalnessMap","useVertexTexture","doubleSided","flipSided","numClippingPlanes","shadowMapEnabled","sizeAttenuation","useFog","fogExp","physicallyCorrectLights","NoToneMapping","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","isShaderMaterial","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","bindAttribLocation","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","diagnostics","deleteShader","cachedUniforms","getUniforms","cachedAttributes","getAttributes","destroy","deleteProgram","programIdCount","usedTimes","WebGLPrograms","allocateBones","floatVertexTextures","skeleton","nVertexUniforms","maxVertexUniforms","nVertexMatrices","bones","getTextureEncodingFromMap","gammaOverrideLinear","isTexture","isWebGLRenderTarget","programs","shaderIDs","MeshStandardMaterial","MeshPhysicalMaterial","PointsMaterial","parameterNames","getParameters","nClipPlanes","shaderID","getMaxPrecision","currentRenderTarget","getCurrentRenderTarget","vertexTextures","gammaOutput","gammaInput","envMapMode","FlatShading","maxMorphTargets","maxMorphNormals","directional","point","spot","hemi","getProgramCode","acquireProgram","pl","programInfo","releaseProgram","pop","WebGLGeometries","properties","onGeometryDispose","buffergeometry","geometries","deleteAttribute","deleteAttributes","property","bufferproperty","memory","getAttributeBuffer","attribute","__webglBuffer","buffer","deleteBuffer","removeAttributeBuffer","_bufferGeometry","setFromObject","WebGLObjects","updateFromObject","updateAttribute","bufferType","attributeProperties","updateBuffer","usage","DYNAMIC_DRAW","bufferSubData","BYTES_PER_ELEMENT","subarray","getWireframeAttribute","TypeArray","WebGLTextures","paramThreeToGL","clampToMaxSize","maxSize","makePowerOfTwo","HTMLImageElement","HTMLCanvasElement","nearestPowerOfTwo","textureNeedsPowerOfTwo","filterFallback","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LINEAR","onTextureDispose","deallocateTexture","_infoMemory","onRenderTargetDispose","deallocateRenderTarget","textureProperties","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","renderTargetProperties","isWebGLRenderTargetCube","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","slot","__version","uploadTexture","TEXTURE_CUBE_MAP","pixelStorei","UNPACK_FLIP_Y_WEBGL","isCompressed","isCompressedTexture","isDataTexture","cubeImage","maxCubemapSize","isPowerOfTwoImage","glFormat","glType","setTextureParameters","getCompressedTextureFormats","compressedTexImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","generateMipmap","setTextureCubeDynamic","textureType","FloatType","HalfFloatType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","isDepthTexture","internalFormat","DEPTH_COMPONENT","_isWebGL2","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DepthStencilFormat","DEPTH_STENCIL","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthTexture","isCube","webglDepthTexture","DepthFormat","setupDepthRenderbuffer","createRenderbuffer","setupRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","webglTexture","WebGL2RenderingContext","WebGLProperties","delete","WebGLState","ColorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","setClear","equals","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","setTest","depthMask","setFunc","NeverDepth","NEVER","AlwaysDepth","ALWAYS","LessDepth","LESS","LEQUAL","EqualDepth","EQUAL","GreaterEqualDepth","GEQUAL","GreaterDepth","GREATER","NotEqualDepth","NOTEQUAL","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","stencil","setDepthFunc","setFlipSided","setCullFace","CullFaceBack","newAttributes","enabledAttributes","enableVertexAttribArray","attributeDivisors","vertexAttribDivisorANGLE","enableAttributeAndDivisor","meshPerAttribute","disableVertexAttribArray","compressedTextureFormats","formats","getParameter","COMPRESSED_TEXTURE_FORMATS","NoBlending","currentBlending","currentPremultipledAlpha","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE","blendFunc","SRC_ALPHA","ZERO","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","SRC_COLOR","CustomBlending","currentBlendEquation","currentBlendEquationAlpha","currentBlendSrc","currentBlendDst","currentBlendSrcAlpha","currentBlendDstAlpha","setColorWrite","colorBuffer","setStencilTest","setStencilWrite","stencilWrite","setStencilFunc","setStencilOp","currentFlipSided","frontFace","CW","CCW","cullFace","CullFaceNone","currentCullFace","BACK","CullFaceFront","FRONT","FRONT_AND_BACK","currentLineWidth","setPolygonOffset","factor","POLYGON_OFFSET_FILL","currentPolygonOffsetFactor","currentPolygonOffsetUnits","getScissorTest","currentScissorTest","SCISSOR_TEST","webglSlot","maxTextures","currentTextureSlot","webglType","boundTexture","currentBoundTextures","emptyTextures","currentScissor","currentViewport","maxVertexAttributes","MAX_VERTEX_ATTRIBS","MAX_TEXTURE_IMAGE_UNITS","buffers","WebGLCapabilities","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getShaderPrecisionFormat","HIGH_FLOAT","MEDIUM_FLOAT","maxPrecision","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","floatFragmentTextures","WebGLExtensions","getExtension","WebGLClipping","resetGlobalState","uniform","globalState","numGlobalPlanes","numPlanes","projectPlanes","dstOffset","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","viewNormalMatrix","i4","plane","renderingShadows","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","getTargetPixelRatio","_currentRenderTarget","glClearColor","_premultipliedAlpha","setDefaultGLState","_currentScissor","_scissor","_currentViewport","_viewport","_currentProgram","_currentCamera","_currentGeometryProgram","_currentMaterialId","onContextLost","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReference","programCache","setupVertexAttributes","startIndex","isInstancedBufferGeometry","geometryAttributes","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","SHORT","INT","BYTE","stride","isInstancedInterleavedBuffer","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","absNumericalSort","reversePainterSortStable","pushRenderItem","transparentObjects","transparentObjectsLastIndex","opaqueObjects","opaqueObjectsLastIndex","renderItem","isObjectViewable","computeBoundingSphere","_sphere","isSphereViewable","isSpriteViewable","intersectsSphere","_clipping","negRad","isLight","isSprite","isLensFlare","isImmediateRenderObject","renderObjects","overrideMaterial","setProgram","renderBufferImmediate","initMaterial","materialProperties","programChange","numSupportedMorphTargets","numSupportedMorphNormals","lightsHash","hash","ambientLightColor","directionalLights","spotLights","pointLights","hemisphereLights","directionalShadowMap","directionalShadowMatrix","spotShadowMap","spotShadowMatrix","pointShadowMap","pointShadowMatrix","progUniforms","uniformsList","seqWithValue","dynamicUniforms","splitDynamic","_usedTextureUnits","_clippingEnabled","_localClippingEnabled","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","LN2","isMeshPhongMaterial","isMeshStandardMaterial","uCamPos","cameraPosition","isMeshLambertMaterial","isMeshBasicMaterial","setOptional","markUniformsLightsNeedsUpdate","refreshUniformsFog","isMeshDepthMaterial","refreshUniformsCommon","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","refreshUniformsLambert","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshNormalMaterial","upload","dynUniforms","evalDynamic","diffuse","emissiveIntensity","uvScaleMap","offsetRepeat","flipEnvMap","isCubeTexture","totalSize","lightMapIntensity","specular","bumpScale","normalScale","roughness","metalness","envMapIntensity","clearCoat","clearCoatRoughness","setupShadows","lightShadowsLength","setupLights","directionalLength","pointLength","spotLength","hemiLength","isAmbientLight","isDirectionalLight","lightCache","transformDirection","bias","isSpotLight","penumbra","identity","setPosition","isHemisphereLight","textureUnit","REPEAT","MirroredRepeatWrapping","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LinearMipMapNearestFilter","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UnsignedShort4444Type","UNSIGNED_SHORT_4_4_4_4","UnsignedShort5551Type","UNSIGNED_SHORT_5_5_5_1","UnsignedShort565Type","UNSIGNED_SHORT_5_6_5","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","HALF_FLOAT_OES","AlphaFormat","ALPHA","LuminanceFormat","LUMINANCE","LuminanceAlphaFormat","LUMINANCE_ALPHA","SubtractEquation","FUNC_SUBTRACT","ReverseSubtractEquation","FUNC_REVERSE_SUBTRACT","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","DstAlphaFactor","DST_ALPHA","OneMinusDstAlphaFactor","ONE_MINUS_DST_ALPHA","DstColorFactor","DST_COLOR","OneMinusDstColorFactor","ONE_MINUS_DST_COLOR","SrcAlphaSaturateFactor","SRC_ALPHA_SATURATE","RGB_S3TC_DXT1_Format","COMPRESSED_RGB_S3TC_DXT1_EXT","RGBA_S3TC_DXT1_Format","COMPRESSED_RGBA_S3TC_DXT1_EXT","RGBA_S3TC_DXT3_Format","COMPRESSED_RGBA_S3TC_DXT3_EXT","RGBA_S3TC_DXT5_Format","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1_Format","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","RGB_PVRTC_2BPPV1_Format","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","RGBA_PVRTC_4BPPV1_Format","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","RGBA_PVRTC_2BPPV1_Format","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1_Format","COMPRESSED_RGB_ETC1_WEBGL","MinEquation","MIN_EXT","MaxEquation","MAX_EXT","UnsignedInt248Type","UNSIGNED_INT_24_8_WEBGL","_alpha","_depth","_stencil","_antialias","_preserveDrawingBuffer","preserveDrawingBuffer","autoClearColor","autoClearDepth","autoClearStencil","toneMappingExposure","toneMappingWhitePoint","_currentFramebuffer","_currentScissorTest","_scissorTest","_infoRender","points","rangeMin","rangeMax","MaxIndex","bufferRenderer","indexedBufferRenderer","backgroundCamera","backgroundCamera2","backgroundPlaneMesh","backgroundBoxShader","backgroundBoxMesh","spritePlugin","lensFlarePlugin","forceContextLoss","loseContext","boolean","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","nx","ny","nz","uvArray","colorArray","updateBuffers","geometryProgram","activeInfluences","removeAttribute","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","LINES","TriangleStripDrawMode","TRIANGLE_STRIP","TriangleFanDrawMode","TRIANGLE_FAN","isLineSegments","LINE_STRIP","POINTS","isCamera","background","extractRotation","frontFaceDirection","FrontFaceDirectionCW","warned","setTexture","readRenderTargetPixels","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","FogExp2","Fog","LensFlare","LOD","levels","Skeleton","boneInverses","identityMatrix","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","Bone","skin","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","bone","gbone","pos","rotq","scl","normalizeSkinWeights","Points","Group","HAVE_CURRENT_DATA","CanvasTexture","DepthTexture","WireframeGeometry","sortFunction","edge","numEdges","edges","coords","index2","getX","getY","getZ","numTris","index1","ParametricGeometry","func","slices","stacks","verts","sliceCount","uva","uvb","uvc","uvd","computeFaceNormals","computeVertexNormals","PolyhedronGeometry","detail","prepare","that","inclination","make","centroid","azi","correctUV","subdivide","cols","aj","bj","rows","atan2","mergeVertices","TetrahedronGeometry","OctahedronGeometry","IcosahedronGeometry","DodecahedronGeometry","TubeGeometry","closed","taper","vert","NoTaper","tangent","binormal","ip","jp","grid","numpoints","pos2","frames","FrenetFrames","tangents","binormals","getPointAt","TorusKnotBufferGeometry","q","calculatePositionOnCurve","cu","su","quOverP","cs","indexOffset","P1","P2","B","T","N","addVectors","crossVectors","setXYZ","setXY","setX","TorusKnotGeometry","heightScale","fromBufferGeometry","TorusBufferGeometry","ExtrudeGeometry","shapes","addShapeList","TextGeometry","isFont","generateShapes","curveSegments","bevelThickness","bevelSize","bevelEnabled","SphereBufferGeometry","thetaEnd","verticesRow","px","py","pz","v4","RingBufferGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","segment","radiusStep","thetaSegmentLevel","RingGeometry","PlaneGeometry","LatheBufferGeometry","clamp","inverseSegments","n1","n2","LatheGeometry","ShapeGeometry","EdgesGeometry","thresholdAngle","geometry2","thresholdDot","DEG2RAD","vert1","vert2","face1","face2","CylinderBufferGeometry","nbCap","generateTorso","slope","indexRow","halfHeight","indexArray","i1","i2","i3","generateCap","centerIndexStart","centerIndexEnd","sign","ConeGeometry","ConeBufferGeometry","CircleBufferGeometry","s","ii","ShadowMaterial","merge","UniformsLib","RawShaderMaterial","STANDARD","PHYSICAL","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","onStart","itemStart","itemEnd","itemError","XHRLoader","manager","DefaultLoadingManager","CompressedTextureLoader","_parser","BinaryTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","HemisphereLight","updateMatrix","LightShadow","SpotLightShadow","SpotLight","power","DirectionalLightShadow","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrackConstructor","values","interpolation","AnimationUtils","convertArray","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","validate","optimize","VectorKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","NumberKeyframeTrack","StringKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","KeyframeTrack","AnimationClip","tracks","resetDuration","MaterialLoader","BufferGeometryLoader","Loader","onLoadStart","onLoadProgress","onLoadComplete","JSONLoader","withCredentials","ObjectLoader","texturePath","Curve","LineCurve","CurvePath","curves","autoClose","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","SplineCurve","CubicBezierCurve","QuadraticBezierCurve","Shape","Path","holes","currentPoint","fromPoints","ShapePath","subPaths","currentPath","Font","FontLoader","getAudioContext","AudioContext","webkitAudioContext","AudioLoader","StereoCamera","eyeSep","cameraL","cameraR","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","updateCubeMap","gain","createGain","destination","createBufferSource","onended","onEnded","getInput","autoplay","startTime","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","PositionalAudio","panner","createPanner","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getOutput","PropertyMixer","binding","typeName","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","PropertyBinding","rootNode","parsedPath","parseTrackName","node","findNode","nodeName","AnimationObjectGroup","var_args","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindings","_bindingsIndicesByPath","stats",{"end":{"file":"vr.js","comments_before":[],"nlb":false,"endpos":1153038,"endcol":17,"endline":44003,"pos":1153033,"col":12,"line":44003,"value":"total","type":"name","_comments_dumped":true},"start":{"file":"vr.js","comments_before":[],"nlb":false,"endpos":1153038,"endcol":17,"endline":44003,"pos":1153033,"col":12,"line":44003,"value":"total","type":"name","_comments_dumped":true},"name":"total"},"total","inUse","bindingsPerObject","AnimationAction","mixer","clip","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","endingStart","ZeroCurvatureEnding","endingEnd","interpolant","createInterpolant","settings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","LoopRepeat","_loopCount","_startTime","timeScale","_effectiveTimeScale","weight","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","_root","_initMemoryManager","_accuIndex","Uniform","InstancedBufferGeometry","InterleavedBufferAttribute","interleavedBuffer","InterleavedBuffer","InstancedInterleavedBuffer","InstancedBufferAttribute","PointCloud","ascSort","intersectObject","recursive","Clock","autoStart","oldTime","elapsedTime","running","Spline","interpolate","t2","t3","intPoint","w2","w3","pa","pb","pc","pd","initFromArray","getPoint","getControlPointsArray","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","MorphBlendMesh","animationsMap","animationsList","numFrames","startFrame","endFrame","fps","createAnimation","setAnimationWeight","ImmediateRenderObject","renderCallback","VertexNormalsHelper","nNormals","objGeometry","SpotLightHelper","cone","SkeletonHelper","getBoneList","isBone","PointLightHelper","sphereSize","HemisphereLightHelper","lightSphere","divisions","FaceNormalsHelper","DirectionalLightHelper","CameraHelper","addLine","addPoint","pointMap","hexFrustum","hexCone","hexUp","hexTarget","hexCross","BoundingBoxHelper","box","BoxHelper","ArrowHelper","dir","headLength","headWidth","lineGeometry","coneGeometry","setDirection","setLength","AxisHelper","ClosedSplineCurve3","CatmullRomCurve3","ArcCurve","aRadius","Face4","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","EdgesHelper","WireframeHelper","Number","EPSILON","output","nextKey","_listeners","hasEventListener","listenerArray","REVISION","CullFaceFrontBack","FrontFaceDirectionCCW","BasicShadowMap","BlendingMode","TextureMapping","TextureWrapping","TextureFilter","RGBEFormat","LoopOnce","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroSlopeEnding","WrapAroundEnding","LogLuvEncoding","RAD2DEG","chars","rnd","euclideanModulo","mapLinear","a1","a2","b1","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degrees","radToDeg","radians","round","isVector2","setScalar","scalar","setY","setComponent","getComponent","addScaledVector","subScalar","isFinite","divide","clampScalar","minVal","maxVal","clampLength","roundToZero","lengthSq","lengthManhattan","distanceToManhattan","lerpVectors","fromAttribute","rotateAround","toJSON","meta","getDataURL","toDataURL","metadata","generator","transformUv","isVector4","setZ","setW","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","epsilon2","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","onChangeCallback","isEuler","c1","c2","c3","s3","axis","halfAngle","setFromRotationMatrix","trace","vFrom","vTo","conjugate","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","slerp","qb","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","qa","qm","slerpFlat","dst","src0","srcOffset0","src1","srcOffset1","z0","w0","z1","w1","sqrSin","len","tDir","multiplyVectors","applyEuler","applyAxisAngle","qx","qy","qz","qw","iz","iw","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","angleTo","dz","sinPhiRadius","setFromMatrixScale","sz","temp","isMatrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","me","extractBasis","makeBasis","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","z2","wx","wy","wz","eye","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","applyToVector3Array","applyToBuffer","determinant","flattenToArrayOffset","getPosition","throwOnDegenerate","t11","t12","t13","t14","msg","detInv","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationZ","makeRotationAxis","tx","ty","compose","invSX","invSY","invSZ","makeFrustum","makePerspective","ymax","ymin","xmin","xmax","makeOrthographic","onUpdateCallback","merged","uniforms_src","uniforms_dst","parameter_src","isMatrix3","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_fragment","fog_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_template","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_flip","normal_fragment","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","setHex","setStyle","setHSL","hue2rgb","handleAlpha","ColorKeywords","copyGammaToLinear","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","getHSL","optionalTarget","hue","saturation","hsl","lightness","offsetHSL","addColors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","dashed","tCube","tFlip","equirect","tEquirect","distanceRGBA","physical","expandByPoint","setFromCenterAndSize","halfSize","getCenter","expandByVector","containsBox","clampPoint","clampedPoint","isMaterial","newValue","currentValue","extractFromCache","isRoot","srcPlanes","dstPlanes","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","traverse","closestPoint","intersectsPlane","getBoundingSphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","setFromMatrix4","matrix4","transposeIntoArray","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","denominator","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","referencePoint","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","negRadius","d1","d2","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","RotationOrders","asin","newOrder","toVector3","optionalResult","channel","toggle","isObject3D","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","translateOnAxis","localToWorld","getObjectById","getObjectByProperty","child","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseAncestors","force","isRootObject","distanceSq","closestPointToPointParameter","startP","startEnd","clampToLine","startEnd2","startEnd_startP","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","triangle","area","midpoint","edgeList","projectedPoint","isBufferAttribute","copyAt","copyArray","copyColorsArray","copyIndicesArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXYZW","addFace","tempNormals","tempUVs","tempUVs2","ab","vA","vB","vC","areaWeighted","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","computeTangents","computeLineDistances","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","colors1","colors2","vertexCopy","faceCopy","faceVertexColors","uvCopy","mergeMesh","verticesMap","unique","changes","precisionPoints","faceIndicesToRemove","dupIndex","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","getNormalIndex","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","morphTarget","morphNormal","getIndex","getAttribute","clearGroups","setDrawRange","direct","__directGeometry","lineDistance","fromDirectGeometry","pA","pB","pC","normalizeNormals","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","toNonIndexed","array2","setDrawMode","morphTargetDictionary","ml","uvIntersection","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","uvA","uvB","uvC","faceIndex","inverseMatrix","tempA","tempB","tempC","fvA","fvB","fvC","faceMaterial","targets","uvs_f","isPerspectiveCamera","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getFilmWidth","setViewOffset","fullWidth","fullHeight","clearViewOffset","skew","isOrthographicCamera","zoomW","zoomH","scaleW","scaleH","vecX","vecY","wantedRotation","matrixPosition","guessSizeSq","level","addLevel","getObjectForDistance","pose","offsetMatrix","sw","vec","skinWeight","linePrecision","precisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","testPoint","rayPointDistanceSq","localThresholdSq","intersectPoint","distanceToRay","localThreshold","SinusoidalTaper","initialNormal3","smallest","MAX_VALUE","tz","mat","getTangentAt","ShapeUtils","contour","triangulate","snip","bX","bY","cX","cY","apx","apy","bpx","bpy","cpx","cpy","cCROSSap","bCROSScp","aCROSSbp","vertIndices","nv","triangulateShape","removeDupEndPts","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","removeHoles","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","shape","prevShapeIdx","nextShapeIdx","insideAngle","hole","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","intersectsHoleEdge","ihIdx","chkHole","hIdx","indepHoles","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","hl","minShapeIndex","counter","h2","allPointsMap","allpoints","shapeWithoutHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","addShape","scalePt2","pt","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","buildLidFaces","layer","vlen","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","ahole","slen1","slen2","f4","shapesOffset","uvgen","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","extrudePts","splineTube","position2","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","getSpacedPoints","shapePoints","extractPoints","reverse","bs","contourMovements","oneHoleMovements","holesMovements","verticesMovements","indexA","indexB","indexC","indexD","Geometries","isShadowMaterial","Materials","Cache","files","cached","request","XMLHttpRequest","open","response","status","responseType","overrideMimeType","send","setPath","setResponseType","setWithCredentials","loader","texDatas","mipmapCount","isCubemap","DataTextureLoader","texData","setCrossOrigin","urls","isJPEG","search","arraySlice","from","to","isTypedArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","KeyframeTrackPrototype","InterpolantFactoryMethodDiscrete","getValueSize","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","ValueTypeName","getInterpolation","shift","timeOffset","endTime","nKeys","valid","prevTime","currTime","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","json","trackType","_getTrackTypeForValueTypeName","track","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","animationMorphTargets","clips","parseAnimation","animation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","setTextures","getTexture","TYPED_ARRAYS","typedArray","drawcalls","offsets","extractUrlBase","initMaterials","createMaterial","textureLoader","materialLoader","fullPath","Handlers","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","handlers","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","morphAnimationClips","substring","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","loadImage","parseConstant","getGeometry","getMaterial","isInteger","getUtoTmapping","getPoints","lengths","getLengths","cacheArcLengths","last","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getPointFunc","isLineCurve","curve","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","isEllipseCurve","isSplineCurve","createPointsGeometry","createGeometry","createSpacedPointsGeometry","twoPi","deltaAngle","samePoints","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","h00","h10","h01","h11","point0","point1","point2","point3","PathPrototype","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","extractAllPoints","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","createPaths","paths","ret","createPath","glyph","glyphs","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","outline","_cachedOutline","action","ha","decodeAudioData","audioBuffer","instance","eyeRight","eyeLeft","eyeSepOnProjection","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setOrientation","setNodeSource","audioNode","setBuffer","getFilters","setFilters","setPlaybackRate","getPlaybackRate","getLoop","setLoop","getVolume","setVolume","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","setMaxDistance","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","targetArray","sourceArray","targetObject","objectName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","dest","Composite","targetGroup","optionalParsedPath","_targetGroup","subscribe_","firstValidIndex","bindings","isAnimationObjectGroup","re","matches","results","searchSkeleton","searchNodeSubtree","childNode","subTreeNode","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","clipAction","optionalRoot","rootUuid","clipObject","clipUuid","actionsForClip","_actionsByClip","prototypeAction","existingAction","actionByRoot","knownActions","newAction","_bindAction","_addInactiveAction","stopAllAction","actions","_actions","nActions","_nActiveActions","_nActiveBindings","uncacheClip","actionsByClip","actionsToRemove","cacheIndex","lastInactiveAction","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","bindingsByRoot","_bindingsByRootAndName","bindingByName","_removeInactiveBinding","uncacheAction","bindingsByName","_addInactiveBinding","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","controlInterpolants","knownActionsForClip","lastKnownAction","byClipCacheIndex","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","propBinding","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","instances","isInterleavedBuffer","setFromCamera","performance","getElapsedTime","getDelta","newTime","vec3","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","morph","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe","objPos","objNorm","vector2","coneLength","coneWidth","boneList","matrixWorldInv","boneMatrix","lightPlane","targetLine","setPoint","setColor","CubicPoly","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","SplineCurve3","CubicBezierCurve3","QuadraticBezierCurve3","LineCurve3","SceneUtils","createMultiMaterialObject","detach","attach","LineStrip","LinePieces","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","extrude","makeGeometry","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","addIndex","addDrawCall","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","audioLoader","getData","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","CubeGeometry","MeshFaceMaterial","Particle","createForEach","arrayFunc","eachFunc","collection","iteratee","thisArg","bindCallback","arrayEach","baseEach","assignWith","customizer","baseAssign","createAssigner","started","input","HTMLAudioElement","onerror","linearRampToValueAtTime","luminance","turbidity","reileigh","mieCoefficient","mieDirectionalG","skyShader","skyUniforms","skyMat","skyGeo","skyMesh","normalizeOpts","isCallable","contains","dscr","desc","gs","baseForOwn","baseFor","baseProperty","createBaseEach","fromRight","isLength","iterable","toObject","createBaseFor","keysFunc","MAX_SAFE_INTEGER","isObject","argCount","accumulator","isObjectLike","getNative","isNative","isFunction","objToString","funcTag","reIsNative","fnToString","reIsHostCtor","arrayTag","objectProto","nativeIsArray","baseCopy","assigner","restParam","guard","isIterateeCall","process","foo","bar","trzy","str","searchString","isArrayLike","isIndex","reIsUint","FUNC_ERROR_TEXT","nativeMax","rest","otherArgs","isArguments","isArrayLikeObject","propertyIsEnumerable","objectToString","argsTag","tag","genTag","__webpack_module_template_argument_0__","__webpack_module_template_argument_1__","__webpack_module_template_argument_2__","shimKeys","keysIn","propsLength","allowIndexes","Ctor","isProto","skipIndexes","nativeKeys"],"mappings":"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IACA83B,GAAA,IACAE,GAAA,IACAE,GAAA,IACAE,GAAA,IACAE,GAAA,IACA/V,GAAA,EACAE,GAAA,EACAE,GAAA,EACAriB,GAAA,EACAwiB,GAAA,EACAE,GAAA,EACAE,GAAA,EACAE,GAAA,EACAja,GAAA,EACAyK,GAAA,EACAC,GAAA,EACAqB,GAAA,EACAjE,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAryC,GAAA,IACAu1B,GAAA,IACAif,GAAA,IACAG,GAAA,IACAC,GAAA,IACAx2B,GAAA,IACAq2B,GAAA,IACAC,GAAA,IACAsrC,IACAhgF,aACAu1B,yBACAif,yBACAG,oCACAC,oCACAx2B,8BACAq2B,2BACAC,4BAEA57C,GAAA,IACAm7B,GAAA,KACA6iC,GAAA,KACAmpB,IACAnnF,kBACAm7B,uBACA6iC,2BAEA3uB,GAAA,KACA8U,GAAA,KACAC,GAAA,KACAj0C,GAAA,KACAiuD,GAAA,KACAnvD,GAAA,KACAm4E,IACA/3C,iBACA8U,8BACAC,6BACAj0C,gBACAiuD,6BACAnvD,6BAEAosB,GAAA,KACAwjC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAtY,GAAA,KACAC,GAAA,KACA2X,GAAA,KACAE,GAAA,KACAE,GAAA,KACAsD,GAAA,KACA9C,GAAA,KACAtuD,GAAA,KACAuqB,GAAA,KACAikC,GAAA,KACAE,GAAA,KACA8nB,GAAAjsD,GACAytB,GAAA,KACArB,GAAA,KACAmZ,GAAA,KACAE,GAAA,KACAE,GAAA,KACAE,GAAA,KACAE,GAAA,KACAE,GAAA,KACAE,GAAA,KACAE,GAAA,KACAE,GAAA,KACA2lB,GAAA,KACAzI,GAAA,KACA0I,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAzJ,GAAA,KACA0J,GAAA,KACAC,GAAA,KACA1zC,GAAA,EACA6xB,GAAA,EACAE,GAAA,EACAxqC,GAAA,IACA8c,GAAA,KACAK,GAAA,KACAJ,GAAA,KACAqvC,GAAA,KACApvC,GAAA,KACAC,GAAA,KACAC,GAAA,KA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AAA,iyBAEAC,GAAA,yiBAEAC,GAAA,qRAEAC,GAAA,wKAEAxjD;AACAg9C,qBACAC,0BACAC,sBACAC,kBACAC,uBACAC,gBACAC,sBACAC,SACAC,yBACAC,4BACAC,iCACAC,+BACAC,0BACAC,kBACAC,uBACAC,qBACAC,gBACAC,UACAC,+BACAC,wBACAC,+BACAC,0BACAC,wBACAC,6BACAC,sBACAC,2BACAC,mBACAC,wBACAC,sBACAC,iBACAC,gBACAC,qBACAC,qBACAC,0BACAC,yBACAC,eACAC,yBACAC,8BACAC,4BACAC,iCACAC,mBACAC,wBACAC,6BACAC,2BACAC,sBACAC,gBACAC,qBACAC,yBACAC,8BACAC,yBACAC,8BACAC,sBACAC,2BACAC,sBACAC,eACAC,mBACAC,2BACAC,WACAC,gCACAC,kBACAC,yBACAC,8BACAC,2BACAC,yBACAC,oBACAC,4BACAC,mBACAC,wBACAC,mBACAC,qBACAC,wBACAC,6BACAC,wBACAC,6BACAC,oBACAC,kBACAC,aACAC,qBACAC,mBACAC,cACAC,mBAEAC,aACAC,aACAC,cACAC,cACAC,qBACAC,qBACAC,iBACAC,iBACAC,mBACAC,mBACAC,kBACAC,kBACAC,oBACAC,oBACAC,kBACAC,kBACAC,qBACAC,qBACAC,eACAC,eACAC,eACAC,eACAC,eACAC,eAoBAh9F,GAAAtP,WAEAupB,YAAAja,EAEA6vC,SAAA,EAEA3lB,EAAA,EAAAC,EAAA,EAAA5nC,EAAA,EAEAgD,IAAA,SAAAglB,GAgBA,MAdAA,MAAAslC,QAEAl/C,KAAA5D,KAAAwd,GAEO,gBAAAA,GAEP5Z,KAAAssG,OAAA1yF,GAEO,gBAAAA,IAEP5Z,KAAAusG,SAAA3yF,GAIA5Z,MAIAq3F,UAAA,SAAAC,GAEAt3F,KAAAu5B,EAAA+9D,EACAt3F,KAAAw5B,EAAA89D,EACAt3F,KAAApO,EAAA0lG,GAIAgV,OAAA,SAAAtzE,GAQA,MANAA,GAAAnjC,KAAAgU,MAAAmvB,GAEAh5B,KAAAu5B,GAAAP,GAAA,YACAh5B,KAAAw5B,GAAAR,GAAA,WACAh5B,KAA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AAurF,uBACAvrF,EAAA2rF,gBACA3rF,EAAAksF,wBACAlsF,EAAA2lB,kBACA3lB,EAAAitF,gBACAjtF,EAAAysF,sBACAzsF,EAAAukB,uBACAvkB,EAAAktF,iBACAltF,EAAAwtF,iBACAxtF,EAAAmtF,uBACAntF,EAAAytF,iBACAztF,EAAAwrF,mBACAxrF,EAAA0tF,iBACA1tF,EAAAivF,gBACAjvF,EAAAkvF,sBACAlvF,EAAA+iB,oBACA/iB,EAAAmuF,0BACAnuF,EAAAmvF,wBACAnvF,EAAAqjB,kBACArjB,EAAAsxD,qBACAtxD,EAAA4iB,eACA5iB,EAAAsvF,kBACAtvF,EAAAy9B,kBACAz9B,EAAAyvF,qBACAzvF,EAAAsmD,iBACAtmD,EAAAm9D,kBACAn9D,EAAAonB,iBACApnB,EAAAk9D,wBACAl9D,EAAAi9D,wBACAj9D,EAAAmb,qBACAnb,EAAAqb,sBACArb,EAAAka,uBACAla,EAAAub,oBACAvb,EAAAib,qBACAjb,EAAAmgC,sBACAngC,EAAAk/B,qBACAl/B,EAAAga,WACAha,EAAA+jG,YACA/jG,EAAAk2B,SACAl2B,EAAA+sE,gBACA/sE,EAAAkqE,gBACAlqE,EAAAktE,iBACAltE,EAAAgkG,qBACAhkG,EAAA4jF,wBACA5jF,EAAAikG,yBACAjkG,EAAAkkG,kBACAlkG,EAAA+rD,gBACA/rD,EAAAw4D,oBACAx4D,EAAAowC,aACApwC,EAAAqwC,YACArwC,EAAAykB,cACAzkB,EAAA+9D,eACA/9D,EAAAmc,iBACAnc,EAAAmlD,YACAnlD,EAAAyhC,cACAzhC,EAAA0/B,gBACA1/B,EAAA+qE,cACA/qE,EAAAilC,kBACAjlC,EAAAmlC,oBACAnlC,EAAAolC,uBACAplC,EAAAqlC,oBACArlC,EAAA4rE,kBACA5rE,EAAAmkG,gBACAnkG,EAAAslD,eACAtlD,EAAA28E,oBACA38E,EAAA68E,2BACA78E,EAAA++E,eACA/+E,EAAAi/E,eACAj/E,EAAA+8E,cACA/8E,EAAAg9E,aACAh9E,EAAAi9E,kBACAj9E,EAAAk9E,0BACAl9E,EAAAolD,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","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ((function(modules) {\n\t// Check all modules for deduplicated modules\n\tfor(var i in modules) {\n\t\tswitch(typeof modules[i]) {\n\t\tcase \"number\":\n\t\t\t// Module is a copy of another module\n\t\t\tmodules[i] = modules[modules[i]];\n\t\t\tbreak;\n\t\tcase \"object\":\n\t\t\t// Module can be created from a template\n\t\t\tmodules[i] = (function(_m) {\n\t\t\t\tvar args = _m.slice(1), fn = modules[_m[0]];\n\t\t\t\treturn function (a,b,c) {\n\t\t\t\t\tfn.apply(null, [a,b,c].concat(args));\n\t\t\t\t};\n\t\t\t}(modules[i]));\n\t\t}\n\t}\n\treturn modules;\n}([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function () {\n\t\t'use strict';\n\t\n\t\t//global-ish declarations\n\t\tvar VR,\n\t\t\tNoSleep = __webpack_require__(6).NoSleep,\n\t\t\tisMobile = __webpack_require__(4);\n\t\n\t\tfunction initRequirements() {\n\t\t\t//load styles\n\t\t\t__webpack_require__(2);\n\t\n\t\t\tVR = __webpack_require__(1);\n\t\t}\n\t\n\t\tfunction initialize() {\n\t\t\tinitRequirements();\n\t\n\t\t\t//todo: set up button/info elements\n\t\n\t//\t\tVR.init();\n\t\n\t        VR.noSleep = new NoSleep();\n\t\t\twindow.addEventListener('resize', VR.resize, false);\n\t\n\t\t\tif (!isMobile.any) {\n\t\t\t\tVR.disableOrientation();\n\t\t\t}\n\t\n\t\t\t/*\n\t\t\texport global things\n\t\t\t*/\n\t\t\twindow.VR = VR;\n\t\t\twindow.THREE = VR.THREE;\n\t\t}\n\t\n\t\tinitialize();\n\t//\tVR.start();\n\t}());\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function () {\n\t\t'use strict';\n\t\n\t\t//constants\n\t\tvar NEAR = 1,\n\t\t\tFAR = 1000000,\n\t\n\t\t//global-ish declarations\n\t\t\tTHREE,\n\t\t\teventEmitter,\n\t\t\tmaterials = __webpack_require__(7),\n\t\t\tnop = function () {},\n\t\t\trequestFullscreen = nop,\n\t\t\texitFullscreen = (\n\t\t\t\tdocument.exitFullscreen ||\n\t\t\t\tdocument.mozCancelFullScreen ||\n\t\t\t\tdocument.webkitExitFullscreen ||\n\t\t\t\tdocument.msExitFullscreen ||\n\t\t\t\tnop\n\t\t\t).bind(document),\n\t\t// Const\n\t\t\tMODE_CSS = 'css3d',\n\t\t\tMODE_CANVAS = 'canvas',\n\t\n\t\t//scene assets\n\t\t\tcamera,\n\t\t\tscene,\n\t\t\tbody,\n\t\t\trenderer,\n\t\t\taudioListener,\n\t\t\tvrControls,\n\t\t\tvrEffect,\n\t\t\tmouseControls,\n\t        autoRotateTimer = null,\n\t\t\traycaster,\n\t\t\ttarget,\n\t\n\t\t\tbodyWrapper,\n\t\t\tcameraWrapper,\n\t\n\t\t\tfloor,\n\t\n\t\t//state\n\t\t\tgoing = false,\n\t\t\tvrMode = false,\n\t\t\torientationEnabled,\n\t\t\torientationPossible = false,\n\t\n\t\t//exported object\n\t\t\tVR,\n\t\n\t\t\tVRObject = __webpack_require__(8),\n\t\t\tobjectMethods = [\n\t\t\t\t'box',\n\t\t\t\t'cylinder',\n\t\t\t\t'torus',\n\t\t\t\t'sphere',\n\t\t\t\t'empty',\n\t\t\t\t'sound',\n\t\t\t\t'floor',\n\t\t\t\t'sky',\n\t\t\t\t'panorama',\n\t\t\t\t'image',\n\t\t\t\t'video',\n\t\t\t\t'text',\n\t\t\t\t'grid'\n\t\t\t],\n\t\n\t\t\t//todo: use a weak map or set instead\n\t\t\tvrObjects = [],\n\t\t\traycastable = [],\n\t\n\t\t\tlastTick = 0,\n\t        waitRenderInative = 0,\n\t\t\tanimationCallbacks = [];\n\t\n\t    var isSupportWebgl = (function () {\n\t        var canvas = document.createElement('canvas');\n\t        var gl = null;\n\t        var experimental = false;\n\t        try {\n\t            gl = canvas.getContext('webgl');\n\t        } catch (x) {\n\t            gl = null;\n\t        }\n\t\n\t        if (gl === null) {\n\t            try {\n\t                gl = canvas.getContext('experimental-webgl');\n\t                experimental = true;\n\t            } catch (x) {\n\t                gl = null;\n\t            }\n\t        }\n\t        return Boolean(gl);\n\t    })();\n\t\n\t    window.isSupportWebgl = isSupportWebgl;\n\t\n\t\tfunction isFullscreen() {\n\t\t\treturn !!(document.fullscreenElement ||\n\t\t\t\tdocument.mozFullScreenElement ||\n\t\t\t\tdocument.webkitFullscreenElement ||\n\t\t\t\tdocument.msFullscreenElement);\n\t\t}\n\t\n\t\tfunction fullScreenError() {\n\t\t\tvrMode = false;\n\t\t\tif (vrEffect) {\n\t\t\t\tvrEffect.exit();\n\t\t\t}\n\t\t}\n\t\n\t\tfunction pruneObject(object) {\n\t\t\tvar i = raycastable.indexOf(object);\n\t\t\tif (i >= 0) {\n\t\t\t\traycastable.splice(i, 1);\n\t\t\t}\n\t\n\t\t\ti = vrObjects.indexOf(VRObject.findObject(object));\n\t\t\tif (i >= 0) {\n\t\t\t\tvrObjects.splice(i, 1);\n\t\t\t}\n\t\n\t\t\tobject.children.forEach(pruneObject);\n\t\t}\n\t\n\t\tfunction raycast() {\n\t\t\tvar i,\n\t\t\t\tintersect,\n\t\t\t\tobject,\n\t\t\t\tintersects,\n\t\t\t\tparent,\n\t\t\t\tprune = [],\n\t\t\t\tvrObject;\n\t\n\t\t\traycaster.ray.origin.setFromMatrixPosition(camera.matrixWorld); // world position\n\t\t\traycaster.ray.direction.set(0, 0, 0.5).unproject(camera).sub(raycaster.ray.origin).normalize();\n\t\n\t\t\tintersects = raycaster.intersectObjects(raycastable, true);\n\t\t\tfor (i = 0; i < intersects.length; i++) {\n\t\t\t\tintersect = intersects[i];\n\t\n\t\t\t\t// if object has been removed from scene, remove it from raycastable\n\t\t\t\tparent = intersect.object;\n\t\t\t\twhile (parent && parent !== scene) {\n\t\t\t\t\tif (!parent.parent) {\n\t\t\t\t\t\tprune.push(parent);\n\t\t\t\t\t}\n\t\t\t\t\tparent = parent.parent;\n\t\t\t\t}\n\t\n\t\t\t\tif (parent && intersect.object instanceof THREE.Mesh) {\n\t\t\t\t\tobject = intersect.object;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tprune.forEach(pruneObject);\n\t\n\t\t\tif (target !== object) {\n\t\t\t\tif (target) {\n\t\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\t\tvrObject.emit('lookaway');\n\t\t\t\t\tVR.emit('lookaway', vrObject);\n\t\t\t\t}\n\t\t\t\ttarget = object;\n\t\t\t\tif (target) {\n\t\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\t\twhile (!vrObject && target.parent) {\n\t\t\t\t\t\ttarget = target.parent;\n\t\t\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\t\t}\n\t\t\t\t\tif (vrObject) {\n\t\t\t\t\t\tvrObject.emit('lookat', intersect);\n\t\t\t\t\t\tVR.emit('lookat', vrObject, intersect);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tfunction render() {\n\t       // if (CLOSE_RENDER) {\n\t       //     return;\n\t       // }\n\t        // Will not start render when application has been active.\n\t        // The case only in taobao client. Very suck!\n\t        if (Date.now() / 1000 - lastTick > 5) {\n\t            if (waitRenderInative === 0) {\n\t                waitRenderInative = Date.now() / 1000;\n\t            }\n\t            if (Date.now() / 1000 - waitRenderInative > 1) {\n\t                lastTick = Date.now();\n\t            }\n\t            return;\n\t        }\n\t        waitRenderInative = 0;\n\t\n\t\t\tvar now = Date.now() / 1000,\n\t\t\t\tdelta = Math.min(1, now - lastTick);\n\t\n\t\t\tvrControls.update();\n\t\n\t\t\tanimationCallbacks.forEach(function (cb) {\n\t\t\t\tcb(delta, now);\n\t\t\t});\n\t\n\t\t\tscene.updateMatrixWorld();\n\t\n\t\t\tvrObjects.forEach(function (object) {\n\t\t\t\tobject.update(now);\n\t\t\t});\n\t        if (mouseControls.autoRotate === true) {\n\t            mouseControls.update();\n\t        }\n\t\n\t\t\traycast();\n\t\n\t\t\tvrEffect.render(scene, camera);\n\t\n\t\t\tlastTick = now;\n\t\t}\n\t\n\t\tfunction renderLoop() {\n\t\t\tif (going) {\n\t\t\t\trender();\n\t\t\t\trequestAnimationFrame(renderLoop);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction stop() {\n\t\t\tgoing = false;\n\t\t}\n\t\n\t\tfunction start() {\n\t\t\tif (!going) {\n\t\t\t\tgoing = true;\n\t\t\t\trenderLoop();\n\t\t\t}\n\t\t}\n\t\n\t\t/*\n\t\tMute any sounds when this browser tab is in the background or minimized.\n\t\t*/\n\t\tfunction visibilityChange() {\n\t\t\tif (document.hidden || document.mozHidden || document.msHidden || document.webkitHidden) {\n\t\t\t\taudioListener.volume(0);\n\t\t\t} else {\n\t\t\t\taudioListener.volume(1);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction resize(width, height) {\n\t\t\twidth = typeof width === 'number' && width || window.innerWidth;\n\t\t\theight = typeof height === 'number' && height || window.innerHeight;\n\t\n\t\t\tcamera.aspect = width / height;\n\t\t\tcamera.updateProjectionMatrix();\n\t\t\trenderer.setSize(width, height);\n\t\t}\n\t\n\t\tfunction initShake() {\n\t\t\tvar lastTime = 0,\n\t\t\t\tlastX,\n\t\t\t\tlastY,\n\t\t\t\tlastZ,\n\t\t\t\tthreshold = 15;\n\t\n\t\t\twindow.addEventListener('devicemotion', function (evt) {\n\t\t\t\tvar current = evt.accelerationIncludingGravity,\n\t\t\t\t\ttime,\n\t\t\t\t\tdiff,\n\t\t\t\t\tdeltaX = 0,\n\t\t\t\t\tdeltaY = 0,\n\t\t\t\t\tdeltaZ = 0,\n\t\t\t\t\tdist;\n\t\n\t\t\t\tif (lastX !== undefined) {\n\t\t\t\t\tdeltaX = Math.abs(lastX - current.x);\n\t\t\t\t\tdeltaY = Math.abs(lastY - current.y);\n\t\t\t\t\tdeltaZ = Math.abs(lastZ - current.z);\n\t\n\t\t\t\t\t// if (deltaX > threshold &&\n\t\t\t\t\t// \t\t(deltaY > threshold || deltaZ > threshold)\n\t\t\t\t\t// \t) {\n\t\t\t\t\tdist = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);\n\t\t\t\t\tif (dist > threshold) {\n\t\n\t\t\t\t\t\ttime = Date.now();\n\t\t\t\t\t\tdiff = time - lastTime;\n\t\t\t\t\t\tif (diff > 1000) {\n\t\t\t\t\t\t\tif (navigator.vibrate) {\n\t\t\t\t\t\t\t\tnavigator.vibrate(100);\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tlastTime = Date.now();\n\t\n\t\t\t\t\t\t\tVR.emit('shake');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tlastX = current.x;\n\t\t\t\tlastY = current.y;\n\t\t\t\tlastZ = current.z;\n\t\n\t\t\t\torientationPossible = true;\n\t\t\t}, false);\n\t\t}\n\t\n\t\tfunction initScene(mode) {\n\t\t\tfunction attachCanvas() {\n\t\t\t\tdocument.body.insertBefore(renderer.domElement, document.body.firstChild || null);\n\t\t\t\tresize();\n\t\t\t}\n\t\n\t\t\tif (renderer) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar renderMode = mode || 'auto';\n\t        if (renderMode === MODE_CSS) {\n\t            renderer = new THREE.CSS3DRenderer();\n\t        } else if (renderMode === MODE_CANVAS) {\n\t            renderer = new THREE.CanvasRenderer();\n\t            renderer.setPixelRatio( window.devicePixelRatio );\n\t        } else {\n\t            renderer = !isSupportWebgl?new THREE.CanvasRenderer():new THREE.WebGLRenderer({ antialias: false });\n\t            renderer.setPixelRatio( window.devicePixelRatio );\n\t        }\n\t\n\t\t\t//create renderer and place in document\n\t        // Antialiasing temporarily disabled to improve performance.\n\t        renderer.setClearColor(0x000000, 0);\n\t        renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\tif (isSupportWebgl) {\n\t            renderer.domElement.addEventListener('webglcontextlost', function contextLost(event) {\n\t                console.log('lost context', event);\n\t            });\n\t        }\n\t\t\t// renderer.shadowMapEnabled = true;\n\t\t\t// renderer.shadowMapSoft = true;\n\t\n\t\t\t//need a scene to put all our objects in\n\t\t\tscene = new THREE.Scene();\n\t\n\t\t\tbodyWrapper = new VRObject(scene, __webpack_require__(9), null, {\n\t\t\t\tname: 'body'\n\t\t\t}).moveTo(0, 1.5, 4);\n\t\t\tbody = bodyWrapper.object;\n\t\n\t\t\tcameraWrapper = new VRObject(body, function (parent) {\n\t        //    camera = new THREE.OrthographicCamera(\n\t        //            window.innerWidth / - 24, window.innerWidth / 24,window.innerHeight / 24, window.innerHeight / - 24, -310, 100000);\n\t        //    camera.position.x = 0;\n\t        //    camera.position.y = 0;\n\t        //    camera.zoom = 0.4;\n\t\t\t//\tcamera.position.set(-0.000001, 0.0001, 0.0001);\n\t\t\t//\tcamera.rotation.set(0, 0, 0);\n\t\n\t\t\t\t//need a camera with which to look at stuff\n\t            // The viewer proportion will be a square not a rect.\n\t\t\t\tcamera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, NEAR, FAR);\n\t            camera.setFocalLength(8);\n\t            // camera.zoom = 0.8;\n\t\t\t\t// camera.position.set(-0.000001, 1, 0.0001);\n\t            // camera.autoBackward = true;\n\t\t\t\tparent.add(camera);\n\t\t\t\treturn camera;\n\t\t\t})\n\t\t\t// set camera position so that OrbitControls works properly.\n\t\t\t\t.moveTo(0, 0.0001, 0.0001);\n\t\n\t\t\taudioListener = new THREE.AudioListener();\n\t\t\taudioListener.name = 'audio-listener';\n\t\t\tcamera.add(audioListener);\n\t\n\t\t\t//VRControls point the camera wherever we're looking\n\t\t\tvrControls = new THREE.VRControls(camera);\n\t\t\tvrControls.freeze = !orientationEnabled;\n\t\n\t\t\t//render left and right eye\n\t\t\tvrEffect = new THREE.VRStereoEffect(renderer);\n\t\t\tvrEffect.near = NEAR;\n\t\t\tvrEffect.far = FAR;\n\t\t\tvrEffect.addEventListener('fullscreenchange', function (evt) {\n\t\t\t\tvar screen;\n\t\t\t\tif (isFullscreen()) {\n\t\t\t\t\tif (vrMode) {\n\t\t\t\t\t\t//no mouse control\n\t\t\t\t\t\tmouseControls.enabled = false;\n\t\n\t\t\t\t\t\tvrControls.freeze = false;\n\t\t\t\t\t\tvrControls.reset();\n\t\n\t\t\t\t\t\tscreen = window.screen;\n\t\t\t\t\t\tif (screen.lockOrientation) {\n\t\t\t\t\t\t\tscreen.lockOrientation('landscape-primary');\n\t\t\t\t\t\t} else if (screen.mozLockOrientation) {\n\t\t\t\t\t\t\tscreen.mozLockOrientation('landscape-primary');\n\t\t\t\t\t\t} else if (screen.orientation && screen.orientation.lock) {\n\t\t\t\t\t\t\tscreen.orientation.lock('landscape-primary');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tVR.exitVR();\n\t\t\t\t}\n\t\n\t\t\t\tcamera.position.set(0, 0.0001, 0.0001);\n\t\t\t\tcamera.rotation.set(0, 0, 0);\n\t\n\t\t\t\tVR.emit('fullscreenchange', evt);\n\t\t\t});\n\t        scene.isWebview = vrEffect.isWebview;\n\t\n\t\t\t//report on HMD\n\t\t\tvrControls.addEventListener('devicechange', function () {\n\t\t\t\torientationPossible = true;\n\t\t\t\tif (orientationEnabled === undefined) {\n\t\t\t\t\torientationEnabled = vrControls.mode() === 'deviceorientation';\n\t\t\t\t}\n\t\n\t\t\t\tvrControls.freeze = !orientationEnabled && !vrMode;\n\t\n\t\t\t\tVR.emit('devicechange', vrControls.mode(), vrEffect.hmd());\n\t\t\t});\n\t\n\t\t\t// mouse control in case got no orientation device\n\t        // Re-start autorotate if user has not been controlled.\n\t\t\tmouseControls = new THREE.OrbitControls(camera, renderer.domElement);\n\t\t\tmouseControls.target0.set(0, 0.0001, 0.000);\n\t\t\tmouseControls.target.copy(mouseControls.target0);\n\t        mouseControls.enableZoom = true;\n\t        mouseControls.enablePan = true;\n\t        mouseControls.autoRotate = false;\n\t\t\tif (renderMode === MODE_CSS) {\n\t        \tmouseControls.autoRotateSpeed = 0.5;\n\t\t\t} else {\n\t        \tmouseControls.autoRotateSpeed = 1.0;\n\t\t\t}\n\t        mouseControls.enableDamping = true;\n\t        mouseControls.dampingFactor = 0.55;\n\t        mouseControls.addEventListener('start', function(){\n\t            if (autoRotateTimer) {\n\t                clearTimeout(autoRotateTimer);\n\t            }\n\t            if (orientationEnabled) {\n\t                mouseControls.enabled = false;\n\t                mouseControls.autoRotate = false;\n\t            } else {\n\t                mouseControls.enabled = true;\n\t                mouseControls.autoRotate = false;\n\t            }\n\t        });\n\t        mouseControls.addEventListener('end', function(){\n\t            autoRotateTimer = setTimeout(function(){\n\t                if (orientationEnabled) {\n\t                    mouseControls.enabled = false;\n\t                    mouseControls.autoRotate = false;\n\t                } else {\n\t                    mouseControls.enabled = true;\n\t                    mouseControls.autoRotate = true;\n\t                }\n\t            }, 2000);\n\t        });\n\t        mouseControls.enabled = false;\n\t\t\tmouseControls.update();\n\t\n\t\t\t//todo: remove any default lights once other lights are added\n\t        // Will not use this way because memory\n\t\t\tvar dLight = new THREE.DirectionalLight(0xffffff, 0.8);\n\t\t\tdLight.name = 'directional-light';\n\t\t\tdLight.position.set(20, 100, 100);\n\t\n\t\t\tdLight.castShadow = true;\n\t\t\tdLight.shadowCameraVisible = true;\n\t\n\t\t\tdLight.shadowMapWidth = 2048;\n\t\t\tdLight.shadowMapHeight = 2048;\n\t\n\t\t\tdLight.shadowCameraLeft = -10;\n\t\t\tdLight.shadowCameraRight = 10;\n\t\t\tdLight.shadowCameraTop = 10;\n\t\t\tdLight.shadowCameraBottom = -10;\n\t\n\t\t\tdLight.shadowCameraFar = 150;\n\t\t\tdLight.shadowCameraNear = 100;\n\t\t\tdLight.shadowDarkness = 1;\n\t\n\t\t\tscene.add(dLight);\n\t\n\t\t\tscene.add(new THREE.AmbientLight(0x444444));\n\t\n\t\t\tif (VR) {\n\t\t\t\tVR.camera = cameraWrapper;\n\t\t\t\tVR.body = bodyWrapper;\n\t\t\t\tVR.scene = scene;\n\t\t\t\tVR.canvas = renderer.domElement;\n\t\t\t\tVR.renderer = renderer;\n\t\t\t\tVR.zeroSensor = vrControls.zeroSensor;\n\t\t\t}\n\t\n\t\t\traycaster = new THREE.Raycaster();\n\t\n\t\t\tif (document.body) {\n\t\t\t\tattachCanvas();\n\t\t\t} else {\n\t\t\t\twindow.addEventListener('load', attachCanvas, false);\n\t\t\t}\n\t\n\t\t\tVR.canvas.addEventListener('webkitfullscreenerror', fullScreenError, false);\n\t\t\tVR.canvas.addEventListener('fullscreenerror', fullScreenError, false);\n\t\t}\n\t\n\t\tfunction initRequirements() {\n\t\t\t//load external requirements\n\t\t\tTHREE = __webpack_require__(33);\n\t\t\t__webpack_require__(23);\n\t\t\t__webpack_require__(24);\n\t\n\t\t\t//if (typeof __DEV__ !== 'undefined' && __DEV__) {\n\t\t\t\t__webpack_require__(25);\n\t\t\t//}\n\t\n\t\t\tTHREE.ImageUtils.crossOrigin = '';\n\t\n\t\t\teventEmitter = __webpack_require__(32);\n\t\n\t        //if (!isSupportWebgl) {\n\t\t\t\t// compatible mode\n\t\t\t\t// Fixed render in all mobile device\n\t\t\t\t__webpack_require__(26);\n\t            __webpack_require__(27);\n\t            __webpack_require__(28);\n\t          //  return;\n\t        //}\n\t\n\t\t\t//my VR stuff. todo: move these to a separate repo or two for easy packaging\n\t\t\t__webpack_require__(29);\n\t\t\t__webpack_require__(30);\n\t\t}\n\t\n\t\n\t\tfunction initialize(renderMode) {\n\t\t\t//todo: set up button/info elements\n\t\n\t\t\tinitScene(renderMode);\n\t\n\t\t\tinitShake();\n\t\n\t\t\tresize();\n\t\n\t\n\t\t\tdocument.addEventListener('visibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('mozvisibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('msvisibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('webkitvisibilitychange', visibilityChange);\n\t\t}\n\t\n\t\tinitRequirements();\n\t\n\t\tmodule.exports = VR = {\n\t\t\tinit: initialize,\n\t\t\trender: render,\n\t\t\tstart: start,\n\t\t\tstop: stop,\n\t\t\tresize: resize,\n\t        controls: mouseControls,\n\t        orientationPossible: function () {\n\t            return orientationPossible;\n\t        },\n\t\n\t\t\tTHREE: THREE,\n\t\n\t\t\tmaterials: materials,\n\t\n\t\t\tanimate: function (callback) {\n\t\t\t\tvar i;\n\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\ti = animationCallbacks.indexOf(callback);\n\t\t\t\t\tif (i < 0) {\n\t\t\t\t\t\tanimationCallbacks.push(callback);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tend: function (callback) {\n\t\t\t\tvar i;\n\t\n\t\t\t\tif (!callback) {\n\t\t\t\t\tanimationCallbacks.length = 0;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\ti = animationCallbacks.indexOf(callback);\n\t\t\t\t\tif (i >= 0) {\n\t\t\t\t\t\tanimationCallbacks.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\trequestVR: function () {\n\t\t\t\t//todo: check if it's possible\n\t\t\t\tif (vrMode || !vrEffect) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tvrMode = true;\n\t\n\t\t\t\t//full screen and render two eyes\n\t\t\t\t//always full screen\n\t\t\t\tvrEffect.requestFullScreen();\n\t\t\t\tmouseControls.enabled = false;\n\t\t\t},\n\t\n\t\t\texitVR: function () {\n\t\t\t\tvrMode = false;\n\t\t\t\tif (!vrEffect.isWebview() && isFullscreen()) {\n\t\t\t\t\texitFullscreen();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t            vrEffect.exit();\n\t\n\t\t\t\tvrControls.freeze = !orientationEnabled;\n\t\t\t\tcamera.rotation.set(0, 0, 0);\n\t\t\t\tmouseControls.enabled = true;\n\t\t\t},\n\t\n\t\t\tvrMode: function () {\n\t\t\t\treturn vrMode && isFullscreen();\n\t\t\t},\n\t\n\t\t\torientationEnabled: function () {\n\t\t\t\treturn !!orientationEnabled;\n\t\t\t},\n\t\t\tenableOrientation: function () {\n\t            // clearTimeout(autoRotateTimer);\n\t\t\t\torientationEnabled = true;\n\t\t\t\tif (!vrMode) {\n\t\t\t\t\tvrControls.freeze = false;\n\t\t\t\t}\n\t\t\t\tmouseControls.enabled = false;\n\t            mouseControls.autoRotate = false;\n\t\t\t},\n\t\t\tdisableOrientation: function () {\n\t            // clearTimeout(autoRotateTimer);\n\t\t\t\torientationEnabled = false;\n\t\t\t\tcamera.rotation.set(0, 0, 0);\n\t\t\t\tvrControls.freeze = !vrMode;\n\t\t\t\tmouseControls.enabled = true;\n\t            mouseControls.autoRotate = true;\n\t\t\t},\n\t\n\t\t\tisFullscreen: isFullscreen,\n\t\t\trequestFullscreen: requestFullscreen,\n\t\t\texitFullscreen: function () {\n\t\t\t\tif (isFullscreen()) {\n\t\t\t\t\texitFullscreen();\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tcontrolMode: function () {\n\t\t\t\treturn vrControls && vrControls.mode();\n\t\t\t},\n\t\n\t\t\tzeroSensor: nop,\n\t\n\t\t\tvibrate: navigator.vibrate ? navigator.vibrate.bind(navigator) : nop,\n\t\n\t\t\t// Utility\n\t\t\ttimes: function (n, callback) {\n\t\t\t\tvar i;\n\t\n\t\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\t\tcallback(i);\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tcamera: cameraWrapper,\n\t\t\tbody: bodyWrapper,\n\t\t\tscene: scene,\n\t\t\trenderer: renderer || null,\n\t\t\tcanvas: renderer && renderer.domElement || null,\n\t        isSupportWebgl: isSupportWebgl\n\t\t};\n\t\n\t\tobjectMethods.forEach(function (method) {\n\t\t\tvar creator = __webpack_require__(10)(\"./\" + method),\n\t\t\t\tkey;\n\t\n\t\t\tVR[method] = function (options) {\n\t\t\t\tvar obj = new VRObject(scene, creator, body, options, renderer);\n\t\t\t\tvrObjects.push(obj);\n\t\t\t\tif (obj.raycastable) {\n\t\t\t\t\traycastable.push(obj.object);\n\t\t\t\t}\n\t\t\t\treturn obj;\n\t\t\t};\n\t\n\t\t\tVRObject.prototype[method] = function (options) {\n\t\t\t\tvar obj = new VRObject(this.object, creator, body, options, renderer);\n\t\t\t\tvrObjects.push(obj);\n\t\t\t\tif (obj.raycastable) {\n\t\t\t\t\traycastable.push(obj.object);\n\t\t\t\t}\n\t\t\t\treturn obj;\n\t\t\t};\n\t\n\t\t\tfor (key in creator) {\n\t\t\t\tif (creator.hasOwnProperty(key) && typeof creator[key] === 'function') {\n\t\t\t\t\tVR[method][key] = creator[key];\n\t\t\t\t\tVRObject.prototype[method][key] = creator[key];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\teventEmitter(VR);\n\t\n\t\tObject.defineProperty(VR, 'target', {\n\t\t\tget: function () {\n\t\t\t\treturn target;\n\t\t\t}\n\t\t});\n\t    // Compatible in android < 5.0\n\t    // Fix something what VR was undefined.\n\t    window.VR = VR;\n\t}());\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(3);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(5)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../node_modules/css-loader/index.js!./style.css\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../node_modules/css-loader/index.js!./style.css\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(31)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"body{font-family:Helvetica Neue,Helvetica,Arial,sans-serif;color:#eee;overflow:hidden;background:#282828;height:100%;width:100%;margin:0;padding:0}canvas{width:100%!important;height:100%!important;top:0;left:0}#buttons{position:absolute;bottom:0;left:0;padding:12px;margin:8px;border-radius:8px;background-color:hsla(0,0%,50%,.6)}#buttons>*{margin:0 10px;display:inline-block;width:18px;height:18px;cursor:pointer}#buttons>:first-child{margin-left:0}#buttons>.unsupported,#fs-disable{display:none}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * isMobile.js v0.3.9\n\t *\n\t * A simple library to detect Apple phones and tablets,\n\t * Android phones and tablets, other mobile devices (like blackberry, mini-opera and windows phone),\n\t * and any kind of seven inch device, via user agent sniffing.\n\t *\n\t * @author: Kai Mallea (kmallea@gmail.com)\n\t *\n\t * @license: http://creativecommons.org/publicdomain/zero/1.0/\n\t */\n\t(function (global) {\n\t\n\t    var apple_phone         = /iPhone/i,\n\t        apple_ipod          = /iPod/i,\n\t        apple_tablet        = /iPad/i,\n\t        android_phone       = /(?=.*\\bAndroid\\b)(?=.*\\bMobile\\b)/i, // Match 'Android' AND 'Mobile'\n\t        android_tablet      = /Android/i,\n\t        amazon_phone        = /(?=.*\\bAndroid\\b)(?=.*\\bSD4930UR\\b)/i,\n\t        amazon_tablet       = /(?=.*\\bAndroid\\b)(?=.*\\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\\b)/i,\n\t        windows_phone       = /IEMobile/i,\n\t        windows_tablet      = /(?=.*\\bWindows\\b)(?=.*\\bARM\\b)/i, // Match 'Windows' AND 'ARM'\n\t        other_blackberry    = /BlackBerry/i,\n\t        other_blackberry_10 = /BB10/i,\n\t        other_opera         = /Opera Mini/i,\n\t        other_chrome        = /(CriOS|Chrome)(?=.*\\bMobile\\b)/i,\n\t        other_firefox       = /(?=.*\\bFirefox\\b)(?=.*\\bMobile\\b)/i, // Match 'Firefox' AND 'Mobile'\n\t        seven_inch = new RegExp(\n\t            '(?:' +         // Non-capturing group\n\t\n\t            'Nexus 7' +     // Nexus 7\n\t\n\t            '|' +           // OR\n\t\n\t            'BNTV250' +     // B&N Nook Tablet 7 inch\n\t\n\t            '|' +           // OR\n\t\n\t            'Kindle Fire' + // Kindle Fire\n\t\n\t            '|' +           // OR\n\t\n\t            'Silk' +        // Kindle Fire, Silk Accelerated\n\t\n\t            '|' +           // OR\n\t\n\t            'GT-P1000' +    // Galaxy Tab 7 inch\n\t\n\t            ')',            // End non-capturing group\n\t\n\t            'i');           // Case-insensitive matching\n\t\n\t    var match = function(regex, userAgent) {\n\t        return regex.test(userAgent);\n\t    };\n\t\n\t    var IsMobileClass = function(userAgent) {\n\t        var ua = userAgent || navigator.userAgent;\n\t        // Facebook mobile app's integrated browser adds a bunch of strings that\n\t        // match everything. Strip it out if it exists.\n\t        var tmp = ua.split('[FBAN');\n\t        if (typeof tmp[1] !== 'undefined') {\n\t            ua = tmp[0];\n\t        }\n\t\n\t        this.apple = {\n\t            phone:  match(apple_phone, ua),\n\t            ipod:   match(apple_ipod, ua),\n\t            tablet: !match(apple_phone, ua) && match(apple_tablet, ua),\n\t            device: match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)\n\t        };\n\t        this.amazon = {\n\t            phone:  match(amazon_phone, ua),\n\t            tablet: !match(amazon_phone, ua) && match(amazon_tablet, ua),\n\t            device: match(amazon_phone, ua) || match(amazon_tablet, ua)\n\t        };\n\t        this.android = {\n\t            phone:  match(amazon_phone, ua) || match(android_phone, ua),\n\t            tablet: !match(amazon_phone, ua) && !match(android_phone, ua) && (match(amazon_tablet, ua) || match(android_tablet, ua)),\n\t            device: match(amazon_phone, ua) || match(amazon_tablet, ua) || match(android_phone, ua) || match(android_tablet, ua)\n\t        };\n\t        this.windows = {\n\t            phone:  match(windows_phone, ua),\n\t            tablet: match(windows_tablet, ua),\n\t            device: match(windows_phone, ua) || match(windows_tablet, ua)\n\t        };\n\t        this.other = {\n\t            blackberry:   match(other_blackberry, ua),\n\t            blackberry10: match(other_blackberry_10, ua),\n\t            opera:        match(other_opera, ua),\n\t            firefox:      match(other_firefox, ua),\n\t            chrome:       match(other_chrome, ua),\n\t            device:       match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(other_opera, ua) || match(other_firefox, ua) || match(other_chrome, ua)\n\t        };\n\t        this.seven_inch = match(seven_inch, ua);\n\t        this.any = this.apple.device || this.android.device || this.windows.device || this.other.device || this.seven_inch;\n\t        // excludes 'other' devices and ipods, targeting touchscreen phones\n\t        this.phone = this.apple.phone || this.android.phone || this.windows.phone;\n\t        // excludes 7 inch devices, classifying as phone or tablet is left to the user\n\t        this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet;\n\t\n\t        if (typeof window === 'undefined') {\n\t            return this;\n\t        }\n\t    };\n\t\n\t    var instantiate = function() {\n\t        var IM = new IsMobileClass();\n\t        IM.Class = IsMobileClass;\n\t        return IM;\n\t    };\n\t\n\t    if (typeof module != 'undefined' && module.exports && typeof window === 'undefined') {\n\t        //node\n\t        module.exports = IsMobileClass;\n\t    } else if (typeof module != 'undefined' && module.exports && typeof window !== 'undefined') {\n\t        //browserify\n\t        module.exports = instantiate();\n\t    } else if (true) {\n\t        //AMD\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (global.isMobile = instantiate()), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else {\n\t        global.isMobile = instantiate();\n\t    }\n\t\n\t})(this);\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tvar stylesInDom = {},\r\n\t\tmemoize = function(fn) {\r\n\t\t\tvar memo;\r\n\t\t\treturn function () {\r\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\t\treturn memo;\r\n\t\t\t};\r\n\t\t},\r\n\t\tisOldIE = memoize(function() {\r\n\t\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t\t}),\r\n\t\tgetHeadElement = memoize(function () {\r\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t\t}),\r\n\t\tsingletonElement = null,\r\n\t\tsingletonCounter = 0,\r\n\t\tstyleElementsInsertedAtTop = [];\r\n\t\r\n\tmodule.exports = function(list, options) {\r\n\t\tif(false) {\r\n\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t\t}\r\n\t\r\n\t\toptions = options || {};\r\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t\t// tags it will allow on a page\r\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\t\r\n\t\t// By default, add <style> tags to the bottom of <head>.\r\n\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\t\r\n\t\tvar styles = listToStyles(list);\r\n\t\taddStylesToDom(styles, options);\r\n\t\r\n\t\treturn function update(newList) {\r\n\t\t\tvar mayRemove = [];\r\n\t\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\t\tvar item = styles[i];\r\n\t\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\t\tdomStyle.refs--;\r\n\t\t\t\tmayRemove.push(domStyle);\r\n\t\t\t}\r\n\t\t\tif(newList) {\r\n\t\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\t\taddStylesToDom(newStyles, options);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction addStylesToDom(styles, options) {\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tif(domStyle) {\r\n\t\t\t\tdomStyle.refs++;\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t\t}\r\n\t\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar parts = [];\r\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction listToStyles(list) {\r\n\t\tvar styles = [];\r\n\t\tvar newStyles = {};\r\n\t\tfor(var i = 0; i < list.length; i++) {\r\n\t\t\tvar item = list[i];\r\n\t\t\tvar id = item[0];\r\n\t\t\tvar css = item[1];\r\n\t\t\tvar media = item[2];\r\n\t\t\tvar sourceMap = item[3];\r\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\t\tif(!newStyles[id])\r\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\t\telse\r\n\t\t\t\tnewStyles[id].parts.push(part);\r\n\t\t}\r\n\t\treturn styles;\r\n\t}\r\n\t\r\n\tfunction insertStyleElement(options, styleElement) {\r\n\t\tvar head = getHeadElement();\r\n\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\t\tif (options.insertAt === \"top\") {\r\n\t\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t\t} else {\r\n\t\t\t\thead.appendChild(styleElement);\r\n\t\t\t}\r\n\t\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t\t} else if (options.insertAt === \"bottom\") {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction removeStyleElement(styleElement) {\r\n\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\t\tif(idx >= 0) {\r\n\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction createStyleElement(options) {\r\n\t\tvar styleElement = document.createElement(\"style\");\r\n\t\tstyleElement.type = \"text/css\";\r\n\t\tinsertStyleElement(options, styleElement);\r\n\t\treturn styleElement;\r\n\t}\r\n\t\r\n\tfunction createLinkElement(options) {\r\n\t\tvar linkElement = document.createElement(\"link\");\r\n\t\tlinkElement.rel = \"stylesheet\";\r\n\t\tinsertStyleElement(options, linkElement);\r\n\t\treturn linkElement;\r\n\t}\r\n\t\r\n\tfunction addStyle(obj, options) {\r\n\t\tvar styleElement, update, remove;\r\n\t\r\n\t\tif (options.singleton) {\r\n\t\t\tvar styleIndex = singletonCounter++;\r\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t\t} else if(obj.sourceMap &&\r\n\t\t\ttypeof URL === \"function\" &&\r\n\t\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\t\ttypeof Blob === \"function\" &&\r\n\t\t\ttypeof btoa === \"function\") {\r\n\t\t\tstyleElement = createLinkElement(options);\r\n\t\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t\tif(styleElement.href)\r\n\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tstyleElement = createStyleElement(options);\r\n\t\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tupdate(obj);\r\n\t\r\n\t\treturn function updateStyle(newObj) {\r\n\t\t\tif(newObj) {\r\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tupdate(obj = newObj);\r\n\t\t\t} else {\r\n\t\t\t\tremove();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tvar replaceText = (function () {\r\n\t\tvar textStore = [];\r\n\t\r\n\t\treturn function (index, replacement) {\r\n\t\t\ttextStore[index] = replacement;\r\n\t\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t\t};\r\n\t})();\r\n\t\r\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\t\tvar css = remove ? \"\" : obj.css;\r\n\t\r\n\t\tif (styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t\t} else {\r\n\t\t\tvar cssNode = document.createTextNode(css);\r\n\t\t\tvar childNodes = styleElement.childNodes;\r\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\t\tif (childNodes.length) {\r\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t\t} else {\r\n\t\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction applyToTag(styleElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\r\n\t\tif(media) {\r\n\t\t\tstyleElement.setAttribute(\"media\", media)\r\n\t\t}\r\n\t\r\n\t\tif(styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = css;\r\n\t\t} else {\r\n\t\t\twhile(styleElement.firstChild) {\r\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t\t}\r\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateLink(linkElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\t\r\n\t\tif(sourceMap) {\r\n\t\t\t// http://stackoverflow.com/a/26603875\r\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t\t}\r\n\t\r\n\t\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\t\r\n\t\tvar oldSrc = linkElement.href;\r\n\t\r\n\t\tlinkElement.href = URL.createObjectURL(blob);\r\n\t\r\n\t\tif(oldSrc)\r\n\t\t\tURL.revokeObjectURL(oldSrc);\r\n\t}\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * NoSleep.js v0.5.0 - git.io/vfn01\n\t * Rich Tibbett\n\t * MIT license\n\t **/\n\t(function(root) {\n\t  // UA matching\n\t  var ua = {\n\t    Android: /Android/ig.test(navigator.userAgent),\n\t    iOS: /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent)\n\t  };\n\t\n\t  var media = {\n\t    WebM: \"data:video/webm;base64,GkXfo0AgQoaBAUL3gQFC8oEEQvOBCEKCQAR3ZWJtQoeBAkKFgQIYU4BnQI0VSalmQCgq17FAAw9CQE2AQAZ3aGFtbXlXQUAGd2hhbW15RIlACECPQAAAAAAAFlSua0AxrkAu14EBY8WBAZyBACK1nEADdW5khkAFVl9WUDglhohAA1ZQOIOBAeBABrCBCLqBCB9DtnVAIueBAKNAHIEAAIAwAQCdASoIAAgAAUAmJaQAA3AA/vz0AAA=\",\n\t    MP4: \"data:video/mp4;base64,AAAAHGZ0eXBpc29tAAACAGlzb21pc28ybXA0MQAAAAhmcmVlAAAAG21kYXQAAAGzABAHAAABthADAowdbb9/AAAC6W1vb3YAAABsbXZoZAAAAAB8JbCAfCWwgAAAA+gAAAAAAAEAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIVdHJhawAAAFx0a2hkAAAAD3wlsIB8JbCAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAIAAAACAAAAAABsW1kaWEAAAAgbWRoZAAAAAB8JbCAfCWwgAAAA+gAAAAAVcQAAAAAAC1oZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVmlkZW9IYW5kbGVyAAAAAVxtaW5mAAAAFHZtaGQAAAABAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEAAAAMdXJsIAAAAAEAAAEcc3RibAAAALhzdHNkAAAAAAAAAAEAAACobXA0dgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIAAgASAAAAEgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABj//wAAAFJlc2RzAAAAAANEAAEABDwgEQAAAAADDUAAAAAABS0AAAGwAQAAAbWJEwAAAQAAAAEgAMSNiB9FAEQBFGMAAAGyTGF2YzUyLjg3LjQGAQIAAAAYc3R0cwAAAAAAAAABAAAAAQAAAAAAAAAcc3RzYwAAAAAAAAABAAAAAQAAAAEAAAABAAAAFHN0c3oAAAAAAAAAEwAAAAEAAAAUc3RjbwAAAAAAAAABAAAALAAAAGB1ZHRhAAAAWG1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAAK2lsc3QAAAAjqXRvbwAAABtkYXRhAAAAAQAAAABMYXZmNTIuNzguMw==\"\n\t  };\n\t\n\t  function addSourceToVideo(element, type, dataURI) {\n\t    var source = document.createElement('source');\n\t    source.src = dataURI;\n\t    source.type = \"video/\" + type;\n\t    element.appendChild(source);\n\t  }\n\t\n\t  // NoSleep instance constructor\n\t  var NoSleep = function() {\n\t    if (ua.iOS) {\n\t      this.noSleepTimer = null;\n\t    } else if (ua.Android) {\n\t      // Set up no sleep video element\n\t      this.noSleepVideo = document.createElement('video');\n\t      this.noSleepVideo.setAttribute(\"loop\", \"\");\n\t\n\t      // Append nosleep video sources\n\t      addSourceToVideo(this.noSleepVideo, \"webm\", media.WebM);\n\t      addSourceToVideo(this.noSleepVideo, \"mp4\", media.MP4);\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  // Enable NoSleep instance\n\t  NoSleep.prototype.enable = function(duration) {\n\t    if (ua.iOS) {\n\t      this.disable();\n\t      this.noSleepTimer = window.setInterval(function() {\n\t        window.location = window.location;\n\t        window.setTimeout(window.stop, 0);\n\t      }, duration || 15000);\n\t    } else if (ua.Android) {\n\t      this.noSleepVideo.play();\n\t    }\n\t  };\n\t\n\t  // Disable NoSleep instance\n\t  NoSleep.prototype.disable = function() {\n\t    if (ua.iOS) {\n\t      if (this.noSleepTimer) {\n\t        window.clearInterval(this.noSleepTimer);\n\t        this.noSleepTimer = null;\n\t      }\n\t    } else if (ua.Android) {\n\t      this.noSleepVideo.pause();\n\t    }\n\t  };\n\t\n\t  // Append NoSleep API to root object\n\t  root.NoSleep = NoSleep;\n\t})(this);\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar THREE = __webpack_require__(33),\n\t\t\tforEach = __webpack_require__(35),\n\t\t\tassign = __webpack_require__(36),\n\t\n\t\t\tiOS = navigator.userAgent.match(/(iPad|iPhone|iPod)/g),\n\t\t\tandroid = navigator.userAgent.toLowerCase().match(/android/g),\n\t\n\t\t\t// https://gist.github.com/dperini/729294\n\t\t\t//urlRegex = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/i,\n\t\t\turlRegex = __webpack_require__(34),\n\t\n\t\t\tdataUri = /^data:image\\/(?:png|jpe?g|gif);/,\n\t\t\tassetPath = '//gw.alicdn.com/tps/',\n\t\n\t\t\timages = {},\n\t\n\t\t\tmaterialTypes = {\n\t\t\t\tlambert: THREE.MeshLambertMaterial,\n\t\t\t\tbasic: THREE.MeshBasicMaterial,\n\t\t\t\tphong: THREE.MeshPhongMaterial,\n\t\t\t\tnormal: THREE.MeshNormalMaterial,\n\t\t\t\tdepth: THREE.MeshDepthMaterial\n\t\t\t},\n\t\t\ttextureFiles = {\n\t    // Will use these when you need it.\n\t\t\t\t'asphalt': {\n\t                map:'TB1kK63NVXXXXaVaFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 12\n\t\t\t\t},\n\t\t\t\t'brick-tiles': {\n\t                map:'TB1YcUKNVXXXXbpXXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 2\n\t\t\t\t},\n\t\t\t\t'bricks': {\n\t\t\t\t\ttype: 'phong',\n\t\t\t\t\trepeat: 4,\n\t                map:'TB1rswLNVXXXXbcXXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\tnormalMap: 'TB1T.7hNVXXXXXlXVXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\tspecularMap: 'TB1WIn.NVXXXXaPapXXXXXXXXXX-512-512.jpg_320x320.jpg'\n\t\t\t\t},\n\t\t\t\t'checkerboard': {\n\t\t\t\t\trepeat: 10,\n\t\t\t\t\tmap: 'TB17ZseNVXXXXbfaXXXXXXXXXXX-256-256.png_140x140.jpg'\n\t\t\t\t},\n\t\t\t\t'grass': {\n\t                map:'TB17jZqNVXXXXc4XFXXXXXXXXXX-256-256.jpg_140x140.jpg',\n\t\t\t\t\trepeat: 12\n\t\t\t\t},\n\t\t\t\t'metal-floor': {\n\t\t\t\t\ttype: 'phong',\n\t\t\t\t\tshininess: 100,\n\t                map:'TB18JAwNVXXXXbiXFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 2\n\t\t\t\t},\n\t\t\t\t'metal': {\n\t                map:'TB1sEEhNVXXXXbSXVXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\ttype: 'phong',\n\t\t\t\t\tshininess: 100,\n\t\t\t\t\tshading: THREE.SmoothShading,\n\t\t\t\t\trepeat: 2\n\t\t\t\t},\n\t\t\t\t'stone': {\n\t                map:'TB1c37bNVXXXXXwaXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 8\n\t\t\t\t},\n\t\t\t\t'tiles': {\n\t                map:'TB1BbZCNVXXXXaMXpXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 4\n\t\t\t\t},\n\t\t\t\t'weathered-wood': {\n\t                map:'TB12QIwNVXXXXXGXFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 8\n\t\t\t\t},\n\t\t\t\t'wood': {\n\t                map:'TB1rpEANVXXXXa8XpXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t                repeat: 4\n\t\t\t\t}\n\t\t\t},\n\t\t\ttextures = {},\n\t\t\tmaterials;\n\t\n\t\tfunction imageTexture(src, mapping, callback) {\n\t\t\tvar image,\n\t\t\t\tparse,\n\t\t\t\ttexture,\n\t\t\t\tisDataUri;\n\t\n\t\t\tfunction imageLoaded() {\n\t\t\t\tvar scale,\n\t\t\t\t\tcanvas,\n\t\t\t\t\tctx,\n\t\t\t\t\tsmallImage;\n\t\n\t\t\t\t/*\n\t\t\t\tiOS doesn't know how to handle large images. Even though the MAX_TEXTURE_SIZE\n\t\t\t\tmay be 4096, it still breaks on images that large. So we scale them down.\n\t            Change 2048 to 1024 fix memory is too high in iOS.\n\t            Modify by KeynesQ\n\t\t\t\t*/\n\t\t\t//\tif (iOS && (image.naturalWidth > 2048 || image.naturalHeight > 2048)) {\n\t\t\t//\t\tscale = 1024 / Math.max( image.naturalWidth, image.naturalHeight );\n\t\n\t\t\t//\t\tcanvas = document.createElement('canvas');\n\t\t\t//\t\tcanvas.width = 1024;\n\t\t\t//\t\tcanvas.height = 512;\n\t\n\t\t\t//\t\tctx = canvas.getContext('2d');\n\t\t\t//\t\tctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, canvas.width, canvas.height);\n\t\n\t\t\t//\t\timage = canvas;\n\t\t\t//\t}\n\t                // Reduce momery in mobile device.\n\t                if ((iOS || android) && (image.naturalWidth > 2048 || image.naturalHeight > 2048)) {\n\t                // scales the image by (float) scale < 1\n\t\n\t                    scale = 1024 / Math.max( image.naturalWidth, image.naturalHeight );\n\t                    canvas = document.createElement('canvas');\n\t                    canvas.width = Math.floor(image.naturalWidth * scale);\n\t                    canvas.height = Math.floor(image.naturalHeight * scale);\n\t\n\t                    ctx = canvas.getContext('2d');\n\t\n\t                    ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, canvas.width, canvas.height);\n\t                   // if (iOS) {\n\t                   //     var dstData = ctx.createImageData(canvas.width, canvas.height),\n\t                   //         dstBuff = dstData.data,\n\t                   //         srcBuff = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n\t                   //     var _worker = new Worker('//h5.m.taobao.com/js/trip/hotel/worker.js');\n\t                   //     _worker.onmessage = function (e) {\n\t                   //         var data = e.data[0];\n\t                   //         // Get new image data\n\t                   //         ctx.putImageData(data, 0, 0);\n\t                   //         texture.image = canvas;\n\t                   //         texture.needsUpdate = true;\n\t                   //         if (typeof callback === 'function') {\n\t                   //             setTimeout(callback.bind(null, texture, image), 1);\n\t                   //         }\n\t                   //         _worker.terminate();\n\t                   //     };\n\t                   //     _worker.postMessage([dstData, srcBuff, canvas.width, canvas.height]);\n\t                   //     return;\n\t                   // }\n\t\n\t                    image = canvas;\n\t                }\n\t\n\t                texture.image = image;\n\t                texture.needsUpdate = true;\n\t                if (typeof callback === 'function') {\n\t                    setTimeout(callback.bind(null, texture, image), 1);\n\t                }\n\t            }\n\t\n\t            parse = dataUri.exec(src);\n\t            isDataUri = !!parse;\n\t            if (!parse) {\n\t                parse = urlRegex.exec(src);\n\t            }\n\t\n\t            // if (!parse) {\n\t            // \tconsole.error('Invalid image URL: ' + src);\n\t            // \treturn;\n\t            // }\n\t\n\t            if (images[src]) {\n\t                image = images[src];\n\t            } else {\n\t                image = document.createElement('img');\n\t                if (parse && (parse[1] && parse[1] !== window.location.hostname || parse[2] && parse[2] !== window.location.port)) {\n\t                    image.crossOrigin = 'anonymous';\n\t                }\n\t                image.src = src;\n\t                images[src] = image;\n\t            }\n\t\n\t            texture = new THREE.Texture(undefined, mapping);\n\t\n\t            if (image.naturalWidth || isDataUri) {\n\t                setTimeout(imageLoaded, 1);\n\t            } else {\n\t                image.addEventListener('load', imageLoaded);\n\t            }\n\t\n\t            return texture;\n\t        }\n\t\n\t\n\t\tfunction material(options) {\n\t\t\tvar opts,\n\t\t\t\tMaterial = materialTypes[options.type] || THREE.MeshLambertMaterial;\n\t\n\t\t\tfunction threeTexture(fn) {\n\t\t\t\tif (typeof fn === 'string') {\n\t\t\t\t\tif (urlRegex.test(fn) || dataUri.test(fn)) {\n\t\t\t\t\t\treturn imageTexture(fn);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfn = textures[fn];\n\t\t\t\t}\n\t\t\t\tif (typeof fn === 'function') {\n\t\t\t\t\treturn fn(options);\n\t\t\t\t}\n\t\n\t\t\t\treturn fn;\n\t\t\t}\n\t\n\t\t\tif (typeof options === 'string') {\n\t\t\t\toptions = {\n\t\t\t\t\tmap: options\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\topts = assign({}, options);\n\t\t\tforEach({\n\t\t\t\tambient: options.ambient || options.color,\n\t\t\t\temissive: options.emissive || options.color,\n\t\t\t\tmap: threeTexture(options.map),\n\t\t\t\tspecularMap: threeTexture(options.specularMap),\n\t\t\t\tnormalMap: threeTexture(options.normalMap),\n\t\t\t\talphaMap: threeTexture(options.alphaMap),\n\t\t\t\tenvMap: threeTexture(options.envMap),\n\t\t\t\tlightMap: threeTexture(options.lightMap)\n\t\t\t}, function (val, key) {\n\t\t\t\tif (val !== undefined) {\n\t\t\t\t\topts[key] = val;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tdelete opts.type;\n\t\n\t\t\treturn new Material(opts);\n\t\t}\n\t\n\t\t//figure out if script is loaded relative so we know where to find the images\n\t//\tassetPath = (function () {\n\t//\t\tvar url,\n\t//\t\t\tscripts;\n\t//\n\t//\t\tif (document.currentScript) {\n\t//\t\t\turl = document.currentScript.getAttribute('src');\n\t//\t\t} else {\n\t//\t\t\tscripts = document.getElementsByTagName('script');\n\t//\t\t\turl = scripts[scripts.length - 1].getAttribute('src');\n\t//\t\t}\n\t//\n\t//\t\tif (!urlRegex.test(url)) {\n\t//\t\t\treturn url.replace(/[a-z\\-\\.]+\\.js$/i, '');\n\t//\t\t}\n\t//\n\t//\t\treturn __ASSET_PATH__;\n\t//\t}());\n\t\n\t\tmaterials = {\n\t\t\tstandard: function () {\n\t\t\t\treturn new THREE.MeshLambertMaterial();\n\t\t\t},\n\t\t\ttextures: textures,\n\t\t\timageTexture: imageTexture,\n\t\t\tmaterial: material,\n\t\t\tlibrary: ['standard']\n\t\t};\n\t\n\t\tforEach(textureFiles, function (props, key) {\n\t\t\tfunction textureFactory(file, options) {\n\t\t\t\tfunction imagePath(url) {\n\t\t\t\t\tif ((/\\.(png|jpg)$/i).test(url)) {\n\t\t\t\t\t\treturn assetPath + url;\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn url;\n\t\t\t\t}\n\t\n\t\t\t\toptions = options || {};\n\t\n\t\t\t\treturn function (opts) {\n\t\t\t\t\tvar texture = imageTexture(imagePath(file));\n\t\n\t\t\t\t\topts = assign({}, options, opts);\n\t\n\t\t\t\t\tif (opts.repeat) {\n\t\t\t\t\t\tif (opts.repeat > 0) {\n\t\t\t\t\t\t\ttexture.repeat.set(opts.repeat, opts.repeat);\n\t\t\t\t\t\t} else if (opts.repeat instanceof THREE.Vector2) {\n\t\t\t\t\t\t\ttexture.repeat.copy(opts.repeat);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttexture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\t}\n\t\t\t\t\treturn texture;\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\tvar map = textureFactory(props.map || key + '.jpg', props),\n\t\t\t\tmaterialDef;\n\t\n\t\t\tmaterialDef = assign({}, props, {\n\t\t\t\tmap: map\n\t\t\t});\n\t\t\ttextures[key] = map;\n\t\n\t\t\tif (props.normalMap) {\n\t\t\t\tmaterialDef.normalMap = textures[key + '-normal'] = textureFactory(props.normalMap, props);\n\t\t\t}\n\t\n\t\t\tif (props.specularMap) {\n\t\t\t\tmaterialDef.specularMap = textures[key + '-specular'] = textureFactory(props.specularMap, props);\n\t\t\t}\n\t\n\t\t\tmaterials.library.push(key);\n\t\t\tmaterials[key] = function (options) {\n\t\t\t\tvar opts = assign({}, materialDef, options);\n\t\n\t\t\t\treturn material(opts);\n\t\t\t};\n\t\t});\n\t\n\t\treturn materials;\n\t\n\t\t//var parse = urlRegex.exec('https://lh5.googleusercontent.com:80/-SNO8rWDqbUM/U085rfOBRuI/AAAAAAAAEdM/nWEWCtNceZ0/w955-h382-no/PANO_20130225_131211.jpg');\n\t}());\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar\tNEAR_DISTANCE = 3,\n\t\t\tmaterials = __webpack_require__(7),\n\t\t\tTHREE = __webpack_require__(33),\n\t\t\teventEmitter = __webpack_require__(32),\n\t\n\t\t\txAxis = new THREE.Vector3(1, 0, 0),\n\t\t\tyAxis = new THREE.Vector3(0, 1, 0),\n\t\t\tzAxis = new THREE.Vector3(0, 0, 1),\n\t\n\t\t\tscratchVector1 = new THREE.Vector3(),\n\t\t\tscratchVector2 = new THREE.Vector3(),\n\t\n\t\t\tallObjects = window.WeakMap ? new window.WeakMap() : {};\n\t\n\t\tfunction distance(object, origin) {\n\t\t\tvar geometry;\n\t\n\t\t\tgeometry = object.geometry;\n\t\n\t\t\t//assumes object world matrix has been updated\n\t\t\tscratchVector1.setFromMatrixPosition(origin.matrixWorld);\n\t\n\t\t\tif (!geometry) {\n\t\t\t\t//first convert to world coordinate\n\t\t\t\tscratchVector2.setFromMatrixPosition(object.matrixWorld);\n\t\t\t\treturn scratchVector2.distanceTo(scratchVector1);\n\t\t\t}\n\t\n\t\t\tobject.worldToLocal(scratchVector1);\n\t\t\treturn object.geometry.boundingBox.distanceToPoint(scratchVector1);\n\t\t}\n\t\n\t\tfunction VRObject(parent, creator, body, options, renderer) {\n\t\t\tvar material,\n\t\t\t\tobject,\n\t\t\t\tself = this,\n\t\n\t\t\t\tisNear = false,\n\t\t\t\tisTarget = false,\n\t\n\t\t\t\tcamera = body && (function () {\n\t\t\t\t\tvar i,\n\t\t\t\t\t\tc;\n\t\t\t\t\tfor (i = 0; i < body.children.length; i++) {\n\t\t\t\t\t\tc = body.children[i];\n\t\t\t\t\t\tif (c instanceof THREE.PerspectiveCamera) {\n\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}()),\n\t\t\t\tfrustum,\n\t\t\t\tcameraViewProjectionMatrix,\n\t\n\t\t\t\traycaster;\n\t\n\t\t\toptions = options || {};\n\t\n\t\t\teventEmitter(this);\n\t\n\t\t\tif (body) {\n\t\t\t\t// raycaster = new THREE.Raycaster();\n\t\n\t\t\t\tthis.update = function () {\n\t\t\t\t\tvar wasNear = isNear,\n\t\t\t\t\t\twasTarget = isTarget,\n\t\n\t\t\t\t\t\tintersects, intersect, i;\n\t\n\t\t\t\t\tisNear = self.distance < NEAR_DISTANCE;\n\t\t\t\t\tif (isNear !== wasNear) {\n\t\t\t\t\t\tif (isNear) {\n\t\t\t\t\t\t\tself.emit('near', self);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.emit('far', self);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/*\n\t\t\t\t\traycaster.ray.origin.copy(origin);\n\t\t\t\t\traycaster.ray.direction.set(0, 0, 0.5).unproject(camera).sub(origin).normalize();\n\t\n\t\t\t\t\t//todo: consider whether this needs to be recursive. maybe a different event\n\t\t\t\t\tintersects = raycaster.intersectObject(object);\n\t\t\t\t\tif (intersects.length) {\n\t\t\t\t\t\tisTarget = true;\n\t\t\t\t\t\tif (!wasTarget) {\n\t\t\t\t\t\t\tself.emit('target-on', intersects[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (wasTarget) {\n\t\t\t\t\t\tself.emit('target-off');\n\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t//todo: get material from options\n\t\t\tthis.object = object = creator.call(this, parent, options, renderer);\n\t\t\tthis.parent = this.object.parent || parent;\n\t\n\t\t\tif (object instanceof THREE.Mesh) {\n\t\t\t\tif (options.castShadow !== false) {\n\t\t\t\t\tobject.castShadow = true;\n\t\t\t\t}\n\t\t\t\tif (options.receiveShadow !== false) {\n\t\t\t\t\tobject.receiveShadow = true;\n\t\t\t\t}\n\t\n\t\t\t\tif (object.geometry) {\n\t\t\t\t\tobject.geometry.computeBoundingBox();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (options.name !== undefined) {\n\t\t\t\tobject.name = options.name;\n\t\t\t}\n\t\t\tself.name = object.name;\n\t\n\t\t\tif (allObjects.set) {\n\t\t\t\tallObjects.set(object, this);\n\t\t\t} else {\n\t\t\t\tallObjects[object.id] = this;\n\t\t\t}\n\t\n\t\t\tobject.position.set(\n\t\t\t\tparseFloat(options.x) || 0,\n\t\t\t\tparseFloat(options.y) || 0,\n\t\t\t\tparseFloat(options.z) || 0\n\t\t\t);\n\t\n\t\t\tthis.setMaterial(options.material);\n\t\n\t\t\tif (options.color) {\n\t\t\t\tmaterial = object.material;\n\t\t\t\tmaterial.color = new THREE.Color(options.color);\n\t\t\t\tmaterial.ambient = material.color;\n\t\t\t}\n\t\n\t\t\t['position', 'scale', 'rotation', 'quaternion', 'material'].forEach(function (prop) {\n\t\t\t\tif (prop in object && !self[prop]) {\n\t\t\t\t\tself[prop] = object[prop];\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'visible', {\n\t\t\t\tset: function (val) {\n\t\t\t\t\tself.object.visible = !!val;\n\t\t\t\t},\n\t\t\t\tget: function () {\n\t\t\t\t\treturn self.object.visible;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'distance', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn distance(self.object, body || parent);\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tif (camera) {\n\t\t\t\tfrustum = new THREE.Frustum();\n\t\t\t\tcameraViewProjectionMatrix = new THREE.Matrix4();\n\t\t\t\tObject.defineProperty(this, 'inView', {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\tcamera.updateMatrixWorld(); // make sure the camera matrix is updated\n\t\t\t\t\t\tcamera.matrixWorldInverse.getInverse(camera.matrixWorld);\n\t\t\t\t\t\tcameraViewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\t\t\t\t\t\tfrustum.setFromMatrix(cameraViewProjectionMatrix);\n\t\t\t\t\t\treturn frustum.intersectsObject(self.object);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\n\t\tVRObject.prototype.hide = function () {\n\t\t\tthis.object.visible = false;\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.show = function () {\n\t\t\tthis.object.visible = true;\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.moveTo = function (x, y, z) {\n\t\t\tvar position = this.object.position;\n\t\n\t\t\tx = !isNaN(x) ? x : position.x;\n\t\t\ty = !isNaN(y) ? y : position.y;\n\t\t\tz = !isNaN(z) ? z : position.z;\n\t\n\t\t\tposition.set(x, y, z);\n\t\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.moveX = function (distance) {\n\t\t\tthis.object.translateX(distance);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.moveY = function (distance) {\n\t\t\tthis.object.translateY(distance);\n\t\t\treturn this;\n\t\t};\n\t\tVRObject.prototype.moveUp = VRObject.prototype.moveY;\n\t\tVRObject.prototype.moveDown = function (distance) {\n\t\t\tthis.moveY(-distance);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.moveZ = function (distance) {\n\t\t\tthis.object.translateZ(distance);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.rotateX = function (angle) {\n\t\t\tthis.object.rotateOnAxis(xAxis, angle);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.rotateY = function (angle) {\n\t\t\tthis.object.rotateOnAxis(yAxis, angle);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.rotateZ = function (angle) {\n\t\t\tthis.object.rotateOnAxis(zAxis, angle);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.setScale = function (x, y, z) {\n\t\t\tvar scale = this.object.scale;\n\t\n\t\t\tif (x !== undefined && !isNaN(x)) {\n\t\t\t\tif (y === undefined && z === undefined) {\n\t\t\t\t\ty = z = x;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tx = !isNaN(x) ? x : scale.x;\n\t\t\ty = !isNaN(y) ? y : scale.y;\n\t\t\tz = !isNaN(z) ? z : scale.z;\n\t\n\t\t\tscale.set(x, y, z);\n\t\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.setMaterial = function (material, options) {\n\t\t\tif (material && this.object instanceof THREE.Mesh) {\n\t\t\t\tif (typeof material === 'function') {\n\t\t\t\t\tmaterial = material();\n\t\t\t\t} else if (typeof material === 'string' && materials[material]) {\n\t\t\t\t\tmaterial = materials[material](options);\n\t\t\t\t} else if (material && !(material instanceof THREE.Material) && typeof material !== 'number') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tmaterial = materials.material(material);\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\t\n\t\t\t\tif (material instanceof THREE.Material) {\n\t\t\t\t\tthis.object.material = material;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.update = function () {};\n\t\n\t\tVRObject.prototype.raycastable = true;\n\t\n\t\tVRObject.repeat = function (count, options) {\n\t\t\tvar i,\n\t\t\t\tchange = false,\n\t\t\t\tlastObject = this,\n\t\t\t\tcurrentPosition = new THREE.Vector3(),\n\t\t\t\tdeltaPosition = new THREE.Vector3(),\n\t\t\t\tcurrentQuaternion = new THREE.Quaternion(),\n\t\t\t\tdeltaQuaternion = new THREE.Quaternion();\n\t\n\t\t\tif (!options) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif (options.offset) {}\n\t\n\t\t\tfor (i = 0; i < count; i++) {\n\t\n\t\t\t}\n\t\t};\n\t\n\t\tVRObject.findObject = function (object) {\n\t\t\tif (object instanceof VRObject) {\n\t\t\t\treturn object;\n\t\t\t}\n\t\n\t\t\tif (object && object instanceof THREE.Object3D) {\n\t\t\t\tif (allObjects.get) {\n\t\t\t\t\treturn allObjects.get(object);\n\t\t\t\t}\n\t\n\t\t\t\treturn allObjects[object.id];\n\t\t\t}\n\t\n\t\t\t// if (typeof object === 'number') {\n\t\t\t// \treturn allObjects[object];\n\t\t\t// }\n\t\t};\n\t\n\t\treturn VRObject;\n\t\n\t}());\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(7),\n\t\t\tTHREE = __webpack_require__(33);\n\t\n\t\treturn function empty(parent, options) {\n\t\t\tvar obj = new THREE.Object3D();\n\t\n\t\t\tobj.name = 'empty';\n\t\n\t\t\tparent.add(obj);\n\t\n\t\t\treturn obj;\n\t\t};\n\t}());\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar map = {\n\t\t\"./box\": 11,\n\t\t\"./box.js\": 11,\n\t\t\"./cylinder\": 12,\n\t\t\"./cylinder.js\": 12,\n\t\t\"./empty\": 9,\n\t\t\"./empty.js\": 9,\n\t\t\"./floor\": 13,\n\t\t\"./floor.js\": 13,\n\t\t\"./grid\": 14,\n\t\t\"./grid.js\": 14,\n\t\t\"./image\": 15,\n\t\t\"./image.js\": 15,\n\t\t\"./panorama\": 16,\n\t\t\"./panorama.js\": 16,\n\t\t\"./sky\": 17,\n\t\t\"./sky.js\": 17,\n\t\t\"./sound\": 18,\n\t\t\"./sound.js\": 18,\n\t\t\"./sphere\": 19,\n\t\t\"./sphere.js\": 19,\n\t\t\"./text\": 20,\n\t\t\"./text.js\": 20,\n\t\t\"./torus\": 21,\n\t\t\"./torus.js\": 21,\n\t\t\"./video\": 22,\n\t\t\"./video.js\": 22\n\t};\n\tfunction webpackContext(req) {\n\t\treturn __webpack_require__(webpackContextResolve(req));\n\t};\n\tfunction webpackContextResolve(req) {\n\t\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n\t};\n\twebpackContext.keys = function webpackContextKeys() {\n\t\treturn Object.keys(map);\n\t};\n\twebpackContext.resolve = webpackContextResolve;\n\tmodule.exports = webpackContext;\n\twebpackContext.id = 10;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(7),\n\t\t\tTHREE = __webpack_require__(33),\n\t\t\tgeometry = new THREE.BoxGeometry( 1, 1, 1 );\n\t\n\t\treturn function box(parent, options) {\n\t\t\tvar mesh;\n\t\n\t\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\t\tmesh.name = 'box';\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(7),\n\t\t\tTHREE = __webpack_require__(33);\n\t\n\t\tfunction cylinder(parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmesh;\n\t\n\t\t\tgeometry = new THREE.CylinderGeometry(\n\t\t\t\toptions.radiusTop === undefined ? 0.5 : options.radiusTop,\n\t\t\t\toptions.radiusBottom === undefined ? 0.5 : options.radiusBottom,\n\t\t\t\toptions.height === undefined ? 1 : options.height,\n\t\t\t\toptions.radiusSegments === undefined ? 16 : options.radiusSegments,\n\t\t\t\toptions.heightSegments,\n\t\t\t\toptions.openEnded\n\t\t\t);\n\t\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\t\tmesh.name = 'cylinder';\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t}\n\t\n\t\treturn cylinder;\n\t}());\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(7),\n\t\t\tTHREE = __webpack_require__(33);\n\t\n\t\tfunction floor(parent, options) {\n\t\t\tvar obj,\n\t\t\t\tgeometry;\n\t\n\t\t\tgeometry = new THREE.CircleGeometry( options.radius || 100, options.segments || 16 );\n\t\t\tgeometry.applyMatrix( new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\t\n\t\t\tobj = new THREE.Mesh(\n\t\t\t\tgeometry,\n\t\t\t\tmaterials.checkerboard({\n\t\t\t\t\trepeat: 100\n\t\t\t\t})\n\t\t\t);\n\t\t\tobj.name = 'floor';\n\t\n\t\t\tobj.receiveShadow = true;\n\t\n\t\t\tparent.add(obj);\n\t\n\t\t\treturn obj;\n\t\t}\n\t\n\t\treturn floor;\n\t}());\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar THREE = __webpack_require__(33);\n\t\n\t\treturn function box(parent, options) {\n\t\t\tvar obj,\n\t\t\t\tsize = options && options.size || 10,\n\t\t\t\tstep = options && options.step || 1;\n\t\n\t\t\tobj = new THREE.GridHelper(size, step);\n\t\t\tobj.name = 'grid';\n\t\t\tif (options) {\n\t\t\t\tobj.setColors(options.colorCenterLine || obj.color1, options.colorGrid || obj.color2);\n\t\t\t}\n\t\t\tobj.geometry.computeBoundingBox();\n\t\n\t\t\tparent.add(obj);\n\t\n\t\t\treturn obj;\n\t\t};\n\t}());\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(7),\n\t\t\tTHREE = __webpack_require__(33);\n\t\n\t\treturn function image(parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmaterial,\n\t\t\t\tmesh,\n\t\t\t\tsrc,\n\t\t\t\ttex,\n\t\t\t\tself = this;\n\t\n\t\t\tif (typeof options === 'string') {\n\t\t\t\tsrc = options;\n\t\t\t} else if (options) {\n\t\t\t\tsrc = options.src;\n\t\t\t}\n\t\n\t\t\tif (src) {\n\t\t\t\ttex = materials.imageTexture(src, THREE.UVMapping, function (t, image) {\n\t\t\t\t\t//todo: don't do any of this if object has been deleted\n\t\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(1, image.naturalHeight / image.naturalWidth, 1));\n\t\t\t\t\tmaterial.map = tex;\n\t\t\t\t\tmaterial.visible = true;\n\t\t\t\t\tmesh.visible = true;\n\t\t\t\t\tparent.add(mesh);\n\t\n\t\t\t\t\tself.emit('loaded');\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1, 8);\n\t\n\t\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t\tside: THREE.DoubleSide,\n\t\t\t\ttransparent: true,\n\t\t\t\tmap: tex\n\t\t\t});\n\t\n\t\t\tmesh = new THREE.Mesh( geometry, material );\n\t\n\t\t\tmesh.visible = false;\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t    var p = {};\n\t        p.scaleX = p.scaleX || 1;\n\t        p.scaleY = p.scaleY || 1;\n\t        p.offsetX = p.offsetX || 0;\n\t        p.offsetY = p.offsetY || 0;\n\t        p.phiStart = p.phiStart || 0;\n\t        p.phiLength = p.phiLength || Math.PI * 2;\n\t        p.thetaStart = p.thetaStart || 0;\n\t        p.thetaLength = p.thetaLength || Math.PI;\n\t    // Reduce ptr.\n\t    var isSupportWebgl = Boolean(window.isSupportWebgl);\n\t\tvar materials = __webpack_require__(7),\n\t\t\tTHREE = __webpack_require__(33),\n\t        // geometry = new THREE.BoxGeometry(15, 15, 15, 10, 10, 10);\n\t            // geometry = new THREE.SphereGeometry(100, 60, 60);\n\t        // geometry = new THREE.SphereGeometry(60, 100, 100,\n\t        geometry = new THREE.SphereGeometry(16, 32, 32, p.phiStart, p.phiLength, p.thetaStart, p.thetaLength);\n\t        geometry.applyMatrix(new THREE.Matrix4().makeScale(-2, 2, 2.3));\n\t        geometry.applyMatrix(new THREE.Matrix4().makeRotationY(- Math.PI / 3));\n\t    // Will not render panorama if already contains the key.\n\t    var mapRender = {};\n\t    var isListener = false;\n\t    // Will use css3drenderer if not support webgl.\n\t    \n\t    var texturePlaceholder = document.createElement( 'canvas' );\n\t    texturePlaceholder.width = 64;\n\t    texturePlaceholder.height = 64;\n\t    var context = texturePlaceholder.getContext( '2d' );\n\t    context.fillStyle = 'rgb( 200, 200, 200 )';\n\t    context.fillRect( 0, 0, texturePlaceholder.width, texturePlaceholder.height );\n\t\tvar STR_CHILDEN_NAME = 'obj3DElement';\n\t\n\t    function loadTexture( path, _parent ) {\n\t        var texture = new THREE.Texture( texturePlaceholder );\n\t        var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5 } );\n\t        var image = new Image();\n\t        image.onload = function () {\n\t            texture.image = this;\n\t            texture.needsUpdate = true;\n\t            _parent.dispatchEvent({\n\t                type: 'img-loaded'\n\t            });\n\t        };\n\t        image.src = path;\n\t        return material;\n\t    }\n\t\n\t\treturn function panorama(parent, options, renderer) {\n\t        var src,\n\t            preview,\n\t            cubeSrc = {};\n\t\t\tvar self = this;\n\t\t\tvar material,\n\t\t\t\tmesh,\n\t            pretex,\n\t            mapKey,\n\t\t\t\ttex;\n\t\n\t\t\tif (typeof options === 'string') {\n\t\t\t\tsrc = options;\n\t\t\t} else if (options) {\n\t\t\t\tsrc = options.src;\n\t            preview = options.preview;\n\t            if (options.left) {\n\t                cubeSrc.left = options.left;\n\t                cubeSrc.right = options.right;\n\t                cubeSrc.down = options.down;\n\t                cubeSrc.top = options.top;\n\t                cubeSrc.front = options.front;\n\t                cubeSrc.back = options.back;\n\t            }\n\t\t\t}\n\t        mapKey = src;\n\t        if (!isSupportWebgl) {\n\t            mapKey = cubeSrc.left;\n\t        }\n\t        if (mapRender[mapKey]) {\n\t            // Remove all mesh object if scene contains them.\n\t            // Optimezei and Reduce Memory Usage for Panorama Model.\n\t            for (var key in mapRender) {\n\t                if(mapRender.hasOwnProperty(key)) {\n\t                    while (parent.getObjectByName(key)) {\n\t                        parent.remove(parent.getObjectByName(key));\n\t                    }\n\t                }\n\t            }\n\t            parent.add(mapRender[mapKey]);\n\t            parent.dispatchEvent({\n\t                type: 'img-loaded'\n\t            });\n\t            return mapRender[mapKey];\n\t        }\n\t\t\tif (renderer instanceof THREE.CSS3DRenderer) {\n\t\t\t\tvar cube = new THREE.Object3D();\n\t\t\t\tvar sides = [\n\t                {\n\t                    url: cubeSrc.right,\n\t                    position: [ -512, 0, 0 ],\n\t                    rotation: [ 0, Math.PI / 2, 0 ]\n\t                },\n\t                {\n\t                    url: cubeSrc.left,\n\t                    position: [ 512, 0, 0 ],\n\t                    rotation: [ 0, -Math.PI / 2, 0 ]\n\t                },\n\t                {\n\t                    url: cubeSrc.top,\n\t                    position: [ 0,  512, 0 ],\n\t                    rotation: [ Math.PI / 2, 0, Math.PI ]\n\t                },\n\t                {\n\t                    url: cubeSrc.down,\n\t                    position: [ 0, -512, 0 ],\n\t                    rotation: [ - Math.PI / 2, 0, Math.PI ]\n\t                },\n\t                {\n\t                    url: cubeSrc.front,\n\t                    position: [ 0, 0,  512 ],\n\t                    rotation: [ 0, Math.PI, 0 ]\n\t                },\n\t                {\n\t                    url: cubeSrc.back,\n\t                    position: [ 0, 0, -512 ],\n\t                    rotation: [ 0, 0, 0 ]\n\t                }\n\t            ];\n\t            // Remove children from cube;\n\t            for ( var i = 0; i < sides.length; i ++ ) {\n\t                if (cube.getObjectByName(STR_CHILDEN_NAME + i)) {\n\t                    cube.remove(cube.getObjectByName(STR_CHILDEN_NAME + i));\n\t                }\n\t            }\n\t            parent.remove(cube);\n\t            parent.add(cube);\n\t            var callbackOnload = function () {\n\t                // Notify outside to do something when image has been loaded.\n\t                parent.dispatchEvent({\n\t                    type: 'img-loaded'\n\t                });\n\t            };\n\t            for ( var i = 0; i < sides.length; i ++ ) {\n\t                var side = sides[ i ];\n\t                var element = document.createElement( 'img' );\n\t                element.width = 1026; // 2 pixels extra to close the gap.\n\t                element.src = side.url;\n\t                element.onload = callbackOnload;\n\t                var object = new THREE.CSS3DObject( element );\n\t                object.name = STR_CHILDEN_NAME + i;\n\t                object.position.fromArray( side.position );\n\t                object.rotation.fromArray( side.rotation );\n\t                cube.add( object );\n\t            }\n\t\t\t\tcube.name = mapKey;\n\t            return cube;\n\t\n\t\t\t}\n\t        if (!isSupportWebgl) {\n\t            var arrMaterial = [\n\t                loadTexture( cubeSrc.right, parent ), // right\n\t                loadTexture( cubeSrc.left, parent ), // left\n\t                loadTexture( cubeSrc.top, parent ), // top\n\t                loadTexture( cubeSrc.down, parent ), // bottom\n\t                loadTexture( cubeSrc.front, parent ), // front\n\t                loadTexture( cubeSrc.back, parent ) // back\n\t            ];\n\t\n\t            mesh = new THREE.Mesh( new THREE.BoxGeometry( 60, 60, 60, 20, 20, 20 ), new THREE.MultiMaterial( arrMaterial ) );\n\t            mesh.scale.x = - 1;\n\t            // The primy name use one of array.\n\t            mesh.name = mapKey;\n\t            // Fisheye\n\t            // for ( var i = 0, l = mesh.geometry.vertices.length; i < l; i ++ ) {\n\t            //     var vertex = mesh.geometry.vertices[ i ];\n\t            //     vertex.normalize();\n\t            //     vertex.multiplyScalar( 550 );\n\t            // }\n\t            mapRender[mapKey] = mesh;\n\t            parent.add( mesh );\n\t            return mesh;\n\t        }\n\t\n\t\t\tif (preview) {\n\t\t\t\tpretex = materials.imageTexture(preview, THREE.UVMapping, function () {\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tif (src) {\n\t            if (!isListener) {\n\t                parent.addEventListener('loaded', function (event) {\n\t                    var data = event.data;\n\t                    while (parent.getObjectByName('preview')) {\n\t                        parent.remove(parent.getObjectByName('preview'));\n\t                    }\n\t\n\t                    material = new THREE.MeshBasicMaterial({\n\t                        map: data.tex\n\t                    });\n\t                    mesh = new THREE.Mesh(geometry, material);\n\t                    mapRender[data.src] = mesh;\n\t\n\t                    mesh.name = src;\n\t\n\t                    parent.add(mesh);\n\t                    parent.dispatchEvent({\n\t                        type: 'img-loaded'\n\t                    });\n\t                });\n\t                isListener = true;\n\t            }\n\t\t\t\ttex = materials.imageTexture(src, THREE.UVMapping, function () {\n\t                parent.dispatchEvent({\n\t                    type: 'loaded',\n\t                    data: {\n\t                        src: src,\n\t                        tex: tex\n\t                    }\n\t                });\n\t\t\t\t\tself.emit('loaded');\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t\t// transparent: true,\n\t\t\t\t// envMap: tex,\n\t\t\t\tmap: pretex\n\t            // side: THREE.DoubleSide,\n\t            // debug\n\t            // wireframe: true,\n\t            // depthWrite: false\n\t            // envMap:cubemap\n\t\t\t});\n\t\n\t\t\tmesh = new THREE.Mesh(geometry, material);\n\t\n\t\t\tif (options && options.stereo) {\n\t\t\t\tif (options.stereo === 'vertical') {\n\t\t\t\t\ttex.repeat.y = 0.5;\n\t\t\t\t} else {\n\t\t\t\t\ttex.repeat.x = 0.5;\n\t\t\t\t}\n\t\t\t\tmesh.userData.stereo = options.stereo;\n\t\t\t}\n\t\n\t        mesh.name = 'preview';\n\t\n\t        parent.add(mesh);\n\t\n\t\t\tthis.raycastable = false;\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(7),\n\t\t\tTHREE = __webpack_require__(33),\n\t\t\tTAU = Math.PI * 2,\n\t\t\tHALF_PI = Math.PI / 2,\n\t\n\t\t\tdistance = 400000,\n\t\t\tscratchVector = new THREE.Vector3(),\n\t\n\t\t\tparams = [\n\t\t\t\t'luminance',\n\t\t\t\t'turbidity',\n\t\t\t\t'reileigh',\n\t\t\t\t'mieCoefficient',\n\t\t\t\t'mieDirectionalG'\n\t\t\t];\n\t\n\t\t__webpack_require__(38);\n\t\n\t\treturn function sky(parent, options) {\n\t\t\tvar obj = new THREE.Sky(),\n\t\t\t\tself = this,\n\t\t\t\tscene = parent,\n\t\t\t\tlight,\n\t\t\t\tsunPosition,\n\t\t\t\tazimuth = Math.PI / 6,\n\t\t\t\taltitude = Math.PI / 6;\n\t\n\t\t\tfunction mod(x, y) {\n\t\t\t\treturn x - y * Math.floor(x / y);\n\t\t\t}\n\t\n\t\t\tfunction update() {\n\t\t\t\tvar sinTheta,\n\t\t\t\t\tcosTheta,\n\t\t\t\t\tphi,\n\t\t\t\t\tsinPhi,\n\t\t\t\t\tcosPhi;\n\t\n\t\t\t\tsinTheta = Math.sin(altitude);\n\t\t\t\tcosTheta = Math.cos(altitude);\n\t\t\t\tphi = -HALF_PI - azimuth;\n\t\t\t\tsinPhi = Math.sin(phi);\n\t\t\t\tcosPhi = Math.cos(phi);\n\t\n\t\t\t\tsunPosition.set(\n\t\t\t\t\tdistance * cosPhi * cosTheta,\n\t\t\t\t\tdistance * sinTheta,\n\t\t\t\t\tdistance * sinPhi * cosTheta\n\t\t\t\t);\n\t\n\t\t\t\tif (light) {\n\t\t\t\t\tlight.intensity = 1.5 * Math.max(0.0, 1.0 - Math.exp(-((Math.PI / 1.95 - Math.abs(HALF_PI - altitude)) / 1.5)));\n\t\t\t\t\tlight.position.copy(sunPosition).normalize().multiplyScalar(100);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tobj.mesh.name = 'sky';\n\t\n\t\t\tparent.add(obj.mesh);\n\t\n\t\t\twhile (!(scene instanceof THREE.Scene) && scene.parent) {\n\t\t\t\tscene = scene.parent;\n\t\t\t}\n\t\t\tlight = scene.getObjectByName('directional-light');\n\t\n\t\t\tthis.setOptions = function (options) {\n\t\t\t\tvar needUpdate = false,\n\t\t\t\t\taltitude,\n\t\t\t\t\tazimuth;\n\t\n\t\t\t\tif (options) {\n\t\t\t\t\tparams.forEach(function (param) {\n\t\t\t\t\t\tvar val = options[param];\n\t\t\t\t\t\tif (val !== undefined) {\n\t\t\t\t\t\t\tval = parseFloat(val);\n\t\t\t\t\t\t\tif (!isNaN(val)) {\n\t\t\t\t\t\t\t\tobj.uniforms[param].value = val;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\n\t\t\t\t\tif (options.sunPosition instanceof THREE.Vector3) {\n\t\t\t\t\t\tobj.uniforms.sunPosition.value.copy(options.sunPosition);\n\t\t\t\t\t} else if (Array.isArray(options.sunPosition)) {\n\t\t\t\t\t\tobj.uniforms.sunPosition.value.set(obj.uniforms.sunPosition.value, options.sunPosition);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.altitude = options.altitude;\n\t\t\t\t\t\tself.azimuth = options.azimuth;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tObject.defineProperty(this, 'azimuth', {\n\t\t\t\tset: function (val) {\n\t\t\t\t\tval = mod(parseFloat(val), TAU);\n\t\t\t\t\tif (!isNaN(val) && val !== azimuth) {\n\t\t\t\t\t\tazimuth = val;\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tget: function () {\n\t\t\t\t\treturn azimuth;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'altitude', {\n\t\t\t\tset: function (val) {\n\t\t\t\t\tval = mod(parseFloat(val), TAU);\n\t\t\t\t\tif (!isNaN(val) && val !== altitude) {\n\t\t\t\t\t\taltitude = val;\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tget: function() {\n\t\t\t\t\treturn altitude;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tthis.setAltitude = function (val) {\n\t\t\t\tself.altitude = val;\n\t\t\t\treturn this;\n\t\t\t};\n\t\n\t\t\tthis.setAzimuth = function (val) {\n\t\t\t\tself.azimuth = val;\n\t\t\t\treturn this;\n\t\t\t};\n\t\n\t\t\tsunPosition = obj.uniforms.sunPosition.value;\n\t\t\tupdate();\n\t\n\t\t\tthis.setOptions(options);\n\t\n\t\t\tthis.raycastable = false;\n\t\n\t\t\treturn obj.mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(7),\n\t\t\tTHREE = __webpack_require__(33);\n\t\n\t\t__webpack_require__(37);\n\t\n\t\treturn function sound(parent, options) {\n\t\t\tvar obj,\n\t\t\t\tsrc,\n\t\t\t\tlistener,\n\t\t\t\tscene = parent;\n\t\n\t\t\tif (typeof options === 'string' || Array.isArray(options)) {\n\t\t\t\tsrc = options;\n\t\t\t} else if (options) {\n\t\t\t\tsrc = options.src;\n\t\t\t}\n\t\n\t\t\twhile (!(scene instanceof THREE.Scene) && scene.parent) {\n\t\t\t\tscene = scene.parent;\n\t\t\t}\n\t\n\t\t\tlistener = scene.getObjectByName('audio-listener');\n\t\t\tobj = new THREE.Audio(listener);\n\t\t\t// obj.setLoop(true);\n\t\t\tobj.load(src);\n\t\n\t\t\tthis.start = obj.start.bind(obj);\n\t\t\tthis.volume = obj.volume.bind(obj);\n\t\n\t\t\tparent.add(obj);\n\t\n\t\t\treturn obj;\n\t\t};\n\t}());\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(7),\n\t\t\tTHREE = __webpack_require__(33);\n\t\n\t\treturn function box(parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmesh;\n\t\n\t\t\tgeometry = new THREE.SphereGeometry(\n\t\t\t\toptions.radius === undefined ? 0.5 : options.radius,\n\t\t\t\toptions.widthSegments === undefined ? 16 : options.widthSegments,\n\t\t\t\toptions.heightSegments === undefined ? 12 : options.heightSegments,\n\t\t\t\toptions.phiStart,\n\t\t\t\toptions.phiLength,\n\t\t\t\toptions.thetaStart,\n\t\t\t\toptions.thetaLength\n\t\t\t);\n\t\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\t\tmesh.name = 'sphere';\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar THREE = __webpack_require__(33),\n\t\t\tfontSizeRegex = /(\\d+)px/i,\n\t\t\tnewLineRegex = /[\\n\\r]/,\n\t\t\tspaceRegex = /[\\t ]/,\n\t\t\tlog2 = Math.log(2),\n\t\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1);\n\t\n\t\treturn function text(parent, options) {\n\t\t\tvar self = this,\n\t\t\t\tmaterial,\n\t\t\t\tcanvas,\n\t\t\t\tctx,\n\t\t\t\tmesh,\n\t\t\t\tcontainer,\n\t\t\t\tsrc,\n\t\t\t\ttextWidth = 0,\n\t\t\t\ttextHeight = 0,\n\t\t\t\tprops = {\n\t\t\t\t\ttext: '',\n\t\t\t\t\tfont: '80px sans-serif',\n\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\ttextBaseline: '',\n\t\t\t\t\tdirection: '',\n\t\t\t\t\tfillStyle: 'white',\n\t\t\t\t\tresolution: 256, //pixels per meter\n\t\t\t\t\twrap: 5 //in meters\n\t\t\t\t},\n\t\t\t\ttex;\n\t\n\t\t\tfunction nextPowerOfTwo(n) {\n\t\t\t\treturn Math.pow(2, Math.ceil(Math.log(n) / log2));\n\t\t\t}\n\t\n\t\t\tfunction Line(word) {\n\t\t\t\tthis.spaceWidth = ctx.measureText(' ').width;\n\t\t\t\tthis.totalWidth = 0;\n\t\t\t\tthis.wordsWidth = 0;\n\t\t\t\tthis.words = [];\n\t\t\t\tthis.wrap = false;\n\t\t\t\tif (word) {\n\t\t\t\t\tthis.add(word);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tLine.prototype.text = function () {\n\t\t\t\treturn this.words.join(' ');\n\t\t\t};\n\t\n\t\t\tLine.prototype.add = function(word) {\n\t\t\t\tvar wordWidth;\n\t\t\t\tif (this.words.length) {\n\t\t\t\t\tthis.totalWidth += this.spaceWidth;\n\t\t\t\t}\n\t\t\t\tthis.words.push(word);\n\t\t\t\twordWidth = Line.measure(word);\n\t\t\t\tthis.totalWidth += wordWidth;\n\t\t\t\tthis.wordsWidth += wordWidth;\n\t\t\t};\n\t\n\t\t\tLine.prototype.measure = function(word) {\n\t\t\t\tvar width = this.totalWidth;\n\t\t\t\tif (word) {\n\t\t\t\t\twidth += Line.measure(word);\n\t\t\t\t\tif (this.words.length) {\n\t\t\t\t\t\twidth += this.spaceWidth;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn width;\n\t\t\t};\n\t\n\t\t\tLine.measure = function(word) {\n\t\t\t\treturn ctx.measureText(word).width;\n\t\t\t};\n\t\n\t\t\tfunction update() {\n\t\t\t\t//text stuffs\n\t\t\t\tvar text,\n\t\t\t\t\tword = '',\n\t\t\t\t\tletter,\n\t\t\t\t\tisSpace,\n\t\t\t\t\tline,\n\t\t\t\t\tlines = [],\n\t\t\t\t\tparse,\n\t\n\t\t\t\t\t//layout\n\t\t\t\t\tdirection = getComputedStyle(document.body).direction,\n\t\t\t\t\tinherit,\n\t\t\t\t\tresolution = parseFloat(props.resolution) || 256,\n\t\t\t\t\twrap,\n\t\t\t\t\twrapped = false,\n\t\t\t\t\tfontSize,\n\t\t\t\t\tpadding,\n\t\n\t\t\t\t\t//measurements\n\t\t\t\t\tlineHeight,\n\t\t\t\t\ti, start, y, measure,\n\t\t\t\t\twidth,\n\t\t\t\t\theight = 0;\n\t\n\t\t\t\twrap = parseFloat(props.wrap);\n\t\t\t\tif (isNaN(wrap) || wrap < 0) {\n\t\t\t\t\twrap = 5;\n\t\t\t\t}\n\t\t\t\twidth = resolution * wrap;\n\t\n\t\t\t\tctx.font = props.font;\n\t\t\t\tparse = fontSizeRegex.exec(ctx.font);\n\t\t\t\tfontSize = parseFloat(parse && parse[1]) || 50;\n\t\n\t\t\t\tlineHeight = fontSize * 1.5;\n\t\n\t\t\t\tline = new Line();\n\t\n\t\t\t\ttext = props.text === 0 ? '0' : String(props.text || '');\n\t\t\t\tif (wrap) {\n\t\t\t\t\ttext = text.trim() + ' ';\n\t\t\t\t\tfor (i = 0; i < text.length; i++) {\n\t\t\t\t\t\tletter = text.charAt(i);\n\t\t\t\t\t\tif (newLineRegex.test(letter)) {\n\t\t\t\t\t\t\tline.add(word);\n\t\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t\t\tword = '';\n\t\t\t\t\t\t\tline = new Line();\n\t\t\t\t\t\t} else if (spaceRegex.test(letter)) {\n\t\t\t\t\t\t\tmeasure = line.measure(word);\n\t\t\t\t\t\t\tif (measure < width) {\n\t\t\t\t\t\t\t\tif (line) {\n\t\t\t\t\t\t\t\t\tline.add(word);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tline = new Line(word);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (!line && Line.measure(word) >= width) {\n\t\t\t\t\t\t\t\t//one very long word\n\t\t\t\t\t\t\t\tlines.push(new Line(word));\n\t\t\t\t\t\t\t\tword = '';\n\t\t\t\t\t\t\t\tline = new Line();\n\t\t\t\t\t\t\t\twrapped = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tline.wrap = true;\n\t\t\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t\t\t\tline = new Line(word);\n\t\t\t\t\t\t\t\twrapped = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tword = '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tword += letter;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (line) {\n\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlines.push(new Line(text));\n\t\t\t\t}\n\t\n\t\t\t\tif (!width || !wrapped) {\n\t\t\t\t\twidth = lines.reduce(function (previous, line) {\n\t\t\t\t\t\treturn Math.max(previous, line.totalWidth);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t\twidth = Math.min(width, 2048);\n\t\n\t\t\t\theight = lines.length * lineHeight;\n\t\n\t\t\t\tif (options && options.mipmap === false) {\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t} else {\n\t\t\t\t\tcanvas.width = nextPowerOfTwo(width);\n\t\t\t\t\tcanvas.height = nextPowerOfTwo(height);\n\t\t\t\t}\n\t\n\t\t\t\tmesh.scale.set(canvas.width / resolution, canvas.height / resolution, 1);\n\t\n\t\t\t\t//debug\n\t\t\t\t// ctx.fillStyle = 'rgba(100, 100, 100, 0.5)';\n\t\t\t\t// ctx.fillRect(0, 0, canvas.width, canvas.height);\n\t\t\t\t// document.body.appendChild(canvas);\n\t\t\t\t// canvas.style.cssText = 'position: absolute; width: auto !important; height: auto !important; max-width: 80%';\n\t\n\t\t\t\t/*\n\t\t\t\tset all these properties again because they get reset\n\t\t\t\twhen you resize the canvas\n\t\t\t\t*/\n\t\t\t\tctx.font = props.font;\n\t\t\t\tctx.textAlign = props.textAlign;\n\t\t\t\tctx.textBaseline = props.textBaseline;\n\t\t\t\tctx.direction = props.direction;\n\t\t\t\tctx.fillStyle = props.fillStyle;\n\t\t\t\t//todo: add maxWidth?\n\t\n\t\t\t\tpadding = (canvas.width - width) / 2;\n\t\t\t\ty = (canvas.height - height) / 2 + lineHeight / 2;\n\t\n\t\t\t\tinherit = (ctx.direction === '' || ctx.direction === 'inherit');\n\t\t\t\tif (ctx.textAlign === 'center') {\n\t\t\t\t\tstart = canvas.width / 2;\n\t\t\t\t} else if (ctx.textAlign === 'right' ||\n\t\t\t\t\tctx.textAlign === 'end' && (ctx.direction === 'ltr' || inherit && direction === 'ltr') ||\n\t\t\t\t\tctx.textAlign === 'start' && (ctx.direction === 'rtl' || inherit && direction === 'rtl')) {\n\t\n\t\t\t\t\tstart = canvas.width - padding;\n\t\t\t\t} else {\n\t\t\t\t\tstart = padding;\n\t\t\t\t}\n\t\n\t\t\t\tlines.forEach(function (line) {\n\t\t\t\t\tvar x,\n\t\t\t\t\t\tspace;\n\t\t\t\t\tif (props.textAlign === 'justify' && line.wrap && line.words.length > 1) {\n\t\t\t\t\t\tx = start;\n\t\t\t\t\t\tspace = (width - line.wordsWidth) / (line.words.length - 1);\n\t\t\t\t\t\tline.words.forEach(function (word) {\n\t\t\t\t\t\t\tctx.fillText(word, x, y);\n\t\t\t\t\t\t\tx += space + Line.measure(word);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.fillText(line.text(), start, y);\n\t\t\t\t\t}\n\t\t\t\t\ty += lineHeight;\n\t\t\t\t});\n\t\n\t\t\t\ttextWidth = width / resolution;\n\t\t\t\ttextHeight = lines.length * lineHeight / resolution;\n\t\n\t\t\t\ttex.needsUpdate = true;\n\t\n\t\t\t\tmesh.name = text.trim();\n\t\t\t}\n\t\n\t\t\tcanvas = document.createElement('canvas');\n\t\t\tctx = canvas.getContext('2d');\n\t\t\ttex = new THREE.Texture(canvas);\n\t\n\t\t\tif (canvas.width === nextPowerOfTwo(canvas.width) &&\n\t\t\t\tcanvas.height === nextPowerOfTwo(canvas.height)) {\n\t\n\t\t\t\ttex.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\t\ttex.generateMipmaps = true;\n\t\t\t}\n\t\n\t\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t\tside: THREE.DoubleSide,\n\t\t\t\ttransparent: true,\n\t\t\t\tmap: tex\n\t\t\t});\n\t\n\t\t\tmesh = new THREE.Mesh(geometry, material);\n\t\n\t\t\tcontainer = new THREE.Object3D();\n\t\t\tcontainer.name = 'text';\n\t\t\tcontainer.add(mesh);\n\t\t\tparent.add(container);\n\t\n\t\t\tif (typeof options === 'string') {\n\t\t\t\tprops.text = options;\n\t\t\t} else if (options) {\n\t\t\t\tObject.keys(props).forEach(function (key) {\n\t\t\t\t\tprops[key] = options[key] || props[key];\n\t\t\t\t});\n\t\t\t}\n\t\t\tupdate();\n\t\n\t\t\tObject.keys(props).forEach(function (key) {\n\t\t\t\tObject.defineProperty(self, key, {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\treturn props[key];\n\t\t\t\t\t},\n\t\t\t\t\tset: function (val) {\n\t\t\t\t\t\tprops[key] = val;\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(self, 'width', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn textWidth;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(self, 'height', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn textHeight;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tthis.material = material;\n\t\n\t\t\treturn container;\n\t\t};\n\t}());\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(7),\n\t\t\tTHREE = __webpack_require__(33);\n\t\n\t\treturn function torus(parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmesh;\n\t\n\t\t\tgeometry = new THREE.TorusGeometry(\n\t\t\t\toptions.radius === undefined ? 0.5 : options.radius,\n\t\t\t\toptions.tube === undefined ? 0.125 : options.tube,\n\t\t\t\toptions.radialSegments === undefined ? 12 : options.radialSegments,\n\t\t\t\toptions.tubularSegments === undefined ? 16 : options.tubularSegments,\n\t\t\t\toptions.arc\n\t\t\t);\n\t\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\t\tmesh.name = 'torus';\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar THREE = __webpack_require__(33),\n\t\t\turlRegex = __webpack_require__(34),\n\t\t\textRegex = /\\.(webm|ogg|ogv|m4v|mp4|mov)/i,\n\t\t\tvideo;\n\t\n\t\tvideo = function (parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmaterial,\n\t\t\t\tmesh,\n\t\t\t\tvid,\n\t\t\t\ttex,\n\t\t\t\taspectRatio = 1,\n\t\t\t\tplaying = false,\n\t\t\t\tself = this;\n\t\n\t\t\tfunction isPowerOfTwo(num) {\n\t\t\t\treturn num > 0 && (num & (num-1)) === 0; // jshint ignore:line\n\t\t\t}\n\t\n\t\t\tfunction loadedMetadata() {\n\t\t\t\t//todo: don't do any of this if object has been deleted\n\t\n\t\t\t\tvar newAspectRatio = vid.videoWidth / vid.videoHeight;\n\t\t\t\tif (!options || !options.sphere) {\n\t\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(1, aspectRatio / newAspectRatio, 1));\n\t\t\t\t}\n\t\t\t\taspectRatio = newAspectRatio;\n\t\n\t\t\t\tif (vid.videoWidth === vid.videoHeight &&\n\t\t\t\t\t\tisPowerOfTwo(vid.videoWidth) && isPowerOfTwo(vid.videoHeight)) {\n\t\n\t\t\t\t\ttex.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\t\t\ttex.generateMipmaps = true;\n\t\t\t\t} else {\n\t\t\t\t\ttex.minFilter = THREE.LinearFilter;\n\t\t\t\t\ttex.generateMipmaps = false;\n\t\t\t\t}\n\t\n\t\t\t\tmaterial.map = tex;\n\t\t\t\tmaterial.visible = true;\n\t\n\t\t\t\tif (playing) {\n\t\t\t\t\tvid.play();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction setSource(sources) {\n\t\t\t\tsources.forEach(function (src) {\n\t\t\t\t\tvar parse,\n\t\t\t\t\t\text,\n\t\t\t\t\t\tsource;\n\t\n\t\t\t\t\tif (!src) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tparse = urlRegex.exec(src);\n\t\t\t\t\tif (parse &&\n\t\t\t\t\t\t\t(parse[1] && parse[1] !== window.location.hostΩ ||\n\t\t\t\t\t\t\t\tparse[2] && parse[2] !== window.location.port)) {\n\t\n\t\t\t\t\t\tif (vid.crossOrigin !== undefined) {\n\t\t\t\t\t\t\tvid.crossOrigin = 'anonymous';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('Browser does not support cross-origin video');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsource = document.createElement('source');\n\t\t\t\t\tsource.src = src;\n\t\n\t\t\t\t\text = extRegex.exec(src);\n\t\t\t\t\tif (!ext || vid.canPlayType('video/' + ext[1])) {\n\t\t\t\t\t\tvid.appendChild(source);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\t/*\n\t\t\tPause the video when this browser tab is in the background or minimized.\n\t\t\tResume when it comes back in focus, but only if the user didn't pause manually.\n\t\t\t*/\n\t\t\tfunction visibilityChange() {\n\t\t\t\tif (document.hidden || document.mozHidden || document.msHidden || document.webkitHidden) {\n\t\t\t\t\tvid.pause();\n\t\t\t\t} else if (playing) {\n\t\t\t\t\tvid.play();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tvid = document.createElement('video');\n\t\t\tvid.loop = true;\n\t\t\tvid.addEventListener('loadedmetadata', loadedMetadata, false);\n\t\n\t\t\tif (Array.isArray(options)) {\n\t\t\t\tsetSource(options);\n\t\t\t} if (typeof options === 'string') {\n\t\t\t\tsetSource([options]);\n\t\t\t} else if (typeof options.src === 'string') {\n\t\t\t\tsetSource([options.src]);\n\t\t\t} else if (Array.isArray(options.src)) {\n\t\t\t\tsetSource(options.src);\n\t\t\t}\n\t\n\t\t\tvid.load();\n\t\n\t\t\ttex = new THREE.VideoTexture(vid, THREE.UVMapping);\n\t\t\ttex.format = THREE.RGBFormat;\n\t\n\t\t\tif (options && options.sphere) {\n\t\t\t\tgeometry = new THREE.SphereGeometry(\n\t\t\t\t\t994, //radius\n\t\t\t\t\t60, //widthSegments\n\t\t\t\t\t60, //heightSegments\n\t\t\t\t\t(parseFloat(options.phiStart) || 0) * Math.PI * 2,\n\t\t\t\t\t(parseFloat(options.phiLength) || 1) * Math.PI * 2,\n\t\t\t\t\t(parseFloat(options.thetaStart) || 0) * Math.PI,\n\t\t\t\t\t(parseFloat(options.thetaLength) || 1) * Math.PI\n\t\t\t\t);\n\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(-1, 1, 1));\n\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeRotationY(- Math.PI / 2));\n\t\t\t} else {\n\t\t\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1, 8);\n\t\t\t}\n\t\n\t\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t\tside: THREE.DoubleSide,\n\t\t\t\tmap: tex,\n\t\t\t\tvisible: false\n\t\t\t});\n\t\n\t\t\tmesh = new THREE.Mesh(geometry, material);\n\t\n\t\t\tif (options && options.stereo) {\n\t\t\t\tif (options.stereo === 'vertical') {\n\t\t\t\t\ttex.repeat.y = 0.5;\n\t\t\t\t} else {\n\t\t\t\t\ttex.repeat.x = 0.5;\n\t\t\t\t}\n\t\t\t\tmesh.userData.stereo = options.stereo;\n\t\t\t}\n\t\n\t\t\tif (vid.readyState) {\n\t\t\t\tloadedMetadata();\n\t\t\t}\n\t\n\t\t\tthis.play = function play() {\n\t\t\t\tplaying = true;\n\t\t\t\tvid.play();\n\t\t\t\treturn this;\n\t\t\t};\n\t\n\t\t\tthis.pause = function pause() {\n\t\t\t\tplaying = false;\n\t\t\t\tvid.pause();\n\t\t\t\treturn this;\n\t\t\t};\n\t\n\t\t\tthis.canPlayType = video.canPlayType;\n\t\n\t\t\tObject.defineProperty(this, 'width', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.videoWidth;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'height', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.videoHeight;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'paused', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn !playing;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'volume', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.volume;\n\t\t\t\t},\n\t\t\t\tset: function (vol) {\n\t\t\t\t\tvid.volume = vol;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'muted', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.muted;\n\t\t\t\t},\n\t\t\t\tset: function (muted) {\n\t\t\t\t\tvid.muted = muted;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'duration', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.duration || 0;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'currentTime', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.currentTime;\n\t\t\t\t},\n\t\t\t\tset: function (currentTime) {\n\t\t\t\t\tif (vid.readyState && currentTime < vid.duration && currentTime >= 0) {\n\t\t\t\t\t\tvid.currentTime = currentTime;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\t[\n\t\t\t\t'loadedmetadata',\n\t\t\t\t'play',\n\t\t\t\t'pause',\n\t\t\t\t'playing',\n\t\t\t\t'progress'\n\t\t\t].forEach(function registerMediaEvent(event) {\n\t\t\t\tvid.addEventListener(event, self.emit.bind(self, event));\n\t\t\t});\n\t\n\t\t\t//sometimes video fails to play because it's too big. remove it and try again\n\t\t\tvid.addEventListener('error', function (evt) {\n\t\t\t\tif (vid.error.code === window.MediaError.MEDIA_ERR_DECODE && vid.childNodes.length > 1) {\n\t\t\t\t\tmaterial.visible = false;\n\t\t\t\t\tvid.removeChild(vid.firstChild);\n\t\t\t\t\tvid.load();\n\t\t\t\t}\n\t\n\t\t\t\tself.emit(event, evt);\n\t\t\t}, true);\n\t\n\t\t\tthis.element = vid;\n\t\n\t\t\twindow.addEventListener('touchstart', function touchStart() {\n\t\t\t\tif (playing) {\n\t\t\t\t\tvid.play();\n\t\t\t\t} else {\n\t\t\t\t\tvid.load();\n\t\t\t\t}\n\t\t\t\twindow.removeEventListener('touchstart', touchStart, true);\n\t\t\t}, true);\n\t\n\t\t\t//pause when window is hidden\n\t\t\tdocument.addEventListener('visibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('mozvisibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('msvisibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('webkitvisibilitychange', visibilityChange);\n\t\n\t\t\tmesh.name = 'video';\n\t\t\tthis.raycastable = !(options && options.sphere);\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t\n\t\tvideo.canPlayType = function canPlayType(type) {\n\t\t\tvar element = document.createElement('video');\n\t\t\treturn element.canPlayType(type);\n\t\t};\n\t\n\t\treturn video;\n\t}());\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * @author richt / http://richt.me\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n\t */\n\t\n\tTHREE.DeviceOrientationControls = function( object ) {\n\t\n\t\tvar scope = this;\n\t\n\t\tthis.object = object;\n\t\tthis.object.rotation.reorder( \"YXZ\" );\n\t\n\t\tthis.enabled = true;\n\t\n\t\tthis.deviceOrientation = {};\n\t\tthis.screenOrientation = 0;\n\t\n\t\tthis.alpha = 0;\n\t\tthis.alphaOffsetAngle = 0;\n\t\n\t\n\t\tvar onDeviceOrientationChangeEvent = function( event ) {\n\t\n\t\t\tscope.deviceOrientation = event;\n\t\n\t\t};\n\t\n\t\tvar onScreenOrientationChangeEvent = function() {\n\t\n\t\t\tscope.screenOrientation = window.orientation || 0;\n\t\n\t\t};\n\t\n\t\t// The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\t\n\t\tvar setObjectQuaternion = function() {\n\t\n\t\t\tvar zee = new THREE.Vector3( 0, 0, 1 );\n\t\n\t\t\tvar euler = new THREE.Euler();\n\t\n\t\t\tvar q0 = new THREE.Quaternion();\n\t\n\t\t\tvar q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\n\t\n\t\t\treturn function( quaternion, alpha, beta, gamma, orient ) {\n\t\n\t\t\t\teuler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\n\t\n\t\t\t\tquaternion.setFromEuler( euler ); // orient the device\n\t\n\t\t\t\tquaternion.multiply( q1 ); // camera looks out the back of the device, not the top\n\t\n\t\t\t\tquaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\n\t\n\t\t\t}\n\t\n\t\t}();\n\t\n\t\tthis.connect = function() {\n\t\n\t\t\tonScreenOrientationChangeEvent(); // run once on load\n\t\n\t\t\twindow.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\t\twindow.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\t\n\t\t\tscope.enabled = true;\n\t\n\t\t};\n\t\n\t\tthis.disconnect = function() {\n\t\n\t\t\twindow.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\t\twindow.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\t\n\t\t\tscope.enabled = false;\n\t\n\t\t};\n\t\n\t\tthis.update = function() {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tvar alpha = scope.deviceOrientation.alpha ? THREE.Math.degToRad( scope.deviceOrientation.alpha ) + this.alphaOffsetAngle : 0; // Z\n\t\t\tvar beta = scope.deviceOrientation.beta ? THREE.Math.degToRad( scope.deviceOrientation.beta ) : 0; // X'\n\t\t\tvar gamma = scope.deviceOrientation.gamma ? THREE.Math.degToRad( scope.deviceOrientation.gamma ) : 0; // Y''\n\t\t\tvar orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\n\t\n\t\t\tsetObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\n\t\t\tthis.alpha = alpha;\n\t\n\t\t};\n\t\n\t\tthis.updateAlphaOffsetAngle = function( angle ) {\n\t\n\t\t\tthis.alphaOffsetAngle = angle;\n\t\t\tthis.update();\n\t\n\t\t};\n\t\n\t\tthis.dispose = function() {\n\t\n\t\t\tthis.disconnect();\n\t\n\t\t};\n\t\n\t\tthis.connect();\n\t\n\t};\n\t\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * @author qiao / https://github.com/qiao\n\t * @author mrdoob / http://mrdoob.com\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author erich666 / http://erichaines.com\n\t */\n\t\n\t// This set of controls performs orbiting, dollying (zooming), and panning.\n\t// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n\t//\n\t//    Orbit - left mouse / touch: one finger move\n\t//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n\t//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\t\n\tTHREE.OrbitControls = function ( object, domElement ) {\n\t\n\t\tthis.object = object;\n\t\n\t\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\t\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\t\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new THREE.Vector3();\n\t\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\t\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\t\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = 0; // radians\n\t\tthis.maxPolarAngle = Math.PI; // radians\n\t\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\t\tthis.minAzimuthAngle = - Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\t\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.25;\n\t\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = true;\n\t\tthis.zoomSpeed = 1.0;\n\t\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 1.0;\n\t\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = true;\n\t\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\t\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\t\n\t\t// Set to false to disable use of the keys\n\t\tthis.enableKeys = true;\n\t\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\t\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\t\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\t\n\t\t//\n\t\t// public methods\n\t\t//\n\t\n\t\tthis.getPolarAngle = function () {\n\t\n\t\t\treturn spherical.phi;\n\t\n\t\t};\n\t\n\t\tthis.getAzimuthalAngle = function () {\n\t\n\t\t\treturn spherical.theta;\n\t\n\t\t};\n\t\n\t\tthis.reset = function () {\n\t\n\t\t\tscope.target.copy( scope.target0 );\n\t\t\tscope.object.position.copy( scope.position0 );\n\t\t\tscope.object.zoom = scope.zoom0;\n\t\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent( changeEvent );\n\t\n\t\t\tscope.update();\n\t\n\t\t\tstate = STATE.NONE;\n\t\n\t\t};\n\t\n\t\t// this method is exposed, but perhaps it would be better if we can make it private...\n\t\tthis.update = function() {\n\t\n\t\t\tvar offset = new THREE.Vector3();\n\t\n\t\t\t// so camera.up is the orbit axis\n\t\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\t\tvar quatInverse = quat.clone().inverse();\n\t\n\t\t\tvar lastPosition = new THREE.Vector3();\n\t\t\tvar lastQuaternion = new THREE.Quaternion();\n\t\n\t\t\treturn function update () {\n\t\n\t\t\t\tvar position = scope.object.position;\n\t\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion( quat );\n\t\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3( offset );\n\t\n\t\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\t\n\t\t\t\t\trotateLeft( getAutoRotationAngle() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\t\n\t\t\t\t// restrict theta to be between desired limits\n\t\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\t\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\t\n\t\t\t\tspherical.makeSafe();\n\t\n\t\n\t\t\t\tspherical.radius *= scale;\n\t\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\t\n\t\t\t\t// move target to panned location\n\t\t\t\tscope.target.add( panOffset );\n\t\n\t\t\t\toffset.setFromSpherical( spherical );\n\t\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion( quatInverse );\n\t\n\t\t\t\tposition.copy( scope.target ).add( offset );\n\t\n\t\t\t\tscope.object.lookAt( scope.target );\n\t\n\t\t\t\tif ( scope.enableDamping === true ) {\n\t\n\t\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tscale = 1;\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\t\n\t\t\t\t// update condition is:\n\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\t\n\t\t\t\tif ( zoomChanged ||\n\t\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\t\n\t\t\t\t\tscope.dispatchEvent( changeEvent );\n\t\n\t\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\t\tzoomChanged = false;\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn false;\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\tthis.dispose = function() {\n\t\n\t\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\t\n\t\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\t\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\t\n\t\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\t\n\t\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\t\n\t\t};\n\t\n\t\t//\n\t\t// internals\n\t\t//\n\t\n\t\tvar scope = this;\n\t\n\t\tvar changeEvent = { type: 'change' };\n\t\tvar startEvent = { type: 'start' };\n\t\tvar endEvent = { type: 'end' };\n\t\n\t\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\t\n\t\tvar state = STATE.NONE;\n\t\n\t\tvar EPS = 0.000001;\n\t\n\t\t// current position in spherical coordinates\n\t\tvar spherical = new THREE.Spherical();\n\t\tvar sphericalDelta = new THREE.Spherical();\n\t\n\t\tvar scale = 1;\n\t\tvar panOffset = new THREE.Vector3();\n\t\tvar zoomChanged = false;\n\t\n\t\tvar rotateStart = new THREE.Vector2();\n\t\tvar rotateEnd = new THREE.Vector2();\n\t\tvar rotateDelta = new THREE.Vector2();\n\t\n\t\tvar panStart = new THREE.Vector2();\n\t\tvar panEnd = new THREE.Vector2();\n\t\tvar panDelta = new THREE.Vector2();\n\t\n\t\tvar dollyStart = new THREE.Vector2();\n\t\tvar dollyEnd = new THREE.Vector2();\n\t\tvar dollyDelta = new THREE.Vector2();\n\t\n\t\tfunction getAutoRotationAngle() {\n\t\n\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\t\n\t\t}\n\t\n\t\tfunction getZoomScale() {\n\t\n\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\t\n\t\t}\n\t\n\t\tfunction rotateLeft( angle ) {\n\t\n\t\t\tsphericalDelta.theta -= angle;\n\t\n\t\t}\n\t\n\t\tfunction rotateUp( angle ) {\n\t\n\t\t\tsphericalDelta.phi -= angle;\n\t\n\t\t}\n\t\n\t\tvar panLeft = function() {\n\t\n\t\t\tvar v = new THREE.Vector3();\n\t\n\t\t\treturn function panLeft( distance, objectMatrix ) {\n\t\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar( - distance );\n\t\n\t\t\t\tpanOffset.add( v );\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\tvar panUp = function() {\n\t\n\t\t\tvar v = new THREE.Vector3();\n\t\n\t\t\treturn function panUp( distance, objectMatrix ) {\n\t\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\n\t\t\t\tv.multiplyScalar( distance );\n\t\n\t\t\t\tpanOffset.add( v );\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tvar pan = function() {\n\t\n\t\t\tvar offset = new THREE.Vector3();\n\t\n\t\t\treturn function pan ( deltaX, deltaY ) {\n\t\n\t\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\t\n\t\t\t\t\t// perspective\n\t\t\t\t\tvar position = scope.object.position;\n\t\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\t\tvar targetDistance = offset.length();\n\t\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\t\n\t\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\t\n\t\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\t\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\t\tscope.enablePan = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\tfunction dollyIn( dollyScale ) {\n\t\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\t\n\t\t\t\tscale /= dollyScale;\n\t\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\t\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction dollyOut( dollyScale ) {\n\t\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\t\n\t\t\t\tscale *= dollyScale;\n\t\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\t\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\t\n\t\tfunction handleMouseDownRotate( event ) {\n\t\n\t\t\t//console.log( 'handleMouseDownRotate' );\n\t\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\t\n\t\t}\n\t\n\t\tfunction handleMouseDownDolly( event ) {\n\t\n\t\t\t//console.log( 'handleMouseDownDolly' );\n\t\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\t\n\t\t}\n\t\n\t\tfunction handleMouseDownPan( event ) {\n\t\n\t\t\t//console.log( 'handleMouseDownPan' );\n\t\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\t\n\t\t}\n\t\n\t\tfunction handleMouseMoveRotate( event ) {\n\t\n\t\t\t//console.log( 'handleMouseMoveRotate' );\n\t\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\t\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\t\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\t\n\t\t\trotateStart.copy( rotateEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleMouseMoveDolly( event ) {\n\t\n\t\t\t//console.log( 'handleMouseMoveDolly' );\n\t\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\t\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\t\n\t\t\tif ( dollyDelta.y > 0 ) {\n\t\n\t\t\t\tdollyIn( getZoomScale() );\n\t\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\t\n\t\t\t\tdollyOut( getZoomScale() );\n\t\n\t\t\t}\n\t\n\t\t\tdollyStart.copy( dollyEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleMouseMovePan( event ) {\n\t\n\t\t\t//console.log( 'handleMouseMovePan' );\n\t\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\t\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\t\n\t\t\tpan( panDelta.x, panDelta.y );\n\t\n\t\t\tpanStart.copy( panEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleMouseUp( event ) {\n\t\n\t\t\t//console.log( 'handleMouseUp' );\n\t\n\t\t}\n\t\n\t\tfunction handleMouseWheel( event ) {\n\t\n\t\t\t//console.log( 'handleMouseWheel' );\n\t\n\t\t\tif ( event.deltaY < 0 ) {\n\t\n\t\t\t\tdollyOut( getZoomScale() );\n\t\n\t\t\t} else if ( event.deltaY > 0 ) {\n\t\n\t\t\t\tdollyIn( getZoomScale() );\n\t\n\t\t\t}\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleKeyDown( event ) {\n\t\n\t\t\t//console.log( 'handleKeyDown' );\n\t\n\t\t\tswitch ( event.keyCode ) {\n\t\n\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction handleTouchStartRotate( event ) {\n\t\n\t\t\t//console.log( 'handleTouchStartRotate' );\n\t\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\n\t\t}\n\t\n\t\tfunction handleTouchStartDolly( event ) {\n\t\n\t\t\t//console.log( 'handleTouchStartDolly' );\n\t\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\t\n\t\t\tdollyStart.set( 0, distance );\n\t\n\t\t}\n\t\n\t\tfunction handleTouchStartPan( event ) {\n\t\n\t\t\t//console.log( 'handleTouchStartPan' );\n\t\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\n\t\t}\n\t\n\t\tfunction handleTouchMoveRotate( event ) {\n\t\n\t\t\t//console.log( 'handleTouchMoveRotate' );\n\t\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\t\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( -2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\t\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( -2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\t\n\t\t\trotateStart.copy( rotateEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleTouchMoveDolly( event ) {\n\t\n\t\t\t//console.log( 'handleTouchMoveDolly' );\n\t\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\t\n\t\t\tdollyEnd.set( 0, distance );\n\t\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\t\n\t\t\tif ( dollyDelta.y > 0 ) {\n\t\n\t\t\t\tdollyOut( getZoomScale() );\n\t\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\t\n\t\t\t\tdollyIn( getZoomScale() );\n\t\n\t\t\t}\n\t\n\t\t\tdollyStart.copy( dollyEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleTouchMovePan( event ) {\n\t\n\t\t\t//console.log( 'handleTouchMovePan' );\n\t\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\t\n\t\t\tpan( panDelta.x, panDelta.y );\n\t\n\t\t\tpanStart.copy( panEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleTouchEnd( event ) {\n\t\n\t\t\t//console.log( 'handleTouchEnd' );\n\t\n\t\t}\n\t\n\t\t//\n\t\t// event handlers - FSM: listen for events and reset state\n\t\t//\n\t\n\t\tfunction onMouseDown( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tevent.preventDefault();\n\t\n\t\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\t\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\n\t\t\t\thandleMouseDownRotate( event );\n\t\n\t\t\t\tstate = STATE.ROTATE;\n\t\n\t\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\t\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\n\t\t\t\thandleMouseDownDolly( event );\n\t\n\t\t\t\tstate = STATE.DOLLY;\n\t\n\t\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\t\n\t\t\t\tif ( scope.enablePan === false ) return;\n\t\n\t\t\t\thandleMouseDownPan( event );\n\t\n\t\t\t\tstate = STATE.PAN;\n\t\n\t\t\t}\n\t\n\t\t\tif ( state !== STATE.NONE ) {\n\t\n\t\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\t\n\t\t\t\tscope.dispatchEvent( startEvent );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction onMouseMove( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tevent.preventDefault();\n\t\n\t\t\tif ( state === STATE.ROTATE ) {\n\t\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\n\t\t\t\thandleMouseMoveRotate( event );\n\t\n\t\t\t} else if ( state === STATE.DOLLY ) {\n\t\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\n\t\t\t\thandleMouseMoveDolly( event );\n\t\n\t\t\t} else if ( state === STATE.PAN ) {\n\t\n\t\t\t\tif ( scope.enablePan === false ) return;\n\t\n\t\t\t\thandleMouseMovePan( event );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction onMouseUp( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\thandleMouseUp( event );\n\t\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\t\n\t\t\tscope.dispatchEvent( endEvent );\n\t\n\t\t\tstate = STATE.NONE;\n\t\n\t\t}\n\t\n\t\tfunction onMouseWheel( event ) {\n\t\n\t\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\t\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\n\t\t\thandleMouseWheel( event );\n\t\n\t\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\n\t\t\tscope.dispatchEvent( endEvent );\n\t\n\t\t}\n\t\n\t\tfunction onKeyDown( event ) {\n\t\n\t\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\t\n\t\t\thandleKeyDown( event );\n\t\n\t\t}\n\t\n\t\tfunction onTouchStart( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tswitch ( event.touches.length ) {\n\t\n\t\t\t\tcase 1:\t// one-fingered touch: rotate\n\t\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\n\t\t\t\t\thandleTouchStartRotate( event );\n\t\n\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 2:\t// two-fingered touch: dolly\n\t\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\n\t\t\t\t\thandleTouchStartDolly( event );\n\t\n\t\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 3: // three-fingered touch: pan\n\t\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\n\t\t\t\t\thandleTouchStartPan( event );\n\t\n\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\n\t\t\t\t\tstate = STATE.NONE;\n\t\n\t\t\t}\n\t\n\t\t\tif ( state !== STATE.NONE ) {\n\t\n\t\t\t\tscope.dispatchEvent( startEvent );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction onTouchMove( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\n\t\t\tswitch ( event.touches.length ) {\n\t\n\t\t\t\tcase 1: // one-fingered touch: rotate\n\t\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\n\t\n\t\t\t\t\thandleTouchMoveRotate( event );\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 2: // two-fingered touch: dolly\n\t\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\n\t\n\t\t\t\t\thandleTouchMoveDolly( event );\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 3: // three-fingered touch: pan\n\t\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\n\t\n\t\t\t\t\thandleTouchMovePan( event );\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\n\t\t\t\t\tstate = STATE.NONE;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction onTouchEnd( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\thandleTouchEnd( event );\n\t\n\t\t\tscope.dispatchEvent( endEvent );\n\t\n\t\t\tstate = STATE.NONE;\n\t\n\t\t}\n\t\n\t\tfunction onContextMenu( event ) {\n\t\n\t\t\tevent.preventDefault();\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\t\n\t\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\t\n\t\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\t\n\t\twindow.addEventListener( 'keydown', onKeyDown, false );\n\t\n\t\t// force an update at start\n\t\n\t\tthis.update();\n\t\n\t};\n\t\n\tTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\tTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\t\n\tObject.defineProperties( THREE.OrbitControls.prototype, {\n\t\n\t\tcenter: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\t\treturn this.target;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t// backward compatibility\n\t\n\t\tnoZoom: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\treturn ! this.enableZoom;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\tthis.enableZoom = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tnoRotate: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\treturn ! this.enableRotate;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\tthis.enableRotate = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tnoPan: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\treturn ! this.enablePan;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\tthis.enablePan = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tnoKeys: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\treturn ! this.enableKeys;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\tthis.enableKeys = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tstaticMoving : {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\treturn ! this.enableDamping;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\tthis.enableDamping = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tdynamicDampingFactor : {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\treturn this.dampingFactor;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\tthis.dampingFactor = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t} );\n\t\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t( function() {\n\t\n\t\tvar _oldConsole = console.log;\n\t\n\t\tvar supportedTypes = [];\n\t\n\t\tfunction addSupportedType( type, format ) {\n\t\n\t\t\tsupportedTypes.push( {\n\t\t\t\ttype: type,\n\t\t\t\tformat: format\n\t\t\t} );\n\t\n\t\t}\n\t\n\t\taddSupportedType( THREE.Matrix4, function( v ) {\n\t\n\t\t\tvar e = v.elements;\n\t\t\t\t\t\n\t\t\treturn [\n\t\t\t\t[ e[ 0 ], e[ 4 ], e[ 8 ], e[ 12 ] ],\n\t\t\t\t[ e[ 1 ], e[ 5 ], e[ 9 ], e[ 13 ] ],\n\t\t\t\t[ e[ 2 ], e[ 6 ], e[ 10 ], e[ 14 ] ],\n\t\t\t\t[ e[ 3 ], e[ 7 ], e[ 11 ], e[ 15 ] ]\n\t\t\t];\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Matrix3, function( v ) {\n\t\n\t\t\tvar e = v.elements;\n\t\t\t\t\t\n\t\t\treturn [\n\t\t\t\t[ e[ 0 ], e[ 3 ], e[ 6 ] ],\n\t\t\t\t[ e[ 1 ], e[ 4 ], e[ 7 ] ],\n\t\t\t\t[ e[ 2 ], e[ 5 ], e[ 8 ] ]\n\t\t\t];\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Vector2, function( v ) {\n\t\n\t\t\treturn {\n\t\t\t\tVector2: { x: v.x, y: v.y }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Vector3, function( v ) {\n\t\n\t\t\treturn {\n\t\t\t\tVector3: { x: v.x, y: v.y, z: v.z }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Vector4, function( v ) {\n\t\n\t\t\treturn {\n\t\t\t\tVector4: { x: v.x, y: v.y, z: v.z, w: v.w }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Euler, function( v ) {\n\t\n\t\t\treturn {\n\t\t\t\tVector4: { x: v.x, y: v.y, z: v.z, order: v.order }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Ray, function( v ) {\n\t\n\t\t\treturn { \n\t\t\t\t'Ray origin': { x: v.origin.x, y: v.origin.y, z: v.origin.z },\n\t\t\t\t'Ray direction': { x: v.direction.x, y: v.direction.y, z: v.direction.z }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\tfunction stacktrace() { \n\t\t\tvar err = new Error();\n\t\t\treturn err.stack;\n\t\t}\n\t\n\t\tconsole.log = function() {\n\t\n\t\t\t//console.trace ();\n\t\n\t\t\tvar special = false;\n\t\n\t\t\t[].forEach.call( arguments, function( a ) { \n\t\t\t\tsupportedTypes.forEach( function( t ) {\n\t\t\t\t\tif( a instanceof t.type ) special = true;;\n\t\t\t\t} );\n\t\t\t} );\n\t\n\t\t\tif( special ) {\n\t\n\t\t\t\t[].forEach.call( arguments, function( a ) { \n\t\t\t\t\n\t\t\t\t\t_oldConsole.apply( console, [ a ] );\n\t\n\t\t\t\t\tsupportedTypes.forEach( function( t ) {\n\t\n\t\t\t\t\t\tif( a instanceof t.type ) {\n\t\n\t\t\t\t\t\t\tconsole.table( t.format( a ) );\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t} );\n\t\n\t\t\t\t} );\n\t\n\t\t\t} else {\n\t\n\t\t\t\t_oldConsole.apply( console, arguments );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t} )();\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.CSS3DObject = function ( element ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.element = element;\n\t\tthis.element.style.position = 'absolute';\n\t\n\t\tthis.addEventListener( 'removed', function ( event ) {\n\t\n\t\t\tif ( this.element.parentNode !== null ) {\n\t\n\t\t\t\tthis.element.parentNode.removeChild( this.element );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t};\n\t\n\tTHREE.CSS3DObject.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\n\t\n\tTHREE.CSS3DSprite = function ( element ) {\n\t\n\t\tTHREE.CSS3DObject.call( this, element );\n\t\n\t};\n\t\n\tTHREE.CSS3DSprite.prototype = Object.create( THREE.CSS3DObject.prototype );\n\tTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\n\t\n\t//\n\t\n\tTHREE.CSS3DRenderer = function () {\n\t\n\t\tconsole.log( 'THREE.CSS3DRenderer', THREE.REVISION );\n\t\n\t\tvar _width, _height;\n\t\tvar _widthHalf, _heightHalf;\n\t\n\t\tvar matrix = new THREE.Matrix4();\n\t\n\t\tvar cache = {\n\t\t\tcamera: { fov: 0, style: '' },\n\t\t\tobjects: {}\n\t\t};\n\t\n\t\tvar domElement = document.createElement( 'div' );\n\t\tdomElement.style.overflow = 'hidden';\n\t\n\t\tdomElement.style.WebkitTransformStyle = 'preserve-3d';\n\t\tdomElement.style.MozTransformStyle = 'preserve-3d';\n\t\tdomElement.style.oTransformStyle = 'preserve-3d';\n\t\tdomElement.style.transformStyle = 'preserve-3d';\n\t\n\t\tthis.domElement = domElement;\n\t\n\t\tvar cameraElement = document.createElement( 'div' );\n\t\n\t\tcameraElement.style.WebkitTransformStyle = 'preserve-3d';\n\t\tcameraElement.style.MozTransformStyle = 'preserve-3d';\n\t\tcameraElement.style.oTransformStyle = 'preserve-3d';\n\t\tcameraElement.style.transformStyle = 'preserve-3d';\n\t\n\t\tdomElement.appendChild( cameraElement );\n\t\n\t\tthis.setClearColor = function () {};\n\t\n\t\tthis.getSize = function() {\n\t\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\t\n\t\t};\n\t\n\t\tthis.setSize = function ( width, height ) {\n\t\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\n\t\t\t_widthHalf = _width / 2;\n\t\t\t_heightHalf = _height / 2;\n\t\n\t\t\tdomElement.style.width = width + 'px';\n\t\t\tdomElement.style.height = height + 'px';\n\t\n\t\t\tcameraElement.style.width = width + 'px';\n\t\t\tcameraElement.style.height = height + 'px';\n\t\n\t\t};\n\t\n\t\tvar epsilon = function ( value ) {\n\t\n\t\t\treturn Math.abs( value ) < 0.000001 ? 0 : value;\n\t\n\t\t};\n\t\n\t\tvar getCameraCSSMatrix = function ( matrix ) {\n\t\n\t\t\tvar elements = matrix.elements;\n\t\n\t\t\treturn 'matrix3d(' +\n\t\t\t\tepsilon( elements[ 0 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 1 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 2 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 3 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 4 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 5 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 6 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 7 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 8 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 9 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 10 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 11 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 12 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 13 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 14 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 15 ] ) +\n\t\t\t')';\n\t\n\t\t};\n\t\n\t\tvar getObjectCSSMatrix = function ( matrix ) {\n\t\n\t\t\tvar elements = matrix.elements;\n\t\n\t\t\treturn 'translate3d(-50%,-50%,0) matrix3d(' +\n\t\t\t\tepsilon( elements[ 0 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 1 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 2 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 3 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 4 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 5 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 6 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 7 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 8 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 9 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 10 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 11 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 12 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 13 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 14 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 15 ] ) +\n\t\t\t')';\n\t\n\t\t};\n\t\n\t\tvar renderObject = function ( object, camera ) {\n\t\n\t\t\tif ( object instanceof THREE.CSS3DObject ) {\n\t\n\t\t\t\tvar style;\n\t\n\t\t\t\tif ( object instanceof THREE.CSS3DSprite ) {\n\t\n\t\t\t\t\t// http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\n\t\n\t\t\t\t\tmatrix.copy( camera.matrixWorldInverse );\n\t\t\t\t\tmatrix.transpose();\n\t\t\t\t\tmatrix.copyPosition( object.matrixWorld );\n\t\t\t\t\tmatrix.scale( object.scale );\n\t\n\t\t\t\t\tmatrix.elements[ 3 ] = 0;\n\t\t\t\t\tmatrix.elements[ 7 ] = 0;\n\t\t\t\t\tmatrix.elements[ 11 ] = 0;\n\t\t\t\t\tmatrix.elements[ 15 ] = 1;\n\t\n\t\t\t\t\tstyle = getObjectCSSMatrix( matrix );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tstyle = getObjectCSSMatrix( object.matrixWorld );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar element = object.element;\n\t\t\t\tvar cachedStyle = cache.objects[ object.id ];\n\t\n\t\t\t\tif ( cachedStyle === undefined || cachedStyle !== style ) {\n\t\n\t\t\t\t\telement.style.WebkitTransform = style;\n\t\t\t\t\telement.style.MozTransform = style;\n\t\t\t\t\telement.style.oTransform = style;\n\t\t\t\t\telement.style.transform = style;\n\t\n\t\t\t\t\tcache.objects[ object.id ] = style;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( element.parentNode !== cameraElement ) {\n\t\n\t\t\t\t\tcameraElement.appendChild( element );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\n\t\n\t\t\t\trenderObject( object.children[ i ], camera );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.render = function ( scene, camera ) {\n\t\n\t\t\tvar fov = 0.5 / Math.tan( THREE.Math.degToRad( camera.getEffectiveFOV() * 0.5 ) ) * _height;\n\t\n\t\t\tif ( cache.camera.fov !== fov ) {\n\t\n\t\t\t\tdomElement.style.WebkitPerspective = fov + \"px\";\n\t\t\t\tdomElement.style.MozPerspective = fov + \"px\";\n\t\t\t\tdomElement.style.oPerspective = fov + \"px\";\n\t\t\t\tdomElement.style.perspective = fov + \"px\";\n\t\n\t\t\t\tcache.camera.fov = fov;\n\t\n\t\t\t}\n\t\n\t\t\tscene.updateMatrixWorld();\n\t\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\t\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\t\n\t\t\tvar style = \"translate3d(0,0,\" + fov + \"px)\" + getCameraCSSMatrix( camera.matrixWorldInverse ) +\n\t\t\t\t\" translate3d(\" + _widthHalf + \"px,\" + _heightHalf + \"px, 0)\";\n\t\n\t\t\tif ( cache.camera.style !== style ) {\n\t\n\t\t\t\tcameraElement.style.WebkitTransform = style;\n\t\t\t\tcameraElement.style.MozTransform = style;\n\t\t\t\tcameraElement.style.oTransform = style;\n\t\t\t\tcameraElement.style.transform = style;\n\t\n\t\t\t\tcache.camera.style = style;\n\t\n\t\t\t}\n\t\n\t\t\trenderObject( scene, camera );\n\t\n\t\t};\n\t\n\t};\n\t\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.SpriteCanvasMaterial = function ( parameters ) {\n\t\n\t\tTHREE.Material.call( this );\n\t\n\t\tthis.type = 'SpriteCanvasMaterial';\n\t\n\t\tthis.color = new THREE.Color( 0xffffff );\n\t\tthis.program = function ( context, color ) {};\n\t\n\t\tthis.setValues( parameters );\n\t\n\t};\n\t\n\tTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\t\n\tTHREE.SpriteCanvasMaterial.prototype.clone = function () {\n\t\n\t\tvar material = new THREE.SpriteCanvasMaterial();\n\t\n\t\tmaterial.copy( this );\n\t\tmaterial.color.copy( this.color );\n\t\tmaterial.program = this.program;\n\t\n\t\treturn material;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.CanvasRenderer = function ( parameters ) {\n\t\n\t\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\n\t\n\t\tparameters = parameters || {};\n\t\n\t\tvar _this = this,\n\t\t_renderData, _elements, _lights,\n\t\t_projector = new THREE.Projector(),\n\t\n\t\t_canvas = parameters.canvas !== undefined\n\t\t\t\t ? parameters.canvas\n\t\t\t\t : document.createElement( 'canvas' ),\n\t\n\t\t_canvasWidth = _canvas.width,\n\t\t_canvasHeight = _canvas.height,\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\n\t\n\t\t_viewportX = 0,\n\t\t_viewportY = 0,\n\t\t_viewportWidth = _canvasWidth,\n\t\t_viewportHeight = _canvasHeight,\n\t\n\t\t_pixelRatio = 1,\n\t\n\t\t_context = _canvas.getContext( '2d', {\n\t\t\talpha: parameters.alpha === true\n\t\t} ),\n\t\n\t\t_clearColor = new THREE.Color( 0x000000 ),\n\t\t_clearAlpha = parameters.alpha === true ? 0 : 1,\n\t\n\t\t_contextGlobalAlpha = 1,\n\t\t_contextGlobalCompositeOperation = 0,\n\t\t_contextStrokeStyle = null,\n\t\t_contextFillStyle = null,\n\t\t_contextLineWidth = null,\n\t\t_contextLineCap = null,\n\t\t_contextLineJoin = null,\n\t\t_contextLineDash = [],\n\t\n\t\t_camera,\n\t\n\t\t_v1, _v2, _v3, _v4,\n\t\t_v5 = new THREE.RenderableVertex(),\n\t\t_v6 = new THREE.RenderableVertex(),\n\t\n\t\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\n\t\t_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\n\t\n\t\t_color = new THREE.Color(),\n\t\t_color1 = new THREE.Color(),\n\t\t_color2 = new THREE.Color(),\n\t\t_color3 = new THREE.Color(),\n\t\t_color4 = new THREE.Color(),\n\t\n\t\t_diffuseColor = new THREE.Color(),\n\t\t_emissiveColor = new THREE.Color(),\n\t\n\t\t_lightColor = new THREE.Color(),\n\t\n\t\t_patterns = {},\n\t\n\t\t_image, _uvs,\n\t\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\n\t\n\t\t_clipBox = new THREE.Box2(),\n\t\t_clearBox = new THREE.Box2(),\n\t\t_elemBox = new THREE.Box2(),\n\t\n\t\t_ambientLight = new THREE.Color(),\n\t\t_directionalLights = new THREE.Color(),\n\t\t_pointLights = new THREE.Color(),\n\t\n\t\t_vector3 = new THREE.Vector3(), // Needed for PointLight\n\t\t_centroid = new THREE.Vector3(),\n\t\t_normal = new THREE.Vector3(),\n\t\t_normalViewMatrix = new THREE.Matrix3();\n\t\n\t\t/* TODO\n\t\t_canvas.mozImageSmoothingEnabled = false;\n\t\t_canvas.webkitImageSmoothingEnabled = false;\n\t\t_canvas.msImageSmoothingEnabled = false;\n\t\t_canvas.imageSmoothingEnabled = false;\n\t\t*/\n\t\n\t\t// dash+gap fallbacks for Firefox and everything else\n\t\n\t\tif ( _context.setLineDash === undefined ) {\n\t\n\t\t\t_context.setLineDash = function () {};\n\t\n\t\t}\n\t\n\t\tthis.domElement = _canvas;\n\t\n\t\tthis.autoClear = true;\n\t\tthis.sortObjects = true;\n\t\tthis.sortElements = true;\n\t\n\t\tthis.info = {\n\t\n\t\t\trender: {\n\t\n\t\t\t\tvertices: 0,\n\t\t\t\tfaces: 0\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// WebGLRenderer compatibility\n\t\n\t\tthis.supportsVertexTextures = function () {};\n\t\tthis.setFaceCulling = function () {};\n\t\n\t\t// API\n\t\n\t\tthis.getContext = function () {\n\t\n\t\t\treturn _context;\n\t\n\t\t};\n\t\n\t\tthis.getContextAttributes = function () {\n\t\n\t\t\treturn _context.getContextAttributes();\n\t\n\t\t};\n\t\n\t\tthis.getPixelRatio = function () {\n\t\n\t\t\treturn _pixelRatio;\n\t\n\t\t};\n\t\n\t\tthis.setPixelRatio = function ( value ) {\n\t\n\t\t\tif ( value !== undefined ) _pixelRatio = value;\n\t\n\t\t};\n\t\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\t\n\t\t\t_canvasWidth = width * _pixelRatio;\n\t\t\t_canvasHeight = height * _pixelRatio;\n\t\n\t\t\t_canvas.width = _canvasWidth;\n\t\t\t_canvas.height = _canvasHeight;\n\t\n\t\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\n\t\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\n\t\n\t\t\tif ( updateStyle !== false ) {\n\t\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\n\t\t\t}\n\t\n\t\t\t_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\t\n\t\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\t\n\t\t\t_contextGlobalAlpha = 1;\n\t\t\t_contextGlobalCompositeOperation = 0;\n\t\t\t_contextStrokeStyle = null;\n\t\t\t_contextFillStyle = null;\n\t\t\t_contextLineWidth = null;\n\t\t\t_contextLineCap = null;\n\t\t\t_contextLineJoin = null;\n\t\n\t\t\tthis.setViewport( 0, 0, width, height );\n\t\n\t\t};\n\t\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\t\n\t\t\t_viewportX = x * _pixelRatio;\n\t\t\t_viewportY = y * _pixelRatio;\n\t\n\t\t\t_viewportWidth = width * _pixelRatio;\n\t\t\t_viewportHeight = height * _pixelRatio;\n\t\n\t\t};\n\t\n\t\tthis.setScissor = function () {};\n\t\tthis.setScissorTest = function () {};\n\t\n\t\tthis.setClearColor = function ( color, alpha ) {\n\t\n\t\t\t_clearColor.set( color );\n\t\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\t\n\t\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\t\n\t\t};\n\t\n\t\tthis.setClearColorHex = function ( hex, alpha ) {\n\t\n\t\t\tconsole.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n\t\t\tthis.setClearColor( hex, alpha );\n\t\n\t\t};\n\t\n\t\tthis.getClearColor = function () {\n\t\n\t\t\treturn _clearColor;\n\t\n\t\t};\n\t\n\t\tthis.getClearAlpha = function () {\n\t\n\t\t\treturn _clearAlpha;\n\t\n\t\t};\n\t\n\t\tthis.getMaxAnisotropy = function () {\n\t\n\t\t\treturn 0;\n\t\n\t\t};\n\t\n\t\tthis.clear = function () {\n\t\n\t\t\tif ( _clearBox.isEmpty() === false ) {\n\t\n\t\t\t\t_clearBox.intersect( _clipBox );\n\t\t\t\t_clearBox.expandByScalar( 2 );\n\t\n\t\t\t\t_clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t\t\t\t_clearBox.min.y =  - _clearBox.min.y + _canvasHeightHalf;\t\t// higher y value !\n\t\t\t\t_clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t\t\t\t_clearBox.max.y =  - _clearBox.max.y + _canvasHeightHalf;\t\t// lower y value !\n\t\n\t\t\t\tif ( _clearAlpha < 1 ) {\n\t\n\t\t\t\t\t_context.clearRect(\n\t\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t\t);\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( _clearAlpha > 0 ) {\n\t\n\t\t\t\t\tsetBlending( THREE.NormalBlending );\n\t\t\t\t\tsetOpacity( 1 );\n\t\n\t\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\n\t\n\t\t\t\t\t_context.fillRect(\n\t\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t\t);\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_clearBox.makeEmpty();\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// compatibility\n\t\n\t\tthis.clearColor = function () {};\n\t\tthis.clearDepth = function () {};\n\t\tthis.clearStencil = function () {};\n\t\n\t\tthis.render = function ( scene, camera ) {\n\t\n\t\t\tif ( camera instanceof THREE.Camera === false ) {\n\t\n\t\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.autoClear === true ) this.clear();\n\t\n\t\t\t_this.info.render.vertices = 0;\n\t\t\t_this.info.render.faces = 0;\n\t\n\t\t\t_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );\n\t\t\t_context.translate( _canvasWidthHalf, _canvasHeightHalf );\n\t\n\t\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t\t_elements = _renderData.elements;\n\t\t\t_lights = _renderData.lights;\n\t\t\t_camera = camera;\n\t\n\t\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\t\n\t\t\t/* DEBUG\n\t\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n\t\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n\t\t\t*/\n\t\n\t\t\tcalculateLights();\n\t\n\t\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\n\t\n\t\t\t\tvar element = _elements[ e ];\n\t\n\t\t\t\tvar material = element.material;\n\t\n\t\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\t\n\t\t\t\t_elemBox.makeEmpty();\n\t\n\t\t\t\tif ( element instanceof THREE.RenderableSprite ) {\n\t\n\t\t\t\t\t_v1 = element;\n\t\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\n\t\n\t\t\t\t\trenderSprite( _v1, element, material );\n\t\n\t\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\n\t\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\t\n\t\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\n\t\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t\t_v2.positionScreen\n\t\t\t\t\t] );\n\t\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\t\n\t\t\t\t\t\trenderLine( _v1, _v2, element, material );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\n\t\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\t\n\t\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\t\n\t\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\n\t\n\t\t\t\t\tif ( material.overdraw > 0 ) {\n\t\n\t\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\n\t\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\n\t\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t\t_v3.positionScreen\n\t\t\t\t\t] );\n\t\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\t\n\t\t\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t/* DEBUG\n\t\t\t\tsetLineWidth( 1 );\n\t\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n\t\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n\t\t\t\t*/\n\t\n\t\t\t\t_clearBox.union( _elemBox );\n\t\n\t\t\t}\n\t\n\t\t\t/* DEBUG\n\t\t\tsetLineWidth( 1 );\n\t\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n\t\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n\t\t\t*/\n\t\n\t\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\n\t\n\t\t};\n\t\n\t\t//\n\t\n\t\tfunction calculateLights() {\n\t\n\t\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t\t_pointLights.setRGB( 0, 0, 0 );\n\t\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\t\n\t\t\t\tvar light = _lights[ l ];\n\t\t\t\tvar lightColor = light.color;\n\t\n\t\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\t\n\t\t\t\t\t_ambientLight.add( lightColor );\n\t\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\t\n\t\t\t\t\t// for sprites\n\t\n\t\t\t\t\t_directionalLights.add( lightColor );\n\t\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\t\n\t\t\t\t\t// for sprites\n\t\n\t\t\t\t\t_pointLights.add( lightColor );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction calculateLight( position, normal, color ) {\n\t\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\t\n\t\t\t\tvar light = _lights[ l ];\n\t\n\t\t\t\t_lightColor.copy( light.color );\n\t\n\t\t\t\tif ( light instanceof THREE.DirectionalLight ) {\n\t\n\t\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\t\n\t\t\t\t\tvar amount = normal.dot( lightPosition );\n\t\n\t\t\t\t\tif ( amount <= 0 ) continue;\n\t\n\t\t\t\t\tamount *= light.intensity;\n\t\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\t\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\t\n\t\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\t\n\t\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\t\n\t\t\t\t\tif ( amount <= 0 ) continue;\n\t\n\t\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\t\n\t\t\t\t\tif ( amount == 0 ) continue;\n\t\n\t\t\t\t\tamount *= light.intensity;\n\t\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction renderSprite( v1, element, material ) {\n\t\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\t\n\t\t\tvar scaleX = element.scale.x * _canvasWidthHalf;\n\t\t\tvar scaleY = element.scale.y * _canvasHeightHalf;\n\t\n\t\t\tvar dist = 0.5 * Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite\n\t\t\t_elemBox.min.set( v1.x - dist, v1.y - dist );\n\t\t\t_elemBox.max.set( v1.x + dist, v1.y + dist );\n\t\n\t\t\tif ( material instanceof THREE.SpriteMaterial ) {\n\t\n\t\t\t\tvar texture = material.map;\n\t\n\t\t\t\tif ( texture !== null ) {\n\t\n\t\t\t\t\tvar pattern = _patterns[ texture.id ];\n\t\n\t\t\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\t\n\t\t\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t\t\t_patterns[ texture.id ] = pattern;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( pattern.canvas !== undefined ) {\n\t\n\t\t\t\t\t\tsetFillStyle( pattern.canvas );\n\t\n\t\t\t\t\t\tvar bitmap = texture.image;\n\t\n\t\t\t\t\t\tvar ox = bitmap.width * texture.offset.x;\n\t\t\t\t\t\tvar oy = bitmap.height * texture.offset.y;\n\t\n\t\t\t\t\t\tvar sx = bitmap.width * texture.repeat.x;\n\t\t\t\t\t\tvar sy = bitmap.height * texture.repeat.y;\n\t\n\t\t\t\t\t\tvar cx = scaleX / sx;\n\t\t\t\t\t\tvar cy = scaleY / sy;\n\t\n\t\t\t\t\t\t_context.save();\n\t\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t\t_context.translate( - scaleX / 2, - scaleY / 2 );\n\t\t\t\t\t\t_context.scale( cx, cy );\n\t\t\t\t\t\t_context.translate( - ox, - oy );\n\t\t\t\t\t\t_context.fillRect( ox, oy, sx, sy );\n\t\t\t\t\t\t_context.restore();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// no texture\n\t\n\t\t\t\t\tsetFillStyle( material.color.getStyle() );\n\t\n\t\t\t\t\t_context.save();\n\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t_context.scale( scaleX, - scaleY );\n\t\t\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t\t\t_context.restore();\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( material instanceof THREE.SpriteCanvasMaterial ) {\n\t\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\t\tsetFillStyle( material.color.getStyle() );\n\t\n\t\t\t\t_context.save();\n\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t_context.scale( scaleX, scaleY );\n\t\n\t\t\t\tmaterial.program( _context );\n\t\n\t\t\t\t_context.restore();\n\t\n\t\t\t}\n\t\n\t\t\t/* DEBUG\n\t\t\tsetStrokeStyle( 'rgb(255,255,0)' );\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( v1.x - 10, v1.y );\n\t\t\t_context.lineTo( v1.x + 10, v1.y );\n\t\t\t_context.moveTo( v1.x, v1.y - 10 );\n\t\t\t_context.lineTo( v1.x, v1.y + 10 );\n\t\t\t_context.stroke();\n\t\t\t*/\n\t\n\t\t}\n\t\n\t\tfunction renderLine( v1, v2, element, material ) {\n\t\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\t\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\n\t\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\n\t\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\t\n\t\t\t\tsetLineWidth( material.linewidth );\n\t\t\t\tsetLineCap( material.linecap );\n\t\t\t\tsetLineJoin( material.linejoin );\n\t\n\t\t\t\tif ( material.vertexColors !== THREE.VertexColors ) {\n\t\n\t\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar colorStyle1 = element.vertexColors[ 0 ].getStyle();\n\t\t\t\t\tvar colorStyle2 = element.vertexColors[ 1 ].getStyle();\n\t\n\t\t\t\t\tif ( colorStyle1 === colorStyle2 ) {\n\t\n\t\t\t\t\t\tsetStrokeStyle( colorStyle1 );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\ttry {\n\t\n\t\t\t\t\t\t\tvar grad = _context.createLinearGradient(\n\t\t\t\t\t\t\t\tv1.positionScreen.x,\n\t\t\t\t\t\t\t\tv1.positionScreen.y,\n\t\t\t\t\t\t\t\tv2.positionScreen.x,\n\t\t\t\t\t\t\t\tv2.positionScreen.y\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tgrad.addColorStop( 0, colorStyle1 );\n\t\t\t\t\t\t\tgrad.addColorStop( 1, colorStyle2 );\n\t\n\t\t\t\t\t\t} catch ( exception ) {\n\t\n\t\t\t\t\t\t\tgrad = colorStyle1;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tsetStrokeStyle( grad );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_context.stroke();\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\t\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\t\n\t\t\t\tsetLineWidth( material.linewidth );\n\t\t\t\tsetLineCap( material.linecap );\n\t\t\t\tsetLineJoin( material.linejoin );\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\t\tsetLineDash( [ material.dashSize, material.gapSize ] );\n\t\n\t\t\t\t_context.stroke();\n\t\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\t\n\t\t\t\tsetLineDash( [] );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\n\t\n\t\t\t_this.info.render.vertices += 3;\n\t\t\t_this.info.render.faces ++;\n\t\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\t\n\t\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\n\t\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\n\t\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\n\t\n\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\n\t\n\t\t\tif ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {\n\t\n\t\t\t\t_diffuseColor.copy( material.color );\n\t\t\t\t_emissiveColor.copy( material.emissive );\n\t\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\t\n\t\t\t\t\t_diffuseColor.multiply( element.color );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_color.copy( _ambientLight );\n\t\n\t\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\t\n\t\t\t\tcalculateLight( _centroid, element.normalModel, _color );\n\t\n\t\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\n\t\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\t\n\t\t\t} else if ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t\t    material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t\t    material instanceof THREE.MeshPhongMaterial ) {\n\t\n\t\t\t\tif ( material.map !== null ) {\n\t\n\t\t\t\t\tvar mapping = material.map.mapping;\n\t\n\t\t\t\t\tif ( mapping === THREE.UVMapping ) {\n\t\n\t\t\t\t\t\t_uvs = element.uvs;\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( material.envMap !== null ) {\n\t\n\t\t\t\t\tif ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {\n\t\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv1x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv1y = 0.5 * _normal.y + 0.5;\n\t\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv2x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv2y = 0.5 * _normal.y + 0.5;\n\t\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv3x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv3y = 0.5 * _normal.y + 0.5;\n\t\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t_color.copy( material.color );\n\t\n\t\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\t\n\t\t\t\t\t\t_color.multiply( element.color );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t\t : fillPath( _color );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\t\n\t\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\n\t\n\t\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\t\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\t\n\t\t\t} else {\n\t\n\t\t\t\t_color.setRGB( 1, 1, 1 );\n\t\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\n\t\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( x0, y0 );\n\t\t\t_context.lineTo( x1, y1 );\n\t\t\t_context.lineTo( x2, y2 );\n\t\t\t_context.closePath();\n\t\n\t\t}\n\t\n\t\tfunction strokePath( color, linewidth, linecap, linejoin ) {\n\t\n\t\t\tsetLineWidth( linewidth );\n\t\t\tsetLineCap( linecap );\n\t\t\tsetLineJoin( linejoin );\n\t\t\tsetStrokeStyle( color.getStyle() );\n\t\n\t\t\t_context.stroke();\n\t\n\t\t\t_elemBox.expandByScalar( linewidth * 2 );\n\t\n\t\t}\n\t\n\t\tfunction fillPath( color ) {\n\t\n\t\t\tsetFillStyle( color.getStyle() );\n\t\t\t_context.fill();\n\t\n\t\t}\n\t\n\t\tfunction textureToPattern( texture ) {\n\t\n\t\t\tif ( texture.version === 0 ||\n\t\t\t\ttexture instanceof THREE.CompressedTexture ||\n\t\t\t\ttexture instanceof THREE.DataTexture ) {\n\t\n\t\t\t\treturn {\n\t\t\t\t\tcanvas: undefined,\n\t\t\t\t\tversion: texture.version\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\tvar image = texture.image;\n\t\n\t\t\tif ( image.complete === false ) {\n\t\n\t\t\t\treturn {\n\t\t\t\t\tcanvas: undefined,\n\t\t\t\t\tversion: 0\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\tvar canvas = document.createElement( 'canvas' );\n\t\t\tcanvas.width = image.width;\n\t\t\tcanvas.height = image.height;\n\t\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.setTransform( 1, 0, 0, - 1, 0, image.height );\n\t\t\tcontext.drawImage( image, 0, 0 );\n\t\n\t\t\tvar repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t\t\tvar repeatY = texture.wrapT === THREE.RepeatWrapping;\n\t\n\t\t\tvar repeat = 'no-repeat';\n\t\n\t\t\tif ( repeatX === true && repeatY === true ) {\n\t\n\t\t\t\trepeat = 'repeat';\n\t\n\t\t\t} else if ( repeatX === true ) {\n\t\n\t\t\t\trepeat = 'repeat-x';\n\t\n\t\t\t} else if ( repeatY === true ) {\n\t\n\t\t\t\trepeat = 'repeat-y';\n\t\n\t\t\t}\n\t\n\t\t\tvar pattern = _context.createPattern( canvas, repeat );\n\t\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t\t\treturn {\n\t\t\t\tcanvas: pattern,\n\t\t\t\tversion: texture.version\n\t\t\t};\n\t\n\t\t}\n\t\n\t\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\n\t\n\t\t\tvar pattern = _patterns[ texture.id ];\n\t\n\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\t\n\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t_patterns[ texture.id ] = pattern;\n\t\n\t\t\t}\n\t\n\t\t\tif ( pattern.canvas !== undefined ) {\n\t\n\t\t\t\tsetFillStyle( pattern.canvas );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tsetFillStyle( 'rgba( 0, 0, 0, 1)' );\n\t\t\t\t_context.fill();\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\t\n\t\t\tvar a, b, c, d, e, f, det, idet,\n\t\t\toffsetX = texture.offset.x / texture.repeat.x,\n\t\t\toffsetY = texture.offset.y / texture.repeat.y,\n\t\t\twidth = texture.image.width * texture.repeat.x,\n\t\t\theight = texture.image.height * texture.repeat.y;\n\t\n\t\t\tu0 = ( u0 + offsetX ) * width;\n\t\t\tv0 = ( v0 + offsetY ) * height;\n\t\n\t\t\tu1 = ( u1 + offsetX ) * width;\n\t\t\tv1 = ( v1 + offsetY ) * height;\n\t\n\t\t\tu2 = ( u2 + offsetX ) * width;\n\t\t\tv2 = ( v2 + offsetY ) * height;\n\t\n\t\t\tx1 -= x0; y1 -= y0;\n\t\t\tx2 -= x0; y2 -= y0;\n\t\n\t\t\tu1 -= u0; v1 -= v0;\n\t\t\tu2 -= u0; v2 -= v0;\n\t\n\t\t\tdet = u1 * v2 - u2 * v1;\n\t\n\t\t\tif ( det === 0 ) return;\n\t\n\t\t\tidet = 1 / det;\n\t\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\t\n\t\t\te = x0 - a * u0 - c * v0;\n\t\t\tf = y0 - b * u0 - d * v0;\n\t\n\t\t\t_context.save();\n\t\t\t_context.transform( a, b, c, d, e, f );\n\t\t\t_context.fill();\n\t\t\t_context.restore();\n\t\n\t\t}\n\t\n\t\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\n\t\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\t\n\t\t\tvar a, b, c, d, e, f, det, idet,\n\t\t\twidth = image.width - 1,\n\t\t\theight = image.height - 1;\n\t\n\t\t\tu0 *= width; v0 *= height;\n\t\t\tu1 *= width; v1 *= height;\n\t\t\tu2 *= width; v2 *= height;\n\t\n\t\t\tx1 -= x0; y1 -= y0;\n\t\t\tx2 -= x0; y2 -= y0;\n\t\n\t\t\tu1 -= u0; v1 -= v0;\n\t\t\tu2 -= u0; v2 -= v0;\n\t\n\t\t\tdet = u1 * v2 - u2 * v1;\n\t\n\t\t\tidet = 1 / det;\n\t\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\t\n\t\t\te = x0 - a * u0 - c * v0;\n\t\t\tf = y0 - b * u0 - d * v0;\n\t\n\t\t\t_context.save();\n\t\t\t_context.transform( a, b, c, d, e, f );\n\t\t\t_context.clip();\n\t\t\t_context.drawImage( image, 0, 0 );\n\t\t\t_context.restore();\n\t\n\t\t}\n\t\n\t\t// Hide anti-alias gaps\n\t\n\t\tfunction expand( v1, v2, pixels ) {\n\t\n\t\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\n\t\t\tdet = x * x + y * y, idet;\n\t\n\t\t\tif ( det === 0 ) return;\n\t\n\t\t\tidet = pixels / Math.sqrt( det );\n\t\n\t\t\tx *= idet; y *= idet;\n\t\n\t\t\tv2.x += x; v2.y += y;\n\t\t\tv1.x -= x; v1.y -= y;\n\t\n\t\t}\n\t\n\t\t// Context cached methods.\n\t\n\t\tfunction setOpacity( value ) {\n\t\n\t\t\tif ( _contextGlobalAlpha !== value ) {\n\t\n\t\t\t\t_context.globalAlpha = value;\n\t\t\t\t_contextGlobalAlpha = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setBlending( value ) {\n\t\n\t\t\tif ( _contextGlobalCompositeOperation !== value ) {\n\t\n\t\t\t\tif ( value === THREE.NormalBlending ) {\n\t\n\t\t\t\t\t_context.globalCompositeOperation = 'source-over';\n\t\n\t\t\t\t} else if ( value === THREE.AdditiveBlending ) {\n\t\n\t\t\t\t\t_context.globalCompositeOperation = 'lighter';\n\t\n\t\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\n\t\n\t\t\t\t\t_context.globalCompositeOperation = 'darker';\n\t\n\t\t\t\t} else if ( value === THREE.MultiplyBlending ) {\n\t\n\t\t\t\t\t_context.globalCompositeOperation = 'multiply';\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_contextGlobalCompositeOperation = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setLineWidth( value ) {\n\t\n\t\t\tif ( _contextLineWidth !== value ) {\n\t\n\t\t\t\t_context.lineWidth = value;\n\t\t\t\t_contextLineWidth = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setLineCap( value ) {\n\t\n\t\t\t// \"butt\", \"round\", \"square\"\n\t\n\t\t\tif ( _contextLineCap !== value ) {\n\t\n\t\t\t\t_context.lineCap = value;\n\t\t\t\t_contextLineCap = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setLineJoin( value ) {\n\t\n\t\t\t// \"round\", \"bevel\", \"miter\"\n\t\n\t\t\tif ( _contextLineJoin !== value ) {\n\t\n\t\t\t\t_context.lineJoin = value;\n\t\t\t\t_contextLineJoin = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setStrokeStyle( value ) {\n\t\n\t\t\tif ( _contextStrokeStyle !== value ) {\n\t\n\t\t\t\t_context.strokeStyle = value;\n\t\t\t\t_contextStrokeStyle = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setFillStyle( value ) {\n\t\n\t\t\tif ( _contextFillStyle !== value ) {\n\t\n\t\t\t\t_context.fillStyle = value;\n\t\t\t\t_contextFillStyle = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setLineDash( value ) {\n\t\n\t\t\tif ( _contextLineDash.length !== value.length ) {\n\t\n\t\t\t\t_context.setLineDash( value );\n\t\t\t\t_contextLineDash = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author julianwa / https://github.com/julianwa\n\t */\n\t\n\tTHREE.RenderableObject = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.object = null;\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableFace = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.v1 = new THREE.RenderableVertex();\n\t\tthis.v2 = new THREE.RenderableVertex();\n\t\tthis.v3 = new THREE.RenderableVertex();\n\t\n\t\tthis.normalModel = new THREE.Vector3();\n\t\n\t\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\t\tthis.vertexNormalsLength = 0;\n\t\n\t\tthis.color = new THREE.Color();\n\t\tthis.material = null;\n\t\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\t\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableVertex = function () {\n\t\n\t\tthis.position = new THREE.Vector3();\n\t\tthis.positionWorld = new THREE.Vector3();\n\t\tthis.positionScreen = new THREE.Vector4();\n\t\n\t\tthis.visible = true;\n\t\n\t};\n\t\n\tTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\t\n\t\tthis.positionWorld.copy( vertex.positionWorld );\n\t\tthis.positionScreen.copy( vertex.positionScreen );\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableLine = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.v1 = new THREE.RenderableVertex();\n\t\tthis.v2 = new THREE.RenderableVertex();\n\t\n\t\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\t\tthis.material = null;\n\t\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableSprite = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.object = null;\n\t\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t\tthis.z = 0;\n\t\n\t\tthis.rotation = 0;\n\t\tthis.scale = new THREE.Vector2();\n\t\n\t\tthis.material = null;\n\t\tthis.renderOrder = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.Projector = function () {\n\t\n\t\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\t\n\t\t_renderData = { objects: [], lights: [], elements: [] },\n\t\n\t\t_vector3 = new THREE.Vector3(),\n\t\t_vector4 = new THREE.Vector4(),\n\t\n\t\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t\t_boundingBox = new THREE.Box3(),\n\t\t_points3 = new Array( 3 ),\n\t\t_points4 = new Array( 4 ),\n\t\n\t\t_viewMatrix = new THREE.Matrix4(),\n\t\t_viewProjectionMatrix = new THREE.Matrix4(),\n\t\n\t\t_modelMatrix,\n\t\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\t\n\t\t_normalMatrix = new THREE.Matrix3(),\n\t\n\t\t_frustum = new THREE.Frustum(),\n\t\n\t\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\t\n\t\t//\n\t\n\t\tthis.projectVector = function ( vector, camera ) {\n\t\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\t\n\t\t};\n\t\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\t\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\t\n\t\t};\n\t\n\t\tthis.pickingRay = function ( vector, camera ) {\n\t\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\t\n\t\t};\n\t\n\t\t//\n\t\n\t\tvar RenderList = function () {\n\t\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\t\n\t\t\tvar object = null;\n\t\t\tvar material = null;\n\t\n\t\t\tvar normalMatrix = new THREE.Matrix3();\n\t\n\t\t\tfunction setObject( value ) {\n\t\n\t\t\t\tobject = value;\n\t\t\t\tmaterial = object.material;\n\t\n\t\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\t\n\t\t\t\tnormals.length = 0;\n\t\t\t\tuvs.length = 0;\n\t\n\t\t\t}\n\t\n\t\t\tfunction projectVertex( vertex ) {\n\t\n\t\t\t\tvar position = vertex.position;\n\t\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\t\tvar positionScreen = vertex.positionScreen;\n\t\n\t\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\t\n\t\t\t\tvar invW = 1 / positionScreen.w;\n\t\n\t\t\t\tpositionScreen.x *= invW;\n\t\t\t\tpositionScreen.y *= invW;\n\t\t\t\tpositionScreen.z *= invW;\n\t\n\t\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushVertex( x, y, z ) {\n\t\n\t\t\t\t_vertex = getNextVertexInPool();\n\t\t\t\t_vertex.position.set( x, y, z );\n\t\n\t\t\t\tprojectVertex( _vertex );\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushNormal( x, y, z ) {\n\t\n\t\t\t\tnormals.push( x, y, z );\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushUv( x, y ) {\n\t\n\t\t\t\tuvs.push( x, y );\n\t\n\t\t\t}\n\t\n\t\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\t\n\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\t\n\t\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t\t_points3[ 2 ] = v3.positionScreen;\n\t\n\t\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\t\n\t\t\t}\n\t\n\t\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\t\n\t\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushLine( a, b ) {\n\t\n\t\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\t\tvar v2 = _vertexPool[ b ];\n\t\n\t\t\t\t_line = getNextLineInPool();\n\t\n\t\t\t\t_line.id = object.id;\n\t\t\t\t_line.v1.copy( v1 );\n\t\t\t\t_line.v2.copy( v2 );\n\t\t\t\t_line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;\n\t\t\t\t_line.renderOrder = object.renderOrder;\n\t\n\t\t\t\t_line.material = object.material;\n\t\n\t\t\t\t_renderData.elements.push( _line );\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushTriangle( a, b, c ) {\n\t\n\t\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\t\tvar v3 = _vertexPool[ c ];\n\t\n\t\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\t\n\t\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\t\n\t\t\t\t\t_face = getNextFaceInPool();\n\t\n\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\t\n\t\t\t\t\t// use first vertex normal as face normal\n\t\n\t\t\t\t\t_face.normalModel.fromArray( normals, a * 3 );\n\t\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\t\n\t\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t_face.vertexNormalsLength = 3;\n\t\n\t\t\t\t\t_face.material = object.material;\n\t\n\t\t\t\t\t_renderData.elements.push( _face );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\tsetObject: setObject,\n\t\t\t\tprojectVertex: projectVertex,\n\t\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\t\tpushVertex: pushVertex,\n\t\t\t\tpushNormal: pushNormal,\n\t\t\t\tpushUv: pushUv,\n\t\t\t\tpushLine: pushLine,\n\t\t\t\tpushTriangle: pushTriangle\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tvar renderList = new RenderList();\n\t\n\t\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\t\n\t\t\t_faceCount = 0;\n\t\t\t_lineCount = 0;\n\t\t\t_spriteCount = 0;\n\t\n\t\t\t_renderData.elements.length = 0;\n\t\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\t\n\t\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\n\t\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\t\n\t\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\t\n\t\t\t//\n\t\n\t\t\t_objectCount = 0;\n\t\n\t\t\t_renderData.objects.length = 0;\n\t\t\t_renderData.lights.length = 0;\n\t\n\t\t\tfunction addObject( object ) {\n\t\n\t\t\t\t_object = getNextObjectInPool();\n\t\t\t\t_object.id = object.id;\n\t\t\t\t_object.object = object;\n\t\n\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\n\t\t\t\t_object.z = _vector3.z;\n\t\t\t\t_object.renderOrder = object.renderOrder;\n\t\n\t\t\t\t_renderData.objects.push( _object );\n\t\n\t\t\t}\n\t\n\t\t\tscene.traverseVisible( function ( object ) {\n\t\n\t\t\t\tif ( object instanceof THREE.Light ) {\n\t\n\t\t\t\t\t_renderData.lights.push( object );\n\t\n\t\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line ) {\n\t\n\t\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\n\t\n\t\t\t\t\taddObject( object );\n\t\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\t\n\t\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\n\t\n\t\t\t\t\taddObject( object );\n\t\n\t\t\t\t}\n\t\n\t\t\t} );\n\t\n\t\t\tif ( sortObjects === true ) {\n\t\n\t\t\t\t_renderData.objects.sort( painterSort );\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tfor ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\n\t\n\t\t\t\tvar object = _renderData.objects[ o ].object;\n\t\t\t\tvar geometry = object.geometry;\n\t\n\t\t\t\trenderList.setObject( object );\n\t\n\t\t\t\t_modelMatrix = object.matrixWorld;\n\t\n\t\t\t\t_vertexCount = 0;\n\t\n\t\t\t\tif ( object instanceof THREE.Mesh ) {\n\t\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\t\tvar groups = geometry.groups;\n\t\n\t\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\t\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar normals = attributes.normal.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\t\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\t\n\t\t\t\t\t\t\tif ( groups.length > 0 ) {\n\t\n\t\t\t\t\t\t\t\tfor ( var o = 0; o < groups.length; o ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tvar group = groups[ o ];\n\t\n\t\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\n\t\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\t\n\t\t\t\t\t\tvar material = object.material;\n\t\n\t\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material : null;\n\t\n\t\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\t\n\t\t\t\t\t\t\tvar vertex = vertices[ v ];\n\t\n\t\t\t\t\t\t\t_vector3.copy( vertex );\n\t\n\t\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\t\n\t\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\t\n\t\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\t\n\t\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\t\n\t\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\t\n\t\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\t\t\tvar face = faces[ f ];\n\t\n\t\t\t\t\t\t\tmaterial = isFaceMaterial === true\n\t\t\t\t\t\t\t\t ? objectMaterials.materials[ face.materialIndex ]\n\t\t\t\t\t\t\t\t : object.material;\n\t\n\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\t\n\t\t\t\t\t\t\tvar side = material.side;\n\t\n\t\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\t\n\t\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\t\n\t\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\t\n\t\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\t\n\t\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face = getNextFaceInPool();\n\t\n\t\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t\t_face.v3.copy( v3 );\n\t\n\t\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\t\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\t\n\t\t\t\t\t\t\t\t_face.normalModel.negate();\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\t\n\t\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\t\n\t\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\t\n\t\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\t\n\t\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\t\n\t\t\t\t\t\t\t\t\tnormalModel.negate();\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\t\n\t\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\t\n\t\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\t\n\t\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t\t_face.material = material;\n\t\n\t\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\t\n\t\t\t\t\t\t\t_renderData.elements.push( _face );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( object instanceof THREE.Line ) {\n\t\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\t\n\t\t\t\t\t\tif ( attributes.position !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( geometry.index !== null ) {\n\t\n\t\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\t\n\t\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\t\n\t\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\t\n\t\t\t\t\t\tvar vertices = object.geometry.vertices;\n\t\n\t\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\t\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\t\n\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\t\n\t\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\t\n\t\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\t\n\t\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\t\n\t\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\t\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\t\n\t\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\t\n\t\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\t\n\t\t\t\t\t\t\t\t_line = getNextLineInPool();\n\t\n\t\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\t\n\t\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\t\n\t\t\t\t\t\t\t\t_line.material = object.material;\n\t\n\t\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\t\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\t\n\t\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\t\n\t\t\t\t\tvar invW = 1 / _vector4.w;\n\t\n\t\t\t\t\t_vector4.z *= invW;\n\t\n\t\t\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\t\n\t\t\t\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t\t\t\t_sprite.id = object.id;\n\t\t\t\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t\t\t\t_sprite.z = _vector4.z;\n\t\t\t\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t\t\t\t_sprite.object = object;\n\t\n\t\t\t\t\t\t_sprite.rotation = object.rotation;\n\t\n\t\t\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\t\n\t\t\t\t\t\t_sprite.material = object.material;\n\t\n\t\t\t\t\t\t_renderData.elements.push( _sprite );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( sortElements === true ) {\n\t\n\t\t\t\t_renderData.elements.sort( painterSort );\n\t\n\t\t\t}\n\t\n\t\t\treturn _renderData;\n\t\n\t\t};\n\t\n\t\t// Pools\n\t\n\t\tfunction getNextObjectInPool() {\n\t\n\t\t\tif ( _objectCount === _objectPoolLength ) {\n\t\n\t\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t\t_objectPool.push( object );\n\t\t\t\t_objectPoolLength ++;\n\t\t\t\t_objectCount ++;\n\t\t\t\treturn object;\n\t\n\t\t\t}\n\t\n\t\t\treturn _objectPool[ _objectCount ++ ];\n\t\n\t\t}\n\t\n\t\tfunction getNextVertexInPool() {\n\t\n\t\t\tif ( _vertexCount === _vertexPoolLength ) {\n\t\n\t\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t\t_vertexPool.push( vertex );\n\t\t\t\t_vertexPoolLength ++;\n\t\t\t\t_vertexCount ++;\n\t\t\t\treturn vertex;\n\t\n\t\t\t}\n\t\n\t\t\treturn _vertexPool[ _vertexCount ++ ];\n\t\n\t\t}\n\t\n\t\tfunction getNextFaceInPool() {\n\t\n\t\t\tif ( _faceCount === _facePoolLength ) {\n\t\n\t\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t\t_facePool.push( face );\n\t\t\t\t_facePoolLength ++;\n\t\t\t\t_faceCount ++;\n\t\t\t\treturn face;\n\t\n\t\t\t}\n\t\n\t\t\treturn _facePool[ _faceCount ++ ];\n\t\n\t\n\t\t}\n\t\n\t\tfunction getNextLineInPool() {\n\t\n\t\t\tif ( _lineCount === _linePoolLength ) {\n\t\n\t\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t\t_linePool.push( line );\n\t\t\t\t_linePoolLength ++;\n\t\t\t\t_lineCount ++;\n\t\t\t\treturn line;\n\t\n\t\t\t}\n\t\n\t\t\treturn _linePool[ _lineCount ++ ];\n\t\n\t\t}\n\t\n\t\tfunction getNextSpriteInPool() {\n\t\n\t\t\tif ( _spriteCount === _spritePoolLength ) {\n\t\n\t\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t\t_spritePool.push( sprite );\n\t\t\t\t_spritePoolLength ++;\n\t\t\t\t_spriteCount ++;\n\t\t\t\treturn sprite;\n\t\n\t\t\t}\n\t\n\t\t\treturn _spritePool[ _spriteCount ++ ];\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tfunction painterSort( a, b ) {\n\t\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\t\n\t\t\t\treturn a.renderOrder - b.renderOrder;\n\t\n\t\t\t} else if ( a.z !== b.z ) {\n\t\n\t\t\t\treturn b.z - a.z;\n\t\n\t\t\t} else if ( a.id !== b.id ) {\n\t\n\t\t\t\treturn a.id - b.id;\n\t\n\t\t\t} else {\n\t\n\t\t\t\treturn 0;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction clipLine( s1, s2 ) {\n\t\n\t\t\tvar alpha1 = 0, alpha2 = 1,\n\t\n\t\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t\t// Z = -1 and Z = +1, respectively.\n\t\t\tbc1near =  s1.z + s1.w,\n\t\t\tbc2near =  s2.z + s2.w,\n\t\t\tbc1far =  - s1.z + s1.w,\n\t\t\tbc2far =  - s2.z + s2.w;\n\t\n\t\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\t\n\t\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\t\treturn true;\n\t\n\t\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\t\n\t\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\t\treturn false;\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// The line segment spans at least one clip plane.\n\t\n\t\t\t\tif ( bc1near < 0 ) {\n\t\n\t\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\t\n\t\t\t\t} else if ( bc2near < 0 ) {\n\t\n\t\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( bc1far < 0 ) {\n\t\n\t\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\t\n\t\t\t\t} else if ( bc2far < 0 ) {\n\t\n\t\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( alpha2 < alpha1 ) {\n\t\n\t\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\t\treturn false;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * @author bchirls / http://bchirls.com/\n\t */\n\t\n\tTHREE.VRStereoEffect = function ( renderer, fullScreenElement, options ) {\n\t\n\t\t// internals\n\t\tvar self = this;\n\t\tvar width = 0, height = 0;\n\t\tvar hmdWidth, hmdHeight;\n\t\n\t\tvar hmdDevice;\n\t\tvar vrMode;\n\t    var inWebview = false;\n\t\tvar vrPreview = false;\n\t\tvar eyeOffsetLeft = new THREE.Vector3();\n\t\tvar eyeOffsetRight = new THREE.Vector3();\n\t\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar scale = new THREE.Vector3();\n\t\n\t\tvar cameraLeft = new THREE.PerspectiveCamera();\n\t\tvar cameraRight = new THREE.PerspectiveCamera();\n\t\tvar leftRenderRect = {\n\t\t\tx: 0, y: 0, width: 0, height: 0\n\t\t};\n\t\tvar rightRenderRect = {\n\t\t\tx: 0, y: 0, width: 0, height: 0\n\t\t};\n\t\n\t\tvar near = 2;\n\t\tvar far = 40000;\n\t\n\t\tvar requestFullscreen;\n\t\tvar fullScreenParam = {\n\t\t\tvrDisplay: null\n\t\t};\n\t\tvar fovScale;\n\t\n\t\tvar RADIANS = Math.PI / 180;\n\t\n\t\tvar poll = options && options.poll || 1000;\n\t\tvar pollTimeout;\n\t\n\t\tfunction perspectiveMatrixFromVRFieldOfView(fov, zNear, zFar) {\n\t\t\tvar outMat = new THREE.Matrix4(),\n\t\t\t\tout = outMat.elements,\n\t\t\t\tupTan = Math.tan(fov.upDegrees * RADIANS),\n\t\t\t\tdownTan = Math.tan(fov.downDegrees * RADIANS),\n\t\t\t\tleftTan = Math.tan(fov.leftDegrees * RADIANS),\n\t\t\t\trightTan = Math.tan(fov.rightDegrees * RADIANS),\n\t\n\t\t\t\txScale = 2 / (leftTan + rightTan),\n\t\t\t\tyScale = 2 / (upTan + downTan);\n\t\n\t\t\tout[0] = xScale;\n\t\t\tout[4] = 0;\n\t\t\tout[8] = -((leftTan - rightTan) * xScale * 0.5);\n\t\t\tout[12] = 0;\n\t\n\t\t\tout[1] = 0;\n\t\t\tout[5] = yScale;\n\t\t\tout[9] = ((upTan - downTan) * yScale * 0.5);\n\t\t\tout[13] = 0;\n\t\n\t\t\tout[2] = 0;\n\t\t\tout[6] = 0;\n\t\t\tout[10] = zFar / (zNear - zFar);\n\t\t\tout[14] = (zFar * zNear) / (zNear - zFar);\n\t\n\t\t\tout[3] = 0;\n\t\t\tout[7] = 0;\n\t\t\tout[11] = -1;\n\t\t\tout[15] = 0;\n\t\n\t\t\treturn outMat;\n\t\t}\n\t\n\t\tfunction resize() {\n\t\t\tvar w, h;\n\t\n\t\t\tif (hmdDevice && vrMode) {\n\t\t\t\tw = hmdWidth;// / Math.pow(window.devicePixelRatio || 1, 2);\n\t\t\t\th = hmdHeight;// / Math.pow(window.devicePixelRatio || 1, 2);\n\t\t\t} else {\n\t\t\t\tw = width || renderer.domElement.offsetWidth || window.innerWidth;\n\t\t\t\th = height || renderer.domElement.offsetHeight || window.innerHeight;\n\t\t\t}\n\t\n\t\t\trenderer.setSize(w, h);\n\t\t}\n\t\n\t\tfunction updateProjection() {\n\t\t\tvar fovLeft,\n\t\t\t\tfovRight,\n\t\n\t\t\t\tleftEyeParams,\n\t\t\t\trightEyeParams,\n\t\t\t\tleftEyeRect,\n\t\t\t\trightEyeRect,\n\t\n\t\t\t\tleftEyeViewport,\n\t\t\t\trightEyeViewport;\n\t\n\t\t\tif (!hmdDevice) {\n\t\t\t\tcameraLeft.fov = 80;\n\t\t\t\tcameraRight.fov = 80;\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// if (amount && hmdDevice.setFieldOfView) {\n\t\t\t// \tfovScale += amount;\n\t\t\t// \tfovScale = Math.max(0.1, fovScale);\n\t\n\t\t\t// \tfovLeft = hmdDevice.getRecommendedEyeFieldOfView('left');\n\t\n\t\t\t// \tfovLeft.upDegrees *= fovScale;\n\t\t\t// \tfovLeft.downDegrees *= fovScale;\n\t\t\t// \tfovLeft.leftDegrees *= fovScale;\n\t\t\t// \tfovLeft.rightDegrees *= fovScale;\n\t\n\t\t\t// \tfovRight = hmdDevice.getRecommendedEyeFieldOfView('right');\n\t\t\t// \tfovRight.upDegrees *= fovScale;\n\t\t\t// \tfovRight.downDegrees *= fovScale;\n\t\t\t// \tfovRight.leftDegrees *= fovScale;\n\t\t\t// \tfovRight.rightDegrees *= fovScale;\n\t\n\t\t\t// \thmdDevice.setFieldOfView(fovLeft, fovRight);\n\t\t\t// }\n\t\n\t\t\tif (hmdDevice.getEyeParameters) {\n\t\t\t\tleftEyeParams = hmdDevice.getEyeParameters('left');\n\t\t\t\trightEyeParams = hmdDevice.getEyeParameters('right');\n\t\t\t\tleftEyeRect = leftEyeParams.renderRect;\n\t\t\t\trightEyeRect = rightEyeParams.renderRect;\n\t\n\t\t\t\thmdWidth = rightEyeRect.x + rightEyeRect.width;\n\t\t\t\thmdHeight = Math.max(leftEyeRect.y + leftEyeRect.height, rightEyeRect.y + rightEyeRect.height);\n\t\n\t\t\t\tfovLeft = leftEyeParams.currentFieldOfView;\n\t\t\t\tfovRight = rightEyeParams.currentFieldOfView;\n\t\n\t\t\t\thmdDevice.setFieldOfView(fovLeft, fovRight, near, far);\n\t\n\t\t\t\teyeOffsetLeft.copy(leftEyeParams.eyeTranslation);\n\t\t\t\teyeOffsetRight.copy(rightEyeParams.eyeTranslation);\n\t\n\t\t\t\tleftRenderRect = leftEyeParams.renderRect;\n\t\t\t\trightRenderRect = rightEyeParams.renderRect;\n\t\t\t} else if (hmdDevice.getRecommendedEyeRenderRect) {\n\t\t\t\tleftEyeViewport = hmdDevice.getRecommendedEyeRenderRect('left');\n\t\t\t\trightEyeViewport = hmdDevice.getRecommendedEyeRenderRect('right');\n\t\n\t\t\t\thmdWidth = leftEyeViewport.width + rightEyeViewport.width;\n\t\t\t\thmdHeight = Math.max(leftEyeViewport.height, rightEyeViewport.height);\n\t\n\t\t\t\tif (hmdDevice.getCurrentEyeFieldOfView) {\n\t\t\t\t\tfovLeft = hmdDevice.getCurrentEyeFieldOfView('left');\n\t\t\t\t\tfovRight = hmdDevice.getCurrentEyeFieldOfView('right');\n\t\t\t\t} else {\n\t\t\t\t\tfovLeft = hmdDevice.getRecommendedEyeFieldOfView('left');\n\t\t\t\t\tfovRight = hmdDevice.getRecommendedEyeFieldOfView('right');\n\t\t\t\t}\n\t\n\t\t\t\teyeOffsetLeft.copy(hmdDevice.getEyeTranslation('left'));\n\t\t\t\teyeOffsetRight.copy(hmdDevice.getEyeTranslation('right'));\n\t\n\t\t\t\tleftRenderRect.x = leftEyeViewport.left;\n\t\t\t\tleftRenderRect.y = leftEyeViewport.top;\n\t\t\t\tleftRenderRect.width = leftEyeViewport.width;\n\t\t\t\tleftRenderRect.height = leftEyeViewport.height;\n\t\n\t\t\t\trightRenderRect.x = rightEyeViewport.left;\n\t\t\t\trightRenderRect.y = rightEyeViewport.top;\n\t\t\t\trightRenderRect.width = rightEyeViewport.width;\n\t\t\t\trightRenderRect.height = rightEyeViewport.height;\n\t\t\t}\n\t\n\t\t\tresize();\n\t\n\t\t\tcameraLeft.projectionMatrix = perspectiveMatrixFromVRFieldOfView(fovLeft, near, far);\n\t\t\tcameraRight.projectionMatrix = perspectiveMatrixFromVRFieldOfView(fovRight, near, far);\n\t\t}\n\t\n\t\tfunction gotVRDevices(devices) {\n\t\t\tvar i,\n\t\t\t\tdevice;\n\t\n\t\t\tfor (i = 0; i < devices.length; i++) {\n\t\t\t\tdevice = devices[i];\n\t\t\t\tif ( device instanceof HMDVRDevice ) {\n\t\n\t\t\t\t\tif ( hmdDevice && device.hardwareUnitId === hmdDevice.hardwareUnitId ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\n\t\t\t\t\thmdDevice = device;\n\t\t\t\t\tconsole.log('Using HMD Device:', hmdDevice.deviceName);\n\t\n\t\t\t\t\tif (hmdDevice.setTimewarp) {\n\t\t\t\t\t\t//hmdDevice.setTimewarp(false);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tupdateProjection();\n\t\n\t\t\t\t\tfullScreenParam.vrDisplay = hmdDevice;\n\t\n\t\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t\t} );\n\t\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (poll) {\n\t\t\t\tclearTimeout(pollTimeout);\n\t\t\t\tsetTimeout(self.scan, poll);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction onFullscreenChange() {\n\t\t\tif (!document.webkitFullscreenElement &&\n\t\t\t\t\t!document.mozFullScreenElement &&\n\t\t\t\t\t!document.msFullscreenElement) {\n\t\t\t\tvrMode = false;\n\t\t\t}\n\t\n\t\t\tupdateProjection();\n\t\n\t\t\tself.dispatchEvent( {\n\t\t\t\ttype: \"fullscreenchange\"\n\t\t\t} );\n\t\t}\n\t\n\t\t// API\n\t\n\t\tthis.separation = 0.01;\n\t\n\t\t// initialization\n\t\n\t\trenderer.autoClear = false;\n\t\n\t\tif (!fullScreenElement) {\n\t\t\tfullScreenElement = renderer.domElement;\n\t\t}\n\t\trequestFullscreen = fullScreenElement.webkitRequestFullscreen ||\n\t\t\tfullScreenElement.mozRequestFullScreen ||\n\t\t\tfullScreenElement.msRequestFullscreen;\n\t\tif (requestFullscreen) {\n\t\t\trequestFullscreen = requestFullscreen.bind(fullScreenElement, fullScreenParam);\n\t\t}\n\t\n\t\tdocument.addEventListener('fullscreenchange', onFullscreenChange, false);\n\t\tdocument.addEventListener('webkitfullscreenchange', onFullscreenChange, false);\n\t\tdocument.addEventListener('mozfullscreenchange', onFullscreenChange, false);\n\t\tdocument.addEventListener('MSFullscreenChange', onFullscreenChange, false);\n\t\n\t\t//todo: method for adjusting HMD FOV\n\t\n\t\tthis.scan = function () {\n\t\t\tif (navigator.getVRDevices) {\n\t\t\t\tnavigator.getVRDevices().then(gotVRDevices);\n\t\t\t} else if (navigator.mozGetVRDevices) {\n\t\t\t\tnavigator.mozGetVRDevices(gotVRDevices);\n\t\t\t}\n\t\t};\n\t\n\t\tthis.requestFullScreen = function () {\n\t\t\tvrMode = true;\n\t\t\trequestFullscreen();\n\t\t};\n\t\n\t\tthis.exit = function () {\n\t\t\tvrMode = false;\n\t\t\tvrPreview = false;\n\t\t};\n\t\n\t\tthis.setSize = function ( w, h ) {\n\t\t\twidth = w;\n\t\t\theight = h;\n\t\n\t\t\tresize();\n\t\t};\n\t\n\t\tthis.vrPreview = function (val) {\n\t\t\tif (val !== undefined) {\n\t\t\t\tvrPreview = !!val;\n\t\t\t}\n\t\t\treturn vrPreview;\n\t\t};\n\t\n\t\tthis.isFullscreen = function () {\n\t\t\treturn vrMode;\n\t\t};\n\t\n\t    // Add by kuilin.qkl\n\t    this.isWebview = function (bool) {\n\t        if (typeof bool === 'undefined') return inWebview;\n\t        inWebview = bool;\n\t        return inWebview;\n\t    };\n\t\n\t\tthis.hmd = function () {\n\t\t\treturn hmdDevice;\n\t\t};\n\t\n\t\tthis.render = function ( leftScene, rightScene, camera, renderTarget, forceClear ) {\n\t\t\tvar w, h;\n\t\n\t\t\tif ( rightScene && rightScene instanceof THREE.Scene ) {\n\t\t\t\t//rightScene.updateMatrixWorld();\n\t\t\t} else {\n\t\t\t\tif ( (!camera || camera instanceof THREE.WebGLRenderTarget) && rightScene instanceof THREE.Camera ) {\n\t\t\t\t\tforceClear = renderTarget;\n\t\t\t\t\trenderTarget = camera;\n\t\t\t\t\tcamera = rightScene;\n\t\t\t\t}\n\t\t\t\trightScene = leftScene;\n\t\t\t}\n\t\n\t\t\t//leftScene.updateMatrixWorld();\n\t\n\t\t\tif ( camera.parent === undefined ) {\n\t\t\t\tcamera.updateMatrixWorld();\n\t\t\t}\n\t\n\t\t\tw = width || renderer.domElement.width;\n\t\t\th = height || renderer.domElement.height;\n\t        // This code would not be annotated if mobile model.\n\t\t\tw /= window.devicePixelRatio || 1;\n\t\t\th /= window.devicePixelRatio || 1;\n\t\n\t\t\t/**\n\t\t\t *  TODO: make this work when CSS VR Rendering is fixed\n\t\t\t *  http://blog.bitops.com/blog/2014/08/20/updated-firefox-vr-builds/\n\t         *  Open by kuilin.qkl\n\t         */\n\t\t\tif (renderer instanceof THREE.CanvasRenderer || renderer instanceof THREE.CSS3DRenderer) {\n\t\t\t\trenderer.render( leftScene, camera );\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif (!vrMode && !vrPreview) {\n\t\t\t\trenderer.enableScissorTest( false );\n\t\t\t\trenderer.setViewport( 0, 0, w, h );\n\t\t\t\trenderer.render( leftScene, camera, renderTarget, true );\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tcamera.matrixWorld.decompose( position, quaternion, scale );\n\t\n\t\t\tif (!hmdDevice) {\n\t\t\t\t// left\n\t\t\t\tcameraLeft.fov = camera.fov;\n\t\t\t\tcameraLeft.aspect = 0.5 * camera.aspect;\n\t\t\t\tcameraLeft.near = camera.near;\n\t\t\t\tcameraLeft.far = camera.far;\n\t\t\t\tcameraLeft.updateProjectionMatrix();\n\t\n\t\t\t\t// right\n\t\n\t\t\t\tcameraRight.fov = camera.fov;\n\t\t\t\tcameraRight.aspect = 0.5 * camera.aspect;\n\t\t\t\tcameraRight.near = camera.near;\n\t\t\t\tcameraRight.far = camera.far;\n\t\t\t\tcameraRight.updateProjectionMatrix();\n\t\t\t}\n\t\n\t\t\tcameraLeft.position.copy( position );\n\t\t\tcameraLeft.quaternion.copy( quaternion );\n\t\n\t\t\tcameraRight.position.copy( position );\n\t\t\tcameraRight.quaternion.copy( quaternion );\n\t\n\t\t\tif (hmdDevice) {\n\t\t\t\tcameraLeft.position.add( eyeOffsetLeft ) ;\n\t\t\t\tcameraRight.position.add( eyeOffsetRight );\n\t\t\t} else {\n\t\t\t\tcameraLeft.translateX( - this.separation );\n\t\t\t\tcameraRight.translateX( this.separation );\n\t\t\t}\n\t\n\t\t\tcameraLeft.updateMatrixWorld();\n\t\t\tcameraRight.updateMatrixWorld();\n\t\n\t        // Bug fixed if device's Ratio > 1\n\t        w = renderer.context.drawingBufferWidth / ( 2 * window.devicePixelRatio );\n\t\n\t\t\tif (renderTarget) {\n\t\t\t\trenderer.setRenderTarget(renderTarget);\n\t\t\t}\n\t\n\t\t\trightScene.traverseVisible(function (obj) {\n\t\t\t\tif (obj.material && obj.material.map) {\n\t\t\t\t\tif (obj.userData.stereo === 'vertical') {\n\t\t\t\t\t\tobj.material.map.offset.set(0, 0.5);\n\t\t\t\t\t} else if (obj.userData.stereo) {\n\t\t\t\t\t\tobj.material.map.offset.set(0.5, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t        // Modify by kuilin.qkl\n\t        // Not use Fullscreen\n\t        if (inWebview) {\n\t            renderer.setScissor( 0, h >> 1, w * 2, h >> 1 );\n\t            renderer.setViewport( 0, h >> 1, w * 2, h >> 1 );\n\t        } else {\n\t            renderer.setScissor( w, 0, w, h );\n\t            renderer.setViewport( w, 0, w, h );\n\t        }\n\t\t\trenderer.render( rightScene, cameraRight, renderTarget, forceClear );\n\t\n\t\t\tleftScene.traverseVisible(function (obj) {\n\t\t\t\tif (obj.userData.stereo && obj.material && obj.material.map) {\n\t\t\t\t\tobj.material.map.offset.set(0, 0);\n\t\t\t\t}\n\t\t\t});\n\t        if (inWebview) {\n\t            renderer.setScissor( 0, 0, w * 2, h >> 1 );\n\t            renderer.setViewport( 0, 0, w * 2, h >> 1 );\n\t        } else {\n\t            renderer.setScissor( 0, 0, w, h );\n\t            renderer.setViewport( 0, 0, w, h );\n\t        }\n\t\t\trenderer.render( leftScene, cameraLeft, renderTarget, forceClear );\n\t\n\t\t\t//reset viewport, scissor\n\t\t\tw *= 2;\n\t        renderer.setViewport( 0, 0, w, h );\n\t        renderer.setScissor( 0, 0, w, h );\n\t\t\trenderer.enableScissorTest( false );\n\t\t};\n\t\n\t\tObject.defineProperty(this, 'near', {\n\t\t\tget: function () {\n\t\t\t\treturn near;\n\t\t\t},\n\t\t\tset: function (val) {\n\t\t\t\tval = parseFloat(val);\n\t\t\t\tif (val && !isNaN(val)) {\n\t\t\t\t\tnear = Math.max(0, val);\n\t\t\t\t\tupdateProjection();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\tObject.defineProperty(this, 'far', {\n\t\t\tget: function () {\n\t\t\t\treturn far;\n\t\t\t},\n\t\t\tset: function (val) {\n\t\t\t\tval = parseFloat(val);\n\t\t\t\tif (val && !isNaN(val)) {\n\t\t\t\t\tfar = Math.max(0, val);\n\t\t\t\t\tupdateProjection();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\tthis.scan();\n\t\tresize();\n\t};\n\t\n\tTHREE.VRStereoEffect.prototype = Object.create( THREE.EventDispatcher.prototype );\n\t\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\tTHREE.VRControls = function ( object, options ) {\n\t\n\t\tvar self = this;\n\t\n\t\t//HMD sensor stuff\n\t\tvar sensorDevice;\n\t\tvar vrState;\n\t\n\t\t//device orientation stuff\n\t\tvar deviceControls;\n\t\tvar zeroAngle = 0;\n\t\n\t\tvar mode = '';\n\t\n\t\tvar vrBrowser = navigator.getVRDevices || navigator.mozGetVRDevices;\n\t\n\t\tvar poll = options && options.poll || 1000;\n\t\tvar pollTimeout;\n\t\n\t\tfunction gotVRDevices( devices ) {\n\t\t\tvar i,\n\t\t\t\tdevice;\n\t\n\t\t\tfor ( i = 0; i < devices.length; ++i ) {\n\t\t\t\tdevice = devices[i];\n\t\t\t\tif ( devices[i] instanceof PositionSensorVRDevice ) {\n\t\n\t\t\t\t\tif ( sensorDevice && devices[i].hardwareUnitId === sensorDevice.hardwareUnitId ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tsensorDevice = device;\n\t\t\t\t\tconsole.log('Using Sensor Device:', sensorDevice.deviceName);\n\t\n\t\t\t\t\tif ( sensorDevice.zeroSensor ) {\n\t\t\t\t\t\tself.zeroSensor = sensorDevice.zeroSensor.bind(sensorDevice);\n\t\t\t\t\t} else if ( sensorDevice.resetSensor ) {\n\t\t\t\t\t\tself.zeroSensor = sensorDevice.resetSensor.bind(sensorDevice);\n\t\t\t\t\t}\n\t\t\t\t\tself.zeroSensor();\n\t\n\t\t\t\t\tmode = 'hmd';\n\t\n\t\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t\t} );\n\t\n\t\t\t\t\tbreak; // We keep the first we encounter\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (poll) {\n\t\t\t\tclearTimeout(pollTimeout);\n\t\t\t\tsetTimeout(self.scan, poll);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction deviceOrientationChange( event ) {\n\t\t\tif ( typeof event.gamma === 'number' ) {\n\t\t\t\tmode = 'deviceorientation';\n\t\t\t\twindow.removeEventListener( 'deviceorientation', deviceOrientationChange, false );\n\t\t\t\tdeviceControls = new THREE.DeviceOrientationControls( object );\n\t\t\t\tdeviceControls.connect();\n\t\t\t\tif (!this.freeze) {\n\t\t\t\t\tdeviceControls.update();\n\t\t\t\t}\n\t\n\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t\n\t\tthis.update = function() {\n\t\t\t// Applies head rotation from sensor data.\n\t\t\tif (self.freeze) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif ( sensorDevice ) {\n\t\t\t\tvrState = sensorDevice.getState();\n\t\t\t\tif ( vrState ) {\n\t\t\t\t\tif ( vrState.orientation && vrState.hasOrientation !== false ) {\n\t\t\t\t\t\tobject.quaternion.copy( vrState.orientation );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( vrState.position && vrState.hasPosition !== false ) {\n\t\t\t\t\t\t// vrState.position is null if using DK1 or if DK2 camera is not plugged in\n\t\t\t\t\t\tobject.position.copy( vrState.position );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tobject.updateMatrixWorld();\n\t\t\t\t}\n\t\t\t} else if (deviceControls && deviceControls.deviceOrientation.gamma !== undefined) {\n\t\t\t\tdeviceControls.update();\n\t\t\t\tobject.rotateY(-zeroAngle);\n\t\t\t\tobject.updateMatrixWorld();\n\t\t\t}\n\t\t};\n\t\n\t\t//only useful when frozen\n\t\tthis.reset = function () {\n\t\t\tif ( object ) {\n\t\t\t\tobject.quaternion.set( 0, 0, 0, 1 );\n\t\t\t\tobject.position.set( 0, 0, 0 );\n\t\t\t}\n\t\t};\n\t\n\t\t//zeros only rotation on Y axis\n\t\t//todo: find out if it zeros out position. need a DK2 to test\n\t\tthis.zeroSensor = function () {\n\t\t\tif (sensorDevice && sensorDevice.zeroSensor) {\n\t\t\t\tsensorDevice.zeroSensor();\n\t\t\t}\n\t\t\tzeroAngle = object.rotation.y;\n\t\t\tself.update();\n\t\t};\n\t\n\t\tthis.freeze = false;\n\t\n\t\t//method to query which tech we're using\n\t\tthis.mode = function () {\n\t\t\treturn mode;\n\t\t};\n\t\n\t\tthis.scan = function () {\n\t\t\tif ( navigator.getVRDevices ) {\n\t\t\t\tnavigator.getVRDevices().then( gotVRDevices );\n\t\t\t} else if ( navigator.mozGetVRDevices ) {\n\t\t\t\tnavigator.mozGetVRDevices( gotVRDevices );\n\t\t\t}\n\t\t};\n\t\n\t\t//todo: connect/disconnect methods\n\t\t//todo: method to query orientation/position without changing object\n\t\t//todo: work without an object\n\t\n\t\tif ( vrBrowser ) {\n\t\t\tthis.scan();\n\t\t} else if ( \"DeviceOrientationEvent\" in window && THREE.DeviceOrientationControls) {\n\t\t\t//device orientation\n\t\t\twindow.addEventListener( \"deviceorientation\", deviceOrientationChange, false );\n\t\t}\n\t};\n\t\n\tTHREE.VRControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\t\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\t// css base code, injected by the css-loader\r\n\tmodule.exports = function() {\r\n\t\tvar list = [];\r\n\t\r\n\t\t// return the list of modules as css string\r\n\t\tlist.toString = function toString() {\r\n\t\t\tvar result = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar item = this[i];\r\n\t\t\t\tif(item[2]) {\r\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(item[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result.join(\"\");\r\n\t\t};\r\n\t\r\n\t\t// import a list of modules into the list\r\n\t\tlist.i = function(modules, mediaQuery) {\r\n\t\t\tif(typeof modules === \"string\")\r\n\t\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\t\tvar alreadyImportedModules = {};\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar id = this[i][0];\r\n\t\t\t\tif(typeof id === \"number\")\r\n\t\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\t\tvar item = modules[i];\r\n\t\t\t\t// skip already imported module\r\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn list;\r\n\t};\r\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar d        = __webpack_require__(39)\n\t  , callable = __webpack_require__(40)\n\t\n\t  , apply = Function.prototype.apply, call = Function.prototype.call\n\t  , create = Object.create, defineProperty = Object.defineProperty\n\t  , defineProperties = Object.defineProperties\n\t  , hasOwnProperty = Object.prototype.hasOwnProperty\n\t  , descriptor = { configurable: true, enumerable: false, writable: true }\n\t\n\t  , on, once, off, emit, methods, descriptors, base;\n\t\n\ton = function (type, listener) {\n\t\tvar data;\n\t\n\t\tcallable(listener);\n\t\n\t\tif (!hasOwnProperty.call(this, '__ee__')) {\n\t\t\tdata = descriptor.value = create(null);\n\t\t\tdefineProperty(this, '__ee__', descriptor);\n\t\t\tdescriptor.value = null;\n\t\t} else {\n\t\t\tdata = this.__ee__;\n\t\t}\n\t\tif (!data[type]) data[type] = listener;\n\t\telse if (typeof data[type] === 'object') data[type].push(listener);\n\t\telse data[type] = [data[type], listener];\n\t\n\t\treturn this;\n\t};\n\t\n\tonce = function (type, listener) {\n\t\tvar once, self;\n\t\n\t\tcallable(listener);\n\t\tself = this;\n\t\ton.call(this, type, once = function () {\n\t\t\toff.call(self, type, once);\n\t\t\tapply.call(listener, this, arguments);\n\t\t});\n\t\n\t\tonce.__eeOnceListener__ = listener;\n\t\treturn this;\n\t};\n\t\n\toff = function (type, listener) {\n\t\tvar data, listeners, candidate, i;\n\t\n\t\tcallable(listener);\n\t\n\t\tif (!hasOwnProperty.call(this, '__ee__')) return this;\n\t\tdata = this.__ee__;\n\t\tif (!data[type]) return this;\n\t\tlisteners = data[type];\n\t\n\t\tif (typeof listeners === 'object') {\n\t\t\tfor (i = 0; (candidate = listeners[i]); ++i) {\n\t\t\t\tif ((candidate === listener) ||\n\t\t\t\t\t\t(candidate.__eeOnceListener__ === listener)) {\n\t\t\t\t\tif (listeners.length === 2) data[type] = listeners[i ? 0 : 1];\n\t\t\t\t\telse listeners.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ((listeners === listener) ||\n\t\t\t\t\t(listeners.__eeOnceListener__ === listener)) {\n\t\t\t\tdelete data[type];\n\t\t\t}\n\t\t}\n\t\n\t\treturn this;\n\t};\n\t\n\temit = function (type) {\n\t\tvar i, l, listener, listeners, args;\n\t\n\t\tif (!hasOwnProperty.call(this, '__ee__')) return;\n\t\tlisteners = this.__ee__[type];\n\t\tif (!listeners) return;\n\t\n\t\tif (typeof listeners === 'object') {\n\t\t\tl = arguments.length;\n\t\t\targs = new Array(l - 1);\n\t\t\tfor (i = 1; i < l; ++i) args[i - 1] = arguments[i];\n\t\n\t\t\tlisteners = listeners.slice();\n\t\t\tfor (i = 0; (listener = listeners[i]); ++i) {\n\t\t\t\tapply.call(listener, this, args);\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (arguments.length) {\n\t\t\tcase 1:\n\t\t\t\tcall.call(listeners, this);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcall.call(listeners, this, arguments[1]);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcall.call(listeners, this, arguments[1], arguments[2]);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tl = arguments.length;\n\t\t\t\targs = new Array(l - 1);\n\t\t\t\tfor (i = 1; i < l; ++i) {\n\t\t\t\t\targs[i - 1] = arguments[i];\n\t\t\t\t}\n\t\t\t\tapply.call(listeners, this, args);\n\t\t\t}\n\t\t}\n\t};\n\t\n\tmethods = {\n\t\ton: on,\n\t\tonce: once,\n\t\toff: off,\n\t\temit: emit\n\t};\n\t\n\tdescriptors = {\n\t\ton: d(on),\n\t\tonce: d(once),\n\t\toff: d(off),\n\t\temit: d(emit)\n\t};\n\t\n\tbase = defineProperties({}, descriptors);\n\t\n\tmodule.exports = exports = function (o) {\n\t\treturn (o == null) ? create(base) : defineProperties(Object(o), descriptors);\n\t};\n\texports.methods = methods;\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function (global, factory) {\n\t    true ? factory(exports) :\n\t    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t    (factory((global.THREE = global.THREE || {})));\n\t}(this, (function (exports) { 'use strict';\n\t\n\t    // Polyfills\n\t\n\t    if ( Number.EPSILON === undefined ) {\n\t\n\t    \tNumber.EPSILON = Math.pow( 2, - 52 );\n\t\n\t    }\n\t\n\t    //\n\t\n\t    if ( Math.sign === undefined ) {\n\t\n\t    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\t\n\t    \tMath.sign = function ( x ) {\n\t\n\t    \t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    if ( Function.prototype.name === undefined ) {\n\t\n\t    \t// Missing in IE9-11.\n\t    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\t\n\t    \tObject.defineProperty( Function.prototype, 'name', {\n\t\n\t    \t\tget: function () {\n\t\n\t    \t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\t\n\t    \t\t}\n\t\n\t    \t} );\n\t\n\t    }\n\t\n\t    if ( Object.assign === undefined ) {\n\t\n\t    \t// Missing in IE.\n\t    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\t\n\t    \t( function () {\n\t\n\t    \t\tObject.assign = function ( target ) {\n\t\n\t    \t\t\t'use strict';\n\t\n\t    \t\t\tif ( target === undefined || target === null ) {\n\t\n\t    \t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar output = Object( target );\n\t\n\t    \t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\t\n\t    \t\t\t\tvar source = arguments[ index ];\n\t\n\t    \t\t\t\tif ( source !== undefined && source !== null ) {\n\t\n\t    \t\t\t\t\tfor ( var nextKey in source ) {\n\t\n\t    \t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\t\n\t    \t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn output;\n\t\n\t    \t\t};\n\t\n\t    \t} )();\n\t\n\t    }\n\t\n\t    /**\n\t     * https://github.com/mrdoob/eventdispatcher.js/\n\t     */\n\t\n\t    function EventDispatcher() {}\n\t\n\t    Object.assign( EventDispatcher.prototype, {\n\t\n\t    \taddEventListener: function ( type, listener ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) this._listeners = {};\n\t\n\t    \t\tvar listeners = this._listeners;\n\t\n\t    \t\tif ( listeners[ type ] === undefined ) {\n\t\n\t    \t\t\tlisteners[ type ] = [];\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\t\n\t    \t\t\tlisteners[ type ].push( listener );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \thasEventListener: function ( type, listener ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) return false;\n\t\n\t    \t\tvar listeners = this._listeners;\n\t\n\t    \t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tremoveEventListener: function ( type, listener ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) return;\n\t\n\t    \t\tvar listeners = this._listeners;\n\t    \t\tvar listenerArray = listeners[ type ];\n\t\n\t    \t\tif ( listenerArray !== undefined ) {\n\t\n\t    \t\t\tvar index = listenerArray.indexOf( listener );\n\t\n\t    \t\t\tif ( index !== - 1 ) {\n\t\n\t    \t\t\t\tlistenerArray.splice( index, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tdispatchEvent: function ( event ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) return;\n\t\n\t    \t\tvar listeners = this._listeners;\n\t    \t\tvar listenerArray = listeners[ event.type ];\n\t\n\t    \t\tif ( listenerArray !== undefined ) {\n\t\n\t    \t\t\tevent.target = this;\n\t\n\t    \t\t\tvar array = [], i = 0;\n\t    \t\t\tvar length = listenerArray.length;\n\t\n\t    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\t\tarray[ i ] = listenerArray[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\t\tarray[ i ].call( this, event );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var REVISION = '81';\n\t    var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n\t    var CullFaceNone = 0;\n\t    var CullFaceBack = 1;\n\t    var CullFaceFront = 2;\n\t    var CullFaceFrontBack = 3;\n\t    var FrontFaceDirectionCW = 0;\n\t    var FrontFaceDirectionCCW = 1;\n\t    var BasicShadowMap = 0;\n\t    var PCFShadowMap = 1;\n\t    var PCFSoftShadowMap = 2;\n\t    var FrontSide = 0;\n\t    var BackSide = 1;\n\t    var DoubleSide = 2;\n\t    var FlatShading = 1;\n\t    var SmoothShading = 2;\n\t    var NoColors = 0;\n\t    var FaceColors = 1;\n\t    var VertexColors = 2;\n\t    var NoBlending = 0;\n\t    var NormalBlending = 1;\n\t    var AdditiveBlending = 2;\n\t    var SubtractiveBlending = 3;\n\t    var MultiplyBlending = 4;\n\t    var CustomBlending = 5;\n\t    var BlendingMode = {\n\t        NoBlending: NoBlending,\n\t        NormalBlending: NormalBlending,\n\t        AdditiveBlending: AdditiveBlending,\n\t        SubtractiveBlending: SubtractiveBlending,\n\t        MultiplyBlending: MultiplyBlending,\n\t        CustomBlending: CustomBlending\n\t    };\n\t    var AddEquation = 100;\n\t    var SubtractEquation = 101;\n\t    var ReverseSubtractEquation = 102;\n\t    var MinEquation = 103;\n\t    var MaxEquation = 104;\n\t    var ZeroFactor = 200;\n\t    var OneFactor = 201;\n\t    var SrcColorFactor = 202;\n\t    var OneMinusSrcColorFactor = 203;\n\t    var SrcAlphaFactor = 204;\n\t    var OneMinusSrcAlphaFactor = 205;\n\t    var DstAlphaFactor = 206;\n\t    var OneMinusDstAlphaFactor = 207;\n\t    var DstColorFactor = 208;\n\t    var OneMinusDstColorFactor = 209;\n\t    var SrcAlphaSaturateFactor = 210;\n\t    var NeverDepth = 0;\n\t    var AlwaysDepth = 1;\n\t    var LessDepth = 2;\n\t    var LessEqualDepth = 3;\n\t    var EqualDepth = 4;\n\t    var GreaterEqualDepth = 5;\n\t    var GreaterDepth = 6;\n\t    var NotEqualDepth = 7;\n\t    var MultiplyOperation = 0;\n\t    var MixOperation = 1;\n\t    var AddOperation = 2;\n\t    var NoToneMapping = 0;\n\t    var LinearToneMapping = 1;\n\t    var ReinhardToneMapping = 2;\n\t    var Uncharted2ToneMapping = 3;\n\t    var CineonToneMapping = 4;\n\t    var UVMapping = 300;\n\t    var CubeReflectionMapping = 301;\n\t    var CubeRefractionMapping = 302;\n\t    var EquirectangularReflectionMapping = 303;\n\t    var EquirectangularRefractionMapping = 304;\n\t    var SphericalReflectionMapping = 305;\n\t    var CubeUVReflectionMapping = 306;\n\t    var CubeUVRefractionMapping = 307;\n\t    var TextureMapping = {\n\t        UVMapping: UVMapping,\n\t        CubeReflectionMapping: CubeReflectionMapping,\n\t        CubeRefractionMapping: CubeRefractionMapping,\n\t        EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t        EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t        SphericalReflectionMapping: SphericalReflectionMapping,\n\t        CubeUVReflectionMapping: CubeUVReflectionMapping,\n\t        CubeUVRefractionMapping: CubeUVRefractionMapping\n\t    };\n\t    var RepeatWrapping = 1000;\n\t    var ClampToEdgeWrapping = 1001;\n\t    var MirroredRepeatWrapping = 1002;\n\t    var TextureWrapping = {\n\t        RepeatWrapping: RepeatWrapping,\n\t        ClampToEdgeWrapping: ClampToEdgeWrapping,\n\t        MirroredRepeatWrapping: MirroredRepeatWrapping\n\t    };\n\t    var NearestFilter = 1003;\n\t    var NearestMipMapNearestFilter = 1004;\n\t    var NearestMipMapLinearFilter = 1005;\n\t    var LinearFilter = 1006;\n\t    var LinearMipMapNearestFilter = 1007;\n\t    var LinearMipMapLinearFilter = 1008;\n\t    var TextureFilter = {\n\t        NearestFilter: NearestFilter,\n\t        NearestMipMapNearestFilter: NearestMipMapNearestFilter,\n\t        NearestMipMapLinearFilter: NearestMipMapLinearFilter,\n\t        LinearFilter: LinearFilter,\n\t        LinearMipMapNearestFilter: LinearMipMapNearestFilter,\n\t        LinearMipMapLinearFilter: LinearMipMapLinearFilter\n\t    };\n\t    var UnsignedByteType = 1009;\n\t    var ByteType = 1010;\n\t    var ShortType = 1011;\n\t    var UnsignedShortType = 1012;\n\t    var IntType = 1013;\n\t    var UnsignedIntType = 1014;\n\t    var FloatType = 1015;\n\t    var HalfFloatType = 1016;\n\t    var UnsignedShort4444Type = 1017;\n\t    var UnsignedShort5551Type = 1018;\n\t    var UnsignedShort565Type = 1019;\n\t    var UnsignedInt248Type = 1020;\n\t    var AlphaFormat = 1021;\n\t    var RGBFormat = 1022;\n\t    var RGBAFormat = 1023;\n\t    var LuminanceFormat = 1024;\n\t    var LuminanceAlphaFormat = 1025;\n\t    var RGBEFormat = RGBAFormat;\n\t    var DepthFormat = 1026;\n\t    var DepthStencilFormat = 1027;\n\t    var RGB_S3TC_DXT1_Format = 2001;\n\t    var RGBA_S3TC_DXT1_Format = 2002;\n\t    var RGBA_S3TC_DXT3_Format = 2003;\n\t    var RGBA_S3TC_DXT5_Format = 2004;\n\t    var RGB_PVRTC_4BPPV1_Format = 2100;\n\t    var RGB_PVRTC_2BPPV1_Format = 2101;\n\t    var RGBA_PVRTC_4BPPV1_Format = 2102;\n\t    var RGBA_PVRTC_2BPPV1_Format = 2103;\n\t    var RGB_ETC1_Format = 2151;\n\t    var LoopOnce = 2200;\n\t    var LoopRepeat = 2201;\n\t    var LoopPingPong = 2202;\n\t    var InterpolateDiscrete = 2300;\n\t    var InterpolateLinear = 2301;\n\t    var InterpolateSmooth = 2302;\n\t    var ZeroCurvatureEnding = 2400;\n\t    var ZeroSlopeEnding = 2401;\n\t    var WrapAroundEnding = 2402;\n\t    var TrianglesDrawMode = 0;\n\t    var TriangleStripDrawMode = 1;\n\t    var TriangleFanDrawMode = 2;\n\t    var LinearEncoding = 3000;\n\t    var sRGBEncoding = 3001;\n\t    var GammaEncoding = 3007;\n\t    var RGBEEncoding = 3002;\n\t    var LogLuvEncoding = 3003;\n\t    var RGBM7Encoding = 3004;\n\t    var RGBM16Encoding = 3005;\n\t    var RGBDEncoding = 3006;\n\t    var BasicDepthPacking = 3200;\n\t    var RGBADepthPacking = 3201;\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    exports.Math = {\n\t\n\t    \tDEG2RAD: Math.PI / 180,\n\t    \tRAD2DEG: 180 / Math.PI,\n\t\n\t    \tgenerateUUID: function () {\n\t\n\t    \t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\t\n\t    \t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t    \t\tvar uuid = new Array( 36 );\n\t    \t\tvar rnd = 0, r;\n\t\n\t    \t\treturn function generateUUID() {\n\t\n\t    \t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\t\n\t    \t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\t\n\t    \t\t\t\t\tuuid[ i ] = '-';\n\t\n\t    \t\t\t\t} else if ( i === 14 ) {\n\t\n\t    \t\t\t\t\tuuid[ i ] = '4';\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t    \t\t\t\t\tr = rnd & 0xf;\n\t    \t\t\t\t\trnd = rnd >> 4;\n\t    \t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn uuid.join( '' );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclamp: function ( value, min, max ) {\n\t\n\t    \t\treturn Math.max( min, Math.min( max, value ) );\n\t\n\t    \t},\n\t\n\t    \t// compute euclidian modulo of m % n\n\t    \t// https://en.wikipedia.org/wiki/Modulo_operation\n\t\n\t    \teuclideanModulo: function ( n, m ) {\n\t\n\t    \t\treturn ( ( n % m ) + m ) % m;\n\t\n\t    \t},\n\t\n\t    \t// Linear mapping from range <a1, a2> to range <b1, b2>\n\t\n\t    \tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\t\n\t    \t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\t\n\t    \t},\n\t\n\t    \t// http://en.wikipedia.org/wiki/Smoothstep\n\t\n\t    \tsmoothstep: function ( x, min, max ) {\n\t\n\t    \t\tif ( x <= min ) return 0;\n\t    \t\tif ( x >= max ) return 1;\n\t\n\t    \t\tx = ( x - min ) / ( max - min );\n\t\n\t    \t\treturn x * x * ( 3 - 2 * x );\n\t\n\t    \t},\n\t\n\t    \tsmootherstep: function ( x, min, max ) {\n\t\n\t    \t\tif ( x <= min ) return 0;\n\t    \t\tif ( x >= max ) return 1;\n\t\n\t    \t\tx = ( x - min ) / ( max - min );\n\t\n\t    \t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\t\n\t    \t},\n\t\n\t    \trandom16: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n\t    \t\treturn Math.random();\n\t\n\t    \t},\n\t\n\t    \t// Random integer from <low, high> interval\n\t\n\t    \trandInt: function ( low, high ) {\n\t\n\t    \t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\t\n\t    \t},\n\t\n\t    \t// Random float from <low, high> interval\n\t\n\t    \trandFloat: function ( low, high ) {\n\t\n\t    \t\treturn low + Math.random() * ( high - low );\n\t\n\t    \t},\n\t\n\t    \t// Random float from <-range/2, range/2> interval\n\t\n\t    \trandFloatSpread: function ( range ) {\n\t\n\t    \t\treturn range * ( 0.5 - Math.random() );\n\t\n\t    \t},\n\t\n\t    \tdegToRad: function ( degrees ) {\n\t\n\t    \t\treturn degrees * exports.Math.DEG2RAD;\n\t\n\t    \t},\n\t\n\t    \tradToDeg: function ( radians ) {\n\t\n\t    \t\treturn radians * exports.Math.RAD2DEG;\n\t\n\t    \t},\n\t\n\t    \tisPowerOfTwo: function ( value ) {\n\t\n\t    \t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\t\n\t    \t},\n\t\n\t    \tnearestPowerOfTwo: function ( value ) {\n\t\n\t    \t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\t\n\t    \t},\n\t\n\t    \tnextPowerOfTwo: function ( value ) {\n\t\n\t    \t\tvalue --;\n\t    \t\tvalue |= value >> 1;\n\t    \t\tvalue |= value >> 2;\n\t    \t\tvalue |= value >> 4;\n\t    \t\tvalue |= value >> 8;\n\t    \t\tvalue |= value >> 16;\n\t    \t\tvalue ++;\n\t\n\t    \t\treturn value;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author egraether / http://egraether.com/\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     */\n\t\n\t    function Vector2( x, y ) {\n\t\n\t    \tthis.x = x || 0;\n\t    \tthis.y = y || 0;\n\t\n\t    }\n\t\n\t    Vector2.prototype = {\n\t\n\t    \tconstructor: Vector2,\n\t\n\t    \tisVector2: true,\n\t\n\t    \tget width() {\n\t\n\t    \t\treturn this.x;\n\t\n\t    \t},\n\t\n\t    \tset width( value ) {\n\t\n\t    \t\tthis.x = value;\n\t\n\t    \t},\n\t\n\t    \tget height() {\n\t\n\t    \t\treturn this.y;\n\t\n\t    \t},\n\t\n\t    \tset height( value ) {\n\t\n\t    \t\tthis.y = value;\n\t\n\t    \t},\n\t\n\t    \t//\n\t\n\t    \tset: function ( x, y ) {\n\t\n\t    \t\tthis.x = x;\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.x = scalar;\n\t    \t\tthis.y = scalar;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( x ) {\n\t\n\t    \t\tthis.x = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( y ) {\n\t\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponent: function ( index, value ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: this.x = value; break;\n\t    \t\t\tcase 1: this.y = value; break;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetComponent: function ( index ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: return this.x;\n\t    \t\t\tcase 1: return this.y;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.x, this.y );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( v ) {\n\t\n\t    \t\tthis.x = v.x;\n\t    \t\tthis.y = v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t    \t\t\treturn this.addVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x += v.x;\n\t    \t\tthis.y += v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.x += s;\n\t    \t\tthis.y += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x + b.x;\n\t    \t\tthis.y = a.y + b.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScaledVector: function ( v, s ) {\n\t\n\t    \t\tthis.x += v.x * s;\n\t    \t\tthis.y += v.y * s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t    \t\t\treturn this.subVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x -= v.x;\n\t    \t\tthis.y -= v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubScalar: function ( s ) {\n\t\n\t    \t\tthis.x -= s;\n\t    \t\tthis.y -= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x - b.x;\n\t    \t\tthis.y = a.y - b.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( v ) {\n\t\n\t    \t\tthis.x *= v.x;\n\t    \t\tthis.y *= v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( scalar ) {\n\t\n\t    \t\tif ( isFinite( scalar ) ) {\n\t\n\t    \t\t\tthis.x *= scalar;\n\t    \t\t\tthis.y *= scalar;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.x = 0;\n\t    \t\t\tthis.y = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivide: function ( v ) {\n\t\n\t    \t\tthis.x /= v.x;\n\t    \t\tthis.y /= v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivideScalar: function ( scalar ) {\n\t\n\t    \t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t    \t},\n\t\n\t    \tmin: function ( v ) {\n\t\n\t    \t\tthis.x = Math.min( this.x, v.x );\n\t    \t\tthis.y = Math.min( this.y, v.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmax: function ( v ) {\n\t\n\t    \t\tthis.x = Math.max( this.x, v.x );\n\t    \t\tthis.y = Math.max( this.y, v.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclamp: function ( min, max ) {\n\t\n\t    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclampScalar: function () {\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t    \t\t\tif ( min === undefined ) {\n\t\n\t    \t\t\t\tmin = new Vector2();\n\t    \t\t\t\tmax = new Vector2();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmin.set( minVal, minVal );\n\t    \t\t\tmax.set( maxVal, maxVal );\n\t\n\t    \t\t\treturn this.clamp( min, max );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclampLength: function ( min, max ) {\n\t\n\t    \t\tvar length = this.length();\n\t\n\t    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\t\n\t    \t},\n\t\n\t    \tfloor: function () {\n\t\n\t    \t\tthis.x = Math.floor( this.x );\n\t    \t\tthis.y = Math.floor( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tceil: function () {\n\t\n\t    \t\tthis.x = Math.ceil( this.x );\n\t    \t\tthis.y = Math.ceil( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tround: function () {\n\t\n\t    \t\tthis.x = Math.round( this.x );\n\t    \t\tthis.y = Math.round( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \troundToZero: function () {\n\t\n\t    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.x = - this.x;\n\t    \t\tthis.y = - this.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this.x * v.x + this.y * v.y;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this.x * this.x + this.y * this.y;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\t\n\t    \t},\n\t\n\t    \tlengthManhattan: function() {\n\t\n\t    \t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\treturn this.divideScalar( this.length() );\n\t\n\t    \t},\n\t\n\t    \tangle: function () {\n\t\n\t    \t\t// computes the angle in radians with respect to the positive x-axis\n\t\n\t    \t\tvar angle = Math.atan2( this.y, this.x );\n\t\n\t    \t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\t\n\t    \t\treturn angle;\n\t\n\t    \t},\n\t\n\t    \tdistanceTo: function ( v ) {\n\t\n\t    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceToSquared: function ( v ) {\n\t\n\t    \t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t    \t\treturn dx * dx + dy * dy;\n\t\n\t    \t},\n\t\n\t    \tdistanceToManhattan: function ( v ) {\n\t\n\t    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\t\n\t    \t},\n\t\n\t    \tsetLength: function ( length ) {\n\t\n\t    \t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( v, alpha ) {\n\t\n\t    \t\tthis.x += ( v.x - this.x ) * alpha;\n\t    \t\tthis.y += ( v.y - this.y ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t    \t},\n\t\n\t    \tequals: function ( v ) {\n\t\n\t    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.x = array[ offset ];\n\t    \t\tthis.y = array[ offset + 1 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.x;\n\t    \t\tarray[ offset + 1 ] = this.y;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tindex = index * attribute.itemSize + offset;\n\t\n\t    \t\tthis.x = attribute.array[ index ];\n\t    \t\tthis.y = attribute.array[ index + 1 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trotateAround: function ( center, angle ) {\n\t\n\t    \t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\t\n\t    \t\tvar x = this.x - center.x;\n\t    \t\tvar y = this.y - center.y;\n\t\n\t    \t\tthis.x = x * c - y * s + center.x;\n\t    \t\tthis.y = x * s + y * c + center.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author szimek / https://github.com/szimek/\n\t     */\n\t\n\t    function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: TextureIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.sourceFile = '';\n\t\n\t    \tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t    \tthis.mipmaps = [];\n\t\n\t    \tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\t\n\t    \tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t    \tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\t\n\t    \tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t    \tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\t\n\t    \tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\t\n\t    \tthis.format = format !== undefined ? format : RGBAFormat;\n\t    \tthis.type = type !== undefined ? type : UnsignedByteType;\n\t\n\t    \tthis.offset = new Vector2( 0, 0 );\n\t    \tthis.repeat = new Vector2( 1, 1 );\n\t\n\t    \tthis.generateMipmaps = true;\n\t    \tthis.premultiplyAlpha = false;\n\t    \tthis.flipY = true;\n\t    \tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\n\t\n\t    \t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t    \t//\n\t    \t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t    \t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t    \tthis.encoding = encoding !== undefined ? encoding :  LinearEncoding;\n\t\n\t    \tthis.version = 0;\n\t    \tthis.onUpdate = null;\n\t\n\t    }\n\t\n\t    Texture.DEFAULT_IMAGE = undefined;\n\t    Texture.DEFAULT_MAPPING = UVMapping;\n\t\n\t    Texture.prototype = {\n\t\n\t    \tconstructor: Texture,\n\t\n\t    \tisTexture: true,\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.version ++;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.image = source.image;\n\t    \t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\t\n\t    \t\tthis.mapping = source.mapping;\n\t\n\t    \t\tthis.wrapS = source.wrapS;\n\t    \t\tthis.wrapT = source.wrapT;\n\t\n\t    \t\tthis.magFilter = source.magFilter;\n\t    \t\tthis.minFilter = source.minFilter;\n\t\n\t    \t\tthis.anisotropy = source.anisotropy;\n\t\n\t    \t\tthis.format = source.format;\n\t    \t\tthis.type = source.type;\n\t\n\t    \t\tthis.offset.copy( source.offset );\n\t    \t\tthis.repeat.copy( source.repeat );\n\t\n\t    \t\tthis.generateMipmaps = source.generateMipmaps;\n\t    \t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t    \t\tthis.flipY = source.flipY;\n\t    \t\tthis.unpackAlignment = source.unpackAlignment;\n\t    \t\tthis.encoding = source.encoding;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\t\n\t    \t\t\treturn meta.textures[ this.uuid ];\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getDataURL( image ) {\n\t\n\t    \t\t\tvar canvas;\n\t\n\t    \t\t\tif ( image.toDataURL !== undefined ) {\n\t\n\t    \t\t\t\tcanvas = image;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\t\t\tcanvas.width = image.width;\n\t    \t\t\t\tcanvas.height = image.height;\n\t\n\t    \t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\t\n\t    \t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\treturn canvas.toDataURL( 'image/png' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar output = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Texture',\n\t    \t\t\t\tgenerator: 'Texture.toJSON'\n\t    \t\t\t},\n\t\n\t    \t\t\tuuid: this.uuid,\n\t    \t\t\tname: this.name,\n\t\n\t    \t\t\tmapping: this.mapping,\n\t\n\t    \t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t    \t\t\toffset: [ this.offset.x, this.offset.y ],\n\t    \t\t\twrap: [ this.wrapS, this.wrapT ],\n\t\n\t    \t\t\tminFilter: this.minFilter,\n\t    \t\t\tmagFilter: this.magFilter,\n\t    \t\t\tanisotropy: this.anisotropy,\n\t\n\t    \t\t\tflipY: this.flipY\n\t    \t\t};\n\t\n\t    \t\tif ( this.image !== undefined ) {\n\t\n\t    \t\t\t// TODO: Move to THREE.Image\n\t\n\t    \t\t\tvar image = this.image;\n\t\n\t    \t\t\tif ( image.uuid === undefined ) {\n\t\n\t    \t\t\t\timage.uuid = exports.Math.generateUUID(); // UGH\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\t\n\t    \t\t\t\tmeta.images[ image.uuid ] = {\n\t    \t\t\t\t\tuuid: image.uuid,\n\t    \t\t\t\t\turl: getDataURL( image )\n\t    \t\t\t\t};\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\toutput.image = image.uuid;\n\t\n\t    \t\t}\n\t\n\t    \t\tmeta.textures[ this.uuid ] = output;\n\t\n\t    \t\treturn output;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t},\n\t\n\t    \ttransformUv: function ( uv ) {\n\t\n\t    \t\tif ( this.mapping !== UVMapping )  return;\n\t\n\t    \t\tuv.multiply( this.repeat );\n\t    \t\tuv.add( this.offset );\n\t\n\t    \t\tif ( uv.x < 0 || uv.x > 1 ) {\n\t\n\t    \t\t\tswitch ( this.wrapS ) {\n\t\n\t    \t\t\t\tcase RepeatWrapping:\n\t\n\t    \t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase ClampToEdgeWrapping:\n\t\n\t    \t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase MirroredRepeatWrapping:\n\t\n\t    \t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\t\n\t    \t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( uv.y < 0 || uv.y > 1 ) {\n\t\n\t    \t\t\tswitch ( this.wrapT ) {\n\t\n\t    \t\t\t\tcase RepeatWrapping:\n\t\n\t    \t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase ClampToEdgeWrapping:\n\t\n\t    \t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase MirroredRepeatWrapping:\n\t\n\t    \t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\t\n\t    \t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.flipY ) {\n\t\n\t    \t\t\tuv.y = 1 - uv.y;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( Texture.prototype, EventDispatcher.prototype );\n\t\n\t    var count = 0;\n\t    function TextureIdCount() { return count++; };\n\t\n\t    /**\n\t     * @author supereggbert / http://www.paulbrunt.co.uk/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author egraether / http://egraether.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Vector4( x, y, z, w ) {\n\t\n\t    \tthis.x = x || 0;\n\t    \tthis.y = y || 0;\n\t    \tthis.z = z || 0;\n\t    \tthis.w = ( w !== undefined ) ? w : 1;\n\t\n\t    }\n\t\n\t    Vector4.prototype = {\n\t\n\t    \tconstructor: Vector4,\n\t\n\t    \tisVector4: true,\n\t\n\t    \tset: function ( x, y, z, w ) {\n\t\n\t    \t\tthis.x = x;\n\t    \t\tthis.y = y;\n\t    \t\tthis.z = z;\n\t    \t\tthis.w = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.x = scalar;\n\t    \t\tthis.y = scalar;\n\t    \t\tthis.z = scalar;\n\t    \t\tthis.w = scalar;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( x ) {\n\t\n\t    \t\tthis.x = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( y ) {\n\t\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( z ) {\n\t\n\t    \t\tthis.z = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetW: function ( w ) {\n\t\n\t    \t\tthis.w = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponent: function ( index, value ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: this.x = value; break;\n\t    \t\t\tcase 1: this.y = value; break;\n\t    \t\t\tcase 2: this.z = value; break;\n\t    \t\t\tcase 3: this.w = value; break;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetComponent: function ( index ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: return this.x;\n\t    \t\t\tcase 1: return this.y;\n\t    \t\t\tcase 2: return this.z;\n\t    \t\t\tcase 3: return this.w;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( v ) {\n\t\n\t    \t\tthis.x = v.x;\n\t    \t\tthis.y = v.y;\n\t    \t\tthis.z = v.z;\n\t    \t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t    \t\t\treturn this.addVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x += v.x;\n\t    \t\tthis.y += v.y;\n\t    \t\tthis.z += v.z;\n\t    \t\tthis.w += v.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.x += s;\n\t    \t\tthis.y += s;\n\t    \t\tthis.z += s;\n\t    \t\tthis.w += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x + b.x;\n\t    \t\tthis.y = a.y + b.y;\n\t    \t\tthis.z = a.z + b.z;\n\t    \t\tthis.w = a.w + b.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScaledVector: function ( v, s ) {\n\t\n\t    \t\tthis.x += v.x * s;\n\t    \t\tthis.y += v.y * s;\n\t    \t\tthis.z += v.z * s;\n\t    \t\tthis.w += v.w * s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t    \t\t\treturn this.subVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x -= v.x;\n\t    \t\tthis.y -= v.y;\n\t    \t\tthis.z -= v.z;\n\t    \t\tthis.w -= v.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubScalar: function ( s ) {\n\t\n\t    \t\tthis.x -= s;\n\t    \t\tthis.y -= s;\n\t    \t\tthis.z -= s;\n\t    \t\tthis.w -= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x - b.x;\n\t    \t\tthis.y = a.y - b.y;\n\t    \t\tthis.z = a.z - b.z;\n\t    \t\tthis.w = a.w - b.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( scalar ) {\n\t\n\t    \t\tif ( isFinite( scalar ) ) {\n\t\n\t    \t\t\tthis.x *= scalar;\n\t    \t\t\tthis.y *= scalar;\n\t    \t\t\tthis.z *= scalar;\n\t    \t\t\tthis.w *= scalar;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.x = 0;\n\t    \t\t\tthis.y = 0;\n\t    \t\t\tthis.z = 0;\n\t    \t\t\tthis.w = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( m ) {\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t    \t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivideScalar: function ( scalar ) {\n\t\n\t    \t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t    \t},\n\t\n\t    \tsetAxisAngleFromQuaternion: function ( q ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\n\t    \t\t// q is assumed to be normalized\n\t\n\t    \t\tthis.w = 2 * Math.acos( q.w );\n\t\n\t    \t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\t\n\t    \t\tif ( s < 0.0001 ) {\n\t\n\t    \t\t\t this.x = 1;\n\t    \t\t\t this.y = 0;\n\t    \t\t\t this.z = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t this.x = q.x / s;\n\t    \t\t\t this.y = q.y / s;\n\t    \t\t\t this.z = q.z / s;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetAxisAngleFromRotationMatrix: function ( m ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tvar angle, x, y, z,\t\t// variables for result\n\t    \t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t    \t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\t\n\t    \t\t\tte = m.elements,\n\t\n\t    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\t\n\t    \t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t    \t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t    \t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\t\n\t    \t\t\t// singularity found\n\t    \t\t\t// first check for identity matrix which must have +1 for all terms\n\t    \t\t\t// in leading diagonal and zero in other terms\n\t\n\t    \t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t    \t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t    \t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t    \t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\t\n\t    \t\t\t\t// this singularity is identity matrix so angle = 0\n\t\n\t    \t\t\t\tthis.set( 1, 0, 0, 0 );\n\t\n\t    \t\t\t\treturn this; // zero angle, arbitrary axis\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// otherwise this singularity is angle = 180\n\t\n\t    \t\t\tangle = Math.PI;\n\t\n\t    \t\t\tvar xx = ( m11 + 1 ) / 2;\n\t    \t\t\tvar yy = ( m22 + 1 ) / 2;\n\t    \t\t\tvar zz = ( m33 + 1 ) / 2;\n\t    \t\t\tvar xy = ( m12 + m21 ) / 4;\n\t    \t\t\tvar xz = ( m13 + m31 ) / 4;\n\t    \t\t\tvar yz = ( m23 + m32 ) / 4;\n\t\n\t    \t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\t\n\t    \t\t\t\t// m11 is the largest diagonal term\n\t\n\t    \t\t\t\tif ( xx < epsilon ) {\n\t\n\t    \t\t\t\t\tx = 0;\n\t    \t\t\t\t\ty = 0.707106781;\n\t    \t\t\t\t\tz = 0.707106781;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tx = Math.sqrt( xx );\n\t    \t\t\t\t\ty = xy / x;\n\t    \t\t\t\t\tz = xz / x;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( yy > zz ) {\n\t\n\t    \t\t\t\t// m22 is the largest diagonal term\n\t\n\t    \t\t\t\tif ( yy < epsilon ) {\n\t\n\t    \t\t\t\t\tx = 0.707106781;\n\t    \t\t\t\t\ty = 0;\n\t    \t\t\t\t\tz = 0.707106781;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\ty = Math.sqrt( yy );\n\t    \t\t\t\t\tx = xy / y;\n\t    \t\t\t\t\tz = yz / y;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\n\t    \t\t\t\tif ( zz < epsilon ) {\n\t\n\t    \t\t\t\t\tx = 0.707106781;\n\t    \t\t\t\t\ty = 0.707106781;\n\t    \t\t\t\t\tz = 0;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tz = Math.sqrt( zz );\n\t    \t\t\t\t\tx = xz / z;\n\t    \t\t\t\t\ty = yz / z;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.set( x, y, z, angle );\n\t\n\t    \t\t\treturn this; // return 180 deg rotation\n\t\n\t    \t\t}\n\t\n\t    \t\t// as we have reached here there are no singularities so we can handle normally\n\t\n\t    \t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t    \t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t    \t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\t\n\t    \t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\t\n\t    \t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t    \t\t// caught by singularity test above, but I've left it in just in case\n\t\n\t    \t\tthis.x = ( m32 - m23 ) / s;\n\t    \t\tthis.y = ( m13 - m31 ) / s;\n\t    \t\tthis.z = ( m21 - m12 ) / s;\n\t    \t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmin: function ( v ) {\n\t\n\t    \t\tthis.x = Math.min( this.x, v.x );\n\t    \t\tthis.y = Math.min( this.y, v.y );\n\t    \t\tthis.z = Math.min( this.z, v.z );\n\t    \t\tthis.w = Math.min( this.w, v.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmax: function ( v ) {\n\t\n\t    \t\tthis.x = Math.max( this.x, v.x );\n\t    \t\tthis.y = Math.max( this.y, v.y );\n\t    \t\tthis.z = Math.max( this.z, v.z );\n\t    \t\tthis.w = Math.max( this.w, v.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclamp: function ( min, max ) {\n\t\n\t    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t    \t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclampScalar: function () {\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t    \t\t\tif ( min === undefined ) {\n\t\n\t    \t\t\t\tmin = new Vector4();\n\t    \t\t\t\tmax = new Vector4();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t    \t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\t\n\t    \t\t\treturn this.clamp( min, max );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tfloor: function () {\n\t\n\t    \t\tthis.x = Math.floor( this.x );\n\t    \t\tthis.y = Math.floor( this.y );\n\t    \t\tthis.z = Math.floor( this.z );\n\t    \t\tthis.w = Math.floor( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tceil: function () {\n\t\n\t    \t\tthis.x = Math.ceil( this.x );\n\t    \t\tthis.y = Math.ceil( this.y );\n\t    \t\tthis.z = Math.ceil( this.z );\n\t    \t\tthis.w = Math.ceil( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tround: function () {\n\t\n\t    \t\tthis.x = Math.round( this.x );\n\t    \t\tthis.y = Math.round( this.y );\n\t    \t\tthis.z = Math.round( this.z );\n\t    \t\tthis.w = Math.round( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \troundToZero: function () {\n\t\n\t    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t    \t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.x = - this.x;\n\t    \t\tthis.y = - this.y;\n\t    \t\tthis.z = - this.z;\n\t    \t\tthis.w = - this.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\t\n\t    \t},\n\t\n\t    \tlengthManhattan: function () {\n\t\n\t    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\treturn this.divideScalar( this.length() );\n\t\n\t    \t},\n\t\n\t    \tsetLength: function ( length ) {\n\t\n\t    \t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( v, alpha ) {\n\t\n\t    \t\tthis.x += ( v.x - this.x ) * alpha;\n\t    \t\tthis.y += ( v.y - this.y ) * alpha;\n\t    \t\tthis.z += ( v.z - this.z ) * alpha;\n\t    \t\tthis.w += ( v.w - this.w ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t    \t},\n\t\n\t    \tequals: function ( v ) {\n\t\n\t    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.x = array[ offset ];\n\t    \t\tthis.y = array[ offset + 1 ];\n\t    \t\tthis.z = array[ offset + 2 ];\n\t    \t\tthis.w = array[ offset + 3 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.x;\n\t    \t\tarray[ offset + 1 ] = this.y;\n\t    \t\tarray[ offset + 2 ] = this.z;\n\t    \t\tarray[ offset + 3 ] = this.w;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tindex = index * attribute.itemSize + offset;\n\t\n\t    \t\tthis.x = attribute.array[ index ];\n\t    \t\tthis.y = attribute.array[ index + 1 ];\n\t    \t\tthis.z = attribute.array[ index + 2 ];\n\t    \t\tthis.w = attribute.array[ index + 3 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author szimek / https://github.com/szimek/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author Marius Kintel / https://github.com/kintel\n\t     */\n\t\n\t    /*\n\t     In options, we can specify:\n\t     * Texture parameters for an auto-generated target texture\n\t     * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t    */\n\t    function WebGLRenderTarget( width, height, options ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.width = width;\n\t    \tthis.height = height;\n\t\n\t    \tthis.scissor = new Vector4( 0, 0, width, height );\n\t    \tthis.scissorTest = false;\n\t\n\t    \tthis.viewport = new Vector4( 0, 0, width, height );\n\t\n\t    \toptions = options || {};\n\t\n\t    \tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\t\n\t    \tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\n\t    \tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t    \tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t    \tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\n\t    }\n\t\n\t    Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisWebGLRenderTarget: true,\n\t\n\t    \tsetSize: function ( width, height ) {\n\t\n\t    \t\tif ( this.width !== width || this.height !== height ) {\n\t\n\t    \t\t\tthis.width = width;\n\t    \t\t\tthis.height = height;\n\t\n\t    \t\t\tthis.dispose();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.viewport.set( 0, 0, width, height );\n\t    \t\tthis.scissor.set( 0, 0, width, height );\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.width = source.width;\n\t    \t\tthis.height = source.height;\n\t\n\t    \t\tthis.viewport.copy( source.viewport );\n\t\n\t    \t\tthis.texture = source.texture.clone();\n\t\n\t    \t\tthis.depthBuffer = source.depthBuffer;\n\t    \t\tthis.stencilBuffer = source.stencilBuffer;\n\t    \t\tthis.depthTexture = source.depthTexture;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com\n\t     */\n\t\n\t    function WebGLRenderTargetCube( width, height, options ) {\n\t\n\t    \tWebGLRenderTarget.call( this, width, height, options );\n\t\n\t    \tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\t    \tthis.activeMipMapLevel = 0;\n\t\n\t    }\n\t\n\t    WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n\t    WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\t\n\t    WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Quaternion( x, y, z, w ) {\n\t\n\t    \tthis._x = x || 0;\n\t    \tthis._y = y || 0;\n\t    \tthis._z = z || 0;\n\t    \tthis._w = ( w !== undefined ) ? w : 1;\n\t\n\t    }\n\t\n\t    Quaternion.prototype = {\n\t\n\t    \tconstructor: Quaternion,\n\t\n\t    \tget x () {\n\t\n\t    \t\treturn this._x;\n\t\n\t    \t},\n\t\n\t    \tset x ( value ) {\n\t\n\t    \t\tthis._x = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget y () {\n\t\n\t    \t\treturn this._y;\n\t\n\t    \t},\n\t\n\t    \tset y ( value ) {\n\t\n\t    \t\tthis._y = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget z () {\n\t\n\t    \t\treturn this._z;\n\t\n\t    \t},\n\t\n\t    \tset z ( value ) {\n\t\n\t    \t\tthis._z = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget w () {\n\t\n\t    \t\treturn this._w;\n\t\n\t    \t},\n\t\n\t    \tset w ( value ) {\n\t\n\t    \t\tthis._w = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tset: function ( x, y, z, w ) {\n\t\n\t    \t\tthis._x = x;\n\t    \t\tthis._y = y;\n\t    \t\tthis._z = z;\n\t    \t\tthis._w = w;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( quaternion ) {\n\t\n\t    \t\tthis._x = quaternion.x;\n\t    \t\tthis._y = quaternion.y;\n\t    \t\tthis._z = quaternion.z;\n\t    \t\tthis._w = quaternion.w;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromEuler: function ( euler, update ) {\n\t\n\t    \t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t    \t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\t\n\t    \t\t}\n\t\n\t    \t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t    \t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t    \t\t//\tcontent/SpinCalc.m\n\t\n\t    \t\tvar c1 = Math.cos( euler._x / 2 );\n\t    \t\tvar c2 = Math.cos( euler._y / 2 );\n\t    \t\tvar c3 = Math.cos( euler._z / 2 );\n\t    \t\tvar s1 = Math.sin( euler._x / 2 );\n\t    \t\tvar s2 = Math.sin( euler._y / 2 );\n\t    \t\tvar s3 = Math.sin( euler._z / 2 );\n\t\n\t    \t\tvar order = euler.order;\n\t\n\t    \t\tif ( order === 'XYZ' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'YXZ' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'ZXY' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'ZYX' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'YZX' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'XZY' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( update !== false ) this.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromAxisAngle: function ( axis, angle ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\n\t    \t\t// assumes axis is normalized\n\t\n\t    \t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\t\n\t    \t\tthis._x = axis.x * s;\n\t    \t\tthis._y = axis.y * s;\n\t    \t\tthis._z = axis.z * s;\n\t    \t\tthis._w = Math.cos( halfAngle );\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromRotationMatrix: function ( m ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tvar te = m.elements,\n\t\n\t    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\t\n\t    \t\t\ttrace = m11 + m22 + m33,\n\t    \t\t\ts;\n\t\n\t    \t\tif ( trace > 0 ) {\n\t\n\t    \t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\t\n\t    \t\t\tthis._w = 0.25 / s;\n\t    \t\t\tthis._x = ( m32 - m23 ) * s;\n\t    \t\t\tthis._y = ( m13 - m31 ) * s;\n\t    \t\t\tthis._z = ( m21 - m12 ) * s;\n\t\n\t    \t\t} else if ( m11 > m22 && m11 > m33 ) {\n\t\n\t    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\t\n\t    \t\t\tthis._w = ( m32 - m23 ) / s;\n\t    \t\t\tthis._x = 0.25 * s;\n\t    \t\t\tthis._y = ( m12 + m21 ) / s;\n\t    \t\t\tthis._z = ( m13 + m31 ) / s;\n\t\n\t    \t\t} else if ( m22 > m33 ) {\n\t\n\t    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\t\n\t    \t\t\tthis._w = ( m13 - m31 ) / s;\n\t    \t\t\tthis._x = ( m12 + m21 ) / s;\n\t    \t\t\tthis._y = 0.25 * s;\n\t    \t\t\tthis._z = ( m23 + m32 ) / s;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\t\n\t    \t\t\tthis._w = ( m21 - m12 ) / s;\n\t    \t\t\tthis._x = ( m13 + m31 ) / s;\n\t    \t\t\tthis._y = ( m23 + m32 ) / s;\n\t    \t\t\tthis._z = 0.25 * s;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromUnitVectors: function () {\n\t\n\t    \t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\t\n\t    \t\t// assumes direction vectors vFrom and vTo are normalized\n\t\n\t    \t\tvar v1, r;\n\t\n\t    \t\tvar EPS = 0.000001;\n\t\n\t    \t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\tr = vFrom.dot( vTo ) + 1;\n\t\n\t    \t\t\tif ( r < EPS ) {\n\t\n\t    \t\t\t\tr = 0;\n\t\n\t    \t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\t\n\t    \t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tv1.crossVectors( vFrom, vTo );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis._x = v1.x;\n\t    \t\t\tthis._y = v1.y;\n\t    \t\t\tthis._z = v1.z;\n\t    \t\t\tthis._w = r;\n\t\n\t    \t\t\treturn this.normalize();\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tinverse: function () {\n\t\n\t    \t\treturn this.conjugate().normalize();\n\t\n\t    \t},\n\t\n\t    \tconjugate: function () {\n\t\n\t    \t\tthis._x *= - 1;\n\t    \t\tthis._y *= - 1;\n\t    \t\tthis._z *= - 1;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\tvar l = this.length();\n\t\n\t    \t\tif ( l === 0 ) {\n\t\n\t    \t\t\tthis._x = 0;\n\t    \t\t\tthis._y = 0;\n\t    \t\t\tthis._z = 0;\n\t    \t\t\tthis._w = 1;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tl = 1 / l;\n\t\n\t    \t\t\tthis._x = this._x * l;\n\t    \t\t\tthis._y = this._y * l;\n\t    \t\t\tthis._z = this._z * l;\n\t    \t\t\tthis._w = this._w * l;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( q, p ) {\n\t\n\t    \t\tif ( p !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t    \t\t\treturn this.multiplyQuaternions( q, p );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.multiplyQuaternions( this, q );\n\t\n\t    \t},\n\t\n\t    \tpremultiply: function ( q ) {\n\t\n\t    \t\treturn this.multiplyQuaternions( q, this );\n\t\n\t    \t},\n\t\n\t    \tmultiplyQuaternions: function ( a, b ) {\n\t\n\t    \t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\n\t    \t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t    \t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\t\n\t    \t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t    \t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t    \t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t    \t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tslerp: function ( qb, t ) {\n\t\n\t    \t\tif ( t === 0 ) return this;\n\t    \t\tif ( t === 1 ) return this.copy( qb );\n\t\n\t    \t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\t\n\t    \t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\t\n\t    \t\tif ( cosHalfTheta < 0 ) {\n\t\n\t    \t\t\tthis._w = - qb._w;\n\t    \t\t\tthis._x = - qb._x;\n\t    \t\t\tthis._y = - qb._y;\n\t    \t\t\tthis._z = - qb._z;\n\t\n\t    \t\t\tcosHalfTheta = - cosHalfTheta;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.copy( qb );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( cosHalfTheta >= 1.0 ) {\n\t\n\t    \t\t\tthis._w = w;\n\t    \t\t\tthis._x = x;\n\t    \t\t\tthis._y = y;\n\t    \t\t\tthis._z = z;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\t\n\t    \t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\t\n\t    \t\t\tthis._w = 0.5 * ( w + this._w );\n\t    \t\t\tthis._x = 0.5 * ( x + this._x );\n\t    \t\t\tthis._y = 0.5 * ( y + this._y );\n\t    \t\t\tthis._z = 0.5 * ( z + this._z );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t    \t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t    \t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\t\n\t    \t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t    \t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t    \t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t    \t\tthis._z = ( z * ratioA + this._z * ratioB );\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( quaternion ) {\n\t\n\t    \t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis._x = array[ offset ];\n\t    \t\tthis._y = array[ offset + 1 ];\n\t    \t\tthis._z = array[ offset + 2 ];\n\t    \t\tthis._w = array[ offset + 3 ];\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this._x;\n\t    \t\tarray[ offset + 1 ] = this._y;\n\t    \t\tarray[ offset + 2 ] = this._z;\n\t    \t\tarray[ offset + 3 ] = this._w;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tonChange: function ( callback ) {\n\t\n\t    \t\tthis.onChangeCallback = callback;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tonChangeCallback: function () {}\n\t\n\t    };\n\t\n\t    Object.assign( Quaternion, {\n\t\n\t    \tslerp: function( qa, qb, qm, t ) {\n\t\n\t    \t\treturn qm.copy( qa ).slerp( qb, t );\n\t\n\t    \t},\n\t\n\t    \tslerpFlat: function(\n\t    \t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\t\n\t    \t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\n\t    \t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t    \t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t    \t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t    \t\t\tw0 = src0[ srcOffset0 + 3 ],\n\t\n\t    \t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t    \t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t    \t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t    \t\t\tw1 = src1[ srcOffset1 + 3 ];\n\t\n\t    \t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\t\n\t    \t\t\tvar s = 1 - t,\n\t\n\t    \t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\n\t    \t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t    \t\t\t\tsqrSin = 1 - cos * cos;\n\t\n\t    \t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t    \t\t\tif ( sqrSin > Number.EPSILON ) {\n\t\n\t    \t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t    \t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\t\n\t    \t\t\t\ts = Math.sin( s * len ) / sin;\n\t    \t\t\t\tt = Math.sin( t * len ) / sin;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar tDir = t * dir;\n\t\n\t    \t\t\tx0 = x0 * s + x1 * tDir;\n\t    \t\t\ty0 = y0 * s + y1 * tDir;\n\t    \t\t\tz0 = z0 * s + z1 * tDir;\n\t    \t\t\tw0 = w0 * s + w1 * tDir;\n\t\n\t    \t\t\t// Normalize in case we just did a lerp:\n\t    \t\t\tif ( s === 1 - t ) {\n\t\n\t    \t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\t\n\t    \t\t\t\tx0 *= f;\n\t    \t\t\t\ty0 *= f;\n\t    \t\t\t\tz0 *= f;\n\t    \t\t\t\tw0 *= f;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tdst[ dstOffset ] = x0;\n\t    \t\tdst[ dstOffset + 1 ] = y0;\n\t    \t\tdst[ dstOffset + 2 ] = z0;\n\t    \t\tdst[ dstOffset + 3 ] = w0;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author *kile / http://kile.stravaganza.org/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author egraether / http://egraether.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Vector3( x, y, z ) {\n\t\n\t    \tthis.x = x || 0;\n\t    \tthis.y = y || 0;\n\t    \tthis.z = z || 0;\n\t\n\t    }\n\t\n\t    Vector3.prototype = {\n\t\n\t    \tconstructor: Vector3,\n\t\n\t    \tisVector3: true,\n\t\n\t    \tset: function ( x, y, z ) {\n\t\n\t    \t\tthis.x = x;\n\t    \t\tthis.y = y;\n\t    \t\tthis.z = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.x = scalar;\n\t    \t\tthis.y = scalar;\n\t    \t\tthis.z = scalar;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( x ) {\n\t\n\t    \t\tthis.x = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( y ) {\n\t\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( z ) {\n\t\n\t    \t\tthis.z = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponent: function ( index, value ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: this.x = value; break;\n\t    \t\t\tcase 1: this.y = value; break;\n\t    \t\t\tcase 2: this.z = value; break;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetComponent: function ( index ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: return this.x;\n\t    \t\t\tcase 1: return this.y;\n\t    \t\t\tcase 2: return this.z;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.x, this.y, this.z );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( v ) {\n\t\n\t    \t\tthis.x = v.x;\n\t    \t\tthis.y = v.y;\n\t    \t\tthis.z = v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t    \t\t\treturn this.addVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x += v.x;\n\t    \t\tthis.y += v.y;\n\t    \t\tthis.z += v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.x += s;\n\t    \t\tthis.y += s;\n\t    \t\tthis.z += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x + b.x;\n\t    \t\tthis.y = a.y + b.y;\n\t    \t\tthis.z = a.z + b.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScaledVector: function ( v, s ) {\n\t\n\t    \t\tthis.x += v.x * s;\n\t    \t\tthis.y += v.y * s;\n\t    \t\tthis.z += v.z * s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t    \t\t\treturn this.subVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x -= v.x;\n\t    \t\tthis.y -= v.y;\n\t    \t\tthis.z -= v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubScalar: function ( s ) {\n\t\n\t    \t\tthis.x -= s;\n\t    \t\tthis.y -= s;\n\t    \t\tthis.z -= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x - b.x;\n\t    \t\tthis.y = a.y - b.y;\n\t    \t\tthis.z = a.z - b.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t    \t\t\treturn this.multiplyVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x *= v.x;\n\t    \t\tthis.y *= v.y;\n\t    \t\tthis.z *= v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( scalar ) {\n\t\n\t    \t\tif ( isFinite( scalar ) ) {\n\t\n\t    \t\t\tthis.x *= scalar;\n\t    \t\t\tthis.y *= scalar;\n\t    \t\t\tthis.z *= scalar;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.x = 0;\n\t    \t\t\tthis.y = 0;\n\t    \t\t\tthis.z = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x * b.x;\n\t    \t\tthis.y = a.y * b.y;\n\t    \t\tthis.z = a.z * b.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyEuler: function () {\n\t\n\t    \t\tvar quaternion;\n\t\n\t    \t\treturn function applyEuler( euler ) {\n\t\n\t    \t\t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t    \t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\t\n\t    \t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyAxisAngle: function () {\n\t\n\t    \t\tvar quaternion;\n\t\n\t    \t\treturn function applyAxisAngle( axis, angle ) {\n\t\n\t    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\t\n\t    \t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyMatrix3: function ( m ) {\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t    \t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t    \t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( m ) {\n\t\n\t    \t\t// input: THREE.Matrix4 affine matrix\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n\t    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n\t    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyProjection: function ( m ) {\n\t\n\t    \t\t// input: THREE.Matrix4 projection matrix\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t    \t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\t\n\t    \t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n\t    \t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n\t    \t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyQuaternion: function ( q ) {\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\t\n\t    \t\t// calculate quat * vector\n\t\n\t    \t\tvar ix =  qw * x + qy * z - qz * y;\n\t    \t\tvar iy =  qw * y + qz * x - qx * z;\n\t    \t\tvar iz =  qw * z + qx * y - qy * x;\n\t    \t\tvar iw = - qx * x - qy * y - qz * z;\n\t\n\t    \t\t// calculate result * inverse quat\n\t\n\t    \t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t    \t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t    \t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tproject: function () {\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\treturn function project( camera ) {\n\t\n\t    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t    \t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t    \t\t\treturn this.applyProjection( matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tunproject: function () {\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\treturn function unproject( camera ) {\n\t\n\t    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t    \t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t    \t\t\treturn this.applyProjection( matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttransformDirection: function ( m ) {\n\t\n\t    \t\t// input: THREE.Matrix4 affine matrix\n\t    \t\t// vector interpreted as a direction\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\t\n\t    \t\treturn this.normalize();\n\t\n\t    \t},\n\t\n\t    \tdivide: function ( v ) {\n\t\n\t    \t\tthis.x /= v.x;\n\t    \t\tthis.y /= v.y;\n\t    \t\tthis.z /= v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivideScalar: function ( scalar ) {\n\t\n\t    \t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t    \t},\n\t\n\t    \tmin: function ( v ) {\n\t\n\t    \t\tthis.x = Math.min( this.x, v.x );\n\t    \t\tthis.y = Math.min( this.y, v.y );\n\t    \t\tthis.z = Math.min( this.z, v.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmax: function ( v ) {\n\t\n\t    \t\tthis.x = Math.max( this.x, v.x );\n\t    \t\tthis.y = Math.max( this.y, v.y );\n\t    \t\tthis.z = Math.max( this.z, v.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclamp: function ( min, max ) {\n\t\n\t    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclampScalar: function () {\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t    \t\t\tif ( min === undefined ) {\n\t\n\t    \t\t\t\tmin = new Vector3();\n\t    \t\t\t\tmax = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmin.set( minVal, minVal, minVal );\n\t    \t\t\tmax.set( maxVal, maxVal, maxVal );\n\t\n\t    \t\t\treturn this.clamp( min, max );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclampLength: function ( min, max ) {\n\t\n\t    \t\tvar length = this.length();\n\t\n\t    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\t\n\t    \t},\n\t\n\t    \tfloor: function () {\n\t\n\t    \t\tthis.x = Math.floor( this.x );\n\t    \t\tthis.y = Math.floor( this.y );\n\t    \t\tthis.z = Math.floor( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tceil: function () {\n\t\n\t    \t\tthis.x = Math.ceil( this.x );\n\t    \t\tthis.y = Math.ceil( this.y );\n\t    \t\tthis.z = Math.ceil( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tround: function () {\n\t\n\t    \t\tthis.x = Math.round( this.x );\n\t    \t\tthis.y = Math.round( this.y );\n\t    \t\tthis.z = Math.round( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \troundToZero: function () {\n\t\n\t    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.x = - this.x;\n\t    \t\tthis.y = - this.y;\n\t    \t\tthis.z = - this.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\t\n\t    \t},\n\t\n\t    \tlengthManhattan: function () {\n\t\n\t    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\treturn this.divideScalar( this.length() );\n\t\n\t    \t},\n\t\n\t    \tsetLength: function ( length ) {\n\t\n\t    \t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( v, alpha ) {\n\t\n\t    \t\tthis.x += ( v.x - this.x ) * alpha;\n\t    \t\tthis.y += ( v.y - this.y ) * alpha;\n\t    \t\tthis.z += ( v.z - this.z ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t    \t},\n\t\n\t    \tcross: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t    \t\t\treturn this.crossVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t\n\t    \t\tthis.x = y * v.z - z * v.y;\n\t    \t\tthis.y = z * v.x - x * v.z;\n\t    \t\tthis.z = x * v.y - y * v.x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcrossVectors: function ( a, b ) {\n\t\n\t    \t\tvar ax = a.x, ay = a.y, az = a.z;\n\t    \t\tvar bx = b.x, by = b.y, bz = b.z;\n\t\n\t    \t\tthis.x = ay * bz - az * by;\n\t    \t\tthis.y = az * bx - ax * bz;\n\t    \t\tthis.z = ax * by - ay * bx;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tprojectOnVector: function ( vector ) {\n\t\n\t    \t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\t\n\t    \t\treturn this.copy( vector ).multiplyScalar( scalar );\n\t\n\t    \t},\n\t\n\t    \tprojectOnPlane: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function projectOnPlane( planeNormal ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\t\n\t    \t\t\treturn this.sub( v1 );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \treflect: function () {\n\t\n\t    \t\t// reflect incident vector off plane orthogonal to normal\n\t    \t\t// normal is assumed to have unit length\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function reflect( normal ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tangleTo: function ( v ) {\n\t\n\t    \t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\t\n\t    \t\t// clamp, to handle numerical problems\n\t\n\t    \t\treturn Math.acos( exports.Math.clamp( theta, - 1, 1 ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceTo: function ( v ) {\n\t\n\t    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceToSquared: function ( v ) {\n\t\n\t    \t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\t\n\t    \t\treturn dx * dx + dy * dy + dz * dz;\n\t\n\t    \t},\n\t\n\t    \tdistanceToManhattan: function ( v ) {\n\t\n\t    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\t\n\t    \t},\n\t\n\t    \tsetFromSpherical: function( s ) {\n\t\n\t    \t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\t\n\t    \t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t    \t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t    \t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrixPosition: function ( m ) {\n\t\n\t    \t\treturn this.setFromMatrixColumn( m, 3 );\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrixScale: function ( m ) {\n\t\n\t    \t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t    \t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t    \t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\t\n\t    \t\tthis.x = sx;\n\t    \t\tthis.y = sy;\n\t    \t\tthis.z = sz;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrixColumn: function ( m, index ) {\n\t\n\t    \t\tif ( typeof m === 'number' ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n\t    \t\t\tvar temp = m\n\t    \t\t\tm = index;\n\t    \t\t\tindex = temp;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.fromArray( m.elements, index * 4 );\n\t\n\t    \t},\n\t\n\t    \tequals: function ( v ) {\n\t\n\t    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.x = array[ offset ];\n\t    \t\tthis.y = array[ offset + 1 ];\n\t    \t\tthis.z = array[ offset + 2 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.x;\n\t    \t\tarray[ offset + 1 ] = this.y;\n\t    \t\tarray[ offset + 2 ] = this.z;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tindex = index * attribute.itemSize + offset;\n\t\n\t    \t\tthis.x = attribute.array[ index ];\n\t    \t\tthis.y = attribute.array[ index + 1 ];\n\t    \t\tthis.z = attribute.array[ index + 2 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author supereggbert / http://www.paulbrunt.co.uk/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author jordi_ros / http://plattsoft.com\n\t     * @author D1plo1d / http://github.com/D1plo1d\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author timknip / http://www.floorplanner.com/\n\t     * @author bhouston / http://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Matrix4() {\n\t\n\t    \tthis.elements = new Float32Array( [\n\t\n\t    \t\t1, 0, 0, 0,\n\t    \t\t0, 1, 0, 0,\n\t    \t\t0, 0, 1, 0,\n\t    \t\t0, 0, 0, 1\n\t\n\t    \t] );\n\t\n\t    \tif ( arguments.length > 0 ) {\n\t\n\t    \t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Matrix4.prototype = {\n\t\n\t    \tconstructor: Matrix4,\n\t\n\t    \tisMatrix4: true,\n\t\n\t    \tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t    \t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t    \t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t    \t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tidentity: function () {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0, 0, 0,\n\t    \t\t\t0, 1, 0, 0,\n\t    \t\t\t0, 0, 1, 0,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new Matrix4().fromArray( this.elements );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( m ) {\n\t\n\t    \t\tthis.elements.set( m.elements );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyPosition: function ( m ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar me = m.elements;\n\t\n\t    \t\tte[ 12 ] = me[ 12 ];\n\t    \t\tte[ 13 ] = me[ 13 ];\n\t    \t\tte[ 14 ] = me[ 14 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \textractBasis: function ( xAxis, yAxis, zAxis ) {\n\t\n\t    \t\txAxis.setFromMatrixColumn( this, 0 );\n\t    \t\tyAxis.setFromMatrixColumn( this, 1 );\n\t    \t\tzAxis.setFromMatrixColumn( this, 2 );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\t\n\t    \t\tthis.set(\n\t    \t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t    \t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t    \t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t    \t\t\t0,       0,       0,       1\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \textractRotation: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function extractRotation( m ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\tvar te = this.elements;\n\t    \t\t\tvar me = m.elements;\n\t\n\t    \t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t    \t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t    \t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\t\n\t    \t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t    \t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t    \t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\n\t    \t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t    \t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t    \t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\n\t    \t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t    \t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t    \t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmakeRotationFromEuler: function ( euler ) {\n\t\n\t    \t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t    \t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t    \t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t    \t\tvar e = Math.cos( z ), f = Math.sin( z );\n\t\n\t    \t\tif ( euler.order === 'XYZ' ) {\n\t\n\t    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = - c * f;\n\t    \t\t\tte[ 8 ] = d;\n\t\n\t    \t\t\tte[ 1 ] = af + be * d;\n\t    \t\t\tte[ 5 ] = ae - bf * d;\n\t    \t\t\tte[ 9 ] = - b * c;\n\t\n\t    \t\t\tte[ 2 ] = bf - ae * d;\n\t    \t\t\tte[ 6 ] = be + af * d;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'YXZ' ) {\n\t\n\t    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\t\n\t    \t\t\tte[ 0 ] = ce + df * b;\n\t    \t\t\tte[ 4 ] = de * b - cf;\n\t    \t\t\tte[ 8 ] = a * d;\n\t\n\t    \t\t\tte[ 1 ] = a * f;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = - b;\n\t\n\t    \t\t\tte[ 2 ] = cf * b - de;\n\t    \t\t\tte[ 6 ] = df + ce * b;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'ZXY' ) {\n\t\n\t    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\t\n\t    \t\t\tte[ 0 ] = ce - df * b;\n\t    \t\t\tte[ 4 ] = - a * f;\n\t    \t\t\tte[ 8 ] = de + cf * b;\n\t\n\t    \t\t\tte[ 1 ] = cf + de * b;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = df - ce * b;\n\t\n\t    \t\t\tte[ 2 ] = - a * d;\n\t    \t\t\tte[ 6 ] = b;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'ZYX' ) {\n\t\n\t    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = be * d - af;\n\t    \t\t\tte[ 8 ] = ae * d + bf;\n\t\n\t    \t\t\tte[ 1 ] = c * f;\n\t    \t\t\tte[ 5 ] = bf * d + ae;\n\t    \t\t\tte[ 9 ] = af * d - be;\n\t\n\t    \t\t\tte[ 2 ] = - d;\n\t    \t\t\tte[ 6 ] = b * c;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'YZX' ) {\n\t\n\t    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = bd - ac * f;\n\t    \t\t\tte[ 8 ] = bc * f + ad;\n\t\n\t    \t\t\tte[ 1 ] = f;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = - b * e;\n\t\n\t    \t\t\tte[ 2 ] = - d * e;\n\t    \t\t\tte[ 6 ] = ad * f + bc;\n\t    \t\t\tte[ 10 ] = ac - bd * f;\n\t\n\t    \t\t} else if ( euler.order === 'XZY' ) {\n\t\n\t    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = - f;\n\t    \t\t\tte[ 8 ] = d * e;\n\t\n\t    \t\t\tte[ 1 ] = ac * f + bd;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = ad * f - bc;\n\t\n\t    \t\t\tte[ 2 ] = bc * f - ad;\n\t    \t\t\tte[ 6 ] = b * e;\n\t    \t\t\tte[ 10 ] = bd * f + ac;\n\t\n\t    \t\t}\n\t\n\t    \t\t// last column\n\t    \t\tte[ 3 ] = 0;\n\t    \t\tte[ 7 ] = 0;\n\t    \t\tte[ 11 ] = 0;\n\t\n\t    \t\t// bottom row\n\t    \t\tte[ 12 ] = 0;\n\t    \t\tte[ 13 ] = 0;\n\t    \t\tte[ 14 ] = 0;\n\t    \t\tte[ 15 ] = 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationFromQuaternion: function ( q ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n\t    \t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t    \t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t    \t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t    \t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\t\n\t    \t\tte[ 0 ] = 1 - ( yy + zz );\n\t    \t\tte[ 4 ] = xy - wz;\n\t    \t\tte[ 8 ] = xz + wy;\n\t\n\t    \t\tte[ 1 ] = xy + wz;\n\t    \t\tte[ 5 ] = 1 - ( xx + zz );\n\t    \t\tte[ 9 ] = yz - wx;\n\t\n\t    \t\tte[ 2 ] = xz - wy;\n\t    \t\tte[ 6 ] = yz + wx;\n\t    \t\tte[ 10 ] = 1 - ( xx + yy );\n\t\n\t    \t\t// last column\n\t    \t\tte[ 3 ] = 0;\n\t    \t\tte[ 7 ] = 0;\n\t    \t\tte[ 11 ] = 0;\n\t\n\t    \t\t// bottom row\n\t    \t\tte[ 12 ] = 0;\n\t    \t\tte[ 13 ] = 0;\n\t    \t\tte[ 14 ] = 0;\n\t    \t\tte[ 15 ] = 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\tvar x, y, z;\n\t\n\t    \t\treturn function lookAt( eye, target, up ) {\n\t\n\t    \t\t\tif ( x === undefined ) {\n\t\n\t    \t\t\t\tx = new Vector3();\n\t    \t\t\t\ty = new Vector3();\n\t    \t\t\t\tz = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar te = this.elements;\n\t\n\t    \t\t\tz.subVectors( eye, target ).normalize();\n\t\n\t    \t\t\tif ( z.lengthSq() === 0 ) {\n\t\n\t    \t\t\t\tz.z = 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tx.crossVectors( up, z ).normalize();\n\t\n\t    \t\t\tif ( x.lengthSq() === 0 ) {\n\t\n\t    \t\t\t\tz.z += 0.0001;\n\t    \t\t\t\tx.crossVectors( up, z ).normalize();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ty.crossVectors( z, x );\n\t\n\t\n\t    \t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t    \t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t    \t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmultiply: function ( m, n ) {\n\t\n\t    \t\tif ( n !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t    \t\t\treturn this.multiplyMatrices( m, n );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.multiplyMatrices( this, m );\n\t\n\t    \t},\n\t\n\t    \tpremultiply: function ( m ) {\n\t\n\t    \t\treturn this.multiplyMatrices( m, this );\n\t\n\t    \t},\n\t\n\t    \tmultiplyMatrices: function ( a, b ) {\n\t\n\t    \t\tvar ae = a.elements;\n\t    \t\tvar be = b.elements;\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t    \t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t    \t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t    \t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\t\n\t    \t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t    \t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t    \t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t    \t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\t\n\t    \t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t    \t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t    \t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t    \t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\n\t    \t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t    \t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t    \t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t    \t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\n\t    \t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t    \t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t    \t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t    \t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\n\t    \t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t    \t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t    \t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t    \t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyToArray: function ( a, b, r ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tthis.multiplyMatrices( a, b );\n\t\n\t    \t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n\t    \t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n\t    \t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n\t    \t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( s ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t    \t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t    \t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t    \t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyToVector3Array: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToVector3Array( array, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = array.length;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\t\n\t    \t\t\t\tv1.fromArray( array, j );\n\t    \t\t\t\tv1.applyMatrix4( this );\n\t    \t\t\t\tv1.toArray( array, j );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn array;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyToBuffer: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\t\n\t    \t\t\t\tv1.x = buffer.getX( j );\n\t    \t\t\t\tv1.y = buffer.getY( j );\n\t    \t\t\t\tv1.z = buffer.getZ( j );\n\t\n\t    \t\t\t\tv1.applyMatrix4( this );\n\t\n\t    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn buffer;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tdeterminant: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t    \t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t    \t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t    \t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\t\n\t    \t\t//TODO: make this more efficient\n\t    \t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\t\n\t    \t\treturn (\n\t    \t\t\tn41 * (\n\t    \t\t\t\t+ n14 * n23 * n32\n\t    \t\t\t\t - n13 * n24 * n32\n\t    \t\t\t\t - n14 * n22 * n33\n\t    \t\t\t\t + n12 * n24 * n33\n\t    \t\t\t\t + n13 * n22 * n34\n\t    \t\t\t\t - n12 * n23 * n34\n\t    \t\t\t) +\n\t    \t\t\tn42 * (\n\t    \t\t\t\t+ n11 * n23 * n34\n\t    \t\t\t\t - n11 * n24 * n33\n\t    \t\t\t\t + n14 * n21 * n33\n\t    \t\t\t\t - n13 * n21 * n34\n\t    \t\t\t\t + n13 * n24 * n31\n\t    \t\t\t\t - n14 * n23 * n31\n\t    \t\t\t) +\n\t    \t\t\tn43 * (\n\t    \t\t\t\t+ n11 * n24 * n32\n\t    \t\t\t\t - n11 * n22 * n34\n\t    \t\t\t\t - n14 * n21 * n32\n\t    \t\t\t\t + n12 * n21 * n34\n\t    \t\t\t\t + n14 * n22 * n31\n\t    \t\t\t\t - n12 * n24 * n31\n\t    \t\t\t) +\n\t    \t\t\tn44 * (\n\t    \t\t\t\t- n13 * n22 * n31\n\t    \t\t\t\t - n11 * n23 * n32\n\t    \t\t\t\t + n11 * n22 * n33\n\t    \t\t\t\t + n13 * n21 * n32\n\t    \t\t\t\t - n12 * n21 * n33\n\t    \t\t\t\t + n12 * n23 * n31\n\t    \t\t\t)\n\t\n\t    \t\t);\n\t\n\t    \t},\n\t\n\t    \ttranspose: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar tmp;\n\t\n\t    \t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t    \t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t    \t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\t\n\t    \t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t    \t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t    \t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tflattenToArrayOffset: function ( array, offset ) {\n\t\n\t    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t    \t\t\t\t\"- just use .toArray instead.\" );\n\t\n\t    \t\treturn this.toArray( array, offset );\n\t\n\t    \t},\n\t\n\t    \tgetPosition: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function getPosition() {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\n\t    \t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetPosition: function ( v ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 12 ] = v.x;\n\t    \t\tte[ 13 ] = v.y;\n\t    \t\tte[ 14 ] = v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetInverse: function ( m, throwOnDegenerate ) {\n\t\n\t    \t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t    \t\tvar te = this.elements,\n\t    \t\t\tme = m.elements,\n\t\n\t    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t    \t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t    \t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t    \t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\t\n\t    \t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t    \t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t    \t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t    \t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\n\t    \t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\n\t    \t\tif ( det === 0 ) {\n\t\n\t    \t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\t\n\t    \t\t\tif ( throwOnDegenerate === true ) {\n\t\n\t    \t\t\t\tthrow new Error( msg );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tconsole.warn( msg );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this.identity();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar detInv = 1 / det;\n\t\n\t    \t\tte[ 0 ] = t11 * detInv;\n\t    \t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t    \t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t    \t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\t\n\t    \t\tte[ 4 ] = t12 * detInv;\n\t    \t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t    \t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t    \t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\t\n\t    \t\tte[ 8 ] = t13 * detInv;\n\t    \t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t    \t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t    \t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\t\n\t    \t\tte[ 12 ] = t14 * detInv;\n\t    \t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t    \t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t    \t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tscale: function ( v ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar x = v.x, y = v.y, z = v.z;\n\t\n\t    \t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t    \t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t    \t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t    \t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetMaxScaleOnAxis: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t    \t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t    \t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\t\n\t    \t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\t\n\t    \t},\n\t\n\t    \tmakeTranslation: function ( x, y, z ) {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0, 0, x,\n\t    \t\t\t0, 1, 0, y,\n\t    \t\t\t0, 0, 1, z,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationX: function ( theta ) {\n\t\n\t    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0,  0, 0,\n\t    \t\t\t0, c, - s, 0,\n\t    \t\t\t0, s,  c, 0,\n\t    \t\t\t0, 0,  0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationY: function ( theta ) {\n\t\n\t    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t c, 0, s, 0,\n\t    \t\t\t 0, 1, 0, 0,\n\t    \t\t\t- s, 0, c, 0,\n\t    \t\t\t 0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationZ: function ( theta ) {\n\t\n\t    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tc, - s, 0, 0,\n\t    \t\t\ts,  c, 0, 0,\n\t    \t\t\t0,  0, 1, 0,\n\t    \t\t\t0,  0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationAxis: function ( axis, angle ) {\n\t\n\t    \t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\n\t    \t\tvar c = Math.cos( angle );\n\t    \t\tvar s = Math.sin( angle );\n\t    \t\tvar t = 1 - c;\n\t    \t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t    \t\tvar tx = t * x, ty = t * y;\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t    \t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t    \t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\t return this;\n\t\n\t    \t},\n\t\n\t    \tmakeScale: function ( x, y, z ) {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tx, 0, 0, 0,\n\t    \t\t\t0, y, 0, 0,\n\t    \t\t\t0, 0, z, 0,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcompose: function ( position, quaternion, scale ) {\n\t\n\t    \t\tthis.makeRotationFromQuaternion( quaternion );\n\t    \t\tthis.scale( scale );\n\t    \t\tthis.setPosition( position );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdecompose: function () {\n\t\n\t    \t\tvar vector, matrix;\n\t\n\t    \t\treturn function decompose( position, quaternion, scale ) {\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tvector = new Vector3();\n\t    \t\t\t\tmatrix = new Matrix4();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar te = this.elements;\n\t\n\t    \t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t    \t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t    \t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\t\n\t    \t\t\t// if determine is negative, we need to invert one scale\n\t    \t\t\tvar det = this.determinant();\n\t    \t\t\tif ( det < 0 ) {\n\t\n\t    \t\t\t\tsx = - sx;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tposition.x = te[ 12 ];\n\t    \t\t\tposition.y = te[ 13 ];\n\t    \t\t\tposition.z = te[ 14 ];\n\t\n\t    \t\t\t// scale the rotation part\n\t\n\t    \t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\t\n\t    \t\t\tvar invSX = 1 / sx;\n\t    \t\t\tvar invSY = 1 / sy;\n\t    \t\t\tvar invSZ = 1 / sz;\n\t\n\t    \t\t\tmatrix.elements[ 0 ] *= invSX;\n\t    \t\t\tmatrix.elements[ 1 ] *= invSX;\n\t    \t\t\tmatrix.elements[ 2 ] *= invSX;\n\t\n\t    \t\t\tmatrix.elements[ 4 ] *= invSY;\n\t    \t\t\tmatrix.elements[ 5 ] *= invSY;\n\t    \t\t\tmatrix.elements[ 6 ] *= invSY;\n\t\n\t    \t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t    \t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t    \t\t\tmatrix.elements[ 10 ] *= invSZ;\n\t\n\t    \t\t\tquaternion.setFromRotationMatrix( matrix );\n\t\n\t    \t\t\tscale.x = sx;\n\t    \t\t\tscale.y = sy;\n\t    \t\t\tscale.z = sz;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar x = 2 * near / ( right - left );\n\t    \t\tvar y = 2 * near / ( top - bottom );\n\t\n\t    \t\tvar a = ( right + left ) / ( right - left );\n\t    \t\tvar b = ( top + bottom ) / ( top - bottom );\n\t    \t\tvar c = - ( far + near ) / ( far - near );\n\t    \t\tvar d = - 2 * far * near / ( far - near );\n\t\n\t    \t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t    \t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakePerspective: function ( fov, aspect, near, far ) {\n\t\n\t    \t\tvar ymax = near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 );\n\t    \t\tvar ymin = - ymax;\n\t    \t\tvar xmin = ymin * aspect;\n\t    \t\tvar xmax = ymax * aspect;\n\t\n\t    \t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\t\n\t    \t},\n\t\n\t    \tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar w = 1.0 / ( right - left );\n\t    \t\tvar h = 1.0 / ( top - bottom );\n\t    \t\tvar p = 1.0 / ( far - near );\n\t\n\t    \t\tvar x = ( right + left ) * w;\n\t    \t\tvar y = ( top + bottom ) * h;\n\t    \t\tvar z = ( far + near ) * p;\n\t\n\t    \t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t    \t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( matrix ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar me = matrix.elements;\n\t\n\t    \t\tfor ( var i = 0; i < 16; i ++ ) {\n\t\n\t    \t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tfor( var i = 0; i < 16; i ++ ) {\n\t\n\t    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tarray[ offset ] = te[ 0 ];\n\t    \t\tarray[ offset + 1 ] = te[ 1 ];\n\t    \t\tarray[ offset + 2 ] = te[ 2 ];\n\t    \t\tarray[ offset + 3 ] = te[ 3 ];\n\t\n\t    \t\tarray[ offset + 4 ] = te[ 4 ];\n\t    \t\tarray[ offset + 5 ] = te[ 5 ];\n\t    \t\tarray[ offset + 6 ] = te[ 6 ];\n\t    \t\tarray[ offset + 7 ] = te[ 7 ];\n\t\n\t    \t\tarray[ offset + 8 ]  = te[ 8 ];\n\t    \t\tarray[ offset + 9 ]  = te[ 9 ];\n\t    \t\tarray[ offset + 10 ] = te[ 10 ];\n\t    \t\tarray[ offset + 11 ] = te[ 11 ];\n\t\n\t    \t\tarray[ offset + 12 ] = te[ 12 ];\n\t    \t\tarray[ offset + 13 ] = te[ 13 ];\n\t    \t\tarray[ offset + 14 ] = te[ 14 ];\n\t    \t\tarray[ offset + 15 ] = te[ 15 ];\n\t\n\t    \t\treturn array;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\t\n\t    \timages = images !== undefined ? images : [];\n\t    \tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\n\t    \tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t    \tthis.flipY = false;\n\t\n\t    }\n\t\n\t    CubeTexture.prototype = Object.create( Texture.prototype );\n\t    CubeTexture.prototype.constructor = CubeTexture;\n\t\n\t    CubeTexture.prototype.isCubeTexture = true;\n\t\n\t    Object.defineProperty( CubeTexture.prototype, 'images', {\n\t\n\t    \tget: function () {\n\t\n\t    \t\treturn this.image;\n\t\n\t    \t},\n\t\n\t    \tset: function ( value ) {\n\t\n\t    \t\tthis.image = value;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var emptyTexture = new Texture();\n\t    var emptyCubeTexture = new CubeTexture();\n\t\n\t    // --- Base for inner nodes (including the root) ---\n\t\n\t    function UniformContainer() {\n\t\n\t    \tthis.seq = [];\n\t    \tthis.map = {};\n\t\n\t    }\n\t\n\t    // --- Utilities ---\n\t\n\t    // Array Caches (provide typed arrays for temporary by size)\n\t\n\t    var arrayCacheF32 = [];\n\t    var arrayCacheI32 = [];\n\t\n\t    // Flattening for arrays of vectors and matrices\n\t\n\t    function flatten( array, nBlocks, blockSize ) {\n\t\n\t    \tvar firstElem = array[ 0 ];\n\t\n\t    \tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t    \t// unoptimized: ! isNaN( firstElem )\n\t    \t// see http://jacksondunstan.com/articles/983\n\t\n\t    \tvar n = nBlocks * blockSize,\n\t    \t\tr = arrayCacheF32[ n ];\n\t\n\t    \tif ( r === undefined ) {\n\t\n\t    \t\tr = new Float32Array( n );\n\t    \t\tarrayCacheF32[ n ] = r;\n\t\n\t    \t}\n\t\n\t    \tif ( nBlocks !== 0 ) {\n\t\n\t    \t\tfirstElem.toArray( r, 0 );\n\t\n\t    \t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\t\n\t    \t\t\toffset += blockSize;\n\t    \t\t\tarray[ i ].toArray( r, offset );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn r;\n\t\n\t    }\n\t\n\t    // Texture unit allocation\n\t\n\t    function allocTexUnits( renderer, n ) {\n\t\n\t    \tvar r = arrayCacheI32[ n ];\n\t\n\t    \tif ( r === undefined ) {\n\t\n\t    \t\tr = new Int32Array( n );\n\t    \t\tarrayCacheI32[ n ] = r;\n\t\n\t    \t}\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i )\n\t    \t\tr[ i ] = renderer.allocTextureUnit();\n\t\n\t    \treturn r;\n\t\n\t    }\n\t\n\t    // --- Setters ---\n\t\n\t    // Note: Defining these methods externally, because they come in a bunch\n\t    // and this way their names minify.\n\t\n\t    // Single scalar\n\t\n\t    function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }\n\t    function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }\n\t\n\t    // Single float vector (from flat array or THREE.VectorN)\n\t\n\t    function setValue2fv( gl, v ) {\n\t\n\t    \tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n\t    \telse gl.uniform2f( this.addr, v.x, v.y );\n\t\n\t    }\n\t\n\t    function setValue3fv( gl, v ) {\n\t\n\t    \tif ( v.x !== undefined )\n\t    \t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\t    \telse if ( v.r !== undefined )\n\t    \t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\t    \telse\n\t    \t\tgl.uniform3fv( this.addr, v );\n\t\n\t    }\n\t\n\t    function setValue4fv( gl, v ) {\n\t\n\t    \tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n\t    \telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\t\n\t    }\n\t\n\t    // Single matrix (from flat array or MatrixN)\n\t\n\t    function setValue2fm( gl, v ) {\n\t\n\t    \tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\t\n\t    }\n\t\n\t    function setValue3fm( gl, v ) {\n\t\n\t    \tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\t\n\t    }\n\t\n\t    function setValue4fm( gl, v ) {\n\t\n\t    \tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\t\n\t    }\n\t\n\t    // Single texture (2D / Cube)\n\t\n\t    function setValueT1( gl, v, renderer ) {\n\t\n\t    \tvar unit = renderer.allocTextureUnit();\n\t    \tgl.uniform1i( this.addr, unit );\n\t    \trenderer.setTexture2D( v || emptyTexture, unit );\n\t\n\t    }\n\t\n\t    function setValueT6( gl, v, renderer ) {\n\t\n\t    \tvar unit = renderer.allocTextureUnit();\n\t    \tgl.uniform1i( this.addr, unit );\n\t    \trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\t\n\t    }\n\t\n\t    // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\t\n\t    function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }\n\t    function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }\n\t    function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }\n\t\n\t    // Helper to pick the right setter for the singular case\n\t\n\t    function getSingularSetter( type ) {\n\t\n\t    \tswitch ( type ) {\n\t\n\t    \t\tcase 0x1406: return setValue1f; // FLOAT\n\t    \t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t    \t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t    \t\tcase 0x8b52: return setValue4fv; // _VEC4\n\t\n\t    \t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t    \t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t    \t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\t\n\t    \t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n\t    \t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\t\n\t    \t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // Array of scalars\n\t\n\t    function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }\n\t    function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }\n\t\n\t    // Array of vectors (flat or from THREE classes)\n\t\n\t    function setValueV2a( gl, v ) {\n\t\n\t    \tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\t\n\t    }\n\t\n\t    function setValueV3a( gl, v ) {\n\t\n\t    \tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\t\n\t    }\n\t\n\t    function setValueV4a( gl, v ) {\n\t\n\t    \tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\t\n\t    }\n\t\n\t    // Array of matrices (flat or from THREE clases)\n\t\n\t    function setValueM2a( gl, v ) {\n\t\n\t    \tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\t\n\t    }\n\t\n\t    function setValueM3a( gl, v ) {\n\t\n\t    \tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\t\n\t    }\n\t\n\t    function setValueM4a( gl, v ) {\n\t\n\t    \tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\t\n\t    }\n\t\n\t    // Array of textures (2D / Cube)\n\t\n\t    function setValueT1a( gl, v, renderer ) {\n\t\n\t    \tvar n = v.length,\n\t    \t\tunits = allocTexUnits( renderer, n );\n\t\n\t    \tgl.uniform1iv( this.addr, units );\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    function setValueT6a( gl, v, renderer ) {\n\t\n\t    \tvar n = v.length,\n\t    \t\tunits = allocTexUnits( renderer, n );\n\t\n\t    \tgl.uniform1iv( this.addr, units );\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // Helper to pick the right setter for a pure (bottom-level) array\n\t\n\t    function getPureArraySetter( type ) {\n\t\n\t    \tswitch ( type ) {\n\t\n\t    \t\tcase 0x1406: return setValue1fv; // FLOAT\n\t    \t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t    \t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t    \t\tcase 0x8b52: return setValueV4a; // _VEC4\n\t\n\t    \t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t    \t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t    \t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\t\n\t    \t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t    \t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\t\n\t    \t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // --- Uniform Classes ---\n\t\n\t    function SingleUniform( id, activeInfo, addr ) {\n\t\n\t    \tthis.id = id;\n\t    \tthis.addr = addr;\n\t    \tthis.setValue = getSingularSetter( activeInfo.type );\n\t\n\t    \t// this.path = activeInfo.name; // DEBUG\n\t\n\t    }\n\t\n\t    function PureArrayUniform( id, activeInfo, addr ) {\n\t\n\t    \tthis.id = id;\n\t    \tthis.addr = addr;\n\t    \tthis.size = activeInfo.size;\n\t    \tthis.setValue = getPureArraySetter( activeInfo.type );\n\t\n\t    \t// this.path = activeInfo.name; // DEBUG\n\t\n\t    }\n\t\n\t    function StructuredUniform( id ) {\n\t\n\t    \tthis.id = id;\n\t\n\t    \tUniformContainer.call( this ); // mix-in\n\t\n\t    }\n\t\n\t    StructuredUniform.prototype.setValue = function( gl, value ) {\n\t\n\t    \t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t    \t// are not allowed in structured uniforms.\n\t\n\t    \tvar seq = this.seq;\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ];\n\t    \t\tu.setValue( gl, value[ u.id ] );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    // --- Top-level ---\n\t\n\t    // Parser - builds up the property tree from the path strings\n\t\n\t    var RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\t\n\t    // extracts\n\t    // \t- the identifier (member name or array index)\n\t    //  - followed by an optional right bracket (found when array index)\n\t    //  - followed by an optional left bracket or dot (type of subscript)\n\t    //\n\t    // Note: These portions can be read in a non-overlapping fashion and\n\t    // allow straightforward parsing of the hierarchy that WebGL encodes\n\t    // in the uniform names.\n\t\n\t    function addUniform( container, uniformObject ) {\n\t\n\t    \tcontainer.seq.push( uniformObject );\n\t    \tcontainer.map[ uniformObject.id ] = uniformObject;\n\t\n\t    }\n\t\n\t    function parseUniform( activeInfo, addr, container ) {\n\t\n\t    \tvar path = activeInfo.name,\n\t    \t\tpathLength = path.length;\n\t\n\t    \t// reset RegExp object, because of the early exit of a previous run\n\t    \tRePathPart.lastIndex = 0;\n\t\n\t    \tfor (; ;) {\n\t\n\t    \t\tvar match = RePathPart.exec( path ),\n\t    \t\t\tmatchEnd = RePathPart.lastIndex,\n\t\n\t    \t\t\tid = match[ 1 ],\n\t    \t\t\tidIsIndex = match[ 2 ] === ']',\n\t    \t\t\tsubscript = match[ 3 ];\n\t\n\t    \t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\t\n\t    \t\tif ( subscript === undefined ||\n\t    \t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n\t    \t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\n\t    \t\t\taddUniform( container, subscript === undefined ?\n\t    \t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t    \t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\t\n\t    \t\t\tbreak;\n\t\n\t    \t\t} else {\n\t    \t\t\t// step into inner node / create it in case it doesn't exist\n\t\n\t    \t\t\tvar map = container.map,\n\t    \t\t\t\tnext = map[ id ];\n\t\n\t    \t\t\tif ( next === undefined ) {\n\t\n\t    \t\t\t\tnext = new StructuredUniform( id );\n\t    \t\t\t\taddUniform( container, next );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcontainer = next;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // Root Container\n\t\n\t    function WebGLUniforms( gl, program, renderer ) {\n\t\n\t    \tUniformContainer.call( this );\n\t\n\t    \tthis.renderer = renderer;\n\t\n\t    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\tvar info = gl.getActiveUniform( program, i ),\n\t    \t\t\tpath = info.name,\n\t    \t\t\taddr = gl.getUniformLocation( program, path );\n\t\n\t    \t\tparseUniform( info, addr, this );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    WebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\t\n\t    \tvar u = this.map[ name ];\n\t\n\t    \tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\t\n\t    };\n\t\n\t    WebGLUniforms.prototype.set = function( gl, object, name ) {\n\t\n\t    \tvar u = this.map[ name ];\n\t\n\t    \tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\t\n\t    };\n\t\n\t    WebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\t\n\t    \tvar v = object[ name ];\n\t\n\t    \tif ( v !== undefined ) this.setValue( gl, name, v );\n\t\n\t    };\n\t\n\t\n\t    // Static interface\n\t\n\t    WebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ],\n\t    \t\t\tv = values[ u.id ];\n\t\n\t    \t\tif ( v.needsUpdate !== false ) {\n\t    \t\t\t// note: always updating when .needsUpdate is undefined\n\t\n\t    \t\t\tu.setValue( gl, v.value, renderer );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    WebGLUniforms.seqWithValue = function( seq, values ) {\n\t\n\t    \tvar r = [];\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ];\n\t    \t\tif ( u.id in values ) r.push( u );\n\t\n\t    \t}\n\t\n\t    \treturn r;\n\t\n\t    };\n\t\n\t    WebGLUniforms.splitDynamic = function( seq, values ) {\n\t\n\t    \tvar r = null,\n\t    \t\tn = seq.length,\n\t    \t\tw = 0;\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ],\n\t    \t\t\tv = values[ u.id ];\n\t\n\t    \t\tif ( v && v.dynamic === true ) {\n\t\n\t    \t\t\tif ( r === null ) r = [];\n\t    \t\t\tr.push( u );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// in-place compact 'seq', removing the matches\n\t    \t\t\tif ( w < i ) seq[ w ] = u;\n\t    \t\t\t++ w;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tif ( w < n ) seq.length = w;\n\t\n\t    \treturn r;\n\t\n\t    };\n\t\n\t    WebGLUniforms.evalDynamic = function( seq, values, object, material, camera ) {\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar v = values[ seq[ i ].id ],\n\t    \t\t\tf = v.onUpdateCallback;\n\t\n\t    \t\tif ( f !== undefined ) f.call( v, object, material, camera );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * Uniform Utilities\n\t     */\n\t\n\t    exports.UniformsUtils = {\n\t\n\t    \tmerge: function ( uniforms ) {\n\t\n\t    \t\tvar merged = {};\n\t\n\t    \t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\t\n\t    \t\t\tvar tmp = this.clone( uniforms[ u ] );\n\t\n\t    \t\t\tfor ( var p in tmp ) {\n\t\n\t    \t\t\t\tmerged[ p ] = tmp[ p ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn merged;\n\t\n\t    \t},\n\t\n\t    \tclone: function ( uniforms_src ) {\n\t\n\t    \t\tvar uniforms_dst = {};\n\t\n\t    \t\tfor ( var u in uniforms_src ) {\n\t\n\t    \t\t\tuniforms_dst[ u ] = {};\n\t\n\t    \t\t\tfor ( var p in uniforms_src[ u ] ) {\n\t\n\t    \t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\t\n\t    \t\t\t\tif ( (parameter_src && parameter_src.isColor) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isVector2) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isVector3) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isVector4) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isMatrix3) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isMatrix4) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isTexture) ) {\n\t\n\t    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\t\n\t    \t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\t\n\t    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn uniforms_dst;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    var alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\t\n\t    var alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\t\n\t    var alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\t\n\t    var aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\t\n\t    var begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\t\n\t    var beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\t\n\t    var bsdfs = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\t\n\t    var bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\t\n\t    var clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n#endif\\n\";\n\t\n\t    var clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\t\n\t    var clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\t\n\t    var clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\t\n\t    var color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\t\n\t    var color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\t\n\t    var color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\t\n\t    var color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\t\n\t    var common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\t\n\t    var cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\t\n\t    var defaultnormal_vertex = \"#ifdef FLIP_SIDED\\n\\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\t\n\t    var displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\t\n\t    var displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\t\n\t    var emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\t\n\t    var emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\t\n\t    var encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\t\n\t    var encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\t\n\t    var envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\t#else\\n\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\t#endif\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\t\n\t    var fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\t\n\t    var lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\t\n\t    var lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\t\n\t    var lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\t\n\t    var lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\\t\\t\\tdirectLight.color = pointLight.color;\\n\\t\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\t#include <normal_flip>\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\t#include <normal_flip>\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\t\n\t    var lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\t\n\t    var lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\t\n\t    var lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\t\n\t    var lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\t\n\t    var lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t \\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\t\\t\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\t\n\t    var logdepthbuf_fragment = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\t\n\t    var logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\t\n\t    var logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\t\n\t    var map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\t\n\t    var map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\t\n\t    var map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\t\n\t    var metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\t\n\t    var metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\t\n\t    var morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\t\n\t    var morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\t\n\t    var morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var normal_flip = \"#ifdef DOUBLE_SIDED\\n\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\t\n\t    var normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\t\n\t    var normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\t\n\t    var packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\t\n\t    var premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\t\n\t    var project_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\t\n\t    var roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\t\n\t    var roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\t\n\t    var shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\t\n\t    var shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\t\n\t    var skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\t\n\t    var skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureWidth;\\n\\t\\tuniform int boneTextureHeight;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureWidth ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureWidth );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\t\n\t    var skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\t\n\t    var specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\t\n\t    var specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\t\n\t    var tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\t\n\t    var tonemapping_pars_fragment = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\t\n\t    var uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\t\n\t    var uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\t\n\t    var uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\t\n\t    var uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\t\n\t    var uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\t\n\t    var uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\t\n\t    var worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\t#ifdef USE_SKINNING\\n\\t\\tvec4 worldPosition = modelMatrix * skinned;\\n\\t#else\\n\\t\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\t\n\t    var cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\t\n\t    var depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\t\n\t    var depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t    var distanceRGBA_frag = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\t\n\t    var distanceRGBA_vert = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\n\t\n\t    var equirect_frag = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\t\n\t    var equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\t\n\t    var linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t    var meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight;\\n\\treflectedLight.directDiffuse = vec3( 0.0 );\\n\\treflectedLight.directSpecular = vec3( 0.0 );\\n\\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n}\\n\";\n\t\n\t    var meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var normal_frag = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\n\t\n\t    var normal_vert = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvNormal = normalize( normalMatrix * normal );\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t    var points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var shadow_frag = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\t\n\t    var shadow_vert = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var ShaderChunk = {\n\t    \talphamap_fragment: alphamap_fragment,\n\t    \talphamap_pars_fragment: alphamap_pars_fragment,\n\t    \talphatest_fragment: alphatest_fragment,\n\t    \taomap_fragment: aomap_fragment,\n\t    \taomap_pars_fragment: aomap_pars_fragment,\n\t    \tbegin_vertex: begin_vertex,\n\t    \tbeginnormal_vertex: beginnormal_vertex,\n\t    \tbsdfs: bsdfs,\n\t    \tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t    \tclipping_planes_fragment: clipping_planes_fragment,\n\t    \tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t    \tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t    \tclipping_planes_vertex: clipping_planes_vertex,\n\t    \tcolor_fragment: color_fragment,\n\t    \tcolor_pars_fragment: color_pars_fragment,\n\t    \tcolor_pars_vertex: color_pars_vertex,\n\t    \tcolor_vertex: color_vertex,\n\t    \tcommon: common,\n\t    \tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t    \tdefaultnormal_vertex: defaultnormal_vertex,\n\t    \tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t    \tdisplacementmap_vertex: displacementmap_vertex,\n\t    \temissivemap_fragment: emissivemap_fragment,\n\t    \temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t    \tencodings_fragment: encodings_fragment,\n\t    \tencodings_pars_fragment: encodings_pars_fragment,\n\t    \tenvmap_fragment: envmap_fragment,\n\t    \tenvmap_pars_fragment: envmap_pars_fragment,\n\t    \tenvmap_pars_vertex: envmap_pars_vertex,\n\t    \tenvmap_vertex: envmap_vertex,\n\t    \tfog_fragment: fog_fragment,\n\t    \tfog_pars_fragment: fog_pars_fragment,\n\t    \tlightmap_fragment: lightmap_fragment,\n\t    \tlightmap_pars_fragment: lightmap_pars_fragment,\n\t    \tlights_lambert_vertex: lights_lambert_vertex,\n\t    \tlights_pars: lights_pars,\n\t    \tlights_phong_fragment: lights_phong_fragment,\n\t    \tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t    \tlights_physical_fragment: lights_physical_fragment,\n\t    \tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t    \tlights_template: lights_template,\n\t    \tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t    \tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t    \tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t    \tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t    \tmap_fragment: map_fragment,\n\t    \tmap_pars_fragment: map_pars_fragment,\n\t    \tmap_particle_fragment: map_particle_fragment,\n\t    \tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t    \tmetalnessmap_fragment: metalnessmap_fragment,\n\t    \tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t    \tmorphnormal_vertex: morphnormal_vertex,\n\t    \tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t    \tmorphtarget_vertex: morphtarget_vertex,\n\t    \tnormal_flip: normal_flip,\n\t    \tnormal_fragment: normal_fragment,\n\t    \tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t    \tpacking: packing,\n\t    \tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t    \tproject_vertex: project_vertex,\n\t    \troughnessmap_fragment: roughnessmap_fragment,\n\t    \troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t    \tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t    \tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t    \tshadowmap_vertex: shadowmap_vertex,\n\t    \tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t    \tskinbase_vertex: skinbase_vertex,\n\t    \tskinning_pars_vertex: skinning_pars_vertex,\n\t    \tskinning_vertex: skinning_vertex,\n\t    \tskinnormal_vertex: skinnormal_vertex,\n\t    \tspecularmap_fragment: specularmap_fragment,\n\t    \tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t    \ttonemapping_fragment: tonemapping_fragment,\n\t    \ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t    \tuv_pars_fragment: uv_pars_fragment,\n\t    \tuv_pars_vertex: uv_pars_vertex,\n\t    \tuv_vertex: uv_vertex,\n\t    \tuv2_pars_fragment: uv2_pars_fragment,\n\t    \tuv2_pars_vertex: uv2_pars_vertex,\n\t    \tuv2_vertex: uv2_vertex,\n\t    \tworldpos_vertex: worldpos_vertex,\n\t\n\t    \tcube_frag: cube_frag,\n\t    \tcube_vert: cube_vert,\n\t    \tdepth_frag: depth_frag,\n\t    \tdepth_vert: depth_vert,\n\t    \tdistanceRGBA_frag: distanceRGBA_frag,\n\t    \tdistanceRGBA_vert: distanceRGBA_vert,\n\t    \tequirect_frag: equirect_frag,\n\t    \tequirect_vert: equirect_vert,\n\t    \tlinedashed_frag: linedashed_frag,\n\t    \tlinedashed_vert: linedashed_vert,\n\t    \tmeshbasic_frag: meshbasic_frag,\n\t    \tmeshbasic_vert: meshbasic_vert,\n\t    \tmeshlambert_frag: meshlambert_frag,\n\t    \tmeshlambert_vert: meshlambert_vert,\n\t    \tmeshphong_frag: meshphong_frag,\n\t    \tmeshphong_vert: meshphong_vert,\n\t    \tmeshphysical_frag: meshphysical_frag,\n\t    \tmeshphysical_vert: meshphysical_vert,\n\t    \tnormal_frag: normal_frag,\n\t    \tnormal_vert: normal_vert,\n\t    \tpoints_frag: points_frag,\n\t    \tpoints_vert: points_vert,\n\t    \tshadow_frag: shadow_frag,\n\t    \tshadow_vert: shadow_vert\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Color( r, g, b ) {\n\t\n\t    \tif ( g === undefined && b === undefined ) {\n\t\n\t    \t\t// r is THREE.Color, hex or string\n\t    \t\treturn this.set( r );\n\t\n\t    \t}\n\t\n\t    \treturn this.setRGB( r, g, b );\n\t\n\t    }\n\t\n\t    Color.prototype = {\n\t\n\t    \tconstructor: Color,\n\t\n\t    \tisColor: true,\n\t\n\t    \tr: 1, g: 1, b: 1,\n\t\n\t    \tset: function ( value ) {\n\t\n\t    \t\tif ( (value && value.isColor) ) {\n\t\n\t    \t\t\tthis.copy( value );\n\t\n\t    \t\t} else if ( typeof value === 'number' ) {\n\t\n\t    \t\t\tthis.setHex( value );\n\t\n\t    \t\t} else if ( typeof value === 'string' ) {\n\t\n\t    \t\t\tthis.setStyle( value );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.r = scalar;\n\t    \t\tthis.g = scalar;\n\t    \t\tthis.b = scalar;\n\t\n\t    \t},\n\t\n\t    \tsetHex: function ( hex ) {\n\t\n\t    \t\thex = Math.floor( hex );\n\t\n\t    \t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t    \t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t    \t\tthis.b = ( hex & 255 ) / 255;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetRGB: function ( r, g, b ) {\n\t\n\t    \t\tthis.r = r;\n\t    \t\tthis.g = g;\n\t    \t\tthis.b = b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetHSL: function () {\n\t\n\t    \t\tfunction hue2rgb( p, q, t ) {\n\t\n\t    \t\t\tif ( t < 0 ) t += 1;\n\t    \t\t\tif ( t > 1 ) t -= 1;\n\t    \t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t    \t\t\tif ( t < 1 / 2 ) return q;\n\t    \t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t    \t\t\treturn p;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function setHSL( h, s, l ) {\n\t\n\t    \t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t    \t\t\th = exports.Math.euclideanModulo( h, 1 );\n\t    \t\t\ts = exports.Math.clamp( s, 0, 1 );\n\t    \t\t\tl = exports.Math.clamp( l, 0, 1 );\n\t\n\t    \t\t\tif ( s === 0 ) {\n\t\n\t    \t\t\t\tthis.r = this.g = this.b = l;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t    \t\t\t\tvar q = ( 2 * l ) - p;\n\t\n\t    \t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t    \t\t\t\tthis.g = hue2rgb( q, p, h );\n\t    \t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetStyle: function ( style ) {\n\t\n\t    \t\tfunction handleAlpha( string ) {\n\t\n\t    \t\t\tif ( string === undefined ) return;\n\t\n\t    \t\t\tif ( parseFloat( string ) < 1 ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\tvar m;\n\t\n\t    \t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\t\n\t    \t\t\t// rgb / hsl\n\t\n\t    \t\t\tvar color;\n\t    \t\t\tvar name = m[ 1 ];\n\t    \t\t\tvar components = m[ 2 ];\n\t\n\t    \t\t\tswitch ( name ) {\n\t\n\t    \t\t\t\tcase 'rgb':\n\t    \t\t\t\tcase 'rgba':\n\t\n\t    \t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t    \t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t    \t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t    \t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t    \t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\t\n\t    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t    \t\t\t\t\t\treturn this;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t    \t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t    \t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t    \t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t    \t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\t\n\t    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t    \t\t\t\t\t\treturn this;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'hsl':\n\t    \t\t\t\tcase 'hsla':\n\t\n\t    \t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t    \t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t    \t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t    \t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t    \t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\t\n\t    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t    \t\t\t\t\t\treturn this.setHSL( h, s, l );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\t\n\t    \t\t\t// hex color\n\t\n\t    \t\t\tvar hex = m[ 1 ];\n\t    \t\t\tvar size = hex.length;\n\t\n\t    \t\t\tif ( size === 3 ) {\n\t\n\t    \t\t\t\t// #ff0\n\t    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t    \t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t    \t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\t\n\t    \t\t\t\treturn this;\n\t\n\t    \t\t\t} else if ( size === 6 ) {\n\t\n\t    \t\t\t\t// #ff0000\n\t    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t    \t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t    \t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\t\n\t    \t\t\t\treturn this;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( style && style.length > 0 ) {\n\t\n\t    \t\t\t// color keywords\n\t    \t\t\tvar hex = exports.ColorKeywords[ style ];\n\t\n\t    \t\t\tif ( hex !== undefined ) {\n\t\n\t    \t\t\t\t// red\n\t    \t\t\t\tthis.setHex( hex );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// unknown color\n\t    \t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.r, this.g, this.b );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( color ) {\n\t\n\t    \t\tthis.r = color.r;\n\t    \t\tthis.g = color.g;\n\t    \t\tthis.b = color.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyGammaToLinear: function ( color, gammaFactor ) {\n\t\n\t    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\t\n\t    \t\tthis.r = Math.pow( color.r, gammaFactor );\n\t    \t\tthis.g = Math.pow( color.g, gammaFactor );\n\t    \t\tthis.b = Math.pow( color.b, gammaFactor );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyLinearToGamma: function ( color, gammaFactor ) {\n\t\n\t    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\t\n\t    \t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\t\n\t    \t\tthis.r = Math.pow( color.r, safeInverse );\n\t    \t\tthis.g = Math.pow( color.g, safeInverse );\n\t    \t\tthis.b = Math.pow( color.b, safeInverse );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tconvertGammaToLinear: function () {\n\t\n\t    \t\tvar r = this.r, g = this.g, b = this.b;\n\t\n\t    \t\tthis.r = r * r;\n\t    \t\tthis.g = g * g;\n\t    \t\tthis.b = b * b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tconvertLinearToGamma: function () {\n\t\n\t    \t\tthis.r = Math.sqrt( this.r );\n\t    \t\tthis.g = Math.sqrt( this.g );\n\t    \t\tthis.b = Math.sqrt( this.b );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetHex: function () {\n\t\n\t    \t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\t\n\t    \t},\n\t\n\t    \tgetHexString: function () {\n\t\n\t    \t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\t\n\t    \t},\n\t\n\t    \tgetHSL: function ( optionalTarget ) {\n\t\n\t    \t\t// h,s,l ranges are in 0.0 - 1.0\n\t\n\t    \t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\t\n\t    \t\tvar r = this.r, g = this.g, b = this.b;\n\t\n\t    \t\tvar max = Math.max( r, g, b );\n\t    \t\tvar min = Math.min( r, g, b );\n\t\n\t    \t\tvar hue, saturation;\n\t    \t\tvar lightness = ( min + max ) / 2.0;\n\t\n\t    \t\tif ( min === max ) {\n\t\n\t    \t\t\thue = 0;\n\t    \t\t\tsaturation = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar delta = max - min;\n\t\n\t    \t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\t\n\t    \t\t\tswitch ( max ) {\n\t\n\t    \t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t    \t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t    \t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\thue /= 6;\n\t\n\t    \t\t}\n\t\n\t    \t\thsl.h = hue;\n\t    \t\thsl.s = saturation;\n\t    \t\thsl.l = lightness;\n\t\n\t    \t\treturn hsl;\n\t\n\t    \t},\n\t\n\t    \tgetStyle: function () {\n\t\n\t    \t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\t\n\t    \t},\n\t\n\t    \toffsetHSL: function ( h, s, l ) {\n\t\n\t    \t\tvar hsl = this.getHSL();\n\t\n\t    \t\thsl.h += h; hsl.s += s; hsl.l += l;\n\t\n\t    \t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( color ) {\n\t\n\t    \t\tthis.r += color.r;\n\t    \t\tthis.g += color.g;\n\t    \t\tthis.b += color.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddColors: function ( color1, color2 ) {\n\t\n\t    \t\tthis.r = color1.r + color2.r;\n\t    \t\tthis.g = color1.g + color2.g;\n\t    \t\tthis.b = color1.b + color2.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.r += s;\n\t    \t\tthis.g += s;\n\t    \t\tthis.b += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function( color ) {\n\t\n\t    \t\tthis.r = Math.max( 0, this.r - color.r );\n\t    \t\tthis.g = Math.max( 0, this.g - color.g );\n\t    \t\tthis.b = Math.max( 0, this.b - color.b );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( color ) {\n\t\n\t    \t\tthis.r *= color.r;\n\t    \t\tthis.g *= color.g;\n\t    \t\tthis.b *= color.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( s ) {\n\t\n\t    \t\tthis.r *= s;\n\t    \t\tthis.g *= s;\n\t    \t\tthis.b *= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( color, alpha ) {\n\t\n\t    \t\tthis.r += ( color.r - this.r ) * alpha;\n\t    \t\tthis.g += ( color.g - this.g ) * alpha;\n\t    \t\tthis.b += ( color.b - this.b ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( c ) {\n\t\n\t    \t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.r = array[ offset ];\n\t    \t\tthis.g = array[ offset + 1 ];\n\t    \t\tthis.b = array[ offset + 2 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.r;\n\t    \t\tarray[ offset + 1 ] = this.g;\n\t    \t\tarray[ offset + 2 ] = this.b;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\treturn this.getHex();\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    exports.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t    'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t    'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t    'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t    'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t    'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t    'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t    'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t    'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t    'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t    'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t    'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t    'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t    'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t    'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t    'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t    'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t    'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t    'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t    'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t    'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t    'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t    'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t    'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\t\n\t    /**\n\t     * Uniforms library for shared webgl shaders\n\t     */\n\t\n\t    var UniformsLib = {\n\t\n\t    \tcommon: {\n\t\n\t    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t    \t\topacity: { value: 1.0 },\n\t\n\t    \t\tmap: { value: null },\n\t    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },\n\t\n\t    \t\tspecularMap: { value: null },\n\t    \t\talphaMap: { value: null },\n\t\n\t    \t\tenvMap: { value: null },\n\t    \t\tflipEnvMap: { value: - 1 },\n\t    \t\treflectivity: { value: 1.0 },\n\t    \t\trefractionRatio: { value: 0.98 }\n\t\n\t    \t},\n\t\n\t    \taomap: {\n\t\n\t    \t\taoMap: { value: null },\n\t    \t\taoMapIntensity: { value: 1 }\n\t\n\t    \t},\n\t\n\t    \tlightmap: {\n\t\n\t    \t\tlightMap: { value: null },\n\t    \t\tlightMapIntensity: { value: 1 }\n\t\n\t    \t},\n\t\n\t    \temissivemap: {\n\t\n\t    \t\temissiveMap: { value: null }\n\t\n\t    \t},\n\t\n\t    \tbumpmap: {\n\t\n\t    \t\tbumpMap: { value: null },\n\t    \t\tbumpScale: { value: 1 }\n\t\n\t    \t},\n\t\n\t    \tnormalmap: {\n\t\n\t    \t\tnormalMap: { value: null },\n\t    \t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\t\n\t    \t},\n\t\n\t    \tdisplacementmap: {\n\t\n\t    \t\tdisplacementMap: { value: null },\n\t    \t\tdisplacementScale: { value: 1 },\n\t    \t\tdisplacementBias: { value: 0 }\n\t\n\t    \t},\n\t\n\t    \troughnessmap: {\n\t\n\t    \t\troughnessMap: { value: null }\n\t\n\t    \t},\n\t\n\t    \tmetalnessmap: {\n\t\n\t    \t\tmetalnessMap: { value: null }\n\t\n\t    \t},\n\t\n\t    \tfog: {\n\t\n\t    \t\tfogDensity: { value: 0.00025 },\n\t    \t\tfogNear: { value: 1 },\n\t    \t\tfogFar: { value: 2000 },\n\t    \t\tfogColor: { value: new Color( 0xffffff ) }\n\t\n\t    \t},\n\t\n\t    \tlights: {\n\t\n\t    \t\tambientLightColor: { value: [] },\n\t\n\t    \t\tdirectionalLights: { value: [], properties: {\n\t    \t\t\tdirection: {},\n\t    \t\t\tcolor: {},\n\t\n\t    \t\t\tshadow: {},\n\t    \t\t\tshadowBias: {},\n\t    \t\t\tshadowRadius: {},\n\t    \t\t\tshadowMapSize: {}\n\t    \t\t} },\n\t\n\t    \t\tdirectionalShadowMap: { value: [] },\n\t    \t\tdirectionalShadowMatrix: { value: [] },\n\t\n\t    \t\tspotLights: { value: [], properties: {\n\t    \t\t\tcolor: {},\n\t    \t\t\tposition: {},\n\t    \t\t\tdirection: {},\n\t    \t\t\tdistance: {},\n\t    \t\t\tconeCos: {},\n\t    \t\t\tpenumbraCos: {},\n\t    \t\t\tdecay: {},\n\t\n\t    \t\t\tshadow: {},\n\t    \t\t\tshadowBias: {},\n\t    \t\t\tshadowRadius: {},\n\t    \t\t\tshadowMapSize: {}\n\t    \t\t} },\n\t\n\t    \t\tspotShadowMap: { value: [] },\n\t    \t\tspotShadowMatrix: { value: [] },\n\t\n\t    \t\tpointLights: { value: [], properties: {\n\t    \t\t\tcolor: {},\n\t    \t\t\tposition: {},\n\t    \t\t\tdecay: {},\n\t    \t\t\tdistance: {},\n\t\n\t    \t\t\tshadow: {},\n\t    \t\t\tshadowBias: {},\n\t    \t\t\tshadowRadius: {},\n\t    \t\t\tshadowMapSize: {}\n\t    \t\t} },\n\t\n\t    \t\tpointShadowMap: { value: [] },\n\t    \t\tpointShadowMatrix: { value: [] },\n\t\n\t    \t\themisphereLights: { value: [], properties: {\n\t    \t\t\tdirection: {},\n\t    \t\t\tskyColor: {},\n\t    \t\t\tgroundColor: {}\n\t    \t\t} }\n\t\n\t    \t},\n\t\n\t    \tpoints: {\n\t\n\t    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t    \t\topacity: { value: 1.0 },\n\t    \t\tsize: { value: 1.0 },\n\t    \t\tscale: { value: 1.0 },\n\t    \t\tmap: { value: null },\n\t    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     */\n\t\n\t    var ShaderLib = {\n\t\n\t    \tbasic: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.fog\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\n\t    \t},\n\t\n\t    \tlambert: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.lightmap,\n\t    \t\t\tUniformsLib.emissivemap,\n\t    \t\t\tUniformsLib.fog,\n\t    \t\t\tUniformsLib.lights,\n\t\n\t    \t\t\t{\n\t    \t\t\t\temissive : { value: new Color( 0x000000 ) }\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\n\t    \t},\n\t\n\t    \tphong: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.lightmap,\n\t    \t\t\tUniformsLib.emissivemap,\n\t    \t\t\tUniformsLib.bumpmap,\n\t    \t\t\tUniformsLib.normalmap,\n\t    \t\t\tUniformsLib.displacementmap,\n\t    \t\t\tUniformsLib.fog,\n\t    \t\t\tUniformsLib.lights,\n\t\n\t    \t\t\t{\n\t    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n\t    \t\t\t\tspecular : { value: new Color( 0x111111 ) },\n\t    \t\t\t\tshininess: { value: 30 }\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshphong_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\n\t    \t},\n\t\n\t    \tstandard: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.lightmap,\n\t    \t\t\tUniformsLib.emissivemap,\n\t    \t\t\tUniformsLib.bumpmap,\n\t    \t\t\tUniformsLib.normalmap,\n\t    \t\t\tUniformsLib.displacementmap,\n\t    \t\t\tUniformsLib.roughnessmap,\n\t    \t\t\tUniformsLib.metalnessmap,\n\t    \t\t\tUniformsLib.fog,\n\t    \t\t\tUniformsLib.lights,\n\t\n\t    \t\t\t{\n\t    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n\t    \t\t\t\troughness: { value: 0.5 },\n\t    \t\t\t\tmetalness: { value: 0 },\n\t    \t\t\t\tenvMapIntensity : { value: 1 }, // temporary\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\n\t    \t},\n\t\n\t    \tpoints: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.points,\n\t    \t\t\tUniformsLib.fog\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.points_vert,\n\t    \t\tfragmentShader: ShaderChunk.points_frag\n\t\n\t    \t},\n\t\n\t    \tdashed: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.fog,\n\t\n\t    \t\t\t{\n\t    \t\t\t\tscale    : { value: 1 },\n\t    \t\t\t\tdashSize : { value: 1 },\n\t    \t\t\t\ttotalSize: { value: 2 }\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.linedashed_vert,\n\t    \t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\n\t    \t},\n\t\n\t    \tdepth: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.displacementmap\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.depth_vert,\n\t    \t\tfragmentShader: ShaderChunk.depth_frag\n\t\n\t    \t},\n\t\n\t    \tnormal: {\n\t\n\t    \t\tuniforms: {\n\t\n\t    \t\t\topacity : { value: 1.0 }\n\t\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.normal_vert,\n\t    \t\tfragmentShader: ShaderChunk.normal_frag\n\t\n\t    \t},\n\t\n\t    \t/* -------------------------------------------------------------------------\n\t    \t//\tCube map shader\n\t    \t ------------------------------------------------------------------------- */\n\t\n\t    \tcube: {\n\t\n\t    \t\tuniforms: {\n\t    \t\t\ttCube: { value: null },\n\t    \t\t\ttFlip: { value: - 1 },\n\t    \t\t\topacity: { value: 1.0 }\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.cube_vert,\n\t    \t\tfragmentShader: ShaderChunk.cube_frag\n\t\n\t    \t},\n\t\n\t    \t/* -------------------------------------------------------------------------\n\t    \t//\tCube map shader\n\t    \t ------------------------------------------------------------------------- */\n\t\n\t    \tequirect: {\n\t\n\t    \t\tuniforms: {\n\t    \t\t\ttEquirect: { value: null },\n\t    \t\t\ttFlip: { value: - 1 }\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.equirect_vert,\n\t    \t\tfragmentShader: ShaderChunk.equirect_frag\n\t\n\t    \t},\n\t\n\t    \tdistanceRGBA: {\n\t\n\t    \t\tuniforms: {\n\t\n\t    \t\t\tlightPos: { value: new Vector3() }\n\t\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t    \t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    ShaderLib.physical = {\n\t\n\t    \tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\tShaderLib.standard.uniforms,\n\t\n\t    \t\t{\n\t    \t\t\tclearCoat: { value: 0 },\n\t    \t\t\tclearCoatRoughness: { value: 0 }\n\t    \t\t}\n\t\n\t    \t] ),\n\t\n\t    \tvertexShader: ShaderChunk.meshphysical_vert,\n\t    \tfragmentShader: ShaderChunk.meshphysical_frag\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Box2( min, max ) {\n\t\n\t    \tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t    \tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\t\n\t    }\n\t\n\t    Box2.prototype = {\n\t\n\t    \tconstructor: Box2,\n\t\n\t    \tset: function ( min, max ) {\n\t\n\t    \t\tthis.min.copy( min );\n\t    \t\tthis.max.copy( max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromPoints: function ( points ) {\n\t\n\t    \t\tthis.makeEmpty();\n\t\n\t    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.expandByPoint( points[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromCenterAndSize: function () {\n\t\n\t    \t\tvar v1 = new Vector2();\n\t\n\t    \t\treturn function setFromCenterAndSize( center, size ) {\n\t\n\t    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t    \t\t\tthis.min.copy( center ).sub( halfSize );\n\t    \t\t\tthis.max.copy( center ).add( halfSize );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( box ) {\n\t\n\t    \t\tthis.min.copy( box.min );\n\t    \t\tthis.max.copy( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeEmpty: function () {\n\t\n\t    \t\tthis.min.x = this.min.y = + Infinity;\n\t    \t\tthis.max.x = this.max.y = - Infinity;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tisEmpty: function () {\n\t\n\t    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\n\t    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\t\n\t    \t},\n\t\n\t    \tgetCenter: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\t\n\t    \t},\n\t\n\t    \tgetSize: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\t\n\t    \t},\n\t\n\t    \texpandByPoint: function ( point ) {\n\t\n\t    \t\tthis.min.min( point );\n\t    \t\tthis.max.max( point );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByVector: function ( vector ) {\n\t\n\t    \t\tthis.min.sub( vector );\n\t    \t\tthis.max.add( vector );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByScalar: function ( scalar ) {\n\t\n\t    \t\tthis.min.addScalar( - scalar );\n\t    \t\tthis.max.addScalar( scalar );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t    \t\t     point.y < this.min.y || point.y > this.max.y ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tcontainsBox: function ( box ) {\n\t\n\t    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t    \t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tgetParameter: function ( point, optionalTarget ) {\n\t\n\t    \t\t// This can potentially have a divide by zero if the box\n\t    \t\t// has a size dimension of 0.\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t\n\t    \t\treturn result.set(\n\t    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t    \t\t);\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\t// using 6 splitting planes to rule out intersections.\n\t\n\t    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t    \t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tclampPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function () {\n\t\n\t    \t\tvar v1 = new Vector2();\n\t\n\t    \t\treturn function distanceToPoint( point ) {\n\t\n\t    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t    \t\t\treturn clampedPoint.sub( point ).length();\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersect: function ( box ) {\n\t\n\t    \t\tthis.min.max( box.min );\n\t    \t\tthis.max.min( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tunion: function ( box ) {\n\t\n\t    \t\tthis.min.min( box.min );\n\t    \t\tthis.max.max( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.min.add( offset );\n\t    \t\tthis.max.add( offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( box ) {\n\t\n\t    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function LensFlarePlugin( renderer, flares ) {\n\t\n\t    \tvar gl = renderer.context;\n\t    \tvar state = renderer.state;\n\t\n\t    \tvar vertexBuffer, elementBuffer;\n\t    \tvar shader, program, attributes, uniforms;\n\t\n\t    \tvar tempTexture, occlusionTexture;\n\t\n\t    \tfunction init() {\n\t\n\t    \t\tvar vertices = new Float32Array( [\n\t    \t\t\t- 1, - 1,  0, 0,\n\t    \t\t\t 1, - 1,  1, 0,\n\t    \t\t\t 1,  1,  1, 1,\n\t    \t\t\t- 1,  1,  0, 1\n\t    \t\t] );\n\t\n\t    \t\tvar faces = new Uint16Array( [\n\t    \t\t\t0, 1, 2,\n\t    \t\t\t0, 2, 3\n\t    \t\t] );\n\t\n\t    \t\t// buffers\n\t\n\t    \t\tvertexBuffer     = gl.createBuffer();\n\t    \t\telementBuffer    = gl.createBuffer();\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\t\n\t    \t\t// textures\n\t\n\t    \t\ttempTexture      = gl.createTexture();\n\t    \t\tocclusionTexture = gl.createTexture();\n\t\n\t    \t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\n\t    \t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\n\t    \t\tshader = {\n\t\n\t    \t\t\tvertexShader: [\n\t\n\t    \t\t\t\t\"uniform lowp int renderType;\",\n\t\n\t    \t\t\t\t\"uniform vec3 screenPosition;\",\n\t    \t\t\t\t\"uniform vec2 scale;\",\n\t    \t\t\t\t\"uniform float rotation;\",\n\t\n\t    \t\t\t\t\"uniform sampler2D occlusionMap;\",\n\t\n\t    \t\t\t\t\"attribute vec2 position;\",\n\t    \t\t\t\t\"attribute vec2 uv;\",\n\t\n\t    \t\t\t\t\"varying vec2 vUV;\",\n\t    \t\t\t\t\"varying float vVisibility;\",\n\t\n\t    \t\t\t\t\"void main() {\",\n\t\n\t    \t\t\t\t\t\"vUV = uv;\",\n\t\n\t    \t\t\t\t\t\"vec2 pos = position;\",\n\t\n\t    \t\t\t\t\t\"if ( renderType == 2 ) {\",\n\t\n\t    \t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\t\n\t    \t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t    \t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\t\n\t    \t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t    \t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\t\n\t    \t\t\t\t\t\"}\",\n\t\n\t    \t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\t\n\t    \t\t\t\t\"}\"\n\t\n\t    \t\t\t].join( \"\\n\" ),\n\t\n\t    \t\t\tfragmentShader: [\n\t\n\t    \t\t\t\t\"uniform lowp int renderType;\",\n\t\n\t    \t\t\t\t\"uniform sampler2D map;\",\n\t    \t\t\t\t\"uniform float opacity;\",\n\t    \t\t\t\t\"uniform vec3 color;\",\n\t\n\t    \t\t\t\t\"varying vec2 vUV;\",\n\t    \t\t\t\t\"varying float vVisibility;\",\n\t\n\t    \t\t\t\t\"void main() {\",\n\t\n\t    \t\t\t\t\t// pink square\n\t\n\t    \t\t\t\t\t\"if ( renderType == 0 ) {\",\n\t\n\t    \t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\t\n\t    \t\t\t\t\t// restore\n\t\n\t    \t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\t\n\t    \t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\t\n\t    \t\t\t\t\t// flare\n\t\n\t    \t\t\t\t\t\"} else {\",\n\t\n\t    \t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t    \t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t    \t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t    \t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\t\n\t    \t\t\t\t\t\"}\",\n\t\n\t    \t\t\t\t\"}\"\n\t\n\t    \t\t\t].join( \"\\n\" )\n\t\n\t    \t\t};\n\t\n\t    \t\tprogram = createProgram( shader );\n\t\n\t    \t\tattributes = {\n\t    \t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t    \t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t    \t\t};\n\t\n\t    \t\tuniforms = {\n\t    \t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t    \t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t    \t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t    \t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t    \t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t    \t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t    \t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t    \t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \t/*\n\t    \t * Render lens flares\n\t    \t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t    \t *         reads these back and calculates occlusion.\n\t    \t */\n\t\n\t    \tthis.render = function ( scene, camera, viewport ) {\n\t\n\t    \t\tif ( flares.length === 0 ) return;\n\t\n\t    \t\tvar tempPosition = new Vector3();\n\t\n\t    \t\tvar invAspect = viewport.w / viewport.z,\n\t    \t\t\thalfViewportWidth = viewport.z * 0.5,\n\t    \t\t\thalfViewportHeight = viewport.w * 0.5;\n\t\n\t    \t\tvar size = 16 / viewport.w,\n\t    \t\t\tscale = new Vector2( size * invAspect, size );\n\t\n\t    \t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n\t    \t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\t\n\t    \t\tvar validArea = new Box2();\n\t\n\t    \t\tvalidArea.min.set( 0, 0 );\n\t    \t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\tinit();\n\t\n\t    \t\t}\n\t\n\t    \t\tgl.useProgram( program );\n\t\n\t    \t\tstate.initAttributes();\n\t    \t\tstate.enableAttribute( attributes.vertex );\n\t    \t\tstate.enableAttribute( attributes.uv );\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t\t// loop through all lens flares to update their occlusion and positions\n\t    \t\t// setup gl and common used attribs/uniforms\n\t\n\t    \t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t    \t\tgl.uniform1i( uniforms.map, 1 );\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\n\t    \t\tstate.disable( gl.CULL_FACE );\n\t    \t\tstate.setDepthWrite( false );\n\t\n\t    \t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\t\n\t    \t\t\tsize = 16 / viewport.w;\n\t    \t\t\tscale.set( size * invAspect, size );\n\t\n\t    \t\t\t// calc object screen position\n\t\n\t    \t\t\tvar flare = flares[ i ];\n\t\n\t    \t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\t\n\t    \t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t    \t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\t\n\t    \t\t\t// setup arrays for gl programs\n\t\n\t    \t\t\tscreenPosition.copy( tempPosition );\n\t\n\t    \t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\t\n\t    \t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t    \t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\t\n\t    \t\t\t// screen cull\n\t\n\t    \t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\t\n\t    \t\t\t\t// save current RGB to temp texture\n\t\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\t\n\t\n\t    \t\t\t\t// render pink quad\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t    \t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t    \t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\n\t    \t\t\t\tstate.disable( gl.BLEND );\n\t    \t\t\t\tstate.enable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\n\t    \t\t\t\t// copy result to occlusionMap\n\t\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\t\n\t\n\t    \t\t\t\t// restore graphics\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t    \t\t\t\tstate.disable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\n\t    \t\t\t\t// update object positions\n\t\n\t    \t\t\t\tflare.positionScreen.copy( screenPosition );\n\t\n\t    \t\t\t\tif ( flare.customUpdateCallback ) {\n\t\n\t    \t\t\t\t\tflare.customUpdateCallback( flare );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tflare.updateLensFlares();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// render flares\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t    \t\t\t\tstate.enable( gl.BLEND );\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\t\n\t    \t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\t\n\t    \t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t    \t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t    \t\t\t\t\t\tscreenPosition.z = sprite.z;\n\t\n\t    \t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\t\n\t    \t\t\t\t\t\tscale.x = size * invAspect;\n\t    \t\t\t\t\t\tscale.y = size;\n\t\n\t    \t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t    \t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t    \t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\t\n\t    \t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t    \t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\t\n\t    \t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t    \t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\t\n\t    \t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// restore gl\n\t\n\t    \t\tstate.enable( gl.CULL_FACE );\n\t    \t\tstate.enable( gl.DEPTH_TEST );\n\t    \t\tstate.setDepthWrite( true );\n\t\n\t    \t\trenderer.resetGLState();\n\t\n\t    \t};\n\t\n\t    \tfunction createProgram( shader ) {\n\t\n\t    \t\tvar program = gl.createProgram();\n\t\n\t    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\n\t    \t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\t\n\t    \t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t    \t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\t\n\t    \t\tgl.compileShader( fragmentShader );\n\t    \t\tgl.compileShader( vertexShader );\n\t\n\t    \t\tgl.attachShader( program, fragmentShader );\n\t    \t\tgl.attachShader( program, vertexShader );\n\t\n\t    \t\tgl.linkProgram( program );\n\t\n\t    \t\treturn program;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function SpritePlugin( renderer, sprites ) {\n\t\n\t    \tvar gl = renderer.context;\n\t    \tvar state = renderer.state;\n\t\n\t    \tvar vertexBuffer, elementBuffer;\n\t    \tvar program, attributes, uniforms;\n\t\n\t    \tvar texture;\n\t\n\t    \t// decompose matrixWorld\n\t\n\t    \tvar spritePosition = new Vector3();\n\t    \tvar spriteRotation = new Quaternion();\n\t    \tvar spriteScale = new Vector3();\n\t\n\t    \tfunction init() {\n\t\n\t    \t\tvar vertices = new Float32Array( [\n\t    \t\t\t- 0.5, - 0.5,  0, 0,\n\t    \t\t\t  0.5, - 0.5,  1, 0,\n\t    \t\t\t  0.5,   0.5,  1, 1,\n\t    \t\t\t- 0.5,   0.5,  0, 1\n\t    \t\t] );\n\t\n\t    \t\tvar faces = new Uint16Array( [\n\t    \t\t\t0, 1, 2,\n\t    \t\t\t0, 2, 3\n\t    \t\t] );\n\t\n\t    \t\tvertexBuffer  = gl.createBuffer();\n\t    \t\telementBuffer = gl.createBuffer();\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\t\n\t    \t\tprogram = createProgram();\n\t\n\t    \t\tattributes = {\n\t    \t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t    \t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t    \t\t};\n\t\n\t    \t\tuniforms = {\n\t    \t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t    \t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\t\n\t    \t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t    \t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\t\n\t    \t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t    \t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t    \t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\t\n\t    \t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t    \t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\t\n\t    \t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t    \t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t    \t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t    \t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t    \t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\t\n\t    \t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t    \t\t};\n\t\n\t    \t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\tcanvas.width = 8;\n\t    \t\tcanvas.height = 8;\n\t\n\t    \t\tvar context = canvas.getContext( '2d' );\n\t    \t\tcontext.fillStyle = 'white';\n\t    \t\tcontext.fillRect( 0, 0, 8, 8 );\n\t\n\t    \t\ttexture = new Texture( canvas );\n\t    \t\ttexture.needsUpdate = true;\n\t\n\t    \t}\n\t\n\t    \tthis.render = function ( scene, camera ) {\n\t\n\t    \t\tif ( sprites.length === 0 ) return;\n\t\n\t    \t\t// setup gl\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\tinit();\n\t\n\t    \t\t}\n\t\n\t    \t\tgl.useProgram( program );\n\t\n\t    \t\tstate.initAttributes();\n\t    \t\tstate.enableAttribute( attributes.position );\n\t    \t\tstate.enableAttribute( attributes.uv );\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t\tstate.disable( gl.CULL_FACE );\n\t    \t\tstate.enable( gl.BLEND );\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\n\t    \t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\t\n\t    \t\tstate.activeTexture( gl.TEXTURE0 );\n\t    \t\tgl.uniform1i( uniforms.map, 0 );\n\t\n\t    \t\tvar oldFogType = 0;\n\t    \t\tvar sceneFogType = 0;\n\t    \t\tvar fog = scene.fog;\n\t\n\t    \t\tif ( fog ) {\n\t\n\t    \t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\t\n\t    \t\t\tif ( (fog && fog.isFog) ) {\n\t\n\t    \t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t    \t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t    \t\t\t\toldFogType = 1;\n\t    \t\t\t\tsceneFogType = 1;\n\t\n\t    \t\t\t} else if ( (fog && fog.isFogExp2) ) {\n\t\n\t    \t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t    \t\t\t\toldFogType = 2;\n\t    \t\t\t\tsceneFogType = 2;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t    \t\t\toldFogType = 0;\n\t    \t\t\tsceneFogType = 0;\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\t// update positions and sort\n\t\n\t    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar sprite = sprites[ i ];\n\t\n\t    \t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t    \t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\t\n\t    \t\t}\n\t\n\t    \t\tsprites.sort( painterSortStable );\n\t\n\t    \t\t// render all sprites\n\t\n\t    \t\tvar scale = [];\n\t\n\t    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar sprite = sprites[ i ];\n\t    \t\t\tvar material = sprite.material;\n\t\n\t    \t\t\tif ( material.visible === false ) continue;\n\t\n\t    \t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t    \t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\t\n\t    \t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\t\n\t    \t\t\tscale[ 0 ] = spriteScale.x;\n\t    \t\t\tscale[ 1 ] = spriteScale.y;\n\t\n\t    \t\t\tvar fogType = 0;\n\t\n\t    \t\t\tif ( scene.fog && material.fog ) {\n\t\n\t    \t\t\t\tfogType = sceneFogType;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( oldFogType !== fogType ) {\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t    \t\t\t\toldFogType = fogType;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( material.map !== null ) {\n\t\n\t    \t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t    \t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t    \t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t    \t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\t\n\t    \t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t    \t\t\tgl.uniform2fv( uniforms.scale, scale );\n\t\n\t    \t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t    \t\t\tstate.setDepthTest( material.depthTest );\n\t    \t\t\tstate.setDepthWrite( material.depthWrite );\n\t\n\t    \t\t\tif ( material.map ) {\n\t\n\t    \t\t\t\trenderer.setTexture2D( material.map, 0 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\trenderer.setTexture2D( texture, 0 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\t// restore gl\n\t\n\t    \t\tstate.enable( gl.CULL_FACE );\n\t\n\t    \t\trenderer.resetGLState();\n\t\n\t    \t};\n\t\n\t    \tfunction createProgram() {\n\t\n\t    \t\tvar program = gl.createProgram();\n\t\n\t    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\n\t    \t\tgl.shaderSource( vertexShader, [\n\t\n\t    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\t\n\t    \t\t\t'uniform mat4 modelViewMatrix;',\n\t    \t\t\t'uniform mat4 projectionMatrix;',\n\t    \t\t\t'uniform float rotation;',\n\t    \t\t\t'uniform vec2 scale;',\n\t    \t\t\t'uniform vec2 uvOffset;',\n\t    \t\t\t'uniform vec2 uvScale;',\n\t\n\t    \t\t\t'attribute vec2 position;',\n\t    \t\t\t'attribute vec2 uv;',\n\t\n\t    \t\t\t'varying vec2 vUV;',\n\t\n\t    \t\t\t'void main() {',\n\t\n\t    \t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\t\n\t    \t\t\t\t'vec2 alignedPosition = position * scale;',\n\t\n\t    \t\t\t\t'vec2 rotatedPosition;',\n\t    \t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t    \t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\t\n\t    \t\t\t\t'vec4 finalPosition;',\n\t\n\t    \t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t    \t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t    \t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\t\n\t    \t\t\t\t'gl_Position = finalPosition;',\n\t\n\t    \t\t\t'}'\n\t\n\t    \t\t].join( '\\n' ) );\n\t\n\t    \t\tgl.shaderSource( fragmentShader, [\n\t\n\t    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\t\n\t    \t\t\t'uniform vec3 color;',\n\t    \t\t\t'uniform sampler2D map;',\n\t    \t\t\t'uniform float opacity;',\n\t\n\t    \t\t\t'uniform int fogType;',\n\t    \t\t\t'uniform vec3 fogColor;',\n\t    \t\t\t'uniform float fogDensity;',\n\t    \t\t\t'uniform float fogNear;',\n\t    \t\t\t'uniform float fogFar;',\n\t    \t\t\t'uniform float alphaTest;',\n\t\n\t    \t\t\t'varying vec2 vUV;',\n\t\n\t    \t\t\t'void main() {',\n\t\n\t    \t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\t\n\t    \t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\t\n\t    \t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\t\n\t    \t\t\t\t'if ( fogType > 0 ) {',\n\t\n\t    \t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t    \t\t\t\t\t'float fogFactor = 0.0;',\n\t\n\t    \t\t\t\t\t'if ( fogType == 1 ) {',\n\t\n\t    \t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\t\n\t    \t\t\t\t\t'} else {',\n\t\n\t    \t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t    \t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t    \t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\t\n\t    \t\t\t\t\t'}',\n\t\n\t    \t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\t\n\t    \t\t\t\t'}',\n\t\n\t    \t\t\t'}'\n\t\n\t    \t\t].join( '\\n' ) );\n\t\n\t    \t\tgl.compileShader( vertexShader );\n\t    \t\tgl.compileShader( fragmentShader );\n\t\n\t    \t\tgl.attachShader( program, vertexShader );\n\t    \t\tgl.attachShader( program, fragmentShader );\n\t\n\t    \t\tgl.linkProgram( program );\n\t\n\t    \t\treturn program;\n\t\n\t    \t}\n\t\n\t    \tfunction painterSortStable( a, b ) {\n\t\n\t    \t\tif ( a.renderOrder !== b.renderOrder ) {\n\t\n\t    \t\t\treturn a.renderOrder - b.renderOrder;\n\t\n\t    \t\t} else if ( a.z !== b.z ) {\n\t\n\t    \t\t\treturn b.z - a.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn b.id - a.id;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Material() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: MaterialIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'Material';\n\t\n\t    \tthis.fog = true;\n\t    \tthis.lights = true;\n\t\n\t    \tthis.blending = NormalBlending;\n\t    \tthis.side = FrontSide;\n\t    \tthis.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\t    \tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\t\n\t    \tthis.opacity = 1;\n\t    \tthis.transparent = false;\n\t\n\t    \tthis.blendSrc = SrcAlphaFactor;\n\t    \tthis.blendDst = OneMinusSrcAlphaFactor;\n\t    \tthis.blendEquation = AddEquation;\n\t    \tthis.blendSrcAlpha = null;\n\t    \tthis.blendDstAlpha = null;\n\t    \tthis.blendEquationAlpha = null;\n\t\n\t    \tthis.depthFunc = LessEqualDepth;\n\t    \tthis.depthTest = true;\n\t    \tthis.depthWrite = true;\n\t\n\t    \tthis.clippingPlanes = null;\n\t    \tthis.clipShadows = false;\n\t\n\t    \tthis.colorWrite = true;\n\t\n\t    \tthis.precision = null; // override the renderer's default precision for this material\n\t\n\t    \tthis.polygonOffset = false;\n\t    \tthis.polygonOffsetFactor = 0;\n\t    \tthis.polygonOffsetUnits = 0;\n\t\n\t    \tthis.alphaTest = 0;\n\t    \tthis.premultipliedAlpha = false;\n\t\n\t    \tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\t\n\t    \tthis.visible = true;\n\t\n\t    \tthis._needsUpdate = true;\n\t\n\t    }\n\t\n\t    Material.prototype = {\n\t\n\t    \tconstructor: Material,\n\t\n\t    \tisMaterial: true,\n\t\n\t    \tget needsUpdate() {\n\t\n\t    \t\treturn this._needsUpdate;\n\t\n\t    \t},\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.update();\n\t    \t\tthis._needsUpdate = value;\n\t\n\t    \t},\n\t\n\t    \tsetValues: function ( values ) {\n\t\n\t    \t\tif ( values === undefined ) return;\n\t\n\t    \t\tfor ( var key in values ) {\n\t\n\t    \t\t\tvar newValue = values[ key ];\n\t\n\t    \t\t\tif ( newValue === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar currentValue = this[ key ];\n\t\n\t    \t\t\tif ( currentValue === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( (currentValue && currentValue.isColor) ) {\n\t\n\t    \t\t\t\tcurrentValue.set( newValue );\n\t\n\t    \t\t\t} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {\n\t\n\t    \t\t\t\tcurrentValue.copy( newValue );\n\t\n\t    \t\t\t} else if ( key === 'overdraw' ) {\n\t\n\t    \t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t    \t\t\t\tthis[ key ] = Number( newValue );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis[ key ] = newValue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar isRoot = meta === undefined;\n\t\n\t    \t\tif ( isRoot ) {\n\t\n\t    \t\t\tmeta = {\n\t    \t\t\t\ttextures: {},\n\t    \t\t\t\timages: {}\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tvar data = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Material',\n\t    \t\t\t\tgenerator: 'Material.toJSON'\n\t    \t\t\t}\n\t    \t\t};\n\t\n\t    \t\t// standard Material serialization\n\t    \t\tdata.uuid = this.uuid;\n\t    \t\tdata.type = this.type;\n\t\n\t    \t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t    \t\tif ( (this.color && this.color.isColor) ) data.color = this.color.getHex();\n\t\n\t    \t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t    \t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\t\n\t    \t\tif ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();\n\t    \t\tif ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();\n\t    \t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\n\t    \t\tif ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;\n\t    \t\tif ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.bumpMap && this.bumpMap.isTexture) ) {\n\t\n\t    \t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.bumpScale = this.bumpScale;\n\t\n\t    \t\t}\n\t    \t\tif ( (this.normalMap && this.normalMap.isTexture) ) {\n\t\n\t    \t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.normalScale = this.normalScale.toArray();\n\t\n\t    \t\t}\n\t    \t\tif ( (this.displacementMap && this.displacementMap.isTexture) ) {\n\t\n\t    \t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.displacementScale = this.displacementScale;\n\t    \t\t\tdata.displacementBias = this.displacementBias;\n\t\n\t    \t\t}\n\t    \t\tif ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\t\n\t    \t\tif ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\n\t    \t\tif ( (this.envMap && this.envMap.isTexture) ) {\n\t\n\t    \t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.size !== undefined ) data.size = this.size;\n\t    \t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\t\n\t    \t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t    \t\tif ( this.shading !== SmoothShading ) data.shading = this.shading;\n\t    \t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t    \t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\t\n\t    \t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t    \t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\t\n\t    \t\tdata.depthFunc = this.depthFunc;\n\t    \t\tdata.depthTest = this.depthTest;\n\t    \t\tdata.depthWrite = this.depthWrite;\n\t\n\t    \t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t    \t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t    \t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t    \t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t    \t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t    \t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\t\n\t    \t\tdata.skinning = this.skinning;\n\t    \t\tdata.morphTargets = this.morphTargets;\n\t\n\t    \t\t// TODO: Copied from Object3D.toJSON\n\t\n\t    \t\tfunction extractFromCache( cache ) {\n\t\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\tfor ( var key in cache ) {\n\t\n\t    \t\t\t\tvar data = cache[ key ];\n\t    \t\t\t\tdelete data.metadata;\n\t    \t\t\t\tvalues.push( data );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn values;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( isRoot ) {\n\t\n\t    \t\t\tvar textures = extractFromCache( meta.textures );\n\t    \t\t\tvar images = extractFromCache( meta.images );\n\t\n\t    \t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t    \t\t\tif ( images.length > 0 ) data.images = images;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn data;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.name = source.name;\n\t\n\t    \t\tthis.fog = source.fog;\n\t    \t\tthis.lights = source.lights;\n\t\n\t    \t\tthis.blending = source.blending;\n\t    \t\tthis.side = source.side;\n\t    \t\tthis.shading = source.shading;\n\t    \t\tthis.vertexColors = source.vertexColors;\n\t\n\t    \t\tthis.opacity = source.opacity;\n\t    \t\tthis.transparent = source.transparent;\n\t\n\t    \t\tthis.blendSrc = source.blendSrc;\n\t    \t\tthis.blendDst = source.blendDst;\n\t    \t\tthis.blendEquation = source.blendEquation;\n\t    \t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t    \t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t    \t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\n\t    \t\tthis.depthFunc = source.depthFunc;\n\t    \t\tthis.depthTest = source.depthTest;\n\t    \t\tthis.depthWrite = source.depthWrite;\n\t\n\t    \t\tthis.colorWrite = source.colorWrite;\n\t\n\t    \t\tthis.precision = source.precision;\n\t\n\t    \t\tthis.polygonOffset = source.polygonOffset;\n\t    \t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t    \t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\n\t    \t\tthis.alphaTest = source.alphaTest;\n\t\n\t    \t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\n\t    \t\tthis.overdraw = source.overdraw;\n\t\n\t    \t\tthis.visible = source.visible;\n\t    \t\tthis.clipShadows = source.clipShadows;\n\t\n\t    \t\tvar srcPlanes = source.clippingPlanes,\n\t    \t\t\tdstPlanes = null;\n\t\n\t    \t\tif ( srcPlanes !== null ) {\n\t\n\t    \t\t\tvar n = srcPlanes.length;\n\t    \t\t\tdstPlanes = new Array( n );\n\t\n\t    \t\t\tfor ( var i = 0; i !== n; ++ i )\n\t    \t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.clippingPlanes = dstPlanes;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tupdate: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'update' } );\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( Material.prototype, EventDispatcher.prototype );\n\t\n\t    var count$1 = 0;\n\t    function MaterialIdCount() { return count$1++; };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  defines: { \"label\" : \"value\" },\n\t     *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t     *\n\t     *  fragmentShader: <string>,\n\t     *  vertexShader: <string>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  lights: <bool>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function ShaderMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'ShaderMaterial';\n\t\n\t    \tthis.defines = {};\n\t    \tthis.uniforms = {};\n\t\n\t    \tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\t    \tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\t\n\t    \tthis.linewidth = 1;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t\n\t    \tthis.fog = false; // set to use scene fog\n\t    \tthis.lights = false; // set to use scene lights\n\t    \tthis.clipping = false; // set to use user-defined clipping planes\n\t\n\t    \tthis.skinning = false; // set to use skinning attribute streams\n\t    \tthis.morphTargets = false; // set to use morph targets\n\t    \tthis.morphNormals = false; // set to use morph normals\n\t\n\t    \tthis.extensions = {\n\t    \t\tderivatives: false, // set to use derivatives\n\t    \t\tfragDepth: false, // set to use fragment depth values\n\t    \t\tdrawBuffers: false, // set to use draw buffers\n\t    \t\tshaderTextureLOD: false // set to use shader texture LOD\n\t    \t};\n\t\n\t    \t// When rendered geometry doesn't include these attributes but the material does,\n\t    \t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t    \tthis.defaultAttributeValues = {\n\t    \t\t'color': [ 1, 1, 1 ],\n\t    \t\t'uv': [ 0, 0 ],\n\t    \t\t'uv2': [ 0, 0 ]\n\t    \t};\n\t\n\t    \tthis.index0AttributeName = undefined;\n\t\n\t    \tif ( parameters !== undefined ) {\n\t\n\t    \t\tif ( parameters.attributes !== undefined ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.setValues( parameters );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    ShaderMaterial.prototype = Object.create( Material.prototype );\n\t    ShaderMaterial.prototype.constructor = ShaderMaterial;\n\t\n\t    ShaderMaterial.prototype.isShaderMaterial = true;\n\t\n\t    ShaderMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.fragmentShader = source.fragmentShader;\n\t    \tthis.vertexShader = source.vertexShader;\n\t\n\t    \tthis.uniforms = exports.UniformsUtils.clone( source.uniforms );\n\t\n\t    \tthis.defines = source.defines;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t    \tthis.lights = source.lights;\n\t    \tthis.clipping = source.clipping;\n\t\n\t    \tthis.skinning = source.skinning;\n\t\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \tthis.extensions = source.extensions;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    ShaderMaterial.prototype.toJSON = function ( meta ) {\n\t\n\t    \tvar data = Material.prototype.toJSON.call( this, meta );\n\t\n\t    \tdata.uniforms = this.uniforms;\n\t    \tdata.vertexShader = this.vertexShader;\n\t    \tdata.fragmentShader = this.fragmentShader;\n\t\n\t    \treturn data;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author bhouston / https://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * parameters = {\n\t     *\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  displacementMap: new THREE.Texture( <Image> ),\n\t     *  displacementScale: <float>,\n\t     *  displacementBias: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>\n\t     * }\n\t     */\n\t\n\t    function MeshDepthMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshDepthMaterial';\n\t\n\t    \tthis.depthPacking = BasicDepthPacking;\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.displacementMap = null;\n\t    \tthis.displacementScale = 1;\n\t    \tthis.displacementBias = 0;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t\n\t    \tthis.fog = false;\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshDepthMaterial.prototype = Object.create( Material.prototype );\n\t    MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\t\n\t    MeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\t\n\t    MeshDepthMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.depthPacking = source.depthPacking;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.displacementMap = source.displacementMap;\n\t    \tthis.displacementScale = source.displacementScale;\n\t    \tthis.displacementBias = source.displacementBias;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Box3( min, max ) {\n\t\n\t    \tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t    \tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\t\n\t    }\n\t\n\t    Box3.prototype = {\n\t\n\t    \tconstructor: Box3,\n\t\n\t    \tisBox3: true,\n\t\n\t    \tset: function ( min, max ) {\n\t\n\t    \t\tthis.min.copy( min );\n\t    \t\tthis.max.copy( max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromArray: function ( array ) {\n\t\n\t    \t\tvar minX = + Infinity;\n\t    \t\tvar minY = + Infinity;\n\t    \t\tvar minZ = + Infinity;\n\t\n\t    \t\tvar maxX = - Infinity;\n\t    \t\tvar maxY = - Infinity;\n\t    \t\tvar maxZ = - Infinity;\n\t\n\t    \t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\t\n\t    \t\t\tvar x = array[ i ];\n\t    \t\t\tvar y = array[ i + 1 ];\n\t    \t\t\tvar z = array[ i + 2 ];\n\t\n\t    \t\t\tif ( x < minX ) minX = x;\n\t    \t\t\tif ( y < minY ) minY = y;\n\t    \t\t\tif ( z < minZ ) minZ = z;\n\t\n\t    \t\t\tif ( x > maxX ) maxX = x;\n\t    \t\t\tif ( y > maxY ) maxY = y;\n\t    \t\t\tif ( z > maxZ ) maxZ = z;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.min.set( minX, minY, minZ );\n\t    \t\tthis.max.set( maxX, maxY, maxZ );\n\t\n\t    \t},\n\t\n\t    \tsetFromPoints: function ( points ) {\n\t\n\t    \t\tthis.makeEmpty();\n\t\n\t    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.expandByPoint( points[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromCenterAndSize: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function setFromCenterAndSize( center, size ) {\n\t\n\t    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\n\t    \t\t\tthis.min.copy( center ).sub( halfSize );\n\t    \t\t\tthis.max.copy( center ).add( halfSize );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetFromObject: function () {\n\t\n\t    \t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t    \t\t// accounting for both the object's, and children's, world transforms\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function setFromObject( object ) {\n\t\n\t    \t\t\tvar scope = this;\n\t\n\t    \t\t\tobject.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.makeEmpty();\n\t\n\t    \t\t\tobject.traverse( function ( node ) {\n\t\n\t    \t\t\t\tvar geometry = node.geometry;\n\t\n\t    \t\t\t\tif ( geometry !== undefined ) {\n\t\n\t    \t\t\t\t\tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\n\t    \t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t    \t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\t\n\t    \t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\t\n\t    \t\t\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\t\t\t\tvar array, offset, stride;\n\t\n\t    \t\t\t\t\t\t\tif ( (attribute && attribute.isInterleavedBufferAttribute) ) {\n\t\n\t    \t\t\t\t\t\t\t\tarray = attribute.data.array;\n\t    \t\t\t\t\t\t\t\toffset = attribute.offset;\n\t    \t\t\t\t\t\t\t\tstride = attribute.data.stride;\n\t\n\t    \t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\tarray = attribute.array;\n\t    \t\t\t\t\t\t\t\toffset = 0;\n\t    \t\t\t\t\t\t\t\tstride = 3;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tfor ( var i = offset, il = array.length; i < il; i += stride ) {\n\t\n\t    \t\t\t\t\t\t\t\tv1.fromArray( array, i );\n\t    \t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\t\n\t    \t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( box ) {\n\t\n\t    \t\tthis.min.copy( box.min );\n\t    \t\tthis.max.copy( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeEmpty: function () {\n\t\n\t    \t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t    \t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tisEmpty: function () {\n\t\n\t    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\n\t    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\t\n\t    \t},\n\t\n\t    \tgetCenter: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\t\n\t    \t},\n\t\n\t    \tgetSize: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\t\n\t    \t},\n\t\n\t    \texpandByPoint: function ( point ) {\n\t\n\t    \t\tthis.min.min( point );\n\t    \t\tthis.max.max( point );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByVector: function ( vector ) {\n\t\n\t    \t\tthis.min.sub( vector );\n\t    \t\tthis.max.add( vector );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByScalar: function ( scalar ) {\n\t\n\t    \t\tthis.min.addScalar( - scalar );\n\t    \t\tthis.max.addScalar( scalar );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t    \t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n\t    \t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tcontainsBox: function ( box ) {\n\t\n\t    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t    \t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n\t    \t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tgetParameter: function ( point, optionalTarget ) {\n\t\n\t    \t\t// This can potentially have a divide by zero if the box\n\t    \t\t// has a size dimension of 0.\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn result.set(\n\t    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t    \t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t    \t\t);\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\t// using 6 splitting planes to rule out intersections.\n\t\n\t    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t    \t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n\t    \t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tintersectsSphere: ( function () {\n\t\n\t    \t\tvar closestPoint;\n\t\n\t    \t\treturn function intersectsSphere( sphere ) {\n\t\n\t    \t\t\tif ( closestPoint === undefined ) closestPoint = new Vector3();\n\t\n\t    \t\t\t// Find the point on the AABB closest to the sphere center.\n\t    \t\t\tthis.clampPoint( sphere.center, closestPoint );\n\t\n\t    \t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t    \t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \tintersectsPlane: function ( plane ) {\n\t\n\t    \t\t// We compute the minimum and maximum dot product values. If those values\n\t    \t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\tif ( plane.normal.x > 0 ) {\n\t\n\t    \t\t\tmin = plane.normal.x * this.min.x;\n\t    \t\t\tmax = plane.normal.x * this.max.x;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmin = plane.normal.x * this.max.x;\n\t    \t\t\tmax = plane.normal.x * this.min.x;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( plane.normal.y > 0 ) {\n\t\n\t    \t\t\tmin += plane.normal.y * this.min.y;\n\t    \t\t\tmax += plane.normal.y * this.max.y;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmin += plane.normal.y * this.max.y;\n\t    \t\t\tmax += plane.normal.y * this.min.y;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( plane.normal.z > 0 ) {\n\t\n\t    \t\t\tmin += plane.normal.z * this.min.z;\n\t    \t\t\tmax += plane.normal.z * this.max.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmin += plane.normal.z * this.max.z;\n\t    \t\t\tmax += plane.normal.z * this.min.z;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn ( min <= plane.constant && max >= plane.constant );\n\t\n\t    \t},\n\t\n\t    \tclampPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function distanceToPoint( point ) {\n\t\n\t    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t    \t\t\treturn clampedPoint.sub( point ).length();\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetBoundingSphere: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function getBoundingSphere( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Sphere();\n\t\n\t    \t\t\tthis.getCenter( result.center );\n\t\n\t    \t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersect: function ( box ) {\n\t\n\t    \t\tthis.min.max( box.min );\n\t    \t\tthis.max.min( box.max );\n\t\n\t    \t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t    \t\tif( this.isEmpty() ) this.makeEmpty();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tunion: function ( box ) {\n\t\n\t    \t\tthis.min.min( box.min );\n\t    \t\tthis.max.max( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function () {\n\t\n\t    \t\tvar points = [\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3()\n\t    \t\t];\n\t\n\t    \t\treturn function applyMatrix4( matrix ) {\n\t\n\t    \t\t\t// transform of empty box is an empty box.\n\t    \t\t\tif( this.isEmpty() ) return this;\n\t\n\t    \t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t    \t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t    \t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t    \t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t    \t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t    \t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t    \t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t    \t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t    \t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\t\n\t    \t\t\tthis.setFromPoints( points );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.min.add( offset );\n\t    \t\tthis.max.add( offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( box ) {\n\t\n\t    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Sphere( center, radius ) {\n\t\n\t    \tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t    \tthis.radius = ( radius !== undefined ) ? radius : 0;\n\t\n\t    }\n\t\n\t    Sphere.prototype = {\n\t\n\t    \tconstructor: Sphere,\n\t\n\t    \tset: function ( center, radius ) {\n\t\n\t    \t\tthis.center.copy( center );\n\t    \t\tthis.radius = radius;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromPoints: function () {\n\t\n\t    \t\tvar box = new Box3();\n\t\n\t    \t\treturn function setFromPoints( points, optionalCenter ) {\n\t\n\t    \t\t\tvar center = this.center;\n\t\n\t    \t\t\tif ( optionalCenter !== undefined ) {\n\t\n\t    \t\t\t\tcenter.copy( optionalCenter );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar maxRadiusSq = 0;\n\t\n\t    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( sphere ) {\n\t\n\t    \t\tthis.center.copy( sphere.center );\n\t    \t\tthis.radius = sphere.radius;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tempty: function () {\n\t\n\t    \t\treturn ( this.radius <= 0 );\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function ( point ) {\n\t\n\t    \t\treturn ( point.distanceTo( this.center ) - this.radius );\n\t\n\t    \t},\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\tvar radiusSum = this.radius + sphere.radius;\n\t\n\t    \t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\treturn box.intersectsSphere( this );\n\t\n\t    \t},\n\t\n\t    \tintersectsPlane: function ( plane ) {\n\t\n\t    \t\t// We use the following equation to compute the signed distance from\n\t    \t\t// the center of the sphere to the plane.\n\t    \t\t//\n\t    \t\t// distance = q * n - d\n\t    \t\t//\n\t    \t\t// If this distance is greater than the radius of the sphere,\n\t    \t\t// then there is no intersection.\n\t\n\t    \t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\t\n\t    \t},\n\t\n\t    \tclampPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tresult.copy( point );\n\t\n\t    \t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\t\n\t    \t\t\tresult.sub( this.center ).normalize();\n\t    \t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \tgetBoundingBox: function ( optionalTarget ) {\n\t\n\t    \t\tvar box = optionalTarget || new Box3();\n\t\n\t    \t\tbox.set( this.center, this.center );\n\t    \t\tbox.expandByScalar( this.radius );\n\t\n\t    \t\treturn box;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( matrix ) {\n\t\n\t    \t\tthis.center.applyMatrix4( matrix );\n\t    \t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.center.add( offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( sphere ) {\n\t\n\t    \t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author bhouston / http://clara.io\n\t     * @author tschw\n\t     */\n\t\n\t    function Matrix3() {\n\t\n\t    \tthis.elements = new Float32Array( [\n\t\n\t    \t\t1, 0, 0,\n\t    \t\t0, 1, 0,\n\t    \t\t0, 0, 1\n\t\n\t    \t] );\n\t\n\t    \tif ( arguments.length > 0 ) {\n\t\n\t    \t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Matrix3.prototype = {\n\t\n\t    \tconstructor: Matrix3,\n\t\n\t    \tisMatrix3: true,\n\t\n\t    \tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t    \t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t    \t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tidentity: function () {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0, 0,\n\t    \t\t\t0, 1, 0,\n\t    \t\t\t0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().fromArray( this.elements );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( m ) {\n\t\n\t    \t\tvar me = m.elements;\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n\t    \t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n\t    \t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrix4: function( m ) {\n\t\n\t    \t\tvar me = m.elements;\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n\t    \t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n\t    \t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyToVector3Array: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToVector3Array( array, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = array.length;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\t\n\t    \t\t\t\tv1.fromArray( array, j );\n\t    \t\t\t\tv1.applyMatrix3( this );\n\t    \t\t\t\tv1.toArray( array, j );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn array;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyToBuffer: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\t\n\t    \t\t\t\tv1.x = buffer.getX( j );\n\t    \t\t\t\tv1.y = buffer.getY( j );\n\t    \t\t\t\tv1.z = buffer.getZ( j );\n\t\n\t    \t\t\t\tv1.applyMatrix3( this );\n\t\n\t    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn buffer;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmultiplyScalar: function ( s ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t    \t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t    \t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdeterminant: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t    \t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t    \t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\t\n\t    \t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\n\t    \t},\n\t\n\t    \tgetInverse: function ( matrix, throwOnDegenerate ) {\n\t\n\t    \t\tif ( (matrix && matrix.isMatrix4) ) {\n\t\n\t    \t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar me = matrix.elements,\n\t    \t\t\tte = this.elements,\n\t\n\t    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t    \t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t    \t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\t\n\t    \t\t\tt11 = n33 * n22 - n32 * n23,\n\t    \t\t\tt12 = n32 * n13 - n33 * n12,\n\t    \t\t\tt13 = n23 * n12 - n22 * n13,\n\t\n\t    \t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\n\t    \t\tif ( det === 0 ) {\n\t\n\t    \t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\t\n\t    \t\t\tif ( throwOnDegenerate === true ) {\n\t\n\t    \t\t\t\tthrow new Error( msg );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tconsole.warn( msg );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this.identity();\n\t    \t\t}\n\t\n\t    \t\tvar detInv = 1 / det;\n\t\n\t    \t\tte[ 0 ] = t11 * detInv;\n\t    \t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t    \t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\t\n\t    \t\tte[ 3 ] = t12 * detInv;\n\t    \t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t    \t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\t\n\t    \t\tte[ 6 ] = t13 * detInv;\n\t    \t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t    \t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttranspose: function () {\n\t\n\t    \t\tvar tmp, m = this.elements;\n\t\n\t    \t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t    \t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t    \t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tflattenToArrayOffset: function ( array, offset ) {\n\t\n\t    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t    \t\t\t\t\"- just use .toArray instead.\" );\n\t\n\t    \t\treturn this.toArray( array, offset );\n\t\n\t    \t},\n\t\n\t    \tgetNormalMatrix: function ( matrix4 ) {\n\t\n\t    \t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\t\n\t    \t},\n\t\n\t    \ttransposeIntoArray: function ( r ) {\n\t\n\t    \t\tvar m = this.elements;\n\t\n\t    \t\tr[ 0 ] = m[ 0 ];\n\t    \t\tr[ 1 ] = m[ 3 ];\n\t    \t\tr[ 2 ] = m[ 6 ];\n\t    \t\tr[ 3 ] = m[ 1 ];\n\t    \t\tr[ 4 ] = m[ 4 ];\n\t    \t\tr[ 5 ] = m[ 7 ];\n\t    \t\tr[ 6 ] = m[ 2 ];\n\t    \t\tr[ 7 ] = m[ 5 ];\n\t    \t\tr[ 8 ] = m[ 8 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tfor( var i = 0; i < 9; i ++ ) {\n\t\n\t    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tarray[ offset ] = te[ 0 ];\n\t    \t\tarray[ offset + 1 ] = te[ 1 ];\n\t    \t\tarray[ offset + 2 ] = te[ 2 ];\n\t\n\t    \t\tarray[ offset + 3 ] = te[ 3 ];\n\t    \t\tarray[ offset + 4 ] = te[ 4 ];\n\t    \t\tarray[ offset + 5 ] = te[ 5 ];\n\t\n\t    \t\tarray[ offset + 6 ] = te[ 6 ];\n\t    \t\tarray[ offset + 7 ] = te[ 7 ];\n\t    \t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\n\t    \t\treturn array;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Plane( normal, constant ) {\n\t\n\t    \tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t    \tthis.constant = ( constant !== undefined ) ? constant : 0;\n\t\n\t    }\n\t\n\t    Plane.prototype = {\n\t\n\t    \tconstructor: Plane,\n\t\n\t    \tset: function ( normal, constant ) {\n\t\n\t    \t\tthis.normal.copy( normal );\n\t    \t\tthis.constant = constant;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponents: function ( x, y, z, w ) {\n\t\n\t    \t\tthis.normal.set( x, y, z );\n\t    \t\tthis.constant = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\t\n\t    \t\tthis.normal.copy( normal );\n\t    \t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromCoplanarPoints: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t    \t\tvar v2 = new Vector3();\n\t\n\t    \t\treturn function setFromCoplanarPoints( a, b, c ) {\n\t\n\t    \t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\t\n\t    \t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\t\n\t    \t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( plane ) {\n\t\n\t    \t\tthis.normal.copy( plane.normal );\n\t    \t\tthis.constant = plane.constant;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\n\t    \t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t    \t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t    \t\tthis.constant *= inverseNormalLength;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.constant *= - 1;\n\t    \t\tthis.normal.negate();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function ( point ) {\n\t\n\t    \t\treturn this.normal.dot( point ) + this.constant;\n\t\n\t    \t},\n\t\n\t    \tdistanceToSphere: function ( sphere ) {\n\t\n\t    \t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\t\n\t    \t},\n\t\n\t    \tprojectPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\t\n\t    \t},\n\t\n\t    \torthoPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\t\n\t    \t},\n\t\n\t    \tintersectLine: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function intersectLine( line, optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t\tvar direction = line.delta( v1 );\n\t\n\t    \t\t\tvar denominator = this.normal.dot( direction );\n\t\n\t    \t\t\tif ( denominator === 0 ) {\n\t\n\t    \t\t\t\t// line is coplanar, return origin\n\t    \t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\t\n\t    \t\t\t\t\treturn result.copy( line.start );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// Unsure if this is the correct method to handle this case.\n\t    \t\t\t\treturn undefined;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\t\n\t    \t\t\tif ( t < 0 || t > 1 ) {\n\t\n\t    \t\t\t\treturn undefined;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsLine: function ( line ) {\n\t\n\t    \t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\n\t    \t\tvar startSign = this.distanceToPoint( line.start );\n\t    \t\tvar endSign = this.distanceToPoint( line.end );\n\t\n\t    \t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\treturn box.intersectsPlane( this );\n\t\n\t    \t},\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\treturn sphere.intersectsPlane( this );\n\t\n\t    \t},\n\t\n\t    \tcoplanarPoint: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t    \t\tvar m1 = new Matrix3();\n\t\n\t    \t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\t\n\t    \t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\t\n\t    \t\t\t// transform normal based on theory here:\n\t    \t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t    \t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t    \t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t    \t\t\tthis.constant = - referencePoint.dot( normal );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.constant = this.constant - offset.dot( this.normal );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( plane ) {\n\t\n\t    \t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Frustum( p0, p1, p2, p3, p4, p5 ) {\n\t\n\t    \tthis.planes = [\n\t\n\t    \t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t    \t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t    \t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t    \t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t    \t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t    \t\t( p5 !== undefined ) ? p5 : new Plane()\n\t\n\t    \t];\n\t\n\t    }\n\t\n\t    Frustum.prototype = {\n\t\n\t    \tconstructor: Frustum,\n\t\n\t    \tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t\n\t    \t\tplanes[ 0 ].copy( p0 );\n\t    \t\tplanes[ 1 ].copy( p1 );\n\t    \t\tplanes[ 2 ].copy( p2 );\n\t    \t\tplanes[ 3 ].copy( p3 );\n\t    \t\tplanes[ 4 ].copy( p4 );\n\t    \t\tplanes[ 5 ].copy( p5 );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( frustum ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t\n\t    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrix: function ( m ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t    \t\tvar me = m.elements;\n\t    \t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t    \t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t    \t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t    \t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\t\n\t    \t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t    \t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t    \t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t    \t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t    \t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t    \t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tintersectsObject: function () {\n\t\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function intersectsObject( object ) {\n\t\n\t    \t\t\tvar geometry = object.geometry;\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null )\n\t    \t\t\t\tgeometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere )\n\t    \t\t\t\t.applyMatrix4( object.matrixWorld );\n\t\n\t    \t\t\treturn this.intersectsSphere( sphere );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsSprite: function () {\n\t\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function intersectsSprite( sprite ) {\n\t\n\t    \t\t\tsphere.center.set( 0, 0, 0 );\n\t    \t\t\tsphere.radius = 0.7071067811865476;\n\t    \t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\t\n\t    \t\t\treturn this.intersectsSphere( sphere );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t    \t\tvar center = sphere.center;\n\t    \t\tvar negRadius = - sphere.radius;\n\t\n\t    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\t\n\t    \t\t\tif ( distance < negRadius ) {\n\t\n\t    \t\t\t\treturn false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function () {\n\t\n\t    \t\tvar p1 = new Vector3(),\n\t    \t\t\tp2 = new Vector3();\n\t\n\t    \t\treturn function intersectsBox( box ) {\n\t\n\t    \t\t\tvar planes = this.planes;\n\t\n\t    \t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\t\n\t    \t\t\t\tvar plane = planes[ i ];\n\t\n\t    \t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t    \t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t    \t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t    \t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t    \t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t    \t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\t\n\t    \t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t    \t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\t\n\t    \t\t\t\t// if both outside plane, no intersection\n\t\n\t    \t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\t\n\t    \t\t\t\t\treturn false;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t\n\t    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\t\n\t    \t\t\t\treturn false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {\n\t\n\t    \tvar _gl = _renderer.context,\n\t    \t_state = _renderer.state,\n\t    \t_frustum = new Frustum(),\n\t    \t_projScreenMatrix = new Matrix4(),\n\t\n\t    \t_lightShadows = _lights.shadows,\n\t\n\t    \t_shadowMapSize = new Vector2(),\n\t    \t_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\t\n\t    \t_lookTarget = new Vector3(),\n\t    \t_lightPositionWorld = new Vector3(),\n\t\n\t    \t_renderList = [],\n\t\n\t    \t_MorphingFlag = 1,\n\t    \t_SkinningFlag = 2,\n\t\n\t    \t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\t\n\t    \t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t    \t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\t\n\t    \t_materialCache = {};\n\t\n\t    \tvar cubeDirections = [\n\t    \t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t    \t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t    \t];\n\t\n\t    \tvar cubeUps = [\n\t    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t    \t];\n\t\n\t    \tvar cube2DViewPorts = [\n\t    \t\tnew Vector4(), new Vector4(), new Vector4(),\n\t    \t\tnew Vector4(), new Vector4(), new Vector4()\n\t    \t];\n\t\n\t    \t// init\n\t\n\t    \tvar depthMaterialTemplate = new MeshDepthMaterial();\n\t    \tdepthMaterialTemplate.depthPacking = RGBADepthPacking;\n\t    \tdepthMaterialTemplate.clipping = true;\n\t\n\t    \tvar distanceShader = ShaderLib[ \"distanceRGBA\" ];\n\t    \tvar distanceUniforms = exports.UniformsUtils.clone( distanceShader.uniforms );\n\t\n\t    \tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\t\n\t    \t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t    \t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\t\n\t    \t\tvar depthMaterial = depthMaterialTemplate.clone();\n\t    \t\tdepthMaterial.morphTargets = useMorphing;\n\t    \t\tdepthMaterial.skinning = useSkinning;\n\t\n\t    \t\t_depthMaterials[ i ] = depthMaterial;\n\t\n\t    \t\tvar distanceMaterial = new ShaderMaterial( {\n\t    \t\t\tdefines: {\n\t    \t\t\t\t'USE_SHADOWMAP': ''\n\t    \t\t\t},\n\t    \t\t\tuniforms: distanceUniforms,\n\t    \t\t\tvertexShader: distanceShader.vertexShader,\n\t    \t\t\tfragmentShader: distanceShader.fragmentShader,\n\t    \t\t\tmorphTargets: useMorphing,\n\t    \t\t\tskinning: useSkinning,\n\t    \t\t\tclipping: true\n\t    \t\t} );\n\t\n\t    \t\t_distanceMaterials[ i ] = distanceMaterial;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar scope = this;\n\t\n\t    \tthis.enabled = false;\n\t\n\t    \tthis.autoUpdate = true;\n\t    \tthis.needsUpdate = false;\n\t\n\t    \tthis.type = PCFShadowMap;\n\t\n\t    \tthis.renderReverseSided = true;\n\t    \tthis.renderSingleSided = true;\n\t\n\t    \tthis.render = function ( scene, camera ) {\n\t\n\t    \t\tif ( scope.enabled === false ) return;\n\t    \t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\t\n\t    \t\tif ( _lightShadows.length === 0 ) return;\n\t\n\t    \t\t// Set GL state for depth map.\n\t    \t\t_state.clearColor( 1, 1, 1, 1 );\n\t    \t\t_state.disable( _gl.BLEND );\n\t    \t\t_state.setDepthTest( true );\n\t    \t\t_state.setScissorTest( false );\n\t\n\t    \t\t// render depth map\n\t\n\t    \t\tvar faceCount, isPointLight;\n\t\n\t    \t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar light = _lightShadows[ i ];\n\t    \t\t\tvar shadow = light.shadow;\n\t\n\t    \t\t\tif ( shadow === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar shadowCamera = shadow.camera;\n\t\n\t    \t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t    \t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\t\n\t    \t\t\tif ( (light && light.isPointLight) ) {\n\t\n\t    \t\t\t\tfaceCount = 6;\n\t    \t\t\t\tisPointLight = true;\n\t\n\t    \t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t    \t\t\t\tvar vpHeight = _shadowMapSize.y;\n\t\n\t    \t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t    \t\t\t\t// following orientation:\n\t    \t\t\t\t//\n\t    \t\t\t\t//  xzXZ\n\t    \t\t\t\t//   y Y\n\t    \t\t\t\t//\n\t    \t\t\t\t// X - Positive x direction\n\t    \t\t\t\t// x - Negative x direction\n\t    \t\t\t\t// Y - Positive y direction\n\t    \t\t\t\t// y - Negative y direction\n\t    \t\t\t\t// Z - Positive z direction\n\t    \t\t\t\t// z - Negative z direction\n\t\n\t    \t\t\t\t// positive X\n\t    \t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// negative X\n\t    \t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// positive Z\n\t    \t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// negative Z\n\t    \t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// positive Y\n\t    \t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t    \t\t\t\t// negative Y\n\t    \t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\t\n\t    \t\t\t\t_shadowMapSize.x *= 4.0;\n\t    \t\t\t\t_shadowMapSize.y *= 2.0;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tfaceCount = 1;\n\t    \t\t\t\tisPointLight = false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( shadow.map === null ) {\n\t\n\t    \t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\t\n\t    \t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\n\t    \t\t\t\tshadowCamera.updateProjectionMatrix();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( (shadow && shadow.isSpotLightShadow) ) {\n\t\n\t    \t\t\t\tshadow.update( light );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar shadowMap = shadow.map;\n\t    \t\t\tvar shadowMatrix = shadow.matrix;\n\t\n\t    \t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\t\n\t    \t\t\t_renderer.setRenderTarget( shadowMap );\n\t    \t\t\t_renderer.clear();\n\t\n\t    \t\t\t// render shadow map for each cube face (if omni-directional) or\n\t    \t\t\t// run a single pass if not\n\t\n\t    \t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\t\n\t    \t\t\t\tif ( isPointLight ) {\n\t\n\t    \t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t    \t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t    \t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\n\t    \t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t    \t\t\t\t\t_state.viewport( vpDimensions );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tshadowCamera.updateMatrixWorld();\n\t    \t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\t\n\t    \t\t\t\t// compute shadow matrix\n\t\n\t    \t\t\t\tshadowMatrix.set(\n\t    \t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t    \t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t    \t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t    \t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t    \t\t\t\t);\n\t\n\t    \t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t    \t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\t\n\t    \t\t\t\t// update camera matrices and frustum\n\t\n\t    \t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t    \t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\t\n\t    \t\t\t\t// set object matrices & frustum culling\n\t\n\t    \t\t\t\t_renderList.length = 0;\n\t\n\t    \t\t\t\tprojectObject( scene, camera, shadowCamera );\n\t\n\t    \t\t\t\t// render shadow map\n\t    \t\t\t\t// render regular objects\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\tvar object = _renderList[ j ];\n\t    \t\t\t\t\tvar geometry = _objects.update( object );\n\t    \t\t\t\t\tvar material = object.material;\n\t\n\t    \t\t\t\t\tif ( (material && material.isMultiMaterial) ) {\n\t\n\t    \t\t\t\t\t\tvar groups = geometry.groups;\n\t    \t\t\t\t\t\tvar materials = material.materials;\n\t\n\t    \t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\t\n\t    \t\t\t\t\t\t\tvar group = groups[ k ];\n\t    \t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\t\n\t    \t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\t\n\t    \t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t    \t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t    \t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Restore GL state.\n\t    \t\tvar clearColor = _renderer.getClearColor(),\n\t    \t\tclearAlpha = _renderer.getClearAlpha();\n\t    \t\t_renderer.setClearColor( clearColor, clearAlpha );\n\t\n\t    \t\tscope.needsUpdate = false;\n\t\n\t    \t};\n\t\n\t    \tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tvar result = null;\n\t\n\t    \t\tvar materialVariants = _depthMaterials;\n\t    \t\tvar customMaterial = object.customDepthMaterial;\n\t\n\t    \t\tif ( isPointLight ) {\n\t\n\t    \t\t\tmaterialVariants = _distanceMaterials;\n\t    \t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ! customMaterial ) {\n\t\n\t    \t\t\tvar useMorphing = false;\n\t\n\t    \t\t\tif ( material.morphTargets ) {\n\t\n\t    \t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\n\t    \t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\t\n\t    \t\t\tvar variantIndex = 0;\n\t\n\t    \t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t    \t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\t\n\t    \t\t\tresult = materialVariants[ variantIndex ];\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tresult = customMaterial;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( _renderer.localClippingEnabled &&\n\t    \t\t\t material.clipShadows === true &&\n\t    \t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\t\n\t    \t\t\t// in this case we need a unique material instance reflecting the\n\t    \t\t\t// appropriate state\n\t\n\t    \t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\t\n\t    \t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\t\n\t    \t\t\tif ( materialsForVariant === undefined ) {\n\t\n\t    \t\t\t\tmaterialsForVariant = {};\n\t    \t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\t\n\t    \t\t\tif ( cachedMaterial === undefined ) {\n\t\n\t    \t\t\t\tcachedMaterial = result.clone();\n\t    \t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tresult = cachedMaterial;\n\t\n\t    \t\t}\n\t\n\t    \t\tresult.visible = material.visible;\n\t    \t\tresult.wireframe = material.wireframe;\n\t\n\t    \t\tvar side = material.side;\n\t\n\t    \t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\t\n\t    \t\t\tside = FrontSide;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( scope.renderReverseSided ) {\n\t\n\t    \t\t\tif ( side === FrontSide ) side = BackSide;\n\t    \t\t\telse if ( side === BackSide ) side = FrontSide;\n\t\n\t    \t\t}\n\t\n\t    \t\tresult.side = side;\n\t\n\t    \t\tresult.clipShadows = material.clipShadows;\n\t    \t\tresult.clippingPlanes = material.clippingPlanes;\n\t\n\t    \t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t    \t\tresult.linewidth = material.linewidth;\n\t\n\t    \t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\t\n\t    \t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    \tfunction projectObject( object, camera, shadowCamera ) {\n\t\n\t    \t\tif ( object.visible === false ) return;\n\t\n\t    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\t\n\t    \t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\t\n\t    \t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\t\n\t    \t\t\t\tvar material = object.material;\n\t\n\t    \t\t\t\tif ( material.visible === true ) {\n\t\n\t    \t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\t    \t\t\t\t\t_renderList.push( object );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar children = object.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Ray( origin, direction ) {\n\t\n\t    \tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t    \tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\t\n\t    }\n\t\n\t    Ray.prototype = {\n\t\n\t    \tconstructor: Ray,\n\t\n\t    \tset: function ( origin, direction ) {\n\t\n\t    \t\tthis.origin.copy( origin );\n\t    \t\tthis.direction.copy( direction );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( ray ) {\n\t\n\t    \t\tthis.origin.copy( ray.origin );\n\t    \t\tthis.direction.copy( ray.direction );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tat: function ( t, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\t\n\t    \t},\n\t\n\t    \tlookAt: function ( v ) {\n\t\n\t    \t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trecast: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function recast( t ) {\n\t\n\t    \t\t\tthis.origin.copy( this.at( t, v1 ) );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclosestPointToPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\tresult.subVectors( point, this.origin );\n\t    \t\tvar directionDistance = result.dot( this.direction );\n\t\n\t    \t\tif ( directionDistance < 0 ) {\n\t\n\t    \t\t\treturn result.copy( this.origin );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function ( point ) {\n\t\n\t    \t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceSqToPoint: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function distanceSqToPoint( point ) {\n\t\n\t    \t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\t\n\t    \t\t\t// point behind the ray\n\t\n\t    \t\t\tif ( directionDistance < 0 ) {\n\t\n\t    \t\t\t\treturn this.origin.distanceToSquared( point );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\t\n\t    \t\t\treturn v1.distanceToSquared( point );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tdistanceSqToSegment: function () {\n\t\n\t    \t\tvar segCenter = new Vector3();\n\t    \t\tvar segDir = new Vector3();\n\t    \t\tvar diff = new Vector3();\n\t\n\t    \t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\t\n\t    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t    \t\t\t// It returns the min distance between the ray and the segment\n\t    \t\t\t// defined by v0 and v1\n\t    \t\t\t// It can also set two optional targets :\n\t    \t\t\t// - The closest point on the ray\n\t    \t\t\t// - The closest point on the segment\n\t\n\t    \t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t    \t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t    \t\t\tdiff.copy( this.origin ).sub( segCenter );\n\t\n\t    \t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t    \t\t\tvar a01 = - this.direction.dot( segDir );\n\t    \t\t\tvar b0 = diff.dot( this.direction );\n\t    \t\t\tvar b1 = - diff.dot( segDir );\n\t    \t\t\tvar c = diff.lengthSq();\n\t    \t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t    \t\t\tvar s0, s1, sqrDist, extDet;\n\t\n\t    \t\t\tif ( det > 0 ) {\n\t\n\t    \t\t\t\t// The ray and segment are not parallel.\n\t\n\t    \t\t\t\ts0 = a01 * b1 - b0;\n\t    \t\t\t\ts1 = a01 * b0 - b1;\n\t    \t\t\t\textDet = segExtent * det;\n\t\n\t    \t\t\t\tif ( s0 >= 0 ) {\n\t\n\t    \t\t\t\t\tif ( s1 >= - extDet ) {\n\t\n\t    \t\t\t\t\t\tif ( s1 <= extDet ) {\n\t\n\t    \t\t\t\t\t\t\t// region 0\n\t    \t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\n\t    \t\t\t\t\t\t\tvar invDet = 1 / det;\n\t    \t\t\t\t\t\t\ts0 *= invDet;\n\t    \t\t\t\t\t\t\ts1 *= invDet;\n\t    \t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t// region 1\n\t\n\t    \t\t\t\t\t\t\ts1 = segExtent;\n\t    \t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t    \t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t// region 5\n\t\n\t    \t\t\t\t\t\ts1 = - segExtent;\n\t    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( s1 <= - extDet ) {\n\t\n\t    \t\t\t\t\t\t// region 4\n\t\n\t    \t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t} else if ( s1 <= extDet ) {\n\t\n\t    \t\t\t\t\t\t// region 3\n\t\n\t    \t\t\t\t\t\ts0 = 0;\n\t    \t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t    \t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t// region 2\n\t\n\t    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// Ray and segment are parallel.\n\t\n\t    \t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t    \t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t    \t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( optionalPointOnRay ) {\n\t\n\t    \t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( optionalPointOnSegment ) {\n\t\n\t    \t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn sqrDist;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectSphere: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function intersectSphere( sphere, optionalTarget ) {\n\t\n\t    \t\t\tv1.subVectors( sphere.center, this.origin );\n\t    \t\t\tvar tca = v1.dot( this.direction );\n\t    \t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t    \t\t\tvar radius2 = sphere.radius * sphere.radius;\n\t\n\t    \t\t\tif ( d2 > radius2 ) return null;\n\t\n\t    \t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\t\n\t    \t\t\t// t0 = first intersect point - entrance on front of sphere\n\t    \t\t\tvar t0 = tca - thc;\n\t\n\t    \t\t\t// t1 = second intersect point - exit point on back of sphere\n\t    \t\t\tvar t1 = tca + thc;\n\t\n\t    \t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t    \t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\t\n\t    \t\t\t// test to see if t0 is behind the ray:\n\t    \t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t    \t\t\t// in order to always return an intersect point that is in front of the ray.\n\t    \t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\t\n\t    \t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t    \t\t\treturn this.at( t0, optionalTarget );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\t\n\t    \t},\n\t\n\t    \tdistanceToPlane: function ( plane ) {\n\t\n\t    \t\tvar denominator = plane.normal.dot( this.direction );\n\t\n\t    \t\tif ( denominator === 0 ) {\n\t\n\t    \t\t\t// line is coplanar, return origin\n\t    \t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\t\n\t    \t\t\t\treturn 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\t\n\t    \t\t// Return if the ray never intersects the plane\n\t\n\t    \t\treturn t >= 0 ? t :  null;\n\t\n\t    \t},\n\t\n\t    \tintersectPlane: function ( plane, optionalTarget ) {\n\t\n\t    \t\tvar t = this.distanceToPlane( plane );\n\t\n\t    \t\tif ( t === null ) {\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.at( t, optionalTarget );\n\t\n\t    \t},\n\t\n\t\n\t\n\t    \tintersectsPlane: function ( plane ) {\n\t\n\t    \t\t// check if the ray lies on the plane first\n\t\n\t    \t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\t\n\t    \t\tif ( distToPoint === 0 ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar denominator = plane.normal.dot( this.direction );\n\t\n\t    \t\tif ( denominator * distToPoint < 0 ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// ray origin is behind the plane (and is pointing behind it)\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tintersectBox: function ( box, optionalTarget ) {\n\t\n\t    \t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\n\t    \t\tvar invdirx = 1 / this.direction.x,\n\t    \t\t\tinvdiry = 1 / this.direction.y,\n\t    \t\t\tinvdirz = 1 / this.direction.z;\n\t\n\t    \t\tvar origin = this.origin;\n\t\n\t    \t\tif ( invdirx >= 0 ) {\n\t\n\t    \t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t    \t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t    \t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( invdiry >= 0 ) {\n\t\n\t    \t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t    \t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t    \t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\t\n\t    \t\t// These lines also handle the case where tmin or tmax is NaN\n\t    \t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\t\n\t    \t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\t\n\t    \t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\t\n\t    \t\tif ( invdirz >= 0 ) {\n\t\n\t    \t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t    \t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t    \t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\t\n\t    \t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\t\n\t    \t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\t\n\t    \t\t//return point closest to the ray (positive side)\n\t\n\t    \t\tif ( tmax < 0 ) return null;\n\t\n\t    \t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: ( function () {\n\t\n\t    \t\tvar v = new Vector3();\n\t\n\t    \t\treturn function intersectsBox( box ) {\n\t\n\t    \t\t\treturn this.intersectBox( box, v ) !== null;\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \tintersectTriangle: function () {\n\t\n\t    \t\t// Compute the offset origin, edges, and normal.\n\t    \t\tvar diff = new Vector3();\n\t    \t\tvar edge1 = new Vector3();\n\t    \t\tvar edge2 = new Vector3();\n\t    \t\tvar normal = new Vector3();\n\t\n\t    \t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\t\n\t    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\n\t    \t\t\tedge1.subVectors( b, a );\n\t    \t\t\tedge2.subVectors( c, a );\n\t    \t\t\tnormal.crossVectors( edge1, edge2 );\n\t\n\t    \t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t    \t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t    \t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t    \t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t    \t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t    \t\t\tvar DdN = this.direction.dot( normal );\n\t    \t\t\tvar sign;\n\t\n\t    \t\t\tif ( DdN > 0 ) {\n\t\n\t    \t\t\t\tif ( backfaceCulling ) return null;\n\t    \t\t\t\tsign = 1;\n\t\n\t    \t\t\t} else if ( DdN < 0 ) {\n\t\n\t    \t\t\t\tsign = - 1;\n\t    \t\t\t\tDdN = - DdN;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tdiff.subVectors( this.origin, a );\n\t    \t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\t\n\t    \t\t\t// b1 < 0, no intersection\n\t    \t\t\tif ( DdQxE2 < 0 ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\t\n\t    \t\t\t// b2 < 0, no intersection\n\t    \t\t\tif ( DdE1xQ < 0 ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// b1+b2 > 1, no intersection\n\t    \t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Line intersects triangle, check if ray does.\n\t    \t\t\tvar QdN = - sign * diff.dot( normal );\n\t\n\t    \t\t\t// t < 0, no intersection\n\t    \t\t\tif ( QdN < 0 ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Ray intersects triangle.\n\t    \t\t\treturn this.at( QdN / DdN, optionalTarget );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyMatrix4: function ( matrix4 ) {\n\t\n\t    \t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n\t    \t\tthis.origin.applyMatrix4( matrix4 );\n\t    \t\tthis.direction.sub( this.origin );\n\t    \t\tthis.direction.normalize();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( ray ) {\n\t\n\t    \t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Euler( x, y, z, order ) {\n\t\n\t    \tthis._x = x || 0;\n\t    \tthis._y = y || 0;\n\t    \tthis._z = z || 0;\n\t    \tthis._order = order || Euler.DefaultOrder;\n\t\n\t    }\n\t\n\t    Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\t\n\t    Euler.DefaultOrder = 'XYZ';\n\t\n\t    Euler.prototype = {\n\t\n\t    \tconstructor: Euler,\n\t\n\t    \tisEuler: true,\n\t\n\t    \tget x () {\n\t\n\t    \t\treturn this._x;\n\t\n\t    \t},\n\t\n\t    \tset x ( value ) {\n\t\n\t    \t\tthis._x = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget y () {\n\t\n\t    \t\treturn this._y;\n\t\n\t    \t},\n\t\n\t    \tset y ( value ) {\n\t\n\t    \t\tthis._y = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget z () {\n\t\n\t    \t\treturn this._z;\n\t\n\t    \t},\n\t\n\t    \tset z ( value ) {\n\t\n\t    \t\tthis._z = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget order () {\n\t\n\t    \t\treturn this._order;\n\t\n\t    \t},\n\t\n\t    \tset order ( value ) {\n\t\n\t    \t\tthis._order = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tset: function ( x, y, z, order ) {\n\t\n\t    \t\tthis._x = x;\n\t    \t\tthis._y = y;\n\t    \t\tthis._z = z;\n\t    \t\tthis._order = order || this._order;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( euler ) {\n\t\n\t    \t\tthis._x = euler._x;\n\t    \t\tthis._y = euler._y;\n\t    \t\tthis._z = euler._z;\n\t    \t\tthis._order = euler._order;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromRotationMatrix: function ( m, order, update ) {\n\t\n\t    \t\tvar clamp = exports.Math.clamp;\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tvar te = m.elements;\n\t    \t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t    \t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t    \t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\t\n\t    \t\torder = order || this._order;\n\t\n\t    \t\tif ( order === 'XYZ' ) {\n\t\n\t    \t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t    \t\t\t\tthis._z = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'YXZ' ) {\n\t\n\t    \t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( m21, m22 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t    \t\t\t\tthis._z = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'ZXY' ) {\n\t\n\t    \t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._y = 0;\n\t    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'ZYX' ) {\n\t\n\t    \t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = 0;\n\t    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'YZX' ) {\n\t\n\t    \t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = 0;\n\t    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'XZY' ) {\n\t\n\t    \t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t    \t\t\t\tthis._y = Math.atan2( m13, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t    \t\t\t\tthis._y = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._order = order;\n\t\n\t    \t\tif ( update !== false ) this.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromQuaternion: function () {\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\treturn function setFromQuaternion( q, order, update ) {\n\t\n\t    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t    \t\t\tmatrix.makeRotationFromQuaternion( q );\n\t\n\t    \t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetFromVector3: function ( v, order ) {\n\t\n\t    \t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\t\n\t    \t},\n\t\n\t    \treorder: function () {\n\t\n\t    \t\t// WARNING: this discards revolution information -bhouston\n\t\n\t    \t\tvar q = new Quaternion();\n\t\n\t    \t\treturn function reorder( newOrder ) {\n\t\n\t    \t\t\tq.setFromEuler( this );\n\t\n\t    \t\t\treturn this.setFromQuaternion( q, newOrder );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tequals: function ( euler ) {\n\t\n\t    \t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array ) {\n\t\n\t    \t\tthis._x = array[ 0 ];\n\t    \t\tthis._y = array[ 1 ];\n\t    \t\tthis._z = array[ 2 ];\n\t    \t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this._x;\n\t    \t\tarray[ offset + 1 ] = this._y;\n\t    \t\tarray[ offset + 2 ] = this._z;\n\t    \t\tarray[ offset + 3 ] = this._order;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \ttoVector3: function ( optionalResult ) {\n\t\n\t    \t\tif ( optionalResult ) {\n\t\n\t    \t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn new Vector3( this._x, this._y, this._z );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tonChange: function ( callback ) {\n\t\n\t    \t\tthis.onChangeCallback = callback;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tonChangeCallback: function () {}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Layers() {\n\t\n\t    \tthis.mask = 1;\n\t\n\t    }\n\t\n\t    Layers.prototype = {\n\t\n\t    \tconstructor: Layers,\n\t\n\t    \tset: function ( channel ) {\n\t\n\t    \t\tthis.mask = 1 << channel;\n\t\n\t    \t},\n\t\n\t    \tenable: function ( channel ) {\n\t\n\t    \t\tthis.mask |= 1 << channel;\n\t\n\t    \t},\n\t\n\t    \ttoggle: function ( channel ) {\n\t\n\t    \t\tthis.mask ^= 1 << channel;\n\t\n\t    \t},\n\t\n\t    \tdisable: function ( channel ) {\n\t\n\t    \t\tthis.mask &= ~ ( 1 << channel );\n\t\n\t    \t},\n\t\n\t    \ttest: function ( layers ) {\n\t\n\t    \t\treturn ( this.mask & layers.mask ) !== 0;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author elephantatwork / www.elephantatwork.ch\n\t     */\n\t\n\t    function Object3D() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: Object3DIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'Object3D';\n\t\n\t    \tthis.parent = null;\n\t    \tthis.children = [];\n\t\n\t    \tthis.up = Object3D.DefaultUp.clone();\n\t\n\t    \tvar position = new Vector3();\n\t    \tvar rotation = new Euler();\n\t    \tvar quaternion = new Quaternion();\n\t    \tvar scale = new Vector3( 1, 1, 1 );\n\t\n\t    \tfunction onRotationChange() {\n\t\n\t    \t\tquaternion.setFromEuler( rotation, false );\n\t\n\t    \t}\n\t\n\t    \tfunction onQuaternionChange() {\n\t\n\t    \t\trotation.setFromQuaternion( quaternion, undefined, false );\n\t\n\t    \t}\n\t\n\t    \trotation.onChange( onRotationChange );\n\t    \tquaternion.onChange( onQuaternionChange );\n\t\n\t    \tObject.defineProperties( this, {\n\t    \t\tposition: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: position\n\t    \t\t},\n\t    \t\trotation: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: rotation\n\t    \t\t},\n\t    \t\tquaternion: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: quaternion\n\t    \t\t},\n\t    \t\tscale: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: scale\n\t    \t\t},\n\t    \t\tmodelViewMatrix: {\n\t    \t\t\tvalue: new Matrix4()\n\t    \t\t},\n\t    \t\tnormalMatrix: {\n\t    \t\t\tvalue: new Matrix3()\n\t    \t\t}\n\t    \t} );\n\t\n\t    \tthis.matrix = new Matrix4();\n\t    \tthis.matrixWorld = new Matrix4();\n\t\n\t    \tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t    \tthis.matrixWorldNeedsUpdate = false;\n\t\n\t    \tthis.layers = new Layers();\n\t    \tthis.visible = true;\n\t\n\t    \tthis.castShadow = false;\n\t    \tthis.receiveShadow = false;\n\t\n\t    \tthis.frustumCulled = true;\n\t    \tthis.renderOrder = 0;\n\t\n\t    \tthis.userData = {};\n\t\n\t    \tthis.onBeforeRender = null;\n\t\n\t    }\n\t\n\t    Object3D.DefaultUp = new Vector3( 0, 1, 0 );\n\t    Object3D.DefaultMatrixAutoUpdate = true;\n\t\n\t    Object.assign( Object3D.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisObject3D: true,\n\t\n\t    \tapplyMatrix: function ( matrix ) {\n\t\n\t    \t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\t\n\t    \t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromAxisAngle: function ( axis, angle ) {\n\t\n\t    \t\t// assumes axis is normalized\n\t\n\t    \t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromEuler: function ( euler ) {\n\t\n\t    \t\tthis.quaternion.setFromEuler( euler, true );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromMatrix: function ( m ) {\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tthis.quaternion.setFromRotationMatrix( m );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromQuaternion: function ( q ) {\n\t\n\t    \t\t// assumes q is normalized\n\t\n\t    \t\tthis.quaternion.copy( q );\n\t\n\t    \t},\n\t\n\t    \trotateOnAxis: function () {\n\t\n\t    \t\t// rotate object on axis in object space\n\t    \t\t// axis is assumed to be normalized\n\t\n\t    \t\tvar q1 = new Quaternion();\n\t\n\t    \t\treturn function rotateOnAxis( axis, angle ) {\n\t\n\t    \t\t\tq1.setFromAxisAngle( axis, angle );\n\t\n\t    \t\t\tthis.quaternion.multiply( q1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateX: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\t\n\t    \t\treturn function rotateX( angle ) {\n\t\n\t    \t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateY: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\t\n\t    \t\treturn function rotateY( angle ) {\n\t\n\t    \t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateZ: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\t\n\t    \t\treturn function rotateZ( angle ) {\n\t\n\t    \t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateOnAxis: function () {\n\t\n\t    \t\t// translate object by distance along axis in object space\n\t    \t\t// axis is assumed to be normalized\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function translateOnAxis( axis, distance ) {\n\t\n\t    \t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\t\n\t    \t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateX: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\t\n\t    \t\treturn function translateX( distance ) {\n\t\n\t    \t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateY: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\t\n\t    \t\treturn function translateY( distance ) {\n\t\n\t    \t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateZ: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\t\n\t    \t\treturn function translateZ( distance ) {\n\t\n\t    \t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlocalToWorld: function ( vector ) {\n\t\n\t    \t\treturn vector.applyMatrix4( this.matrixWorld );\n\t\n\t    \t},\n\t\n\t    \tworldToLocal: function () {\n\t\n\t    \t\tvar m1 = new Matrix4();\n\t\n\t    \t\treturn function worldToLocal( vector ) {\n\t\n\t    \t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\t// This routine does not support objects with rotated and/or translated parent(s)\n\t\n\t    \t\tvar m1 = new Matrix4();\n\t\n\t    \t\treturn function lookAt( vector ) {\n\t\n\t    \t\t\tm1.lookAt( vector, this.position, this.up );\n\t\n\t    \t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tadd: function ( object ) {\n\t\n\t    \t\tif ( arguments.length > 1 ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\t\n\t    \t\t\t\tthis.add( arguments[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object === this ) {\n\t\n\t    \t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( (object && object.isObject3D) ) {\n\t\n\t    \t\t\tif ( object.parent !== null ) {\n\t\n\t    \t\t\t\tobject.parent.remove( object );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.parent = this;\n\t    \t\t\tobject.dispatchEvent( { type: 'added' } );\n\t\n\t    \t\t\tthis.children.push( object );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tremove: function ( object ) {\n\t\n\t    \t\tif ( arguments.length > 1 ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\t\n\t    \t\t\t\tthis.remove( arguments[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar index = this.children.indexOf( object );\n\t\n\t    \t\tif ( index !== - 1 ) {\n\t\n\t    \t\t\tobject.parent = null;\n\t\n\t    \t\t\tobject.dispatchEvent( { type: 'removed' } );\n\t\n\t    \t\t\tthis.children.splice( index, 1 );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetObjectById: function ( id ) {\n\t\n\t    \t\treturn this.getObjectByProperty( 'id', id );\n\t\n\t    \t},\n\t\n\t    \tgetObjectByName: function ( name ) {\n\t\n\t    \t\treturn this.getObjectByProperty( 'name', name );\n\t\n\t    \t},\n\t\n\t    \tgetObjectByProperty: function ( name, value ) {\n\t\n\t    \t\tif ( this[ name ] === value ) return this;\n\t\n\t    \t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar child = this.children[ i ];\n\t    \t\t\tvar object = child.getObjectByProperty( name, value );\n\t\n\t    \t\t\tif ( object !== undefined ) {\n\t\n\t    \t\t\t\treturn object;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn undefined;\n\t\n\t    \t},\n\t\n\t    \tgetWorldPosition: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t},\n\t\n\t    \tgetWorldQuaternion: function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t    \t\tvar scale = new Vector3();\n\t\n\t    \t\treturn function getWorldQuaternion( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Quaternion();\n\t\n\t    \t\t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.matrixWorld.decompose( position, result, scale );\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetWorldRotation: function () {\n\t\n\t    \t\tvar quaternion = new Quaternion();\n\t\n\t    \t\treturn function getWorldRotation( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Euler();\n\t\n\t    \t\t\tthis.getWorldQuaternion( quaternion );\n\t\n\t    \t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetWorldScale: function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t    \t\tvar quaternion = new Quaternion();\n\t\n\t    \t\treturn function getWorldScale( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetWorldDirection: function () {\n\t\n\t    \t\tvar quaternion = new Quaternion();\n\t\n\t    \t\treturn function getWorldDirection( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t\tthis.getWorldQuaternion( quaternion );\n\t\n\t    \t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \traycast: function () {},\n\t\n\t    \ttraverse: function ( callback ) {\n\t\n\t    \t\tcallback( this );\n\t\n\t    \t\tvar children = this.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tchildren[ i ].traverse( callback );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttraverseVisible: function ( callback ) {\n\t\n\t    \t\tif ( this.visible === false ) return;\n\t\n\t    \t\tcallback( this );\n\t\n\t    \t\tvar children = this.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tchildren[ i ].traverseVisible( callback );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttraverseAncestors: function ( callback ) {\n\t\n\t    \t\tvar parent = this.parent;\n\t\n\t    \t\tif ( parent !== null ) {\n\t\n\t    \t\t\tcallback( parent );\n\t\n\t    \t\t\tparent.traverseAncestors( callback );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tupdateMatrix: function () {\n\t\n\t    \t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\t\n\t    \t\tthis.matrixWorldNeedsUpdate = true;\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: function ( force ) {\n\t\n\t    \t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\t\n\t    \t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\t\n\t    \t\t\tif ( this.parent === null ) {\n\t\n\t    \t\t\t\tthis.matrixWorld.copy( this.matrix );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\n\t    \t\t\tforce = true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// update children\n\t\n\t    \t\tvar children = this.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tchildren[ i ].updateMatrixWorld( force );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\t// meta is '' when called from JSON.stringify\n\t    \t\tvar isRootObject = ( meta === undefined || meta === '' );\n\t\n\t    \t\tvar output = {};\n\t\n\t    \t\t// meta is a hash used to collect geometries, materials.\n\t    \t\t// not providing it implies that this is the root object\n\t    \t\t// being serialized.\n\t    \t\tif ( isRootObject ) {\n\t\n\t    \t\t\t// initialize meta obj\n\t    \t\t\tmeta = {\n\t    \t\t\t\tgeometries: {},\n\t    \t\t\t\tmaterials: {},\n\t    \t\t\t\ttextures: {},\n\t    \t\t\t\timages: {}\n\t    \t\t\t};\n\t\n\t    \t\t\toutput.metadata = {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Object',\n\t    \t\t\t\tgenerator: 'Object3D.toJSON'\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\t// standard Object3D serialization\n\t\n\t    \t\tvar object = {};\n\t\n\t    \t\tobject.uuid = this.uuid;\n\t    \t\tobject.type = this.type;\n\t\n\t    \t\tif ( this.name !== '' ) object.name = this.name;\n\t    \t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t    \t\tif ( this.castShadow === true ) object.castShadow = true;\n\t    \t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t    \t\tif ( this.visible === false ) object.visible = false;\n\t\n\t    \t\tobject.matrix = this.matrix.toArray();\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( this.geometry !== undefined ) {\n\t\n\t    \t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\t\n\t    \t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.geometry = this.geometry.uuid;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.material !== undefined ) {\n\t\n\t    \t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\t\n\t    \t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.material = this.material.uuid;\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( this.children.length > 0 ) {\n\t\n\t    \t\t\tobject.children = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\t\n\t    \t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( isRootObject ) {\n\t\n\t    \t\t\tvar geometries = extractFromCache( meta.geometries );\n\t    \t\t\tvar materials = extractFromCache( meta.materials );\n\t    \t\t\tvar textures = extractFromCache( meta.textures );\n\t    \t\t\tvar images = extractFromCache( meta.images );\n\t\n\t    \t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t    \t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t    \t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t    \t\t\tif ( images.length > 0 ) output.images = images;\n\t\n\t    \t\t}\n\t\n\t    \t\toutput.object = object;\n\t\n\t    \t\treturn output;\n\t\n\t    \t\t// extract data from the cache hash\n\t    \t\t// remove metadata on each item\n\t    \t\t// and return as array\n\t    \t\tfunction extractFromCache( cache ) {\n\t\n\t    \t\t\tvar values = [];\n\t    \t\t\tfor ( var key in cache ) {\n\t\n\t    \t\t\t\tvar data = cache[ key ];\n\t    \t\t\t\tdelete data.metadata;\n\t    \t\t\t\tvalues.push( data );\n\t\n\t    \t\t\t}\n\t    \t\t\treturn values;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function ( recursive ) {\n\t\n\t    \t\treturn new this.constructor().copy( this, recursive );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source, recursive ) {\n\t\n\t    \t\tif ( recursive === undefined ) recursive = true;\n\t\n\t    \t\tthis.name = source.name;\n\t\n\t    \t\tthis.up.copy( source.up );\n\t\n\t    \t\tthis.position.copy( source.position );\n\t    \t\tthis.quaternion.copy( source.quaternion );\n\t    \t\tthis.scale.copy( source.scale );\n\t\n\t    \t\tthis.matrix.copy( source.matrix );\n\t    \t\tthis.matrixWorld.copy( source.matrixWorld );\n\t\n\t    \t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t    \t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\n\t    \t\tthis.visible = source.visible;\n\t\n\t    \t\tthis.castShadow = source.castShadow;\n\t    \t\tthis.receiveShadow = source.receiveShadow;\n\t\n\t    \t\tthis.frustumCulled = source.frustumCulled;\n\t    \t\tthis.renderOrder = source.renderOrder;\n\t\n\t    \t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\t\n\t    \t\tif ( recursive === true ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\t\n\t    \t\t\t\tvar child = source.children[ i ];\n\t    \t\t\t\tthis.add( child.clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var count$2 = 0;\n\t    function Object3DIdCount() { return count$2++; };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Line3( start, end ) {\n\t\n\t    \tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t    \tthis.end = ( end !== undefined ) ? end : new Vector3();\n\t\n\t    }\n\t\n\t    Line3.prototype = {\n\t\n\t    \tconstructor: Line3,\n\t\n\t    \tset: function ( start, end ) {\n\t\n\t    \t\tthis.start.copy( start );\n\t    \t\tthis.end.copy( end );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( line ) {\n\t\n\t    \t\tthis.start.copy( line.start );\n\t    \t\tthis.end.copy( line.end );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetCenter: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\t\n\t    \t},\n\t\n\t    \tdelta: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.subVectors( this.end, this.start );\n\t\n\t    \t},\n\t\n\t    \tdistanceSq: function () {\n\t\n\t    \t\treturn this.start.distanceToSquared( this.end );\n\t\n\t    \t},\n\t\n\t    \tdistance: function () {\n\t\n\t    \t\treturn this.start.distanceTo( this.end );\n\t\n\t    \t},\n\t\n\t    \tat: function ( t, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\t\n\t    \t},\n\t\n\t    \tclosestPointToPointParameter: function () {\n\t\n\t    \t\tvar startP = new Vector3();\n\t    \t\tvar startEnd = new Vector3();\n\t\n\t    \t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\t\n\t    \t\t\tstartP.subVectors( point, this.start );\n\t    \t\t\tstartEnd.subVectors( this.end, this.start );\n\t\n\t    \t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t    \t\t\tvar startEnd_startP = startEnd.dot( startP );\n\t\n\t    \t\t\tvar t = startEnd_startP / startEnd2;\n\t\n\t    \t\t\tif ( clampToLine ) {\n\t\n\t    \t\t\t\tt = exports.Math.clamp( t, 0, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn t;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\t\n\t    \t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( matrix ) {\n\t\n\t    \t\tthis.start.applyMatrix4( matrix );\n\t    \t\tthis.end.applyMatrix4( matrix );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( line ) {\n\t\n\t    \t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Triangle( a, b, c ) {\n\t\n\t    \tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t    \tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t    \tthis.c = ( c !== undefined ) ? c : new Vector3();\n\t\n\t    }\n\t\n\t    Triangle.normal = function () {\n\t\n\t    \tvar v0 = new Vector3();\n\t\n\t    \treturn function normal( a, b, c, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tresult.subVectors( c, b );\n\t    \t\tv0.subVectors( a, b );\n\t    \t\tresult.cross( v0 );\n\t\n\t    \t\tvar resultLengthSq = result.lengthSq();\n\t    \t\tif ( resultLengthSq > 0 ) {\n\t\n\t    \t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result.set( 0, 0, 0 );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    // static/instance method to calculate barycentric coordinates\n\t    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t    Triangle.barycoordFromPoint = function () {\n\t\n\t    \tvar v0 = new Vector3();\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t\n\t    \treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\t\n\t    \t\tv0.subVectors( c, a );\n\t    \t\tv1.subVectors( b, a );\n\t    \t\tv2.subVectors( point, a );\n\t\n\t    \t\tvar dot00 = v0.dot( v0 );\n\t    \t\tvar dot01 = v0.dot( v1 );\n\t    \t\tvar dot02 = v0.dot( v2 );\n\t    \t\tvar dot11 = v1.dot( v1 );\n\t    \t\tvar dot12 = v1.dot( v2 );\n\t\n\t    \t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t// collinear or singular triangle\n\t    \t\tif ( denom === 0 ) {\n\t\n\t    \t\t\t// arbitrary location outside of triangle?\n\t    \t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t    \t\t\treturn result.set( - 2, - 1, - 1 );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar invDenom = 1 / denom;\n\t    \t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t    \t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\t\n\t    \t\t// barycentric coordinates must always sum to 1\n\t    \t\treturn result.set( 1 - u - v, v, u );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Triangle.containsPoint = function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t\n\t    \treturn function containsPoint( point, a, b, c ) {\n\t\n\t    \t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\t\n\t    \t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Triangle.prototype = {\n\t\n\t    \tconstructor: Triangle,\n\t\n\t    \tset: function ( a, b, c ) {\n\t\n\t    \t\tthis.a.copy( a );\n\t    \t\tthis.b.copy( b );\n\t    \t\tthis.c.copy( c );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\t\n\t    \t\tthis.a.copy( points[ i0 ] );\n\t    \t\tthis.b.copy( points[ i1 ] );\n\t    \t\tthis.c.copy( points[ i2 ] );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( triangle ) {\n\t\n\t    \t\tthis.a.copy( triangle.a );\n\t    \t\tthis.b.copy( triangle.b );\n\t    \t\tthis.c.copy( triangle.c );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tarea: function () {\n\t\n\t    \t\tvar v0 = new Vector3();\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function area() {\n\t\n\t    \t\t\tv0.subVectors( this.c, this.b );\n\t    \t\t\tv1.subVectors( this.a, this.b );\n\t\n\t    \t\t\treturn v0.cross( v1 ).length() * 0.5;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmidpoint: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\t\n\t    \t},\n\t\n\t    \tnormal: function ( optionalTarget ) {\n\t\n\t    \t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\t\n\t    \t},\n\t\n\t    \tplane: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Plane();\n\t\n\t    \t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\n\t    \t},\n\t\n\t    \tbarycoordFromPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\t\n\t    \t},\n\t\n\t    \tclosestPointToPoint: function () {\n\t\n\t    \t\tvar plane, edgeList, projectedPoint, closestPoint;\n\t\n\t    \t\treturn function closestPointToPoint( point, optionalTarget ) {\n\t\n\t    \t\t\tif ( plane === undefined ) {\n\t\n\t    \t\t\t\tplane = new Plane();\n\t    \t\t\t\tedgeList = [ new Line3(), new Line3(), new Line3() ];\n\t    \t\t\t\tprojectedPoint = new Vector3();\n\t    \t\t\t\tclosestPoint = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t    \t\t\tvar minDistance = Infinity;\n\t\n\t    \t\t\t// project the point onto the plane of the triangle\n\t\n\t    \t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t    \t\t\tplane.projectPoint( point, projectedPoint );\n\t\n\t    \t\t\t// check if the projection lies within the triangle\n\t\n\t    \t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\t\n\t    \t\t\t\t// if so, this is the closest point\n\t\n\t    \t\t\t\tresult.copy( projectedPoint );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\t\n\t    \t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t    \t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t    \t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\t\n\t    \t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\t\n\t    \t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\t\n\t    \t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\t\n\t    \t\t\t\t\tif( distance < minDistance ) {\n\t\n\t    \t\t\t\t\t\tminDistance = distance;\n\t\n\t    \t\t\t\t\t\tresult.copy( closestPoint );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tequals: function ( triangle ) {\n\t\n\t    \t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Face3( a, b, c, normal, color, materialIndex ) {\n\t\n\t    \tthis.a = a;\n\t    \tthis.b = b;\n\t    \tthis.c = c;\n\t\n\t    \tthis.normal = (normal && normal.isVector3) ? normal : new Vector3();\n\t    \tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\t\n\t    \tthis.color = (color && color.isColor) ? color : new Color();\n\t    \tthis.vertexColors = Array.isArray( color ) ? color : [];\n\t\n\t    \tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\t\n\t    }\n\t\n\t    Face3.prototype = {\n\t\n\t    \tconstructor: Face3,\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.a = source.a;\n\t    \t\tthis.b = source.b;\n\t    \t\tthis.c = source.c;\n\t\n\t    \t\tthis.normal.copy( source.normal );\n\t    \t\tthis.color.copy( source.color );\n\t\n\t    \t\tthis.materialIndex = source.materialIndex;\n\t\n\t    \t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  specularMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t     *  combine: THREE.Multiply,\n\t     *  reflectivity: <float>,\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  shading: THREE.SmoothShading,\n\t     *  depthTest: <bool>,\n\t     *  depthWrite: <bool>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshBasicMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshBasicMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // emissive\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.specularMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.combine = MultiplyOperation;\n\t    \tthis.reflectivity = 1;\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshBasicMaterial.prototype = Object.create( Material.prototype );\n\t    MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\t\n\t    MeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\t\n\t    MeshBasicMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.specularMap = source.specularMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.combine = source.combine;\n\t    \tthis.reflectivity = source.reflectivity;\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BufferAttribute( array, itemSize, normalized ) {\n\t\n\t    \tif ( Array.isArray( array ) ) {\n\t\n\t    \t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\t\n\t    \t}\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.array = array;\n\t    \tthis.itemSize = itemSize;\n\t    \tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t    \tthis.normalized = normalized === true;\n\t\n\t    \tthis.dynamic = false;\n\t    \tthis.updateRange = { offset: 0, count: - 1 };\n\t\n\t    \tthis.version = 0;\n\t\n\t    }\n\t\n\t    BufferAttribute.prototype = {\n\t\n\t    \tconstructor: BufferAttribute,\n\t\n\t    \tisBufferAttribute: true,\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.version ++;\n\t\n\t    \t},\n\t\n\t    \tsetDynamic: function ( value ) {\n\t\n\t    \t\tthis.dynamic = value;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.array = new source.array.constructor( source.array );\n\t    \t\tthis.itemSize = source.itemSize;\n\t    \t\tthis.count = source.count;\n\t    \t\tthis.normalized = source.normalized;\n\t\n\t    \t\tthis.dynamic = source.dynamic;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyAt: function ( index1, attribute, index2 ) {\n\t\n\t    \t\tindex1 *= this.itemSize;\n\t    \t\tindex2 *= attribute.itemSize;\n\t\n\t    \t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyArray: function ( array ) {\n\t\n\t    \t\tthis.array.set( array );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyColorsArray: function ( colors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar color = colors[ i ];\n\t\n\t    \t\t\tif ( color === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t    \t\t\t\tcolor = new Color();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = color.r;\n\t    \t\t\tarray[ offset ++ ] = color.g;\n\t    \t\t\tarray[ offset ++ ] = color.b;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyIndicesArray: function ( indices ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar index = indices[ i ];\n\t\n\t    \t\t\tarray[ offset ++ ] = index.a;\n\t    \t\t\tarray[ offset ++ ] = index.b;\n\t    \t\t\tarray[ offset ++ ] = index.c;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyVector2sArray: function ( vectors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar vector = vectors[ i ];\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t    \t\t\t\tvector = new Vector2();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = vector.x;\n\t    \t\t\tarray[ offset ++ ] = vector.y;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyVector3sArray: function ( vectors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar vector = vectors[ i ];\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t    \t\t\t\tvector = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = vector.x;\n\t    \t\t\tarray[ offset ++ ] = vector.y;\n\t    \t\t\tarray[ offset ++ ] = vector.z;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyVector4sArray: function ( vectors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar vector = vectors[ i ];\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t    \t\t\t\tvector = new Vector4();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = vector.x;\n\t    \t\t\tarray[ offset ++ ] = vector.y;\n\t    \t\t\tarray[ offset ++ ] = vector.z;\n\t    \t\t\tarray[ offset ++ ] = vector.w;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tset: function ( value, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.array.set( value, offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetX: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize ];\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( index, x ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize ] = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetY: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize + 1 ];\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( index, y ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetZ: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize + 2 ];\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( index, z ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetW: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize + 3 ];\n\t\n\t    \t},\n\t\n\t    \tsetW: function ( index, w ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXY: function ( index, x, y ) {\n\t\n\t    \t\tindex *= this.itemSize;\n\t\n\t    \t\tthis.array[ index + 0 ] = x;\n\t    \t\tthis.array[ index + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZ: function ( index, x, y, z ) {\n\t\n\t    \t\tindex *= this.itemSize;\n\t\n\t    \t\tthis.array[ index + 0 ] = x;\n\t    \t\tthis.array[ index + 1 ] = y;\n\t    \t\tthis.array[ index + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZW: function ( index, x, y, z, w ) {\n\t\n\t    \t\tindex *= this.itemSize;\n\t\n\t    \t\tthis.array[ index + 0 ] = x;\n\t    \t\tthis.array[ index + 1 ] = y;\n\t    \t\tthis.array[ index + 2 ] = z;\n\t    \t\tthis.array[ index + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    //\n\t\n\t    function Int8Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Int8Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint8Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint8Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint8ClampedAttribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Int16Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Int16Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint16Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint16Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Int32Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Int32Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint32Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint32Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Float32Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Float32Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Float64Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Float64Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    // Deprecated\n\t\n\t    function DynamicBufferAttribute( array, itemSize ) {\n\t\n\t    \tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t    \treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author kile / http://kile.stravaganza.org/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Geometry() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'Geometry';\n\t\n\t    \tthis.vertices = [];\n\t    \tthis.colors = [];\n\t    \tthis.faces = [];\n\t    \tthis.faceVertexUvs = [ [] ];\n\t\n\t    \tthis.morphTargets = [];\n\t    \tthis.morphNormals = [];\n\t\n\t    \tthis.skinWeights = [];\n\t    \tthis.skinIndices = [];\n\t\n\t    \tthis.lineDistances = [];\n\t\n\t    \tthis.boundingBox = null;\n\t    \tthis.boundingSphere = null;\n\t\n\t    \t// update flags\n\t\n\t    \tthis.elementsNeedUpdate = false;\n\t    \tthis.verticesNeedUpdate = false;\n\t    \tthis.uvsNeedUpdate = false;\n\t    \tthis.normalsNeedUpdate = false;\n\t    \tthis.colorsNeedUpdate = false;\n\t    \tthis.lineDistancesNeedUpdate = false;\n\t    \tthis.groupsNeedUpdate = false;\n\t\n\t    }\n\t\n\t    Object.assign( Geometry.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisGeometry: true,\n\t\n\t    \tapplyMatrix: function ( matrix ) {\n\t\n\t    \t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t    \t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar vertex = this.vertices[ i ];\n\t    \t\t\tvertex.applyMatrix4( matrix );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar face = this.faces[ i ];\n\t    \t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingBox();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingSphere();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.verticesNeedUpdate = true;\n\t    \t\tthis.normalsNeedUpdate = true;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trotateX: function () {\n\t\n\t    \t\t// rotate geometry around world x-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateX( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationX( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateY: function () {\n\t\n\t    \t\t// rotate geometry around world y-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateY( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationY( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateZ: function () {\n\t\n\t    \t\t// rotate geometry around world z-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateZ( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationZ( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function () {\n\t\n\t    \t\t// translate geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function translate( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeTranslation( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tscale: function () {\n\t\n\t    \t\t// scale geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function scale( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeScale( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\tvar obj;\n\t\n\t    \t\treturn function lookAt( vector ) {\n\t\n\t    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\t\n\t    \t\t\tobj.lookAt( vector );\n\t\n\t    \t\t\tobj.updateMatrix();\n\t\n\t    \t\t\tthis.applyMatrix( obj.matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tfromBufferGeometry: function ( geometry ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t    \t\tvar attributes = geometry.attributes;\n\t\n\t    \t\tvar positions = attributes.position.array;\n\t    \t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t    \t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t    \t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t    \t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\t\n\t    \t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\t\n\t    \t\tvar tempNormals = [];\n\t    \t\tvar tempUVs = [];\n\t    \t\tvar tempUVs2 = [];\n\t\n\t    \t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\t\n\t    \t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\t\n\t    \t\t\tif ( normals !== undefined ) {\n\t\n\t    \t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( colors !== undefined ) {\n\t\n\t    \t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( uvs !== undefined ) {\n\t\n\t    \t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( uvs2 !== undefined ) {\n\t\n\t    \t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction addFace( a, b, c, materialIndex ) {\n\t\n\t    \t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t    \t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\t\n\t    \t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\t\n\t    \t\t\tscope.faces.push( face );\n\t\n\t    \t\t\tif ( uvs !== undefined ) {\n\t\n\t    \t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( uvs2 !== undefined ) {\n\t\n\t    \t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( indices !== undefined ) {\n\t\n\t    \t\t\tvar groups = geometry.groups;\n\t\n\t    \t\t\tif ( groups.length > 0 ) {\n\t\n\t    \t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\t\n\t    \t\t\t\t\tvar group = groups[ i ];\n\t\n\t    \t\t\t\t\tvar start = group.start;\n\t    \t\t\t\t\tvar count = group.count;\n\t\n\t    \t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\t\n\t    \t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\t\n\t    \t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\t\n\t    \t\t\t\taddFace( i, i + 1, i + 2 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.computeFaceNormals();\n\t\n\t    \t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcenter: function () {\n\t\n\t    \t\tthis.computeBoundingBox();\n\t\n\t    \t\tvar offset = this.boundingBox.getCenter().negate();\n\t\n\t    \t\tthis.translate( offset.x, offset.y, offset.z );\n\t\n\t    \t\treturn offset;\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\tthis.computeBoundingSphere();\n\t\n\t    \t\tvar center = this.boundingSphere.center;\n\t    \t\tvar radius = this.boundingSphere.radius;\n\t\n\t    \t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\t\n\t    \t\tvar matrix = new Matrix4();\n\t    \t\tmatrix.set(\n\t    \t\t\ts, 0, 0, - s * center.x,\n\t    \t\t\t0, s, 0, - s * center.y,\n\t    \t\t\t0, 0, s, - s * center.z,\n\t    \t\t\t0, 0, 0, 1\n\t    \t\t);\n\t\n\t    \t\tthis.applyMatrix( matrix );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcomputeFaceNormals: function () {\n\t\n\t    \t\tvar cb = new Vector3(), ab = new Vector3();\n\t\n\t    \t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tvar face = this.faces[ f ];\n\t\n\t    \t\t\tvar vA = this.vertices[ face.a ];\n\t    \t\t\tvar vB = this.vertices[ face.b ];\n\t    \t\t\tvar vC = this.vertices[ face.c ];\n\t\n\t    \t\t\tcb.subVectors( vC, vB );\n\t    \t\t\tab.subVectors( vA, vB );\n\t    \t\t\tcb.cross( ab );\n\t\n\t    \t\t\tcb.normalize();\n\t\n\t    \t\t\tface.normal.copy( cb );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeVertexNormals: function ( areaWeighted ) {\n\t\n\t    \t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\t\n\t    \t\tvar v, vl, f, fl, face, vertices;\n\t\n\t    \t\tvertices = new Array( this.vertices.length );\n\t\n\t    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\t\n\t    \t\t\tvertices[ v ] = new Vector3();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( areaWeighted ) {\n\t\n\t    \t\t\t// vertex normals weighted by triangle areas\n\t    \t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\t\n\t    \t\t\tvar vA, vB, vC;\n\t    \t\t\tvar cb = new Vector3(), ab = new Vector3();\n\t\n\t    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\t\tvA = this.vertices[ face.a ];\n\t    \t\t\t\tvB = this.vertices[ face.b ];\n\t    \t\t\t\tvC = this.vertices[ face.c ];\n\t\n\t    \t\t\t\tcb.subVectors( vC, vB );\n\t    \t\t\t\tab.subVectors( vA, vB );\n\t    \t\t\t\tcb.cross( ab );\n\t\n\t    \t\t\t\tvertices[ face.a ].add( cb );\n\t    \t\t\t\tvertices[ face.b ].add( cb );\n\t    \t\t\t\tvertices[ face.c ].add( cb );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\t\tvertices[ face.a ].add( face.normal );\n\t    \t\t\t\tvertices[ face.b ].add( face.normal );\n\t    \t\t\t\tvertices[ face.c ].add( face.normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\t\n\t    \t\t\tvertices[ v ].normalize();\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t    \t\t\tif ( vertexNormals.length === 3 ) {\n\t\n\t    \t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t    \t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t    \t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t    \t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t    \t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.faces.length > 0 ) {\n\t\n\t    \t\t\tthis.normalsNeedUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeMorphNormals: function () {\n\t\n\t    \t\tvar i, il, f, fl, face;\n\t\n\t    \t\t// save original normals\n\t    \t\t// - create temp variables on first access\n\t    \t\t//   otherwise just copy (for faster repeated calls)\n\t\n\t    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\tif ( ! face.__originalFaceNormal ) {\n\t\n\t    \t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\t\n\t    \t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\t\n\t    \t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// use temp geometry to compute face and vertex normals for each morph\n\t\n\t    \t\tvar tmpGeo = new Geometry();\n\t    \t\ttmpGeo.faces = this.faces;\n\t\n\t    \t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\t\n\t    \t\t\t// create on first access\n\t\n\t    \t\t\tif ( ! this.morphNormals[ i ] ) {\n\t\n\t    \t\t\t\tthis.morphNormals[ i ] = {};\n\t    \t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t    \t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\t\n\t    \t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t    \t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\t\n\t    \t\t\t\tvar faceNormal, vertexNormals;\n\t\n\t    \t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\t\tfaceNormal = new Vector3();\n\t    \t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\t\n\t    \t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t    \t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar morphNormals = this.morphNormals[ i ];\n\t\n\t    \t\t\t// set vertices to morph target\n\t\n\t    \t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\t\n\t    \t\t\t// compute morph normals\n\t\n\t    \t\t\ttmpGeo.computeFaceNormals();\n\t    \t\t\ttmpGeo.computeVertexNormals();\n\t\n\t    \t\t\t// store morph normals\n\t\n\t    \t\t\tvar faceNormal, vertexNormals;\n\t\n\t    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t    \t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\t\n\t    \t\t\t\tfaceNormal.copy( face.normal );\n\t\n\t    \t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t    \t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t    \t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// restore original normals\n\t\n\t    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\tface.normal = face.__originalFaceNormal;\n\t    \t\t\tface.vertexNormals = face.__originalVertexNormals;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeTangents: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\t\n\t    \t},\n\t\n\t    \tcomputeLineDistances: function () {\n\t\n\t    \t\tvar d = 0;\n\t    \t\tvar vertices = this.vertices;\n\t\n\t    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tif ( i > 0 ) {\n\t\n\t    \t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.lineDistances[ i ] = d;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingBox: function () {\n\t\n\t    \t\tif ( this.boundingBox === null ) {\n\t\n\t    \t\t\tthis.boundingBox = new Box3();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.boundingBox.setFromPoints( this.vertices );\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingSphere: function () {\n\t\n\t    \t\tif ( this.boundingSphere === null ) {\n\t\n\t    \t\t\tthis.boundingSphere = new Sphere();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.boundingSphere.setFromPoints( this.vertices );\n\t\n\t    \t},\n\t\n\t    \tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\t\n\t    \t\tif ( (geometry && geometry.isGeometry) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar normalMatrix,\n\t    \t\tvertexOffset = this.vertices.length,\n\t    \t\tvertices1 = this.vertices,\n\t    \t\tvertices2 = geometry.vertices,\n\t    \t\tfaces1 = this.faces,\n\t    \t\tfaces2 = geometry.faces,\n\t    \t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t    \t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n\t    \t\tcolors1 = this.colors,\n\t    \t\tcolors2 = geometry.colors;\n\t\n\t    \t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\t\n\t    \t\tif ( matrix !== undefined ) {\n\t\n\t    \t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t    \t\t}\n\t\n\t    \t\t// vertices\n\t\n\t    \t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar vertex = vertices2[ i ];\n\t\n\t    \t\t\tvar vertexCopy = vertex.clone();\n\t\n\t    \t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\t\n\t    \t\t\tvertices1.push( vertexCopy );\n\t\n\t    \t\t}\n\t\n\t    \t\t// colors\n\t\n\t    \t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tcolors1.push( colors2[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\t// faces\n\t\n\t    \t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t    \t\t\tfaceVertexNormals = face.vertexNormals,\n\t    \t\t\tfaceVertexColors = face.vertexColors;\n\t\n\t    \t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t    \t\t\tfaceCopy.normal.copy( face.normal );\n\t\n\t    \t\t\tif ( normalMatrix !== undefined ) {\n\t\n\t    \t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\t\n\t    \t\t\t\tif ( normalMatrix !== undefined ) {\n\t\n\t    \t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfaceCopy.vertexNormals.push( normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfaceCopy.color.copy( face.color );\n\t\n\t    \t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tcolor = faceVertexColors[ j ];\n\t    \t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\t\n\t    \t\t\tfaces1.push( faceCopy );\n\t\n\t    \t\t}\n\t\n\t    \t\t// uvs\n\t\n\t    \t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\t\n\t    \t\t\tif ( uv === undefined ) {\n\t\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tuvCopy.push( uv[ j ].clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tuvs1.push( uvCopy );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tmergeMesh: function ( mesh ) {\n\t\n\t    \t\tif ( (mesh && mesh.isMesh) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\t\n\t    \t\tthis.merge( mesh.geometry, mesh.matrix );\n\t\n\t    \t},\n\t\n\t    \t/*\n\t    \t * Checks for duplicate vertices with hashmap.\n\t    \t * Duplicated vertices are removed\n\t    \t * and faces' vertices are updated.\n\t    \t */\n\t\n\t    \tmergeVertices: function () {\n\t\n\t    \t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t    \t\tvar unique = [], changes = [];\n\t\n\t    \t\tvar v, key;\n\t    \t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t    \t\tvar precision = Math.pow( 10, precisionPoints );\n\t    \t\tvar i, il, face;\n\t    \t\tvar indices, j, jl;\n\t\n\t    \t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tv = this.vertices[ i ];\n\t    \t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\t\n\t    \t\t\tif ( verticesMap[ key ] === undefined ) {\n\t\n\t    \t\t\t\tverticesMap[ key ] = i;\n\t    \t\t\t\tunique.push( this.vertices[ i ] );\n\t    \t\t\t\tchanges[ i ] = unique.length - 1;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t    \t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\t// if faces are completely degenerate after merging vertices, we\n\t    \t\t// have to remove them from the geometry.\n\t    \t\tvar faceIndicesToRemove = [];\n\t\n\t    \t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\t\n\t    \t\t\tface = this.faces[ i ];\n\t\n\t    \t\t\tface.a = changes[ face.a ];\n\t    \t\t\tface.b = changes[ face.b ];\n\t    \t\t\tface.c = changes[ face.c ];\n\t\n\t    \t\t\tindices = [ face.a, face.b, face.c ];\n\t\n\t    \t\t\tvar dupIndex = - 1;\n\t\n\t    \t\t\t// if any duplicate vertices are found in a Face3\n\t    \t\t\t// we have to remove the face as nothing can be saved\n\t    \t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\t\n\t    \t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\t\n\t    \t\t\t\t\tdupIndex = n;\n\t    \t\t\t\t\tfaceIndicesToRemove.push( i );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\t\n\t    \t\t\tvar idx = faceIndicesToRemove[ i ];\n\t\n\t    \t\t\tthis.faces.splice( idx, 1 );\n\t\n\t    \t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Use unique set of vertices\n\t\n\t    \t\tvar diff = this.vertices.length - unique.length;\n\t    \t\tthis.vertices = unique;\n\t    \t\treturn diff;\n\t\n\t    \t},\n\t\n\t    \tsortFacesByMaterialIndex: function () {\n\t\n\t    \t\tvar faces = this.faces;\n\t    \t\tvar length = faces.length;\n\t\n\t    \t\t// tag faces\n\t\n\t    \t\tfor ( var i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\tfaces[ i ]._id = i;\n\t\n\t    \t\t}\n\t\n\t    \t\t// sort faces\n\t\n\t    \t\tfunction materialIndexSort( a, b ) {\n\t\n\t    \t\t\treturn a.materialIndex - b.materialIndex;\n\t\n\t    \t\t}\n\t\n\t    \t\tfaces.sort( materialIndexSort );\n\t\n\t    \t\t// sort uvs\n\t\n\t    \t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t    \t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\t\n\t    \t\tvar newUvs1, newUvs2;\n\t\n\t    \t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t    \t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\t\n\t    \t\tfor ( var i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\tvar id = faces[ i ]._id;\n\t\n\t    \t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t    \t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t    \t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\tvar data = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Geometry',\n\t    \t\t\t\tgenerator: 'Geometry.toJSON'\n\t    \t\t\t}\n\t    \t\t};\n\t\n\t    \t\t// standard Geometry serialization\n\t\n\t    \t\tdata.uuid = this.uuid;\n\t    \t\tdata.type = this.type;\n\t    \t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t    \t\tif ( this.parameters !== undefined ) {\n\t\n\t    \t\t\tvar parameters = this.parameters;\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn data;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar vertices = [];\n\t\n\t    \t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\t\n\t    \t\t\tvar vertex = this.vertices[ i ];\n\t    \t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar faces = [];\n\t    \t\tvar normals = [];\n\t    \t\tvar normalsHash = {};\n\t    \t\tvar colors = [];\n\t    \t\tvar colorsHash = {};\n\t    \t\tvar uvs = [];\n\t    \t\tvar uvsHash = {};\n\t\n\t    \t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\t\n\t    \t\t\tvar face = this.faces[ i ];\n\t\n\t    \t\t\tvar hasMaterial = true;\n\t    \t\t\tvar hasFaceUv = false; // deprecated\n\t    \t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t    \t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t    \t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t    \t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t    \t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\t\n\t    \t\t\tvar faceType = 0;\n\t\n\t    \t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t    \t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t    \t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t    \t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t    \t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t    \t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t    \t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t    \t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\t\n\t    \t\t\tfaces.push( faceType );\n\t    \t\t\tfaces.push( face.a, face.b, face.c );\n\t    \t\t\tfaces.push( face.materialIndex );\n\t\n\t    \t\t\tif ( hasFaceVertexUv ) {\n\t\n\t    \t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\t\n\t    \t\t\t\tfaces.push(\n\t    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t    \t\t\t\t);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceNormal ) {\n\t\n\t    \t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t    \t\t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t    \t\t\t\tfaces.push(\n\t    \t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t    \t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t    \t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t    \t\t\t\t);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceColor ) {\n\t\n\t    \t\t\t\tfaces.push( getColorIndex( face.color ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexColor ) {\n\t\n\t    \t\t\t\tvar vertexColors = face.vertexColors;\n\t\n\t    \t\t\t\tfaces.push(\n\t    \t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t    \t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t    \t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t    \t\t\t\t);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction setBit( value, position, enabled ) {\n\t\n\t    \t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getNormalIndex( normal ) {\n\t\n\t    \t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\t\n\t    \t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\t\n\t    \t\t\t\treturn normalsHash[ hash ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t    \t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\n\t    \t\t\treturn normalsHash[ hash ];\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getColorIndex( color ) {\n\t\n\t    \t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\t\n\t    \t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\t\n\t    \t\t\t\treturn colorsHash[ hash ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcolorsHash[ hash ] = colors.length;\n\t    \t\t\tcolors.push( color.getHex() );\n\t\n\t    \t\t\treturn colorsHash[ hash ];\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getUvIndex( uv ) {\n\t\n\t    \t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\t\n\t    \t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\t\n\t    \t\t\t\treturn uvsHash[ hash ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t    \t\t\tuvs.push( uv.x, uv.y );\n\t\n\t    \t\t\treturn uvsHash[ hash ];\n\t\n\t    \t\t}\n\t\n\t    \t\tdata.data = {};\n\t\n\t    \t\tdata.data.vertices = vertices;\n\t    \t\tdata.data.normals = normals;\n\t    \t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t    \t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t    \t\tdata.data.faces = faces;\n\t\n\t    \t\treturn data;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\t/*\n\t    \t\t// Handle primitives\n\t\n\t    \t\tvar parameters = this.parameters;\n\t\n\t    \t\tif ( parameters !== undefined ) {\n\t\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tvalues.push( parameters[ key ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t    \t\t\tthis.constructor.apply( geometry, values );\n\t    \t\t\treturn geometry;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t    \t\t*/\n\t\n\t    \t\treturn new Geometry().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.vertices = [];\n\t    \t\tthis.faces = [];\n\t    \t\tthis.faceVertexUvs = [ [] ];\n\t    \t\tthis.colors = [];\n\t\n\t    \t\tvar vertices = source.vertices;\n\t\n\t    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.vertices.push( vertices[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar colors = source.colors;\n\t\n\t    \t\tfor ( var i = 0, il = colors.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.colors.push( colors[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar faces = source.faces;\n\t\n\t    \t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.faces.push( faces[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\t\n\t    \t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\t\n\t    \t\t\t\tthis.faceVertexUvs[ i ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\t\n\t    \t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\t\n\t    \t\t\t\t\tvar uv = uvs[ k ];\n\t\n\t    \t\t\t\t\tuvsCopy.push( uv.clone() );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var count$3 = 0;\n\t    function GeometryIdCount() { return count$3++; };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function DirectGeometry() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'DirectGeometry';\n\t\n\t    \tthis.indices = [];\n\t    \tthis.vertices = [];\n\t    \tthis.normals = [];\n\t    \tthis.colors = [];\n\t    \tthis.uvs = [];\n\t    \tthis.uvs2 = [];\n\t\n\t    \tthis.groups = [];\n\t\n\t    \tthis.morphTargets = {};\n\t\n\t    \tthis.skinWeights = [];\n\t    \tthis.skinIndices = [];\n\t\n\t    \t// this.lineDistances = [];\n\t\n\t    \tthis.boundingBox = null;\n\t    \tthis.boundingSphere = null;\n\t\n\t    \t// update flags\n\t\n\t    \tthis.verticesNeedUpdate = false;\n\t    \tthis.normalsNeedUpdate = false;\n\t    \tthis.colorsNeedUpdate = false;\n\t    \tthis.uvsNeedUpdate = false;\n\t    \tthis.groupsNeedUpdate = false;\n\t\n\t    }\n\t\n\t    Object.assign( DirectGeometry.prototype, EventDispatcher.prototype, {\n\t\n\t    \tcomputeBoundingBox: Geometry.prototype.computeBoundingBox,\n\t    \tcomputeBoundingSphere: Geometry.prototype.computeBoundingSphere,\n\t\n\t    \tcomputeFaceNormals: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\t\n\t    \t},\n\t\n\t    \tcomputeVertexNormals: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\t\n\t    \t},\n\t\n\t    \tcomputeGroups: function ( geometry ) {\n\t\n\t    \t\tvar group;\n\t    \t\tvar groups = [];\n\t    \t\tvar materialIndex;\n\t\n\t    \t\tvar faces = geometry.faces;\n\t\n\t    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\t// materials\n\t\n\t    \t\t\tif ( face.materialIndex !== materialIndex ) {\n\t\n\t    \t\t\t\tmaterialIndex = face.materialIndex;\n\t\n\t    \t\t\t\tif ( group !== undefined ) {\n\t\n\t    \t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t    \t\t\t\t\tgroups.push( group );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tgroup = {\n\t    \t\t\t\t\tstart: i * 3,\n\t    \t\t\t\t\tmaterialIndex: materialIndex\n\t    \t\t\t\t};\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( group !== undefined ) {\n\t\n\t    \t\t\tgroup.count = ( i * 3 ) - group.start;\n\t    \t\t\tgroups.push( group );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.groups = groups;\n\t\n\t    \t},\n\t\n\t    \tfromGeometry: function ( geometry ) {\n\t\n\t    \t\tvar faces = geometry.faces;\n\t    \t\tvar vertices = geometry.vertices;\n\t    \t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\t\n\t    \t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t    \t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\t\n\t    \t\t// morphs\n\t\n\t    \t\tvar morphTargets = geometry.morphTargets;\n\t    \t\tvar morphTargetsLength = morphTargets.length;\n\t\n\t    \t\tvar morphTargetsPosition;\n\t\n\t    \t\tif ( morphTargetsLength > 0 ) {\n\t\n\t    \t\t\tmorphTargetsPosition = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\t\n\t    \t\t\t\tmorphTargetsPosition[ i ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.morphTargets.position = morphTargetsPosition;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar morphNormals = geometry.morphNormals;\n\t    \t\tvar morphNormalsLength = morphNormals.length;\n\t\n\t    \t\tvar morphTargetsNormal;\n\t\n\t    \t\tif ( morphNormalsLength > 0 ) {\n\t\n\t    \t\t\tmorphTargetsNormal = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\t\n\t    \t\t\t\tmorphTargetsNormal[ i ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\t\n\t    \t\t}\n\t\n\t    \t\t// skins\n\t\n\t    \t\tvar skinIndices = geometry.skinIndices;\n\t    \t\tvar skinWeights = geometry.skinWeights;\n\t\n\t    \t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t    \t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\t\n\t    \t\t//\n\t\n\t    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\t\n\t    \t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t    \t\t\tif ( vertexNormals.length === 3 ) {\n\t\n\t    \t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar normal = face.normal;\n\t\n\t    \t\t\t\tthis.normals.push( normal, normal, normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar vertexColors = face.vertexColors;\n\t\n\t    \t\t\tif ( vertexColors.length === 3 ) {\n\t\n\t    \t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar color = face.color;\n\t\n\t    \t\t\t\tthis.colors.push( color, color, color );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexUv === true ) {\n\t\n\t    \t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\t\n\t    \t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t    \t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\t\n\t    \t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexUv2 === true ) {\n\t\n\t    \t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\t\n\t    \t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t    \t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\t\n\t    \t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// morphs\n\t\n\t    \t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\t\n\t    \t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\t\n\t    \t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\t\n\t    \t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\t\n\t    \t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// skins\n\t\n\t    \t\t\tif ( hasSkinIndices ) {\n\t\n\t    \t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasSkinWeights ) {\n\t\n\t    \t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.computeGroups( geometry );\n\t\n\t    \t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t    \t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t    \t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t    \t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t    \t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BufferGeometry() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'BufferGeometry';\n\t\n\t    \tthis.index = null;\n\t    \tthis.attributes = {};\n\t\n\t    \tthis.morphAttributes = {};\n\t\n\t    \tthis.groups = [];\n\t\n\t    \tthis.boundingBox = null;\n\t    \tthis.boundingSphere = null;\n\t\n\t    \tthis.drawRange = { start: 0, count: Infinity };\n\t\n\t    }\n\t\n\t    Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisBufferGeometry: true,\n\t\n\t    \tgetIndex: function () {\n\t\n\t    \t\treturn this.index;\n\t\n\t    \t},\n\t\n\t    \tsetIndex: function ( index ) {\n\t\n\t    \t\tthis.index = index;\n\t\n\t    \t},\n\t\n\t    \taddAttribute: function ( name, attribute ) {\n\t\n\t    \t\tif ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\t\n\t    \t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\t\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( name === 'index' ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t    \t\t\tthis.setIndex( attribute );\n\t\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.attributes[ name ] = attribute;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetAttribute: function ( name ) {\n\t\n\t    \t\treturn this.attributes[ name ];\n\t\n\t    \t},\n\t\n\t    \tremoveAttribute: function ( name ) {\n\t\n\t    \t\tdelete this.attributes[ name ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddGroup: function ( start, count, materialIndex ) {\n\t\n\t    \t\tthis.groups.push( {\n\t\n\t    \t\t\tstart: start,\n\t    \t\t\tcount: count,\n\t    \t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\t\n\t    \t\t} );\n\t\n\t    \t},\n\t\n\t    \tclearGroups: function () {\n\t\n\t    \t\tthis.groups = [];\n\t\n\t    \t},\n\t\n\t    \tsetDrawRange: function ( start, count ) {\n\t\n\t    \t\tthis.drawRange.start = start;\n\t    \t\tthis.drawRange.count = count;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix: function ( matrix ) {\n\t\n\t    \t\tvar position = this.attributes.position;\n\t\n\t    \t\tif ( position !== undefined ) {\n\t\n\t    \t\t\tmatrix.applyToVector3Array( position.array );\n\t    \t\t\tposition.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar normal = this.attributes.normal;\n\t\n\t    \t\tif ( normal !== undefined ) {\n\t\n\t    \t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t    \t\t\tnormalMatrix.applyToVector3Array( normal.array );\n\t    \t\t\tnormal.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingBox();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingSphere();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trotateX: function () {\n\t\n\t    \t\t// rotate geometry around world x-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateX( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationX( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateY: function () {\n\t\n\t    \t\t// rotate geometry around world y-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateY( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationY( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateZ: function () {\n\t\n\t    \t\t// rotate geometry around world z-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateZ( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationZ( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function () {\n\t\n\t    \t\t// translate geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function translate( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeTranslation( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tscale: function () {\n\t\n\t    \t\t// scale geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function scale( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeScale( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\tvar obj;\n\t\n\t    \t\treturn function lookAt( vector ) {\n\t\n\t    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\t\n\t    \t\t\tobj.lookAt( vector );\n\t\n\t    \t\t\tobj.updateMatrix();\n\t\n\t    \t\t\tthis.applyMatrix( obj.matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tcenter: function () {\n\t\n\t    \t\tthis.computeBoundingBox();\n\t\n\t    \t\tvar offset = this.boundingBox.getCenter().negate();\n\t\n\t    \t\tthis.translate( offset.x, offset.y, offset.z );\n\t\n\t    \t\treturn offset;\n\t\n\t    \t},\n\t\n\t    \tsetFromObject: function ( object ) {\n\t\n\t    \t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tif ( (object && object.isPoints) || (object && object.isLine) ) {\n\t\n\t    \t\t\tvar positions = new Float32Attribute( geometry.vertices.length * 3, 3 );\n\t    \t\t\tvar colors = new Float32Attribute( geometry.colors.length * 3, 3 );\n\t\n\t    \t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t    \t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\t\n\t    \t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\t\n\t    \t\t\t\tvar lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );\n\t\n\t    \t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t    \t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (object && object.isMesh) ) {\n\t\n\t    \t\t\tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\tthis.fromGeometry( geometry );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tupdateFromObject: function ( object ) {\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tif ( (object && object.isMesh) ) {\n\t\n\t    \t\t\tvar direct = geometry.__directGeometry;\n\t\n\t    \t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\t\n\t    \t\t\t\tdirect = undefined;\n\t    \t\t\t\tgeometry.elementsNeedUpdate = false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( direct === undefined ) {\n\t\n\t    \t\t\t\treturn this.fromGeometry( geometry );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t    \t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t    \t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t    \t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t    \t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\t\n\t    \t\t\tgeometry.verticesNeedUpdate = false;\n\t    \t\t\tgeometry.normalsNeedUpdate = false;\n\t    \t\t\tgeometry.colorsNeedUpdate = false;\n\t    \t\t\tgeometry.uvsNeedUpdate = false;\n\t    \t\t\tgeometry.groupsNeedUpdate = false;\n\t\n\t    \t\t\tgeometry = direct;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attribute;\n\t\n\t    \t\tif ( geometry.verticesNeedUpdate === true ) {\n\t\n\t    \t\t\tattribute = this.attributes.position;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.verticesNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.normalsNeedUpdate === true ) {\n\t\n\t    \t\t\tattribute = this.attributes.normal;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.normalsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.colorsNeedUpdate === true ) {\n\t\n\t    \t\t\tattribute = this.attributes.color;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.colorsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.uvsNeedUpdate ) {\n\t\n\t    \t\t\tattribute = this.attributes.uv;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.uvsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.lineDistancesNeedUpdate ) {\n\t\n\t    \t\t\tattribute = this.attributes.lineDistance;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.lineDistancesNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.groupsNeedUpdate ) {\n\t\n\t    \t\t\tgeometry.computeGroups( object.geometry );\n\t    \t\t\tthis.groups = geometry.groups;\n\t\n\t    \t\t\tgeometry.groupsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tfromGeometry: function ( geometry ) {\n\t\n\t    \t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\t\n\t    \t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\t\n\t    \t},\n\t\n\t    \tfromDirectGeometry: function ( geometry ) {\n\t\n\t    \t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t    \t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\t\n\t    \t\tif ( geometry.normals.length > 0 ) {\n\t\n\t    \t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t    \t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.colors.length > 0 ) {\n\t\n\t    \t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t    \t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.uvs.length > 0 ) {\n\t\n\t    \t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t    \t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.uvs2.length > 0 ) {\n\t\n\t    \t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t    \t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.indices.length > 0 ) {\n\t\n\t    \t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n\t    \t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t    \t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\t\n\t    \t\t}\n\t\n\t    \t\t// groups\n\t\n\t    \t\tthis.groups = geometry.groups;\n\t\n\t    \t\t// morphs\n\t\n\t    \t\tfor ( var name in geometry.morphTargets ) {\n\t\n\t    \t\t\tvar array = [];\n\t    \t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\t\n\t    \t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\n\t    \t\t\t\tvar attribute = new Float32Attribute( morphTarget.length * 3, 3 );\n\t\n\t    \t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.morphAttributes[ name ] = array;\n\t\n\t    \t\t}\n\t\n\t    \t\t// skinning\n\t\n\t    \t\tif ( geometry.skinIndices.length > 0 ) {\n\t\n\t    \t\t\tvar skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );\n\t    \t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.skinWeights.length > 0 ) {\n\t\n\t    \t\t\tvar skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );\n\t    \t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingBox: function () {\n\t\n\t    \t\tif ( this.boundingBox === null ) {\n\t\n\t    \t\t\tthis.boundingBox = new Box3();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar positions = this.attributes.position.array;\n\t\n\t    \t\tif ( positions !== undefined ) {\n\t\n\t    \t\t\tthis.boundingBox.setFromArray( positions );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.boundingBox.makeEmpty();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingSphere: function () {\n\t\n\t    \t\tvar box = new Box3();\n\t    \t\tvar vector = new Vector3();\n\t\n\t    \t\treturn function computeBoundingSphere() {\n\t\n\t    \t\t\tif ( this.boundingSphere === null ) {\n\t\n\t    \t\t\t\tthis.boundingSphere = new Sphere();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar positions = this.attributes.position;\n\t\n\t    \t\t\tif ( positions ) {\n\t\n\t    \t\t\t\tvar array = positions.array;\n\t    \t\t\t\tvar center = this.boundingSphere.center;\n\t\n\t    \t\t\t\tbox.setFromArray( array );\n\t    \t\t\t\tbox.getCenter( center );\n\t\n\t    \t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t    \t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\t\n\t    \t\t\t\tvar maxRadiusSq = 0;\n\t\n\t    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\t\n\t    \t\t\t\t\tvector.fromArray( array, i );\n\t    \t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\t\n\t    \t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tcomputeFaceNormals: function () {\n\t\n\t    \t\t// backwards compatibility\n\t\n\t    \t},\n\t\n\t    \tcomputeVertexNormals: function () {\n\t\n\t    \t\tvar index = this.index;\n\t    \t\tvar attributes = this.attributes;\n\t    \t\tvar groups = this.groups;\n\t\n\t    \t\tif ( attributes.position ) {\n\t\n\t    \t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\tif ( attributes.normal === undefined ) {\n\t\n\t    \t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// reset existing normals to zero\n\t\n\t    \t\t\t\tvar array = attributes.normal.array;\n\t\n\t    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\tarray[ i ] = 0;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar normals = attributes.normal.array;\n\t\n\t    \t\t\tvar vA, vB, vC,\n\t\n\t    \t\t\tpA = new Vector3(),\n\t    \t\t\tpB = new Vector3(),\n\t    \t\t\tpC = new Vector3(),\n\t\n\t    \t\t\tcb = new Vector3(),\n\t    \t\t\tab = new Vector3();\n\t\n\t    \t\t\t// indexed elements\n\t\n\t    \t\t\tif ( index ) {\n\t\n\t    \t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\tif ( groups.length === 0 ) {\n\t\n\t    \t\t\t\t\tthis.addGroup( 0, indices.length );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\t\n\t    \t\t\t\t\tvar group = groups[ j ];\n\t\n\t    \t\t\t\t\tvar start = group.start;\n\t    \t\t\t\t\tvar count = group.count;\n\t\n\t    \t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\t\n\t    \t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t    \t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t    \t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\t\n\t    \t\t\t\t\t\tpA.fromArray( positions, vA );\n\t    \t\t\t\t\t\tpB.fromArray( positions, vB );\n\t    \t\t\t\t\t\tpC.fromArray( positions, vC );\n\t\n\t    \t\t\t\t\t\tcb.subVectors( pC, pB );\n\t    \t\t\t\t\t\tab.subVectors( pA, pB );\n\t    \t\t\t\t\t\tcb.cross( ab );\n\t\n\t    \t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t    \t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t    \t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\t\n\t    \t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t    \t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t    \t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\t\n\t    \t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t    \t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t    \t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\n\t    \t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\t\n\t    \t\t\t\t\tpA.fromArray( positions, i );\n\t    \t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t    \t\t\t\t\tpC.fromArray( positions, i + 6 );\n\t\n\t    \t\t\t\t\tcb.subVectors( pC, pB );\n\t    \t\t\t\t\tab.subVectors( pA, pB );\n\t    \t\t\t\t\tcb.cross( ab );\n\t\n\t    \t\t\t\t\tnormals[ i ] = cb.x;\n\t    \t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t    \t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\t\n\t    \t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t    \t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t    \t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\t\n\t    \t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t    \t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t    \t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.normalizeNormals();\n\t\n\t    \t\t\tattributes.normal.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tmerge: function ( geometry, offset ) {\n\t\n\t    \t\tif ( (geometry && geometry.isBufferGeometry) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tvar attributes = this.attributes;\n\t\n\t    \t\tfor ( var key in attributes ) {\n\t\n\t    \t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\t\n\t    \t\t\tvar attribute1 = attributes[ key ];\n\t    \t\t\tvar attributeArray1 = attribute1.array;\n\t\n\t    \t\t\tvar attribute2 = geometry.attributes[ key ];\n\t    \t\t\tvar attributeArray2 = attribute2.array;\n\t\n\t    \t\t\tvar attributeSize = attribute2.itemSize;\n\t\n\t    \t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\t\n\t    \t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnormalizeNormals: function () {\n\t\n\t    \t\tvar normals = this.attributes.normal.array;\n\t\n\t    \t\tvar x, y, z, n;\n\t\n\t    \t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\t\n\t    \t\t\tx = normals[ i ];\n\t    \t\t\ty = normals[ i + 1 ];\n\t    \t\t\tz = normals[ i + 2 ];\n\t\n\t    \t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\t\n\t    \t\t\tnormals[ i ] *= n;\n\t    \t\t\tnormals[ i + 1 ] *= n;\n\t    \t\t\tnormals[ i + 2 ] *= n;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoNonIndexed: function () {\n\t\n\t    \t\tif ( this.index === null ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar geometry2 = new BufferGeometry();\n\t\n\t    \t\tvar indices = this.index.array;\n\t    \t\tvar attributes = this.attributes;\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ name ];\n\t\n\t    \t\t\tvar array = attribute.array;\n\t    \t\t\tvar itemSize = attribute.itemSize;\n\t\n\t    \t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\t\n\t    \t\t\tvar index = 0, index2 = 0;\n\t\n\t    \t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tindex = indices[ i ] * itemSize;\n\t\n\t    \t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\t\n\t    \t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry2;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\tvar data = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'BufferGeometry',\n\t    \t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t    \t\t\t}\n\t    \t\t};\n\t\n\t    \t\t// standard BufferGeometry serialization\n\t\n\t    \t\tdata.uuid = this.uuid;\n\t    \t\tdata.type = this.type;\n\t    \t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t    \t\tif ( this.parameters !== undefined ) {\n\t\n\t    \t\t\tvar parameters = this.parameters;\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn data;\n\t\n\t    \t\t}\n\t\n\t    \t\tdata.data = { attributes: {} };\n\t\n\t    \t\tvar index = this.index;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tvar array = Array.prototype.slice.call( index.array );\n\t\n\t    \t\t\tdata.data.index = {\n\t    \t\t\t\ttype: index.array.constructor.name,\n\t    \t\t\t\tarray: array\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = this.attributes;\n\t\n\t    \t\tfor ( var key in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ key ];\n\t\n\t    \t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\t\n\t    \t\t\tdata.data.attributes[ key ] = {\n\t    \t\t\t\titemSize: attribute.itemSize,\n\t    \t\t\t\ttype: attribute.array.constructor.name,\n\t    \t\t\t\tarray: array,\n\t    \t\t\t\tnormalized: attribute.normalized\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tvar groups = this.groups;\n\t\n\t    \t\tif ( groups.length > 0 ) {\n\t\n\t    \t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar boundingSphere = this.boundingSphere;\n\t\n\t    \t\tif ( boundingSphere !== null ) {\n\t\n\t    \t\t\tdata.data.boundingSphere = {\n\t    \t\t\t\tcenter: boundingSphere.center.toArray(),\n\t    \t\t\t\tradius: boundingSphere.radius\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\treturn data;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\t/*\n\t    \t\t// Handle primitives\n\t\n\t    \t\tvar parameters = this.parameters;\n\t\n\t    \t\tif ( parameters !== undefined ) {\n\t\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tvalues.push( parameters[ key ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t    \t\t\tthis.constructor.apply( geometry, values );\n\t    \t\t\treturn geometry;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t    \t\t*/\n\t\n\t    \t\treturn new BufferGeometry().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tvar index = source.index;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tthis.setIndex( index.clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = source.attributes;\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ name ];\n\t    \t\t\tthis.addAttribute( name, attribute.clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar groups = source.groups;\n\t\n\t    \t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar group = groups[ i ];\n\t    \t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    BufferGeometry.MaxIndex = 65535;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author jonobr1 / http://jonobr1.com/\n\t     */\n\t\n\t    function Mesh( geometry, material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Mesh';\n\t\n\t    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t    \tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t    \tthis.drawMode = TrianglesDrawMode;\n\t\n\t    \tthis.updateMorphTargets();\n\t\n\t    }\n\t\n\t    Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Mesh,\n\t\n\t    \tisMesh: true,\n\t\n\t    \tsetDrawMode: function ( value ) {\n\t\n\t    \t\tthis.drawMode = value;\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.drawMode = source.drawMode;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tupdateMorphTargets: function () {\n\t\n\t    \t\tvar morphTargets = this.geometry.morphTargets;\n\t\n\t    \t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\t\n\t    \t\t\tthis.morphTargetInfluences = [];\n\t    \t\t\tthis.morphTargetDictionary = {};\n\t\n\t    \t\t\tfor ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\t\n\t    \t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t    \t\t\t\tthis.morphTargetDictionary[ morphTargets[ m ].name ] = m;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar inverseMatrix = new Matrix4();\n\t    \t\tvar ray = new Ray();\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\tvar vA = new Vector3();\n\t    \t\tvar vB = new Vector3();\n\t    \t\tvar vC = new Vector3();\n\t\n\t    \t\tvar tempA = new Vector3();\n\t    \t\tvar tempB = new Vector3();\n\t    \t\tvar tempC = new Vector3();\n\t\n\t    \t\tvar uvA = new Vector2();\n\t    \t\tvar uvB = new Vector2();\n\t    \t\tvar uvC = new Vector2();\n\t\n\t    \t\tvar barycoord = new Vector3();\n\t\n\t    \t\tvar intersectionPoint = new Vector3();\n\t    \t\tvar intersectionPointWorld = new Vector3();\n\t\n\t    \t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\t\n\t    \t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\t\n\t    \t\t\tuv1.multiplyScalar( barycoord.x );\n\t    \t\t\tuv2.multiplyScalar( barycoord.y );\n\t    \t\t\tuv3.multiplyScalar( barycoord.z );\n\t\n\t    \t\t\tuv1.add( uv2 ).add( uv3 );\n\t\n\t    \t\t\treturn uv1.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\t\n\t    \t\t\tvar intersect;\n\t    \t\t\tvar material = object.material;\n\t\n\t    \t\t\tif ( material.side === BackSide ) {\n\t\n\t    \t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( intersect === null ) return null;\n\t\n\t    \t\t\tintersectionPointWorld.copy( point );\n\t    \t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\t\n\t    \t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\t\n\t    \t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\t\n\t    \t\t\treturn {\n\t    \t\t\t\tdistance: distance,\n\t    \t\t\t\tpoint: intersectionPointWorld.clone(),\n\t    \t\t\t\tobject: object\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\t\n\t    \t\t\tvA.fromArray( positions, a * 3 );\n\t    \t\t\tvB.fromArray( positions, b * 3 );\n\t    \t\t\tvC.fromArray( positions, c * 3 );\n\t\n\t    \t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\t\n\t    \t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\tif ( uvs ) {\n\t\n\t    \t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n\t    \t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n\t    \t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\t\n\t    \t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n\t    \t\t\t\tintersection.faceIndex = a;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn intersection;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tvar geometry = this.geometry;\n\t    \t\t\tvar material = this.material;\n\t    \t\t\tvar matrixWorld = this.matrixWorld;\n\t\n\t    \t\t\tif ( material === undefined ) return;\n\t\n\t    \t\t\t// Checking boundingSphere distance to ray\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere );\n\t    \t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tinverseMatrix.getInverse( matrixWorld );\n\t    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t    \t\t\t// Check boundingBox before continuing\n\t\n\t    \t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar uvs, intersection;\n\t\n\t    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\tvar a, b, c;\n\t    \t\t\t\tvar index = geometry.index;\n\t    \t\t\t\tvar attributes = geometry.attributes;\n\t    \t\t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\t\tif ( attributes.uv !== undefined ) {\n\t\n\t    \t\t\t\t\tuvs = attributes.uv.array;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\t\n\t    \t\t\t\t\t\ta = indices[ i ];\n\t    \t\t\t\t\t\tb = indices[ i + 1 ];\n\t    \t\t\t\t\t\tc = indices[ i + 2 ];\n\t\n\t    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\t\n\t    \t\t\t\t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t    \t\t\t\t\t\t\tintersects.push( intersection );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\t\n\t    \t\t\t\t\t\ta = i / 3;\n\t    \t\t\t\t\t\tb = a + 1;\n\t    \t\t\t\t\t\tc = a + 2;\n\t\n\t    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\t\n\t    \t\t\t\t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t    \t\t\t\t\t\t\tintersects.push( intersection );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\tvar fvA, fvB, fvC;\n\t    \t\t\t\tvar isFaceMaterial = (material && material.isMultiMaterial);\n\t    \t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\t\n\t    \t\t\t\tvar vertices = geometry.vertices;\n\t    \t\t\t\tvar faces = geometry.faces;\n\t    \t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t    \t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\t\n\t    \t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\t\tvar face = faces[ f ];\n\t    \t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\t\n\t    \t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\t\n\t    \t\t\t\t\tfvA = vertices[ face.a ];\n\t    \t\t\t\t\tfvB = vertices[ face.b ];\n\t    \t\t\t\t\tfvC = vertices[ face.c ];\n\t\n\t    \t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\t\n\t    \t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t    \t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\t\n\t    \t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t    \t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t    \t\t\t\t\t\tvC.set( 0, 0, 0 );\n\t\n\t    \t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\t\n\t    \t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\t\n\t    \t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\t\n\t    \t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\t\n\t    \t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t    \t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t    \t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\tvA.add( fvA );\n\t    \t\t\t\t\t\tvB.add( fvB );\n\t    \t\t\t\t\t\tvC.add( fvC );\n\t\n\t    \t\t\t\t\t\tfvA = vA;\n\t    \t\t\t\t\t\tfvB = vB;\n\t    \t\t\t\t\t\tfvC = vC;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\t\n\t    \t\t\t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\t\t\tif ( uvs ) {\n\t\n\t    \t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t    \t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t    \t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t    \t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\t\n\t    \t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\tintersection.face = face;\n\t    \t\t\t\t\t\tintersection.faceIndex = f;\n\t    \t\t\t\t\t\tintersects.push( intersection );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'BoxBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\tdepth: depth,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tdepthSegments: depthSegments\n\t    \t};\n\t\n\t    \tvar scope = this;\n\t\n\t    \t// segments\n\t    \twidthSegments = Math.floor( widthSegments ) || 1;\n\t    \theightSegments = Math.floor( heightSegments ) || 1;\n\t    \tdepthSegments = Math.floor( depthSegments ) || 1;\n\t\n\t    \t// these are used to calculate buffer length\n\t    \tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n\t    \tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\t\n\t    \t// buffers\n\t    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t    \tvar vertices = new Float32Array( vertexCount * 3 );\n\t    \tvar normals = new Float32Array( vertexCount * 3 );\n\t    \tvar uvs = new Float32Array( vertexCount * 2 );\n\t\n\t    \t// offset variables\n\t    \tvar vertexBufferOffset = 0;\n\t    \tvar uvBufferOffset = 0;\n\t    \tvar indexBufferOffset = 0;\n\t    \tvar numberOfVertices = 0;\n\t\n\t    \t// group variables\n\t    \tvar groupStart = 0;\n\t\n\t    \t// build each side of the box geometry\n\t    \tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n\t    \tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n\t    \tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n\t    \tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n\t    \tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n\t    \tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\t\n\t    \t// build geometry\n\t    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    \t// helper functions\n\t\n\t    \tfunction calculateVertexCount( w, h, d ) {\n\t\n\t    \t\tvar vertices = 0;\n\t\n\t    \t\t// calculate the amount of vertices for each side (plane)\n\t    \t\tvertices += (w + 1) * (h + 1) * 2; // xy\n\t    \t\tvertices += (w + 1) * (d + 1) * 2; // xz\n\t    \t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\t\n\t    \t\treturn vertices;\n\t\n\t    \t}\n\t\n\t    \tfunction calculateIndexCount( w, h, d ) {\n\t\n\t    \t\tvar index = 0;\n\t\n\t    \t\t// calculate the amount of squares for each side\n\t    \t\tindex += w * h * 2; // xy\n\t    \t\tindex += w * d * 2; // xz\n\t    \t\tindex += d * h * 2; // zy\n\t\n\t    \t\treturn index * 6; // two triangles per square => six vertices per square\n\t\n\t    \t}\n\t\n\t    \tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\t\n\t    \t\tvar segmentWidth\t= width / gridX;\n\t    \t\tvar segmentHeight = height / gridY;\n\t\n\t    \t\tvar widthHalf = width / 2;\n\t    \t\tvar heightHalf = height / 2;\n\t    \t\tvar depthHalf = depth / 2;\n\t\n\t    \t\tvar gridX1 = gridX + 1;\n\t    \t\tvar gridY1 = gridY + 1;\n\t\n\t    \t\tvar vertexCounter = 0;\n\t    \t\tvar groupCount = 0;\n\t\n\t    \t\tvar vector = new Vector3();\n\t\n\t    \t\t// generate vertices, normals and uvs\n\t\n\t    \t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\t\n\t    \t\t\tvar y = iy * segmentHeight - heightHalf;\n\t\n\t    \t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\t\n\t    \t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\t\n\t    \t\t\t\t// set values to correct vector component\n\t    \t\t\t\tvector[ u ] = x * udir;\n\t    \t\t\t\tvector[ v ] = y * vdir;\n\t    \t\t\t\tvector[ w ] = depthHalf;\n\t\n\t    \t\t\t\t// now apply vector to vertex buffer\n\t    \t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n\t    \t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n\t    \t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\t\n\t    \t\t\t\t// set values to correct vector component\n\t    \t\t\t\tvector[ u ] = 0;\n\t    \t\t\t\tvector[ v ] = 0;\n\t    \t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\t\n\t    \t\t\t\t// now apply vector to normal buffer\n\t    \t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n\t    \t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n\t    \t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\t\n\t    \t\t\t\t// uvs\n\t    \t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n\t    \t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\t\n\t    \t\t\t\t// update offsets and counters\n\t    \t\t\t\tvertexBufferOffset += 3;\n\t    \t\t\t\tuvBufferOffset += 2;\n\t    \t\t\t\tvertexCounter += 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// 1. you need three indices to draw a single face\n\t    \t\t// 2. a single segment consists of two faces\n\t    \t\t// 3. so we need to generate six (2*3) indices per segment\n\t\n\t    \t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\t\n\t    \t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\t\n\t    \t\t\t\t// indices\n\t    \t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t    \t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t    \t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t    \t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\t\n\t    \t\t\t\t// face one\n\t    \t\t\t\tindices[ indexBufferOffset ] = a;\n\t    \t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t    \t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\t\n\t    \t\t\t\t// face two\n\t    \t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t    \t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t    \t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\t\n\t    \t\t\t\t// update offsets and counters\n\t    \t\t\t\tindexBufferOffset += 6;\n\t    \t\t\t\tgroupCount += 6;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// add a group to the geometry. this will ensure multi material support\n\t    \t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\t\n\t    \t\t// calculate new start value for groups\n\t    \t\tgroupStart += groupCount;\n\t\n\t    \t\t// update total number of vertices\n\t    \t\tnumberOfVertices += vertexCounter;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t     */\n\t\n\t    function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'PlaneBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments\n\t    \t};\n\t\n\t    \tvar width_half = width / 2;\n\t    \tvar height_half = height / 2;\n\t\n\t    \tvar gridX = Math.floor( widthSegments ) || 1;\n\t    \tvar gridY = Math.floor( heightSegments ) || 1;\n\t\n\t    \tvar gridX1 = gridX + 1;\n\t    \tvar gridY1 = gridY + 1;\n\t\n\t    \tvar segment_width = width / gridX;\n\t    \tvar segment_height = height / gridY;\n\t\n\t    \tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n\t    \tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n\t    \tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\t\n\t    \tvar offset = 0;\n\t    \tvar offset2 = 0;\n\t\n\t    \tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\t\n\t    \t\tvar y = iy * segment_height - height_half;\n\t\n\t    \t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\t\n\t    \t\t\tvar x = ix * segment_width - width_half;\n\t\n\t    \t\t\tvertices[ offset ] = x;\n\t    \t\t\tvertices[ offset + 1 ] = - y;\n\t\n\t    \t\t\tnormals[ offset + 2 ] = 1;\n\t\n\t    \t\t\tuvs[ offset2 ] = ix / gridX;\n\t    \t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\t\n\t    \t\t\toffset += 3;\n\t    \t\t\toffset2 += 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \toffset = 0;\n\t\n\t    \tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\t\n\t    \tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\t\n\t    \t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\t\n\t    \t\t\tvar a = ix + gridX1 * iy;\n\t    \t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t    \t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t    \t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\t\n\t    \t\t\tindices[ offset ] = a;\n\t    \t\t\tindices[ offset + 1 ] = b;\n\t    \t\t\tindices[ offset + 2 ] = d;\n\t\n\t    \t\t\tindices[ offset + 3 ] = b;\n\t    \t\t\tindices[ offset + 4 ] = c;\n\t    \t\t\tindices[ offset + 5 ] = d;\n\t\n\t    \t\t\toffset += 6;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    }\n\t\n\t    PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function Camera() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Camera';\n\t\n\t    \tthis.matrixWorldInverse = new Matrix4();\n\t    \tthis.projectionMatrix = new Matrix4();\n\t\n\t    }\n\t\n\t    Camera.prototype = Object.create( Object3D.prototype );\n\t    Camera.prototype.constructor = Camera;\n\t\n\t    Camera.prototype.isCamera = true;\n\t\n\t    Camera.prototype.getWorldDirection = function () {\n\t\n\t    \tvar quaternion = new Quaternion();\n\t\n\t    \treturn function getWorldDirection( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tthis.getWorldQuaternion( quaternion );\n\t\n\t    \t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Camera.prototype.lookAt = function () {\n\t\n\t    \t// This routine does not support cameras with rotated and/or translated parent(s)\n\t\n\t    \tvar m1 = new Matrix4();\n\t\n\t    \treturn function lookAt( vector ) {\n\t\n\t    \t\tm1.lookAt( this.position, vector, this.up );\n\t\n\t    \t\tthis.quaternion.setFromRotationMatrix( m1 );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Camera.prototype.clone = function () {\n\t\n\t    \treturn new this.constructor().copy( this );\n\t\n\t    };\n\t\n\t    Camera.prototype.copy = function ( source ) {\n\t\n\t    \tObject3D.prototype.copy.call( this, source );\n\t\n\t    \tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\t    \tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author greggman / http://games.greggman.com/\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author tschw\n\t     */\n\t\n\t    function PerspectiveCamera( fov, aspect, near, far ) {\n\t\n\t    \tCamera.call( this );\n\t\n\t    \tthis.type = 'PerspectiveCamera';\n\t\n\t    \tthis.fov = fov !== undefined ? fov : 50;\n\t    \tthis.zoom = 1;\n\t\n\t    \tthis.near = near !== undefined ? near : 0.1;\n\t    \tthis.far = far !== undefined ? far : 2000;\n\t    \tthis.focus = 10;\n\t\n\t    \tthis.aspect = aspect !== undefined ? aspect : 1;\n\t    \tthis.view = null;\n\t\n\t    \tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t    \tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\t\n\t    \tthis.updateProjectionMatrix();\n\t\n\t    }\n\t\n\t    PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\t\n\t    \tconstructor: PerspectiveCamera,\n\t\n\t    \tisPerspectiveCamera: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tCamera.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.fov = source.fov;\n\t    \t\tthis.zoom = source.zoom;\n\t\n\t    \t\tthis.near = source.near;\n\t    \t\tthis.far = source.far;\n\t    \t\tthis.focus = source.focus;\n\t\n\t    \t\tthis.aspect = source.aspect;\n\t    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\t\n\t    \t\tthis.filmGauge = source.filmGauge;\n\t    \t\tthis.filmOffset = source.filmOffset;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t/**\n\t    \t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t    \t *\n\t    \t * The default film gauge is 35, so that the focal length can be specified for\n\t    \t * a 35mm (full frame) camera.\n\t    \t *\n\t    \t * Values for focal length and film gauge must have the same unit.\n\t    \t */\n\t    \tsetFocalLength: function ( focalLength ) {\n\t\n\t    \t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t    \t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\n\t    \t\tthis.fov = exports.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \t/**\n\t    \t * Calculates the focal length from the current .fov and .filmGauge.\n\t    \t */\n\t    \tgetFocalLength: function () {\n\t\n\t    \t\tvar vExtentSlope = Math.tan( exports.Math.DEG2RAD * 0.5 * this.fov );\n\t\n\t    \t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\n\t    \t},\n\t\n\t    \tgetEffectiveFOV: function () {\n\t\n\t    \t\treturn exports.Math.RAD2DEG * 2 * Math.atan(\n\t    \t\t\t\tMath.tan( exports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\t\n\t    \t},\n\t\n\t    \tgetFilmWidth: function () {\n\t\n\t    \t\t// film not completely covered in portrait format (aspect < 1)\n\t    \t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\t\n\t    \t},\n\t\n\t    \tgetFilmHeight: function () {\n\t\n\t    \t\t// film not completely covered in landscape format (aspect > 1)\n\t    \t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\t\n\t    \t},\n\t\n\t    \t/**\n\t    \t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t    \t * multi-monitor/multi-machine setups.\n\t    \t *\n\t    \t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t    \t * the monitors are in grid like this\n\t    \t *\n\t    \t *   +---+---+---+\n\t    \t *   | A | B | C |\n\t    \t *   +---+---+---+\n\t    \t *   | D | E | F |\n\t    \t *   +---+---+---+\n\t    \t *\n\t    \t * then for each monitor you would call it like this\n\t    \t *\n\t    \t *   var w = 1920;\n\t    \t *   var h = 1080;\n\t    \t *   var fullWidth = w * 3;\n\t    \t *   var fullHeight = h * 2;\n\t    \t *\n\t    \t *   --A--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t    \t *   --B--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t    \t *   --C--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t    \t *   --D--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t    \t *   --E--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t    \t *   --F--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t    \t *\n\t    \t *   Note there is no reason monitors have to be the same size or in a grid.\n\t    \t */\n\t    \tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\t\n\t    \t\tthis.aspect = fullWidth / fullHeight;\n\t\n\t    \t\tthis.view = {\n\t    \t\t\tfullWidth: fullWidth,\n\t    \t\t\tfullHeight: fullHeight,\n\t    \t\t\toffsetX: x,\n\t    \t\t\toffsetY: y,\n\t    \t\t\twidth: width,\n\t    \t\t\theight: height\n\t    \t\t};\n\t\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tclearViewOffset: function() {\n\t\n\t    \t\tthis.view = null;\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tupdateProjectionMatrix: function () {\n\t\n\t    \t\tvar near = this.near,\n\t    \t\t\ttop = near * Math.tan(\n\t    \t\t\t\t\texports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t    \t\t\theight = 2 * top,\n\t    \t\t\twidth = this.aspect * height,\n\t    \t\t\tleft = - 0.5 * width,\n\t    \t\t\tview = this.view;\n\t\n\t    \t\tif ( view !== null ) {\n\t\n\t    \t\t\tvar fullWidth = view.fullWidth,\n\t    \t\t\t\tfullHeight = view.fullHeight;\n\t\n\t    \t\t\tleft += view.offsetX * width / fullWidth;\n\t    \t\t\ttop -= view.offsetY * height / fullHeight;\n\t    \t\t\twidth *= view.width / fullWidth;\n\t    \t\t\theight *= view.height / fullHeight;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar skew = this.filmOffset;\n\t    \t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\t\n\t    \t\tthis.projectionMatrix.makeFrustum(\n\t    \t\t\t\tleft, left + width, top - height, top, near, this.far );\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.fov = this.fov;\n\t    \t\tdata.object.zoom = this.zoom;\n\t\n\t    \t\tdata.object.near = this.near;\n\t    \t\tdata.object.far = this.far;\n\t    \t\tdata.object.focus = this.focus;\n\t\n\t    \t\tdata.object.aspect = this.aspect;\n\t\n\t    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\t\n\t    \t\tdata.object.filmGauge = this.filmGauge;\n\t    \t\tdata.object.filmOffset = this.filmOffset;\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author arose / http://github.com/arose\n\t     */\n\t\n\t    function OrthographicCamera( left, right, top, bottom, near, far ) {\n\t\n\t    \tCamera.call( this );\n\t\n\t    \tthis.type = 'OrthographicCamera';\n\t\n\t    \tthis.zoom = 1;\n\t    \tthis.view = null;\n\t\n\t    \tthis.left = left;\n\t    \tthis.right = right;\n\t    \tthis.top = top;\n\t    \tthis.bottom = bottom;\n\t\n\t    \tthis.near = ( near !== undefined ) ? near : 0.1;\n\t    \tthis.far = ( far !== undefined ) ? far : 2000;\n\t\n\t    \tthis.updateProjectionMatrix();\n\t\n\t    }\n\t\n\t    OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\t\n\t    \tconstructor: OrthographicCamera,\n\t\n\t    \tisOrthographicCamera: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tCamera.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.left = source.left;\n\t    \t\tthis.right = source.right;\n\t    \t\tthis.top = source.top;\n\t    \t\tthis.bottom = source.bottom;\n\t    \t\tthis.near = source.near;\n\t    \t\tthis.far = source.far;\n\t\n\t    \t\tthis.zoom = source.zoom;\n\t    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\t\n\t    \t\tthis.view = {\n\t    \t\t\tfullWidth: fullWidth,\n\t    \t\t\tfullHeight: fullHeight,\n\t    \t\t\toffsetX: x,\n\t    \t\t\toffsetY: y,\n\t    \t\t\twidth: width,\n\t    \t\t\theight: height\n\t    \t\t};\n\t\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tclearViewOffset: function() {\n\t\n\t    \t\tthis.view = null;\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tupdateProjectionMatrix: function () {\n\t\n\t    \t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t    \t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t    \t\tvar cx = ( this.right + this.left ) / 2;\n\t    \t\tvar cy = ( this.top + this.bottom ) / 2;\n\t\n\t    \t\tvar left = cx - dx;\n\t    \t\tvar right = cx + dx;\n\t    \t\tvar top = cy + dy;\n\t    \t\tvar bottom = cy - dy;\n\t\n\t    \t\tif ( this.view !== null ) {\n\t\n\t    \t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t    \t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t    \t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t    \t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\t\n\t    \t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t    \t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t    \t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t    \t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.zoom = this.zoom;\n\t    \t\tdata.object.left = this.left;\n\t    \t\tdata.object.right = this.right;\n\t    \t\tdata.object.top = this.top;\n\t    \t\tdata.object.bottom = this.bottom;\n\t    \t\tdata.object.near = this.near;\n\t    \t\tdata.object.far = this.far;\n\t\n\t    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\t\n\t    \tvar mode;\n\t\n\t    \tfunction setMode( value ) {\n\t\n\t    \t\tmode = value;\n\t\n\t    \t}\n\t\n\t    \tvar type, size;\n\t\n\t    \tfunction setIndex( index ) {\n\t\n\t    \t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\t\n\t    \t\t\ttype = gl.UNSIGNED_INT;\n\t    \t\t\tsize = 4;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttype = gl.UNSIGNED_SHORT;\n\t    \t\t\tsize = 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction render( start, count ) {\n\t\n\t    \t\tgl.drawElements( mode, count, type, start * size );\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\t\n\t    \t}\n\t\n\t    \tfunction renderInstances( geometry, start, count ) {\n\t\n\t    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\tif ( extension === null ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tsetMode: setMode,\n\t    \t\tsetIndex: setIndex,\n\t    \t\trender: render,\n\t    \t\trenderInstances: renderInstances\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLBufferRenderer( gl, extensions, infoRender ) {\n\t\n\t    \tvar mode;\n\t\n\t    \tfunction setMode( value ) {\n\t\n\t    \t\tmode = value;\n\t\n\t    \t}\n\t\n\t    \tfunction render( start, count ) {\n\t\n\t    \t\tgl.drawArrays( mode, start, count );\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\t\n\t    \t}\n\t\n\t    \tfunction renderInstances( geometry ) {\n\t\n\t    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\tif ( extension === null ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar position = geometry.attributes.position;\n\t\n\t    \t\tvar count = 0;\n\t\n\t    \t\tif ( (position && position.isInterleavedBufferAttribute) ) {\n\t\n\t    \t\t\tcount = position.data.count;\n\t\n\t    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tcount = position.count;\n\t\n\t    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\t\n\t    \t\t}\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t    \t\tsetMode: setMode,\n\t    \t\trender: render,\n\t    \t\trenderInstances: renderInstances\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLLights() {\n\t\n\t    \tvar lights = {};\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( light ) {\n\t\n\t    \t\t\tif ( lights[ light.id ] !== undefined ) {\n\t\n\t    \t\t\t\treturn lights[ light.id ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar uniforms;\n\t\n\t    \t\t\tswitch ( light.type ) {\n\t\n\t    \t\t\t\tcase 'DirectionalLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tdirection: new Vector3(),\n\t    \t\t\t\t\t\tcolor: new Color(),\n\t\n\t    \t\t\t\t\t\tshadow: false,\n\t    \t\t\t\t\t\tshadowBias: 0,\n\t    \t\t\t\t\t\tshadowRadius: 1,\n\t    \t\t\t\t\t\tshadowMapSize: new Vector2()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'SpotLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tposition: new Vector3(),\n\t    \t\t\t\t\t\tdirection: new Vector3(),\n\t    \t\t\t\t\t\tcolor: new Color(),\n\t    \t\t\t\t\t\tdistance: 0,\n\t    \t\t\t\t\t\tconeCos: 0,\n\t    \t\t\t\t\t\tpenumbraCos: 0,\n\t    \t\t\t\t\t\tdecay: 0,\n\t\n\t    \t\t\t\t\t\tshadow: false,\n\t    \t\t\t\t\t\tshadowBias: 0,\n\t    \t\t\t\t\t\tshadowRadius: 1,\n\t    \t\t\t\t\t\tshadowMapSize: new Vector2()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PointLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tposition: new Vector3(),\n\t    \t\t\t\t\t\tcolor: new Color(),\n\t    \t\t\t\t\t\tdistance: 0,\n\t    \t\t\t\t\t\tdecay: 0,\n\t\n\t    \t\t\t\t\t\tshadow: false,\n\t    \t\t\t\t\t\tshadowBias: 0,\n\t    \t\t\t\t\t\tshadowRadius: 1,\n\t    \t\t\t\t\t\tshadowMapSize: new Vector2()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'HemisphereLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tdirection: new Vector3(),\n\t    \t\t\t\t\t\tskyColor: new Color(),\n\t    \t\t\t\t\t\tgroundColor: new Color()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tlights[ light.id ] = uniforms;\n\t\n\t    \t\t\treturn uniforms;\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function addLineNumbers( string ) {\n\t\n\t    \tvar lines = string.split( '\\n' );\n\t\n\t    \tfor ( var i = 0; i < lines.length; i ++ ) {\n\t\n\t    \t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\t\n\t    \t}\n\t\n\t    \treturn lines.join( '\\n' );\n\t\n\t    }\n\t\n\t    function WebGLShader( gl, type, string ) {\n\t\n\t    \tvar shader = gl.createShader( type );\n\t\n\t    \tgl.shaderSource( shader, string );\n\t    \tgl.compileShader( shader );\n\t\n\t    \tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\t\n\t    \t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\t\n\t    \t}\n\t\n\t    \tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\t\n\t    \t}\n\t\n\t    \t// --enable-privileged-webgl-extension\n\t    \t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\t\n\t    \treturn shader;\n\t\n\t    }\n\t\n\t    var programIdCount = 0;\n\t\n\t    function getEncodingComponents( encoding ) {\n\t\n\t    \tswitch ( encoding ) {\n\t\n\t    \t\tcase LinearEncoding:\n\t    \t\t\treturn [ 'Linear','( value )' ];\n\t    \t\tcase sRGBEncoding:\n\t    \t\t\treturn [ 'sRGB','( value )' ];\n\t    \t\tcase RGBEEncoding:\n\t    \t\t\treturn [ 'RGBE','( value )' ];\n\t    \t\tcase RGBM7Encoding:\n\t    \t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n\t    \t\tcase RGBM16Encoding:\n\t    \t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n\t    \t\tcase RGBDEncoding:\n\t    \t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n\t    \t\tcase GammaEncoding:\n\t    \t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n\t    \t\tdefault:\n\t    \t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    function getTexelDecodingFunction( functionName, encoding ) {\n\t\n\t    \tvar components = getEncodingComponents( encoding );\n\t    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\t\n\t    }\n\t\n\t    function getTexelEncodingFunction( functionName, encoding ) {\n\t\n\t    \tvar components = getEncodingComponents( encoding );\n\t    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\t\n\t    }\n\t\n\t    function getToneMappingFunction( functionName, toneMapping ) {\n\t\n\t    \tvar toneMappingName;\n\t\n\t    \tswitch ( toneMapping ) {\n\t\n\t    \t\tcase LinearToneMapping:\n\t    \t\t\ttoneMappingName = \"Linear\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tcase ReinhardToneMapping:\n\t    \t\t\ttoneMappingName = \"Reinhard\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tcase Uncharted2ToneMapping:\n\t    \t\t\ttoneMappingName = \"Uncharted2\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tcase CineonToneMapping:\n\t    \t\t\ttoneMappingName = \"OptimizedCineon\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tdefault:\n\t    \t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\t\n\t    \t}\n\t\n\t    \treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\t\n\t    }\n\t\n\t    function generateExtensions( extensions, parameters, rendererExtensions ) {\n\t\n\t    \textensions = extensions || {};\n\t\n\t    \tvar chunks = [\n\t    \t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t    \t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t    \t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t    \t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n\t    \t];\n\t\n\t    \treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    }\n\t\n\t    function generateDefines( defines ) {\n\t\n\t    \tvar chunks = [];\n\t\n\t    \tfor ( var name in defines ) {\n\t\n\t    \t\tvar value = defines[ name ];\n\t\n\t    \t\tif ( value === false ) continue;\n\t\n\t    \t\tchunks.push( '#define ' + name + ' ' + value );\n\t\n\t    \t}\n\t\n\t    \treturn chunks.join( '\\n' );\n\t\n\t    }\n\t\n\t    function fetchAttributeLocations( gl, program, identifiers ) {\n\t\n\t    \tvar attributes = {};\n\t\n\t    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\t\n\t    \tfor ( var i = 0; i < n; i ++ ) {\n\t\n\t    \t\tvar info = gl.getActiveAttrib( program, i );\n\t    \t\tvar name = info.name;\n\t\n\t    \t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\t\n\t    \t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\t\n\t    \t}\n\t\n\t    \treturn attributes;\n\t\n\t    }\n\t\n\t    function filterEmptyLine( string ) {\n\t\n\t    \treturn string !== '';\n\t\n\t    }\n\t\n\t    function replaceLightNums( string, parameters ) {\n\t\n\t    \treturn string\n\t    \t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t    \t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t    \t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t    \t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\t\n\t    }\n\t\n\t    function parseIncludes( string ) {\n\t\n\t    \tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\t\n\t    \tfunction replace( match, include ) {\n\t\n\t    \t\tvar replace = ShaderChunk[ include ];\n\t\n\t    \t\tif ( replace === undefined ) {\n\t\n\t    \t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn parseIncludes( replace );\n\t\n\t    \t}\n\t\n\t    \treturn string.replace( pattern, replace );\n\t\n\t    }\n\t\n\t    function unrollLoops( string ) {\n\t\n\t    \tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\t\n\t    \tfunction replace( match, start, end, snippet ) {\n\t\n\t    \t\tvar unroll = '';\n\t\n\t    \t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\t\n\t    \t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn unroll;\n\t\n\t    \t}\n\t\n\t    \treturn string.replace( pattern, replace );\n\t\n\t    }\n\t\n\t    function WebGLProgram( renderer, code, material, parameters ) {\n\t\n\t    \tvar gl = renderer.context;\n\t\n\t    \tvar extensions = material.extensions;\n\t    \tvar defines = material.defines;\n\t\n\t    \tvar vertexShader = material.__webglShader.vertexShader;\n\t    \tvar fragmentShader = material.__webglShader.fragmentShader;\n\t\n\t    \tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\t\n\t    \tif ( parameters.shadowMapType === PCFShadowMap ) {\n\t\n\t    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\n\t    \t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\t\n\t    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\n\t    \t}\n\t\n\t    \tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t    \tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t    \tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\n\t    \tif ( parameters.envMap ) {\n\t\n\t    \t\tswitch ( material.envMap.mapping ) {\n\t\n\t    \t\t\tcase CubeReflectionMapping:\n\t    \t\t\tcase CubeRefractionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase CubeUVReflectionMapping:\n\t    \t\t\tcase CubeUVRefractionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase EquirectangularReflectionMapping:\n\t    \t\t\tcase EquirectangularRefractionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase SphericalReflectionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t\tswitch ( material.envMap.mapping ) {\n\t\n\t    \t\t\tcase CubeRefractionMapping:\n\t    \t\t\tcase EquirectangularRefractionMapping:\n\t    \t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t\tswitch ( material.combine ) {\n\t\n\t    \t\t\tcase MultiplyOperation:\n\t    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase MixOperation:\n\t    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase AddOperation:\n\t    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\t\n\t    \t// console.log( 'building new program ' );\n\t\n\t    \t//\n\t\n\t    \tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\t\n\t    \tvar customDefines = generateDefines( defines );\n\t\n\t    \t//\n\t\n\t    \tvar program = gl.createProgram();\n\t\n\t    \tvar prefixVertex, prefixFragment;\n\t\n\t    \tif ( material.isRawShaderMaterial ) {\n\t\n\t    \t\tprefixVertex = [\n\t\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t\tprefixFragment = [\n\t\n\t    \t\t\tcustomExtensions,\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t} else {\n\t\n\t    \t\tprefixVertex = [\n\t\n\t    \t\t\t'precision ' + parameters.precision + ' float;',\n\t    \t\t\t'precision ' + parameters.precision + ' int;',\n\t\n\t    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\t\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\t\n\t    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\t\n\t    \t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\n\t    \t\t\tparameters.map ? '#define USE_MAP' : '',\n\t    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t    \t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\n\t    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\t\n\t    \t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t    \t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\t\n\t    \t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t    \t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\t\n\t    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\n\t    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\t\n\t    \t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\t\n\t    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\t\n\t    \t\t\t'uniform mat4 modelMatrix;',\n\t    \t\t\t'uniform mat4 modelViewMatrix;',\n\t    \t\t\t'uniform mat4 projectionMatrix;',\n\t    \t\t\t'uniform mat4 viewMatrix;',\n\t    \t\t\t'uniform mat3 normalMatrix;',\n\t    \t\t\t'uniform vec3 cameraPosition;',\n\t\n\t    \t\t\t'attribute vec3 position;',\n\t    \t\t\t'attribute vec3 normal;',\n\t    \t\t\t'attribute vec2 uv;',\n\t\n\t    \t\t\t'#ifdef USE_COLOR',\n\t\n\t    \t\t\t'\tattribute vec3 color;',\n\t\n\t    \t\t\t'#endif',\n\t\n\t    \t\t\t'#ifdef USE_MORPHTARGETS',\n\t\n\t    \t\t\t'\tattribute vec3 morphTarget0;',\n\t    \t\t\t'\tattribute vec3 morphTarget1;',\n\t    \t\t\t'\tattribute vec3 morphTarget2;',\n\t    \t\t\t'\tattribute vec3 morphTarget3;',\n\t\n\t    \t\t\t'\t#ifdef USE_MORPHNORMALS',\n\t\n\t    \t\t\t'\t\tattribute vec3 morphNormal0;',\n\t    \t\t\t'\t\tattribute vec3 morphNormal1;',\n\t    \t\t\t'\t\tattribute vec3 morphNormal2;',\n\t    \t\t\t'\t\tattribute vec3 morphNormal3;',\n\t\n\t    \t\t\t'\t#else',\n\t\n\t    \t\t\t'\t\tattribute vec3 morphTarget4;',\n\t    \t\t\t'\t\tattribute vec3 morphTarget5;',\n\t    \t\t\t'\t\tattribute vec3 morphTarget6;',\n\t    \t\t\t'\t\tattribute vec3 morphTarget7;',\n\t\n\t    \t\t\t'\t#endif',\n\t\n\t    \t\t\t'#endif',\n\t\n\t    \t\t\t'#ifdef USE_SKINNING',\n\t\n\t    \t\t\t'\tattribute vec4 skinIndex;',\n\t    \t\t\t'\tattribute vec4 skinWeight;',\n\t\n\t    \t\t\t'#endif',\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t\tprefixFragment = [\n\t\n\t    \t\t\tcustomExtensions,\n\t\n\t    \t\t\t'precision ' + parameters.precision + ' float;',\n\t    \t\t\t'precision ' + parameters.precision + ' int;',\n\t\n\t    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\t\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\t\n\t    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\t\n\t    \t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t    \t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\t\n\t    \t\t\tparameters.map ? '#define USE_MAP' : '',\n\t    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\n\t    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\t\n\t    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\t\n\t    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\n\t    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\t\n\t    \t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\t\n\t    \t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\t\n\t    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\t\n\t    \t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\t\n\t    \t\t\t'uniform mat4 viewMatrix;',\n\t    \t\t\t'uniform vec3 cameraPosition;',\n\t\n\t    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n\t    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\t\n\t    \t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t    \t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t    \t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t    \t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t    \t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\t\n\t    \t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t}\n\t\n\t    \tvertexShader = parseIncludes( vertexShader, parameters );\n\t    \tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\n\t    \tfragmentShader = parseIncludes( fragmentShader, parameters );\n\t    \tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\n\t    \tif ( ! material.isShaderMaterial ) {\n\t\n\t    \t\tvertexShader = unrollLoops( vertexShader );\n\t    \t\tfragmentShader = unrollLoops( fragmentShader );\n\t\n\t    \t}\n\t\n\t    \tvar vertexGlsl = prefixVertex + vertexShader;\n\t    \tvar fragmentGlsl = prefixFragment + fragmentShader;\n\t\n\t    \t// console.log( '*VERTEX*', vertexGlsl );\n\t    \t// console.log( '*FRAGMENT*', fragmentGlsl );\n\t\n\t    \tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t    \tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\t\n\t    \tgl.attachShader( program, glVertexShader );\n\t    \tgl.attachShader( program, glFragmentShader );\n\t\n\t    \t// Force a particular attribute to index 0.\n\t\n\t    \tif ( material.index0AttributeName !== undefined ) {\n\t\n\t    \t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\t\n\t    \t} else if ( parameters.morphTargets === true ) {\n\t\n\t    \t\t// programs with morphTargets displace position out of attribute 0\n\t    \t\tgl.bindAttribLocation( program, 0, 'position' );\n\t\n\t    \t}\n\t\n\t    \tgl.linkProgram( program );\n\t\n\t    \tvar programLog = gl.getProgramInfoLog( program );\n\t    \tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t    \tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\t\n\t    \tvar runnable = true;\n\t    \tvar haveDiagnostics = true;\n\t\n\t    \t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t    \t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\t\n\t    \tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\t\n\t    \t\trunnable = false;\n\t\n\t    \t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\t\n\t    \t} else if ( programLog !== '' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\t\n\t    \t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\t\n\t    \t\thaveDiagnostics = false;\n\t\n\t    \t}\n\t\n\t    \tif ( haveDiagnostics ) {\n\t\n\t    \t\tthis.diagnostics = {\n\t\n\t    \t\t\trunnable: runnable,\n\t    \t\t\tmaterial: material,\n\t\n\t    \t\t\tprogramLog: programLog,\n\t\n\t    \t\t\tvertexShader: {\n\t\n\t    \t\t\t\tlog: vertexLog,\n\t    \t\t\t\tprefix: prefixVertex\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfragmentShader: {\n\t\n\t    \t\t\t\tlog: fragmentLog,\n\t    \t\t\t\tprefix: prefixFragment\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \t// clean up\n\t\n\t    \tgl.deleteShader( glVertexShader );\n\t    \tgl.deleteShader( glFragmentShader );\n\t\n\t    \t// set up caching for uniform locations\n\t\n\t    \tvar cachedUniforms;\n\t\n\t    \tthis.getUniforms = function() {\n\t\n\t    \t\tif ( cachedUniforms === undefined ) {\n\t\n\t    \t\t\tcachedUniforms =\n\t    \t\t\t\t\tnew WebGLUniforms( gl, program, renderer );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn cachedUniforms;\n\t\n\t    \t};\n\t\n\t    \t// set up caching for attribute locations\n\t\n\t    \tvar cachedAttributes;\n\t\n\t    \tthis.getAttributes = function() {\n\t\n\t    \t\tif ( cachedAttributes === undefined ) {\n\t\n\t    \t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn cachedAttributes;\n\t\n\t    \t};\n\t\n\t    \t// free resource\n\t\n\t    \tthis.destroy = function() {\n\t\n\t    \t\tgl.deleteProgram( program );\n\t    \t\tthis.program = undefined;\n\t\n\t    \t};\n\t\n\t    \t// DEPRECATED\n\t\n\t    \tObject.defineProperties( this, {\n\t\n\t    \t\tuniforms: {\n\t    \t\t\tget: function() {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t    \t\t\t\treturn this.getUniforms();\n\t\n\t    \t\t\t}\n\t    \t\t},\n\t\n\t    \t\tattributes: {\n\t    \t\t\tget: function() {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t    \t\t\t\treturn this.getAttributes();\n\t\n\t    \t\t\t}\n\t    \t\t}\n\t\n\t    \t} );\n\t\n\t\n\t    \t//\n\t\n\t    \tthis.id = programIdCount ++;\n\t    \tthis.code = code;\n\t    \tthis.usedTimes = 1;\n\t    \tthis.program = program;\n\t    \tthis.vertexShader = glVertexShader;\n\t    \tthis.fragmentShader = glFragmentShader;\n\t\n\t    \treturn this;\n\t\n\t    }\n\t\n\t    function WebGLPrograms( renderer, capabilities ) {\n\t\n\t    \tvar programs = [];\n\t\n\t    \tvar shaderIDs = {\n\t    \t\tMeshDepthMaterial: 'depth',\n\t    \t\tMeshNormalMaterial: 'normal',\n\t    \t\tMeshBasicMaterial: 'basic',\n\t    \t\tMeshLambertMaterial: 'lambert',\n\t    \t\tMeshPhongMaterial: 'phong',\n\t    \t\tMeshStandardMaterial: 'physical',\n\t    \t\tMeshPhysicalMaterial: 'physical',\n\t    \t\tLineBasicMaterial: 'basic',\n\t    \t\tLineDashedMaterial: 'dashed',\n\t    \t\tPointsMaterial: 'points'\n\t    \t};\n\t\n\t    \tvar parameterNames = [\n\t    \t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t    \t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t    \t\t\"roughnessMap\", \"metalnessMap\",\n\t    \t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t    \t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t    \t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t    \t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t    \t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n\t    \t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t    \t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n\t    \t];\n\t\n\t\n\t    \tfunction allocateBones( object ) {\n\t\n\t    \t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\t\n\t    \t\t\treturn 1024;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// default for when object is not specified\n\t    \t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t    \t\t\t//\n\t    \t\t\t//  - leave some extra space for other uniforms\n\t    \t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t    \t\t\t//    (up to 54 should be safe)\n\t\n\t    \t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t    \t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\t\n\t    \t\t\tvar maxBones = nVertexMatrices;\n\t\n\t    \t\t\tif ( object !== undefined && (object && object.isSkinnedMesh) ) {\n\t\n\t    \t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\t\n\t    \t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn maxBones;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\t\n\t    \t\tvar encoding;\n\t\n\t    \t\tif ( ! map ) {\n\t\n\t    \t\t\tencoding = LinearEncoding;\n\t\n\t    \t\t} else if ( (map && map.isTexture) ) {\n\t\n\t    \t\t\tencoding = map.encoding;\n\t\n\t    \t\t} else if ( (map && map.isWebGLRenderTarget) ) {\n\t\n\t    \t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t    \t\t\tencoding = map.texture.encoding;\n\t\n\t    \t\t}\n\t\n\t    \t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t    \t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\t\n\t    \t\t\tencoding = GammaEncoding;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn encoding;\n\t\n\t    \t}\n\t\n\t    \tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\t\n\t    \t\tvar shaderID = shaderIDs[ material.type ];\n\t\n\t    \t\t// heuristics to create shader parameters according to lights in the scene\n\t    \t\t// (not to blow over maxLights budget)\n\t\n\t    \t\tvar maxBones = allocateBones( object );\n\t    \t\tvar precision = renderer.getPrecision();\n\t\n\t    \t\tif ( material.precision !== null ) {\n\t\n\t    \t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\t\n\t    \t\t\tif ( precision !== material.precision ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\t\n\t    \t\tvar parameters = {\n\t\n\t    \t\t\tshaderID: shaderID,\n\t\n\t    \t\t\tprecision: precision,\n\t    \t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t    \t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t    \t\t\tmap: !! material.map,\n\t    \t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t    \t\t\tenvMap: !! material.envMap,\n\t    \t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t    \t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t    \t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t    \t\t\tlightMap: !! material.lightMap,\n\t    \t\t\taoMap: !! material.aoMap,\n\t    \t\t\temissiveMap: !! material.emissiveMap,\n\t    \t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t    \t\t\tbumpMap: !! material.bumpMap,\n\t    \t\t\tnormalMap: !! material.normalMap,\n\t    \t\t\tdisplacementMap: !! material.displacementMap,\n\t    \t\t\troughnessMap: !! material.roughnessMap,\n\t    \t\t\tmetalnessMap: !! material.metalnessMap,\n\t    \t\t\tspecularMap: !! material.specularMap,\n\t    \t\t\talphaMap: !! material.alphaMap,\n\t\n\t    \t\t\tcombine: material.combine,\n\t\n\t    \t\t\tvertexColors: material.vertexColors,\n\t\n\t    \t\t\tfog: !! fog,\n\t    \t\t\tuseFog: material.fog,\n\t    \t\t\tfogExp: (fog && fog.isFogExp2),\n\t\n\t    \t\t\tflatShading: material.shading === FlatShading,\n\t\n\t    \t\t\tsizeAttenuation: material.sizeAttenuation,\n\t    \t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\t\n\t    \t\t\tskinning: material.skinning,\n\t    \t\t\tmaxBones: maxBones,\n\t    \t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\t\n\t    \t\t\tmorphTargets: material.morphTargets,\n\t    \t\t\tmorphNormals: material.morphNormals,\n\t    \t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t    \t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\t\n\t    \t\t\tnumDirLights: lights.directional.length,\n\t    \t\t\tnumPointLights: lights.point.length,\n\t    \t\t\tnumSpotLights: lights.spot.length,\n\t    \t\t\tnumHemiLights: lights.hemi.length,\n\t\n\t    \t\t\tnumClippingPlanes: nClipPlanes,\n\t\n\t    \t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n\t    \t\t\tshadowMapType: renderer.shadowMap.type,\n\t\n\t    \t\t\ttoneMapping: renderer.toneMapping,\n\t    \t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\n\t    \t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\n\t    \t\t\talphaTest: material.alphaTest,\n\t    \t\t\tdoubleSided: material.side === DoubleSide,\n\t    \t\t\tflipSided: material.side === BackSide,\n\t\n\t    \t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\t\n\t    \t\t};\n\t\n\t    \t\treturn parameters;\n\t\n\t    \t};\n\t\n\t    \tthis.getProgramCode = function ( material, parameters ) {\n\t\n\t    \t\tvar array = [];\n\t\n\t    \t\tif ( parameters.shaderID ) {\n\t\n\t    \t\t\tarray.push( parameters.shaderID );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tarray.push( material.fragmentShader );\n\t    \t\t\tarray.push( material.vertexShader );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.defines !== undefined ) {\n\t\n\t    \t\t\tfor ( var name in material.defines ) {\n\t\n\t    \t\t\t\tarray.push( name );\n\t    \t\t\t\tarray.push( material.defines[ name ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\t\n\t    \t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn array.join();\n\t\n\t    \t};\n\t\n\t    \tthis.acquireProgram = function ( material, parameters, code ) {\n\t\n\t    \t\tvar program;\n\t\n\t    \t\t// Check if code has been already compiled\n\t    \t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\t\n\t    \t\t\tvar programInfo = programs[ p ];\n\t\n\t    \t\t\tif ( programInfo.code === code ) {\n\t\n\t    \t\t\t\tprogram = programInfo;\n\t    \t\t\t\t++ program.usedTimes;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\tprogram = new WebGLProgram( renderer, code, material, parameters );\n\t    \t\t\tprograms.push( program );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn program;\n\t\n\t    \t};\n\t\n\t    \tthis.releaseProgram = function( program ) {\n\t\n\t    \t\tif ( -- program.usedTimes === 0 ) {\n\t\n\t    \t\t\t// Remove from unordered set\n\t    \t\t\tvar i = programs.indexOf( program );\n\t    \t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t    \t\t\tprograms.pop();\n\t\n\t    \t\t\t// Free WebGL resources\n\t    \t\t\tprogram.destroy();\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \t// Exposed for resource monitoring & error feedback via renderer.info:\n\t    \tthis.programs = programs;\n\t\n\t    }\n\t\n\t    function WebGLGeometries( gl, properties, info ) {\n\t\n\t    \tvar geometries = {};\n\t\n\t    \tfunction onGeometryDispose( event ) {\n\t\n\t    \t\tvar geometry = event.target;\n\t    \t\tvar buffergeometry = geometries[ geometry.id ];\n\t\n\t    \t\tif ( buffergeometry.index !== null ) {\n\t\n\t    \t\t\tdeleteAttribute( buffergeometry.index );\n\t\n\t    \t\t}\n\t\n\t    \t\tdeleteAttributes( buffergeometry.attributes );\n\t\n\t    \t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\t\n\t    \t\tdelete geometries[ geometry.id ];\n\t\n\t    \t\t// TODO\n\t\n\t    \t\tvar property = properties.get( geometry );\n\t\n\t    \t\tif ( property.wireframe ) {\n\t\n\t    \t\t\tdeleteAttribute( property.wireframe );\n\t\n\t    \t\t}\n\t\n\t    \t\tproperties.delete( geometry );\n\t\n\t    \t\tvar bufferproperty = properties.get( buffergeometry );\n\t\n\t    \t\tif ( bufferproperty.wireframe ) {\n\t\n\t    \t\t\tdeleteAttribute( bufferproperty.wireframe );\n\t\n\t    \t\t}\n\t\n\t    \t\tproperties.delete( buffergeometry );\n\t\n\t    \t\t//\n\t\n\t    \t\tinfo.memory.geometries --;\n\t\n\t    \t}\n\t\n\t    \tfunction getAttributeBuffer( attribute ) {\n\t\n\t    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn properties.get( attribute ).__webglBuffer;\n\t\n\t    \t}\n\t\n\t    \tfunction deleteAttribute( attribute ) {\n\t\n\t    \t\tvar buffer = getAttributeBuffer( attribute );\n\t\n\t    \t\tif ( buffer !== undefined ) {\n\t\n\t    \t\t\tgl.deleteBuffer( buffer );\n\t    \t\t\tremoveAttributeBuffer( attribute );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction deleteAttributes( attributes ) {\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tdeleteAttribute( attributes[ name ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction removeAttributeBuffer( attribute ) {\n\t\n\t    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\tproperties.delete( attribute.data );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tproperties.delete( attribute );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( object ) {\n\t\n\t    \t\t\tvar geometry = object.geometry;\n\t\n\t    \t\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\t\n\t    \t\t\t\treturn geometries[ geometry.id ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\t\n\t    \t\t\tvar buffergeometry;\n\t\n\t    \t\t\tif ( geometry.isBufferGeometry ) {\n\t\n\t    \t\t\t\tbuffergeometry = geometry;\n\t\n\t    \t\t\t} else if ( geometry.isGeometry ) {\n\t\n\t    \t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\t\n\t    \t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometries[ geometry.id ] = buffergeometry;\n\t\n\t    \t\t\tinfo.memory.geometries ++;\n\t\n\t    \t\t\treturn buffergeometry;\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLObjects( gl, properties, info ) {\n\t\n\t    \tvar geometries = new WebGLGeometries( gl, properties, info );\n\t\n\t    \t//\n\t\n\t    \tfunction update( object ) {\n\t\n\t    \t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\t\n\t    \t\tvar geometry = geometries.get( object );\n\t\n\t    \t\tif ( object.geometry.isGeometry ) {\n\t\n\t    \t\t\tgeometry.updateFromObject( object );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar index = geometry.index;\n\t    \t\tvar attributes = geometry.attributes;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\t\n\t    \t\t}\n\t\n\t    \t\t// morph targets\n\t\n\t    \t\tvar morphAttributes = geometry.morphAttributes;\n\t\n\t    \t\tfor ( var name in morphAttributes ) {\n\t\n\t    \t\t\tvar array = morphAttributes[ name ];\n\t\n\t    \t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry;\n\t\n\t    \t}\n\t\n\t    \tfunction updateAttribute( attribute, bufferType ) {\n\t\n\t    \t\tvar data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;\n\t\n\t    \t\tvar attributeProperties = properties.get( data );\n\t\n\t    \t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\t\n\t    \t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\t\n\t    \t\t} else if ( attributeProperties.version !== data.version ) {\n\t\n\t    \t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction createBuffer( attributeProperties, data, bufferType ) {\n\t\n\t    \t\tattributeProperties.__webglBuffer = gl.createBuffer();\n\t    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\t\n\t    \t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\t\n\t    \t\tgl.bufferData( bufferType, data.array, usage );\n\t\n\t    \t\tattributeProperties.version = data.version;\n\t\n\t    \t}\n\t\n\t    \tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\t\n\t    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\t\n\t    \t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\t\n\t    \t\t\t// Not using update ranges\n\t\n\t    \t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\t\n\t    \t\t} else if ( data.updateRange.count === 0 ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n\t    \t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\t\n\t    \t\t\tdata.updateRange.count = 0; // reset range\n\t\n\t    \t\t}\n\t\n\t    \t\tattributeProperties.version = data.version;\n\t\n\t    \t}\n\t\n\t    \tfunction getAttributeBuffer( attribute ) {\n\t\n\t    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn properties.get( attribute ).__webglBuffer;\n\t\n\t    \t}\n\t\n\t    \tfunction getWireframeAttribute( geometry ) {\n\t\n\t    \t\tvar property = properties.get( geometry );\n\t\n\t    \t\tif ( property.wireframe !== undefined ) {\n\t\n\t    \t\t\treturn property.wireframe;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar indices = [];\n\t\n\t    \t\tvar index = geometry.index;\n\t    \t\tvar attributes = geometry.attributes;\n\t    \t\tvar position = attributes.position;\n\t\n\t    \t\t// console.time( 'wireframe' );\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tvar edges = {};\n\t    \t\t\tvar array = index.array;\n\t\n\t    \t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\t\n\t    \t\t\t\tvar a = array[ i + 0 ];\n\t    \t\t\t\tvar b = array[ i + 1 ];\n\t    \t\t\t\tvar c = array[ i + 2 ];\n\t\n\t    \t\t\t\tindices.push( a, b, b, c, c, a );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar array = attributes.position.array;\n\t\n\t    \t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\t\n\t    \t\t\t\tvar a = i + 0;\n\t    \t\t\t\tvar b = i + 1;\n\t    \t\t\t\tvar c = i + 2;\n\t\n\t    \t\t\t\tindices.push( a, b, b, c, c, a );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// console.timeEnd( 'wireframe' );\n\t\n\t    \t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n\t    \t\tvar attribute = new BufferAttribute( new TypeArray( indices ), 1 );\n\t\n\t    \t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\t\n\t    \t\tproperty.wireframe = attribute;\n\t\n\t    \t\treturn attribute;\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tgetAttributeBuffer: getAttributeBuffer,\n\t    \t\tgetWireframeAttribute: getWireframeAttribute,\n\t\n\t    \t\tupdate: update\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\t\n\t    \tvar _infoMemory = info.memory;\n\t    \tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\t\n\t    \t//\n\t\n\t    \tfunction clampToMaxSize( image, maxSize ) {\n\t\n\t    \t\tif ( image.width > maxSize || image.height > maxSize ) {\n\t\n\t    \t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t    \t\t\t// premultiplied alpha.\n\t\n\t    \t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\t\n\t    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\t\tcanvas.width = Math.floor( image.width * scale );\n\t    \t\t\tcanvas.height = Math.floor( image.height * scale );\n\t\n\t    \t\t\tvar context = canvas.getContext( '2d' );\n\t    \t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\t\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\t\n\t    \t\t\treturn canvas;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn image;\n\t\n\t    \t}\n\t\n\t    \tfunction isPowerOfTwo( image ) {\n\t\n\t    \t\treturn exports.Math.isPowerOfTwo( image.width ) && exports.Math.isPowerOfTwo( image.height );\n\t\n\t    \t}\n\t\n\t    \tfunction makePowerOfTwo( image ) {\n\t\n\t    \t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\t\n\t    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\t\tcanvas.width = exports.Math.nearestPowerOfTwo( image.width );\n\t    \t\t\tcanvas.height = exports.Math.nearestPowerOfTwo( image.height );\n\t\n\t    \t\t\tvar context = canvas.getContext( '2d' );\n\t    \t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\t\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\t\n\t    \t\t\treturn canvas;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn image;\n\t\n\t    \t}\n\t\n\t    \tfunction textureNeedsPowerOfTwo( texture ) {\n\t\n\t    \t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;\n\t    \t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;\n\t\n\t    \t\treturn false;\n\t\n\t    \t}\n\t\n\t    \t// Fallback filters for non-power-of-2 textures\n\t\n\t    \tfunction filterFallback( f ) {\n\t\n\t    \t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\t\n\t    \t\t\treturn _gl.NEAREST;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn _gl.LINEAR;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction onTextureDispose( event ) {\n\t\n\t    \t\tvar texture = event.target;\n\t\n\t    \t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\t\n\t    \t\tdeallocateTexture( texture );\n\t\n\t    \t\t_infoMemory.textures --;\n\t\n\t\n\t    \t}\n\t\n\t    \tfunction onRenderTargetDispose( event ) {\n\t\n\t    \t\tvar renderTarget = event.target;\n\t\n\t    \t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\t\n\t    \t\tdeallocateRenderTarget( renderTarget );\n\t\n\t    \t\t_infoMemory.textures --;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction deallocateTexture( texture ) {\n\t\n\t    \t\tvar textureProperties = properties.get( texture );\n\t\n\t    \t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\t\n\t    \t\t\t// cube texture\n\t\n\t    \t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// 2D texture\n\t\n\t    \t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\t\n\t    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\t\n\t    \t\t}\n\t\n\t    \t\t// remove all webgl properties\n\t    \t\tproperties.delete( texture );\n\t\n\t    \t}\n\t\n\t    \tfunction deallocateRenderTarget( renderTarget ) {\n\t\n\t    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\t    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\n\t    \t\tif ( ! renderTarget ) return;\n\t\n\t    \t\tif ( textureProperties.__webglTexture !== undefined ) {\n\t\n\t    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( renderTarget.depthTexture ) {\n\t\n\t    \t\t\trenderTarget.depthTexture.dispose();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t    \t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t    \t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\n\t    \t\t}\n\t\n\t    \t\tproperties.delete( renderTarget.texture );\n\t    \t\tproperties.delete( renderTarget );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t\n\t\n\t    \tfunction setTexture2D( texture, slot ) {\n\t\n\t    \t\tvar textureProperties = properties.get( texture );\n\t\n\t    \t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\t\n\t    \t\t\tvar image = texture.image;\n\t\n\t    \t\t\tif ( image === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\t\n\t    \t\t\t} else if ( image.complete === false ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t    \t\t\t\treturn;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\n\t    \t}\n\t\n\t    \tfunction setTextureCube( texture, slot ) {\n\t\n\t    \t\tvar textureProperties = properties.get( texture );\n\t\n\t    \t\tif ( texture.image.length === 6 ) {\n\t\n\t    \t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\t\n\t    \t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\t\n\t    \t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\t\n\t    \t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\t\n\t    \t\t\t\t\t_infoMemory.textures ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\t\n\t    \t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\n\t    \t\t\t\tvar isCompressed = (texture && texture.isCompressedTexture);\n\t    \t\t\t\tvar isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);\n\t\n\t    \t\t\t\tvar cubeImage = [];\n\t\n\t    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\t\n\t    \t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar image = cubeImage[ 0 ],\n\t    \t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t    \t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t    \t\t\t\tglType = paramThreeToGL( texture.type );\n\t\n\t    \t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\t\n\t    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( ! isCompressed ) {\n\t\n\t    \t\t\t\t\t\tif ( isDataTexture ) {\n\t\n\t    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\t\n\t    \t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\t\n\t    \t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\t\n\t    \t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\t\n\t    \t\t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\t\n\t    \t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttextureProperties.__version = texture.version;\n\t\n\t    \t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction setTextureCubeDynamic( texture, slot ) {\n\t\n\t    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\t\n\t    \t}\n\t\n\t    \tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\t\n\t    \t\tvar extension;\n\t\n\t    \t\tif ( isPowerOfTwoImage ) {\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\t\n\t    \t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\t\n\t    \t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\n\t    \t\tif ( extension ) {\n\t\n\t    \t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t    \t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\t\n\t    \t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\t\n\t    \t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t    \t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction uploadTexture( textureProperties, texture, slot ) {\n\t\n\t    \t\tif ( textureProperties.__webglInit === undefined ) {\n\t\n\t    \t\t\ttextureProperties.__webglInit = true;\n\t\n\t    \t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\t\n\t    \t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\n\t    \t\t\t_infoMemory.textures ++;\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\n\t    \t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t    \t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t    \t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\n\t    \t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\t\n\t    \t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\t\n\t    \t\t\timage = makePowerOfTwo( image );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t    \t\tglFormat = paramThreeToGL( texture.format ),\n\t    \t\tglType = paramThreeToGL( texture.type );\n\t\n\t    \t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\t\n\t    \t\tvar mipmap, mipmaps = texture.mipmaps;\n\t\n\t    \t\tif ( (texture && texture.isDepthTexture) ) {\n\t\n\t    \t\t\t// populate depth texture with dummy data\n\t\n\t    \t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\t\n\t    \t\t\tif ( texture.type === FloatType ) {\n\t\n\t    \t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n\t    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\n\t    \t\t\t} else if ( _isWebGL2 ) {\n\t\n\t    \t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t    \t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t    \t\t\tif ( texture.format === DepthStencilFormat ) {\n\t\n\t    \t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\t\n\t    \t\t} else if ( (texture && texture.isDataTexture) ) {\n\t\n\t    \t\t\t// use manually created mipmaps if available\n\t    \t\t\t// if there are no manual mipmaps\n\t    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\n\t    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\tmipmap = mipmaps[ i ];\n\t    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture.generateMipmaps = false;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (texture && texture.isCompressedTexture) ) {\n\t\n\t    \t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tmipmap = mipmaps[ i ];\n\t\n\t    \t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\t\n\t    \t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\t\n\t    \t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// regular Texture (image, video, canvas)\n\t\n\t    \t\t\t// use manually created mipmaps if available\n\t    \t\t\t// if there are no manual mipmaps\n\t    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\n\t    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\tmipmap = mipmaps[ i ];\n\t    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture.generateMipmaps = false;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\n\t    \t\ttextureProperties.__version = texture.version;\n\t\n\t    \t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t    \t}\n\t\n\t    \t// Render targets\n\t\n\t    \t// Setup storage for target texture and bind it to correct framebuffer\n\t    \tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\t\n\t    \t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n\t    \t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n\t    \t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t    \t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\n\t    \t}\n\t\n\t    \t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t    \tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\t\n\t    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\t\n\t    \t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\t\n\t    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\t\n\t    \t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\t\n\t    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// FIXME: We don't support !depth !stencil\n\t    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\t\n\t    \t\t}\n\t\n\t    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\t\n\t    \t}\n\t\n\t    \t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t    \tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\t\n\t    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t    \t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\t\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\n\t    \t\tif ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {\n\t\n\t    \t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\n\t    \t\t}\n\t\n\t    \t\t// upload an empty depth texture with framebuffer size\n\t    \t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t    \t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t    \t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\t    \t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t    \t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t    \t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t    \t\t}\n\t\n\t    \t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\t\n\t    \t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\n\t    \t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\t\n\t    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\t\n\t    \t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\t\n\t    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthrow new Error('Unknown depthTexture format')\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Setup GL resources for a non-texture depth buffer\n\t    \tfunction setupDepthRenderbuffer( renderTarget ) {\n\t\n\t    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\n\t    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t\n\t    \t\tif ( renderTarget.depthTexture ) {\n\t\n\t    \t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\n\t    \t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tif ( isCube ) {\n\t\n\t    \t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\t\n\t    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t    \t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t    \t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t    \t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t    \t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\n\t    \t}\n\t\n\t    \t// Set up GL resources for the render target\n\t    \tfunction setupRenderTarget( renderTarget ) {\n\t\n\t    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\t    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\n\t    \t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\t\n\t    \t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\n\t    \t\t_infoMemory.textures ++;\n\t\n\t    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t    \t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\t\n\t    \t\t// Setup framebuffer\n\t\n\t    \t\tif ( isCube ) {\n\t\n\t    \t\t\trenderTargetProperties.__webglFramebuffer = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\t\n\t    \t\t}\n\t\n\t    \t\t// Setup color buffer\n\t\n\t    \t\tif ( isCube ) {\n\t\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t    \t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\t\n\t    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t    \t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t    \t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\t\n\t    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\t\n\t    \t\t}\n\t\n\t    \t\t// Setup depth and stencil buffers\n\t\n\t    \t\tif ( renderTarget.depthBuffer ) {\n\t\n\t    \t\t\tsetupDepthRenderbuffer( renderTarget );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction updateRenderTargetMipmap( renderTarget ) {\n\t\n\t    \t\tvar texture = renderTarget.texture;\n\t\n\t    \t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n\t    \t\t\t\ttexture.minFilter !== NearestFilter &&\n\t    \t\t\t\ttexture.minFilter !== LinearFilter ) {\n\t\n\t    \t\t\tvar target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t    \t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\t\n\t    \t\t\tstate.bindTexture( target, webglTexture );\n\t    \t\t\t_gl.generateMipmap( target );\n\t    \t\t\tstate.bindTexture( target, null );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.setTexture2D = setTexture2D;\n\t    \tthis.setTextureCube = setTextureCube;\n\t    \tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t    \tthis.setupRenderTarget = setupRenderTarget;\n\t    \tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\n\t    }\n\t\n\t    /**\n\t     * @author fordacious / fordacious.github.io\n\t     */\n\t\n\t    function WebGLProperties() {\n\t\n\t    \tvar properties = {};\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( object ) {\n\t\n\t    \t\t\tvar uuid = object.uuid;\n\t    \t\t\tvar map = properties[ uuid ];\n\t\n\t    \t\t\tif ( map === undefined ) {\n\t\n\t    \t\t\t\tmap = {};\n\t    \t\t\t\tproperties[ uuid ] = map;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn map;\n\t\n\t    \t\t},\n\t\n\t    \t\tdelete: function ( object ) {\n\t\n\t    \t\t\tdelete properties[ object.uuid ];\n\t\n\t    \t\t},\n\t\n\t    \t\tclear: function () {\n\t\n\t    \t\t\tproperties = {};\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLState( gl, extensions, paramThreeToGL ) {\n\t\n\t    \tfunction ColorBuffer() {\n\t\n\t    \t\tvar locked = false;\n\t\n\t    \t\tvar color = new Vector4();\n\t    \t\tvar currentColorMask = null;\n\t    \t\tvar currentColorClear = new Vector4();\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tsetMask: function ( colorMask ) {\n\t\n\t    \t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\t\n\t    \t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t    \t\t\t\t\tcurrentColorMask = colorMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetLocked: function ( lock ) {\n\t\n\t    \t\t\t\tlocked = lock;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetClear: function ( r, g, b, a ) {\n\t\n\t    \t\t\t\tcolor.set( r, g, b, a );\n\t\n\t    \t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\t\n\t    \t\t\t\t\tgl.clearColor( r, g, b, a );\n\t    \t\t\t\t\tcurrentColorClear.copy( color );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\treset: function () {\n\t\n\t    \t\t\t\tlocked = false;\n\t\n\t    \t\t\t\tcurrentColorMask = null;\n\t    \t\t\t\tcurrentColorClear.set( 0, 0, 0, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \tfunction DepthBuffer() {\n\t\n\t    \t\tvar locked = false;\n\t\n\t    \t\tvar currentDepthMask = null;\n\t    \t\tvar currentDepthFunc = null;\n\t    \t\tvar currentDepthClear = null;\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tsetTest: function ( depthTest ) {\n\t\n\t    \t\t\t\tif ( depthTest ) {\n\t\n\t    \t\t\t\t\tenable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tdisable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetMask: function ( depthMask ) {\n\t\n\t    \t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\t\n\t    \t\t\t\t\tgl.depthMask( depthMask );\n\t    \t\t\t\t\tcurrentDepthMask = depthMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetFunc: function ( depthFunc ) {\n\t\n\t    \t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\t\n\t    \t\t\t\t\tif ( depthFunc ) {\n\t\n\t    \t\t\t\t\t\tswitch ( depthFunc ) {\n\t\n\t    \t\t\t\t\t\t\tcase NeverDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase AlwaysDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase LessDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase LessEqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase EqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase GreaterDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase NotEqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tdefault:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetLocked: function ( lock ) {\n\t\n\t    \t\t\t\tlocked = lock;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetClear: function ( depth ) {\n\t\n\t    \t\t\t\tif ( currentDepthClear !== depth ) {\n\t\n\t    \t\t\t\t\tgl.clearDepth( depth );\n\t    \t\t\t\t\tcurrentDepthClear = depth;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\treset: function () {\n\t\n\t    \t\t\t\tlocked = false;\n\t\n\t    \t\t\t\tcurrentDepthMask = null;\n\t    \t\t\t\tcurrentDepthFunc = null;\n\t    \t\t\t\tcurrentDepthClear = null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \tfunction StencilBuffer() {\n\t\n\t    \t\tvar locked = false;\n\t\n\t    \t\tvar currentStencilMask = null;\n\t    \t\tvar currentStencilFunc = null;\n\t    \t\tvar currentStencilRef = null;\n\t    \t\tvar currentStencilFuncMask = null;\n\t    \t\tvar currentStencilFail  = null;\n\t    \t\tvar currentStencilZFail = null;\n\t    \t\tvar currentStencilZPass = null;\n\t    \t\tvar currentStencilClear = null;\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tsetTest: function ( stencilTest ) {\n\t\n\t    \t\t\t\tif ( stencilTest ) {\n\t\n\t    \t\t\t\t\tenable( gl.STENCIL_TEST );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tdisable( gl.STENCIL_TEST );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetMask: function ( stencilMask ) {\n\t\n\t    \t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\t\n\t    \t\t\t\t\tgl.stencilMask( stencilMask );\n\t    \t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\t\n\t    \t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t    \t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t    \t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\t\n\t    \t\t\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\t\n\t    \t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t    \t\t\t\t\tcurrentStencilRef  = stencilRef;\n\t    \t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\t\n\t    \t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t    \t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t    \t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\t\n\t    \t\t\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\t\n\t    \t\t\t\t\tcurrentStencilFail  = stencilFail;\n\t    \t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t    \t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetLocked: function ( lock ) {\n\t\n\t    \t\t\t\tlocked = lock;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetClear: function ( stencil ) {\n\t\n\t    \t\t\t\tif ( currentStencilClear !== stencil ) {\n\t\n\t    \t\t\t\t\tgl.clearStencil( stencil );\n\t    \t\t\t\t\tcurrentStencilClear = stencil;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\treset: function () {\n\t\n\t    \t\t\t\tlocked = false;\n\t\n\t    \t\t\t\tcurrentStencilMask = null;\n\t    \t\t\t\tcurrentStencilFunc = null;\n\t    \t\t\t\tcurrentStencilRef = null;\n\t    \t\t\t\tcurrentStencilFuncMask = null;\n\t    \t\t\t\tcurrentStencilFail = null;\n\t    \t\t\t\tcurrentStencilZFail = null;\n\t    \t\t\t\tcurrentStencilZPass = null;\n\t    \t\t\t\tcurrentStencilClear = null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar colorBuffer = new ColorBuffer();\n\t    \tvar depthBuffer = new DepthBuffer();\n\t    \tvar stencilBuffer = new StencilBuffer();\n\t\n\t    \tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t    \tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t    \tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t    \tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\t\n\t    \tvar capabilities = {};\n\t\n\t    \tvar compressedTextureFormats = null;\n\t\n\t    \tvar currentBlending = null;\n\t    \tvar currentBlendEquation = null;\n\t    \tvar currentBlendSrc = null;\n\t    \tvar currentBlendDst = null;\n\t    \tvar currentBlendEquationAlpha = null;\n\t    \tvar currentBlendSrcAlpha = null;\n\t    \tvar currentBlendDstAlpha = null;\n\t    \tvar currentPremultipledAlpha = false;\n\t\n\t    \tvar currentFlipSided = null;\n\t    \tvar currentCullFace = null;\n\t\n\t    \tvar currentLineWidth = null;\n\t\n\t    \tvar currentPolygonOffsetFactor = null;\n\t    \tvar currentPolygonOffsetUnits = null;\n\t\n\t    \tvar currentScissorTest = null;\n\t\n\t    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\n\t    \tvar currentTextureSlot = null;\n\t    \tvar currentBoundTextures = {};\n\t\n\t    \tvar currentScissor = new Vector4();\n\t    \tvar currentViewport = new Vector4();\n\t\n\t    \tfunction createTexture( type, target, count ) {\n\t\n\t    \t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t    \t\tvar texture = gl.createTexture();\n\t\n\t    \t\tgl.bindTexture( type, texture );\n\t    \t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t    \t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\n\t    \t\tfor ( var i = 0; i < count; i ++ ) {\n\t\n\t    \t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn texture;\n\t\n\t    \t}\n\t\n\t    \tvar emptyTextures = {};\n\t    \temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\t    \temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\t\n\t    \t//\n\t\n\t    \tfunction init() {\n\t\n\t    \t\tclearColor( 0, 0, 0, 1 );\n\t    \t\tclearDepth( 1 );\n\t    \t\tclearStencil( 0 );\n\t\n\t    \t\tenable( gl.DEPTH_TEST );\n\t    \t\tsetDepthFunc( LessEqualDepth );\n\t\n\t    \t\tsetFlipSided( false );\n\t    \t\tsetCullFace( CullFaceBack );\n\t    \t\tenable( gl.CULL_FACE );\n\t\n\t    \t\tenable( gl.BLEND );\n\t    \t\tsetBlending( NormalBlending );\n\t\n\t    \t}\n\t\n\t    \tfunction initAttributes() {\n\t\n\t    \t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\t\n\t    \t\t\tnewAttributes[ i ] = 0;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction enableAttribute( attribute ) {\n\t\n\t    \t\tnewAttributes[ attribute ] = 1;\n\t\n\t    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\t\n\t    \t\t\tgl.enableVertexAttribArray( attribute );\n\t    \t\t\tenabledAttributes[ attribute ] = 1;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\t\n\t    \t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t    \t\t\tattributeDivisors[ attribute ] = 0;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {\n\t\n\t    \t\tnewAttributes[ attribute ] = 1;\n\t\n\t    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\t\n\t    \t\t\tgl.enableVertexAttribArray( attribute );\n\t    \t\t\tenabledAttributes[ attribute ] = 1;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\t\n\t    \t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t    \t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction disableUnusedAttributes() {\n\t\n\t    \t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\t\n\t    \t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\t\n\t    \t\t\t\tgl.disableVertexAttribArray( i );\n\t    \t\t\t\tenabledAttributes[ i ] = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction enable( id ) {\n\t\n\t    \t\tif ( capabilities[ id ] !== true ) {\n\t\n\t    \t\t\tgl.enable( id );\n\t    \t\t\tcapabilities[ id ] = true;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction disable( id ) {\n\t\n\t    \t\tif ( capabilities[ id ] !== false ) {\n\t\n\t    \t\t\tgl.disable( id );\n\t    \t\t\tcapabilities[ id ] = false;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction getCompressedTextureFormats() {\n\t\n\t    \t\tif ( compressedTextureFormats === null ) {\n\t\n\t    \t\t\tcompressedTextureFormats = [];\n\t\n\t    \t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t    \t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t    \t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\t\n\t    \t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\t\n\t    \t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\t\n\t    \t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn compressedTextureFormats;\n\t\n\t    \t}\n\t\n\t    \tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\t\n\t    \t\tif ( blending !== NoBlending ) {\n\t\n\t    \t\t\tenable( gl.BLEND );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.BLEND );\n\t    \t\t\tcurrentBlending = blending; // no blending, that is\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\t\n\t    \t\t\tif ( blending === AdditiveBlending ) {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( blending === SubtractiveBlending ) {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( blending === MultiplyBlending ) {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcurrentBlending = blending;\n\t    \t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( blending === CustomBlending ) {\n\t\n\t    \t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t    \t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t    \t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\t\n\t    \t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\t\n\t    \t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\t\n\t    \t\t\t\tcurrentBlendEquation = blendEquation;\n\t    \t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\t\n\t    \t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\t\n\t    \t\t\t\tcurrentBlendSrc = blendSrc;\n\t    \t\t\t\tcurrentBlendDst = blendDst;\n\t    \t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t    \t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tcurrentBlendEquation = null;\n\t    \t\t\tcurrentBlendSrc = null;\n\t    \t\t\tcurrentBlendDst = null;\n\t    \t\t\tcurrentBlendEquationAlpha = null;\n\t    \t\t\tcurrentBlendSrcAlpha = null;\n\t    \t\t\tcurrentBlendDstAlpha = null;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// TODO Deprecate\n\t\n\t    \tfunction setColorWrite( colorWrite ) {\n\t\n\t    \t\tcolorBuffer.setMask( colorWrite );\n\t\n\t    \t}\n\t\n\t    \tfunction setDepthTest( depthTest ) {\n\t\n\t    \t\tdepthBuffer.setTest( depthTest );\n\t\n\t    \t}\n\t\n\t    \tfunction setDepthWrite( depthWrite ) {\n\t\n\t    \t\tdepthBuffer.setMask( depthWrite );\n\t\n\t    \t}\n\t\n\t    \tfunction setDepthFunc( depthFunc ) {\n\t\n\t    \t\tdepthBuffer.setFunc( depthFunc );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilTest( stencilTest ) {\n\t\n\t    \t\tstencilBuffer.setTest( stencilTest );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilWrite( stencilWrite ) {\n\t\n\t    \t\tstencilBuffer.setMask( stencilWrite );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilFunc( stencilFunc, stencilRef, stencilMask ) {\n\t\n\t    \t\tstencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilOp( stencilFail, stencilZFail, stencilZPass ) {\n\t\n\t    \t\tstencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction setFlipSided( flipSided ) {\n\t\n\t    \t\tif ( currentFlipSided !== flipSided ) {\n\t\n\t    \t\t\tif ( flipSided ) {\n\t\n\t    \t\t\t\tgl.frontFace( gl.CW );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tgl.frontFace( gl.CCW );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcurrentFlipSided = flipSided;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction setCullFace( cullFace ) {\n\t\n\t    \t\tif ( cullFace !== CullFaceNone ) {\n\t\n\t    \t\t\tenable( gl.CULL_FACE );\n\t\n\t    \t\t\tif ( cullFace !== currentCullFace ) {\n\t\n\t    \t\t\t\tif ( cullFace === CullFaceBack ) {\n\t\n\t    \t\t\t\t\tgl.cullFace( gl.BACK );\n\t\n\t    \t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\t\n\t    \t\t\t\t\tgl.cullFace( gl.FRONT );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.CULL_FACE );\n\t\n\t    \t\t}\n\t\n\t    \t\tcurrentCullFace = cullFace;\n\t\n\t    \t}\n\t\n\t    \tfunction setLineWidth( width ) {\n\t\n\t    \t\tif ( width !== currentLineWidth ) {\n\t\n\t    \t\t\tgl.lineWidth( width );\n\t\n\t    \t\t\tcurrentLineWidth = width;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\t\n\t    \t\tif ( polygonOffset ) {\n\t\n\t    \t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\t\n\t    \t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\t\n\t    \t\t\t\tgl.polygonOffset( factor, units );\n\t\n\t    \t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t    \t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction getScissorTest() {\n\t\n\t    \t\treturn currentScissorTest;\n\t\n\t    \t}\n\t\n\t    \tfunction setScissorTest( scissorTest ) {\n\t\n\t    \t\tcurrentScissorTest = scissorTest;\n\t\n\t    \t\tif ( scissorTest ) {\n\t\n\t    \t\t\tenable( gl.SCISSOR_TEST );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.SCISSOR_TEST );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// texture\n\t\n\t    \tfunction activeTexture( webglSlot ) {\n\t\n\t    \t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\t\n\t    \t\tif ( currentTextureSlot !== webglSlot ) {\n\t\n\t    \t\t\tgl.activeTexture( webglSlot );\n\t    \t\t\tcurrentTextureSlot = webglSlot;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction bindTexture( webglType, webglTexture ) {\n\t\n\t    \t\tif ( currentTextureSlot === null ) {\n\t\n\t    \t\t\tactiveTexture();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\t\n\t    \t\tif ( boundTexture === undefined ) {\n\t\n\t    \t\t\tboundTexture = { type: undefined, texture: undefined };\n\t    \t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\t\n\t    \t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\t\n\t    \t\t\tboundTexture.type = webglType;\n\t    \t\t\tboundTexture.texture = webglTexture;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction compressedTexImage2D() {\n\t\n\t    \t\ttry {\n\t\n\t    \t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\t\n\t    \t\t} catch ( error ) {\n\t\n\t    \t\t\tconsole.error( error );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction texImage2D() {\n\t\n\t    \t\ttry {\n\t\n\t    \t\t\tgl.texImage2D.apply( gl, arguments );\n\t\n\t    \t\t} catch ( error ) {\n\t\n\t    \t\t\tconsole.error( error );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// TODO Deprecate\n\t\n\t    \tfunction clearColor( r, g, b, a ) {\n\t\n\t    \t\tcolorBuffer.setClear( r, g, b, a );\n\t\n\t    \t}\n\t\n\t    \tfunction clearDepth( depth ) {\n\t\n\t    \t\tdepthBuffer.setClear( depth );\n\t\n\t    \t}\n\t\n\t    \tfunction clearStencil( stencil ) {\n\t\n\t    \t\tstencilBuffer.setClear( stencil );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction scissor( scissor ) {\n\t\n\t    \t\tif ( currentScissor.equals( scissor ) === false ) {\n\t\n\t    \t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t    \t\t\tcurrentScissor.copy( scissor );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction viewport( viewport ) {\n\t\n\t    \t\tif ( currentViewport.equals( viewport ) === false ) {\n\t\n\t    \t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t    \t\t\tcurrentViewport.copy( viewport );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction reset() {\n\t\n\t    \t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\t\n\t    \t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\t\n\t    \t\t\t\tgl.disableVertexAttribArray( i );\n\t    \t\t\t\tenabledAttributes[ i ] = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tcapabilities = {};\n\t\n\t    \t\tcompressedTextureFormats = null;\n\t\n\t    \t\tcurrentTextureSlot = null;\n\t    \t\tcurrentBoundTextures = {};\n\t\n\t    \t\tcurrentBlending = null;\n\t\n\t    \t\tcurrentFlipSided = null;\n\t    \t\tcurrentCullFace = null;\n\t\n\t    \t\tcolorBuffer.reset();\n\t    \t\tdepthBuffer.reset();\n\t    \t\tstencilBuffer.reset();\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tbuffers: {\n\t    \t\t\tcolor: colorBuffer,\n\t    \t\t\tdepth: depthBuffer,\n\t    \t\t\tstencil: stencilBuffer\n\t    \t\t},\n\t\n\t    \t\tinit: init,\n\t    \t\tinitAttributes: initAttributes,\n\t    \t\tenableAttribute: enableAttribute,\n\t    \t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t    \t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t    \t\tenable: enable,\n\t    \t\tdisable: disable,\n\t    \t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\t\n\t    \t\tsetBlending: setBlending,\n\t\n\t    \t\tsetColorWrite: setColorWrite,\n\t    \t\tsetDepthTest: setDepthTest,\n\t    \t\tsetDepthWrite: setDepthWrite,\n\t    \t\tsetDepthFunc: setDepthFunc,\n\t    \t\tsetStencilTest: setStencilTest,\n\t    \t\tsetStencilWrite: setStencilWrite,\n\t    \t\tsetStencilFunc: setStencilFunc,\n\t    \t\tsetStencilOp: setStencilOp,\n\t\n\t    \t\tsetFlipSided: setFlipSided,\n\t    \t\tsetCullFace: setCullFace,\n\t\n\t    \t\tsetLineWidth: setLineWidth,\n\t    \t\tsetPolygonOffset: setPolygonOffset,\n\t\n\t    \t\tgetScissorTest: getScissorTest,\n\t    \t\tsetScissorTest: setScissorTest,\n\t\n\t    \t\tactiveTexture: activeTexture,\n\t    \t\tbindTexture: bindTexture,\n\t    \t\tcompressedTexImage2D: compressedTexImage2D,\n\t    \t\ttexImage2D: texImage2D,\n\t\n\t    \t\tclearColor: clearColor,\n\t    \t\tclearDepth: clearDepth,\n\t    \t\tclearStencil: clearStencil,\n\t\n\t    \t\tscissor: scissor,\n\t    \t\tviewport: viewport,\n\t\n\t    \t\treset: reset\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLCapabilities( gl, extensions, parameters ) {\n\t\n\t    \tvar maxAnisotropy;\n\t\n\t    \tfunction getMaxAnisotropy() {\n\t\n\t    \t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\t\n\t    \t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmaxAnisotropy = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn maxAnisotropy;\n\t\n\t    \t}\n\t\n\t    \tfunction getMaxPrecision( precision ) {\n\t\n\t    \t\tif ( precision === 'highp' ) {\n\t\n\t    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\t\n\t    \t\t\t\treturn 'highp';\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tprecision = 'mediump';\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( precision === 'mediump' ) {\n\t\n\t    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\t\n\t    \t\t\t\treturn 'mediump';\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn 'lowp';\n\t\n\t    \t}\n\t\n\t    \tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t    \tvar maxPrecision = getMaxPrecision( precision );\n\t\n\t    \tif ( maxPrecision !== precision ) {\n\t\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t    \t\tprecision = maxPrecision;\n\t\n\t    \t}\n\t\n\t    \tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );\n\t\n\t    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t    \tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\t    \tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\t    \tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\t\n\t    \tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t    \tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\t    \tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\t    \tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\t\n\t    \tvar vertexTextures = maxVertexTextures > 0;\n\t    \tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\t    \tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\n\t    \treturn {\n\t\n\t    \t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t    \t\tgetMaxPrecision: getMaxPrecision,\n\t\n\t    \t\tprecision: precision,\n\t    \t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\n\t    \t\tmaxTextures: maxTextures,\n\t    \t\tmaxVertexTextures: maxVertexTextures,\n\t    \t\tmaxTextureSize: maxTextureSize,\n\t    \t\tmaxCubemapSize: maxCubemapSize,\n\t\n\t    \t\tmaxAttributes: maxAttributes,\n\t    \t\tmaxVertexUniforms: maxVertexUniforms,\n\t    \t\tmaxVaryings: maxVaryings,\n\t    \t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\n\t    \t\tvertexTextures: vertexTextures,\n\t    \t\tfloatFragmentTextures: floatFragmentTextures,\n\t    \t\tfloatVertexTextures: floatVertexTextures\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLExtensions( gl ) {\n\t\n\t    \tvar extensions = {};\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( name ) {\n\t\n\t    \t\t\tif ( extensions[ name ] !== undefined ) {\n\t\n\t    \t\t\t\treturn extensions[ name ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar extension;\n\t\n\t    \t\t\tswitch ( name ) {\n\t\n\t    \t\t\t\tcase 'WEBGL_depth_texture':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t    \t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault:\n\t    \t\t\t\t\textension = gl.getExtension( name );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( extension === null ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\textensions[ name ] = extension;\n\t\n\t    \t\t\treturn extension;\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLClipping() {\n\t\n\t    \tvar scope = this,\n\t\n\t    \t\tglobalState = null,\n\t    \t\tnumGlobalPlanes = 0,\n\t    \t\tlocalClippingEnabled = false,\n\t    \t\trenderingShadows = false,\n\t\n\t    \t\tplane = new Plane(),\n\t    \t\tviewNormalMatrix = new Matrix3(),\n\t\n\t    \t\tuniform = { value: null, needsUpdate: false };\n\t\n\t    \tthis.uniform = uniform;\n\t    \tthis.numPlanes = 0;\n\t\n\t    \tthis.init = function( planes, enableLocalClipping, camera ) {\n\t\n\t    \t\tvar enabled =\n\t    \t\t\tplanes.length !== 0 ||\n\t    \t\t\tenableLocalClipping ||\n\t    \t\t\t// enable state of previous frame - the clipping code has to\n\t    \t\t\t// run another frame in order to reset the state:\n\t    \t\t\tnumGlobalPlanes !== 0 ||\n\t    \t\t\tlocalClippingEnabled;\n\t\n\t    \t\tlocalClippingEnabled = enableLocalClipping;\n\t\n\t    \t\tglobalState = projectPlanes( planes, camera, 0 );\n\t    \t\tnumGlobalPlanes = planes.length;\n\t\n\t    \t\treturn enabled;\n\t\n\t    \t};\n\t\n\t    \tthis.beginShadows = function() {\n\t\n\t    \t\trenderingShadows = true;\n\t    \t\tprojectPlanes( null );\n\t\n\t    \t};\n\t\n\t    \tthis.endShadows = function() {\n\t\n\t    \t\trenderingShadows = false;\n\t    \t\tresetGlobalState();\n\t\n\t    \t};\n\t\n\t    \tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\t\n\t    \t\tif ( ! localClippingEnabled ||\n\t    \t\t\t\tplanes === null || planes.length === 0 ||\n\t    \t\t\t\trenderingShadows && ! clipShadows ) {\n\t    \t\t\t// there's no local clipping\n\t\n\t    \t\t\tif ( renderingShadows ) {\n\t    \t\t\t\t// there's no global clipping\n\t\n\t    \t\t\t\tprojectPlanes( null );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tresetGlobalState();\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t    \t\t\t\tlGlobal = nGlobal * 4,\n\t\n\t    \t\t\t\tdstArray = cache.clippingState || null;\n\t\n\t    \t\t\tuniform.value = dstArray; // ensure unique state\n\t\n\t    \t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\t\n\t    \t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\t\n\t    \t\t\t\tdstArray[ i ] = globalState[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcache.clippingState = dstArray;\n\t    \t\t\tthis.numPlanes += nGlobal;\n\t\n\t    \t\t}\n\t\n\t\n\t    \t};\n\t\n\t    \tfunction resetGlobalState() {\n\t\n\t    \t\tif ( uniform.value !== globalState ) {\n\t\n\t    \t\t\tuniform.value = globalState;\n\t    \t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\n\t    \t\t}\n\t\n\t    \t\tscope.numPlanes = numGlobalPlanes;\n\t\n\t    \t}\n\t\n\t    \tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\t\n\t    \t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t    \t\t\tdstArray = null;\n\t\n\t    \t\tif ( nPlanes !== 0 ) {\n\t\n\t    \t\t\tdstArray = uniform.value;\n\t\n\t    \t\t\tif ( skipTransform !== true || dstArray === null ) {\n\t\n\t    \t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t    \t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\n\t    \t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\t\n\t    \t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\t\n\t    \t\t\t\t\tdstArray = new Float32Array( flatSize );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( var i = 0, i4 = dstOffset;\n\t    \t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\t\n\t    \t\t\t\t\tplane.copy( planes[ i ] ).\n\t    \t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\t\n\t    \t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t    \t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tuniform.value = dstArray;\n\t    \t\t\tuniform.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tscope.numPlanes = nPlanes;\n\t    \t\treturn dstArray;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author supereggbert / http://www.paulbrunt.co.uk/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author szimek / https://github.com/szimek/\n\t     * @author tschw\n\t     */\n\t\n\t    function WebGLRenderer( parameters ) {\n\t\n\t    \tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\t\n\t    \tparameters = parameters || {};\n\t\n\t    \tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t    \t_context = parameters.context !== undefined ? parameters.context : null,\n\t\n\t    \t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t    \t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t    \t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t    \t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t    \t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t    \t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\t\n\t    \tvar lights = [];\n\t\n\t    \tvar opaqueObjects = [];\n\t    \tvar opaqueObjectsLastIndex = - 1;\n\t    \tvar transparentObjects = [];\n\t    \tvar transparentObjectsLastIndex = - 1;\n\t\n\t    \tvar morphInfluences = new Float32Array( 8 );\n\t\n\t    \tvar sprites = [];\n\t    \tvar lensFlares = [];\n\t\n\t    \t// public properties\n\t\n\t    \tthis.domElement = _canvas;\n\t    \tthis.context = null;\n\t\n\t    \t// clearing\n\t\n\t    \tthis.autoClear = true;\n\t    \tthis.autoClearColor = true;\n\t    \tthis.autoClearDepth = true;\n\t    \tthis.autoClearStencil = true;\n\t\n\t    \t// scene graph\n\t\n\t    \tthis.sortObjects = true;\n\t\n\t    \t// user-defined clipping\n\t\n\t    \tthis.clippingPlanes = [];\n\t    \tthis.localClippingEnabled = false;\n\t\n\t    \t// physically based shading\n\t\n\t    \tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t    \tthis.gammaInput = false;\n\t    \tthis.gammaOutput = false;\n\t\n\t    \t// physical lights\n\t\n\t    \tthis.physicallyCorrectLights = false;\n\t\n\t    \t// tone mapping\n\t\n\t    \tthis.toneMapping = LinearToneMapping;\n\t    \tthis.toneMappingExposure = 1.0;\n\t    \tthis.toneMappingWhitePoint = 1.0;\n\t\n\t    \t// morphs\n\t\n\t    \tthis.maxMorphTargets = 8;\n\t    \tthis.maxMorphNormals = 4;\n\t\n\t    \t// internal properties\n\t\n\t    \tvar _this = this,\n\t\n\t    \t// internal state cache\n\t\n\t    \t_currentProgram = null,\n\t    \t_currentRenderTarget = null,\n\t    \t_currentFramebuffer = null,\n\t    \t_currentMaterialId = - 1,\n\t    \t_currentGeometryProgram = '',\n\t    \t_currentCamera = null,\n\t\n\t    \t_currentScissor = new Vector4(),\n\t    \t_currentScissorTest = null,\n\t\n\t    \t_currentViewport = new Vector4(),\n\t\n\t    \t//\n\t\n\t    \t_usedTextureUnits = 0,\n\t\n\t    \t//\n\t\n\t    \t_clearColor = new Color( 0x000000 ),\n\t    \t_clearAlpha = 0,\n\t\n\t    \t_width = _canvas.width,\n\t    \t_height = _canvas.height,\n\t\n\t    \t_pixelRatio = 1,\n\t\n\t    \t_scissor = new Vector4( 0, 0, _width, _height ),\n\t    \t_scissorTest = false,\n\t\n\t    \t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\n\t    \t// frustum\n\t\n\t    \t_frustum = new Frustum(),\n\t\n\t    \t// clipping\n\t\n\t    \t_clipping = new WebGLClipping(),\n\t    \t_clippingEnabled = false,\n\t    \t_localClippingEnabled = false,\n\t\n\t    \t_sphere = new Sphere(),\n\t\n\t    \t// camera matrices cache\n\t\n\t    \t_projScreenMatrix = new Matrix4(),\n\t\n\t    \t_vector3 = new Vector3(),\n\t\n\t    \t// light arrays cache\n\t\n\t    \t_lights = {\n\t\n\t    \t\thash: '',\n\t\n\t    \t\tambient: [ 0, 0, 0 ],\n\t    \t\tdirectional: [],\n\t    \t\tdirectionalShadowMap: [],\n\t    \t\tdirectionalShadowMatrix: [],\n\t    \t\tspot: [],\n\t    \t\tspotShadowMap: [],\n\t    \t\tspotShadowMatrix: [],\n\t    \t\tpoint: [],\n\t    \t\tpointShadowMap: [],\n\t    \t\tpointShadowMatrix: [],\n\t    \t\themi: [],\n\t\n\t    \t\tshadows: []\n\t\n\t    \t},\n\t\n\t    \t// info\n\t\n\t    \t_infoRender = {\n\t\n\t    \t\tcalls: 0,\n\t    \t\tvertices: 0,\n\t    \t\tfaces: 0,\n\t    \t\tpoints: 0\n\t\n\t    \t};\n\t\n\t    \tthis.info = {\n\t\n\t    \t\trender: _infoRender,\n\t    \t\tmemory: {\n\t\n\t    \t\t\tgeometries: 0,\n\t    \t\t\ttextures: 0\n\t\n\t    \t\t},\n\t    \t\tprograms: null\n\t\n\t    \t};\n\t\n\t\n\t    \t// initialize\n\t\n\t    \tvar _gl;\n\t\n\t    \ttry {\n\t\n\t    \t\tvar attributes = {\n\t    \t\t\talpha: _alpha,\n\t    \t\t\tdepth: _depth,\n\t    \t\t\tstencil: _stencil,\n\t    \t\t\tantialias: _antialias,\n\t    \t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t    \t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t    \t\t};\n\t\n\t    \t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\t\n\t    \t\tif ( _gl === null ) {\n\t\n\t    \t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\t\n\t    \t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthrow 'Error creating WebGL context.';\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\t\n\t    \t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\t\n\t    \t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\n\t    \t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\t\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\n\t    \t} catch ( error ) {\n\t\n\t    \t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\t\n\t    \t}\n\t\n\t    \tvar extensions = new WebGLExtensions( _gl );\n\t\n\t    \textensions.get( 'WEBGL_depth_texture' );\n\t    \textensions.get( 'OES_texture_float' );\n\t    \textensions.get( 'OES_texture_float_linear' );\n\t    \textensions.get( 'OES_texture_half_float' );\n\t    \textensions.get( 'OES_texture_half_float_linear' );\n\t    \textensions.get( 'OES_standard_derivatives' );\n\t    \textensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\t\n\t    \t\tBufferGeometry.MaxIndex = 4294967296;\n\t\n\t    \t}\n\t\n\t    \tvar capabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\t\n\t    \tvar state = new WebGLState( _gl, extensions, paramThreeToGL );\n\t    \tvar properties = new WebGLProperties();\n\t    \tvar textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n\t    \tvar objects = new WebGLObjects( _gl, properties, this.info );\n\t    \tvar programCache = new WebGLPrograms( this, capabilities );\n\t    \tvar lightCache = new WebGLLights();\n\t\n\t    \tthis.info.programs = programCache.programs;\n\t\n\t    \tvar bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n\t    \tvar indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\t\n\t    \t//\n\t\n\t    \tvar backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t    \tvar backgroundCamera2 = new PerspectiveCamera();\n\t    \tvar backgroundPlaneMesh = new Mesh(\n\t    \t\tnew PlaneBufferGeometry( 2, 2 ),\n\t    \t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t    \t);\n\t    \tvar backgroundBoxShader = ShaderLib[ 'cube' ];\n\t    \tvar backgroundBoxMesh = new Mesh(\n\t    \t\tnew BoxBufferGeometry( 5, 5, 5 ),\n\t    \t\tnew ShaderMaterial( {\n\t    \t\t\tuniforms: backgroundBoxShader.uniforms,\n\t    \t\t\tvertexShader: backgroundBoxShader.vertexShader,\n\t    \t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n\t    \t\t\tside: BackSide,\n\t    \t\t\tdepthTest: false,\n\t    \t\t\tdepthWrite: false,\n\t    \t\t\tfog: false\n\t    \t\t} )\n\t    \t);\n\t\n\t    \t//\n\t\n\t    \tfunction getTargetPixelRatio() {\n\t\n\t    \t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\n\t    \t}\n\t\n\t    \tfunction glClearColor( r, g, b, a ) {\n\t\n\t    \t\tif ( _premultipliedAlpha === true ) {\n\t\n\t    \t\t\tr *= a; g *= a; b *= a;\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.clearColor( r, g, b, a );\n\t\n\t    \t}\n\t\n\t    \tfunction setDefaultGLState() {\n\t\n\t    \t\tstate.init();\n\t\n\t    \t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t    \t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\t\n\t    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t}\n\t\n\t    \tfunction resetGLState() {\n\t\n\t    \t\t_currentProgram = null;\n\t    \t\t_currentCamera = null;\n\t\n\t    \t\t_currentGeometryProgram = '';\n\t    \t\t_currentMaterialId = - 1;\n\t\n\t    \t\tstate.reset();\n\t\n\t    \t}\n\t\n\t    \tsetDefaultGLState();\n\t\n\t    \tthis.context = _gl;\n\t    \tthis.capabilities = capabilities;\n\t    \tthis.extensions = extensions;\n\t    \tthis.properties = properties;\n\t    \tthis.state = state;\n\t\n\t    \t// shadow map\n\t\n\t    \tvar shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );\n\t\n\t    \tthis.shadowMap = shadowMap;\n\t\n\t\n\t    \t// Plugins\n\t\n\t    \tvar spritePlugin = new SpritePlugin( this, sprites );\n\t    \tvar lensFlarePlugin = new LensFlarePlugin( this, lensFlares );\n\t\n\t    \t// API\n\t\n\t    \tthis.getContext = function () {\n\t\n\t    \t\treturn _gl;\n\t\n\t    \t};\n\t\n\t    \tthis.getContextAttributes = function () {\n\t\n\t    \t\treturn _gl.getContextAttributes();\n\t\n\t    \t};\n\t\n\t    \tthis.forceContextLoss = function () {\n\t\n\t    \t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\t\n\t    \t};\n\t\n\t    \tthis.getMaxAnisotropy = function () {\n\t\n\t    \t\treturn capabilities.getMaxAnisotropy();\n\t\n\t    \t};\n\t\n\t    \tthis.getPrecision = function () {\n\t\n\t    \t\treturn capabilities.precision;\n\t\n\t    \t};\n\t\n\t    \tthis.getPixelRatio = function () {\n\t\n\t    \t\treturn _pixelRatio;\n\t\n\t    \t};\n\t\n\t    \tthis.setPixelRatio = function ( value ) {\n\t\n\t    \t\tif ( value === undefined ) return;\n\t\n\t    \t\t_pixelRatio = value;\n\t\n\t    \t\tthis.setSize( _viewport.z, _viewport.w, false );\n\t\n\t    \t};\n\t\n\t    \tthis.getSize = function () {\n\t\n\t    \t\treturn {\n\t    \t\t\twidth: _width,\n\t    \t\t\theight: _height\n\t    \t\t};\n\t\n\t    \t};\n\t\n\t    \tthis.setSize = function ( width, height, updateStyle ) {\n\t\n\t    \t\t_width = width;\n\t    \t\t_height = height;\n\t\n\t    \t\t_canvas.width = width * _pixelRatio;\n\t    \t\t_canvas.height = height * _pixelRatio;\n\t\n\t    \t\tif ( updateStyle !== false ) {\n\t\n\t    \t\t\t_canvas.style.width = width + 'px';\n\t    \t\t\t_canvas.style.height = height + 'px';\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.setViewport( 0, 0, width, height );\n\t\n\t    \t};\n\t\n\t    \tthis.setViewport = function ( x, y, width, height ) {\n\t\n\t    \t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\t\n\t    \t};\n\t\n\t    \tthis.setScissor = function ( x, y, width, height ) {\n\t\n\t    \t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\t\n\t    \t};\n\t\n\t    \tthis.setScissorTest = function ( boolean ) {\n\t\n\t    \t\tstate.setScissorTest( _scissorTest = boolean );\n\t\n\t    \t};\n\t\n\t    \t// Clearing\n\t\n\t    \tthis.getClearColor = function () {\n\t\n\t    \t\treturn _clearColor;\n\t\n\t    \t};\n\t\n\t    \tthis.setClearColor = function ( color, alpha ) {\n\t\n\t    \t\t_clearColor.set( color );\n\t\n\t    \t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\t\n\t    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t};\n\t\n\t    \tthis.getClearAlpha = function () {\n\t\n\t    \t\treturn _clearAlpha;\n\t\n\t    \t};\n\t\n\t    \tthis.setClearAlpha = function ( alpha ) {\n\t\n\t    \t\t_clearAlpha = alpha;\n\t\n\t    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t};\n\t\n\t    \tthis.clear = function ( color, depth, stencil ) {\n\t\n\t    \t\tvar bits = 0;\n\t\n\t    \t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t    \t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t    \t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\t\n\t    \t\t_gl.clear( bits );\n\t\n\t    \t};\n\t\n\t    \tthis.clearColor = function () {\n\t\n\t    \t\tthis.clear( true, false, false );\n\t\n\t    \t};\n\t\n\t    \tthis.clearDepth = function () {\n\t\n\t    \t\tthis.clear( false, true, false );\n\t\n\t    \t};\n\t\n\t    \tthis.clearStencil = function () {\n\t\n\t    \t\tthis.clear( false, false, true );\n\t\n\t    \t};\n\t\n\t    \tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\t\n\t    \t\tthis.setRenderTarget( renderTarget );\n\t    \t\tthis.clear( color, depth, stencil );\n\t\n\t    \t};\n\t\n\t    \t// Reset\n\t\n\t    \tthis.resetGLState = resetGLState;\n\t\n\t    \tthis.dispose = function() {\n\t\n\t    \t\ttransparentObjects = [];\n\t    \t\ttransparentObjectsLastIndex = -1;\n\t    \t\topaqueObjects = [];\n\t    \t\topaqueObjectsLastIndex = -1;\n\t\n\t    \t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\n\t    \t};\n\t\n\t    \t// Events\n\t\n\t    \tfunction onContextLost( event ) {\n\t\n\t    \t\tevent.preventDefault();\n\t\n\t    \t\tresetGLState();\n\t    \t\tsetDefaultGLState();\n\t\n\t    \t\tproperties.clear();\n\t\n\t    \t}\n\t\n\t    \tfunction onMaterialDispose( event ) {\n\t\n\t    \t\tvar material = event.target;\n\t\n\t    \t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\t\n\t    \t\tdeallocateMaterial( material );\n\t\n\t    \t}\n\t\n\t    \t// Buffer deallocation\n\t\n\t    \tfunction deallocateMaterial( material ) {\n\t\n\t    \t\treleaseMaterialProgramReference( material );\n\t\n\t    \t\tproperties.delete( material );\n\t\n\t    \t}\n\t\n\t\n\t    \tfunction releaseMaterialProgramReference( material ) {\n\t\n\t    \t\tvar programInfo = properties.get( material ).program;\n\t\n\t    \t\tmaterial.program = undefined;\n\t\n\t    \t\tif ( programInfo !== undefined ) {\n\t\n\t    \t\t\tprogramCache.releaseProgram( programInfo );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Buffer rendering\n\t\n\t    \tthis.renderBufferImmediate = function ( object, program, material ) {\n\t\n\t    \t\tstate.initAttributes();\n\t\n\t    \t\tvar buffers = properties.get( object );\n\t\n\t    \t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t    \t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t    \t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t    \t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\t\n\t    \t\tvar attributes = program.getAttributes();\n\t\n\t    \t\tif ( object.hasPositions ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.position );\n\t    \t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object.hasNormals ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\t\n\t    \t\t\tif ( ! material.isMeshPhongMaterial &&\n\t    \t\t\t     ! material.isMeshStandardMaterial &&\n\t    \t\t\t       material.shading === FlatShading ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\t\n\t    \t\t\t\t\tvar array = object.normalArray;\n\t\n\t    \t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t    \t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t    \t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\t\n\t    \t\t\t\t\tarray[ i + 0 ] = nx;\n\t    \t\t\t\t\tarray[ i + 1 ] = ny;\n\t    \t\t\t\t\tarray[ i + 2 ] = nz;\n\t\n\t    \t\t\t\t\tarray[ i + 3 ] = nx;\n\t    \t\t\t\t\tarray[ i + 4 ] = ny;\n\t    \t\t\t\t\tarray[ i + 5 ] = nz;\n\t\n\t    \t\t\t\t\tarray[ i + 6 ] = nx;\n\t    \t\t\t\t\tarray[ i + 7 ] = ny;\n\t    \t\t\t\t\tarray[ i + 8 ] = nz;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.normal );\n\t\n\t    \t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object.hasUvs && material.map ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.uv );\n\t\n\t    \t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.color );\n\t\n\t    \t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\t\n\t    \t\tobject.count = 0;\n\t\n\t    \t};\n\t\n\t    \tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\t\n\t    \t\tsetMaterial( material );\n\t\n\t    \t\tvar program = setProgram( camera, fog, material, object );\n\t\n\t    \t\tvar updateBuffers = false;\n\t    \t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\t\n\t    \t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\t\n\t    \t\t\t_currentGeometryProgram = geometryProgram;\n\t    \t\t\tupdateBuffers = true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// morph targets\n\t\n\t    \t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\t\n\t    \t\tif ( morphTargetInfluences !== undefined ) {\n\t\n\t    \t\t\tvar activeInfluences = [];\n\t\n\t    \t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t    \t\t\t\tactiveInfluences.push( [ influence, i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tactiveInfluences.sort( absNumericalSort );\n\t\n\t    \t\t\tif ( activeInfluences.length > 8 ) {\n\t\n\t    \t\t\t\tactiveInfluences.length = 8;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\n\t    \t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar influence = activeInfluences[ i ];\n\t    \t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\t\n\t    \t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\t\n\t    \t\t\t\t\tvar index = influence[ 1 ];\n\t\n\t    \t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t    \t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t    \t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tmorphInfluences[ i ] = 0.0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tprogram.getUniforms().setValue(\n\t    \t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\t\n\t    \t\t\tupdateBuffers = true;\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tvar index = geometry.index;\n\t    \t\tvar position = geometry.attributes.position;\n\t    \t\tvar rangeFactor = 1;\n\t\n\t    \t\tif ( material.wireframe === true ) {\n\t\n\t    \t\t\tindex = objects.getWireframeAttribute( geometry );\n\t    \t\t\trangeFactor = 2;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar renderer;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\trenderer = indexedBufferRenderer;\n\t    \t\t\trenderer.setIndex( index );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderer = bufferRenderer;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( updateBuffers ) {\n\t\n\t    \t\t\tsetupVertexAttributes( material, program, geometry );\n\t\n\t    \t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tvar dataCount = 0;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tdataCount = index.count;\n\t\n\t    \t\t} else if ( position !== undefined ) {\n\t\n\t    \t\t\tdataCount = position.count;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t    \t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\t\n\t    \t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t    \t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\n\t    \t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t    \t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\t\n\t    \t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\t\n\t    \t\tif ( drawCount === 0 ) return;\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( object.isMesh ) {\n\t\n\t    \t\t\tif ( material.wireframe === true ) {\n\t\n\t    \t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t    \t\t\t\trenderer.setMode( _gl.LINES );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tswitch ( object.drawMode ) {\n\t\n\t    \t\t\t\t\tcase TrianglesDrawMode:\n\t    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase TriangleStripDrawMode:\n\t    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase TriangleFanDrawMode:\n\t    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t\n\t    \t\t} else if ( object.isLine ) {\n\t\n\t    \t\t\tvar lineWidth = material.linewidth;\n\t\n\t    \t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\t\n\t    \t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\t\n\t    \t\t\tif ( object.isLineSegments ) {\n\t\n\t    \t\t\t\trenderer.setMode( _gl.LINES );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( object.isPoints ) {\n\t\n\t    \t\t\trenderer.setMode( _gl.POINTS );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\t\n\t    \t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\t\n\t    \t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderer.render( drawStart, drawCount );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\t\n\t    \t\tvar extension;\n\t\n\t    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\t\n\t    \t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\t\tif ( extension === null ) {\n\t\n\t    \t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t    \t\t\t\treturn;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( startIndex === undefined ) startIndex = 0;\n\t\n\t    \t\tstate.initAttributes();\n\t\n\t    \t\tvar geometryAttributes = geometry.attributes;\n\t\n\t    \t\tvar programAttributes = program.getAttributes();\n\t\n\t    \t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\t\n\t    \t\tfor ( var name in programAttributes ) {\n\t\n\t    \t\t\tvar programAttribute = programAttributes[ name ];\n\t\n\t    \t\t\tif ( programAttribute >= 0 ) {\n\t\n\t    \t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\t\n\t    \t\t\t\tif ( geometryAttribute !== undefined ) {\n\t\n\t    \t\t\t\t\tvar type = _gl.FLOAT;\n\t    \t\t\t\t\tvar array = geometryAttribute.array;\n\t    \t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\n\t    \t\t\t\t\tif ( array instanceof Float32Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.FLOAT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\t\n\t    \t\t\t\t\t\tconsole.warn( \"Unsupported data buffer format: Float64Array\" );\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.SHORT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.INT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.BYTE;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t    \t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\t\n\t    \t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\t\t\t\tvar data = geometryAttribute.data;\n\t    \t\t\t\t\t\tvar stride = data.stride;\n\t    \t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\t\n\t    \t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\t\n\t    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInstancedBufferAttribute ) {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\t\n\t    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\t\n\t    \t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\t\n\t    \t\t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\t\tswitch ( value.length ) {\n\t\n\t    \t\t\t\t\t\t\tcase 2:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase 3:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase 4:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tdefault:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t}\n\t\n\t    \t// Sorting\n\t\n\t    \tfunction absNumericalSort( a, b ) {\n\t\n\t    \t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\t\n\t    \t}\n\t\n\t    \tfunction painterSortStable( a, b ) {\n\t\n\t    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\t\n\t    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\t\n\t    \t\t} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {\n\t\n\t    \t\t\treturn a.material.program.id - b.material.program.id;\n\t\n\t    \t\t} else if ( a.material.id !== b.material.id ) {\n\t\n\t    \t\t\treturn a.material.id - b.material.id;\n\t\n\t    \t\t} else if ( a.z !== b.z ) {\n\t\n\t    \t\t\treturn a.z - b.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn a.id - b.id;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction reversePainterSortStable( a, b ) {\n\t\n\t    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\t\n\t    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\t\n\t    \t\t} if ( a.z !== b.z ) {\n\t\n\t    \t\t\treturn b.z - a.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn a.id - b.id;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Rendering\n\t\n\t    \tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\t\n\t    \t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar fog = scene.fog;\n\t\n\t    \t\t// reset caching for this frame\n\t\n\t    \t\t_currentGeometryProgram = '';\n\t    \t\t_currentMaterialId = - 1;\n\t    \t\t_currentCamera = null;\n\t\n\t    \t\t// update scene graph\n\t\n\t    \t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\n\t    \t\t// update camera matrices and frustum\n\t\n\t    \t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\t\n\t    \t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\t\n\t    \t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t    \t\t_frustum.setFromMatrix( _projScreenMatrix );\n\t\n\t    \t\tlights.length = 0;\n\t\n\t    \t\topaqueObjectsLastIndex = - 1;\n\t    \t\ttransparentObjectsLastIndex = - 1;\n\t\n\t    \t\tsprites.length = 0;\n\t    \t\tlensFlares.length = 0;\n\t\n\t    \t\t_localClippingEnabled = this.localClippingEnabled;\n\t    \t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\t\n\t    \t\tprojectObject( scene, camera );\n\t\n\t    \t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n\t    \t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\t\n\t    \t\tif ( _this.sortObjects === true ) {\n\t\n\t    \t\t\topaqueObjects.sort( painterSortStable );\n\t    \t\t\ttransparentObjects.sort( reversePainterSortStable );\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\t\n\t    \t\tsetupShadows( lights );\n\t\n\t    \t\tshadowMap.render( scene, camera );\n\t\n\t    \t\tsetupLights( lights, camera );\n\t\n\t    \t\tif ( _clippingEnabled ) _clipping.endShadows();\n\t\n\t    \t\t//\n\t\n\t    \t\t_infoRender.calls = 0;\n\t    \t\t_infoRender.vertices = 0;\n\t    \t\t_infoRender.faces = 0;\n\t    \t\t_infoRender.points = 0;\n\t\n\t    \t\tif ( renderTarget === undefined ) {\n\t\n\t    \t\t\trenderTarget = null;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.setRenderTarget( renderTarget );\n\t\n\t    \t\t//\n\t\n\t    \t\tvar background = scene.background;\n\t\n\t    \t\tif ( background === null ) {\n\t\n\t    \t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t\t} else if ( background && background.isColor ) {\n\t\n\t    \t\t\tglClearColor( background.r, background.g, background.b, 1 );\n\t    \t\t\tforceClear = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.autoClear || forceClear ) {\n\t\n\t    \t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( background && background.isCubeTexture ) {\n\t\n\t    \t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\t\n\t    \t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n\t    \t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\t\n\t    \t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n\t    \t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\t\n\t    \t\t\tobjects.update( backgroundBoxMesh );\n\t\n\t    \t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\t\n\t    \t\t} else if ( background && background.isTexture ) {\n\t\n\t    \t\t\tbackgroundPlaneMesh.material.map = background;\n\t\n\t    \t\t\tobjects.update( backgroundPlaneMesh );\n\t\n\t    \t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( scene.overrideMaterial ) {\n\t\n\t    \t\t\tvar overrideMaterial = scene.overrideMaterial;\n\t\n\t    \t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n\t    \t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// opaque pass (front-to-back order)\n\t\n\t    \t\t\tstate.setBlending( NoBlending );\n\t    \t\t\trenderObjects( opaqueObjects, camera, fog );\n\t\n\t    \t\t\t// transparent pass (back-to-front order)\n\t\n\t    \t\t\trenderObjects( transparentObjects, camera, fog );\n\t\n\t    \t\t}\n\t\n\t    \t\t// custom render plugins (post pass)\n\t\n\t    \t\tspritePlugin.render( scene, camera );\n\t    \t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\t\n\t    \t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\n\t    \t\tif ( renderTarget ) {\n\t\n\t    \t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\t\n\t    \t\t}\n\t\n\t    \t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\t\n\t    \t\tstate.setDepthTest( true );\n\t    \t\tstate.setDepthWrite( true );\n\t    \t\tstate.setColorWrite( true );\n\t\n\t    \t\t// _gl.finish();\n\t\n\t    \t};\n\t\n\t    \tfunction pushRenderItem( object, geometry, material, z, group ) {\n\t\n\t    \t\tvar array, index;\n\t\n\t    \t\t// allocate the next position in the appropriate array\n\t\n\t    \t\tif ( material.transparent ) {\n\t\n\t    \t\t\tarray = transparentObjects;\n\t    \t\t\tindex = ++ transparentObjectsLastIndex;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tarray = opaqueObjects;\n\t    \t\t\tindex = ++ opaqueObjectsLastIndex;\n\t\n\t    \t\t}\n\t\n\t    \t\t// recycle existing render item or grow the array\n\t\n\t    \t\tvar renderItem = array[ index ];\n\t\n\t    \t\tif ( renderItem !== undefined ) {\n\t\n\t    \t\t\trenderItem.id = object.id;\n\t    \t\t\trenderItem.object = object;\n\t    \t\t\trenderItem.geometry = geometry;\n\t    \t\t\trenderItem.material = material;\n\t    \t\t\trenderItem.z = _vector3.z;\n\t    \t\t\trenderItem.group = group;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderItem = {\n\t    \t\t\t\tid: object.id,\n\t    \t\t\t\tobject: object,\n\t    \t\t\t\tgeometry: geometry,\n\t    \t\t\t\tmaterial: material,\n\t    \t\t\t\tz: _vector3.z,\n\t    \t\t\t\tgroup: group\n\t    \t\t\t};\n\t\n\t    \t\t\t// assert( index === array.length );\n\t    \t\t\tarray.push( renderItem );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// TODO Duplicated code (Frustum)\n\t\n\t    \tfunction isObjectViewable( object ) {\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tif ( geometry.boundingSphere === null )\n\t    \t\t\tgeometry.computeBoundingSphere();\n\t\n\t    \t\t_sphere.copy( geometry.boundingSphere ).\n\t    \t\t\tapplyMatrix4( object.matrixWorld );\n\t\n\t    \t\treturn isSphereViewable( _sphere );\n\t\n\t    \t}\n\t\n\t    \tfunction isSpriteViewable( sprite ) {\n\t\n\t    \t\t_sphere.center.set( 0, 0, 0 );\n\t    \t\t_sphere.radius = 0.7071067811865476;\n\t    \t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\t\n\t    \t\treturn isSphereViewable( _sphere );\n\t\n\t    \t}\n\t\n\t    \tfunction isSphereViewable( sphere ) {\n\t\n\t    \t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\t\n\t    \t\tvar numPlanes = _clipping.numPlanes;\n\t\n\t    \t\tif ( numPlanes === 0 ) return true;\n\t\n\t    \t\tvar planes = _this.clippingPlanes,\n\t\n\t    \t\t\tcenter = sphere.center,\n\t    \t\t\tnegRad = - sphere.radius,\n\t    \t\t\ti = 0;\n\t\n\t    \t\tdo {\n\t\n\t    \t\t\t// out when deeper than radius in the negative halfspace\n\t    \t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\t\n\t    \t\t} while ( ++ i !== numPlanes );\n\t\n\t    \t\treturn true;\n\t\n\t    \t}\n\t\n\t    \tfunction projectObject( object, camera ) {\n\t\n\t    \t\tif ( object.visible === false ) return;\n\t\n\t    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\t\n\t    \t\tif ( visible ) {\n\t\n\t    \t\t\tif ( object.isLight ) {\n\t\n\t    \t\t\t\tlights.push( object );\n\t\n\t    \t\t\t} else if ( object.isSprite ) {\n\t\n\t    \t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\t\n\t    \t\t\t\t\tsprites.push( object );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( object.isLensFlare ) {\n\t\n\t    \t\t\t\tlensFlares.push( object );\n\t\n\t    \t\t\t} else if ( object.isImmediateRenderObject ) {\n\t\n\t    \t\t\t\tif ( _this.sortObjects === true ) {\n\t\n\t    \t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t    \t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\t\n\t    \t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\t\n\t    \t\t\t\tif ( object.isSkinnedMesh ) {\n\t\n\t    \t\t\t\t\tobject.skeleton.update();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\t\n\t    \t\t\t\t\tvar material = object.material;\n\t\n\t    \t\t\t\t\tif ( material.visible === true ) {\n\t\n\t    \t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\t\n\t    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t    \t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\tvar geometry = objects.update( object );\n\t\n\t    \t\t\t\t\t\tif ( material.isMultiMaterial ) {\n\t\n\t    \t\t\t\t\t\t\tvar groups = geometry.groups;\n\t    \t\t\t\t\t\t\tvar materials = material.materials;\n\t\n\t    \t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t    \t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\t\n\t    \t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar children = object.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tprojectObject( children[ i ], camera );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\t\n\t    \t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar renderItem = renderList[ i ];\n\t\n\t    \t\t\tvar object = renderItem.object;\n\t    \t\t\tvar geometry = renderItem.geometry;\n\t    \t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t    \t\t\tvar group = renderItem.group;\n\t\n\t    \t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t    \t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\t\n\t    \t\t\tif ( object.isImmediateRenderObject ) {\n\t\n\t    \t\t\t\tsetMaterial( material );\n\t\n\t    \t\t\t\tvar program = setProgram( camera, fog, material, object );\n\t\n\t    \t\t\t\t_currentGeometryProgram = '';\n\t\n\t    \t\t\t\tobject.render( function ( object ) {\n\t\n\t    \t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\t\n\t    \t\t\t\t} );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( object.onBeforeRender !== null ) object.onBeforeRender();\n\t\n\t    \t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction initMaterial( material, fog, object ) {\n\t\n\t    \t\tvar materialProperties = properties.get( material );\n\t\n\t    \t\tvar parameters = programCache.getParameters(\n\t    \t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\t\n\t    \t\tvar code = programCache.getProgramCode( material, parameters );\n\t\n\t    \t\tvar program = materialProperties.program;\n\t    \t\tvar programChange = true;\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\t// new material\n\t    \t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\t\n\t    \t\t} else if ( program.code !== code ) {\n\t\n\t    \t\t\t// changed glsl or parameters\n\t    \t\t\treleaseMaterialProgramReference( material );\n\t\n\t    \t\t} else if ( parameters.shaderID !== undefined ) {\n\t\n\t    \t\t\t// same glsl and uniform list\n\t    \t\t\treturn;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// only rebuild uniform list\n\t    \t\t\tprogramChange = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( programChange ) {\n\t\n\t    \t\t\tif ( parameters.shaderID ) {\n\t\n\t    \t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\t\n\t    \t\t\t\tmaterialProperties.__webglShader = {\n\t    \t\t\t\t\tname: material.type,\n\t    \t\t\t\t\tuniforms: exports.UniformsUtils.clone( shader.uniforms ),\n\t    \t\t\t\t\tvertexShader: shader.vertexShader,\n\t    \t\t\t\t\tfragmentShader: shader.fragmentShader\n\t    \t\t\t\t};\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tmaterialProperties.__webglShader = {\n\t    \t\t\t\t\tname: material.type,\n\t    \t\t\t\t\tuniforms: material.uniforms,\n\t    \t\t\t\t\tvertexShader: material.vertexShader,\n\t    \t\t\t\t\tfragmentShader: material.fragmentShader\n\t    \t\t\t\t};\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\t\n\t    \t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\t\n\t    \t\t\tmaterialProperties.program = program;\n\t    \t\t\tmaterial.program = program;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = program.getAttributes();\n\t\n\t    \t\tif ( material.morphTargets ) {\n\t\n\t    \t\t\tmaterial.numSupportedMorphTargets = 0;\n\t\n\t    \t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\t\n\t    \t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\t\n\t    \t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.morphNormals ) {\n\t\n\t    \t\t\tmaterial.numSupportedMorphNormals = 0;\n\t\n\t    \t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\t\n\t    \t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\t\n\t    \t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\t\n\t    \t\tif ( ! material.isShaderMaterial &&\n\t    \t\t     ! material.isRawShaderMaterial ||\n\t    \t\t       material.clipping === true ) {\n\t\n\t    \t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t    \t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\t\n\t    \t\t}\n\t\n\t    \t\tmaterialProperties.fog = fog;\n\t\n\t    \t\t// store the light setup it was created for\n\t\n\t    \t\tmaterialProperties.lightsHash = _lights.hash;\n\t\n\t    \t\tif ( material.lights ) {\n\t\n\t    \t\t\t// wire up the material to this renderer's lighting state\n\t\n\t    \t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n\t    \t\t\tuniforms.directionalLights.value = _lights.directional;\n\t    \t\t\tuniforms.spotLights.value = _lights.spot;\n\t    \t\t\tuniforms.pointLights.value = _lights.point;\n\t    \t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\t\n\t    \t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n\t    \t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n\t    \t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n\t    \t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n\t    \t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n\t    \t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t    \t\t\tuniformsList =\n\t    \t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\t\n\t    \t\tmaterialProperties.uniformsList = uniformsList;\n\t    \t\tmaterialProperties.dynamicUniforms =\n\t    \t\t\t\tWebGLUniforms.splitDynamic( uniformsList, uniforms );\n\t\n\t    \t}\n\t\n\t    \tfunction setMaterial( material ) {\n\t\n\t    \t\tmaterial.side === DoubleSide\n\t    \t\t\t? state.disable( _gl.CULL_FACE )\n\t    \t\t\t: state.enable( _gl.CULL_FACE );\n\t\n\t    \t\tstate.setFlipSided( material.side === BackSide );\n\t\n\t    \t\tmaterial.transparent === true\n\t    \t\t\t? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n\t    \t\t\t: state.setBlending( NoBlending );\n\t\n\t    \t\tstate.setDepthFunc( material.depthFunc );\n\t    \t\tstate.setDepthTest( material.depthTest );\n\t    \t\tstate.setDepthWrite( material.depthWrite );\n\t    \t\tstate.setColorWrite( material.colorWrite );\n\t    \t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\t\n\t    \t}\n\t\n\t    \tfunction setProgram( camera, fog, material, object ) {\n\t\n\t    \t\t_usedTextureUnits = 0;\n\t\n\t    \t\tvar materialProperties = properties.get( material );\n\t\n\t    \t\tif ( _clippingEnabled ) {\n\t\n\t    \t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\t\n\t    \t\t\t\tvar useCache =\n\t    \t\t\t\t\t\tcamera === _currentCamera &&\n\t    \t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\t\n\t    \t\t\t\t// we might want to call this function with some ClippingGroup\n\t    \t\t\t\t// object instead of the material, once it becomes feasible\n\t    \t\t\t\t// (#8465, #8379)\n\t    \t\t\t\t_clipping.setState(\n\t    \t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n\t    \t\t\t\t\t\tcamera, materialProperties, useCache );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.needsUpdate === false ) {\n\t\n\t    \t\t\tif ( materialProperties.program === undefined ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t    \t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.needsUpdate ) {\n\t\n\t    \t\t\tinitMaterial( material, fog, object );\n\t    \t\t\tmaterial.needsUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar refreshProgram = false;\n\t    \t\tvar refreshMaterial = false;\n\t    \t\tvar refreshLights = false;\n\t\n\t    \t\tvar program = materialProperties.program,\n\t    \t\t\tp_uniforms = program.getUniforms(),\n\t    \t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\t\n\t    \t\tif ( program.id !== _currentProgram ) {\n\t\n\t    \t\t\t_gl.useProgram( program.program );\n\t    \t\t\t_currentProgram = program.id;\n\t\n\t    \t\t\trefreshProgram = true;\n\t    \t\t\trefreshMaterial = true;\n\t    \t\t\trefreshLights = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.id !== _currentMaterialId ) {\n\t\n\t    \t\t\t_currentMaterialId = material.id;\n\t\n\t    \t\t\trefreshMaterial = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( refreshProgram || camera !== _currentCamera ) {\n\t\n\t    \t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\t\n\t    \t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\t\n\t    \t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t    \t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\t\n\t    \t\t\t}\n\t\n\t\n\t    \t\t\tif ( camera !== _currentCamera ) {\n\t\n\t    \t\t\t\t_currentCamera = camera;\n\t\n\t    \t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t    \t\t\t\t// now, in case this material supports lights - or later, when\n\t    \t\t\t\t// the next material that does gets activated:\n\t\n\t    \t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t    \t\t\t\trefreshLights = true;\t\t// remains set until update done\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// load material specific uniforms\n\t    \t\t\t// (shader material also gets them for the sake of genericity)\n\t\n\t    \t\t\tif ( material.isShaderMaterial ||\n\t    \t\t\t     material.isMeshPhongMaterial ||\n\t    \t\t\t     material.isMeshStandardMaterial ||\n\t    \t\t\t     material.envMap ) {\n\t\n\t    \t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\t\n\t    \t\t\t\tif ( uCamPos !== undefined ) {\n\t\n\t    \t\t\t\t\tuCamPos.setValue( _gl,\n\t    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( material.isMeshPhongMaterial ||\n\t    \t\t\t     material.isMeshLambertMaterial ||\n\t    \t\t\t     material.isMeshBasicMaterial ||\n\t    \t\t\t     material.isMeshStandardMaterial ||\n\t    \t\t\t     material.isShaderMaterial ||\n\t    \t\t\t     material.skinning ) {\n\t\n\t    \t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n\t    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\t\n\t    \t\t}\n\t\n\t    \t\t// skinning uniforms must be set even if material didn't change\n\t    \t\t// auto-setting of texture unit for bone texture must go before other textures\n\t    \t\t// not sure why, but otherwise weird things happen\n\t\n\t    \t\tif ( material.skinning ) {\n\t\n\t    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\t\n\t    \t\t\tvar skeleton = object.skeleton;\n\t\n\t    \t\t\tif ( skeleton ) {\n\t\n\t    \t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\t\n\t    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n\t    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n\t    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( refreshMaterial ) {\n\t\n\t    \t\t\tif ( material.lights ) {\n\t\n\t    \t\t\t\t// the current material requires lighting info\n\t\n\t    \t\t\t\t// note: all lighting uniforms are always set correctly\n\t    \t\t\t\t// they simply reference the renderer's state for their\n\t    \t\t\t\t// values\n\t    \t\t\t\t//\n\t    \t\t\t\t// use the current material's .needsUpdate flags to set\n\t    \t\t\t\t// the GL state when required\n\t\n\t    \t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// refresh uniforms common to several materials\n\t\n\t    \t\t\tif ( fog && material.fog ) {\n\t\n\t    \t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( material.isMeshBasicMaterial ||\n\t    \t\t\t     material.isMeshLambertMaterial ||\n\t    \t\t\t     material.isMeshPhongMaterial ||\n\t    \t\t\t     material.isMeshStandardMaterial ||\n\t    \t\t\t     material.isMeshDepthMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// refresh single material specific uniforms\n\t\n\t    \t\t\tif ( material.isLineBasicMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isLineDashedMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t    \t\t\t\trefreshUniformsDash( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isPointsMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshLambertMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshPhongMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshPhysicalMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshStandardMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshDepthMaterial ) {\n\t\n\t    \t\t\t\tif ( material.displacementMap ) {\n\t\n\t    \t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n\t    \t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n\t    \t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( material.isMeshNormalMaterial ) {\n\t\n\t    \t\t\t\tm_uniforms.opacity.value = material.opacity;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tWebGLUniforms.upload(\n\t    \t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\t// common matrices\n\t\n\t    \t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n\t    \t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n\t    \t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\t\n\t\n\t    \t\t// dynamic uniforms\n\t\n\t    \t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\t\n\t    \t\tif ( dynUniforms !== null ) {\n\t\n\t    \t\t\tWebGLUniforms.evalDynamic( dynUniforms, m_uniforms, object, material, camera );\n\t    \t\t\tWebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn program;\n\t\n\t    \t}\n\t\n\t    \t// Uniforms (refresh uniforms objects)\n\t\n\t    \tfunction refreshUniformsCommon( uniforms, material ) {\n\t\n\t    \t\tuniforms.opacity.value = material.opacity;\n\t\n\t    \t\tuniforms.diffuse.value = material.color;\n\t\n\t    \t\tif ( material.emissive ) {\n\t\n\t    \t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\t\n\t    \t\t}\n\t\n\t    \t\tuniforms.map.value = material.map;\n\t    \t\tuniforms.specularMap.value = material.specularMap;\n\t    \t\tuniforms.alphaMap.value = material.alphaMap;\n\t\n\t    \t\tif ( material.aoMap ) {\n\t\n\t    \t\t\tuniforms.aoMap.value = material.aoMap;\n\t    \t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\t// uv repeat and offset setting priorities\n\t    \t\t// 1. color map\n\t    \t\t// 2. specular map\n\t    \t\t// 3. normal map\n\t    \t\t// 4. bump map\n\t    \t\t// 5. alpha map\n\t    \t\t// 6. emissive map\n\t\n\t    \t\tvar uvScaleMap;\n\t\n\t    \t\tif ( material.map ) {\n\t\n\t    \t\t\tuvScaleMap = material.map;\n\t\n\t    \t\t} else if ( material.specularMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.specularMap;\n\t\n\t    \t\t} else if ( material.displacementMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.displacementMap;\n\t\n\t    \t\t} else if ( material.normalMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.normalMap;\n\t\n\t    \t\t} else if ( material.bumpMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.bumpMap;\n\t\n\t    \t\t} else if ( material.roughnessMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.roughnessMap;\n\t\n\t    \t\t} else if ( material.metalnessMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.metalnessMap;\n\t\n\t    \t\t} else if ( material.alphaMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.alphaMap;\n\t\n\t    \t\t} else if ( material.emissiveMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( uvScaleMap !== undefined ) {\n\t\n\t    \t\t\t// backwards compatibility\n\t    \t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\t\n\t    \t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar offset = uvScaleMap.offset;\n\t    \t\t\tvar repeat = uvScaleMap.repeat;\n\t\n\t    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\t\n\t    \t\t}\n\t\n\t    \t\tuniforms.envMap.value = material.envMap;\n\t\n\t    \t\t// don't flip CubeTexture envMaps, flip everything else:\n\t    \t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t    \t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t    \t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t    \t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\t\n\t    \t\tuniforms.reflectivity.value = material.reflectivity;\n\t    \t\tuniforms.refractionRatio.value = material.refractionRatio;\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsLine( uniforms, material ) {\n\t\n\t    \t\tuniforms.diffuse.value = material.color;\n\t    \t\tuniforms.opacity.value = material.opacity;\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsDash( uniforms, material ) {\n\t\n\t    \t\tuniforms.dashSize.value = material.dashSize;\n\t    \t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t    \t\tuniforms.scale.value = material.scale;\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsPoints( uniforms, material ) {\n\t\n\t    \t\tuniforms.diffuse.value = material.color;\n\t    \t\tuniforms.opacity.value = material.opacity;\n\t    \t\tuniforms.size.value = material.size * _pixelRatio;\n\t    \t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\t\n\t    \t\tuniforms.map.value = material.map;\n\t\n\t    \t\tif ( material.map !== null ) {\n\t\n\t    \t\t\tvar offset = material.map.offset;\n\t    \t\t\tvar repeat = material.map.repeat;\n\t\n\t    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsFog( uniforms, fog ) {\n\t\n\t    \t\tuniforms.fogColor.value = fog.color;\n\t\n\t    \t\tif ( fog.isFog ) {\n\t\n\t    \t\t\tuniforms.fogNear.value = fog.near;\n\t    \t\t\tuniforms.fogFar.value = fog.far;\n\t\n\t    \t\t} else if ( fog.isFogExp2 ) {\n\t\n\t    \t\t\tuniforms.fogDensity.value = fog.density;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsLambert( uniforms, material ) {\n\t\n\t    \t\tif ( material.lightMap ) {\n\t\n\t    \t\t\tuniforms.lightMap.value = material.lightMap;\n\t    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.emissiveMap ) {\n\t\n\t    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsPhong( uniforms, material ) {\n\t\n\t    \t\tuniforms.specular.value = material.specular;\n\t    \t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\t\n\t    \t\tif ( material.lightMap ) {\n\t\n\t    \t\t\tuniforms.lightMap.value = material.lightMap;\n\t    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.emissiveMap ) {\n\t\n\t    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.bumpMap ) {\n\t\n\t    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.normalMap ) {\n\t\n\t    \t\t\tuniforms.normalMap.value = material.normalMap;\n\t    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.displacementMap ) {\n\t\n\t    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsStandard( uniforms, material ) {\n\t\n\t    \t\tuniforms.roughness.value = material.roughness;\n\t    \t\tuniforms.metalness.value = material.metalness;\n\t\n\t    \t\tif ( material.roughnessMap ) {\n\t\n\t    \t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.metalnessMap ) {\n\t\n\t    \t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.lightMap ) {\n\t\n\t    \t\t\tuniforms.lightMap.value = material.lightMap;\n\t    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.emissiveMap ) {\n\t\n\t    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.bumpMap ) {\n\t\n\t    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.normalMap ) {\n\t\n\t    \t\t\tuniforms.normalMap.value = material.normalMap;\n\t    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.displacementMap ) {\n\t\n\t    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.envMap ) {\n\t\n\t    \t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t    \t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsPhysical( uniforms, material ) {\n\t\n\t    \t\tuniforms.clearCoat.value = material.clearCoat;\n\t    \t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\t\n\t    \t\trefreshUniformsStandard( uniforms, material );\n\t\n\t    \t}\n\t\n\t    \t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\t\n\t    \tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\t\n\t    \t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\n\t    \t\tuniforms.directionalLights.needsUpdate = value;\n\t    \t\tuniforms.pointLights.needsUpdate = value;\n\t    \t\tuniforms.spotLights.needsUpdate = value;\n\t    \t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\n\t    \t}\n\t\n\t    \t// Lighting\n\t\n\t    \tfunction setupShadows( lights ) {\n\t\n\t    \t\tvar lightShadowsLength = 0;\n\t\n\t    \t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar light = lights[ i ];\n\t\n\t    \t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t_lights.shadows.length = lightShadowsLength;\n\t\n\t    \t}\n\t\n\t    \tfunction setupLights( lights, camera ) {\n\t\n\t    \t\tvar l, ll, light,\n\t    \t\tr = 0, g = 0, b = 0,\n\t    \t\tcolor,\n\t    \t\tintensity,\n\t    \t\tdistance,\n\t    \t\tshadowMap,\n\t\n\t    \t\tviewMatrix = camera.matrixWorldInverse,\n\t\n\t    \t\tdirectionalLength = 0,\n\t    \t\tpointLength = 0,\n\t    \t\tspotLength = 0,\n\t    \t\themiLength = 0;\n\t\n\t    \t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\t\n\t    \t\t\tlight = lights[ l ];\n\t\n\t    \t\t\tcolor = light.color;\n\t    \t\t\tintensity = light.intensity;\n\t    \t\t\tdistance = light.distance;\n\t\n\t    \t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\t\n\t    \t\t\tif ( light.isAmbientLight ) {\n\t\n\t    \t\t\t\tr += color.r * intensity;\n\t    \t\t\t\tg += color.g * intensity;\n\t    \t\t\t\tb += color.b * intensity;\n\t\n\t    \t\t\t} else if ( light.isDirectionalLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t    \t\t\t\tuniforms.direction.sub( _vector3 );\n\t    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t    \t\t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n\t    \t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t    \t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\t\n\t    \t\t\t} else if ( light.isSpotLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t    \t\t\t\tuniforms.distance = distance;\n\t\n\t    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t    \t\t\t\tuniforms.direction.sub( _vector3 );\n\t    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t    \t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\t\n\t    \t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t    \t\t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n\t    \t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t    \t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\t\n\t    \t\t\t} else if ( light.isPointLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t    \t\t\t\tuniforms.distance = light.distance;\n\t    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\t\n\t    \t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t    \t\t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\t\n\t    \t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\t\n\t    \t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new Matrix4();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t    \t\t\t\t// equal to inverse of the light's position\n\t    \t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n\t    \t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\t\n\t    \t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\t\n\t    \t\t\t} else if ( light.isHemisphereLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t    \t\t\t\tuniforms.direction.normalize();\n\t\n\t    \t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t    \t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\t\n\t    \t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t_lights.ambient[ 0 ] = r;\n\t    \t\t_lights.ambient[ 1 ] = g;\n\t    \t\t_lights.ambient[ 2 ] = b;\n\t\n\t    \t\t_lights.directional.length = directionalLength;\n\t    \t\t_lights.spot.length = spotLength;\n\t    \t\t_lights.point.length = pointLength;\n\t    \t\t_lights.hemi.length = hemiLength;\n\t\n\t    \t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\t\n\t    \t}\n\t\n\t    \t// GL state setting\n\t\n\t    \tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\t\n\t    \t\tstate.setCullFace( cullFace );\n\t    \t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\t\n\t    \t};\n\t\n\t    \t// Textures\n\t\n\t    \tfunction allocTextureUnit() {\n\t\n\t    \t\tvar textureUnit = _usedTextureUnits;\n\t\n\t    \t\tif ( textureUnit >= capabilities.maxTextures ) {\n\t\n\t    \t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\t\n\t    \t\t}\n\t\n\t    \t\t_usedTextureUnits += 1;\n\t\n\t    \t\treturn textureUnit;\n\t\n\t    \t}\n\t\n\t    \tthis.allocTextureUnit = allocTextureUnit;\n\t\n\t    \t// this.setTexture2D = setTexture2D;\n\t    \tthis.setTexture2D = ( function() {\n\t\n\t    \t\tvar warned = false;\n\t\n\t    \t\t// backwards compatibility: peel texture.texture\n\t    \t\treturn function setTexture2D( texture, slot ) {\n\t\n\t    \t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\t\n\t    \t\t\t\tif ( ! warned ) {\n\t\n\t    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t    \t\t\t\t\twarned = true;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture = texture.texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttextures.setTexture2D( texture, slot );\n\t\n\t    \t\t};\n\t\n\t    \t}() );\n\t\n\t    \tthis.setTexture = ( function() {\n\t\n\t    \t\tvar warned = false;\n\t\n\t    \t\treturn function setTexture( texture, slot ) {\n\t\n\t    \t\t\tif ( ! warned ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t    \t\t\t\twarned = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttextures.setTexture2D( texture, slot );\n\t\n\t    \t\t};\n\t\n\t    \t}() );\n\t\n\t    \tthis.setTextureCube = ( function() {\n\t\n\t    \t\tvar warned = false;\n\t\n\t    \t\treturn function setTextureCube( texture, slot ) {\n\t\n\t    \t\t\t// backwards compatibility: peel texture.texture\n\t    \t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\t\n\t    \t\t\t\tif ( ! warned ) {\n\t\n\t    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t    \t\t\t\t\twarned = true;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture = texture.texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t    \t\t\t// TODO: unify these code paths\n\t    \t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t    \t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\t\n\t    \t\t\t\t// CompressedTexture can have Array in image :/\n\t\n\t    \t\t\t\t// this function alone should take care of cube textures\n\t    \t\t\t\ttextures.setTextureCube( texture, slot );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\t\n\t    \t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() );\n\t\n\t    \tthis.getCurrentRenderTarget = function() {\n\t\n\t    \t\treturn _currentRenderTarget;\n\t\n\t    \t};\n\t\n\t    \tthis.setRenderTarget = function ( renderTarget ) {\n\t\n\t    \t\t_currentRenderTarget = renderTarget;\n\t\n\t    \t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\t\n\t    \t\t\ttextures.setupRenderTarget( renderTarget );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t    \t\tvar framebuffer;\n\t\n\t    \t\tif ( renderTarget ) {\n\t\n\t    \t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\n\t    \t\t\tif ( isCube ) {\n\t\n\t    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t_currentScissor.copy( renderTarget.scissor );\n\t    \t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\n\t    \t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tframebuffer = null;\n\t\n\t    \t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t    \t\t\t_currentScissorTest = _scissorTest;\n\t\n\t    \t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( _currentFramebuffer !== framebuffer ) {\n\t\n\t    \t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t    \t\t\t_currentFramebuffer = framebuffer;\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.scissor( _currentScissor );\n\t    \t\tstate.setScissorTest( _currentScissorTest );\n\t\n\t    \t\tstate.viewport( _currentViewport );\n\t\n\t    \t\tif ( isCube ) {\n\t\n\t    \t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\t\n\t    \t\tif ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\t\n\t    \t\tif ( framebuffer ) {\n\t\n\t    \t\t\tvar restore = false;\n\t\n\t    \t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\t\n\t    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\n\t    \t\t\t\trestore = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttry {\n\t\n\t    \t\t\t\tvar texture = renderTarget.texture;\n\t    \t\t\t\tvar textureFormat = texture.format;\n\t    \t\t\t\tvar textureType = texture.type;\n\t\n\t    \t\t\t\tif ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t    \t\t\t\t     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t    \t\t\t\t     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\t\n\t    \t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\n\t    \t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\t\n\t    \t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} finally {\n\t\n\t    \t\t\t\tif ( restore ) {\n\t\n\t    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \t// Map three.js constants to WebGL constants\n\t\n\t    \tfunction paramThreeToGL( p ) {\n\t\n\t    \t\tvar extension;\n\t\n\t    \t\tif ( p === RepeatWrapping ) return _gl.REPEAT;\n\t    \t\tif ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t    \t\tif ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\t\n\t    \t\tif ( p === NearestFilter ) return _gl.NEAREST;\n\t    \t\tif ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t    \t\tif ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\t\n\t    \t\tif ( p === LinearFilter ) return _gl.LINEAR;\n\t    \t\tif ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t    \t\tif ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\t\n\t    \t\tif ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t    \t\tif ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t    \t\tif ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t    \t\tif ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\t\n\t    \t\tif ( p === ByteType ) return _gl.BYTE;\n\t    \t\tif ( p === ShortType ) return _gl.SHORT;\n\t    \t\tif ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t    \t\tif ( p === IntType ) return _gl.INT;\n\t    \t\tif ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t    \t\tif ( p === FloatType ) return _gl.FLOAT;\n\t\n\t    \t\textension = extensions.get( 'OES_texture_half_float' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === HalfFloatType ) return extension.HALF_FLOAT_OES;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( p === AlphaFormat ) return _gl.ALPHA;\n\t    \t\tif ( p === RGBFormat ) return _gl.RGB;\n\t    \t\tif ( p === RGBAFormat ) return _gl.RGBA;\n\t    \t\tif ( p === LuminanceFormat ) return _gl.LUMINANCE;\n\t    \t\tif ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\t    \t\tif ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;\n\t    \t\tif ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;\n\t\n\t    \t\tif ( p === AddEquation ) return _gl.FUNC_ADD;\n\t    \t\tif ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t    \t\tif ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\t\n\t    \t\tif ( p === ZeroFactor ) return _gl.ZERO;\n\t    \t\tif ( p === OneFactor ) return _gl.ONE;\n\t    \t\tif ( p === SrcColorFactor ) return _gl.SRC_COLOR;\n\t    \t\tif ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t    \t\tif ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t    \t\tif ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t    \t\tif ( p === DstAlphaFactor ) return _gl.DST_ALPHA;\n\t    \t\tif ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\t\n\t    \t\tif ( p === DstColorFactor ) return _gl.DST_COLOR;\n\t    \t\tif ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t    \t\tif ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\t\n\t    \t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t    \t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t    \t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t    \t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t    \t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t    \t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t    \t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'EXT_blend_minmax' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t    \t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'WEBGL_depth_texture' );\n\t\n\t    \t\tif ( extension !== null ){\n\t\n\t    \t\t\tif ( p === UnsignedInt248Type ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn 0;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function FogExp2 ( color, density ) {\n\t\n\t    \tthis.name = '';\n\t\n\t    \tthis.color = new Color( color );\n\t    \tthis.density = ( density !== undefined ) ? density : 0.00025;\n\t\n\t    }\n\t\n\t    FogExp2.prototype.isFogExp2 = true;\n\t\n\t    FogExp2.prototype.clone = function () {\n\t\n\t    \treturn new FogExp2( this.color.getHex(), this.density );\n\t\n\t    };\n\t\n\t    FogExp2.prototype.toJSON = function ( meta ) {\n\t\n\t    \treturn {\n\t    \t\ttype: 'FogExp2',\n\t    \t\tcolor: this.color.getHex(),\n\t    \t\tdensity: this.density\n\t    \t};\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Fog ( color, near, far ) {\n\t\n\t    \tthis.name = '';\n\t\n\t    \tthis.color = new Color( color );\n\t\n\t    \tthis.near = ( near !== undefined ) ? near : 1;\n\t    \tthis.far = ( far !== undefined ) ? far : 1000;\n\t\n\t    }\n\t\n\t    Fog.prototype.isFog = true;\n\t\n\t    Fog.prototype.clone = function () {\n\t\n\t    \treturn new Fog( this.color.getHex(), this.near, this.far );\n\t\n\t    };\n\t\n\t    Fog.prototype.toJSON = function ( meta ) {\n\t\n\t    \treturn {\n\t    \t\ttype: 'Fog',\n\t    \t\tcolor: this.color.getHex(),\n\t    \t\tnear: this.near,\n\t    \t\tfar: this.far\n\t    \t};\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Scene () {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Scene';\n\t\n\t    \tthis.background = null;\n\t    \tthis.fog = null;\n\t    \tthis.overrideMaterial = null;\n\t\n\t    \tthis.autoUpdate = true; // checked by the renderer\n\t\n\t    }\n\t\n\t    Scene.prototype = Object.create( Object3D.prototype );\n\t\n\t    Scene.prototype.constructor = Scene;\n\t\n\t    Scene.prototype.copy = function ( source, recursive ) {\n\t\n\t    \tObject3D.prototype.copy.call( this, source, recursive );\n\t\n\t    \tif ( source.background !== null ) this.background = source.background.clone();\n\t    \tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t    \tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\t\n\t    \tthis.autoUpdate = source.autoUpdate;\n\t    \tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    Scene.prototype.toJSON = function ( meta ) {\n\t\n\t    \tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t    \tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\t\n\t    \treturn data;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function LensFlare( texture, size, distance, blending, color ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.lensFlares = [];\n\t\n\t    \tthis.positionScreen = new Vector3();\n\t    \tthis.customUpdateCallback = undefined;\n\t\n\t    \tif ( texture !== undefined ) {\n\t\n\t    \t\tthis.add( texture, size, distance, blending, color );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: LensFlare,\n\t\n\t    \tisLensFlare: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.positionScreen.copy( source.positionScreen );\n\t    \t\tthis.customUpdateCallback = source.customUpdateCallback;\n\t\n\t    \t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( texture, size, distance, blending, color, opacity ) {\n\t\n\t    \t\tif ( size === undefined ) size = - 1;\n\t    \t\tif ( distance === undefined ) distance = 0;\n\t    \t\tif ( opacity === undefined ) opacity = 1;\n\t    \t\tif ( color === undefined ) color = new Color( 0xffffff );\n\t    \t\tif ( blending === undefined ) blending = NormalBlending;\n\t\n\t    \t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\t\n\t    \t\tthis.lensFlares.push( {\n\t    \t\t\ttexture: texture,\t// THREE.Texture\n\t    \t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t    \t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t    \t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t    \t\t\tscale: 1, \t\t// scale\n\t    \t\t\trotation: 0, \t\t// rotation\n\t    \t\t\topacity: opacity,\t// opacity\n\t    \t\t\tcolor: color,\t\t// color\n\t    \t\t\tblending: blending\t// blending\n\t    \t\t} );\n\t\n\t    \t},\n\t\n\t    \t/*\n\t    \t * Update lens flares update positions on all flares based on the screen position\n\t    \t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t    \t */\n\t\n\t    \tupdateLensFlares: function () {\n\t\n\t    \t\tvar f, fl = this.lensFlares.length;\n\t    \t\tvar flare;\n\t    \t\tvar vecX = - this.positionScreen.x * 2;\n\t    \t\tvar vecY = - this.positionScreen.y * 2;\n\t\n\t    \t\tfor ( f = 0; f < fl; f ++ ) {\n\t\n\t    \t\t\tflare = this.lensFlares[ f ];\n\t\n\t    \t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t    \t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\t\n\t    \t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t    \t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *\tuvOffset: new THREE.Vector2(),\n\t     *\tuvScale: new THREE.Vector2()\n\t     * }\n\t     */\n\t\n\t    function SpriteMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'SpriteMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t    \tthis.map = null;\n\t\n\t    \tthis.rotation = 0;\n\t\n\t    \tthis.fog = false;\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    SpriteMaterial.prototype = Object.create( Material.prototype );\n\t    SpriteMaterial.prototype.constructor = SpriteMaterial;\n\t\n\t    SpriteMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.rotation = source.rotation;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Sprite( material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Sprite';\n\t\n\t    \tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\t\n\t    }\n\t\n\t    Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Sprite,\n\t\n\t    \tisSprite: true,\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar matrixPosition = new Vector3();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n\t    \t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\t\n\t    \t\t\tif ( distanceSq > guessSizeSq ) {\n\t\n\t    \t\t\t\treturn;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tintersects.push( {\n\t\n\t    \t\t\t\tdistance: Math.sqrt( distanceSq ),\n\t    \t\t\t\tpoint: this.position,\n\t    \t\t\t\tface: null,\n\t    \t\t\t\tobject: this\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LOD() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'LOD';\n\t\n\t    \tObject.defineProperties( this, {\n\t    \t\tlevels: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: []\n\t    \t\t}\n\t    \t} );\n\t\n\t    }\n\t\n\t\n\t    LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: LOD,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source, false );\n\t\n\t    \t\tvar levels = source.levels;\n\t\n\t    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar level = levels[ i ];\n\t\n\t    \t\t\tthis.addLevel( level.object.clone(), level.distance );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddLevel: function ( object, distance ) {\n\t\n\t    \t\tif ( distance === undefined ) distance = 0;\n\t\n\t    \t\tdistance = Math.abs( distance );\n\t\n\t    \t\tvar levels = this.levels;\n\t\n\t    \t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\t\n\t    \t\t\tif ( distance < levels[ l ].distance ) {\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\t\n\t    \t\tthis.add( object );\n\t\n\t    \t},\n\t\n\t    \tgetObjectForDistance: function ( distance ) {\n\t\n\t    \t\tvar levels = this.levels;\n\t\n\t    \t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\tif ( distance < levels[ i ].distance ) {\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn levels[ i - 1 ].object;\n\t\n\t    \t},\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar matrixPosition = new Vector3();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\t\n\t    \t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tupdate: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t    \t\tvar v2 = new Vector3();\n\t\n\t    \t\treturn function update( camera ) {\n\t\n\t    \t\t\tvar levels = this.levels;\n\t\n\t    \t\t\tif ( levels.length > 1 ) {\n\t\n\t    \t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t    \t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\t\tvar distance = v1.distanceTo( v2 );\n\t\n\t    \t\t\t\tlevels[ 0 ].object.visible = true;\n\t\n\t    \t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\t\n\t    \t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t    \t\t\t\t\t\tlevels[ i ].object.visible = true;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( ; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tlevels[ i ].object.visible = false;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.levels = [];\n\t\n\t    \t\tvar levels = this.levels;\n\t\n\t    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar level = levels[ i ];\n\t\n\t    \t\t\tdata.object.levels.push( {\n\t    \t\t\t\tobject: level.object.uuid,\n\t    \t\t\t\tdistance: level.distance\n\t    \t\t\t} );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\t\n\t    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t    \tthis.image = { data: data, width: width, height: height };\n\t\n\t    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\n\t    \tthis.flipY = false;\n\t    \tthis.generateMipmaps  = false;\n\t\n\t    }\n\t\n\t    DataTexture.prototype = Object.create( Texture.prototype );\n\t    DataTexture.prototype.constructor = DataTexture;\n\t\n\t    DataTexture.prototype.isDataTexture = true;\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author michael guerrero / http://realitymeltdown.com\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function Skeleton( bones, boneInverses, useVertexTexture ) {\n\t\n\t    \tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\t\n\t    \tthis.identityMatrix = new Matrix4();\n\t\n\t    \t// copy the bone array\n\t\n\t    \tbones = bones || [];\n\t\n\t    \tthis.bones = bones.slice( 0 );\n\t\n\t    \t// create a bone texture or an array of floats\n\t\n\t    \tif ( this.useVertexTexture ) {\n\t\n\t    \t\t// layout (1 matrix = 4 pixels)\n\t    \t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t    \t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t    \t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t    \t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t    \t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\n\t\n\t    \t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t    \t\tsize = exports.Math.nextPowerOfTwo( Math.ceil( size ) );\n\t    \t\tsize = Math.max( size, 4 );\n\t\n\t    \t\tthis.boneTextureWidth = size;\n\t    \t\tthis.boneTextureHeight = size;\n\t\n\t    \t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n\t    \t\tthis.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );\n\t\n\t    \t} else {\n\t\n\t    \t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\t\n\t    \t}\n\t\n\t    \t// use the supplied bone inverses or calculate the inverses\n\t\n\t    \tif ( boneInverses === undefined ) {\n\t\n\t    \t\tthis.calculateInverses();\n\t\n\t    \t} else {\n\t\n\t    \t\tif ( this.bones.length === boneInverses.length ) {\n\t\n\t    \t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\t\n\t    \t\t\tthis.boneInverses = [];\n\t\n\t    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\t\tthis.boneInverses.push( new Matrix4() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Object.assign( Skeleton.prototype, {\n\t\n\t    \tcalculateInverses: function () {\n\t\n\t    \t\tthis.boneInverses = [];\n\t\n\t    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\tvar inverse = new Matrix4();\n\t\n\t    \t\t\tif ( this.bones[ b ] ) {\n\t\n\t    \t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.boneInverses.push( inverse );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tpose: function () {\n\t\n\t    \t\tvar bone;\n\t\n\t    \t\t// recover the bind-time world matrices\n\t\n\t    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\tbone = this.bones[ b ];\n\t\n\t    \t\t\tif ( bone ) {\n\t\n\t    \t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// compute the local matrices, positions, rotations and scales\n\t\n\t    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\tbone = this.bones[ b ];\n\t\n\t    \t\t\tif ( bone ) {\n\t\n\t    \t\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t    \t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t    \t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tupdate: ( function () {\n\t\n\t    \t\tvar offsetMatrix = new Matrix4();\n\t\n\t    \t\treturn function update() {\n\t\n\t    \t\t\t// flatten bone matrices to array\n\t\n\t    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\t\t// compute the offset between the current and the original transform\n\t\n\t    \t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\t\n\t    \t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n\t    \t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( this.useVertexTexture ) {\n\t\n\t    \t\t\t\tthis.boneTexture.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function Bone( skin ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Bone';\n\t\n\t    \tthis.skin = skin;\n\t\n\t    }\n\t\n\t    Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Bone,\n\t\n\t    \tisBone: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.skin = source.skin;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function SkinnedMesh( geometry, material, useVertexTexture ) {\n\t\n\t    \tMesh.call( this, geometry, material );\n\t\n\t    \tthis.type = 'SkinnedMesh';\n\t\n\t    \tthis.bindMode = \"attached\";\n\t    \tthis.bindMatrix = new Matrix4();\n\t    \tthis.bindMatrixInverse = new Matrix4();\n\t\n\t    \t// init bones\n\t\n\t    \t// TODO: remove bone creation as there is no reason (other than\n\t    \t// convenience) for THREE.SkinnedMesh to do this.\n\t\n\t    \tvar bones = [];\n\t\n\t    \tif ( this.geometry && this.geometry.bones !== undefined ) {\n\t\n\t    \t\tvar bone, gbone;\n\t\n\t    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\t\n\t    \t\t\tgbone = this.geometry.bones[ b ];\n\t\n\t    \t\t\tbone = new Bone( this );\n\t    \t\t\tbones.push( bone );\n\t\n\t    \t\t\tbone.name = gbone.name;\n\t    \t\t\tbone.position.fromArray( gbone.pos );\n\t    \t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t    \t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\t\n\t    \t\t\tgbone = this.geometry.bones[ b ];\n\t\n\t    \t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n\t    \t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\t\n\t    \t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis.add( bones[ b ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.normalizeSkinWeights();\n\t\n\t    \tthis.updateMatrixWorld( true );\n\t    \tthis.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\t\n\t    }\n\t\n\t\n\t    SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\t\n\t    \tconstructor: SkinnedMesh,\n\t\n\t    \tisSkinnedMesh: true,\n\t\n\t    \tbind: function( skeleton, bindMatrix ) {\n\t\n\t    \t\tthis.skeleton = skeleton;\n\t\n\t    \t\tif ( bindMatrix === undefined ) {\n\t\n\t    \t\t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.skeleton.calculateInverses();\n\t\n\t    \t\t\tbindMatrix = this.matrixWorld;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.bindMatrix.copy( bindMatrix );\n\t    \t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\t\n\t    \t},\n\t\n\t    \tpose: function () {\n\t\n\t    \t\tthis.skeleton.pose();\n\t\n\t    \t},\n\t\n\t    \tnormalizeSkinWeights: function () {\n\t\n\t    \t\tif ( (this.geometry && this.geometry.isGeometry) ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\t\n\t    \t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\t\n\t    \t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\t\n\t    \t\t\t\tif ( scale !== Infinity ) {\n\t\n\t    \t\t\t\t\tsw.multiplyScalar( scale );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\tvar vec = new Vector4();\n\t\n\t    \t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\t\n\t    \t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\t\n\t    \t\t\t\tvec.x = skinWeight.getX( i );\n\t    \t\t\t\tvec.y = skinWeight.getY( i );\n\t    \t\t\t\tvec.z = skinWeight.getZ( i );\n\t    \t\t\t\tvec.w = skinWeight.getW( i );\n\t\n\t    \t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\t\n\t    \t\t\t\tif ( scale !== Infinity ) {\n\t\n\t    \t\t\t\t\tvec.multiplyScalar( scale );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: function( force ) {\n\t\n\t    \t\tMesh.prototype.updateMatrixWorld.call( this, true );\n\t\n\t    \t\tif ( this.bindMode === \"attached\" ) {\n\t\n\t    \t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\t\n\t    \t\t} else if ( this.bindMode === \"detached\" ) {\n\t\n\t    \t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function() {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  linewidth: <float>,\n\t     *  linecap: \"round\",\n\t     *  linejoin: \"round\"\n\t     * }\n\t     */\n\t\n\t    function LineBasicMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'LineBasicMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t\n\t    \tthis.linewidth = 1;\n\t    \tthis.linecap = 'round';\n\t    \tthis.linejoin = 'round';\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    LineBasicMaterial.prototype = Object.create( Material.prototype );\n\t    LineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\t\n\t    LineBasicMaterial.prototype.isLineBasicMaterial = true;\n\t\n\t    LineBasicMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.linewidth = source.linewidth;\n\t    \tthis.linecap = source.linecap;\n\t    \tthis.linejoin = source.linejoin;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Line( geometry, material, mode ) {\n\t\n\t    \tif ( mode === 1 ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t    \t\treturn new LineSegments( geometry, material );\n\t\n\t    \t}\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Line';\n\t\n\t    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t    \tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t    }\n\t\n\t    Line.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Line,\n\t\n\t    \tisLine: true,\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar inverseMatrix = new Matrix4();\n\t    \t\tvar ray = new Ray();\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tvar precision = raycaster.linePrecision;\n\t    \t\t\tvar precisionSq = precision * precision;\n\t\n\t    \t\t\tvar geometry = this.geometry;\n\t    \t\t\tvar matrixWorld = this.matrixWorld;\n\t\n\t    \t\t\t// Checking boundingSphere distance to ray\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere );\n\t    \t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tinverseMatrix.getInverse( matrixWorld );\n\t    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t    \t\t\tvar vStart = new Vector3();\n\t    \t\t\tvar vEnd = new Vector3();\n\t    \t\t\tvar interSegment = new Vector3();\n\t    \t\t\tvar interRay = new Vector3();\n\t    \t\t\tvar step = (this && this.isLineSegments) ? 2 : 1;\n\t\n\t    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\tvar index = geometry.index;\n\t    \t\t\t\tvar attributes = geometry.attributes;\n\t    \t\t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\t\n\t    \t\t\t\t\t\tvar a = indices[ i ];\n\t    \t\t\t\t\t\tvar b = indices[ i + 1 ];\n\t\n\t    \t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t    \t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\t\n\t    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\t\n\t    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t    \t\t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t    \t\t\t\t\t\t\tindex: i,\n\t    \t\t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\t\tfaceIndex: null,\n\t    \t\t\t\t\t\t\tobject: this\n\t\n\t    \t\t\t\t\t\t} );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\t\n\t    \t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t    \t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\t\n\t    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\t\n\t    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t    \t\t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t    \t\t\t\t\t\t\tindex: i,\n\t    \t\t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\t\tfaceIndex: null,\n\t    \t\t\t\t\t\t\tobject: this\n\t\n\t    \t\t\t\t\t\t} );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\tvar vertices = geometry.vertices;\n\t    \t\t\t\tvar nbVertices = vertices.length;\n\t\n\t    \t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\t\n\t    \t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\t\n\t    \t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t    \t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t    \t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t    \t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t    \t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t    \t\t\t\t\t\tindex: i,\n\t    \t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\tfaceIndex: null,\n\t    \t\t\t\t\t\tobject: this\n\t\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LineSegments( geometry, material ) {\n\t\n\t    \tLine.call( this, geometry, material );\n\t\n\t    \tthis.type = 'LineSegments';\n\t\n\t    }\n\t\n\t    LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\t\n\t    \tconstructor: LineSegments,\n\t\n\t    \tisLineSegments: true\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  size: <float>,\n\t     *  sizeAttenuation: <bool>\n\t     * }\n\t     */\n\t\n\t    function PointsMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'PointsMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.size = 1;\n\t    \tthis.sizeAttenuation = true;\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    PointsMaterial.prototype = Object.create( Material.prototype );\n\t    PointsMaterial.prototype.constructor = PointsMaterial;\n\t\n\t    PointsMaterial.prototype.isPointsMaterial = true;\n\t\n\t    PointsMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.size = source.size;\n\t    \tthis.sizeAttenuation = source.sizeAttenuation;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Points( geometry, material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Points';\n\t\n\t    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t    \tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t    }\n\t\n\t    Points.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Points,\n\t\n\t    \tisPoints: true,\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar inverseMatrix = new Matrix4();\n\t    \t\tvar ray = new Ray();\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tvar object = this;\n\t    \t\t\tvar geometry = this.geometry;\n\t    \t\t\tvar matrixWorld = this.matrixWorld;\n\t    \t\t\tvar threshold = raycaster.params.Points.threshold;\n\t\n\t    \t\t\t// Checking boundingSphere distance to ray\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere );\n\t    \t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tinverseMatrix.getInverse( matrixWorld );\n\t    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t    \t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t    \t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t    \t\t\tvar position = new Vector3();\n\t\n\t    \t\t\tfunction testPoint( point, index ) {\n\t\n\t    \t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\t\n\t    \t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\t\n\t    \t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t    \t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\t\n\t    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\t\n\t    \t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t    \t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t    \t\t\t\t\t\tindex: index,\n\t    \t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\tobject: object\n\t\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\tvar index = geometry.index;\n\t    \t\t\t\tvar attributes = geometry.attributes;\n\t    \t\t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\t\tvar a = indices[ i ];\n\t\n\t    \t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\t\n\t    \t\t\t\t\t\ttestPoint( position, a );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\t\n\t    \t\t\t\t\t\ttestPoint( position, i );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar vertices = geometry.vertices;\n\t\n\t    \t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\ttestPoint( vertices[ i ], i );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Group() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Group';\n\t\n\t    }\n\t\n\t    Group.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Group\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\t\n\t    \tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t    \tthis.generateMipmaps = false;\n\t\n\t    \tvar scope = this;\n\t\n\t    \tfunction update() {\n\t\n\t    \t\trequestAnimationFrame( update );\n\t\n\t    \t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\t\n\t    \t\t\tscope.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tupdate();\n\t\n\t    }\n\t\n\t    VideoTexture.prototype = Object.create( Texture.prototype );\n\t    VideoTexture.prototype.constructor = VideoTexture;\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\t\n\t    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t    \tthis.image = { width: width, height: height };\n\t    \tthis.mipmaps = mipmaps;\n\t\n\t    \t// no flipping for cube textures\n\t    \t// (also flipping doesn't work for compressed textures )\n\t\n\t    \tthis.flipY = false;\n\t\n\t    \t// can't generate mipmaps for compressed textures\n\t    \t// mips must be embedded in DDS files\n\t\n\t    \tthis.generateMipmaps = false;\n\t\n\t    }\n\t\n\t    CompressedTexture.prototype = Object.create( Texture.prototype );\n\t    CompressedTexture.prototype.constructor = CompressedTexture;\n\t\n\t    CompressedTexture.prototype.isCompressedTexture = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\t\n\t    \tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t    \tthis.needsUpdate = true;\n\t\n\t    }\n\t\n\t    CanvasTexture.prototype = Object.create( Texture.prototype );\n\t    CanvasTexture.prototype.constructor = CanvasTexture;\n\t\n\t    /**\n\t     * @author Matt DesLauriers / @mattdesl\n\t     * @author atix / arthursilber.de\n\t     */\n\t\n\t    function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\t\n\t    \tformat = format !== undefined ? format : DepthFormat;\n\t\n\t    \tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\t\n\t    \t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )\n\t\n\t    \t}\n\t\n\t    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t    \tthis.image = { width: width, height: height };\n\t\n\t    \tthis.type = type !== undefined ? type : UnsignedShortType;\n\t\n\t    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\n\t    \tthis.flipY = false;\n\t    \tthis.generateMipmaps\t= false;\n\t\n\t    }\n\t\n\t    DepthTexture.prototype = Object.create( Texture.prototype );\n\t    DepthTexture.prototype.constructor = DepthTexture;\n\t    DepthTexture.prototype.isDepthTexture = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WireframeGeometry( geometry ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tvar edge = [ 0, 0 ], hash = {};\n\t\n\t    \tfunction sortFunction( a, b ) {\n\t\n\t    \t\treturn a - b;\n\t\n\t    \t}\n\t\n\t    \tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t    \tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\tvar vertices = geometry.vertices;\n\t    \t\tvar faces = geometry.faces;\n\t    \t\tvar numEdges = 0;\n\t\n\t    \t\t// allocate maximal size\n\t    \t\tvar edges = new Uint32Array( 6 * faces.length );\n\t\n\t    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t    \t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t    \t\t\t\tedge.sort( sortFunction );\n\t\n\t    \t\t\t\tvar key = edge.toString();\n\t\n\t    \t\t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t    \t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t    \t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t    \t\t\t\t\thash[ key ] = true;\n\t    \t\t\t\t\tnumEdges ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t    \t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\t\n\t    \t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\t\n\t    \t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\t\n\t    \t\t\t\tvar index = 6 * i + 3 * j;\n\t    \t\t\t\tcoords[ index + 0 ] = vertex.x;\n\t    \t\t\t\tcoords[ index + 1 ] = vertex.y;\n\t    \t\t\t\tcoords[ index + 2 ] = vertex.z;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t    \t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\tif ( geometry.index !== null ) {\n\t\n\t    \t\t\t// Indexed BufferGeometry\n\t\n\t    \t\t\tvar indices = geometry.index.array;\n\t    \t\t\tvar vertices = geometry.attributes.position;\n\t    \t\t\tvar groups = geometry.groups;\n\t    \t\t\tvar numEdges = 0;\n\t\n\t    \t\t\tif ( groups.length === 0 ) {\n\t\n\t    \t\t\t\tgeometry.addGroup( 0, indices.length );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// allocate maximal size\n\t    \t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\t\n\t    \t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\t\n\t    \t\t\t\tvar group = groups[ o ];\n\t\n\t    \t\t\t\tvar start = group.start;\n\t    \t\t\t\tvar count = group.count;\n\t\n\t    \t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\t\n\t    \t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n\t    \t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n\t    \t\t\t\t\t\tedge.sort( sortFunction );\n\t\n\t    \t\t\t\t\t\tvar key = edge.toString();\n\t\n\t    \t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t    \t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t    \t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t    \t\t\t\t\t\t\thash[ key ] = true;\n\t    \t\t\t\t\t\t\tnumEdges ++;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t    \t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\t\n\t    \t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\t\n\t    \t\t\t\t\tvar index = 6 * i + 3 * j;\n\t    \t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\t\n\t    \t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n\t    \t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n\t    \t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// non-indexed BufferGeometry\n\t\n\t    \t\t\tvar vertices = geometry.attributes.position.array;\n\t    \t\t\tvar numEdges = vertices.length / 3;\n\t    \t\t\tvar numTris = numEdges / 3;\n\t\n\t    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t    \t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\t\n\t    \t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\t\tvar index = 18 * i + 6 * j;\n\t\n\t    \t\t\t\t\tvar index1 = 9 * i + 3 * j;\n\t    \t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n\t    \t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n\t    \t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\t\n\t    \t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n\t    \t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n\t    \t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n\t    \t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    WireframeGeometry.prototype.constructor = WireframeGeometry;\n\t\n\t    /**\n\t     * @author zz85 / https://github.com/zz85\n\t     * Parametric Surfaces Geometry\n\t     * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t     *\n\t     * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n\t     *\n\t     */\n\t\n\t    function ParametricGeometry( func, slices, stacks ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'ParametricGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tfunc: func,\n\t    \t\tslices: slices,\n\t    \t\tstacks: stacks\n\t    \t};\n\t\n\t    \tvar verts = this.vertices;\n\t    \tvar faces = this.faces;\n\t    \tvar uvs = this.faceVertexUvs[ 0 ];\n\t\n\t    \tvar i, j, p;\n\t    \tvar u, v;\n\t\n\t    \tvar sliceCount = slices + 1;\n\t\n\t    \tfor ( i = 0; i <= stacks; i ++ ) {\n\t\n\t    \t\tv = i / stacks;\n\t\n\t    \t\tfor ( j = 0; j <= slices; j ++ ) {\n\t\n\t    \t\t\tu = j / slices;\n\t\n\t    \t\t\tp = func( u, v );\n\t    \t\t\tverts.push( p );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar a, b, c, d;\n\t    \tvar uva, uvb, uvc, uvd;\n\t\n\t    \tfor ( i = 0; i < stacks; i ++ ) {\n\t\n\t    \t\tfor ( j = 0; j < slices; j ++ ) {\n\t\n\t    \t\t\ta = i * sliceCount + j;\n\t    \t\t\tb = i * sliceCount + j + 1;\n\t    \t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n\t    \t\t\td = ( i + 1 ) * sliceCount + j;\n\t\n\t    \t\t\tuva = new Vector2( j / slices, i / stacks );\n\t    \t\t\tuvb = new Vector2( ( j + 1 ) / slices, i / stacks );\n\t    \t\t\tuvc = new Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n\t    \t\t\tuvd = new Vector2( j / slices, ( i + 1 ) / stacks );\n\t\n\t    \t\t\tfaces.push( new Face3( a, b, d ) );\n\t    \t\t\tuvs.push( [ uva, uvb, uvd ] );\n\t\n\t    \t\t\tfaces.push( new Face3( b, c, d ) );\n\t    \t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// console.log(this);\n\t\n\t    \t// magic bullet\n\t    \t// var diff = this.mergeVertices();\n\t    \t// console.log('removed ', diff, ' vertices by merging');\n\t\n\t    \tthis.computeFaceNormals();\n\t    \tthis.computeVertexNormals();\n\t\n\t    }\n\t\n\t    ParametricGeometry.prototype = Object.create( Geometry.prototype );\n\t    ParametricGeometry.prototype.constructor = ParametricGeometry;\n\t\n\t    /**\n\t     * @author clockworkgeek / https://github.com/clockworkgeek\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function PolyhedronGeometry( vertices, indices, radius, detail ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'PolyhedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tvertices: vertices,\n\t    \t\tindices: indices,\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    \tradius = radius || 1;\n\t    \tdetail = detail || 0;\n\t\n\t    \tvar that = this;\n\t\n\t    \tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\t\n\t    \t\tprepare( new Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\t\n\t    \t}\n\t\n\t    \tvar p = this.vertices;\n\t\n\t    \tvar faces = [];\n\t\n\t    \tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\t\n\t    \t\tvar v1 = p[ indices[ i ] ];\n\t    \t\tvar v2 = p[ indices[ i + 1 ] ];\n\t    \t\tvar v3 = p[ indices[ i + 2 ] ];\n\t\n\t    \t\tfaces[ j ] = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t\n\t    \t}\n\t\n\t    \tvar centroid = new Vector3();\n\t\n\t    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\tsubdivide( faces[ i ], detail );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Handle case when face straddles the seam\n\t\n\t    \tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\t\n\t    \t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\t\n\t    \t\tvar x0 = uvs[ 0 ].x;\n\t    \t\tvar x1 = uvs[ 1 ].x;\n\t    \t\tvar x2 = uvs[ 2 ].x;\n\t\n\t    \t\tvar max = Math.max( x0, x1, x2 );\n\t    \t\tvar min = Math.min( x0, x1, x2 );\n\t\n\t    \t\tif ( max > 0.9 && min < 0.1 ) {\n\t\n\t    \t\t\t// 0.9 is somewhat arbitrary\n\t\n\t    \t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n\t    \t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n\t    \t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// Apply radius\n\t\n\t    \tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\t\n\t    \t\tthis.vertices[ i ].multiplyScalar( radius );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Merge vertices\n\t\n\t    \tthis.mergeVertices();\n\t\n\t    \tthis.computeFaceNormals();\n\t\n\t    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t\n\t    \t// Project vector onto sphere's surface\n\t\n\t    \tfunction prepare( vector ) {\n\t\n\t    \t\tvar vertex = vector.normalize().clone();\n\t    \t\tvertex.index = that.vertices.push( vertex ) - 1;\n\t\n\t    \t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\t\n\t    \t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n\t    \t\tvar v = inclination( vector ) / Math.PI + 0.5;\n\t    \t\tvertex.uv = new Vector2( u, 1 - v );\n\t\n\t    \t\treturn vertex;\n\t\n\t    \t}\n\t\n\t\n\t    \t// Approximate a curved face with recursively sub-divided triangles.\n\t\n\t    \tfunction make( v1, v2, v3 ) {\n\t\n\t    \t\tvar face = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t    \t\tthat.faces.push( face );\n\t\n\t    \t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\t\n\t    \t\tvar azi = azimuth( centroid );\n\t\n\t    \t\tthat.faceVertexUvs[ 0 ].push( [\n\t    \t\t\tcorrectUV( v1.uv, v1, azi ),\n\t    \t\t\tcorrectUV( v2.uv, v2, azi ),\n\t    \t\t\tcorrectUV( v3.uv, v3, azi )\n\t    \t\t] );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Analytically subdivide a face to the required detail level.\n\t\n\t    \tfunction subdivide( face, detail ) {\n\t\n\t    \t\tvar cols = Math.pow( 2, detail );\n\t    \t\tvar a = prepare( that.vertices[ face.a ] );\n\t    \t\tvar b = prepare( that.vertices[ face.b ] );\n\t    \t\tvar c = prepare( that.vertices[ face.c ] );\n\t    \t\tvar v = [];\n\t\n\t    \t\t// Construct all of the vertices for this subdivision.\n\t\n\t    \t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\t\n\t    \t\t\tv[ i ] = [];\n\t\n\t    \t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n\t    \t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n\t    \t\t\tvar rows = cols - i;\n\t\n\t    \t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\t\n\t    \t\t\t\tif ( j === 0 && i === cols ) {\n\t\n\t    \t\t\t\t\tv[ i ][ j ] = aj;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Construct all of the faces.\n\t\n\t    \t\tfor ( var i = 0; i < cols ; i ++ ) {\n\t\n\t    \t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\t\n\t    \t\t\t\tvar k = Math.floor( j / 2 );\n\t\n\t    \t\t\t\tif ( j % 2 === 0 ) {\n\t\n\t    \t\t\t\t\tmake(\n\t    \t\t\t\t\t\tv[ i ][ k + 1 ],\n\t    \t\t\t\t\t\tv[ i + 1 ][ k ],\n\t    \t\t\t\t\t\tv[ i ][ k ]\n\t    \t\t\t\t\t);\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tmake(\n\t    \t\t\t\t\t\tv[ i ][ k + 1 ],\n\t    \t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n\t    \t\t\t\t\t\tv[ i + 1 ][ k ]\n\t    \t\t\t\t\t);\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// Angle around the Y axis, counter-clockwise when looking from above.\n\t\n\t    \tfunction azimuth( vector ) {\n\t\n\t    \t\treturn Math.atan2( vector.z, - vector.x );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Angle above the XZ plane.\n\t\n\t    \tfunction inclination( vector ) {\n\t\n\t    \t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Texture fixing helper. Spheres have some odd behaviours.\n\t\n\t    \tfunction correctUV( uv, vector, azimuth ) {\n\t\n\t    \t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new Vector2( uv.x - 1, uv.y );\n\t    \t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n\t    \t\treturn uv.clone();\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    PolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\t    PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\t\n\t    /**\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     */\n\t\n\t    function TetrahedronGeometry( radius, detail ) {\n\t\n\t    \tvar vertices = [\n\t    \t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'TetrahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    TetrahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\t\n\t    /**\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     */\n\t\n\t    function OctahedronGeometry( radius, detail ) {\n\t\n\t    \tvar vertices = [\n\t    \t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'OctahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    OctahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    OctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\t\n\t    /**\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     */\n\t\n\t    function IcosahedronGeometry( radius, detail ) {\n\t\n\t    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\n\t    \tvar vertices = [\n\t    \t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t    \t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t    \t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t    \t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t    \t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t    \t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'IcosahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    IcosahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\t\n\t    /**\n\t     * @author Abe Pazos / https://hamoid.com\n\t     */\n\t\n\t    function DodecahedronGeometry( radius, detail ) {\n\t\n\t    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t    \tvar r = 1 / t;\n\t\n\t    \tvar vertices = [\n\t\n\t    \t\t// (±1, ±1, ±1)\n\t    \t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t    \t\t- 1,  1, - 1,    - 1,  1,  1,\n\t    \t\t 1, - 1, - 1,     1, - 1,  1,\n\t    \t\t 1,  1, - 1,     1,  1,  1,\n\t\n\t    \t\t// (0, ±1/φ, ±φ)\n\t    \t\t 0, - r, - t,     0, - r,  t,\n\t    \t\t 0,  r, - t,     0,  r,  t,\n\t\n\t    \t\t// (±1/φ, ±φ, 0)\n\t    \t\t- r, - t,  0,    - r,  t,  0,\n\t    \t\t r, - t,  0,     r,  t,  0,\n\t\n\t    \t\t// (±φ, 0, ±1/φ)\n\t    \t\t- t,  0, - r,     t,  0, - r,\n\t    \t\t- t,  0,  r,     t,  0,  r\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t    \t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t    \t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t    \t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t    \t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t    \t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t    \t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t    \t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t    \t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t    \t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t    \t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t    \t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'DodecahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    DodecahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\t\n\t    /**\n\t     * @author WestLangley / https://github.com/WestLangley\n\t     * @author zz85 / https://github.com/zz85\n\t     * @author miningold / https://github.com/miningold\n\t     * @author jonobr1 / https://github.com/jonobr1\n\t     *\n\t     * Modified from the TorusKnotGeometry by @oosmoxiecode\n\t     *\n\t     * Creates a tube which extrudes along a 3d spline\n\t     *\n\t     * Uses parallel transport frames as described in\n\t     * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t     */\n\t\n\t    function TubeGeometry( path, segments, radius, radialSegments, closed, taper ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'TubeGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tpath: path,\n\t    \t\tsegments: segments,\n\t    \t\tradius: radius,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\tclosed: closed,\n\t    \t\ttaper: taper\n\t    \t};\n\t\n\t    \tsegments = segments || 64;\n\t    \tradius = radius || 1;\n\t    \tradialSegments = radialSegments || 8;\n\t    \tclosed = closed || false;\n\t    \ttaper = taper || TubeGeometry.NoTaper;\n\t\n\t    \tvar grid = [];\n\t\n\t    \tvar scope = this,\n\t\n\t    \t\ttangent,\n\t    \t\tnormal,\n\t    \t\tbinormal,\n\t\n\t    \t\tnumpoints = segments + 1,\n\t\n\t    \t\tu, v, r,\n\t\n\t    \t\tcx, cy,\n\t    \t\tpos, pos2 = new Vector3(),\n\t    \t\ti, j,\n\t    \t\tip, jp,\n\t    \t\ta, b, c, d,\n\t    \t\tuva, uvb, uvc, uvd;\n\t\n\t    \tvar frames = new TubeGeometry.FrenetFrames( path, segments, closed ),\n\t    \t\ttangents = frames.tangents,\n\t    \t\tnormals = frames.normals,\n\t    \t\tbinormals = frames.binormals;\n\t\n\t    \t// proxy internals\n\t    \tthis.tangents = tangents;\n\t    \tthis.normals = normals;\n\t    \tthis.binormals = binormals;\n\t\n\t    \tfunction vert( x, y, z ) {\n\t\n\t    \t\treturn scope.vertices.push( new Vector3( x, y, z ) ) - 1;\n\t\n\t    \t}\n\t\n\t    \t// construct the grid\n\t\n\t    \tfor ( i = 0; i < numpoints; i ++ ) {\n\t\n\t    \t\tgrid[ i ] = [];\n\t\n\t    \t\tu = i / ( numpoints - 1 );\n\t\n\t    \t\tpos = path.getPointAt( u );\n\t\n\t    \t\ttangent = tangents[ i ];\n\t    \t\tnormal = normals[ i ];\n\t    \t\tbinormal = binormals[ i ];\n\t\n\t    \t\tr = radius * taper( u );\n\t\n\t    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\t\n\t    \t\t\tv = j / radialSegments * 2 * Math.PI;\n\t\n\t    \t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t    \t\t\tcy = r * Math.sin( v );\n\t\n\t    \t\t\tpos2.copy( pos );\n\t    \t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n\t    \t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n\t    \t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\t\n\t    \t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// construct the mesh\n\t\n\t    \tfor ( i = 0; i < segments; i ++ ) {\n\t\n\t    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\t\n\t    \t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n\t    \t\t\tjp = ( j + 1 ) % radialSegments;\n\t\n\t    \t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n\t    \t\t\tb = grid[ ip ][ j ];\n\t    \t\t\tc = grid[ ip ][ jp ];\n\t    \t\t\td = grid[ i ][ jp ];\n\t\n\t    \t\t\tuva = new Vector2( i / segments, j / radialSegments );\n\t    \t\t\tuvb = new Vector2( ( i + 1 ) / segments, j / radialSegments );\n\t    \t\t\tuvc = new Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n\t    \t\t\tuvd = new Vector2( i / segments, ( j + 1 ) / radialSegments );\n\t\n\t    \t\t\tthis.faces.push( new Face3( a, b, d ) );\n\t    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\t\n\t    \t\t\tthis.faces.push( new Face3( b, c, d ) );\n\t    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.computeFaceNormals();\n\t    \tthis.computeVertexNormals();\n\t\n\t    }\n\t\n\t    TubeGeometry.prototype = Object.create( Geometry.prototype );\n\t    TubeGeometry.prototype.constructor = TubeGeometry;\n\t\n\t    TubeGeometry.NoTaper = function ( u ) {\n\t\n\t    \treturn 1;\n\t\n\t    };\n\t\n\t    TubeGeometry.SinusoidalTaper = function ( u ) {\n\t\n\t    \treturn Math.sin( Math.PI * u );\n\t\n\t    };\n\t\n\t    // For computing of Frenet frames, exposing the tangents, normals and binormals the spline\n\t    TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\t\n\t    \tvar\tnormal = new Vector3(),\n\t\n\t    \t\ttangents = [],\n\t    \t\tnormals = [],\n\t    \t\tbinormals = [],\n\t\n\t    \t\tvec = new Vector3(),\n\t    \t\tmat = new Matrix4(),\n\t\n\t    \t\tnumpoints = segments + 1,\n\t    \t\ttheta,\n\t    \t\tsmallest,\n\t\n\t    \t\ttx, ty, tz,\n\t    \t\ti, u;\n\t\n\t\n\t    \t// expose internals\n\t    \tthis.tangents = tangents;\n\t    \tthis.normals = normals;\n\t    \tthis.binormals = binormals;\n\t\n\t    \t// compute the tangent vectors for each segment on the path\n\t\n\t    \tfor ( i = 0; i < numpoints; i ++ ) {\n\t\n\t    \t\tu = i / ( numpoints - 1 );\n\t\n\t    \t\ttangents[ i ] = path.getTangentAt( u );\n\t    \t\ttangents[ i ].normalize();\n\t\n\t    \t}\n\t\n\t    \tinitialNormal3();\n\t\n\t    \t/*\n\t    \tfunction initialNormal1(lastBinormal) {\n\t    \t\t// fixed start binormal. Has dangers of 0 vectors\n\t    \t\tnormals[ 0 ] = new THREE.Vector3();\n\t    \t\tbinormals[ 0 ] = new THREE.Vector3();\n\t    \t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n\t    \t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n\t    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t    \t}\n\t\n\t    \tfunction initialNormal2() {\n\t\n\t    \t\t// This uses the Frenet-Serret formula for deriving binormal\n\t    \t\tvar t2 = path.getTangentAt( epsilon );\n\t\n\t    \t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n\t    \t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\t\n\t    \t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n\t    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t\n\t    \t}\n\t    \t*/\n\t\n\t    \tfunction initialNormal3() {\n\t\n\t    \t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t    \t\t// and in the direction of the smallest tangent xyz component\n\t\n\t    \t\tnormals[ 0 ] = new Vector3();\n\t    \t\tbinormals[ 0 ] = new Vector3();\n\t    \t\tsmallest = Number.MAX_VALUE;\n\t    \t\ttx = Math.abs( tangents[ 0 ].x );\n\t    \t\tty = Math.abs( tangents[ 0 ].y );\n\t    \t\ttz = Math.abs( tangents[ 0 ].z );\n\t\n\t    \t\tif ( tx <= smallest ) {\n\t\n\t    \t\t\tsmallest = tx;\n\t    \t\t\tnormal.set( 1, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ty <= smallest ) {\n\t\n\t    \t\t\tsmallest = ty;\n\t    \t\t\tnormal.set( 0, 1, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( tz <= smallest ) {\n\t\n\t    \t\t\tnormal.set( 0, 0, 1 );\n\t\n\t    \t\t}\n\t\n\t    \t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\t\n\t    \t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\t\n\t    \t}\n\t\n\t\n\t    \t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\t\n\t    \tfor ( i = 1; i < numpoints; i ++ ) {\n\t\n\t    \t\tnormals[ i ] = normals[ i - 1 ].clone();\n\t\n\t    \t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\t\n\t    \t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\t\n\t    \t\tif ( vec.length() > Number.EPSILON ) {\n\t\n\t    \t\t\tvec.normalize();\n\t\n\t    \t\t\ttheta = Math.acos( exports.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\t\n\t    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\t\n\t    \t}\n\t\n\t\n\t    \t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\t\n\t    \tif ( closed ) {\n\t\n\t    \t\ttheta = Math.acos( exports.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n\t    \t\ttheta /= ( numpoints - 1 );\n\t\n\t    \t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\t\n\t    \t\t\ttheta = - theta;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( i = 1; i < numpoints; i ++ ) {\n\t\n\t    \t\t\t// twist a little...\n\t    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t    \t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     *\n\t     * see: http://www.blackpawn.com/texts/pqtorus/\n\t     */\n\t    function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusKnotBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\tp: p,\n\t    \t\tq: q\n\t    \t};\n\t\n\t    \tradius = radius || 100;\n\t    \ttube = tube || 40;\n\t    \ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t    \tradialSegments = Math.floor( radialSegments ) || 8;\n\t    \tp = p || 2;\n\t    \tq = q || 3;\n\t\n\t    \t// used to calculate buffer length\n\t    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// helper variables\n\t    \tvar i, j, index = 0, indexOffset = 0;\n\t\n\t    \tvar vertex = new Vector3();\n\t    \tvar normal = new Vector3();\n\t    \tvar uv = new Vector2();\n\t\n\t    \tvar P1 = new Vector3();\n\t    \tvar P2 = new Vector3();\n\t\n\t    \tvar B = new Vector3();\n\t    \tvar T = new Vector3();\n\t    \tvar N = new Vector3();\n\t\n\t    \t// generate vertices, normals and uvs\n\t\n\t    \tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\t\n\t    \t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\n\t    \t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\t\n\t    \t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t    \t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\t\n\t    \t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t    \t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\t\n\t    \t\t// calculate orthonormal basis\n\t\n\t    \t\tT.subVectors( P2, P1 );\n\t    \t\tN.addVectors( P2, P1 );\n\t    \t\tB.crossVectors( T, N );\n\t    \t\tN.crossVectors( B, T );\n\t\n\t    \t\t// normalize B, N. T can be ignored, we don't use it\n\t\n\t    \t\tB.normalize();\n\t    \t\tN.normalize();\n\t\n\t    \t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\t\n\t    \t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t    \t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\n\t    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t    \t\t\tvar cx = - tube * Math.cos( v );\n\t    \t\t\tvar cy = tube * Math.sin( v );\n\t\n\t    \t\t\t// now calculate the final vertex position.\n\t    \t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\t\n\t    \t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t    \t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t    \t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\t    \t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\t    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = i / tubularSegments;\n\t    \t\t\tuv.y = j / radialSegments;\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t    \t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t    \t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t    \t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \t// this function calculates the current position on the torus curve\n\t\n\t    \tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\t\n\t    \t\tvar cu = Math.cos( u );\n\t    \t\tvar su = Math.sin( u );\n\t    \t\tvar quOverP = q / p * u;\n\t    \t\tvar cs = Math.cos( quOverP );\n\t\n\t    \t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t    \t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t    \t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\t\n\t    /**\n\t     * @author oosmoxiecode\n\t     */\n\t\n\t    function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusKnotGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\tp: p,\n\t    \t\tq: q\n\t    \t};\n\t\n\t    \tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\t\n\t    \tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    TorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\t    TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tarc: arc\n\t    \t};\n\t\n\t    \tradius = radius || 100;\n\t    \ttube = tube || 40;\n\t    \tradialSegments = Math.floor( radialSegments ) || 8;\n\t    \ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t    \tarc = arc || Math.PI * 2;\n\t\n\t    \t// used to calculate buffer length\n\t    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t    \tvar vertices = new Float32Array( vertexCount * 3 );\n\t    \tvar normals = new Float32Array( vertexCount * 3 );\n\t    \tvar uvs = new Float32Array( vertexCount * 2 );\n\t\n\t    \t// offset variables\n\t    \tvar vertexBufferOffset = 0;\n\t    \tvar uvBufferOffset = 0;\n\t    \tvar indexBufferOffset = 0;\n\t\n\t    \t// helper variables\n\t    \tvar center = new Vector3();\n\t    \tvar vertex = new Vector3();\n\t    \tvar normal = new Vector3();\n\t\n\t    \tvar j, i;\n\t\n\t    \t// generate vertices, normals and uvs\n\t\n\t    \tfor ( j = 0; j <= radialSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\t\n\t    \t\t\tvar u = i / tubularSegments * arc;\n\t    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t    \t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t    \t\t\tvertex.z = tube * Math.sin( v );\n\t\n\t    \t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n\t    \t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n\t    \t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\t\n\t    \t\t\t// this vector is used to calculate the normal\n\t    \t\t\tcenter.x = radius * Math.cos( u );\n\t    \t\t\tcenter.y = radius * Math.sin( u );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormal.subVectors( vertex, center ).normalize();\n\t\n\t    \t\t\tnormals[ vertexBufferOffset ] = normal.x;\n\t    \t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n\t    \t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n\t    \t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\t\n\t    \t\t\t// update offsets\n\t    \t\t\tvertexBufferOffset += 3;\n\t    \t\t\tuvBufferOffset += 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( j = 1; j <= radialSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t    \t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t    \t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t    \t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices[ indexBufferOffset ] = a;\n\t    \t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t    \t\t\tindices[ indexBufferOffset + 2 ] = d;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t    \t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t    \t\t\tindices[ indexBufferOffset + 5 ] = d;\n\t\n\t    \t\t\t// update offset\n\t    \t\t\tindexBufferOffset += 6;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    }\n\t\n\t    TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\t\n\t    /**\n\t     * @author oosmoxiecode\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n\t     */\n\t\n\t    function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tarc: arc\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\n\t    }\n\t\n\t    TorusGeometry.prototype = Object.create( Geometry.prototype );\n\t    TorusGeometry.prototype.constructor = TorusGeometry;\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     */\n\t\n\t    exports.ShapeUtils = {\n\t\n\t    \t// calculate area of the contour polygon\n\t\n\t    \tarea: function ( contour ) {\n\t\n\t    \t\tvar n = contour.length;\n\t    \t\tvar a = 0.0;\n\t\n\t    \t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\t\n\t    \t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn a * 0.5;\n\t\n\t    \t},\n\t\n\t    \ttriangulate: ( function () {\n\t\n\t    \t\t/**\n\t    \t\t * This code is a quick port of code written in C++ which was submitted to\n\t    \t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t    \t\t * See original code and more information here:\n\t    \t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t    \t\t *\n\t    \t\t * ported to actionscript by Zevan Rosser\n\t    \t\t * www.actionsnippet.com\n\t    \t\t *\n\t    \t\t * ported to javascript by Joshua Koo\n\t    \t\t * http://www.lab4games.net/zz85/blog\n\t    \t\t *\n\t    \t\t */\n\t\n\t    \t\tfunction snip( contour, u, v, w, n, verts ) {\n\t\n\t    \t\t\tvar p;\n\t    \t\t\tvar ax, ay, bx, by;\n\t    \t\t\tvar cx, cy, px, py;\n\t\n\t    \t\t\tax = contour[ verts[ u ] ].x;\n\t    \t\t\tay = contour[ verts[ u ] ].y;\n\t\n\t    \t\t\tbx = contour[ verts[ v ] ].x;\n\t    \t\t\tby = contour[ verts[ v ] ].y;\n\t\n\t    \t\t\tcx = contour[ verts[ w ] ].x;\n\t    \t\t\tcy = contour[ verts[ w ] ].y;\n\t\n\t    \t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\t\n\t    \t\t\tvar aX, aY, bX, bY, cX, cY;\n\t    \t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t    \t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\t\n\t    \t\t\taX = cx - bx;  aY = cy - by;\n\t    \t\t\tbX = ax - cx;  bY = ay - cy;\n\t    \t\t\tcX = bx - ax;  cY = by - ay;\n\t\n\t    \t\t\tfor ( p = 0; p < n; p ++ ) {\n\t\n\t    \t\t\t\tpx = contour[ verts[ p ] ].x;\n\t    \t\t\t\tpy = contour[ verts[ p ] ].y;\n\t\n\t    \t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t    \t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t    \t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\t\n\t    \t\t\t\tapx = px - ax;  apy = py - ay;\n\t    \t\t\t\tbpx = px - bx;  bpy = py - by;\n\t    \t\t\t\tcpx = px - cx;  cpy = py - cy;\n\t\n\t    \t\t\t\t// see if p is inside triangle abc\n\t\n\t    \t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t    \t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t    \t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\t\n\t    \t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// takes in an contour array and returns\n\t\n\t    \t\treturn function triangulate( contour, indices ) {\n\t\n\t    \t\t\tvar n = contour.length;\n\t\n\t    \t\t\tif ( n < 3 ) return null;\n\t\n\t    \t\t\tvar result = [],\n\t    \t\t\t\tverts = [],\n\t    \t\t\t\tvertIndices = [];\n\t\n\t    \t\t\t/* we want a counter-clockwise polygon in verts */\n\t\n\t    \t\t\tvar u, v, w;\n\t\n\t    \t\t\tif ( exports.ShapeUtils.area( contour ) > 0.0 ) {\n\t\n\t    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar nv = n;\n\t\n\t    \t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\t\n\t    \t\t\tvar count = 2 * nv;   /* error detection */\n\t\n\t    \t\t\tfor ( v = nv - 1; nv > 2; ) {\n\t\n\t    \t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\t\n\t    \t\t\t\tif ( ( count -- ) <= 0 ) {\n\t\n\t    \t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\t\n\t    \t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t    \t\t\t\t\t//return null;\n\t    \t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t    \t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\t\n\t    \t\t\t\t\tif ( indices ) return vertIndices;\n\t    \t\t\t\t\treturn result;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\t\n\t    \t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t    \t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t    \t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\t\n\t    \t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\t\n\t    \t\t\t\t\tvar a, b, c, s, t;\n\t\n\t    \t\t\t\t\t/* true names of the vertices */\n\t\n\t    \t\t\t\t\ta = verts[ u ];\n\t    \t\t\t\t\tb = verts[ v ];\n\t    \t\t\t\t\tc = verts[ w ];\n\t\n\t    \t\t\t\t\t/* output Triangle */\n\t\n\t    \t\t\t\t\tresult.push( [ contour[ a ],\n\t    \t\t\t\t\t\tcontour[ b ],\n\t    \t\t\t\t\t\tcontour[ c ] ] );\n\t\n\t\n\t    \t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\t\n\t    \t\t\t\t\t/* remove v from the remaining polygon */\n\t\n\t    \t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\t\n\t    \t\t\t\t\t\tverts[ s ] = verts[ t ];\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tnv --;\n\t\n\t    \t\t\t\t\t/* reset error detection counter */\n\t\n\t    \t\t\t\t\tcount = 2 * nv;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( indices ) return vertIndices;\n\t    \t\t\treturn result;\n\t\n\t    \t\t}\n\t\n\t    \t} )(),\n\t\n\t    \ttriangulateShape: function ( contour, holes ) {\n\t\n\t    \t\tfunction removeDupEndPts(points) {\n\t\n\t    \t\t\tvar l = points.length;\n\t\n\t    \t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\t\n\t    \t\t\t\tpoints.pop();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tremoveDupEndPts( contour );\n\t    \t\tholes.forEach( removeDupEndPts );\n\t\n\t    \t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\t\n\t    \t\t\t// inOtherPt needs to be collinear to the inSegment\n\t    \t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\t\n\t    \t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\t\n\t    \t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t    \t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\t\n\t    \t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t    \t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\t\n\t    \t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t    \t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\t\n\t    \t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\t\n\t    \t\t\t\t// not parallel\n\t\n\t    \t\t\t\tvar perpSeg2;\n\t    \t\t\t\tif ( limit > 0 ) {\n\t\n\t    \t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t    \t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t    \t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// i.e. to reduce rounding errors\n\t    \t\t\t\t// intersection at endpoint of segment#1?\n\t    \t\t\t\tif ( perpSeg2 === 0 ) {\n\t\n\t    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\tif ( perpSeg2 === limit ) {\n\t\n\t    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t    \t\t\t\t\treturn [ inSeg1Pt2 ];\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\t// intersection at endpoint of segment#2?\n\t    \t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t    \t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\t\n\t    \t\t\t\t// return real intersection point\n\t    \t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t    \t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t    \t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// parallel or collinear\n\t    \t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t    \t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\t\n\t    \t\t\t\t// they are collinear or degenerate\n\t    \t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t    \t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t    \t\t\t\t// both segments are points\n\t    \t\t\t\tif ( seg1Pt && seg2Pt ) {\n\t\n\t    \t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t    \t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t    \t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\t// segment#1  is a single point\n\t    \t\t\t\tif ( seg1Pt ) {\n\t\n\t    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\t// segment#2  is a single point\n\t    \t\t\t\tif ( seg2Pt ) {\n\t\n\t    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t    \t\t\t\t\treturn [ inSeg2Pt1 ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// they are collinear segments, which might overlap\n\t    \t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t    \t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t    \t\t\t\tif ( seg1dx !== 0 ) {\n\t\n\t    \t\t\t\t\t// the segments are NOT on a vertical line\n\t    \t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// the segments are on a vertical line\n\t    \t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\t\n\t    \t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t    \t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\t\n\t    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t    \t\t\t\t\t\treturn [ seg2min ];\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t    \t\t\t\t\treturn\t[ seg2min, seg2max ];\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t    \t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\t\n\t    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t    \t\t\t\t\t\treturn [ seg1min ];\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t    \t\t\t\t\treturn\t[ seg1min, seg2max ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\t\n\t    \t\t\t// The order of legs is important\n\t\n\t    \t\t\t// translation of all points, so that Vertex is at (0,0)\n\t    \t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t    \t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t    \t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\t\n\t    \t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t    \t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t    \t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\t\n\t    \t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\t\n\t    \t\t\t\t// angle != 180 deg.\n\t\n\t    \t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t    \t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\t\n\t    \t\t\t\tif ( from2toAngle > 0 ) {\n\t\n\t    \t\t\t\t\t// main angle < 180 deg.\n\t    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// main angle > 180 deg.\n\t    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// angle == 180 deg.\n\t    \t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t    \t\t\t\treturn\t( from2otherAngle > 0 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\tfunction removeHoles( contour, holes ) {\n\t\n\t    \t\t\tvar shape = contour.concat(); // work on this shape\n\t    \t\t\tvar hole;\n\t\n\t    \t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\t\n\t    \t\t\t\t// Check if hole point lies within angle around shape point\n\t    \t\t\t\tvar lastShapeIdx = shape.length - 1;\n\t\n\t    \t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t    \t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\t\n\t    \t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t    \t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\t\n\t    \t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t    \t\t\t\tif ( ! insideAngle ) {\n\t\n\t    \t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t    \t\t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// Check if shape point lies within angle around hole point\n\t    \t\t\t\tvar lastHoleIdx = hole.length - 1;\n\t\n\t    \t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t    \t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\t\n\t    \t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t    \t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\t\n\t    \t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t    \t\t\t\tif ( ! insideAngle ) {\n\t\n\t    \t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t    \t\t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn\ttrue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\t\n\t    \t\t\t\t// checks for intersections with shape edges\n\t    \t\t\t\tvar sIdx, nextIdx, intersection;\n\t    \t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\t\n\t    \t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t    \t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t    \t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar indepHoles = [];\n\t\n\t    \t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\t\n\t    \t\t\t\t// checks for intersections with hole edges\n\t    \t\t\t\tvar ihIdx, chkHole,\n\t    \t\t\t\t\thIdx, nextIdx, intersection;\n\t    \t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\t\n\t    \t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t    \t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\t\n\t    \t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t    \t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t    \t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar holeIndex, shapeIndex,\n\t    \t\t\t\tshapePt, holePt,\n\t    \t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t    \t\t\t\ttmpShape1, tmpShape2,\n\t    \t\t\t\ttmpHole1, tmpHole2;\n\t\n\t    \t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\t\tindepHoles.push( h );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar minShapeIndex = 0;\n\t    \t\t\tvar counter = indepHoles.length * 2;\n\t    \t\t\twhile ( indepHoles.length > 0 ) {\n\t\n\t    \t\t\t\tcounter --;\n\t    \t\t\t\tif ( counter < 0 ) {\n\t\n\t    \t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// search for shape-vertex and hole-vertex,\n\t    \t\t\t\t// which can be connected without intersections\n\t    \t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\t\n\t    \t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t    \t\t\t\t\tholeIndex\t= - 1;\n\t\n\t    \t\t\t\t\t// search for hole which can be reached without intersections\n\t    \t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\t\n\t    \t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\t\n\t    \t\t\t\t\t\t// prevent multiple checks\n\t    \t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t    \t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\t\n\t    \t\t\t\t\t\thole = holes[ holeIdx ];\n\t    \t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\t\n\t    \t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t    \t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t    \t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t    \t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\t\n\t    \t\t\t\t\t\t\tholeIndex = h2;\n\t    \t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\t\n\t    \t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t    \t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t    \t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t    \t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\t\n\t    \t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\t\n\t    \t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\t\n\t    \t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t    \t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t}\n\t    \t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\t\n\t    \t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn shape; \t\t\t/* shape with no holes */\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\tvar i, il, f, face,\n\t    \t\t\tkey, index,\n\t    \t\t\tallPointsMap = {};\n\t\n\t    \t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\t\n\t    \t\tvar allpoints = contour.concat();\n\t\n\t    \t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\t\n\t    \t\t}\n\t\n\t    \t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\t\n\t    \t\t// prepare all points map\n\t\n\t    \t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\t\n\t    \t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\t\n\t    \t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tallPointsMap[ key ] = i;\n\t\n\t    \t\t}\n\t\n\t    \t\t// remove holes by cutting paths to holes and adding them to the shape\n\t    \t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\t\n\t    \t\tvar triangles = exports.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t    \t\t//console.log( \"triangles\",triangles, triangles.length );\n\t\n\t    \t\t// check all face vertices against all points map\n\t\n\t    \t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\t\n\t    \t\t\tface = triangles[ i ];\n\t\n\t    \t\t\tfor ( f = 0; f < 3; f ++ ) {\n\t\n\t    \t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\t\n\t    \t\t\t\tindex = allPointsMap[ key ];\n\t\n\t    \t\t\t\tif ( index !== undefined ) {\n\t\n\t    \t\t\t\t\tface[ f ] = index;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn triangles.concat();\n\t\n\t    \t},\n\t\n\t    \tisClockWise: function ( pts ) {\n\t\n\t    \t\treturn exports.ShapeUtils.area( pts ) < 0;\n\t\n\t    \t},\n\t\n\t    \t// Bezier Curves formulas obtained from\n\t    \t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\t\n\t    \t// Quad Bezier Functions\n\t\n\t    \tb2: ( function () {\n\t\n\t    \t\tfunction b2p0( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn k * k * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b2p1( t, p ) {\n\t\n\t    \t\t\treturn 2 * ( 1 - t ) * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b2p2( t, p ) {\n\t\n\t    \t\t\treturn t * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function b2( t, p0, p1, p2 ) {\n\t\n\t    \t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \t// Cubic Bezier Functions\n\t\n\t    \tb3: ( function () {\n\t\n\t    \t\tfunction b3p0( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn k * k * k * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b3p1( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn 3 * k * k * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b3p2( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn 3 * k * t * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b3p3( t, p ) {\n\t\n\t    \t\t\treturn t * t * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function b3( t, p0, p1, p2, p3 ) {\n\t\n\t    \t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     *\n\t     * Creates extruded geometry from a path shape.\n\t     *\n\t     * parameters = {\n\t     *\n\t     *  curveSegments: <int>, // number of points on the curves\n\t     *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t     *  amount: <int>, // Depth to extrude the shape\n\t     *\n\t     *  bevelEnabled: <bool>, // turn on bevel\n\t     *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t     *  bevelSize: <float>, // how far from shape outline is bevel\n\t     *  bevelSegments: <int>, // number of bevel layers\n\t     *\n\t     *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n\t     *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n\t     *\n\t     *  uvGenerator: <Object> // object that provides UV generator functions\n\t     *\n\t     * }\n\t     **/\n\t\n\t    function ExtrudeGeometry( shapes, options ) {\n\t\n\t    \tif ( typeof( shapes ) === \"undefined\" ) {\n\t\n\t    \t\tshapes = [];\n\t    \t\treturn;\n\t\n\t    \t}\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'ExtrudeGeometry';\n\t\n\t    \tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\t\n\t    \tthis.addShapeList( shapes, options );\n\t\n\t    \tthis.computeFaceNormals();\n\t\n\t    \t// can't really use automatic vertex normals\n\t    \t// as then front and back sides get smoothed too\n\t    \t// should do separate smoothing just for sides\n\t\n\t    \t//this.computeVertexNormals();\n\t\n\t    \t//console.log( \"took\", ( Date.now() - startTime ) );\n\t\n\t    }\n\t\n\t    ExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\t    ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\t\n\t    ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\t\n\t    \tvar sl = shapes.length;\n\t\n\t    \tfor ( var s = 0; s < sl; s ++ ) {\n\t\n\t    \t\tvar shape = shapes[ s ];\n\t    \t\tthis.addShape( shape, options );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\t\n\t    \tvar amount = options.amount !== undefined ? options.amount : 100;\n\t\n\t    \tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\t    \tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\t    \tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\n\t    \tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\t\n\t    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\n\t    \tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\n\t    \tvar extrudePath = options.extrudePath;\n\t    \tvar extrudePts, extrudeByPath = false;\n\t\n\t    \t// Use default WorldUVGenerator if no UV generators are specified.\n\t    \tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\t\n\t    \tvar splineTube, binormal, normal, position2;\n\t    \tif ( extrudePath ) {\n\t\n\t    \t\textrudePts = extrudePath.getSpacedPoints( steps );\n\t\n\t    \t\textrudeByPath = true;\n\t    \t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\n\t    \t\t// SETUP TNB variables\n\t\n\t    \t\t// Reuse TNB from TubeGeomtry for now.\n\t    \t\t// TODO1 - have a .isClosed in spline?\n\t\n\t    \t\tsplineTube = options.frames !== undefined ? options.frames : new TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\t\n\t    \t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\t\n\t    \t\tbinormal = new Vector3();\n\t    \t\tnormal = new Vector3();\n\t    \t\tposition2 = new Vector3();\n\t\n\t    \t}\n\t\n\t    \t// Safeguards if bevels are not enabled\n\t\n\t    \tif ( ! bevelEnabled ) {\n\t\n\t    \t\tbevelSegments = 0;\n\t    \t\tbevelThickness = 0;\n\t    \t\tbevelSize = 0;\n\t\n\t    \t}\n\t\n\t    \t// Variables initialization\n\t\n\t    \tvar ahole, h, hl; // looping of holes\n\t    \tvar scope = this;\n\t\n\t    \tvar shapesOffset = this.vertices.length;\n\t\n\t    \tvar shapePoints = shape.extractPoints( curveSegments );\n\t\n\t    \tvar vertices = shapePoints.shape;\n\t    \tvar holes = shapePoints.holes;\n\t\n\t    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\t\n\t    \tif ( reverse ) {\n\t\n\t    \t\tvertices = vertices.reverse();\n\t\n\t    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t\n\t    \t\t\tif ( exports.ShapeUtils.isClockWise( ahole ) ) {\n\t\n\t    \t\t\t\tholes[ h ] = ahole.reverse();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\t\n\t    \t}\n\t\n\t\n\t    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\t\n\t    \t/* Vertices */\n\t\n\t    \tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\t\n\t    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\tahole = holes[ h ];\n\t\n\t    \t\tvertices = vertices.concat( ahole );\n\t\n\t    \t}\n\t\n\t\n\t    \tfunction scalePt2( pt, vec, size ) {\n\t\n\t    \t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\t\n\t    \t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\t\n\t    \t}\n\t\n\t    \tvar b, bs, t, z,\n\t    \t\tvert, vlen = vertices.length,\n\t    \t\tface, flen = faces.length;\n\t\n\t\n\t    \t// Find directions for point movement\n\t\n\t\n\t    \tfunction getBevelVec( inPt, inPrev, inNext ) {\n\t\n\t    \t\t// computes for inPt the corresponding point inPt' on a new contour\n\t    \t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t    \t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t    \t\t//\n\t    \t\t// inPt' is the intersection of the two lines parallel to the two\n\t    \t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\t\n\t    \t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\t\n\t    \t\t// good reading for geometry algorithms (here: line-line intersection)\n\t    \t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\t\n\t    \t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n\t    \t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\t\n\t    \t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\t\n\t    \t\t// check for collinear edges\n\t    \t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\t\n\t    \t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\t\n\t    \t\t\t// not collinear\n\t\n\t    \t\t\t// length of vectors for normalizing\n\t\n\t    \t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t    \t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\t\n\t    \t\t\t// shift adjacent points by unit vectors to the left\n\t\n\t    \t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t    \t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\t\n\t    \t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t    \t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\t\n\t    \t\t\t// scaling factor for v_prev to intersection point\n\t\n\t    \t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t    \t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n\t    \t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\t\n\t    \t\t\t// vector from inPt to intersection point\n\t\n\t    \t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t    \t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\t\n\t    \t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t    \t\t\t//  but prevent crazy spikes\n\t    \t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t    \t\t\tif ( v_trans_lensq <= 2 ) {\n\t\n\t    \t\t\t\treturn\tnew Vector2( v_trans_x, v_trans_y );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// handle special case of collinear edges\n\t\n\t    \t\t\tvar direction_eq = false;\t\t// assumes: opposite\n\t    \t\t\tif ( v_prev_x > Number.EPSILON ) {\n\t\n\t    \t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\t\n\t    \t\t\t\t\tdirection_eq = true;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\t\n\t    \t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\t\n\t    \t\t\t\t\t\tdirection_eq = true;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\t\n\t    \t\t\t\t\t\tdirection_eq = true;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( direction_eq ) {\n\t\n\t    \t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t    \t\t\t\tv_trans_x = - v_prev_y;\n\t    \t\t\t\tv_trans_y =  v_prev_x;\n\t    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t    \t\t\t\tv_trans_x = v_prev_x;\n\t    \t\t\t\tv_trans_y = v_prev_y;\n\t    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn\tnew Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\t\n\t    \t}\n\t\n\t\n\t    \tvar contourMovements = [];\n\t\n\t    \tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\t\n\t    \t\tif ( j === il ) j = 0;\n\t    \t\tif ( k === il ) k = 0;\n\t\n\t    \t\t//  (j)---(i)---(k)\n\t    \t\t// console.log('i,j,k', i, j , k)\n\t\n\t    \t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\t\n\t    \t}\n\t\n\t    \tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\t\n\t    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\tahole = holes[ h ];\n\t\n\t    \t\toneHoleMovements = [];\n\t\n\t    \t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\t\n\t    \t\t\tif ( j === il ) j = 0;\n\t    \t\t\tif ( k === il ) k = 0;\n\t\n\t    \t\t\t//  (j)---(i)---(k)\n\t    \t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\t\n\t    \t\t}\n\t\n\t    \t\tholesMovements.push( oneHoleMovements );\n\t    \t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Loop bevelSegments, 1 for the front, 1 for the back\n\t\n\t    \tfor ( b = 0; b < bevelSegments; b ++ ) {\n\t\n\t    \t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\n\t    \t\tt = b / bevelSegments;\n\t    \t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\t\n\t    \t\t// contract shape\n\t\n\t    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\n\t    \t\t\tv( vert.x, vert.y,  - z );\n\t\n\t    \t\t}\n\t\n\t    \t\t// expand holes\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t    \t\t\toneHoleMovements = holesMovements[ h ];\n\t\n\t    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\t\n\t    \t\t\t\tv( vert.x, vert.y,  - z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tbs = bevelSize;\n\t\n\t    \t// Back facing vertices\n\t\n\t    \tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t    \t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\t\n\t    \t\tif ( ! extrudeByPath ) {\n\t\n\t    \t\t\tv( vert.x, vert.y, 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\n\t    \t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t    \t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\t\n\t    \t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\t\n\t    \t\t\tv( position2.x, position2.y, position2.z );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Add stepped vertices...\n\t    \t// Including front facing vertices\n\t\n\t    \tvar s;\n\t\n\t    \tfor ( s = 1; s <= steps; s ++ ) {\n\t\n\t    \t\tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t    \t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\t\n\t    \t\t\tif ( ! extrudeByPath ) {\n\t\n\t    \t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\n\t    \t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t    \t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\t\n\t    \t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\t\n\t    \t\t\t\tv( position2.x, position2.y, position2.z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// Add bevel segments planes\n\t\n\t    \t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t    \tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\t\n\t    \t\tt = b / bevelSegments;\n\t    \t\tz = bevelThickness * Math.cos ( t * Math.PI / 2 );\n\t    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\t\n\t    \t\t// contract shape\n\t\n\t    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t    \t\t\tv( vert.x, vert.y,  amount + z );\n\t\n\t    \t\t}\n\t\n\t    \t\t// expand holes\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t    \t\t\toneHoleMovements = holesMovements[ h ];\n\t\n\t    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\t\n\t    \t\t\t\tif ( ! extrudeByPath ) {\n\t\n\t    \t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t/* Faces */\n\t\n\t    \t// Top and bottom faces\n\t\n\t    \tbuildLidFaces();\n\t\n\t    \t// Sides faces\n\t\n\t    \tbuildSideFaces();\n\t\n\t\n\t    \t/////  Internal functions\n\t\n\t    \tfunction buildLidFaces() {\n\t\n\t    \t\tif ( bevelEnabled ) {\n\t\n\t    \t\t\tvar layer = 0; // steps + 1\n\t    \t\t\tvar offset = vlen * layer;\n\t\n\t    \t\t\t// Bottom faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tlayer = steps + bevelSegments * 2;\n\t    \t\t\toffset = vlen * layer;\n\t\n\t    \t\t\t// Top faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// Bottom faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Top faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Create faces for the z-sides of the shape\n\t\n\t    \tfunction buildSideFaces() {\n\t\n\t    \t\tvar layeroffset = 0;\n\t    \t\tsidewalls( contour, layeroffset );\n\t    \t\tlayeroffset += contour.length;\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t    \t\t\tsidewalls( ahole, layeroffset );\n\t\n\t    \t\t\t//, true\n\t    \t\t\tlayeroffset += ahole.length;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction sidewalls( contour, layeroffset ) {\n\t\n\t    \t\tvar j, k;\n\t    \t\ti = contour.length;\n\t\n\t    \t\twhile ( -- i >= 0 ) {\n\t\n\t    \t\t\tj = i;\n\t    \t\t\tk = i - 1;\n\t    \t\t\tif ( k < 0 ) k = contour.length - 1;\n\t\n\t    \t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\t\n\t    \t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\t\n\t    \t\t\tfor ( s = 0; s < sl; s ++ ) {\n\t\n\t    \t\t\t\tvar slen1 = vlen * s;\n\t    \t\t\t\tvar slen2 = vlen * ( s + 1 );\n\t\n\t    \t\t\t\tvar a = layeroffset + j + slen1,\n\t    \t\t\t\t\tb = layeroffset + k + slen1,\n\t    \t\t\t\t\tc = layeroffset + k + slen2,\n\t    \t\t\t\t\td = layeroffset + j + slen2;\n\t\n\t    \t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \tfunction v( x, y, z ) {\n\t\n\t    \t\tscope.vertices.push( new Vector3( x, y, z ) );\n\t\n\t    \t}\n\t\n\t    \tfunction f3( a, b, c ) {\n\t\n\t    \t\ta += shapesOffset;\n\t    \t\tb += shapesOffset;\n\t    \t\tc += shapesOffset;\n\t\n\t    \t\tscope.faces.push( new Face3( a, b, c, null, null, 0 ) );\n\t\n\t    \t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\t\n\t    \t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\t\n\t    \t}\n\t\n\t    \tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\t\n\t    \t\ta += shapesOffset;\n\t    \t\tb += shapesOffset;\n\t    \t\tc += shapesOffset;\n\t    \t\td += shapesOffset;\n\t\n\t    \t\tscope.faces.push( new Face3( a, b, d, null, null, 1 ) );\n\t    \t\tscope.faces.push( new Face3( b, c, d, null, null, 1 ) );\n\t\n\t    \t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\t\n\t    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n\t    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    ExtrudeGeometry.WorldUVGenerator = {\n\t\n\t    \tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\t\n\t    \t\tvar vertices = geometry.vertices;\n\t\n\t    \t\tvar a = vertices[ indexA ];\n\t    \t\tvar b = vertices[ indexB ];\n\t    \t\tvar c = vertices[ indexC ];\n\t\n\t    \t\treturn [\n\t    \t\t\tnew Vector2( a.x, a.y ),\n\t    \t\t\tnew Vector2( b.x, b.y ),\n\t    \t\t\tnew Vector2( c.x, c.y )\n\t    \t\t];\n\t\n\t    \t},\n\t\n\t    \tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\t\n\t    \t\tvar vertices = geometry.vertices;\n\t\n\t    \t\tvar a = vertices[ indexA ];\n\t    \t\tvar b = vertices[ indexB ];\n\t    \t\tvar c = vertices[ indexC ];\n\t    \t\tvar d = vertices[ indexD ];\n\t\n\t    \t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\t\n\t    \t\t\treturn [\n\t    \t\t\t\tnew Vector2( a.x, 1 - a.z ),\n\t    \t\t\t\tnew Vector2( b.x, 1 - b.z ),\n\t    \t\t\t\tnew Vector2( c.x, 1 - c.z ),\n\t    \t\t\t\tnew Vector2( d.x, 1 - d.z )\n\t    \t\t\t];\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn [\n\t    \t\t\t\tnew Vector2( a.y, 1 - a.z ),\n\t    \t\t\t\tnew Vector2( b.y, 1 - b.z ),\n\t    \t\t\t\tnew Vector2( c.y, 1 - c.z ),\n\t    \t\t\t\tnew Vector2( d.y, 1 - d.z )\n\t    \t\t\t];\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * Text = 3D Text\n\t     *\n\t     * parameters = {\n\t     *  font: <THREE.Font>, // font\n\t     *\n\t     *  size: <float>, // size of the text\n\t     *  height: <float>, // thickness to extrude text\n\t     *  curveSegments: <int>, // number of points on the curves\n\t     *\n\t     *  bevelEnabled: <bool>, // turn on bevel\n\t     *  bevelThickness: <float>, // how deep into text bevel goes\n\t     *  bevelSize: <float> // how far from text outline is bevel\n\t     * }\n\t     */\n\t\n\t    function TextGeometry( text, parameters ) {\n\t\n\t    \tparameters = parameters || {};\n\t\n\t    \tvar font = parameters.font;\n\t\n\t    \tif ( (font && font.isFont) === false ) {\n\t\n\t    \t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t    \t\treturn new Geometry();\n\t\n\t    \t}\n\t\n\t    \tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\t\n\t    \t// translate parameters to ExtrudeGeometry API\n\t\n\t    \tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\t\n\t    \t// defaults\n\t\n\t    \tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t    \tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t    \tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\t\n\t    \tExtrudeGeometry.call( this, shapes, parameters );\n\t\n\t    \tthis.type = 'TextGeometry';\n\t\n\t    }\n\t\n\t    TextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );\n\t    TextGeometry.prototype.constructor = TextGeometry;\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     * based on THREE.SphereGeometry\n\t     */\n\t\n\t    function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'SphereBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tradius = radius || 50;\n\t\n\t    \twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t    \theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\t\n\t    \tphiStart = phiStart !== undefined ? phiStart : 0;\n\t    \tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\t\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\t\n\t    \tvar thetaEnd = thetaStart + thetaLength;\n\t\n\t    \tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\t\n\t    \tvar positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \tvar index = 0, vertices = [], normal = new Vector3();\n\t\n\t    \tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\t\n\t    \t\tvar verticesRow = [];\n\t\n\t    \t\tvar v = y / heightSegments;\n\t\n\t    \t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\t\n\t    \t\t\tvar u = x / widthSegments;\n\t\n\t    \t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t    \t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n\t    \t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\n\t    \t\t\tnormal.set( px, py, pz ).normalize();\n\t\n\t    \t\t\tpositions.setXYZ( index, px, py, pz );\n\t    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t    \t\t\tuvs.setXY( index, u, 1 - v );\n\t\n\t    \t\t\tverticesRow.push( index );\n\t\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t\tvertices.push( verticesRow );\n\t\n\t    \t}\n\t\n\t    \tvar indices = [];\n\t\n\t    \tfor ( var y = 0; y < heightSegments; y ++ ) {\n\t\n\t    \t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\t\n\t    \t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t    \t\t\tvar v2 = vertices[ y ][ x ];\n\t    \t\t\tvar v3 = vertices[ y + 1 ][ x ];\n\t    \t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\t\n\t    \t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n\t    \t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', positions );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t    }\n\t\n\t    SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'SphereGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\n\t    }\n\t\n\t    SphereGeometry.prototype = Object.create( Geometry.prototype );\n\t    SphereGeometry.prototype.constructor = SphereGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'RingBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tinnerRadius: innerRadius,\n\t    \t\touterRadius: outerRadius,\n\t    \t\tthetaSegments: thetaSegments,\n\t    \t\tphiSegments: phiSegments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tinnerRadius = innerRadius || 20;\n\t    \touterRadius = outerRadius || 50;\n\t\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\t\n\t    \tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t    \tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\t\n\t    \t// these are used to calculate buffer length\n\t    \tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n\t    \tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// some helper variables\n\t    \tvar index = 0, indexOffset = 0, segment;\n\t    \tvar radius = innerRadius;\n\t    \tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t    \tvar vertex = new Vector3();\n\t    \tvar uv = new Vector2();\n\t    \tvar j, i;\n\t\n\t    \t// generate vertices, normals and uvs\n\t\n\t    \t// values are generate from the inside of the ring to the outside\n\t\n\t    \tfor ( j = 0; j <= phiSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\t\n\t    \t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = radius * Math.cos( segment );\n\t    \t\t\tvertex.y = radius * Math.sin( segment );\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t    \t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex++;\n\t\n\t    \t\t}\n\t\n\t    \t\t// increase the radius for next row of vertices\n\t    \t\tradius += radiusStep;\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( j = 0; j < phiSegments; j ++ ) {\n\t\n\t    \t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\t\n\t    \t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\t\n\t    \t\t\tsegment = i + thetaSegmentLevel;\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = segment;\n\t    \t\t\tvar b = segment + thetaSegments + 1;\n\t    \t\t\tvar c = segment + thetaSegments + 2;\n\t    \t\t\tvar d = segment + 1;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    }\n\t\n\t    RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    RingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\t\n\t    /**\n\t     * @author Kaleb Murphy\n\t     */\n\t\n\t    function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'RingGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tinnerRadius: innerRadius,\n\t    \t\touterRadius: outerRadius,\n\t    \t\tthetaSegments: thetaSegments,\n\t    \t\tphiSegments: phiSegments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\n\t    }\n\t\n\t    RingGeometry.prototype = Object.create( Geometry.prototype );\n\t    RingGeometry.prototype.constructor = RingGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t     */\n\t\n\t    function PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'PlaneGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\n\t    }\n\t\n\t    PlaneGeometry.prototype = Object.create( Geometry.prototype );\n\t    PlaneGeometry.prototype.constructor = PlaneGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t     // points - to create a closed torus, one must use a set of points\n\t     //    like so: [ a, b, c, d, a ], see first is the same as last.\n\t     // segments - the number of circumference segments to create\n\t     // phiStart - the starting radian\n\t     // phiLength - the radian (0 to 2PI) range of the lathed section\n\t     //    2PI is a closed lathe, less than 2PI is a portion.\n\t\n\t    function LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'LatheBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tpoints: points,\n\t    \t\tsegments: segments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength\n\t    \t};\n\t\n\t    \tsegments = Math.floor( segments ) || 12;\n\t    \tphiStart = phiStart || 0;\n\t    \tphiLength = phiLength || Math.PI * 2;\n\t\n\t    \t// clamp phiLength so it's in range of [ 0, 2PI ]\n\t    \tphiLength = exports.Math.clamp( phiLength, 0, Math.PI * 2 );\n\t\n\t    \t// these are used to calculate buffer length\n\t    \tvar vertexCount = ( segments + 1 ) * points.length;\n\t    \tvar indexCount = segments * points.length * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// helper variables\n\t    \tvar index = 0, indexOffset = 0, base;\n\t    \tvar inverseSegments = 1.0 / segments;\n\t    \tvar vertex = new Vector3();\n\t    \tvar uv = new Vector2();\n\t    \tvar i, j;\n\t\n\t    \t// generate vertices and uvs\n\t\n\t    \tfor ( i = 0; i <= segments; i ++ ) {\n\t\n\t    \t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\t\n\t    \t\tvar sin = Math.sin( phi );\n\t    \t\tvar cos = Math.cos( phi );\n\t\n\t    \t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = points[ j ].x * sin;\n\t    \t\t\tvertex.y = points[ j ].y;\n\t    \t\t\tvertex.z = points[ j ].x * cos;\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = i / segments;\n\t    \t\t\tuv.y = j / ( points.length - 1 );\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( i = 0; i < segments; i ++ ) {\n\t\n\t    \t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\t\n\t    \t\t\tbase = j + i * points.length;\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = base;\n\t    \t\t\tvar b = base + points.length;\n\t    \t\t\tvar c = base + points.length + 1;\n\t    \t\t\tvar d = base + 1;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \t// generate normals\n\t\n\t    \tthis.computeVertexNormals();\n\t\n\t    \t// if the geometry is closed, we need to average the normals along the seam.\n\t    \t// because the corresponding vertices are identical (but still have different UVs).\n\t\n\t    \tif( phiLength === Math.PI * 2 ) {\n\t\n\t    \t\tvar normals = this.attributes.normal.array;\n\t    \t\tvar n1 = new Vector3();\n\t    \t\tvar n2 = new Vector3();\n\t    \t\tvar n = new Vector3();\n\t\n\t    \t\t// this is the buffer offset for the last line of vertices\n\t    \t\tbase = segments * points.length * 3;\n\t\n\t    \t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\t\n\t    \t\t\t// select the normal of the vertex in the first line\n\t    \t\t\tn1.x = normals[ j + 0 ];\n\t    \t\t\tn1.y = normals[ j + 1 ];\n\t    \t\t\tn1.z = normals[ j + 2 ];\n\t\n\t    \t\t\t// select the normal of the vertex in the last line\n\t    \t\t\tn2.x = normals[ base + j + 0 ];\n\t    \t\t\tn2.y = normals[ base + j + 1 ];\n\t    \t\t\tn2.z = normals[ base + j + 2 ];\n\t\n\t    \t\t\t// average normals\n\t    \t\t\tn.addVectors( n1, n2 ).normalize();\n\t\n\t    \t\t\t// assign the new values to both normals\n\t    \t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t    \t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t    \t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\t\n\t    \t\t} // next row\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\t\n\t    /**\n\t     * @author astrodud / http://astrodud.isgreat.org/\n\t     * @author zz85 / https://github.com/zz85\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    // points - to create a closed torus, one must use a set of points\n\t    //    like so: [ a, b, c, d, a ], see first is the same as last.\n\t    // segments - the number of circumference segments to create\n\t    // phiStart - the starting radian\n\t    // phiLength - the radian (0 to 2PI) range of the lathed section\n\t    //    2PI is a closed lathe, less than 2PI is a portion.\n\t\n\t    function LatheGeometry( points, segments, phiStart, phiLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'LatheGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tpoints: points,\n\t    \t\tsegments: segments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    LatheGeometry.prototype = Object.create( Geometry.prototype );\n\t    LatheGeometry.prototype.constructor = LatheGeometry;\n\t\n\t    /**\n\t     * @author jonobr1 / http://jonobr1.com\n\t     *\n\t     * Creates a one-sided polygonal geometry from a path shape. Similar to\n\t     * ExtrudeGeometry.\n\t     *\n\t     * parameters = {\n\t     *\n\t     *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n\t     *\n\t     *\tmaterial: <int> // material index for front and back faces\n\t     *\tuvGenerator: <Object> // object that provides UV generator functions\n\t     *\n\t     * }\n\t     **/\n\t\n\t    function ShapeGeometry( shapes, options ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'ShapeGeometry';\n\t\n\t    \tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\t\n\t    \tthis.addShapeList( shapes, options );\n\t\n\t    \tthis.computeFaceNormals();\n\t\n\t    }\n\t\n\t    ShapeGeometry.prototype = Object.create( Geometry.prototype );\n\t    ShapeGeometry.prototype.constructor = ShapeGeometry;\n\t\n\t    /**\n\t     * Add an array of shapes to THREE.ShapeGeometry.\n\t     */\n\t    ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\t\n\t    \tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\t\n\t    \t\tthis.addShape( shapes[ i ], options );\n\t\n\t    \t}\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n\t     */\n\t    ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\t\n\t    \tif ( options === undefined ) options = {};\n\t    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\n\t    \tvar material = options.material;\n\t    \tvar uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\t\n\t    \t//\n\t\n\t    \tvar i, l, hole;\n\t\n\t    \tvar shapesOffset = this.vertices.length;\n\t    \tvar shapePoints = shape.extractPoints( curveSegments );\n\t\n\t    \tvar vertices = shapePoints.shape;\n\t    \tvar holes = shapePoints.holes;\n\t\n\t    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\t\n\t    \tif ( reverse ) {\n\t\n\t    \t\tvertices = vertices.reverse();\n\t\n\t    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\t\n\t    \t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\t\n\t    \t\t\thole = holes[ i ];\n\t\n\t    \t\t\tif ( exports.ShapeUtils.isClockWise( hole ) ) {\n\t\n\t    \t\t\t\tholes[ i ] = hole.reverse();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treverse = false;\n\t\n\t    \t}\n\t\n\t    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\t\n\t    \t// Vertices\n\t\n\t    \tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\t\n\t    \t\thole = holes[ i ];\n\t    \t\tvertices = vertices.concat( hole );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar vert, vlen = vertices.length;\n\t    \tvar face, flen = faces.length;\n\t\n\t    \tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t    \t\tvert = vertices[ i ];\n\t\n\t    \t\tthis.vertices.push( new Vector3( vert.x, vert.y, 0 ) );\n\t\n\t    \t}\n\t\n\t    \tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\tface = faces[ i ];\n\t\n\t    \t\tvar a = face[ 0 ] + shapesOffset;\n\t    \t\tvar b = face[ 1 ] + shapesOffset;\n\t    \t\tvar c = face[ 2 ] + shapesOffset;\n\t\n\t    \t\tthis.faces.push( new Face3( a, b, c, null, null, material ) );\n\t    \t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function EdgesGeometry( geometry, thresholdAngle ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\t\n\t    \tvar thresholdDot = Math.cos( exports.Math.DEG2RAD * thresholdAngle );\n\t\n\t    \tvar edge = [ 0, 0 ], hash = {};\n\t\n\t    \tfunction sortFunction( a, b ) {\n\t\n\t    \t\treturn a - b;\n\t\n\t    \t}\n\t\n\t    \tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t    \tvar geometry2;\n\t\n\t    \tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\tgeometry2 = new Geometry();\n\t    \t\tgeometry2.fromBufferGeometry( geometry );\n\t\n\t    \t} else {\n\t\n\t    \t\tgeometry2 = geometry.clone();\n\t\n\t    \t}\n\t\n\t    \tgeometry2.mergeVertices();\n\t    \tgeometry2.computeFaceNormals();\n\t\n\t    \tvar vertices = geometry2.vertices;\n\t    \tvar faces = geometry2.faces;\n\t\n\t    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\tvar face = faces[ i ];\n\t\n\t    \t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t    \t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t    \t\t\tedge.sort( sortFunction );\n\t\n\t    \t\t\tvar key = edge.toString();\n\t\n\t    \t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t    \t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\thash[ key ].face2 = i;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar coords = [];\n\t\n\t    \tfor ( var key in hash ) {\n\t\n\t    \t\tvar h = hash[ key ];\n\t\n\t    \t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\t\n\t    \t\t\tvar vertex = vertices[ h.vert1 ];\n\t    \t\t\tcoords.push( vertex.x );\n\t    \t\t\tcoords.push( vertex.y );\n\t    \t\t\tcoords.push( vertex.z );\n\t\n\t    \t\t\tvertex = vertices[ h.vert2 ];\n\t    \t\t\tcoords.push( vertex.x );\n\t    \t\t\tcoords.push( vertex.y );\n\t    \t\t\tcoords.push( vertex.z );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );\n\t\n\t    }\n\t\n\t    EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    EdgesGeometry.prototype.constructor = EdgesGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'CylinderBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradiusTop: radiusTop,\n\t    \t\tradiusBottom: radiusBottom,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\topenEnded: openEnded,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tvar scope = this;\n\t\n\t    \tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\t    \tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\t    \theight = height !== undefined ? height : 100;\n\t\n\t    \tradialSegments = Math.floor( radialSegments ) || 8;\n\t    \theightSegments = Math.floor( heightSegments ) || 1;\n\t\n\t    \topenEnded = openEnded !== undefined ? openEnded : false;\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\t\n\t    \t// used to calculate buffer length\n\t\n\t    \tvar nbCap = 0;\n\t\n\t    \tif ( openEnded === false ) {\n\t\n\t    \t\tif ( radiusTop > 0 ) nbCap ++;\n\t    \t\tif ( radiusBottom > 0 ) nbCap ++;\n\t\n\t    \t}\n\t\n\t    \tvar vertexCount = calculateVertexCount();\n\t    \tvar indexCount = calculateIndexCount();\n\t\n\t    \t// buffers\n\t\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// helper variables\n\t\n\t    \tvar index = 0,\n\t    \t    indexOffset = 0,\n\t    \t    indexArray = [],\n\t    \t    halfHeight = height / 2;\n\t\n\t    \t// group variables\n\t    \tvar groupStart = 0;\n\t\n\t    \t// generate geometry\n\t\n\t    \tgenerateTorso();\n\t\n\t    \tif ( openEnded === false ) {\n\t\n\t    \t\tif ( radiusTop > 0 ) generateCap( true );\n\t    \t\tif ( radiusBottom > 0 ) generateCap( false );\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \t// helper functions\n\t\n\t    \tfunction calculateVertexCount() {\n\t\n\t    \t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\t\n\t    \t\tif ( openEnded === false ) {\n\t\n\t    \t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn count;\n\t\n\t    \t}\n\t\n\t    \tfunction calculateIndexCount() {\n\t\n\t    \t\tvar count = radialSegments * heightSegments * 2 * 3;\n\t\n\t    \t\tif ( openEnded === false ) {\n\t\n\t    \t\t\tcount += radialSegments * nbCap * 3;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn count;\n\t\n\t    \t}\n\t\n\t    \tfunction generateTorso() {\n\t\n\t    \t\tvar x, y;\n\t    \t\tvar normal = new Vector3();\n\t    \t\tvar vertex = new Vector3();\n\t\n\t    \t\tvar groupCount = 0;\n\t\n\t    \t\t// this will be used to calculate the normal\n\t    \t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\t\n\t    \t\t// generate vertices, normals and uvs\n\t\n\t    \t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\t\n\t    \t\t\tvar indexRow = [];\n\t\n\t    \t\t\tvar v = y / heightSegments;\n\t\n\t    \t\t\t// calculate the radius of the current row\n\t    \t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\t\n\t    \t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\t\n\t    \t\t\t\tvar u = x / radialSegments;\n\t\n\t    \t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\n\t    \t\t\t\tvar sinTheta = Math.sin( theta );\n\t    \t\t\t\tvar cosTheta = Math.cos( theta );\n\t\n\t    \t\t\t\t// vertex\n\t    \t\t\t\tvertex.x = radius * sinTheta;\n\t    \t\t\t\tvertex.y = - v * height + halfHeight;\n\t    \t\t\t\tvertex.z = radius * cosTheta;\n\t    \t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t\t// normal\n\t    \t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t    \t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\n\t    \t\t\t\t// uv\n\t    \t\t\t\tuvs.setXY( index, u, 1 - v );\n\t\n\t    \t\t\t\t// save index of vertex in respective row\n\t    \t\t\t\tindexRow.push( index );\n\t\n\t    \t\t\t\t// increase index\n\t    \t\t\t\tindex ++;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// now save vertices of the row in our index array\n\t    \t\t\tindexArray.push( indexRow );\n\t\n\t    \t\t}\n\t\n\t    \t\t// generate indices\n\t\n\t    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\t\n\t    \t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\t\n\t    \t\t\t\t// we use the index array to access the correct indices\n\t    \t\t\t\tvar i1 = indexArray[ y ][ x ];\n\t    \t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n\t    \t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n\t    \t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\t\n\t    \t\t\t\t// face one\n\t    \t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\t\n\t    \t\t\t\t// face two\n\t    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\t\n\t    \t\t\t\t// update counters\n\t    \t\t\t\tgroupCount += 6;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// add a group to the geometry. this will ensure multi material support\n\t    \t\tscope.addGroup( groupStart, groupCount, 0 );\n\t\n\t    \t\t// calculate new start value for groups\n\t    \t\tgroupStart += groupCount;\n\t\n\t    \t}\n\t\n\t    \tfunction generateCap( top ) {\n\t\n\t    \t\tvar x, centerIndexStart, centerIndexEnd;\n\t\n\t    \t\tvar uv = new Vector2();\n\t    \t\tvar vertex = new Vector3();\n\t\n\t    \t\tvar groupCount = 0;\n\t\n\t    \t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t    \t\tvar sign = ( top === true ) ? 1 : - 1;\n\t\n\t    \t\t// save the index of the first center vertex\n\t    \t\tcenterIndexStart = index;\n\t\n\t    \t\t// first we generate the center vertex data of the cap.\n\t    \t\t// because the geometry needs one set of uvs per face,\n\t    \t\t// we must generate a center vertex per face/segment\n\t\n\t    \t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = 0.5;\n\t    \t\t\tuv.y = 0.5;\n\t\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t\t// save the index of the last center vertex\n\t    \t\tcenterIndexEnd = index;\n\t\n\t    \t\t// now we generate the surrounding vertices, normals and uvs\n\t\n\t    \t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\t\n\t    \t\t\tvar u = x / radialSegments;\n\t    \t\t\tvar theta = u * thetaLength + thetaStart;\n\t\n\t    \t\t\tvar cosTheta = Math.cos( theta );\n\t    \t\t\tvar sinTheta = Math.sin( theta );\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = radius * sinTheta;\n\t    \t\t\tvertex.y = halfHeight * sign;\n\t    \t\t\tvertex.z = radius * cosTheta;\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t    \t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t\t// generate indices\n\t\n\t    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\t\n\t    \t\t\tvar c = centerIndexStart + x;\n\t    \t\t\tvar i = centerIndexEnd + x;\n\t\n\t    \t\t\tif ( top === true ) {\n\t\n\t    \t\t\t\t// face top\n\t    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// face bottom\n\t    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// update counters\n\t    \t\t\tgroupCount += 3;\n\t\n\t    \t\t}\n\t\n\t    \t\t// add a group to the geometry. this will ensure multi material support\n\t    \t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\t\n\t    \t\t// calculate new start value for groups\n\t    \t\tgroupStart += groupCount;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'CylinderGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradiusTop: radiusTop,\n\t    \t\tradiusBottom: radiusBottom,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\topenEnded: openEnded,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    CylinderGeometry.prototype = Object.create( Geometry.prototype );\n\t    CylinderGeometry.prototype.constructor = CylinderGeometry;\n\t\n\t    /**\n\t     * @author abelnation / http://github.com/abelnation\n\t     */\n\t\n\t    function ConeGeometry(\n\t    \tradius, height,\n\t    \tradialSegments, heightSegments,\n\t    \topenEnded, thetaStart, thetaLength ) {\n\t\n\t    \tCylinderGeometry.call( this,\n\t    \t\t0, radius, height,\n\t    \t\tradialSegments, heightSegments,\n\t    \t\topenEnded, thetaStart, thetaLength );\n\t\n\t    \tthis.type = 'ConeGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\topenEnded: openEnded,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    }\n\t\n\t    ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\t    ConeGeometry.prototype.constructor = ConeGeometry;\n\t\n\t    /*\n\t     * @author: abelnation / http://github.com/abelnation\n\t     */\n\t\n\t    function ConeBufferGeometry(\n\t    \tradius, height,\n\t    \tradialSegments, heightSegments,\n\t    \topenEnded, thetaStart, thetaLength ) {\n\t\n\t    \tCylinderBufferGeometry.call( this,\n\t    \t\t0, radius, height,\n\t    \t\tradialSegments, heightSegments,\n\t    \t\topenEnded, thetaStart, thetaLength );\n\t\n\t    \tthis.type = 'ConeBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    }\n\t\n\t    ConeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'CircleBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tsegments: segments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tradius = radius || 50;\n\t    \tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\t\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\t\n\t    \tvar vertices = segments + 2;\n\t\n\t    \tvar positions = new Float32Array( vertices * 3 );\n\t    \tvar normals = new Float32Array( vertices * 3 );\n\t    \tvar uvs = new Float32Array( vertices * 2 );\n\t\n\t    \t// center data is already zero, but need to set a few extras\n\t    \tnormals[ 2 ] = 1.0;\n\t    \tuvs[ 0 ] = 0.5;\n\t    \tuvs[ 1 ] = 0.5;\n\t\n\t    \tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\t\n\t    \t\tvar segment = thetaStart + s / segments * thetaLength;\n\t\n\t    \t\tpositions[ i ] = radius * Math.cos( segment );\n\t    \t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\t\n\t    \t\tnormals[ i + 2 ] = 1; // normal z\n\t\n\t    \t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n\t    \t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\t\n\t    \t}\n\t\n\t    \tvar indices = [];\n\t\n\t    \tfor ( var i = 1; i <= segments; i ++ ) {\n\t\n\t    \t\tindices.push( i, i + 1, 0 );\n\t\n\t    \t}\n\t\n\t    \tthis.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t    }\n\t\n\t    CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\t\n\t    /**\n\t     * @author hughes\n\t     */\n\t\n\t    function CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'CircleGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tsegments: segments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\n\t    }\n\t\n\t    CircleGeometry.prototype = Object.create( Geometry.prototype );\n\t    CircleGeometry.prototype.constructor = CircleGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n\t     */\n\t\n\t    function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'BoxGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\tdepth: depth,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tdepthSegments: depthSegments\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    BoxGeometry.prototype = Object.create( Geometry.prototype );\n\t    BoxGeometry.prototype.constructor = BoxGeometry;\n\t\n\t\n\t\n\t    var Geometries = Object.freeze({\n\t    \tWireframeGeometry: WireframeGeometry,\n\t    \tParametricGeometry: ParametricGeometry,\n\t    \tTetrahedronGeometry: TetrahedronGeometry,\n\t    \tOctahedronGeometry: OctahedronGeometry,\n\t    \tIcosahedronGeometry: IcosahedronGeometry,\n\t    \tDodecahedronGeometry: DodecahedronGeometry,\n\t    \tPolyhedronGeometry: PolyhedronGeometry,\n\t    \tTubeGeometry: TubeGeometry,\n\t    \tTorusKnotGeometry: TorusKnotGeometry,\n\t    \tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t    \tTorusGeometry: TorusGeometry,\n\t    \tTorusBufferGeometry: TorusBufferGeometry,\n\t    \tTextGeometry: TextGeometry,\n\t    \tSphereBufferGeometry: SphereBufferGeometry,\n\t    \tSphereGeometry: SphereGeometry,\n\t    \tRingGeometry: RingGeometry,\n\t    \tRingBufferGeometry: RingBufferGeometry,\n\t    \tPlaneBufferGeometry: PlaneBufferGeometry,\n\t    \tPlaneGeometry: PlaneGeometry,\n\t    \tLatheGeometry: LatheGeometry,\n\t    \tLatheBufferGeometry: LatheBufferGeometry,\n\t    \tShapeGeometry: ShapeGeometry,\n\t    \tExtrudeGeometry: ExtrudeGeometry,\n\t    \tEdgesGeometry: EdgesGeometry,\n\t    \tConeGeometry: ConeGeometry,\n\t    \tConeBufferGeometry: ConeBufferGeometry,\n\t    \tCylinderGeometry: CylinderGeometry,\n\t    \tCylinderBufferGeometry: CylinderBufferGeometry,\n\t    \tCircleBufferGeometry: CircleBufferGeometry,\n\t    \tCircleGeometry: CircleGeometry,\n\t    \tBoxBufferGeometry: BoxBufferGeometry,\n\t    \tBoxGeometry: BoxGeometry\n\t    });\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function ShadowMaterial() {\n\t\n\t    \tShaderMaterial.call( this, {\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t    \t\t\tUniformsLib[ \"lights\" ],\n\t    \t\t\t{\n\t    \t\t\t\topacity: { value: 1.0 }\n\t    \t\t\t}\n\t    \t\t] ),\n\t    \t\tvertexShader: ShaderChunk[ 'shadow_vert' ],\n\t    \t\tfragmentShader: ShaderChunk[ 'shadow_frag' ]\n\t    \t} );\n\t\n\t    \tthis.lights = true;\n\t    \tthis.transparent = true;\n\t\n\t    \tObject.defineProperties( this, {\n\t    \t\topacity: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tget: function () {\n\t    \t\t\t\treturn this.uniforms.opacity.value;\n\t    \t\t\t},\n\t    \t\t\tset: function ( value ) {\n\t    \t\t\t\tthis.uniforms.opacity.value = value;\n\t    \t\t\t}\n\t    \t\t}\n\t    \t} );\n\t\n\t    }\n\t\n\t    ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\t    ShadowMaterial.prototype.constructor = ShadowMaterial;\n\t\n\t    ShadowMaterial.prototype.isShadowMaterial = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function RawShaderMaterial( parameters ) {\n\t\n\t    \tShaderMaterial.call( this, parameters );\n\t\n\t    \tthis.type = 'RawShaderMaterial';\n\t\n\t    }\n\t\n\t    RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\t    RawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\t\n\t    RawShaderMaterial.prototype.isRawShaderMaterial = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function MultiMaterial( materials ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.type = 'MultiMaterial';\n\t\n\t    \tthis.materials = materials instanceof Array ? materials : [];\n\t\n\t    \tthis.visible = true;\n\t\n\t    }\n\t\n\t    MultiMaterial.prototype = {\n\t\n\t    \tconstructor: MultiMaterial,\n\t\n\t    \tisMultiMaterial: true,\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar output = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.2,\n\t    \t\t\t\ttype: 'material',\n\t    \t\t\t\tgenerator: 'MaterialExporter'\n\t    \t\t\t},\n\t    \t\t\tuuid: this.uuid,\n\t    \t\t\ttype: this.type,\n\t    \t\t\tmaterials: []\n\t    \t\t};\n\t\n\t    \t\tvar materials = this.materials;\n\t\n\t    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar material = materials[ i ].toJSON( meta );\n\t    \t\t\tdelete material.metadata;\n\t\n\t    \t\t\toutput.materials.push( material );\n\t\n\t    \t\t}\n\t\n\t    \t\toutput.visible = this.visible;\n\t\n\t    \t\treturn output;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\tvar material = new this.constructor();\n\t\n\t    \t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\t\n\t    \t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tmaterial.visible = this.visible;\n\t\n\t    \t\treturn material;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  roughness: <float>,\n\t     *  metalness: <float>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  lightMap: new THREE.Texture( <Image> ),\n\t     *  lightMapIntensity: <float>\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  emissive: <hex>,\n\t     *  emissiveIntensity: <float>\n\t     *  emissiveMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  bumpMap: new THREE.Texture( <Image> ),\n\t     *  bumpScale: <float>,\n\t     *\n\t     *  normalMap: new THREE.Texture( <Image> ),\n\t     *  normalScale: <Vector2>,\n\t     *\n\t     *  displacementMap: new THREE.Texture( <Image> ),\n\t     *  displacementScale: <float>,\n\t     *  displacementBias: <float>,\n\t     *\n\t     *  roughnessMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  metalnessMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t     *  envMapIntensity: <float>\n\t     *\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshStandardMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.defines = { 'STANDARD': '' };\n\t\n\t    \tthis.type = 'MeshStandardMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // diffuse\n\t    \tthis.roughness = 0.5;\n\t    \tthis.metalness = 0.5;\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.lightMap = null;\n\t    \tthis.lightMapIntensity = 1.0;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.emissive = new Color( 0x000000 );\n\t    \tthis.emissiveIntensity = 1.0;\n\t    \tthis.emissiveMap = null;\n\t\n\t    \tthis.bumpMap = null;\n\t    \tthis.bumpScale = 1;\n\t\n\t    \tthis.normalMap = null;\n\t    \tthis.normalScale = new Vector2( 1, 1 );\n\t\n\t    \tthis.displacementMap = null;\n\t    \tthis.displacementScale = 1;\n\t    \tthis.displacementBias = 0;\n\t\n\t    \tthis.roughnessMap = null;\n\t\n\t    \tthis.metalnessMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.envMapIntensity = 1.0;\n\t\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t    \tthis.morphNormals = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshStandardMaterial.prototype = Object.create( Material.prototype );\n\t    MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\t\n\t    MeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\t\n\t    MeshStandardMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.defines = { 'STANDARD': '' };\n\t\n\t    \tthis.color.copy( source.color );\n\t    \tthis.roughness = source.roughness;\n\t    \tthis.metalness = source.metalness;\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.lightMap = source.lightMap;\n\t    \tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.emissive.copy( source.emissive );\n\t    \tthis.emissiveMap = source.emissiveMap;\n\t    \tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t    \tthis.bumpMap = source.bumpMap;\n\t    \tthis.bumpScale = source.bumpScale;\n\t\n\t    \tthis.normalMap = source.normalMap;\n\t    \tthis.normalScale.copy( source.normalScale );\n\t\n\t    \tthis.displacementMap = source.displacementMap;\n\t    \tthis.displacementScale = source.displacementScale;\n\t    \tthis.displacementBias = source.displacementBias;\n\t\n\t    \tthis.roughnessMap = source.roughnessMap;\n\t\n\t    \tthis.metalnessMap = source.metalnessMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.envMapIntensity = source.envMapIntensity;\n\t\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * parameters = {\n\t     *  reflectivity: <float>\n\t     * }\n\t     */\n\t\n\t    function MeshPhysicalMaterial( parameters ) {\n\t\n\t    \tMeshStandardMaterial.call( this );\n\t\n\t    \tthis.defines = { 'PHYSICAL': '' };\n\t\n\t    \tthis.type = 'MeshPhysicalMaterial';\n\t\n\t    \tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\t\n\t    \tthis.clearCoat = 0.0;\n\t    \tthis.clearCoatRoughness = 0.0;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\t    MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\t\n\t    MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\t\n\t    MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMeshStandardMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.defines = { 'PHYSICAL': '' };\n\t\n\t    \tthis.reflectivity = source.reflectivity;\n\t\n\t    \tthis.clearCoat = source.clearCoat;\n\t    \tthis.clearCoatRoughness = source.clearCoatRoughness;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  specular: <hex>,\n\t     *  shininess: <float>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  lightMap: new THREE.Texture( <Image> ),\n\t     *  lightMapIntensity: <float>\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  emissive: <hex>,\n\t     *  emissiveIntensity: <float>\n\t     *  emissiveMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  bumpMap: new THREE.Texture( <Image> ),\n\t     *  bumpScale: <float>,\n\t     *\n\t     *  normalMap: new THREE.Texture( <Image> ),\n\t     *  normalScale: <Vector2>,\n\t     *\n\t     *  displacementMap: new THREE.Texture( <Image> ),\n\t     *  displacementScale: <float>,\n\t     *  displacementBias: <float>,\n\t     *\n\t     *  specularMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t     *  combine: THREE.Multiply,\n\t     *  reflectivity: <float>,\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshPhongMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshPhongMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // diffuse\n\t    \tthis.specular = new Color( 0x111111 );\n\t    \tthis.shininess = 30;\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.lightMap = null;\n\t    \tthis.lightMapIntensity = 1.0;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.emissive = new Color( 0x000000 );\n\t    \tthis.emissiveIntensity = 1.0;\n\t    \tthis.emissiveMap = null;\n\t\n\t    \tthis.bumpMap = null;\n\t    \tthis.bumpScale = 1;\n\t\n\t    \tthis.normalMap = null;\n\t    \tthis.normalScale = new Vector2( 1, 1 );\n\t\n\t    \tthis.displacementMap = null;\n\t    \tthis.displacementScale = 1;\n\t    \tthis.displacementBias = 0;\n\t\n\t    \tthis.specularMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.combine = MultiplyOperation;\n\t    \tthis.reflectivity = 1;\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t    \tthis.morphNormals = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshPhongMaterial.prototype = Object.create( Material.prototype );\n\t    MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\t\n\t    MeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\t\n\t    MeshPhongMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t    \tthis.specular.copy( source.specular );\n\t    \tthis.shininess = source.shininess;\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.lightMap = source.lightMap;\n\t    \tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.emissive.copy( source.emissive );\n\t    \tthis.emissiveMap = source.emissiveMap;\n\t    \tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t    \tthis.bumpMap = source.bumpMap;\n\t    \tthis.bumpScale = source.bumpScale;\n\t\n\t    \tthis.normalMap = source.normalMap;\n\t    \tthis.normalScale.copy( source.normalScale );\n\t\n\t    \tthis.displacementMap = source.displacementMap;\n\t    \tthis.displacementScale = source.displacementScale;\n\t    \tthis.displacementBias = source.displacementBias;\n\t\n\t    \tthis.specularMap = source.specularMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.combine = source.combine;\n\t    \tthis.reflectivity = source.reflectivity;\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     *\n\t     * parameters = {\n\t     *  opacity: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>\n\t     * }\n\t     */\n\t\n\t    function MeshNormalMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this, parameters );\n\t\n\t    \tthis.type = 'MeshNormalMaterial';\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t\n\t    \tthis.fog = false;\n\t    \tthis.lights = false;\n\t    \tthis.morphTargets = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshNormalMaterial.prototype = Object.create( Material.prototype );\n\t    MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\t\n\t    MeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\t\n\t    MeshNormalMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  lightMap: new THREE.Texture( <Image> ),\n\t     *  lightMapIntensity: <float>\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  emissive: <hex>,\n\t     *  emissiveIntensity: <float>\n\t     *  emissiveMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  specularMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t     *  combine: THREE.Multiply,\n\t     *  reflectivity: <float>,\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshLambertMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshLambertMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // diffuse\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.lightMap = null;\n\t    \tthis.lightMapIntensity = 1.0;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.emissive = new Color( 0x000000 );\n\t    \tthis.emissiveIntensity = 1.0;\n\t    \tthis.emissiveMap = null;\n\t\n\t    \tthis.specularMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.combine = MultiplyOperation;\n\t    \tthis.reflectivity = 1;\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t    \tthis.morphNormals = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshLambertMaterial.prototype = Object.create( Material.prototype );\n\t    MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\t\n\t    MeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\t\n\t    MeshLambertMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.lightMap = source.lightMap;\n\t    \tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.emissive.copy( source.emissive );\n\t    \tthis.emissiveMap = source.emissiveMap;\n\t    \tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t    \tthis.specularMap = source.specularMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.combine = source.combine;\n\t    \tthis.reflectivity = source.reflectivity;\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  linewidth: <float>,\n\t     *\n\t     *  scale: <float>,\n\t     *  dashSize: <float>,\n\t     *  gapSize: <float>\n\t     * }\n\t     */\n\t\n\t    function LineDashedMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'LineDashedMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t\n\t    \tthis.linewidth = 1;\n\t\n\t    \tthis.scale = 1;\n\t    \tthis.dashSize = 3;\n\t    \tthis.gapSize = 1;\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    LineDashedMaterial.prototype = Object.create( Material.prototype );\n\t    LineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\t\n\t    LineDashedMaterial.prototype.isLineDashedMaterial = true;\n\t\n\t    LineDashedMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.linewidth = source.linewidth;\n\t\n\t    \tthis.scale = source.scale;\n\t    \tthis.dashSize = source.dashSize;\n\t    \tthis.gapSize = source.gapSize;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t\n\t\n\t    var Materials = Object.freeze({\n\t    \tShadowMaterial: ShadowMaterial,\n\t    \tSpriteMaterial: SpriteMaterial,\n\t    \tRawShaderMaterial: RawShaderMaterial,\n\t    \tShaderMaterial: ShaderMaterial,\n\t    \tPointsMaterial: PointsMaterial,\n\t    \tMultiMaterial: MultiMaterial,\n\t    \tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t    \tMeshStandardMaterial: MeshStandardMaterial,\n\t    \tMeshPhongMaterial: MeshPhongMaterial,\n\t    \tMeshNormalMaterial: MeshNormalMaterial,\n\t    \tMeshLambertMaterial: MeshLambertMaterial,\n\t    \tMeshDepthMaterial: MeshDepthMaterial,\n\t    \tMeshBasicMaterial: MeshBasicMaterial,\n\t    \tLineDashedMaterial: LineDashedMaterial,\n\t    \tLineBasicMaterial: LineBasicMaterial,\n\t    \tMaterial: Material\n\t    });\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    exports.Cache = {\n\t\n\t    \tenabled: false,\n\t\n\t    \tfiles: {},\n\t\n\t    \tadd: function ( key, file ) {\n\t\n\t    \t\tif ( this.enabled === false ) return;\n\t\n\t    \t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\t\n\t    \t\tthis.files[ key ] = file;\n\t\n\t    \t},\n\t\n\t    \tget: function ( key ) {\n\t\n\t    \t\tif ( this.enabled === false ) return;\n\t\n\t    \t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\t\n\t    \t\treturn this.files[ key ];\n\t\n\t    \t},\n\t\n\t    \tremove: function ( key ) {\n\t\n\t    \t\tdelete this.files[ key ];\n\t\n\t    \t},\n\t\n\t    \tclear: function () {\n\t\n\t    \t\tthis.files = {};\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LoadingManager( onLoad, onProgress, onError ) {\n\t\n\t    \tvar scope = this;\n\t\n\t    \tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\t\n\t    \tthis.onStart = undefined;\n\t    \tthis.onLoad = onLoad;\n\t    \tthis.onProgress = onProgress;\n\t    \tthis.onError = onError;\n\t\n\t    \tthis.itemStart = function ( url ) {\n\t\n\t    \t\titemsTotal ++;\n\t\n\t    \t\tif ( isLoading === false ) {\n\t\n\t    \t\t\tif ( scope.onStart !== undefined ) {\n\t\n\t    \t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tisLoading = true;\n\t\n\t    \t};\n\t\n\t    \tthis.itemEnd = function ( url ) {\n\t\n\t    \t\titemsLoaded ++;\n\t\n\t    \t\tif ( scope.onProgress !== undefined ) {\n\t\n\t    \t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( itemsLoaded === itemsTotal ) {\n\t\n\t    \t\t\tisLoading = false;\n\t\n\t    \t\t\tif ( scope.onLoad !== undefined ) {\n\t\n\t    \t\t\t\tscope.onLoad();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tthis.itemError = function ( url ) {\n\t\n\t    \t\tif ( scope.onError !== undefined ) {\n\t\n\t    \t\t\tscope.onError( url );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    exports.DefaultLoadingManager = new LoadingManager();\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function XHRLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( XHRLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tif ( this.path !== undefined ) url = this.path + url;\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar cached = exports.Cache.get( url );\n\t\n\t    \t\tif ( cached !== undefined ) {\n\t\n\t    \t\t\tscope.manager.itemStart( url );\n\t\n\t    \t\t\tsetTimeout( function () {\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( cached );\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t}, 0 );\n\t\n\t    \t\t\treturn cached;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar request = new XMLHttpRequest();\n\t    \t\trequest.open( 'GET', url, true );\n\t\n\t    \t\trequest.addEventListener( 'load', function ( event ) {\n\t\n\t    \t\t\tvar response = event.target.response;\n\t\n\t    \t\t\texports.Cache.add( url, response );\n\t\n\t    \t\t\tif ( this.status === 200 ) {\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( response );\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t} else if ( this.status === 0 ) {\n\t\n\t    \t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t    \t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( response );\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( onError ) onError( event );\n\t\n\t    \t\t\t\tscope.manager.itemError( url );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}, false );\n\t\n\t    \t\tif ( onProgress !== undefined ) {\n\t\n\t    \t\t\trequest.addEventListener( 'progress', function ( event ) {\n\t\n\t    \t\t\t\tonProgress( event );\n\t\n\t    \t\t\t}, false );\n\t\n\t    \t\t}\n\t\n\t    \t\trequest.addEventListener( 'error', function ( event ) {\n\t\n\t    \t\t\tif ( onError ) onError( event );\n\t\n\t    \t\t\tscope.manager.itemError( url );\n\t\n\t    \t\t}, false );\n\t\n\t    \t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t    \t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\t\n\t    \t\tif ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );\n\t\n\t    \t\trequest.send( null );\n\t\n\t    \t\tscope.manager.itemStart( url );\n\t\n\t    \t\treturn request;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetResponseType: function ( value ) {\n\t\n\t    \t\tthis.responseType = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetWithCredentials: function ( value ) {\n\t\n\t    \t\tthis.withCredentials = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     *\n\t     * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t     */\n\t\n\t    function CompressedTextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    \t// override in sub classes\n\t    \tthis._parser = null;\n\t\n\t    }\n\t\n\t    Object.assign( CompressedTextureLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar images = [];\n\t\n\t    \t\tvar texture = new CompressedTexture();\n\t    \t\ttexture.image = images;\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setPath( this.path );\n\t    \t\tloader.setResponseType( 'arraybuffer' );\n\t\n\t    \t\tfunction loadTexture( i ) {\n\t\n\t    \t\t\tloader.load( url[ i ], function ( buffer ) {\n\t\n\t    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\t\n\t    \t\t\t\timages[ i ] = {\n\t    \t\t\t\t\twidth: texDatas.width,\n\t    \t\t\t\t\theight: texDatas.height,\n\t    \t\t\t\t\tformat: texDatas.format,\n\t    \t\t\t\t\tmipmaps: texDatas.mipmaps\n\t    \t\t\t\t};\n\t\n\t    \t\t\t\tloaded += 1;\n\t\n\t    \t\t\t\tif ( loaded === 6 ) {\n\t\n\t    \t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t    \t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t    \t\t\t\t\ttexture.format = texDatas.format;\n\t    \t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}, onProgress, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( Array.isArray( url ) ) {\n\t\n\t    \t\t\tvar loaded = 0;\n\t\n\t    \t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\t\n\t    \t\t\t\tloadTexture( i );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// compressed cubemap texture stored in a single DDS file\n\t\n\t    \t\t\tloader.load( url, function ( buffer ) {\n\t\n\t    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\t\n\t    \t\t\t\tif ( texDatas.isCubemap ) {\n\t\n\t    \t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\t\n\t    \t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\t\n\t    \t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\t\n\t    \t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t    \t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t    \t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t    \t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\ttexture.image.width = texDatas.width;\n\t    \t\t\t\t\ttexture.image.height = texDatas.height;\n\t    \t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\t\n\t    \t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture.format = texDatas.format;\n\t    \t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t    \t\t\t}, onProgress, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author Nikos M. / https://github.com/foo123/\n\t     *\n\t     * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t     */\n\t\n\t    var DataTextureLoader = BinaryTextureLoader;\n\t    function BinaryTextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    \t// override in sub classes\n\t    \tthis._parser = null;\n\t\n\t    }\n\t\n\t    Object.assign( BinaryTextureLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar texture = new DataTexture();\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setResponseType( 'arraybuffer' );\n\t\n\t    \t\tloader.load( url, function ( buffer ) {\n\t\n\t    \t\t\tvar texData = scope._parser( buffer );\n\t\n\t    \t\t\tif ( ! texData ) return;\n\t\n\t    \t\t\tif ( undefined !== texData.image ) {\n\t\n\t    \t\t\t\ttexture.image = texData.image;\n\t\n\t    \t\t\t} else if ( undefined !== texData.data ) {\n\t\n\t    \t\t\t\ttexture.image.width = texData.width;\n\t    \t\t\t\ttexture.image.height = texData.height;\n\t    \t\t\t\ttexture.image.data = texData.data;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n\t    \t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\t\n\t    \t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n\t    \t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\t\n\t    \t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\t\n\t    \t\t\tif ( undefined !== texData.format ) {\n\t\n\t    \t\t\t\ttexture.format = texData.format;\n\t\n\t    \t\t\t}\n\t    \t\t\tif ( undefined !== texData.type ) {\n\t\n\t    \t\t\t\ttexture.type = texData.type;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( undefined !== texData.mipmaps ) {\n\t\n\t    \t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( 1 === texData.mipmapCount ) {\n\t\n\t    \t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\tif ( onLoad ) onLoad( texture, texData );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t\n\t    \t\treturn texture;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function ImageLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( ImageLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\t    \t\timage.onload = function () {\n\t\n\t    \t\t\timage.onload = null;\n\t\n\t    \t\t\tURL.revokeObjectURL( image.src );\n\t\n\t    \t\t\tif ( onLoad ) onLoad( image );\n\t\n\t    \t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t};\n\t\n\t    \t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\t\n\t    \t\t\timage.src = url;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar loader = new XHRLoader();\n\t    \t\t\tloader.setPath( this.path );\n\t    \t\t\tloader.setResponseType( 'blob' );\n\t    \t\t\tloader.setWithCredentials( this.withCredentials );\n\t    \t\t\tloader.load( url, function ( blob ) {\n\t\n\t    \t\t\t\timage.src = URL.createObjectURL( blob );\n\t\n\t    \t\t\t}, onProgress, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\tscope.manager.itemStart( url );\n\t\n\t    \t\treturn image;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetWithCredentials: function ( value ) {\n\t\n\t    \t\tthis.withCredentials = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CubeTextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( CubeTextureLoader.prototype, {\n\t\n\t    \tload: function ( urls, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar texture = new CubeTexture();\n\t\n\t    \t\tvar loader = new ImageLoader( this.manager );\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t    \t\tloader.setPath( this.path );\n\t\n\t    \t\tvar loaded = 0;\n\t\n\t    \t\tfunction loadTexture( i ) {\n\t\n\t    \t\t\tloader.load( urls[ i ], function ( image ) {\n\t\n\t    \t\t\t\ttexture.images[ i ] = image;\n\t\n\t    \t\t\t\tloaded ++;\n\t\n\t    \t\t\t\tif ( loaded === 6 ) {\n\t\n\t    \t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}, undefined, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\t\n\t    \t\t\tloadTexture( i );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function TextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( TextureLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar texture = new Texture();\n\t\n\t    \t\tvar loader = new ImageLoader( this.manager );\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t    \t\tloader.setWithCredentials( this.withCredentials );\n\t    \t\tloader.setPath( this.path );\n\t    \t\tloader.load( url, function ( image ) {\n\t\n\t    \t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t    \t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\t\n\t    \t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t    \t\t\ttexture.image = image;\n\t    \t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\tif ( onLoad !== undefined ) {\n\t\n\t    \t\t\t\tonLoad( texture );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetWithCredentials: function ( value ) {\n\t\n\t    \t\tthis.withCredentials = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Light( color, intensity ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Light';\n\t\n\t    \tthis.color = new Color( color );\n\t    \tthis.intensity = intensity !== undefined ? intensity : 1;\n\t\n\t    \tthis.receiveShadow = undefined;\n\t\n\t    }\n\t\n\t    Light.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Light,\n\t\n\t    \tisLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.color.copy( source.color );\n\t    \t\tthis.intensity = source.intensity;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.color = this.color.getHex();\n\t    \t\tdata.object.intensity = this.intensity;\n\t\n\t    \t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\t\n\t    \t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t    \t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t    \t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t    \t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\t\n\t    \t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function HemisphereLight( skyColor, groundColor, intensity ) {\n\t\n\t    \tLight.call( this, skyColor, intensity );\n\t\n\t    \tthis.type = 'HemisphereLight';\n\t\n\t    \tthis.castShadow = undefined;\n\t\n\t    \tthis.position.copy( Object3D.DefaultUp );\n\t    \tthis.updateMatrix();\n\t\n\t    \tthis.groundColor = new Color( groundColor );\n\t\n\t    }\n\t\n\t    HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: HemisphereLight,\n\t\n\t    \tisHemisphereLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.groundColor.copy( source.groundColor );\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LightShadow( camera ) {\n\t\n\t    \tthis.camera = camera;\n\t\n\t    \tthis.bias = 0;\n\t    \tthis.radius = 1;\n\t\n\t    \tthis.mapSize = new Vector2( 512, 512 );\n\t\n\t    \tthis.map = null;\n\t    \tthis.matrix = new Matrix4();\n\t\n\t    }\n\t\n\t    Object.assign( LightShadow.prototype, {\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.camera = source.camera.clone();\n\t\n\t    \t\tthis.bias = source.bias;\n\t    \t\tthis.radius = source.radius;\n\t\n\t    \t\tthis.mapSize.copy( source.mapSize );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\tvar object = {};\n\t\n\t    \t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t    \t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t    \t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\t\n\t    \t\tobject.camera = this.camera.toJSON( false ).object;\n\t    \t\tdelete object.camera.matrix;\n\t\n\t    \t\treturn object;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function SpotLightShadow() {\n\t\n\t    \tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\t\n\t    }\n\t\n\t    SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\t\n\t    \tconstructor: SpotLightShadow,\n\t\n\t    \tisSpotLightShadow: true,\n\t\n\t    \tupdate: function ( light ) {\n\t\n\t    \t\tvar fov = exports.Math.RAD2DEG * 2 * light.angle;\n\t    \t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t    \t\tvar far = light.distance || 500;\n\t\n\t    \t\tvar camera = this.camera;\n\t\n\t    \t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\t\n\t    \t\t\tcamera.fov = fov;\n\t    \t\t\tcamera.aspect = aspect;\n\t    \t\t\tcamera.far = far;\n\t    \t\t\tcamera.updateProjectionMatrix();\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'SpotLight';\n\t\n\t    \tthis.position.copy( Object3D.DefaultUp );\n\t    \tthis.updateMatrix();\n\t\n\t    \tthis.target = new Object3D();\n\t\n\t    \tObject.defineProperty( this, 'power', {\n\t    \t\tget: function () {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\treturn this.intensity * Math.PI;\n\t    \t\t},\n\t    \t\tset: function ( power ) {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\tthis.intensity = power / Math.PI;\n\t    \t\t}\n\t    \t} );\n\t\n\t    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t    \tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t    \tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\t\n\t    \tthis.shadow = new SpotLightShadow();\n\t\n\t    }\n\t\n\t    SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: SpotLight,\n\t\n\t    \tisSpotLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.distance = source.distance;\n\t    \t\tthis.angle = source.angle;\n\t    \t\tthis.penumbra = source.penumbra;\n\t    \t\tthis.decay = source.decay;\n\t\n\t    \t\tthis.target = source.target.clone();\n\t\n\t    \t\tthis.shadow = source.shadow.clone();\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t\n\t    function PointLight( color, intensity, distance, decay ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'PointLight';\n\t\n\t    \tObject.defineProperty( this, 'power', {\n\t    \t\tget: function () {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\treturn this.intensity * 4 * Math.PI;\n\t\n\t    \t\t},\n\t    \t\tset: function ( power ) {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\tthis.intensity = power / ( 4 * Math.PI );\n\t    \t\t}\n\t    \t} );\n\t\n\t    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\t\n\t    \tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\t\n\t    }\n\t\n\t    PointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: PointLight,\n\t\n\t    \tisPointLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.distance = source.distance;\n\t    \t\tthis.decay = source.decay;\n\t\n\t    \t\tthis.shadow = source.shadow.clone();\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function DirectionalLightShadow( light ) {\n\t\n\t    \tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\t\n\t    }\n\t\n\t    DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\t\n\t    \tconstructor: DirectionalLightShadow\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function DirectionalLight( color, intensity ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'DirectionalLight';\n\t\n\t    \tthis.position.copy( Object3D.DefaultUp );\n\t    \tthis.updateMatrix();\n\t\n\t    \tthis.target = new Object3D();\n\t\n\t    \tthis.shadow = new DirectionalLightShadow();\n\t\n\t    }\n\t\n\t    DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: DirectionalLight,\n\t\n\t    \tisDirectionalLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.target = source.target.clone();\n\t\n\t    \t\tthis.shadow = source.shadow.clone();\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function AmbientLight( color, intensity ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'AmbientLight';\n\t\n\t    \tthis.castShadow = undefined;\n\t\n\t    }\n\t\n\t    AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: AmbientLight,\n\t\n\t    \tisAmbientLight: true,\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author tschw\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     */\n\t\n\t    exports.AnimationUtils = {\n\t\n\t    \t// same as Array.prototype.slice, but also works on typed arrays\n\t    \tarraySlice: function( array, from, to ) {\n\t\n\t    \t\tif ( exports.AnimationUtils.isTypedArray( array ) ) {\n\t\n\t    \t\t\treturn new array.constructor( array.subarray( from, to ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn array.slice( from, to );\n\t\n\t    \t},\n\t\n\t    \t// converts an array to a specific type\n\t    \tconvertArray: function( array, type, forceClone ) {\n\t\n\t    \t\tif ( ! array || // let 'undefined' and 'null' pass\n\t    \t\t\t\t! forceClone && array.constructor === type ) return array;\n\t\n\t    \t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\t\n\t    \t\t\treturn new type( array ); // create typed array\n\t\n\t    \t\t}\n\t\n\t    \t\treturn Array.prototype.slice.call( array ); // create Array\n\t\n\t    \t},\n\t\n\t    \tisTypedArray: function( object ) {\n\t\n\t    \t\treturn ArrayBuffer.isView( object ) &&\n\t    \t\t\t\t! ( object instanceof DataView );\n\t\n\t    \t},\n\t\n\t    \t// returns an array by which times and values can be sorted\n\t    \tgetKeyframeOrder: function( times ) {\n\t\n\t    \t\tfunction compareTime( i, j ) {\n\t\n\t    \t\t\treturn times[ i ] - times[ j ];\n\t\n\t    \t\t}\n\t\n\t    \t\tvar n = times.length;\n\t    \t\tvar result = new Array( n );\n\t    \t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\t\n\t    \t\tresult.sort( compareTime );\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t    \tsortedArray: function( values, stride, order ) {\n\t\n\t    \t\tvar nValues = values.length;\n\t    \t\tvar result = new values.constructor( nValues );\n\t\n\t    \t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\t\n\t    \t\t\tvar srcOffset = order[ i ] * stride;\n\t\n\t    \t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\t\n\t    \t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \t// function for parsing AOS keyframe formats\n\t    \tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\t\n\t    \t\tvar i = 1, key = jsonKeys[ 0 ];\n\t\n\t    \t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\t\n\t    \t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( key === undefined ) return; // no data\n\t\n\t    \t\tvar value = key[ valuePropertyName ];\n\t    \t\tif ( value === undefined ) return; // no data\n\t\n\t    \t\tif ( Array.isArray( value ) ) {\n\t\n\t    \t\t\tdo {\n\t\n\t    \t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t    \t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\ttimes.push( key.time );\n\t    \t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t\t} while ( key !== undefined );\n\t\n\t    \t\t} else if ( value.toArray !== undefined ) {\n\t    \t\t\t// ...assume THREE.Math-ish\n\t\n\t    \t\t\tdo {\n\t\n\t    \t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t    \t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\ttimes.push( key.time );\n\t    \t\t\t\t\tvalue.toArray( values, values.length );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t\t} while ( key !== undefined );\n\t\n\t    \t\t} else {\n\t    \t\t\t// otherwise push as-is\n\t\n\t    \t\t\tdo {\n\t\n\t    \t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t    \t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\ttimes.push( key.time );\n\t    \t\t\t\t\tvalues.push( value );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t\t} while ( key !== undefined );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * Abstract base class of interpolants over parametric samples.\n\t     *\n\t     * The parameter domain is one dimensional, typically the time or a path\n\t     * along a curve defined by the data.\n\t     *\n\t     * The sample values can have any dimensionality and derived classes may\n\t     * apply special interpretations to the data.\n\t     *\n\t     * This class provides the interval seek in a Template Method, deferring\n\t     * the actual interpolation to derived classes.\n\t     *\n\t     * Time complexity is O(1) for linear access crossing at most two points\n\t     * and O(log N) for random access, where N is the number of positions.\n\t     *\n\t     * References:\n\t     *\n\t     * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function Interpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tthis.parameterPositions = parameterPositions;\n\t    \tthis._cachedIndex = 0;\n\t\n\t    \tthis.resultBuffer = resultBuffer !== undefined ?\n\t    \t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t    \tthis.sampleValues = sampleValues;\n\t    \tthis.valueSize = sampleSize;\n\t\n\t    }\n\t\n\t    Interpolant.prototype = {\n\t\n\t    \tconstructor: Interpolant,\n\t\n\t    \tevaluate: function( t ) {\n\t\n\t    \t\tvar pp = this.parameterPositions,\n\t    \t\t\ti1 = this._cachedIndex,\n\t\n\t    \t\t\tt1 = pp[   i1   ],\n\t    \t\t\tt0 = pp[ i1 - 1 ];\n\t\n\t    \t\tvalidate_interval: {\n\t\n\t    \t\t\tseek: {\n\t\n\t    \t\t\t\tvar right;\n\t\n\t    \t\t\t\tlinear_scan: {\n\t    //- See http://jsperf.com/comparison-to-undefined/3\n\t    //- slower code:\n\t    //-\n\t    //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t    \t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\t\n\t    \t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\t\n\t    \t\t\t\t\t\t\tif ( t1 === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\t\n\t    \t\t\t\t\t\t\t\t// after end\n\t\n\t    \t\t\t\t\t\t\t\ti1 = pp.length;\n\t    \t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t    \t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\t\n\t    \t\t\t\t\t\t\tt0 = t1;\n\t    \t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( t < t1 ) {\n\t\n\t    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t    \t\t\t\t\t\t\t\tbreak seek;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t// prepare binary search on the right side of the index\n\t    \t\t\t\t\t\tright = pp.length;\n\t    \t\t\t\t\t\tbreak linear_scan;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    //- slower code:\n\t    //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t    \t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\t\n\t    \t\t\t\t\t\t// looping?\n\t\n\t    \t\t\t\t\t\tvar t1global = pp[ 1 ];\n\t\n\t    \t\t\t\t\t\tif ( t < t1global ) {\n\t\n\t    \t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t    \t\t\t\t\t\t\tt0 = t1global;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t// linear reverse scan\n\t\n\t    \t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\t\n\t    \t\t\t\t\t\t\tif ( t0 === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\t// before start\n\t\n\t    \t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t    \t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\t\n\t    \t\t\t\t\t\t\tt1 = t0;\n\t    \t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( t >= t0 ) {\n\t\n\t    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t    \t\t\t\t\t\t\t\tbreak seek;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t// prepare binary search on the left side of the index\n\t    \t\t\t\t\t\tright = i1;\n\t    \t\t\t\t\t\ti1 = 0;\n\t    \t\t\t\t\t\tbreak linear_scan;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// the interval is valid\n\t\n\t    \t\t\t\t\tbreak validate_interval;\n\t\n\t    \t\t\t\t} // linear scan\n\t\n\t    \t\t\t\t// binary search\n\t\n\t    \t\t\t\twhile ( i1 < right ) {\n\t\n\t    \t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\t\n\t    \t\t\t\t\tif ( t < pp[ mid ] ) {\n\t\n\t    \t\t\t\t\t\tright = mid;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\ti1 = mid + 1;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tt1 = pp[   i1   ];\n\t    \t\t\t\tt0 = pp[ i1 - 1 ];\n\t\n\t    \t\t\t\t// check boundary cases, again\n\t\n\t    \t\t\t\tif ( t0 === undefined ) {\n\t\n\t    \t\t\t\t\tthis._cachedIndex = 0;\n\t    \t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( t1 === undefined ) {\n\t\n\t    \t\t\t\t\ti1 = pp.length;\n\t    \t\t\t\t\tthis._cachedIndex = i1;\n\t    \t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} // seek\n\t\n\t    \t\t\tthis._cachedIndex = i1;\n\t\n\t    \t\t\tthis.intervalChanged_( i1, t0, t1 );\n\t\n\t    \t\t} // validate_interval\n\t\n\t    \t\treturn this.interpolate_( i1, t0, t, t1 );\n\t\n\t    \t},\n\t\n\t    \tsettings: null, // optional, subclass-specific settings structure\n\t    \t// Note: The indirection allows central control of many interpolants.\n\t\n\t    \t// --- Protected interface\n\t\n\t    \tDefaultSettings_: {},\n\t\n\t    \tgetSettings_: function() {\n\t\n\t    \t\treturn this.settings || this.DefaultSettings_;\n\t\n\t    \t},\n\t\n\t    \tcopySampleValue_: function( index ) {\n\t\n\t    \t\t// copies a sample value to the result buffer\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t    \t\t\toffset = index * stride;\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tresult[ i ] = values[ offset + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \t// Template methods for derived classes:\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tthrow new Error( \"call to abstract method\" );\n\t    \t\t// implementations shall return this.resultBuffer\n\t\n\t    \t},\n\t\n\t    \tintervalChanged_: function( i1, t0, t1 ) {\n\t\n\t    \t\t// empty\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( Interpolant.prototype, {\n\t\n\t    \tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n\t    \t\tInterpolant.prototype.copySampleValue_,\n\t\n\t    \tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n\t    \t\tInterpolant.prototype.copySampleValue_\n\t\n\t    } );\n\t\n\t    /**\n\t     * Fast and simple cubic spline interpolant.\n\t     *\n\t     * It was derived from a Hermitian construction setting the first derivative\n\t     * at each sample position to the linear slope between neighboring positions\n\t     * over their parameter interval.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function CubicInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    \tthis._weightPrev = -0;\n\t    \tthis._offsetPrev = -0;\n\t    \tthis._weightNext = -0;\n\t    \tthis._offsetNext = -0;\n\t\n\t    }\n\t\n\t    CubicInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: CubicInterpolant,\n\t\n\t    \tDefaultSettings_: {\n\t\n\t    \t\tendingStart: \tZeroCurvatureEnding,\n\t    \t\tendingEnd:\t\tZeroCurvatureEnding\n\t\n\t    \t},\n\t\n\t    \tintervalChanged_: function( i1, t0, t1 ) {\n\t\n\t    \t\tvar pp = this.parameterPositions,\n\t    \t\t\tiPrev = i1 - 2,\n\t    \t\t\tiNext = i1 + 1,\n\t\n\t    \t\t\ttPrev = pp[ iPrev ],\n\t    \t\t\ttNext = pp[ iNext ];\n\t\n\t    \t\tif ( tPrev === undefined ) {\n\t\n\t    \t\t\tswitch ( this.getSettings_().endingStart ) {\n\t\n\t    \t\t\t\tcase ZeroSlopeEnding:\n\t\n\t    \t\t\t\t\t// f'(t0) = 0\n\t    \t\t\t\t\tiPrev = i1;\n\t    \t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase WrapAroundEnding:\n\t\n\t    \t\t\t\t\t// use the other end of the curve\n\t    \t\t\t\t\tiPrev = pp.length - 2;\n\t    \t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault: // ZeroCurvatureEnding\n\t\n\t    \t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t    \t\t\t\t\tiPrev = i1;\n\t    \t\t\t\t\ttPrev = t1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( tNext === undefined ) {\n\t\n\t    \t\t\tswitch ( this.getSettings_().endingEnd ) {\n\t\n\t    \t\t\t\tcase ZeroSlopeEnding:\n\t\n\t    \t\t\t\t\t// f'(tN) = 0\n\t    \t\t\t\t\tiNext = i1;\n\t    \t\t\t\t\ttNext = 2 * t1 - t0;\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase WrapAroundEnding:\n\t\n\t    \t\t\t\t\t// use the other end of the curve\n\t    \t\t\t\t\tiNext = 1;\n\t    \t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault: // ZeroCurvatureEnding\n\t\n\t    \t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t    \t\t\t\t\tiNext = i1 - 1;\n\t    \t\t\t\t\ttNext = t0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t    \t\t\tstride = this.valueSize;\n\t\n\t    \t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t    \t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t    \t\tthis._offsetPrev = iPrev * stride;\n\t    \t\tthis._offsetNext = iNext * stride;\n\t\n\t    \t},\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t    \t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t    \t\t\twP = this._weightPrev,\twN = this._weightNext,\n\t\n\t    \t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t    \t\t\tpp = p * p,\n\t    \t\t\tppp = pp * p;\n\t\n\t    \t\t// evaluate polynomials\n\t\n\t    \t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n\t    \t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n\t    \t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n\t    \t\tvar sN =       wN   * ppp   -           wN      * pp;\n\t\n\t    \t\t// combine data linearly\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tresult[ i ] =\n\t    \t\t\t\t\tsP * values[ oP + i ] +\n\t    \t\t\t\t\ts0 * values[ o0 + i ] +\n\t    \t\t\t\t\ts1 * values[ o1 + i ] +\n\t    \t\t\t\t\tsN * values[ oN + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author tschw\n\t     */\n\t\n\t    function LinearInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    }\n\t\n\t    LinearInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: LinearInterpolant,\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\toffset1 = i1 * stride,\n\t    \t\t\toffset0 = offset1 - stride,\n\t\n\t    \t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t    \t\t\tweight0 = 1 - weight1;\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tresult[ i ] =\n\t    \t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t    \t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * Interpolant that evaluates to the sample value at the position preceeding\n\t     * the parameter.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function DiscreteInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    }\n\t\n\t    DiscreteInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: DiscreteInterpolant,\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\treturn this.copySampleValue_( i1 - 1 );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var KeyframeTrackPrototype;\n\t\n\t    KeyframeTrackPrototype = {\n\t\n\t    \tTimeBufferType: Float32Array,\n\t    \tValueBufferType: Float32Array,\n\t\n\t    \tDefaultInterpolation: InterpolateLinear,\n\t\n\t    \tInterpolantFactoryMethodDiscrete: function( result ) {\n\t\n\t    \t\treturn new DiscreteInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tInterpolantFactoryMethodLinear: function( result ) {\n\t\n\t    \t\treturn new LinearInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tInterpolantFactoryMethodSmooth: function( result ) {\n\t\n\t    \t\treturn new CubicInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tsetInterpolation: function( interpolation ) {\n\t\n\t    \t\tvar factoryMethod;\n\t\n\t    \t\tswitch ( interpolation ) {\n\t\n\t    \t\t\tcase InterpolateDiscrete:\n\t\n\t    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase InterpolateLinear:\n\t\n\t    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase InterpolateSmooth:\n\t\n\t    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( factoryMethod === undefined ) {\n\t\n\t    \t\t\tvar message = \"unsupported interpolation for \" +\n\t    \t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\t\n\t    \t\t\tif ( this.createInterpolant === undefined ) {\n\t\n\t    \t\t\t\t// fall back to default, unless the default itself is messed up\n\t    \t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\t\n\t    \t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tconsole.warn( message );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.createInterpolant = factoryMethod;\n\t\n\t    \t},\n\t\n\t    \tgetInterpolation: function() {\n\t\n\t    \t\tswitch ( this.createInterpolant ) {\n\t\n\t    \t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\n\t    \t\t\t\treturn InterpolateDiscrete;\n\t\n\t    \t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\n\t    \t\t\t\treturn InterpolateLinear;\n\t\n\t    \t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\n\t    \t\t\t\treturn InterpolateSmooth;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetValueSize: function() {\n\t\n\t    \t\treturn this.values.length / this.times.length;\n\t\n\t    \t},\n\t\n\t    \t// move all keyframes either forwards or backwards in time\n\t    \tshift: function( timeOffset ) {\n\t\n\t    \t\tif( timeOffset !== 0.0 ) {\n\t\n\t    \t\t\tvar times = this.times;\n\t\n\t    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\ttimes[ i ] += timeOffset;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t    \tscale: function( timeScale ) {\n\t\n\t    \t\tif( timeScale !== 1.0 ) {\n\t\n\t    \t\t\tvar times = this.times;\n\t\n\t    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\ttimes[ i ] *= timeScale;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t    \t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t    \ttrim: function( startTime, endTime ) {\n\t\n\t    \t\tvar times = this.times,\n\t    \t\t\tnKeys = times.length,\n\t    \t\t\tfrom = 0,\n\t    \t\t\tto = nKeys - 1;\n\t\n\t    \t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t    \t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\t\n\t    \t\t++ to; // inclusive -> exclusive bound\n\t\n\t    \t\tif( from !== 0 || to !== nKeys ) {\n\t\n\t    \t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t    \t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\t\n\t    \t\t\tvar stride = this.getValueSize();\n\t    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, from, to );\n\t    \t\t\tthis.values = exports.AnimationUtils.\n\t    \t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t    \tvalidate: function() {\n\t\n\t    \t\tvar valid = true;\n\t\n\t    \t\tvar valueSize = this.getValueSize();\n\t    \t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\t\n\t    \t\t\tconsole.error( \"invalid value size in track\", this );\n\t    \t\t\tvalid = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar times = this.times,\n\t    \t\t\tvalues = this.values,\n\t\n\t    \t\t\tnKeys = times.length;\n\t\n\t    \t\tif( nKeys === 0 ) {\n\t\n\t    \t\t\tconsole.error( \"track is empty\", this );\n\t    \t\t\tvalid = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar prevTime = null;\n\t\n\t    \t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\t\n\t    \t\t\tvar currTime = times[ i ];\n\t\n\t    \t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\t\n\t    \t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n\t    \t\t\t\tvalid = false;\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif( prevTime !== null && prevTime > currTime ) {\n\t\n\t    \t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n\t    \t\t\t\tvalid = false;\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tprevTime = currTime;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( values !== undefined ) {\n\t\n\t    \t\t\tif ( exports.AnimationUtils.isTypedArray( values ) ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tvar value = values[ i ];\n\t\n\t    \t\t\t\t\tif ( isNaN( value ) ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n\t    \t\t\t\t\t\tvalid = false;\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn valid;\n\t\n\t    \t},\n\t\n\t    \t// removes equivalent sequential keys as common in morph target sequences\n\t    \t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t    \toptimize: function() {\n\t\n\t    \t\tvar times = this.times,\n\t    \t\t\tvalues = this.values,\n\t    \t\t\tstride = this.getValueSize(),\n\t\n\t    \t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\n\t    \t\t\twriteIndex = 1,\n\t    \t\t\tlastIndex = times.length - 1;\n\t\n\t    \t\tfor( var i = 1; i < lastIndex; ++ i ) {\n\t\n\t    \t\t\tvar keep = false;\n\t\n\t    \t\t\tvar time = times[ i ];\n\t    \t\t\tvar timeNext = times[ i + 1 ];\n\t\n\t    \t\t\t// remove adjacent keyframes scheduled at the same time\n\t\n\t    \t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\t\n\t    \t\t\t\tif ( ! smoothInterpolation ) {\n\t\n\t    \t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\n\t    \t\t\t\t\tvar offset = i * stride,\n\t    \t\t\t\t\t\toffsetP = offset - stride,\n\t    \t\t\t\t\t\toffsetN = offset + stride;\n\t\n\t    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\t\n\t    \t\t\t\t\t\tvar value = values[ offset + j ];\n\t\n\t    \t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t    \t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\t\n\t    \t\t\t\t\t\t\tkeep = true;\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else keep = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// in-place compaction\n\t\n\t    \t\t\tif ( keep ) {\n\t\n\t    \t\t\t\tif ( i !== writeIndex ) {\n\t\n\t    \t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\t\n\t    \t\t\t\t\tvar readOffset = i * stride,\n\t    \t\t\t\t\t\twriteOffset = writeIndex * stride;\n\t\n\t    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j )\n\t\n\t    \t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t++ writeIndex;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// flush last keyframe (compaction looks ahead)\n\t\n\t    \t\tif ( lastIndex > 0 ) {\n\t\n\t    \t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\t\n\t    \t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )\n\t\n\t    \t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\t\n\t    \t\t\t++ writeIndex;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( writeIndex !== times.length ) {\n\t\n\t    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, 0, writeIndex );\n\t    \t\t\tthis.values = exports.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    function KeyframeTrackConstructor( name, times, values, interpolation ) {\n\t\n\t    \tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\t\n\t    \tif( times === undefined || times.length === 0 ) {\n\t\n\t    \t\tthrow new Error( \"no keyframes in track named \" + name );\n\t\n\t    \t}\n\t\n\t    \tthis.name = name;\n\t\n\t    \tthis.times = exports.AnimationUtils.convertArray( times, this.TimeBufferType );\n\t    \tthis.values = exports.AnimationUtils.convertArray( values, this.ValueBufferType );\n\t\n\t    \tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\t\n\t    \tthis.validate();\n\t    \tthis.optimize();\n\t\n\t    }\n\t\n\t    /**\n\t     *\n\t     * A Track of vectored keyframe values.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function VectorKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    VectorKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: VectorKeyframeTrack,\n\t\n\t    \tValueTypeName: 'vector'\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \t// DefaultInterpolation is inherited\n\t\n\t    } );\n\t\n\t    /**\n\t     * Spherical linear unit quaternion interpolant.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function QuaternionLinearInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    }\n\t\n\t    QuaternionLinearInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: QuaternionLinearInterpolant,\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\toffset = i1 * stride,\n\t\n\t    \t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\t\n\t    \t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\t\n\t    \t\t\tQuaternion.slerpFlat( result, 0,\n\t    \t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of quaternion keyframe values.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    QuaternionKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: QuaternionKeyframeTrack,\n\t\n\t    \tValueTypeName: 'quaternion',\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \tDefaultInterpolation: InterpolateLinear,\n\t\n\t    \tInterpolantFactoryMethodLinear: function( result ) {\n\t\n\t    \t\treturn new QuaternionLinearInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of numeric keyframe values.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function NumberKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    NumberKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: NumberKeyframeTrack,\n\t\n\t    \tValueTypeName: 'number',\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \t// DefaultInterpolation is inherited\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track that interpolates Strings\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function StringKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    StringKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: StringKeyframeTrack,\n\t\n\t    \tValueTypeName: 'string',\n\t    \tValueBufferType: Array,\n\t\n\t    \tDefaultInterpolation: InterpolateDiscrete,\n\t\n\t    \tInterpolantFactoryMethodLinear: undefined,\n\t\n\t    \tInterpolantFactoryMethodSmooth: undefined\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of Boolean keyframe values.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function BooleanKeyframeTrack( name, times, values ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values );\n\t\n\t    }\n\t\n\t    BooleanKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: BooleanKeyframeTrack,\n\t\n\t    \tValueTypeName: 'bool',\n\t    \tValueBufferType: Array,\n\t\n\t    \tDefaultInterpolation: InterpolateDiscrete,\n\t\n\t    \tInterpolantFactoryMethodLinear: undefined,\n\t    \tInterpolantFactoryMethodSmooth: undefined\n\t\n\t    \t// Note: Actually this track could have a optimized / compressed\n\t    \t// representation of a single value and a custom interpolant that\n\t    \t// computes \"firstValue ^ isOdd( index )\".\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of keyframe values that represent color.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function ColorKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    ColorKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: ColorKeyframeTrack,\n\t\n\t    \tValueTypeName: 'color'\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \t// DefaultInterpolation is inherited\n\t\n\t\n\t    \t// Note: Very basic implementation and nothing special yet.\n\t    \t// However, this is the place for color space parameterization.\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A timed sequence of keyframes for a specific property.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function KeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.apply( this, arguments );\n\t\n\t    }\n\t\n\t    KeyframeTrack.prototype = KeyframeTrackPrototype;\n\t    KeyframeTrackPrototype.constructor = KeyframeTrack;\n\t\n\t    // Static methods:\n\t\n\t    Object.assign( KeyframeTrack, {\n\t\n\t    \t// Serialization (in static context, because of constructor invocation\n\t    \t// and automatic invocation of .toJSON):\n\t\n\t    \tparse: function( json ) {\n\t\n\t    \t\tif( json.type === undefined ) {\n\t\n\t    \t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\t\n\t    \t\tif ( json.times === undefined ) {\n\t\n\t    \t\t\tvar times = [], values = [];\n\t\n\t    \t\t\texports.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\t\n\t    \t\t\tjson.times = times;\n\t    \t\t\tjson.values = values;\n\t\n\t    \t\t}\n\t\n\t    \t\t// derived classes can define a static parse method\n\t    \t\tif ( trackType.parse !== undefined ) {\n\t\n\t    \t\t\treturn trackType.parse( json );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// by default, we asssume a constructor compatible with the base\n\t    \t\t\treturn new trackType(\n\t    \t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function( track ) {\n\t\n\t    \t\tvar trackType = track.constructor;\n\t\n\t    \t\tvar json;\n\t\n\t    \t\t// derived classes can define a static toJSON method\n\t    \t\tif ( trackType.toJSON !== undefined ) {\n\t\n\t    \t\t\tjson = trackType.toJSON( track );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// by default, we assume the data can be serialized as-is\n\t    \t\t\tjson = {\n\t\n\t    \t\t\t\t'name': track.name,\n\t    \t\t\t\t'times': exports.AnimationUtils.convertArray( track.times, Array ),\n\t    \t\t\t\t'values': exports.AnimationUtils.convertArray( track.values, Array )\n\t\n\t    \t\t\t};\n\t\n\t    \t\t\tvar interpolation = track.getInterpolation();\n\t\n\t    \t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\t\n\t    \t\t\t\tjson.interpolation = interpolation;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tjson.type = track.ValueTypeName; // mandatory\n\t\n\t    \t\treturn json;\n\t\n\t    \t},\n\t\n\t    \t_getTrackTypeForValueTypeName: function( typeName ) {\n\t\n\t    \t\tswitch( typeName.toLowerCase() ) {\n\t\n\t    \t\t\tcase \"scalar\":\n\t    \t\t\tcase \"double\":\n\t    \t\t\tcase \"float\":\n\t    \t\t\tcase \"number\":\n\t    \t\t\tcase \"integer\":\n\t\n\t    \t\t\t\treturn NumberKeyframeTrack;\n\t\n\t    \t\t\tcase \"vector\":\n\t    \t\t\tcase \"vector2\":\n\t    \t\t\tcase \"vector3\":\n\t    \t\t\tcase \"vector4\":\n\t\n\t    \t\t\t\treturn VectorKeyframeTrack;\n\t\n\t    \t\t\tcase \"color\":\n\t\n\t    \t\t\t\treturn ColorKeyframeTrack;\n\t\n\t    \t\t\tcase \"quaternion\":\n\t\n\t    \t\t\t\treturn QuaternionKeyframeTrack;\n\t\n\t    \t\t\tcase \"bool\":\n\t    \t\t\tcase \"boolean\":\n\t\n\t    \t\t\t\treturn BooleanKeyframeTrack;\n\t\n\t    \t\t\tcase \"string\":\n\t\n\t    \t\t\t\treturn StringKeyframeTrack;\n\t\n\t    \t\t}\n\t\n\t    \t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * Reusable set of Tracks that represent an animation.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     */\n\t\n\t    function AnimationClip( name, duration, tracks ) {\n\t\n\t    \tthis.name = name;\n\t    \tthis.tracks = tracks;\n\t    \tthis.duration = ( duration !== undefined ) ? duration : -1;\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \t// this means it should figure out its duration by scanning the tracks\n\t    \tif ( this.duration < 0 ) {\n\t\n\t    \t\tthis.resetDuration();\n\t\n\t    \t}\n\t\n\t    \tthis.optimize();\n\t\n\t    }\n\t\n\t    AnimationClip.prototype = {\n\t\n\t    \tconstructor: AnimationClip,\n\t\n\t    \tresetDuration: function() {\n\t\n\t    \t\tvar tracks = this.tracks,\n\t    \t\t\tduration = 0;\n\t\n\t    \t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar track = this.tracks[ i ];\n\t\n\t    \t\t\tduration = Math.max(\n\t    \t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.duration = duration;\n\t\n\t    \t},\n\t\n\t    \ttrim: function() {\n\t\n\t    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\t\n\t    \t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \toptimize: function() {\n\t\n\t    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\t\n\t    \t\t\tthis.tracks[ i ].optimize();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    // Static methods:\n\t\n\t    Object.assign( AnimationClip, {\n\t\n\t    \tparse: function( json ) {\n\t\n\t    \t\tvar tracks = [],\n\t    \t\t\tjsonTracks = json.tracks,\n\t    \t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\t\n\t    \t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\t\n\t    \t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn new AnimationClip( json.name, json.duration, tracks );\n\t\n\t    \t},\n\t\n\t\n\t    \ttoJSON: function( clip ) {\n\t\n\t    \t\tvar tracks = [],\n\t    \t\t\tclipTracks = clip.tracks;\n\t\n\t    \t\tvar json = {\n\t\n\t    \t\t\t'name': clip.name,\n\t    \t\t\t'duration': clip.duration,\n\t    \t\t\t'tracks': tracks\n\t\n\t    \t\t};\n\t\n\t    \t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\t\n\t    \t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn json;\n\t\n\t    \t},\n\t\n\t\n\t    \tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\t\n\t    \t\tvar numMorphTargets = morphTargetSequence.length;\n\t    \t\tvar tracks = [];\n\t\n\t    \t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\t\n\t    \t\t\tvar times = [];\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\ttimes.push(\n\t    \t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t    \t\t\t\t\ti,\n\t    \t\t\t\t\t( i + 1 ) % numMorphTargets );\n\t\n\t    \t\t\tvalues.push( 0, 1, 0 );\n\t\n\t    \t\t\tvar order = exports.AnimationUtils.getKeyframeOrder( times );\n\t    \t\t\ttimes = exports.AnimationUtils.sortedArray( times, 1, order );\n\t    \t\t\tvalues = exports.AnimationUtils.sortedArray( values, 1, order );\n\t\n\t    \t\t\t// if there is a key at the first frame, duplicate it as the\n\t    \t\t\t// last frame as well for perfect loop.\n\t    \t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\t\n\t    \t\t\t\ttimes.push( numMorphTargets );\n\t    \t\t\t\tvalues.push( values[ 0 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttracks.push(\n\t    \t\t\t\t\tnew NumberKeyframeTrack(\n\t    \t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t    \t\t\t\t\t\ttimes, values\n\t    \t\t\t\t\t).scale( 1.0 / fps ) );\n\t    \t\t}\n\t\n\t    \t\treturn new AnimationClip( name, -1, tracks );\n\t\n\t    \t},\n\t\n\t    \tfindByName: function( objectOrClipArray, name ) {\n\t\n\t    \t\tvar clipArray = objectOrClipArray;\n\t\n\t    \t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\t\n\t    \t\t\tvar o = objectOrClipArray;\n\t    \t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\t\n\t    \t\t\tif ( clipArray[ i ].name === name ) {\n\t\n\t    \t\t\t\treturn clipArray[ i ];\n\t\n\t    \t\t\t}\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t},\n\t\n\t    \tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\t\n\t    \t\tvar animationToMorphTargets = {};\n\t\n\t    \t\t// tested with https://regex101.com/ on trick sequences\n\t    \t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t    \t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\t\n\t    \t\t// sort morph target names into animation groups based\n\t    \t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t    \t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar morphTarget = morphTargets[ i ];\n\t    \t\t\tvar parts = morphTarget.name.match( pattern );\n\t\n\t    \t\t\tif ( parts && parts.length > 1 ) {\n\t\n\t    \t\t\t\tvar name = parts[ 1 ];\n\t\n\t    \t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t    \t\t\t\tif ( ! animationMorphTargets ) {\n\t\n\t    \t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tanimationMorphTargets.push( morphTarget );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar clips = [];\n\t\n\t    \t\tfor ( var name in animationToMorphTargets ) {\n\t\n\t    \t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn clips;\n\t\n\t    \t},\n\t\n\t    \t// parse the animation.hierarchy format\n\t    \tparseAnimation: function( animation, bones ) {\n\t\n\t    \t\tif ( ! animation ) {\n\t\n\t    \t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar addNonemptyTrack = function(\n\t    \t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\t\n\t    \t\t\t// only return track if there are actually keys.\n\t    \t\t\tif ( animationKeys.length !== 0 ) {\n\t\n\t    \t\t\t\tvar times = [];\n\t    \t\t\t\tvar values = [];\n\t\n\t    \t\t\t\texports.AnimationUtils.flattenJSON(\n\t    \t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\t\n\t    \t\t\t\t// empty keys are filtered out, so check again\n\t    \t\t\t\tif ( times.length !== 0 ) {\n\t\n\t    \t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t\tvar tracks = [];\n\t\n\t    \t\tvar clipName = animation.name || 'default';\n\t    \t\t// automatic length determination in AnimationClip.\n\t    \t\tvar duration = animation.length || -1;\n\t    \t\tvar fps = animation.fps || 30;\n\t\n\t    \t\tvar hierarchyTracks = animation.hierarchy || [];\n\t\n\t    \t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\t\n\t    \t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\t\n\t    \t\t\t// skip empty tracks\n\t    \t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\t\n\t    \t\t\t// process morph targets in a way exactly compatible\n\t    \t\t\t// with AnimationHandler.init( animation )\n\t    \t\t\tif ( animationKeys[0].morphTargets ) {\n\t\n\t    \t\t\t\t// figure out all morph targets used in this track\n\t    \t\t\t\tvar morphTargetNames = {};\n\t    \t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\t\n\t    \t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\t\n\t    \t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\t\n\t    \t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// create a track for each morph target with all zero\n\t    \t\t\t\t// morphTargetInfluences except for the keys in which\n\t    \t\t\t\t// the morphTarget is named.\n\t    \t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\t\n\t    \t\t\t\t\tvar times = [];\n\t    \t\t\t\t\tvar values = [];\n\t\n\t    \t\t\t\t\tfor ( var m = 0;\n\t    \t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\t\n\t    \t\t\t\t\t\tvar animationKey = animationKeys[k];\n\t\n\t    \t\t\t\t\t\ttimes.push( animationKey.time );\n\t    \t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\ttracks.push( new NumberKeyframeTrack(\n\t    \t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\t\n\t    \t\t\t} else {\n\t    \t\t\t\t// ...assume skeletal animation\n\t\n\t    \t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\t\n\t    \t\t\t\taddNonemptyTrack(\n\t    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t    \t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\t\n\t    \t\t\t\taddNonemptyTrack(\n\t    \t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t    \t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\t\n\t    \t\t\t\taddNonemptyTrack(\n\t    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t    \t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( tracks.length === 0 ) {\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\t\n\t    \t\treturn clip;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function MaterialLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t    \tthis.textures = {};\n\t\n\t    }\n\t\n\t    Object.assign( MaterialLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( scope.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tsetTextures: function ( value ) {\n\t\n\t    \t\tthis.textures = value;\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json ) {\n\t\n\t    \t\tvar textures = this.textures;\n\t\n\t    \t\tfunction getTexture( name ) {\n\t\n\t    \t\t\tif ( textures[ name ] === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn textures[ name ];\n\t\n\t    \t\t}\n\t\n\t    \t\tvar material = new Materials[ json.type ]();\n\t\n\t    \t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t    \t\tif ( json.name !== undefined ) material.name = json.name;\n\t    \t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t    \t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t    \t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t    \t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t    \t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t    \t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t    \t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t    \t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t    \t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t    \t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t    \t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t    \t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t    \t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t    \t\tif ( json.side !== undefined ) material.side = json.side;\n\t    \t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t    \t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t    \t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t    \t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t    \t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t    \t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t    \t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t    \t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t    \t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t    \t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\t    \t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t    \t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\t\n\t    \t\t// for PointsMaterial\n\t\n\t    \t\tif ( json.size !== undefined ) material.size = json.size;\n\t    \t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\t\n\t    \t\t// maps\n\t\n\t    \t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\n\t    \t\tif ( json.alphaMap !== undefined ) {\n\t\n\t    \t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t    \t\t\tmaterial.transparent = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t    \t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\t\n\t    \t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t    \t\tif ( json.normalScale !== undefined ) {\n\t\n\t    \t\t\tvar normalScale = json.normalScale;\n\t\n\t    \t\t\tif ( Array.isArray( normalScale ) === false ) {\n\t\n\t    \t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\n\t    \t\t\t\tnormalScale = [ normalScale, normalScale ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t    \t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t    \t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\t\n\t    \t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t    \t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\t\n\t    \t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t    \t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\t\n\t    \t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\n\t    \t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\n\t    \t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\n\t    \t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t    \t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\t\n\t    \t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t    \t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\t\n\t    \t\t// MultiMaterial\n\t\n\t    \t\tif ( json.materials !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn material;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BufferGeometryLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( BufferGeometryLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( scope.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json ) {\n\t\n\t    \t\tvar geometry = new BufferGeometry();\n\t\n\t    \t\tvar index = json.data.index;\n\t\n\t    \t\tvar TYPED_ARRAYS = {\n\t    \t\t\t'Int8Array': Int8Array,\n\t    \t\t\t'Uint8Array': Uint8Array,\n\t    \t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n\t    \t\t\t'Int16Array': Int16Array,\n\t    \t\t\t'Uint16Array': Uint16Array,\n\t    \t\t\t'Int32Array': Int32Array,\n\t    \t\t\t'Uint32Array': Uint32Array,\n\t    \t\t\t'Float32Array': Float32Array,\n\t    \t\t\t'Float64Array': Float64Array\n\t    \t\t};\n\t\n\t    \t\tif ( index !== undefined ) {\n\t\n\t    \t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t    \t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = json.data.attributes;\n\t\n\t    \t\tfor ( var key in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ key ];\n\t    \t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\n\t    \t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\t\n\t    \t\tif ( groups !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar group = groups[ i ];\n\t\n\t    \t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar boundingSphere = json.data.boundingSphere;\n\t\n\t    \t\tif ( boundingSphere !== undefined ) {\n\t\n\t    \t\t\tvar center = new Vector3();\n\t\n\t    \t\t\tif ( boundingSphere.center !== undefined ) {\n\t\n\t    \t\t\t\tcenter.fromArray( boundingSphere.center );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Loader() {\n\t\n\t    \tthis.onLoadStart = function () {};\n\t    \tthis.onLoadProgress = function () {};\n\t    \tthis.onLoadComplete = function () {};\n\t\n\t    }\n\t\n\t    Loader.prototype = {\n\t\n\t    \tconstructor: Loader,\n\t\n\t    \tcrossOrigin: undefined,\n\t\n\t    \textractUrlBase: function ( url ) {\n\t\n\t    \t\tvar parts = url.split( '/' );\n\t\n\t    \t\tif ( parts.length === 1 ) return './';\n\t\n\t    \t\tparts.pop();\n\t\n\t    \t\treturn parts.join( '/' ) + '/';\n\t\n\t    \t},\n\t\n\t    \tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\t\n\t    \t\tvar array = [];\n\t\n\t    \t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\t\n\t    \t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tcreateMaterial: ( function () {\n\t\n\t    \t\tvar color, textureLoader, materialLoader;\n\t\n\t    \t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\t\n\t    \t\t\tif ( color === undefined ) color = new Color();\n\t    \t\t\tif ( textureLoader === undefined ) textureLoader = new TextureLoader();\n\t    \t\t\tif ( materialLoader === undefined ) materialLoader = new MaterialLoader();\n\t\n\t    \t\t\t// convert from old material format\n\t\n\t    \t\t\tvar textures = {};\n\t\n\t    \t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\t\n\t    \t\t\t\tvar fullPath = texturePath + path;\n\t    \t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\t\n\t    \t\t\t\tvar texture;\n\t\n\t    \t\t\t\tif ( loader !== null ) {\n\t\n\t    \t\t\t\t\ttexture = loader.load( fullPath );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t    \t\t\t\t\ttexture = textureLoader.load( fullPath );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( repeat !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.repeat.fromArray( repeat );\n\t\n\t    \t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t    \t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( offset !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.offset.fromArray( offset );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( wrap !== undefined ) {\n\t\n\t    \t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t    \t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\t\n\t    \t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t    \t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( anisotropy !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.anisotropy = anisotropy;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar uuid = exports.Math.generateUUID();\n\t\n\t    \t\t\t\ttextures[ uuid ] = texture;\n\t\n\t    \t\t\t\treturn uuid;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tvar json = {\n\t    \t\t\t\tuuid: exports.Math.generateUUID(),\n\t    \t\t\t\ttype: 'MeshLambertMaterial'\n\t    \t\t\t};\n\t\n\t    \t\t\tfor ( var name in m ) {\n\t\n\t    \t\t\t\tvar value = m[ name ];\n\t\n\t    \t\t\t\tswitch ( name ) {\n\t    \t\t\t\t\tcase 'DbgColor':\n\t    \t\t\t\t\tcase 'DbgIndex':\n\t    \t\t\t\t\tcase 'opticalDensity':\n\t    \t\t\t\t\tcase 'illumination':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'DbgName':\n\t    \t\t\t\t\t\tjson.name = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'blending':\n\t    \t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorAmbient':\n\t    \t\t\t\t\tcase 'mapAmbient':\n\t    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorDiffuse':\n\t    \t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorSpecular':\n\t    \t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorEmissive':\n\t    \t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'specularCoef':\n\t    \t\t\t\t\t\tjson.shininess = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'shading':\n\t    \t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t    \t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t    \t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapDiffuse':\n\t    \t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapDiffuseRepeat':\n\t    \t\t\t\t\tcase 'mapDiffuseOffset':\n\t    \t\t\t\t\tcase 'mapDiffuseWrap':\n\t    \t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapEmissive':\n\t    \t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapEmissiveRepeat':\n\t    \t\t\t\t\tcase 'mapEmissiveOffset':\n\t    \t\t\t\t\tcase 'mapEmissiveWrap':\n\t    \t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapLight':\n\t    \t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapLightRepeat':\n\t    \t\t\t\t\tcase 'mapLightOffset':\n\t    \t\t\t\t\tcase 'mapLightWrap':\n\t    \t\t\t\t\tcase 'mapLightAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAO':\n\t    \t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAORepeat':\n\t    \t\t\t\t\tcase 'mapAOOffset':\n\t    \t\t\t\t\tcase 'mapAOWrap':\n\t    \t\t\t\t\tcase 'mapAOAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapBump':\n\t    \t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapBumpScale':\n\t    \t\t\t\t\t\tjson.bumpScale = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapBumpRepeat':\n\t    \t\t\t\t\tcase 'mapBumpOffset':\n\t    \t\t\t\t\tcase 'mapBumpWrap':\n\t    \t\t\t\t\tcase 'mapBumpAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapNormal':\n\t    \t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapNormalFactor':\n\t    \t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapNormalRepeat':\n\t    \t\t\t\t\tcase 'mapNormalOffset':\n\t    \t\t\t\t\tcase 'mapNormalWrap':\n\t    \t\t\t\t\tcase 'mapNormalAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapSpecular':\n\t    \t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapSpecularRepeat':\n\t    \t\t\t\t\tcase 'mapSpecularOffset':\n\t    \t\t\t\t\tcase 'mapSpecularWrap':\n\t    \t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapMetalness':\n\t    \t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapMetalnessRepeat':\n\t    \t\t\t\t\tcase 'mapMetalnessOffset':\n\t    \t\t\t\t\tcase 'mapMetalnessWrap':\n\t    \t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapRoughness':\n\t    \t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapRoughnessRepeat':\n\t    \t\t\t\t\tcase 'mapRoughnessOffset':\n\t    \t\t\t\t\tcase 'mapRoughnessWrap':\n\t    \t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAlpha':\n\t    \t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAlphaRepeat':\n\t    \t\t\t\t\tcase 'mapAlphaOffset':\n\t    \t\t\t\t\tcase 'mapAlphaWrap':\n\t    \t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'flipSided':\n\t    \t\t\t\t\t\tjson.side = BackSide;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'doubleSided':\n\t    \t\t\t\t\t\tjson.side = DoubleSide;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'transparency':\n\t    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t    \t\t\t\t\t\tjson.opacity = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'depthTest':\n\t    \t\t\t\t\tcase 'depthWrite':\n\t    \t\t\t\t\tcase 'colorWrite':\n\t    \t\t\t\t\tcase 'opacity':\n\t    \t\t\t\t\tcase 'reflectivity':\n\t    \t\t\t\t\tcase 'transparent':\n\t    \t\t\t\t\tcase 'visible':\n\t    \t\t\t\t\tcase 'wireframe':\n\t    \t\t\t\t\t\tjson[ name ] = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'vertexColors':\n\t    \t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t    \t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tdefault:\n\t    \t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t    \t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\t\n\t    \t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\t\n\t    \t\t\tmaterialLoader.setTextures( textures );\n\t\n\t    \t\t\treturn materialLoader.parse( json );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    };\n\t\n\t    Loader.Handlers = {\n\t\n\t    \thandlers: [],\n\t\n\t    \tadd: function ( regex, loader ) {\n\t\n\t    \t\tthis.handlers.push( regex, loader );\n\t\n\t    \t},\n\t\n\t    \tget: function ( file ) {\n\t\n\t    \t\tvar handlers = this.handlers;\n\t\n\t    \t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\t\n\t    \t\t\tvar regex = handlers[ i ];\n\t    \t\t\tvar loader  = handlers[ i + 1 ];\n\t\n\t    \t\t\tif ( regex.test( file ) ) {\n\t\n\t    \t\t\t\treturn loader;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function JSONLoader( manager ) {\n\t\n\t    \tif ( typeof manager === 'boolean' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t    \t\tmanager = undefined;\n\t\n\t    \t}\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    \tthis.withCredentials = false;\n\t\n\t    }\n\t\n\t    Object.assign( JSONLoader.prototype, {\n\t\n\t    \tload: function( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setWithCredentials( this.withCredentials );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tvar json = JSON.parse( text );\n\t    \t\t\tvar metadata = json.metadata;\n\t\n\t    \t\t\tif ( metadata !== undefined ) {\n\t\n\t    \t\t\t\tvar type = metadata.type;\n\t\n\t    \t\t\t\tif ( type !== undefined ) {\n\t\n\t    \t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar object = scope.parse( json, texturePath );\n\t    \t\t\tonLoad( object.geometry, object.materials );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tsetTexturePath: function ( value ) {\n\t\n\t    \t\tthis.texturePath = value;\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json, texturePath ) {\n\t\n\t    \t\tvar geometry = new Geometry(),\n\t    \t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\t\n\t    \t\tparseModel( scale );\n\t\n\t    \t\tparseSkin();\n\t    \t\tparseMorphing( scale );\n\t    \t\tparseAnimations();\n\t\n\t    \t\tgeometry.computeFaceNormals();\n\t    \t\tgeometry.computeBoundingSphere();\n\t\n\t    \t\tfunction parseModel( scale ) {\n\t\n\t    \t\t\tfunction isBitSet( value, position ) {\n\t\n\t    \t\t\t\treturn value & ( 1 << position );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar i, j, fi,\n\t\n\t    \t\t\toffset, zLength,\n\t\n\t    \t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\t\n\t    \t\t\ttype,\n\t    \t\t\tisQuad,\n\t    \t\t\thasMaterial,\n\t    \t\t\thasFaceVertexUv,\n\t    \t\t\thasFaceNormal, hasFaceVertexNormal,\n\t    \t\t\thasFaceColor, hasFaceVertexColor,\n\t\n\t    \t\tvertex, face, faceA, faceB, hex, normal,\n\t\n\t    \t\t\tuvLayer, uv, u, v,\n\t\n\t    \t\t\tfaces = json.faces,\n\t    \t\t\tvertices = json.vertices,\n\t    \t\t\tnormals = json.normals,\n\t    \t\t\tcolors = json.colors,\n\t\n\t    \t\t\tnUvLayers = 0;\n\t\n\t    \t\t\tif ( json.uvs !== undefined ) {\n\t\n\t    \t\t\t\t// disregard empty arrays\n\t\n\t    \t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t    \t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\toffset = 0;\n\t    \t\t\tzLength = vertices.length;\n\t\n\t    \t\t\twhile ( offset < zLength ) {\n\t\n\t    \t\t\t\tvertex = new Vector3();\n\t\n\t    \t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t    \t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t    \t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\t\n\t    \t\t\t\tgeometry.vertices.push( vertex );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\toffset = 0;\n\t    \t\t\tzLength = faces.length;\n\t\n\t    \t\t\twhile ( offset < zLength ) {\n\t\n\t    \t\t\t\ttype = faces[ offset ++ ];\n\t\n\t\n\t    \t\t\t\tisQuad              = isBitSet( type, 0 );\n\t    \t\t\t\thasMaterial         = isBitSet( type, 1 );\n\t    \t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t    \t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t    \t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t    \t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t    \t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\t\n\t    \t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\t\n\t    \t\t\t\tif ( isQuad ) {\n\t\n\t    \t\t\t\t\tfaceA = new Face3();\n\t    \t\t\t\t\tfaceA.a = faces[ offset ];\n\t    \t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t    \t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\t\n\t    \t\t\t\t\tfaceB = new Face3();\n\t    \t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t    \t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t    \t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\t\n\t    \t\t\t\t\toffset += 4;\n\t\n\t    \t\t\t\t\tif ( hasMaterial ) {\n\t\n\t    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t    \t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// to get face <=> uv index correspondence\n\t\n\t    \t\t\t\t\tfi = geometry.faces.length;\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\t\n\t    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\t\n\t    \t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\t\n\t    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\t\n\t    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\t\n\t    \t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t    \t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceNormal ) {\n\t\n\t    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\tfaceA.normal.set(\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\t\tnormal = new Vector3(\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t\t);\n\t\n\t\n\t    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceColor ) {\n\t\n\t    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\thex = colors[ colorIndex ];\n\t\n\t    \t\t\t\t\t\tfaceA.color.setHex( hex );\n\t    \t\t\t\t\t\tfaceB.color.setHex( hex );\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\t\thex = colors[ colorIndex ];\n\t\n\t    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tgeometry.faces.push( faceA );\n\t    \t\t\t\t\tgeometry.faces.push( faceB );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tface = new Face3();\n\t    \t\t\t\t\tface.a = faces[ offset ++ ];\n\t    \t\t\t\t\tface.b = faces[ offset ++ ];\n\t    \t\t\t\t\tface.c = faces[ offset ++ ];\n\t\n\t    \t\t\t\t\tif ( hasMaterial ) {\n\t\n\t    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\tface.materialIndex = materialIndex;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// to get face <=> uv index correspondence\n\t\n\t    \t\t\t\t\tfi = geometry.faces.length;\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\t\n\t    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\n\t    \t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\t\n\t    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\t\n\t    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\t\n\t    \t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceNormal ) {\n\t\n\t    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\tface.normal.set(\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\t\tnormal = new Vector3(\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceColor ) {\n\t\n\t    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tgeometry.faces.push( face );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction parseSkin() {\n\t\n\t    \t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\t\n\t    \t\t\tif ( json.skinWeights ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\t\n\t    \t\t\t\t\tvar x =                               json.skinWeights[ i ];\n\t    \t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t    \t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t    \t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\t\n\t    \t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.skinIndices ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\t\n\t    \t\t\t\t\tvar a =                               json.skinIndices[ i ];\n\t    \t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t    \t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t    \t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\t\n\t    \t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.bones = json.bones;\n\t\n\t    \t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\t\n\t    \t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t    \t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction parseMorphing( scale ) {\n\t\n\t    \t\t\tif ( json.morphTargets !== undefined ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t    \t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t    \t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\t\n\t    \t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t    \t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\t\n\t    \t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\t\n\t    \t\t\t\t\t\tvar vertex = new Vector3();\n\t    \t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t    \t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t    \t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\t\n\t    \t\t\t\t\t\tdstVertices.push( vertex );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\t\n\t    \t\t\t\tvar faces = geometry.faces;\n\t    \t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\t\n\t    \t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction parseAnimations() {\n\t\n\t    \t\t\tvar outputAnimations = [];\n\t\n\t    \t\t\t// parse old style Bone/Hierarchy animations\n\t    \t\t\tvar animations = [];\n\t\n\t    \t\t\tif ( json.animation !== undefined ) {\n\t\n\t    \t\t\t\tanimations.push( json.animation );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.animations !== undefined ) {\n\t\n\t    \t\t\t\tif ( json.animations.length ) {\n\t\n\t    \t\t\t\t\tanimations = animations.concat( json.animations );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tanimations.push( json.animations );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\t\n\t    \t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t    \t\t\t\tif ( clip ) outputAnimations.push( clip );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// parse implicit morph animations\n\t    \t\t\tif ( geometry.morphTargets ) {\n\t\n\t    \t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t    \t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t    \t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\t\n\t    \t\t\treturn { geometry: geometry };\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\t\n\t    \t\t\treturn { geometry: geometry, materials: materials };\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function ObjectLoader ( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t    \tthis.texturePath = '';\n\t\n\t    }\n\t\n\t    Object.assign( ObjectLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tif ( this.texturePath === '' ) {\n\t\n\t    \t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( scope.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tscope.parse( JSON.parse( text ), onLoad );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tsetTexturePath: function ( value ) {\n\t\n\t    \t\tthis.texturePath = value;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json, onLoad ) {\n\t\n\t    \t\tvar geometries = this.parseGeometries( json.geometries );\n\t\n\t    \t\tvar images = this.parseImages( json.images, function () {\n\t\n\t    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\t\n\t    \t\t} );\n\t\n\t    \t\tvar textures  = this.parseTextures( json.textures, images );\n\t    \t\tvar materials = this.parseMaterials( json.materials, textures );\n\t\n\t    \t\tvar object = this.parseObject( json.object, geometries, materials );\n\t\n\t    \t\tif ( json.animations ) {\n\t\n\t    \t\t\tobject.animations = this.parseAnimations( json.animations );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.images === undefined || json.images.length === 0 ) {\n\t\n\t    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn object;\n\t\n\t    \t},\n\t\n\t    \tparseGeometries: function ( json ) {\n\t\n\t    \t\tvar geometries = {};\n\t\n\t    \t\tif ( json !== undefined ) {\n\t\n\t    \t\t\tvar geometryLoader = new JSONLoader();\n\t    \t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar geometry;\n\t    \t\t\t\tvar data = json[ i ];\n\t\n\t    \t\t\t\tswitch ( data.type ) {\n\t\n\t    \t\t\t\t\tcase 'PlaneGeometry':\n\t    \t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.width,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.widthSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'BoxGeometry':\n\t    \t\t\t\t\tcase 'BoxBufferGeometry':\n\t    \t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.width,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.depth,\n\t    \t\t\t\t\t\t\tdata.widthSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.depthSegments\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'CircleGeometry':\n\t    \t\t\t\t\tcase 'CircleBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.segments,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'CylinderGeometry':\n\t    \t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radiusTop,\n\t    \t\t\t\t\t\t\tdata.radiusBottom,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.openEnded,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'ConeGeometry':\n\t    \t\t\t\t\tcase 'ConeBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.openEnded,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'SphereGeometry':\n\t    \t\t\t\t\tcase 'SphereBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.widthSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.phiStart,\n\t    \t\t\t\t\t\t\tdata.phiLength,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'DodecahedronGeometry':\n\t    \t\t\t\t\tcase 'IcosahedronGeometry':\n\t    \t\t\t\t\tcase 'OctahedronGeometry':\n\t    \t\t\t\t\tcase 'TetrahedronGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.detail\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'RingGeometry':\n\t    \t\t\t\t\tcase 'RingBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.innerRadius,\n\t    \t\t\t\t\t\t\tdata.outerRadius,\n\t    \t\t\t\t\t\t\tdata.thetaSegments,\n\t    \t\t\t\t\t\t\tdata.phiSegments,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'TorusGeometry':\n\t    \t\t\t\t\tcase 'TorusBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.tube,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.tubularSegments,\n\t    \t\t\t\t\t\t\tdata.arc\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'TorusKnotGeometry':\n\t    \t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.tube,\n\t    \t\t\t\t\t\t\tdata.tubularSegments,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.p,\n\t    \t\t\t\t\t\t\tdata.q\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'LatheGeometry':\n\t    \t\t\t\t\tcase 'LatheBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.points,\n\t    \t\t\t\t\t\t\tdata.segments,\n\t    \t\t\t\t\t\t\tdata.phiStart,\n\t    \t\t\t\t\t\t\tdata.phiLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'BufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'Geometry':\n\t\n\t    \t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tdefault:\n\t\n\t    \t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\t\n\t    \t\t\t\t\t\tcontinue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tgeometry.uuid = data.uuid;\n\t\n\t    \t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\n\t    \t\t\t\tgeometries[ data.uuid ] = geometry;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometries;\n\t\n\t    \t},\n\t\n\t    \tparseMaterials: function ( json, textures ) {\n\t\n\t    \t\tvar materials = {};\n\t\n\t    \t\tif ( json !== undefined ) {\n\t\n\t    \t\t\tvar loader = new MaterialLoader();\n\t    \t\t\tloader.setTextures( textures );\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar material = loader.parse( json[ i ] );\n\t    \t\t\t\tmaterials[ material.uuid ] = material;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn materials;\n\t\n\t    \t},\n\t\n\t    \tparseAnimations: function ( json ) {\n\t\n\t    \t\tvar animations = [];\n\t\n\t    \t\tfor ( var i = 0; i < json.length; i ++ ) {\n\t\n\t    \t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\t\n\t    \t\t\tanimations.push( clip );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn animations;\n\t\n\t    \t},\n\t\n\t    \tparseImages: function ( json, onLoad ) {\n\t\n\t    \t\tvar scope = this;\n\t    \t\tvar images = {};\n\t\n\t    \t\tfunction loadImage( url ) {\n\t\n\t    \t\t\tscope.manager.itemStart( url );\n\t\n\t    \t\t\treturn loader.load( url, function () {\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t}, undefined, function () {\n\t\n\t    \t\t\t\tscope.manager.itemError( url );\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json !== undefined && json.length > 0 ) {\n\t\n\t    \t\t\tvar manager = new LoadingManager( onLoad );\n\t\n\t    \t\t\tvar loader = new ImageLoader( manager );\n\t    \t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar image = json[ i ];\n\t    \t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\t\n\t    \t\t\t\timages[ image.uuid ] = loadImage( path );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn images;\n\t\n\t    \t},\n\t\n\t    \tparseTextures: function ( json, images ) {\n\t\n\t    \t\tfunction parseConstant( value, type ) {\n\t\n\t    \t\t\tif ( typeof( value ) === 'number' ) return value;\n\t\n\t    \t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\t\n\t    \t\t\treturn type[ value ];\n\t\n\t    \t\t}\n\t\n\t    \t\tvar textures = {};\n\t\n\t    \t\tif ( json !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar data = json[ i ];\n\t\n\t    \t\t\t\tif ( data.image === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( images[ data.image ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar texture = new Texture( images[ data.image ] );\n\t    \t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\ttexture.uuid = data.uuid;\n\t\n\t    \t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\t\n\t    \t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );\n\t\n\t    \t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t    \t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t    \t\t\t\tif ( data.wrap !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );\n\t    \t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );\n\t    \t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );\n\t    \t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\t\n\t    \t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\t\n\t    \t\t\t\ttextures[ data.uuid ] = texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn textures;\n\t\n\t    \t},\n\t\n\t    \tparseObject: function () {\n\t\n\t    \t\tvar matrix = new Matrix4();\n\t\n\t    \t\treturn function parseObject( data, geometries, materials ) {\n\t\n\t    \t\t\tvar object;\n\t\n\t    \t\t\tfunction getGeometry( name ) {\n\t\n\t    \t\t\t\tif ( geometries[ name ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn geometries[ name ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfunction getMaterial( name ) {\n\t\n\t    \t\t\t\tif ( name === undefined ) return undefined;\n\t\n\t    \t\t\t\tif ( materials[ name ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn materials[ name ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tswitch ( data.type ) {\n\t\n\t    \t\t\t\tcase 'Scene':\n\t\n\t    \t\t\t\t\tobject = new Scene();\n\t\n\t    \t\t\t\t\tif ( data.background !== undefined ) {\n\t\n\t    \t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\t\n\t    \t\t\t\t\t\t\tobject.background = new Color( data.background );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( data.fog !== undefined ) {\n\t\n\t    \t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\t\n\t    \t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\t\n\t    \t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\t\n\t    \t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PerspectiveCamera':\n\t\n\t    \t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\t\n\t    \t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t    \t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t    \t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t    \t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t    \t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'OrthographicCamera':\n\t\n\t    \t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'AmbientLight':\n\t\n\t    \t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'DirectionalLight':\n\t\n\t    \t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PointLight':\n\t\n\t    \t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'SpotLight':\n\t\n\t    \t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'HemisphereLight':\n\t\n\t    \t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Mesh':\n\t\n\t    \t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t    \t\t\t\t\tvar material = getMaterial( data.material );\n\t\n\t    \t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\t\n\t    \t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tobject = new Mesh( geometry, material );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'LOD':\n\t\n\t    \t\t\t\t\tobject = new LOD();\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Line':\n\t\n\t    \t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'LineSegments':\n\t\n\t    \t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PointCloud':\n\t    \t\t\t\tcase 'Points':\n\t\n\t    \t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Sprite':\n\t\n\t    \t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Group':\n\t\n\t    \t\t\t\t\tobject = new Group();\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault:\n\t\n\t    \t\t\t\t\tobject = new Object3D();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.uuid = data.uuid;\n\t\n\t    \t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t    \t\t\tif ( data.matrix !== undefined ) {\n\t\n\t    \t\t\t\tmatrix.fromArray( data.matrix );\n\t    \t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t    \t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t    \t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t    \t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t    \t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\t\n\t    \t\t\tif ( data.shadow ) {\n\t\n\t    \t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t    \t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t    \t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t    \t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t    \t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\n\t    \t\t\tif ( data.children !== undefined ) {\n\t\n\t    \t\t\t\tfor ( var child in data.children ) {\n\t\n\t    \t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( data.type === 'LOD' ) {\n\t\n\t    \t\t\t\tvar levels = data.levels;\n\t\n\t    \t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\t\n\t    \t\t\t\t\tvar level = levels[ l ];\n\t    \t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\t\n\t    \t\t\t\t\tif ( child !== undefined ) {\n\t\n\t    \t\t\t\t\t\tobject.addLevel( child, level.distance );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn object;\n\t\n\t    \t\t};\n\t\n\t    \t}()\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * Extensible curve object\n\t     *\n\t     * Some common of Curve methods\n\t     * .getPoint(t), getTangent(t)\n\t     * .getPointAt(u), getTangentAt(u)\n\t     * .getPoints(), .getSpacedPoints()\n\t     * .getLength()\n\t     * .updateArcLengths()\n\t     *\n\t     * This following classes subclasses THREE.Curve:\n\t     *\n\t     * -- 2d classes --\n\t     * THREE.LineCurve\n\t     * THREE.QuadraticBezierCurve\n\t     * THREE.CubicBezierCurve\n\t     * THREE.SplineCurve\n\t     * THREE.ArcCurve\n\t     * THREE.EllipseCurve\n\t     *\n\t     * -- 3d classes --\n\t     * THREE.LineCurve3\n\t     * THREE.QuadraticBezierCurve3\n\t     * THREE.CubicBezierCurve3\n\t     * THREE.SplineCurve3\n\t     *\n\t     * A series of curves can be represented as a THREE.CurvePath\n\t     *\n\t     **/\n\t\n\t    /**************************************************************\n\t     *\tAbstract Curve base class\n\t     **************************************************************/\n\t\n\t    function Curve() {}\n\t\n\t    Curve.prototype = {\n\t\n\t    \tconstructor: Curve,\n\t\n\t    \t// Virtual base class method to overwrite and implement in subclasses\n\t    \t//\t- t [0 .. 1]\n\t\n\t    \tgetPoint: function ( t ) {\n\t\n\t    \t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n\t    \t\treturn null;\n\t\n\t    \t},\n\t\n\t    \t// Get point at relative position in curve according to arc length\n\t    \t// - u [0 .. 1]\n\t\n\t    \tgetPointAt: function ( u ) {\n\t\n\t    \t\tvar t = this.getUtoTmapping( u );\n\t    \t\treturn this.getPoint( t );\n\t\n\t    \t},\n\t\n\t    \t// Get sequence of points using getPoint( t )\n\t\n\t    \tgetPoints: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = 5;\n\t\n\t    \t\tvar points = [];\n\t\n\t    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\t\n\t    \t\t\tpoints.push( this.getPoint( d / divisions ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \t// Get sequence of points using getPointAt( u )\n\t\n\t    \tgetSpacedPoints: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = 5;\n\t\n\t    \t\tvar points = [];\n\t\n\t    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\t\n\t    \t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \t// Get total curve arc length\n\t\n\t    \tgetLength: function () {\n\t\n\t    \t\tvar lengths = this.getLengths();\n\t    \t\treturn lengths[ lengths.length - 1 ];\n\t\n\t    \t},\n\t\n\t    \t// Get list of cumulative segment lengths\n\t\n\t    \tgetLengths: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\t\n\t    \t\tif ( this.cacheArcLengths\n\t    \t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n\t    \t\t\t&& ! this.needsUpdate ) {\n\t\n\t    \t\t\t//console.log( \"cached\", this.cacheArcLengths );\n\t    \t\t\treturn this.cacheArcLengths;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.needsUpdate = false;\n\t\n\t    \t\tvar cache = [];\n\t    \t\tvar current, last = this.getPoint( 0 );\n\t    \t\tvar p, sum = 0;\n\t\n\t    \t\tcache.push( 0 );\n\t\n\t    \t\tfor ( p = 1; p <= divisions; p ++ ) {\n\t\n\t    \t\t\tcurrent = this.getPoint ( p / divisions );\n\t    \t\t\tsum += current.distanceTo( last );\n\t    \t\t\tcache.push( sum );\n\t    \t\t\tlast = current;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cacheArcLengths = cache;\n\t\n\t    \t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\t\n\t    \t},\n\t\n\t    \tupdateArcLengths: function() {\n\t\n\t    \t\tthis.needsUpdate = true;\n\t    \t\tthis.getLengths();\n\t\n\t    \t},\n\t\n\t    \t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\t\n\t    \tgetUtoTmapping: function ( u, distance ) {\n\t\n\t    \t\tvar arcLengths = this.getLengths();\n\t\n\t    \t\tvar i = 0, il = arcLengths.length;\n\t\n\t    \t\tvar targetArcLength; // The targeted u distance value to get\n\t\n\t    \t\tif ( distance ) {\n\t\n\t    \t\t\ttargetArcLength = distance;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\t\n\t    \t\t}\n\t\n\t    \t\t//var time = Date.now();\n\t\n\t    \t\t// binary search for the index with largest value smaller than target u distance\n\t\n\t    \t\tvar low = 0, high = il - 1, comparison;\n\t\n\t    \t\twhile ( low <= high ) {\n\t\n\t    \t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\t\n\t    \t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\t\n\t    \t\t\tif ( comparison < 0 ) {\n\t\n\t    \t\t\t\tlow = i + 1;\n\t\n\t    \t\t\t} else if ( comparison > 0 ) {\n\t\n\t    \t\t\t\thigh = i - 1;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\thigh = i;\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t\t// DONE\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\ti = high;\n\t\n\t    \t\t//console.log('b' , i, low, high, Date.now()- time);\n\t\n\t    \t\tif ( arcLengths[ i ] === targetArcLength ) {\n\t\n\t    \t\t\tvar t = i / ( il - 1 );\n\t    \t\t\treturn t;\n\t\n\t    \t\t}\n\t\n\t    \t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\t\n\t    \t\tvar lengthBefore = arcLengths[ i ];\n\t    \t\tvar lengthAfter = arcLengths[ i + 1 ];\n\t\n\t    \t\tvar segmentLength = lengthAfter - lengthBefore;\n\t\n\t    \t\t// determine where we are between the 'before' and 'after' points\n\t\n\t    \t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\t\n\t    \t\t// add that fractional amount to t\n\t\n\t    \t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\t\n\t    \t\treturn t;\n\t\n\t    \t},\n\t\n\t    \t// Returns a unit vector tangent at t\n\t    \t// In case any sub curve does not implement its tangent derivation,\n\t    \t// 2 points a small delta apart will be used to find its gradient\n\t    \t// which seems to give a reasonable approximation\n\t\n\t    \tgetTangent: function( t ) {\n\t\n\t    \t\tvar delta = 0.0001;\n\t    \t\tvar t1 = t - delta;\n\t    \t\tvar t2 = t + delta;\n\t\n\t    \t\t// Capping in case of danger\n\t\n\t    \t\tif ( t1 < 0 ) t1 = 0;\n\t    \t\tif ( t2 > 1 ) t2 = 1;\n\t\n\t    \t\tvar pt1 = this.getPoint( t1 );\n\t    \t\tvar pt2 = this.getPoint( t2 );\n\t\n\t    \t\tvar vec = pt2.clone().sub( pt1 );\n\t    \t\treturn vec.normalize();\n\t\n\t    \t},\n\t\n\t    \tgetTangentAt: function ( u ) {\n\t\n\t    \t\tvar t = this.getUtoTmapping( u );\n\t    \t\treturn this.getTangent( t );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    // TODO: Transformation for Curves?\n\t\n\t    /**************************************************************\n\t     *\t3D Curves\n\t     **************************************************************/\n\t\n\t    // A Factory method for creating new curve subclasses\n\t\n\t    Curve.create = function ( constructor, getPointFunc ) {\n\t\n\t    \tconstructor.prototype = Object.create( Curve.prototype );\n\t    \tconstructor.prototype.constructor = constructor;\n\t    \tconstructor.prototype.getPoint = getPointFunc;\n\t\n\t    \treturn constructor;\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tLine\n\t     **************************************************************/\n\t\n\t    function LineCurve( v1, v2 ) {\n\t\n\t    \tthis.v1 = v1;\n\t    \tthis.v2 = v2;\n\t\n\t    }\n\t\n\t    LineCurve.prototype = Object.create( Curve.prototype );\n\t    LineCurve.prototype.constructor = LineCurve;\n\t\n\t    LineCurve.prototype.isLineCurve = true;\n\t\n\t    LineCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tif ( t === 1 ) {\n\t\n\t    \t\treturn this.v2.clone();\n\t\n\t    \t}\n\t\n\t    \tvar point = this.v2.clone().sub( this.v1 );\n\t    \tpoint.multiplyScalar( t ).add( this.v1 );\n\t\n\t    \treturn point;\n\t\n\t    };\n\t\n\t    // Line curve is linear, so we can overwrite default getPointAt\n\t\n\t    LineCurve.prototype.getPointAt = function ( u ) {\n\t\n\t    \treturn this.getPoint( u );\n\t\n\t    };\n\t\n\t    LineCurve.prototype.getTangent = function( t ) {\n\t\n\t    \tvar tangent = this.v2.clone().sub( this.v1 );\n\t\n\t    \treturn tangent.normalize();\n\t\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     *\n\t     **/\n\t\n\t    /**************************************************************\n\t     *\tCurved Path - a curve path is simply a array of connected\n\t     *  curves, but retains the api of a curve\n\t     **************************************************************/\n\t\n\t    function CurvePath() {\n\t\n\t    \tthis.curves = [];\n\t\n\t    \tthis.autoClose = false; // Automatically closes the path\n\t\n\t    }\n\t\n\t    CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\t\n\t    \tconstructor: CurvePath,\n\t\n\t    \tadd: function ( curve ) {\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t},\n\t\n\t    \tclosePath: function () {\n\t\n\t    \t\t// Add a line curve if start and end of lines are not connected\n\t    \t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t    \t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\t\n\t    \t\tif ( ! startPoint.equals( endPoint ) ) {\n\t\n\t    \t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// To get accurate point with reference to\n\t    \t// entire path distance at time t,\n\t    \t// following has to be done:\n\t\n\t    \t// 1. Length of each sub path have to be known\n\t    \t// 2. Locate and identify type of curve\n\t    \t// 3. Get t for the curve\n\t    \t// 4. Return curve.getPointAt(t')\n\t\n\t    \tgetPoint: function ( t ) {\n\t\n\t    \t\tvar d = t * this.getLength();\n\t    \t\tvar curveLengths = this.getCurveLengths();\n\t    \t\tvar i = 0;\n\t\n\t    \t\t// To think about boundaries points.\n\t\n\t    \t\twhile ( i < curveLengths.length ) {\n\t\n\t    \t\t\tif ( curveLengths[ i ] >= d ) {\n\t\n\t    \t\t\t\tvar diff = curveLengths[ i ] - d;\n\t    \t\t\t\tvar curve = this.curves[ i ];\n\t\n\t    \t\t\t\tvar segmentLength = curve.getLength();\n\t    \t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\n\t    \t\t\t\treturn curve.getPointAt( u );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ti ++;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t\t// loop where sum != 0, sum > d , sum+1 <d\n\t\n\t    \t},\n\t\n\t    \t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t    \t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t    \t// getPoint() depends on getLength\n\t\n\t    \tgetLength: function () {\n\t\n\t    \t\tvar lens = this.getCurveLengths();\n\t    \t\treturn lens[ lens.length - 1 ];\n\t\n\t    \t},\n\t\n\t    \t// cacheLengths must be recalculated.\n\t    \tupdateArcLengths: function () {\n\t\n\t    \t\tthis.needsUpdate = true;\n\t    \t\tthis.cacheLengths = null;\n\t    \t\tthis.getLengths();\n\t\n\t    \t},\n\t\n\t    \t// Compute lengths and cache them\n\t    \t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\n\t    \tgetCurveLengths: function () {\n\t\n\t    \t\t// We use cache values if curves and cache array are same length\n\t\n\t    \t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\t\n\t    \t\t\treturn this.cacheLengths;\n\t\n\t    \t\t}\n\t\n\t    \t\t// Get length of sub-curve\n\t    \t\t// Push sums into cached array\n\t\n\t    \t\tvar lengths = [], sums = 0;\n\t\n\t    \t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\t\n\t    \t\t\tsums += this.curves[ i ].getLength();\n\t    \t\t\tlengths.push( sums );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cacheLengths = lengths;\n\t\n\t    \t\treturn lengths;\n\t\n\t    \t},\n\t\n\t    \tgetSpacedPoints: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = 40;\n\t\n\t    \t\tvar points = [];\n\t\n\t    \t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\t\n\t    \t\t\tpoints.push( this.getPoint( i / divisions ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.autoClose ) {\n\t\n\t    \t\t\tpoints.push( points[ 0 ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \tgetPoints: function ( divisions ) {\n\t\n\t    \t\tdivisions = divisions || 12;\n\t\n\t    \t\tvar points = [], last;\n\t\n\t    \t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\t\n\t    \t\t\tvar curve = curves[ i ];\n\t    \t\t\tvar resolution = (curve && curve.isEllipseCurve) ? divisions * 2\n\t    \t\t\t\t: (curve && curve.isLineCurve) ? 1\n\t    \t\t\t\t: (curve && curve.isSplineCurve) ? divisions * curve.points.length\n\t    \t\t\t\t: divisions;\n\t\n\t    \t\t\tvar pts = curve.getPoints( resolution );\n\t\n\t    \t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\t\n\t    \t\t\t\tvar point = pts[ j ];\n\t\n\t    \t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\t\n\t    \t\t\t\tpoints.push( point );\n\t    \t\t\t\tlast = point;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\t\n\t    \t\t\tpoints.push( points[ 0 ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \t/**************************************************************\n\t    \t *\tCreate Geometries Helpers\n\t    \t **************************************************************/\n\t\n\t    \t/// Generate geometry from path points (for Line or Points objects)\n\t\n\t    \tcreatePointsGeometry: function ( divisions ) {\n\t\n\t    \t\tvar pts = this.getPoints( divisions );\n\t    \t\treturn this.createGeometry( pts );\n\t\n\t    \t},\n\t\n\t    \t// Generate geometry from equidistant sampling along the path\n\t\n\t    \tcreateSpacedPointsGeometry: function ( divisions ) {\n\t\n\t    \t\tvar pts = this.getSpacedPoints( divisions );\n\t    \t\treturn this.createGeometry( pts );\n\t\n\t    \t},\n\t\n\t    \tcreateGeometry: function ( points ) {\n\t\n\t    \t\tvar geometry = new Geometry();\n\t\n\t    \t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar point = points[ i ];\n\t    \t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**************************************************************\n\t     *\tEllipse curve\n\t     **************************************************************/\n\t\n\t    function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t    \tthis.aX = aX;\n\t    \tthis.aY = aY;\n\t\n\t    \tthis.xRadius = xRadius;\n\t    \tthis.yRadius = yRadius;\n\t\n\t    \tthis.aStartAngle = aStartAngle;\n\t    \tthis.aEndAngle = aEndAngle;\n\t\n\t    \tthis.aClockwise = aClockwise;\n\t\n\t    \tthis.aRotation = aRotation || 0;\n\t\n\t    }\n\t\n\t    EllipseCurve.prototype = Object.create( Curve.prototype );\n\t    EllipseCurve.prototype.constructor = EllipseCurve;\n\t\n\t    EllipseCurve.prototype.isEllipseCurve = true;\n\t\n\t    EllipseCurve.prototype.getPoint = function( t ) {\n\t\n\t    \tvar twoPi = Math.PI * 2;\n\t    \tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t    \tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\t\n\t    \t// ensures that deltaAngle is 0 .. 2 PI\n\t    \twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t    \twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\t\n\t    \tif ( deltaAngle < Number.EPSILON ) {\n\t\n\t    \t\tif ( samePoints ) {\n\t\n\t    \t\t\tdeltaAngle = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdeltaAngle = twoPi;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tif ( this.aClockwise === true && ! samePoints ) {\n\t\n\t    \t\tif ( deltaAngle === twoPi ) {\n\t\n\t    \t\t\tdeltaAngle = - twoPi;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar angle = this.aStartAngle + t * deltaAngle;\n\t    \tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t    \tvar y = this.aY + this.yRadius * Math.sin( angle );\n\t\n\t    \tif ( this.aRotation !== 0 ) {\n\t\n\t    \t\tvar cos = Math.cos( this.aRotation );\n\t    \t\tvar sin = Math.sin( this.aRotation );\n\t\n\t    \t\tvar tx = x - this.aX;\n\t    \t\tvar ty = y - this.aY;\n\t\n\t    \t\t// Rotate the point about the center of the ellipse.\n\t    \t\tx = tx * cos - ty * sin + this.aX;\n\t    \t\ty = tx * sin + ty * cos + this.aY;\n\t\n\t    \t}\n\t\n\t    \treturn new Vector2( x, y );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     */\n\t\n\t    exports.CurveUtils = {\n\t\n\t    \ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\t\n\t    \t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\t\n\t    \t},\n\t\n\t    \t// Puay Bing, thanks for helping with this derivative!\n\t\n\t    \ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\t\n\t    \t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n\t    \t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n\t    \t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n\t    \t\t\t3 * t * t * p3;\n\t\n\t    \t},\n\t\n\t    \ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\t\n\t    \t\t// To check if my formulas are correct\n\t\n\t    \t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n\t    \t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\t    \t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n\t    \t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\t\n\t    \t\treturn h00 + h10 + h01 + h11;\n\t\n\t    \t},\n\t\n\t    \t// Catmull-Rom\n\t\n\t    \tinterpolate: function( p0, p1, p2, p3, t ) {\n\t\n\t    \t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t    \t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t    \t\tvar t2 = t * t;\n\t    \t\tvar t3 = t * t2;\n\t    \t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tSpline curve\n\t     **************************************************************/\n\t\n\t    function SplineCurve( points /* array of Vector2 */ ) {\n\t\n\t    \tthis.points = ( points === undefined ) ? [] : points;\n\t\n\t    }\n\t\n\t    SplineCurve.prototype = Object.create( Curve.prototype );\n\t    SplineCurve.prototype.constructor = SplineCurve;\n\t\n\t    SplineCurve.prototype.isSplineCurve = true;\n\t\n\t    SplineCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tvar points = this.points;\n\t    \tvar point = ( points.length - 1 ) * t;\n\t\n\t    \tvar intPoint = Math.floor( point );\n\t    \tvar weight = point - intPoint;\n\t\n\t    \tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t    \tvar point1 = points[ intPoint ];\n\t    \tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t    \tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\t\n\t    \tvar interpolate = exports.CurveUtils.interpolate;\n\t\n\t    \treturn new Vector2(\n\t    \t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t    \t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n\t    \t);\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tCubic Bezier curve\n\t     **************************************************************/\n\t\n\t    function CubicBezierCurve( v0, v1, v2, v3 ) {\n\t\n\t    \tthis.v0 = v0;\n\t    \tthis.v1 = v1;\n\t    \tthis.v2 = v2;\n\t    \tthis.v3 = v3;\n\t\n\t    }\n\t\n\t    CubicBezierCurve.prototype = Object.create( Curve.prototype );\n\t    CubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\t\n\t    CubicBezierCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tvar b3 = exports.ShapeUtils.b3;\n\t\n\t    \treturn new Vector2(\n\t    \t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t    \t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t    \t);\n\t\n\t    };\n\t\n\t    CubicBezierCurve.prototype.getTangent = function( t ) {\n\t\n\t    \tvar tangentCubicBezier = exports.CurveUtils.tangentCubicBezier;\n\t\n\t    \treturn new Vector2(\n\t    \t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t    \t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t    \t).normalize();\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tQuadratic Bezier curve\n\t     **************************************************************/\n\t\n\t\n\t    function QuadraticBezierCurve( v0, v1, v2 ) {\n\t\n\t    \tthis.v0 = v0;\n\t    \tthis.v1 = v1;\n\t    \tthis.v2 = v2;\n\t\n\t    }\n\t\n\t    QuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\t    QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\t\n\t\n\t    QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tvar b2 = exports.ShapeUtils.b2;\n\t\n\t    \treturn new Vector2(\n\t    \t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t    \t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n\t    \t);\n\t\n\t    };\n\t\n\t\n\t    QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\t\n\t    \tvar tangentQuadraticBezier = exports.CurveUtils.tangentQuadraticBezier;\n\t\n\t    \treturn new Vector2(\n\t    \t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n\t    \t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n\t    \t).normalize();\n\t\n\t    };\n\t\n\t    var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {\n\t\n\t    \tfromPoints: function ( vectors ) {\n\t\n\t    \t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\t\n\t    \t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tmoveTo: function ( x, y ) {\n\t\n\t    \t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\t\n\t    \t},\n\t\n\t    \tlineTo: function ( x, y ) {\n\t\n\t    \t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.set( x, y );\n\t\n\t    \t},\n\t\n\t    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t\n\t    \t\tvar curve = new QuadraticBezierCurve(\n\t    \t\t\tthis.currentPoint.clone(),\n\t    \t\t\tnew Vector2( aCPx, aCPy ),\n\t    \t\t\tnew Vector2( aX, aY )\n\t    \t\t);\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.set( aX, aY );\n\t\n\t    \t},\n\t\n\t    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t\n\t    \t\tvar curve = new CubicBezierCurve(\n\t    \t\t\tthis.currentPoint.clone(),\n\t    \t\t\tnew Vector2( aCP1x, aCP1y ),\n\t    \t\t\tnew Vector2( aCP2x, aCP2y ),\n\t    \t\t\tnew Vector2( aX, aY )\n\t    \t\t);\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.set( aX, aY );\n\t\n\t    \t},\n\t\n\t    \tsplineThru: function ( pts /*Array of Vector*/ ) {\n\t\n\t    \t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\t\n\t    \t\tvar curve = new SplineCurve( npts );\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\t\n\t    \t},\n\t\n\t    \tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t    \t\tvar x0 = this.currentPoint.x;\n\t    \t\tvar y0 = this.currentPoint.y;\n\t\n\t    \t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t    \t\t\taStartAngle, aEndAngle, aClockwise );\n\t\n\t    \t},\n\t\n\t    \tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t    \t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\t\n\t    \t},\n\t\n\t    \tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t    \t\tvar x0 = this.currentPoint.x;\n\t    \t\tvar y0 = this.currentPoint.y;\n\t\n\t    \t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\n\t    \t},\n\t\n\t    \tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t    \t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\n\t    \t\tif ( this.curves.length > 0 ) {\n\t\n\t    \t\t\t// if a previous curve is present, attempt to join\n\t    \t\t\tvar firstPoint = curve.getPoint( 0 );\n\t\n\t    \t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\t\n\t    \t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tvar lastPoint = curve.getPoint( 1 );\n\t    \t\tthis.currentPoint.copy( lastPoint );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * Defines a 2d shape plane using paths.\n\t     **/\n\t\n\t    // STEP 1 Create a path.\n\t    // STEP 2 Turn path into shape.\n\t    // STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t    // STEP 3a - Extract points from each shape, turn to vertices\n\t    // STEP 3b - Triangulate each shape, add faces.\n\t\n\t    function Shape() {\n\t\n\t    \tPath.apply( this, arguments );\n\t\n\t    \tthis.holes = [];\n\t\n\t    }\n\t\n\t    Shape.prototype = Object.assign( Object.create( PathPrototype ), {\n\t\n\t    \tconstructor: Shape,\n\t\n\t    \tgetPointsHoles: function ( divisions ) {\n\t\n\t    \t\tvar holesPts = [];\n\t\n\t    \t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\t\n\t    \t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn holesPts;\n\t\n\t    \t},\n\t\n\t    \t// Get points of shape and holes (keypoints based on segments parameter)\n\t\n\t    \textractAllPoints: function ( divisions ) {\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tshape: this.getPoints( divisions ),\n\t    \t\t\tholes: this.getPointsHoles( divisions )\n\t\n\t    \t\t};\n\t\n\t    \t},\n\t\n\t    \textractPoints: function ( divisions ) {\n\t\n\t    \t\treturn this.extractAllPoints( divisions );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * Creates free form 2d path using series of points, lines or curves.\n\t     *\n\t     **/\n\t\n\t    function Path( points ) {\n\t\n\t    \tCurvePath.call( this );\n\t    \tthis.currentPoint = new Vector2();\n\t\n\t    \tif ( points ) {\n\t\n\t    \t\tthis.fromPoints( points );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Path.prototype = PathPrototype;\n\t    PathPrototype.constructor = Path;\n\t\n\t\n\t    // minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t    function ShapePath() {\n\t    \tthis.subPaths = [];\n\t    \tthis.currentPath = null;\n\t    }\n\t\n\t    ShapePath.prototype = {\n\t    \tmoveTo: function ( x, y ) {\n\t    \t\tthis.currentPath = new Path();\n\t    \t\tthis.subPaths.push(this.currentPath);\n\t    \t\tthis.currentPath.moveTo( x, y );\n\t    \t},\n\t    \tlineTo: function ( x, y ) {\n\t    \t\tthis.currentPath.lineTo( x, y );\n\t    \t},\n\t    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t    \t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\t    \t},\n\t    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t    \t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\t    \t},\n\t    \tsplineThru: function ( pts ) {\n\t    \t\tthis.currentPath.splineThru( pts );\n\t    \t},\n\t\n\t    \ttoShapes: function ( isCCW, noHoles ) {\n\t\n\t    \t\tfunction toShapesNoHoles( inSubpaths ) {\n\t\n\t    \t\t\tvar shapes = [];\n\t\n\t    \t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar tmpPath = inSubpaths[ i ];\n\t\n\t    \t\t\t\tvar tmpShape = new Shape();\n\t    \t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\n\t    \t\t\t\tshapes.push( tmpShape );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn shapes;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\t\n\t    \t\t\tvar polyLen = inPolygon.length;\n\t\n\t    \t\t\t// inPt on polygon contour => immediate success    or\n\t    \t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t    \t\t\t//  with the horizontal line through inPt, left of inPt\n\t    \t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t    \t\t\tvar inside = false;\n\t    \t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\t\n\t    \t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t    \t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\t\n\t    \t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t    \t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\t\n\t    \t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\t\n\t    \t\t\t\t\t// not parallel\n\t    \t\t\t\t\tif ( edgeDy < 0 ) {\n\t\n\t    \t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t    \t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\t\n\t    \t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\t\n\t    \t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t    \t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t    \t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t    \t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t    \t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// parallel or collinear\n\t    \t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t    \t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t    \t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t    \t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t    \t\t\t\t\t// continue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn\tinside;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar isClockWise = exports.ShapeUtils.isClockWise;\n\t\n\t    \t\tvar subPaths = this.subPaths;\n\t    \t\tif ( subPaths.length === 0 ) return [];\n\t\n\t    \t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\t\n\t\n\t    \t\tvar solid, tmpPath, tmpShape, shapes = [];\n\t\n\t    \t\tif ( subPaths.length === 1 ) {\n\t\n\t    \t\t\ttmpPath = subPaths[ 0 ];\n\t    \t\t\ttmpShape = new Shape();\n\t    \t\t\ttmpShape.curves = tmpPath.curves;\n\t    \t\t\tshapes.push( tmpShape );\n\t    \t\t\treturn shapes;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t    \t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\t\n\t    \t\t// console.log(\"Holes first\", holesFirst);\n\t\n\t    \t\tvar betterShapeHoles = [];\n\t    \t\tvar newShapes = [];\n\t    \t\tvar newShapeHoles = [];\n\t    \t\tvar mainIdx = 0;\n\t    \t\tvar tmpPoints;\n\t\n\t    \t\tnewShapes[ mainIdx ] = undefined;\n\t    \t\tnewShapeHoles[ mainIdx ] = [];\n\t\n\t    \t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\t\n\t    \t\t\ttmpPath = subPaths[ i ];\n\t    \t\t\ttmpPoints = tmpPath.getPoints();\n\t    \t\t\tsolid = isClockWise( tmpPoints );\n\t    \t\t\tsolid = isCCW ? ! solid : solid;\n\t\n\t    \t\t\tif ( solid ) {\n\t\n\t    \t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\t\n\t    \t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t    \t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\t\n\t    \t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t    \t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\t\n\t    \t\t\t\t//console.log('cw', i);\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\t\n\t    \t\t\t\t//console.log('ccw', i);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// only Holes? -> probably all Shapes with wrong orientation\n\t    \t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\t\n\t\n\t    \t\tif ( newShapes.length > 1 ) {\n\t\n\t    \t\t\tvar ambiguous = false;\n\t    \t\t\tvar toChange = [];\n\t\n\t    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\t\n\t    \t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\t\n\t    \t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\t\n\t    \t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\t\n\t    \t\t\t\t\tvar ho = sho[ hIdx ];\n\t    \t\t\t\t\tvar hole_unassigned = true;\n\t\n\t    \t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\t\n\t    \t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\t\n\t    \t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t    \t\t\t\t\t\t\tif ( hole_unassigned ) {\n\t\n\t    \t\t\t\t\t\t\t\thole_unassigned = false;\n\t    \t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\t\n\t    \t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\tambiguous = true;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( hole_unassigned ) {\n\t\n\t    \t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t    \t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t    \t\t\tif ( toChange.length > 0 ) {\n\t\n\t    \t\t\t\t// console.log(\"to change: \", toChange);\n\t    \t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar tmpHoles;\n\t\n\t    \t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\t\n\t    \t\t\ttmpShape = newShapes[ i ].s;\n\t    \t\t\tshapes.push( tmpShape );\n\t    \t\t\ttmpHoles = newShapeHoles[ i ];\n\t\n\t    \t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t//console.log(\"shape\", shapes);\n\t\n\t    \t\treturn shapes;\n\t\n\t    \t}\n\t    }\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Font( data ) {\n\t\n\t    \tthis.data = data;\n\t\n\t    }\n\t\n\t    Object.assign( Font.prototype, {\n\t\n\t    \tisFont: true,\n\t\n\t    \tgenerateShapes: function ( text, size, divisions ) {\n\t\n\t    \t\tfunction createPaths( text ) {\n\t\n\t    \t\t\tvar chars = String( text ).split( '' );\n\t    \t\t\tvar scale = size / data.resolution;\n\t    \t\t\tvar offset = 0;\n\t\n\t    \t\t\tvar paths = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\t\n\t    \t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n\t    \t\t\t\toffset += ret.offset;\n\t\n\t    \t\t\t\tpaths.push( ret.path );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn paths;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction createPath( c, scale, offset ) {\n\t\n\t    \t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\t\n\t    \t\t\tif ( ! glyph ) return;\n\t\n\t    \t\t\tvar path = new ShapePath();\n\t\n\t    \t\t\tvar pts = [], b2 = exports.ShapeUtils.b2, b3 = exports.ShapeUtils.b3;\n\t    \t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\t\n\t    \t\t\tif ( glyph.o ) {\n\t\n\t    \t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\t\n\t    \t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\t\n\t    \t\t\t\t\tvar action = outline[ i ++ ];\n\t\n\t    \t\t\t\t\tswitch ( action ) {\n\t\n\t    \t\t\t\t\t\tcase 'm': // moveTo\n\t\n\t    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.moveTo( x, y );\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\tcase 'l': // lineTo\n\t\n\t    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.lineTo( x, y );\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\t\n\t    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\t\n\t    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( laste ) {\n\t\n\t    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\t\n\t    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t    \t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n\t    \t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\tcase 'b': // bezierCurveTo\n\t\n\t    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t    \t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\t\n\t    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( laste ) {\n\t\n\t    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\t\n\t    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t    \t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n\t    \t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn { offset: glyph.ha * scale, path: path };\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( size === undefined ) size = 100;\n\t    \t\tif ( divisions === undefined ) divisions = 4;\n\t\n\t    \t\tvar data = this.data;\n\t\n\t    \t\tvar paths = createPaths( text );\n\t    \t\tvar shapes = [];\n\t\n\t    \t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\t\n\t    \t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn shapes;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function FontLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( FontLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tvar json;\n\t\n\t    \t\t\ttry {\n\t\n\t    \t\t\t\tjson = JSON.parse( text );\n\t\n\t    \t\t\t} catch ( e ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t    \t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar font = scope.parse( json );\n\t\n\t    \t\t\tif ( onLoad ) onLoad( font );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json ) {\n\t\n\t    \t\treturn new Font( json );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var context;\n\t\n\t    function getAudioContext() {\n\t\n\t    \tif ( context === undefined ) {\n\t\n\t    \t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\t\n\t    \t}\n\t\n\t    \treturn context;\n\t\n\t    }\n\t\n\t    /**\n\t     * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t     */\n\t\n\t    function AudioLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( AudioLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setResponseType( 'arraybuffer' );\n\t    \t\tloader.load( url, function ( buffer ) {\n\t\n\t    \t\t\tvar context = getAudioContext();\n\t\n\t    \t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\t\n\t    \t\t\t\tonLoad( audioBuffer );\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function StereoCamera() {\n\t\n\t    \tthis.type = 'StereoCamera';\n\t\n\t    \tthis.aspect = 1;\n\t\n\t    \tthis.eyeSep = 0.064;\n\t\n\t    \tthis.cameraL = new PerspectiveCamera();\n\t    \tthis.cameraL.layers.enable( 1 );\n\t    \tthis.cameraL.matrixAutoUpdate = false;\n\t\n\t    \tthis.cameraR = new PerspectiveCamera();\n\t    \tthis.cameraR.layers.enable( 2 );\n\t    \tthis.cameraR.matrixAutoUpdate = false;\n\t\n\t    }\n\t\n\t    Object.assign( StereoCamera.prototype, {\n\t\n\t    \tupdate: ( function () {\n\t\n\t    \t\tvar instance, focus, fov, aspect, near, far, zoom;\n\t\n\t    \t\tvar eyeRight = new Matrix4();\n\t    \t\tvar eyeLeft = new Matrix4();\n\t\n\t    \t\treturn function update( camera ) {\n\t\n\t    \t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n\t    \t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t    \t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom;\n\t\n\t    \t\t\tif ( needsUpdate ) {\n\t\n\t    \t\t\t\tinstance = this;\n\t    \t\t\t\tfocus = camera.focus;\n\t    \t\t\t\tfov = camera.fov;\n\t    \t\t\t\taspect = camera.aspect * this.aspect;\n\t    \t\t\t\tnear = camera.near;\n\t    \t\t\t\tfar = camera.far;\n\t    \t\t\t\tzoom = camera.zoom;\n\t\n\t    \t\t\t\t// Off-axis stereoscopic effect based on\n\t    \t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\t\n\t    \t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t    \t\t\t\tvar eyeSep = this.eyeSep / 2;\n\t    \t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t    \t\t\t\tvar ymax = ( near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n\t    \t\t\t\tvar xmin, xmax;\n\t\n\t    \t\t\t\t// translate xOffset\n\t\n\t    \t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t    \t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\t\n\t    \t\t\t\t// for left eye\n\t\n\t    \t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t    \t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\t\n\t    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\t\n\t    \t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\t\n\t    \t\t\t\t// for right eye\n\t\n\t    \t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t    \t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\t\n\t    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\t\n\t    \t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t    \t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    } );\n\t\n\t    /**\n\t     * Camera for rendering cube maps\n\t     *\t- renders scene into axis-aligned cube\n\t     *\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function CubeCamera( near, far, cubeResolution ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'CubeCamera';\n\t\n\t    \tvar fov = 90, aspect = 1;\n\t\n\t    \tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraPX.up.set( 0, - 1, 0 );\n\t    \tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t    \tthis.add( cameraPX );\n\t\n\t    \tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraNX.up.set( 0, - 1, 0 );\n\t    \tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t    \tthis.add( cameraNX );\n\t\n\t    \tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraPY.up.set( 0, 0, 1 );\n\t    \tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t    \tthis.add( cameraPY );\n\t\n\t    \tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraNY.up.set( 0, 0, - 1 );\n\t    \tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t    \tthis.add( cameraNY );\n\t\n\t    \tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraPZ.up.set( 0, - 1, 0 );\n\t    \tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t    \tthis.add( cameraPZ );\n\t\n\t    \tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraNZ.up.set( 0, - 1, 0 );\n\t    \tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t    \tthis.add( cameraNZ );\n\t\n\t    \tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\t\n\t    \tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\t\n\t    \tthis.updateCubeMap = function ( renderer, scene ) {\n\t\n\t    \t\tif ( this.parent === null ) this.updateMatrixWorld();\n\t\n\t    \t\tvar renderTarget = this.renderTarget;\n\t    \t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\n\t    \t\trenderTarget.texture.generateMipmaps = false;\n\t\n\t    \t\trenderTarget.activeCubeFace = 0;\n\t    \t\trenderer.render( scene, cameraPX, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 1;\n\t    \t\trenderer.render( scene, cameraNX, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 2;\n\t    \t\trenderer.render( scene, cameraPY, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 3;\n\t    \t\trenderer.render( scene, cameraNY, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 4;\n\t    \t\trenderer.render( scene, cameraPZ, renderTarget );\n\t\n\t    \t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\n\t    \t\trenderTarget.activeCubeFace = 5;\n\t    \t\trenderer.render( scene, cameraNZ, renderTarget );\n\t\n\t    \t\trenderer.setRenderTarget( null );\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    CubeCamera.prototype = Object.create( Object3D.prototype );\n\t    CubeCamera.prototype.constructor = CubeCamera;\n\t\n\t    function AudioListener() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'AudioListener';\n\t\n\t    \tthis.context = getAudioContext();\n\t\n\t    \tthis.gain = this.context.createGain();\n\t    \tthis.gain.connect( this.context.destination );\n\t\n\t    \tthis.filter = null;\n\t\n\t    }\n\t\n\t    AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: AudioListener,\n\t\n\t    \tgetInput: function () {\n\t\n\t    \t\treturn this.gain;\n\t\n\t    \t},\n\t\n\t    \tremoveFilter: function ( ) {\n\t\n\t    \t\tif ( this.filter !== null ) {\n\t\n\t    \t\t\tthis.gain.disconnect( this.filter );\n\t    \t\t\tthis.filter.disconnect( this.context.destination );\n\t    \t\t\tthis.gain.connect( this.context.destination );\n\t    \t\t\tthis.filter = null;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetFilter: function () {\n\t\n\t    \t\treturn this.filter;\n\t\n\t    \t},\n\t\n\t    \tsetFilter: function ( value ) {\n\t\n\t    \t\tif ( this.filter !== null ) {\n\t\n\t    \t\t\tthis.gain.disconnect( this.filter );\n\t    \t\t\tthis.filter.disconnect( this.context.destination );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.gain.disconnect( this.context.destination );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.filter = value;\n\t    \t\tthis.gain.connect( this.filter );\n\t    \t\tthis.filter.connect( this.context.destination );\n\t\n\t    \t},\n\t\n\t    \tgetMasterVolume: function () {\n\t\n\t    \t\treturn this.gain.gain.value;\n\t\n\t    \t},\n\t\n\t    \tsetMasterVolume: function ( value ) {\n\t\n\t    \t\tthis.gain.gain.value = value;\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: ( function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t    \t\tvar quaternion = new Quaternion();\n\t    \t\tvar scale = new Vector3();\n\t\n\t    \t\tvar orientation = new Vector3();\n\t\n\t    \t\treturn function updateMatrixWorld( force ) {\n\t\n\t    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t    \t\t\tvar listener = this.context.listener;\n\t    \t\t\tvar up = this.up;\n\t\n\t    \t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\t\n\t    \t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\t\n\t    \t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t    \t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    } );\n\t\n\t    function Audio( listener ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Audio';\n\t\n\t    \tthis.context = listener.context;\n\t    \tthis.source = this.context.createBufferSource();\n\t    \tthis.source.onended = this.onEnded.bind( this );\n\t\n\t    \tthis.gain = this.context.createGain();\n\t    \tthis.gain.connect( listener.getInput() );\n\t\n\t    \tthis.autoplay = false;\n\t\n\t    \tthis.startTime = 0;\n\t    \tthis.playbackRate = 1;\n\t    \tthis.isPlaying = false;\n\t    \tthis.hasPlaybackControl = true;\n\t    \tthis.sourceType = 'empty';\n\t\n\t    \tthis.filters = [];\n\t\n\t    }\n\t\n\t    Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Audio,\n\t\n\t    \tgetOutput: function () {\n\t\n\t    \t\treturn this.gain;\n\t\n\t    \t},\n\t\n\t    \tsetNodeSource: function ( audioNode ) {\n\t\n\t    \t\tthis.hasPlaybackControl = false;\n\t    \t\tthis.sourceType = 'audioNode';\n\t    \t\tthis.source = audioNode;\n\t    \t\tthis.connect();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetBuffer: function ( audioBuffer ) {\n\t\n\t    \t\tthis.source.buffer = audioBuffer;\n\t    \t\tthis.sourceType = 'buffer';\n\t\n\t    \t\tif ( this.autoplay ) this.play();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tplay: function () {\n\t\n\t    \t\tif ( this.isPlaying === true ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar source = this.context.createBufferSource();\n\t\n\t    \t\tsource.buffer = this.source.buffer;\n\t    \t\tsource.loop = this.source.loop;\n\t    \t\tsource.onended = this.source.onended;\n\t    \t\tsource.start( 0, this.startTime );\n\t    \t\tsource.playbackRate.value = this.playbackRate;\n\t\n\t    \t\tthis.isPlaying = true;\n\t\n\t    \t\tthis.source = source;\n\t\n\t    \t\treturn this.connect();\n\t\n\t    \t},\n\t\n\t    \tpause: function () {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.source.stop();\n\t    \t\tthis.startTime = this.context.currentTime;\n\t    \t\tthis.isPlaying = false;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tstop: function () {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.source.stop();\n\t    \t\tthis.startTime = 0;\n\t    \t\tthis.isPlaying = false;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tconnect: function () {\n\t\n\t    \t\tif ( this.filters.length > 0 ) {\n\t\n\t    \t\t\tthis.source.connect( this.filters[ 0 ] );\n\t\n\t    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.source.connect( this.getOutput() );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdisconnect: function () {\n\t\n\t    \t\tif ( this.filters.length > 0 ) {\n\t\n\t    \t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\t\n\t    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.source.disconnect( this.getOutput() );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetFilters: function () {\n\t\n\t    \t\treturn this.filters;\n\t\n\t    \t},\n\t\n\t    \tsetFilters: function ( value ) {\n\t\n\t    \t\tif ( ! value ) value = [];\n\t\n\t    \t\tif ( this.isPlaying === true ) {\n\t\n\t    \t\t\tthis.disconnect();\n\t    \t\t\tthis.filters = value;\n\t    \t\t\tthis.connect();\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.filters = value;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetFilter: function () {\n\t\n\t    \t\treturn this.getFilters()[ 0 ];\n\t\n\t    \t},\n\t\n\t    \tsetFilter: function ( filter ) {\n\t\n\t    \t\treturn this.setFilters( filter ? [ filter ] : [] );\n\t\n\t    \t},\n\t\n\t    \tsetPlaybackRate: function ( value ) {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.playbackRate = value;\n\t\n\t    \t\tif ( this.isPlaying === true ) {\n\t\n\t    \t\t\tthis.source.playbackRate.value = this.playbackRate;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetPlaybackRate: function () {\n\t\n\t    \t\treturn this.playbackRate;\n\t\n\t    \t},\n\t\n\t    \tonEnded: function () {\n\t\n\t    \t\tthis.isPlaying = false;\n\t\n\t    \t},\n\t\n\t    \tgetLoop: function () {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.source.loop;\n\t\n\t    \t},\n\t\n\t    \tsetLoop: function ( value ) {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.source.loop = value;\n\t\n\t    \t},\n\t\n\t    \tgetVolume: function () {\n\t\n\t    \t\treturn this.gain.gain.value;\n\t\n\t    \t},\n\t\n\t\n\t    \tsetVolume: function ( value ) {\n\t\n\t    \t\tthis.gain.gain.value = value;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    function PositionalAudio( listener ) {\n\t\n\t    \tAudio.call( this, listener );\n\t\n\t    \tthis.panner = this.context.createPanner();\n\t    \tthis.panner.connect( this.gain );\n\t\n\t    }\n\t\n\t    PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\t\n\t    \tconstructor: PositionalAudio,\n\t\n\t    \tgetOutput: function () {\n\t\n\t    \t\treturn this.panner;\n\t\n\t    \t},\n\t\n\t    \tgetRefDistance: function () {\n\t\n\t    \t\treturn this.panner.refDistance;\n\t\n\t    \t},\n\t\n\t    \tsetRefDistance: function ( value ) {\n\t\n\t    \t\tthis.panner.refDistance = value;\n\t\n\t    \t},\n\t\n\t    \tgetRolloffFactor: function () {\n\t\n\t    \t\treturn this.panner.rolloffFactor;\n\t\n\t    \t},\n\t\n\t    \tsetRolloffFactor: function ( value ) {\n\t\n\t    \t\tthis.panner.rolloffFactor = value;\n\t\n\t    \t},\n\t\n\t    \tgetDistanceModel: function () {\n\t\n\t    \t\treturn this.panner.distanceModel;\n\t\n\t    \t},\n\t\n\t    \tsetDistanceModel: function ( value ) {\n\t\n\t    \t\tthis.panner.distanceModel = value;\n\t\n\t    \t},\n\t\n\t    \tgetMaxDistance: function () {\n\t\n\t    \t\treturn this.panner.maxDistance;\n\t\n\t    \t},\n\t\n\t    \tsetMaxDistance: function ( value ) {\n\t\n\t    \t\tthis.panner.maxDistance = value;\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: ( function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t\n\t    \t\treturn function updateMatrixWorld( force ) {\n\t\n\t    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t    \t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function AudioAnalyser( audio, fftSize ) {\n\t\n\t    \tthis.analyser = audio.context.createAnalyser();\n\t    \tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\t\n\t    \tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\t\n\t    \taudio.getOutput().connect( this.analyser );\n\t\n\t    }\n\t\n\t    Object.assign( AudioAnalyser.prototype, {\n\t\n\t    \tgetFrequencyData: function () {\n\t\n\t    \t\tthis.analyser.getByteFrequencyData( this.data );\n\t\n\t    \t\treturn this.data;\n\t\n\t    \t},\n\t\n\t    \tgetAverageFrequency: function () {\n\t\n\t    \t\tvar value = 0, data = this.getFrequencyData();\n\t\n\t    \t\tfor ( var i = 0; i < data.length; i ++ ) {\n\t\n\t    \t\t\tvalue += data[ i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn value / data.length;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * Buffered scene graph property that allows weighted accumulation.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function PropertyMixer( binding, typeName, valueSize ) {\n\t\n\t    \tthis.binding = binding;\n\t    \tthis.valueSize = valueSize;\n\t\n\t    \tvar bufferType = Float64Array,\n\t    \t\tmixFunction;\n\t\n\t    \tswitch ( typeName ) {\n\t\n\t    \t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\t\n\t    \t\tcase 'string':\n\t    \t\tcase 'bool':\n\t\n\t    \t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\t\n\t    \t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\t\n\t    \t}\n\t\n\t    \tthis.buffer = new bufferType( valueSize * 4 );\n\t    \t// layout: [ incoming | accu0 | accu1 | orig ]\n\t    \t//\n\t    \t// interpolators can use .buffer as their .result\n\t    \t// the data then goes to 'incoming'\n\t    \t//\n\t    \t// 'accu0' and 'accu1' are used frame-interleaved for\n\t    \t// the cumulative result and are compared to detect\n\t    \t// changes\n\t    \t//\n\t    \t// 'orig' stores the original state of the property\n\t\n\t    \tthis._mixBufferRegion = mixFunction;\n\t\n\t    \tthis.cumulativeWeight = 0;\n\t\n\t    \tthis.useCount = 0;\n\t    \tthis.referenceCount = 0;\n\t\n\t    }\n\t\n\t    PropertyMixer.prototype = {\n\t\n\t    \tconstructor: PropertyMixer,\n\t\n\t    \t// accumulate data in the 'incoming' region into 'accu<i>'\n\t    \taccumulate: function( accuIndex, weight ) {\n\t\n\t    \t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t    \t\t// the weight and shouldn't have made the call in the first place\n\t\n\t    \t\tvar buffer = this.buffer,\n\t    \t\t\tstride = this.valueSize,\n\t    \t\t\toffset = accuIndex * stride + stride,\n\t\n\t    \t\t\tcurrentWeight = this.cumulativeWeight;\n\t\n\t    \t\tif ( currentWeight === 0 ) {\n\t\n\t    \t\t\t// accuN := incoming * weight\n\t\n\t    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcurrentWeight = weight;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// accuN := accuN + incoming * weight\n\t\n\t    \t\t\tcurrentWeight += weight;\n\t    \t\t\tvar mix = weight / currentWeight;\n\t    \t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cumulativeWeight = currentWeight;\n\t\n\t    \t},\n\t\n\t    \t// apply the state of 'accu<i>' to the binding when accus differ\n\t    \tapply: function( accuIndex ) {\n\t\n\t    \t\tvar stride = this.valueSize,\n\t    \t\t\tbuffer = this.buffer,\n\t    \t\t\toffset = accuIndex * stride + stride,\n\t\n\t    \t\t\tweight = this.cumulativeWeight,\n\t\n\t    \t\t\tbinding = this.binding;\n\t\n\t    \t\tthis.cumulativeWeight = 0;\n\t\n\t    \t\tif ( weight < 1 ) {\n\t\n\t    \t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\n\t    \t\t\tvar originalValueOffset = stride * 3;\n\t\n\t    \t\t\tthis._mixBufferRegion(\n\t    \t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\t\n\t    \t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\t\n\t    \t\t\t\t// value has changed -> update scene graph\n\t\n\t    \t\t\t\tbinding.setValue( buffer, offset );\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// remember the state of the bound property and copy it to both accus\n\t    \tsaveOriginalState: function() {\n\t\n\t    \t\tvar binding = this.binding;\n\t\n\t    \t\tvar buffer = this.buffer,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\toriginalValueOffset = stride * 3;\n\t\n\t    \t\tbinding.getValue( buffer, originalValueOffset );\n\t\n\t    \t\t// accu[0..1] := orig -- initially detect changes against the original\n\t    \t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\t\n\t    \t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cumulativeWeight = 0;\n\t\n\t    \t},\n\t\n\t    \t// apply the state previously taken via 'saveOriginalState' to the binding\n\t    \trestoreOriginalState: function() {\n\t\n\t    \t\tvar originalValueOffset = this.valueSize * 3;\n\t    \t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\t\n\t    \t},\n\t\n\t\n\t    \t// mix functions\n\t\n\t    \t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t    \t\tif ( t >= 0.5 ) {\n\t\n\t    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t    \t\tQuaternion.slerpFlat( buffer, dstOffset,\n\t    \t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\t\n\t    \t},\n\t\n\t    \t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t    \t\tvar s = 1 - t;\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tvar j = dstOffset + i;\n\t\n\t    \t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * A reference to a real property in the scene graph.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function PropertyBinding( rootNode, path, parsedPath ) {\n\t\n\t    \tthis.path = path;\n\t    \tthis.parsedPath = parsedPath ||\n\t    \t\t\tPropertyBinding.parseTrackName( path );\n\t\n\t    \tthis.node = PropertyBinding.findNode(\n\t    \t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\t\n\t    \tthis.rootNode = rootNode;\n\t\n\t    }\n\t\n\t    PropertyBinding.prototype = {\n\t\n\t    \tconstructor: PropertyBinding,\n\t\n\t    \tgetValue: function getValue_unbound( targetArray, offset ) {\n\t\n\t    \t\tthis.bind();\n\t    \t\tthis.getValue( targetArray, offset );\n\t\n\t    \t\t// Note: This class uses a State pattern on a per-method basis:\n\t    \t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t    \t\t// prototype version of these methods with one that represents\n\t    \t\t// the bound state. When the property is not found, the methods\n\t    \t\t// become no-ops.\n\t\n\t    \t},\n\t\n\t    \tsetValue: function getValue_unbound( sourceArray, offset ) {\n\t\n\t    \t\tthis.bind();\n\t    \t\tthis.setValue( sourceArray, offset );\n\t\n\t    \t},\n\t\n\t    \t// create getter / setter pair for a property in the scene graph\n\t    \tbind: function() {\n\t\n\t    \t\tvar targetObject = this.node,\n\t    \t\t\tparsedPath = this.parsedPath,\n\t\n\t    \t\t\tobjectName = parsedPath.objectName,\n\t    \t\t\tpropertyName = parsedPath.propertyName,\n\t    \t\t\tpropertyIndex = parsedPath.propertyIndex;\n\t\n\t    \t\tif ( ! targetObject ) {\n\t\n\t    \t\t\ttargetObject = PropertyBinding.findNode(\n\t    \t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\t\n\t    \t\t\tthis.node = targetObject;\n\t\n\t    \t\t}\n\t\n\t    \t\t// set fail state so we can just 'return' on error\n\t    \t\tthis.getValue = this._getValue_unavailable;\n\t    \t\tthis.setValue = this._setValue_unavailable;\n\t\n\t     \t\t// ensure there is a value node\n\t    \t\tif ( ! targetObject ) {\n\t\n\t    \t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( objectName ) {\n\t\n\t    \t\t\tvar objectIndex = parsedPath.objectIndex;\n\t\n\t    \t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t    \t\t\tswitch ( objectName ) {\n\t\n\t    \t\t\t\tcase 'materials':\n\t\n\t    \t\t\t\t\tif ( ! targetObject.material ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( ! targetObject.material.materials ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'bones':\n\t\n\t    \t\t\t\t\tif ( ! targetObject.skeleton ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t    \t\t\t\t\t// and convert the integer string to a true integer.\n\t\n\t    \t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\t\n\t    \t\t\t\t\t// support resolving morphTarget names into indices.\n\t    \t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\t\n\t    \t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\t\n\t    \t\t\t\t\t\t\tobjectIndex = i;\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault:\n\t\n\t    \t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\ttargetObject = targetObject[ objectName ];\n\t\n\t    \t\t\t}\n\t\n\t\n\t    \t\t\tif ( objectIndex !== undefined ) {\n\t\n\t    \t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttargetObject = targetObject[ objectIndex ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// resolve property\n\t    \t\tvar nodeProperty = targetObject[ propertyName ];\n\t\n\t    \t\tif ( nodeProperty === undefined ) {\n\t\n\t    \t\t\tvar nodeName = parsedPath.nodeName;\n\t\n\t    \t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n\t    \t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\t// determine versioning scheme\n\t    \t\tvar versioning = this.Versioning.None;\n\t\n\t    \t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\t\n\t    \t\t\tversioning = this.Versioning.NeedsUpdate;\n\t    \t\t\tthis.targetObject = targetObject;\n\t\n\t    \t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\t\n\t    \t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t    \t\t\tthis.targetObject = targetObject;\n\t\n\t    \t\t}\n\t\n\t    \t\t// determine how the property gets bound\n\t    \t\tvar bindingType = this.BindingType.Direct;\n\t\n\t    \t\tif ( propertyIndex !== undefined ) {\n\t    \t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\n\t    \t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\t    \t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\n\t    \t\t\t\t// support resolving morphTarget names into indices.\n\t    \t\t\t\tif ( ! targetObject.geometry ) {\n\t\n\t    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\t\n\t    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\t\n\t    \t\t\t\t\t\tpropertyIndex = i;\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tbindingType = this.BindingType.ArrayElement;\n\t\n\t    \t\t\tthis.resolvedProperty = nodeProperty;\n\t    \t\t\tthis.propertyIndex = propertyIndex;\n\t\n\t    \t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\t    \t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\n\t    \t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\n\t    \t\t\tthis.resolvedProperty = nodeProperty;\n\t\n\t    \t\t} else if ( nodeProperty.length !== undefined ) {\n\t\n\t    \t\t\tbindingType = this.BindingType.EntireArray;\n\t\n\t    \t\t\tthis.resolvedProperty = nodeProperty;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.propertyName = propertyName;\n\t\n\t    \t\t}\n\t\n\t    \t\t// select getter / setter\n\t    \t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t    \t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\t\n\t    \t},\n\t\n\t    \tunbind: function() {\n\t\n\t    \t\tthis.node = null;\n\t\n\t    \t\t// back to the prototype version of getValue / setValue\n\t    \t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t    \t\tthis.getValue = this._getValue_unbound;\n\t    \t\tthis.setValue = this._setValue_unbound;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( PropertyBinding.prototype, { // prototype, continued\n\t\n\t    \t// these are used to \"bind\" a nonexistent property\n\t    \t_getValue_unavailable: function() {},\n\t    \t_setValue_unavailable: function() {},\n\t\n\t    \t// initial state of these methods that calls 'bind'\n\t    \t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t    \t_setValue_unbound: PropertyBinding.prototype.setValue,\n\t\n\t    \tBindingType: {\n\t    \t\tDirect: 0,\n\t    \t\tEntireArray: 1,\n\t    \t\tArrayElement: 2,\n\t    \t\tHasFromToArray: 3\n\t    \t},\n\t\n\t    \tVersioning: {\n\t    \t\tNone: 0,\n\t    \t\tNeedsUpdate: 1,\n\t    \t\tMatrixWorldNeedsUpdate: 2\n\t    \t},\n\t\n\t    \tGetterByBindingType: [\n\t\n\t    \t\tfunction getValue_direct( buffer, offset ) {\n\t\n\t    \t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction getValue_array( buffer, offset ) {\n\t\n\t    \t\t\tvar source = this.resolvedProperty;\n\t\n\t    \t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction getValue_arrayElement( buffer, offset ) {\n\t\n\t    \t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction getValue_toArray( buffer, offset ) {\n\t\n\t    \t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\t\n\t    \t\t}\n\t\n\t    \t],\n\t\n\t    \tSetterByBindingTypeAndVersioning: [\n\t\n\t    \t\t[\n\t    \t\t\t// Direct\n\t\n\t    \t\t\tfunction setValue_direct( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t], [\n\t\n\t    \t\t\t// EntireArray\n\t\n\t    \t\t\tfunction setValue_array( buffer, offset ) {\n\t\n\t    \t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t], [\n\t\n\t    \t\t\t// ArrayElement\n\t\n\t    \t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t], [\n\t\n\t    \t\t\t// HasToFromArray\n\t\n\t    \t\t\tfunction setValue_fromArray( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t]\n\t\n\t    \t]\n\t\n\t    } );\n\t\n\t    PropertyBinding.Composite =\n\t    \t\tfunction( targetGroup, path, optionalParsedPath ) {\n\t\n\t    \tvar parsedPath = optionalParsedPath ||\n\t    \t\t\tPropertyBinding.parseTrackName( path );\n\t\n\t    \tthis._targetGroup = targetGroup;\n\t    \tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\t\n\t    };\n\t\n\t    PropertyBinding.Composite.prototype = {\n\t\n\t    \tconstructor: PropertyBinding.Composite,\n\t\n\t    \tgetValue: function( array, offset ) {\n\t\n\t    \t\tthis.bind(); // bind all binding\n\t\n\t    \t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t    \t\t\tbinding = this._bindings[ firstValidIndex ];\n\t\n\t    \t\t// and only call .getValue on the first\n\t    \t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\t\n\t    \t},\n\t\n\t    \tsetValue: function( array, offset ) {\n\t\n\t    \t\tvar bindings = this._bindings;\n\t\n\t    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].setValue( array, offset );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tbind: function() {\n\t\n\t    \t\tvar bindings = this._bindings;\n\t\n\t    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].bind();\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tunbind: function() {\n\t\n\t    \t\tvar bindings = this._bindings;\n\t\n\t    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].unbind();\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    PropertyBinding.create = function( root, path, parsedPath ) {\n\t\n\t    \tif ( ! ( (root && root.isAnimationObjectGroup) ) ) {\n\t\n\t    \t\treturn new PropertyBinding( root, path, parsedPath );\n\t\n\t    \t} else {\n\t\n\t    \t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    PropertyBinding.parseTrackName = function( trackName ) {\n\t\n\t    \t// matches strings in the form of:\n\t    \t//    nodeName.property\n\t    \t//    nodeName.property[accessor]\n\t    \t//    nodeName.material.property[accessor]\n\t    \t//    uuid.property[accessor]\n\t    \t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t    \t//    parentName/nodeName.property\n\t    \t//    parentName/parentName/nodeName.property[index]\n\t    \t//    .bone[Armature.DEF_cog].position\n\t    \t//    scene:helium_balloon_model:helium_balloon_model.position\n\t    \t// created and tested via https://regex101.com/#javascript\n\t\n\t    \tvar re = /^((?:\\w+[\\/:])*)(\\w+)?(?:\\.(\\w+)(?:\\[(.+)\\])?)?\\.(\\w+)(?:\\[(.+)\\])?$/;\n\t    \tvar matches = re.exec( trackName );\n\t\n\t    \tif ( ! matches ) {\n\t\n\t    \t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\t\n\t    \t}\n\t\n\t    \tvar results = {\n\t    \t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t    \t\tnodeName: matches[ 2 ], \t// allowed to be null, specified root node.\n\t    \t\tobjectName: matches[ 3 ],\n\t    \t\tobjectIndex: matches[ 4 ],\n\t    \t\tpropertyName: matches[ 5 ],\n\t    \t\tpropertyIndex: matches[ 6 ]\t// allowed to be null, specifies that the whole property is set.\n\t    \t};\n\t\n\t    \tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\t\n\t    \t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\t\n\t    \t}\n\t\n\t    \treturn results;\n\t\n\t    };\n\t\n\t    PropertyBinding.findNode = function( root, nodeName ) {\n\t\n\t    \tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\t\n\t    \t\treturn root;\n\t\n\t    \t}\n\t\n\t    \t// search into skeleton bones.\n\t    \tif ( root.skeleton ) {\n\t\n\t    \t\tvar searchSkeleton = function( skeleton ) {\n\t\n\t    \t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\t\n\t    \t\t\t\tvar bone = skeleton.bones[ i ];\n\t\n\t    \t\t\t\tif ( bone.name === nodeName ) {\n\t\n\t    \t\t\t\t\treturn bone;\n\t\n\t    \t\t\t\t}\n\t    \t\t\t}\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t};\n\t\n\t    \t\tvar bone = searchSkeleton( root.skeleton );\n\t\n\t    \t\tif ( bone ) {\n\t\n\t    \t\t\treturn bone;\n\t\n\t    \t\t}\n\t    \t}\n\t\n\t    \t// search into node subtree.\n\t    \tif ( root.children ) {\n\t\n\t    \t\tvar searchNodeSubtree = function( children ) {\n\t\n\t    \t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\t\n\t    \t\t\t\tvar childNode = children[ i ];\n\t\n\t    \t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\t\n\t    \t\t\t\t\treturn childNode;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\t\n\t    \t\t\t\tif ( result ) return result;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t};\n\t\n\t    \t\tvar subTreeNode = searchNodeSubtree( root.children );\n\t\n\t    \t\tif ( subTreeNode ) {\n\t\n\t    \t\t\treturn subTreeNode;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn null;\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * A group of objects that receives a shared animation state.\n\t     *\n\t     * Usage:\n\t     *\n\t     * \t-\tAdd objects you would otherwise pass as 'root' to the\n\t     * \t\tconstructor or the .clipAction method of AnimationMixer.\n\t     *\n\t     * \t-\tInstead pass this object as 'root'.\n\t     *\n\t     * \t-\tYou can also add and remove objects later when the mixer\n\t     * \t\tis running.\n\t     *\n\t     * Note:\n\t     *\n\t     *  \tObjects of this class appear as one object to the mixer,\n\t     *  \tso cache control of the individual objects must be done\n\t     *  \ton the group.\n\t     *\n\t     * Limitation:\n\t     *\n\t     * \t- \tThe animated properties must be compatible among the\n\t     * \t\tall objects in the group.\n\t     *\n\t     *  -\tA single property can either be controlled through a\n\t     *  \ttarget group or directly, but not both.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function AnimationObjectGroup( var_args ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \t// cached objects followed by the active ones\n\t    \tthis._objects = Array.prototype.slice.call( arguments );\n\t\n\t    \tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t    \t// note: read by PropertyBinding.Composite\n\t\n\t    \tvar indices = {};\n\t    \tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\t\n\t    \tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\tindices[ arguments[ i ].uuid ] = i;\n\t\n\t    \t}\n\t\n\t    \tthis._paths = [];\t\t\t\t\t// inside: string\n\t    \tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\t    \tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\t    \tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\t\n\t    \tvar scope = this;\n\t\n\t    \tthis.stats = {\n\t\n\t    \t\tobjects: {\n\t    \t\t\tget total() { return scope._objects.length; },\n\t    \t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n\t    \t\t},\n\t\n\t    \t\tget bindingsPerObject() { return scope._bindings.length; }\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    AnimationObjectGroup.prototype = {\n\t\n\t    \tconstructor: AnimationObjectGroup,\n\t\n\t    \tisAnimationObjectGroup: true,\n\t\n\t    \tadd: function( var_args ) {\n\t\n\t    \t\tvar objects = this._objects,\n\t    \t\t\tnObjects = objects.length,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tindicesByUUID = this._indicesByUUID,\n\t    \t\t\tpaths = this._paths,\n\t    \t\t\tparsedPaths = this._parsedPaths,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = bindings.length;\n\t\n\t    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = arguments[ i ],\n\t    \t\t\t\tuuid = object.uuid,\n\t    \t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t    \t\t\tif ( index === undefined ) {\n\t\n\t    \t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\n\t    \t\t\t\tindex = nObjects ++;\n\t    \t\t\t\tindicesByUUID[ uuid ] = index;\n\t    \t\t\t\tobjects.push( object );\n\t\n\t    \t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\tbindings[ j ].push(\n\t    \t\t\t\t\t\t\tnew PropertyBinding(\n\t    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( index < nCachedObjects ) {\n\t\n\t    \t\t\t\tvar knownObject = objects[ index ];\n\t\n\t    \t\t\t\t// move existing object to the ACTIVE region\n\t\n\t    \t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t    \t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\t\n\t    \t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t    \t\t\t\tobjects[ index ] = lastCachedObject;\n\t\n\t    \t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t    \t\t\t\tobjects[ firstActiveIndex ] = object;\n\t\n\t    \t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t    \t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\t\n\t    \t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\n\t    \t\t\t\t\tif ( binding === undefined ) {\n\t\n\t    \t\t\t\t\t\t// since we do not bother to create new bindings\n\t    \t\t\t\t\t\t// for objects that are cached, the binding may\n\t    \t\t\t\t\t\t// or may not exist\n\t\n\t    \t\t\t\t\t\tbinding = new PropertyBinding(\n\t    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( objects[ index ] !== knownObject) {\n\t\n\t    \t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n\t    \t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n\t    \t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\t\n\t    \t\t\t} // else the object is already where we want it to be\n\t\n\t    \t\t} // for arguments\n\t\n\t    \t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t    \t},\n\t\n\t    \tremove: function( var_args ) {\n\t\n\t    \t\tvar objects = this._objects,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tindicesByUUID = this._indicesByUUID,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = bindings.length;\n\t\n\t    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = arguments[ i ],\n\t    \t\t\t\tuuid = object.uuid,\n\t    \t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t    \t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\t\n\t    \t\t\t\t// move existing object into the CACHED region\n\t\n\t    \t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t    \t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\t\n\t    \t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t    \t\t\t\tobjects[ index ] = firstActiveObject;\n\t\n\t    \t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t    \t\t\t\tobjects[ lastCachedIndex ] = object;\n\t\n\t    \t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t    \t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\t\n\t    \t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t    \t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} // for arguments\n\t\n\t    \t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t    \t},\n\t\n\t    \t// remove & forget\n\t    \tuncache: function( var_args ) {\n\t\n\t    \t\tvar objects = this._objects,\n\t    \t\t\tnObjects = objects.length,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tindicesByUUID = this._indicesByUUID,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = bindings.length;\n\t\n\t    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = arguments[ i ],\n\t    \t\t\t\tuuid = object.uuid,\n\t    \t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t    \t\t\tif ( index !== undefined ) {\n\t\n\t    \t\t\t\tdelete indicesByUUID[ uuid ];\n\t\n\t    \t\t\t\tif ( index < nCachedObjects ) {\n\t\n\t    \t\t\t\t\t// object is cached, shrink the CACHED region\n\t\n\t    \t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t    \t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t    \t\t\t\t\t\tlastIndex = -- nObjects,\n\t    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\t\n\t    \t\t\t\t\t// last cached object takes this object's place\n\t    \t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t    \t\t\t\t\tobjects[ index ] = lastCachedObject;\n\t\n\t    \t\t\t\t\t// last object goes to the activated slot and pop\n\t    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t    \t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t    \t\t\t\t\tobjects.pop();\n\t\n\t    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t    \t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t    \t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\t\n\t    \t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t    \t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t    \t\t\t\t\t\tbindingsForPath.pop();\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// object is active, just swap with the last and pop\n\t\n\t    \t\t\t\t\tvar lastIndex = -- nObjects,\n\t    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\t\n\t    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t    \t\t\t\t\tobjects[ index ] = lastObject;\n\t    \t\t\t\t\tobjects.pop();\n\t\n\t    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\t\n\t    \t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t    \t\t\t\t\t\tbindingsForPath.pop();\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} // cached or active\n\t\n\t    \t\t\t} // if object is known\n\t\n\t    \t\t} // for arguments\n\t\n\t    \t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t    \t},\n\t\n\t    \t// Internal interface used by befriended PropertyBinding.Composite:\n\t\n\t    \tsubscribe_: function( path, parsedPath ) {\n\t    \t\t// returns an array of bindings for the given path that is changed\n\t    \t\t// according to the contained objects in the group\n\t\n\t    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t    \t\t\tindex = indicesByPath[ path ],\n\t    \t\t\tbindings = this._bindings;\n\t\n\t    \t\tif ( index !== undefined ) return bindings[ index ];\n\t\n\t    \t\tvar paths = this._paths,\n\t    \t\t\tparsedPaths = this._parsedPaths,\n\t    \t\t\tobjects = this._objects,\n\t    \t\t\tnObjects = objects.length,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tbindingsForPath = new Array( nObjects );\n\t\n\t    \t\tindex = bindings.length;\n\t\n\t    \t\tindicesByPath[ path ] = index;\n\t\n\t    \t\tpaths.push( path );\n\t    \t\tparsedPaths.push( parsedPath );\n\t    \t\tbindings.push( bindingsForPath );\n\t\n\t    \t\tfor ( var i = nCachedObjects,\n\t    \t\t\t\tn = objects.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = objects[ i ];\n\t\n\t    \t\t\tbindingsForPath[ i ] =\n\t    \t\t\t\t\tnew PropertyBinding( object, path, parsedPath );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn bindingsForPath;\n\t\n\t    \t},\n\t\n\t    \tunsubscribe_: function( path ) {\n\t    \t\t// tells the group to forget about a property path and no longer\n\t    \t\t// update the array previously obtained with 'subscribe_'\n\t\n\t    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t    \t\t\tindex = indicesByPath[ path ];\n\t\n\t    \t\tif ( index !== undefined ) {\n\t\n\t    \t\t\tvar paths = this._paths,\n\t    \t\t\t\tparsedPaths = this._parsedPaths,\n\t    \t\t\t\tbindings = this._bindings,\n\t    \t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t    \t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t    \t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\t\n\t    \t\t\tindicesByPath[ lastBindingsPath ] = index;\n\t\n\t    \t\t\tbindings[ index ] = lastBindings;\n\t    \t\t\tbindings.pop();\n\t\n\t    \t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t    \t\t\tparsedPaths.pop();\n\t\n\t    \t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t    \t\t\tpaths.pop();\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * Action provided by AnimationMixer for scheduling clip playback on specific\n\t     * objects.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     *\n\t     */\n\t\n\t    function AnimationAction( mixer, clip, localRoot ) {\n\t\n\t    \tthis._mixer = mixer;\n\t    \tthis._clip = clip;\n\t    \tthis._localRoot = localRoot || null;\n\t\n\t    \tvar tracks = clip.tracks,\n\t    \t\tnTracks = tracks.length,\n\t    \t\tinterpolants = new Array( nTracks );\n\t\n\t    \tvar interpolantSettings = {\n\t    \t\t\tendingStart: \tZeroCurvatureEnding,\n\t    \t\t\tendingEnd:\t\tZeroCurvatureEnding\n\t    \t};\n\t\n\t    \tfor ( var i = 0; i !== nTracks; ++ i ) {\n\t\n\t    \t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t    \t\tinterpolants[ i ] = interpolant;\n\t    \t\tinterpolant.settings = interpolantSettings;\n\t\n\t    \t}\n\t\n\t    \tthis._interpolantSettings = interpolantSettings;\n\t\n\t    \tthis._interpolants = interpolants;\t// bound by the mixer\n\t\n\t    \t// inside: PropertyMixer (managed by the mixer)\n\t    \tthis._propertyBindings = new Array( nTracks );\n\t\n\t    \tthis._cacheIndex = null;\t\t\t// for the memory manager\n\t    \tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\t\n\t    \tthis._timeScaleInterpolant = null;\n\t    \tthis._weightInterpolant = null;\n\t\n\t    \tthis.loop = LoopRepeat;\n\t    \tthis._loopCount = -1;\n\t\n\t    \t// global mixer time when the action is to be started\n\t    \t// it's set back to 'null' upon start of the action\n\t    \tthis._startTime = null;\n\t\n\t    \t// scaled local time of the action\n\t    \t// gets clamped or wrapped to 0..clip.duration according to loop\n\t    \tthis.time = 0;\n\t\n\t    \tthis.timeScale = 1;\n\t    \tthis._effectiveTimeScale = 1;\n\t\n\t    \tthis.weight = 1;\n\t    \tthis._effectiveWeight = 1;\n\t\n\t    \tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\t\n\t    \tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n\t    \tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\t\n\t    \tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\t\n\t    \tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\t    \tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\t\n\t    };\n\t\n\t    AnimationAction.prototype = {\n\t\n\t    \tconstructor: AnimationAction,\n\t\n\t    \t// State & Scheduling\n\t\n\t    \tplay: function() {\n\t\n\t    \t\tthis._mixer._activateAction( this );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tstop: function() {\n\t\n\t    \t\tthis._mixer._deactivateAction( this );\n\t\n\t    \t\treturn this.reset();\n\t\n\t    \t},\n\t\n\t    \treset: function() {\n\t\n\t    \t\tthis.paused = false;\n\t    \t\tthis.enabled = true;\n\t\n\t    \t\tthis.time = 0;\t\t\t// restart clip\n\t    \t\tthis._loopCount = -1;\t// forget previous loops\n\t    \t\tthis._startTime = null;\t// forget scheduling\n\t\n\t    \t\treturn this.stopFading().stopWarping();\n\t\n\t    \t},\n\t\n\t    \tisRunning: function() {\n\t\n\t    \t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t    \t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\t\n\t    \t},\n\t\n\t    \t// return true when play has been called\n\t    \tisScheduled: function() {\n\t\n\t    \t\treturn this._mixer._isActiveAction( this );\n\t\n\t    \t},\n\t\n\t    \tstartAt: function( time ) {\n\t\n\t    \t\tthis._startTime = time;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetLoop: function( mode, repetitions ) {\n\t\n\t    \t\tthis.loop = mode;\n\t    \t\tthis.repetitions = repetitions;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// Weight\n\t\n\t    \t// set the weight stopping any scheduled fading\n\t    \t// although .enabled = false yields an effective weight of zero, this\n\t    \t// method does *not* change .enabled, because it would be confusing\n\t    \tsetEffectiveWeight: function( weight ) {\n\t\n\t    \t\tthis.weight = weight;\n\t\n\t    \t\t// note: same logic as when updated at runtime\n\t    \t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\n\t    \t\treturn this.stopFading();\n\t\n\t    \t},\n\t\n\t    \t// return the weight considering fading and .enabled\n\t    \tgetEffectiveWeight: function() {\n\t\n\t    \t\treturn this._effectiveWeight;\n\t\n\t    \t},\n\t\n\t    \tfadeIn: function( duration ) {\n\t\n\t    \t\treturn this._scheduleFading( duration, 0, 1 );\n\t\n\t    \t},\n\t\n\t    \tfadeOut: function( duration ) {\n\t\n\t    \t\treturn this._scheduleFading( duration, 1, 0 );\n\t\n\t    \t},\n\t\n\t    \tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\t\n\t    \t\tfadeOutAction.fadeOut( duration );\n\t    \t\tthis.fadeIn( duration );\n\t\n\t    \t\tif( warp ) {\n\t\n\t    \t\t\tvar fadeInDuration = this._clip.duration,\n\t    \t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\n\t    \t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t    \t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\n\t    \t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t    \t\t\tthis.warp( endStartRatio, 1.0, duration );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\t\n\t    \t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\t\n\t    \t},\n\t\n\t    \tstopFading: function() {\n\t\n\t    \t\tvar weightInterpolant = this._weightInterpolant;\n\t\n\t    \t\tif ( weightInterpolant !== null ) {\n\t\n\t    \t\t\tthis._weightInterpolant = null;\n\t    \t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// Time Scale Control\n\t\n\t    \t// set the weight stopping any scheduled warping\n\t    \t// although .paused = true yields an effective time scale of zero, this\n\t    \t// method does *not* change .paused, because it would be confusing\n\t    \tsetEffectiveTimeScale: function( timeScale ) {\n\t\n\t    \t\tthis.timeScale = timeScale;\n\t    \t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\t\n\t    \t\treturn this.stopWarping();\n\t\n\t    \t},\n\t\n\t    \t// return the time scale considering warping and .paused\n\t    \tgetEffectiveTimeScale: function() {\n\t\n\t    \t\treturn this._effectiveTimeScale;\n\t\n\t    \t},\n\t\n\t    \tsetDuration: function( duration ) {\n\t\n\t    \t\tthis.timeScale = this._clip.duration / duration;\n\t\n\t    \t\treturn this.stopWarping();\n\t\n\t    \t},\n\t\n\t    \tsyncWith: function( action ) {\n\t\n\t    \t\tthis.time = action.time;\n\t    \t\tthis.timeScale = action.timeScale;\n\t\n\t    \t\treturn this.stopWarping();\n\t\n\t    \t},\n\t\n\t    \thalt: function( duration ) {\n\t\n\t    \t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\t\n\t    \t},\n\t\n\t    \twarp: function( startTimeScale, endTimeScale, duration ) {\n\t\n\t    \t\tvar mixer = this._mixer, now = mixer.time,\n\t    \t\t\tinterpolant = this._timeScaleInterpolant,\n\t\n\t    \t\t\ttimeScale = this.timeScale;\n\t\n\t    \t\tif ( interpolant === null ) {\n\t\n\t    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t    \t\t\tthis._timeScaleInterpolant = interpolant;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar times = interpolant.parameterPositions,\n\t    \t\t\tvalues = interpolant.sampleValues;\n\t\n\t    \t\ttimes[ 0 ] = now;\n\t    \t\ttimes[ 1 ] = now + duration;\n\t\n\t    \t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t    \t\tvalues[ 1 ] = endTimeScale / timeScale;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tstopWarping: function() {\n\t\n\t    \t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\t\n\t    \t\tif ( timeScaleInterpolant !== null ) {\n\t\n\t    \t\t\tthis._timeScaleInterpolant = null;\n\t    \t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// Object Accessors\n\t\n\t    \tgetMixer: function() {\n\t\n\t    \t\treturn this._mixer;\n\t\n\t    \t},\n\t\n\t    \tgetClip: function() {\n\t\n\t    \t\treturn this._clip;\n\t\n\t    \t},\n\t\n\t    \tgetRoot: function() {\n\t\n\t    \t\treturn this._localRoot || this._mixer._root;\n\t\n\t    \t},\n\t\n\t    \t// Interna\n\t\n\t    \t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n\t    \t\t// called by the mixer\n\t\n\t    \t\tvar startTime = this._startTime;\n\t\n\t    \t\tif ( startTime !== null ) {\n\t\n\t    \t\t\t// check for scheduled start of action\n\t\n\t    \t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t    \t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\t\n\t    \t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// start\n\t\n\t    \t\t\tthis._startTime = null; // unschedule\n\t    \t\t\tdeltaTime = timeDirection * timeRunning;\n\t\n\t    \t\t}\n\t\n\t    \t\t// apply time scale and advance time\n\t\n\t    \t\tdeltaTime *= this._updateTimeScale( time );\n\t    \t\tvar clipTime = this._updateTime( deltaTime );\n\t\n\t    \t\t// note: _updateTime may disable the action resulting in\n\t    \t\t// an effective weight of 0\n\t\n\t    \t\tvar weight = this._updateWeight( time );\n\t\n\t    \t\tif ( weight > 0 ) {\n\t\n\t    \t\t\tvar interpolants = this._interpolants;\n\t    \t\t\tvar propertyMixers = this._propertyBindings;\n\t\n\t    \t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\t\n\t    \t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t    \t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_updateWeight: function( time ) {\n\t\n\t    \t\tvar weight = 0;\n\t\n\t    \t\tif ( this.enabled ) {\n\t\n\t    \t\t\tweight = this.weight;\n\t    \t\t\tvar interpolant = this._weightInterpolant;\n\t\n\t    \t\t\tif ( interpolant !== null ) {\n\t\n\t    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\t\n\t    \t\t\t\tweight *= interpolantValue;\n\t\n\t    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\t\n\t    \t\t\t\t\tthis.stopFading();\n\t\n\t    \t\t\t\t\tif ( interpolantValue === 0 ) {\n\t\n\t    \t\t\t\t\t\t// faded out, disable\n\t    \t\t\t\t\t\tthis.enabled = false;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._effectiveWeight = weight;\n\t    \t\treturn weight;\n\t\n\t    \t},\n\t\n\t    \t_updateTimeScale: function( time ) {\n\t\n\t    \t\tvar timeScale = 0;\n\t\n\t    \t\tif ( ! this.paused ) {\n\t\n\t    \t\t\ttimeScale = this.timeScale;\n\t\n\t    \t\t\tvar interpolant = this._timeScaleInterpolant;\n\t\n\t    \t\t\tif ( interpolant !== null ) {\n\t\n\t    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\t\n\t    \t\t\t\ttimeScale *= interpolantValue;\n\t\n\t    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\t\n\t    \t\t\t\t\tthis.stopWarping();\n\t\n\t    \t\t\t\t\tif ( timeScale === 0 ) {\n\t\n\t    \t\t\t\t\t\t// motion has halted, pause\n\t    \t\t\t\t\t\tthis.paused = true;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t// warp done - apply final time scale\n\t    \t\t\t\t\t\tthis.timeScale = timeScale;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._effectiveTimeScale = timeScale;\n\t    \t\treturn timeScale;\n\t\n\t    \t},\n\t\n\t    \t_updateTime: function( deltaTime ) {\n\t\n\t    \t\tvar time = this.time + deltaTime;\n\t\n\t    \t\tif ( deltaTime === 0 ) return time;\n\t\n\t    \t\tvar duration = this._clip.duration,\n\t\n\t    \t\t\tloop = this.loop,\n\t    \t\t\tloopCount = this._loopCount;\n\t\n\t    \t\tif ( loop === LoopOnce ) {\n\t\n\t    \t\t\tif ( loopCount === -1 ) {\n\t    \t\t\t\t// just started\n\t\n\t    \t\t\t\tthis.loopCount = 0;\n\t    \t\t\t\tthis._setEndings( true, true, false );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\thandle_stop: {\n\t\n\t    \t\t\t\tif ( time >= duration ) {\n\t\n\t    \t\t\t\t\ttime = duration;\n\t\n\t    \t\t\t\t} else if ( time < 0 ) {\n\t\n\t    \t\t\t\t\ttime = 0;\n\t\n\t    \t\t\t\t} else break handle_stop;\n\t\n\t    \t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t    \t\t\t\telse this.enabled = false;\n\t\n\t    \t\t\t\tthis._mixer.dispatchEvent( {\n\t    \t\t\t\t\ttype: 'finished', action: this,\n\t    \t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t    \t\t\t\t} );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else { // repetitive Repeat or PingPong\n\t\n\t    \t\t\tvar pingPong = ( loop === LoopPingPong );\n\t\n\t    \t\t\tif ( loopCount === -1 ) {\n\t    \t\t\t\t// just started\n\t\n\t    \t\t\t\tif ( deltaTime >= 0 ) {\n\t\n\t    \t\t\t\t\tloopCount = 0;\n\t\n\t    \t\t\t\t\tthis._setEndings(\n\t    \t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// when looping in reverse direction, the initial\n\t    \t\t\t\t\t// transition through zero counts as a repetition,\n\t    \t\t\t\t\t// so leave loopCount at -1\n\t\n\t    \t\t\t\t\tthis._setEndings(\n\t    \t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( time >= duration || time < 0 ) {\n\t    \t\t\t\t// wrap around\n\t\n\t    \t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t    \t\t\t\ttime -= duration * loopDelta;\n\t\n\t    \t\t\t\tloopCount += Math.abs( loopDelta );\n\t\n\t    \t\t\t\tvar pending = this.repetitions - loopCount;\n\t\n\t    \t\t\t\tif ( pending < 0 ) {\n\t    \t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\n\t    \t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t    \t\t\t\t\telse this.enabled = false;\n\t\n\t    \t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\n\t    \t\t\t\t\tthis._mixer.dispatchEvent( {\n\t    \t\t\t\t\t\ttype: 'finished', action: this,\n\t    \t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t} else {\n\t    \t\t\t\t\t// keep running\n\t\n\t    \t\t\t\t\tif ( pending === 0 ) {\n\t    \t\t\t\t\t\t// entering the last round\n\t\n\t    \t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t    \t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tthis._loopCount = loopCount;\n\t\n\t    \t\t\t\t\tthis._mixer.dispatchEvent( {\n\t    \t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\t    \t\t\t\t// invert time for the \"pong round\"\n\t\n\t    \t\t\t\tthis.time = time;\n\t    \t\t\t\treturn duration - time;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.time = time;\n\t    \t\treturn time;\n\t\n\t    \t},\n\t\n\t    \t_setEndings: function( atStart, atEnd, pingPong ) {\n\t\n\t    \t\tvar settings = this._interpolantSettings;\n\t\n\t    \t\tif ( pingPong ) {\n\t\n\t    \t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n\t    \t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\n\t    \t\t\tif ( atStart ) {\n\t\n\t    \t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n\t    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( atEnd ) {\n\t\n\t    \t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n\t    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_scheduleFading: function( duration, weightNow, weightThen ) {\n\t\n\t    \t\tvar mixer = this._mixer, now = mixer.time,\n\t    \t\t\tinterpolant = this._weightInterpolant;\n\t\n\t    \t\tif ( interpolant === null ) {\n\t\n\t    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t    \t\t\tthis._weightInterpolant = interpolant;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar times = interpolant.parameterPositions,\n\t    \t\t\tvalues = interpolant.sampleValues;\n\t\n\t    \t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t    \t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * Player for AnimationClips.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function AnimationMixer( root ) {\n\t\n\t    \tthis._root = root;\n\t    \tthis._initMemoryManager();\n\t    \tthis._accuIndex = 0;\n\t\n\t    \tthis.time = 0;\n\t\n\t    \tthis.timeScale = 1.0;\n\t\n\t    }\n\t\n\t    Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {\n\t\n\t    \t// return an action for a clip optionally using a custom root target\n\t    \t// object (this method allocates a lot of dynamic memory in case a\n\t    \t// previously unknown clip/root combination is specified)\n\t    \tclipAction: function( clip, optionalRoot ) {\n\t\n\t    \t\tvar root = optionalRoot || this._root,\n\t    \t\t\trootUuid = root.uuid,\n\t\n\t    \t\t\tclipObject = typeof clip === 'string' ?\n\t    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\t\n\t    \t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\t\n\t    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t    \t\t\tprototypeAction = null;\n\t\n\t    \t\tif ( actionsForClip !== undefined ) {\n\t\n\t    \t\t\tvar existingAction =\n\t    \t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\t\n\t    \t\t\tif ( existingAction !== undefined ) {\n\t\n\t    \t\t\t\treturn existingAction;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// we know the clip, so we don't have to parse all\n\t    \t\t\t// the bindings again but can just copy\n\t    \t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\t\n\t    \t\t\t// also, take the clip from the prototype action\n\t    \t\t\tif ( clipObject === null )\n\t    \t\t\t\tclipObject = prototypeAction._clip;\n\t\n\t    \t\t}\n\t\n\t    \t\t// clip must be known when specified via string\n\t    \t\tif ( clipObject === null ) return null;\n\t\n\t    \t\t// allocate all resources required to run it\n\t    \t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\t\n\t    \t\tthis._bindAction( newAction, prototypeAction );\n\t\n\t    \t\t// and make the action known to the memory manager\n\t    \t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\t\n\t    \t\treturn newAction;\n\t\n\t    \t},\n\t\n\t    \t// get an existing action\n\t    \texistingAction: function( clip, optionalRoot ) {\n\t\n\t    \t\tvar root = optionalRoot || this._root,\n\t    \t\t\trootUuid = root.uuid,\n\t\n\t    \t\t\tclipObject = typeof clip === 'string' ?\n\t    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\t\n\t    \t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\n\t    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\t\n\t    \t\tif ( actionsForClip !== undefined ) {\n\t\n\t    \t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t},\n\t\n\t    \t// deactivates all previously scheduled actions\n\t    \tstopAllAction: function() {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tnActions = this._nActiveActions,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = this._nActiveBindings;\n\t\n\t    \t\tthis._nActiveActions = 0;\n\t    \t\tthis._nActiveBindings = 0;\n\t\n\t    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\t\n\t    \t\t\tactions[ i ].reset();\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].useCount = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// advance the time and update apply the animation\n\t    \tupdate: function( deltaTime ) {\n\t\n\t    \t\tdeltaTime *= this.timeScale;\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tnActions = this._nActiveActions,\n\t\n\t    \t\t\ttime = this.time += deltaTime,\n\t    \t\t\ttimeDirection = Math.sign( deltaTime ),\n\t\n\t    \t\t\taccuIndex = this._accuIndex ^= 1;\n\t\n\t    \t\t// run active actions\n\t\n\t    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\t\n\t    \t\t\tvar action = actions[ i ];\n\t\n\t    \t\t\tif ( action.enabled ) {\n\t\n\t    \t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// update scene graph\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tnBindings = this._nActiveBindings;\n\t\n\t    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].apply( accuIndex );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// return this mixer's root target object\n\t    \tgetRoot: function() {\n\t\n\t    \t\treturn this._root;\n\t\n\t    \t},\n\t\n\t    \t// free all resources specific to a particular clip\n\t    \tuncacheClip: function( clip ) {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tclipUuid = clip.uuid,\n\t    \t\t\tactionsByClip = this._actionsByClip,\n\t    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\t\n\t    \t\tif ( actionsForClip !== undefined ) {\n\t\n\t    \t\t\t// note: just calling _removeInactiveAction would mess up the\n\t    \t\t\t// iteration state and also require updating the state we can\n\t    \t\t\t// just throw away\n\t\n\t    \t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\t\n\t    \t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar action = actionsToRemove[ i ];\n\t\n\t    \t\t\t\tthis._deactivateAction( action );\n\t\n\t    \t\t\t\tvar cacheIndex = action._cacheIndex,\n\t    \t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\t\n\t    \t\t\t\taction._cacheIndex = null;\n\t    \t\t\t\taction._byClipCacheIndex = null;\n\t\n\t    \t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t    \t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t    \t\t\t\tactions.pop();\n\t\n\t    \t\t\t\tthis._removeInactiveBindingsForAction( action );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tdelete actionsByClip[ clipUuid ];\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// free all resources specific to a particular root target object\n\t    \tuncacheRoot: function( root ) {\n\t\n\t    \t\tvar rootUuid = root.uuid,\n\t    \t\t\tactionsByClip = this._actionsByClip;\n\t\n\t    \t\tfor ( var clipUuid in actionsByClip ) {\n\t\n\t    \t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t    \t\t\t\taction = actionByRoot[ rootUuid ];\n\t\n\t    \t\t\tif ( action !== undefined ) {\n\t\n\t    \t\t\t\tthis._deactivateAction( action );\n\t    \t\t\t\tthis._removeInactiveAction( action );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\t\n\t    \t\tif ( bindingByName !== undefined ) {\n\t\n\t    \t\t\tfor ( var trackName in bindingByName ) {\n\t\n\t    \t\t\t\tvar binding = bindingByName[ trackName ];\n\t    \t\t\t\tbinding.restoreOriginalState();\n\t    \t\t\t\tthis._removeInactiveBinding( binding );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// remove a targeted clip from the cache\n\t    \tuncacheAction: function( clip, optionalRoot ) {\n\t\n\t    \t\tvar action = this.existingAction( clip, optionalRoot );\n\t\n\t    \t\tif ( action !== null ) {\n\t\n\t    \t\t\tthis._deactivateAction( action );\n\t    \t\t\tthis._removeInactiveAction( action );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    // Implementation details:\n\t\n\t    Object.assign( AnimationMixer.prototype, {\n\t\n\t    \t_bindAction: function( action, prototypeAction ) {\n\t\n\t    \t\tvar root = action._localRoot || this._root,\n\t    \t\t\ttracks = action._clip.tracks,\n\t    \t\t\tnTracks = tracks.length,\n\t    \t\t\tbindings = action._propertyBindings,\n\t    \t\t\tinterpolants = action._interpolants,\n\t    \t\t\trootUuid = root.uuid,\n\t    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\t\n\t    \t\tif ( bindingsByName === undefined ) {\n\t\n\t    \t\t\tbindingsByName = {};\n\t    \t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\t\n\t    \t\t\tvar track = tracks[ i ],\n\t    \t\t\t\ttrackName = track.name,\n\t    \t\t\t\tbinding = bindingsByName[ trackName ];\n\t\n\t    \t\t\tif ( binding !== undefined ) {\n\t\n\t    \t\t\t\tbindings[ i ] = binding;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tbinding = bindings[ i ];\n\t\n\t    \t\t\t\tif ( binding !== undefined ) {\n\t\n\t    \t\t\t\t\t// existing binding, make sure the cache knows\n\t\n\t    \t\t\t\t\tif ( binding._cacheIndex === null ) {\n\t\n\t    \t\t\t\t\t\t++ binding.referenceCount;\n\t    \t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tcontinue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar path = prototypeAction && prototypeAction.\n\t    \t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\t\n\t    \t\t\t\tbinding = new PropertyMixer(\n\t    \t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t    \t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\t\n\t    \t\t\t\t++ binding.referenceCount;\n\t    \t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\t\n\t    \t\t\t\tbindings[ i ] = binding;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_activateAction: function( action ) {\n\t\n\t    \t\tif ( ! this._isActiveAction( action ) ) {\n\t\n\t    \t\t\tif ( action._cacheIndex === null ) {\n\t\n\t    \t\t\t\t// this action has been forgotten by the cache, but the user\n\t    \t\t\t\t// appears to be still using it -> rebind\n\t\n\t    \t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t    \t\t\t\t\tclipUuid = action._clip.uuid,\n\t    \t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\t\n\t    \t\t\t\tthis._bindAction( action,\n\t    \t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\t\n\t    \t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar bindings = action._propertyBindings;\n\t\n\t    \t\t\t// increment reference counts / sort out state\n\t    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar binding = bindings[ i ];\n\t\n\t    \t\t\t\tif ( binding.useCount ++ === 0 ) {\n\t\n\t    \t\t\t\t\tthis._lendBinding( binding );\n\t    \t\t\t\t\tbinding.saveOriginalState();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis._lendAction( action );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_deactivateAction: function( action ) {\n\t\n\t    \t\tif ( this._isActiveAction( action ) ) {\n\t\n\t    \t\t\tvar bindings = action._propertyBindings;\n\t\n\t    \t\t\t// decrement reference counts / sort out state\n\t    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar binding = bindings[ i ];\n\t\n\t    \t\t\t\tif ( -- binding.useCount === 0 ) {\n\t\n\t    \t\t\t\t\tbinding.restoreOriginalState();\n\t    \t\t\t\t\tthis._takeBackBinding( binding );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis._takeBackAction( action );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// Memory manager\n\t\n\t    \t_initMemoryManager: function() {\n\t\n\t    \t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t    \t\tthis._nActiveActions = 0;\n\t\n\t    \t\tthis._actionsByClip = {};\n\t    \t\t// inside:\n\t    \t\t// {\n\t    \t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n\t    \t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n\t    \t\t// }\n\t\n\t\n\t    \t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t    \t\tthis._nActiveBindings = 0;\n\t\n\t    \t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\t\n\t\n\t    \t\tthis._controlInterpolants = []; // same game as above\n\t    \t\tthis._nActiveControlInterpolants = 0;\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tthis.stats = {\n\t\n\t    \t\t\tactions: {\n\t    \t\t\t\tget total() { return scope._actions.length; },\n\t    \t\t\t\tget inUse() { return scope._nActiveActions; }\n\t    \t\t\t},\n\t    \t\t\tbindings: {\n\t    \t\t\t\tget total() { return scope._bindings.length; },\n\t    \t\t\t\tget inUse() { return scope._nActiveBindings; }\n\t    \t\t\t},\n\t    \t\t\tcontrolInterpolants: {\n\t    \t\t\t\tget total() { return scope._controlInterpolants.length; },\n\t    \t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t},\n\t\n\t    \t// Memory management for AnimationAction objects\n\t\n\t    \t_isActiveAction: function( action ) {\n\t\n\t    \t\tvar index = action._cacheIndex;\n\t    \t\treturn index !== null && index < this._nActiveActions;\n\t\n\t    \t},\n\t\n\t    \t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tactionsByClip = this._actionsByClip,\n\t    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\t\n\t    \t\tif ( actionsForClip === undefined ) {\n\t\n\t    \t\t\tactionsForClip = {\n\t\n\t    \t\t\t\tknownActions: [ action ],\n\t    \t\t\t\tactionByRoot: {}\n\t\n\t    \t\t\t};\n\t\n\t    \t\t\taction._byClipCacheIndex = 0;\n\t\n\t    \t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar knownActions = actionsForClip.knownActions;\n\t\n\t    \t\t\taction._byClipCacheIndex = knownActions.length;\n\t    \t\t\tknownActions.push( action );\n\t\n\t    \t\t}\n\t\n\t    \t\taction._cacheIndex = actions.length;\n\t    \t\tactions.push( action );\n\t\n\t    \t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\t\n\t    \t},\n\t\n\t    \t_removeInactiveAction: function( action ) {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t    \t\t\tcacheIndex = action._cacheIndex;\n\t\n\t    \t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t    \t\tactions[ cacheIndex ] = lastInactiveAction;\n\t    \t\tactions.pop();\n\t\n\t    \t\taction._cacheIndex = null;\n\t\n\t\n\t    \t\tvar clipUuid = action._clip.uuid,\n\t    \t\t\tactionsByClip = this._actionsByClip,\n\t    \t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t    \t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\n\t    \t\t\tlastKnownAction =\n\t    \t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\t\n\t    \t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\n\t    \t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t    \t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t    \t\tknownActionsForClip.pop();\n\t\n\t    \t\taction._byClipCacheIndex = null;\n\t\n\t\n\t    \t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t    \t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\t\n\t    \t\tdelete actionByRoot[ rootUuid ];\n\t\n\t    \t\tif ( knownActionsForClip.length === 0 ) {\n\t\n\t    \t\t\tdelete actionsByClip[ clipUuid ];\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._removeInactiveBindingsForAction( action );\n\t\n\t    \t},\n\t\n\t    \t_removeInactiveBindingsForAction: function( action ) {\n\t\n\t    \t\tvar bindings = action._propertyBindings;\n\t    \t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar binding = bindings[ i ];\n\t\n\t    \t\t\tif ( -- binding.referenceCount === 0 ) {\n\t\n\t    \t\t\t\tthis._removeInactiveBinding( binding );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_lendAction: function( action ) {\n\t\n\t    \t\t// [ active actions |  inactive actions  ]\n\t    \t\t// [  active actions >| inactive actions ]\n\t    \t\t//                 s        a\n\t    \t\t//                  <-swap->\n\t    \t\t//                 a        s\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tprevIndex = action._cacheIndex,\n\t\n\t    \t\t\tlastActiveIndex = this._nActiveActions ++,\n\t\n\t    \t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\t\n\t    \t\taction._cacheIndex = lastActiveIndex;\n\t    \t\tactions[ lastActiveIndex ] = action;\n\t\n\t    \t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t    \t\tactions[ prevIndex ] = firstInactiveAction;\n\t\n\t    \t},\n\t\n\t    \t_takeBackAction: function( action ) {\n\t\n\t    \t\t// [  active actions  | inactive actions ]\n\t    \t\t// [ active actions |< inactive actions  ]\n\t    \t\t//        a        s\n\t    \t\t//         <-swap->\n\t    \t\t//        s        a\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tprevIndex = action._cacheIndex,\n\t\n\t    \t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\t\n\t    \t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\t\n\t    \t\taction._cacheIndex = firstInactiveIndex;\n\t    \t\tactions[ firstInactiveIndex ] = action;\n\t\n\t    \t\tlastActiveAction._cacheIndex = prevIndex;\n\t    \t\tactions[ prevIndex ] = lastActiveAction;\n\t\n\t    \t},\n\t\n\t    \t// Memory management for PropertyMixer objects\n\t\n\t    \t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\t\n\t    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\t\n\t    \t\t\tbindings = this._bindings;\n\t\n\t    \t\tif ( bindingByName === undefined ) {\n\t\n\t    \t\t\tbindingByName = {};\n\t    \t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\t\n\t    \t\t}\n\t\n\t    \t\tbindingByName[ trackName ] = binding;\n\t\n\t    \t\tbinding._cacheIndex = bindings.length;\n\t    \t\tbindings.push( binding );\n\t\n\t    \t},\n\t\n\t    \t_removeInactiveBinding: function( binding ) {\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tpropBinding = binding.binding,\n\t    \t\t\trootUuid = propBinding.rootNode.uuid,\n\t    \t\t\ttrackName = propBinding.path,\n\t    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\t\n\t    \t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t    \t\t\tcacheIndex = binding._cacheIndex;\n\t\n\t    \t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t    \t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t    \t\tbindings.pop();\n\t\n\t    \t\tdelete bindingByName[ trackName ];\n\t\n\t    \t\tremove_empty_map: {\n\t\n\t    \t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\t\n\t    \t\t\tdelete bindingsByRoot[ rootUuid ];\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_lendBinding: function( binding ) {\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tprevIndex = binding._cacheIndex,\n\t\n\t    \t\t\tlastActiveIndex = this._nActiveBindings ++,\n\t\n\t    \t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\t\n\t    \t\tbinding._cacheIndex = lastActiveIndex;\n\t    \t\tbindings[ lastActiveIndex ] = binding;\n\t\n\t    \t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t    \t\tbindings[ prevIndex ] = firstInactiveBinding;\n\t\n\t    \t},\n\t\n\t    \t_takeBackBinding: function( binding ) {\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tprevIndex = binding._cacheIndex,\n\t\n\t    \t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\t\n\t    \t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\t\n\t    \t\tbinding._cacheIndex = firstInactiveIndex;\n\t    \t\tbindings[ firstInactiveIndex ] = binding;\n\t\n\t    \t\tlastActiveBinding._cacheIndex = prevIndex;\n\t    \t\tbindings[ prevIndex ] = lastActiveBinding;\n\t\n\t    \t},\n\t\n\t\n\t    \t// Memory management of Interpolants for weight and time scale\n\t\n\t    \t_lendControlInterpolant: function() {\n\t\n\t    \t\tvar interpolants = this._controlInterpolants,\n\t    \t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t    \t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\t\n\t    \t\tif ( interpolant === undefined ) {\n\t\n\t    \t\t\tinterpolant = new LinearInterpolant(\n\t    \t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t    \t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\t\n\t    \t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t    \t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn interpolant;\n\t\n\t    \t},\n\t\n\t    \t_takeBackControlInterpolant: function( interpolant ) {\n\t\n\t    \t\tvar interpolants = this._controlInterpolants,\n\t    \t\t\tprevIndex = interpolant.__cacheIndex,\n\t\n\t    \t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\t\n\t    \t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\t\n\t    \t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t    \t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\t\n\t    \t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t    \t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\t\n\t    \t},\n\t\n\t    \t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Uniform( value ) {\n\t\n\t    \tif ( typeof value === 'string' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t    \t\tvalue = arguments[ 1 ];\n\t\n\t    \t}\n\t\n\t    \tthis.value = value;\n\t\n\t    \tthis.dynamic = false;\n\t\n\t    }\n\t\n\t    Uniform.prototype = {\n\t\n\t    \tconstructor: Uniform,\n\t\n\t    \tonUpdate: function ( callback ) {\n\t\n\t    \t\tthis.dynamic = true;\n\t    \t\tthis.onUpdateCallback = callback;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InstancedBufferGeometry() {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'InstancedBufferGeometry';\n\t    \tthis.maxInstancedCount = undefined;\n\t\n\t    }\n\t\n\t    InstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;\n\t\n\t    InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\t\n\t    InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\t\n\t    \tthis.groups.push( {\n\t\n\t    \t\tstart: start,\n\t    \t\tcount: count,\n\t    \t\tinstances: instances\n\t\n\t    \t} );\n\t\n\t    };\n\t\n\t    InstancedBufferGeometry.prototype.copy = function ( source ) {\n\t\n\t    \tvar index = source.index;\n\t\n\t    \tif ( index !== null ) {\n\t\n\t    \t\tthis.setIndex( index.clone() );\n\t\n\t    \t}\n\t\n\t    \tvar attributes = source.attributes;\n\t\n\t    \tfor ( var name in attributes ) {\n\t\n\t    \t\tvar attribute = attributes[ name ];\n\t    \t\tthis.addAttribute( name, attribute.clone() );\n\t\n\t    \t}\n\t\n\t    \tvar groups = source.groups;\n\t\n\t    \tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t    \t\tvar group = groups[ i ];\n\t    \t\tthis.addGroup( group.start, group.count, group.instances );\n\t\n\t    \t}\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.data = interleavedBuffer;\n\t    \tthis.itemSize = itemSize;\n\t    \tthis.offset = offset;\n\t\n\t    \tthis.normalized = normalized === true;\n\t\n\t    }\n\t\n\t\n\t    InterleavedBufferAttribute.prototype = {\n\t\n\t    \tconstructor: InterleavedBufferAttribute,\n\t\n\t    \tisInterleavedBufferAttribute: true,\n\t\n\t    \tget count() {\n\t\n\t    \t\treturn this.data.count;\n\t\n\t    \t},\n\t\n\t    \tget array() {\n\t\n\t    \t\treturn this.data.array;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( index, x ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( index, y ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( index, z ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetW: function ( index, w ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetX: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\t\n\t    \t},\n\t\n\t    \tgetY: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\t\n\t    \t},\n\t\n\t    \tgetZ: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\t\n\t    \t},\n\t\n\t    \tgetW: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\t\n\t    \t},\n\t\n\t    \tsetXY: function ( index, x, y ) {\n\t\n\t    \t\tindex = index * this.data.stride + this.offset;\n\t\n\t    \t\tthis.data.array[ index + 0 ] = x;\n\t    \t\tthis.data.array[ index + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZ: function ( index, x, y, z ) {\n\t\n\t    \t\tindex = index * this.data.stride + this.offset;\n\t\n\t    \t\tthis.data.array[ index + 0 ] = x;\n\t    \t\tthis.data.array[ index + 1 ] = y;\n\t    \t\tthis.data.array[ index + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZW: function ( index, x, y, z, w ) {\n\t\n\t    \t\tindex = index * this.data.stride + this.offset;\n\t\n\t    \t\tthis.data.array[ index + 0 ] = x;\n\t    \t\tthis.data.array[ index + 1 ] = y;\n\t    \t\tthis.data.array[ index + 2 ] = z;\n\t    \t\tthis.data.array[ index + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InterleavedBuffer( array, stride ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.array = array;\n\t    \tthis.stride = stride;\n\t    \tthis.count = array !== undefined ? array.length / stride : 0;\n\t\n\t    \tthis.dynamic = false;\n\t    \tthis.updateRange = { offset: 0, count: - 1 };\n\t\n\t    \tthis.version = 0;\n\t\n\t    }\n\t\n\t    InterleavedBuffer.prototype = {\n\t\n\t    \tconstructor: InterleavedBuffer,\n\t\n\t    \tisInterleavedBuffer: true,\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.version ++;\n\t\n\t    \t},\n\t\n\t    \tsetDynamic: function ( value ) {\n\t\n\t    \t\tthis.dynamic = value;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.array = new source.array.constructor( source.array );\n\t    \t\tthis.count = source.count;\n\t    \t\tthis.stride = source.stride;\n\t    \t\tthis.dynamic = source.dynamic;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyAt: function ( index1, attribute, index2 ) {\n\t\n\t    \t\tindex1 *= this.stride;\n\t    \t\tindex2 *= attribute.stride;\n\t\n\t    \t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tset: function ( value, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.array.set( value, offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\t\n\t    \tInterleavedBuffer.call( this, array, stride );\n\t\n\t    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\n\t    }\n\t\n\t    InstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );\n\t    InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;\n\t\n\t    InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\t\n\t    InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\t\n\t    \tInterleavedBuffer.prototype.copy.call( this, source );\n\t\n\t    \tthis.meshPerAttribute = source.meshPerAttribute;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\t\n\t    \tBufferAttribute.call( this, array, itemSize );\n\t\n\t    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\n\t    }\n\t\n\t    InstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\t    InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;\n\t\n\t    InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\t\n\t    InstancedBufferAttribute.prototype.copy = function ( source ) {\n\t\n\t    \tBufferAttribute.prototype.copy.call( this, source );\n\t\n\t    \tthis.meshPerAttribute = source.meshPerAttribute;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author bhouston / http://clara.io/\n\t     * @author stephomi / http://stephaneginier.com/\n\t     */\n\t\n\t    function Raycaster( origin, direction, near, far ) {\n\t\n\t    \tthis.ray = new Ray( origin, direction );\n\t    \t// direction is assumed to be normalized (for accurate distance calculations)\n\t\n\t    \tthis.near = near || 0;\n\t    \tthis.far = far || Infinity;\n\t\n\t    \tthis.params = {\n\t    \t\tMesh: {},\n\t    \t\tLine: {},\n\t    \t\tLOD: {},\n\t    \t\tPoints: { threshold: 1 },\n\t    \t\tSprite: {}\n\t    \t};\n\t\n\t    \tObject.defineProperties( this.params, {\n\t    \t\tPointCloud: {\n\t    \t\t\tget: function () {\n\t    \t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t    \t\t\t\treturn this.Points;\n\t    \t\t\t}\n\t    \t\t}\n\t    \t} );\n\t\n\t    }\n\t\n\t    function ascSort( a, b ) {\n\t\n\t    \treturn a.distance - b.distance;\n\t\n\t    }\n\t\n\t    function intersectObject( object, raycaster, intersects, recursive ) {\n\t\n\t    \tif ( object.visible === false ) return;\n\t\n\t    \tobject.raycast( raycaster, intersects );\n\t\n\t    \tif ( recursive === true ) {\n\t\n\t    \t\tvar children = object.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    //\n\t\n\t    Raycaster.prototype = {\n\t\n\t    \tconstructor: Raycaster,\n\t\n\t    \tlinePrecision: 1,\n\t\n\t    \tset: function ( origin, direction ) {\n\t\n\t    \t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\n\t    \t\tthis.ray.set( origin, direction );\n\t\n\t    \t},\n\t\n\t    \tsetFromCamera: function ( coords, camera ) {\n\t\n\t    \t\tif ( (camera && camera.isPerspectiveCamera) ) {\n\t\n\t    \t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t    \t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\n\t    \t\t} else if ( (camera && camera.isOrthographicCamera) ) {\n\t\n\t    \t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t    \t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tintersectObject: function ( object, recursive ) {\n\t\n\t    \t\tvar intersects = [];\n\t\n\t    \t\tintersectObject( object, this, intersects, recursive );\n\t\n\t    \t\tintersects.sort( ascSort );\n\t\n\t    \t\treturn intersects;\n\t\n\t    \t},\n\t\n\t    \tintersectObjects: function ( objects, recursive ) {\n\t\n\t    \t\tvar intersects = [];\n\t\n\t    \t\tif ( Array.isArray( objects ) === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t    \t\t\treturn intersects;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\t\n\t    \t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\t\n\t    \t\t}\n\t\n\t    \t\tintersects.sort( ascSort );\n\t\n\t    \t\treturn intersects;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Clock( autoStart ) {\n\t\n\t    \tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\t\n\t    \tthis.startTime = 0;\n\t    \tthis.oldTime = 0;\n\t    \tthis.elapsedTime = 0;\n\t\n\t    \tthis.running = false;\n\t\n\t    }\n\t\n\t    Clock.prototype = {\n\t\n\t    \tconstructor: Clock,\n\t\n\t    \tstart: function () {\n\t\n\t    \t\tthis.startTime = ( performance || Date ).now();\n\t\n\t    \t\tthis.oldTime = this.startTime;\n\t    \t\tthis.running = true;\n\t\n\t    \t},\n\t\n\t    \tstop: function () {\n\t\n\t    \t\tthis.getElapsedTime();\n\t    \t\tthis.running = false;\n\t\n\t    \t},\n\t\n\t    \tgetElapsedTime: function () {\n\t\n\t    \t\tthis.getDelta();\n\t    \t\treturn this.elapsedTime;\n\t\n\t    \t},\n\t\n\t    \tgetDelta: function () {\n\t\n\t    \t\tvar diff = 0;\n\t\n\t    \t\tif ( this.autoStart && ! this.running ) {\n\t\n\t    \t\t\tthis.start();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.running ) {\n\t\n\t    \t\t\tvar newTime = ( performance || Date ).now();\n\t\n\t    \t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t    \t\t\tthis.oldTime = newTime;\n\t\n\t    \t\t\tthis.elapsedTime += diff;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn diff;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * Spline from Tween.js, slightly optimized (and trashed)\n\t     * http://sole.github.com/tween.js/examples/05_spline.html\n\t     *\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Spline( points ) {\n\t\n\t    \tthis.points = points;\n\t\n\t    \tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n\t    \tpoint, intPoint, weight, w2, w3,\n\t    \tpa, pb, pc, pd;\n\t\n\t    \tthis.initFromArray = function ( a ) {\n\t\n\t    \t\tthis.points = [];\n\t\n\t    \t\tfor ( var i = 0; i < a.length; i ++ ) {\n\t\n\t    \t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tthis.getPoint = function ( k ) {\n\t\n\t    \t\tpoint = ( this.points.length - 1 ) * k;\n\t    \t\tintPoint = Math.floor( point );\n\t    \t\tweight = point - intPoint;\n\t\n\t    \t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t    \t\tc[ 1 ] = intPoint;\n\t    \t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n\t    \t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\t\n\t    \t\tpa = this.points[ c[ 0 ] ];\n\t    \t\tpb = this.points[ c[ 1 ] ];\n\t    \t\tpc = this.points[ c[ 2 ] ];\n\t    \t\tpd = this.points[ c[ 3 ] ];\n\t\n\t    \t\tw2 = weight * weight;\n\t    \t\tw3 = weight * w2;\n\t\n\t    \t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n\t    \t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n\t    \t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\t\n\t    \t\treturn v3;\n\t\n\t    \t};\n\t\n\t    \tthis.getControlPointsArray = function () {\n\t\n\t    \t\tvar i, p, l = this.points.length,\n\t    \t\t\tcoords = [];\n\t\n\t    \t\tfor ( i = 0; i < l; i ++ ) {\n\t\n\t    \t\t\tp = this.points[ i ];\n\t    \t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn coords;\n\t\n\t    \t};\n\t\n\t    \t// approximate length by summing linear segments\n\t\n\t    \tthis.getLength = function ( nSubDivisions ) {\n\t\n\t    \t\tvar i, index, nSamples, position,\n\t    \t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n\t    \t\t\toldPosition = new Vector3(),\n\t    \t\t\ttmpVec = new Vector3(),\n\t    \t\t\tchunkLengths = [],\n\t    \t\t\ttotalLength = 0;\n\t\n\t    \t\t// first point has 0 length\n\t\n\t    \t\tchunkLengths[ 0 ] = 0;\n\t\n\t    \t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\t\n\t    \t\tnSamples = this.points.length * nSubDivisions;\n\t\n\t    \t\toldPosition.copy( this.points[ 0 ] );\n\t\n\t    \t\tfor ( i = 1; i < nSamples; i ++ ) {\n\t\n\t    \t\t\tindex = i / nSamples;\n\t\n\t    \t\t\tposition = this.getPoint( index );\n\t    \t\t\ttmpVec.copy( position );\n\t\n\t    \t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\t\n\t    \t\t\toldPosition.copy( position );\n\t\n\t    \t\t\tpoint = ( this.points.length - 1 ) * index;\n\t    \t\t\tintPoint = Math.floor( point );\n\t\n\t    \t\t\tif ( intPoint !== oldIntPoint ) {\n\t\n\t    \t\t\t\tchunkLengths[ intPoint ] = totalLength;\n\t    \t\t\t\toldIntPoint = intPoint;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// last point ends with total length\n\t\n\t    \t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\t\n\t    \t\treturn { chunks: chunkLengths, total: totalLength };\n\t\n\t    \t};\n\t\n\t    \tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\t\n\t    \t\tvar i, j,\n\t    \t\t\tindex, indexCurrent, indexNext,\n\t    \t\t\trealDistance,\n\t    \t\t\tsampling, position,\n\t    \t\t\tnewpoints = [],\n\t    \t\t\ttmpVec = new Vector3(),\n\t    \t\t\tsl = this.getLength();\n\t\n\t    \t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\t\n\t    \t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\t\n\t    \t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n\t    \t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\t\n\t    \t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\t\n\t    \t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\t\n\t    \t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n\t    \t\t\tindexNext = i / ( this.points.length - 1 );\n\t\n\t    \t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\t\n\t    \t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\t\n\t    \t\t\t\tposition = this.getPoint( index );\n\t    \t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.points = newpoints;\n\t\n\t    \t};\n\t\n\t    \t// Catmull-Rom\n\t\n\t    \tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\t\n\t    \t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t    \t\t\tv1 = ( p3 - p1 ) * 0.5;\n\t\n\t    \t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t     *\n\t     * The poles (phi) are at the positive and negative y axis.\n\t     * The equator starts at positive z.\n\t     */\n\t\n\t    function Spherical( radius, phi, theta ) {\n\t\n\t    \tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t    \tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\t    \tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\t\n\t    \treturn this;\n\t\n\t    }\n\t\n\t    Spherical.prototype = {\n\t\n\t    \tconstructor: Spherical,\n\t\n\t    \tset: function ( radius, phi, theta ) {\n\t\n\t    \t\tthis.radius = radius;\n\t    \t\tthis.phi = phi;\n\t    \t\tthis.theta = theta;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( other ) {\n\t\n\t    \t\tthis.radius.copy( other.radius );\n\t    \t\tthis.phi.copy( other.phi );\n\t    \t\tthis.theta.copy( other.theta );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// restrict phi to be betwee EPS and PI-EPS\n\t    \tmakeSafe: function() {\n\t\n\t    \t\tvar EPS = 0.000001;\n\t    \t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromVector3: function( vec3 ) {\n\t\n\t    \t\tthis.radius = vec3.length();\n\t\n\t    \t\tif ( this.radius === 0 ) {\n\t\n\t    \t\t\tthis.theta = 0;\n\t    \t\t\tthis.phi = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t    \t\t\tthis.phi = Math.acos( exports.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    };\n\t\n\t    /**\r\n\t     * @author alteredq / http://alteredqualia.com/\r\n\t     */\r\n\t\r\n\t    function MorphBlendMesh( geometry, material ) {\n\t\r\n\t    \tMesh.call( this, geometry, material );\r\n\t\r\n\t    \tthis.animationsMap = {};\r\n\t    \tthis.animationsList = [];\r\n\t\r\n\t    \t// prepare default animation\r\n\t    \t// (all frames played together in 1 second)\r\n\t\r\n\t    \tvar numFrames = this.geometry.morphTargets.length;\r\n\t\r\n\t    \tvar name = \"__default\";\r\n\t\r\n\t    \tvar startFrame = 0;\r\n\t    \tvar endFrame = numFrames - 1;\r\n\t\r\n\t    \tvar fps = numFrames / 1;\r\n\t\r\n\t    \tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\t    \tthis.setAnimationWeight( name, 1 );\r\n\t\r\n\t    }\r\n\t\r\n\t    MorphBlendMesh.prototype = Object.create( Mesh.prototype );\r\n\t    MorphBlendMesh.prototype.constructor = MorphBlendMesh;\r\n\t\r\n\t    MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\t\r\n\t    \tvar animation = {\r\n\t\r\n\t    \t\tstart: start,\r\n\t    \t\tend: end,\r\n\t\r\n\t    \t\tlength: end - start + 1,\r\n\t\r\n\t    \t\tfps: fps,\r\n\t    \t\tduration: ( end - start ) / fps,\r\n\t\r\n\t    \t\tlastFrame: 0,\r\n\t    \t\tcurrentFrame: 0,\r\n\t\r\n\t    \t\tactive: false,\r\n\t\r\n\t    \t\ttime: 0,\r\n\t    \t\tdirection: 1,\r\n\t    \t\tweight: 1,\r\n\t\r\n\t    \t\tdirectionBackwards: false,\r\n\t    \t\tmirroredLoop: false\r\n\t\r\n\t    \t};\r\n\t\r\n\t    \tthis.animationsMap[ name ] = animation;\r\n\t    \tthis.animationsList.push( animation );\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\t\r\n\t    \tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\t\r\n\t    \tvar firstAnimation, frameRanges = {};\r\n\t\r\n\t    \tvar geometry = this.geometry;\r\n\t\r\n\t    \tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\t\r\n\t    \t\tvar morph = geometry.morphTargets[ i ];\r\n\t    \t\tvar chunks = morph.name.match( pattern );\r\n\t\r\n\t    \t\tif ( chunks && chunks.length > 1 ) {\r\n\t\r\n\t    \t\t\tvar name = chunks[ 1 ];\r\n\t\r\n\t    \t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\t\r\n\t    \t\t\tvar range = frameRanges[ name ];\r\n\t\r\n\t    \t\t\tif ( i < range.start ) range.start = i;\r\n\t    \t\t\tif ( i > range.end ) range.end = i;\r\n\t\r\n\t    \t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \tfor ( var name in frameRanges ) {\r\n\t\r\n\t    \t\tvar range = frameRanges[ name ];\r\n\t    \t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \tthis.firstAnimation = firstAnimation;\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.direction = 1;\r\n\t    \t\tanimation.directionBackwards = false;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.direction = - 1;\r\n\t    \t\tanimation.directionBackwards = true;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.fps = fps;\r\n\t    \t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.duration = duration;\r\n\t    \t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.weight = weight;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.time = time;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\t\r\n\t    \tvar time = 0;\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\ttime = animation.time;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \treturn time;\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\t\r\n\t    \tvar duration = - 1;\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tduration = animation.duration;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \treturn duration;\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.time = 0;\r\n\t    \t\tanimation.active = true;\r\n\t\r\n\t    \t} else {\r\n\t\r\n\t    \t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.active = false;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.update = function ( delta ) {\r\n\t\r\n\t    \tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\t\r\n\t    \t\tvar animation = this.animationsList[ i ];\r\n\t\r\n\t    \t\tif ( ! animation.active ) continue;\r\n\t\r\n\t    \t\tvar frameTime = animation.duration / animation.length;\r\n\t\r\n\t    \t\tanimation.time += animation.direction * delta;\r\n\t\r\n\t    \t\tif ( animation.mirroredLoop ) {\r\n\t\r\n\t    \t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\t\r\n\t    \t\t\t\tanimation.direction *= - 1;\r\n\t\r\n\t    \t\t\t\tif ( animation.time > animation.duration ) {\r\n\t\r\n\t    \t\t\t\t\tanimation.time = animation.duration;\r\n\t    \t\t\t\t\tanimation.directionBackwards = true;\r\n\t\r\n\t    \t\t\t\t}\r\n\t\r\n\t    \t\t\t\tif ( animation.time < 0 ) {\r\n\t\r\n\t    \t\t\t\t\tanimation.time = 0;\r\n\t    \t\t\t\t\tanimation.directionBackwards = false;\r\n\t\r\n\t    \t\t\t\t}\r\n\t\r\n\t    \t\t\t}\r\n\t\r\n\t    \t\t} else {\r\n\t\r\n\t    \t\t\tanimation.time = animation.time % animation.duration;\r\n\t\r\n\t    \t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t\tvar keyframe = animation.start + exports.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t    \t\tvar weight = animation.weight;\r\n\t\r\n\t    \t\tif ( keyframe !== animation.currentFrame ) {\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\t\r\n\t    \t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t    \t\t\tanimation.currentFrame = keyframe;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\t\r\n\t    \t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\t\r\n\t    \t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\t\r\n\t    \t\t} else {\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function ImmediateRenderObject( material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.material = material;\n\t    \tthis.render = function ( renderCallback ) {};\n\t\n\t    }\n\t\n\t    ImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\t    ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\t\n\t    ImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function VertexNormalsHelper( object, size, hex, linewidth ) {\n\t\n\t    \tthis.object = object;\n\t\n\t    \tthis.size = ( size !== undefined ) ? size : 1;\n\t\n\t    \tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\t\n\t    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\t\n\t    \t//\n\t\n\t    \tvar nNormals = 0;\n\t\n\t    \tvar objGeometry = this.object.geometry;\n\t\n\t    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t    \t\tnNormals = objGeometry.faces.length * 3;\n\t\n\t    \t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\t\n\t    \t\tnNormals = objGeometry.attributes.normal.count;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t\n\t    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\t\n\t    \tgeometry.addAttribute( 'position', positions );\n\t\n\t    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\t\n\t    \t//\n\t\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\t    VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\t\n\t    VertexNormalsHelper.prototype.update = ( function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t    \tvar normalMatrix = new Matrix3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t    \t\tthis.object.updateMatrixWorld( true );\n\t\n\t    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\t\n\t    \t\tvar matrixWorld = this.object.matrixWorld;\n\t\n\t    \t\tvar position = this.geometry.attributes.position;\n\t\n\t    \t\t//\n\t\n\t    \t\tvar objGeometry = this.object.geometry;\n\t\n\t    \t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t    \t\t\tvar vertices = objGeometry.vertices;\n\t\n\t    \t\t\tvar faces = objGeometry.faces;\n\t\n\t    \t\t\tvar idx = 0;\n\t\n\t    \t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\t\n\t    \t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\t\n\t    \t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\t\n\t    \t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t    \t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t    \t\t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\t\n\t    \t\t\tvar objPos = objGeometry.attributes.position;\n\t\n\t    \t\t\tvar objNorm = objGeometry.attributes.normal;\n\t\n\t    \t\t\tvar idx = 0;\n\t\n\t    \t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\t\n\t    \t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\t\n\t    \t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\t\n\t    \t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t    \t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t    \t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tposition.needsUpdate = true;\n\t\n\t    \t\treturn this;\n\t\n\t    \t};\n\t\n\t    }() );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function SpotLightHelper( light ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tthis.matrix = light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t\n\t    \tvar positions = [\n\t    \t\t0, 0, 0,   0,   0,   1,\n\t    \t\t0, 0, 0,   1,   0,   1,\n\t    \t\t0, 0, 0, - 1,   0,   1,\n\t    \t\t0, 0, 0,   0,   1,   1,\n\t    \t\t0, 0, 0,   0, - 1,   1\n\t    \t];\n\t\n\t    \tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\t\n\t    \t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t    \t\tvar p2 = ( j / l ) * Math.PI * 2;\n\t\n\t    \t\tpositions.push(\n\t    \t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t    \t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { fog: false } );\n\t\n\t    \tthis.cone = new LineSegments( geometry, material );\n\t    \tthis.add( this.cone );\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    SpotLightHelper.prototype = Object.create( Object3D.prototype );\n\t    SpotLightHelper.prototype.constructor = SpotLightHelper;\n\t\n\t    SpotLightHelper.prototype.dispose = function () {\n\t\n\t    \tthis.cone.geometry.dispose();\n\t    \tthis.cone.material.dispose();\n\t\n\t    };\n\t\n\t    SpotLightHelper.prototype.update = function () {\n\t\n\t    \tvar vector = new Vector3();\n\t    \tvar vector2 = new Vector3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t    \t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\t\n\t    \t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\t\n\t    \t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t    \t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\n\t    \t\tthis.cone.lookAt( vector2.sub( vector ) );\n\t\n\t    \t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author Sean Griffin / http://twitter.com/sgrif\n\t     * @author Michael Guerrero / http://realitymeltdown.com\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function SkeletonHelper( object ) {\n\t\n\t    \tthis.bones = this.getBoneList( object );\n\t\n\t    \tvar geometry = new Geometry();\n\t\n\t    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\t\n\t    \t\tvar bone = this.bones[ i ];\n\t\n\t    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t    \t\t\tgeometry.vertices.push( new Vector3() );\n\t    \t\t\tgeometry.vertices.push( new Vector3() );\n\t    \t\t\tgeometry.colors.push( new Color( 0, 0, 1 ) );\n\t    \t\t\tgeometry.colors.push( new Color( 0, 1, 0 ) );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tgeometry.dynamic = true;\n\t\n\t    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    \tthis.root = object;\n\t\n\t    \tthis.matrix = object.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t\n\t    SkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\t    SkeletonHelper.prototype.constructor = SkeletonHelper;\n\t\n\t    SkeletonHelper.prototype.getBoneList = function( object ) {\n\t\n\t    \tvar boneList = [];\n\t\n\t    \tif ( (object && object.isBone) ) {\n\t\n\t    \t\tboneList.push( object );\n\t\n\t    \t}\n\t\n\t    \tfor ( var i = 0; i < object.children.length; i ++ ) {\n\t\n\t    \t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\t\n\t    \t}\n\t\n\t    \treturn boneList;\n\t\n\t    };\n\t\n\t    SkeletonHelper.prototype.update = function () {\n\t\n\t    \tvar geometry = this.geometry;\n\t\n\t    \tvar matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );\n\t\n\t    \tvar boneMatrix = new Matrix4();\n\t\n\t    \tvar j = 0;\n\t\n\t    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\t\n\t    \t\tvar bone = this.bones[ i ];\n\t\n\t    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t    \t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\t\n\t    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t    \t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\t\n\t    \t\t\tj += 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tgeometry.verticesNeedUpdate = true;\n\t\n\t    \tgeometry.computeBoundingSphere();\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function PointLightHelper( light, sphereSize ) {\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t    \tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t    \tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \tMesh.call( this, geometry, material );\n\t\n\t    \tthis.matrix = this.light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \t/*\n\t    \tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\t    \tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\n\t    \tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t    \tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\n\t    \tvar d = light.distance;\n\t\n\t    \tif ( d === 0.0 ) {\n\t\n\t    \t\tthis.lightDistance.visible = false;\n\t\n\t    \t} else {\n\t\n\t    \t\tthis.lightDistance.scale.set( d, d, d );\n\t\n\t    \t}\n\t\n\t    \tthis.add( this.lightDistance );\n\t    \t*/\n\t\n\t    }\n\t\n\t    PointLightHelper.prototype = Object.create( Mesh.prototype );\n\t    PointLightHelper.prototype.constructor = PointLightHelper;\n\t\n\t    PointLightHelper.prototype.dispose = function () {\n\t\n\t    \tthis.geometry.dispose();\n\t    \tthis.material.dispose();\n\t\n\t    };\n\t\n\t    PointLightHelper.prototype.update = function () {\n\t\n\t    \tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \t/*\n\t    \tvar d = this.light.distance;\n\t\n\t    \tif ( d === 0.0 ) {\n\t\n\t    \t\tthis.lightDistance.visible = false;\n\t\n\t    \t} else {\n\t\n\t    \t\tthis.lightDistance.visible = true;\n\t    \t\tthis.lightDistance.scale.set( d, d, d );\n\t\n\t    \t}\n\t    \t*/\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function HemisphereLightHelper( light, sphereSize ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tthis.matrix = light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.colors = [ new Color(), new Color() ];\n\t\n\t    \tvar geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t    \tgeometry.rotateX( - Math.PI / 2 );\n\t\n\t    \tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\t\n\t    \t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\t\n\t    \t}\n\t\n\t    \tvar material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );\n\t\n\t    \tthis.lightSphere = new Mesh( geometry, material );\n\t    \tthis.add( this.lightSphere );\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    HemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\t    HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\t\n\t    HemisphereLightHelper.prototype.dispose = function () {\n\t\n\t    \tthis.lightSphere.geometry.dispose();\n\t    \tthis.lightSphere.material.dispose();\n\t\n\t    };\n\t\n\t    HemisphereLightHelper.prototype.update = function () {\n\t\n\t    \tvar vector = new Vector3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t    \t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\t\n\t    \t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\t    \t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function GridHelper( size, divisions, color1, color2 ) {\n\t\n\t    \tdivisions = divisions || 1;\n\t    \tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t    \tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\t\n\t    \tvar center = divisions / 2;\n\t    \tvar step = ( size * 2 ) / divisions;\n\t    \tvar vertices = [], colors = [];\n\t\n\t    \tfor ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {\n\t\n\t    \t\tvertices.push( - size, 0, k, size, 0, k );\n\t    \t\tvertices.push( k, 0, - size, k, 0, size );\n\t\n\t    \t\tvar color = i === center ? color1 : color2;\n\t\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t\n\t    \t}\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );\n\t    \tgeometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    }\n\t\n\t    GridHelper.prototype = Object.create( LineSegments.prototype );\n\t    GridHelper.prototype.constructor = GridHelper;\n\t\n\t    GridHelper.prototype.setColors = function () {\n\t\n\t    \tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function FaceNormalsHelper( object, size, hex, linewidth ) {\n\t\n\t    \t// FaceNormalsHelper only supports THREE.Geometry\n\t\n\t    \tthis.object = object;\n\t\n\t    \tthis.size = ( size !== undefined ) ? size : 1;\n\t\n\t    \tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\t\n\t    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\t\n\t    \t//\n\t\n\t    \tvar nNormals = 0;\n\t\n\t    \tvar objGeometry = this.object.geometry;\n\t\n\t    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t    \t\tnNormals = objGeometry.faces.length;\n\t\n\t    \t} else {\n\t\n\t    \t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t\n\t    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\t\n\t    \tgeometry.addAttribute( 'position', positions );\n\t\n\t    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\t\n\t    \t//\n\t\n\t    \tthis.matrixAutoUpdate = false;\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\t    FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\t\n\t    FaceNormalsHelper.prototype.update = ( function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t    \tvar normalMatrix = new Matrix3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tthis.object.updateMatrixWorld( true );\n\t\n\t    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\t\n\t    \t\tvar matrixWorld = this.object.matrixWorld;\n\t\n\t    \t\tvar position = this.geometry.attributes.position;\n\t\n\t    \t\t//\n\t\n\t    \t\tvar objGeometry = this.object.geometry;\n\t\n\t    \t\tvar vertices = objGeometry.vertices;\n\t\n\t    \t\tvar faces = objGeometry.faces;\n\t\n\t    \t\tvar idx = 0;\n\t\n\t    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\tvar normal = face.normal;\n\t\n\t    \t\t\tv1.copy( vertices[ face.a ] )\n\t    \t\t\t\t.add( vertices[ face.b ] )\n\t    \t\t\t\t.add( vertices[ face.c ] )\n\t    \t\t\t\t.divideScalar( 3 )\n\t    \t\t\t\t.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t    \t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t    \t\t\tidx = idx + 1;\n\t\n\t    \t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t    \t\t\tidx = idx + 1;\n\t\n\t    \t\t}\n\t\n\t    \t\tposition.needsUpdate = true;\n\t\n\t    \t\treturn this;\n\t\n\t    \t};\n\t\n\t    }() );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function DirectionalLightHelper( light, size ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tthis.matrix = light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tif ( size === undefined ) size = 1;\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( [\n\t    \t\t- size,   size, 0,\n\t    \t\t  size,   size, 0,\n\t    \t\t  size, - size, 0,\n\t    \t\t- size, - size, 0,\n\t    \t\t- size,   size, 0\n\t    \t], 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { fog: false } );\n\t\n\t    \tthis.add( new Line( geometry, material ) );\n\t\n\t    \tgeometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\t\n\t    \tthis.add( new Line( geometry, material ));\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    DirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\t    DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\t\n\t    DirectionalLightHelper.prototype.dispose = function () {\n\t\n\t    \tvar lightPlane = this.children[ 0 ];\n\t    \tvar targetLine = this.children[ 1 ];\n\t\n\t    \tlightPlane.geometry.dispose();\n\t    \tlightPlane.material.dispose();\n\t    \ttargetLine.geometry.dispose();\n\t    \ttargetLine.material.dispose();\n\t\n\t    };\n\t\n\t    DirectionalLightHelper.prototype.update = function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t    \tvar v3 = new Vector3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t    \t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t    \t\tv3.subVectors( v2, v1 );\n\t\n\t    \t\tvar lightPlane = this.children[ 0 ];\n\t    \t\tvar targetLine = this.children[ 1 ];\n\t\n\t    \t\tlightPlane.lookAt( v3 );\n\t    \t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \t\ttargetLine.lookAt( v3 );\n\t    \t\ttargetLine.scale.z = v3.length();\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     *\t- shows frustum, line of sight and up of the camera\n\t     *\t- suitable for fast updates\n\t     * \t- based on frustum visualization in lightgl.js shadowmap example\n\t     *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t     */\n\t\n\t    function CameraHelper( camera ) {\n\t\n\t    \tvar geometry = new Geometry();\n\t    \tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\t\n\t    \tvar pointMap = {};\n\t\n\t    \t// colors\n\t\n\t    \tvar hexFrustum = 0xffaa00;\n\t    \tvar hexCone = 0xff0000;\n\t    \tvar hexUp = 0x00aaff;\n\t    \tvar hexTarget = 0xffffff;\n\t    \tvar hexCross = 0x333333;\n\t\n\t    \t// near\n\t\n\t    \taddLine( \"n1\", \"n2\", hexFrustum );\n\t    \taddLine( \"n2\", \"n4\", hexFrustum );\n\t    \taddLine( \"n4\", \"n3\", hexFrustum );\n\t    \taddLine( \"n3\", \"n1\", hexFrustum );\n\t\n\t    \t// far\n\t\n\t    \taddLine( \"f1\", \"f2\", hexFrustum );\n\t    \taddLine( \"f2\", \"f4\", hexFrustum );\n\t    \taddLine( \"f4\", \"f3\", hexFrustum );\n\t    \taddLine( \"f3\", \"f1\", hexFrustum );\n\t\n\t    \t// sides\n\t\n\t    \taddLine( \"n1\", \"f1\", hexFrustum );\n\t    \taddLine( \"n2\", \"f2\", hexFrustum );\n\t    \taddLine( \"n3\", \"f3\", hexFrustum );\n\t    \taddLine( \"n4\", \"f4\", hexFrustum );\n\t\n\t    \t// cone\n\t\n\t    \taddLine( \"p\", \"n1\", hexCone );\n\t    \taddLine( \"p\", \"n2\", hexCone );\n\t    \taddLine( \"p\", \"n3\", hexCone );\n\t    \taddLine( \"p\", \"n4\", hexCone );\n\t\n\t    \t// up\n\t\n\t    \taddLine( \"u1\", \"u2\", hexUp );\n\t    \taddLine( \"u2\", \"u3\", hexUp );\n\t    \taddLine( \"u3\", \"u1\", hexUp );\n\t\n\t    \t// target\n\t\n\t    \taddLine( \"c\", \"t\", hexTarget );\n\t    \taddLine( \"p\", \"c\", hexCross );\n\t\n\t    \t// cross\n\t\n\t    \taddLine( \"cn1\", \"cn2\", hexCross );\n\t    \taddLine( \"cn3\", \"cn4\", hexCross );\n\t\n\t    \taddLine( \"cf1\", \"cf2\", hexCross );\n\t    \taddLine( \"cf3\", \"cf4\", hexCross );\n\t\n\t    \tfunction addLine( a, b, hex ) {\n\t\n\t    \t\taddPoint( a, hex );\n\t    \t\taddPoint( b, hex );\n\t\n\t    \t}\n\t\n\t    \tfunction addPoint( id, hex ) {\n\t\n\t    \t\tgeometry.vertices.push( new Vector3() );\n\t    \t\tgeometry.colors.push( new Color( hex ) );\n\t\n\t    \t\tif ( pointMap[ id ] === undefined ) {\n\t\n\t    \t\t\tpointMap[ id ] = [];\n\t\n\t    \t\t}\n\t\n\t    \t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\t\n\t    \t}\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    \tthis.camera = camera;\n\t    \tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\t\n\t    \tthis.matrix = camera.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.pointMap = pointMap;\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    CameraHelper.prototype = Object.create( LineSegments.prototype );\n\t    CameraHelper.prototype.constructor = CameraHelper;\n\t\n\t    CameraHelper.prototype.update = function () {\n\t\n\t    \tvar geometry, pointMap;\n\t\n\t    \tvar vector = new Vector3();\n\t    \tvar camera = new Camera();\n\t\n\t    \tfunction setPoint( point, x, y, z ) {\n\t\n\t    \t\tvector.set( x, y, z ).unproject( camera );\n\t\n\t    \t\tvar points = pointMap[ point ];\n\t\n\t    \t\tif ( points !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tgeometry = this.geometry;\n\t    \t\tpointMap = this.pointMap;\n\t\n\t    \t\tvar w = 1, h = 1;\n\t\n\t    \t\t// we need just camera projection matrix\n\t    \t\t// world matrix must be identity\n\t\n\t    \t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\t\n\t    \t\t// center / target\n\t\n\t    \t\tsetPoint( \"c\", 0, 0, - 1 );\n\t    \t\tsetPoint( \"t\", 0, 0,  1 );\n\t\n\t    \t\t// near\n\t\n\t    \t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t    \t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t    \t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t    \t\tsetPoint( \"n4\",   w,   h, - 1 );\n\t\n\t    \t\t// far\n\t\n\t    \t\tsetPoint( \"f1\", - w, - h, 1 );\n\t    \t\tsetPoint( \"f2\",   w, - h, 1 );\n\t    \t\tsetPoint( \"f3\", - w,   h, 1 );\n\t    \t\tsetPoint( \"f4\",   w,   h, 1 );\n\t\n\t    \t\t// up\n\t\n\t    \t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t    \t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t    \t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\t\n\t    \t\t// cross\n\t\n\t    \t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t    \t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t    \t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t    \t\tsetPoint( \"cf4\",   0,   h, 1 );\n\t\n\t    \t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t    \t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t    \t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t    \t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\t\n\t    \t\tgeometry.verticesNeedUpdate = true;\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    // a helper to show the world-axis-aligned bounding box for an object\n\t\n\t    function BoundingBoxHelper( object, hex ) {\n\t\n\t    \tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\t\n\t    \tthis.object = object;\n\t\n\t    \tthis.box = new Box3();\n\t\n\t    \tMesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );\n\t\n\t    }\n\t\n\t    BoundingBoxHelper.prototype = Object.create( Mesh.prototype );\n\t    BoundingBoxHelper.prototype.constructor = BoundingBoxHelper;\n\t\n\t    BoundingBoxHelper.prototype.update = function () {\n\t\n\t    \tthis.box.setFromObject( this.object );\n\t\n\t    \tthis.box.size( this.scale );\n\t\n\t    \tthis.box.getCenter( this.position );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BoxHelper( object, color ) {\n\t\n\t    \tif ( color === undefined ) color = 0xffff00;\n\t\n\t    \tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t    \tvar positions = new Float32Array( 8 * 3 );\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t\n\t    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\t\n\t    \tif ( object !== undefined ) {\n\t\n\t    \t\tthis.update( object );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    BoxHelper.prototype = Object.create( LineSegments.prototype );\n\t    BoxHelper.prototype.constructor = BoxHelper;\n\t\n\t    BoxHelper.prototype.update = ( function () {\n\t\n\t    \tvar box = new Box3();\n\t\n\t    \treturn function update( object ) {\n\t\n\t    \t\tif ( (object && object.isBox3) ) {\n\t\n\t    \t\t\tbox.copy( object );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tbox.setFromObject( object );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( box.isEmpty() ) return;\n\t\n\t    \t\tvar min = box.min;\n\t    \t\tvar max = box.max;\n\t\n\t    \t\t/*\n\t    \t\t  5____4\n\t    \t\t1/___0/|\n\t    \t\t| 6__|_7\n\t    \t\t2/___3/\n\t\n\t    \t\t0: max.x, max.y, max.z\n\t    \t\t1: min.x, max.y, max.z\n\t    \t\t2: min.x, min.y, max.z\n\t    \t\t3: max.x, min.y, max.z\n\t    \t\t4: max.x, max.y, min.z\n\t    \t\t5: min.x, max.y, min.z\n\t    \t\t6: min.x, min.y, min.z\n\t    \t\t7: max.x, min.y, min.z\n\t    \t\t*/\n\t\n\t    \t\tvar position = this.geometry.attributes.position;\n\t    \t\tvar array = position.array;\n\t\n\t    \t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t    \t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t    \t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t    \t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t    \t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t    \t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t    \t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t    \t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\t\n\t    \t\tposition.needsUpdate = true;\n\t\n\t    \t\tthis.geometry.computeBoundingSphere();\n\t\n\t    \t};\n\t\n\t    } )();\n\t\n\t    var lineGeometry = new BufferGeometry();\n\t    lineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\t\n\t    var coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t    coneGeometry.translate( 0, - 0.5, 0 );\n\t\n\t    function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\t\n\t    \t// dir is assumed to be normalized\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tif ( color === undefined ) color = 0xffff00;\n\t    \tif ( length === undefined ) length = 1;\n\t    \tif ( headLength === undefined ) headLength = 0.2 * length;\n\t    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\t\n\t    \tthis.position.copy( origin );\n\t\n\t    \tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t    \tthis.line.matrixAutoUpdate = false;\n\t    \tthis.add( this.line );\n\t\n\t    \tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t    \tthis.cone.matrixAutoUpdate = false;\n\t    \tthis.add( this.cone );\n\t\n\t    \tthis.setDirection( dir );\n\t    \tthis.setLength( length, headLength, headWidth );\n\t\n\t    }\n\t\n\t    ArrowHelper.prototype = Object.create( Object3D.prototype );\n\t    ArrowHelper.prototype.constructor = ArrowHelper;\n\t\n\t    ArrowHelper.prototype.setDirection = ( function () {\n\t\n\t    \tvar axis = new Vector3();\n\t    \tvar radians;\n\t\n\t    \treturn function setDirection( dir ) {\n\t\n\t    \t\t// dir is assumed to be normalized\n\t\n\t    \t\tif ( dir.y > 0.99999 ) {\n\t\n\t    \t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\t\n\t    \t\t} else if ( dir.y < - 0.99999 ) {\n\t\n\t    \t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\t\n\t    \t\t\tradians = Math.acos( dir.y );\n\t\n\t    \t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }() );\n\t\n\t    ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\t\n\t    \tif ( headLength === undefined ) headLength = 0.2 * length;\n\t    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\t\n\t    \tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\t    \tthis.line.updateMatrix();\n\t\n\t    \tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t    \tthis.cone.position.y = length;\n\t    \tthis.cone.updateMatrix();\n\t\n\t    };\n\t\n\t    ArrowHelper.prototype.setColor = function ( color ) {\n\t\n\t    \tthis.line.material.color.copy( color );\n\t    \tthis.cone.material.color.copy( color );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author sroucheray / http://sroucheray.org/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function AxisHelper( size ) {\n\t\n\t    \tsize = size || 1;\n\t\n\t    \tvar vertices = new Float32Array( [\n\t    \t\t0, 0, 0,  size, 0, 0,\n\t    \t\t0, 0, 0,  0, size, 0,\n\t    \t\t0, 0, 0,  0, 0, size\n\t    \t] );\n\t\n\t    \tvar colors = new Float32Array( [\n\t    \t\t1, 0, 0,  1, 0.6, 0,\n\t    \t\t0, 1, 0,  0.6, 1, 0,\n\t    \t\t0, 0, 1,  0, 0.6, 1\n\t    \t] );\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    }\n\t\n\t    AxisHelper.prototype = Object.create( LineSegments.prototype );\n\t    AxisHelper.prototype.constructor = AxisHelper;\n\t\n\t    /**\n\t     * @author zz85 https://github.com/zz85\n\t     *\n\t     * Centripetal CatmullRom Curve - which is useful for avoiding\n\t     * cusps and self-intersections in non-uniform catmull rom curves.\n\t     * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t     *\n\t     * curve.type accepts centripetal(default), chordal and catmullrom\n\t     * curve.tension is used for catmullrom which defaults to 0.5\n\t     */\n\t\n\t    exports.CatmullRomCurve3 = ( function() {\n\t\n\t    \tvar\n\t    \t\ttmp = new Vector3(),\n\t    \t\tpx = new CubicPoly(),\n\t    \t\tpy = new CubicPoly(),\n\t    \t\tpz = new CubicPoly();\n\t\n\t    \t/*\n\t    \tBased on an optimized c++ solution in\n\t    \t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t    \t - http://ideone.com/NoEbVM\n\t\n\t    \tThis CubicPoly class could be used for reusing some variables and calculations,\n\t    \tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\t    \twhich can be placed in CurveUtils.\n\t    \t*/\n\t\n\t    \tfunction CubicPoly() {\n\t\n\t    \t}\n\t\n\t    \t/*\n\t    \t * Compute coefficients for a cubic polynomial\n\t    \t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t    \t * such that\n\t    \t *   p(0) = x0, p(1) = x1\n\t    \t *  and\n\t    \t *   p'(0) = t0, p'(1) = t1.\n\t    \t */\n\t    \tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\t\n\t    \t\tthis.c0 = x0;\n\t    \t\tthis.c1 = t0;\n\t    \t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t    \t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\n\t    \t};\n\t\n\t    \tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\t\n\t    \t\t// compute tangents when parameterized in [t1,t2]\n\t    \t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t    \t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\t\n\t    \t\t// rescale tangents for parametrization in [0,1]\n\t    \t\tt1 *= dt1;\n\t    \t\tt2 *= dt1;\n\t\n\t    \t\t// initCubicPoly\n\t    \t\tthis.init( x1, x2, t1, t2 );\n\t\n\t    \t};\n\t\n\t    \t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\t    \tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\t\n\t    \t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\t\n\t    \t};\n\t\n\t    \tCubicPoly.prototype.calc = function( t ) {\n\t\n\t    \t\tvar t2 = t * t;\n\t    \t\tvar t3 = t2 * t;\n\t    \t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\t\n\t    \t};\n\t\n\t    \t// Subclass Three.js curve\n\t    \treturn Curve.create(\n\t\n\t    \t\tfunction ( p /* array of Vector3 */ ) {\n\t\n\t    \t\t\tthis.points = p || [];\n\t    \t\t\tthis.closed = false;\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction ( t ) {\n\t\n\t    \t\t\tvar points = this.points,\n\t    \t\t\t\tpoint, intPoint, weight, l;\n\t\n\t    \t\t\tl = points.length;\n\t\n\t    \t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\t\n\t    \t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t    \t\t\tintPoint = Math.floor( point );\n\t    \t\t\tweight = point - intPoint;\n\t\n\t    \t\t\tif ( this.closed ) {\n\t\n\t    \t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\t\n\t    \t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\t\n\t    \t\t\t\tintPoint = l - 2;\n\t    \t\t\t\tweight = 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar p0, p1, p2, p3; // 4 points\n\t\n\t    \t\t\tif ( this.closed || intPoint > 0 ) {\n\t\n\t    \t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// extrapolate first point\n\t    \t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t    \t\t\t\tp0 = tmp;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tp1 = points[ intPoint % l ];\n\t    \t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\t\n\t    \t\t\tif ( this.closed || intPoint + 2 < l ) {\n\t\n\t    \t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// extrapolate last point\n\t    \t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t    \t\t\t\tp3 = tmp;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\t\n\t    \t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t    \t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t    \t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t    \t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t    \t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\t\n\t    \t\t\t\t// safety check for repeated points\n\t    \t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t    \t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t    \t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\t\n\t    \t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t    \t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t    \t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\t\n\t    \t\t\t} else if ( this.type === 'catmullrom' ) {\n\t\n\t    \t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t    \t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t    \t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t    \t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar v = new Vector3(\n\t    \t\t\t\tpx.calc( weight ),\n\t    \t\t\t\tpy.calc( weight ),\n\t    \t\t\t\tpz.calc( weight )\n\t    \t\t\t);\n\t\n\t    \t\t\treturn v;\n\t\n\t    \t\t}\n\t\n\t    \t);\n\t\n\t    } )();\n\t\n\t    /**************************************************************\n\t     *\tClosed Spline 3D curve\n\t     **************************************************************/\n\t\n\t\n\t    function ClosedSplineCurve3( points ) {\n\t\n\t    \tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\t\n\t    \texports.CatmullRomCurve3.call( this, points );\n\t    \tthis.type = 'catmullrom';\n\t    \tthis.closed = true;\n\t\n\t    }\n\t\n\t    ClosedSplineCurve3.prototype = Object.create( exports.CatmullRomCurve3.prototype );\n\t\n\t    /**************************************************************\n\t     *\tSpline 3D curve\n\t     **************************************************************/\n\t\n\t\n\t    var SplineCurve3 = Curve.create(\n\t\n\t    \tfunction ( points /* array of Vector3 */ ) {\n\t\n\t    \t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n\t    \t\tthis.points = ( points === undefined ) ? [] : points;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tvar points = this.points;\n\t    \t\tvar point = ( points.length - 1 ) * t;\n\t\n\t    \t\tvar intPoint = Math.floor( point );\n\t    \t\tvar weight = point - intPoint;\n\t\n\t    \t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n\t    \t\tvar point1 = points[ intPoint ];\n\t    \t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t    \t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\t\n\t    \t\tvar interpolate = exports.CurveUtils.interpolate;\n\t\n\t    \t\treturn new Vector3(\n\t    \t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t    \t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n\t    \t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tCubic Bezier 3D curve\n\t     **************************************************************/\n\t\n\t    exports.CubicBezierCurve3 = Curve.create(\n\t\n\t    \tfunction ( v0, v1, v2, v3 ) {\n\t\n\t    \t\tthis.v0 = v0;\n\t    \t\tthis.v1 = v1;\n\t    \t\tthis.v2 = v2;\n\t    \t\tthis.v3 = v3;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tvar b3 = exports.ShapeUtils.b3;\n\t\n\t    \t\treturn new Vector3(\n\t    \t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t    \t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n\t    \t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tQuadratic Bezier 3D curve\n\t     **************************************************************/\n\t\n\t    exports.QuadraticBezierCurve3 = Curve.create(\n\t\n\t    \tfunction ( v0, v1, v2 ) {\n\t\n\t    \t\tthis.v0 = v0;\n\t    \t\tthis.v1 = v1;\n\t    \t\tthis.v2 = v2;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tvar b2 = exports.ShapeUtils.b2;\t\t\n\t\n\t    \t\treturn new Vector3(\n\t    \t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t    \t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n\t    \t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tLine3D\n\t     **************************************************************/\n\t\n\t    exports.LineCurve3 = Curve.create(\n\t\n\t    \tfunction ( v1, v2 ) {\n\t\n\t    \t\tthis.v1 = v1;\n\t    \t\tthis.v2 = v2;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tif ( t === 1 ) {\n\t\n\t    \t\t\treturn this.v2.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar vector = new Vector3();\n\t\n\t    \t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t    \t\tvector.multiplyScalar( t );\n\t    \t\tvector.add( this.v1 );\n\t\n\t    \t\treturn vector;\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tArc curve\n\t     **************************************************************/\n\t\n\t    function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t    \tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\t\n\t    }\n\t\n\t    ArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\t    ArcCurve.prototype.constructor = ArcCurve;\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    exports.SceneUtils = {\n\t\n\t    \tcreateMultiMaterialObject: function ( geometry, materials ) {\n\t\n\t    \t\tvar group = new Group();\n\t\n\t    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\t\n\t    \t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn group;\n\t\n\t    \t},\n\t\n\t    \tdetach: function ( child, parent, scene ) {\n\t\n\t    \t\tchild.applyMatrix( parent.matrixWorld );\n\t    \t\tparent.remove( child );\n\t    \t\tscene.add( child );\n\t\n\t    \t},\n\t\n\t    \tattach: function ( child, scene, parent ) {\n\t\n\t    \t\tvar matrixWorldInverse = new Matrix4();\n\t    \t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\t    \t\tchild.applyMatrix( matrixWorldInverse );\n\t\n\t    \t\tscene.remove( child );\n\t    \t\tparent.add( child );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    function Face4 ( a, b, c, d, normal, color, materialIndex ) {\n\t    \tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t    \treturn new Face3( a, b, c, normal, color, materialIndex );\n\t    }\n\t\n\t    var LineStrip = 0;\n\t\n\t    var LinePieces = 1;\n\t\n\t    function PointCloud ( geometry, material ) {\n\t    \tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t    \treturn new Points( geometry, material );\n\t    }\n\t\n\t    function ParticleSystem ( geometry, material ) {\n\t    \tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t    \treturn new Points( geometry, material );\n\t    }\n\t\n\t    function PointCloudMaterial ( parameters ) {\n\t    \tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t    \treturn new PointsMaterial( parameters );\n\t    }\n\t\n\t    function ParticleBasicMaterial ( parameters ) {\n\t    \tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t    \treturn new PointsMaterial( parameters );\n\t    }\n\t\n\t    function ParticleSystemMaterial ( parameters ) {\n\t    \tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t    \treturn new PointsMaterial( parameters );\n\t    }\n\t\n\t    function Vertex ( x, y, z ) {\n\t    \tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t    \treturn new Vector3( x, y, z );\n\t    }\n\t\n\t    //\n\t\n\t    function EdgesHelper( object, hex ) {\n\t    \tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t    \treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\t    }\n\t\n\t    function WireframeHelper( object, hex ) {\n\t    \tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t    \treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\t    }\n\t\n\t    //\n\t\n\t    Object.assign( Box2.prototype, {\n\t    \tcenter: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t    \t\treturn this.getCenter( optionalTarget );\n\t    \t},\n\t    \tempty: function () {\n\t    \t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t    \t\treturn this.isEmpty();\n\t    \t},\n\t    \tisIntersectionBox: function ( box ) {\n\t    \t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t    \t\treturn this.intersectsBox( box );\n\t    \t},\n\t    \tsize: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t    \t\treturn this.getSize( optionalTarget );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Box3.prototype, {\n\t    \tcenter: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t    \t\treturn this.getCenter( optionalTarget );\n\t    \t},\n\t    \tempty: function () {\n\t    \t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t    \t\treturn this.isEmpty();\n\t    \t},\n\t    \tisIntersectionBox: function ( box ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t    \t\treturn this.intersectsBox( box );\n\t    \t},\n\t    \tisIntersectionSphere: function ( sphere ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t    \t\treturn this.intersectsSphere( sphere );\n\t    \t},\n\t    \tsize: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t    \t\treturn this.getSize( optionalTarget );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Line3.prototype, {\n\t    \tcenter: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t    \t\treturn this.getCenter( optionalTarget );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Matrix3.prototype, {\n\t    \tmultiplyVector3: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t    \t\treturn vector.applyMatrix3( this );\n\t    \t},\n\t    \tmultiplyVector3Array: function ( a ) {\n\t    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t    \t\treturn this.applyToVector3Array( a );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Matrix4.prototype, {\n\t    \textractPosition: function ( m ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t    \t\treturn this.copyPosition( m );\n\t    \t},\n\t    \tsetRotationFromQuaternion: function ( q ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t    \t\treturn this.makeRotationFromQuaternion( q );\n\t    \t},\n\t    \tmultiplyVector3: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n\t    \t\treturn vector.applyProjection( this );\n\t    \t},\n\t    \tmultiplyVector4: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t    \t\treturn vector.applyMatrix4( this );\n\t    \t},\n\t    \tmultiplyVector3Array: function ( a ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t    \t\treturn this.applyToVector3Array( a );\n\t    \t},\n\t    \trotateAxis: function ( v ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t    \t\tv.transformDirection( this );\n\t    \t},\n\t    \tcrossVector: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t    \t\treturn vector.applyMatrix4( this );\n\t    \t},\n\t    \ttranslate: function ( v ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\t    \t},\n\t    \trotateX: function ( angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\t    \t},\n\t    \trotateY: function ( angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\t    \t},\n\t    \trotateZ: function ( angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\t    \t},\n\t    \trotateByAxis: function ( axis, angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Plane.prototype, {\n\t    \tisIntersectionLine: function ( line ) {\n\t    \t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t    \t\treturn this.intersectsLine( line );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Quaternion.prototype, {\n\t    \tmultiplyVector3: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t    \t\treturn vector.applyQuaternion( this );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Ray.prototype, {\n\t    \tisIntersectionBox: function ( box ) {\n\t    \t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t    \t\treturn this.intersectsBox( box );\n\t    \t},\n\t    \tisIntersectionPlane: function ( plane ) {\n\t    \t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t    \t\treturn this.intersectsPlane( plane );\n\t    \t},\n\t    \tisIntersectionSphere: function ( sphere ) {\n\t    \t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t    \t\treturn this.intersectsSphere( sphere );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Shape.prototype, {\n\t    \textrude: function ( options ) {\n\t    \t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t    \t\treturn new ExtrudeGeometry( this, options );\n\t    \t},\n\t    \tmakeGeometry: function ( options ) {\n\t    \t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t    \t\treturn new ShapeGeometry( this, options );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Vector3.prototype, {\n\t    \tsetEulerFromRotationMatrix: function () {\n\t    \t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\t    \t},\n\t    \tsetEulerFromQuaternion: function () {\n\t    \t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\t    \t},\n\t    \tgetPositionFromMatrix: function ( m ) {\n\t    \t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t    \t\treturn this.setFromMatrixPosition( m );\n\t    \t},\n\t    \tgetScaleFromMatrix: function ( m ) {\n\t    \t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t    \t\treturn this.setFromMatrixScale( m );\n\t    \t},\n\t    \tgetColumnFromMatrix: function ( index, matrix ) {\n\t    \t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t    \t\treturn this.setFromMatrixColumn( matrix, index );\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.assign( Object3D.prototype, {\n\t    \tgetChildByName: function ( name ) {\n\t    \t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t    \t\treturn this.getObjectByName( name );\n\t    \t},\n\t    \trenderDepth: function ( value ) {\n\t    \t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\t    \t},\n\t    \ttranslate: function ( distance, axis ) {\n\t    \t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t    \t\treturn this.translateOnAxis( axis, distance );\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( Object3D.prototype, {\n\t    \teulerOrder: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t    \t\t\treturn this.rotation.order;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t    \t\t\tthis.rotation.order = value;\n\t    \t\t}\n\t    \t},\n\t    \tuseQuaternion: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( LOD.prototype, {\n\t    \tobjects: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t    \t\t\treturn this.levels;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\t\n\t    \tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t    \t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\t\n\t    \tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\t    \tthis.setFocalLength( focalLength );\n\t\n\t    };\n\t\n\t    //\n\t\n\t    Object.defineProperties( Light.prototype, {\n\t    \tonlyShadow: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraFov: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t    \t\t\tthis.shadow.camera.fov = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraLeft: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t    \t\t\tthis.shadow.camera.left = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraRight: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t    \t\t\tthis.shadow.camera.right = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraTop: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t    \t\t\tthis.shadow.camera.top = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraBottom: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t    \t\t\tthis.shadow.camera.bottom = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraNear: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t    \t\t\tthis.shadow.camera.near = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraFar: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t    \t\t\tthis.shadow.camera.far = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraVisible: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\t    \t\t}\n\t    \t},\n\t    \tshadowBias: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t    \t\t\tthis.shadow.bias = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowDarkness: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapWidth: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t    \t\t\tthis.shadow.mapSize.width = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapHeight: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t    \t\t\tthis.shadow.mapSize.height = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.defineProperties( BufferAttribute.prototype, {\n\t    \tlength: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t    \t\t\treturn this.array.length;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( BufferGeometry.prototype, {\n\t    \taddIndex: function ( index ) {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t    \t\tthis.setIndex( index );\n\t    \t},\n\t    \taddDrawCall: function ( start, count, indexOffset ) {\n\t    \t\tif ( indexOffset !== undefined ) {\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\t    \t\t}\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t    \t\tthis.addGroup( start, count );\n\t    \t},\n\t    \tclearDrawCalls: function () {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t    \t\tthis.clearGroups();\n\t    \t},\n\t    \tcomputeTangents: function () {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\t    \t},\n\t    \tcomputeOffsets: function () {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( BufferGeometry.prototype, {\n\t    \tdrawcalls: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t    \t\t\treturn this.groups;\n\t    \t\t}\n\t    \t},\n\t    \toffsets: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t    \t\t\treturn this.groups;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.defineProperties( Material.prototype, {\n\t    \twrapAround: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t    \t\t}\n\t    \t},\n\t    \twrapRGB: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n\t    \t\t\treturn new Color();\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( MeshPhongMaterial.prototype, {\n\t    \tmetal: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t    \t\t\treturn false;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( ShaderMaterial.prototype, {\n\t    \tderivatives: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t    \t\t\treturn this.extensions.derivatives;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t    \t\t\tthis.extensions.derivatives = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    EventDispatcher.prototype = Object.assign( Object.create( {\n\t\n\t    \t// Note: Extra base ensures these properties are not 'assign'ed.\n\t\n\t    \tconstructor: EventDispatcher,\n\t\n\t    \tapply: function ( target ) {\n\t\n\t    \t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n\t    \t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\t\n\t    \t\tObject.assign( target, this );\n\t\n\t    \t}\n\t\n\t    } ), EventDispatcher.prototype );\n\t\n\t    //\n\t\n\t    Object.assign( WebGLRenderer.prototype, {\n\t    \tsupportsFloatTextures: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t    \t\treturn this.extensions.get( 'OES_texture_float' );\n\t    \t},\n\t    \tsupportsHalfFloatTextures: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t    \t\treturn this.extensions.get( 'OES_texture_half_float' );\n\t    \t},\n\t    \tsupportsStandardDerivatives: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t    \t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\t    \t},\n\t    \tsupportsCompressedTextureS3TC: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t    \t},\n\t    \tsupportsCompressedTexturePVRTC: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t    \t},\n\t    \tsupportsBlendMinMax: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t    \t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\t    \t},\n\t    \tsupportsVertexTextures: function () {\n\t    \t\treturn this.capabilities.vertexTextures;\n\t    \t},\n\t    \tsupportsInstancedArrays: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t    \t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\t    \t},\n\t    \tenableScissorTest: function ( boolean ) {\n\t    \t\t// console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t    \t\tthis.setScissorTest( boolean );\n\t    \t},\n\t    \tinitMaterial: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\t    \t},\n\t    \taddPrePlugin: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\t    \t},\n\t    \taddPostPlugin: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\t    \t},\n\t    \tupdateShadowMap: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( WebGLRenderer.prototype, {\n\t    \tshadowMapEnabled: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.shadowMap.enabled;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t    \t\t\tthis.shadowMap.enabled = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapType: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.shadowMap.type;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t    \t\t\tthis.shadowMap.type = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapCullFace: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.shadowMap.cullFace;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t    \t\t\tthis.shadowMap.cullFace = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( WebGLShadowMap.prototype, {\n\t    \tcullFace: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n\t    \t\t},\n\t    \t\tset: function ( cullFace ) {\n\t    \t\t\tvar value = ( cullFace !== CullFaceBack );\n\t    \t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t    \t\t\tthis.renderReverseSided = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.defineProperties( WebGLRenderTarget.prototype, {\n\t    \twrapS: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t    \t\t\treturn this.texture.wrapS;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t    \t\t\tthis.texture.wrapS = value;\n\t    \t\t}\n\t    \t},\n\t    \twrapT: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t    \t\t\treturn this.texture.wrapT;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t    \t\t\tthis.texture.wrapT = value;\n\t    \t\t}\n\t    \t},\n\t    \tmagFilter: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t    \t\t\treturn this.texture.magFilter;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t    \t\t\tthis.texture.magFilter = value;\n\t    \t\t}\n\t    \t},\n\t    \tminFilter: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t    \t\t\treturn this.texture.minFilter;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t    \t\t\tthis.texture.minFilter = value;\n\t    \t\t}\n\t    \t},\n\t    \tanisotropy: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t    \t\t\treturn this.texture.anisotropy;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t    \t\t\tthis.texture.anisotropy = value;\n\t    \t\t}\n\t    \t},\n\t    \toffset: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t    \t\t\treturn this.texture.offset;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t    \t\t\tthis.texture.offset = value;\n\t    \t\t}\n\t    \t},\n\t    \trepeat: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t    \t\t\treturn this.texture.repeat;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t    \t\t\tthis.texture.repeat = value;\n\t    \t\t}\n\t    \t},\n\t    \tformat: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t    \t\t\treturn this.texture.format;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t    \t\t\tthis.texture.format = value;\n\t    \t\t}\n\t    \t},\n\t    \ttype: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t    \t\t\treturn this.texture.type;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t    \t\t\tthis.texture.type = value;\n\t    \t\t}\n\t    \t},\n\t    \tgenerateMipmaps: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t    \t\t\treturn this.texture.generateMipmaps;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t    \t\t\tthis.texture.generateMipmaps = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.assign( Audio.prototype, {\n\t    \tload: function ( file ) {\n\t    \t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n\t    \t\tvar scope = this;\n\t    \t\tvar audioLoader = new AudioLoader();\n\t    \t\taudioLoader.load( file, function ( buffer ) {\n\t    \t\t\tscope.setBuffer( buffer );\n\t    \t\t} );\n\t    \t\treturn this;\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( AudioAnalyser.prototype, {\n\t    \tgetData: function ( file ) {\n\t    \t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t    \t\treturn this.getFrequencyData();\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    var GeometryUtils = {\n\t\n\t    \tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\t\n\t    \t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\tif ( geometry2.isMesh ) {\n\t\n\t    \t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\t\n\t    \t\t\tmatrix = geometry2.matrix;\n\t    \t\t\tgeometry2 = geometry2.geometry;\n\t\n\t    \t\t}\n\t\n\t    \t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\t\n\t    \t},\n\t\n\t    \tcenter: function ( geometry ) {\n\t\n\t    \t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t    \t\treturn geometry.center();\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    var ImageUtils = {\n\t\n\t    \tcrossOrigin: undefined,\n\t\n\t    \tloadTexture: function ( url, mapping, onLoad, onError ) {\n\t\n\t    \t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\t\n\t    \t\tvar loader = new TextureLoader();\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t    \t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\t\n\t    \t\tif ( mapping ) texture.mapping = mapping;\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\t\n\t    \t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\t\n\t    \t\tvar loader = new CubeTextureLoader();\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t    \t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\t\n\t    \t\tif ( mapping ) texture.mapping = mapping;\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tloadCompressedTexture: function () {\n\t\n\t    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\t\n\t    \t},\n\t\n\t    \tloadCompressedTextureCube: function () {\n\t\n\t    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    //\n\t\n\t    function Projector () {\n\t\n\t    \tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\t\n\t    \tthis.projectVector = function ( vector, camera ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t    \t\tvector.project( camera );\n\t\n\t    \t};\n\t\n\t    \tthis.unprojectVector = function ( vector, camera ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t    \t\tvector.unproject( camera );\n\t\n\t    \t};\n\t\n\t    \tthis.pickingRay = function ( vector, camera ) {\n\t\n\t    \t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    //\n\t\n\t    function CanvasRenderer () {\n\t\n\t    \tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\t\n\t    \tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \tthis.clear = function () {};\n\t    \tthis.render = function () {};\n\t    \tthis.setClearColor = function () {};\n\t    \tthis.setSize = function () {};\n\t\n\t    }\n\t\n\t    Object.defineProperty( exports, 'AudioContext', {\n\t    \tget: function () {\n\t    \t\treturn exports.getAudioContext();\n\t    \t}\n\t    });\n\t\n\t    exports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\t    exports.WebGLRenderTarget = WebGLRenderTarget;\n\t    exports.WebGLRenderer = WebGLRenderer;\n\t    exports.ShaderLib = ShaderLib;\n\t    exports.UniformsLib = UniformsLib;\n\t    exports.ShaderChunk = ShaderChunk;\n\t    exports.FogExp2 = FogExp2;\n\t    exports.Fog = Fog;\n\t    exports.Scene = Scene;\n\t    exports.LensFlare = LensFlare;\n\t    exports.Sprite = Sprite;\n\t    exports.LOD = LOD;\n\t    exports.SkinnedMesh = SkinnedMesh;\n\t    exports.Skeleton = Skeleton;\n\t    exports.Bone = Bone;\n\t    exports.Mesh = Mesh;\n\t    exports.LineSegments = LineSegments;\n\t    exports.Line = Line;\n\t    exports.Points = Points;\n\t    exports.Group = Group;\n\t    exports.VideoTexture = VideoTexture;\n\t    exports.DataTexture = DataTexture;\n\t    exports.CompressedTexture = CompressedTexture;\n\t    exports.CubeTexture = CubeTexture;\n\t    exports.CanvasTexture = CanvasTexture;\n\t    exports.DepthTexture = DepthTexture;\n\t    exports.TextureIdCount = TextureIdCount;\n\t    exports.Texture = Texture;\n\t    exports.MaterialIdCount = MaterialIdCount;\n\t    exports.CompressedTextureLoader = CompressedTextureLoader;\n\t    exports.BinaryTextureLoader = BinaryTextureLoader;\n\t    exports.DataTextureLoader = DataTextureLoader;\n\t    exports.CubeTextureLoader = CubeTextureLoader;\n\t    exports.TextureLoader = TextureLoader;\n\t    exports.ObjectLoader = ObjectLoader;\n\t    exports.MaterialLoader = MaterialLoader;\n\t    exports.BufferGeometryLoader = BufferGeometryLoader;\n\t    exports.LoadingManager = LoadingManager;\n\t    exports.JSONLoader = JSONLoader;\n\t    exports.ImageLoader = ImageLoader;\n\t    exports.FontLoader = FontLoader;\n\t    exports.XHRLoader = XHRLoader;\n\t    exports.Loader = Loader;\n\t    exports.AudioLoader = AudioLoader;\n\t    exports.SpotLightShadow = SpotLightShadow;\n\t    exports.SpotLight = SpotLight;\n\t    exports.PointLight = PointLight;\n\t    exports.HemisphereLight = HemisphereLight;\n\t    exports.DirectionalLightShadow = DirectionalLightShadow;\n\t    exports.DirectionalLight = DirectionalLight;\n\t    exports.AmbientLight = AmbientLight;\n\t    exports.LightShadow = LightShadow;\n\t    exports.Light = Light;\n\t    exports.StereoCamera = StereoCamera;\n\t    exports.PerspectiveCamera = PerspectiveCamera;\n\t    exports.OrthographicCamera = OrthographicCamera;\n\t    exports.CubeCamera = CubeCamera;\n\t    exports.Camera = Camera;\n\t    exports.AudioListener = AudioListener;\n\t    exports.PositionalAudio = PositionalAudio;\n\t    exports.getAudioContext = getAudioContext;\n\t    exports.AudioAnalyser = AudioAnalyser;\n\t    exports.Audio = Audio;\n\t    exports.VectorKeyframeTrack = VectorKeyframeTrack;\n\t    exports.StringKeyframeTrack = StringKeyframeTrack;\n\t    exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\t    exports.NumberKeyframeTrack = NumberKeyframeTrack;\n\t    exports.ColorKeyframeTrack = ColorKeyframeTrack;\n\t    exports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\t    exports.PropertyMixer = PropertyMixer;\n\t    exports.PropertyBinding = PropertyBinding;\n\t    exports.KeyframeTrack = KeyframeTrack;\n\t    exports.AnimationObjectGroup = AnimationObjectGroup;\n\t    exports.AnimationMixer = AnimationMixer;\n\t    exports.AnimationClip = AnimationClip;\n\t    exports.Uniform = Uniform;\n\t    exports.InstancedBufferGeometry = InstancedBufferGeometry;\n\t    exports.BufferGeometry = BufferGeometry;\n\t    exports.GeometryIdCount = GeometryIdCount;\n\t    exports.Geometry = Geometry;\n\t    exports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\t    exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\t    exports.InterleavedBuffer = InterleavedBuffer;\n\t    exports.InstancedBufferAttribute = InstancedBufferAttribute;\n\t    exports.DynamicBufferAttribute = DynamicBufferAttribute;\n\t    exports.Float64Attribute = Float64Attribute;\n\t    exports.Float32Attribute = Float32Attribute;\n\t    exports.Uint32Attribute = Uint32Attribute;\n\t    exports.Int32Attribute = Int32Attribute;\n\t    exports.Uint16Attribute = Uint16Attribute;\n\t    exports.Int16Attribute = Int16Attribute;\n\t    exports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\t    exports.Uint8Attribute = Uint8Attribute;\n\t    exports.Int8Attribute = Int8Attribute;\n\t    exports.BufferAttribute = BufferAttribute;\n\t    exports.Face3 = Face3;\n\t    exports.Object3DIdCount = Object3DIdCount;\n\t    exports.Object3D = Object3D;\n\t    exports.Raycaster = Raycaster;\n\t    exports.Layers = Layers;\n\t    exports.EventDispatcher = EventDispatcher;\n\t    exports.Clock = Clock;\n\t    exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\t    exports.LinearInterpolant = LinearInterpolant;\n\t    exports.DiscreteInterpolant = DiscreteInterpolant;\n\t    exports.CubicInterpolant = CubicInterpolant;\n\t    exports.Interpolant = Interpolant;\n\t    exports.Triangle = Triangle;\n\t    exports.Spline = Spline;\n\t    exports.Spherical = Spherical;\n\t    exports.Plane = Plane;\n\t    exports.Frustum = Frustum;\n\t    exports.Sphere = Sphere;\n\t    exports.Ray = Ray;\n\t    exports.Matrix4 = Matrix4;\n\t    exports.Matrix3 = Matrix3;\n\t    exports.Box3 = Box3;\n\t    exports.Box2 = Box2;\n\t    exports.Line3 = Line3;\n\t    exports.Euler = Euler;\n\t    exports.Vector4 = Vector4;\n\t    exports.Vector3 = Vector3;\n\t    exports.Vector2 = Vector2;\n\t    exports.Quaternion = Quaternion;\n\t    exports.Color = Color;\n\t    exports.MorphBlendMesh = MorphBlendMesh;\n\t    exports.ImmediateRenderObject = ImmediateRenderObject;\n\t    exports.VertexNormalsHelper = VertexNormalsHelper;\n\t    exports.SpotLightHelper = SpotLightHelper;\n\t    exports.SkeletonHelper = SkeletonHelper;\n\t    exports.PointLightHelper = PointLightHelper;\n\t    exports.HemisphereLightHelper = HemisphereLightHelper;\n\t    exports.GridHelper = GridHelper;\n\t    exports.FaceNormalsHelper = FaceNormalsHelper;\n\t    exports.DirectionalLightHelper = DirectionalLightHelper;\n\t    exports.CameraHelper = CameraHelper;\n\t    exports.BoundingBoxHelper = BoundingBoxHelper;\n\t    exports.BoxHelper = BoxHelper;\n\t    exports.ArrowHelper = ArrowHelper;\n\t    exports.AxisHelper = AxisHelper;\n\t    exports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\t    exports.SplineCurve3 = SplineCurve3;\n\t    exports.ArcCurve = ArcCurve;\n\t    exports.EllipseCurve = EllipseCurve;\n\t    exports.SplineCurve = SplineCurve;\n\t    exports.CubicBezierCurve = CubicBezierCurve;\n\t    exports.QuadraticBezierCurve = QuadraticBezierCurve;\n\t    exports.LineCurve = LineCurve;\n\t    exports.Shape = Shape;\n\t    exports.ShapePath = ShapePath;\n\t    exports.Path = Path;\n\t    exports.Font = Font;\n\t    exports.CurvePath = CurvePath;\n\t    exports.Curve = Curve;\n\t    exports.WireframeGeometry = WireframeGeometry;\n\t    exports.ParametricGeometry = ParametricGeometry;\n\t    exports.TetrahedronGeometry = TetrahedronGeometry;\n\t    exports.OctahedronGeometry = OctahedronGeometry;\n\t    exports.IcosahedronGeometry = IcosahedronGeometry;\n\t    exports.DodecahedronGeometry = DodecahedronGeometry;\n\t    exports.PolyhedronGeometry = PolyhedronGeometry;\n\t    exports.TubeGeometry = TubeGeometry;\n\t    exports.TorusKnotGeometry = TorusKnotGeometry;\n\t    exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\t    exports.TorusGeometry = TorusGeometry;\n\t    exports.TorusBufferGeometry = TorusBufferGeometry;\n\t    exports.TextGeometry = TextGeometry;\n\t    exports.SphereBufferGeometry = SphereBufferGeometry;\n\t    exports.SphereGeometry = SphereGeometry;\n\t    exports.RingGeometry = RingGeometry;\n\t    exports.RingBufferGeometry = RingBufferGeometry;\n\t    exports.PlaneBufferGeometry = PlaneBufferGeometry;\n\t    exports.PlaneGeometry = PlaneGeometry;\n\t    exports.LatheGeometry = LatheGeometry;\n\t    exports.LatheBufferGeometry = LatheBufferGeometry;\n\t    exports.ShapeGeometry = ShapeGeometry;\n\t    exports.ExtrudeGeometry = ExtrudeGeometry;\n\t    exports.EdgesGeometry = EdgesGeometry;\n\t    exports.ConeGeometry = ConeGeometry;\n\t    exports.ConeBufferGeometry = ConeBufferGeometry;\n\t    exports.CylinderGeometry = CylinderGeometry;\n\t    exports.CylinderBufferGeometry = CylinderBufferGeometry;\n\t    exports.CircleBufferGeometry = CircleBufferGeometry;\n\t    exports.CircleGeometry = CircleGeometry;\n\t    exports.BoxBufferGeometry = BoxBufferGeometry;\n\t    exports.BoxGeometry = BoxGeometry;\n\t    exports.ShadowMaterial = ShadowMaterial;\n\t    exports.SpriteMaterial = SpriteMaterial;\n\t    exports.RawShaderMaterial = RawShaderMaterial;\n\t    exports.ShaderMaterial = ShaderMaterial;\n\t    exports.PointsMaterial = PointsMaterial;\n\t    exports.MultiMaterial = MultiMaterial;\n\t    exports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\t    exports.MeshStandardMaterial = MeshStandardMaterial;\n\t    exports.MeshPhongMaterial = MeshPhongMaterial;\n\t    exports.MeshNormalMaterial = MeshNormalMaterial;\n\t    exports.MeshLambertMaterial = MeshLambertMaterial;\n\t    exports.MeshDepthMaterial = MeshDepthMaterial;\n\t    exports.MeshBasicMaterial = MeshBasicMaterial;\n\t    exports.LineDashedMaterial = LineDashedMaterial;\n\t    exports.LineBasicMaterial = LineBasicMaterial;\n\t    exports.Material = Material;\n\t    exports.REVISION = REVISION;\n\t    exports.MOUSE = MOUSE;\n\t    exports.CullFaceNone = CullFaceNone;\n\t    exports.CullFaceBack = CullFaceBack;\n\t    exports.CullFaceFront = CullFaceFront;\n\t    exports.CullFaceFrontBack = CullFaceFrontBack;\n\t    exports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\t    exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\t    exports.BasicShadowMap = BasicShadowMap;\n\t    exports.PCFShadowMap = PCFShadowMap;\n\t    exports.PCFSoftShadowMap = PCFSoftShadowMap;\n\t    exports.FrontSide = FrontSide;\n\t    exports.BackSide = BackSide;\n\t    exports.DoubleSide = DoubleSide;\n\t    exports.FlatShading = FlatShading;\n\t    exports.SmoothShading = SmoothShading;\n\t    exports.NoColors = NoColors;\n\t    exports.FaceColors = FaceColors;\n\t    exports.VertexColors = VertexColors;\n\t    exports.NoBlending = NoBlending;\n\t    exports.NormalBlending = NormalBlending;\n\t    exports.AdditiveBlending = AdditiveBlending;\n\t    exports.SubtractiveBlending = SubtractiveBlending;\n\t    exports.MultiplyBlending = MultiplyBlending;\n\t    exports.CustomBlending = CustomBlending;\n\t    exports.BlendingMode = BlendingMode;\n\t    exports.AddEquation = AddEquation;\n\t    exports.SubtractEquation = SubtractEquation;\n\t    exports.ReverseSubtractEquation = ReverseSubtractEquation;\n\t    exports.MinEquation = MinEquation;\n\t    exports.MaxEquation = MaxEquation;\n\t    exports.ZeroFactor = ZeroFactor;\n\t    exports.OneFactor = OneFactor;\n\t    exports.SrcColorFactor = SrcColorFactor;\n\t    exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\t    exports.SrcAlphaFactor = SrcAlphaFactor;\n\t    exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\t    exports.DstAlphaFactor = DstAlphaFactor;\n\t    exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\t    exports.DstColorFactor = DstColorFactor;\n\t    exports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\t    exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\t    exports.NeverDepth = NeverDepth;\n\t    exports.AlwaysDepth = AlwaysDepth;\n\t    exports.LessDepth = LessDepth;\n\t    exports.LessEqualDepth = LessEqualDepth;\n\t    exports.EqualDepth = EqualDepth;\n\t    exports.GreaterEqualDepth = GreaterEqualDepth;\n\t    exports.GreaterDepth = GreaterDepth;\n\t    exports.NotEqualDepth = NotEqualDepth;\n\t    exports.MultiplyOperation = MultiplyOperation;\n\t    exports.MixOperation = MixOperation;\n\t    exports.AddOperation = AddOperation;\n\t    exports.NoToneMapping = NoToneMapping;\n\t    exports.LinearToneMapping = LinearToneMapping;\n\t    exports.ReinhardToneMapping = ReinhardToneMapping;\n\t    exports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\t    exports.CineonToneMapping = CineonToneMapping;\n\t    exports.UVMapping = UVMapping;\n\t    exports.CubeReflectionMapping = CubeReflectionMapping;\n\t    exports.CubeRefractionMapping = CubeRefractionMapping;\n\t    exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\t    exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\t    exports.SphericalReflectionMapping = SphericalReflectionMapping;\n\t    exports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\t    exports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\t    exports.TextureMapping = TextureMapping;\n\t    exports.RepeatWrapping = RepeatWrapping;\n\t    exports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\t    exports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\t    exports.TextureWrapping = TextureWrapping;\n\t    exports.NearestFilter = NearestFilter;\n\t    exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\t    exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\t    exports.LinearFilter = LinearFilter;\n\t    exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\t    exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\t    exports.TextureFilter = TextureFilter;\n\t    exports.UnsignedByteType = UnsignedByteType;\n\t    exports.ByteType = ByteType;\n\t    exports.ShortType = ShortType;\n\t    exports.UnsignedShortType = UnsignedShortType;\n\t    exports.IntType = IntType;\n\t    exports.UnsignedIntType = UnsignedIntType;\n\t    exports.FloatType = FloatType;\n\t    exports.HalfFloatType = HalfFloatType;\n\t    exports.UnsignedShort4444Type = UnsignedShort4444Type;\n\t    exports.UnsignedShort5551Type = UnsignedShort5551Type;\n\t    exports.UnsignedShort565Type = UnsignedShort565Type;\n\t    exports.UnsignedInt248Type = UnsignedInt248Type;\n\t    exports.AlphaFormat = AlphaFormat;\n\t    exports.RGBFormat = RGBFormat;\n\t    exports.RGBAFormat = RGBAFormat;\n\t    exports.LuminanceFormat = LuminanceFormat;\n\t    exports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\t    exports.RGBEFormat = RGBEFormat;\n\t    exports.DepthFormat = DepthFormat;\n\t    exports.DepthStencilFormat = DepthStencilFormat;\n\t    exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\t    exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\t    exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\t    exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\t    exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\t    exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\t    exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\t    exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\t    exports.RGB_ETC1_Format = RGB_ETC1_Format;\n\t    exports.LoopOnce = LoopOnce;\n\t    exports.LoopRepeat = LoopRepeat;\n\t    exports.LoopPingPong = LoopPingPong;\n\t    exports.InterpolateDiscrete = InterpolateDiscrete;\n\t    exports.InterpolateLinear = InterpolateLinear;\n\t    exports.InterpolateSmooth = InterpolateSmooth;\n\t    exports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\t    exports.ZeroSlopeEnding = ZeroSlopeEnding;\n\t    exports.WrapAroundEnding = WrapAroundEnding;\n\t    exports.TrianglesDrawMode = TrianglesDrawMode;\n\t    exports.TriangleStripDrawMode = TriangleStripDrawMode;\n\t    exports.TriangleFanDrawMode = TriangleFanDrawMode;\n\t    exports.LinearEncoding = LinearEncoding;\n\t    exports.sRGBEncoding = sRGBEncoding;\n\t    exports.GammaEncoding = GammaEncoding;\n\t    exports.RGBEEncoding = RGBEEncoding;\n\t    exports.LogLuvEncoding = LogLuvEncoding;\n\t    exports.RGBM7Encoding = RGBM7Encoding;\n\t    exports.RGBM16Encoding = RGBM16Encoding;\n\t    exports.RGBDEncoding = RGBDEncoding;\n\t    exports.BasicDepthPacking = BasicDepthPacking;\n\t    exports.RGBADepthPacking = RGBADepthPacking;\n\t    exports.CubeGeometry = BoxGeometry;\n\t    exports.Face4 = Face4;\n\t    exports.LineStrip = LineStrip;\n\t    exports.LinePieces = LinePieces;\n\t    exports.MeshFaceMaterial = MultiMaterial;\n\t    exports.PointCloud = PointCloud;\n\t    exports.Particle = Sprite;\n\t    exports.ParticleSystem = ParticleSystem;\n\t    exports.PointCloudMaterial = PointCloudMaterial;\n\t    exports.ParticleBasicMaterial = ParticleBasicMaterial;\n\t    exports.ParticleSystemMaterial = ParticleSystemMaterial;\n\t    exports.Vertex = Vertex;\n\t    exports.EdgesHelper = EdgesHelper;\n\t    exports.WireframeHelper = WireframeHelper;\n\t    exports.GeometryUtils = GeometryUtils;\n\t    exports.ImageUtils = ImageUtils;\n\t    exports.Projector = Projector;\n\t    exports.CanvasRenderer = CanvasRenderer;\n\t\n\t    Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t})));\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = new RegExp(\n\t\t'^' +\n\t\n\t\t// protocol identifier\n\t\t'(?:(?:(?:https?):)?//)' +\n\t\n\t\t// user:pass authentication\n\t\t'(?:\\\\S+(?::\\\\S*)?@)?' +\n\t\t'(?:' +\n\t\n\t\t// IP address exclusion\n\t\t// private & local networks\n\t\t'(' +\n\t\t'(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})' +\n\t\t'(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})' +\n\t\t'(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})' +\n\t\n\t\t// IP address dotted notation octets\n\t\t// excludes loopback network 0.0.0.0\n\t\t// excludes reserved space >= 224.0.0.0\n\t\t// excludes network & broacast addresses\n\t\t// (first & last IP address of each class)\n\t\t'(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])' +\n\t\t'(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}' +\n\t\t'(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))' +\n\t\t'|' +\n\t\n\t\t// host name\n\t\t'(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)' +\n\t\n\t\t// domain name\n\t\t'(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*' +\n\t\n\t\t// TLD identifier\n\t\t'(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))?' +\n\t\t')' +\n\t\n\t\t')' +\n\t\n\t\t// port number\n\t\t'(?::(\\\\d{2,5}))?' +\n\t\n\t\t// resource path\n\t\t'(?:/\\\\S*)?' +\n\t\t'$', 'i'\n\t);\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.3 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar arrayEach = __webpack_require__(41),\n\t    baseEach = __webpack_require__(42),\n\t    bindCallback = __webpack_require__(43),\n\t    isArray = __webpack_require__(44);\n\t\n\t/**\n\t * Creates a function for `_.forEach` or `_.forEachRight`.\n\t *\n\t * @private\n\t * @param {Function} arrayFunc The function to iterate over an array.\n\t * @param {Function} eachFunc The function to iterate over a collection.\n\t * @returns {Function} Returns the new each function.\n\t */\n\tfunction createForEach(arrayFunc, eachFunc) {\n\t  return function(collection, iteratee, thisArg) {\n\t    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))\n\t      ? arrayFunc(collection, iteratee)\n\t      : eachFunc(collection, bindCallback(iteratee, thisArg, 3));\n\t  };\n\t}\n\t\n\t/**\n\t * Iterates over elements of `collection` invoking `iteratee` for each element.\n\t * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n\t * (value, index|key, collection). Iteratee functions may exit iteration early\n\t * by explicitly returning `false`.\n\t *\n\t * **Note:** As with other \"Collections\" methods, objects with a \"length\" property\n\t * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\n\t * may be used for object iteration.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @alias each\n\t * @category Collection\n\t * @param {Array|Object|string} collection The collection to iterate over.\n\t * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n\t * @param {*} [thisArg] The `this` binding of `iteratee`.\n\t * @returns {Array|Object|string} Returns `collection`.\n\t * @example\n\t *\n\t * _([1, 2]).forEach(function(n) {\n\t *   console.log(n);\n\t * }).value();\n\t * // => logs each value from left to right and returns the array\n\t *\n\t * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {\n\t *   console.log(n, key);\n\t * });\n\t * // => logs each value-key pair and returns the object (iteration order is not guaranteed)\n\t */\n\tvar forEach = createForEach(arrayEach, baseEach);\n\t\n\tmodule.exports = forEach;\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.2.0 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar baseAssign = __webpack_require__(45),\n\t    createAssigner = __webpack_require__(46),\n\t    keys = __webpack_require__(47);\n\t\n\t/**\n\t * A specialized version of `_.assign` for customizing assigned values without\n\t * support for argument juggling, multiple sources, and `this` binding `customizer`\n\t * functions.\n\t *\n\t * @private\n\t * @param {Object} object The destination object.\n\t * @param {Object} source The source object.\n\t * @param {Function} customizer The function to customize assigned values.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction assignWith(object, source, customizer) {\n\t  var index = -1,\n\t      props = keys(source),\n\t      length = props.length;\n\t\n\t  while (++index < length) {\n\t    var key = props[index],\n\t        value = object[key],\n\t        result = customizer(value, source[key], key, object, source);\n\t\n\t    if ((result === result ? (result !== value) : (value === value)) ||\n\t        (value === undefined && !(key in object))) {\n\t      object[key] = result;\n\t    }\n\t  }\n\t  return object;\n\t}\n\t\n\t/**\n\t * Assigns own enumerable properties of source object(s) to the destination\n\t * object. Subsequent sources overwrite property assignments of previous sources.\n\t * If `customizer` is provided it is invoked to produce the assigned values.\n\t * The `customizer` is bound to `thisArg` and invoked with five arguments:\n\t * (objectValue, sourceValue, key, object, source).\n\t *\n\t * **Note:** This method mutates `object` and is based on\n\t * [`Object.assign`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @alias extend\n\t * @category Object\n\t * @param {Object} object The destination object.\n\t * @param {...Object} [sources] The source objects.\n\t * @param {Function} [customizer] The function to customize assigned values.\n\t * @param {*} [thisArg] The `this` binding of `customizer`.\n\t * @returns {Object} Returns `object`.\n\t * @example\n\t *\n\t * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });\n\t * // => { 'user': 'fred', 'age': 40 }\n\t *\n\t * // using a customizer callback\n\t * var defaults = _.partialRight(_.assign, function(value, other) {\n\t *   return _.isUndefined(value) ? other : value;\n\t * });\n\t *\n\t * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n\t * // => { 'user': 'barney', 'age': 36 }\n\t */\n\tvar assign = createAssigner(function(object, source, customizer) {\n\t  return customizer\n\t    ? assignWith(object, source, customizer)\n\t    : baseAssign(object, source);\n\t});\n\t\n\tmodule.exports = assign;\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.Audio = function ( listener ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'Audio';\n\t\tthis.started = false;\n\t\n\t\tif (listener.context) {\n\t\n\t\t\tthis.context = listener.context;\n\t\t\t// this.source = this.context.createBufferSource();\n\t\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect( listener.input );\n\t\n\t\t\tthis.panner = this.context.createPanner();\n\t\t\tthis.panner.connect( this.gain );\n\t\n\t\t} else {\n\t\n\t\t\tthis.source = new Audio();\n\t\n\t\t}\n\t};\n\t\n\tTHREE.Audio.prototype = Object.create( THREE.Object3D.prototype );\n\t\n\tTHREE.Audio.prototype.load = function ( sources ) {\n\t\t//todo: support multiple sources for different audio formats\n\t\n\t\tvar scope = this;\n\t\tvar file;\n\t\tvar i;\n\t\tvar match;\n\t\tvar element = this.source instanceof window.HTMLAudioElement ? this.source : new Audio();\n\t\n\t\tif (typeof sources === 'string') {\n\t\t\tsources = [sources];\n\t\t}\n\t\n\t\tfor (i = 0; i < sources.length; i++) {\n\t\t\tfile = sources[i];\n\t\t\tmatch = /\\.([a-z0-9]+)$/i.exec(file);\n\t\t\tif (match && element.canPlayType('audio/' + match[1])) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\n\t\tif (this.context) {\n\t\t\tvar request = new XMLHttpRequest();\n\t\t\trequest.open( 'GET', file, true );\n\t\t\trequest.responseType = 'arraybuffer';\n\t\t\trequest.onload = function ( e ) {\n\t\t\t\tconsole.log('audio buffer loaded. decoding...', e );\n\t\t\t\tscope.context.decodeAudioData( this.response, function ( buffer ) {\n\t\n\t\t\t\t\tscope.buffer = buffer;\n\t\t\t\t\tif (scope.started) {\n\t\t\t\t\t\tscope.start();\n\t\t\t\t\t}\n\t\n\t\t\t\t}, function onFailure(e) {\n\t\t\t\t\tconsole.log('Decoding the audio buffer failed', e);\n\t\t\t\t} );\n\t\n\t\t\t};\n\t\n\t\t\trequest.onerror = function ( e ) {\n\t\t\t\tconsole.log('error', e);\n\t\t\t};\n\t\n\t\t\trequest.send();\n\t\n\t\t} else {\n\t\n\t\t\tthis.source.src = file;\n\t\t\tthis.source.play();\n\t\n\t\t}\n\t\n\t\treturn this;\n\t};\n\t\n\tTHREE.Audio.prototype.stop = function ( value ) {\n\t\n\t\tif (this.context) {\n\t\t\tthis.source.stop();\n\t\t\tthis.source.disconnect( this.panner );\n\t\t\tthis.source = null;\n\t\t} else {\n\t\t\tthis.source.pause();\n\t\t\tthis.source.currentTime = 0;\n\t\t}\n\t\tthis.started = false;\n\t};\n\t\n\tTHREE.Audio.prototype.start = function ( value ) {\n\t\n\t\tthis.started = true;\n\t\tif (this.context) {\n\t\t\tif (this.source) {\n\t\t\t\tthis.source.disconnect( this.panner );\n\t\t\t}\n\t\n\t\t\tif (this.buffer) {\n\t\t\t\tthis.source = this.context.createBufferSource();\n\t\t\t\tthis.source.buffer = this.buffer;\n\t\t\t\tthis.source.connect( this.panner );\n\t\t\t\tthis.source.start( 0 );\n\t\t\t}\n\t\t} else {\n\t\t\tthis.source.currentTime = 0;\n\t\t\tthis.source.play();\n\t\t}\n\t\n\t};\n\t\n\tTHREE.Audio.prototype.setLoop = function ( value ) {\n\t\n\t\tthis.source.loop = value;\n\t\n\t};\n\t\n\tTHREE.Audio.prototype.setRefDistance = function ( value ) {\n\t\n\t\tif ( this.panner ) {\n\t\n\t\t\tthis.panner.refDistance = value;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.Audio.prototype.setRolloffFactor = function ( value ) {\n\t\n\t\tif ( this.panner ) {\n\t\n\t\t\tthis.panner.rolloffFactor = value;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.Audio.prototype.volume = function ( volume, time ) {\n\t\n\t\tif ( this.gain ) {\n\t\n\t\t\tif ( volume !== undefined ) {\n\t\t\t\tthis.gain.gain.linearRampToValueAtTime( volume, this.context.currentTime + (time || 0));\n\t\t\t}\n\t\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\t\n\t\tif ( volume !== undefined ) {\n\t\t\tthis.source.volume = volume;\n\t\t}\n\t\n\t\treturn this.source.volume;\n\t};\n\t\n\tTHREE.Audio.prototype.updateMatrixWorld = ( function () {\n\t\n\t\tvar position = new THREE.Vector3();\n\t\n\t\treturn function ( force ) {\n\t\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t\t\tif (this.panner) {\n\t\n\t\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t} )();\n\t\n\t// File:src/extras/audio/AudioListener.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.AudioListener = function () {\n\t\tvar AudioContext = window.AudioContext || window.webkitAudioContext;\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'AudioListener';\n\t\n\t\tif (AudioContext) {\n\t\t\tthis.context = new AudioContext();\n\t\t\tthis.input = this.context.createGain();\n\t\n\t\t\tthis.input.connect( this.context.destination );\n\t\t}\n\t};\n\t\n\tTHREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );\n\t\n\tTHREE.AudioListener.prototype.volume = function (val) {\n\t\tif (this.input) {\n\t\t\tval = val !== undefined && parseFloat(val);\n\t\t\tif (!isNaN(val)) {\n\t\t\t\tthis.input.gain.value = val;\n\t\t\t}\n\t\n\t\t\treturn this.input.gain.value;\n\t\t}\n\t};\n\t\n\tTHREE.AudioListener.prototype.updateMatrixWorld = ( function () {\n\t\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar scale = new THREE.Vector3();\n\t\n\t\tvar orientation = new THREE.Vector3();\n\t\n\t\treturn function ( force ) {\n\t\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t\t\tvar listener;\n\t\n\t\t\tif (this.context) {\n\t\t\t\tlistener = this.context.listener;\n\t\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\t\n\t\t\t\torientation.set( 0, 0, -1 ).applyQuaternion( quaternion );\n\t\n\t            // Error Fixed\n\t            try {\n\t\t\t\t    listener.setPosition( position.x, position.y, position.z );\n\t\t\t\t    listener.setOrientation( orientation.x, orientation.y, orientation.z, this.up.x, this.up.y, this.up.z );\n\t            } catch (e) {}\n\t\n\t\t\t}\n\t\t};\n\t\n\t} ());\n\t\n\t\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t *\n\t * Based on \"A Practical Analytic Model for Daylight\"\n\t * aka The Preetham Model, the de facto standard analytic skydome model\n\t * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\n\t *\n\t * First implemented by Simon Wallner\n\t * http://www.simonwallner.at/projects/atmospheric-scattering\n\t *\n\t * Improved by Martin Upitis\n\t * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n\t *\n\t * Three.js integration by zz85 http://twitter.com/blurspline\n\t*/\n\t\n\tTHREE.ShaderLib[ 'sky' ] = {\n\t\n\t\tuniforms: {\n\t\n\t\t\tluminance: { value: 1 },\n\t\t\tturbidity: { value: 2 },\n\t\t\treileigh: { value: 1 },\n\t\t\tmieCoefficient: { value: 0.005 },\n\t\t\tmieDirectionalG: { value: 0.8 },\n\t\t\tsunPosition: { value: new THREE.Vector3() }\n\t\n\t\t},\n\t\n\t\tvertexShader: [\n\t\n\t\t\t\"varying vec3 vWorldPosition;\",\n\t\n\t\t\t\"void main() {\",\n\t\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n\t\t\t\t\"vWorldPosition = worldPosition.xyz;\",\n\t\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\n\t\t\t\"}\",\n\t\n\t\t].join( \"\\n\" ),\n\t\n\t\tfragmentShader: [\n\t\n\t\t\t\"uniform sampler2D skySampler;\",\n\t\t\t\"uniform vec3 sunPosition;\",\n\t\t\t\"varying vec3 vWorldPosition;\",\n\t\n\t\t\t\"vec3 cameraPos = vec3(0., 0., 0.);\",\n\t\t\t\"// uniform sampler2D sDiffuse;\",\n\t\t\t\"// const float turbidity = 10.0; //\",\n\t\t\t\"// const float reileigh = 2.; //\",\n\t\t\t\"// const float luminance = 1.0; //\",\n\t\t\t\"// const float mieCoefficient = 0.005;\",\n\t\t\t\"// const float mieDirectionalG = 0.8;\",\n\t\n\t\t\t\"uniform float luminance;\",\n\t\t\t\"uniform float turbidity;\",\n\t\t\t\"uniform float reileigh;\",\n\t\t\t\"uniform float mieCoefficient;\",\n\t\t\t\"uniform float mieDirectionalG;\",\n\t\n\t\t\t\"// constants for atmospheric scattering\",\n\t\t\t\"const float e = 2.71828182845904523536028747135266249775724709369995957;\",\n\t\t\t\"const float pi = 3.141592653589793238462643383279502884197169;\",\n\t\n\t\t\t\"const float n = 1.0003; // refractive index of air\",\n\t\t\t\"const float N = 2.545E25; // number of molecules per unit volume for air at\",\n\t\t\t\t\t\t\t\t\t\"// 288.15K and 1013mb (sea level -45 celsius)\",\n\t\t\t\"const float pn = 0.035;\t// depolatization factor for standard air\",\n\t\n\t\t\t\"// wavelength of used primaries, according to preetham\",\n\t\t\t\"const vec3 lambda = vec3(680E-9, 550E-9, 450E-9);\",\n\t\n\t\t\t\"// mie stuff\",\n\t\t\t\"// K coefficient for the primaries\",\n\t\t\t\"const vec3 K = vec3(0.686, 0.678, 0.666);\",\n\t\t\t\"const float v = 4.0;\",\n\t\n\t\t\t\"// optical length at zenith for molecules\",\n\t\t\t\"const float rayleighZenithLength = 8.4E3;\",\n\t\t\t\"const float mieZenithLength = 1.25E3;\",\n\t\t\t\"const vec3 up = vec3(0.0, 1.0, 0.0);\",\n\t\n\t\t\t\"const float EE = 1000.0;\",\n\t\t\t\"const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\",\n\t\t\t\"// 66 arc seconds -> degrees, and the cosine of that\",\n\t\n\t\t\t\"// earth shadow hack\",\n\t\t\t\"const float cutoffAngle = pi/1.95;\",\n\t\t\t\"const float steepness = 1.5;\",\n\t\n\t\n\t\t\t\"vec3 totalRayleigh(vec3 lambda)\",\n\t\t\t\"{\",\n\t\t\t\t\"return (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));\",\n\t\t\t\"}\",\n\t\n\t\t\t// see http://blenderartists.org/forum/showthread.php?321110-Shaders-and-Skybox-madness\n\t\t\t\"// A simplied version of the total Reayleigh scattering to works on browsers that use ANGLE\",\n\t\t\t\"vec3 simplifiedRayleigh()\",\n\t\t\t\"{\",\n\t\t\t\t\"return 0.0005 / vec3(94, 40, 18);\",\n\t\t\t\t// return 0.00054532832366 / (3.0 * 2.545E25 * pow(vec3(680E-9, 550E-9, 450E-9), vec3(4.0)) * 6.245);\n\t\t\t\"}\",\n\t\n\t\t\t\"float rayleighPhase(float cosTheta)\",\n\t\t\t\"{\t \",\n\t\t\t\t\"return (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\t\"//\treturn (1.0 / (3.0*pi)) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\t\"//\treturn (3.0 / 4.0) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\t\"}\",\n\t\n\t\t\t\"vec3 totalMie(vec3 lambda, vec3 K, float T)\",\n\t\t\t\"{\",\n\t\t\t\t\"float c = (0.2 * T ) * 10E-18;\",\n\t\t\t\t\"return 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;\",\n\t\t\t\"}\",\n\t\n\t\t\t\"float hgPhase(float cosTheta, float g)\",\n\t\t\t\"{\",\n\t\t\t\t\"return (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));\",\n\t\t\t\"}\",\n\t\n\t\t\t\"float sunIntensity(float zenithAngleCos)\",\n\t\t\t\"{\",\n\t\t\t// This function originally used `exp(n)`, but it returns an incorrect value\n\t\t\t// on Samsung S6 phones. So it has been replaced with the equivalent `pow(e, n)`.\n\t\t\t// See https://github.com/mrdoob/three.js/issues/8382\n\t\t\t\t\"return EE * max(0.0, 1.0 - pow(e, -((cutoffAngle - acos(zenithAngleCos))/steepness)));\",\n\t\t\t\"}\",\n\t\n\t\t\t\"// float logLuminance(vec3 c)\",\n\t\t\t\"// {\",\n\t\t\t\"// \treturn log(c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722);\",\n\t\t\t\"// }\",\n\t\n\t\t\t\"// Filmic ToneMapping http://filmicgames.com/archives/75\",\n\t\t\t\"float A = 0.15;\",\n\t\t\t\"float B = 0.50;\",\n\t\t\t\"float C = 0.10;\",\n\t\t\t\"float D = 0.20;\",\n\t\t\t\"float E = 0.02;\",\n\t\t\t\"float F = 0.30;\",\n\t\t\t\"float W = 1000.0;\",\n\t\n\t\t\t\"vec3 Uncharted2Tonemap(vec3 x)\",\n\t\t\t\"{\",\n\t\t\t   \"return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\",\n\t\t\t\"}\",\n\t\n\t\n\t\t\t\"void main() \",\n\t\t\t\"{\",\n\t\t\t\t\"float sunfade = 1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);\",\n\t\n\t\t\t\t\"// luminance =  1.0 ;// vWorldPosition.y / 450000. + 0.5; //sunPosition.y / 450000. * 1. + 0.5;\",\n\t\n\t\t\t\t \"// gl_FragColor = vec4(sunfade, sunfade, sunfade, 1.0);\",\n\t\n\t\t\t\t\"float reileighCoefficient = reileigh - (1.0* (1.0-sunfade));\",\n\t\n\t\t\t\t\"vec3 sunDirection = normalize(sunPosition);\",\n\t\n\t\t\t\t\"float sunE = sunIntensity(dot(sunDirection, up));\",\n\t\n\t\t\t\t\"// extinction (absorbtion + out scattering) \",\n\t\t\t\t\"// rayleigh coefficients\",\n\t\n\t\t\t\t// \"vec3 betaR = totalRayleigh(lambda) * reileighCoefficient;\",\n\t\t\t\t\"vec3 betaR = simplifiedRayleigh() * reileighCoefficient;\",\n\t\n\t\t\t\t\"// mie coefficients\",\n\t\t\t\t\"vec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;\",\n\t\n\t\t\t\t\"// optical length\",\n\t\t\t\t\"// cutoff angle at 90 to avoid singularity in next formula.\",\n\t\t\t\t\"float zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPos))));\",\n\t\t\t\t\"float sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\",\n\t\t\t\t\"float sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\",\n\t\n\t\n\t\n\t\t\t\t\"// combined extinction factor\t\",\n\t\t\t\t\"vec3 Fex = exp(-(betaR * sR + betaM * sM));\",\n\t\n\t\t\t\t\"// in scattering\",\n\t\t\t\t\"float cosTheta = dot(normalize(vWorldPosition - cameraPos), sunDirection);\",\n\t\n\t\t\t\t\"float rPhase = rayleighPhase(cosTheta*0.5+0.5);\",\n\t\t\t\t\"vec3 betaRTheta = betaR * rPhase;\",\n\t\n\t\t\t\t\"float mPhase = hgPhase(cosTheta, mieDirectionalG);\",\n\t\t\t\t\"vec3 betaMTheta = betaM * mPhase;\",\n\t\n\t\n\t\t\t\t\"vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));\",\n\t\t\t\t\"Lin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up, sunDirection),5.0),0.0,1.0));\",\n\t\n\t\t\t\t\"//nightsky\",\n\t\t\t\t\"vec3 direction = normalize(vWorldPosition - cameraPos);\",\n\t\t\t\t\"float theta = acos(direction.y); // elevation --> y-axis, [-pi/2, pi/2]\",\n\t\t\t\t\"float phi = atan(direction.z, direction.x); // azimuth --> x-axis [-pi/2, pi/2]\",\n\t\t\t\t\"vec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);\",\n\t\t\t\t\"// vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;\",\n\t\t\t\t\"vec3 L0 = vec3(0.1) * Fex;\",\n\t\n\t\t\t\t\"// composition + solar disc\",\n\t\t\t\t\"//if (cosTheta > sunAngularDiameterCos)\",\n\t\t\t\t\"float sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);\",\n\t\t\t\t\"// if (normalize(vWorldPosition - cameraPos).y>0.0)\",\n\t\t\t\t\"L0 += (sunE * 19000.0 * Fex)*sundisk;\",\n\t\n\t\n\t\t\t\t\"vec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));\",\n\t\n\t\t\t\t\"vec3 texColor = (Lin+L0);   \",\n\t\t\t\t\"texColor *= 0.04 ;\",\n\t\t\t\t\"texColor += vec3(0.0,0.001,0.0025)*0.3;\",\n\t\n\t\t\t\t\"float g_fMaxLuminance = 1.0;\",\n\t\t\t\t\"float fLumScaled = 0.1 / luminance;     \",\n\t\t\t\t\"float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (g_fMaxLuminance * g_fMaxLuminance)))) / (1.0 + fLumScaled); \",\n\t\n\t\t\t\t\"float ExposureBias = fLumCompressed;\",\n\t\n\t\t\t\t\"vec3 curr = Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);\",\n\t\t\t\t\"vec3 color = curr*whiteScale;\",\n\t\n\t\t\t\t\"vec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));\",\n\t\n\t\n\t\t\t\t\"gl_FragColor.rgb = retColor;\",\n\t\n\t\t\t\t\"gl_FragColor.a = 1.0;\",\n\t\t\t\"}\",\n\t\n\t\t].join( \"\\n\" )\n\t\n\t};\n\t\n\tTHREE.Sky = function () {\n\t\n\t\tvar skyShader = THREE.ShaderLib[ \"sky\" ];\n\t\tvar skyUniforms = THREE.UniformsUtils.clone( skyShader.uniforms );\n\t\n\t\tvar skyMat = new THREE.ShaderMaterial( {\n\t\t\tfragmentShader: skyShader.fragmentShader,\n\t\t\tvertexShader: skyShader.vertexShader,\n\t\t\tuniforms: skyUniforms,\n\t\t\tside: THREE.BackSide\n\t\t} );\n\t\n\t\tvar skyGeo = new THREE.SphereBufferGeometry( 450000, 32, 15 );\n\t\tvar skyMesh = new THREE.Mesh( skyGeo, skyMat );\n\t\n\t\n\t\t// Expose variables\n\t\tthis.mesh = skyMesh;\n\t\tthis.uniforms = skyUniforms;\n\t\n\t};\n\t\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar assign        = __webpack_require__(50)\n\t  , normalizeOpts = __webpack_require__(48)\n\t  , isCallable    = __webpack_require__(49)\n\t  , contains      = __webpack_require__(51)\n\t\n\t  , d;\n\t\n\td = module.exports = function (dscr, value/*, options*/) {\n\t\tvar c, e, w, options, desc;\n\t\tif ((arguments.length < 2) || (typeof dscr !== 'string')) {\n\t\t\toptions = value;\n\t\t\tvalue = dscr;\n\t\t\tdscr = null;\n\t\t} else {\n\t\t\toptions = arguments[2];\n\t\t}\n\t\tif (dscr == null) {\n\t\t\tc = w = true;\n\t\t\te = false;\n\t\t} else {\n\t\t\tc = contains.call(dscr, 'c');\n\t\t\te = contains.call(dscr, 'e');\n\t\t\tw = contains.call(dscr, 'w');\n\t\t}\n\t\n\t\tdesc = { value: value, configurable: c, enumerable: e, writable: w };\n\t\treturn !options ? desc : assign(normalizeOpts(options), desc);\n\t};\n\t\n\td.gs = function (dscr, get, set/*, options*/) {\n\t\tvar c, e, options, desc;\n\t\tif (typeof dscr !== 'string') {\n\t\t\toptions = set;\n\t\t\tset = get;\n\t\t\tget = dscr;\n\t\t\tdscr = null;\n\t\t} else {\n\t\t\toptions = arguments[3];\n\t\t}\n\t\tif (get == null) {\n\t\t\tget = undefined;\n\t\t} else if (!isCallable(get)) {\n\t\t\toptions = get;\n\t\t\tget = set = undefined;\n\t\t} else if (set == null) {\n\t\t\tset = undefined;\n\t\t} else if (!isCallable(set)) {\n\t\t\toptions = set;\n\t\t\tset = undefined;\n\t\t}\n\t\tif (dscr == null) {\n\t\t\tc = true;\n\t\t\te = false;\n\t\t} else {\n\t\t\tc = contains.call(dscr, 'c');\n\t\t\te = contains.call(dscr, 'e');\n\t\t}\n\t\n\t\tdesc = { get: get, set: set, configurable: c, enumerable: e };\n\t\treturn !options ? desc : assign(normalizeOpts(options), desc);\n\t};\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = function (fn) {\n\t\tif (typeof fn !== 'function') throw new TypeError(fn + \" is not a function\");\n\t\treturn fn;\n\t};\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.0 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/**\n\t * A specialized version of `_.forEach` for arrays without support for callback\n\t * shorthands or `this` binding.\n\t *\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Array} Returns `array`.\n\t */\n\tfunction arrayEach(array, iteratee) {\n\t  var index = -1,\n\t      length = array.length;\n\t\n\t  while (++index < length) {\n\t    if (iteratee(array[index], index, array) === false) {\n\t      break;\n\t    }\n\t  }\n\t  return array;\n\t}\n\t\n\tmodule.exports = arrayEach;\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar keys = __webpack_require__(54);\n\t\n\t/**\n\t * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n\t * of an array-like value.\n\t */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/**\n\t * The base implementation of `_.forEach` without support for callback\n\t * shorthands and `this` binding.\n\t *\n\t * @private\n\t * @param {Array|Object|string} collection The collection to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Array|Object|string} Returns `collection`.\n\t */\n\tvar baseEach = createBaseEach(baseForOwn);\n\t\n\t/**\n\t * The base implementation of `baseForIn` and `baseForOwn` which iterates\n\t * over `object` properties returned by `keysFunc` invoking `iteratee` for\n\t * each property. Iteratee functions may exit iteration early by explicitly\n\t * returning `false`.\n\t *\n\t * @private\n\t * @param {Object} object The object to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @param {Function} keysFunc The function to get the keys of `object`.\n\t * @returns {Object} Returns `object`.\n\t */\n\tvar baseFor = createBaseFor();\n\t\n\t/**\n\t * The base implementation of `_.forOwn` without support for callback\n\t * shorthands and `this` binding.\n\t *\n\t * @private\n\t * @param {Object} object The object to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction baseForOwn(object, iteratee) {\n\t  return baseFor(object, iteratee, keys);\n\t}\n\t\n\t/**\n\t * The base implementation of `_.property` without support for deep paths.\n\t *\n\t * @private\n\t * @param {string} key The key of the property to get.\n\t * @returns {Function} Returns the new function.\n\t */\n\tfunction baseProperty(key) {\n\t  return function(object) {\n\t    return object == null ? undefined : object[key];\n\t  };\n\t}\n\t\n\t/**\n\t * Creates a `baseEach` or `baseEachRight` function.\n\t *\n\t * @private\n\t * @param {Function} eachFunc The function to iterate over a collection.\n\t * @param {boolean} [fromRight] Specify iterating from right to left.\n\t * @returns {Function} Returns the new base function.\n\t */\n\tfunction createBaseEach(eachFunc, fromRight) {\n\t  return function(collection, iteratee) {\n\t    var length = collection ? getLength(collection) : 0;\n\t    if (!isLength(length)) {\n\t      return eachFunc(collection, iteratee);\n\t    }\n\t    var index = fromRight ? length : -1,\n\t        iterable = toObject(collection);\n\t\n\t    while ((fromRight ? index-- : ++index < length)) {\n\t      if (iteratee(iterable[index], index, iterable) === false) {\n\t        break;\n\t      }\n\t    }\n\t    return collection;\n\t  };\n\t}\n\t\n\t/**\n\t * Creates a base function for `_.forIn` or `_.forInRight`.\n\t *\n\t * @private\n\t * @param {boolean} [fromRight] Specify iterating from right to left.\n\t * @returns {Function} Returns the new base function.\n\t */\n\tfunction createBaseFor(fromRight) {\n\t  return function(object, iteratee, keysFunc) {\n\t    var iterable = toObject(object),\n\t        props = keysFunc(object),\n\t        length = props.length,\n\t        index = fromRight ? length : -1;\n\t\n\t    while ((fromRight ? index-- : ++index < length)) {\n\t      var key = props[index];\n\t      if (iteratee(iterable[key], key, iterable) === false) {\n\t        break;\n\t      }\n\t    }\n\t    return object;\n\t  };\n\t}\n\t\n\t/**\n\t * Gets the \"length\" property value of `object`.\n\t *\n\t * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n\t * that affects Safari on at least iOS 8.1-8.3 ARM64.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {*} Returns the \"length\" value.\n\t */\n\tvar getLength = baseProperty('length');\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * Converts `value` to an object if it's not one.\n\t *\n\t * @private\n\t * @param {*} value The value to process.\n\t * @returns {Object} Returns the object.\n\t */\n\tfunction toObject(value) {\n\t  return isObject(value) ? value : Object(value);\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\tmodule.exports = baseEach;\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/**\n\t * A specialized version of `baseCallback` which only supports `this` binding\n\t * and specifying the number of arguments to provide to `func`.\n\t *\n\t * @private\n\t * @param {Function} func The function to bind.\n\t * @param {*} thisArg The `this` binding of `func`.\n\t * @param {number} [argCount] The number of arguments to provide to `func`.\n\t * @returns {Function} Returns the callback.\n\t */\n\tfunction bindCallback(func, thisArg, argCount) {\n\t  if (typeof func != 'function') {\n\t    return identity;\n\t  }\n\t  if (thisArg === undefined) {\n\t    return func;\n\t  }\n\t  switch (argCount) {\n\t    case 1: return function(value) {\n\t      return func.call(thisArg, value);\n\t    };\n\t    case 3: return function(value, index, collection) {\n\t      return func.call(thisArg, value, index, collection);\n\t    };\n\t    case 4: return function(accumulator, value, index, collection) {\n\t      return func.call(thisArg, accumulator, value, index, collection);\n\t    };\n\t    case 5: return function(value, other, key, object, source) {\n\t      return func.call(thisArg, value, other, key, object, source);\n\t    };\n\t  }\n\t  return function() {\n\t    return func.apply(thisArg, arguments);\n\t  };\n\t}\n\t\n\t/**\n\t * This method returns the first argument provided to it.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Utility\n\t * @param {*} value Any value.\n\t * @returns {*} Returns `value`.\n\t * @example\n\t *\n\t * var object = { 'user': 'fred' };\n\t *\n\t * _.identity(object) === object;\n\t * // => true\n\t */\n\tfunction identity(value) {\n\t  return value;\n\t}\n\t\n\tmodule.exports = bindCallback;\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/** `Object#toString` result references. */\n\tvar arrayTag = '[object Array]',\n\t    funcTag = '[object Function]';\n\t\n\t/** Used to detect host constructors (Safari > 5). */\n\tvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\t\n\t/**\n\t * Checks if `value` is object-like.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\t\n\t/** Used for native method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/** Used to resolve the decompiled source of functions. */\n\tvar fnToString = Function.prototype.toString;\n\t\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t/**\n\t * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objToString = objectProto.toString;\n\t\n\t/** Used to detect if a method is native. */\n\tvar reIsNative = RegExp('^' +\n\t  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n\t  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n\t);\n\t\n\t/* Native method references for those with the same name as other `lodash` methods. */\n\tvar nativeIsArray = getNative(Array, 'isArray');\n\t\n\t/**\n\t * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n\t * of an array-like value.\n\t */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/**\n\t * Gets the native function at `key` of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {string} key The key of the method to get.\n\t * @returns {*} Returns the function if it's native, else `undefined`.\n\t */\n\tfunction getNative(object, key) {\n\t  var value = object == null ? undefined : object[key];\n\t  return isNative(value) ? value : undefined;\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as an `Array` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n\t * @example\n\t *\n\t * _.isArray([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArray(function() { return arguments; }());\n\t * // => false\n\t */\n\tvar isArray = nativeIsArray || function(value) {\n\t  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;\n\t};\n\t\n\t/**\n\t * Checks if `value` is classified as a `Function` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n\t * @example\n\t *\n\t * _.isFunction(_);\n\t * // => true\n\t *\n\t * _.isFunction(/abc/);\n\t * // => false\n\t */\n\tfunction isFunction(value) {\n\t  // The use of `Object#toString` avoids issues with the `typeof` operator\n\t  // in older versions of Chrome and Safari which return 'function' for regexes\n\t  // and Safari 8 equivalents which return 'object' for typed array constructors.\n\t  return isObject(value) && objToString.call(value) == funcTag;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Checks if `value` is a native function.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n\t * @example\n\t *\n\t * _.isNative(Array.prototype.push);\n\t * // => true\n\t *\n\t * _.isNative(_);\n\t * // => false\n\t */\n\tfunction isNative(value) {\n\t  if (value == null) {\n\t    return false;\n\t  }\n\t  if (isFunction(value)) {\n\t    return reIsNative.test(fnToString.call(value));\n\t  }\n\t  return isObjectLike(value) && reIsHostCtor.test(value);\n\t}\n\t\n\tmodule.exports = isArray;\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.2.0 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar baseCopy = __webpack_require__(57),\n\t    keys = __webpack_require__(47);\n\t\n\t/**\n\t * The base implementation of `_.assign` without support for argument juggling,\n\t * multiple sources, and `customizer` functions.\n\t *\n\t * @private\n\t * @param {Object} object The destination object.\n\t * @param {Object} source The source object.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction baseAssign(object, source) {\n\t  return source == null\n\t    ? object\n\t    : baseCopy(source, keys(source), object);\n\t}\n\t\n\tmodule.exports = baseAssign;\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.1.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar bindCallback = __webpack_require__(58),\n\t    isIterateeCall = __webpack_require__(59),\n\t    restParam = __webpack_require__(60);\n\t\n\t/**\n\t * Creates a function that assigns properties of source object(s) to a given\n\t * destination object.\n\t *\n\t * **Note:** This function is used to create `_.assign`, `_.defaults`, and `_.merge`.\n\t *\n\t * @private\n\t * @param {Function} assigner The function to assign values.\n\t * @returns {Function} Returns the new assigner function.\n\t */\n\tfunction createAssigner(assigner) {\n\t  return restParam(function(object, sources) {\n\t    var index = -1,\n\t        length = object == null ? 0 : sources.length,\n\t        customizer = length > 2 ? sources[length - 2] : undefined,\n\t        guard = length > 2 ? sources[2] : undefined,\n\t        thisArg = length > 1 ? sources[length - 1] : undefined;\n\t\n\t    if (typeof customizer == 'function') {\n\t      customizer = bindCallback(customizer, thisArg, 5);\n\t      length -= 2;\n\t    } else {\n\t      customizer = typeof thisArg == 'function' ? thisArg : undefined;\n\t      length -= (customizer ? 1 : 0);\n\t    }\n\t    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n\t      customizer = length < 3 ? undefined : customizer;\n\t      length = 1;\n\t    }\n\t    while (++index < length) {\n\t      var source = sources[index];\n\t      if (source) {\n\t        assigner(object, source, customizer);\n\t      }\n\t    }\n\t    return object;\n\t  });\n\t}\n\t\n\tmodule.exports = createAssigner;\n\n\n/***/ },\n/* 47 */\n[70, 61, 62, 63],\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar forEach = Array.prototype.forEach, create = Object.create;\n\t\n\tvar process = function (src, obj) {\n\t\tvar key;\n\t\tfor (key in src) obj[key] = src[key];\n\t};\n\t\n\tmodule.exports = function (options/*, …options*/) {\n\t\tvar result = create(null);\n\t\tforEach.call(arguments, function (options) {\n\t\t\tif (options == null) return;\n\t\t\tprocess(Object(options), result);\n\t\t});\n\t\treturn result;\n\t};\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Deprecated\n\t\n\t'use strict';\n\t\n\tmodule.exports = function (obj) { return typeof obj === 'function'; };\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(52)()\n\t\t? Object.assign\n\t\t: __webpack_require__(53);\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(55)()\n\t\t? String.prototype.contains\n\t\t: __webpack_require__(56);\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = function () {\n\t\tvar assign = Object.assign, obj;\n\t\tif (typeof assign !== 'function') return false;\n\t\tobj = { foo: 'raz' };\n\t\tassign(obj, { bar: 'dwa' }, { trzy: 'trzy' });\n\t\treturn (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';\n\t};\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar keys  = __webpack_require__(65)\n\t  , value = __webpack_require__(64)\n\t\n\t  , max = Math.max;\n\t\n\tmodule.exports = function (dest, src/*, …srcn*/) {\n\t\tvar error, i, l = max(arguments.length, 2), assign;\n\t\tdest = Object(value(dest));\n\t\tassign = function (key) {\n\t\t\ttry { dest[key] = src[key]; } catch (e) {\n\t\t\t\tif (!error) error = e;\n\t\t\t}\n\t\t};\n\t\tfor (i = 1; i < l; ++i) {\n\t\t\tsrc = arguments[i];\n\t\t\tkeys(src).forEach(assign);\n\t\t}\n\t\tif (error !== undefined) throw error;\n\t\treturn dest;\n\t};\n\n\n/***/ },\n/* 54 */\n[70, 67, 66, 44],\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar str = 'razdwatrzy';\n\t\n\tmodule.exports = function () {\n\t\tif (typeof str.contains !== 'function') return false;\n\t\treturn ((str.contains('dwa') === true) && (str.contains('foo') === false));\n\t};\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar indexOf = String.prototype.indexOf;\n\t\n\tmodule.exports = function (searchString/*, position*/) {\n\t\treturn indexOf.call(this, searchString, arguments[1]) > -1;\n\t};\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/**\n\t * Copies properties of `source` to `object`.\n\t *\n\t * @private\n\t * @param {Object} source The object to copy properties from.\n\t * @param {Array} props The property names to copy.\n\t * @param {Object} [object={}] The object to copy properties to.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction baseCopy(source, props, object) {\n\t  object || (object = {});\n\t\n\t  var index = -1,\n\t      length = props.length;\n\t\n\t  while (++index < length) {\n\t    var key = props[index];\n\t    object[key] = source[key];\n\t  }\n\t  return object;\n\t}\n\t\n\tmodule.exports = baseCopy;\n\n\n/***/ },\n/* 58 */\n43,\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.9 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/** Used to detect unsigned integer values. */\n\tvar reIsUint = /^\\d+$/;\n\t\n\t/**\n\t * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n\t * of an array-like value.\n\t */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/**\n\t * The base implementation of `_.property` without support for deep paths.\n\t *\n\t * @private\n\t * @param {string} key The key of the property to get.\n\t * @returns {Function} Returns the new function.\n\t */\n\tfunction baseProperty(key) {\n\t  return function(object) {\n\t    return object == null ? undefined : object[key];\n\t  };\n\t}\n\t\n\t/**\n\t * Gets the \"length\" property value of `object`.\n\t *\n\t * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n\t * that affects Safari on at least iOS 8.1-8.3 ARM64.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {*} Returns the \"length\" value.\n\t */\n\tvar getLength = baseProperty('length');\n\t\n\t/**\n\t * Checks if `value` is array-like.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t */\n\tfunction isArrayLike(value) {\n\t  return value != null && isLength(getLength(value));\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like index.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n\t * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n\t */\n\tfunction isIndex(value, length) {\n\t  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n\t  length = length == null ? MAX_SAFE_INTEGER : length;\n\t  return value > -1 && value % 1 == 0 && value < length;\n\t}\n\t\n\t/**\n\t * Checks if the provided arguments are from an iteratee call.\n\t *\n\t * @private\n\t * @param {*} value The potential iteratee value argument.\n\t * @param {*} index The potential iteratee index or key argument.\n\t * @param {*} object The potential iteratee object argument.\n\t * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.\n\t */\n\tfunction isIterateeCall(value, index, object) {\n\t  if (!isObject(object)) {\n\t    return false;\n\t  }\n\t  var type = typeof index;\n\t  if (type == 'number'\n\t      ? (isArrayLike(object) && isIndex(index, object.length))\n\t      : (type == 'string' && index in object)) {\n\t    var other = object[index];\n\t    return value === value ? (value === other) : (other !== other);\n\t  }\n\t  return false;\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\tmodule.exports = isIterateeCall;\n\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.6.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/** Used as the `TypeError` message for \"Functions\" methods. */\n\tvar FUNC_ERROR_TEXT = 'Expected a function';\n\t\n\t/* Native method references for those with the same name as other `lodash` methods. */\n\tvar nativeMax = Math.max;\n\t\n\t/**\n\t * Creates a function that invokes `func` with the `this` binding of the\n\t * created function and arguments from `start` and beyond provided as an array.\n\t *\n\t * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Function\n\t * @param {Function} func The function to apply a rest parameter to.\n\t * @param {number} [start=func.length-1] The start position of the rest parameter.\n\t * @returns {Function} Returns the new function.\n\t * @example\n\t *\n\t * var say = _.restParam(function(what, names) {\n\t *   return what + ' ' + _.initial(names).join(', ') +\n\t *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n\t * });\n\t *\n\t * say('hello', 'fred', 'barney', 'pebbles');\n\t * // => 'hello fred, barney, & pebbles'\n\t */\n\tfunction restParam(func, start) {\n\t  if (typeof func != 'function') {\n\t    throw new TypeError(FUNC_ERROR_TEXT);\n\t  }\n\t  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);\n\t  return function() {\n\t    var args = arguments,\n\t        index = -1,\n\t        length = nativeMax(args.length - start, 0),\n\t        rest = Array(length);\n\t\n\t    while (++index < length) {\n\t      rest[index] = args[start + index];\n\t    }\n\t    switch (start) {\n\t      case 0: return func.call(this, rest);\n\t      case 1: return func.call(this, args[0], rest);\n\t      case 2: return func.call(this, args[0], args[1], rest);\n\t    }\n\t    var otherArgs = Array(start + 1);\n\t    index = -1;\n\t    while (++index < start) {\n\t      otherArgs[index] = args[index];\n\t    }\n\t    otherArgs[start] = rest;\n\t    return func.apply(this, otherArgs);\n\t  };\n\t}\n\t\n\tmodule.exports = restParam;\n\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.9.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/** `Object#toString` result references. */\n\tvar funcTag = '[object Function]';\n\t\n\t/** Used to detect host constructors (Safari > 5). */\n\tvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\t\n\t/**\n\t * Checks if `value` is object-like.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\t\n\t/** Used for native method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/** Used to resolve the decompiled source of functions. */\n\tvar fnToString = Function.prototype.toString;\n\t\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t/**\n\t * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objToString = objectProto.toString;\n\t\n\t/** Used to detect if a method is native. */\n\tvar reIsNative = RegExp('^' +\n\t  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n\t  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n\t);\n\t\n\t/**\n\t * Gets the native function at `key` of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {string} key The key of the method to get.\n\t * @returns {*} Returns the function if it's native, else `undefined`.\n\t */\n\tfunction getNative(object, key) {\n\t  var value = object == null ? undefined : object[key];\n\t  return isNative(value) ? value : undefined;\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as a `Function` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n\t * @example\n\t *\n\t * _.isFunction(_);\n\t * // => true\n\t *\n\t * _.isFunction(/abc/);\n\t * // => false\n\t */\n\tfunction isFunction(value) {\n\t  // The use of `Object#toString` avoids issues with the `typeof` operator\n\t  // in older versions of Chrome and Safari which return 'function' for regexes\n\t  // and Safari 8 equivalents which return 'object' for typed array constructors.\n\t  return isObject(value) && objToString.call(value) == funcTag;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Checks if `value` is a native function.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n\t * @example\n\t *\n\t * _.isNative(Array.prototype.push);\n\t * // => true\n\t *\n\t * _.isNative(_);\n\t * // => false\n\t */\n\tfunction isNative(value) {\n\t  if (value == null) {\n\t    return false;\n\t  }\n\t  if (isFunction(value)) {\n\t    return reIsNative.test(fnToString.call(value));\n\t  }\n\t  return isObjectLike(value) && reIsHostCtor.test(value);\n\t}\n\t\n\tmodule.exports = getNative;\n\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modularize exports=\"npm\" -o ./`\n\t * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n\t * Released under MIT license <https://lodash.com/license>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t */\n\t\n\t/** Used as references for various `Number` constants. */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/** `Object#toString` result references. */\n\tvar argsTag = '[object Arguments]',\n\t    funcTag = '[object Function]',\n\t    genTag = '[object GeneratorFunction]';\n\t\n\t/** Used for built-in method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t/**\n\t * Used to resolve the\n\t * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objectToString = objectProto.toString;\n\t\n\t/** Built-in value references. */\n\tvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\t\n\t/**\n\t * Checks if `value` is likely an `arguments` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n\t *  else `false`.\n\t * @example\n\t *\n\t * _.isArguments(function() { return arguments; }());\n\t * // => true\n\t *\n\t * _.isArguments([1, 2, 3]);\n\t * // => false\n\t */\n\tfunction isArguments(value) {\n\t  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n\t  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n\t    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n\t}\n\t\n\t/**\n\t * Checks if `value` is array-like. A value is considered array-like if it's\n\t * not a function and has a `value.length` that's an integer greater than or\n\t * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t * @example\n\t *\n\t * _.isArrayLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArrayLike(document.body.children);\n\t * // => true\n\t *\n\t * _.isArrayLike('abc');\n\t * // => true\n\t *\n\t * _.isArrayLike(_.noop);\n\t * // => false\n\t */\n\tfunction isArrayLike(value) {\n\t  return value != null && isLength(value.length) && !isFunction(value);\n\t}\n\t\n\t/**\n\t * This method is like `_.isArrayLike` except that it also checks if `value`\n\t * is an object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an array-like object,\n\t *  else `false`.\n\t * @example\n\t *\n\t * _.isArrayLikeObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArrayLikeObject(document.body.children);\n\t * // => true\n\t *\n\t * _.isArrayLikeObject('abc');\n\t * // => false\n\t *\n\t * _.isArrayLikeObject(_.noop);\n\t * // => false\n\t */\n\tfunction isArrayLikeObject(value) {\n\t  return isObjectLike(value) && isArrayLike(value);\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as a `Function` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n\t * @example\n\t *\n\t * _.isFunction(_);\n\t * // => true\n\t *\n\t * _.isFunction(/abc/);\n\t * // => false\n\t */\n\tfunction isFunction(value) {\n\t  // The use of `Object#toString` avoids issues with the `typeof` operator\n\t  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n\t  var tag = isObject(value) ? objectToString.call(value) : '';\n\t  return tag == funcTag || tag == genTag;\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This method is loosely based on\n\t * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t * @example\n\t *\n\t * _.isLength(3);\n\t * // => true\n\t *\n\t * _.isLength(Number.MIN_VALUE);\n\t * // => false\n\t *\n\t * _.isLength(Infinity);\n\t * // => false\n\t *\n\t * _.isLength('3');\n\t * // => false\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' &&\n\t    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the\n\t * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n\t * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(_.noop);\n\t * // => true\n\t *\n\t * _.isObject(null);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Checks if `value` is object-like. A value is object-like if it's not `null`\n\t * and has a `typeof` result of \"object\".\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t * @example\n\t *\n\t * _.isObjectLike({});\n\t * // => true\n\t *\n\t * _.isObjectLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObjectLike(_.noop);\n\t * // => false\n\t *\n\t * _.isObjectLike(null);\n\t * // => false\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\t\n\tmodule.exports = isArguments;\n\n\n/***/ },\n/* 63 */\n44,\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = function (value) {\n\t\tif (value == null) throw new TypeError(\"Cannot use null or undefined\");\n\t\treturn value;\n\t};\n\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(68)()\n\t\t? Object.keys\n\t\t: __webpack_require__(69);\n\n\n/***/ },\n/* 66 */\n62,\n/* 67 */\n61,\n/* 68 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = function () {\n\t\ttry {\n\t\t\tObject.keys('primitive');\n\t\t\treturn true;\n\t\t} catch (e) { return false; }\n\t};\n\n\n/***/ },\n/* 69 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar keys = Object.keys;\n\t\n\tmodule.exports = function (object) {\n\t\treturn keys(object == null ? object : Object(object));\n\t};\n\n\n/***/ },\n/* 70 */\n/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {\n\n\t/**\n\t * lodash 3.1.2 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar getNative = __webpack_require__(__webpack_module_template_argument_0__),\n\t    isArguments = __webpack_require__(__webpack_module_template_argument_1__),\n\t    isArray = __webpack_require__(__webpack_module_template_argument_2__);\n\t\n\t/** Used to detect unsigned integer values. */\n\tvar reIsUint = /^\\d+$/;\n\t\n\t/** Used for native method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t/* Native method references for those with the same name as other `lodash` methods. */\n\tvar nativeKeys = getNative(Object, 'keys');\n\t\n\t/**\n\t * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n\t * of an array-like value.\n\t */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/**\n\t * The base implementation of `_.property` without support for deep paths.\n\t *\n\t * @private\n\t * @param {string} key The key of the property to get.\n\t * @returns {Function} Returns the new function.\n\t */\n\tfunction baseProperty(key) {\n\t  return function(object) {\n\t    return object == null ? undefined : object[key];\n\t  };\n\t}\n\t\n\t/**\n\t * Gets the \"length\" property value of `object`.\n\t *\n\t * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n\t * that affects Safari on at least iOS 8.1-8.3 ARM64.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {*} Returns the \"length\" value.\n\t */\n\tvar getLength = baseProperty('length');\n\t\n\t/**\n\t * Checks if `value` is array-like.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t */\n\tfunction isArrayLike(value) {\n\t  return value != null && isLength(getLength(value));\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like index.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n\t * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n\t */\n\tfunction isIndex(value, length) {\n\t  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n\t  length = length == null ? MAX_SAFE_INTEGER : length;\n\t  return value > -1 && value % 1 == 0 && value < length;\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * A fallback implementation of `Object.keys` which creates an array of the\n\t * own enumerable property names of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t */\n\tfunction shimKeys(object) {\n\t  var props = keysIn(object),\n\t      propsLength = props.length,\n\t      length = propsLength && object.length;\n\t\n\t  var allowIndexes = !!length && isLength(length) &&\n\t    (isArray(object) || isArguments(object));\n\t\n\t  var index = -1,\n\t      result = [];\n\t\n\t  while (++index < propsLength) {\n\t    var key = props[index];\n\t    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {\n\t      result.push(key);\n\t    }\n\t  }\n\t  return result;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Creates an array of the own enumerable property names of `object`.\n\t *\n\t * **Note:** Non-object values are coerced to objects. See the\n\t * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n\t * for more details.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Object\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t * @example\n\t *\n\t * function Foo() {\n\t *   this.a = 1;\n\t *   this.b = 2;\n\t * }\n\t *\n\t * Foo.prototype.c = 3;\n\t *\n\t * _.keys(new Foo);\n\t * // => ['a', 'b'] (iteration order is not guaranteed)\n\t *\n\t * _.keys('hi');\n\t * // => ['0', '1']\n\t */\n\tvar keys = !nativeKeys ? shimKeys : function(object) {\n\t  var Ctor = object == null ? undefined : object.constructor;\n\t  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||\n\t      (typeof object != 'function' && isArrayLike(object))) {\n\t    return shimKeys(object);\n\t  }\n\t  return isObject(object) ? nativeKeys(object) : [];\n\t};\n\t\n\t/**\n\t * Creates an array of the own and inherited enumerable property names of `object`.\n\t *\n\t * **Note:** Non-object values are coerced to objects.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Object\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t * @example\n\t *\n\t * function Foo() {\n\t *   this.a = 1;\n\t *   this.b = 2;\n\t * }\n\t *\n\t * Foo.prototype.c = 3;\n\t *\n\t * _.keysIn(new Foo);\n\t * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n\t */\n\tfunction keysIn(object) {\n\t  if (object == null) {\n\t    return [];\n\t  }\n\t  if (!isObject(object)) {\n\t    object = Object(object);\n\t  }\n\t  var length = object.length;\n\t  length = (length && isLength(length) &&\n\t    (isArray(object) || isArguments(object)) && length) || 0;\n\t\n\t  var Ctor = object.constructor,\n\t      index = -1,\n\t      isProto = typeof Ctor == 'function' && Ctor.prototype === object,\n\t      result = Array(length),\n\t      skipIndexes = length > 0;\n\t\n\t  while (++index < length) {\n\t    result[index] = (index + '');\n\t  }\n\t  for (var key in object) {\n\t    if (!(skipIndexes && isIndex(key, length)) &&\n\t        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n\t      result.push(key);\n\t    }\n\t  }\n\t  return result;\n\t}\n\t\n\tmodule.exports = keys;\n\n\n/***/ }\n/******/ ])))\n\n\n/** WEBPACK FOOTER **\n ** vr.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d668c44a558eab0535d8\n **/","(function () {\n\t'use strict';\n\n\t//global-ish declarations\n\tvar VR,\n\t\tNoSleep = require('nosleep').NoSleep,\n\t\tisMobile = require('ismobilejs');\n\n\tfunction initRequirements() {\n\t\t//load styles\n\t\trequire('!style!css!./css/style.css');\n\n\t\tVR = require('./vr');\n\t}\n\n\tfunction initialize() {\n\t\tinitRequirements();\n\n\t\t//todo: set up button/info elements\n\n//\t\tVR.init();\n\n        VR.noSleep = new NoSleep();\n\t\twindow.addEventListener('resize', VR.resize, false);\n\n\t\tif (!isMobile.any) {\n\t\t\tVR.disableOrientation();\n\t\t}\n\n\t\t/*\n\t\texport global things\n\t\t*/\n\t\twindow.VR = VR;\n\t\twindow.THREE = VR.THREE;\n\t}\n\n\tinitialize();\n//\tVR.start();\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/entry.js\n ** module id = 0\n ** module chunks = 0\n **/","(function () {\n\t'use strict';\n\n\t//constants\n\tvar NEAR = 1,\n\t\tFAR = 1000000,\n\n\t//global-ish declarations\n\t\tTHREE,\n\t\teventEmitter,\n\t\tmaterials = require('./materials'),\n\t\tnop = function () {},\n\t\trequestFullscreen = nop,\n\t\texitFullscreen = (\n\t\t\tdocument.exitFullscreen ||\n\t\t\tdocument.mozCancelFullScreen ||\n\t\t\tdocument.webkitExitFullscreen ||\n\t\t\tdocument.msExitFullscreen ||\n\t\t\tnop\n\t\t).bind(document),\n\t// Const\n\t\tMODE_CSS = 'css3d',\n\t\tMODE_CANVAS = 'canvas',\n\n\t//scene assets\n\t\tcamera,\n\t\tscene,\n\t\tbody,\n\t\trenderer,\n\t\taudioListener,\n\t\tvrControls,\n\t\tvrEffect,\n\t\tmouseControls,\n        autoRotateTimer = null,\n\t\traycaster,\n\t\ttarget,\n\n\t\tbodyWrapper,\n\t\tcameraWrapper,\n\n\t\tfloor,\n\n\t//state\n\t\tgoing = false,\n\t\tvrMode = false,\n\t\torientationEnabled,\n\t\torientationPossible = false,\n\n\t//exported object\n\t\tVR,\n\n\t\tVRObject = require('./vr-object'),\n\t\tobjectMethods = [\n\t\t\t'box',\n\t\t\t'cylinder',\n\t\t\t'torus',\n\t\t\t'sphere',\n\t\t\t'empty',\n\t\t\t'sound',\n\t\t\t'floor',\n\t\t\t'sky',\n\t\t\t'panorama',\n\t\t\t'image',\n\t\t\t'video',\n\t\t\t'text',\n\t\t\t'grid'\n\t\t],\n\n\t\t//todo: use a weak map or set instead\n\t\tvrObjects = [],\n\t\traycastable = [],\n\n\t\tlastTick = 0,\n        waitRenderInative = 0,\n\t\tanimationCallbacks = [];\n\n    var isSupportWebgl = (function () {\n        var canvas = document.createElement('canvas');\n        var gl = null;\n        var experimental = false;\n        try {\n            gl = canvas.getContext('webgl');\n        } catch (x) {\n            gl = null;\n        }\n\n        if (gl === null) {\n            try {\n                gl = canvas.getContext('experimental-webgl');\n                experimental = true;\n            } catch (x) {\n                gl = null;\n            }\n        }\n        return Boolean(gl);\n    })();\n\n    window.isSupportWebgl = isSupportWebgl;\n\n\tfunction isFullscreen() {\n\t\treturn !!(document.fullscreenElement ||\n\t\t\tdocument.mozFullScreenElement ||\n\t\t\tdocument.webkitFullscreenElement ||\n\t\t\tdocument.msFullscreenElement);\n\t}\n\n\tfunction fullScreenError() {\n\t\tvrMode = false;\n\t\tif (vrEffect) {\n\t\t\tvrEffect.exit();\n\t\t}\n\t}\n\n\tfunction pruneObject(object) {\n\t\tvar i = raycastable.indexOf(object);\n\t\tif (i >= 0) {\n\t\t\traycastable.splice(i, 1);\n\t\t}\n\n\t\ti = vrObjects.indexOf(VRObject.findObject(object));\n\t\tif (i >= 0) {\n\t\t\tvrObjects.splice(i, 1);\n\t\t}\n\n\t\tobject.children.forEach(pruneObject);\n\t}\n\n\tfunction raycast() {\n\t\tvar i,\n\t\t\tintersect,\n\t\t\tobject,\n\t\t\tintersects,\n\t\t\tparent,\n\t\t\tprune = [],\n\t\t\tvrObject;\n\n\t\traycaster.ray.origin.setFromMatrixPosition(camera.matrixWorld); // world position\n\t\traycaster.ray.direction.set(0, 0, 0.5).unproject(camera).sub(raycaster.ray.origin).normalize();\n\n\t\tintersects = raycaster.intersectObjects(raycastable, true);\n\t\tfor (i = 0; i < intersects.length; i++) {\n\t\t\tintersect = intersects[i];\n\n\t\t\t// if object has been removed from scene, remove it from raycastable\n\t\t\tparent = intersect.object;\n\t\t\twhile (parent && parent !== scene) {\n\t\t\t\tif (!parent.parent) {\n\t\t\t\t\tprune.push(parent);\n\t\t\t\t}\n\t\t\t\tparent = parent.parent;\n\t\t\t}\n\n\t\t\tif (parent && intersect.object instanceof THREE.Mesh) {\n\t\t\t\tobject = intersect.object;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tprune.forEach(pruneObject);\n\n\t\tif (target !== object) {\n\t\t\tif (target) {\n\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\tvrObject.emit('lookaway');\n\t\t\t\tVR.emit('lookaway', vrObject);\n\t\t\t}\n\t\t\ttarget = object;\n\t\t\tif (target) {\n\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\twhile (!vrObject && target.parent) {\n\t\t\t\t\ttarget = target.parent;\n\t\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\t}\n\t\t\t\tif (vrObject) {\n\t\t\t\t\tvrObject.emit('lookat', intersect);\n\t\t\t\t\tVR.emit('lookat', vrObject, intersect);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction render() {\n       // if (CLOSE_RENDER) {\n       //     return;\n       // }\n        // Will not start render when application has been active.\n        // The case only in taobao client. Very suck!\n        if (Date.now() / 1000 - lastTick > 5) {\n            if (waitRenderInative === 0) {\n                waitRenderInative = Date.now() / 1000;\n            }\n            if (Date.now() / 1000 - waitRenderInative > 1) {\n                lastTick = Date.now();\n            }\n            return;\n        }\n        waitRenderInative = 0;\n\n\t\tvar now = Date.now() / 1000,\n\t\t\tdelta = Math.min(1, now - lastTick);\n\n\t\tvrControls.update();\n\n\t\tanimationCallbacks.forEach(function (cb) {\n\t\t\tcb(delta, now);\n\t\t});\n\n\t\tscene.updateMatrixWorld();\n\n\t\tvrObjects.forEach(function (object) {\n\t\t\tobject.update(now);\n\t\t});\n        if (mouseControls.autoRotate === true) {\n            mouseControls.update();\n        }\n\n\t\traycast();\n\n\t\tvrEffect.render(scene, camera);\n\n\t\tlastTick = now;\n\t}\n\n\tfunction renderLoop() {\n\t\tif (going) {\n\t\t\trender();\n\t\t\trequestAnimationFrame(renderLoop);\n\t\t}\n\t}\n\n\tfunction stop() {\n\t\tgoing = false;\n\t}\n\n\tfunction start() {\n\t\tif (!going) {\n\t\t\tgoing = true;\n\t\t\trenderLoop();\n\t\t}\n\t}\n\n\t/*\n\tMute any sounds when this browser tab is in the background or minimized.\n\t*/\n\tfunction visibilityChange() {\n\t\tif (document.hidden || document.mozHidden || document.msHidden || document.webkitHidden) {\n\t\t\taudioListener.volume(0);\n\t\t} else {\n\t\t\taudioListener.volume(1);\n\t\t}\n\t}\n\n\tfunction resize(width, height) {\n\t\twidth = typeof width === 'number' && width || window.innerWidth;\n\t\theight = typeof height === 'number' && height || window.innerHeight;\n\n\t\tcamera.aspect = width / height;\n\t\tcamera.updateProjectionMatrix();\n\t\trenderer.setSize(width, height);\n\t}\n\n\tfunction initShake() {\n\t\tvar lastTime = 0,\n\t\t\tlastX,\n\t\t\tlastY,\n\t\t\tlastZ,\n\t\t\tthreshold = 15;\n\n\t\twindow.addEventListener('devicemotion', function (evt) {\n\t\t\tvar current = evt.accelerationIncludingGravity,\n\t\t\t\ttime,\n\t\t\t\tdiff,\n\t\t\t\tdeltaX = 0,\n\t\t\t\tdeltaY = 0,\n\t\t\t\tdeltaZ = 0,\n\t\t\t\tdist;\n\n\t\t\tif (lastX !== undefined) {\n\t\t\t\tdeltaX = Math.abs(lastX - current.x);\n\t\t\t\tdeltaY = Math.abs(lastY - current.y);\n\t\t\t\tdeltaZ = Math.abs(lastZ - current.z);\n\n\t\t\t\t// if (deltaX > threshold &&\n\t\t\t\t// \t\t(deltaY > threshold || deltaZ > threshold)\n\t\t\t\t// \t) {\n\t\t\t\tdist = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);\n\t\t\t\tif (dist > threshold) {\n\n\t\t\t\t\ttime = Date.now();\n\t\t\t\t\tdiff = time - lastTime;\n\t\t\t\t\tif (diff > 1000) {\n\t\t\t\t\t\tif (navigator.vibrate) {\n\t\t\t\t\t\t\tnavigator.vibrate(100);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlastTime = Date.now();\n\n\t\t\t\t\t\tVR.emit('shake');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlastX = current.x;\n\t\t\tlastY = current.y;\n\t\t\tlastZ = current.z;\n\n\t\t\torientationPossible = true;\n\t\t}, false);\n\t}\n\n\tfunction initScene(mode) {\n\t\tfunction attachCanvas() {\n\t\t\tdocument.body.insertBefore(renderer.domElement, document.body.firstChild || null);\n\t\t\tresize();\n\t\t}\n\n\t\tif (renderer) {\n\t\t\treturn;\n\t\t}\n\t\tvar renderMode = mode || 'auto';\n        if (renderMode === MODE_CSS) {\n            renderer = new THREE.CSS3DRenderer();\n        } else if (renderMode === MODE_CANVAS) {\n            renderer = new THREE.CanvasRenderer();\n            renderer.setPixelRatio( window.devicePixelRatio );\n        } else {\n            renderer = !isSupportWebgl?new THREE.CanvasRenderer():new THREE.WebGLRenderer({ antialias: false });\n            renderer.setPixelRatio( window.devicePixelRatio );\n        }\n\n\t\t//create renderer and place in document\n        // Antialiasing temporarily disabled to improve performance.\n        renderer.setClearColor(0x000000, 0);\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\t\tif (isSupportWebgl) {\n            renderer.domElement.addEventListener('webglcontextlost', function contextLost(event) {\n                console.log('lost context', event);\n            });\n        }\n\t\t// renderer.shadowMapEnabled = true;\n\t\t// renderer.shadowMapSoft = true;\n\n\t\t//need a scene to put all our objects in\n\t\tscene = new THREE.Scene();\n\n\t\tbodyWrapper = new VRObject(scene, require('./objects/empty'), null, {\n\t\t\tname: 'body'\n\t\t}).moveTo(0, 1.5, 4);\n\t\tbody = bodyWrapper.object;\n\n\t\tcameraWrapper = new VRObject(body, function (parent) {\n        //    camera = new THREE.OrthographicCamera(\n        //            window.innerWidth / - 24, window.innerWidth / 24,window.innerHeight / 24, window.innerHeight / - 24, -310, 100000);\n        //    camera.position.x = 0;\n        //    camera.position.y = 0;\n        //    camera.zoom = 0.4;\n\t\t//\tcamera.position.set(-0.000001, 0.0001, 0.0001);\n\t\t//\tcamera.rotation.set(0, 0, 0);\n\n\t\t\t//need a camera with which to look at stuff\n            // The viewer proportion will be a square not a rect.\n\t\t\tcamera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, NEAR, FAR);\n            camera.setFocalLength(8);\n            // camera.zoom = 0.8;\n\t\t\t// camera.position.set(-0.000001, 1, 0.0001);\n            // camera.autoBackward = true;\n\t\t\tparent.add(camera);\n\t\t\treturn camera;\n\t\t})\n\t\t// set camera position so that OrbitControls works properly.\n\t\t\t.moveTo(0, 0.0001, 0.0001);\n\n\t\taudioListener = new THREE.AudioListener();\n\t\taudioListener.name = 'audio-listener';\n\t\tcamera.add(audioListener);\n\n\t\t//VRControls point the camera wherever we're looking\n\t\tvrControls = new THREE.VRControls(camera);\n\t\tvrControls.freeze = !orientationEnabled;\n\n\t\t//render left and right eye\n\t\tvrEffect = new THREE.VRStereoEffect(renderer);\n\t\tvrEffect.near = NEAR;\n\t\tvrEffect.far = FAR;\n\t\tvrEffect.addEventListener('fullscreenchange', function (evt) {\n\t\t\tvar screen;\n\t\t\tif (isFullscreen()) {\n\t\t\t\tif (vrMode) {\n\t\t\t\t\t//no mouse control\n\t\t\t\t\tmouseControls.enabled = false;\n\n\t\t\t\t\tvrControls.freeze = false;\n\t\t\t\t\tvrControls.reset();\n\n\t\t\t\t\tscreen = window.screen;\n\t\t\t\t\tif (screen.lockOrientation) {\n\t\t\t\t\t\tscreen.lockOrientation('landscape-primary');\n\t\t\t\t\t} else if (screen.mozLockOrientation) {\n\t\t\t\t\t\tscreen.mozLockOrientation('landscape-primary');\n\t\t\t\t\t} else if (screen.orientation && screen.orientation.lock) {\n\t\t\t\t\t\tscreen.orientation.lock('landscape-primary');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tVR.exitVR();\n\t\t\t}\n\n\t\t\tcamera.position.set(0, 0.0001, 0.0001);\n\t\t\tcamera.rotation.set(0, 0, 0);\n\n\t\t\tVR.emit('fullscreenchange', evt);\n\t\t});\n        scene.isWebview = vrEffect.isWebview;\n\n\t\t//report on HMD\n\t\tvrControls.addEventListener('devicechange', function () {\n\t\t\torientationPossible = true;\n\t\t\tif (orientationEnabled === undefined) {\n\t\t\t\torientationEnabled = vrControls.mode() === 'deviceorientation';\n\t\t\t}\n\n\t\t\tvrControls.freeze = !orientationEnabled && !vrMode;\n\n\t\t\tVR.emit('devicechange', vrControls.mode(), vrEffect.hmd());\n\t\t});\n\n\t\t// mouse control in case got no orientation device\n        // Re-start autorotate if user has not been controlled.\n\t\tmouseControls = new THREE.OrbitControls(camera, renderer.domElement);\n\t\tmouseControls.target0.set(0, 0.0001, 0.000);\n\t\tmouseControls.target.copy(mouseControls.target0);\n        mouseControls.enableZoom = true;\n        mouseControls.enablePan = true;\n        mouseControls.autoRotate = false;\n\t\tif (renderMode === MODE_CSS) {\n        \tmouseControls.autoRotateSpeed = 0.5;\n\t\t} else {\n        \tmouseControls.autoRotateSpeed = 1.0;\n\t\t}\n        mouseControls.enableDamping = true;\n        mouseControls.dampingFactor = 0.55;\n        mouseControls.addEventListener('start', function(){\n            if (autoRotateTimer) {\n                clearTimeout(autoRotateTimer);\n            }\n            if (orientationEnabled) {\n                mouseControls.enabled = false;\n                mouseControls.autoRotate = false;\n            } else {\n                mouseControls.enabled = true;\n                mouseControls.autoRotate = false;\n            }\n        });\n        mouseControls.addEventListener('end', function(){\n            autoRotateTimer = setTimeout(function(){\n                if (orientationEnabled) {\n                    mouseControls.enabled = false;\n                    mouseControls.autoRotate = false;\n                } else {\n                    mouseControls.enabled = true;\n                    mouseControls.autoRotate = true;\n                }\n            }, 2000);\n        });\n        mouseControls.enabled = false;\n\t\tmouseControls.update();\n\n\t\t//todo: remove any default lights once other lights are added\n        // Will not use this way because memory\n\t\tvar dLight = new THREE.DirectionalLight(0xffffff, 0.8);\n\t\tdLight.name = 'directional-light';\n\t\tdLight.position.set(20, 100, 100);\n\n\t\tdLight.castShadow = true;\n\t\tdLight.shadowCameraVisible = true;\n\n\t\tdLight.shadowMapWidth = 2048;\n\t\tdLight.shadowMapHeight = 2048;\n\n\t\tdLight.shadowCameraLeft = -10;\n\t\tdLight.shadowCameraRight = 10;\n\t\tdLight.shadowCameraTop = 10;\n\t\tdLight.shadowCameraBottom = -10;\n\n\t\tdLight.shadowCameraFar = 150;\n\t\tdLight.shadowCameraNear = 100;\n\t\tdLight.shadowDarkness = 1;\n\n\t\tscene.add(dLight);\n\n\t\tscene.add(new THREE.AmbientLight(0x444444));\n\n\t\tif (VR) {\n\t\t\tVR.camera = cameraWrapper;\n\t\t\tVR.body = bodyWrapper;\n\t\t\tVR.scene = scene;\n\t\t\tVR.canvas = renderer.domElement;\n\t\t\tVR.renderer = renderer;\n\t\t\tVR.zeroSensor = vrControls.zeroSensor;\n\t\t}\n\n\t\traycaster = new THREE.Raycaster();\n\n\t\tif (document.body) {\n\t\t\tattachCanvas();\n\t\t} else {\n\t\t\twindow.addEventListener('load', attachCanvas, false);\n\t\t}\n\n\t\tVR.canvas.addEventListener('webkitfullscreenerror', fullScreenError, false);\n\t\tVR.canvas.addEventListener('fullscreenerror', fullScreenError, false);\n\t}\n\n\tfunction initRequirements() {\n\t\t//load external requirements\n\t\tTHREE = require('three');\n\t\trequire('imports?THREE=three!DeviceOrientationControls');\n\t\trequire('imports?THREE=three!OrbitControls');\n\n\t\t//if (typeof __DEV__ !== 'undefined' && __DEV__) {\n\t\t\trequire('imports?THREE=three!AugmentedConsole');\n\t\t//}\n\n\t\tTHREE.ImageUtils.crossOrigin = '';\n\n\t\teventEmitter = require('event-emitter');\n\n        //if (!isSupportWebgl) {\n\t\t\t// compatible mode\n\t\t\t// Fixed render in all mobile device\n\t\t\trequire('imports?THREE=three!./lib/CSS3DRenderer.js');\n            require('imports?THREE=three!./lib/CanvasRenderer.js');\n            require('imports?THREE=three!./lib/Projector.js');\n          //  return;\n        //}\n\n\t\t//my VR stuff. todo: move these to a separate repo or two for easy packaging\n\t\trequire('imports?THREE=three!./lib/VRStereoEffect');\n\t\trequire('imports?THREE=three!./lib/VRControls');\n\t}\n\n\n\tfunction initialize(renderMode) {\n\t\t//todo: set up button/info elements\n\n\t\tinitScene(renderMode);\n\n\t\tinitShake();\n\n\t\tresize();\n\n\n\t\tdocument.addEventListener('visibilitychange', visibilityChange);\n\t\tdocument.addEventListener('mozvisibilitychange', visibilityChange);\n\t\tdocument.addEventListener('msvisibilitychange', visibilityChange);\n\t\tdocument.addEventListener('webkitvisibilitychange', visibilityChange);\n\t}\n\n\tinitRequirements();\n\n\tmodule.exports = VR = {\n\t\tinit: initialize,\n\t\trender: render,\n\t\tstart: start,\n\t\tstop: stop,\n\t\tresize: resize,\n        controls: mouseControls,\n        orientationPossible: function () {\n            return orientationPossible;\n        },\n\n\t\tTHREE: THREE,\n\n\t\tmaterials: materials,\n\n\t\tanimate: function (callback) {\n\t\t\tvar i;\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\ti = animationCallbacks.indexOf(callback);\n\t\t\t\tif (i < 0) {\n\t\t\t\t\tanimationCallbacks.push(callback);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tend: function (callback) {\n\t\t\tvar i;\n\n\t\t\tif (!callback) {\n\t\t\t\tanimationCallbacks.length = 0;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\ti = animationCallbacks.indexOf(callback);\n\t\t\t\tif (i >= 0) {\n\t\t\t\t\tanimationCallbacks.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\trequestVR: function () {\n\t\t\t//todo: check if it's possible\n\t\t\tif (vrMode || !vrEffect) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvrMode = true;\n\n\t\t\t//full screen and render two eyes\n\t\t\t//always full screen\n\t\t\tvrEffect.requestFullScreen();\n\t\t\tmouseControls.enabled = false;\n\t\t},\n\n\t\texitVR: function () {\n\t\t\tvrMode = false;\n\t\t\tif (!vrEffect.isWebview() && isFullscreen()) {\n\t\t\t\texitFullscreen();\n\t\t\t\treturn;\n\t\t\t}\n            vrEffect.exit();\n\n\t\t\tvrControls.freeze = !orientationEnabled;\n\t\t\tcamera.rotation.set(0, 0, 0);\n\t\t\tmouseControls.enabled = true;\n\t\t},\n\n\t\tvrMode: function () {\n\t\t\treturn vrMode && isFullscreen();\n\t\t},\n\n\t\torientationEnabled: function () {\n\t\t\treturn !!orientationEnabled;\n\t\t},\n\t\tenableOrientation: function () {\n            // clearTimeout(autoRotateTimer);\n\t\t\torientationEnabled = true;\n\t\t\tif (!vrMode) {\n\t\t\t\tvrControls.freeze = false;\n\t\t\t}\n\t\t\tmouseControls.enabled = false;\n            mouseControls.autoRotate = false;\n\t\t},\n\t\tdisableOrientation: function () {\n            // clearTimeout(autoRotateTimer);\n\t\t\torientationEnabled = false;\n\t\t\tcamera.rotation.set(0, 0, 0);\n\t\t\tvrControls.freeze = !vrMode;\n\t\t\tmouseControls.enabled = true;\n            mouseControls.autoRotate = true;\n\t\t},\n\n\t\tisFullscreen: isFullscreen,\n\t\trequestFullscreen: requestFullscreen,\n\t\texitFullscreen: function () {\n\t\t\tif (isFullscreen()) {\n\t\t\t\texitFullscreen();\n\t\t\t}\n\t\t},\n\n\t\tcontrolMode: function () {\n\t\t\treturn vrControls && vrControls.mode();\n\t\t},\n\n\t\tzeroSensor: nop,\n\n\t\tvibrate: navigator.vibrate ? navigator.vibrate.bind(navigator) : nop,\n\n\t\t// Utility\n\t\ttimes: function (n, callback) {\n\t\t\tvar i;\n\n\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\tcallback(i);\n\t\t\t}\n\t\t},\n\n\t\tcamera: cameraWrapper,\n\t\tbody: bodyWrapper,\n\t\tscene: scene,\n\t\trenderer: renderer || null,\n\t\tcanvas: renderer && renderer.domElement || null,\n        isSupportWebgl: isSupportWebgl\n\t};\n\n\tobjectMethods.forEach(function (method) {\n\t\tvar creator = require('./objects/' + method),\n\t\t\tkey;\n\n\t\tVR[method] = function (options) {\n\t\t\tvar obj = new VRObject(scene, creator, body, options, renderer);\n\t\t\tvrObjects.push(obj);\n\t\t\tif (obj.raycastable) {\n\t\t\t\traycastable.push(obj.object);\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tVRObject.prototype[method] = function (options) {\n\t\t\tvar obj = new VRObject(this.object, creator, body, options, renderer);\n\t\t\tvrObjects.push(obj);\n\t\t\tif (obj.raycastable) {\n\t\t\t\traycastable.push(obj.object);\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tfor (key in creator) {\n\t\t\tif (creator.hasOwnProperty(key) && typeof creator[key] === 'function') {\n\t\t\t\tVR[method][key] = creator[key];\n\t\t\t\tVRObject.prototype[method][key] = creator[key];\n\t\t\t}\n\t\t}\n\t});\n\n\teventEmitter(VR);\n\n\tObject.defineProperty(VR, 'target', {\n\t\tget: function () {\n\t\t\treturn target;\n\t\t}\n\t});\n    // Compatible in android < 5.0\n    // Fix something what VR was undefined.\n    window.VR = VR;\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/vr.js\n ** module id = 1\n ** module chunks = 0\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../node_modules/css-loader/index.js!./style.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../node_modules/css-loader/index.js!./style.css\", function() {\n\t\t\tvar newContent = require(\"!!./../../node_modules/css-loader/index.js!./style.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/style-loader!./~/css-loader!./src/css/style.css\n ** module id = 2\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"body{font-family:Helvetica Neue,Helvetica,Arial,sans-serif;color:#eee;overflow:hidden;background:#282828;height:100%;width:100%;margin:0;padding:0}canvas{width:100%!important;height:100%!important;top:0;left:0}#buttons{position:absolute;bottom:0;left:0;padding:12px;margin:8px;border-radius:8px;background-color:hsla(0,0%,50%,.6)}#buttons>*{margin:0 10px;display:inline-block;width:18px;height:18px;cursor:pointer}#buttons>:first-child{margin-left:0}#buttons>.unsupported,#fs-disable{display:none}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./src/css/style.css\n ** module id = 3\n ** module chunks = 0\n **/","/**\n * isMobile.js v0.3.9\n *\n * A simple library to detect Apple phones and tablets,\n * Android phones and tablets, other mobile devices (like blackberry, mini-opera and windows phone),\n * and any kind of seven inch device, via user agent sniffing.\n *\n * @author: Kai Mallea (kmallea@gmail.com)\n *\n * @license: http://creativecommons.org/publicdomain/zero/1.0/\n */\n(function (global) {\n\n    var apple_phone         = /iPhone/i,\n        apple_ipod          = /iPod/i,\n        apple_tablet        = /iPad/i,\n        android_phone       = /(?=.*\\bAndroid\\b)(?=.*\\bMobile\\b)/i, // Match 'Android' AND 'Mobile'\n        android_tablet      = /Android/i,\n        amazon_phone        = /(?=.*\\bAndroid\\b)(?=.*\\bSD4930UR\\b)/i,\n        amazon_tablet       = /(?=.*\\bAndroid\\b)(?=.*\\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\\b)/i,\n        windows_phone       = /IEMobile/i,\n        windows_tablet      = /(?=.*\\bWindows\\b)(?=.*\\bARM\\b)/i, // Match 'Windows' AND 'ARM'\n        other_blackberry    = /BlackBerry/i,\n        other_blackberry_10 = /BB10/i,\n        other_opera         = /Opera Mini/i,\n        other_chrome        = /(CriOS|Chrome)(?=.*\\bMobile\\b)/i,\n        other_firefox       = /(?=.*\\bFirefox\\b)(?=.*\\bMobile\\b)/i, // Match 'Firefox' AND 'Mobile'\n        seven_inch = new RegExp(\n            '(?:' +         // Non-capturing group\n\n            'Nexus 7' +     // Nexus 7\n\n            '|' +           // OR\n\n            'BNTV250' +     // B&N Nook Tablet 7 inch\n\n            '|' +           // OR\n\n            'Kindle Fire' + // Kindle Fire\n\n            '|' +           // OR\n\n            'Silk' +        // Kindle Fire, Silk Accelerated\n\n            '|' +           // OR\n\n            'GT-P1000' +    // Galaxy Tab 7 inch\n\n            ')',            // End non-capturing group\n\n            'i');           // Case-insensitive matching\n\n    var match = function(regex, userAgent) {\n        return regex.test(userAgent);\n    };\n\n    var IsMobileClass = function(userAgent) {\n        var ua = userAgent || navigator.userAgent;\n        // Facebook mobile app's integrated browser adds a bunch of strings that\n        // match everything. Strip it out if it exists.\n        var tmp = ua.split('[FBAN');\n        if (typeof tmp[1] !== 'undefined') {\n            ua = tmp[0];\n        }\n\n        this.apple = {\n            phone:  match(apple_phone, ua),\n            ipod:   match(apple_ipod, ua),\n            tablet: !match(apple_phone, ua) && match(apple_tablet, ua),\n            device: match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)\n        };\n        this.amazon = {\n            phone:  match(amazon_phone, ua),\n            tablet: !match(amazon_phone, ua) && match(amazon_tablet, ua),\n            device: match(amazon_phone, ua) || match(amazon_tablet, ua)\n        };\n        this.android = {\n            phone:  match(amazon_phone, ua) || match(android_phone, ua),\n            tablet: !match(amazon_phone, ua) && !match(android_phone, ua) && (match(amazon_tablet, ua) || match(android_tablet, ua)),\n            device: match(amazon_phone, ua) || match(amazon_tablet, ua) || match(android_phone, ua) || match(android_tablet, ua)\n        };\n        this.windows = {\n            phone:  match(windows_phone, ua),\n            tablet: match(windows_tablet, ua),\n            device: match(windows_phone, ua) || match(windows_tablet, ua)\n        };\n        this.other = {\n            blackberry:   match(other_blackberry, ua),\n            blackberry10: match(other_blackberry_10, ua),\n            opera:        match(other_opera, ua),\n            firefox:      match(other_firefox, ua),\n            chrome:       match(other_chrome, ua),\n            device:       match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(other_opera, ua) || match(other_firefox, ua) || match(other_chrome, ua)\n        };\n        this.seven_inch = match(seven_inch, ua);\n        this.any = this.apple.device || this.android.device || this.windows.device || this.other.device || this.seven_inch;\n        // excludes 'other' devices and ipods, targeting touchscreen phones\n        this.phone = this.apple.phone || this.android.phone || this.windows.phone;\n        // excludes 7 inch devices, classifying as phone or tablet is left to the user\n        this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet;\n\n        if (typeof window === 'undefined') {\n            return this;\n        }\n    };\n\n    var instantiate = function() {\n        var IM = new IsMobileClass();\n        IM.Class = IsMobileClass;\n        return IM;\n    };\n\n    if (typeof module != 'undefined' && module.exports && typeof window === 'undefined') {\n        //node\n        module.exports = IsMobileClass;\n    } else if (typeof module != 'undefined' && module.exports && typeof window !== 'undefined') {\n        //browserify\n        module.exports = instantiate();\n    } else if (typeof define === 'function' && define.amd) {\n        //AMD\n        define('isMobile', [], global.isMobile = instantiate());\n    } else {\n        global.isMobile = instantiate();\n    }\n\n})(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ismobilejs/isMobile.js\n ** module id = 4\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tlinkElement.rel = \"stylesheet\";\r\n\tinsertStyleElement(options, linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement(options);\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/style-loader/addStyles.js\n ** module id = 5\n ** module chunks = 0\n **/","/**\n * NoSleep.js v0.5.0 - git.io/vfn01\n * Rich Tibbett\n * MIT license\n **/\n(function(root) {\n  // UA matching\n  var ua = {\n    Android: /Android/ig.test(navigator.userAgent),\n    iOS: /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent)\n  };\n\n  var media = {\n    WebM: \"data:video/webm;base64,GkXfo0AgQoaBAUL3gQFC8oEEQvOBCEKCQAR3ZWJtQoeBAkKFgQIYU4BnQI0VSalmQCgq17FAAw9CQE2AQAZ3aGFtbXlXQUAGd2hhbW15RIlACECPQAAAAAAAFlSua0AxrkAu14EBY8WBAZyBACK1nEADdW5khkAFVl9WUDglhohAA1ZQOIOBAeBABrCBCLqBCB9DtnVAIueBAKNAHIEAAIAwAQCdASoIAAgAAUAmJaQAA3AA/vz0AAA=\",\n    MP4: \"data:video/mp4;base64,AAAAHGZ0eXBpc29tAAACAGlzb21pc28ybXA0MQAAAAhmcmVlAAAAG21kYXQAAAGzABAHAAABthADAowdbb9/AAAC6W1vb3YAAABsbXZoZAAAAAB8JbCAfCWwgAAAA+gAAAAAAAEAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIVdHJhawAAAFx0a2hkAAAAD3wlsIB8JbCAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAIAAAACAAAAAABsW1kaWEAAAAgbWRoZAAAAAB8JbCAfCWwgAAAA+gAAAAAVcQAAAAAAC1oZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVmlkZW9IYW5kbGVyAAAAAVxtaW5mAAAAFHZtaGQAAAABAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEAAAAMdXJsIAAAAAEAAAEcc3RibAAAALhzdHNkAAAAAAAAAAEAAACobXA0dgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIAAgASAAAAEgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABj//wAAAFJlc2RzAAAAAANEAAEABDwgEQAAAAADDUAAAAAABS0AAAGwAQAAAbWJEwAAAQAAAAEgAMSNiB9FAEQBFGMAAAGyTGF2YzUyLjg3LjQGAQIAAAAYc3R0cwAAAAAAAAABAAAAAQAAAAAAAAAcc3RzYwAAAAAAAAABAAAAAQAAAAEAAAABAAAAFHN0c3oAAAAAAAAAEwAAAAEAAAAUc3RjbwAAAAAAAAABAAAALAAAAGB1ZHRhAAAAWG1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAAK2lsc3QAAAAjqXRvbwAAABtkYXRhAAAAAQAAAABMYXZmNTIuNzguMw==\"\n  };\n\n  function addSourceToVideo(element, type, dataURI) {\n    var source = document.createElement('source');\n    source.src = dataURI;\n    source.type = \"video/\" + type;\n    element.appendChild(source);\n  }\n\n  // NoSleep instance constructor\n  var NoSleep = function() {\n    if (ua.iOS) {\n      this.noSleepTimer = null;\n    } else if (ua.Android) {\n      // Set up no sleep video element\n      this.noSleepVideo = document.createElement('video');\n      this.noSleepVideo.setAttribute(\"loop\", \"\");\n\n      // Append nosleep video sources\n      addSourceToVideo(this.noSleepVideo, \"webm\", media.WebM);\n      addSourceToVideo(this.noSleepVideo, \"mp4\", media.MP4);\n    }\n\n    return this;\n  };\n\n  // Enable NoSleep instance\n  NoSleep.prototype.enable = function(duration) {\n    if (ua.iOS) {\n      this.disable();\n      this.noSleepTimer = window.setInterval(function() {\n        window.location = window.location;\n        window.setTimeout(window.stop, 0);\n      }, duration || 15000);\n    } else if (ua.Android) {\n      this.noSleepVideo.play();\n    }\n  };\n\n  // Disable NoSleep instance\n  NoSleep.prototype.disable = function() {\n    if (ua.iOS) {\n      if (this.noSleepTimer) {\n        window.clearInterval(this.noSleepTimer);\n        this.noSleepTimer = null;\n      }\n    } else if (ua.Android) {\n      this.noSleepVideo.pause();\n    }\n  };\n\n  // Append NoSleep API to root object\n  root.NoSleep = NoSleep;\n})(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./bower_components/nosleep/NoSleep.js\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar THREE = require('three'),\n\t\tforEach = require('lodash.foreach'),\n\t\tassign = require('lodash.assign'),\n\n\t\tiOS = navigator.userAgent.match(/(iPad|iPhone|iPod)/g),\n\t\tandroid = navigator.userAgent.toLowerCase().match(/android/g),\n\n\t\t// https://gist.github.com/dperini/729294\n\t\t//urlRegex = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/i,\n\t\turlRegex = require('./utils/urlregex'),\n\n\t\tdataUri = /^data:image\\/(?:png|jpe?g|gif);/,\n\t\tassetPath = '//gw.alicdn.com/tps/',\n\n\t\timages = {},\n\n\t\tmaterialTypes = {\n\t\t\tlambert: THREE.MeshLambertMaterial,\n\t\t\tbasic: THREE.MeshBasicMaterial,\n\t\t\tphong: THREE.MeshPhongMaterial,\n\t\t\tnormal: THREE.MeshNormalMaterial,\n\t\t\tdepth: THREE.MeshDepthMaterial\n\t\t},\n\t\ttextureFiles = {\n    // Will use these when you need it.\n\t\t\t'asphalt': {\n                map:'TB1kK63NVXXXXaVaFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 12\n\t\t\t},\n\t\t\t'brick-tiles': {\n                map:'TB1YcUKNVXXXXbpXXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 2\n\t\t\t},\n\t\t\t'bricks': {\n\t\t\t\ttype: 'phong',\n\t\t\t\trepeat: 4,\n                map:'TB1rswLNVXXXXbcXXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\tnormalMap: 'TB1T.7hNVXXXXXlXVXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\tspecularMap: 'TB1WIn.NVXXXXaPapXXXXXXXXXX-512-512.jpg_320x320.jpg'\n\t\t\t},\n\t\t\t'checkerboard': {\n\t\t\t\trepeat: 10,\n\t\t\t\tmap: 'TB17ZseNVXXXXbfaXXXXXXXXXXX-256-256.png_140x140.jpg'\n\t\t\t},\n\t\t\t'grass': {\n                map:'TB17jZqNVXXXXc4XFXXXXXXXXXX-256-256.jpg_140x140.jpg',\n\t\t\t\trepeat: 12\n\t\t\t},\n\t\t\t'metal-floor': {\n\t\t\t\ttype: 'phong',\n\t\t\t\tshininess: 100,\n                map:'TB18JAwNVXXXXbiXFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 2\n\t\t\t},\n\t\t\t'metal': {\n                map:'TB1sEEhNVXXXXbSXVXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\ttype: 'phong',\n\t\t\t\tshininess: 100,\n\t\t\t\tshading: THREE.SmoothShading,\n\t\t\t\trepeat: 2\n\t\t\t},\n\t\t\t'stone': {\n                map:'TB1c37bNVXXXXXwaXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 8\n\t\t\t},\n\t\t\t'tiles': {\n                map:'TB1BbZCNVXXXXaMXpXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 4\n\t\t\t},\n\t\t\t'weathered-wood': {\n                map:'TB12QIwNVXXXXXGXFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 8\n\t\t\t},\n\t\t\t'wood': {\n                map:'TB1rpEANVXXXXa8XpXXXXXXXXXX-512-512.jpg_320x320.jpg',\n                repeat: 4\n\t\t\t}\n\t\t},\n\t\ttextures = {},\n\t\tmaterials;\n\n\tfunction imageTexture(src, mapping, callback) {\n\t\tvar image,\n\t\t\tparse,\n\t\t\ttexture,\n\t\t\tisDataUri;\n\n\t\tfunction imageLoaded() {\n\t\t\tvar scale,\n\t\t\t\tcanvas,\n\t\t\t\tctx,\n\t\t\t\tsmallImage;\n\n\t\t\t/*\n\t\t\tiOS doesn't know how to handle large images. Even though the MAX_TEXTURE_SIZE\n\t\t\tmay be 4096, it still breaks on images that large. So we scale them down.\n            Change 2048 to 1024 fix memory is too high in iOS.\n            Modify by KeynesQ\n\t\t\t*/\n\t\t//\tif (iOS && (image.naturalWidth > 2048 || image.naturalHeight > 2048)) {\n\t\t//\t\tscale = 1024 / Math.max( image.naturalWidth, image.naturalHeight );\n\n\t\t//\t\tcanvas = document.createElement('canvas');\n\t\t//\t\tcanvas.width = 1024;\n\t\t//\t\tcanvas.height = 512;\n\n\t\t//\t\tctx = canvas.getContext('2d');\n\t\t//\t\tctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, canvas.width, canvas.height);\n\n\t\t//\t\timage = canvas;\n\t\t//\t}\n                // Reduce momery in mobile device.\n                if ((iOS || android) && (image.naturalWidth > 2048 || image.naturalHeight > 2048)) {\n                // scales the image by (float) scale < 1\n\n                    scale = 1024 / Math.max( image.naturalWidth, image.naturalHeight );\n                    canvas = document.createElement('canvas');\n                    canvas.width = Math.floor(image.naturalWidth * scale);\n                    canvas.height = Math.floor(image.naturalHeight * scale);\n\n                    ctx = canvas.getContext('2d');\n\n                    ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, canvas.width, canvas.height);\n                   // if (iOS) {\n                   //     var dstData = ctx.createImageData(canvas.width, canvas.height),\n                   //         dstBuff = dstData.data,\n                   //         srcBuff = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n                   //     var _worker = new Worker('//h5.m.taobao.com/js/trip/hotel/worker.js');\n                   //     _worker.onmessage = function (e) {\n                   //         var data = e.data[0];\n                   //         // Get new image data\n                   //         ctx.putImageData(data, 0, 0);\n                   //         texture.image = canvas;\n                   //         texture.needsUpdate = true;\n                   //         if (typeof callback === 'function') {\n                   //             setTimeout(callback.bind(null, texture, image), 1);\n                   //         }\n                   //         _worker.terminate();\n                   //     };\n                   //     _worker.postMessage([dstData, srcBuff, canvas.width, canvas.height]);\n                   //     return;\n                   // }\n\n                    image = canvas;\n                }\n\n                texture.image = image;\n                texture.needsUpdate = true;\n                if (typeof callback === 'function') {\n                    setTimeout(callback.bind(null, texture, image), 1);\n                }\n            }\n\n            parse = dataUri.exec(src);\n            isDataUri = !!parse;\n            if (!parse) {\n                parse = urlRegex.exec(src);\n            }\n\n            // if (!parse) {\n            // \tconsole.error('Invalid image URL: ' + src);\n            // \treturn;\n            // }\n\n            if (images[src]) {\n                image = images[src];\n            } else {\n                image = document.createElement('img');\n                if (parse && (parse[1] && parse[1] !== window.location.hostname || parse[2] && parse[2] !== window.location.port)) {\n                    image.crossOrigin = 'anonymous';\n                }\n                image.src = src;\n                images[src] = image;\n            }\n\n            texture = new THREE.Texture(undefined, mapping);\n\n            if (image.naturalWidth || isDataUri) {\n                setTimeout(imageLoaded, 1);\n            } else {\n                image.addEventListener('load', imageLoaded);\n            }\n\n            return texture;\n        }\n\n\n\tfunction material(options) {\n\t\tvar opts,\n\t\t\tMaterial = materialTypes[options.type] || THREE.MeshLambertMaterial;\n\n\t\tfunction threeTexture(fn) {\n\t\t\tif (typeof fn === 'string') {\n\t\t\t\tif (urlRegex.test(fn) || dataUri.test(fn)) {\n\t\t\t\t\treturn imageTexture(fn);\n\t\t\t\t}\n\n\t\t\t\tfn = textures[fn];\n\t\t\t}\n\t\t\tif (typeof fn === 'function') {\n\t\t\t\treturn fn(options);\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\n\t\tif (typeof options === 'string') {\n\t\t\toptions = {\n\t\t\t\tmap: options\n\t\t\t};\n\t\t}\n\n\t\topts = assign({}, options);\n\t\tforEach({\n\t\t\tambient: options.ambient || options.color,\n\t\t\temissive: options.emissive || options.color,\n\t\t\tmap: threeTexture(options.map),\n\t\t\tspecularMap: threeTexture(options.specularMap),\n\t\t\tnormalMap: threeTexture(options.normalMap),\n\t\t\talphaMap: threeTexture(options.alphaMap),\n\t\t\tenvMap: threeTexture(options.envMap),\n\t\t\tlightMap: threeTexture(options.lightMap)\n\t\t}, function (val, key) {\n\t\t\tif (val !== undefined) {\n\t\t\t\topts[key] = val;\n\t\t\t}\n\t\t});\n\n\t\tdelete opts.type;\n\n\t\treturn new Material(opts);\n\t}\n\n\t//figure out if script is loaded relative so we know where to find the images\n//\tassetPath = (function () {\n//\t\tvar url,\n//\t\t\tscripts;\n//\n//\t\tif (document.currentScript) {\n//\t\t\turl = document.currentScript.getAttribute('src');\n//\t\t} else {\n//\t\t\tscripts = document.getElementsByTagName('script');\n//\t\t\turl = scripts[scripts.length - 1].getAttribute('src');\n//\t\t}\n//\n//\t\tif (!urlRegex.test(url)) {\n//\t\t\treturn url.replace(/[a-z\\-\\.]+\\.js$/i, '');\n//\t\t}\n//\n//\t\treturn __ASSET_PATH__;\n//\t}());\n\n\tmaterials = {\n\t\tstandard: function () {\n\t\t\treturn new THREE.MeshLambertMaterial();\n\t\t},\n\t\ttextures: textures,\n\t\timageTexture: imageTexture,\n\t\tmaterial: material,\n\t\tlibrary: ['standard']\n\t};\n\n\tforEach(textureFiles, function (props, key) {\n\t\tfunction textureFactory(file, options) {\n\t\t\tfunction imagePath(url) {\n\t\t\t\tif ((/\\.(png|jpg)$/i).test(url)) {\n\t\t\t\t\treturn assetPath + url;\n\t\t\t\t}\n\n\t\t\t\treturn url;\n\t\t\t}\n\n\t\t\toptions = options || {};\n\n\t\t\treturn function (opts) {\n\t\t\t\tvar texture = imageTexture(imagePath(file));\n\n\t\t\t\topts = assign({}, options, opts);\n\n\t\t\t\tif (opts.repeat) {\n\t\t\t\t\tif (opts.repeat > 0) {\n\t\t\t\t\t\ttexture.repeat.set(opts.repeat, opts.repeat);\n\t\t\t\t\t} else if (opts.repeat instanceof THREE.Vector2) {\n\t\t\t\t\t\ttexture.repeat.copy(opts.repeat);\n\t\t\t\t\t}\n\t\t\t\t\ttexture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t}\n\t\t\t\treturn texture;\n\t\t\t};\n\t\t}\n\n\t\tvar map = textureFactory(props.map || key + '.jpg', props),\n\t\t\tmaterialDef;\n\n\t\tmaterialDef = assign({}, props, {\n\t\t\tmap: map\n\t\t});\n\t\ttextures[key] = map;\n\n\t\tif (props.normalMap) {\n\t\t\tmaterialDef.normalMap = textures[key + '-normal'] = textureFactory(props.normalMap, props);\n\t\t}\n\n\t\tif (props.specularMap) {\n\t\t\tmaterialDef.specularMap = textures[key + '-specular'] = textureFactory(props.specularMap, props);\n\t\t}\n\n\t\tmaterials.library.push(key);\n\t\tmaterials[key] = function (options) {\n\t\t\tvar opts = assign({}, materialDef, options);\n\n\t\t\treturn material(opts);\n\t\t};\n\t});\n\n\treturn materials;\n\n\t//var parse = urlRegex.exec('https://lh5.googleusercontent.com:80/-SNO8rWDqbUM/U085rfOBRuI/AAAAAAAAEdM/nWEWCtNceZ0/w955-h382-no/PANO_20130225_131211.jpg');\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/materials.js\n ** module id = 7\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar\tNEAR_DISTANCE = 3,\n\t\tmaterials = require('./materials'),\n\t\tTHREE = require('three'),\n\t\teventEmitter = require('event-emitter'),\n\n\t\txAxis = new THREE.Vector3(1, 0, 0),\n\t\tyAxis = new THREE.Vector3(0, 1, 0),\n\t\tzAxis = new THREE.Vector3(0, 0, 1),\n\n\t\tscratchVector1 = new THREE.Vector3(),\n\t\tscratchVector2 = new THREE.Vector3(),\n\n\t\tallObjects = window.WeakMap ? new window.WeakMap() : {};\n\n\tfunction distance(object, origin) {\n\t\tvar geometry;\n\n\t\tgeometry = object.geometry;\n\n\t\t//assumes object world matrix has been updated\n\t\tscratchVector1.setFromMatrixPosition(origin.matrixWorld);\n\n\t\tif (!geometry) {\n\t\t\t//first convert to world coordinate\n\t\t\tscratchVector2.setFromMatrixPosition(object.matrixWorld);\n\t\t\treturn scratchVector2.distanceTo(scratchVector1);\n\t\t}\n\n\t\tobject.worldToLocal(scratchVector1);\n\t\treturn object.geometry.boundingBox.distanceToPoint(scratchVector1);\n\t}\n\n\tfunction VRObject(parent, creator, body, options, renderer) {\n\t\tvar material,\n\t\t\tobject,\n\t\t\tself = this,\n\n\t\t\tisNear = false,\n\t\t\tisTarget = false,\n\n\t\t\tcamera = body && (function () {\n\t\t\t\tvar i,\n\t\t\t\t\tc;\n\t\t\t\tfor (i = 0; i < body.children.length; i++) {\n\t\t\t\t\tc = body.children[i];\n\t\t\t\t\tif (c instanceof THREE.PerspectiveCamera) {\n\t\t\t\t\t\treturn c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}()),\n\t\t\tfrustum,\n\t\t\tcameraViewProjectionMatrix,\n\n\t\t\traycaster;\n\n\t\toptions = options || {};\n\n\t\teventEmitter(this);\n\n\t\tif (body) {\n\t\t\t// raycaster = new THREE.Raycaster();\n\n\t\t\tthis.update = function () {\n\t\t\t\tvar wasNear = isNear,\n\t\t\t\t\twasTarget = isTarget,\n\n\t\t\t\t\tintersects, intersect, i;\n\n\t\t\t\tisNear = self.distance < NEAR_DISTANCE;\n\t\t\t\tif (isNear !== wasNear) {\n\t\t\t\t\tif (isNear) {\n\t\t\t\t\t\tself.emit('near', self);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.emit('far', self);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\traycaster.ray.origin.copy(origin);\n\t\t\t\traycaster.ray.direction.set(0, 0, 0.5).unproject(camera).sub(origin).normalize();\n\n\t\t\t\t//todo: consider whether this needs to be recursive. maybe a different event\n\t\t\t\tintersects = raycaster.intersectObject(object);\n\t\t\t\tif (intersects.length) {\n\t\t\t\t\tisTarget = true;\n\t\t\t\t\tif (!wasTarget) {\n\t\t\t\t\t\tself.emit('target-on', intersects[0]);\n\t\t\t\t\t}\n\t\t\t\t} else if (wasTarget) {\n\t\t\t\t\tself.emit('target-off');\n\t\t\t\t}\n\t\t\t\t*/\n\t\t\t};\n\t\t}\n\n\t\t//todo: get material from options\n\t\tthis.object = object = creator.call(this, parent, options, renderer);\n\t\tthis.parent = this.object.parent || parent;\n\n\t\tif (object instanceof THREE.Mesh) {\n\t\t\tif (options.castShadow !== false) {\n\t\t\t\tobject.castShadow = true;\n\t\t\t}\n\t\t\tif (options.receiveShadow !== false) {\n\t\t\t\tobject.receiveShadow = true;\n\t\t\t}\n\n\t\t\tif (object.geometry) {\n\t\t\t\tobject.geometry.computeBoundingBox();\n\t\t\t}\n\t\t}\n\n\t\tif (options.name !== undefined) {\n\t\t\tobject.name = options.name;\n\t\t}\n\t\tself.name = object.name;\n\n\t\tif (allObjects.set) {\n\t\t\tallObjects.set(object, this);\n\t\t} else {\n\t\t\tallObjects[object.id] = this;\n\t\t}\n\n\t\tobject.position.set(\n\t\t\tparseFloat(options.x) || 0,\n\t\t\tparseFloat(options.y) || 0,\n\t\t\tparseFloat(options.z) || 0\n\t\t);\n\n\t\tthis.setMaterial(options.material);\n\n\t\tif (options.color) {\n\t\t\tmaterial = object.material;\n\t\t\tmaterial.color = new THREE.Color(options.color);\n\t\t\tmaterial.ambient = material.color;\n\t\t}\n\n\t\t['position', 'scale', 'rotation', 'quaternion', 'material'].forEach(function (prop) {\n\t\t\tif (prop in object && !self[prop]) {\n\t\t\t\tself[prop] = object[prop];\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'visible', {\n\t\t\tset: function (val) {\n\t\t\t\tself.object.visible = !!val;\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn self.object.visible;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'distance', {\n\t\t\tget: function () {\n\t\t\t\treturn distance(self.object, body || parent);\n\t\t\t}\n\t\t});\n\n\t\tif (camera) {\n\t\t\tfrustum = new THREE.Frustum();\n\t\t\tcameraViewProjectionMatrix = new THREE.Matrix4();\n\t\t\tObject.defineProperty(this, 'inView', {\n\t\t\t\tget: function () {\n\t\t\t\t\tcamera.updateMatrixWorld(); // make sure the camera matrix is updated\n\t\t\t\t\tcamera.matrixWorldInverse.getInverse(camera.matrixWorld);\n\t\t\t\t\tcameraViewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\t\t\t\t\tfrustum.setFromMatrix(cameraViewProjectionMatrix);\n\t\t\t\t\treturn frustum.intersectsObject(self.object);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tVRObject.prototype.hide = function () {\n\t\tthis.object.visible = false;\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.show = function () {\n\t\tthis.object.visible = true;\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.moveTo = function (x, y, z) {\n\t\tvar position = this.object.position;\n\n\t\tx = !isNaN(x) ? x : position.x;\n\t\ty = !isNaN(y) ? y : position.y;\n\t\tz = !isNaN(z) ? z : position.z;\n\n\t\tposition.set(x, y, z);\n\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.moveX = function (distance) {\n\t\tthis.object.translateX(distance);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.moveY = function (distance) {\n\t\tthis.object.translateY(distance);\n\t\treturn this;\n\t};\n\tVRObject.prototype.moveUp = VRObject.prototype.moveY;\n\tVRObject.prototype.moveDown = function (distance) {\n\t\tthis.moveY(-distance);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.moveZ = function (distance) {\n\t\tthis.object.translateZ(distance);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.rotateX = function (angle) {\n\t\tthis.object.rotateOnAxis(xAxis, angle);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.rotateY = function (angle) {\n\t\tthis.object.rotateOnAxis(yAxis, angle);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.rotateZ = function (angle) {\n\t\tthis.object.rotateOnAxis(zAxis, angle);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.setScale = function (x, y, z) {\n\t\tvar scale = this.object.scale;\n\n\t\tif (x !== undefined && !isNaN(x)) {\n\t\t\tif (y === undefined && z === undefined) {\n\t\t\t\ty = z = x;\n\t\t\t}\n\t\t}\n\n\t\tx = !isNaN(x) ? x : scale.x;\n\t\ty = !isNaN(y) ? y : scale.y;\n\t\tz = !isNaN(z) ? z : scale.z;\n\n\t\tscale.set(x, y, z);\n\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.setMaterial = function (material, options) {\n\t\tif (material && this.object instanceof THREE.Mesh) {\n\t\t\tif (typeof material === 'function') {\n\t\t\t\tmaterial = material();\n\t\t\t} else if (typeof material === 'string' && materials[material]) {\n\t\t\t\tmaterial = materials[material](options);\n\t\t\t} else if (material && !(material instanceof THREE.Material) && typeof material !== 'number') {\n\t\t\t\ttry {\n\t\t\t\t\tmaterial = materials.material(material);\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\tif (material instanceof THREE.Material) {\n\t\t\t\tthis.object.material = material;\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.update = function () {};\n\n\tVRObject.prototype.raycastable = true;\n\n\tVRObject.repeat = function (count, options) {\n\t\tvar i,\n\t\t\tchange = false,\n\t\t\tlastObject = this,\n\t\t\tcurrentPosition = new THREE.Vector3(),\n\t\t\tdeltaPosition = new THREE.Vector3(),\n\t\t\tcurrentQuaternion = new THREE.Quaternion(),\n\t\t\tdeltaQuaternion = new THREE.Quaternion();\n\n\t\tif (!options) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.offset) {}\n\n\t\tfor (i = 0; i < count; i++) {\n\n\t\t}\n\t};\n\n\tVRObject.findObject = function (object) {\n\t\tif (object instanceof VRObject) {\n\t\t\treturn object;\n\t\t}\n\n\t\tif (object && object instanceof THREE.Object3D) {\n\t\t\tif (allObjects.get) {\n\t\t\t\treturn allObjects.get(object);\n\t\t\t}\n\n\t\t\treturn allObjects[object.id];\n\t\t}\n\n\t\t// if (typeof object === 'number') {\n\t\t// \treturn allObjects[object];\n\t\t// }\n\t};\n\n\treturn VRObject;\n\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/vr-object.js\n ** module id = 8\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\treturn function empty(parent, options) {\n\t\tvar obj = new THREE.Object3D();\n\n\t\tobj.name = 'empty';\n\n\t\tparent.add(obj);\n\n\t\treturn obj;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/empty.js\n ** module id = 9\n ** module chunks = 0\n **/","var map = {\n\t\"./box\": 11,\n\t\"./box.js\": 11,\n\t\"./cylinder\": 12,\n\t\"./cylinder.js\": 12,\n\t\"./empty\": 9,\n\t\"./empty.js\": 9,\n\t\"./floor\": 13,\n\t\"./floor.js\": 13,\n\t\"./grid\": 14,\n\t\"./grid.js\": 14,\n\t\"./image\": 15,\n\t\"./image.js\": 15,\n\t\"./panorama\": 16,\n\t\"./panorama.js\": 16,\n\t\"./sky\": 17,\n\t\"./sky.js\": 17,\n\t\"./sound\": 18,\n\t\"./sound.js\": 18,\n\t\"./sphere\": 19,\n\t\"./sphere.js\": 19,\n\t\"./text\": 20,\n\t\"./text.js\": 20,\n\t\"./torus\": 21,\n\t\"./torus.js\": 21,\n\t\"./video\": 22,\n\t\"./video.js\": 22\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 10;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects ^\\.\\/.*$\n ** module id = 10\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three'),\n\t\tgeometry = new THREE.BoxGeometry( 1, 1, 1 );\n\n\treturn function box(parent, options) {\n\t\tvar mesh;\n\n\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\tmesh.name = 'box';\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/box.js\n ** module id = 11\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\tfunction cylinder(parent, options) {\n\t\tvar geometry,\n\t\t\tmesh;\n\n\t\tgeometry = new THREE.CylinderGeometry(\n\t\t\toptions.radiusTop === undefined ? 0.5 : options.radiusTop,\n\t\t\toptions.radiusBottom === undefined ? 0.5 : options.radiusBottom,\n\t\t\toptions.height === undefined ? 1 : options.height,\n\t\t\toptions.radiusSegments === undefined ? 16 : options.radiusSegments,\n\t\t\toptions.heightSegments,\n\t\t\toptions.openEnded\n\t\t);\n\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\tmesh.name = 'cylinder';\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t}\n\n\treturn cylinder;\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/cylinder.js\n ** module id = 12\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\tfunction floor(parent, options) {\n\t\tvar obj,\n\t\t\tgeometry;\n\n\t\tgeometry = new THREE.CircleGeometry( options.radius || 100, options.segments || 16 );\n\t\tgeometry.applyMatrix( new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\n\t\tobj = new THREE.Mesh(\n\t\t\tgeometry,\n\t\t\tmaterials.checkerboard({\n\t\t\t\trepeat: 100\n\t\t\t})\n\t\t);\n\t\tobj.name = 'floor';\n\n\t\tobj.receiveShadow = true;\n\n\t\tparent.add(obj);\n\n\t\treturn obj;\n\t}\n\n\treturn floor;\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/floor.js\n ** module id = 13\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar THREE = require('three');\n\n\treturn function box(parent, options) {\n\t\tvar obj,\n\t\t\tsize = options && options.size || 10,\n\t\t\tstep = options && options.step || 1;\n\n\t\tobj = new THREE.GridHelper(size, step);\n\t\tobj.name = 'grid';\n\t\tif (options) {\n\t\t\tobj.setColors(options.colorCenterLine || obj.color1, options.colorGrid || obj.color2);\n\t\t}\n\t\tobj.geometry.computeBoundingBox();\n\n\t\tparent.add(obj);\n\n\t\treturn obj;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/grid.js\n ** module id = 14\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\treturn function image(parent, options) {\n\t\tvar geometry,\n\t\t\tmaterial,\n\t\t\tmesh,\n\t\t\tsrc,\n\t\t\ttex,\n\t\t\tself = this;\n\n\t\tif (typeof options === 'string') {\n\t\t\tsrc = options;\n\t\t} else if (options) {\n\t\t\tsrc = options.src;\n\t\t}\n\n\t\tif (src) {\n\t\t\ttex = materials.imageTexture(src, THREE.UVMapping, function (t, image) {\n\t\t\t\t//todo: don't do any of this if object has been deleted\n\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(1, image.naturalHeight / image.naturalWidth, 1));\n\t\t\t\tmaterial.map = tex;\n\t\t\t\tmaterial.visible = true;\n\t\t\t\tmesh.visible = true;\n\t\t\t\tparent.add(mesh);\n\n\t\t\t\tself.emit('loaded');\n\t\t\t});\n\t\t}\n\n\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1, 8);\n\n\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\tside: THREE.DoubleSide,\n\t\t\ttransparent: true,\n\t\t\tmap: tex\n\t\t});\n\n\t\tmesh = new THREE.Mesh( geometry, material );\n\n\t\tmesh.visible = false;\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/image.js\n ** module id = 15\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n    var p = {};\n        p.scaleX = p.scaleX || 1;\n        p.scaleY = p.scaleY || 1;\n        p.offsetX = p.offsetX || 0;\n        p.offsetY = p.offsetY || 0;\n        p.phiStart = p.phiStart || 0;\n        p.phiLength = p.phiLength || Math.PI * 2;\n        p.thetaStart = p.thetaStart || 0;\n        p.thetaLength = p.thetaLength || Math.PI;\n    // Reduce ptr.\n    var isSupportWebgl = Boolean(window.isSupportWebgl);\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three'),\n        // geometry = new THREE.BoxGeometry(15, 15, 15, 10, 10, 10);\n            // geometry = new THREE.SphereGeometry(100, 60, 60);\n        // geometry = new THREE.SphereGeometry(60, 100, 100,\n        geometry = new THREE.SphereGeometry(16, 32, 32, p.phiStart, p.phiLength, p.thetaStart, p.thetaLength);\n        geometry.applyMatrix(new THREE.Matrix4().makeScale(-2, 2, 2.3));\n        geometry.applyMatrix(new THREE.Matrix4().makeRotationY(- Math.PI / 3));\n    // Will not render panorama if already contains the key.\n    var mapRender = {};\n    var isListener = false;\n    // Will use css3drenderer if not support webgl.\n    \n    var texturePlaceholder = document.createElement( 'canvas' );\n    texturePlaceholder.width = 64;\n    texturePlaceholder.height = 64;\n    var context = texturePlaceholder.getContext( '2d' );\n    context.fillStyle = 'rgb( 200, 200, 200 )';\n    context.fillRect( 0, 0, texturePlaceholder.width, texturePlaceholder.height );\n\tvar STR_CHILDEN_NAME = 'obj3DElement';\n\n    function loadTexture( path, _parent ) {\n        var texture = new THREE.Texture( texturePlaceholder );\n        var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5 } );\n        var image = new Image();\n        image.onload = function () {\n            texture.image = this;\n            texture.needsUpdate = true;\n            _parent.dispatchEvent({\n                type: 'img-loaded'\n            });\n        };\n        image.src = path;\n        return material;\n    }\n\n\treturn function panorama(parent, options, renderer) {\n        var src,\n            preview,\n            cubeSrc = {};\n\t\tvar self = this;\n\t\tvar material,\n\t\t\tmesh,\n            pretex,\n            mapKey,\n\t\t\ttex;\n\n\t\tif (typeof options === 'string') {\n\t\t\tsrc = options;\n\t\t} else if (options) {\n\t\t\tsrc = options.src;\n            preview = options.preview;\n            if (options.left) {\n                cubeSrc.left = options.left;\n                cubeSrc.right = options.right;\n                cubeSrc.down = options.down;\n                cubeSrc.top = options.top;\n                cubeSrc.front = options.front;\n                cubeSrc.back = options.back;\n            }\n\t\t}\n        mapKey = src;\n        if (!isSupportWebgl) {\n            mapKey = cubeSrc.left;\n        }\n        if (mapRender[mapKey]) {\n            // Remove all mesh object if scene contains them.\n            // Optimezei and Reduce Memory Usage for Panorama Model.\n            for (var key in mapRender) {\n                if(mapRender.hasOwnProperty(key)) {\n                    while (parent.getObjectByName(key)) {\n                        parent.remove(parent.getObjectByName(key));\n                    }\n                }\n            }\n            parent.add(mapRender[mapKey]);\n            parent.dispatchEvent({\n                type: 'img-loaded'\n            });\n            return mapRender[mapKey];\n        }\n\t\tif (renderer instanceof THREE.CSS3DRenderer) {\n\t\t\tvar cube = new THREE.Object3D();\n\t\t\tvar sides = [\n                {\n                    url: cubeSrc.right,\n                    position: [ -512, 0, 0 ],\n                    rotation: [ 0, Math.PI / 2, 0 ]\n                },\n                {\n                    url: cubeSrc.left,\n                    position: [ 512, 0, 0 ],\n                    rotation: [ 0, -Math.PI / 2, 0 ]\n                },\n                {\n                    url: cubeSrc.top,\n                    position: [ 0,  512, 0 ],\n                    rotation: [ Math.PI / 2, 0, Math.PI ]\n                },\n                {\n                    url: cubeSrc.down,\n                    position: [ 0, -512, 0 ],\n                    rotation: [ - Math.PI / 2, 0, Math.PI ]\n                },\n                {\n                    url: cubeSrc.front,\n                    position: [ 0, 0,  512 ],\n                    rotation: [ 0, Math.PI, 0 ]\n                },\n                {\n                    url: cubeSrc.back,\n                    position: [ 0, 0, -512 ],\n                    rotation: [ 0, 0, 0 ]\n                }\n            ];\n            // Remove children from cube;\n            for ( var i = 0; i < sides.length; i ++ ) {\n                if (cube.getObjectByName(STR_CHILDEN_NAME + i)) {\n                    cube.remove(cube.getObjectByName(STR_CHILDEN_NAME + i));\n                }\n            }\n            parent.remove(cube);\n            parent.add(cube);\n            var callbackOnload = function () {\n                // Notify outside to do something when image has been loaded.\n                parent.dispatchEvent({\n                    type: 'img-loaded'\n                });\n            };\n            for ( var i = 0; i < sides.length; i ++ ) {\n                var side = sides[ i ];\n                var element = document.createElement( 'img' );\n                element.width = 1026; // 2 pixels extra to close the gap.\n                element.src = side.url;\n                element.onload = callbackOnload;\n                var object = new THREE.CSS3DObject( element );\n                object.name = STR_CHILDEN_NAME + i;\n                object.position.fromArray( side.position );\n                object.rotation.fromArray( side.rotation );\n                cube.add( object );\n            }\n\t\t\tcube.name = mapKey;\n            return cube;\n\n\t\t}\n        if (!isSupportWebgl) {\n            var arrMaterial = [\n                loadTexture( cubeSrc.right, parent ), // right\n                loadTexture( cubeSrc.left, parent ), // left\n                loadTexture( cubeSrc.top, parent ), // top\n                loadTexture( cubeSrc.down, parent ), // bottom\n                loadTexture( cubeSrc.front, parent ), // front\n                loadTexture( cubeSrc.back, parent ) // back\n            ];\n\n            mesh = new THREE.Mesh( new THREE.BoxGeometry( 60, 60, 60, 20, 20, 20 ), new THREE.MultiMaterial( arrMaterial ) );\n            mesh.scale.x = - 1;\n            // The primy name use one of array.\n            mesh.name = mapKey;\n            // Fisheye\n            // for ( var i = 0, l = mesh.geometry.vertices.length; i < l; i ++ ) {\n            //     var vertex = mesh.geometry.vertices[ i ];\n            //     vertex.normalize();\n            //     vertex.multiplyScalar( 550 );\n            // }\n            mapRender[mapKey] = mesh;\n            parent.add( mesh );\n            return mesh;\n        }\n\n\t\tif (preview) {\n\t\t\tpretex = materials.imageTexture(preview, THREE.UVMapping, function () {\n\t\t\t});\n\t\t}\n\n\t\tif (src) {\n            if (!isListener) {\n                parent.addEventListener('loaded', function (event) {\n                    var data = event.data;\n                    while (parent.getObjectByName('preview')) {\n                        parent.remove(parent.getObjectByName('preview'));\n                    }\n\n                    material = new THREE.MeshBasicMaterial({\n                        map: data.tex\n                    });\n                    mesh = new THREE.Mesh(geometry, material);\n                    mapRender[data.src] = mesh;\n\n                    mesh.name = src;\n\n                    parent.add(mesh);\n                    parent.dispatchEvent({\n                        type: 'img-loaded'\n                    });\n                });\n                isListener = true;\n            }\n\t\t\ttex = materials.imageTexture(src, THREE.UVMapping, function () {\n                parent.dispatchEvent({\n                    type: 'loaded',\n                    data: {\n                        src: src,\n                        tex: tex\n                    }\n                });\n\t\t\t\tself.emit('loaded');\n\t\t\t});\n\t\t}\n\n\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t// transparent: true,\n\t\t\t// envMap: tex,\n\t\t\tmap: pretex\n            // side: THREE.DoubleSide,\n            // debug\n            // wireframe: true,\n            // depthWrite: false\n            // envMap:cubemap\n\t\t});\n\n\t\tmesh = new THREE.Mesh(geometry, material);\n\n\t\tif (options && options.stereo) {\n\t\t\tif (options.stereo === 'vertical') {\n\t\t\t\ttex.repeat.y = 0.5;\n\t\t\t} else {\n\t\t\t\ttex.repeat.x = 0.5;\n\t\t\t}\n\t\t\tmesh.userData.stereo = options.stereo;\n\t\t}\n\n        mesh.name = 'preview';\n\n        parent.add(mesh);\n\n\t\tthis.raycastable = false;\n\n\t\treturn mesh;\n\t};\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/panorama.js\n ** module id = 16\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three'),\n\t\tTAU = Math.PI * 2,\n\t\tHALF_PI = Math.PI / 2,\n\n\t\tdistance = 400000,\n\t\tscratchVector = new THREE.Vector3(),\n\n\t\tparams = [\n\t\t\t'luminance',\n\t\t\t'turbidity',\n\t\t\t'reileigh',\n\t\t\t'mieCoefficient',\n\t\t\t'mieDirectionalG'\n\t\t];\n\n\trequire('imports?THREE=three!SkyShader');\n\n\treturn function sky(parent, options) {\n\t\tvar obj = new THREE.Sky(),\n\t\t\tself = this,\n\t\t\tscene = parent,\n\t\t\tlight,\n\t\t\tsunPosition,\n\t\t\tazimuth = Math.PI / 6,\n\t\t\taltitude = Math.PI / 6;\n\n\t\tfunction mod(x, y) {\n\t\t\treturn x - y * Math.floor(x / y);\n\t\t}\n\n\t\tfunction update() {\n\t\t\tvar sinTheta,\n\t\t\t\tcosTheta,\n\t\t\t\tphi,\n\t\t\t\tsinPhi,\n\t\t\t\tcosPhi;\n\n\t\t\tsinTheta = Math.sin(altitude);\n\t\t\tcosTheta = Math.cos(altitude);\n\t\t\tphi = -HALF_PI - azimuth;\n\t\t\tsinPhi = Math.sin(phi);\n\t\t\tcosPhi = Math.cos(phi);\n\n\t\t\tsunPosition.set(\n\t\t\t\tdistance * cosPhi * cosTheta,\n\t\t\t\tdistance * sinTheta,\n\t\t\t\tdistance * sinPhi * cosTheta\n\t\t\t);\n\n\t\t\tif (light) {\n\t\t\t\tlight.intensity = 1.5 * Math.max(0.0, 1.0 - Math.exp(-((Math.PI / 1.95 - Math.abs(HALF_PI - altitude)) / 1.5)));\n\t\t\t\tlight.position.copy(sunPosition).normalize().multiplyScalar(100);\n\t\t\t}\n\t\t}\n\n\t\tobj.mesh.name = 'sky';\n\n\t\tparent.add(obj.mesh);\n\n\t\twhile (!(scene instanceof THREE.Scene) && scene.parent) {\n\t\t\tscene = scene.parent;\n\t\t}\n\t\tlight = scene.getObjectByName('directional-light');\n\n\t\tthis.setOptions = function (options) {\n\t\t\tvar needUpdate = false,\n\t\t\t\taltitude,\n\t\t\t\tazimuth;\n\n\t\t\tif (options) {\n\t\t\t\tparams.forEach(function (param) {\n\t\t\t\t\tvar val = options[param];\n\t\t\t\t\tif (val !== undefined) {\n\t\t\t\t\t\tval = parseFloat(val);\n\t\t\t\t\t\tif (!isNaN(val)) {\n\t\t\t\t\t\t\tobj.uniforms[param].value = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (options.sunPosition instanceof THREE.Vector3) {\n\t\t\t\t\tobj.uniforms.sunPosition.value.copy(options.sunPosition);\n\t\t\t\t} else if (Array.isArray(options.sunPosition)) {\n\t\t\t\t\tobj.uniforms.sunPosition.value.set(obj.uniforms.sunPosition.value, options.sunPosition);\n\t\t\t\t} else {\n\t\t\t\t\tself.altitude = options.altitude;\n\t\t\t\t\tself.azimuth = options.azimuth;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tObject.defineProperty(this, 'azimuth', {\n\t\t\tset: function (val) {\n\t\t\t\tval = mod(parseFloat(val), TAU);\n\t\t\t\tif (!isNaN(val) && val !== azimuth) {\n\t\t\t\t\tazimuth = val;\n\t\t\t\t\tupdate();\n\t\t\t\t}\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn azimuth;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'altitude', {\n\t\t\tset: function (val) {\n\t\t\t\tval = mod(parseFloat(val), TAU);\n\t\t\t\tif (!isNaN(val) && val !== altitude) {\n\t\t\t\t\taltitude = val;\n\t\t\t\t\tupdate();\n\t\t\t\t}\n\t\t\t},\n\t\t\tget: function() {\n\t\t\t\treturn altitude;\n\t\t\t}\n\t\t});\n\n\t\tthis.setAltitude = function (val) {\n\t\t\tself.altitude = val;\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.setAzimuth = function (val) {\n\t\t\tself.azimuth = val;\n\t\t\treturn this;\n\t\t};\n\n\t\tsunPosition = obj.uniforms.sunPosition.value;\n\t\tupdate();\n\n\t\tthis.setOptions(options);\n\n\t\tthis.raycastable = false;\n\n\t\treturn obj.mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/sky.js\n ** module id = 17\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\trequire('imports?THREE=three!../lib/ThreeAudio');\n\n\treturn function sound(parent, options) {\n\t\tvar obj,\n\t\t\tsrc,\n\t\t\tlistener,\n\t\t\tscene = parent;\n\n\t\tif (typeof options === 'string' || Array.isArray(options)) {\n\t\t\tsrc = options;\n\t\t} else if (options) {\n\t\t\tsrc = options.src;\n\t\t}\n\n\t\twhile (!(scene instanceof THREE.Scene) && scene.parent) {\n\t\t\tscene = scene.parent;\n\t\t}\n\n\t\tlistener = scene.getObjectByName('audio-listener');\n\t\tobj = new THREE.Audio(listener);\n\t\t// obj.setLoop(true);\n\t\tobj.load(src);\n\n\t\tthis.start = obj.start.bind(obj);\n\t\tthis.volume = obj.volume.bind(obj);\n\n\t\tparent.add(obj);\n\n\t\treturn obj;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/sound.js\n ** module id = 18\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\treturn function box(parent, options) {\n\t\tvar geometry,\n\t\t\tmesh;\n\n\t\tgeometry = new THREE.SphereGeometry(\n\t\t\toptions.radius === undefined ? 0.5 : options.radius,\n\t\t\toptions.widthSegments === undefined ? 16 : options.widthSegments,\n\t\t\toptions.heightSegments === undefined ? 12 : options.heightSegments,\n\t\t\toptions.phiStart,\n\t\t\toptions.phiLength,\n\t\t\toptions.thetaStart,\n\t\t\toptions.thetaLength\n\t\t);\n\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\tmesh.name = 'sphere';\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/sphere.js\n ** module id = 19\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar THREE = require('three'),\n\t\tfontSizeRegex = /(\\d+)px/i,\n\t\tnewLineRegex = /[\\n\\r]/,\n\t\tspaceRegex = /[\\t ]/,\n\t\tlog2 = Math.log(2),\n\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1);\n\n\treturn function text(parent, options) {\n\t\tvar self = this,\n\t\t\tmaterial,\n\t\t\tcanvas,\n\t\t\tctx,\n\t\t\tmesh,\n\t\t\tcontainer,\n\t\t\tsrc,\n\t\t\ttextWidth = 0,\n\t\t\ttextHeight = 0,\n\t\t\tprops = {\n\t\t\t\ttext: '',\n\t\t\t\tfont: '80px sans-serif',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\ttextBaseline: '',\n\t\t\t\tdirection: '',\n\t\t\t\tfillStyle: 'white',\n\t\t\t\tresolution: 256, //pixels per meter\n\t\t\t\twrap: 5 //in meters\n\t\t\t},\n\t\t\ttex;\n\n\t\tfunction nextPowerOfTwo(n) {\n\t\t\treturn Math.pow(2, Math.ceil(Math.log(n) / log2));\n\t\t}\n\n\t\tfunction Line(word) {\n\t\t\tthis.spaceWidth = ctx.measureText(' ').width;\n\t\t\tthis.totalWidth = 0;\n\t\t\tthis.wordsWidth = 0;\n\t\t\tthis.words = [];\n\t\t\tthis.wrap = false;\n\t\t\tif (word) {\n\t\t\t\tthis.add(word);\n\t\t\t}\n\t\t}\n\n\t\tLine.prototype.text = function () {\n\t\t\treturn this.words.join(' ');\n\t\t};\n\n\t\tLine.prototype.add = function(word) {\n\t\t\tvar wordWidth;\n\t\t\tif (this.words.length) {\n\t\t\t\tthis.totalWidth += this.spaceWidth;\n\t\t\t}\n\t\t\tthis.words.push(word);\n\t\t\twordWidth = Line.measure(word);\n\t\t\tthis.totalWidth += wordWidth;\n\t\t\tthis.wordsWidth += wordWidth;\n\t\t};\n\n\t\tLine.prototype.measure = function(word) {\n\t\t\tvar width = this.totalWidth;\n\t\t\tif (word) {\n\t\t\t\twidth += Line.measure(word);\n\t\t\t\tif (this.words.length) {\n\t\t\t\t\twidth += this.spaceWidth;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn width;\n\t\t};\n\n\t\tLine.measure = function(word) {\n\t\t\treturn ctx.measureText(word).width;\n\t\t};\n\n\t\tfunction update() {\n\t\t\t//text stuffs\n\t\t\tvar text,\n\t\t\t\tword = '',\n\t\t\t\tletter,\n\t\t\t\tisSpace,\n\t\t\t\tline,\n\t\t\t\tlines = [],\n\t\t\t\tparse,\n\n\t\t\t\t//layout\n\t\t\t\tdirection = getComputedStyle(document.body).direction,\n\t\t\t\tinherit,\n\t\t\t\tresolution = parseFloat(props.resolution) || 256,\n\t\t\t\twrap,\n\t\t\t\twrapped = false,\n\t\t\t\tfontSize,\n\t\t\t\tpadding,\n\n\t\t\t\t//measurements\n\t\t\t\tlineHeight,\n\t\t\t\ti, start, y, measure,\n\t\t\t\twidth,\n\t\t\t\theight = 0;\n\n\t\t\twrap = parseFloat(props.wrap);\n\t\t\tif (isNaN(wrap) || wrap < 0) {\n\t\t\t\twrap = 5;\n\t\t\t}\n\t\t\twidth = resolution * wrap;\n\n\t\t\tctx.font = props.font;\n\t\t\tparse = fontSizeRegex.exec(ctx.font);\n\t\t\tfontSize = parseFloat(parse && parse[1]) || 50;\n\n\t\t\tlineHeight = fontSize * 1.5;\n\n\t\t\tline = new Line();\n\n\t\t\ttext = props.text === 0 ? '0' : String(props.text || '');\n\t\t\tif (wrap) {\n\t\t\t\ttext = text.trim() + ' ';\n\t\t\t\tfor (i = 0; i < text.length; i++) {\n\t\t\t\t\tletter = text.charAt(i);\n\t\t\t\t\tif (newLineRegex.test(letter)) {\n\t\t\t\t\t\tline.add(word);\n\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t\tword = '';\n\t\t\t\t\t\tline = new Line();\n\t\t\t\t\t} else if (spaceRegex.test(letter)) {\n\t\t\t\t\t\tmeasure = line.measure(word);\n\t\t\t\t\t\tif (measure < width) {\n\t\t\t\t\t\t\tif (line) {\n\t\t\t\t\t\t\t\tline.add(word);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tline = new Line(word);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (!line && Line.measure(word) >= width) {\n\t\t\t\t\t\t\t//one very long word\n\t\t\t\t\t\t\tlines.push(new Line(word));\n\t\t\t\t\t\t\tword = '';\n\t\t\t\t\t\t\tline = new Line();\n\t\t\t\t\t\t\twrapped = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tline.wrap = true;\n\t\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t\t\tline = new Line(word);\n\t\t\t\t\t\t\twrapped = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tword = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tword += letter;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (line) {\n\t\t\t\t\tlines.push(line);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlines.push(new Line(text));\n\t\t\t}\n\n\t\t\tif (!width || !wrapped) {\n\t\t\t\twidth = lines.reduce(function (previous, line) {\n\t\t\t\t\treturn Math.max(previous, line.totalWidth);\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t\twidth = Math.min(width, 2048);\n\n\t\t\theight = lines.length * lineHeight;\n\n\t\t\tif (options && options.mipmap === false) {\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\t\t\t} else {\n\t\t\t\tcanvas.width = nextPowerOfTwo(width);\n\t\t\t\tcanvas.height = nextPowerOfTwo(height);\n\t\t\t}\n\n\t\t\tmesh.scale.set(canvas.width / resolution, canvas.height / resolution, 1);\n\n\t\t\t//debug\n\t\t\t// ctx.fillStyle = 'rgba(100, 100, 100, 0.5)';\n\t\t\t// ctx.fillRect(0, 0, canvas.width, canvas.height);\n\t\t\t// document.body.appendChild(canvas);\n\t\t\t// canvas.style.cssText = 'position: absolute; width: auto !important; height: auto !important; max-width: 80%';\n\n\t\t\t/*\n\t\t\tset all these properties again because they get reset\n\t\t\twhen you resize the canvas\n\t\t\t*/\n\t\t\tctx.font = props.font;\n\t\t\tctx.textAlign = props.textAlign;\n\t\t\tctx.textBaseline = props.textBaseline;\n\t\t\tctx.direction = props.direction;\n\t\t\tctx.fillStyle = props.fillStyle;\n\t\t\t//todo: add maxWidth?\n\n\t\t\tpadding = (canvas.width - width) / 2;\n\t\t\ty = (canvas.height - height) / 2 + lineHeight / 2;\n\n\t\t\tinherit = (ctx.direction === '' || ctx.direction === 'inherit');\n\t\t\tif (ctx.textAlign === 'center') {\n\t\t\t\tstart = canvas.width / 2;\n\t\t\t} else if (ctx.textAlign === 'right' ||\n\t\t\t\tctx.textAlign === 'end' && (ctx.direction === 'ltr' || inherit && direction === 'ltr') ||\n\t\t\t\tctx.textAlign === 'start' && (ctx.direction === 'rtl' || inherit && direction === 'rtl')) {\n\n\t\t\t\tstart = canvas.width - padding;\n\t\t\t} else {\n\t\t\t\tstart = padding;\n\t\t\t}\n\n\t\t\tlines.forEach(function (line) {\n\t\t\t\tvar x,\n\t\t\t\t\tspace;\n\t\t\t\tif (props.textAlign === 'justify' && line.wrap && line.words.length > 1) {\n\t\t\t\t\tx = start;\n\t\t\t\t\tspace = (width - line.wordsWidth) / (line.words.length - 1);\n\t\t\t\t\tline.words.forEach(function (word) {\n\t\t\t\t\t\tctx.fillText(word, x, y);\n\t\t\t\t\t\tx += space + Line.measure(word);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tctx.fillText(line.text(), start, y);\n\t\t\t\t}\n\t\t\t\ty += lineHeight;\n\t\t\t});\n\n\t\t\ttextWidth = width / resolution;\n\t\t\ttextHeight = lines.length * lineHeight / resolution;\n\n\t\t\ttex.needsUpdate = true;\n\n\t\t\tmesh.name = text.trim();\n\t\t}\n\n\t\tcanvas = document.createElement('canvas');\n\t\tctx = canvas.getContext('2d');\n\t\ttex = new THREE.Texture(canvas);\n\n\t\tif (canvas.width === nextPowerOfTwo(canvas.width) &&\n\t\t\tcanvas.height === nextPowerOfTwo(canvas.height)) {\n\n\t\t\ttex.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\ttex.generateMipmaps = true;\n\t\t}\n\n\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\tside: THREE.DoubleSide,\n\t\t\ttransparent: true,\n\t\t\tmap: tex\n\t\t});\n\n\t\tmesh = new THREE.Mesh(geometry, material);\n\n\t\tcontainer = new THREE.Object3D();\n\t\tcontainer.name = 'text';\n\t\tcontainer.add(mesh);\n\t\tparent.add(container);\n\n\t\tif (typeof options === 'string') {\n\t\t\tprops.text = options;\n\t\t} else if (options) {\n\t\t\tObject.keys(props).forEach(function (key) {\n\t\t\t\tprops[key] = options[key] || props[key];\n\t\t\t});\n\t\t}\n\t\tupdate();\n\n\t\tObject.keys(props).forEach(function (key) {\n\t\t\tObject.defineProperty(self, key, {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn props[key];\n\t\t\t\t},\n\t\t\t\tset: function (val) {\n\t\t\t\t\tprops[key] = val;\n\t\t\t\t\tupdate();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tObject.defineProperty(self, 'width', {\n\t\t\tget: function () {\n\t\t\t\treturn textWidth;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(self, 'height', {\n\t\t\tget: function () {\n\t\t\t\treturn textHeight;\n\t\t\t}\n\t\t});\n\n\t\tthis.material = material;\n\n\t\treturn container;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/text.js\n ** module id = 20\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\treturn function torus(parent, options) {\n\t\tvar geometry,\n\t\t\tmesh;\n\n\t\tgeometry = new THREE.TorusGeometry(\n\t\t\toptions.radius === undefined ? 0.5 : options.radius,\n\t\t\toptions.tube === undefined ? 0.125 : options.tube,\n\t\t\toptions.radialSegments === undefined ? 12 : options.radialSegments,\n\t\t\toptions.tubularSegments === undefined ? 16 : options.tubularSegments,\n\t\t\toptions.arc\n\t\t);\n\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\tmesh.name = 'torus';\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/torus.js\n ** module id = 21\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar THREE = require('three'),\n\t\turlRegex = require('../utils/urlregex'),\n\t\textRegex = /\\.(webm|ogg|ogv|m4v|mp4|mov)/i,\n\t\tvideo;\n\n\tvideo = function (parent, options) {\n\t\tvar geometry,\n\t\t\tmaterial,\n\t\t\tmesh,\n\t\t\tvid,\n\t\t\ttex,\n\t\t\taspectRatio = 1,\n\t\t\tplaying = false,\n\t\t\tself = this;\n\n\t\tfunction isPowerOfTwo(num) {\n\t\t\treturn num > 0 && (num & (num-1)) === 0; // jshint ignore:line\n\t\t}\n\n\t\tfunction loadedMetadata() {\n\t\t\t//todo: don't do any of this if object has been deleted\n\n\t\t\tvar newAspectRatio = vid.videoWidth / vid.videoHeight;\n\t\t\tif (!options || !options.sphere) {\n\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(1, aspectRatio / newAspectRatio, 1));\n\t\t\t}\n\t\t\taspectRatio = newAspectRatio;\n\n\t\t\tif (vid.videoWidth === vid.videoHeight &&\n\t\t\t\t\tisPowerOfTwo(vid.videoWidth) && isPowerOfTwo(vid.videoHeight)) {\n\n\t\t\t\ttex.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\t\ttex.generateMipmaps = true;\n\t\t\t} else {\n\t\t\t\ttex.minFilter = THREE.LinearFilter;\n\t\t\t\ttex.generateMipmaps = false;\n\t\t\t}\n\n\t\t\tmaterial.map = tex;\n\t\t\tmaterial.visible = true;\n\n\t\t\tif (playing) {\n\t\t\t\tvid.play();\n\t\t\t}\n\t\t}\n\n\t\tfunction setSource(sources) {\n\t\t\tsources.forEach(function (src) {\n\t\t\t\tvar parse,\n\t\t\t\t\text,\n\t\t\t\t\tsource;\n\n\t\t\t\tif (!src) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tparse = urlRegex.exec(src);\n\t\t\t\tif (parse &&\n\t\t\t\t\t\t(parse[1] && parse[1] !== window.location.hostΩ ||\n\t\t\t\t\t\t\tparse[2] && parse[2] !== window.location.port)) {\n\n\t\t\t\t\tif (vid.crossOrigin !== undefined) {\n\t\t\t\t\t\tvid.crossOrigin = 'anonymous';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('Browser does not support cross-origin video');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsource = document.createElement('source');\n\t\t\t\tsource.src = src;\n\n\t\t\t\text = extRegex.exec(src);\n\t\t\t\tif (!ext || vid.canPlayType('video/' + ext[1])) {\n\t\t\t\t\tvid.appendChild(source);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/*\n\t\tPause the video when this browser tab is in the background or minimized.\n\t\tResume when it comes back in focus, but only if the user didn't pause manually.\n\t\t*/\n\t\tfunction visibilityChange() {\n\t\t\tif (document.hidden || document.mozHidden || document.msHidden || document.webkitHidden) {\n\t\t\t\tvid.pause();\n\t\t\t} else if (playing) {\n\t\t\t\tvid.play();\n\t\t\t}\n\t\t}\n\n\t\tvid = document.createElement('video');\n\t\tvid.loop = true;\n\t\tvid.addEventListener('loadedmetadata', loadedMetadata, false);\n\n\t\tif (Array.isArray(options)) {\n\t\t\tsetSource(options);\n\t\t} if (typeof options === 'string') {\n\t\t\tsetSource([options]);\n\t\t} else if (typeof options.src === 'string') {\n\t\t\tsetSource([options.src]);\n\t\t} else if (Array.isArray(options.src)) {\n\t\t\tsetSource(options.src);\n\t\t}\n\n\t\tvid.load();\n\n\t\ttex = new THREE.VideoTexture(vid, THREE.UVMapping);\n\t\ttex.format = THREE.RGBFormat;\n\n\t\tif (options && options.sphere) {\n\t\t\tgeometry = new THREE.SphereGeometry(\n\t\t\t\t994, //radius\n\t\t\t\t60, //widthSegments\n\t\t\t\t60, //heightSegments\n\t\t\t\t(parseFloat(options.phiStart) || 0) * Math.PI * 2,\n\t\t\t\t(parseFloat(options.phiLength) || 1) * Math.PI * 2,\n\t\t\t\t(parseFloat(options.thetaStart) || 0) * Math.PI,\n\t\t\t\t(parseFloat(options.thetaLength) || 1) * Math.PI\n\t\t\t);\n\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(-1, 1, 1));\n\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeRotationY(- Math.PI / 2));\n\t\t} else {\n\t\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1, 8);\n\t\t}\n\n\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\tside: THREE.DoubleSide,\n\t\t\tmap: tex,\n\t\t\tvisible: false\n\t\t});\n\n\t\tmesh = new THREE.Mesh(geometry, material);\n\n\t\tif (options && options.stereo) {\n\t\t\tif (options.stereo === 'vertical') {\n\t\t\t\ttex.repeat.y = 0.5;\n\t\t\t} else {\n\t\t\t\ttex.repeat.x = 0.5;\n\t\t\t}\n\t\t\tmesh.userData.stereo = options.stereo;\n\t\t}\n\n\t\tif (vid.readyState) {\n\t\t\tloadedMetadata();\n\t\t}\n\n\t\tthis.play = function play() {\n\t\t\tplaying = true;\n\t\t\tvid.play();\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.pause = function pause() {\n\t\t\tplaying = false;\n\t\t\tvid.pause();\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.canPlayType = video.canPlayType;\n\n\t\tObject.defineProperty(this, 'width', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.videoWidth;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'height', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.videoHeight;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'paused', {\n\t\t\tget: function () {\n\t\t\t\treturn !playing;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'volume', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.volume;\n\t\t\t},\n\t\t\tset: function (vol) {\n\t\t\t\tvid.volume = vol;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'muted', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.muted;\n\t\t\t},\n\t\t\tset: function (muted) {\n\t\t\t\tvid.muted = muted;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'duration', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.duration || 0;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'currentTime', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.currentTime;\n\t\t\t},\n\t\t\tset: function (currentTime) {\n\t\t\t\tif (vid.readyState && currentTime < vid.duration && currentTime >= 0) {\n\t\t\t\t\tvid.currentTime = currentTime;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t[\n\t\t\t'loadedmetadata',\n\t\t\t'play',\n\t\t\t'pause',\n\t\t\t'playing',\n\t\t\t'progress'\n\t\t].forEach(function registerMediaEvent(event) {\n\t\t\tvid.addEventListener(event, self.emit.bind(self, event));\n\t\t});\n\n\t\t//sometimes video fails to play because it's too big. remove it and try again\n\t\tvid.addEventListener('error', function (evt) {\n\t\t\tif (vid.error.code === window.MediaError.MEDIA_ERR_DECODE && vid.childNodes.length > 1) {\n\t\t\t\tmaterial.visible = false;\n\t\t\t\tvid.removeChild(vid.firstChild);\n\t\t\t\tvid.load();\n\t\t\t}\n\n\t\t\tself.emit(event, evt);\n\t\t}, true);\n\n\t\tthis.element = vid;\n\n\t\twindow.addEventListener('touchstart', function touchStart() {\n\t\t\tif (playing) {\n\t\t\t\tvid.play();\n\t\t\t} else {\n\t\t\t\tvid.load();\n\t\t\t}\n\t\t\twindow.removeEventListener('touchstart', touchStart, true);\n\t\t}, true);\n\n\t\t//pause when window is hidden\n\t\tdocument.addEventListener('visibilitychange', visibilityChange);\n\t\tdocument.addEventListener('mozvisibilitychange', visibilityChange);\n\t\tdocument.addEventListener('msvisibilitychange', visibilityChange);\n\t\tdocument.addEventListener('webkitvisibilitychange', visibilityChange);\n\n\t\tmesh.name = 'video';\n\t\tthis.raycastable = !(options && options.sphere);\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n\n\tvideo.canPlayType = function canPlayType(type) {\n\t\tvar element = document.createElement('video');\n\t\treturn element.canPlayType(type);\n\t};\n\n\treturn video;\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/video.js\n ** module id = 22\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author richt / http://richt.me\n * @author WestLangley / http://github.com/WestLangley\n *\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n */\n\nTHREE.DeviceOrientationControls = function( object ) {\n\n\tvar scope = this;\n\n\tthis.object = object;\n\tthis.object.rotation.reorder( \"YXZ\" );\n\n\tthis.enabled = true;\n\n\tthis.deviceOrientation = {};\n\tthis.screenOrientation = 0;\n\n\tthis.alpha = 0;\n\tthis.alphaOffsetAngle = 0;\n\n\n\tvar onDeviceOrientationChangeEvent = function( event ) {\n\n\t\tscope.deviceOrientation = event;\n\n\t};\n\n\tvar onScreenOrientationChangeEvent = function() {\n\n\t\tscope.screenOrientation = window.orientation || 0;\n\n\t};\n\n\t// The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\n\tvar setObjectQuaternion = function() {\n\n\t\tvar zee = new THREE.Vector3( 0, 0, 1 );\n\n\t\tvar euler = new THREE.Euler();\n\n\t\tvar q0 = new THREE.Quaternion();\n\n\t\tvar q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\n\n\t\treturn function( quaternion, alpha, beta, gamma, orient ) {\n\n\t\t\teuler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\n\n\t\t\tquaternion.setFromEuler( euler ); // orient the device\n\n\t\t\tquaternion.multiply( q1 ); // camera looks out the back of the device, not the top\n\n\t\t\tquaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\n\n\t\t}\n\n\t}();\n\n\tthis.connect = function() {\n\n\t\tonScreenOrientationChangeEvent(); // run once on load\n\n\t\twindow.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\twindow.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\n\t\tscope.enabled = true;\n\n\t};\n\n\tthis.disconnect = function() {\n\n\t\twindow.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\twindow.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\n\t\tscope.enabled = false;\n\n\t};\n\n\tthis.update = function() {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tvar alpha = scope.deviceOrientation.alpha ? THREE.Math.degToRad( scope.deviceOrientation.alpha ) + this.alphaOffsetAngle : 0; // Z\n\t\tvar beta = scope.deviceOrientation.beta ? THREE.Math.degToRad( scope.deviceOrientation.beta ) : 0; // X'\n\t\tvar gamma = scope.deviceOrientation.gamma ? THREE.Math.degToRad( scope.deviceOrientation.gamma ) : 0; // Y''\n\t\tvar orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\n\n\t\tsetObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\n\t\tthis.alpha = alpha;\n\n\t};\n\n\tthis.updateAlphaOffsetAngle = function( angle ) {\n\n\t\tthis.alphaOffsetAngle = angle;\n\t\tthis.update();\n\n\t};\n\n\tthis.dispose = function() {\n\n\t\tthis.disconnect();\n\n\t};\n\n\tthis.connect();\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./bower_components/DeviceOrientationControls/index.js\n ** module id = 23\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tthis.object = object;\n\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.25;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function() {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\treturn function update () {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\t\t\tscope.target.add( panOffset );\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function() {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function() {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function() {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function() {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan ( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\t//console.log( 'handleMouseDownPan' );\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t// rotating across whole screen goes 360 degrees around\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\t//console.log( 'handleMouseMovePan' );\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( event ) {\n\n\t\t//console.log( 'handleMouseUp' );\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\t//console.log( 'handleMouseWheel' );\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\t//console.log( 'handleKeyDown' );\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\t//console.log( 'handleTouchStartDolly' );\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\t//console.log( 'handleTouchStartPan' );\n\n\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t// rotating across whole screen goes 360 degrees around\n\t\trotateLeft( -2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\trotateUp( -2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\t//console.log( 'handleTouchMoveDolly' );\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\t//console.log( 'handleTouchMovePan' );\n\n\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchEnd( event ) {\n\n\t\t//console.log( 'handleTouchEnd' );\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\n\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\thandleMouseDownRotate( event );\n\n\t\t\tstate = STATE.ROTATE;\n\n\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\n\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\thandleMouseDownDolly( event );\n\n\t\t\tstate = STATE.DOLLY;\n\n\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\n\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\thandleMouseDownPan( event );\n\n\t\t\tstate = STATE.PAN;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\thandleMouseMoveRotate( event );\n\n\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\thandleMouseMoveDolly( event );\n\n\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\thandleMouseMovePan( event );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleTouchStartDolly( event );\n\n\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\n\n\t\t\t\thandleTouchMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\nObject.defineProperties( THREE.OrbitControls.prototype, {\n\n\tcenter: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\treturn this.target;\n\n\t\t}\n\n\t},\n\n\t// backward compatibility\n\n\tnoZoom: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\treturn ! this.enableZoom;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\tthis.enableZoom = ! value;\n\n\t\t}\n\n\t},\n\n\tnoRotate: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\treturn ! this.enableRotate;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\tthis.enableRotate = ! value;\n\n\t\t}\n\n\t},\n\n\tnoPan: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\treturn ! this.enablePan;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\tthis.enablePan = ! value;\n\n\t\t}\n\n\t},\n\n\tnoKeys: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\treturn ! this.enableKeys;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\tthis.enableKeys = ! value;\n\n\t\t}\n\n\t},\n\n\tstaticMoving : {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\treturn ! this.enableDamping;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\tthis.enableDamping = ! value;\n\n\t\t}\n\n\t},\n\n\tdynamicDampingFactor : {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\treturn this.dampingFactor;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\tthis.dampingFactor = value;\n\n\t\t}\n\n\t}\n\n} );\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./bower_components/OrbitControls/index.js\n ** module id = 24\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n( function() {\n\n\tvar _oldConsole = console.log;\n\n\tvar supportedTypes = [];\n\n\tfunction addSupportedType( type, format ) {\n\n\t\tsupportedTypes.push( {\n\t\t\ttype: type,\n\t\t\tformat: format\n\t\t} );\n\n\t}\n\n\taddSupportedType( THREE.Matrix4, function( v ) {\n\n\t\tvar e = v.elements;\n\t\t\t\t\n\t\treturn [\n\t\t\t[ e[ 0 ], e[ 4 ], e[ 8 ], e[ 12 ] ],\n\t\t\t[ e[ 1 ], e[ 5 ], e[ 9 ], e[ 13 ] ],\n\t\t\t[ e[ 2 ], e[ 6 ], e[ 10 ], e[ 14 ] ],\n\t\t\t[ e[ 3 ], e[ 7 ], e[ 11 ], e[ 15 ] ]\n\t\t];\n\n\t} );\n\n\taddSupportedType( THREE.Matrix3, function( v ) {\n\n\t\tvar e = v.elements;\n\t\t\t\t\n\t\treturn [\n\t\t\t[ e[ 0 ], e[ 3 ], e[ 6 ] ],\n\t\t\t[ e[ 1 ], e[ 4 ], e[ 7 ] ],\n\t\t\t[ e[ 2 ], e[ 5 ], e[ 8 ] ]\n\t\t];\n\n\t} );\n\n\taddSupportedType( THREE.Vector2, function( v ) {\n\n\t\treturn {\n\t\t\tVector2: { x: v.x, y: v.y }\n\t\t};\n\n\t} );\n\n\taddSupportedType( THREE.Vector3, function( v ) {\n\n\t\treturn {\n\t\t\tVector3: { x: v.x, y: v.y, z: v.z }\n\t\t};\n\n\t} );\n\n\taddSupportedType( THREE.Vector4, function( v ) {\n\n\t\treturn {\n\t\t\tVector4: { x: v.x, y: v.y, z: v.z, w: v.w }\n\t\t};\n\n\t} );\n\n\taddSupportedType( THREE.Euler, function( v ) {\n\n\t\treturn {\n\t\t\tVector4: { x: v.x, y: v.y, z: v.z, order: v.order }\n\t\t};\n\n\t} );\n\n\taddSupportedType( THREE.Ray, function( v ) {\n\n\t\treturn { \n\t\t\t'Ray origin': { x: v.origin.x, y: v.origin.y, z: v.origin.z },\n\t\t\t'Ray direction': { x: v.direction.x, y: v.direction.y, z: v.direction.z }\n\t\t};\n\n\t} );\n\n\tfunction stacktrace() { \n\t\tvar err = new Error();\n\t\treturn err.stack;\n\t}\n\n\tconsole.log = function() {\n\n\t\t//console.trace ();\n\n\t\tvar special = false;\n\n\t\t[].forEach.call( arguments, function( a ) { \n\t\t\tsupportedTypes.forEach( function( t ) {\n\t\t\t\tif( a instanceof t.type ) special = true;;\n\t\t\t} );\n\t\t} );\n\n\t\tif( special ) {\n\n\t\t\t[].forEach.call( arguments, function( a ) { \n\t\t\t\n\t\t\t\t_oldConsole.apply( console, [ a ] );\n\n\t\t\t\tsupportedTypes.forEach( function( t ) {\n\n\t\t\t\t\tif( a instanceof t.type ) {\n\n\t\t\t\t\t\tconsole.table( t.format( a ) );\n\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\t_oldConsole.apply( console, arguments );\n\n\t\t}\n\n\t}\n\n} )();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./bower_components/AugmentedConsole/index.js\n ** module id = 25\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CSS3DObject = function ( element ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.element = element;\n\tthis.element.style.position = 'absolute';\n\n\tthis.addEventListener( 'removed', function ( event ) {\n\n\t\tif ( this.element.parentNode !== null ) {\n\n\t\t\tthis.element.parentNode.removeChild( this.element );\n\n\t\t}\n\n\t} );\n\n};\n\nTHREE.CSS3DObject.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\n\nTHREE.CSS3DSprite = function ( element ) {\n\n\tTHREE.CSS3DObject.call( this, element );\n\n};\n\nTHREE.CSS3DSprite.prototype = Object.create( THREE.CSS3DObject.prototype );\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\n\n//\n\nTHREE.CSS3DRenderer = function () {\n\n\tconsole.log( 'THREE.CSS3DRenderer', THREE.REVISION );\n\n\tvar _width, _height;\n\tvar _widthHalf, _heightHalf;\n\n\tvar matrix = new THREE.Matrix4();\n\n\tvar cache = {\n\t\tcamera: { fov: 0, style: '' },\n\t\tobjects: {}\n\t};\n\n\tvar domElement = document.createElement( 'div' );\n\tdomElement.style.overflow = 'hidden';\n\n\tdomElement.style.WebkitTransformStyle = 'preserve-3d';\n\tdomElement.style.MozTransformStyle = 'preserve-3d';\n\tdomElement.style.oTransformStyle = 'preserve-3d';\n\tdomElement.style.transformStyle = 'preserve-3d';\n\n\tthis.domElement = domElement;\n\n\tvar cameraElement = document.createElement( 'div' );\n\n\tcameraElement.style.WebkitTransformStyle = 'preserve-3d';\n\tcameraElement.style.MozTransformStyle = 'preserve-3d';\n\tcameraElement.style.oTransformStyle = 'preserve-3d';\n\tcameraElement.style.transformStyle = 'preserve-3d';\n\n\tdomElement.appendChild( cameraElement );\n\n\tthis.setClearColor = function () {};\n\n\tthis.getSize = function() {\n\n\t\treturn {\n\t\t\twidth: _width,\n\t\t\theight: _height\n\t\t};\n\n\t};\n\n\tthis.setSize = function ( width, height ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_widthHalf = _width / 2;\n\t\t_heightHalf = _height / 2;\n\n\t\tdomElement.style.width = width + 'px';\n\t\tdomElement.style.height = height + 'px';\n\n\t\tcameraElement.style.width = width + 'px';\n\t\tcameraElement.style.height = height + 'px';\n\n\t};\n\n\tvar epsilon = function ( value ) {\n\n\t\treturn Math.abs( value ) < 0.000001 ? 0 : value;\n\n\t};\n\n\tvar getCameraCSSMatrix = function ( matrix ) {\n\n\t\tvar elements = matrix.elements;\n\n\t\treturn 'matrix3d(' +\n\t\t\tepsilon( elements[ 0 ] ) + ',' +\n\t\t\tepsilon( - elements[ 1 ] ) + ',' +\n\t\t\tepsilon( elements[ 2 ] ) + ',' +\n\t\t\tepsilon( elements[ 3 ] ) + ',' +\n\t\t\tepsilon( elements[ 4 ] ) + ',' +\n\t\t\tepsilon( - elements[ 5 ] ) + ',' +\n\t\t\tepsilon( elements[ 6 ] ) + ',' +\n\t\t\tepsilon( elements[ 7 ] ) + ',' +\n\t\t\tepsilon( elements[ 8 ] ) + ',' +\n\t\t\tepsilon( - elements[ 9 ] ) + ',' +\n\t\t\tepsilon( elements[ 10 ] ) + ',' +\n\t\t\tepsilon( elements[ 11 ] ) + ',' +\n\t\t\tepsilon( elements[ 12 ] ) + ',' +\n\t\t\tepsilon( - elements[ 13 ] ) + ',' +\n\t\t\tepsilon( elements[ 14 ] ) + ',' +\n\t\t\tepsilon( elements[ 15 ] ) +\n\t\t')';\n\n\t};\n\n\tvar getObjectCSSMatrix = function ( matrix ) {\n\n\t\tvar elements = matrix.elements;\n\n\t\treturn 'translate3d(-50%,-50%,0) matrix3d(' +\n\t\t\tepsilon( elements[ 0 ] ) + ',' +\n\t\t\tepsilon( elements[ 1 ] ) + ',' +\n\t\t\tepsilon( elements[ 2 ] ) + ',' +\n\t\t\tepsilon( elements[ 3 ] ) + ',' +\n\t\t\tepsilon( - elements[ 4 ] ) + ',' +\n\t\t\tepsilon( - elements[ 5 ] ) + ',' +\n\t\t\tepsilon( - elements[ 6 ] ) + ',' +\n\t\t\tepsilon( - elements[ 7 ] ) + ',' +\n\t\t\tepsilon( elements[ 8 ] ) + ',' +\n\t\t\tepsilon( elements[ 9 ] ) + ',' +\n\t\t\tepsilon( elements[ 10 ] ) + ',' +\n\t\t\tepsilon( elements[ 11 ] ) + ',' +\n\t\t\tepsilon( elements[ 12 ] ) + ',' +\n\t\t\tepsilon( elements[ 13 ] ) + ',' +\n\t\t\tepsilon( elements[ 14 ] ) + ',' +\n\t\t\tepsilon( elements[ 15 ] ) +\n\t\t')';\n\n\t};\n\n\tvar renderObject = function ( object, camera ) {\n\n\t\tif ( object instanceof THREE.CSS3DObject ) {\n\n\t\t\tvar style;\n\n\t\t\tif ( object instanceof THREE.CSS3DSprite ) {\n\n\t\t\t\t// http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\n\n\t\t\t\tmatrix.copy( camera.matrixWorldInverse );\n\t\t\t\tmatrix.transpose();\n\t\t\t\tmatrix.copyPosition( object.matrixWorld );\n\t\t\t\tmatrix.scale( object.scale );\n\n\t\t\t\tmatrix.elements[ 3 ] = 0;\n\t\t\t\tmatrix.elements[ 7 ] = 0;\n\t\t\t\tmatrix.elements[ 11 ] = 0;\n\t\t\t\tmatrix.elements[ 15 ] = 1;\n\n\t\t\t\tstyle = getObjectCSSMatrix( matrix );\n\n\t\t\t} else {\n\n\t\t\t\tstyle = getObjectCSSMatrix( object.matrixWorld );\n\n\t\t\t}\n\n\t\t\tvar element = object.element;\n\t\t\tvar cachedStyle = cache.objects[ object.id ];\n\n\t\t\tif ( cachedStyle === undefined || cachedStyle !== style ) {\n\n\t\t\t\telement.style.WebkitTransform = style;\n\t\t\t\telement.style.MozTransform = style;\n\t\t\t\telement.style.oTransform = style;\n\t\t\t\telement.style.transform = style;\n\n\t\t\t\tcache.objects[ object.id ] = style;\n\n\t\t\t}\n\n\t\t\tif ( element.parentNode !== cameraElement ) {\n\n\t\t\t\tcameraElement.appendChild( element );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( object.children[ i ], camera );\n\n\t\t}\n\n\t};\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tvar fov = 0.5 / Math.tan( THREE.Math.degToRad( camera.getEffectiveFOV() * 0.5 ) ) * _height;\n\n\t\tif ( cache.camera.fov !== fov ) {\n\n\t\t\tdomElement.style.WebkitPerspective = fov + \"px\";\n\t\t\tdomElement.style.MozPerspective = fov + \"px\";\n\t\t\tdomElement.style.oPerspective = fov + \"px\";\n\t\t\tdomElement.style.perspective = fov + \"px\";\n\n\t\t\tcache.camera.fov = fov;\n\n\t\t}\n\n\t\tscene.updateMatrixWorld();\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\tvar style = \"translate3d(0,0,\" + fov + \"px)\" + getCameraCSSMatrix( camera.matrixWorldInverse ) +\n\t\t\t\" translate3d(\" + _widthHalf + \"px,\" + _heightHalf + \"px, 0)\";\n\n\t\tif ( cache.camera.style !== style ) {\n\n\t\t\tcameraElement.style.WebkitTransform = style;\n\t\t\tcameraElement.style.MozTransform = style;\n\t\t\tcameraElement.style.oTransform = style;\n\t\t\tcameraElement.style.transform = style;\n\n\t\t\tcache.camera.style = style;\n\n\t\t}\n\n\t\trenderObject( scene, camera );\n\n\t};\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/CSS3DRenderer.js\n ** module id = 26\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SpriteCanvasMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'SpriteCanvasMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\tthis.program = function ( context, color ) {};\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\nTHREE.SpriteCanvasMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.SpriteCanvasMaterial();\n\n\tmaterial.copy( this );\n\tmaterial.color.copy( this.color );\n\tmaterial.program = this.program;\n\n\treturn material;\n\n};\n\n//\n\nTHREE.CanvasRenderer = function ( parameters ) {\n\n\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _this = this,\n\t_renderData, _elements, _lights,\n\t_projector = new THREE.Projector(),\n\n\t_canvas = parameters.canvas !== undefined\n\t\t\t ? parameters.canvas\n\t\t\t : document.createElement( 'canvas' ),\n\n\t_canvasWidth = _canvas.width,\n\t_canvasHeight = _canvas.height,\n\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\n\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\n\n\t_viewportX = 0,\n\t_viewportY = 0,\n\t_viewportWidth = _canvasWidth,\n\t_viewportHeight = _canvasHeight,\n\n\t_pixelRatio = 1,\n\n\t_context = _canvas.getContext( '2d', {\n\t\talpha: parameters.alpha === true\n\t} ),\n\n\t_clearColor = new THREE.Color( 0x000000 ),\n\t_clearAlpha = parameters.alpha === true ? 0 : 1,\n\n\t_contextGlobalAlpha = 1,\n\t_contextGlobalCompositeOperation = 0,\n\t_contextStrokeStyle = null,\n\t_contextFillStyle = null,\n\t_contextLineWidth = null,\n\t_contextLineCap = null,\n\t_contextLineJoin = null,\n\t_contextLineDash = [],\n\n\t_camera,\n\n\t_v1, _v2, _v3, _v4,\n\t_v5 = new THREE.RenderableVertex(),\n\t_v6 = new THREE.RenderableVertex(),\n\n\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\n\t_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\n\n\t_color = new THREE.Color(),\n\t_color1 = new THREE.Color(),\n\t_color2 = new THREE.Color(),\n\t_color3 = new THREE.Color(),\n\t_color4 = new THREE.Color(),\n\n\t_diffuseColor = new THREE.Color(),\n\t_emissiveColor = new THREE.Color(),\n\n\t_lightColor = new THREE.Color(),\n\n\t_patterns = {},\n\n\t_image, _uvs,\n\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\n\n\t_clipBox = new THREE.Box2(),\n\t_clearBox = new THREE.Box2(),\n\t_elemBox = new THREE.Box2(),\n\n\t_ambientLight = new THREE.Color(),\n\t_directionalLights = new THREE.Color(),\n\t_pointLights = new THREE.Color(),\n\n\t_vector3 = new THREE.Vector3(), // Needed for PointLight\n\t_centroid = new THREE.Vector3(),\n\t_normal = new THREE.Vector3(),\n\t_normalViewMatrix = new THREE.Matrix3();\n\n\t/* TODO\n\t_canvas.mozImageSmoothingEnabled = false;\n\t_canvas.webkitImageSmoothingEnabled = false;\n\t_canvas.msImageSmoothingEnabled = false;\n\t_canvas.imageSmoothingEnabled = false;\n\t*/\n\n\t// dash+gap fallbacks for Firefox and everything else\n\n\tif ( _context.setLineDash === undefined ) {\n\n\t\t_context.setLineDash = function () {};\n\n\t}\n\n\tthis.domElement = _canvas;\n\n\tthis.autoClear = true;\n\tthis.sortObjects = true;\n\tthis.sortElements = true;\n\n\tthis.info = {\n\n\t\trender: {\n\n\t\t\tvertices: 0,\n\t\t\tfaces: 0\n\n\t\t}\n\n\t};\n\n\t// WebGLRenderer compatibility\n\n\tthis.supportsVertexTextures = function () {};\n\tthis.setFaceCulling = function () {};\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _context;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _context.getContextAttributes();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value !== undefined ) _pixelRatio = value;\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t_canvasWidth = width * _pixelRatio;\n\t\t_canvasHeight = height * _pixelRatio;\n\n\t\t_canvas.width = _canvasWidth;\n\t\t_canvas.height = _canvasHeight;\n\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\t_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t_contextGlobalAlpha = 1;\n\t\t_contextGlobalCompositeOperation = 0;\n\t\t_contextStrokeStyle = null;\n\t\t_contextFillStyle = null;\n\t\t_contextLineWidth = null;\n\t\t_contextLineCap = null;\n\t\t_contextLineJoin = null;\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t_viewportX = x * _pixelRatio;\n\t\t_viewportY = y * _pixelRatio;\n\n\t\t_viewportWidth = width * _pixelRatio;\n\t\t_viewportHeight = height * _pixelRatio;\n\n\t};\n\n\tthis.setScissor = function () {};\n\tthis.setScissorTest = function () {};\n\n\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t_clearColor.set( color );\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t};\n\n\tthis.setClearColorHex = function ( hex, alpha ) {\n\n\t\tconsole.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n\t\tthis.setClearColor( hex, alpha );\n\n\t};\n\n\tthis.getClearColor = function () {\n\n\t\treturn _clearColor;\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn _clearAlpha;\n\n\t};\n\n\tthis.getMaxAnisotropy = function () {\n\n\t\treturn 0;\n\n\t};\n\n\tthis.clear = function () {\n\n\t\tif ( _clearBox.isEmpty() === false ) {\n\n\t\t\t_clearBox.intersect( _clipBox );\n\t\t\t_clearBox.expandByScalar( 2 );\n\n\t\t\t_clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t\t\t_clearBox.min.y =  - _clearBox.min.y + _canvasHeightHalf;\t\t// higher y value !\n\t\t\t_clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t\t\t_clearBox.max.y =  - _clearBox.max.y + _canvasHeightHalf;\t\t// lower y value !\n\n\t\t\tif ( _clearAlpha < 1 ) {\n\n\t\t\t\t_context.clearRect(\n\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( _clearAlpha > 0 ) {\n\n\t\t\t\tsetBlending( THREE.NormalBlending );\n\t\t\t\tsetOpacity( 1 );\n\n\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\n\n\t\t\t\t_context.fillRect(\n\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t_clearBox.makeEmpty();\n\n\t\t}\n\n\t};\n\n\t// compatibility\n\n\tthis.clearColor = function () {};\n\tthis.clearDepth = function () {};\n\tthis.clearStencil = function () {};\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.autoClear === true ) this.clear();\n\n\t\t_this.info.render.vertices = 0;\n\t\t_this.info.render.faces = 0;\n\n\t\t_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );\n\t\t_context.translate( _canvasWidthHalf, _canvasHeightHalf );\n\n\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t_elements = _renderData.elements;\n\t\t_lights = _renderData.lights;\n\t\t_camera = camera;\n\n\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\n\t\t/* DEBUG\n\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n\t\t*/\n\n\t\tcalculateLights();\n\n\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\n\n\t\t\tvar element = _elements[ e ];\n\n\t\t\tvar material = element.material;\n\n\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\n\t\t\t_elemBox.makeEmpty();\n\n\t\t\tif ( element instanceof THREE.RenderableSprite ) {\n\n\t\t\t\t_v1 = element;\n\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\n\n\t\t\t\trenderSprite( _v1, element, material );\n\n\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderLine( _v1, _v2, element, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\n\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\tif ( material.overdraw > 0 ) {\n\n\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\n\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\n\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\n\n\t\t\t\t}\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t_v3.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* DEBUG\n\t\t\tsetLineWidth( 1 );\n\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n\t\t\t*/\n\n\t\t\t_clearBox.union( _elemBox );\n\n\t\t}\n\n\t\t/* DEBUG\n\t\tsetLineWidth( 1 );\n\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n\t\t*/\n\n\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\n\n\t};\n\n\t//\n\n\tfunction calculateLights() {\n\n\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t_pointLights.setRGB( 0, 0, 0 );\n\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = _lights[ l ];\n\t\t\tvar lightColor = light.color;\n\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\n\t\t\t\t_ambientLight.add( lightColor );\n\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\t// for sprites\n\n\t\t\t\t_directionalLights.add( lightColor );\n\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\t// for sprites\n\n\t\t\t\t_pointLights.add( lightColor );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction calculateLight( position, normal, color ) {\n\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = _lights[ l ];\n\n\t\t\t_lightColor.copy( light.color );\n\n\t\t\tif ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\n\t\t\t\tvar amount = normal.dot( lightPosition );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\n\t\t\t\tif ( amount == 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderSprite( v1, element, material ) {\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\tvar scaleX = element.scale.x * _canvasWidthHalf;\n\t\tvar scaleY = element.scale.y * _canvasHeightHalf;\n\n\t\tvar dist = 0.5 * Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite\n\t\t_elemBox.min.set( v1.x - dist, v1.y - dist );\n\t\t_elemBox.max.set( v1.x + dist, v1.y + dist );\n\n\t\tif ( material instanceof THREE.SpriteMaterial ) {\n\n\t\t\tvar texture = material.map;\n\n\t\t\tif ( texture !== null ) {\n\n\t\t\t\tvar pattern = _patterns[ texture.id ];\n\n\t\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t\t\t\tvar bitmap = texture.image;\n\n\t\t\t\t\tvar ox = bitmap.width * texture.offset.x;\n\t\t\t\t\tvar oy = bitmap.height * texture.offset.y;\n\n\t\t\t\t\tvar sx = bitmap.width * texture.repeat.x;\n\t\t\t\t\tvar sy = bitmap.height * texture.repeat.y;\n\n\t\t\t\t\tvar cx = scaleX / sx;\n\t\t\t\t\tvar cy = scaleY / sy;\n\n\t\t\t\t\t_context.save();\n\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t_context.translate( - scaleX / 2, - scaleY / 2 );\n\t\t\t\t\t_context.scale( cx, cy );\n\t\t\t\t\t_context.translate( - ox, - oy );\n\t\t\t\t\t_context.fillRect( ox, oy, sx, sy );\n\t\t\t\t\t_context.restore();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// no texture\n\n\t\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t\t_context.save();\n\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t_context.scale( scaleX, - scaleY );\n\t\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t\t_context.restore();\n\n\t\t\t}\n\n\t\t} else if ( material instanceof THREE.SpriteCanvasMaterial ) {\n\n\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t_context.save();\n\t\t\t_context.translate( v1.x, v1.y );\n\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t_context.scale( scaleX, scaleY );\n\n\t\t\tmaterial.program( _context );\n\n\t\t\t_context.restore();\n\n\t\t}\n\n\t\t/* DEBUG\n\t\tsetStrokeStyle( 'rgb(255,255,0)' );\n\t\t_context.beginPath();\n\t\t_context.moveTo( v1.x - 10, v1.y );\n\t\t_context.lineTo( v1.x + 10, v1.y );\n\t\t_context.moveTo( v1.x, v1.y - 10 );\n\t\t_context.lineTo( v1.x, v1.y + 10 );\n\t\t_context.stroke();\n\t\t*/\n\n\t}\n\n\tfunction renderLine( v1, v2, element, material ) {\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\t_context.beginPath();\n\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\n\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\n\n\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\n\t\t\tsetLineWidth( material.linewidth );\n\t\t\tsetLineCap( material.linecap );\n\t\t\tsetLineJoin( material.linejoin );\n\n\t\t\tif ( material.vertexColors !== THREE.VertexColors ) {\n\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\n\t\t\t} else {\n\n\t\t\t\tvar colorStyle1 = element.vertexColors[ 0 ].getStyle();\n\t\t\t\tvar colorStyle2 = element.vertexColors[ 1 ].getStyle();\n\n\t\t\t\tif ( colorStyle1 === colorStyle2 ) {\n\n\t\t\t\t\tsetStrokeStyle( colorStyle1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar grad = _context.createLinearGradient(\n\t\t\t\t\t\t\tv1.positionScreen.x,\n\t\t\t\t\t\t\tv1.positionScreen.y,\n\t\t\t\t\t\t\tv2.positionScreen.x,\n\t\t\t\t\t\t\tv2.positionScreen.y\n\t\t\t\t\t\t);\n\t\t\t\t\t\tgrad.addColorStop( 0, colorStyle1 );\n\t\t\t\t\t\tgrad.addColorStop( 1, colorStyle2 );\n\n\t\t\t\t\t} catch ( exception ) {\n\n\t\t\t\t\t\tgrad = colorStyle1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tsetStrokeStyle( grad );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_context.stroke();\n\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\n\t\t\tsetLineWidth( material.linewidth );\n\t\t\tsetLineCap( material.linecap );\n\t\t\tsetLineJoin( material.linejoin );\n\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\tsetLineDash( [ material.dashSize, material.gapSize ] );\n\n\t\t\t_context.stroke();\n\n\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t\tsetLineDash( [] );\n\n\t\t}\n\n\t}\n\n\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\n\n\t\t_this.info.render.vertices += 3;\n\t\t_this.info.render.faces ++;\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\n\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\n\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\n\n\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\n\n\t\tif ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {\n\n\t\t\t_diffuseColor.copy( material.color );\n\t\t\t_emissiveColor.copy( material.emissive );\n\n\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t_diffuseColor.multiply( element.color );\n\n\t\t\t}\n\n\t\t\t_color.copy( _ambientLight );\n\n\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\n\t\t\tcalculateLight( _centroid, element.normalModel, _color );\n\n\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t} else if ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t    material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t    material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tvar mapping = material.map.mapping;\n\n\t\t\t\tif ( mapping === THREE.UVMapping ) {\n\n\t\t\t\t\t_uvs = element.uvs;\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.envMap !== null ) {\n\n\t\t\t\tif ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv1x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv1y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv2x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv2y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv3x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv3y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_color.copy( material.color );\n\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t\t_color.multiply( element.color );\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\n\t\t\t}\n\n\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\n\n\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t} else {\n\n\t\t\t_color.setRGB( 1, 1, 1 );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\n\n\t\t_context.beginPath();\n\t\t_context.moveTo( x0, y0 );\n\t\t_context.lineTo( x1, y1 );\n\t\t_context.lineTo( x2, y2 );\n\t\t_context.closePath();\n\n\t}\n\n\tfunction strokePath( color, linewidth, linecap, linejoin ) {\n\n\t\tsetLineWidth( linewidth );\n\t\tsetLineCap( linecap );\n\t\tsetLineJoin( linejoin );\n\t\tsetStrokeStyle( color.getStyle() );\n\n\t\t_context.stroke();\n\n\t\t_elemBox.expandByScalar( linewidth * 2 );\n\n\t}\n\n\tfunction fillPath( color ) {\n\n\t\tsetFillStyle( color.getStyle() );\n\t\t_context.fill();\n\n\t}\n\n\tfunction textureToPattern( texture ) {\n\n\t\tif ( texture.version === 0 ||\n\t\t\ttexture instanceof THREE.CompressedTexture ||\n\t\t\ttexture instanceof THREE.DataTexture ) {\n\n\t\t\treturn {\n\t\t\t\tcanvas: undefined,\n\t\t\t\tversion: texture.version\n\t\t\t};\n\n\t\t}\n\n\t\tvar image = texture.image;\n\n\t\tif ( image.complete === false ) {\n\n\t\t\treturn {\n\t\t\t\tcanvas: undefined,\n\t\t\t\tversion: 0\n\t\t\t};\n\n\t\t}\n\n\t\tvar canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = image.width;\n\t\tcanvas.height = image.height;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.setTransform( 1, 0, 0, - 1, 0, image.height );\n\t\tcontext.drawImage( image, 0, 0 );\n\n\t\tvar repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t\tvar repeatY = texture.wrapT === THREE.RepeatWrapping;\n\n\t\tvar repeat = 'no-repeat';\n\n\t\tif ( repeatX === true && repeatY === true ) {\n\n\t\t\trepeat = 'repeat';\n\n\t\t} else if ( repeatX === true ) {\n\n\t\t\trepeat = 'repeat-x';\n\n\t\t} else if ( repeatY === true ) {\n\n\t\t\trepeat = 'repeat-y';\n\n\t\t}\n\n\t\tvar pattern = _context.createPattern( canvas, repeat );\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\treturn {\n\t\t\tcanvas: pattern,\n\t\t\tversion: texture.version\n\t\t};\n\n\t}\n\n\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\n\n\t\tvar pattern = _patterns[ texture.id ];\n\n\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\tpattern = textureToPattern( texture );\n\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t}\n\n\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t} else {\n\n\t\t\tsetFillStyle( 'rgba( 0, 0, 0, 1)' );\n\t\t\t_context.fill();\n\t\t\treturn;\n\n\t\t}\n\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\tvar a, b, c, d, e, f, det, idet,\n\t\toffsetX = texture.offset.x / texture.repeat.x,\n\t\toffsetY = texture.offset.y / texture.repeat.y,\n\t\twidth = texture.image.width * texture.repeat.x,\n\t\theight = texture.image.height * texture.repeat.y;\n\n\t\tu0 = ( u0 + offsetX ) * width;\n\t\tv0 = ( v0 + offsetY ) * height;\n\n\t\tu1 = ( u1 + offsetX ) * width;\n\t\tv1 = ( v1 + offsetY ) * height;\n\n\t\tu2 = ( u2 + offsetX ) * width;\n\t\tv2 = ( v2 + offsetY ) * height;\n\n\t\tx1 -= x0; y1 -= y0;\n\t\tx2 -= x0; y2 -= y0;\n\n\t\tu1 -= u0; v1 -= v0;\n\t\tu2 -= u0; v2 -= v0;\n\n\t\tdet = u1 * v2 - u2 * v1;\n\n\t\tif ( det === 0 ) return;\n\n\t\tidet = 1 / det;\n\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\te = x0 - a * u0 - c * v0;\n\t\tf = y0 - b * u0 - d * v0;\n\n\t\t_context.save();\n\t\t_context.transform( a, b, c, d, e, f );\n\t\t_context.fill();\n\t\t_context.restore();\n\n\t}\n\n\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\n\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\tvar a, b, c, d, e, f, det, idet,\n\t\twidth = image.width - 1,\n\t\theight = image.height - 1;\n\n\t\tu0 *= width; v0 *= height;\n\t\tu1 *= width; v1 *= height;\n\t\tu2 *= width; v2 *= height;\n\n\t\tx1 -= x0; y1 -= y0;\n\t\tx2 -= x0; y2 -= y0;\n\n\t\tu1 -= u0; v1 -= v0;\n\t\tu2 -= u0; v2 -= v0;\n\n\t\tdet = u1 * v2 - u2 * v1;\n\n\t\tidet = 1 / det;\n\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\te = x0 - a * u0 - c * v0;\n\t\tf = y0 - b * u0 - d * v0;\n\n\t\t_context.save();\n\t\t_context.transform( a, b, c, d, e, f );\n\t\t_context.clip();\n\t\t_context.drawImage( image, 0, 0 );\n\t\t_context.restore();\n\n\t}\n\n\t// Hide anti-alias gaps\n\n\tfunction expand( v1, v2, pixels ) {\n\n\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\n\t\tdet = x * x + y * y, idet;\n\n\t\tif ( det === 0 ) return;\n\n\t\tidet = pixels / Math.sqrt( det );\n\n\t\tx *= idet; y *= idet;\n\n\t\tv2.x += x; v2.y += y;\n\t\tv1.x -= x; v1.y -= y;\n\n\t}\n\n\t// Context cached methods.\n\n\tfunction setOpacity( value ) {\n\n\t\tif ( _contextGlobalAlpha !== value ) {\n\n\t\t\t_context.globalAlpha = value;\n\t\t\t_contextGlobalAlpha = value;\n\n\t\t}\n\n\t}\n\n\tfunction setBlending( value ) {\n\n\t\tif ( _contextGlobalCompositeOperation !== value ) {\n\n\t\t\tif ( value === THREE.NormalBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'source-over';\n\n\t\t\t} else if ( value === THREE.AdditiveBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'lighter';\n\n\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'darker';\n\n\t\t\t} else if ( value === THREE.MultiplyBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'multiply';\n\n\t\t\t}\n\n\t\t\t_contextGlobalCompositeOperation = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineWidth( value ) {\n\n\t\tif ( _contextLineWidth !== value ) {\n\n\t\t\t_context.lineWidth = value;\n\t\t\t_contextLineWidth = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineCap( value ) {\n\n\t\t// \"butt\", \"round\", \"square\"\n\n\t\tif ( _contextLineCap !== value ) {\n\n\t\t\t_context.lineCap = value;\n\t\t\t_contextLineCap = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineJoin( value ) {\n\n\t\t// \"round\", \"bevel\", \"miter\"\n\n\t\tif ( _contextLineJoin !== value ) {\n\n\t\t\t_context.lineJoin = value;\n\t\t\t_contextLineJoin = value;\n\n\t\t}\n\n\t}\n\n\tfunction setStrokeStyle( value ) {\n\n\t\tif ( _contextStrokeStyle !== value ) {\n\n\t\t\t_context.strokeStyle = value;\n\t\t\t_contextStrokeStyle = value;\n\n\t\t}\n\n\t}\n\n\tfunction setFillStyle( value ) {\n\n\t\tif ( _contextFillStyle !== value ) {\n\n\t\t\t_context.fillStyle = value;\n\t\t\t_contextFillStyle = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineDash( value ) {\n\n\t\tif ( _contextLineDash.length !== value.length ) {\n\n\t\t\t_context.setLineDash( value );\n\t\t\t_contextLineDash = value;\n\n\t\t}\n\n\t}\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/CanvasRenderer.js\n ** module id = 27\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author julianwa / https://github.com/julianwa\n */\n\nTHREE.RenderableObject = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableFace = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\tthis.v3 = new THREE.RenderableVertex();\n\n\tthis.normalModel = new THREE.Vector3();\n\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\tthis.vertexNormalsLength = 0;\n\n\tthis.color = new THREE.Color();\n\tthis.material = null;\n\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableVertex = function () {\n\n\tthis.position = new THREE.Vector3();\n\tthis.positionWorld = new THREE.Vector3();\n\tthis.positionScreen = new THREE.Vector4();\n\n\tthis.visible = true;\n\n};\n\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\n\tthis.positionWorld.copy( vertex.positionWorld );\n\tthis.positionScreen.copy( vertex.positionScreen );\n\n};\n\n//\n\nTHREE.RenderableLine = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\n\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\tthis.material = null;\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableSprite = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\n\tthis.x = 0;\n\tthis.y = 0;\n\tthis.z = 0;\n\n\tthis.rotation = 0;\n\tthis.scale = new THREE.Vector2();\n\n\tthis.material = null;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.Projector = function () {\n\n\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\n\t_renderData = { objects: [], lights: [], elements: [] },\n\n\t_vector3 = new THREE.Vector3(),\n\t_vector4 = new THREE.Vector4(),\n\n\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t_boundingBox = new THREE.Box3(),\n\t_points3 = new Array( 3 ),\n\t_points4 = new Array( 4 ),\n\n\t_viewMatrix = new THREE.Matrix4(),\n\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t_modelMatrix,\n\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\n\t_normalMatrix = new THREE.Matrix3(),\n\n\t_frustum = new THREE.Frustum(),\n\n\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\n\t//\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function ( vector, camera ) {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n\t//\n\n\tvar RenderList = function () {\n\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar object = null;\n\t\tvar material = null;\n\n\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\tfunction setObject( value ) {\n\n\t\t\tobject = value;\n\t\t\tmaterial = object.material;\n\n\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\n\t\t\tnormals.length = 0;\n\t\t\tuvs.length = 0;\n\n\t\t}\n\n\t\tfunction projectVertex( vertex ) {\n\n\t\t\tvar position = vertex.position;\n\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\tvar positionScreen = vertex.positionScreen;\n\n\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n\t\t\tvar invW = 1 / positionScreen.w;\n\n\t\t\tpositionScreen.x *= invW;\n\t\t\tpositionScreen.y *= invW;\n\t\t\tpositionScreen.z *= invW;\n\n\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\n\t\t}\n\n\t\tfunction pushVertex( x, y, z ) {\n\n\t\t\t_vertex = getNextVertexInPool();\n\t\t\t_vertex.position.set( x, y, z );\n\n\t\t\tprojectVertex( _vertex );\n\n\t\t}\n\n\t\tfunction pushNormal( x, y, z ) {\n\n\t\t\tnormals.push( x, y, z );\n\n\t\t}\n\n\t\tfunction pushUv( x, y ) {\n\n\t\t\tuvs.push( x, y );\n\n\t\t}\n\n\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\n\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\n\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t_points3[ 2 ] = v3.positionScreen;\n\n\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\n\t\t}\n\n\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\n\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n\t\t}\n\n\t\tfunction pushLine( a, b ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\n\t\t\t_line = getNextLineInPool();\n\n\t\t\t_line.id = object.id;\n\t\t\t_line.v1.copy( v1 );\n\t\t\t_line.v2.copy( v2 );\n\t\t\t_line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;\n\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t_line.material = object.material;\n\n\t\t\t_renderData.elements.push( _line );\n\n\t\t}\n\n\t\tfunction pushTriangle( a, b, c ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\tvar v3 = _vertexPool[ c ];\n\n\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\n\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\n\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t_face.id = object.id;\n\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t// use first vertex normal as face normal\n\n\t\t\t\t_face.normalModel.fromArray( normals, a * 3 );\n\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\n\t\t\t\t}\n\n\t\t\t\t_face.vertexNormalsLength = 3;\n\n\t\t\t\t_face.material = object.material;\n\n\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetObject: setObject,\n\t\t\tprojectVertex: projectVertex,\n\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\tpushVertex: pushVertex,\n\t\t\tpushNormal: pushNormal,\n\t\t\tpushUv: pushUv,\n\t\t\tpushLine: pushLine,\n\t\t\tpushTriangle: pushTriangle\n\t\t}\n\n\t};\n\n\tvar renderList = new RenderList();\n\n\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n\t\t_faceCount = 0;\n\t\t_lineCount = 0;\n\t\t_spriteCount = 0;\n\n\t\t_renderData.elements.length = 0;\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\n\t\t//\n\n\t\t_objectCount = 0;\n\n\t\t_renderData.objects.length = 0;\n\t\t_renderData.lights.length = 0;\n\n\t\tfunction addObject( object ) {\n\n\t\t\t_object = getNextObjectInPool();\n\t\t\t_object.id = object.id;\n\t\t\t_object.object = object;\n\n\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\n\t\t\t_object.z = _vector3.z;\n\t\t\t_object.renderOrder = object.renderOrder;\n\n\t\t\t_renderData.objects.push( _object );\n\n\t\t}\n\n\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\t_renderData.lights.push( object );\n\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line ) {\n\n\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\n\n\t\t\t\taddObject( object );\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\n\n\t\t\t\taddObject( object );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( sortObjects === true ) {\n\n\t\t\t_renderData.objects.sort( painterSort );\n\n\t\t}\n\n\t\t//\n\n\t\tfor ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\n\n\t\t\tvar object = _renderData.objects[ o ].object;\n\t\t\tvar geometry = object.geometry;\n\n\t\t\trenderList.setObject( object );\n\n\t\t\t_modelMatrix = object.matrixWorld;\n\n\t\t\t_vertexCount = 0;\n\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\n\t\t\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( var o = 0; o < groups.length; o ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\n\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material : null;\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector3.copy( vertex );\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\n\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\n\t\t\t\t\t\tmaterial = isFaceMaterial === true\n\t\t\t\t\t\t\t ? objectMaterials.materials[ face.materialIndex ]\n\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\tvar side = material.side;\n\n\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\n\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\n\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\n\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\n\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t_face.v3.copy( v3 );\n\n\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\n\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t_face.normalModel.negate();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\n\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\n\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\tnormalModel.negate();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\n\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\n\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\n\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\n\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\n\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\n\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\n\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\n\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\n\t\t\t\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\n\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tvar invW = 1 / _vector4.w;\n\n\t\t\t\t_vector4.z *= invW;\n\n\t\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\n\t\t\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t\t\t_sprite.id = object.id;\n\t\t\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t\t\t_sprite.z = _vector4.z;\n\t\t\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t\t\t_sprite.object = object;\n\n\t\t\t\t\t_sprite.rotation = object.rotation;\n\n\t\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\n\t\t\t\t\t_sprite.material = object.material;\n\n\t\t\t\t\t_renderData.elements.push( _sprite );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( sortElements === true ) {\n\n\t\t\t_renderData.elements.sort( painterSort );\n\n\t\t}\n\n\t\treturn _renderData;\n\n\t};\n\n\t// Pools\n\n\tfunction getNextObjectInPool() {\n\n\t\tif ( _objectCount === _objectPoolLength ) {\n\n\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t_objectPool.push( object );\n\t\t\t_objectPoolLength ++;\n\t\t\t_objectCount ++;\n\t\t\treturn object;\n\n\t\t}\n\n\t\treturn _objectPool[ _objectCount ++ ];\n\n\t}\n\n\tfunction getNextVertexInPool() {\n\n\t\tif ( _vertexCount === _vertexPoolLength ) {\n\n\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t_vertexPool.push( vertex );\n\t\t\t_vertexPoolLength ++;\n\t\t\t_vertexCount ++;\n\t\t\treturn vertex;\n\n\t\t}\n\n\t\treturn _vertexPool[ _vertexCount ++ ];\n\n\t}\n\n\tfunction getNextFaceInPool() {\n\n\t\tif ( _faceCount === _facePoolLength ) {\n\n\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t_facePool.push( face );\n\t\t\t_facePoolLength ++;\n\t\t\t_faceCount ++;\n\t\t\treturn face;\n\n\t\t}\n\n\t\treturn _facePool[ _faceCount ++ ];\n\n\n\t}\n\n\tfunction getNextLineInPool() {\n\n\t\tif ( _lineCount === _linePoolLength ) {\n\n\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t_linePool.push( line );\n\t\t\t_linePoolLength ++;\n\t\t\t_lineCount ++;\n\t\t\treturn line;\n\n\t\t}\n\n\t\treturn _linePool[ _lineCount ++ ];\n\n\t}\n\n\tfunction getNextSpriteInPool() {\n\n\t\tif ( _spriteCount === _spritePoolLength ) {\n\n\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t_spritePool.push( sprite );\n\t\t\t_spritePoolLength ++;\n\t\t\t_spriteCount ++;\n\t\t\treturn sprite;\n\n\t\t}\n\n\t\treturn _spritePool[ _spriteCount ++ ];\n\n\t}\n\n\t//\n\n\tfunction painterSort( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else if ( a.id !== b.id ) {\n\n\t\t\treturn a.id - b.id;\n\n\t\t} else {\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t}\n\n\tfunction clipLine( s1, s2 ) {\n\n\t\tvar alpha1 = 0, alpha2 = 1,\n\n\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t// Z = -1 and Z = +1, respectively.\n\t\tbc1near =  s1.z + s1.w,\n\t\tbc2near =  s2.z + s2.w,\n\t\tbc1far =  - s1.z + s1.w,\n\t\tbc2far =  - s2.z + s2.w;\n\n\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\treturn true;\n\n\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\n\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\treturn false;\n\n\t\t} else {\n\n\t\t\t// The line segment spans at least one clip plane.\n\n\t\t\tif ( bc1near < 0 ) {\n\n\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t} else if ( bc2near < 0 ) {\n\n\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t}\n\n\t\t\tif ( bc1far < 0 ) {\n\n\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t} else if ( bc2far < 0 ) {\n\n\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t}\n\n\t\t\tif ( alpha2 < alpha1 ) {\n\n\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/Projector.js\n ** module id = 28\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author bchirls / http://bchirls.com/\n */\n\nTHREE.VRStereoEffect = function ( renderer, fullScreenElement, options ) {\n\n\t// internals\n\tvar self = this;\n\tvar width = 0, height = 0;\n\tvar hmdWidth, hmdHeight;\n\n\tvar hmdDevice;\n\tvar vrMode;\n    var inWebview = false;\n\tvar vrPreview = false;\n\tvar eyeOffsetLeft = new THREE.Vector3();\n\tvar eyeOffsetRight = new THREE.Vector3();\n\n\tvar position = new THREE.Vector3();\n\tvar quaternion = new THREE.Quaternion();\n\tvar scale = new THREE.Vector3();\n\n\tvar cameraLeft = new THREE.PerspectiveCamera();\n\tvar cameraRight = new THREE.PerspectiveCamera();\n\tvar leftRenderRect = {\n\t\tx: 0, y: 0, width: 0, height: 0\n\t};\n\tvar rightRenderRect = {\n\t\tx: 0, y: 0, width: 0, height: 0\n\t};\n\n\tvar near = 2;\n\tvar far = 40000;\n\n\tvar requestFullscreen;\n\tvar fullScreenParam = {\n\t\tvrDisplay: null\n\t};\n\tvar fovScale;\n\n\tvar RADIANS = Math.PI / 180;\n\n\tvar poll = options && options.poll || 1000;\n\tvar pollTimeout;\n\n\tfunction perspectiveMatrixFromVRFieldOfView(fov, zNear, zFar) {\n\t\tvar outMat = new THREE.Matrix4(),\n\t\t\tout = outMat.elements,\n\t\t\tupTan = Math.tan(fov.upDegrees * RADIANS),\n\t\t\tdownTan = Math.tan(fov.downDegrees * RADIANS),\n\t\t\tleftTan = Math.tan(fov.leftDegrees * RADIANS),\n\t\t\trightTan = Math.tan(fov.rightDegrees * RADIANS),\n\n\t\t\txScale = 2 / (leftTan + rightTan),\n\t\t\tyScale = 2 / (upTan + downTan);\n\n\t\tout[0] = xScale;\n\t\tout[4] = 0;\n\t\tout[8] = -((leftTan - rightTan) * xScale * 0.5);\n\t\tout[12] = 0;\n\n\t\tout[1] = 0;\n\t\tout[5] = yScale;\n\t\tout[9] = ((upTan - downTan) * yScale * 0.5);\n\t\tout[13] = 0;\n\n\t\tout[2] = 0;\n\t\tout[6] = 0;\n\t\tout[10] = zFar / (zNear - zFar);\n\t\tout[14] = (zFar * zNear) / (zNear - zFar);\n\n\t\tout[3] = 0;\n\t\tout[7] = 0;\n\t\tout[11] = -1;\n\t\tout[15] = 0;\n\n\t\treturn outMat;\n\t}\n\n\tfunction resize() {\n\t\tvar w, h;\n\n\t\tif (hmdDevice && vrMode) {\n\t\t\tw = hmdWidth;// / Math.pow(window.devicePixelRatio || 1, 2);\n\t\t\th = hmdHeight;// / Math.pow(window.devicePixelRatio || 1, 2);\n\t\t} else {\n\t\t\tw = width || renderer.domElement.offsetWidth || window.innerWidth;\n\t\t\th = height || renderer.domElement.offsetHeight || window.innerHeight;\n\t\t}\n\n\t\trenderer.setSize(w, h);\n\t}\n\n\tfunction updateProjection() {\n\t\tvar fovLeft,\n\t\t\tfovRight,\n\n\t\t\tleftEyeParams,\n\t\t\trightEyeParams,\n\t\t\tleftEyeRect,\n\t\t\trightEyeRect,\n\n\t\t\tleftEyeViewport,\n\t\t\trightEyeViewport;\n\n\t\tif (!hmdDevice) {\n\t\t\tcameraLeft.fov = 80;\n\t\t\tcameraRight.fov = 80;\n\t\t\treturn;\n\t\t}\n\n\t\t// if (amount && hmdDevice.setFieldOfView) {\n\t\t// \tfovScale += amount;\n\t\t// \tfovScale = Math.max(0.1, fovScale);\n\n\t\t// \tfovLeft = hmdDevice.getRecommendedEyeFieldOfView('left');\n\n\t\t// \tfovLeft.upDegrees *= fovScale;\n\t\t// \tfovLeft.downDegrees *= fovScale;\n\t\t// \tfovLeft.leftDegrees *= fovScale;\n\t\t// \tfovLeft.rightDegrees *= fovScale;\n\n\t\t// \tfovRight = hmdDevice.getRecommendedEyeFieldOfView('right');\n\t\t// \tfovRight.upDegrees *= fovScale;\n\t\t// \tfovRight.downDegrees *= fovScale;\n\t\t// \tfovRight.leftDegrees *= fovScale;\n\t\t// \tfovRight.rightDegrees *= fovScale;\n\n\t\t// \thmdDevice.setFieldOfView(fovLeft, fovRight);\n\t\t// }\n\n\t\tif (hmdDevice.getEyeParameters) {\n\t\t\tleftEyeParams = hmdDevice.getEyeParameters('left');\n\t\t\trightEyeParams = hmdDevice.getEyeParameters('right');\n\t\t\tleftEyeRect = leftEyeParams.renderRect;\n\t\t\trightEyeRect = rightEyeParams.renderRect;\n\n\t\t\thmdWidth = rightEyeRect.x + rightEyeRect.width;\n\t\t\thmdHeight = Math.max(leftEyeRect.y + leftEyeRect.height, rightEyeRect.y + rightEyeRect.height);\n\n\t\t\tfovLeft = leftEyeParams.currentFieldOfView;\n\t\t\tfovRight = rightEyeParams.currentFieldOfView;\n\n\t\t\thmdDevice.setFieldOfView(fovLeft, fovRight, near, far);\n\n\t\t\teyeOffsetLeft.copy(leftEyeParams.eyeTranslation);\n\t\t\teyeOffsetRight.copy(rightEyeParams.eyeTranslation);\n\n\t\t\tleftRenderRect = leftEyeParams.renderRect;\n\t\t\trightRenderRect = rightEyeParams.renderRect;\n\t\t} else if (hmdDevice.getRecommendedEyeRenderRect) {\n\t\t\tleftEyeViewport = hmdDevice.getRecommendedEyeRenderRect('left');\n\t\t\trightEyeViewport = hmdDevice.getRecommendedEyeRenderRect('right');\n\n\t\t\thmdWidth = leftEyeViewport.width + rightEyeViewport.width;\n\t\t\thmdHeight = Math.max(leftEyeViewport.height, rightEyeViewport.height);\n\n\t\t\tif (hmdDevice.getCurrentEyeFieldOfView) {\n\t\t\t\tfovLeft = hmdDevice.getCurrentEyeFieldOfView('left');\n\t\t\t\tfovRight = hmdDevice.getCurrentEyeFieldOfView('right');\n\t\t\t} else {\n\t\t\t\tfovLeft = hmdDevice.getRecommendedEyeFieldOfView('left');\n\t\t\t\tfovRight = hmdDevice.getRecommendedEyeFieldOfView('right');\n\t\t\t}\n\n\t\t\teyeOffsetLeft.copy(hmdDevice.getEyeTranslation('left'));\n\t\t\teyeOffsetRight.copy(hmdDevice.getEyeTranslation('right'));\n\n\t\t\tleftRenderRect.x = leftEyeViewport.left;\n\t\t\tleftRenderRect.y = leftEyeViewport.top;\n\t\t\tleftRenderRect.width = leftEyeViewport.width;\n\t\t\tleftRenderRect.height = leftEyeViewport.height;\n\n\t\t\trightRenderRect.x = rightEyeViewport.left;\n\t\t\trightRenderRect.y = rightEyeViewport.top;\n\t\t\trightRenderRect.width = rightEyeViewport.width;\n\t\t\trightRenderRect.height = rightEyeViewport.height;\n\t\t}\n\n\t\tresize();\n\n\t\tcameraLeft.projectionMatrix = perspectiveMatrixFromVRFieldOfView(fovLeft, near, far);\n\t\tcameraRight.projectionMatrix = perspectiveMatrixFromVRFieldOfView(fovRight, near, far);\n\t}\n\n\tfunction gotVRDevices(devices) {\n\t\tvar i,\n\t\t\tdevice;\n\n\t\tfor (i = 0; i < devices.length; i++) {\n\t\t\tdevice = devices[i];\n\t\t\tif ( device instanceof HMDVRDevice ) {\n\n\t\t\t\tif ( hmdDevice && device.hardwareUnitId === hmdDevice.hardwareUnitId ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thmdDevice = device;\n\t\t\t\tconsole.log('Using HMD Device:', hmdDevice.deviceName);\n\n\t\t\t\tif (hmdDevice.setTimewarp) {\n\t\t\t\t\t//hmdDevice.setTimewarp(false);\n\t\t\t\t}\n\n\t\t\t\tupdateProjection();\n\n\t\t\t\tfullScreenParam.vrDisplay = hmdDevice;\n\n\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t} );\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (poll) {\n\t\t\tclearTimeout(pollTimeout);\n\t\t\tsetTimeout(self.scan, poll);\n\t\t}\n\t}\n\n\tfunction onFullscreenChange() {\n\t\tif (!document.webkitFullscreenElement &&\n\t\t\t\t!document.mozFullScreenElement &&\n\t\t\t\t!document.msFullscreenElement) {\n\t\t\tvrMode = false;\n\t\t}\n\n\t\tupdateProjection();\n\n\t\tself.dispatchEvent( {\n\t\t\ttype: \"fullscreenchange\"\n\t\t} );\n\t}\n\n\t// API\n\n\tthis.separation = 0.01;\n\n\t// initialization\n\n\trenderer.autoClear = false;\n\n\tif (!fullScreenElement) {\n\t\tfullScreenElement = renderer.domElement;\n\t}\n\trequestFullscreen = fullScreenElement.webkitRequestFullscreen ||\n\t\tfullScreenElement.mozRequestFullScreen ||\n\t\tfullScreenElement.msRequestFullscreen;\n\tif (requestFullscreen) {\n\t\trequestFullscreen = requestFullscreen.bind(fullScreenElement, fullScreenParam);\n\t}\n\n\tdocument.addEventListener('fullscreenchange', onFullscreenChange, false);\n\tdocument.addEventListener('webkitfullscreenchange', onFullscreenChange, false);\n\tdocument.addEventListener('mozfullscreenchange', onFullscreenChange, false);\n\tdocument.addEventListener('MSFullscreenChange', onFullscreenChange, false);\n\n\t//todo: method for adjusting HMD FOV\n\n\tthis.scan = function () {\n\t\tif (navigator.getVRDevices) {\n\t\t\tnavigator.getVRDevices().then(gotVRDevices);\n\t\t} else if (navigator.mozGetVRDevices) {\n\t\t\tnavigator.mozGetVRDevices(gotVRDevices);\n\t\t}\n\t};\n\n\tthis.requestFullScreen = function () {\n\t\tvrMode = true;\n\t\trequestFullscreen();\n\t};\n\n\tthis.exit = function () {\n\t\tvrMode = false;\n\t\tvrPreview = false;\n\t};\n\n\tthis.setSize = function ( w, h ) {\n\t\twidth = w;\n\t\theight = h;\n\n\t\tresize();\n\t};\n\n\tthis.vrPreview = function (val) {\n\t\tif (val !== undefined) {\n\t\t\tvrPreview = !!val;\n\t\t}\n\t\treturn vrPreview;\n\t};\n\n\tthis.isFullscreen = function () {\n\t\treturn vrMode;\n\t};\n\n    // Add by kuilin.qkl\n    this.isWebview = function (bool) {\n        if (typeof bool === 'undefined') return inWebview;\n        inWebview = bool;\n        return inWebview;\n    };\n\n\tthis.hmd = function () {\n\t\treturn hmdDevice;\n\t};\n\n\tthis.render = function ( leftScene, rightScene, camera, renderTarget, forceClear ) {\n\t\tvar w, h;\n\n\t\tif ( rightScene && rightScene instanceof THREE.Scene ) {\n\t\t\t//rightScene.updateMatrixWorld();\n\t\t} else {\n\t\t\tif ( (!camera || camera instanceof THREE.WebGLRenderTarget) && rightScene instanceof THREE.Camera ) {\n\t\t\t\tforceClear = renderTarget;\n\t\t\t\trenderTarget = camera;\n\t\t\t\tcamera = rightScene;\n\t\t\t}\n\t\t\trightScene = leftScene;\n\t\t}\n\n\t\t//leftScene.updateMatrixWorld();\n\n\t\tif ( camera.parent === undefined ) {\n\t\t\tcamera.updateMatrixWorld();\n\t\t}\n\n\t\tw = width || renderer.domElement.width;\n\t\th = height || renderer.domElement.height;\n        // This code would not be annotated if mobile model.\n\t\tw /= window.devicePixelRatio || 1;\n\t\th /= window.devicePixelRatio || 1;\n\n\t\t/**\n\t\t *  TODO: make this work when CSS VR Rendering is fixed\n\t\t *  http://blog.bitops.com/blog/2014/08/20/updated-firefox-vr-builds/\n         *  Open by kuilin.qkl\n         */\n\t\tif (renderer instanceof THREE.CanvasRenderer || renderer instanceof THREE.CSS3DRenderer) {\n\t\t\trenderer.render( leftScene, camera );\n\t\t\treturn;\n\t\t}\n\n\t\tif (!vrMode && !vrPreview) {\n\t\t\trenderer.enableScissorTest( false );\n\t\t\trenderer.setViewport( 0, 0, w, h );\n\t\t\trenderer.render( leftScene, camera, renderTarget, true );\n\t\t\treturn;\n\t\t}\n\n\t\tcamera.matrixWorld.decompose( position, quaternion, scale );\n\n\t\tif (!hmdDevice) {\n\t\t\t// left\n\t\t\tcameraLeft.fov = camera.fov;\n\t\t\tcameraLeft.aspect = 0.5 * camera.aspect;\n\t\t\tcameraLeft.near = camera.near;\n\t\t\tcameraLeft.far = camera.far;\n\t\t\tcameraLeft.updateProjectionMatrix();\n\n\t\t\t// right\n\n\t\t\tcameraRight.fov = camera.fov;\n\t\t\tcameraRight.aspect = 0.5 * camera.aspect;\n\t\t\tcameraRight.near = camera.near;\n\t\t\tcameraRight.far = camera.far;\n\t\t\tcameraRight.updateProjectionMatrix();\n\t\t}\n\n\t\tcameraLeft.position.copy( position );\n\t\tcameraLeft.quaternion.copy( quaternion );\n\n\t\tcameraRight.position.copy( position );\n\t\tcameraRight.quaternion.copy( quaternion );\n\n\t\tif (hmdDevice) {\n\t\t\tcameraLeft.position.add( eyeOffsetLeft ) ;\n\t\t\tcameraRight.position.add( eyeOffsetRight );\n\t\t} else {\n\t\t\tcameraLeft.translateX( - this.separation );\n\t\t\tcameraRight.translateX( this.separation );\n\t\t}\n\n\t\tcameraLeft.updateMatrixWorld();\n\t\tcameraRight.updateMatrixWorld();\n\n        // Bug fixed if device's Ratio > 1\n        w = renderer.context.drawingBufferWidth / ( 2 * window.devicePixelRatio );\n\n\t\tif (renderTarget) {\n\t\t\trenderer.setRenderTarget(renderTarget);\n\t\t}\n\n\t\trightScene.traverseVisible(function (obj) {\n\t\t\tif (obj.material && obj.material.map) {\n\t\t\t\tif (obj.userData.stereo === 'vertical') {\n\t\t\t\t\tobj.material.map.offset.set(0, 0.5);\n\t\t\t\t} else if (obj.userData.stereo) {\n\t\t\t\t\tobj.material.map.offset.set(0.5, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n        // Modify by kuilin.qkl\n        // Not use Fullscreen\n        if (inWebview) {\n            renderer.setScissor( 0, h >> 1, w * 2, h >> 1 );\n            renderer.setViewport( 0, h >> 1, w * 2, h >> 1 );\n        } else {\n            renderer.setScissor( w, 0, w, h );\n            renderer.setViewport( w, 0, w, h );\n        }\n\t\trenderer.render( rightScene, cameraRight, renderTarget, forceClear );\n\n\t\tleftScene.traverseVisible(function (obj) {\n\t\t\tif (obj.userData.stereo && obj.material && obj.material.map) {\n\t\t\t\tobj.material.map.offset.set(0, 0);\n\t\t\t}\n\t\t});\n        if (inWebview) {\n            renderer.setScissor( 0, 0, w * 2, h >> 1 );\n            renderer.setViewport( 0, 0, w * 2, h >> 1 );\n        } else {\n            renderer.setScissor( 0, 0, w, h );\n            renderer.setViewport( 0, 0, w, h );\n        }\n\t\trenderer.render( leftScene, cameraLeft, renderTarget, forceClear );\n\n\t\t//reset viewport, scissor\n\t\tw *= 2;\n        renderer.setViewport( 0, 0, w, h );\n        renderer.setScissor( 0, 0, w, h );\n\t\trenderer.enableScissorTest( false );\n\t};\n\n\tObject.defineProperty(this, 'near', {\n\t\tget: function () {\n\t\t\treturn near;\n\t\t},\n\t\tset: function (val) {\n\t\t\tval = parseFloat(val);\n\t\t\tif (val && !isNaN(val)) {\n\t\t\t\tnear = Math.max(0, val);\n\t\t\t\tupdateProjection();\n\t\t\t}\n\t\t}\n\t});\n\n\tObject.defineProperty(this, 'far', {\n\t\tget: function () {\n\t\t\treturn far;\n\t\t},\n\t\tset: function (val) {\n\t\t\tval = parseFloat(val);\n\t\t\tif (val && !isNaN(val)) {\n\t\t\t\tfar = Math.max(0, val);\n\t\t\t\tupdateProjection();\n\t\t\t}\n\t\t}\n\t});\n\n\tthis.scan();\n\tresize();\n};\n\nTHREE.VRStereoEffect.prototype = Object.create( THREE.EventDispatcher.prototype );\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/VRStereoEffect.js\n ** module id = 29\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\nTHREE.VRControls = function ( object, options ) {\n\n\tvar self = this;\n\n\t//HMD sensor stuff\n\tvar sensorDevice;\n\tvar vrState;\n\n\t//device orientation stuff\n\tvar deviceControls;\n\tvar zeroAngle = 0;\n\n\tvar mode = '';\n\n\tvar vrBrowser = navigator.getVRDevices || navigator.mozGetVRDevices;\n\n\tvar poll = options && options.poll || 1000;\n\tvar pollTimeout;\n\n\tfunction gotVRDevices( devices ) {\n\t\tvar i,\n\t\t\tdevice;\n\n\t\tfor ( i = 0; i < devices.length; ++i ) {\n\t\t\tdevice = devices[i];\n\t\t\tif ( devices[i] instanceof PositionSensorVRDevice ) {\n\n\t\t\t\tif ( sensorDevice && devices[i].hardwareUnitId === sensorDevice.hardwareUnitId ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tsensorDevice = device;\n\t\t\t\tconsole.log('Using Sensor Device:', sensorDevice.deviceName);\n\n\t\t\t\tif ( sensorDevice.zeroSensor ) {\n\t\t\t\t\tself.zeroSensor = sensorDevice.zeroSensor.bind(sensorDevice);\n\t\t\t\t} else if ( sensorDevice.resetSensor ) {\n\t\t\t\t\tself.zeroSensor = sensorDevice.resetSensor.bind(sensorDevice);\n\t\t\t\t}\n\t\t\t\tself.zeroSensor();\n\n\t\t\t\tmode = 'hmd';\n\n\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t} );\n\n\t\t\t\tbreak; // We keep the first we encounter\n\t\t\t}\n\t\t}\n\n\t\tif (poll) {\n\t\t\tclearTimeout(pollTimeout);\n\t\t\tsetTimeout(self.scan, poll);\n\t\t}\n\t}\n\n\tfunction deviceOrientationChange( event ) {\n\t\tif ( typeof event.gamma === 'number' ) {\n\t\t\tmode = 'deviceorientation';\n\t\t\twindow.removeEventListener( 'deviceorientation', deviceOrientationChange, false );\n\t\t\tdeviceControls = new THREE.DeviceOrientationControls( object );\n\t\t\tdeviceControls.connect();\n\t\t\tif (!this.freeze) {\n\t\t\t\tdeviceControls.update();\n\t\t\t}\n\n\t\t\tself.dispatchEvent( {\n\t\t\t\ttype: \"devicechange\"\n\t\t\t} );\n\t\t}\n\t}\n\n\tthis.update = function() {\n\t\t// Applies head rotation from sensor data.\n\t\tif (self.freeze) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( sensorDevice ) {\n\t\t\tvrState = sensorDevice.getState();\n\t\t\tif ( vrState ) {\n\t\t\t\tif ( vrState.orientation && vrState.hasOrientation !== false ) {\n\t\t\t\t\tobject.quaternion.copy( vrState.orientation );\n\t\t\t\t}\n\n\t\t\t\tif ( vrState.position && vrState.hasPosition !== false ) {\n\t\t\t\t\t// vrState.position is null if using DK1 or if DK2 camera is not plugged in\n\t\t\t\t\tobject.position.copy( vrState.position );\n\t\t\t\t}\n\n\t\t\t\tobject.updateMatrixWorld();\n\t\t\t}\n\t\t} else if (deviceControls && deviceControls.deviceOrientation.gamma !== undefined) {\n\t\t\tdeviceControls.update();\n\t\t\tobject.rotateY(-zeroAngle);\n\t\t\tobject.updateMatrixWorld();\n\t\t}\n\t};\n\n\t//only useful when frozen\n\tthis.reset = function () {\n\t\tif ( object ) {\n\t\t\tobject.quaternion.set( 0, 0, 0, 1 );\n\t\t\tobject.position.set( 0, 0, 0 );\n\t\t}\n\t};\n\n\t//zeros only rotation on Y axis\n\t//todo: find out if it zeros out position. need a DK2 to test\n\tthis.zeroSensor = function () {\n\t\tif (sensorDevice && sensorDevice.zeroSensor) {\n\t\t\tsensorDevice.zeroSensor();\n\t\t}\n\t\tzeroAngle = object.rotation.y;\n\t\tself.update();\n\t};\n\n\tthis.freeze = false;\n\n\t//method to query which tech we're using\n\tthis.mode = function () {\n\t\treturn mode;\n\t};\n\n\tthis.scan = function () {\n\t\tif ( navigator.getVRDevices ) {\n\t\t\tnavigator.getVRDevices().then( gotVRDevices );\n\t\t} else if ( navigator.mozGetVRDevices ) {\n\t\t\tnavigator.mozGetVRDevices( gotVRDevices );\n\t\t}\n\t};\n\n\t//todo: connect/disconnect methods\n\t//todo: method to query orientation/position without changing object\n\t//todo: work without an object\n\n\tif ( vrBrowser ) {\n\t\tthis.scan();\n\t} else if ( \"DeviceOrientationEvent\" in window && THREE.DeviceOrientationControls) {\n\t\t//device orientation\n\t\twindow.addEventListener( \"deviceorientation\", deviceOrientationChange, false );\n\t}\n};\n\nTHREE.VRControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/VRControls.js\n ** module id = 30\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader/lib/css-base.js\n ** module id = 31\n ** module chunks = 0\n **/","'use strict';\n\nvar d        = require('d')\n  , callable = require('es5-ext/object/valid-callable')\n\n  , apply = Function.prototype.apply, call = Function.prototype.call\n  , create = Object.create, defineProperty = Object.defineProperty\n  , defineProperties = Object.defineProperties\n  , hasOwnProperty = Object.prototype.hasOwnProperty\n  , descriptor = { configurable: true, enumerable: false, writable: true }\n\n  , on, once, off, emit, methods, descriptors, base;\n\non = function (type, listener) {\n\tvar data;\n\n\tcallable(listener);\n\n\tif (!hasOwnProperty.call(this, '__ee__')) {\n\t\tdata = descriptor.value = create(null);\n\t\tdefineProperty(this, '__ee__', descriptor);\n\t\tdescriptor.value = null;\n\t} else {\n\t\tdata = this.__ee__;\n\t}\n\tif (!data[type]) data[type] = listener;\n\telse if (typeof data[type] === 'object') data[type].push(listener);\n\telse data[type] = [data[type], listener];\n\n\treturn this;\n};\n\nonce = function (type, listener) {\n\tvar once, self;\n\n\tcallable(listener);\n\tself = this;\n\ton.call(this, type, once = function () {\n\t\toff.call(self, type, once);\n\t\tapply.call(listener, this, arguments);\n\t});\n\n\tonce.__eeOnceListener__ = listener;\n\treturn this;\n};\n\noff = function (type, listener) {\n\tvar data, listeners, candidate, i;\n\n\tcallable(listener);\n\n\tif (!hasOwnProperty.call(this, '__ee__')) return this;\n\tdata = this.__ee__;\n\tif (!data[type]) return this;\n\tlisteners = data[type];\n\n\tif (typeof listeners === 'object') {\n\t\tfor (i = 0; (candidate = listeners[i]); ++i) {\n\t\t\tif ((candidate === listener) ||\n\t\t\t\t\t(candidate.__eeOnceListener__ === listener)) {\n\t\t\t\tif (listeners.length === 2) data[type] = listeners[i ? 0 : 1];\n\t\t\t\telse listeners.splice(i, 1);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ((listeners === listener) ||\n\t\t\t\t(listeners.__eeOnceListener__ === listener)) {\n\t\t\tdelete data[type];\n\t\t}\n\t}\n\n\treturn this;\n};\n\nemit = function (type) {\n\tvar i, l, listener, listeners, args;\n\n\tif (!hasOwnProperty.call(this, '__ee__')) return;\n\tlisteners = this.__ee__[type];\n\tif (!listeners) return;\n\n\tif (typeof listeners === 'object') {\n\t\tl = arguments.length;\n\t\targs = new Array(l - 1);\n\t\tfor (i = 1; i < l; ++i) args[i - 1] = arguments[i];\n\n\t\tlisteners = listeners.slice();\n\t\tfor (i = 0; (listener = listeners[i]); ++i) {\n\t\t\tapply.call(listener, this, args);\n\t\t}\n\t} else {\n\t\tswitch (arguments.length) {\n\t\tcase 1:\n\t\t\tcall.call(listeners, this);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcall.call(listeners, this, arguments[1]);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcall.call(listeners, this, arguments[1], arguments[2]);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tl = arguments.length;\n\t\t\targs = new Array(l - 1);\n\t\t\tfor (i = 1; i < l; ++i) {\n\t\t\t\targs[i - 1] = arguments[i];\n\t\t\t}\n\t\t\tapply.call(listeners, this, args);\n\t\t}\n\t}\n};\n\nmethods = {\n\ton: on,\n\tonce: once,\n\toff: off,\n\temit: emit\n};\n\ndescriptors = {\n\ton: d(on),\n\tonce: d(once),\n\toff: d(off),\n\temit: d(emit)\n};\n\nbase = defineProperties({}, descriptors);\n\nmodule.exports = exports = function (o) {\n\treturn (o == null) ? create(base) : defineProperties(Object(o), descriptors);\n};\nexports.methods = methods;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/index.js\n ** module id = 32\n ** module chunks = 0\n **/","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (factory((global.THREE = global.THREE || {})));\n}(this, (function (exports) { 'use strict';\n\n    // Polyfills\n\n    if ( Number.EPSILON === undefined ) {\n\n    \tNumber.EPSILON = Math.pow( 2, - 52 );\n\n    }\n\n    //\n\n    if ( Math.sign === undefined ) {\n\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n    \tMath.sign = function ( x ) {\n\n    \t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n    \t};\n\n    }\n\n    if ( Function.prototype.name === undefined ) {\n\n    \t// Missing in IE9-11.\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n    \tObject.defineProperty( Function.prototype, 'name', {\n\n    \t\tget: function () {\n\n    \t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\n    \t\t}\n\n    \t} );\n\n    }\n\n    if ( Object.assign === undefined ) {\n\n    \t// Missing in IE.\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n    \t( function () {\n\n    \t\tObject.assign = function ( target ) {\n\n    \t\t\t'use strict';\n\n    \t\t\tif ( target === undefined || target === null ) {\n\n    \t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n    \t\t\t}\n\n    \t\t\tvar output = Object( target );\n\n    \t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n    \t\t\t\tvar source = arguments[ index ];\n\n    \t\t\t\tif ( source !== undefined && source !== null ) {\n\n    \t\t\t\t\tfor ( var nextKey in source ) {\n\n    \t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n    \t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn output;\n\n    \t\t};\n\n    \t} )();\n\n    }\n\n    /**\n     * https://github.com/mrdoob/eventdispatcher.js/\n     */\n\n    function EventDispatcher() {}\n\n    Object.assign( EventDispatcher.prototype, {\n\n    \taddEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) this._listeners = {};\n\n    \t\tvar listeners = this._listeners;\n\n    \t\tif ( listeners[ type ] === undefined ) {\n\n    \t\t\tlisteners[ type ] = [];\n\n    \t\t}\n\n    \t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n    \t\t\tlisteners[ type ].push( listener );\n\n    \t\t}\n\n    \t},\n\n    \thasEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) return false;\n\n    \t\tvar listeners = this._listeners;\n\n    \t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tremoveEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) return;\n\n    \t\tvar listeners = this._listeners;\n    \t\tvar listenerArray = listeners[ type ];\n\n    \t\tif ( listenerArray !== undefined ) {\n\n    \t\t\tvar index = listenerArray.indexOf( listener );\n\n    \t\t\tif ( index !== - 1 ) {\n\n    \t\t\t\tlistenerArray.splice( index, 1 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tdispatchEvent: function ( event ) {\n\n    \t\tif ( this._listeners === undefined ) return;\n\n    \t\tvar listeners = this._listeners;\n    \t\tvar listenerArray = listeners[ event.type ];\n\n    \t\tif ( listenerArray !== undefined ) {\n\n    \t\t\tevent.target = this;\n\n    \t\t\tvar array = [], i = 0;\n    \t\t\tvar length = listenerArray.length;\n\n    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\n    \t\t\t\tarray[ i ] = listenerArray[ i ];\n\n    \t\t\t}\n\n    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\n    \t\t\t\tarray[ i ].call( this, event );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    var REVISION = '81';\n    var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n    var CullFaceNone = 0;\n    var CullFaceBack = 1;\n    var CullFaceFront = 2;\n    var CullFaceFrontBack = 3;\n    var FrontFaceDirectionCW = 0;\n    var FrontFaceDirectionCCW = 1;\n    var BasicShadowMap = 0;\n    var PCFShadowMap = 1;\n    var PCFSoftShadowMap = 2;\n    var FrontSide = 0;\n    var BackSide = 1;\n    var DoubleSide = 2;\n    var FlatShading = 1;\n    var SmoothShading = 2;\n    var NoColors = 0;\n    var FaceColors = 1;\n    var VertexColors = 2;\n    var NoBlending = 0;\n    var NormalBlending = 1;\n    var AdditiveBlending = 2;\n    var SubtractiveBlending = 3;\n    var MultiplyBlending = 4;\n    var CustomBlending = 5;\n    var BlendingMode = {\n        NoBlending: NoBlending,\n        NormalBlending: NormalBlending,\n        AdditiveBlending: AdditiveBlending,\n        SubtractiveBlending: SubtractiveBlending,\n        MultiplyBlending: MultiplyBlending,\n        CustomBlending: CustomBlending\n    };\n    var AddEquation = 100;\n    var SubtractEquation = 101;\n    var ReverseSubtractEquation = 102;\n    var MinEquation = 103;\n    var MaxEquation = 104;\n    var ZeroFactor = 200;\n    var OneFactor = 201;\n    var SrcColorFactor = 202;\n    var OneMinusSrcColorFactor = 203;\n    var SrcAlphaFactor = 204;\n    var OneMinusSrcAlphaFactor = 205;\n    var DstAlphaFactor = 206;\n    var OneMinusDstAlphaFactor = 207;\n    var DstColorFactor = 208;\n    var OneMinusDstColorFactor = 209;\n    var SrcAlphaSaturateFactor = 210;\n    var NeverDepth = 0;\n    var AlwaysDepth = 1;\n    var LessDepth = 2;\n    var LessEqualDepth = 3;\n    var EqualDepth = 4;\n    var GreaterEqualDepth = 5;\n    var GreaterDepth = 6;\n    var NotEqualDepth = 7;\n    var MultiplyOperation = 0;\n    var MixOperation = 1;\n    var AddOperation = 2;\n    var NoToneMapping = 0;\n    var LinearToneMapping = 1;\n    var ReinhardToneMapping = 2;\n    var Uncharted2ToneMapping = 3;\n    var CineonToneMapping = 4;\n    var UVMapping = 300;\n    var CubeReflectionMapping = 301;\n    var CubeRefractionMapping = 302;\n    var EquirectangularReflectionMapping = 303;\n    var EquirectangularRefractionMapping = 304;\n    var SphericalReflectionMapping = 305;\n    var CubeUVReflectionMapping = 306;\n    var CubeUVRefractionMapping = 307;\n    var TextureMapping = {\n        UVMapping: UVMapping,\n        CubeReflectionMapping: CubeReflectionMapping,\n        CubeRefractionMapping: CubeRefractionMapping,\n        EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n        EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n        SphericalReflectionMapping: SphericalReflectionMapping,\n        CubeUVReflectionMapping: CubeUVReflectionMapping,\n        CubeUVRefractionMapping: CubeUVRefractionMapping\n    };\n    var RepeatWrapping = 1000;\n    var ClampToEdgeWrapping = 1001;\n    var MirroredRepeatWrapping = 1002;\n    var TextureWrapping = {\n        RepeatWrapping: RepeatWrapping,\n        ClampToEdgeWrapping: ClampToEdgeWrapping,\n        MirroredRepeatWrapping: MirroredRepeatWrapping\n    };\n    var NearestFilter = 1003;\n    var NearestMipMapNearestFilter = 1004;\n    var NearestMipMapLinearFilter = 1005;\n    var LinearFilter = 1006;\n    var LinearMipMapNearestFilter = 1007;\n    var LinearMipMapLinearFilter = 1008;\n    var TextureFilter = {\n        NearestFilter: NearestFilter,\n        NearestMipMapNearestFilter: NearestMipMapNearestFilter,\n        NearestMipMapLinearFilter: NearestMipMapLinearFilter,\n        LinearFilter: LinearFilter,\n        LinearMipMapNearestFilter: LinearMipMapNearestFilter,\n        LinearMipMapLinearFilter: LinearMipMapLinearFilter\n    };\n    var UnsignedByteType = 1009;\n    var ByteType = 1010;\n    var ShortType = 1011;\n    var UnsignedShortType = 1012;\n    var IntType = 1013;\n    var UnsignedIntType = 1014;\n    var FloatType = 1015;\n    var HalfFloatType = 1016;\n    var UnsignedShort4444Type = 1017;\n    var UnsignedShort5551Type = 1018;\n    var UnsignedShort565Type = 1019;\n    var UnsignedInt248Type = 1020;\n    var AlphaFormat = 1021;\n    var RGBFormat = 1022;\n    var RGBAFormat = 1023;\n    var LuminanceFormat = 1024;\n    var LuminanceAlphaFormat = 1025;\n    var RGBEFormat = RGBAFormat;\n    var DepthFormat = 1026;\n    var DepthStencilFormat = 1027;\n    var RGB_S3TC_DXT1_Format = 2001;\n    var RGBA_S3TC_DXT1_Format = 2002;\n    var RGBA_S3TC_DXT3_Format = 2003;\n    var RGBA_S3TC_DXT5_Format = 2004;\n    var RGB_PVRTC_4BPPV1_Format = 2100;\n    var RGB_PVRTC_2BPPV1_Format = 2101;\n    var RGBA_PVRTC_4BPPV1_Format = 2102;\n    var RGBA_PVRTC_2BPPV1_Format = 2103;\n    var RGB_ETC1_Format = 2151;\n    var LoopOnce = 2200;\n    var LoopRepeat = 2201;\n    var LoopPingPong = 2202;\n    var InterpolateDiscrete = 2300;\n    var InterpolateLinear = 2301;\n    var InterpolateSmooth = 2302;\n    var ZeroCurvatureEnding = 2400;\n    var ZeroSlopeEnding = 2401;\n    var WrapAroundEnding = 2402;\n    var TrianglesDrawMode = 0;\n    var TriangleStripDrawMode = 1;\n    var TriangleFanDrawMode = 2;\n    var LinearEncoding = 3000;\n    var sRGBEncoding = 3001;\n    var GammaEncoding = 3007;\n    var RGBEEncoding = 3002;\n    var LogLuvEncoding = 3003;\n    var RGBM7Encoding = 3004;\n    var RGBM16Encoding = 3005;\n    var RGBDEncoding = 3006;\n    var BasicDepthPacking = 3200;\n    var RGBADepthPacking = 3201;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    exports.Math = {\n\n    \tDEG2RAD: Math.PI / 180,\n    \tRAD2DEG: 180 / Math.PI,\n\n    \tgenerateUUID: function () {\n\n    \t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n    \t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n    \t\tvar uuid = new Array( 36 );\n    \t\tvar rnd = 0, r;\n\n    \t\treturn function generateUUID() {\n\n    \t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n    \t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n    \t\t\t\t\tuuid[ i ] = '-';\n\n    \t\t\t\t} else if ( i === 14 ) {\n\n    \t\t\t\t\tuuid[ i ] = '4';\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n    \t\t\t\t\tr = rnd & 0xf;\n    \t\t\t\t\trnd = rnd >> 4;\n    \t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn uuid.join( '' );\n\n    \t\t};\n\n    \t}(),\n\n    \tclamp: function ( value, min, max ) {\n\n    \t\treturn Math.max( min, Math.min( max, value ) );\n\n    \t},\n\n    \t// compute euclidian modulo of m % n\n    \t// https://en.wikipedia.org/wiki/Modulo_operation\n\n    \teuclideanModulo: function ( n, m ) {\n\n    \t\treturn ( ( n % m ) + m ) % m;\n\n    \t},\n\n    \t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n    \tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n    \t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n    \t},\n\n    \t// http://en.wikipedia.org/wiki/Smoothstep\n\n    \tsmoothstep: function ( x, min, max ) {\n\n    \t\tif ( x <= min ) return 0;\n    \t\tif ( x >= max ) return 1;\n\n    \t\tx = ( x - min ) / ( max - min );\n\n    \t\treturn x * x * ( 3 - 2 * x );\n\n    \t},\n\n    \tsmootherstep: function ( x, min, max ) {\n\n    \t\tif ( x <= min ) return 0;\n    \t\tif ( x >= max ) return 1;\n\n    \t\tx = ( x - min ) / ( max - min );\n\n    \t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n    \t},\n\n    \trandom16: function () {\n\n    \t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n    \t\treturn Math.random();\n\n    \t},\n\n    \t// Random integer from <low, high> interval\n\n    \trandInt: function ( low, high ) {\n\n    \t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n    \t},\n\n    \t// Random float from <low, high> interval\n\n    \trandFloat: function ( low, high ) {\n\n    \t\treturn low + Math.random() * ( high - low );\n\n    \t},\n\n    \t// Random float from <-range/2, range/2> interval\n\n    \trandFloatSpread: function ( range ) {\n\n    \t\treturn range * ( 0.5 - Math.random() );\n\n    \t},\n\n    \tdegToRad: function ( degrees ) {\n\n    \t\treturn degrees * exports.Math.DEG2RAD;\n\n    \t},\n\n    \tradToDeg: function ( radians ) {\n\n    \t\treturn radians * exports.Math.RAD2DEG;\n\n    \t},\n\n    \tisPowerOfTwo: function ( value ) {\n\n    \t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n    \t},\n\n    \tnearestPowerOfTwo: function ( value ) {\n\n    \t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\n    \t},\n\n    \tnextPowerOfTwo: function ( value ) {\n\n    \t\tvalue --;\n    \t\tvalue |= value >> 1;\n    \t\tvalue |= value >> 2;\n    \t\tvalue |= value >> 4;\n    \t\tvalue |= value >> 8;\n    \t\tvalue |= value >> 16;\n    \t\tvalue ++;\n\n    \t\treturn value;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author philogb / http://blog.thejit.org/\n     * @author egraether / http://egraether.com/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    function Vector2( x, y ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n\n    }\n\n    Vector2.prototype = {\n\n    \tconstructor: Vector2,\n\n    \tisVector2: true,\n\n    \tget width() {\n\n    \t\treturn this.x;\n\n    \t},\n\n    \tset width( value ) {\n\n    \t\tthis.x = value;\n\n    \t},\n\n    \tget height() {\n\n    \t\treturn this.y;\n\n    \t},\n\n    \tset height( value ) {\n\n    \t\tthis.y = value;\n\n    \t},\n\n    \t//\n\n    \tset: function ( x, y ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( v ) {\n\n    \t\tthis.x *= v.x;\n    \t\tthis.y *= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivide: function ( v ) {\n\n    \t\tthis.x /= v.x;\n    \t\tthis.y /= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector2();\n    \t\t\t\tmax = new Vector2();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tclampLength: function ( min, max ) {\n\n    \t\tvar length = this.length();\n\n    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n    \t},\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n    \t},\n\n    \tlengthManhattan: function() {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tangle: function () {\n\n    \t\t// computes the angle in radians with respect to the positive x-axis\n\n    \t\tvar angle = Math.atan2( this.y, this.x );\n\n    \t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n    \t\treturn angle;\n\n    \t},\n\n    \tdistanceTo: function ( v ) {\n\n    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n    \t},\n\n    \tdistanceToSquared: function ( v ) {\n\n    \t\tvar dx = this.x - v.x, dy = this.y - v.y;\n    \t\treturn dx * dx + dy * dy;\n\n    \t},\n\n    \tdistanceToManhattan: function ( v ) {\n\n    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateAround: function ( center, angle ) {\n\n    \t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n    \t\tvar x = this.x - center.x;\n    \t\tvar y = this.y - center.y;\n\n    \t\tthis.x = x * c - y * s + center.x;\n    \t\tthis.y = x * s + y * c + center.y;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author szimek / https://github.com/szimek/\n     */\n\n    function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n    \tObject.defineProperty( this, 'id', { value: TextureIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.sourceFile = '';\n\n    \tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n    \tthis.mipmaps = [];\n\n    \tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n    \tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n    \tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n    \tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n    \tthis.format = format !== undefined ? format : RGBAFormat;\n    \tthis.type = type !== undefined ? type : UnsignedByteType;\n\n    \tthis.offset = new Vector2( 0, 0 );\n    \tthis.repeat = new Vector2( 1, 1 );\n\n    \tthis.generateMipmaps = true;\n    \tthis.premultiplyAlpha = false;\n    \tthis.flipY = true;\n    \tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\n    \t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n    \t//\n    \t// Also changing the encoding after already used by a Material will not automatically make the Material\n    \t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n    \tthis.encoding = encoding !== undefined ? encoding :  LinearEncoding;\n\n    \tthis.version = 0;\n    \tthis.onUpdate = null;\n\n    }\n\n    Texture.DEFAULT_IMAGE = undefined;\n    Texture.DEFAULT_MAPPING = UVMapping;\n\n    Texture.prototype = {\n\n    \tconstructor: Texture,\n\n    \tisTexture: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.image = source.image;\n    \t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n    \t\tthis.mapping = source.mapping;\n\n    \t\tthis.wrapS = source.wrapS;\n    \t\tthis.wrapT = source.wrapT;\n\n    \t\tthis.magFilter = source.magFilter;\n    \t\tthis.minFilter = source.minFilter;\n\n    \t\tthis.anisotropy = source.anisotropy;\n\n    \t\tthis.format = source.format;\n    \t\tthis.type = source.type;\n\n    \t\tthis.offset.copy( source.offset );\n    \t\tthis.repeat.copy( source.repeat );\n\n    \t\tthis.generateMipmaps = source.generateMipmaps;\n    \t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n    \t\tthis.flipY = source.flipY;\n    \t\tthis.unpackAlignment = source.unpackAlignment;\n    \t\tthis.encoding = source.encoding;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\n    \t\t\treturn meta.textures[ this.uuid ];\n\n    \t\t}\n\n    \t\tfunction getDataURL( image ) {\n\n    \t\t\tvar canvas;\n\n    \t\t\tif ( image.toDataURL !== undefined ) {\n\n    \t\t\t\tcanvas = image;\n\n    \t\t\t} else {\n\n    \t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\t\tcanvas.width = image.width;\n    \t\t\t\tcanvas.height = image.height;\n\n    \t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\n    \t\t\t}\n\n    \t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n    \t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n    \t\t\t} else {\n\n    \t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar output = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Texture',\n    \t\t\t\tgenerator: 'Texture.toJSON'\n    \t\t\t},\n\n    \t\t\tuuid: this.uuid,\n    \t\t\tname: this.name,\n\n    \t\t\tmapping: this.mapping,\n\n    \t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n    \t\t\toffset: [ this.offset.x, this.offset.y ],\n    \t\t\twrap: [ this.wrapS, this.wrapT ],\n\n    \t\t\tminFilter: this.minFilter,\n    \t\t\tmagFilter: this.magFilter,\n    \t\t\tanisotropy: this.anisotropy,\n\n    \t\t\tflipY: this.flipY\n    \t\t};\n\n    \t\tif ( this.image !== undefined ) {\n\n    \t\t\t// TODO: Move to THREE.Image\n\n    \t\t\tvar image = this.image;\n\n    \t\t\tif ( image.uuid === undefined ) {\n\n    \t\t\t\timage.uuid = exports.Math.generateUUID(); // UGH\n\n    \t\t\t}\n\n    \t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.images[ image.uuid ] = {\n    \t\t\t\t\tuuid: image.uuid,\n    \t\t\t\t\turl: getDataURL( image )\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t\toutput.image = image.uuid;\n\n    \t\t}\n\n    \t\tmeta.textures[ this.uuid ] = output;\n\n    \t\treturn output;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t},\n\n    \ttransformUv: function ( uv ) {\n\n    \t\tif ( this.mapping !== UVMapping )  return;\n\n    \t\tuv.multiply( this.repeat );\n    \t\tuv.add( this.offset );\n\n    \t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n    \t\t\tswitch ( this.wrapS ) {\n\n    \t\t\t\tcase RepeatWrapping:\n\n    \t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase ClampToEdgeWrapping:\n\n    \t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase MirroredRepeatWrapping:\n\n    \t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n    \t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n    \t\t\t\t\t}\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n    \t\t\tswitch ( this.wrapT ) {\n\n    \t\t\t\tcase RepeatWrapping:\n\n    \t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase ClampToEdgeWrapping:\n\n    \t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase MirroredRepeatWrapping:\n\n    \t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n    \t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n    \t\t\t\t\t}\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.flipY ) {\n\n    \t\t\tuv.y = 1 - uv.y;\n\n    \t\t}\n\n    \t}\n\n    };\n\n    Object.assign( Texture.prototype, EventDispatcher.prototype );\n\n    var count = 0;\n    function TextureIdCount() { return count++; };\n\n    /**\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author philogb / http://blog.thejit.org/\n     * @author mikael emtinger / http://gomo.se/\n     * @author egraether / http://egraether.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Vector4( x, y, z, w ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n    \tthis.z = z || 0;\n    \tthis.w = ( w !== undefined ) ? w : 1;\n\n    }\n\n    Vector4.prototype = {\n\n    \tconstructor: Vector4,\n\n    \tisVector4: true,\n\n    \tset: function ( x, y, z, w ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n    \t\tthis.z = z;\n    \t\tthis.w = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n    \t\tthis.z = scalar;\n    \t\tthis.w = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( z ) {\n\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetW: function ( w ) {\n\n    \t\tthis.w = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tcase 2: this.z = value; break;\n    \t\t\tcase 3: this.w = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tcase 2: return this.z;\n    \t\t\tcase 3: return this.w;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n    \t\tthis.z = v.z;\n    \t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n    \t\tthis.z += v.z;\n    \t\tthis.w += v.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n    \t\tthis.z += s;\n    \t\tthis.w += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n    \t\tthis.z = a.z + b.z;\n    \t\tthis.w = a.w + b.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n    \t\tthis.z += v.z * s;\n    \t\tthis.w += v.w * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n    \t\tthis.z -= v.z;\n    \t\tthis.w -= v.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n    \t\tthis.z -= s;\n    \t\tthis.w -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n    \t\tthis.z = a.z - b.z;\n    \t\tthis.w = a.w - b.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n    \t\t\tthis.z *= scalar;\n    \t\t\tthis.w *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n    \t\t\tthis.z = 0;\n    \t\t\tthis.w = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function ( m ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n    \t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tsetAxisAngleFromQuaternion: function ( q ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n    \t\t// q is assumed to be normalized\n\n    \t\tthis.w = 2 * Math.acos( q.w );\n\n    \t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n    \t\tif ( s < 0.0001 ) {\n\n    \t\t\t this.x = 1;\n    \t\t\t this.y = 0;\n    \t\t\t this.z = 0;\n\n    \t\t} else {\n\n    \t\t\t this.x = q.x / s;\n    \t\t\t this.y = q.y / s;\n    \t\t\t this.z = q.z / s;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar angle, x, y, z,\t\t// variables for result\n    \t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n    \t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n    \t\t\tte = m.elements,\n\n    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n    \t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n    \t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n    \t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n    \t\t\t// singularity found\n    \t\t\t// first check for identity matrix which must have +1 for all terms\n    \t\t\t// in leading diagonal and zero in other terms\n\n    \t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n    \t\t\t\t// this singularity is identity matrix so angle = 0\n\n    \t\t\t\tthis.set( 1, 0, 0, 0 );\n\n    \t\t\t\treturn this; // zero angle, arbitrary axis\n\n    \t\t\t}\n\n    \t\t\t// otherwise this singularity is angle = 180\n\n    \t\t\tangle = Math.PI;\n\n    \t\t\tvar xx = ( m11 + 1 ) / 2;\n    \t\t\tvar yy = ( m22 + 1 ) / 2;\n    \t\t\tvar zz = ( m33 + 1 ) / 2;\n    \t\t\tvar xy = ( m12 + m21 ) / 4;\n    \t\t\tvar xz = ( m13 + m31 ) / 4;\n    \t\t\tvar yz = ( m23 + m32 ) / 4;\n\n    \t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n    \t\t\t\t// m11 is the largest diagonal term\n\n    \t\t\t\tif ( xx < epsilon ) {\n\n    \t\t\t\t\tx = 0;\n    \t\t\t\t\ty = 0.707106781;\n    \t\t\t\t\tz = 0.707106781;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tx = Math.sqrt( xx );\n    \t\t\t\t\ty = xy / x;\n    \t\t\t\t\tz = xz / x;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( yy > zz ) {\n\n    \t\t\t\t// m22 is the largest diagonal term\n\n    \t\t\t\tif ( yy < epsilon ) {\n\n    \t\t\t\t\tx = 0.707106781;\n    \t\t\t\t\ty = 0;\n    \t\t\t\t\tz = 0.707106781;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ty = Math.sqrt( yy );\n    \t\t\t\t\tx = xy / y;\n    \t\t\t\t\tz = yz / y;\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// m33 is the largest diagonal term so base result on this\n\n    \t\t\t\tif ( zz < epsilon ) {\n\n    \t\t\t\t\tx = 0.707106781;\n    \t\t\t\t\ty = 0.707106781;\n    \t\t\t\t\tz = 0;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tz = Math.sqrt( zz );\n    \t\t\t\t\tx = xz / z;\n    \t\t\t\t\ty = yz / z;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.set( x, y, z, angle );\n\n    \t\t\treturn this; // return 180 deg rotation\n\n    \t\t}\n\n    \t\t// as we have reached here there are no singularities so we can handle normally\n\n    \t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n    \t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n    \t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n    \t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n    \t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n    \t\t// caught by singularity test above, but I've left it in just in case\n\n    \t\tthis.x = ( m32 - m23 ) / s;\n    \t\tthis.y = ( m13 - m31 ) / s;\n    \t\tthis.z = ( m21 - m12 ) / s;\n    \t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n    \t\tthis.z = Math.min( this.z, v.z );\n    \t\tthis.w = Math.min( this.w, v.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n    \t\tthis.z = Math.max( this.z, v.z );\n    \t\tthis.w = Math.max( this.w, v.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n    \t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector4();\n    \t\t\t\tmax = new Vector4();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal, minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n    \t\tthis.z = Math.floor( this.z );\n    \t\tthis.w = Math.floor( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n    \t\tthis.z = Math.ceil( this.z );\n    \t\tthis.w = Math.ceil( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n    \t\tthis.z = Math.round( this.z );\n    \t\tthis.w = Math.round( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n    \t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n    \t\tthis.z = - this.z;\n    \t\tthis.w = - this.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n    \t},\n\n    \tlengthManhattan: function () {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n    \t\tthis.z += ( v.z - this.z ) * alpha;\n    \t\tthis.w += ( v.w - this.w ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n    \t\tthis.z = array[ offset + 2 ];\n    \t\tthis.w = array[ offset + 3 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n    \t\tarray[ offset + 2 ] = this.z;\n    \t\tarray[ offset + 3 ] = this.w;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n    \t\tthis.z = attribute.array[ index + 2 ];\n    \t\tthis.w = attribute.array[ index + 3 ];\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author szimek / https://github.com/szimek/\n     * @author alteredq / http://alteredqualia.com/\n     * @author Marius Kintel / https://github.com/kintel\n     */\n\n    /*\n     In options, we can specify:\n     * Texture parameters for an auto-generated target texture\n     * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n    */\n    function WebGLRenderTarget( width, height, options ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.width = width;\n    \tthis.height = height;\n\n    \tthis.scissor = new Vector4( 0, 0, width, height );\n    \tthis.scissorTest = false;\n\n    \tthis.viewport = new Vector4( 0, 0, width, height );\n\n    \toptions = options || {};\n\n    \tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\n    \tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n    \tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n    \tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n    \tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n    }\n\n    Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {\n\n    \tisWebGLRenderTarget: true,\n\n    \tsetSize: function ( width, height ) {\n\n    \t\tif ( this.width !== width || this.height !== height ) {\n\n    \t\t\tthis.width = width;\n    \t\t\tthis.height = height;\n\n    \t\t\tthis.dispose();\n\n    \t\t}\n\n    \t\tthis.viewport.set( 0, 0, width, height );\n    \t\tthis.scissor.set( 0, 0, width, height );\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.width = source.width;\n    \t\tthis.height = source.height;\n\n    \t\tthis.viewport.copy( source.viewport );\n\n    \t\tthis.texture = source.texture.clone();\n\n    \t\tthis.depthBuffer = source.depthBuffer;\n    \t\tthis.stencilBuffer = source.stencilBuffer;\n    \t\tthis.depthTexture = source.depthTexture;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com\n     */\n\n    function WebGLRenderTargetCube( width, height, options ) {\n\n    \tWebGLRenderTarget.call( this, width, height, options );\n\n    \tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n    \tthis.activeMipMapLevel = 0;\n\n    }\n\n    WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n    WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\n    WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     */\n\n    function Quaternion( x, y, z, w ) {\n\n    \tthis._x = x || 0;\n    \tthis._y = y || 0;\n    \tthis._z = z || 0;\n    \tthis._w = ( w !== undefined ) ? w : 1;\n\n    }\n\n    Quaternion.prototype = {\n\n    \tconstructor: Quaternion,\n\n    \tget x () {\n\n    \t\treturn this._x;\n\n    \t},\n\n    \tset x ( value ) {\n\n    \t\tthis._x = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget y () {\n\n    \t\treturn this._y;\n\n    \t},\n\n    \tset y ( value ) {\n\n    \t\tthis._y = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget z () {\n\n    \t\treturn this._z;\n\n    \t},\n\n    \tset z ( value ) {\n\n    \t\tthis._z = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget w () {\n\n    \t\treturn this._w;\n\n    \t},\n\n    \tset w ( value ) {\n\n    \t\tthis._w = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tset: function ( x, y, z, w ) {\n\n    \t\tthis._x = x;\n    \t\tthis._y = y;\n    \t\tthis._z = z;\n    \t\tthis._w = w;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n    \t},\n\n    \tcopy: function ( quaternion ) {\n\n    \t\tthis._x = quaternion.x;\n    \t\tthis._y = quaternion.y;\n    \t\tthis._z = quaternion.z;\n    \t\tthis._w = quaternion.w;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromEuler: function ( euler, update ) {\n\n    \t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n    \t\t}\n\n    \t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n    \t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    \t\t//\tcontent/SpinCalc.m\n\n    \t\tvar c1 = Math.cos( euler._x / 2 );\n    \t\tvar c2 = Math.cos( euler._y / 2 );\n    \t\tvar c3 = Math.cos( euler._z / 2 );\n    \t\tvar s1 = Math.sin( euler._x / 2 );\n    \t\tvar s2 = Math.sin( euler._y / 2 );\n    \t\tvar s3 = Math.sin( euler._z / 2 );\n\n    \t\tvar order = euler.order;\n\n    \t\tif ( order === 'XYZ' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'YXZ' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t} else if ( order === 'ZXY' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'ZYX' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t} else if ( order === 'YZX' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'XZY' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t}\n\n    \t\tif ( update !== false ) this.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromAxisAngle: function ( axis, angle ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n    \t\t// assumes axis is normalized\n\n    \t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n    \t\tthis._x = axis.x * s;\n    \t\tthis._y = axis.y * s;\n    \t\tthis._z = axis.z * s;\n    \t\tthis._w = Math.cos( halfAngle );\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromRotationMatrix: function ( m ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar te = m.elements,\n\n    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n    \t\t\ttrace = m11 + m22 + m33,\n    \t\t\ts;\n\n    \t\tif ( trace > 0 ) {\n\n    \t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n    \t\t\tthis._w = 0.25 / s;\n    \t\t\tthis._x = ( m32 - m23 ) * s;\n    \t\t\tthis._y = ( m13 - m31 ) * s;\n    \t\t\tthis._z = ( m21 - m12 ) * s;\n\n    \t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n    \t\t\tthis._w = ( m32 - m23 ) / s;\n    \t\t\tthis._x = 0.25 * s;\n    \t\t\tthis._y = ( m12 + m21 ) / s;\n    \t\t\tthis._z = ( m13 + m31 ) / s;\n\n    \t\t} else if ( m22 > m33 ) {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n    \t\t\tthis._w = ( m13 - m31 ) / s;\n    \t\t\tthis._x = ( m12 + m21 ) / s;\n    \t\t\tthis._y = 0.25 * s;\n    \t\t\tthis._z = ( m23 + m32 ) / s;\n\n    \t\t} else {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n    \t\t\tthis._w = ( m21 - m12 ) / s;\n    \t\t\tthis._x = ( m13 + m31 ) / s;\n    \t\t\tthis._y = ( m23 + m32 ) / s;\n    \t\t\tthis._z = 0.25 * s;\n\n    \t\t}\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromUnitVectors: function () {\n\n    \t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\n    \t\t// assumes direction vectors vFrom and vTo are normalized\n\n    \t\tvar v1, r;\n\n    \t\tvar EPS = 0.000001;\n\n    \t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tr = vFrom.dot( vTo ) + 1;\n\n    \t\t\tif ( r < EPS ) {\n\n    \t\t\t\tr = 0;\n\n    \t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n    \t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tv1.crossVectors( vFrom, vTo );\n\n    \t\t\t}\n\n    \t\t\tthis._x = v1.x;\n    \t\t\tthis._y = v1.y;\n    \t\t\tthis._z = v1.z;\n    \t\t\tthis._w = r;\n\n    \t\t\treturn this.normalize();\n\n    \t\t};\n\n    \t}(),\n\n    \tinverse: function () {\n\n    \t\treturn this.conjugate().normalize();\n\n    \t},\n\n    \tconjugate: function () {\n\n    \t\tthis._x *= - 1;\n    \t\tthis._y *= - 1;\n    \t\tthis._z *= - 1;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\tvar l = this.length();\n\n    \t\tif ( l === 0 ) {\n\n    \t\t\tthis._x = 0;\n    \t\t\tthis._y = 0;\n    \t\t\tthis._z = 0;\n    \t\t\tthis._w = 1;\n\n    \t\t} else {\n\n    \t\t\tl = 1 / l;\n\n    \t\t\tthis._x = this._x * l;\n    \t\t\tthis._y = this._y * l;\n    \t\t\tthis._z = this._z * l;\n    \t\t\tthis._w = this._w * l;\n\n    \t\t}\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( q, p ) {\n\n    \t\tif ( p !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n    \t\t\treturn this.multiplyQuaternions( q, p );\n\n    \t\t}\n\n    \t\treturn this.multiplyQuaternions( this, q );\n\n    \t},\n\n    \tpremultiply: function ( q ) {\n\n    \t\treturn this.multiplyQuaternions( q, this );\n\n    \t},\n\n    \tmultiplyQuaternions: function ( a, b ) {\n\n    \t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n    \t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n    \t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n    \t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    \t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    \t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    \t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tslerp: function ( qb, t ) {\n\n    \t\tif ( t === 0 ) return this;\n    \t\tif ( t === 1 ) return this.copy( qb );\n\n    \t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n    \t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    \t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n    \t\tif ( cosHalfTheta < 0 ) {\n\n    \t\t\tthis._w = - qb._w;\n    \t\t\tthis._x = - qb._x;\n    \t\t\tthis._y = - qb._y;\n    \t\t\tthis._z = - qb._z;\n\n    \t\t\tcosHalfTheta = - cosHalfTheta;\n\n    \t\t} else {\n\n    \t\t\tthis.copy( qb );\n\n    \t\t}\n\n    \t\tif ( cosHalfTheta >= 1.0 ) {\n\n    \t\t\tthis._w = w;\n    \t\t\tthis._x = x;\n    \t\t\tthis._y = y;\n    \t\t\tthis._z = z;\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n    \t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n    \t\t\tthis._w = 0.5 * ( w + this._w );\n    \t\t\tthis._x = 0.5 * ( x + this._x );\n    \t\t\tthis._y = 0.5 * ( y + this._y );\n    \t\t\tthis._z = 0.5 * ( z + this._z );\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n    \t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n    \t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n    \t\tthis._w = ( w * ratioA + this._w * ratioB );\n    \t\tthis._x = ( x * ratioA + this._x * ratioB );\n    \t\tthis._y = ( y * ratioA + this._y * ratioB );\n    \t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( quaternion ) {\n\n    \t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis._x = array[ offset ];\n    \t\tthis._y = array[ offset + 1 ];\n    \t\tthis._z = array[ offset + 2 ];\n    \t\tthis._w = array[ offset + 3 ];\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this._x;\n    \t\tarray[ offset + 1 ] = this._y;\n    \t\tarray[ offset + 2 ] = this._z;\n    \t\tarray[ offset + 3 ] = this._w;\n\n    \t\treturn array;\n\n    \t},\n\n    \tonChange: function ( callback ) {\n\n    \t\tthis.onChangeCallback = callback;\n\n    \t\treturn this;\n\n    \t},\n\n    \tonChangeCallback: function () {}\n\n    };\n\n    Object.assign( Quaternion, {\n\n    \tslerp: function( qa, qb, qm, t ) {\n\n    \t\treturn qm.copy( qa ).slerp( qb, t );\n\n    \t},\n\n    \tslerpFlat: function(\n    \t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n    \t\t// fuzz-free, array-based Quaternion SLERP operation\n\n    \t\tvar x0 = src0[ srcOffset0 + 0 ],\n    \t\t\ty0 = src0[ srcOffset0 + 1 ],\n    \t\t\tz0 = src0[ srcOffset0 + 2 ],\n    \t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n    \t\t\tx1 = src1[ srcOffset1 + 0 ],\n    \t\t\ty1 = src1[ srcOffset1 + 1 ],\n    \t\t\tz1 = src1[ srcOffset1 + 2 ],\n    \t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n    \t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n    \t\t\tvar s = 1 - t,\n\n    \t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n    \t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n    \t\t\t\tsqrSin = 1 - cos * cos;\n\n    \t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n    \t\t\tif ( sqrSin > Number.EPSILON ) {\n\n    \t\t\t\tvar sin = Math.sqrt( sqrSin ),\n    \t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n    \t\t\t\ts = Math.sin( s * len ) / sin;\n    \t\t\t\tt = Math.sin( t * len ) / sin;\n\n    \t\t\t}\n\n    \t\t\tvar tDir = t * dir;\n\n    \t\t\tx0 = x0 * s + x1 * tDir;\n    \t\t\ty0 = y0 * s + y1 * tDir;\n    \t\t\tz0 = z0 * s + z1 * tDir;\n    \t\t\tw0 = w0 * s + w1 * tDir;\n\n    \t\t\t// Normalize in case we just did a lerp:\n    \t\t\tif ( s === 1 - t ) {\n\n    \t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n    \t\t\t\tx0 *= f;\n    \t\t\t\ty0 *= f;\n    \t\t\t\tz0 *= f;\n    \t\t\t\tw0 *= f;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tdst[ dstOffset ] = x0;\n    \t\tdst[ dstOffset + 1 ] = y0;\n    \t\tdst[ dstOffset + 2 ] = z0;\n    \t\tdst[ dstOffset + 3 ] = w0;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author *kile / http://kile.stravaganza.org/\n     * @author philogb / http://blog.thejit.org/\n     * @author mikael emtinger / http://gomo.se/\n     * @author egraether / http://egraether.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Vector3( x, y, z ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n    \tthis.z = z || 0;\n\n    }\n\n    Vector3.prototype = {\n\n    \tconstructor: Vector3,\n\n    \tisVector3: true,\n\n    \tset: function ( x, y, z ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n    \t\tthis.z = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( z ) {\n\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tcase 2: this.z = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tcase 2: return this.z;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y, this.z );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n    \t\tthis.z = v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n    \t\tthis.z += v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n    \t\tthis.z += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n    \t\tthis.z = a.z + b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n    \t\tthis.z += v.z * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n    \t\tthis.z -= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n    \t\tthis.z -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n    \t\tthis.z = a.z - b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n    \t\t\treturn this.multiplyVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x *= v.x;\n    \t\tthis.y *= v.y;\n    \t\tthis.z *= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n    \t\t\tthis.z *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n    \t\t\tthis.z = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x * b.x;\n    \t\tthis.y = a.y * b.y;\n    \t\tthis.z = a.z * b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyEuler: function () {\n\n    \t\tvar quaternion;\n\n    \t\treturn function applyEuler( euler ) {\n\n    \t\t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n    \t\t\t}\n\n    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\n    \t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyAxisAngle: function () {\n\n    \t\tvar quaternion;\n\n    \t\treturn function applyAxisAngle( axis, angle ) {\n\n    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\n    \t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyMatrix3: function ( m ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n    \t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n    \t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 affine matrix\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyProjection: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 projection matrix\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n    \t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\n    \t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n    \t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n    \t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyQuaternion: function ( q ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n    \t\t// calculate quat * vector\n\n    \t\tvar ix =  qw * x + qy * z - qz * y;\n    \t\tvar iy =  qw * y + qz * x - qx * z;\n    \t\tvar iz =  qw * z + qx * y - qy * x;\n    \t\tvar iw = - qx * x - qy * y - qz * z;\n\n    \t\t// calculate result * inverse quat\n\n    \t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n    \t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n    \t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n    \t\treturn this;\n\n    \t},\n\n    \tproject: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function project( camera ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n    \t\t\treturn this.applyProjection( matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tunproject: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function unproject( camera ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n    \t\t\treturn this.applyProjection( matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \ttransformDirection: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 affine matrix\n    \t\t// vector interpreted as a direction\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n    \t\treturn this.normalize();\n\n    \t},\n\n    \tdivide: function ( v ) {\n\n    \t\tthis.x /= v.x;\n    \t\tthis.y /= v.y;\n    \t\tthis.z /= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n    \t\tthis.z = Math.min( this.z, v.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n    \t\tthis.z = Math.max( this.z, v.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector3();\n    \t\t\t\tmax = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tclampLength: function ( min, max ) {\n\n    \t\tvar length = this.length();\n\n    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n    \t},\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n    \t\tthis.z = Math.floor( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n    \t\tthis.z = Math.ceil( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n    \t\tthis.z = Math.round( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n    \t\tthis.z = - this.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n    \t},\n\n    \tlengthManhattan: function () {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n    \t\tthis.z += ( v.z - this.z ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tcross: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n    \t\t\treturn this.crossVectors( v, w );\n\n    \t\t}\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n\n    \t\tthis.x = y * v.z - z * v.y;\n    \t\tthis.y = z * v.x - x * v.z;\n    \t\tthis.z = x * v.y - y * v.x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcrossVectors: function ( a, b ) {\n\n    \t\tvar ax = a.x, ay = a.y, az = a.z;\n    \t\tvar bx = b.x, by = b.y, bz = b.z;\n\n    \t\tthis.x = ay * bz - az * by;\n    \t\tthis.y = az * bx - ax * bz;\n    \t\tthis.z = ax * by - ay * bx;\n\n    \t\treturn this;\n\n    \t},\n\n    \tprojectOnVector: function ( vector ) {\n\n    \t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n    \t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n    \t},\n\n    \tprojectOnPlane: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function projectOnPlane( planeNormal ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n    \t\t\treturn this.sub( v1 );\n\n    \t\t};\n\n    \t}(),\n\n    \treflect: function () {\n\n    \t\t// reflect incident vector off plane orthogonal to normal\n    \t\t// normal is assumed to have unit length\n\n    \t\tvar v1;\n\n    \t\treturn function reflect( normal ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tangleTo: function ( v ) {\n\n    \t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n    \t\t// clamp, to handle numerical problems\n\n    \t\treturn Math.acos( exports.Math.clamp( theta, - 1, 1 ) );\n\n    \t},\n\n    \tdistanceTo: function ( v ) {\n\n    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n    \t},\n\n    \tdistanceToSquared: function ( v ) {\n\n    \t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n    \t\treturn dx * dx + dy * dy + dz * dz;\n\n    \t},\n\n    \tdistanceToManhattan: function ( v ) {\n\n    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n    \t},\n\n    \tsetFromSpherical: function( s ) {\n\n    \t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n    \t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n    \t\tthis.y = Math.cos( s.phi ) * s.radius;\n    \t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrixPosition: function ( m ) {\n\n    \t\treturn this.setFromMatrixColumn( m, 3 );\n\n    \t},\n\n    \tsetFromMatrixScale: function ( m ) {\n\n    \t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n    \t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n    \t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n    \t\tthis.x = sx;\n    \t\tthis.y = sy;\n    \t\tthis.z = sz;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrixColumn: function ( m, index ) {\n\n    \t\tif ( typeof m === 'number' ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n    \t\t\tvar temp = m\n    \t\t\tm = index;\n    \t\t\tindex = temp;\n\n    \t\t}\n\n    \t\treturn this.fromArray( m.elements, index * 4 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n    \t\tthis.z = array[ offset + 2 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n    \t\tarray[ offset + 2 ] = this.z;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n    \t\tthis.z = attribute.array[ index + 2 ];\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author philogb / http://blog.thejit.org/\n     * @author jordi_ros / http://plattsoft.com\n     * @author D1plo1d / http://github.com/D1plo1d\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author timknip / http://www.floorplanner.com/\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Matrix4() {\n\n    \tthis.elements = new Float32Array( [\n\n    \t\t1, 0, 0, 0,\n    \t\t0, 1, 0, 0,\n    \t\t0, 0, 1, 0,\n    \t\t0, 0, 0, 1\n\n    \t] );\n\n    \tif ( arguments.length > 0 ) {\n\n    \t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n    \t}\n\n    }\n\n    Matrix4.prototype = {\n\n    \tconstructor: Matrix4,\n\n    \tisMatrix4: true,\n\n    \tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n    \t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n    \t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n    \t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n    \t\treturn this;\n\n    \t},\n\n    \tidentity: function () {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0, 0,\n    \t\t\t0, 1, 0, 0,\n    \t\t\t0, 0, 1, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new Matrix4().fromArray( this.elements );\n\n    \t},\n\n    \tcopy: function ( m ) {\n\n    \t\tthis.elements.set( m.elements );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyPosition: function ( m ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar me = m.elements;\n\n    \t\tte[ 12 ] = me[ 12 ];\n    \t\tte[ 13 ] = me[ 13 ];\n    \t\tte[ 14 ] = me[ 14 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n    \t\txAxis.setFromMatrixColumn( this, 0 );\n    \t\tyAxis.setFromMatrixColumn( this, 1 );\n    \t\tzAxis.setFromMatrixColumn( this, 2 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n    \t\tthis.set(\n    \t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n    \t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n    \t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n    \t\t\t0,       0,       0,       1\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \textractRotation: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function extractRotation( m ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tvar te = this.elements;\n    \t\t\tvar me = m.elements;\n\n    \t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n    \t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n    \t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n    \t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n    \t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n    \t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n    \t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n    \t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n    \t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n    \t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n    \t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n    \t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmakeRotationFromEuler: function ( euler ) {\n\n    \t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n    \t\t}\n\n    \t\tvar te = this.elements;\n\n    \t\tvar x = euler.x, y = euler.y, z = euler.z;\n    \t\tvar a = Math.cos( x ), b = Math.sin( x );\n    \t\tvar c = Math.cos( y ), d = Math.sin( y );\n    \t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n    \t\tif ( euler.order === 'XYZ' ) {\n\n    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = - c * f;\n    \t\t\tte[ 8 ] = d;\n\n    \t\t\tte[ 1 ] = af + be * d;\n    \t\t\tte[ 5 ] = ae - bf * d;\n    \t\t\tte[ 9 ] = - b * c;\n\n    \t\t\tte[ 2 ] = bf - ae * d;\n    \t\t\tte[ 6 ] = be + af * d;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'YXZ' ) {\n\n    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n    \t\t\tte[ 0 ] = ce + df * b;\n    \t\t\tte[ 4 ] = de * b - cf;\n    \t\t\tte[ 8 ] = a * d;\n\n    \t\t\tte[ 1 ] = a * f;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = - b;\n\n    \t\t\tte[ 2 ] = cf * b - de;\n    \t\t\tte[ 6 ] = df + ce * b;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'ZXY' ) {\n\n    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n    \t\t\tte[ 0 ] = ce - df * b;\n    \t\t\tte[ 4 ] = - a * f;\n    \t\t\tte[ 8 ] = de + cf * b;\n\n    \t\t\tte[ 1 ] = cf + de * b;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = df - ce * b;\n\n    \t\t\tte[ 2 ] = - a * d;\n    \t\t\tte[ 6 ] = b;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'ZYX' ) {\n\n    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = be * d - af;\n    \t\t\tte[ 8 ] = ae * d + bf;\n\n    \t\t\tte[ 1 ] = c * f;\n    \t\t\tte[ 5 ] = bf * d + ae;\n    \t\t\tte[ 9 ] = af * d - be;\n\n    \t\t\tte[ 2 ] = - d;\n    \t\t\tte[ 6 ] = b * c;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'YZX' ) {\n\n    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = bd - ac * f;\n    \t\t\tte[ 8 ] = bc * f + ad;\n\n    \t\t\tte[ 1 ] = f;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = - b * e;\n\n    \t\t\tte[ 2 ] = - d * e;\n    \t\t\tte[ 6 ] = ad * f + bc;\n    \t\t\tte[ 10 ] = ac - bd * f;\n\n    \t\t} else if ( euler.order === 'XZY' ) {\n\n    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = - f;\n    \t\t\tte[ 8 ] = d * e;\n\n    \t\t\tte[ 1 ] = ac * f + bd;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = ad * f - bc;\n\n    \t\t\tte[ 2 ] = bc * f - ad;\n    \t\t\tte[ 6 ] = b * e;\n    \t\t\tte[ 10 ] = bd * f + ac;\n\n    \t\t}\n\n    \t\t// last column\n    \t\tte[ 3 ] = 0;\n    \t\tte[ 7 ] = 0;\n    \t\tte[ 11 ] = 0;\n\n    \t\t// bottom row\n    \t\tte[ 12 ] = 0;\n    \t\tte[ 13 ] = 0;\n    \t\tte[ 14 ] = 0;\n    \t\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationFromQuaternion: function ( q ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n    \t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n    \t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n    \t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n    \t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n    \t\tte[ 0 ] = 1 - ( yy + zz );\n    \t\tte[ 4 ] = xy - wz;\n    \t\tte[ 8 ] = xz + wy;\n\n    \t\tte[ 1 ] = xy + wz;\n    \t\tte[ 5 ] = 1 - ( xx + zz );\n    \t\tte[ 9 ] = yz - wx;\n\n    \t\tte[ 2 ] = xz - wy;\n    \t\tte[ 6 ] = yz + wx;\n    \t\tte[ 10 ] = 1 - ( xx + yy );\n\n    \t\t// last column\n    \t\tte[ 3 ] = 0;\n    \t\tte[ 7 ] = 0;\n    \t\tte[ 11 ] = 0;\n\n    \t\t// bottom row\n    \t\tte[ 12 ] = 0;\n    \t\tte[ 13 ] = 0;\n    \t\tte[ 14 ] = 0;\n    \t\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlookAt: function () {\n\n    \t\tvar x, y, z;\n\n    \t\treturn function lookAt( eye, target, up ) {\n\n    \t\t\tif ( x === undefined ) {\n\n    \t\t\t\tx = new Vector3();\n    \t\t\t\ty = new Vector3();\n    \t\t\t\tz = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tvar te = this.elements;\n\n    \t\t\tz.subVectors( eye, target ).normalize();\n\n    \t\t\tif ( z.lengthSq() === 0 ) {\n\n    \t\t\t\tz.z = 1;\n\n    \t\t\t}\n\n    \t\t\tx.crossVectors( up, z ).normalize();\n\n    \t\t\tif ( x.lengthSq() === 0 ) {\n\n    \t\t\t\tz.z += 0.0001;\n    \t\t\t\tx.crossVectors( up, z ).normalize();\n\n    \t\t\t}\n\n    \t\t\ty.crossVectors( z, x );\n\n\n    \t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n    \t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n    \t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmultiply: function ( m, n ) {\n\n    \t\tif ( n !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n    \t\t\treturn this.multiplyMatrices( m, n );\n\n    \t\t}\n\n    \t\treturn this.multiplyMatrices( this, m );\n\n    \t},\n\n    \tpremultiply: function ( m ) {\n\n    \t\treturn this.multiplyMatrices( m, this );\n\n    \t},\n\n    \tmultiplyMatrices: function ( a, b ) {\n\n    \t\tvar ae = a.elements;\n    \t\tvar be = b.elements;\n    \t\tvar te = this.elements;\n\n    \t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n    \t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n    \t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n    \t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n    \t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n    \t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n    \t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n    \t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n    \t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n    \t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n    \t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n    \t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n    \t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n    \t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n    \t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n    \t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n    \t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n    \t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n    \t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n    \t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n    \t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n    \t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n    \t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n    \t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyToArray: function ( a, b, r ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tthis.multiplyMatrices( a, b );\n\n    \t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n    \t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n    \t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n    \t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n    \t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n    \t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n    \t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyToVector3Array: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToVector3Array( array, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = array.length;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n    \t\t\t\tv1.fromArray( array, j );\n    \t\t\t\tv1.applyMatrix4( this );\n    \t\t\t\tv1.toArray( array, j );\n\n    \t\t\t}\n\n    \t\t\treturn array;\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyToBuffer: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n    \t\t\t\tv1.x = buffer.getX( j );\n    \t\t\t\tv1.y = buffer.getY( j );\n    \t\t\t\tv1.z = buffer.getZ( j );\n\n    \t\t\t\tv1.applyMatrix4( this );\n\n    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n    \t\t\t}\n\n    \t\t\treturn buffer;\n\n    \t\t};\n\n    \t}(),\n\n    \tdeterminant: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n    \t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n    \t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n    \t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n    \t\t//TODO: make this more efficient\n    \t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n    \t\treturn (\n    \t\t\tn41 * (\n    \t\t\t\t+ n14 * n23 * n32\n    \t\t\t\t - n13 * n24 * n32\n    \t\t\t\t - n14 * n22 * n33\n    \t\t\t\t + n12 * n24 * n33\n    \t\t\t\t + n13 * n22 * n34\n    \t\t\t\t - n12 * n23 * n34\n    \t\t\t) +\n    \t\t\tn42 * (\n    \t\t\t\t+ n11 * n23 * n34\n    \t\t\t\t - n11 * n24 * n33\n    \t\t\t\t + n14 * n21 * n33\n    \t\t\t\t - n13 * n21 * n34\n    \t\t\t\t + n13 * n24 * n31\n    \t\t\t\t - n14 * n23 * n31\n    \t\t\t) +\n    \t\t\tn43 * (\n    \t\t\t\t+ n11 * n24 * n32\n    \t\t\t\t - n11 * n22 * n34\n    \t\t\t\t - n14 * n21 * n32\n    \t\t\t\t + n12 * n21 * n34\n    \t\t\t\t + n14 * n22 * n31\n    \t\t\t\t - n12 * n24 * n31\n    \t\t\t) +\n    \t\t\tn44 * (\n    \t\t\t\t- n13 * n22 * n31\n    \t\t\t\t - n11 * n23 * n32\n    \t\t\t\t + n11 * n22 * n33\n    \t\t\t\t + n13 * n21 * n32\n    \t\t\t\t - n12 * n21 * n33\n    \t\t\t\t + n12 * n23 * n31\n    \t\t\t)\n\n    \t\t);\n\n    \t},\n\n    \ttranspose: function () {\n\n    \t\tvar te = this.elements;\n    \t\tvar tmp;\n\n    \t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n    \t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n    \t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n    \t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n    \t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n    \t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n    \t\treturn this;\n\n    \t},\n\n    \tflattenToArrayOffset: function ( array, offset ) {\n\n    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n    \t\t\t\t\"- just use .toArray instead.\" );\n\n    \t\treturn this.toArray( array, offset );\n\n    \t},\n\n    \tgetPosition: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function getPosition() {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\n    \t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n    \t\t};\n\n    \t}(),\n\n    \tsetPosition: function ( v ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 12 ] = v.x;\n    \t\tte[ 13 ] = v.y;\n    \t\tte[ 14 ] = v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetInverse: function ( m, throwOnDegenerate ) {\n\n    \t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    \t\tvar te = this.elements,\n    \t\t\tme = m.elements,\n\n    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n    \t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n    \t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n    \t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n    \t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n    \t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n    \t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n    \t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n    \t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n    \t\tif ( det === 0 ) {\n\n    \t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n    \t\t\tif ( throwOnDegenerate === true ) {\n\n    \t\t\t\tthrow new Error( msg );\n\n    \t\t\t} else {\n\n    \t\t\t\tconsole.warn( msg );\n\n    \t\t\t}\n\n    \t\t\treturn this.identity();\n\n    \t\t}\n\n    \t\tvar detInv = 1 / det;\n\n    \t\tte[ 0 ] = t11 * detInv;\n    \t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n    \t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n    \t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n    \t\tte[ 4 ] = t12 * detInv;\n    \t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n    \t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n    \t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n    \t\tte[ 8 ] = t13 * detInv;\n    \t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n    \t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n    \t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n    \t\tte[ 12 ] = t14 * detInv;\n    \t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n    \t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n    \t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n    \t\treturn this;\n\n    \t},\n\n    \tscale: function ( v ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar x = v.x, y = v.y, z = v.z;\n\n    \t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n    \t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n    \t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n    \t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetMaxScaleOnAxis: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n    \t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n    \t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n    \t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n    \t},\n\n    \tmakeTranslation: function ( x, y, z ) {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0, x,\n    \t\t\t0, 1, 0, y,\n    \t\t\t0, 0, 1, z,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationX: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\t1, 0,  0, 0,\n    \t\t\t0, c, - s, 0,\n    \t\t\t0, s,  c, 0,\n    \t\t\t0, 0,  0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationY: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\t c, 0, s, 0,\n    \t\t\t 0, 1, 0, 0,\n    \t\t\t- s, 0, c, 0,\n    \t\t\t 0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationZ: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\tc, - s, 0, 0,\n    \t\t\ts,  c, 0, 0,\n    \t\t\t0,  0, 1, 0,\n    \t\t\t0,  0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationAxis: function ( axis, angle ) {\n\n    \t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n    \t\tvar c = Math.cos( angle );\n    \t\tvar s = Math.sin( angle );\n    \t\tvar t = 1 - c;\n    \t\tvar x = axis.x, y = axis.y, z = axis.z;\n    \t\tvar tx = t * x, ty = t * y;\n\n    \t\tthis.set(\n\n    \t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n    \t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n    \t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\t return this;\n\n    \t},\n\n    \tmakeScale: function ( x, y, z ) {\n\n    \t\tthis.set(\n\n    \t\t\tx, 0, 0, 0,\n    \t\t\t0, y, 0, 0,\n    \t\t\t0, 0, z, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tcompose: function ( position, quaternion, scale ) {\n\n    \t\tthis.makeRotationFromQuaternion( quaternion );\n    \t\tthis.scale( scale );\n    \t\tthis.setPosition( position );\n\n    \t\treturn this;\n\n    \t},\n\n    \tdecompose: function () {\n\n    \t\tvar vector, matrix;\n\n    \t\treturn function decompose( position, quaternion, scale ) {\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tvector = new Vector3();\n    \t\t\t\tmatrix = new Matrix4();\n\n    \t\t\t}\n\n    \t\t\tvar te = this.elements;\n\n    \t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n    \t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n    \t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n    \t\t\t// if determine is negative, we need to invert one scale\n    \t\t\tvar det = this.determinant();\n    \t\t\tif ( det < 0 ) {\n\n    \t\t\t\tsx = - sx;\n\n    \t\t\t}\n\n    \t\t\tposition.x = te[ 12 ];\n    \t\t\tposition.y = te[ 13 ];\n    \t\t\tposition.z = te[ 14 ];\n\n    \t\t\t// scale the rotation part\n\n    \t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\n    \t\t\tvar invSX = 1 / sx;\n    \t\t\tvar invSY = 1 / sy;\n    \t\t\tvar invSZ = 1 / sz;\n\n    \t\t\tmatrix.elements[ 0 ] *= invSX;\n    \t\t\tmatrix.elements[ 1 ] *= invSX;\n    \t\t\tmatrix.elements[ 2 ] *= invSX;\n\n    \t\t\tmatrix.elements[ 4 ] *= invSY;\n    \t\t\tmatrix.elements[ 5 ] *= invSY;\n    \t\t\tmatrix.elements[ 6 ] *= invSY;\n\n    \t\t\tmatrix.elements[ 8 ] *= invSZ;\n    \t\t\tmatrix.elements[ 9 ] *= invSZ;\n    \t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n    \t\t\tquaternion.setFromRotationMatrix( matrix );\n\n    \t\t\tscale.x = sx;\n    \t\t\tscale.y = sy;\n    \t\t\tscale.z = sz;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar x = 2 * near / ( right - left );\n    \t\tvar y = 2 * near / ( top - bottom );\n\n    \t\tvar a = ( right + left ) / ( right - left );\n    \t\tvar b = ( top + bottom ) / ( top - bottom );\n    \t\tvar c = - ( far + near ) / ( far - near );\n    \t\tvar d = - 2 * far * near / ( far - near );\n\n    \t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n    \t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakePerspective: function ( fov, aspect, near, far ) {\n\n    \t\tvar ymax = near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 );\n    \t\tvar ymin = - ymax;\n    \t\tvar xmin = ymin * aspect;\n    \t\tvar xmax = ymax * aspect;\n\n    \t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\n    \t},\n\n    \tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar w = 1.0 / ( right - left );\n    \t\tvar h = 1.0 / ( top - bottom );\n    \t\tvar p = 1.0 / ( far - near );\n\n    \t\tvar x = ( right + left ) * w;\n    \t\tvar y = ( top + bottom ) * h;\n    \t\tvar z = ( far + near ) * p;\n\n    \t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n    \t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( matrix ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar me = matrix.elements;\n\n    \t\tfor ( var i = 0; i < 16; i ++ ) {\n\n    \t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tfor( var i = 0; i < 16; i ++ ) {\n\n    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar te = this.elements;\n\n    \t\tarray[ offset ] = te[ 0 ];\n    \t\tarray[ offset + 1 ] = te[ 1 ];\n    \t\tarray[ offset + 2 ] = te[ 2 ];\n    \t\tarray[ offset + 3 ] = te[ 3 ];\n\n    \t\tarray[ offset + 4 ] = te[ 4 ];\n    \t\tarray[ offset + 5 ] = te[ 5 ];\n    \t\tarray[ offset + 6 ] = te[ 6 ];\n    \t\tarray[ offset + 7 ] = te[ 7 ];\n\n    \t\tarray[ offset + 8 ]  = te[ 8 ];\n    \t\tarray[ offset + 9 ]  = te[ 9 ];\n    \t\tarray[ offset + 10 ] = te[ 10 ];\n    \t\tarray[ offset + 11 ] = te[ 11 ];\n\n    \t\tarray[ offset + 12 ] = te[ 12 ];\n    \t\tarray[ offset + 13 ] = te[ 13 ];\n    \t\tarray[ offset + 14 ] = te[ 14 ];\n    \t\tarray[ offset + 15 ] = te[ 15 ];\n\n    \t\treturn array;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n    \timages = images !== undefined ? images : [];\n    \tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n    \tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.flipY = false;\n\n    }\n\n    CubeTexture.prototype = Object.create( Texture.prototype );\n    CubeTexture.prototype.constructor = CubeTexture;\n\n    CubeTexture.prototype.isCubeTexture = true;\n\n    Object.defineProperty( CubeTexture.prototype, 'images', {\n\n    \tget: function () {\n\n    \t\treturn this.image;\n\n    \t},\n\n    \tset: function ( value ) {\n\n    \t\tthis.image = value;\n\n    \t}\n\n    } );\n\n    var emptyTexture = new Texture();\n    var emptyCubeTexture = new CubeTexture();\n\n    // --- Base for inner nodes (including the root) ---\n\n    function UniformContainer() {\n\n    \tthis.seq = [];\n    \tthis.map = {};\n\n    }\n\n    // --- Utilities ---\n\n    // Array Caches (provide typed arrays for temporary by size)\n\n    var arrayCacheF32 = [];\n    var arrayCacheI32 = [];\n\n    // Flattening for arrays of vectors and matrices\n\n    function flatten( array, nBlocks, blockSize ) {\n\n    \tvar firstElem = array[ 0 ];\n\n    \tif ( firstElem <= 0 || firstElem > 0 ) return array;\n    \t// unoptimized: ! isNaN( firstElem )\n    \t// see http://jacksondunstan.com/articles/983\n\n    \tvar n = nBlocks * blockSize,\n    \t\tr = arrayCacheF32[ n ];\n\n    \tif ( r === undefined ) {\n\n    \t\tr = new Float32Array( n );\n    \t\tarrayCacheF32[ n ] = r;\n\n    \t}\n\n    \tif ( nBlocks !== 0 ) {\n\n    \t\tfirstElem.toArray( r, 0 );\n\n    \t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n    \t\t\toffset += blockSize;\n    \t\t\tarray[ i ].toArray( r, offset );\n\n    \t\t}\n\n    \t}\n\n    \treturn r;\n\n    }\n\n    // Texture unit allocation\n\n    function allocTexUnits( renderer, n ) {\n\n    \tvar r = arrayCacheI32[ n ];\n\n    \tif ( r === undefined ) {\n\n    \t\tr = new Int32Array( n );\n    \t\tarrayCacheI32[ n ] = r;\n\n    \t}\n\n    \tfor ( var i = 0; i !== n; ++ i )\n    \t\tr[ i ] = renderer.allocTextureUnit();\n\n    \treturn r;\n\n    }\n\n    // --- Setters ---\n\n    // Note: Defining these methods externally, because they come in a bunch\n    // and this way their names minify.\n\n    // Single scalar\n\n    function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }\n    function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }\n\n    // Single float vector (from flat array or THREE.VectorN)\n\n    function setValue2fv( gl, v ) {\n\n    \tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n    \telse gl.uniform2f( this.addr, v.x, v.y );\n\n    }\n\n    function setValue3fv( gl, v ) {\n\n    \tif ( v.x !== undefined )\n    \t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n    \telse if ( v.r !== undefined )\n    \t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n    \telse\n    \t\tgl.uniform3fv( this.addr, v );\n\n    }\n\n    function setValue4fv( gl, v ) {\n\n    \tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n    \telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n    }\n\n    // Single matrix (from flat array or MatrixN)\n\n    function setValue2fm( gl, v ) {\n\n    \tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n    }\n\n    function setValue3fm( gl, v ) {\n\n    \tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\n    }\n\n    function setValue4fm( gl, v ) {\n\n    \tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\n    }\n\n    // Single texture (2D / Cube)\n\n    function setValueT1( gl, v, renderer ) {\n\n    \tvar unit = renderer.allocTextureUnit();\n    \tgl.uniform1i( this.addr, unit );\n    \trenderer.setTexture2D( v || emptyTexture, unit );\n\n    }\n\n    function setValueT6( gl, v, renderer ) {\n\n    \tvar unit = renderer.allocTextureUnit();\n    \tgl.uniform1i( this.addr, unit );\n    \trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n    }\n\n    // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n    function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }\n    function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }\n    function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }\n\n    // Helper to pick the right setter for the singular case\n\n    function getSingularSetter( type ) {\n\n    \tswitch ( type ) {\n\n    \t\tcase 0x1406: return setValue1f; // FLOAT\n    \t\tcase 0x8b50: return setValue2fv; // _VEC2\n    \t\tcase 0x8b51: return setValue3fv; // _VEC3\n    \t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n    \t\tcase 0x8b5a: return setValue2fm; // _MAT2\n    \t\tcase 0x8b5b: return setValue3fm; // _MAT3\n    \t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n    \t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n    \t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n    \t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n    \t}\n\n    }\n\n    // Array of scalars\n\n    function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }\n    function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }\n\n    // Array of vectors (flat or from THREE classes)\n\n    function setValueV2a( gl, v ) {\n\n    \tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n    }\n\n    function setValueV3a( gl, v ) {\n\n    \tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n    }\n\n    function setValueV4a( gl, v ) {\n\n    \tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n    }\n\n    // Array of matrices (flat or from THREE clases)\n\n    function setValueM2a( gl, v ) {\n\n    \tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n    }\n\n    function setValueM3a( gl, v ) {\n\n    \tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n    }\n\n    function setValueM4a( gl, v ) {\n\n    \tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n    }\n\n    // Array of textures (2D / Cube)\n\n    function setValueT1a( gl, v, renderer ) {\n\n    \tvar n = v.length,\n    \t\tunits = allocTexUnits( renderer, n );\n\n    \tgl.uniform1iv( this.addr, units );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n    \t}\n\n    }\n\n    function setValueT6a( gl, v, renderer ) {\n\n    \tvar n = v.length,\n    \t\tunits = allocTexUnits( renderer, n );\n\n    \tgl.uniform1iv( this.addr, units );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n    \t}\n\n    }\n\n    // Helper to pick the right setter for a pure (bottom-level) array\n\n    function getPureArraySetter( type ) {\n\n    \tswitch ( type ) {\n\n    \t\tcase 0x1406: return setValue1fv; // FLOAT\n    \t\tcase 0x8b50: return setValueV2a; // _VEC2\n    \t\tcase 0x8b51: return setValueV3a; // _VEC3\n    \t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n    \t\tcase 0x8b5a: return setValueM2a; // _MAT2\n    \t\tcase 0x8b5b: return setValueM3a; // _MAT3\n    \t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n    \t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n    \t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n    \t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n    \t}\n\n    }\n\n    // --- Uniform Classes ---\n\n    function SingleUniform( id, activeInfo, addr ) {\n\n    \tthis.id = id;\n    \tthis.addr = addr;\n    \tthis.setValue = getSingularSetter( activeInfo.type );\n\n    \t// this.path = activeInfo.name; // DEBUG\n\n    }\n\n    function PureArrayUniform( id, activeInfo, addr ) {\n\n    \tthis.id = id;\n    \tthis.addr = addr;\n    \tthis.size = activeInfo.size;\n    \tthis.setValue = getPureArraySetter( activeInfo.type );\n\n    \t// this.path = activeInfo.name; // DEBUG\n\n    }\n\n    function StructuredUniform( id ) {\n\n    \tthis.id = id;\n\n    \tUniformContainer.call( this ); // mix-in\n\n    }\n\n    StructuredUniform.prototype.setValue = function( gl, value ) {\n\n    \t// Note: Don't need an extra 'renderer' parameter, since samplers\n    \t// are not allowed in structured uniforms.\n\n    \tvar seq = this.seq;\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ];\n    \t\tu.setValue( gl, value[ u.id ] );\n\n    \t}\n\n    };\n\n    // --- Top-level ---\n\n    // Parser - builds up the property tree from the path strings\n\n    var RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n    // extracts\n    // \t- the identifier (member name or array index)\n    //  - followed by an optional right bracket (found when array index)\n    //  - followed by an optional left bracket or dot (type of subscript)\n    //\n    // Note: These portions can be read in a non-overlapping fashion and\n    // allow straightforward parsing of the hierarchy that WebGL encodes\n    // in the uniform names.\n\n    function addUniform( container, uniformObject ) {\n\n    \tcontainer.seq.push( uniformObject );\n    \tcontainer.map[ uniformObject.id ] = uniformObject;\n\n    }\n\n    function parseUniform( activeInfo, addr, container ) {\n\n    \tvar path = activeInfo.name,\n    \t\tpathLength = path.length;\n\n    \t// reset RegExp object, because of the early exit of a previous run\n    \tRePathPart.lastIndex = 0;\n\n    \tfor (; ;) {\n\n    \t\tvar match = RePathPart.exec( path ),\n    \t\t\tmatchEnd = RePathPart.lastIndex,\n\n    \t\t\tid = match[ 1 ],\n    \t\t\tidIsIndex = match[ 2 ] === ']',\n    \t\t\tsubscript = match[ 3 ];\n\n    \t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n    \t\tif ( subscript === undefined ||\n    \t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n    \t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n    \t\t\taddUniform( container, subscript === undefined ?\n    \t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n    \t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n    \t\t\tbreak;\n\n    \t\t} else {\n    \t\t\t// step into inner node / create it in case it doesn't exist\n\n    \t\t\tvar map = container.map,\n    \t\t\t\tnext = map[ id ];\n\n    \t\t\tif ( next === undefined ) {\n\n    \t\t\t\tnext = new StructuredUniform( id );\n    \t\t\t\taddUniform( container, next );\n\n    \t\t\t}\n\n    \t\t\tcontainer = next;\n\n    \t\t}\n\n    \t}\n\n    }\n\n    // Root Container\n\n    function WebGLUniforms( gl, program, renderer ) {\n\n    \tUniformContainer.call( this );\n\n    \tthis.renderer = renderer;\n\n    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\tvar info = gl.getActiveUniform( program, i ),\n    \t\t\tpath = info.name,\n    \t\t\taddr = gl.getUniformLocation( program, path );\n\n    \t\tparseUniform( info, addr, this );\n\n    \t}\n\n    }\n\n    WebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\n    \tvar u = this.map[ name ];\n\n    \tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n    };\n\n    WebGLUniforms.prototype.set = function( gl, object, name ) {\n\n    \tvar u = this.map[ name ];\n\n    \tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\n    };\n\n    WebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\n    \tvar v = object[ name ];\n\n    \tif ( v !== undefined ) this.setValue( gl, name, v );\n\n    };\n\n\n    // Static interface\n\n    WebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ],\n    \t\t\tv = values[ u.id ];\n\n    \t\tif ( v.needsUpdate !== false ) {\n    \t\t\t// note: always updating when .needsUpdate is undefined\n\n    \t\t\tu.setValue( gl, v.value, renderer );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    WebGLUniforms.seqWithValue = function( seq, values ) {\n\n    \tvar r = [];\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ];\n    \t\tif ( u.id in values ) r.push( u );\n\n    \t}\n\n    \treturn r;\n\n    };\n\n    WebGLUniforms.splitDynamic = function( seq, values ) {\n\n    \tvar r = null,\n    \t\tn = seq.length,\n    \t\tw = 0;\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ],\n    \t\t\tv = values[ u.id ];\n\n    \t\tif ( v && v.dynamic === true ) {\n\n    \t\t\tif ( r === null ) r = [];\n    \t\t\tr.push( u );\n\n    \t\t} else {\n\n    \t\t\t// in-place compact 'seq', removing the matches\n    \t\t\tif ( w < i ) seq[ w ] = u;\n    \t\t\t++ w;\n\n    \t\t}\n\n    \t}\n\n    \tif ( w < n ) seq.length = w;\n\n    \treturn r;\n\n    };\n\n    WebGLUniforms.evalDynamic = function( seq, values, object, material, camera ) {\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar v = values[ seq[ i ].id ],\n    \t\t\tf = v.onUpdateCallback;\n\n    \t\tif ( f !== undefined ) f.call( v, object, material, camera );\n\n    \t}\n\n    };\n\n    /**\n     * Uniform Utilities\n     */\n\n    exports.UniformsUtils = {\n\n    \tmerge: function ( uniforms ) {\n\n    \t\tvar merged = {};\n\n    \t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n    \t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n    \t\t\tfor ( var p in tmp ) {\n\n    \t\t\t\tmerged[ p ] = tmp[ p ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn merged;\n\n    \t},\n\n    \tclone: function ( uniforms_src ) {\n\n    \t\tvar uniforms_dst = {};\n\n    \t\tfor ( var u in uniforms_src ) {\n\n    \t\t\tuniforms_dst[ u ] = {};\n\n    \t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n    \t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n    \t\t\t\tif ( (parameter_src && parameter_src.isColor) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector2) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector3) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector4) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isMatrix3) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isMatrix4) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isTexture) ) {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n    \t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn uniforms_dst;\n\n    \t}\n\n    };\n\n    var alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n    var alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n    var alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n    var aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\n    var aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n    var begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\n    var beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n    var bsdfs = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n    var bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\n    var clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n#endif\\n\";\n\n    var clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n    var clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n    var clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n    var color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n    var color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\n    var color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n    var color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n    var common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\n    var cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n    var defaultnormal_vertex = \"#ifdef FLIP_SIDED\\n\\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\n    var displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\n    var displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n    var emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n    var emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n    var encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n    var encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n    var envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\n    var fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\t#else\\n\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\t#endif\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n    var fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n    var lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n    var lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n    var lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n    var lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\\t\\t\\tdirectLight.color = pointLight.color;\\n\\t\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\t#include <normal_flip>\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\t#include <normal_flip>\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\n    var lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n    var lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\n    var lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n    var lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n    var lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t \\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\t\\t\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n    var logdepthbuf_fragment = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\n    var logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\n    var logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\n    var logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\n    var map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n    var map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n    var map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n    var map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n    var metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\n    var metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n    var morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n    var morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n    var morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\n    var normal_flip = \"#ifdef DOUBLE_SIDED\\n\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\n    var normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n    var normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\n    var packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n    var premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n    var project_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n    var roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\n    var roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n    var shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n    var shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\n    var shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\n    var shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\n    var skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n    var skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureWidth;\\n\\t\\tuniform int boneTextureHeight;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureWidth ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureWidth );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\n    var skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\n    var skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n    var specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n    var specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n    var tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n    var tonemapping_pars_fragment = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n    var uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n    var uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\n    var uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\n    var uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n    var uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n    var uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\n    var worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\t#ifdef USE_SKINNING\\n\\t\\tvec4 worldPosition = modelMatrix * skinned;\\n\\t#else\\n\\t\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\t#endif\\n#endif\\n\";\n\n    var cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\n    var cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n    var depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\n    var depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var distanceRGBA_frag = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\n    var distanceRGBA_vert = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\n\n    var equirect_frag = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\n    var equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n    var linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight;\\n\\treflectedLight.directDiffuse = vec3( 0.0 );\\n\\treflectedLight.directSpecular = vec3( 0.0 );\\n\\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n}\\n\";\n\n    var meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var normal_frag = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n    var normal_vert = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvNormal = normalize( normalMatrix * normal );\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var shadow_frag = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\n    var shadow_vert = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var ShaderChunk = {\n    \talphamap_fragment: alphamap_fragment,\n    \talphamap_pars_fragment: alphamap_pars_fragment,\n    \talphatest_fragment: alphatest_fragment,\n    \taomap_fragment: aomap_fragment,\n    \taomap_pars_fragment: aomap_pars_fragment,\n    \tbegin_vertex: begin_vertex,\n    \tbeginnormal_vertex: beginnormal_vertex,\n    \tbsdfs: bsdfs,\n    \tbumpmap_pars_fragment: bumpmap_pars_fragment,\n    \tclipping_planes_fragment: clipping_planes_fragment,\n    \tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n    \tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n    \tclipping_planes_vertex: clipping_planes_vertex,\n    \tcolor_fragment: color_fragment,\n    \tcolor_pars_fragment: color_pars_fragment,\n    \tcolor_pars_vertex: color_pars_vertex,\n    \tcolor_vertex: color_vertex,\n    \tcommon: common,\n    \tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n    \tdefaultnormal_vertex: defaultnormal_vertex,\n    \tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n    \tdisplacementmap_vertex: displacementmap_vertex,\n    \temissivemap_fragment: emissivemap_fragment,\n    \temissivemap_pars_fragment: emissivemap_pars_fragment,\n    \tencodings_fragment: encodings_fragment,\n    \tencodings_pars_fragment: encodings_pars_fragment,\n    \tenvmap_fragment: envmap_fragment,\n    \tenvmap_pars_fragment: envmap_pars_fragment,\n    \tenvmap_pars_vertex: envmap_pars_vertex,\n    \tenvmap_vertex: envmap_vertex,\n    \tfog_fragment: fog_fragment,\n    \tfog_pars_fragment: fog_pars_fragment,\n    \tlightmap_fragment: lightmap_fragment,\n    \tlightmap_pars_fragment: lightmap_pars_fragment,\n    \tlights_lambert_vertex: lights_lambert_vertex,\n    \tlights_pars: lights_pars,\n    \tlights_phong_fragment: lights_phong_fragment,\n    \tlights_phong_pars_fragment: lights_phong_pars_fragment,\n    \tlights_physical_fragment: lights_physical_fragment,\n    \tlights_physical_pars_fragment: lights_physical_pars_fragment,\n    \tlights_template: lights_template,\n    \tlogdepthbuf_fragment: logdepthbuf_fragment,\n    \tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n    \tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n    \tlogdepthbuf_vertex: logdepthbuf_vertex,\n    \tmap_fragment: map_fragment,\n    \tmap_pars_fragment: map_pars_fragment,\n    \tmap_particle_fragment: map_particle_fragment,\n    \tmap_particle_pars_fragment: map_particle_pars_fragment,\n    \tmetalnessmap_fragment: metalnessmap_fragment,\n    \tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n    \tmorphnormal_vertex: morphnormal_vertex,\n    \tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n    \tmorphtarget_vertex: morphtarget_vertex,\n    \tnormal_flip: normal_flip,\n    \tnormal_fragment: normal_fragment,\n    \tnormalmap_pars_fragment: normalmap_pars_fragment,\n    \tpacking: packing,\n    \tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n    \tproject_vertex: project_vertex,\n    \troughnessmap_fragment: roughnessmap_fragment,\n    \troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n    \tshadowmap_pars_fragment: shadowmap_pars_fragment,\n    \tshadowmap_pars_vertex: shadowmap_pars_vertex,\n    \tshadowmap_vertex: shadowmap_vertex,\n    \tshadowmask_pars_fragment: shadowmask_pars_fragment,\n    \tskinbase_vertex: skinbase_vertex,\n    \tskinning_pars_vertex: skinning_pars_vertex,\n    \tskinning_vertex: skinning_vertex,\n    \tskinnormal_vertex: skinnormal_vertex,\n    \tspecularmap_fragment: specularmap_fragment,\n    \tspecularmap_pars_fragment: specularmap_pars_fragment,\n    \ttonemapping_fragment: tonemapping_fragment,\n    \ttonemapping_pars_fragment: tonemapping_pars_fragment,\n    \tuv_pars_fragment: uv_pars_fragment,\n    \tuv_pars_vertex: uv_pars_vertex,\n    \tuv_vertex: uv_vertex,\n    \tuv2_pars_fragment: uv2_pars_fragment,\n    \tuv2_pars_vertex: uv2_pars_vertex,\n    \tuv2_vertex: uv2_vertex,\n    \tworldpos_vertex: worldpos_vertex,\n\n    \tcube_frag: cube_frag,\n    \tcube_vert: cube_vert,\n    \tdepth_frag: depth_frag,\n    \tdepth_vert: depth_vert,\n    \tdistanceRGBA_frag: distanceRGBA_frag,\n    \tdistanceRGBA_vert: distanceRGBA_vert,\n    \tequirect_frag: equirect_frag,\n    \tequirect_vert: equirect_vert,\n    \tlinedashed_frag: linedashed_frag,\n    \tlinedashed_vert: linedashed_vert,\n    \tmeshbasic_frag: meshbasic_frag,\n    \tmeshbasic_vert: meshbasic_vert,\n    \tmeshlambert_frag: meshlambert_frag,\n    \tmeshlambert_vert: meshlambert_vert,\n    \tmeshphong_frag: meshphong_frag,\n    \tmeshphong_vert: meshphong_vert,\n    \tmeshphysical_frag: meshphysical_frag,\n    \tmeshphysical_vert: meshphysical_vert,\n    \tnormal_frag: normal_frag,\n    \tnormal_vert: normal_vert,\n    \tpoints_frag: points_frag,\n    \tpoints_vert: points_vert,\n    \tshadow_frag: shadow_frag,\n    \tshadow_vert: shadow_vert\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Color( r, g, b ) {\n\n    \tif ( g === undefined && b === undefined ) {\n\n    \t\t// r is THREE.Color, hex or string\n    \t\treturn this.set( r );\n\n    \t}\n\n    \treturn this.setRGB( r, g, b );\n\n    }\n\n    Color.prototype = {\n\n    \tconstructor: Color,\n\n    \tisColor: true,\n\n    \tr: 1, g: 1, b: 1,\n\n    \tset: function ( value ) {\n\n    \t\tif ( (value && value.isColor) ) {\n\n    \t\t\tthis.copy( value );\n\n    \t\t} else if ( typeof value === 'number' ) {\n\n    \t\t\tthis.setHex( value );\n\n    \t\t} else if ( typeof value === 'string' ) {\n\n    \t\t\tthis.setStyle( value );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.r = scalar;\n    \t\tthis.g = scalar;\n    \t\tthis.b = scalar;\n\n    \t},\n\n    \tsetHex: function ( hex ) {\n\n    \t\thex = Math.floor( hex );\n\n    \t\tthis.r = ( hex >> 16 & 255 ) / 255;\n    \t\tthis.g = ( hex >> 8 & 255 ) / 255;\n    \t\tthis.b = ( hex & 255 ) / 255;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetRGB: function ( r, g, b ) {\n\n    \t\tthis.r = r;\n    \t\tthis.g = g;\n    \t\tthis.b = b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetHSL: function () {\n\n    \t\tfunction hue2rgb( p, q, t ) {\n\n    \t\t\tif ( t < 0 ) t += 1;\n    \t\t\tif ( t > 1 ) t -= 1;\n    \t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n    \t\t\tif ( t < 1 / 2 ) return q;\n    \t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n    \t\t\treturn p;\n\n    \t\t}\n\n    \t\treturn function setHSL( h, s, l ) {\n\n    \t\t\t// h,s,l ranges are in 0.0 - 1.0\n    \t\t\th = exports.Math.euclideanModulo( h, 1 );\n    \t\t\ts = exports.Math.clamp( s, 0, 1 );\n    \t\t\tl = exports.Math.clamp( l, 0, 1 );\n\n    \t\t\tif ( s === 0 ) {\n\n    \t\t\t\tthis.r = this.g = this.b = l;\n\n    \t\t\t} else {\n\n    \t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n    \t\t\t\tvar q = ( 2 * l ) - p;\n\n    \t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n    \t\t\t\tthis.g = hue2rgb( q, p, h );\n    \t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n    \t\t\t}\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tsetStyle: function ( style ) {\n\n    \t\tfunction handleAlpha( string ) {\n\n    \t\t\tif ( string === undefined ) return;\n\n    \t\t\tif ( parseFloat( string ) < 1 ) {\n\n    \t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\tvar m;\n\n    \t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n    \t\t\t// rgb / hsl\n\n    \t\t\tvar color;\n    \t\t\tvar name = m[ 1 ];\n    \t\t\tvar components = m[ 2 ];\n\n    \t\t\tswitch ( name ) {\n\n    \t\t\t\tcase 'rgb':\n    \t\t\t\tcase 'rgba':\n\n    \t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n    \t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n    \t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n    \t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n    \t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n    \t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n    \t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'hsl':\n    \t\t\t\tcase 'hsla':\n\n    \t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n    \t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n    \t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n    \t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n    \t\t\t// hex color\n\n    \t\t\tvar hex = m[ 1 ];\n    \t\t\tvar size = hex.length;\n\n    \t\t\tif ( size === 3 ) {\n\n    \t\t\t\t// #ff0\n    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n    \t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n    \t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n    \t\t\t\treturn this;\n\n    \t\t\t} else if ( size === 6 ) {\n\n    \t\t\t\t// #ff0000\n    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n    \t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n    \t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n    \t\t\t\treturn this;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( style && style.length > 0 ) {\n\n    \t\t\t// color keywords\n    \t\t\tvar hex = exports.ColorKeywords[ style ];\n\n    \t\t\tif ( hex !== undefined ) {\n\n    \t\t\t\t// red\n    \t\t\t\tthis.setHex( hex );\n\n    \t\t\t} else {\n\n    \t\t\t\t// unknown color\n    \t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.r, this.g, this.b );\n\n    \t},\n\n    \tcopy: function ( color ) {\n\n    \t\tthis.r = color.r;\n    \t\tthis.g = color.g;\n    \t\tthis.b = color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n    \t\tthis.r = Math.pow( color.r, gammaFactor );\n    \t\tthis.g = Math.pow( color.g, gammaFactor );\n    \t\tthis.b = Math.pow( color.b, gammaFactor );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n    \t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n    \t\tthis.r = Math.pow( color.r, safeInverse );\n    \t\tthis.g = Math.pow( color.g, safeInverse );\n    \t\tthis.b = Math.pow( color.b, safeInverse );\n\n    \t\treturn this;\n\n    \t},\n\n    \tconvertGammaToLinear: function () {\n\n    \t\tvar r = this.r, g = this.g, b = this.b;\n\n    \t\tthis.r = r * r;\n    \t\tthis.g = g * g;\n    \t\tthis.b = b * b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tconvertLinearToGamma: function () {\n\n    \t\tthis.r = Math.sqrt( this.r );\n    \t\tthis.g = Math.sqrt( this.g );\n    \t\tthis.b = Math.sqrt( this.b );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetHex: function () {\n\n    \t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n    \t},\n\n    \tgetHexString: function () {\n\n    \t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n    \t},\n\n    \tgetHSL: function ( optionalTarget ) {\n\n    \t\t// h,s,l ranges are in 0.0 - 1.0\n\n    \t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n    \t\tvar r = this.r, g = this.g, b = this.b;\n\n    \t\tvar max = Math.max( r, g, b );\n    \t\tvar min = Math.min( r, g, b );\n\n    \t\tvar hue, saturation;\n    \t\tvar lightness = ( min + max ) / 2.0;\n\n    \t\tif ( min === max ) {\n\n    \t\t\thue = 0;\n    \t\t\tsaturation = 0;\n\n    \t\t} else {\n\n    \t\t\tvar delta = max - min;\n\n    \t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n    \t\t\tswitch ( max ) {\n\n    \t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n    \t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n    \t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n    \t\t\t}\n\n    \t\t\thue /= 6;\n\n    \t\t}\n\n    \t\thsl.h = hue;\n    \t\thsl.s = saturation;\n    \t\thsl.l = lightness;\n\n    \t\treturn hsl;\n\n    \t},\n\n    \tgetStyle: function () {\n\n    \t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n    \t},\n\n    \toffsetHSL: function ( h, s, l ) {\n\n    \t\tvar hsl = this.getHSL();\n\n    \t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n    \t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( color ) {\n\n    \t\tthis.r += color.r;\n    \t\tthis.g += color.g;\n    \t\tthis.b += color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddColors: function ( color1, color2 ) {\n\n    \t\tthis.r = color1.r + color2.r;\n    \t\tthis.g = color1.g + color2.g;\n    \t\tthis.b = color1.b + color2.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.r += s;\n    \t\tthis.g += s;\n    \t\tthis.b += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function( color ) {\n\n    \t\tthis.r = Math.max( 0, this.r - color.r );\n    \t\tthis.g = Math.max( 0, this.g - color.g );\n    \t\tthis.b = Math.max( 0, this.b - color.b );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( color ) {\n\n    \t\tthis.r *= color.r;\n    \t\tthis.g *= color.g;\n    \t\tthis.b *= color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tthis.r *= s;\n    \t\tthis.g *= s;\n    \t\tthis.b *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerp: function ( color, alpha ) {\n\n    \t\tthis.r += ( color.r - this.r ) * alpha;\n    \t\tthis.g += ( color.g - this.g ) * alpha;\n    \t\tthis.b += ( color.b - this.b ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( c ) {\n\n    \t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.r = array[ offset ];\n    \t\tthis.g = array[ offset + 1 ];\n    \t\tthis.b = array[ offset + 2 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.r;\n    \t\tarray[ offset + 1 ] = this.g;\n    \t\tarray[ offset + 2 ] = this.b;\n\n    \t\treturn array;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\treturn this.getHex();\n\n    \t}\n\n    };\n\n    exports.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n    'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n    'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n    'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n    'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n    'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n    'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n    'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n    'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n    'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n    'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n    'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n    'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n    'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n    'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n    'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n    'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n    'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n    'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n    'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n    'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n    'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n    'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n    'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n    /**\n     * Uniforms library for shared webgl shaders\n     */\n\n    var UniformsLib = {\n\n    \tcommon: {\n\n    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n    \t\topacity: { value: 1.0 },\n\n    \t\tmap: { value: null },\n    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },\n\n    \t\tspecularMap: { value: null },\n    \t\talphaMap: { value: null },\n\n    \t\tenvMap: { value: null },\n    \t\tflipEnvMap: { value: - 1 },\n    \t\treflectivity: { value: 1.0 },\n    \t\trefractionRatio: { value: 0.98 }\n\n    \t},\n\n    \taomap: {\n\n    \t\taoMap: { value: null },\n    \t\taoMapIntensity: { value: 1 }\n\n    \t},\n\n    \tlightmap: {\n\n    \t\tlightMap: { value: null },\n    \t\tlightMapIntensity: { value: 1 }\n\n    \t},\n\n    \temissivemap: {\n\n    \t\temissiveMap: { value: null }\n\n    \t},\n\n    \tbumpmap: {\n\n    \t\tbumpMap: { value: null },\n    \t\tbumpScale: { value: 1 }\n\n    \t},\n\n    \tnormalmap: {\n\n    \t\tnormalMap: { value: null },\n    \t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n    \t},\n\n    \tdisplacementmap: {\n\n    \t\tdisplacementMap: { value: null },\n    \t\tdisplacementScale: { value: 1 },\n    \t\tdisplacementBias: { value: 0 }\n\n    \t},\n\n    \troughnessmap: {\n\n    \t\troughnessMap: { value: null }\n\n    \t},\n\n    \tmetalnessmap: {\n\n    \t\tmetalnessMap: { value: null }\n\n    \t},\n\n    \tfog: {\n\n    \t\tfogDensity: { value: 0.00025 },\n    \t\tfogNear: { value: 1 },\n    \t\tfogFar: { value: 2000 },\n    \t\tfogColor: { value: new Color( 0xffffff ) }\n\n    \t},\n\n    \tlights: {\n\n    \t\tambientLightColor: { value: [] },\n\n    \t\tdirectionalLights: { value: [], properties: {\n    \t\t\tdirection: {},\n    \t\t\tcolor: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tdirectionalShadowMap: { value: [] },\n    \t\tdirectionalShadowMatrix: { value: [] },\n\n    \t\tspotLights: { value: [], properties: {\n    \t\t\tcolor: {},\n    \t\t\tposition: {},\n    \t\t\tdirection: {},\n    \t\t\tdistance: {},\n    \t\t\tconeCos: {},\n    \t\t\tpenumbraCos: {},\n    \t\t\tdecay: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tspotShadowMap: { value: [] },\n    \t\tspotShadowMatrix: { value: [] },\n\n    \t\tpointLights: { value: [], properties: {\n    \t\t\tcolor: {},\n    \t\t\tposition: {},\n    \t\t\tdecay: {},\n    \t\t\tdistance: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tpointShadowMap: { value: [] },\n    \t\tpointShadowMatrix: { value: [] },\n\n    \t\themisphereLights: { value: [], properties: {\n    \t\t\tdirection: {},\n    \t\t\tskyColor: {},\n    \t\t\tgroundColor: {}\n    \t\t} }\n\n    \t},\n\n    \tpoints: {\n\n    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n    \t\topacity: { value: 1.0 },\n    \t\tsize: { value: 1.0 },\n    \t\tscale: { value: 1.0 },\n    \t\tmap: { value: null },\n    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     */\n\n    var ShaderLib = {\n\n    \tbasic: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.fog\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshbasic_vert,\n    \t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n    \t},\n\n    \tlambert: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshlambert_vert,\n    \t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n    \t},\n\n    \tphong: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.bumpmap,\n    \t\t\tUniformsLib.normalmap,\n    \t\t\tUniformsLib.displacementmap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n    \t\t\t\tspecular : { value: new Color( 0x111111 ) },\n    \t\t\t\tshininess: { value: 30 }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshphong_vert,\n    \t\tfragmentShader: ShaderChunk.meshphong_frag\n\n    \t},\n\n    \tstandard: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.bumpmap,\n    \t\t\tUniformsLib.normalmap,\n    \t\t\tUniformsLib.displacementmap,\n    \t\t\tUniformsLib.roughnessmap,\n    \t\t\tUniformsLib.metalnessmap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n    \t\t\t\troughness: { value: 0.5 },\n    \t\t\t\tmetalness: { value: 0 },\n    \t\t\t\tenvMapIntensity : { value: 1 }, // temporary\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshphysical_vert,\n    \t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n    \t},\n\n    \tpoints: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.points,\n    \t\t\tUniformsLib.fog\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.points_vert,\n    \t\tfragmentShader: ShaderChunk.points_frag\n\n    \t},\n\n    \tdashed: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.fog,\n\n    \t\t\t{\n    \t\t\t\tscale    : { value: 1 },\n    \t\t\t\tdashSize : { value: 1 },\n    \t\t\t\ttotalSize: { value: 2 }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.linedashed_vert,\n    \t\tfragmentShader: ShaderChunk.linedashed_frag\n\n    \t},\n\n    \tdepth: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.displacementmap\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.depth_vert,\n    \t\tfragmentShader: ShaderChunk.depth_frag\n\n    \t},\n\n    \tnormal: {\n\n    \t\tuniforms: {\n\n    \t\t\topacity : { value: 1.0 }\n\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.normal_vert,\n    \t\tfragmentShader: ShaderChunk.normal_frag\n\n    \t},\n\n    \t/* -------------------------------------------------------------------------\n    \t//\tCube map shader\n    \t ------------------------------------------------------------------------- */\n\n    \tcube: {\n\n    \t\tuniforms: {\n    \t\t\ttCube: { value: null },\n    \t\t\ttFlip: { value: - 1 },\n    \t\t\topacity: { value: 1.0 }\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.cube_vert,\n    \t\tfragmentShader: ShaderChunk.cube_frag\n\n    \t},\n\n    \t/* -------------------------------------------------------------------------\n    \t//\tCube map shader\n    \t ------------------------------------------------------------------------- */\n\n    \tequirect: {\n\n    \t\tuniforms: {\n    \t\t\ttEquirect: { value: null },\n    \t\t\ttFlip: { value: - 1 }\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.equirect_vert,\n    \t\tfragmentShader: ShaderChunk.equirect_frag\n\n    \t},\n\n    \tdistanceRGBA: {\n\n    \t\tuniforms: {\n\n    \t\t\tlightPos: { value: new Vector3() }\n\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n    \t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n    \t}\n\n    };\n\n    ShaderLib.physical = {\n\n    \tuniforms: exports.UniformsUtils.merge( [\n\n    \t\tShaderLib.standard.uniforms,\n\n    \t\t{\n    \t\t\tclearCoat: { value: 0 },\n    \t\t\tclearCoatRoughness: { value: 0 }\n    \t\t}\n\n    \t] ),\n\n    \tvertexShader: ShaderChunk.meshphysical_vert,\n    \tfragmentShader: ShaderChunk.meshphysical_frag\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Box2( min, max ) {\n\n    \tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n    \tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n    }\n\n    Box2.prototype = {\n\n    \tconstructor: Box2,\n\n    \tset: function ( min, max ) {\n\n    \t\tthis.min.copy( min );\n    \t\tthis.max.copy( max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPoints: function ( points ) {\n\n    \t\tthis.makeEmpty();\n\n    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\tthis.expandByPoint( points[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCenterAndSize: function () {\n\n    \t\tvar v1 = new Vector2();\n\n    \t\treturn function setFromCenterAndSize( center, size ) {\n\n    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n    \t\t\tthis.min.copy( center ).sub( halfSize );\n    \t\t\tthis.max.copy( center ).add( halfSize );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( box ) {\n\n    \t\tthis.min.copy( box.min );\n    \t\tthis.max.copy( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeEmpty: function () {\n\n    \t\tthis.min.x = this.min.y = + Infinity;\n    \t\tthis.max.x = this.max.y = - Infinity;\n\n    \t\treturn this;\n\n    \t},\n\n    \tisEmpty: function () {\n\n    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tgetSize: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\n    \t},\n\n    \texpandByPoint: function ( point ) {\n\n    \t\tthis.min.min( point );\n    \t\tthis.max.max( point );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByVector: function ( vector ) {\n\n    \t\tthis.min.sub( vector );\n    \t\tthis.max.add( vector );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByScalar: function ( scalar ) {\n\n    \t\tthis.min.addScalar( - scalar );\n    \t\tthis.max.addScalar( scalar );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n    \t\t     point.y < this.min.y || point.y > this.max.y ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tcontainsBox: function ( box ) {\n\n    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n    \t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tgetParameter: function ( point, optionalTarget ) {\n\n    \t\t// This can potentially have a divide by zero if the box\n    \t\t// has a size dimension of 0.\n\n    \t\tvar result = optionalTarget || new Vector2();\n\n    \t\treturn result.set(\n    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n    \t\t);\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\t// using 6 splitting planes to rule out intersections.\n\n    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n    \t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\n    \t},\n\n    \tdistanceToPoint: function () {\n\n    \t\tvar v1 = new Vector2();\n\n    \t\treturn function distanceToPoint( point ) {\n\n    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n    \t\t\treturn clampedPoint.sub( point ).length();\n\n    \t\t};\n\n    \t}(),\n\n    \tintersect: function ( box ) {\n\n    \t\tthis.min.max( box.min );\n    \t\tthis.max.min( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tunion: function ( box ) {\n\n    \t\tthis.min.min( box.min );\n    \t\tthis.max.max( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.min.add( offset );\n    \t\tthis.max.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( box ) {\n\n    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n    \t}\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function LensFlarePlugin( renderer, flares ) {\n\n    \tvar gl = renderer.context;\n    \tvar state = renderer.state;\n\n    \tvar vertexBuffer, elementBuffer;\n    \tvar shader, program, attributes, uniforms;\n\n    \tvar tempTexture, occlusionTexture;\n\n    \tfunction init() {\n\n    \t\tvar vertices = new Float32Array( [\n    \t\t\t- 1, - 1,  0, 0,\n    \t\t\t 1, - 1,  1, 0,\n    \t\t\t 1,  1,  1, 1,\n    \t\t\t- 1,  1,  0, 1\n    \t\t] );\n\n    \t\tvar faces = new Uint16Array( [\n    \t\t\t0, 1, 2,\n    \t\t\t0, 2, 3\n    \t\t] );\n\n    \t\t// buffers\n\n    \t\tvertexBuffer     = gl.createBuffer();\n    \t\telementBuffer    = gl.createBuffer();\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n    \t\t// textures\n\n    \t\ttempTexture      = gl.createTexture();\n    \t\tocclusionTexture = gl.createTexture();\n\n    \t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n    \t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n    \t\tshader = {\n\n    \t\t\tvertexShader: [\n\n    \t\t\t\t\"uniform lowp int renderType;\",\n\n    \t\t\t\t\"uniform vec3 screenPosition;\",\n    \t\t\t\t\"uniform vec2 scale;\",\n    \t\t\t\t\"uniform float rotation;\",\n\n    \t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n    \t\t\t\t\"attribute vec2 position;\",\n    \t\t\t\t\"attribute vec2 uv;\",\n\n    \t\t\t\t\"varying vec2 vUV;\",\n    \t\t\t\t\"varying float vVisibility;\",\n\n    \t\t\t\t\"void main() {\",\n\n    \t\t\t\t\t\"vUV = uv;\",\n\n    \t\t\t\t\t\"vec2 pos = position;\",\n\n    \t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n    \t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n    \t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n    \t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n    \t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n    \t\t\t\t\t\"}\",\n\n    \t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n    \t\t\t\t\"}\"\n\n    \t\t\t].join( \"\\n\" ),\n\n    \t\t\tfragmentShader: [\n\n    \t\t\t\t\"uniform lowp int renderType;\",\n\n    \t\t\t\t\"uniform sampler2D map;\",\n    \t\t\t\t\"uniform float opacity;\",\n    \t\t\t\t\"uniform vec3 color;\",\n\n    \t\t\t\t\"varying vec2 vUV;\",\n    \t\t\t\t\"varying float vVisibility;\",\n\n    \t\t\t\t\"void main() {\",\n\n    \t\t\t\t\t// pink square\n\n    \t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n    \t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n    \t\t\t\t\t// restore\n\n    \t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n    \t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n    \t\t\t\t\t// flare\n\n    \t\t\t\t\t\"} else {\",\n\n    \t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n    \t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n    \t\t\t\t\t\t\"gl_FragColor = texture;\",\n    \t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n    \t\t\t\t\t\"}\",\n\n    \t\t\t\t\"}\"\n\n    \t\t\t].join( \"\\n\" )\n\n    \t\t};\n\n    \t\tprogram = createProgram( shader );\n\n    \t\tattributes = {\n    \t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n    \t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n    \t\t};\n\n    \t\tuniforms = {\n    \t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n    \t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n    \t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n    \t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n    \t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n    \t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n    \t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n    \t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n    \t\t};\n\n    \t}\n\n    \t/*\n    \t * Render lens flares\n    \t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n    \t *         reads these back and calculates occlusion.\n    \t */\n\n    \tthis.render = function ( scene, camera, viewport ) {\n\n    \t\tif ( flares.length === 0 ) return;\n\n    \t\tvar tempPosition = new Vector3();\n\n    \t\tvar invAspect = viewport.w / viewport.z,\n    \t\t\thalfViewportWidth = viewport.z * 0.5,\n    \t\t\thalfViewportHeight = viewport.w * 0.5;\n\n    \t\tvar size = 16 / viewport.w,\n    \t\t\tscale = new Vector2( size * invAspect, size );\n\n    \t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n    \t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\n    \t\tvar validArea = new Box2();\n\n    \t\tvalidArea.min.set( 0, 0 );\n    \t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tinit();\n\n    \t\t}\n\n    \t\tgl.useProgram( program );\n\n    \t\tstate.initAttributes();\n    \t\tstate.enableAttribute( attributes.vertex );\n    \t\tstate.enableAttribute( attributes.uv );\n    \t\tstate.disableUnusedAttributes();\n\n    \t\t// loop through all lens flares to update their occlusion and positions\n    \t\t// setup gl and common used attribs/uniforms\n\n    \t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n    \t\tgl.uniform1i( uniforms.map, 1 );\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n    \t\tstate.disable( gl.CULL_FACE );\n    \t\tstate.setDepthWrite( false );\n\n    \t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n    \t\t\tsize = 16 / viewport.w;\n    \t\t\tscale.set( size * invAspect, size );\n\n    \t\t\t// calc object screen position\n\n    \t\t\tvar flare = flares[ i ];\n\n    \t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n    \t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n    \t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\n    \t\t\t// setup arrays for gl programs\n\n    \t\t\tscreenPosition.copy( tempPosition );\n\n    \t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n    \t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n    \t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n    \t\t\t// screen cull\n\n    \t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n    \t\t\t\t// save current RGB to temp texture\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n    \t\t\t\t// render pink quad\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n    \t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n    \t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n    \t\t\t\tstate.disable( gl.BLEND );\n    \t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n    \t\t\t\t// copy result to occlusionMap\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n    \t\t\t\t// restore graphics\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n    \t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n    \t\t\t\t// update object positions\n\n    \t\t\t\tflare.positionScreen.copy( screenPosition );\n\n    \t\t\t\tif ( flare.customUpdateCallback ) {\n\n    \t\t\t\t\tflare.customUpdateCallback( flare );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tflare.updateLensFlares();\n\n    \t\t\t\t}\n\n    \t\t\t\t// render flares\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n    \t\t\t\tstate.enable( gl.BLEND );\n\n    \t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n    \t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n    \t\t\t\t\t\tscreenPosition.x = sprite.x;\n    \t\t\t\t\t\tscreenPosition.y = sprite.y;\n    \t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n    \t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n    \t\t\t\t\t\tscale.x = size * invAspect;\n    \t\t\t\t\t\tscale.y = size;\n\n    \t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n    \t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n    \t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n    \t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n    \t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n    \t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n    \t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\n    \t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// restore gl\n\n    \t\tstate.enable( gl.CULL_FACE );\n    \t\tstate.enable( gl.DEPTH_TEST );\n    \t\tstate.setDepthWrite( true );\n\n    \t\trenderer.resetGLState();\n\n    \t};\n\n    \tfunction createProgram( shader ) {\n\n    \t\tvar program = gl.createProgram();\n\n    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n    \t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n    \t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n    \t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n    \t\tgl.compileShader( fragmentShader );\n    \t\tgl.compileShader( vertexShader );\n\n    \t\tgl.attachShader( program, fragmentShader );\n    \t\tgl.attachShader( program, vertexShader );\n\n    \t\tgl.linkProgram( program );\n\n    \t\treturn program;\n\n    \t}\n\n    }\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function SpritePlugin( renderer, sprites ) {\n\n    \tvar gl = renderer.context;\n    \tvar state = renderer.state;\n\n    \tvar vertexBuffer, elementBuffer;\n    \tvar program, attributes, uniforms;\n\n    \tvar texture;\n\n    \t// decompose matrixWorld\n\n    \tvar spritePosition = new Vector3();\n    \tvar spriteRotation = new Quaternion();\n    \tvar spriteScale = new Vector3();\n\n    \tfunction init() {\n\n    \t\tvar vertices = new Float32Array( [\n    \t\t\t- 0.5, - 0.5,  0, 0,\n    \t\t\t  0.5, - 0.5,  1, 0,\n    \t\t\t  0.5,   0.5,  1, 1,\n    \t\t\t- 0.5,   0.5,  0, 1\n    \t\t] );\n\n    \t\tvar faces = new Uint16Array( [\n    \t\t\t0, 1, 2,\n    \t\t\t0, 2, 3\n    \t\t] );\n\n    \t\tvertexBuffer  = gl.createBuffer();\n    \t\telementBuffer = gl.createBuffer();\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n    \t\tprogram = createProgram();\n\n    \t\tattributes = {\n    \t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n    \t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n    \t\t};\n\n    \t\tuniforms = {\n    \t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n    \t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n    \t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n    \t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n    \t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n    \t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n    \t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n    \t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n    \t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n    \t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n    \t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n    \t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n    \t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n    \t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n    \t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n    \t\t};\n\n    \t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\tcanvas.width = 8;\n    \t\tcanvas.height = 8;\n\n    \t\tvar context = canvas.getContext( '2d' );\n    \t\tcontext.fillStyle = 'white';\n    \t\tcontext.fillRect( 0, 0, 8, 8 );\n\n    \t\ttexture = new Texture( canvas );\n    \t\ttexture.needsUpdate = true;\n\n    \t}\n\n    \tthis.render = function ( scene, camera ) {\n\n    \t\tif ( sprites.length === 0 ) return;\n\n    \t\t// setup gl\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tinit();\n\n    \t\t}\n\n    \t\tgl.useProgram( program );\n\n    \t\tstate.initAttributes();\n    \t\tstate.enableAttribute( attributes.position );\n    \t\tstate.enableAttribute( attributes.uv );\n    \t\tstate.disableUnusedAttributes();\n\n    \t\tstate.disable( gl.CULL_FACE );\n    \t\tstate.enable( gl.BLEND );\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n    \t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n    \t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\tgl.uniform1i( uniforms.map, 0 );\n\n    \t\tvar oldFogType = 0;\n    \t\tvar sceneFogType = 0;\n    \t\tvar fog = scene.fog;\n\n    \t\tif ( fog ) {\n\n    \t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n    \t\t\tif ( (fog && fog.isFog) ) {\n\n    \t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n    \t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n    \t\t\t\toldFogType = 1;\n    \t\t\t\tsceneFogType = 1;\n\n    \t\t\t} else if ( (fog && fog.isFogExp2) ) {\n\n    \t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n    \t\t\t\toldFogType = 2;\n    \t\t\t\tsceneFogType = 2;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tgl.uniform1i( uniforms.fogType, 0 );\n    \t\t\toldFogType = 0;\n    \t\t\tsceneFogType = 0;\n\n    \t\t}\n\n\n    \t\t// update positions and sort\n\n    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n    \t\t\tvar sprite = sprites[ i ];\n\n    \t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n    \t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n    \t\t}\n\n    \t\tsprites.sort( painterSortStable );\n\n    \t\t// render all sprites\n\n    \t\tvar scale = [];\n\n    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n    \t\t\tvar sprite = sprites[ i ];\n    \t\t\tvar material = sprite.material;\n\n    \t\t\tif ( material.visible === false ) continue;\n\n    \t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n    \t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n    \t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n    \t\t\tscale[ 0 ] = spriteScale.x;\n    \t\t\tscale[ 1 ] = spriteScale.y;\n\n    \t\t\tvar fogType = 0;\n\n    \t\t\tif ( scene.fog && material.fog ) {\n\n    \t\t\t\tfogType = sceneFogType;\n\n    \t\t\t}\n\n    \t\t\tif ( oldFogType !== fogType ) {\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n    \t\t\t\toldFogType = fogType;\n\n    \t\t\t}\n\n    \t\t\tif ( material.map !== null ) {\n\n    \t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n    \t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n    \t\t\t} else {\n\n    \t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n    \t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n    \t\t\t}\n\n    \t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n    \t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n    \t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n    \t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n    \t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n    \t\t\tstate.setDepthTest( material.depthTest );\n    \t\t\tstate.setDepthWrite( material.depthWrite );\n\n    \t\t\tif ( material.map ) {\n\n    \t\t\t\trenderer.setTexture2D( material.map, 0 );\n\n    \t\t\t} else {\n\n    \t\t\t\trenderer.setTexture2D( texture, 0 );\n\n    \t\t\t}\n\n    \t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n    \t\t}\n\n    \t\t// restore gl\n\n    \t\tstate.enable( gl.CULL_FACE );\n\n    \t\trenderer.resetGLState();\n\n    \t};\n\n    \tfunction createProgram() {\n\n    \t\tvar program = gl.createProgram();\n\n    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n    \t\tgl.shaderSource( vertexShader, [\n\n    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n    \t\t\t'uniform mat4 modelViewMatrix;',\n    \t\t\t'uniform mat4 projectionMatrix;',\n    \t\t\t'uniform float rotation;',\n    \t\t\t'uniform vec2 scale;',\n    \t\t\t'uniform vec2 uvOffset;',\n    \t\t\t'uniform vec2 uvScale;',\n\n    \t\t\t'attribute vec2 position;',\n    \t\t\t'attribute vec2 uv;',\n\n    \t\t\t'varying vec2 vUV;',\n\n    \t\t\t'void main() {',\n\n    \t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n    \t\t\t\t'vec2 alignedPosition = position * scale;',\n\n    \t\t\t\t'vec2 rotatedPosition;',\n    \t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n    \t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n    \t\t\t\t'vec4 finalPosition;',\n\n    \t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n    \t\t\t\t'finalPosition.xy += rotatedPosition;',\n    \t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n    \t\t\t\t'gl_Position = finalPosition;',\n\n    \t\t\t'}'\n\n    \t\t].join( '\\n' ) );\n\n    \t\tgl.shaderSource( fragmentShader, [\n\n    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n    \t\t\t'uniform vec3 color;',\n    \t\t\t'uniform sampler2D map;',\n    \t\t\t'uniform float opacity;',\n\n    \t\t\t'uniform int fogType;',\n    \t\t\t'uniform vec3 fogColor;',\n    \t\t\t'uniform float fogDensity;',\n    \t\t\t'uniform float fogNear;',\n    \t\t\t'uniform float fogFar;',\n    \t\t\t'uniform float alphaTest;',\n\n    \t\t\t'varying vec2 vUV;',\n\n    \t\t\t'void main() {',\n\n    \t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n    \t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n    \t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n    \t\t\t\t'if ( fogType > 0 ) {',\n\n    \t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n    \t\t\t\t\t'float fogFactor = 0.0;',\n\n    \t\t\t\t\t'if ( fogType == 1 ) {',\n\n    \t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n    \t\t\t\t\t'} else {',\n\n    \t\t\t\t\t\t'const float LOG2 = 1.442695;',\n    \t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n    \t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n    \t\t\t\t\t'}',\n\n    \t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n    \t\t\t\t'}',\n\n    \t\t\t'}'\n\n    \t\t].join( '\\n' ) );\n\n    \t\tgl.compileShader( vertexShader );\n    \t\tgl.compileShader( fragmentShader );\n\n    \t\tgl.attachShader( program, vertexShader );\n    \t\tgl.attachShader( program, fragmentShader );\n\n    \t\tgl.linkProgram( program );\n\n    \t\treturn program;\n\n    \t}\n\n    \tfunction painterSortStable( a, b ) {\n\n    \t\tif ( a.renderOrder !== b.renderOrder ) {\n\n    \t\t\treturn a.renderOrder - b.renderOrder;\n\n    \t\t} else if ( a.z !== b.z ) {\n\n    \t\t\treturn b.z - a.z;\n\n    \t\t} else {\n\n    \t\t\treturn b.id - a.id;\n\n    \t\t}\n\n    \t}\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Material() {\n\n    \tObject.defineProperty( this, 'id', { value: MaterialIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Material';\n\n    \tthis.fog = true;\n    \tthis.lights = true;\n\n    \tthis.blending = NormalBlending;\n    \tthis.side = FrontSide;\n    \tthis.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n    \tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n    \tthis.opacity = 1;\n    \tthis.transparent = false;\n\n    \tthis.blendSrc = SrcAlphaFactor;\n    \tthis.blendDst = OneMinusSrcAlphaFactor;\n    \tthis.blendEquation = AddEquation;\n    \tthis.blendSrcAlpha = null;\n    \tthis.blendDstAlpha = null;\n    \tthis.blendEquationAlpha = null;\n\n    \tthis.depthFunc = LessEqualDepth;\n    \tthis.depthTest = true;\n    \tthis.depthWrite = true;\n\n    \tthis.clippingPlanes = null;\n    \tthis.clipShadows = false;\n\n    \tthis.colorWrite = true;\n\n    \tthis.precision = null; // override the renderer's default precision for this material\n\n    \tthis.polygonOffset = false;\n    \tthis.polygonOffsetFactor = 0;\n    \tthis.polygonOffsetUnits = 0;\n\n    \tthis.alphaTest = 0;\n    \tthis.premultipliedAlpha = false;\n\n    \tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n    \tthis.visible = true;\n\n    \tthis._needsUpdate = true;\n\n    }\n\n    Material.prototype = {\n\n    \tconstructor: Material,\n\n    \tisMaterial: true,\n\n    \tget needsUpdate() {\n\n    \t\treturn this._needsUpdate;\n\n    \t},\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.update();\n    \t\tthis._needsUpdate = value;\n\n    \t},\n\n    \tsetValues: function ( values ) {\n\n    \t\tif ( values === undefined ) return;\n\n    \t\tfor ( var key in values ) {\n\n    \t\t\tvar newValue = values[ key ];\n\n    \t\t\tif ( newValue === undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tvar currentValue = this[ key ];\n\n    \t\t\tif ( currentValue === undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tif ( (currentValue && currentValue.isColor) ) {\n\n    \t\t\t\tcurrentValue.set( newValue );\n\n    \t\t\t} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {\n\n    \t\t\t\tcurrentValue.copy( newValue );\n\n    \t\t\t} else if ( key === 'overdraw' ) {\n\n    \t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n    \t\t\t\tthis[ key ] = Number( newValue );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis[ key ] = newValue;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar isRoot = meta === undefined;\n\n    \t\tif ( isRoot ) {\n\n    \t\t\tmeta = {\n    \t\t\t\ttextures: {},\n    \t\t\t\timages: {}\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Material',\n    \t\t\t\tgenerator: 'Material.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard Material serialization\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( (this.color && this.color.isColor) ) data.color = this.color.getHex();\n\n    \t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n    \t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n    \t\tif ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();\n    \t\tif ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();\n    \t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\n    \t\tif ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;\n    \t\tif ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n    \t\tif ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n    \t\tif ( (this.bumpMap && this.bumpMap.isTexture) ) {\n\n    \t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n    \t\t\tdata.bumpScale = this.bumpScale;\n\n    \t\t}\n    \t\tif ( (this.normalMap && this.normalMap.isTexture) ) {\n\n    \t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n    \t\t\tdata.normalScale = this.normalScale.toArray();\n\n    \t\t}\n    \t\tif ( (this.displacementMap && this.displacementMap.isTexture) ) {\n\n    \t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n    \t\t\tdata.displacementScale = this.displacementScale;\n    \t\t\tdata.displacementBias = this.displacementBias;\n\n    \t\t}\n    \t\tif ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n    \t\tif ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n    \t\tif ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n    \t\tif ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n    \t\tif ( (this.envMap && this.envMap.isTexture) ) {\n\n    \t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n    \t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n    \t\t}\n\n    \t\tif ( this.size !== undefined ) data.size = this.size;\n    \t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n    \t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n    \t\tif ( this.shading !== SmoothShading ) data.shading = this.shading;\n    \t\tif ( this.side !== FrontSide ) data.side = this.side;\n    \t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n    \t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n    \t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n    \t\tdata.depthFunc = this.depthFunc;\n    \t\tdata.depthTest = this.depthTest;\n    \t\tdata.depthWrite = this.depthWrite;\n\n    \t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n    \t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n    \t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n    \t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n    \t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n    \t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n    \t\tdata.skinning = this.skinning;\n    \t\tdata.morphTargets = this.morphTargets;\n\n    \t\t// TODO: Copied from Object3D.toJSON\n\n    \t\tfunction extractFromCache( cache ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in cache ) {\n\n    \t\t\t\tvar data = cache[ key ];\n    \t\t\t\tdelete data.metadata;\n    \t\t\t\tvalues.push( data );\n\n    \t\t\t}\n\n    \t\t\treturn values;\n\n    \t\t}\n\n    \t\tif ( isRoot ) {\n\n    \t\t\tvar textures = extractFromCache( meta.textures );\n    \t\t\tvar images = extractFromCache( meta.images );\n\n    \t\t\tif ( textures.length > 0 ) data.textures = textures;\n    \t\t\tif ( images.length > 0 ) data.images = images;\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.name = source.name;\n\n    \t\tthis.fog = source.fog;\n    \t\tthis.lights = source.lights;\n\n    \t\tthis.blending = source.blending;\n    \t\tthis.side = source.side;\n    \t\tthis.shading = source.shading;\n    \t\tthis.vertexColors = source.vertexColors;\n\n    \t\tthis.opacity = source.opacity;\n    \t\tthis.transparent = source.transparent;\n\n    \t\tthis.blendSrc = source.blendSrc;\n    \t\tthis.blendDst = source.blendDst;\n    \t\tthis.blendEquation = source.blendEquation;\n    \t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n    \t\tthis.blendDstAlpha = source.blendDstAlpha;\n    \t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n    \t\tthis.depthFunc = source.depthFunc;\n    \t\tthis.depthTest = source.depthTest;\n    \t\tthis.depthWrite = source.depthWrite;\n\n    \t\tthis.colorWrite = source.colorWrite;\n\n    \t\tthis.precision = source.precision;\n\n    \t\tthis.polygonOffset = source.polygonOffset;\n    \t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n    \t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n    \t\tthis.alphaTest = source.alphaTest;\n\n    \t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n    \t\tthis.overdraw = source.overdraw;\n\n    \t\tthis.visible = source.visible;\n    \t\tthis.clipShadows = source.clipShadows;\n\n    \t\tvar srcPlanes = source.clippingPlanes,\n    \t\t\tdstPlanes = null;\n\n    \t\tif ( srcPlanes !== null ) {\n\n    \t\t\tvar n = srcPlanes.length;\n    \t\t\tdstPlanes = new Array( n );\n\n    \t\t\tfor ( var i = 0; i !== n; ++ i )\n    \t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n    \t\t}\n\n    \t\tthis.clippingPlanes = dstPlanes;\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdate: function () {\n\n    \t\tthis.dispatchEvent( { type: 'update' } );\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    };\n\n    Object.assign( Material.prototype, EventDispatcher.prototype );\n\n    var count$1 = 0;\n    function MaterialIdCount() { return count$1++; };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  defines: { \"label\" : \"value\" },\n     *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n     *\n     *  fragmentShader: <string>,\n     *  vertexShader: <string>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  lights: <bool>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function ShaderMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'ShaderMaterial';\n\n    \tthis.defines = {};\n    \tthis.uniforms = {};\n\n    \tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n    \tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n    \tthis.linewidth = 1;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false; // set to use scene fog\n    \tthis.lights = false; // set to use scene lights\n    \tthis.clipping = false; // set to use user-defined clipping planes\n\n    \tthis.skinning = false; // set to use skinning attribute streams\n    \tthis.morphTargets = false; // set to use morph targets\n    \tthis.morphNormals = false; // set to use morph normals\n\n    \tthis.extensions = {\n    \t\tderivatives: false, // set to use derivatives\n    \t\tfragDepth: false, // set to use fragment depth values\n    \t\tdrawBuffers: false, // set to use draw buffers\n    \t\tshaderTextureLOD: false // set to use shader texture LOD\n    \t};\n\n    \t// When rendered geometry doesn't include these attributes but the material does,\n    \t// use these default values in WebGL. This avoids errors when buffer data is missing.\n    \tthis.defaultAttributeValues = {\n    \t\t'color': [ 1, 1, 1 ],\n    \t\t'uv': [ 0, 0 ],\n    \t\t'uv2': [ 0, 0 ]\n    \t};\n\n    \tthis.index0AttributeName = undefined;\n\n    \tif ( parameters !== undefined ) {\n\n    \t\tif ( parameters.attributes !== undefined ) {\n\n    \t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n    \t\t}\n\n    \t\tthis.setValues( parameters );\n\n    \t}\n\n    }\n\n    ShaderMaterial.prototype = Object.create( Material.prototype );\n    ShaderMaterial.prototype.constructor = ShaderMaterial;\n\n    ShaderMaterial.prototype.isShaderMaterial = true;\n\n    ShaderMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.fragmentShader = source.fragmentShader;\n    \tthis.vertexShader = source.vertexShader;\n\n    \tthis.uniforms = exports.UniformsUtils.clone( source.uniforms );\n\n    \tthis.defines = source.defines;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \tthis.lights = source.lights;\n    \tthis.clipping = source.clipping;\n\n    \tthis.skinning = source.skinning;\n\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \tthis.extensions = source.extensions;\n\n    \treturn this;\n\n    };\n\n    ShaderMaterial.prototype.toJSON = function ( meta ) {\n\n    \tvar data = Material.prototype.toJSON.call( this, meta );\n\n    \tdata.uniforms = this.uniforms;\n    \tdata.vertexShader = this.vertexShader;\n    \tdata.fragmentShader = this.fragmentShader;\n\n    \treturn data;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author bhouston / https://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>\n     * }\n     */\n\n    function MeshDepthMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshDepthMaterial';\n\n    \tthis.depthPacking = BasicDepthPacking;\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n\n    \tthis.map = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshDepthMaterial.prototype = Object.create( Material.prototype );\n    MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n    MeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n    MeshDepthMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.depthPacking = source.depthPacking;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n\n    \tthis.map = source.map;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Box3( min, max ) {\n\n    \tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n    \tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n    }\n\n    Box3.prototype = {\n\n    \tconstructor: Box3,\n\n    \tisBox3: true,\n\n    \tset: function ( min, max ) {\n\n    \t\tthis.min.copy( min );\n    \t\tthis.max.copy( max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromArray: function ( array ) {\n\n    \t\tvar minX = + Infinity;\n    \t\tvar minY = + Infinity;\n    \t\tvar minZ = + Infinity;\n\n    \t\tvar maxX = - Infinity;\n    \t\tvar maxY = - Infinity;\n    \t\tvar maxZ = - Infinity;\n\n    \t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n    \t\t\tvar x = array[ i ];\n    \t\t\tvar y = array[ i + 1 ];\n    \t\t\tvar z = array[ i + 2 ];\n\n    \t\t\tif ( x < minX ) minX = x;\n    \t\t\tif ( y < minY ) minY = y;\n    \t\t\tif ( z < minZ ) minZ = z;\n\n    \t\t\tif ( x > maxX ) maxX = x;\n    \t\t\tif ( y > maxY ) maxY = y;\n    \t\t\tif ( z > maxZ ) maxZ = z;\n\n    \t\t}\n\n    \t\tthis.min.set( minX, minY, minZ );\n    \t\tthis.max.set( maxX, maxY, maxZ );\n\n    \t},\n\n    \tsetFromPoints: function ( points ) {\n\n    \t\tthis.makeEmpty();\n\n    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\tthis.expandByPoint( points[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCenterAndSize: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function setFromCenterAndSize( center, size ) {\n\n    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n    \t\t\tthis.min.copy( center ).sub( halfSize );\n    \t\t\tthis.max.copy( center ).add( halfSize );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tsetFromObject: function () {\n\n    \t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n    \t\t// accounting for both the object's, and children's, world transforms\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function setFromObject( object ) {\n\n    \t\t\tvar scope = this;\n\n    \t\t\tobject.updateMatrixWorld( true );\n\n    \t\t\tthis.makeEmpty();\n\n    \t\t\tobject.traverse( function ( node ) {\n\n    \t\t\t\tvar geometry = node.geometry;\n\n    \t\t\t\tif ( geometry !== undefined ) {\n\n    \t\t\t\t\tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\t\t\tvar vertices = geometry.vertices;\n\n    \t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n    \t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n    \t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n    \t\t\t\t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\t\t\t\tvar array, offset, stride;\n\n    \t\t\t\t\t\t\tif ( (attribute && attribute.isInterleavedBufferAttribute) ) {\n\n    \t\t\t\t\t\t\t\tarray = attribute.data.array;\n    \t\t\t\t\t\t\t\toffset = attribute.offset;\n    \t\t\t\t\t\t\t\tstride = attribute.data.stride;\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tarray = attribute.array;\n    \t\t\t\t\t\t\t\toffset = 0;\n    \t\t\t\t\t\t\t\tstride = 3;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tfor ( var i = offset, il = array.length; i < il; i += stride ) {\n\n    \t\t\t\t\t\t\t\tv1.fromArray( array, i );\n    \t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n    \t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( box ) {\n\n    \t\tthis.min.copy( box.min );\n    \t\tthis.max.copy( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeEmpty: function () {\n\n    \t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n    \t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n    \t\treturn this;\n\n    \t},\n\n    \tisEmpty: function () {\n\n    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tgetSize: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\n    \t},\n\n    \texpandByPoint: function ( point ) {\n\n    \t\tthis.min.min( point );\n    \t\tthis.max.max( point );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByVector: function ( vector ) {\n\n    \t\tthis.min.sub( vector );\n    \t\tthis.max.add( vector );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByScalar: function ( scalar ) {\n\n    \t\tthis.min.addScalar( - scalar );\n    \t\tthis.max.addScalar( scalar );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n    \t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n    \t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tcontainsBox: function ( box ) {\n\n    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n    \t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n    \t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tgetParameter: function ( point, optionalTarget ) {\n\n    \t\t// This can potentially have a divide by zero if the box\n    \t\t// has a size dimension of 0.\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn result.set(\n    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n    \t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n    \t\t);\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\t// using 6 splitting planes to rule out intersections.\n\n    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n    \t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n    \t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tintersectsSphere: ( function () {\n\n    \t\tvar closestPoint;\n\n    \t\treturn function intersectsSphere( sphere ) {\n\n    \t\t\tif ( closestPoint === undefined ) closestPoint = new Vector3();\n\n    \t\t\t// Find the point on the AABB closest to the sphere center.\n    \t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n    \t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n    \t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n    \t\t};\n\n    \t} )(),\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// We compute the minimum and maximum dot product values. If those values\n    \t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n    \t\tvar min, max;\n\n    \t\tif ( plane.normal.x > 0 ) {\n\n    \t\t\tmin = plane.normal.x * this.min.x;\n    \t\t\tmax = plane.normal.x * this.max.x;\n\n    \t\t} else {\n\n    \t\t\tmin = plane.normal.x * this.max.x;\n    \t\t\tmax = plane.normal.x * this.min.x;\n\n    \t\t}\n\n    \t\tif ( plane.normal.y > 0 ) {\n\n    \t\t\tmin += plane.normal.y * this.min.y;\n    \t\t\tmax += plane.normal.y * this.max.y;\n\n    \t\t} else {\n\n    \t\t\tmin += plane.normal.y * this.max.y;\n    \t\t\tmax += plane.normal.y * this.min.y;\n\n    \t\t}\n\n    \t\tif ( plane.normal.z > 0 ) {\n\n    \t\t\tmin += plane.normal.z * this.min.z;\n    \t\t\tmax += plane.normal.z * this.max.z;\n\n    \t\t} else {\n\n    \t\t\tmin += plane.normal.z * this.max.z;\n    \t\t\tmax += plane.normal.z * this.min.z;\n\n    \t\t}\n\n    \t\treturn ( min <= plane.constant && max >= plane.constant );\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\n    \t},\n\n    \tdistanceToPoint: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function distanceToPoint( point ) {\n\n    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n    \t\t\treturn clampedPoint.sub( point ).length();\n\n    \t\t};\n\n    \t}(),\n\n    \tgetBoundingSphere: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function getBoundingSphere( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Sphere();\n\n    \t\t\tthis.getCenter( result.center );\n\n    \t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tintersect: function ( box ) {\n\n    \t\tthis.min.max( box.min );\n    \t\tthis.max.min( box.max );\n\n    \t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n    \t\tif( this.isEmpty() ) this.makeEmpty();\n\n    \t\treturn this;\n\n    \t},\n\n    \tunion: function ( box ) {\n\n    \t\tthis.min.min( box.min );\n    \t\tthis.max.max( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function () {\n\n    \t\tvar points = [\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3()\n    \t\t];\n\n    \t\treturn function applyMatrix4( matrix ) {\n\n    \t\t\t// transform of empty box is an empty box.\n    \t\t\tif( this.isEmpty() ) return this;\n\n    \t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n    \t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n    \t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n    \t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n    \t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n    \t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n    \t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n    \t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n    \t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n    \t\t\tthis.setFromPoints( points );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.min.add( offset );\n    \t\tthis.max.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( box ) {\n\n    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Sphere( center, radius ) {\n\n    \tthis.center = ( center !== undefined ) ? center : new Vector3();\n    \tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n    }\n\n    Sphere.prototype = {\n\n    \tconstructor: Sphere,\n\n    \tset: function ( center, radius ) {\n\n    \t\tthis.center.copy( center );\n    \t\tthis.radius = radius;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPoints: function () {\n\n    \t\tvar box = new Box3();\n\n    \t\treturn function setFromPoints( points, optionalCenter ) {\n\n    \t\t\tvar center = this.center;\n\n    \t\t\tif ( optionalCenter !== undefined ) {\n\n    \t\t\t\tcenter.copy( optionalCenter );\n\n    \t\t\t} else {\n\n    \t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\n    \t\t\t}\n\n    \t\t\tvar maxRadiusSq = 0;\n\n    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n    \t\t\t}\n\n    \t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( sphere ) {\n\n    \t\tthis.center.copy( sphere.center );\n    \t\tthis.radius = sphere.radius;\n\n    \t\treturn this;\n\n    \t},\n\n    \tempty: function () {\n\n    \t\treturn ( this.radius <= 0 );\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n    \t},\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\tvar radiusSum = this.radius + sphere.radius;\n\n    \t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\treturn box.intersectsSphere( this );\n\n    \t},\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// We use the following equation to compute the signed distance from\n    \t\t// the center of the sphere to the plane.\n    \t\t//\n    \t\t// distance = q * n - d\n    \t\t//\n    \t\t// If this distance is greater than the radius of the sphere,\n    \t\t// then there is no intersection.\n\n    \t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tresult.copy( point );\n\n    \t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n    \t\t\tresult.sub( this.center ).normalize();\n    \t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \tgetBoundingBox: function ( optionalTarget ) {\n\n    \t\tvar box = optionalTarget || new Box3();\n\n    \t\tbox.set( this.center, this.center );\n    \t\tbox.expandByScalar( this.radius );\n\n    \t\treturn box;\n\n    \t},\n\n    \tapplyMatrix4: function ( matrix ) {\n\n    \t\tthis.center.applyMatrix4( matrix );\n    \t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.center.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( sphere ) {\n\n    \t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     * @author tschw\n     */\n\n    function Matrix3() {\n\n    \tthis.elements = new Float32Array( [\n\n    \t\t1, 0, 0,\n    \t\t0, 1, 0,\n    \t\t0, 0, 1\n\n    \t] );\n\n    \tif ( arguments.length > 0 ) {\n\n    \t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n    \t}\n\n    }\n\n    Matrix3.prototype = {\n\n    \tconstructor: Matrix3,\n\n    \tisMatrix3: true,\n\n    \tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n    \t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n    \t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n    \t\treturn this;\n\n    \t},\n\n    \tidentity: function () {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0,\n    \t\t\t0, 1, 0,\n    \t\t\t0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().fromArray( this.elements );\n\n    \t},\n\n    \tcopy: function ( m ) {\n\n    \t\tvar me = m.elements;\n\n    \t\tthis.set(\n\n    \t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n    \t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n    \t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrix4: function( m ) {\n\n    \t\tvar me = m.elements;\n\n    \t\tthis.set(\n\n    \t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n    \t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n    \t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyToVector3Array: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToVector3Array( array, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = array.length;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n    \t\t\t\tv1.fromArray( array, j );\n    \t\t\t\tv1.applyMatrix3( this );\n    \t\t\t\tv1.toArray( array, j );\n\n    \t\t\t}\n\n    \t\t\treturn array;\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyToBuffer: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n    \t\t\t\tv1.x = buffer.getX( j );\n    \t\t\t\tv1.y = buffer.getY( j );\n    \t\t\t\tv1.z = buffer.getZ( j );\n\n    \t\t\t\tv1.applyMatrix3( this );\n\n    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n    \t\t\t}\n\n    \t\t\treturn buffer;\n\n    \t\t};\n\n    \t}(),\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n    \t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n    \t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdeterminant: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n    \t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n    \t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n    \t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n    \t},\n\n    \tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n    \t\tif ( (matrix && matrix.isMatrix4) ) {\n\n    \t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\n    \t\t}\n\n    \t\tvar me = matrix.elements,\n    \t\t\tte = this.elements,\n\n    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n    \t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n    \t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n    \t\t\tt11 = n33 * n22 - n32 * n23,\n    \t\t\tt12 = n32 * n13 - n33 * n12,\n    \t\t\tt13 = n23 * n12 - n22 * n13,\n\n    \t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n    \t\tif ( det === 0 ) {\n\n    \t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n    \t\t\tif ( throwOnDegenerate === true ) {\n\n    \t\t\t\tthrow new Error( msg );\n\n    \t\t\t} else {\n\n    \t\t\t\tconsole.warn( msg );\n\n    \t\t\t}\n\n    \t\t\treturn this.identity();\n    \t\t}\n\n    \t\tvar detInv = 1 / det;\n\n    \t\tte[ 0 ] = t11 * detInv;\n    \t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n    \t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n    \t\tte[ 3 ] = t12 * detInv;\n    \t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n    \t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n    \t\tte[ 6 ] = t13 * detInv;\n    \t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n    \t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranspose: function () {\n\n    \t\tvar tmp, m = this.elements;\n\n    \t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n    \t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n    \t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n    \t\treturn this;\n\n    \t},\n\n    \tflattenToArrayOffset: function ( array, offset ) {\n\n    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n    \t\t\t\t\"- just use .toArray instead.\" );\n\n    \t\treturn this.toArray( array, offset );\n\n    \t},\n\n    \tgetNormalMatrix: function ( matrix4 ) {\n\n    \t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n    \t},\n\n    \ttransposeIntoArray: function ( r ) {\n\n    \t\tvar m = this.elements;\n\n    \t\tr[ 0 ] = m[ 0 ];\n    \t\tr[ 1 ] = m[ 3 ];\n    \t\tr[ 2 ] = m[ 6 ];\n    \t\tr[ 3 ] = m[ 1 ];\n    \t\tr[ 4 ] = m[ 4 ];\n    \t\tr[ 5 ] = m[ 7 ];\n    \t\tr[ 6 ] = m[ 2 ];\n    \t\tr[ 7 ] = m[ 5 ];\n    \t\tr[ 8 ] = m[ 8 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tfor( var i = 0; i < 9; i ++ ) {\n\n    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar te = this.elements;\n\n    \t\tarray[ offset ] = te[ 0 ];\n    \t\tarray[ offset + 1 ] = te[ 1 ];\n    \t\tarray[ offset + 2 ] = te[ 2 ];\n\n    \t\tarray[ offset + 3 ] = te[ 3 ];\n    \t\tarray[ offset + 4 ] = te[ 4 ];\n    \t\tarray[ offset + 5 ] = te[ 5 ];\n\n    \t\tarray[ offset + 6 ] = te[ 6 ];\n    \t\tarray[ offset + 7 ] = te[ 7 ];\n    \t\tarray[ offset + 8 ]  = te[ 8 ];\n\n    \t\treturn array;\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Plane( normal, constant ) {\n\n    \tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n    \tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n    }\n\n    Plane.prototype = {\n\n    \tconstructor: Plane,\n\n    \tset: function ( normal, constant ) {\n\n    \t\tthis.normal.copy( normal );\n    \t\tthis.constant = constant;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponents: function ( x, y, z, w ) {\n\n    \t\tthis.normal.set( x, y, z );\n    \t\tthis.constant = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n    \t\tthis.normal.copy( normal );\n    \t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCoplanarPoints: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar v2 = new Vector3();\n\n    \t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n    \t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n    \t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n    \t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( plane ) {\n\n    \t\tthis.normal.copy( plane.normal );\n    \t\tthis.constant = plane.constant;\n\n    \t\treturn this;\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n    \t\tvar inverseNormalLength = 1.0 / this.normal.length();\n    \t\tthis.normal.multiplyScalar( inverseNormalLength );\n    \t\tthis.constant *= inverseNormalLength;\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.constant *= - 1;\n    \t\tthis.normal.negate();\n\n    \t\treturn this;\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn this.normal.dot( point ) + this.constant;\n\n    \t},\n\n    \tdistanceToSphere: function ( sphere ) {\n\n    \t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n    \t},\n\n    \tprojectPoint: function ( point, optionalTarget ) {\n\n    \t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n    \t},\n\n    \torthoPoint: function ( point, optionalTarget ) {\n\n    \t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n    \t},\n\n    \tintersectLine: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function intersectLine( line, optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tvar direction = line.delta( v1 );\n\n    \t\t\tvar denominator = this.normal.dot( direction );\n\n    \t\t\tif ( denominator === 0 ) {\n\n    \t\t\t\t// line is coplanar, return origin\n    \t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n    \t\t\t\t\treturn result.copy( line.start );\n\n    \t\t\t\t}\n\n    \t\t\t\t// Unsure if this is the correct method to handle this case.\n    \t\t\t\treturn undefined;\n\n    \t\t\t}\n\n    \t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n    \t\t\tif ( t < 0 || t > 1 ) {\n\n    \t\t\t\treturn undefined;\n\n    \t\t\t}\n\n    \t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsLine: function ( line ) {\n\n    \t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n    \t\tvar startSign = this.distanceToPoint( line.start );\n    \t\tvar endSign = this.distanceToPoint( line.end );\n\n    \t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\treturn box.intersectsPlane( this );\n\n    \t},\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\treturn sphere.intersectsPlane( this );\n\n    \t},\n\n    \tcoplanarPoint: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n    \t},\n\n    \tapplyMatrix4: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar m1 = new Matrix3();\n\n    \t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n    \t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n    \t\t\t// transform normal based on theory here:\n    \t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n    \t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n    \t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n    \t\t\tthis.constant = - referencePoint.dot( normal );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.constant = this.constant - offset.dot( this.normal );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( plane ) {\n\n    \t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author bhouston / http://clara.io\n     */\n\n    function Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n    \tthis.planes = [\n\n    \t\t( p0 !== undefined ) ? p0 : new Plane(),\n    \t\t( p1 !== undefined ) ? p1 : new Plane(),\n    \t\t( p2 !== undefined ) ? p2 : new Plane(),\n    \t\t( p3 !== undefined ) ? p3 : new Plane(),\n    \t\t( p4 !== undefined ) ? p4 : new Plane(),\n    \t\t( p5 !== undefined ) ? p5 : new Plane()\n\n    \t];\n\n    }\n\n    Frustum.prototype = {\n\n    \tconstructor: Frustum,\n\n    \tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tplanes[ 0 ].copy( p0 );\n    \t\tplanes[ 1 ].copy( p1 );\n    \t\tplanes[ 2 ].copy( p2 );\n    \t\tplanes[ 3 ].copy( p3 );\n    \t\tplanes[ 4 ].copy( p4 );\n    \t\tplanes[ 5 ].copy( p5 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( frustum ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrix: function ( m ) {\n\n    \t\tvar planes = this.planes;\n    \t\tvar me = m.elements;\n    \t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n    \t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n    \t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n    \t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n    \t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n    \t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n    \t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n    \t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n    \t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n    \t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \tintersectsObject: function () {\n\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function intersectsObject( object ) {\n\n    \t\t\tvar geometry = object.geometry;\n\n    \t\t\tif ( geometry.boundingSphere === null )\n    \t\t\t\tgeometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere )\n    \t\t\t\t.applyMatrix4( object.matrixWorld );\n\n    \t\t\treturn this.intersectsSphere( sphere );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSprite: function () {\n\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function intersectsSprite( sprite ) {\n\n    \t\t\tsphere.center.set( 0, 0, 0 );\n    \t\t\tsphere.radius = 0.7071067811865476;\n    \t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n    \t\t\treturn this.intersectsSphere( sphere );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\tvar planes = this.planes;\n    \t\tvar center = sphere.center;\n    \t\tvar negRadius = - sphere.radius;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n    \t\t\tif ( distance < negRadius ) {\n\n    \t\t\t\treturn false;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tintersectsBox: function () {\n\n    \t\tvar p1 = new Vector3(),\n    \t\t\tp2 = new Vector3();\n\n    \t\treturn function intersectsBox( box ) {\n\n    \t\t\tvar planes = this.planes;\n\n    \t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\n    \t\t\t\tvar plane = planes[ i ];\n\n    \t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n    \t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n    \t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n    \t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n    \t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n    \t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n    \t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n    \t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n    \t\t\t\t// if both outside plane, no intersection\n\n    \t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n    \t\t\t\t\treturn false;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn true;\n\n    \t\t};\n\n    \t}(),\n\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n    \t\t\t\treturn false;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t}\n\n    };\n\n    function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {\n\n    \tvar _gl = _renderer.context,\n    \t_state = _renderer.state,\n    \t_frustum = new Frustum(),\n    \t_projScreenMatrix = new Matrix4(),\n\n    \t_lightShadows = _lights.shadows,\n\n    \t_shadowMapSize = new Vector2(),\n    \t_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\n    \t_lookTarget = new Vector3(),\n    \t_lightPositionWorld = new Vector3(),\n\n    \t_renderList = [],\n\n    \t_MorphingFlag = 1,\n    \t_SkinningFlag = 2,\n\n    \t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n    \t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n    \t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n    \t_materialCache = {};\n\n    \tvar cubeDirections = [\n    \t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n    \t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n    \t];\n\n    \tvar cubeUps = [\n    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n    \t];\n\n    \tvar cube2DViewPorts = [\n    \t\tnew Vector4(), new Vector4(), new Vector4(),\n    \t\tnew Vector4(), new Vector4(), new Vector4()\n    \t];\n\n    \t// init\n\n    \tvar depthMaterialTemplate = new MeshDepthMaterial();\n    \tdepthMaterialTemplate.depthPacking = RGBADepthPacking;\n    \tdepthMaterialTemplate.clipping = true;\n\n    \tvar distanceShader = ShaderLib[ \"distanceRGBA\" ];\n    \tvar distanceUniforms = exports.UniformsUtils.clone( distanceShader.uniforms );\n\n    \tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n    \t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n    \t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n    \t\tvar depthMaterial = depthMaterialTemplate.clone();\n    \t\tdepthMaterial.morphTargets = useMorphing;\n    \t\tdepthMaterial.skinning = useSkinning;\n\n    \t\t_depthMaterials[ i ] = depthMaterial;\n\n    \t\tvar distanceMaterial = new ShaderMaterial( {\n    \t\t\tdefines: {\n    \t\t\t\t'USE_SHADOWMAP': ''\n    \t\t\t},\n    \t\t\tuniforms: distanceUniforms,\n    \t\t\tvertexShader: distanceShader.vertexShader,\n    \t\t\tfragmentShader: distanceShader.fragmentShader,\n    \t\t\tmorphTargets: useMorphing,\n    \t\t\tskinning: useSkinning,\n    \t\t\tclipping: true\n    \t\t} );\n\n    \t\t_distanceMaterials[ i ] = distanceMaterial;\n\n    \t}\n\n    \t//\n\n    \tvar scope = this;\n\n    \tthis.enabled = false;\n\n    \tthis.autoUpdate = true;\n    \tthis.needsUpdate = false;\n\n    \tthis.type = PCFShadowMap;\n\n    \tthis.renderReverseSided = true;\n    \tthis.renderSingleSided = true;\n\n    \tthis.render = function ( scene, camera ) {\n\n    \t\tif ( scope.enabled === false ) return;\n    \t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n    \t\tif ( _lightShadows.length === 0 ) return;\n\n    \t\t// Set GL state for depth map.\n    \t\t_state.clearColor( 1, 1, 1, 1 );\n    \t\t_state.disable( _gl.BLEND );\n    \t\t_state.setDepthTest( true );\n    \t\t_state.setScissorTest( false );\n\n    \t\t// render depth map\n\n    \t\tvar faceCount, isPointLight;\n\n    \t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\n    \t\t\tvar light = _lightShadows[ i ];\n    \t\t\tvar shadow = light.shadow;\n\n    \t\t\tif ( shadow === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tvar shadowCamera = shadow.camera;\n\n    \t\t\t_shadowMapSize.copy( shadow.mapSize );\n    \t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n    \t\t\tif ( (light && light.isPointLight) ) {\n\n    \t\t\t\tfaceCount = 6;\n    \t\t\t\tisPointLight = true;\n\n    \t\t\t\tvar vpWidth = _shadowMapSize.x;\n    \t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n    \t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n    \t\t\t\t// following orientation:\n    \t\t\t\t//\n    \t\t\t\t//  xzXZ\n    \t\t\t\t//   y Y\n    \t\t\t\t//\n    \t\t\t\t// X - Positive x direction\n    \t\t\t\t// x - Negative x direction\n    \t\t\t\t// Y - Positive y direction\n    \t\t\t\t// y - Negative y direction\n    \t\t\t\t// Z - Positive z direction\n    \t\t\t\t// z - Negative z direction\n\n    \t\t\t\t// positive X\n    \t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// negative X\n    \t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// positive Z\n    \t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// negative Z\n    \t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// positive Y\n    \t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n    \t\t\t\t// negative Y\n    \t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n    \t\t\t\t_shadowMapSize.x *= 4.0;\n    \t\t\t\t_shadowMapSize.y *= 2.0;\n\n    \t\t\t} else {\n\n    \t\t\t\tfaceCount = 1;\n    \t\t\t\tisPointLight = false;\n\n    \t\t\t}\n\n    \t\t\tif ( shadow.map === null ) {\n\n    \t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n    \t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n    \t\t\t\tshadowCamera.updateProjectionMatrix();\n\n    \t\t\t}\n\n    \t\t\tif ( (shadow && shadow.isSpotLightShadow) ) {\n\n    \t\t\t\tshadow.update( light );\n\n    \t\t\t}\n\n    \t\t\tvar shadowMap = shadow.map;\n    \t\t\tvar shadowMatrix = shadow.matrix;\n\n    \t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n    \t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n    \t\t\t_renderer.setRenderTarget( shadowMap );\n    \t\t\t_renderer.clear();\n\n    \t\t\t// render shadow map for each cube face (if omni-directional) or\n    \t\t\t// run a single pass if not\n\n    \t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n    \t\t\t\tif ( isPointLight ) {\n\n    \t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n    \t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n    \t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n    \t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n    \t\t\t\t\t_state.viewport( vpDimensions );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n    \t\t\t\t}\n\n    \t\t\t\tshadowCamera.updateMatrixWorld();\n    \t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\n    \t\t\t\t// compute shadow matrix\n\n    \t\t\t\tshadowMatrix.set(\n    \t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n    \t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n    \t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n    \t\t\t\t\t0.0, 0.0, 0.0, 1.0\n    \t\t\t\t);\n\n    \t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n    \t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n    \t\t\t\t// update camera matrices and frustum\n\n    \t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n    \t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n    \t\t\t\t// set object matrices & frustum culling\n\n    \t\t\t\t_renderList.length = 0;\n\n    \t\t\t\tprojectObject( scene, camera, shadowCamera );\n\n    \t\t\t\t// render shadow map\n    \t\t\t\t// render regular objects\n\n    \t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar object = _renderList[ j ];\n    \t\t\t\t\tvar geometry = _objects.update( object );\n    \t\t\t\t\tvar material = object.material;\n\n    \t\t\t\t\tif ( (material && material.isMultiMaterial) ) {\n\n    \t\t\t\t\t\tvar groups = geometry.groups;\n    \t\t\t\t\t\tvar materials = material.materials;\n\n    \t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n    \t\t\t\t\t\t\tvar group = groups[ k ];\n    \t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n    \t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n    \t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n    \t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n    \t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Restore GL state.\n    \t\tvar clearColor = _renderer.getClearColor(),\n    \t\tclearAlpha = _renderer.getClearAlpha();\n    \t\t_renderer.setClearColor( clearColor, clearAlpha );\n\n    \t\tscope.needsUpdate = false;\n\n    \t};\n\n    \tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tvar result = null;\n\n    \t\tvar materialVariants = _depthMaterials;\n    \t\tvar customMaterial = object.customDepthMaterial;\n\n    \t\tif ( isPointLight ) {\n\n    \t\t\tmaterialVariants = _distanceMaterials;\n    \t\t\tcustomMaterial = object.customDistanceMaterial;\n\n    \t\t}\n\n    \t\tif ( ! customMaterial ) {\n\n    \t\t\tvar useMorphing = false;\n\n    \t\t\tif ( material.morphTargets ) {\n\n    \t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n    \t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n    \t\t\tvar variantIndex = 0;\n\n    \t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n    \t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n    \t\t\tresult = materialVariants[ variantIndex ];\n\n    \t\t} else {\n\n    \t\t\tresult = customMaterial;\n\n    \t\t}\n\n    \t\tif ( _renderer.localClippingEnabled &&\n    \t\t\t material.clipShadows === true &&\n    \t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n    \t\t\t// in this case we need a unique material instance reflecting the\n    \t\t\t// appropriate state\n\n    \t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n    \t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n    \t\t\tif ( materialsForVariant === undefined ) {\n\n    \t\t\t\tmaterialsForVariant = {};\n    \t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n    \t\t\t}\n\n    \t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n    \t\t\tif ( cachedMaterial === undefined ) {\n\n    \t\t\t\tcachedMaterial = result.clone();\n    \t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n    \t\t\t}\n\n    \t\t\tresult = cachedMaterial;\n\n    \t\t}\n\n    \t\tresult.visible = material.visible;\n    \t\tresult.wireframe = material.wireframe;\n\n    \t\tvar side = material.side;\n\n    \t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\n    \t\t\tside = FrontSide;\n\n    \t\t}\n\n    \t\tif ( scope.renderReverseSided ) {\n\n    \t\t\tif ( side === FrontSide ) side = BackSide;\n    \t\t\telse if ( side === BackSide ) side = FrontSide;\n\n    \t\t}\n\n    \t\tresult.side = side;\n\n    \t\tresult.clipShadows = material.clipShadows;\n    \t\tresult.clippingPlanes = material.clippingPlanes;\n\n    \t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n    \t\tresult.linewidth = material.linewidth;\n\n    \t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\n    \t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    \tfunction projectObject( object, camera, shadowCamera ) {\n\n    \t\tif ( object.visible === false ) return;\n\n    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\n    \t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n    \t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\n    \t\t\t\tvar material = object.material;\n\n    \t\t\t\tif ( material.visible === true ) {\n\n    \t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n    \t\t\t\t\t_renderList.push( object );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Ray( origin, direction ) {\n\n    \tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n    \tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n    }\n\n    Ray.prototype = {\n\n    \tconstructor: Ray,\n\n    \tset: function ( origin, direction ) {\n\n    \t\tthis.origin.copy( origin );\n    \t\tthis.direction.copy( direction );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( ray ) {\n\n    \t\tthis.origin.copy( ray.origin );\n    \t\tthis.direction.copy( ray.direction );\n\n    \t\treturn this;\n\n    \t},\n\n    \tat: function ( t, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n    \t},\n\n    \tlookAt: function ( v ) {\n\n    \t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \trecast: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function recast( t ) {\n\n    \t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclosestPointToPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\tresult.subVectors( point, this.origin );\n    \t\tvar directionDistance = result.dot( this.direction );\n\n    \t\tif ( directionDistance < 0 ) {\n\n    \t\t\treturn result.copy( this.origin );\n\n    \t\t}\n\n    \t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n    \t},\n\n    \tdistanceSqToPoint: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function distanceSqToPoint( point ) {\n\n    \t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n    \t\t\t// point behind the ray\n\n    \t\t\tif ( directionDistance < 0 ) {\n\n    \t\t\t\treturn this.origin.distanceToSquared( point );\n\n    \t\t\t}\n\n    \t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n    \t\t\treturn v1.distanceToSquared( point );\n\n    \t\t};\n\n    \t}(),\n\n    \tdistanceSqToSegment: function () {\n\n    \t\tvar segCenter = new Vector3();\n    \t\tvar segDir = new Vector3();\n    \t\tvar diff = new Vector3();\n\n    \t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n    \t\t\t// It returns the min distance between the ray and the segment\n    \t\t\t// defined by v0 and v1\n    \t\t\t// It can also set two optional targets :\n    \t\t\t// - The closest point on the ray\n    \t\t\t// - The closest point on the segment\n\n    \t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n    \t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n    \t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n    \t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n    \t\t\tvar a01 = - this.direction.dot( segDir );\n    \t\t\tvar b0 = diff.dot( this.direction );\n    \t\t\tvar b1 = - diff.dot( segDir );\n    \t\t\tvar c = diff.lengthSq();\n    \t\t\tvar det = Math.abs( 1 - a01 * a01 );\n    \t\t\tvar s0, s1, sqrDist, extDet;\n\n    \t\t\tif ( det > 0 ) {\n\n    \t\t\t\t// The ray and segment are not parallel.\n\n    \t\t\t\ts0 = a01 * b1 - b0;\n    \t\t\t\ts1 = a01 * b0 - b1;\n    \t\t\t\textDet = segExtent * det;\n\n    \t\t\t\tif ( s0 >= 0 ) {\n\n    \t\t\t\t\tif ( s1 >= - extDet ) {\n\n    \t\t\t\t\t\tif ( s1 <= extDet ) {\n\n    \t\t\t\t\t\t\t// region 0\n    \t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n    \t\t\t\t\t\t\tvar invDet = 1 / det;\n    \t\t\t\t\t\t\ts0 *= invDet;\n    \t\t\t\t\t\t\ts1 *= invDet;\n    \t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t// region 1\n\n    \t\t\t\t\t\t\ts1 = segExtent;\n    \t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// region 5\n\n    \t\t\t\t\t\ts1 = - segExtent;\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( s1 <= - extDet ) {\n\n    \t\t\t\t\t\t// region 4\n\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t} else if ( s1 <= extDet ) {\n\n    \t\t\t\t\t\t// region 3\n\n    \t\t\t\t\t\ts0 = 0;\n    \t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// region 2\n\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// Ray and segment are parallel.\n\n    \t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n    \t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t}\n\n    \t\t\tif ( optionalPointOnRay ) {\n\n    \t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n    \t\t\t}\n\n    \t\t\tif ( optionalPointOnSegment ) {\n\n    \t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n    \t\t\t}\n\n    \t\t\treturn sqrDist;\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectSphere: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n    \t\t\tv1.subVectors( sphere.center, this.origin );\n    \t\t\tvar tca = v1.dot( this.direction );\n    \t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n    \t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n    \t\t\tif ( d2 > radius2 ) return null;\n\n    \t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n    \t\t\t// t0 = first intersect point - entrance on front of sphere\n    \t\t\tvar t0 = tca - thc;\n\n    \t\t\t// t1 = second intersect point - exit point on back of sphere\n    \t\t\tvar t1 = tca + thc;\n\n    \t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n    \t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n    \t\t\t// test to see if t0 is behind the ray:\n    \t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n    \t\t\t// in order to always return an intersect point that is in front of the ray.\n    \t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n    \t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n    \t\t\treturn this.at( t0, optionalTarget );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n    \t},\n\n    \tdistanceToPlane: function ( plane ) {\n\n    \t\tvar denominator = plane.normal.dot( this.direction );\n\n    \t\tif ( denominator === 0 ) {\n\n    \t\t\t// line is coplanar, return origin\n    \t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n    \t\t\t\treturn 0;\n\n    \t\t\t}\n\n    \t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n    \t\t// Return if the ray never intersects the plane\n\n    \t\treturn t >= 0 ? t :  null;\n\n    \t},\n\n    \tintersectPlane: function ( plane, optionalTarget ) {\n\n    \t\tvar t = this.distanceToPlane( plane );\n\n    \t\tif ( t === null ) {\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\treturn this.at( t, optionalTarget );\n\n    \t},\n\n\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// check if the ray lies on the plane first\n\n    \t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n    \t\tif ( distToPoint === 0 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\tvar denominator = plane.normal.dot( this.direction );\n\n    \t\tif ( denominator * distToPoint < 0 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\t// ray origin is behind the plane (and is pointing behind it)\n\n    \t\treturn false;\n\n    \t},\n\n    \tintersectBox: function ( box, optionalTarget ) {\n\n    \t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n    \t\tvar invdirx = 1 / this.direction.x,\n    \t\t\tinvdiry = 1 / this.direction.y,\n    \t\t\tinvdirz = 1 / this.direction.z;\n\n    \t\tvar origin = this.origin;\n\n    \t\tif ( invdirx >= 0 ) {\n\n    \t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n    \t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n    \t\t} else {\n\n    \t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n    \t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n    \t\t}\n\n    \t\tif ( invdiry >= 0 ) {\n\n    \t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n    \t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n    \t\t} else {\n\n    \t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n    \t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n    \t\t}\n\n    \t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n    \t\t// These lines also handle the case where tmin or tmax is NaN\n    \t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n    \t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n    \t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n    \t\tif ( invdirz >= 0 ) {\n\n    \t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n    \t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n    \t\t} else {\n\n    \t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n    \t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n    \t\t}\n\n    \t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n    \t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n    \t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n    \t\t//return point closest to the ray (positive side)\n\n    \t\tif ( tmax < 0 ) return null;\n\n    \t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n    \t},\n\n    \tintersectsBox: ( function () {\n\n    \t\tvar v = new Vector3();\n\n    \t\treturn function intersectsBox( box ) {\n\n    \t\t\treturn this.intersectBox( box, v ) !== null;\n\n    \t\t};\n\n    \t} )(),\n\n    \tintersectTriangle: function () {\n\n    \t\t// Compute the offset origin, edges, and normal.\n    \t\tvar diff = new Vector3();\n    \t\tvar edge1 = new Vector3();\n    \t\tvar edge2 = new Vector3();\n    \t\tvar normal = new Vector3();\n\n    \t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n    \t\t\tedge1.subVectors( b, a );\n    \t\t\tedge2.subVectors( c, a );\n    \t\t\tnormal.crossVectors( edge1, edge2 );\n\n    \t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n    \t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n    \t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n    \t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n    \t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n    \t\t\tvar DdN = this.direction.dot( normal );\n    \t\t\tvar sign;\n\n    \t\t\tif ( DdN > 0 ) {\n\n    \t\t\t\tif ( backfaceCulling ) return null;\n    \t\t\t\tsign = 1;\n\n    \t\t\t} else if ( DdN < 0 ) {\n\n    \t\t\t\tsign = - 1;\n    \t\t\t\tDdN = - DdN;\n\n    \t\t\t} else {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\tdiff.subVectors( this.origin, a );\n    \t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n    \t\t\t// b1 < 0, no intersection\n    \t\t\tif ( DdQxE2 < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n    \t\t\t// b2 < 0, no intersection\n    \t\t\tif ( DdE1xQ < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// b1+b2 > 1, no intersection\n    \t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// Line intersects triangle, check if ray does.\n    \t\t\tvar QdN = - sign * diff.dot( normal );\n\n    \t\t\t// t < 0, no intersection\n    \t\t\tif ( QdN < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// Ray intersects triangle.\n    \t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyMatrix4: function ( matrix4 ) {\n\n    \t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n    \t\tthis.origin.applyMatrix4( matrix4 );\n    \t\tthis.direction.sub( this.origin );\n    \t\tthis.direction.normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( ray ) {\n\n    \t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     */\n\n    function Euler( x, y, z, order ) {\n\n    \tthis._x = x || 0;\n    \tthis._y = y || 0;\n    \tthis._z = z || 0;\n    \tthis._order = order || Euler.DefaultOrder;\n\n    }\n\n    Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n    Euler.DefaultOrder = 'XYZ';\n\n    Euler.prototype = {\n\n    \tconstructor: Euler,\n\n    \tisEuler: true,\n\n    \tget x () {\n\n    \t\treturn this._x;\n\n    \t},\n\n    \tset x ( value ) {\n\n    \t\tthis._x = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget y () {\n\n    \t\treturn this._y;\n\n    \t},\n\n    \tset y ( value ) {\n\n    \t\tthis._y = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget z () {\n\n    \t\treturn this._z;\n\n    \t},\n\n    \tset z ( value ) {\n\n    \t\tthis._z = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget order () {\n\n    \t\treturn this._order;\n\n    \t},\n\n    \tset order ( value ) {\n\n    \t\tthis._order = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tset: function ( x, y, z, order ) {\n\n    \t\tthis._x = x;\n    \t\tthis._y = y;\n    \t\tthis._z = z;\n    \t\tthis._order = order || this._order;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n    \t},\n\n    \tcopy: function ( euler ) {\n\n    \t\tthis._x = euler._x;\n    \t\tthis._y = euler._y;\n    \t\tthis._z = euler._z;\n    \t\tthis._order = euler._order;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromRotationMatrix: function ( m, order, update ) {\n\n    \t\tvar clamp = exports.Math.clamp;\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar te = m.elements;\n    \t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n    \t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n    \t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n    \t\torder = order || this._order;\n\n    \t\tif ( order === 'XYZ' ) {\n\n    \t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n    \t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n    \t\t\t\tthis._z = 0;\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'YXZ' ) {\n\n    \t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n    \t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n    \t\t\t\tthis._z = 0;\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'ZXY' ) {\n\n    \t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n    \t\t\t\tthis._y = Math.atan2( - m31, m33 );\n    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._y = 0;\n    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'ZYX' ) {\n\n    \t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m33 );\n    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = 0;\n    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'YZX' ) {\n\n    \t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m22 );\n    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = 0;\n    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'XZY' ) {\n\n    \t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n    \t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n    \t\t\t\tthis._y = 0;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n    \t\t}\n\n    \t\tthis._order = order;\n\n    \t\tif ( update !== false ) this.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromQuaternion: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function setFromQuaternion( q, order, update ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.makeRotationFromQuaternion( q );\n\n    \t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n    \t\t};\n\n    \t}(),\n\n    \tsetFromVector3: function ( v, order ) {\n\n    \t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n    \t},\n\n    \treorder: function () {\n\n    \t\t// WARNING: this discards revolution information -bhouston\n\n    \t\tvar q = new Quaternion();\n\n    \t\treturn function reorder( newOrder ) {\n\n    \t\t\tq.setFromEuler( this );\n\n    \t\t\treturn this.setFromQuaternion( q, newOrder );\n\n    \t\t};\n\n    \t}(),\n\n    \tequals: function ( euler ) {\n\n    \t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n    \t},\n\n    \tfromArray: function ( array ) {\n\n    \t\tthis._x = array[ 0 ];\n    \t\tthis._y = array[ 1 ];\n    \t\tthis._z = array[ 2 ];\n    \t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this._x;\n    \t\tarray[ offset + 1 ] = this._y;\n    \t\tarray[ offset + 2 ] = this._z;\n    \t\tarray[ offset + 3 ] = this._order;\n\n    \t\treturn array;\n\n    \t},\n\n    \ttoVector3: function ( optionalResult ) {\n\n    \t\tif ( optionalResult ) {\n\n    \t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n    \t\t} else {\n\n    \t\t\treturn new Vector3( this._x, this._y, this._z );\n\n    \t\t}\n\n    \t},\n\n    \tonChange: function ( callback ) {\n\n    \t\tthis.onChangeCallback = callback;\n\n    \t\treturn this;\n\n    \t},\n\n    \tonChangeCallback: function () {}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Layers() {\n\n    \tthis.mask = 1;\n\n    }\n\n    Layers.prototype = {\n\n    \tconstructor: Layers,\n\n    \tset: function ( channel ) {\n\n    \t\tthis.mask = 1 << channel;\n\n    \t},\n\n    \tenable: function ( channel ) {\n\n    \t\tthis.mask |= 1 << channel;\n\n    \t},\n\n    \ttoggle: function ( channel ) {\n\n    \t\tthis.mask ^= 1 << channel;\n\n    \t},\n\n    \tdisable: function ( channel ) {\n\n    \t\tthis.mask &= ~ ( 1 << channel );\n\n    \t},\n\n    \ttest: function ( layers ) {\n\n    \t\treturn ( this.mask & layers.mask ) !== 0;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author elephantatwork / www.elephantatwork.ch\n     */\n\n    function Object3D() {\n\n    \tObject.defineProperty( this, 'id', { value: Object3DIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Object3D';\n\n    \tthis.parent = null;\n    \tthis.children = [];\n\n    \tthis.up = Object3D.DefaultUp.clone();\n\n    \tvar position = new Vector3();\n    \tvar rotation = new Euler();\n    \tvar quaternion = new Quaternion();\n    \tvar scale = new Vector3( 1, 1, 1 );\n\n    \tfunction onRotationChange() {\n\n    \t\tquaternion.setFromEuler( rotation, false );\n\n    \t}\n\n    \tfunction onQuaternionChange() {\n\n    \t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n    \t}\n\n    \trotation.onChange( onRotationChange );\n    \tquaternion.onChange( onQuaternionChange );\n\n    \tObject.defineProperties( this, {\n    \t\tposition: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: position\n    \t\t},\n    \t\trotation: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: rotation\n    \t\t},\n    \t\tquaternion: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: quaternion\n    \t\t},\n    \t\tscale: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: scale\n    \t\t},\n    \t\tmodelViewMatrix: {\n    \t\t\tvalue: new Matrix4()\n    \t\t},\n    \t\tnormalMatrix: {\n    \t\t\tvalue: new Matrix3()\n    \t\t}\n    \t} );\n\n    \tthis.matrix = new Matrix4();\n    \tthis.matrixWorld = new Matrix4();\n\n    \tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n    \tthis.matrixWorldNeedsUpdate = false;\n\n    \tthis.layers = new Layers();\n    \tthis.visible = true;\n\n    \tthis.castShadow = false;\n    \tthis.receiveShadow = false;\n\n    \tthis.frustumCulled = true;\n    \tthis.renderOrder = 0;\n\n    \tthis.userData = {};\n\n    \tthis.onBeforeRender = null;\n\n    }\n\n    Object3D.DefaultUp = new Vector3( 0, 1, 0 );\n    Object3D.DefaultMatrixAutoUpdate = true;\n\n    Object.assign( Object3D.prototype, EventDispatcher.prototype, {\n\n    \tisObject3D: true,\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n    \t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n    \t},\n\n    \tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n    \t\t// assumes axis is normalized\n\n    \t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n    \t},\n\n    \tsetRotationFromEuler: function ( euler ) {\n\n    \t\tthis.quaternion.setFromEuler( euler, true );\n\n    \t},\n\n    \tsetRotationFromMatrix: function ( m ) {\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tthis.quaternion.setFromRotationMatrix( m );\n\n    \t},\n\n    \tsetRotationFromQuaternion: function ( q ) {\n\n    \t\t// assumes q is normalized\n\n    \t\tthis.quaternion.copy( q );\n\n    \t},\n\n    \trotateOnAxis: function () {\n\n    \t\t// rotate object on axis in object space\n    \t\t// axis is assumed to be normalized\n\n    \t\tvar q1 = new Quaternion();\n\n    \t\treturn function rotateOnAxis( axis, angle ) {\n\n    \t\t\tq1.setFromAxisAngle( axis, angle );\n\n    \t\t\tthis.quaternion.multiply( q1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateX: function () {\n\n    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateOnAxis: function () {\n\n    \t\t// translate object by distance along axis in object space\n    \t\t// axis is assumed to be normalized\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function translateOnAxis( axis, distance ) {\n\n    \t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n    \t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateX: function () {\n\n    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\n    \t\treturn function translateX( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateY: function () {\n\n    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\n    \t\treturn function translateY( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateZ: function () {\n\n    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\n    \t\treturn function translateZ( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \tlocalToWorld: function ( vector ) {\n\n    \t\treturn vector.applyMatrix4( this.matrixWorld );\n\n    \t},\n\n    \tworldToLocal: function () {\n\n    \t\tvar m1 = new Matrix4();\n\n    \t\treturn function worldToLocal( vector ) {\n\n    \t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\t// This routine does not support objects with rotated and/or translated parent(s)\n\n    \t\tvar m1 = new Matrix4();\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tm1.lookAt( vector, this.position, this.up );\n\n    \t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n    \t\t};\n\n    \t}(),\n\n    \tadd: function ( object ) {\n\n    \t\tif ( arguments.length > 1 ) {\n\n    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n    \t\t\t\tthis.add( arguments[ i ] );\n\n    \t\t\t}\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tif ( object === this ) {\n\n    \t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tif ( (object && object.isObject3D) ) {\n\n    \t\t\tif ( object.parent !== null ) {\n\n    \t\t\t\tobject.parent.remove( object );\n\n    \t\t\t}\n\n    \t\t\tobject.parent = this;\n    \t\t\tobject.dispatchEvent( { type: 'added' } );\n\n    \t\t\tthis.children.push( object );\n\n    \t\t} else {\n\n    \t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tremove: function ( object ) {\n\n    \t\tif ( arguments.length > 1 ) {\n\n    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n    \t\t\t\tthis.remove( arguments[ i ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar index = this.children.indexOf( object );\n\n    \t\tif ( index !== - 1 ) {\n\n    \t\t\tobject.parent = null;\n\n    \t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n    \t\t\tthis.children.splice( index, 1 );\n\n    \t\t}\n\n    \t},\n\n    \tgetObjectById: function ( id ) {\n\n    \t\treturn this.getObjectByProperty( 'id', id );\n\n    \t},\n\n    \tgetObjectByName: function ( name ) {\n\n    \t\treturn this.getObjectByProperty( 'name', name );\n\n    \t},\n\n    \tgetObjectByProperty: function ( name, value ) {\n\n    \t\tif ( this[ name ] === value ) return this;\n\n    \t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n    \t\t\tvar child = this.children[ i ];\n    \t\t\tvar object = child.getObjectByProperty( name, value );\n\n    \t\t\tif ( object !== undefined ) {\n\n    \t\t\t\treturn object;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn undefined;\n\n    \t},\n\n    \tgetWorldPosition: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tthis.updateMatrixWorld( true );\n\n    \t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n    \t},\n\n    \tgetWorldQuaternion: function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar scale = new Vector3();\n\n    \t\treturn function getWorldQuaternion( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Quaternion();\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldRotation: function () {\n\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldRotation( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Euler();\n\n    \t\t\tthis.getWorldQuaternion( quaternion );\n\n    \t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldScale: function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldScale( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldDirection: function () {\n\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldDirection( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tthis.getWorldQuaternion( quaternion );\n\n    \t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n    \t\t};\n\n    \t}(),\n\n    \traycast: function () {},\n\n    \ttraverse: function ( callback ) {\n\n    \t\tcallback( this );\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].traverse( callback );\n\n    \t\t}\n\n    \t},\n\n    \ttraverseVisible: function ( callback ) {\n\n    \t\tif ( this.visible === false ) return;\n\n    \t\tcallback( this );\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].traverseVisible( callback );\n\n    \t\t}\n\n    \t},\n\n    \ttraverseAncestors: function ( callback ) {\n\n    \t\tvar parent = this.parent;\n\n    \t\tif ( parent !== null ) {\n\n    \t\t\tcallback( parent );\n\n    \t\t\tparent.traverseAncestors( callback );\n\n    \t\t}\n\n    \t},\n\n    \tupdateMatrix: function () {\n\n    \t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n    \t\tthis.matrixWorldNeedsUpdate = true;\n\n    \t},\n\n    \tupdateMatrixWorld: function ( force ) {\n\n    \t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\n    \t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\n    \t\t\tif ( this.parent === null ) {\n\n    \t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n    \t\t\t}\n\n    \t\t\tthis.matrixWorldNeedsUpdate = false;\n\n    \t\t\tforce = true;\n\n    \t\t}\n\n    \t\t// update children\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].updateMatrixWorld( force );\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\t// meta is '' when called from JSON.stringify\n    \t\tvar isRootObject = ( meta === undefined || meta === '' );\n\n    \t\tvar output = {};\n\n    \t\t// meta is a hash used to collect geometries, materials.\n    \t\t// not providing it implies that this is the root object\n    \t\t// being serialized.\n    \t\tif ( isRootObject ) {\n\n    \t\t\t// initialize meta obj\n    \t\t\tmeta = {\n    \t\t\t\tgeometries: {},\n    \t\t\t\tmaterials: {},\n    \t\t\t\ttextures: {},\n    \t\t\t\timages: {}\n    \t\t\t};\n\n    \t\t\toutput.metadata = {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Object',\n    \t\t\t\tgenerator: 'Object3D.toJSON'\n    \t\t\t};\n\n    \t\t}\n\n    \t\t// standard Object3D serialization\n\n    \t\tvar object = {};\n\n    \t\tobject.uuid = this.uuid;\n    \t\tobject.type = this.type;\n\n    \t\tif ( this.name !== '' ) object.name = this.name;\n    \t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n    \t\tif ( this.castShadow === true ) object.castShadow = true;\n    \t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n    \t\tif ( this.visible === false ) object.visible = false;\n\n    \t\tobject.matrix = this.matrix.toArray();\n\n    \t\t//\n\n    \t\tif ( this.geometry !== undefined ) {\n\n    \t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\n    \t\t\t}\n\n    \t\t\tobject.geometry = this.geometry.uuid;\n\n    \t\t}\n\n    \t\tif ( this.material !== undefined ) {\n\n    \t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\n    \t\t\t}\n\n    \t\t\tobject.material = this.material.uuid;\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( this.children.length > 0 ) {\n\n    \t\t\tobject.children = [];\n\n    \t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n    \t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( isRootObject ) {\n\n    \t\t\tvar geometries = extractFromCache( meta.geometries );\n    \t\t\tvar materials = extractFromCache( meta.materials );\n    \t\t\tvar textures = extractFromCache( meta.textures );\n    \t\t\tvar images = extractFromCache( meta.images );\n\n    \t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n    \t\t\tif ( materials.length > 0 ) output.materials = materials;\n    \t\t\tif ( textures.length > 0 ) output.textures = textures;\n    \t\t\tif ( images.length > 0 ) output.images = images;\n\n    \t\t}\n\n    \t\toutput.object = object;\n\n    \t\treturn output;\n\n    \t\t// extract data from the cache hash\n    \t\t// remove metadata on each item\n    \t\t// and return as array\n    \t\tfunction extractFromCache( cache ) {\n\n    \t\t\tvar values = [];\n    \t\t\tfor ( var key in cache ) {\n\n    \t\t\t\tvar data = cache[ key ];\n    \t\t\t\tdelete data.metadata;\n    \t\t\t\tvalues.push( data );\n\n    \t\t\t}\n    \t\t\treturn values;\n\n    \t\t}\n\n    \t},\n\n    \tclone: function ( recursive ) {\n\n    \t\treturn new this.constructor().copy( this, recursive );\n\n    \t},\n\n    \tcopy: function ( source, recursive ) {\n\n    \t\tif ( recursive === undefined ) recursive = true;\n\n    \t\tthis.name = source.name;\n\n    \t\tthis.up.copy( source.up );\n\n    \t\tthis.position.copy( source.position );\n    \t\tthis.quaternion.copy( source.quaternion );\n    \t\tthis.scale.copy( source.scale );\n\n    \t\tthis.matrix.copy( source.matrix );\n    \t\tthis.matrixWorld.copy( source.matrixWorld );\n\n    \t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n    \t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n    \t\tthis.visible = source.visible;\n\n    \t\tthis.castShadow = source.castShadow;\n    \t\tthis.receiveShadow = source.receiveShadow;\n\n    \t\tthis.frustumCulled = source.frustumCulled;\n    \t\tthis.renderOrder = source.renderOrder;\n\n    \t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n    \t\tif ( recursive === true ) {\n\n    \t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n    \t\t\t\tvar child = source.children[ i ];\n    \t\t\t\tthis.add( child.clone() );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    var count$2 = 0;\n    function Object3DIdCount() { return count$2++; };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Line3( start, end ) {\n\n    \tthis.start = ( start !== undefined ) ? start : new Vector3();\n    \tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n    }\n\n    Line3.prototype = {\n\n    \tconstructor: Line3,\n\n    \tset: function ( start, end ) {\n\n    \t\tthis.start.copy( start );\n    \t\tthis.end.copy( end );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( line ) {\n\n    \t\tthis.start.copy( line.start );\n    \t\tthis.end.copy( line.end );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tdelta: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.subVectors( this.end, this.start );\n\n    \t},\n\n    \tdistanceSq: function () {\n\n    \t\treturn this.start.distanceToSquared( this.end );\n\n    \t},\n\n    \tdistance: function () {\n\n    \t\treturn this.start.distanceTo( this.end );\n\n    \t},\n\n    \tat: function ( t, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n    \t},\n\n    \tclosestPointToPointParameter: function () {\n\n    \t\tvar startP = new Vector3();\n    \t\tvar startEnd = new Vector3();\n\n    \t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n    \t\t\tstartP.subVectors( point, this.start );\n    \t\t\tstartEnd.subVectors( this.end, this.start );\n\n    \t\t\tvar startEnd2 = startEnd.dot( startEnd );\n    \t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n    \t\t\tvar t = startEnd_startP / startEnd2;\n\n    \t\t\tif ( clampToLine ) {\n\n    \t\t\t\tt = exports.Math.clamp( t, 0, 1 );\n\n    \t\t\t}\n\n    \t\t\treturn t;\n\n    \t\t};\n\n    \t}(),\n\n    \tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n    \t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n    \t},\n\n    \tapplyMatrix4: function ( matrix ) {\n\n    \t\tthis.start.applyMatrix4( matrix );\n    \t\tthis.end.applyMatrix4( matrix );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( line ) {\n\n    \t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Triangle( a, b, c ) {\n\n    \tthis.a = ( a !== undefined ) ? a : new Vector3();\n    \tthis.b = ( b !== undefined ) ? b : new Vector3();\n    \tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n    }\n\n    Triangle.normal = function () {\n\n    \tvar v0 = new Vector3();\n\n    \treturn function normal( a, b, c, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tresult.subVectors( c, b );\n    \t\tv0.subVectors( a, b );\n    \t\tresult.cross( v0 );\n\n    \t\tvar resultLengthSq = result.lengthSq();\n    \t\tif ( resultLengthSq > 0 ) {\n\n    \t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n    \t\t}\n\n    \t\treturn result.set( 0, 0, 0 );\n\n    \t};\n\n    }();\n\n    // static/instance method to calculate barycentric coordinates\n    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n    Triangle.barycoordFromPoint = function () {\n\n    \tvar v0 = new Vector3();\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n\n    \treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n    \t\tv0.subVectors( c, a );\n    \t\tv1.subVectors( b, a );\n    \t\tv2.subVectors( point, a );\n\n    \t\tvar dot00 = v0.dot( v0 );\n    \t\tvar dot01 = v0.dot( v1 );\n    \t\tvar dot02 = v0.dot( v2 );\n    \t\tvar dot11 = v1.dot( v1 );\n    \t\tvar dot12 = v1.dot( v2 );\n\n    \t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\t// collinear or singular triangle\n    \t\tif ( denom === 0 ) {\n\n    \t\t\t// arbitrary location outside of triangle?\n    \t\t\t// not sure if this is the best idea, maybe should be returning undefined\n    \t\t\treturn result.set( - 2, - 1, - 1 );\n\n    \t\t}\n\n    \t\tvar invDenom = 1 / denom;\n    \t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n    \t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n    \t\t// barycentric coordinates must always sum to 1\n    \t\treturn result.set( 1 - u - v, v, u );\n\n    \t};\n\n    }();\n\n    Triangle.containsPoint = function () {\n\n    \tvar v1 = new Vector3();\n\n    \treturn function containsPoint( point, a, b, c ) {\n\n    \t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n    \t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n    \t};\n\n    }();\n\n    Triangle.prototype = {\n\n    \tconstructor: Triangle,\n\n    \tset: function ( a, b, c ) {\n\n    \t\tthis.a.copy( a );\n    \t\tthis.b.copy( b );\n    \t\tthis.c.copy( c );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n    \t\tthis.a.copy( points[ i0 ] );\n    \t\tthis.b.copy( points[ i1 ] );\n    \t\tthis.c.copy( points[ i2 ] );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( triangle ) {\n\n    \t\tthis.a.copy( triangle.a );\n    \t\tthis.b.copy( triangle.b );\n    \t\tthis.c.copy( triangle.c );\n\n    \t\treturn this;\n\n    \t},\n\n    \tarea: function () {\n\n    \t\tvar v0 = new Vector3();\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function area() {\n\n    \t\t\tv0.subVectors( this.c, this.b );\n    \t\t\tv1.subVectors( this.a, this.b );\n\n    \t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n    \t\t};\n\n    \t}(),\n\n    \tmidpoint: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n    \t},\n\n    \tnormal: function ( optionalTarget ) {\n\n    \t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n    \t},\n\n    \tplane: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Plane();\n\n    \t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n    \t},\n\n    \tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n    \t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n    \t},\n\n    \tclosestPointToPoint: function () {\n\n    \t\tvar plane, edgeList, projectedPoint, closestPoint;\n\n    \t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n    \t\t\tif ( plane === undefined ) {\n\n    \t\t\t\tplane = new Plane();\n    \t\t\t\tedgeList = [ new Line3(), new Line3(), new Line3() ];\n    \t\t\t\tprojectedPoint = new Vector3();\n    \t\t\t\tclosestPoint = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n    \t\t\tvar minDistance = Infinity;\n\n    \t\t\t// project the point onto the plane of the triangle\n\n    \t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n    \t\t\tplane.projectPoint( point, projectedPoint );\n\n    \t\t\t// check if the projection lies within the triangle\n\n    \t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\n    \t\t\t\t// if so, this is the closest point\n\n    \t\t\t\tresult.copy( projectedPoint );\n\n    \t\t\t} else {\n\n    \t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n    \t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n    \t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n    \t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n    \t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\n    \t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n    \t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n    \t\t\t\t\tif( distance < minDistance ) {\n\n    \t\t\t\t\t\tminDistance = distance;\n\n    \t\t\t\t\t\tresult.copy( closestPoint );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tequals: function ( triangle ) {\n\n    \t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Face3( a, b, c, normal, color, materialIndex ) {\n\n    \tthis.a = a;\n    \tthis.b = b;\n    \tthis.c = c;\n\n    \tthis.normal = (normal && normal.isVector3) ? normal : new Vector3();\n    \tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n    \tthis.color = (color && color.isColor) ? color : new Color();\n    \tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n    \tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n    }\n\n    Face3.prototype = {\n\n    \tconstructor: Face3,\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.a = source.a;\n    \t\tthis.b = source.b;\n    \t\tthis.c = source.c;\n\n    \t\tthis.normal.copy( source.normal );\n    \t\tthis.color.copy( source.color );\n\n    \t\tthis.materialIndex = source.materialIndex;\n\n    \t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  shading: THREE.SmoothShading,\n     *  depthTest: <bool>,\n     *  depthWrite: <bool>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>\n     * }\n     */\n\n    function MeshBasicMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshBasicMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // emissive\n\n    \tthis.map = null;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshBasicMaterial.prototype = Object.create( Material.prototype );\n    MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n    MeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n    MeshBasicMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferAttribute( array, itemSize, normalized ) {\n\n    \tif ( Array.isArray( array ) ) {\n\n    \t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n    \t}\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.array = array;\n    \tthis.itemSize = itemSize;\n    \tthis.count = array !== undefined ? array.length / itemSize : 0;\n    \tthis.normalized = normalized === true;\n\n    \tthis.dynamic = false;\n    \tthis.updateRange = { offset: 0, count: - 1 };\n\n    \tthis.version = 0;\n\n    }\n\n    BufferAttribute.prototype = {\n\n    \tconstructor: BufferAttribute,\n\n    \tisBufferAttribute: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tsetDynamic: function ( value ) {\n\n    \t\tthis.dynamic = value;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.array = new source.array.constructor( source.array );\n    \t\tthis.itemSize = source.itemSize;\n    \t\tthis.count = source.count;\n    \t\tthis.normalized = source.normalized;\n\n    \t\tthis.dynamic = source.dynamic;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyAt: function ( index1, attribute, index2 ) {\n\n    \t\tindex1 *= this.itemSize;\n    \t\tindex2 *= attribute.itemSize;\n\n    \t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyArray: function ( array ) {\n\n    \t\tthis.array.set( array );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyColorsArray: function ( colors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n    \t\t\tvar color = colors[ i ];\n\n    \t\t\tif ( color === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n    \t\t\t\tcolor = new Color();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = color.r;\n    \t\t\tarray[ offset ++ ] = color.g;\n    \t\t\tarray[ offset ++ ] = color.b;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyIndicesArray: function ( indices ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n    \t\t\tvar index = indices[ i ];\n\n    \t\t\tarray[ offset ++ ] = index.a;\n    \t\t\tarray[ offset ++ ] = index.b;\n    \t\t\tarray[ offset ++ ] = index.c;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector2sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector2();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector3sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n    \t\t\tarray[ offset ++ ] = vector.z;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector4sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector4();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n    \t\t\tarray[ offset ++ ] = vector.z;\n    \t\t\tarray[ offset ++ ] = vector.w;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tset: function ( value, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.array.set( value, offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetX: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize ];\n\n    \t},\n\n    \tsetX: function ( index, x ) {\n\n    \t\tthis.array[ index * this.itemSize ] = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetY: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 1 ];\n\n    \t},\n\n    \tsetY: function ( index, y ) {\n\n    \t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetZ: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 2 ];\n\n    \t},\n\n    \tsetZ: function ( index, z ) {\n\n    \t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetW: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 3 ];\n\n    \t},\n\n    \tsetW: function ( index, w ) {\n\n    \t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXY: function ( index, x, y ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZ: function ( index, x, y, z ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n    \t\tthis.array[ index + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZW: function ( index, x, y, z, w ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n    \t\tthis.array[ index + 2 ] = z;\n    \t\tthis.array[ index + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t}\n\n    };\n\n    //\n\n    function Int8Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int8Array( array ), itemSize );\n\n    }\n\n    function Uint8Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint8Array( array ), itemSize );\n\n    }\n\n    function Uint8ClampedAttribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\n    }\n\n    function Int16Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int16Array( array ), itemSize );\n\n    }\n\n    function Uint16Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint16Array( array ), itemSize );\n\n    }\n\n    function Int32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int32Array( array ), itemSize );\n\n    }\n\n    function Uint32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint32Array( array ), itemSize );\n\n    }\n\n    function Float32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Float32Array( array ), itemSize );\n\n    }\n\n    function Float64Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Float64Array( array ), itemSize );\n\n    }\n\n    // Deprecated\n\n    function DynamicBufferAttribute( array, itemSize ) {\n\n    \tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n    \treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author kile / http://kile.stravaganza.org/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author bhouston / http://clara.io\n     */\n\n    function Geometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Geometry';\n\n    \tthis.vertices = [];\n    \tthis.colors = [];\n    \tthis.faces = [];\n    \tthis.faceVertexUvs = [ [] ];\n\n    \tthis.morphTargets = [];\n    \tthis.morphNormals = [];\n\n    \tthis.skinWeights = [];\n    \tthis.skinIndices = [];\n\n    \tthis.lineDistances = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \t// update flags\n\n    \tthis.elementsNeedUpdate = false;\n    \tthis.verticesNeedUpdate = false;\n    \tthis.uvsNeedUpdate = false;\n    \tthis.normalsNeedUpdate = false;\n    \tthis.colorsNeedUpdate = false;\n    \tthis.lineDistancesNeedUpdate = false;\n    \tthis.groupsNeedUpdate = false;\n\n    }\n\n    Object.assign( Geometry.prototype, EventDispatcher.prototype, {\n\n    \tisGeometry: true,\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n    \t\t\tvar vertex = this.vertices[ i ];\n    \t\t\tvertex.applyMatrix4( matrix );\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n    \t\t\tvar face = this.faces[ i ];\n    \t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.boundingBox !== null ) {\n\n    \t\t\tthis.computeBoundingBox();\n\n    \t\t}\n\n    \t\tif ( this.boundingSphere !== null ) {\n\n    \t\t\tthis.computeBoundingSphere();\n\n    \t\t}\n\n    \t\tthis.verticesNeedUpdate = true;\n    \t\tthis.normalsNeedUpdate = true;\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateX: function () {\n\n    \t\t// rotate geometry around world x-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationX( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\t// rotate geometry around world y-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationY( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\t// rotate geometry around world z-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationZ( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function () {\n\n    \t\t// translate geometry\n\n    \t\tvar m1;\n\n    \t\treturn function translate( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeTranslation( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tscale: function () {\n\n    \t\t// scale geometry\n\n    \t\tvar m1;\n\n    \t\treturn function scale( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeScale( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\tvar obj;\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\n    \t\t\tobj.lookAt( vector );\n\n    \t\t\tobj.updateMatrix();\n\n    \t\t\tthis.applyMatrix( obj.matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tfromBufferGeometry: function ( geometry ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n    \t\tvar attributes = geometry.attributes;\n\n    \t\tvar positions = attributes.position.array;\n    \t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n    \t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n    \t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n    \t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n    \t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n    \t\tvar tempNormals = [];\n    \t\tvar tempUVs = [];\n    \t\tvar tempUVs2 = [];\n\n    \t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n    \t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n    \t\t\tif ( normals !== undefined ) {\n\n    \t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( colors !== undefined ) {\n\n    \t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs !== undefined ) {\n\n    \t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs2 !== undefined ) {\n\n    \t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction addFace( a, b, c, materialIndex ) {\n\n    \t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n    \t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n    \t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n    \t\t\tscope.faces.push( face );\n\n    \t\t\tif ( uvs !== undefined ) {\n\n    \t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs2 !== undefined ) {\n\n    \t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( indices !== undefined ) {\n\n    \t\t\tvar groups = geometry.groups;\n\n    \t\t\tif ( groups.length > 0 ) {\n\n    \t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n    \t\t\t\t\tvar group = groups[ i ];\n\n    \t\t\t\t\tvar start = group.start;\n    \t\t\t\t\tvar count = group.count;\n\n    \t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n    \t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n    \t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n    \t\t\t\taddFace( i, i + 1, i + 2 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.computeFaceNormals();\n\n    \t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t}\n\n    \t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcenter: function () {\n\n    \t\tthis.computeBoundingBox();\n\n    \t\tvar offset = this.boundingBox.getCenter().negate();\n\n    \t\tthis.translate( offset.x, offset.y, offset.z );\n\n    \t\treturn offset;\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\tthis.computeBoundingSphere();\n\n    \t\tvar center = this.boundingSphere.center;\n    \t\tvar radius = this.boundingSphere.radius;\n\n    \t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n    \t\tvar matrix = new Matrix4();\n    \t\tmatrix.set(\n    \t\t\ts, 0, 0, - s * center.x,\n    \t\t\t0, s, 0, - s * center.y,\n    \t\t\t0, 0, s, - s * center.z,\n    \t\t\t0, 0, 0, 1\n    \t\t);\n\n    \t\tthis.applyMatrix( matrix );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcomputeFaceNormals: function () {\n\n    \t\tvar cb = new Vector3(), ab = new Vector3();\n\n    \t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tvar face = this.faces[ f ];\n\n    \t\t\tvar vA = this.vertices[ face.a ];\n    \t\t\tvar vB = this.vertices[ face.b ];\n    \t\t\tvar vC = this.vertices[ face.c ];\n\n    \t\t\tcb.subVectors( vC, vB );\n    \t\t\tab.subVectors( vA, vB );\n    \t\t\tcb.cross( ab );\n\n    \t\t\tcb.normalize();\n\n    \t\t\tface.normal.copy( cb );\n\n    \t\t}\n\n    \t},\n\n    \tcomputeVertexNormals: function ( areaWeighted ) {\n\n    \t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n    \t\tvar v, vl, f, fl, face, vertices;\n\n    \t\tvertices = new Array( this.vertices.length );\n\n    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n    \t\t\tvertices[ v ] = new Vector3();\n\n    \t\t}\n\n    \t\tif ( areaWeighted ) {\n\n    \t\t\t// vertex normals weighted by triangle areas\n    \t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n    \t\t\tvar vA, vB, vC;\n    \t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tvA = this.vertices[ face.a ];\n    \t\t\t\tvB = this.vertices[ face.b ];\n    \t\t\t\tvC = this.vertices[ face.c ];\n\n    \t\t\t\tcb.subVectors( vC, vB );\n    \t\t\t\tab.subVectors( vA, vB );\n    \t\t\t\tcb.cross( ab );\n\n    \t\t\t\tvertices[ face.a ].add( cb );\n    \t\t\t\tvertices[ face.b ].add( cb );\n    \t\t\t\tvertices[ face.c ].add( cb );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tvertices[ face.a ].add( face.normal );\n    \t\t\t\tvertices[ face.b ].add( face.normal );\n    \t\t\t\tvertices[ face.c ].add( face.normal );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n    \t\t\tvertices[ v ].normalize();\n\n    \t\t}\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\tif ( vertexNormals.length === 3 ) {\n\n    \t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n    \t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n    \t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n    \t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n    \t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.faces.length > 0 ) {\n\n    \t\t\tthis.normalsNeedUpdate = true;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeMorphNormals: function () {\n\n    \t\tvar i, il, f, fl, face;\n\n    \t\t// save original normals\n    \t\t// - create temp variables on first access\n    \t\t//   otherwise just copy (for faster repeated calls)\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tif ( ! face.__originalFaceNormal ) {\n\n    \t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n    \t\t\t} else {\n\n    \t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n    \t\t\t}\n\n    \t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n    \t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n    \t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n    \t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// use temp geometry to compute face and vertex normals for each morph\n\n    \t\tvar tmpGeo = new Geometry();\n    \t\ttmpGeo.faces = this.faces;\n\n    \t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n    \t\t\t// create on first access\n\n    \t\t\tif ( ! this.morphNormals[ i ] ) {\n\n    \t\t\t\tthis.morphNormals[ i ] = {};\n    \t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n    \t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n    \t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n    \t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n    \t\t\t\tvar faceNormal, vertexNormals;\n\n    \t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\t\tfaceNormal = new Vector3();\n    \t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n    \t\t\t\t\tdstNormalsFace.push( faceNormal );\n    \t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar morphNormals = this.morphNormals[ i ];\n\n    \t\t\t// set vertices to morph target\n\n    \t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n    \t\t\t// compute morph normals\n\n    \t\t\ttmpGeo.computeFaceNormals();\n    \t\t\ttmpGeo.computeVertexNormals();\n\n    \t\t\t// store morph normals\n\n    \t\t\tvar faceNormal, vertexNormals;\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n    \t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n    \t\t\t\tfaceNormal.copy( face.normal );\n\n    \t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n    \t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n    \t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// restore original normals\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tface.normal = face.__originalFaceNormal;\n    \t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeTangents: function () {\n\n    \t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n    \t},\n\n    \tcomputeLineDistances: function () {\n\n    \t\tvar d = 0;\n    \t\tvar vertices = this.vertices;\n\n    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\tif ( i > 0 ) {\n\n    \t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n    \t\t\t}\n\n    \t\t\tthis.lineDistances[ i ] = d;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeBoundingBox: function () {\n\n    \t\tif ( this.boundingBox === null ) {\n\n    \t\t\tthis.boundingBox = new Box3();\n\n    \t\t}\n\n    \t\tthis.boundingBox.setFromPoints( this.vertices );\n\n    \t},\n\n    \tcomputeBoundingSphere: function () {\n\n    \t\tif ( this.boundingSphere === null ) {\n\n    \t\t\tthis.boundingSphere = new Sphere();\n\n    \t\t}\n\n    \t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n    \t},\n\n    \tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n    \t\tif ( (geometry && geometry.isGeometry) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar normalMatrix,\n    \t\tvertexOffset = this.vertices.length,\n    \t\tvertices1 = this.vertices,\n    \t\tvertices2 = geometry.vertices,\n    \t\tfaces1 = this.faces,\n    \t\tfaces2 = geometry.faces,\n    \t\tuvs1 = this.faceVertexUvs[ 0 ],\n    \t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n    \t\tcolors1 = this.colors,\n    \t\tcolors2 = geometry.colors;\n\n    \t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n    \t\tif ( matrix !== undefined ) {\n\n    \t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\t}\n\n    \t\t// vertices\n\n    \t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n    \t\t\tvar vertex = vertices2[ i ];\n\n    \t\t\tvar vertexCopy = vertex.clone();\n\n    \t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n    \t\t\tvertices1.push( vertexCopy );\n\n    \t\t}\n\n    \t\t// colors\n\n    \t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n    \t\t\tcolors1.push( colors2[ i ].clone() );\n\n    \t\t}\n\n    \t\t// faces\n\n    \t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n    \t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n    \t\t\tfaceVertexNormals = face.vertexNormals,\n    \t\t\tfaceVertexColors = face.vertexColors;\n\n    \t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n    \t\t\tfaceCopy.normal.copy( face.normal );\n\n    \t\t\tif ( normalMatrix !== undefined ) {\n\n    \t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n    \t\t\t\tif ( normalMatrix !== undefined ) {\n\n    \t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t\t}\n\n    \t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n    \t\t\t}\n\n    \t\t\tfaceCopy.color.copy( face.color );\n\n    \t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n    \t\t\t\tcolor = faceVertexColors[ j ];\n    \t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n    \t\t\t}\n\n    \t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n    \t\t\tfaces1.push( faceCopy );\n\n    \t\t}\n\n    \t\t// uvs\n\n    \t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n    \t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n    \t\t\tif ( uv === undefined ) {\n\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n    \t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n    \t\t\t}\n\n    \t\t\tuvs1.push( uvCopy );\n\n    \t\t}\n\n    \t},\n\n    \tmergeMesh: function ( mesh ) {\n\n    \t\tif ( (mesh && mesh.isMesh) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n    \t\tthis.merge( mesh.geometry, mesh.matrix );\n\n    \t},\n\n    \t/*\n    \t * Checks for duplicate vertices with hashmap.\n    \t * Duplicated vertices are removed\n    \t * and faces' vertices are updated.\n    \t */\n\n    \tmergeVertices: function () {\n\n    \t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n    \t\tvar unique = [], changes = [];\n\n    \t\tvar v, key;\n    \t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n    \t\tvar precision = Math.pow( 10, precisionPoints );\n    \t\tvar i, il, face;\n    \t\tvar indices, j, jl;\n\n    \t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n    \t\t\tv = this.vertices[ i ];\n    \t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n    \t\t\tif ( verticesMap[ key ] === undefined ) {\n\n    \t\t\t\tverticesMap[ key ] = i;\n    \t\t\t\tunique.push( this.vertices[ i ] );\n    \t\t\t\tchanges[ i ] = unique.length - 1;\n\n    \t\t\t} else {\n\n    \t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n    \t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\t// if faces are completely degenerate after merging vertices, we\n    \t\t// have to remove them from the geometry.\n    \t\tvar faceIndicesToRemove = [];\n\n    \t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n    \t\t\tface = this.faces[ i ];\n\n    \t\t\tface.a = changes[ face.a ];\n    \t\t\tface.b = changes[ face.b ];\n    \t\t\tface.c = changes[ face.c ];\n\n    \t\t\tindices = [ face.a, face.b, face.c ];\n\n    \t\t\tvar dupIndex = - 1;\n\n    \t\t\t// if any duplicate vertices are found in a Face3\n    \t\t\t// we have to remove the face as nothing can be saved\n    \t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n    \t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n    \t\t\t\t\tdupIndex = n;\n    \t\t\t\t\tfaceIndicesToRemove.push( i );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n    \t\t\tvar idx = faceIndicesToRemove[ i ];\n\n    \t\t\tthis.faces.splice( idx, 1 );\n\n    \t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n    \t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Use unique set of vertices\n\n    \t\tvar diff = this.vertices.length - unique.length;\n    \t\tthis.vertices = unique;\n    \t\treturn diff;\n\n    \t},\n\n    \tsortFacesByMaterialIndex: function () {\n\n    \t\tvar faces = this.faces;\n    \t\tvar length = faces.length;\n\n    \t\t// tag faces\n\n    \t\tfor ( var i = 0; i < length; i ++ ) {\n\n    \t\t\tfaces[ i ]._id = i;\n\n    \t\t}\n\n    \t\t// sort faces\n\n    \t\tfunction materialIndexSort( a, b ) {\n\n    \t\t\treturn a.materialIndex - b.materialIndex;\n\n    \t\t}\n\n    \t\tfaces.sort( materialIndexSort );\n\n    \t\t// sort uvs\n\n    \t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n    \t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n    \t\tvar newUvs1, newUvs2;\n\n    \t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n    \t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n    \t\tfor ( var i = 0; i < length; i ++ ) {\n\n    \t\t\tvar id = faces[ i ]._id;\n\n    \t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n    \t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n    \t\t}\n\n    \t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n    \t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Geometry',\n    \t\t\t\tgenerator: 'Geometry.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard Geometry serialization\n\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( this.parameters !== undefined ) {\n\n    \t\t\tvar parameters = this.parameters;\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n    \t\t\t}\n\n    \t\t\treturn data;\n\n    \t\t}\n\n    \t\tvar vertices = [];\n\n    \t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n    \t\t\tvar vertex = this.vertices[ i ];\n    \t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n    \t\t}\n\n    \t\tvar faces = [];\n    \t\tvar normals = [];\n    \t\tvar normalsHash = {};\n    \t\tvar colors = [];\n    \t\tvar colorsHash = {};\n    \t\tvar uvs = [];\n    \t\tvar uvsHash = {};\n\n    \t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n    \t\t\tvar face = this.faces[ i ];\n\n    \t\t\tvar hasMaterial = true;\n    \t\t\tvar hasFaceUv = false; // deprecated\n    \t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n    \t\t\tvar hasFaceNormal = face.normal.length() > 0;\n    \t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n    \t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n    \t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n    \t\t\tvar faceType = 0;\n\n    \t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n    \t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n    \t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n    \t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n    \t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n    \t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n    \t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n    \t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n    \t\t\tfaces.push( faceType );\n    \t\t\tfaces.push( face.a, face.b, face.c );\n    \t\t\tfaces.push( face.materialIndex );\n\n    \t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\tvar vertexColors = face.vertexColors;\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n    \t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n    \t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction setBit( value, position, enabled ) {\n\n    \t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n    \t\t}\n\n    \t\tfunction getNormalIndex( normal ) {\n\n    \t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n    \t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn normalsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tnormalsHash[ hash ] = normals.length / 3;\n    \t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n    \t\t\treturn normalsHash[ hash ];\n\n    \t\t}\n\n    \t\tfunction getColorIndex( color ) {\n\n    \t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n    \t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn colorsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tcolorsHash[ hash ] = colors.length;\n    \t\t\tcolors.push( color.getHex() );\n\n    \t\t\treturn colorsHash[ hash ];\n\n    \t\t}\n\n    \t\tfunction getUvIndex( uv ) {\n\n    \t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n    \t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn uvsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tuvsHash[ hash ] = uvs.length / 2;\n    \t\t\tuvs.push( uv.x, uv.y );\n\n    \t\t\treturn uvsHash[ hash ];\n\n    \t\t}\n\n    \t\tdata.data = {};\n\n    \t\tdata.data.vertices = vertices;\n    \t\tdata.data.normals = normals;\n    \t\tif ( colors.length > 0 ) data.data.colors = colors;\n    \t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n    \t\tdata.data.faces = faces;\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\t/*\n    \t\t// Handle primitives\n\n    \t\tvar parameters = this.parameters;\n\n    \t\tif ( parameters !== undefined ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tvalues.push( parameters[ key ] );\n\n    \t\t\t}\n\n    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n    \t\t\tthis.constructor.apply( geometry, values );\n    \t\t\treturn geometry;\n\n    \t\t}\n\n    \t\treturn new this.constructor().copy( this );\n    \t\t*/\n\n    \t\treturn new Geometry().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.vertices = [];\n    \t\tthis.faces = [];\n    \t\tthis.faceVertexUvs = [ [] ];\n    \t\tthis.colors = [];\n\n    \t\tvar vertices = source.vertices;\n\n    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n    \t\t}\n\n    \t\tvar colors = source.colors;\n\n    \t\tfor ( var i = 0, il = colors.length; i < il; i ++ ) {\n\n    \t\t\tthis.colors.push( colors[ i ].clone() );\n\n    \t\t}\n\n    \t\tvar faces = source.faces;\n\n    \t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\n    \t\t\tthis.faces.push( faces[ i ].clone() );\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n    \t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n    \t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n    \t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n    \t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n    \t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n    \t\t\t\t\tvar uv = uvs[ k ];\n\n    \t\t\t\t\tuvsCopy.push( uv.clone() );\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    var count$3 = 0;\n    function GeometryIdCount() { return count$3++; };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function DirectGeometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'DirectGeometry';\n\n    \tthis.indices = [];\n    \tthis.vertices = [];\n    \tthis.normals = [];\n    \tthis.colors = [];\n    \tthis.uvs = [];\n    \tthis.uvs2 = [];\n\n    \tthis.groups = [];\n\n    \tthis.morphTargets = {};\n\n    \tthis.skinWeights = [];\n    \tthis.skinIndices = [];\n\n    \t// this.lineDistances = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \t// update flags\n\n    \tthis.verticesNeedUpdate = false;\n    \tthis.normalsNeedUpdate = false;\n    \tthis.colorsNeedUpdate = false;\n    \tthis.uvsNeedUpdate = false;\n    \tthis.groupsNeedUpdate = false;\n\n    }\n\n    Object.assign( DirectGeometry.prototype, EventDispatcher.prototype, {\n\n    \tcomputeBoundingBox: Geometry.prototype.computeBoundingBox,\n    \tcomputeBoundingSphere: Geometry.prototype.computeBoundingSphere,\n\n    \tcomputeFaceNormals: function () {\n\n    \t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\n    \t},\n\n    \tcomputeVertexNormals: function () {\n\n    \t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\n    \t},\n\n    \tcomputeGroups: function ( geometry ) {\n\n    \t\tvar group;\n    \t\tvar groups = [];\n    \t\tvar materialIndex;\n\n    \t\tvar faces = geometry.faces;\n\n    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\t// materials\n\n    \t\t\tif ( face.materialIndex !== materialIndex ) {\n\n    \t\t\t\tmaterialIndex = face.materialIndex;\n\n    \t\t\t\tif ( group !== undefined ) {\n\n    \t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n    \t\t\t\t\tgroups.push( group );\n\n    \t\t\t\t}\n\n    \t\t\t\tgroup = {\n    \t\t\t\t\tstart: i * 3,\n    \t\t\t\t\tmaterialIndex: materialIndex\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( group !== undefined ) {\n\n    \t\t\tgroup.count = ( i * 3 ) - group.start;\n    \t\t\tgroups.push( group );\n\n    \t\t}\n\n    \t\tthis.groups = groups;\n\n    \t},\n\n    \tfromGeometry: function ( geometry ) {\n\n    \t\tvar faces = geometry.faces;\n    \t\tvar vertices = geometry.vertices;\n    \t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n    \t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n    \t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n    \t\t// morphs\n\n    \t\tvar morphTargets = geometry.morphTargets;\n    \t\tvar morphTargetsLength = morphTargets.length;\n\n    \t\tvar morphTargetsPosition;\n\n    \t\tif ( morphTargetsLength > 0 ) {\n\n    \t\t\tmorphTargetsPosition = [];\n\n    \t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n    \t\t\t\tmorphTargetsPosition[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n    \t\t}\n\n    \t\tvar morphNormals = geometry.morphNormals;\n    \t\tvar morphNormalsLength = morphNormals.length;\n\n    \t\tvar morphTargetsNormal;\n\n    \t\tif ( morphNormalsLength > 0 ) {\n\n    \t\t\tmorphTargetsNormal = [];\n\n    \t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n    \t\t\t\tmorphTargetsNormal[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n    \t\t}\n\n    \t\t// skins\n\n    \t\tvar skinIndices = geometry.skinIndices;\n    \t\tvar skinWeights = geometry.skinWeights;\n\n    \t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n    \t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n    \t\t//\n\n    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n    \t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\tif ( vertexNormals.length === 3 ) {\n\n    \t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvar normal = face.normal;\n\n    \t\t\t\tthis.normals.push( normal, normal, normal );\n\n    \t\t\t}\n\n    \t\t\tvar vertexColors = face.vertexColors;\n\n    \t\t\tif ( vertexColors.length === 3 ) {\n\n    \t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvar color = face.color;\n\n    \t\t\t\tthis.colors.push( color, color, color );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexUv === true ) {\n\n    \t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n    \t\t\t\tif ( vertexUvs !== undefined ) {\n\n    \t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n    \t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexUv2 === true ) {\n\n    \t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n    \t\t\t\tif ( vertexUvs !== undefined ) {\n\n    \t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n    \t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\t// morphs\n\n    \t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n    \t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n    \t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n    \t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n    \t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n    \t\t\t}\n\n    \t\t\t// skins\n\n    \t\t\tif ( hasSkinIndices ) {\n\n    \t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n    \t\t\t}\n\n    \t\t\tif ( hasSkinWeights ) {\n\n    \t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.computeGroups( geometry );\n\n    \t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    \t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    \t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    \t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    \t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferGeometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'BufferGeometry';\n\n    \tthis.index = null;\n    \tthis.attributes = {};\n\n    \tthis.morphAttributes = {};\n\n    \tthis.groups = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \tthis.drawRange = { start: 0, count: Infinity };\n\n    }\n\n    Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {\n\n    \tisBufferGeometry: true,\n\n    \tgetIndex: function () {\n\n    \t\treturn this.index;\n\n    \t},\n\n    \tsetIndex: function ( index ) {\n\n    \t\tthis.index = index;\n\n    \t},\n\n    \taddAttribute: function ( name, attribute ) {\n\n    \t\tif ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n    \t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( name === 'index' ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n    \t\t\tthis.setIndex( attribute );\n\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.attributes[ name ] = attribute;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetAttribute: function ( name ) {\n\n    \t\treturn this.attributes[ name ];\n\n    \t},\n\n    \tremoveAttribute: function ( name ) {\n\n    \t\tdelete this.attributes[ name ];\n\n    \t\treturn this;\n\n    \t},\n\n    \taddGroup: function ( start, count, materialIndex ) {\n\n    \t\tthis.groups.push( {\n\n    \t\t\tstart: start,\n    \t\t\tcount: count,\n    \t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n    \t\t} );\n\n    \t},\n\n    \tclearGroups: function () {\n\n    \t\tthis.groups = [];\n\n    \t},\n\n    \tsetDrawRange: function ( start, count ) {\n\n    \t\tthis.drawRange.start = start;\n    \t\tthis.drawRange.count = count;\n\n    \t},\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tvar position = this.attributes.position;\n\n    \t\tif ( position !== undefined ) {\n\n    \t\t\tmatrix.applyToVector3Array( position.array );\n    \t\t\tposition.needsUpdate = true;\n\n    \t\t}\n\n    \t\tvar normal = this.attributes.normal;\n\n    \t\tif ( normal !== undefined ) {\n\n    \t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\t\tnormalMatrix.applyToVector3Array( normal.array );\n    \t\t\tnormal.needsUpdate = true;\n\n    \t\t}\n\n    \t\tif ( this.boundingBox !== null ) {\n\n    \t\t\tthis.computeBoundingBox();\n\n    \t\t}\n\n    \t\tif ( this.boundingSphere !== null ) {\n\n    \t\t\tthis.computeBoundingSphere();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateX: function () {\n\n    \t\t// rotate geometry around world x-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationX( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\t// rotate geometry around world y-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationY( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\t// rotate geometry around world z-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationZ( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function () {\n\n    \t\t// translate geometry\n\n    \t\tvar m1;\n\n    \t\treturn function translate( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeTranslation( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tscale: function () {\n\n    \t\t// scale geometry\n\n    \t\tvar m1;\n\n    \t\treturn function scale( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeScale( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\tvar obj;\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\n    \t\t\tobj.lookAt( vector );\n\n    \t\t\tobj.updateMatrix();\n\n    \t\t\tthis.applyMatrix( obj.matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tcenter: function () {\n\n    \t\tthis.computeBoundingBox();\n\n    \t\tvar offset = this.boundingBox.getCenter().negate();\n\n    \t\tthis.translate( offset.x, offset.y, offset.z );\n\n    \t\treturn offset;\n\n    \t},\n\n    \tsetFromObject: function ( object ) {\n\n    \t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( (object && object.isPoints) || (object && object.isLine) ) {\n\n    \t\t\tvar positions = new Float32Attribute( geometry.vertices.length * 3, 3 );\n    \t\t\tvar colors = new Float32Attribute( geometry.colors.length * 3, 3 );\n\n    \t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n    \t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n    \t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n    \t\t\t\tvar lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );\n\n    \t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n    \t\t\t}\n\n    \t\t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t\t}\n\n    \t\t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t\t}\n\n    \t\t} else if ( (object && object.isMesh) ) {\n\n    \t\t\tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tthis.fromGeometry( geometry );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdateFromObject: function ( object ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( (object && object.isMesh) ) {\n\n    \t\t\tvar direct = geometry.__directGeometry;\n\n    \t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n    \t\t\t\tdirect = undefined;\n    \t\t\t\tgeometry.elementsNeedUpdate = false;\n\n    \t\t\t}\n\n    \t\t\tif ( direct === undefined ) {\n\n    \t\t\t\treturn this.fromGeometry( geometry );\n\n    \t\t\t}\n\n    \t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    \t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    \t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    \t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    \t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n    \t\t\tgeometry.verticesNeedUpdate = false;\n    \t\t\tgeometry.normalsNeedUpdate = false;\n    \t\t\tgeometry.colorsNeedUpdate = false;\n    \t\t\tgeometry.uvsNeedUpdate = false;\n    \t\t\tgeometry.groupsNeedUpdate = false;\n\n    \t\t\tgeometry = direct;\n\n    \t\t}\n\n    \t\tvar attribute;\n\n    \t\tif ( geometry.verticesNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.position;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.verticesNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.normalsNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.normal;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector3sArray( geometry.normals );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.normalsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.colorsNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.color;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyColorsArray( geometry.colors );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.colorsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.uvsNeedUpdate ) {\n\n    \t\t\tattribute = this.attributes.uv;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.uvsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n    \t\t\tattribute = this.attributes.lineDistance;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyArray( geometry.lineDistances );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.groupsNeedUpdate ) {\n\n    \t\t\tgeometry.computeGroups( object.geometry );\n    \t\t\tthis.groups = geometry.groups;\n\n    \t\t\tgeometry.groupsNeedUpdate = false;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tfromGeometry: function ( geometry ) {\n\n    \t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n    \t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n    \t},\n\n    \tfromDirectGeometry: function ( geometry ) {\n\n    \t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n    \t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n    \t\tif ( geometry.normals.length > 0 ) {\n\n    \t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n    \t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n    \t\t}\n\n    \t\tif ( geometry.colors.length > 0 ) {\n\n    \t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n    \t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n    \t\t}\n\n    \t\tif ( geometry.uvs.length > 0 ) {\n\n    \t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n    \t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n    \t\t}\n\n    \t\tif ( geometry.uvs2.length > 0 ) {\n\n    \t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n    \t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n    \t\t}\n\n    \t\tif ( geometry.indices.length > 0 ) {\n\n    \t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n    \t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n    \t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n    \t\t}\n\n    \t\t// groups\n\n    \t\tthis.groups = geometry.groups;\n\n    \t\t// morphs\n\n    \t\tfor ( var name in geometry.morphTargets ) {\n\n    \t\t\tvar array = [];\n    \t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n    \t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n    \t\t\t\tvar morphTarget = morphTargets[ i ];\n\n    \t\t\t\tvar attribute = new Float32Attribute( morphTarget.length * 3, 3 );\n\n    \t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n    \t\t\t}\n\n    \t\t\tthis.morphAttributes[ name ] = array;\n\n    \t\t}\n\n    \t\t// skinning\n\n    \t\tif ( geometry.skinIndices.length > 0 ) {\n\n    \t\t\tvar skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );\n    \t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n    \t\t}\n\n    \t\tif ( geometry.skinWeights.length > 0 ) {\n\n    \t\t\tvar skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );\n    \t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t}\n\n    \t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcomputeBoundingBox: function () {\n\n    \t\tif ( this.boundingBox === null ) {\n\n    \t\t\tthis.boundingBox = new Box3();\n\n    \t\t}\n\n    \t\tvar positions = this.attributes.position.array;\n\n    \t\tif ( positions !== undefined ) {\n\n    \t\t\tthis.boundingBox.setFromArray( positions );\n\n    \t\t} else {\n\n    \t\t\tthis.boundingBox.makeEmpty();\n\n    \t\t}\n\n    \t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n    \t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n    \t\t}\n\n    \t},\n\n    \tcomputeBoundingSphere: function () {\n\n    \t\tvar box = new Box3();\n    \t\tvar vector = new Vector3();\n\n    \t\treturn function computeBoundingSphere() {\n\n    \t\t\tif ( this.boundingSphere === null ) {\n\n    \t\t\t\tthis.boundingSphere = new Sphere();\n\n    \t\t\t}\n\n    \t\t\tvar positions = this.attributes.position;\n\n    \t\t\tif ( positions ) {\n\n    \t\t\t\tvar array = positions.array;\n    \t\t\t\tvar center = this.boundingSphere.center;\n\n    \t\t\t\tbox.setFromArray( array );\n    \t\t\t\tbox.getCenter( center );\n\n    \t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n    \t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n    \t\t\t\tvar maxRadiusSq = 0;\n\n    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\n    \t\t\t\t\tvector.fromArray( array, i );\n    \t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n    \t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}(),\n\n    \tcomputeFaceNormals: function () {\n\n    \t\t// backwards compatibility\n\n    \t},\n\n    \tcomputeVertexNormals: function () {\n\n    \t\tvar index = this.index;\n    \t\tvar attributes = this.attributes;\n    \t\tvar groups = this.groups;\n\n    \t\tif ( attributes.position ) {\n\n    \t\t\tvar positions = attributes.position.array;\n\n    \t\t\tif ( attributes.normal === undefined ) {\n\n    \t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n    \t\t\t} else {\n\n    \t\t\t\t// reset existing normals to zero\n\n    \t\t\t\tvar array = attributes.normal.array;\n\n    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n    \t\t\t\t\tarray[ i ] = 0;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar normals = attributes.normal.array;\n\n    \t\t\tvar vA, vB, vC,\n\n    \t\t\tpA = new Vector3(),\n    \t\t\tpB = new Vector3(),\n    \t\t\tpC = new Vector3(),\n\n    \t\t\tcb = new Vector3(),\n    \t\t\tab = new Vector3();\n\n    \t\t\t// indexed elements\n\n    \t\t\tif ( index ) {\n\n    \t\t\t\tvar indices = index.array;\n\n    \t\t\t\tif ( groups.length === 0 ) {\n\n    \t\t\t\t\tthis.addGroup( 0, indices.length );\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n    \t\t\t\t\tvar group = groups[ j ];\n\n    \t\t\t\t\tvar start = group.start;\n    \t\t\t\t\tvar count = group.count;\n\n    \t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n    \t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n    \t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n    \t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n    \t\t\t\t\t\tpA.fromArray( positions, vA );\n    \t\t\t\t\t\tpB.fromArray( positions, vB );\n    \t\t\t\t\t\tpC.fromArray( positions, vC );\n\n    \t\t\t\t\t\tcb.subVectors( pC, pB );\n    \t\t\t\t\t\tab.subVectors( pA, pB );\n    \t\t\t\t\t\tcb.cross( ab );\n\n    \t\t\t\t\t\tnormals[ vA ] += cb.x;\n    \t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n    \t\t\t\t\t\tnormals[ vB ] += cb.x;\n    \t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n    \t\t\t\t\t\tnormals[ vC ] += cb.x;\n    \t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n    \t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n    \t\t\t\t\tpA.fromArray( positions, i );\n    \t\t\t\t\tpB.fromArray( positions, i + 3 );\n    \t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n    \t\t\t\t\tcb.subVectors( pC, pB );\n    \t\t\t\t\tab.subVectors( pA, pB );\n    \t\t\t\t\tcb.cross( ab );\n\n    \t\t\t\t\tnormals[ i ] = cb.x;\n    \t\t\t\t\tnormals[ i + 1 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n    \t\t\t\t\tnormals[ i + 3 ] = cb.x;\n    \t\t\t\t\tnormals[ i + 4 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n    \t\t\t\t\tnormals[ i + 6 ] = cb.x;\n    \t\t\t\t\tnormals[ i + 7 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.normalizeNormals();\n\n    \t\t\tattributes.normal.needsUpdate = true;\n\n    \t\t}\n\n    \t},\n\n    \tmerge: function ( geometry, offset ) {\n\n    \t\tif ( (geometry && geometry.isBufferGeometry) === false ) {\n\n    \t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n    \t\t\tvar attribute1 = attributes[ key ];\n    \t\t\tvar attributeArray1 = attribute1.array;\n\n    \t\t\tvar attribute2 = geometry.attributes[ key ];\n    \t\t\tvar attributeArray2 = attribute2.array;\n\n    \t\t\tvar attributeSize = attribute2.itemSize;\n\n    \t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n    \t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tnormalizeNormals: function () {\n\n    \t\tvar normals = this.attributes.normal.array;\n\n    \t\tvar x, y, z, n;\n\n    \t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\n    \t\t\tx = normals[ i ];\n    \t\t\ty = normals[ i + 1 ];\n    \t\t\tz = normals[ i + 2 ];\n\n    \t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n    \t\t\tnormals[ i ] *= n;\n    \t\t\tnormals[ i + 1 ] *= n;\n    \t\t\tnormals[ i + 2 ] *= n;\n\n    \t\t}\n\n    \t},\n\n    \ttoNonIndexed: function () {\n\n    \t\tif ( this.index === null ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar geometry2 = new BufferGeometry();\n\n    \t\tvar indices = this.index.array;\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tvar attribute = attributes[ name ];\n\n    \t\t\tvar array = attribute.array;\n    \t\t\tvar itemSize = attribute.itemSize;\n\n    \t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n    \t\t\tvar index = 0, index2 = 0;\n\n    \t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n    \t\t\t\tindex = indices[ i ] * itemSize;\n\n    \t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n    \t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\n    \t\t}\n\n    \t\treturn geometry2;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'BufferGeometry',\n    \t\t\t\tgenerator: 'BufferGeometry.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard BufferGeometry serialization\n\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( this.parameters !== undefined ) {\n\n    \t\t\tvar parameters = this.parameters;\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n    \t\t\t}\n\n    \t\t\treturn data;\n\n    \t\t}\n\n    \t\tdata.data = { attributes: {} };\n\n    \t\tvar index = this.index;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tvar array = Array.prototype.slice.call( index.array );\n\n    \t\t\tdata.data.index = {\n    \t\t\t\ttype: index.array.constructor.name,\n    \t\t\t\tarray: array\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tvar attribute = attributes[ key ];\n\n    \t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n    \t\t\tdata.data.attributes[ key ] = {\n    \t\t\t\titemSize: attribute.itemSize,\n    \t\t\t\ttype: attribute.array.constructor.name,\n    \t\t\t\tarray: array,\n    \t\t\t\tnormalized: attribute.normalized\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar groups = this.groups;\n\n    \t\tif ( groups.length > 0 ) {\n\n    \t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n    \t\t}\n\n    \t\tvar boundingSphere = this.boundingSphere;\n\n    \t\tif ( boundingSphere !== null ) {\n\n    \t\t\tdata.data.boundingSphere = {\n    \t\t\t\tcenter: boundingSphere.center.toArray(),\n    \t\t\t\tradius: boundingSphere.radius\n    \t\t\t};\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\t/*\n    \t\t// Handle primitives\n\n    \t\tvar parameters = this.parameters;\n\n    \t\tif ( parameters !== undefined ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tvalues.push( parameters[ key ] );\n\n    \t\t\t}\n\n    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n    \t\t\tthis.constructor.apply( geometry, values );\n    \t\t\treturn geometry;\n\n    \t\t}\n\n    \t\treturn new this.constructor().copy( this );\n    \t\t*/\n\n    \t\treturn new BufferGeometry().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tvar index = source.index;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tthis.setIndex( index.clone() );\n\n    \t\t}\n\n    \t\tvar attributes = source.attributes;\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tvar attribute = attributes[ name ];\n    \t\t\tthis.addAttribute( name, attribute.clone() );\n\n    \t\t}\n\n    \t\tvar groups = source.groups;\n\n    \t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\t\tvar group = groups[ i ];\n    \t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    BufferGeometry.MaxIndex = 65535;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author jonobr1 / http://jonobr1.com/\n     */\n\n    function Mesh( geometry, material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Mesh';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n    \tthis.drawMode = TrianglesDrawMode;\n\n    \tthis.updateMorphTargets();\n\n    }\n\n    Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Mesh,\n\n    \tisMesh: true,\n\n    \tsetDrawMode: function ( value ) {\n\n    \t\tthis.drawMode = value;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.drawMode = source.drawMode;\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdateMorphTargets: function () {\n\n    \t\tvar morphTargets = this.geometry.morphTargets;\n\n    \t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n    \t\t\tthis.morphTargetInfluences = [];\n    \t\t\tthis.morphTargetDictionary = {};\n\n    \t\t\tfor ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\n    \t\t\t\tthis.morphTargetInfluences.push( 0 );\n    \t\t\t\tthis.morphTargetDictionary[ morphTargets[ m ].name ] = m;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\tvar vA = new Vector3();\n    \t\tvar vB = new Vector3();\n    \t\tvar vC = new Vector3();\n\n    \t\tvar tempA = new Vector3();\n    \t\tvar tempB = new Vector3();\n    \t\tvar tempC = new Vector3();\n\n    \t\tvar uvA = new Vector2();\n    \t\tvar uvB = new Vector2();\n    \t\tvar uvC = new Vector2();\n\n    \t\tvar barycoord = new Vector3();\n\n    \t\tvar intersectionPoint = new Vector3();\n    \t\tvar intersectionPointWorld = new Vector3();\n\n    \t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n    \t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n    \t\t\tuv1.multiplyScalar( barycoord.x );\n    \t\t\tuv2.multiplyScalar( barycoord.y );\n    \t\t\tuv3.multiplyScalar( barycoord.z );\n\n    \t\t\tuv1.add( uv2 ).add( uv3 );\n\n    \t\t\treturn uv1.clone();\n\n    \t\t}\n\n    \t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\n    \t\t\tvar intersect;\n    \t\t\tvar material = object.material;\n\n    \t\t\tif ( material.side === BackSide ) {\n\n    \t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n    \t\t\t} else {\n\n    \t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n    \t\t\t}\n\n    \t\t\tif ( intersect === null ) return null;\n\n    \t\t\tintersectionPointWorld.copy( point );\n    \t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n    \t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n    \t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n    \t\t\treturn {\n    \t\t\t\tdistance: distance,\n    \t\t\t\tpoint: intersectionPointWorld.clone(),\n    \t\t\t\tobject: object\n    \t\t\t};\n\n    \t\t}\n\n    \t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\n    \t\t\tvA.fromArray( positions, a * 3 );\n    \t\t\tvB.fromArray( positions, b * 3 );\n    \t\t\tvC.fromArray( positions, c * 3 );\n\n    \t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n    \t\t\tif ( intersection ) {\n\n    \t\t\t\tif ( uvs ) {\n\n    \t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n    \t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n    \t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\n    \t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\n    \t\t\t\t}\n\n    \t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n    \t\t\t\tintersection.faceIndex = a;\n\n    \t\t\t}\n\n    \t\t\treturn intersection;\n\n    \t\t}\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar material = this.material;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n\n    \t\t\tif ( material === undefined ) return;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\t// Check boundingBox before continuing\n\n    \t\t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n    \t\t\t}\n\n    \t\t\tvar uvs, intersection;\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar a, b, c;\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( attributes.uv !== undefined ) {\n\n    \t\t\t\t\tuvs = attributes.uv.array;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n    \t\t\t\t\t\ta = indices[ i ];\n    \t\t\t\t\t\tb = indices[ i + 1 ];\n    \t\t\t\t\t\tc = indices[ i + 2 ];\n\n    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n    \t\t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n    \t\t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\n    \t\t\t\t\t\ta = i / 3;\n    \t\t\t\t\t\tb = a + 1;\n    \t\t\t\t\t\tc = a + 2;\n\n    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n    \t\t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n    \t\t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tvar fvA, fvB, fvC;\n    \t\t\t\tvar isFaceMaterial = (material && material.isMultiMaterial);\n    \t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\n    \t\t\t\tvar vertices = geometry.vertices;\n    \t\t\t\tvar faces = geometry.faces;\n    \t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n    \t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n    \t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n    \t\t\t\t\tvar face = faces[ f ];\n    \t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\n    \t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n    \t\t\t\t\tfvA = vertices[ face.a ];\n    \t\t\t\t\tfvB = vertices[ face.b ];\n    \t\t\t\t\tfvC = vertices[ face.c ];\n\n    \t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n    \t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n    \t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n    \t\t\t\t\t\tvA.set( 0, 0, 0 );\n    \t\t\t\t\t\tvB.set( 0, 0, 0 );\n    \t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n    \t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n    \t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n    \t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n    \t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n    \t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n    \t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n    \t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tvA.add( fvA );\n    \t\t\t\t\t\tvB.add( fvB );\n    \t\t\t\t\t\tvC.add( fvC );\n\n    \t\t\t\t\t\tfvA = vA;\n    \t\t\t\t\t\tfvB = vB;\n    \t\t\t\t\t\tfvC = vC;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n    \t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\tif ( uvs ) {\n\n    \t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n    \t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n    \t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n    \t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n    \t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tintersection.face = face;\n    \t\t\t\t\t\tintersection.faceIndex = f;\n    \t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'BoxBufferGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\tdepth: depth,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tdepthSegments: depthSegments\n    \t};\n\n    \tvar scope = this;\n\n    \t// segments\n    \twidthSegments = Math.floor( widthSegments ) || 1;\n    \theightSegments = Math.floor( heightSegments ) || 1;\n    \tdepthSegments = Math.floor( depthSegments ) || 1;\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n    \tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\n    \t// buffers\n    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n    \tvar vertices = new Float32Array( vertexCount * 3 );\n    \tvar normals = new Float32Array( vertexCount * 3 );\n    \tvar uvs = new Float32Array( vertexCount * 2 );\n\n    \t// offset variables\n    \tvar vertexBufferOffset = 0;\n    \tvar uvBufferOffset = 0;\n    \tvar indexBufferOffset = 0;\n    \tvar numberOfVertices = 0;\n\n    \t// group variables\n    \tvar groupStart = 0;\n\n    \t// build each side of the box geometry\n    \tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n    \tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n    \tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n    \tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n    \tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n    \tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\n    \t// build geometry\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    \t// helper functions\n\n    \tfunction calculateVertexCount( w, h, d ) {\n\n    \t\tvar vertices = 0;\n\n    \t\t// calculate the amount of vertices for each side (plane)\n    \t\tvertices += (w + 1) * (h + 1) * 2; // xy\n    \t\tvertices += (w + 1) * (d + 1) * 2; // xz\n    \t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\n    \t\treturn vertices;\n\n    \t}\n\n    \tfunction calculateIndexCount( w, h, d ) {\n\n    \t\tvar index = 0;\n\n    \t\t// calculate the amount of squares for each side\n    \t\tindex += w * h * 2; // xy\n    \t\tindex += w * d * 2; // xz\n    \t\tindex += d * h * 2; // zy\n\n    \t\treturn index * 6; // two triangles per square => six vertices per square\n\n    \t}\n\n    \tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n    \t\tvar segmentWidth\t= width / gridX;\n    \t\tvar segmentHeight = height / gridY;\n\n    \t\tvar widthHalf = width / 2;\n    \t\tvar heightHalf = height / 2;\n    \t\tvar depthHalf = depth / 2;\n\n    \t\tvar gridX1 = gridX + 1;\n    \t\tvar gridY1 = gridY + 1;\n\n    \t\tvar vertexCounter = 0;\n    \t\tvar groupCount = 0;\n\n    \t\tvar vector = new Vector3();\n\n    \t\t// generate vertices, normals and uvs\n\n    \t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n    \t\t\tvar y = iy * segmentHeight - heightHalf;\n\n    \t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n    \t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n    \t\t\t\t// set values to correct vector component\n    \t\t\t\tvector[ u ] = x * udir;\n    \t\t\t\tvector[ v ] = y * vdir;\n    \t\t\t\tvector[ w ] = depthHalf;\n\n    \t\t\t\t// now apply vector to vertex buffer\n    \t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n    \t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n    \t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\n    \t\t\t\t// set values to correct vector component\n    \t\t\t\tvector[ u ] = 0;\n    \t\t\t\tvector[ v ] = 0;\n    \t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n    \t\t\t\t// now apply vector to normal buffer\n    \t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n    \t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n    \t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\n    \t\t\t\t// uvs\n    \t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n    \t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\n    \t\t\t\t// update offsets and counters\n    \t\t\t\tvertexBufferOffset += 3;\n    \t\t\t\tuvBufferOffset += 2;\n    \t\t\t\tvertexCounter += 1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// 1. you need three indices to draw a single face\n    \t\t// 2. a single segment consists of two faces\n    \t\t// 3. so we need to generate six (2*3) indices per segment\n\n    \t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n    \t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n    \t\t\t\t// indices\n    \t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n    \t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n    \t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n    \t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n    \t\t\t\t// face one\n    \t\t\t\tindices[ indexBufferOffset ] = a;\n    \t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n    \t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n    \t\t\t\t// face two\n    \t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n    \t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n    \t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n    \t\t\t\t// update offsets and counters\n    \t\t\t\tindexBufferOffset += 6;\n    \t\t\t\tgroupCount += 6;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t\t// update total number of vertices\n    \t\tnumberOfVertices += vertexCounter;\n\n    \t}\n\n    }\n\n    BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n     */\n\n    function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'PlaneBufferGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments\n    \t};\n\n    \tvar width_half = width / 2;\n    \tvar height_half = height / 2;\n\n    \tvar gridX = Math.floor( widthSegments ) || 1;\n    \tvar gridY = Math.floor( heightSegments ) || 1;\n\n    \tvar gridX1 = gridX + 1;\n    \tvar gridY1 = gridY + 1;\n\n    \tvar segment_width = width / gridX;\n    \tvar segment_height = height / gridY;\n\n    \tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n    \tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n    \tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\n    \tvar offset = 0;\n    \tvar offset2 = 0;\n\n    \tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n    \t\tvar y = iy * segment_height - height_half;\n\n    \t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n    \t\t\tvar x = ix * segment_width - width_half;\n\n    \t\t\tvertices[ offset ] = x;\n    \t\t\tvertices[ offset + 1 ] = - y;\n\n    \t\t\tnormals[ offset + 2 ] = 1;\n\n    \t\t\tuvs[ offset2 ] = ix / gridX;\n    \t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\n    \t\t\toffset += 3;\n    \t\t\toffset2 += 2;\n\n    \t\t}\n\n    \t}\n\n    \toffset = 0;\n\n    \tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\n    \tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\n    \t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\n    \t\t\tvar a = ix + gridX1 * iy;\n    \t\t\tvar b = ix + gridX1 * ( iy + 1 );\n    \t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n    \t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n    \t\t\tindices[ offset ] = a;\n    \t\t\tindices[ offset + 1 ] = b;\n    \t\t\tindices[ offset + 2 ] = d;\n\n    \t\t\tindices[ offset + 3 ] = b;\n    \t\t\tindices[ offset + 4 ] = c;\n    \t\t\tindices[ offset + 5 ] = d;\n\n    \t\t\toffset += 6;\n\n    \t\t}\n\n    \t}\n\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    }\n\n    PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function Camera() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Camera';\n\n    \tthis.matrixWorldInverse = new Matrix4();\n    \tthis.projectionMatrix = new Matrix4();\n\n    }\n\n    Camera.prototype = Object.create( Object3D.prototype );\n    Camera.prototype.constructor = Camera;\n\n    Camera.prototype.isCamera = true;\n\n    Camera.prototype.getWorldDirection = function () {\n\n    \tvar quaternion = new Quaternion();\n\n    \treturn function getWorldDirection( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tthis.getWorldQuaternion( quaternion );\n\n    \t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n    \t};\n\n    }();\n\n    Camera.prototype.lookAt = function () {\n\n    \t// This routine does not support cameras with rotated and/or translated parent(s)\n\n    \tvar m1 = new Matrix4();\n\n    \treturn function lookAt( vector ) {\n\n    \t\tm1.lookAt( this.position, vector, this.up );\n\n    \t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n    \t};\n\n    }();\n\n    Camera.prototype.clone = function () {\n\n    \treturn new this.constructor().copy( this );\n\n    };\n\n    Camera.prototype.copy = function ( source ) {\n\n    \tObject3D.prototype.copy.call( this, source );\n\n    \tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n    \tthis.projectionMatrix.copy( source.projectionMatrix );\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author greggman / http://games.greggman.com/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author tschw\n     */\n\n    function PerspectiveCamera( fov, aspect, near, far ) {\n\n    \tCamera.call( this );\n\n    \tthis.type = 'PerspectiveCamera';\n\n    \tthis.fov = fov !== undefined ? fov : 50;\n    \tthis.zoom = 1;\n\n    \tthis.near = near !== undefined ? near : 0.1;\n    \tthis.far = far !== undefined ? far : 2000;\n    \tthis.focus = 10;\n\n    \tthis.aspect = aspect !== undefined ? aspect : 1;\n    \tthis.view = null;\n\n    \tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n    \tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n    \tthis.updateProjectionMatrix();\n\n    }\n\n    PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n    \tconstructor: PerspectiveCamera,\n\n    \tisPerspectiveCamera: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tCamera.prototype.copy.call( this, source );\n\n    \t\tthis.fov = source.fov;\n    \t\tthis.zoom = source.zoom;\n\n    \t\tthis.near = source.near;\n    \t\tthis.far = source.far;\n    \t\tthis.focus = source.focus;\n\n    \t\tthis.aspect = source.aspect;\n    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n    \t\tthis.filmGauge = source.filmGauge;\n    \t\tthis.filmOffset = source.filmOffset;\n\n    \t\treturn this;\n\n    \t},\n\n    \t/**\n    \t * Sets the FOV by focal length in respect to the current .filmGauge.\n    \t *\n    \t * The default film gauge is 35, so that the focal length can be specified for\n    \t * a 35mm (full frame) camera.\n    \t *\n    \t * Values for focal length and film gauge must have the same unit.\n    \t */\n    \tsetFocalLength: function ( focalLength ) {\n\n    \t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n    \t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n    \t\tthis.fov = exports.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \t/**\n    \t * Calculates the focal length from the current .fov and .filmGauge.\n    \t */\n    \tgetFocalLength: function () {\n\n    \t\tvar vExtentSlope = Math.tan( exports.Math.DEG2RAD * 0.5 * this.fov );\n\n    \t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n    \t},\n\n    \tgetEffectiveFOV: function () {\n\n    \t\treturn exports.Math.RAD2DEG * 2 * Math.atan(\n    \t\t\t\tMath.tan( exports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n    \t},\n\n    \tgetFilmWidth: function () {\n\n    \t\t// film not completely covered in portrait format (aspect < 1)\n    \t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n    \t},\n\n    \tgetFilmHeight: function () {\n\n    \t\t// film not completely covered in landscape format (aspect > 1)\n    \t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n    \t},\n\n    \t/**\n    \t * Sets an offset in a larger frustum. This is useful for multi-window or\n    \t * multi-monitor/multi-machine setups.\n    \t *\n    \t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n    \t * the monitors are in grid like this\n    \t *\n    \t *   +---+---+---+\n    \t *   | A | B | C |\n    \t *   +---+---+---+\n    \t *   | D | E | F |\n    \t *   +---+---+---+\n    \t *\n    \t * then for each monitor you would call it like this\n    \t *\n    \t *   var w = 1920;\n    \t *   var h = 1080;\n    \t *   var fullWidth = w * 3;\n    \t *   var fullHeight = h * 2;\n    \t *\n    \t *   --A--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n    \t *   --B--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n    \t *   --C--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n    \t *   --D--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n    \t *   --E--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n    \t *   --F--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n    \t *\n    \t *   Note there is no reason monitors have to be the same size or in a grid.\n    \t */\n    \tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n    \t\tthis.aspect = fullWidth / fullHeight;\n\n    \t\tthis.view = {\n    \t\t\tfullWidth: fullWidth,\n    \t\t\tfullHeight: fullHeight,\n    \t\t\toffsetX: x,\n    \t\t\toffsetY: y,\n    \t\t\twidth: width,\n    \t\t\theight: height\n    \t\t};\n\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tclearViewOffset: function() {\n\n    \t\tthis.view = null;\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tupdateProjectionMatrix: function () {\n\n    \t\tvar near = this.near,\n    \t\t\ttop = near * Math.tan(\n    \t\t\t\t\texports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n    \t\t\theight = 2 * top,\n    \t\t\twidth = this.aspect * height,\n    \t\t\tleft = - 0.5 * width,\n    \t\t\tview = this.view;\n\n    \t\tif ( view !== null ) {\n\n    \t\t\tvar fullWidth = view.fullWidth,\n    \t\t\t\tfullHeight = view.fullHeight;\n\n    \t\t\tleft += view.offsetX * width / fullWidth;\n    \t\t\ttop -= view.offsetY * height / fullHeight;\n    \t\t\twidth *= view.width / fullWidth;\n    \t\t\theight *= view.height / fullHeight;\n\n    \t\t}\n\n    \t\tvar skew = this.filmOffset;\n    \t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n    \t\tthis.projectionMatrix.makeFrustum(\n    \t\t\t\tleft, left + width, top - height, top, near, this.far );\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.fov = this.fov;\n    \t\tdata.object.zoom = this.zoom;\n\n    \t\tdata.object.near = this.near;\n    \t\tdata.object.far = this.far;\n    \t\tdata.object.focus = this.focus;\n\n    \t\tdata.object.aspect = this.aspect;\n\n    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n    \t\tdata.object.filmGauge = this.filmGauge;\n    \t\tdata.object.filmOffset = this.filmOffset;\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author arose / http://github.com/arose\n     */\n\n    function OrthographicCamera( left, right, top, bottom, near, far ) {\n\n    \tCamera.call( this );\n\n    \tthis.type = 'OrthographicCamera';\n\n    \tthis.zoom = 1;\n    \tthis.view = null;\n\n    \tthis.left = left;\n    \tthis.right = right;\n    \tthis.top = top;\n    \tthis.bottom = bottom;\n\n    \tthis.near = ( near !== undefined ) ? near : 0.1;\n    \tthis.far = ( far !== undefined ) ? far : 2000;\n\n    \tthis.updateProjectionMatrix();\n\n    }\n\n    OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n    \tconstructor: OrthographicCamera,\n\n    \tisOrthographicCamera: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tCamera.prototype.copy.call( this, source );\n\n    \t\tthis.left = source.left;\n    \t\tthis.right = source.right;\n    \t\tthis.top = source.top;\n    \t\tthis.bottom = source.bottom;\n    \t\tthis.near = source.near;\n    \t\tthis.far = source.far;\n\n    \t\tthis.zoom = source.zoom;\n    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\n    \t\tthis.view = {\n    \t\t\tfullWidth: fullWidth,\n    \t\t\tfullHeight: fullHeight,\n    \t\t\toffsetX: x,\n    \t\t\toffsetY: y,\n    \t\t\twidth: width,\n    \t\t\theight: height\n    \t\t};\n\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tclearViewOffset: function() {\n\n    \t\tthis.view = null;\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tupdateProjectionMatrix: function () {\n\n    \t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n    \t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n    \t\tvar cx = ( this.right + this.left ) / 2;\n    \t\tvar cy = ( this.top + this.bottom ) / 2;\n\n    \t\tvar left = cx - dx;\n    \t\tvar right = cx + dx;\n    \t\tvar top = cy + dy;\n    \t\tvar bottom = cy - dy;\n\n    \t\tif ( this.view !== null ) {\n\n    \t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n    \t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n    \t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n    \t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n    \t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n    \t\t\tright = left + scaleW * ( this.view.width / zoomW );\n    \t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n    \t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n    \t\t}\n\n    \t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.zoom = this.zoom;\n    \t\tdata.object.left = this.left;\n    \t\tdata.object.right = this.right;\n    \t\tdata.object.top = this.top;\n    \t\tdata.object.bottom = this.bottom;\n    \t\tdata.object.near = this.near;\n    \t\tdata.object.far = this.far;\n\n    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\n    \tvar mode;\n\n    \tfunction setMode( value ) {\n\n    \t\tmode = value;\n\n    \t}\n\n    \tvar type, size;\n\n    \tfunction setIndex( index ) {\n\n    \t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\n    \t\t\ttype = gl.UNSIGNED_INT;\n    \t\t\tsize = 4;\n\n    \t\t} else {\n\n    \t\t\ttype = gl.UNSIGNED_SHORT;\n    \t\t\tsize = 2;\n\n    \t\t}\n\n    \t}\n\n    \tfunction render( start, count ) {\n\n    \t\tgl.drawElements( mode, count, type, start * size );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n    \t}\n\n    \tfunction renderInstances( geometry, start, count ) {\n\n    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\tif ( extension === null ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n    \t}\n\n    \treturn {\n\n    \t\tsetMode: setMode,\n    \t\tsetIndex: setIndex,\n    \t\trender: render,\n    \t\trenderInstances: renderInstances\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLBufferRenderer( gl, extensions, infoRender ) {\n\n    \tvar mode;\n\n    \tfunction setMode( value ) {\n\n    \t\tmode = value;\n\n    \t}\n\n    \tfunction render( start, count ) {\n\n    \t\tgl.drawArrays( mode, start, count );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n    \t}\n\n    \tfunction renderInstances( geometry ) {\n\n    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\tif ( extension === null ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar position = geometry.attributes.position;\n\n    \t\tvar count = 0;\n\n    \t\tif ( (position && position.isInterleavedBufferAttribute) ) {\n\n    \t\t\tcount = position.data.count;\n\n    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n    \t\t} else {\n\n    \t\t\tcount = position.count;\n\n    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n    \t\t}\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n    \t}\n\n    \treturn {\n    \t\tsetMode: setMode,\n    \t\trender: render,\n    \t\trenderInstances: renderInstances\n    \t};\n\n    }\n\n    function WebGLLights() {\n\n    \tvar lights = {};\n\n    \treturn {\n\n    \t\tget: function ( light ) {\n\n    \t\t\tif ( lights[ light.id ] !== undefined ) {\n\n    \t\t\t\treturn lights[ light.id ];\n\n    \t\t\t}\n\n    \t\t\tvar uniforms;\n\n    \t\t\tswitch ( light.type ) {\n\n    \t\t\t\tcase 'DirectionalLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'SpotLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tposition: new Vector3(),\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n    \t\t\t\t\t\tdistance: 0,\n    \t\t\t\t\t\tconeCos: 0,\n    \t\t\t\t\t\tpenumbraCos: 0,\n    \t\t\t\t\t\tdecay: 0,\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tposition: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n    \t\t\t\t\t\tdistance: 0,\n    \t\t\t\t\t\tdecay: 0,\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'HemisphereLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tskyColor: new Color(),\n    \t\t\t\t\t\tgroundColor: new Color()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tlights[ light.id ] = uniforms;\n\n    \t\t\treturn uniforms;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function addLineNumbers( string ) {\n\n    \tvar lines = string.split( '\\n' );\n\n    \tfor ( var i = 0; i < lines.length; i ++ ) {\n\n    \t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n    \t}\n\n    \treturn lines.join( '\\n' );\n\n    }\n\n    function WebGLShader( gl, type, string ) {\n\n    \tvar shader = gl.createShader( type );\n\n    \tgl.shaderSource( shader, string );\n    \tgl.compileShader( shader );\n\n    \tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n    \t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n    \t}\n\n    \tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n    \t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n    \t}\n\n    \t// --enable-privileged-webgl-extension\n    \t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n    \treturn shader;\n\n    }\n\n    var programIdCount = 0;\n\n    function getEncodingComponents( encoding ) {\n\n    \tswitch ( encoding ) {\n\n    \t\tcase LinearEncoding:\n    \t\t\treturn [ 'Linear','( value )' ];\n    \t\tcase sRGBEncoding:\n    \t\t\treturn [ 'sRGB','( value )' ];\n    \t\tcase RGBEEncoding:\n    \t\t\treturn [ 'RGBE','( value )' ];\n    \t\tcase RGBM7Encoding:\n    \t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n    \t\tcase RGBM16Encoding:\n    \t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n    \t\tcase RGBDEncoding:\n    \t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n    \t\tcase GammaEncoding:\n    \t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n    \t\tdefault:\n    \t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n    \t}\n\n    }\n\n    function getTexelDecodingFunction( functionName, encoding ) {\n\n    \tvar components = getEncodingComponents( encoding );\n    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\n    }\n\n    function getTexelEncodingFunction( functionName, encoding ) {\n\n    \tvar components = getEncodingComponents( encoding );\n    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\n    }\n\n    function getToneMappingFunction( functionName, toneMapping ) {\n\n    \tvar toneMappingName;\n\n    \tswitch ( toneMapping ) {\n\n    \t\tcase LinearToneMapping:\n    \t\t\ttoneMappingName = \"Linear\";\n    \t\t\tbreak;\n\n    \t\tcase ReinhardToneMapping:\n    \t\t\ttoneMappingName = \"Reinhard\";\n    \t\t\tbreak;\n\n    \t\tcase Uncharted2ToneMapping:\n    \t\t\ttoneMappingName = \"Uncharted2\";\n    \t\t\tbreak;\n\n    \t\tcase CineonToneMapping:\n    \t\t\ttoneMappingName = \"OptimizedCineon\";\n    \t\t\tbreak;\n\n    \t\tdefault:\n    \t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n    \t}\n\n    \treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\n    }\n\n    function generateExtensions( extensions, parameters, rendererExtensions ) {\n\n    \textensions = extensions || {};\n\n    \tvar chunks = [\n    \t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n    \t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n    \t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n    \t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n    \t];\n\n    \treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n    }\n\n    function generateDefines( defines ) {\n\n    \tvar chunks = [];\n\n    \tfor ( var name in defines ) {\n\n    \t\tvar value = defines[ name ];\n\n    \t\tif ( value === false ) continue;\n\n    \t\tchunks.push( '#define ' + name + ' ' + value );\n\n    \t}\n\n    \treturn chunks.join( '\\n' );\n\n    }\n\n    function fetchAttributeLocations( gl, program, identifiers ) {\n\n    \tvar attributes = {};\n\n    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n    \tfor ( var i = 0; i < n; i ++ ) {\n\n    \t\tvar info = gl.getActiveAttrib( program, i );\n    \t\tvar name = info.name;\n\n    \t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n    \t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n    \t}\n\n    \treturn attributes;\n\n    }\n\n    function filterEmptyLine( string ) {\n\n    \treturn string !== '';\n\n    }\n\n    function replaceLightNums( string, parameters ) {\n\n    \treturn string\n    \t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n    \t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n    \t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n    \t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n    }\n\n    function parseIncludes( string ) {\n\n    \tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\n    \tfunction replace( match, include ) {\n\n    \t\tvar replace = ShaderChunk[ include ];\n\n    \t\tif ( replace === undefined ) {\n\n    \t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n    \t\t}\n\n    \t\treturn parseIncludes( replace );\n\n    \t}\n\n    \treturn string.replace( pattern, replace );\n\n    }\n\n    function unrollLoops( string ) {\n\n    \tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n    \tfunction replace( match, start, end, snippet ) {\n\n    \t\tvar unroll = '';\n\n    \t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n    \t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n    \t\t}\n\n    \t\treturn unroll;\n\n    \t}\n\n    \treturn string.replace( pattern, replace );\n\n    }\n\n    function WebGLProgram( renderer, code, material, parameters ) {\n\n    \tvar gl = renderer.context;\n\n    \tvar extensions = material.extensions;\n    \tvar defines = material.defines;\n\n    \tvar vertexShader = material.__webglShader.vertexShader;\n    \tvar fragmentShader = material.__webglShader.fragmentShader;\n\n    \tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n    \tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n    \t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n    \t}\n\n    \tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n    \tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n    \tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n    \tif ( parameters.envMap ) {\n\n    \t\tswitch ( material.envMap.mapping ) {\n\n    \t\t\tcase CubeReflectionMapping:\n    \t\t\tcase CubeRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n    \t\t\t\tbreak;\n\n    \t\t\tcase CubeUVReflectionMapping:\n    \t\t\tcase CubeUVRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n    \t\t\t\tbreak;\n\n    \t\t\tcase EquirectangularReflectionMapping:\n    \t\t\tcase EquirectangularRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n    \t\t\t\tbreak;\n\n    \t\t\tcase SphericalReflectionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tswitch ( material.envMap.mapping ) {\n\n    \t\t\tcase CubeRefractionMapping:\n    \t\t\tcase EquirectangularRefractionMapping:\n    \t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tswitch ( material.combine ) {\n\n    \t\t\tcase MultiplyOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n    \t\t\t\tbreak;\n\n    \t\t\tcase MixOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n    \t\t\t\tbreak;\n\n    \t\t\tcase AddOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t}\n\n    \tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n    \t// console.log( 'building new program ' );\n\n    \t//\n\n    \tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\n    \tvar customDefines = generateDefines( defines );\n\n    \t//\n\n    \tvar program = gl.createProgram();\n\n    \tvar prefixVertex, prefixFragment;\n\n    \tif ( material.isRawShaderMaterial ) {\n\n    \t\tprefixVertex = [\n\n    \t\t\tcustomDefines,\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t\tprefixFragment = [\n\n    \t\t\tcustomExtensions,\n    \t\t\tcustomDefines,\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t} else {\n\n    \t\tprefixVertex = [\n\n    \t\t\t'precision ' + parameters.precision + ' float;',\n    \t\t\t'precision ' + parameters.precision + ' int;',\n\n    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n    \t\t\tcustomDefines,\n\n    \t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n    \t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\n    \t\t\tparameters.map ? '#define USE_MAP' : '',\n    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n    \t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n    \t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n    \t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n    \t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n    \t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n    \t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n    \t\t\t'uniform mat4 modelMatrix;',\n    \t\t\t'uniform mat4 modelViewMatrix;',\n    \t\t\t'uniform mat4 projectionMatrix;',\n    \t\t\t'uniform mat4 viewMatrix;',\n    \t\t\t'uniform mat3 normalMatrix;',\n    \t\t\t'uniform vec3 cameraPosition;',\n\n    \t\t\t'attribute vec3 position;',\n    \t\t\t'attribute vec3 normal;',\n    \t\t\t'attribute vec2 uv;',\n\n    \t\t\t'#ifdef USE_COLOR',\n\n    \t\t\t'\tattribute vec3 color;',\n\n    \t\t\t'#endif',\n\n    \t\t\t'#ifdef USE_MORPHTARGETS',\n\n    \t\t\t'\tattribute vec3 morphTarget0;',\n    \t\t\t'\tattribute vec3 morphTarget1;',\n    \t\t\t'\tattribute vec3 morphTarget2;',\n    \t\t\t'\tattribute vec3 morphTarget3;',\n\n    \t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n    \t\t\t'\t\tattribute vec3 morphNormal0;',\n    \t\t\t'\t\tattribute vec3 morphNormal1;',\n    \t\t\t'\t\tattribute vec3 morphNormal2;',\n    \t\t\t'\t\tattribute vec3 morphNormal3;',\n\n    \t\t\t'\t#else',\n\n    \t\t\t'\t\tattribute vec3 morphTarget4;',\n    \t\t\t'\t\tattribute vec3 morphTarget5;',\n    \t\t\t'\t\tattribute vec3 morphTarget6;',\n    \t\t\t'\t\tattribute vec3 morphTarget7;',\n\n    \t\t\t'\t#endif',\n\n    \t\t\t'#endif',\n\n    \t\t\t'#ifdef USE_SKINNING',\n\n    \t\t\t'\tattribute vec4 skinIndex;',\n    \t\t\t'\tattribute vec4 skinWeight;',\n\n    \t\t\t'#endif',\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t\tprefixFragment = [\n\n    \t\t\tcustomExtensions,\n\n    \t\t\t'precision ' + parameters.precision + ' float;',\n    \t\t\t'precision ' + parameters.precision + ' int;',\n\n    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n    \t\t\tcustomDefines,\n\n    \t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n    \t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n    \t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n    \t\t\tparameters.map ? '#define USE_MAP' : '',\n    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n    \t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n    \t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n    \t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n    \t\t\t'uniform mat4 viewMatrix;',\n    \t\t\t'uniform vec3 cameraPosition;',\n\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\n    \t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n    \t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n    \t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n    \t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n    \t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\n    \t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t}\n\n    \tvertexShader = parseIncludes( vertexShader, parameters );\n    \tvertexShader = replaceLightNums( vertexShader, parameters );\n\n    \tfragmentShader = parseIncludes( fragmentShader, parameters );\n    \tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n    \tif ( ! material.isShaderMaterial ) {\n\n    \t\tvertexShader = unrollLoops( vertexShader );\n    \t\tfragmentShader = unrollLoops( fragmentShader );\n\n    \t}\n\n    \tvar vertexGlsl = prefixVertex + vertexShader;\n    \tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n    \t// console.log( '*VERTEX*', vertexGlsl );\n    \t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n    \tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n    \tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n    \tgl.attachShader( program, glVertexShader );\n    \tgl.attachShader( program, glFragmentShader );\n\n    \t// Force a particular attribute to index 0.\n\n    \tif ( material.index0AttributeName !== undefined ) {\n\n    \t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n    \t} else if ( parameters.morphTargets === true ) {\n\n    \t\t// programs with morphTargets displace position out of attribute 0\n    \t\tgl.bindAttribLocation( program, 0, 'position' );\n\n    \t}\n\n    \tgl.linkProgram( program );\n\n    \tvar programLog = gl.getProgramInfoLog( program );\n    \tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n    \tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n    \tvar runnable = true;\n    \tvar haveDiagnostics = true;\n\n    \t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n    \t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n    \tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n    \t\trunnable = false;\n\n    \t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n    \t} else if ( programLog !== '' ) {\n\n    \t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n    \t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n    \t\thaveDiagnostics = false;\n\n    \t}\n\n    \tif ( haveDiagnostics ) {\n\n    \t\tthis.diagnostics = {\n\n    \t\t\trunnable: runnable,\n    \t\t\tmaterial: material,\n\n    \t\t\tprogramLog: programLog,\n\n    \t\t\tvertexShader: {\n\n    \t\t\t\tlog: vertexLog,\n    \t\t\t\tprefix: prefixVertex\n\n    \t\t\t},\n\n    \t\t\tfragmentShader: {\n\n    \t\t\t\tlog: fragmentLog,\n    \t\t\t\tprefix: prefixFragment\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \t// clean up\n\n    \tgl.deleteShader( glVertexShader );\n    \tgl.deleteShader( glFragmentShader );\n\n    \t// set up caching for uniform locations\n\n    \tvar cachedUniforms;\n\n    \tthis.getUniforms = function() {\n\n    \t\tif ( cachedUniforms === undefined ) {\n\n    \t\t\tcachedUniforms =\n    \t\t\t\t\tnew WebGLUniforms( gl, program, renderer );\n\n    \t\t}\n\n    \t\treturn cachedUniforms;\n\n    \t};\n\n    \t// set up caching for attribute locations\n\n    \tvar cachedAttributes;\n\n    \tthis.getAttributes = function() {\n\n    \t\tif ( cachedAttributes === undefined ) {\n\n    \t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n    \t\t}\n\n    \t\treturn cachedAttributes;\n\n    \t};\n\n    \t// free resource\n\n    \tthis.destroy = function() {\n\n    \t\tgl.deleteProgram( program );\n    \t\tthis.program = undefined;\n\n    \t};\n\n    \t// DEPRECATED\n\n    \tObject.defineProperties( this, {\n\n    \t\tuniforms: {\n    \t\t\tget: function() {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n    \t\t\t\treturn this.getUniforms();\n\n    \t\t\t}\n    \t\t},\n\n    \t\tattributes: {\n    \t\t\tget: function() {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n    \t\t\t\treturn this.getAttributes();\n\n    \t\t\t}\n    \t\t}\n\n    \t} );\n\n\n    \t//\n\n    \tthis.id = programIdCount ++;\n    \tthis.code = code;\n    \tthis.usedTimes = 1;\n    \tthis.program = program;\n    \tthis.vertexShader = glVertexShader;\n    \tthis.fragmentShader = glFragmentShader;\n\n    \treturn this;\n\n    }\n\n    function WebGLPrograms( renderer, capabilities ) {\n\n    \tvar programs = [];\n\n    \tvar shaderIDs = {\n    \t\tMeshDepthMaterial: 'depth',\n    \t\tMeshNormalMaterial: 'normal',\n    \t\tMeshBasicMaterial: 'basic',\n    \t\tMeshLambertMaterial: 'lambert',\n    \t\tMeshPhongMaterial: 'phong',\n    \t\tMeshStandardMaterial: 'physical',\n    \t\tMeshPhysicalMaterial: 'physical',\n    \t\tLineBasicMaterial: 'basic',\n    \t\tLineDashedMaterial: 'dashed',\n    \t\tPointsMaterial: 'points'\n    \t};\n\n    \tvar parameterNames = [\n    \t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n    \t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n    \t\t\"roughnessMap\", \"metalnessMap\",\n    \t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n    \t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n    \t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n    \t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n    \t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n    \t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n    \t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n    \t];\n\n\n    \tfunction allocateBones( object ) {\n\n    \t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\n    \t\t\treturn 1024;\n\n    \t\t} else {\n\n    \t\t\t// default for when object is not specified\n    \t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n    \t\t\t//\n    \t\t\t//  - leave some extra space for other uniforms\n    \t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n    \t\t\t//    (up to 54 should be safe)\n\n    \t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n    \t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n    \t\t\tvar maxBones = nVertexMatrices;\n\n    \t\t\tif ( object !== undefined && (object && object.isSkinnedMesh) ) {\n\n    \t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\n    \t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\n    \t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn maxBones;\n\n    \t\t}\n\n    \t}\n\n    \tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n    \t\tvar encoding;\n\n    \t\tif ( ! map ) {\n\n    \t\t\tencoding = LinearEncoding;\n\n    \t\t} else if ( (map && map.isTexture) ) {\n\n    \t\t\tencoding = map.encoding;\n\n    \t\t} else if ( (map && map.isWebGLRenderTarget) ) {\n\n    \t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n    \t\t\tencoding = map.texture.encoding;\n\n    \t\t}\n\n    \t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n    \t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n    \t\t\tencoding = GammaEncoding;\n\n    \t\t}\n\n    \t\treturn encoding;\n\n    \t}\n\n    \tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\n    \t\tvar shaderID = shaderIDs[ material.type ];\n\n    \t\t// heuristics to create shader parameters according to lights in the scene\n    \t\t// (not to blow over maxLights budget)\n\n    \t\tvar maxBones = allocateBones( object );\n    \t\tvar precision = renderer.getPrecision();\n\n    \t\tif ( material.precision !== null ) {\n\n    \t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n    \t\t\tif ( precision !== material.precision ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\n    \t\tvar parameters = {\n\n    \t\t\tshaderID: shaderID,\n\n    \t\t\tprecision: precision,\n    \t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n    \t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n    \t\t\tmap: !! material.map,\n    \t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n    \t\t\tenvMap: !! material.envMap,\n    \t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n    \t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n    \t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n    \t\t\tlightMap: !! material.lightMap,\n    \t\t\taoMap: !! material.aoMap,\n    \t\t\temissiveMap: !! material.emissiveMap,\n    \t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n    \t\t\tbumpMap: !! material.bumpMap,\n    \t\t\tnormalMap: !! material.normalMap,\n    \t\t\tdisplacementMap: !! material.displacementMap,\n    \t\t\troughnessMap: !! material.roughnessMap,\n    \t\t\tmetalnessMap: !! material.metalnessMap,\n    \t\t\tspecularMap: !! material.specularMap,\n    \t\t\talphaMap: !! material.alphaMap,\n\n    \t\t\tcombine: material.combine,\n\n    \t\t\tvertexColors: material.vertexColors,\n\n    \t\t\tfog: !! fog,\n    \t\t\tuseFog: material.fog,\n    \t\t\tfogExp: (fog && fog.isFogExp2),\n\n    \t\t\tflatShading: material.shading === FlatShading,\n\n    \t\t\tsizeAttenuation: material.sizeAttenuation,\n    \t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n    \t\t\tskinning: material.skinning,\n    \t\t\tmaxBones: maxBones,\n    \t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\n    \t\t\tmorphTargets: material.morphTargets,\n    \t\t\tmorphNormals: material.morphNormals,\n    \t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n    \t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n    \t\t\tnumDirLights: lights.directional.length,\n    \t\t\tnumPointLights: lights.point.length,\n    \t\t\tnumSpotLights: lights.spot.length,\n    \t\t\tnumHemiLights: lights.hemi.length,\n\n    \t\t\tnumClippingPlanes: nClipPlanes,\n\n    \t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n    \t\t\tshadowMapType: renderer.shadowMap.type,\n\n    \t\t\ttoneMapping: renderer.toneMapping,\n    \t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n    \t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n    \t\t\talphaTest: material.alphaTest,\n    \t\t\tdoubleSided: material.side === DoubleSide,\n    \t\t\tflipSided: material.side === BackSide,\n\n    \t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n    \t\t};\n\n    \t\treturn parameters;\n\n    \t};\n\n    \tthis.getProgramCode = function ( material, parameters ) {\n\n    \t\tvar array = [];\n\n    \t\tif ( parameters.shaderID ) {\n\n    \t\t\tarray.push( parameters.shaderID );\n\n    \t\t} else {\n\n    \t\t\tarray.push( material.fragmentShader );\n    \t\t\tarray.push( material.vertexShader );\n\n    \t\t}\n\n    \t\tif ( material.defines !== undefined ) {\n\n    \t\t\tfor ( var name in material.defines ) {\n\n    \t\t\t\tarray.push( name );\n    \t\t\t\tarray.push( material.defines[ name ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n    \t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n    \t\t}\n\n    \t\treturn array.join();\n\n    \t};\n\n    \tthis.acquireProgram = function ( material, parameters, code ) {\n\n    \t\tvar program;\n\n    \t\t// Check if code has been already compiled\n    \t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n    \t\t\tvar programInfo = programs[ p ];\n\n    \t\t\tif ( programInfo.code === code ) {\n\n    \t\t\t\tprogram = programInfo;\n    \t\t\t\t++ program.usedTimes;\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tprogram = new WebGLProgram( renderer, code, material, parameters );\n    \t\t\tprograms.push( program );\n\n    \t\t}\n\n    \t\treturn program;\n\n    \t};\n\n    \tthis.releaseProgram = function( program ) {\n\n    \t\tif ( -- program.usedTimes === 0 ) {\n\n    \t\t\t// Remove from unordered set\n    \t\t\tvar i = programs.indexOf( program );\n    \t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n    \t\t\tprograms.pop();\n\n    \t\t\t// Free WebGL resources\n    \t\t\tprogram.destroy();\n\n    \t\t}\n\n    \t};\n\n    \t// Exposed for resource monitoring & error feedback via renderer.info:\n    \tthis.programs = programs;\n\n    }\n\n    function WebGLGeometries( gl, properties, info ) {\n\n    \tvar geometries = {};\n\n    \tfunction onGeometryDispose( event ) {\n\n    \t\tvar geometry = event.target;\n    \t\tvar buffergeometry = geometries[ geometry.id ];\n\n    \t\tif ( buffergeometry.index !== null ) {\n\n    \t\t\tdeleteAttribute( buffergeometry.index );\n\n    \t\t}\n\n    \t\tdeleteAttributes( buffergeometry.attributes );\n\n    \t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n    \t\tdelete geometries[ geometry.id ];\n\n    \t\t// TODO\n\n    \t\tvar property = properties.get( geometry );\n\n    \t\tif ( property.wireframe ) {\n\n    \t\t\tdeleteAttribute( property.wireframe );\n\n    \t\t}\n\n    \t\tproperties.delete( geometry );\n\n    \t\tvar bufferproperty = properties.get( buffergeometry );\n\n    \t\tif ( bufferproperty.wireframe ) {\n\n    \t\t\tdeleteAttribute( bufferproperty.wireframe );\n\n    \t\t}\n\n    \t\tproperties.delete( buffergeometry );\n\n    \t\t//\n\n    \t\tinfo.memory.geometries --;\n\n    \t}\n\n    \tfunction getAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n    \t\t}\n\n    \t\treturn properties.get( attribute ).__webglBuffer;\n\n    \t}\n\n    \tfunction deleteAttribute( attribute ) {\n\n    \t\tvar buffer = getAttributeBuffer( attribute );\n\n    \t\tif ( buffer !== undefined ) {\n\n    \t\t\tgl.deleteBuffer( buffer );\n    \t\t\tremoveAttributeBuffer( attribute );\n\n    \t\t}\n\n    \t}\n\n    \tfunction deleteAttributes( attributes ) {\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tdeleteAttribute( attributes[ name ] );\n\n    \t\t}\n\n    \t}\n\n    \tfunction removeAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\tproperties.delete( attribute.data );\n\n    \t\t} else {\n\n    \t\t\tproperties.delete( attribute );\n\n    \t\t}\n\n    \t}\n\n    \treturn {\n\n    \t\tget: function ( object ) {\n\n    \t\t\tvar geometry = object.geometry;\n\n    \t\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\n    \t\t\t\treturn geometries[ geometry.id ];\n\n    \t\t\t}\n\n    \t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n    \t\t\tvar buffergeometry;\n\n    \t\t\tif ( geometry.isBufferGeometry ) {\n\n    \t\t\t\tbuffergeometry = geometry;\n\n    \t\t\t} else if ( geometry.isGeometry ) {\n\n    \t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n    \t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n    \t\t\t\t}\n\n    \t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n    \t\t\t}\n\n    \t\t\tgeometries[ geometry.id ] = buffergeometry;\n\n    \t\t\tinfo.memory.geometries ++;\n\n    \t\t\treturn buffergeometry;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLObjects( gl, properties, info ) {\n\n    \tvar geometries = new WebGLGeometries( gl, properties, info );\n\n    \t//\n\n    \tfunction update( object ) {\n\n    \t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\n    \t\tvar geometry = geometries.get( object );\n\n    \t\tif ( object.geometry.isGeometry ) {\n\n    \t\t\tgeometry.updateFromObject( object );\n\n    \t\t}\n\n    \t\tvar index = geometry.index;\n    \t\tvar attributes = geometry.attributes;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\n    \t\t}\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\n    \t\t}\n\n    \t\t// morph targets\n\n    \t\tvar morphAttributes = geometry.morphAttributes;\n\n    \t\tfor ( var name in morphAttributes ) {\n\n    \t\t\tvar array = morphAttributes[ name ];\n\n    \t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n    \t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    \tfunction updateAttribute( attribute, bufferType ) {\n\n    \t\tvar data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;\n\n    \t\tvar attributeProperties = properties.get( data );\n\n    \t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\n    \t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\n    \t\t} else if ( attributeProperties.version !== data.version ) {\n\n    \t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\n    \t\t}\n\n    \t}\n\n    \tfunction createBuffer( attributeProperties, data, bufferType ) {\n\n    \t\tattributeProperties.__webglBuffer = gl.createBuffer();\n    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n    \t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n    \t\tgl.bufferData( bufferType, data.array, usage );\n\n    \t\tattributeProperties.version = data.version;\n\n    \t}\n\n    \tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\n    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n    \t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\n    \t\t\t// Not using update ranges\n\n    \t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\n    \t\t} else if ( data.updateRange.count === 0 ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n    \t\t} else {\n\n    \t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n    \t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\n    \t\t\tdata.updateRange.count = 0; // reset range\n\n    \t\t}\n\n    \t\tattributeProperties.version = data.version;\n\n    \t}\n\n    \tfunction getAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n    \t\t}\n\n    \t\treturn properties.get( attribute ).__webglBuffer;\n\n    \t}\n\n    \tfunction getWireframeAttribute( geometry ) {\n\n    \t\tvar property = properties.get( geometry );\n\n    \t\tif ( property.wireframe !== undefined ) {\n\n    \t\t\treturn property.wireframe;\n\n    \t\t}\n\n    \t\tvar indices = [];\n\n    \t\tvar index = geometry.index;\n    \t\tvar attributes = geometry.attributes;\n    \t\tvar position = attributes.position;\n\n    \t\t// console.time( 'wireframe' );\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tvar edges = {};\n    \t\t\tvar array = index.array;\n\n    \t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n    \t\t\t\tvar a = array[ i + 0 ];\n    \t\t\t\tvar b = array[ i + 1 ];\n    \t\t\t\tvar c = array[ i + 2 ];\n\n    \t\t\t\tindices.push( a, b, b, c, c, a );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tvar array = attributes.position.array;\n\n    \t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n    \t\t\t\tvar a = i + 0;\n    \t\t\t\tvar b = i + 1;\n    \t\t\t\tvar c = i + 2;\n\n    \t\t\t\tindices.push( a, b, b, c, c, a );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// console.timeEnd( 'wireframe' );\n\n    \t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n    \t\tvar attribute = new BufferAttribute( new TypeArray( indices ), 1 );\n\n    \t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n    \t\tproperty.wireframe = attribute;\n\n    \t\treturn attribute;\n\n    \t}\n\n    \treturn {\n\n    \t\tgetAttributeBuffer: getAttributeBuffer,\n    \t\tgetWireframeAttribute: getWireframeAttribute,\n\n    \t\tupdate: update\n\n    \t};\n\n    }\n\n    function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\n    \tvar _infoMemory = info.memory;\n    \tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\n    \t//\n\n    \tfunction clampToMaxSize( image, maxSize ) {\n\n    \t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n    \t\t\t// Warning: Scaling through the canvas will only work with images that use\n    \t\t\t// premultiplied alpha.\n\n    \t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\tcanvas.width = Math.floor( image.width * scale );\n    \t\t\tcanvas.height = Math.floor( image.height * scale );\n\n    \t\t\tvar context = canvas.getContext( '2d' );\n    \t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n    \t\t\treturn canvas;\n\n    \t\t}\n\n    \t\treturn image;\n\n    \t}\n\n    \tfunction isPowerOfTwo( image ) {\n\n    \t\treturn exports.Math.isPowerOfTwo( image.width ) && exports.Math.isPowerOfTwo( image.height );\n\n    \t}\n\n    \tfunction makePowerOfTwo( image ) {\n\n    \t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\n    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\tcanvas.width = exports.Math.nearestPowerOfTwo( image.width );\n    \t\t\tcanvas.height = exports.Math.nearestPowerOfTwo( image.height );\n\n    \t\t\tvar context = canvas.getContext( '2d' );\n    \t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n    \t\t\treturn canvas;\n\n    \t\t}\n\n    \t\treturn image;\n\n    \t}\n\n    \tfunction textureNeedsPowerOfTwo( texture ) {\n\n    \t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;\n    \t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;\n\n    \t\treturn false;\n\n    \t}\n\n    \t// Fallback filters for non-power-of-2 textures\n\n    \tfunction filterFallback( f ) {\n\n    \t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\n    \t\t\treturn _gl.NEAREST;\n\n    \t\t}\n\n    \t\treturn _gl.LINEAR;\n\n    \t}\n\n    \t//\n\n    \tfunction onTextureDispose( event ) {\n\n    \t\tvar texture = event.target;\n\n    \t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n    \t\tdeallocateTexture( texture );\n\n    \t\t_infoMemory.textures --;\n\n\n    \t}\n\n    \tfunction onRenderTargetDispose( event ) {\n\n    \t\tvar renderTarget = event.target;\n\n    \t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n    \t\tdeallocateRenderTarget( renderTarget );\n\n    \t\t_infoMemory.textures --;\n\n    \t}\n\n    \t//\n\n    \tfunction deallocateTexture( texture ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n    \t\t\t// cube texture\n\n    \t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n    \t\t} else {\n\n    \t\t\t// 2D texture\n\n    \t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n    \t\t}\n\n    \t\t// remove all webgl properties\n    \t\tproperties.delete( texture );\n\n    \t}\n\n    \tfunction deallocateRenderTarget( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\n    \t\tif ( ! renderTarget ) return;\n\n    \t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n    \t\t}\n\n    \t\tif ( renderTarget.depthTexture ) {\n\n    \t\t\trenderTarget.depthTexture.dispose();\n\n    \t\t}\n\n    \t\tif ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n    \t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n    \t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n    \t\t}\n\n    \t\tproperties.delete( renderTarget.texture );\n    \t\tproperties.delete( renderTarget );\n\n    \t}\n\n    \t//\n\n\n\n    \tfunction setTexture2D( texture, slot ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n    \t\t\tvar image = texture.image;\n\n    \t\t\tif ( image === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n    \t\t\t} else if ( image.complete === false ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n    \t\t\t} else {\n\n    \t\t\t\tuploadTexture( textureProperties, texture, slot );\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n    \t}\n\n    \tfunction setTextureCube( texture, slot ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.image.length === 6 ) {\n\n    \t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n    \t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n    \t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n    \t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n    \t\t\t\t\t_infoMemory.textures ++;\n\n    \t\t\t\t}\n\n    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n    \t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n    \t\t\t\tvar isCompressed = (texture && texture.isCompressedTexture);\n    \t\t\t\tvar isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);\n\n    \t\t\t\tvar cubeImage = [];\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n    \t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tvar image = cubeImage[ 0 ],\n    \t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n    \t\t\t\tglFormat = paramThreeToGL( texture.format ),\n    \t\t\t\tglType = paramThreeToGL( texture.type );\n\n    \t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\tif ( ! isCompressed ) {\n\n    \t\t\t\t\t\tif ( isDataTexture ) {\n\n    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n    \t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n    \t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n    \t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n    \t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n    \t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n    \t\t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\n    \t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n    \t\t\t\t}\n\n    \t\t\t\ttextureProperties.__version = texture.version;\n\n    \t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction setTextureCubeDynamic( texture, slot ) {\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n    \t}\n\n    \tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\n    \t\tvar extension;\n\n    \t\tif ( isPowerOfTwoImage ) {\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n    \t\t} else {\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n    \t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n    \t\t\t}\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n    \t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n    \t\tif ( extension ) {\n\n    \t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n    \t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n    \t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n    \t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n    \t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction uploadTexture( textureProperties, texture, slot ) {\n\n    \t\tif ( textureProperties.__webglInit === undefined ) {\n\n    \t\t\ttextureProperties.__webglInit = true;\n\n    \t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n    \t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n    \t\t\t_infoMemory.textures ++;\n\n    \t\t}\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n    \t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n    \t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n    \t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n    \t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n    \t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n    \t\t\timage = makePowerOfTwo( image );\n\n    \t\t}\n\n    \t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n    \t\tglFormat = paramThreeToGL( texture.format ),\n    \t\tglType = paramThreeToGL( texture.type );\n\n    \t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n    \t\tvar mipmap, mipmaps = texture.mipmaps;\n\n    \t\tif ( (texture && texture.isDepthTexture) ) {\n\n    \t\t\t// populate depth texture with dummy data\n\n    \t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n    \t\t\tif ( texture.type === FloatType ) {\n\n    \t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n    \t\t\t} else if ( _isWebGL2 ) {\n\n    \t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n    \t\t\t}\n\n    \t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n    \t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n    \t\t\tif ( texture.format === DepthStencilFormat ) {\n\n    \t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\n    \t\t\t}\n\n    \t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n    \t\t} else if ( (texture && texture.isDataTexture) ) {\n\n    \t\t\t// use manually created mipmaps if available\n    \t\t\t// if there are no manual mipmaps\n    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\t\tmipmap = mipmaps[ i ];\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.generateMipmaps = false;\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n    \t\t\t}\n\n    \t\t} else if ( (texture && texture.isCompressedTexture) ) {\n\n    \t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\tmipmap = mipmaps[ i ];\n\n    \t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n    \t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n    \t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// regular Texture (image, video, canvas)\n\n    \t\t\t// use manually created mipmaps if available\n    \t\t\t// if there are no manual mipmaps\n    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\t\tmipmap = mipmaps[ i ];\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.generateMipmaps = false;\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n    \t\ttextureProperties.__version = texture.version;\n\n    \t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n    \t}\n\n    \t// Render targets\n\n    \t// Setup storage for target texture and bind it to correct framebuffer\n    \tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n    \t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n    \t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n    \t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n    \t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n    \t}\n\n    \t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n    \tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\n    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n    \t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n    \t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n    \t\t} else {\n\n    \t\t\t// FIXME: We don't support !depth !stencil\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n    \t\t}\n\n    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n    \t}\n\n    \t// Setup resources for a Depth Texture for a FBO (needs an extension)\n    \tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n    \t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n    \t\tif ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {\n\n    \t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\n    \t\t}\n\n    \t\t// upload an empty depth texture with framebuffer size\n    \t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n    \t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n    \t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n    \t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n    \t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n    \t\t\trenderTarget.depthTexture.needsUpdate = true;\n    \t\t}\n\n    \t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n    \t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n    \t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n    \t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n    \t\t} else {\n\n    \t\t\tthrow new Error('Unknown depthTexture format')\n\n    \t\t}\n\n    \t}\n\n    \t// Setup GL resources for a non-texture depth buffer\n    \tfunction setupDepthRenderbuffer( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\n    \t\tif ( renderTarget.depthTexture ) {\n\n    \t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\n    \t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n    \t\t} else {\n\n    \t\t\tif ( isCube ) {\n\n    \t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n    \t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n    \t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n    \t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n    \t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n    \t}\n\n    \t// Set up GL resources for the render target\n    \tfunction setupRenderTarget( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\n    \t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n    \t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n    \t\t_infoMemory.textures ++;\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n    \t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n    \t\t// Setup framebuffer\n\n    \t\tif ( isCube ) {\n\n    \t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n    \t\t}\n\n    \t\t// Setup color buffer\n\n    \t\tif ( isCube ) {\n\n    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n    \t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n    \t\t\t}\n\n    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n    \t\t} else {\n\n    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n    \t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n    \t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n    \t\t}\n\n    \t\t// Setup depth and stencil buffers\n\n    \t\tif ( renderTarget.depthBuffer ) {\n\n    \t\t\tsetupDepthRenderbuffer( renderTarget );\n\n    \t\t}\n\n    \t}\n\n    \tfunction updateRenderTargetMipmap( renderTarget ) {\n\n    \t\tvar texture = renderTarget.texture;\n\n    \t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n    \t\t\t\ttexture.minFilter !== NearestFilter &&\n    \t\t\t\ttexture.minFilter !== LinearFilter ) {\n\n    \t\t\tvar target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n    \t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n    \t\t\tstate.bindTexture( target, webglTexture );\n    \t\t\t_gl.generateMipmap( target );\n    \t\t\tstate.bindTexture( target, null );\n\n    \t\t}\n\n    \t}\n\n    \tthis.setTexture2D = setTexture2D;\n    \tthis.setTextureCube = setTextureCube;\n    \tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n    \tthis.setupRenderTarget = setupRenderTarget;\n    \tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n    }\n\n    /**\n     * @author fordacious / fordacious.github.io\n     */\n\n    function WebGLProperties() {\n\n    \tvar properties = {};\n\n    \treturn {\n\n    \t\tget: function ( object ) {\n\n    \t\t\tvar uuid = object.uuid;\n    \t\t\tvar map = properties[ uuid ];\n\n    \t\t\tif ( map === undefined ) {\n\n    \t\t\t\tmap = {};\n    \t\t\t\tproperties[ uuid ] = map;\n\n    \t\t\t}\n\n    \t\t\treturn map;\n\n    \t\t},\n\n    \t\tdelete: function ( object ) {\n\n    \t\t\tdelete properties[ object.uuid ];\n\n    \t\t},\n\n    \t\tclear: function () {\n\n    \t\t\tproperties = {};\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLState( gl, extensions, paramThreeToGL ) {\n\n    \tfunction ColorBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar color = new Vector4();\n    \t\tvar currentColorMask = null;\n    \t\tvar currentColorClear = new Vector4();\n\n    \t\treturn {\n\n    \t\t\tsetMask: function ( colorMask ) {\n\n    \t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n    \t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n    \t\t\t\t\tcurrentColorMask = colorMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( r, g, b, a ) {\n\n    \t\t\t\tcolor.set( r, g, b, a );\n\n    \t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n    \t\t\t\t\tgl.clearColor( r, g, b, a );\n    \t\t\t\t\tcurrentColorClear.copy( color );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentColorMask = null;\n    \t\t\t\tcurrentColorClear.set( 0, 0, 0, 1 );\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \tfunction DepthBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar currentDepthMask = null;\n    \t\tvar currentDepthFunc = null;\n    \t\tvar currentDepthClear = null;\n\n    \t\treturn {\n\n    \t\t\tsetTest: function ( depthTest ) {\n\n    \t\t\t\tif ( depthTest ) {\n\n    \t\t\t\t\tenable( gl.DEPTH_TEST );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetMask: function ( depthMask ) {\n\n    \t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n    \t\t\t\t\tgl.depthMask( depthMask );\n    \t\t\t\t\tcurrentDepthMask = depthMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetFunc: function ( depthFunc ) {\n\n    \t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n    \t\t\t\t\tif ( depthFunc ) {\n\n    \t\t\t\t\t\tswitch ( depthFunc ) {\n\n    \t\t\t\t\t\t\tcase NeverDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase AlwaysDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase LessDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase LessEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase EqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase GreaterDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase NotEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tdefault:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( depth ) {\n\n    \t\t\t\tif ( currentDepthClear !== depth ) {\n\n    \t\t\t\t\tgl.clearDepth( depth );\n    \t\t\t\t\tcurrentDepthClear = depth;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentDepthMask = null;\n    \t\t\t\tcurrentDepthFunc = null;\n    \t\t\t\tcurrentDepthClear = null;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \tfunction StencilBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar currentStencilMask = null;\n    \t\tvar currentStencilFunc = null;\n    \t\tvar currentStencilRef = null;\n    \t\tvar currentStencilFuncMask = null;\n    \t\tvar currentStencilFail  = null;\n    \t\tvar currentStencilZFail = null;\n    \t\tvar currentStencilZPass = null;\n    \t\tvar currentStencilClear = null;\n\n    \t\treturn {\n\n    \t\t\tsetTest: function ( stencilTest ) {\n\n    \t\t\t\tif ( stencilTest ) {\n\n    \t\t\t\t\tenable( gl.STENCIL_TEST );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetMask: function ( stencilMask ) {\n\n    \t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n    \t\t\t\t\tgl.stencilMask( stencilMask );\n    \t\t\t\t\tcurrentStencilMask = stencilMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n    \t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n    \t\t\t\t     currentStencilRef \t!== stencilRef \t||\n    \t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n    \t\t\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\n    \t\t\t\t\tcurrentStencilFunc = stencilFunc;\n    \t\t\t\t\tcurrentStencilRef  = stencilRef;\n    \t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n    \t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n    \t\t\t\t     currentStencilZFail !== stencilZFail ||\n    \t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n    \t\t\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\n    \t\t\t\t\tcurrentStencilFail  = stencilFail;\n    \t\t\t\t\tcurrentStencilZFail = stencilZFail;\n    \t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( stencil ) {\n\n    \t\t\t\tif ( currentStencilClear !== stencil ) {\n\n    \t\t\t\t\tgl.clearStencil( stencil );\n    \t\t\t\t\tcurrentStencilClear = stencil;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentStencilMask = null;\n    \t\t\t\tcurrentStencilFunc = null;\n    \t\t\t\tcurrentStencilRef = null;\n    \t\t\t\tcurrentStencilFuncMask = null;\n    \t\t\t\tcurrentStencilFail = null;\n    \t\t\t\tcurrentStencilZFail = null;\n    \t\t\t\tcurrentStencilZPass = null;\n    \t\t\t\tcurrentStencilClear = null;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \t//\n\n    \tvar colorBuffer = new ColorBuffer();\n    \tvar depthBuffer = new DepthBuffer();\n    \tvar stencilBuffer = new StencilBuffer();\n\n    \tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    \tvar newAttributes = new Uint8Array( maxVertexAttributes );\n    \tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n    \tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n    \tvar capabilities = {};\n\n    \tvar compressedTextureFormats = null;\n\n    \tvar currentBlending = null;\n    \tvar currentBlendEquation = null;\n    \tvar currentBlendSrc = null;\n    \tvar currentBlendDst = null;\n    \tvar currentBlendEquationAlpha = null;\n    \tvar currentBlendSrcAlpha = null;\n    \tvar currentBlendDstAlpha = null;\n    \tvar currentPremultipledAlpha = false;\n\n    \tvar currentFlipSided = null;\n    \tvar currentCullFace = null;\n\n    \tvar currentLineWidth = null;\n\n    \tvar currentPolygonOffsetFactor = null;\n    \tvar currentPolygonOffsetUnits = null;\n\n    \tvar currentScissorTest = null;\n\n    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\n    \tvar currentTextureSlot = null;\n    \tvar currentBoundTextures = {};\n\n    \tvar currentScissor = new Vector4();\n    \tvar currentViewport = new Vector4();\n\n    \tfunction createTexture( type, target, count ) {\n\n    \t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n    \t\tvar texture = gl.createTexture();\n\n    \t\tgl.bindTexture( type, texture );\n    \t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n    \t\tfor ( var i = 0; i < count; i ++ ) {\n\n    \t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t}\n\n    \tvar emptyTextures = {};\n    \temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n    \temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n    \t//\n\n    \tfunction init() {\n\n    \t\tclearColor( 0, 0, 0, 1 );\n    \t\tclearDepth( 1 );\n    \t\tclearStencil( 0 );\n\n    \t\tenable( gl.DEPTH_TEST );\n    \t\tsetDepthFunc( LessEqualDepth );\n\n    \t\tsetFlipSided( false );\n    \t\tsetCullFace( CullFaceBack );\n    \t\tenable( gl.CULL_FACE );\n\n    \t\tenable( gl.BLEND );\n    \t\tsetBlending( NormalBlending );\n\n    \t}\n\n    \tfunction initAttributes() {\n\n    \t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n    \t\t\tnewAttributes[ i ] = 0;\n\n    \t\t}\n\n    \t}\n\n    \tfunction enableAttribute( attribute ) {\n\n    \t\tnewAttributes[ attribute ] = 1;\n\n    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n    \t\t\tgl.enableVertexAttribArray( attribute );\n    \t\t\tenabledAttributes[ attribute ] = 1;\n\n    \t\t}\n\n    \t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n    \t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n    \t\t\tattributeDivisors[ attribute ] = 0;\n\n    \t\t}\n\n    \t}\n\n    \tfunction enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {\n\n    \t\tnewAttributes[ attribute ] = 1;\n\n    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n    \t\t\tgl.enableVertexAttribArray( attribute );\n    \t\t\tenabledAttributes[ attribute ] = 1;\n\n    \t\t}\n\n    \t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n    \t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n    \t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n    \t\t}\n\n    \t}\n\n    \tfunction disableUnusedAttributes() {\n\n    \t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n    \t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n    \t\t\t\tgl.disableVertexAttribArray( i );\n    \t\t\t\tenabledAttributes[ i ] = 0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction enable( id ) {\n\n    \t\tif ( capabilities[ id ] !== true ) {\n\n    \t\t\tgl.enable( id );\n    \t\t\tcapabilities[ id ] = true;\n\n    \t\t}\n\n    \t}\n\n    \tfunction disable( id ) {\n\n    \t\tif ( capabilities[ id ] !== false ) {\n\n    \t\t\tgl.disable( id );\n    \t\t\tcapabilities[ id ] = false;\n\n    \t\t}\n\n    \t}\n\n    \tfunction getCompressedTextureFormats() {\n\n    \t\tif ( compressedTextureFormats === null ) {\n\n    \t\t\tcompressedTextureFormats = [];\n\n    \t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n    \t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n    \t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n    \t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n    \t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n    \t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn compressedTextureFormats;\n\n    \t}\n\n    \tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n    \t\tif ( blending !== NoBlending ) {\n\n    \t\t\tenable( gl.BLEND );\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.BLEND );\n    \t\t\tcurrentBlending = blending; // no blending, that is\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n    \t\t\tif ( blending === AdditiveBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( blending === SubtractiveBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( blending === MultiplyBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tcurrentBlending = blending;\n    \t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n    \t\t}\n\n    \t\tif ( blending === CustomBlending ) {\n\n    \t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n    \t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n    \t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n    \t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n    \t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\n    \t\t\t\tcurrentBlendEquation = blendEquation;\n    \t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n    \t\t\t}\n\n    \t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n    \t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\n    \t\t\t\tcurrentBlendSrc = blendSrc;\n    \t\t\t\tcurrentBlendDst = blendDst;\n    \t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n    \t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tcurrentBlendEquation = null;\n    \t\t\tcurrentBlendSrc = null;\n    \t\t\tcurrentBlendDst = null;\n    \t\t\tcurrentBlendEquationAlpha = null;\n    \t\t\tcurrentBlendSrcAlpha = null;\n    \t\t\tcurrentBlendDstAlpha = null;\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Deprecate\n\n    \tfunction setColorWrite( colorWrite ) {\n\n    \t\tcolorBuffer.setMask( colorWrite );\n\n    \t}\n\n    \tfunction setDepthTest( depthTest ) {\n\n    \t\tdepthBuffer.setTest( depthTest );\n\n    \t}\n\n    \tfunction setDepthWrite( depthWrite ) {\n\n    \t\tdepthBuffer.setMask( depthWrite );\n\n    \t}\n\n    \tfunction setDepthFunc( depthFunc ) {\n\n    \t\tdepthBuffer.setFunc( depthFunc );\n\n    \t}\n\n    \tfunction setStencilTest( stencilTest ) {\n\n    \t\tstencilBuffer.setTest( stencilTest );\n\n    \t}\n\n    \tfunction setStencilWrite( stencilWrite ) {\n\n    \t\tstencilBuffer.setMask( stencilWrite );\n\n    \t}\n\n    \tfunction setStencilFunc( stencilFunc, stencilRef, stencilMask ) {\n\n    \t\tstencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );\n\n    \t}\n\n    \tfunction setStencilOp( stencilFail, stencilZFail, stencilZPass ) {\n\n    \t\tstencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );\n\n    \t}\n\n    \t//\n\n    \tfunction setFlipSided( flipSided ) {\n\n    \t\tif ( currentFlipSided !== flipSided ) {\n\n    \t\t\tif ( flipSided ) {\n\n    \t\t\t\tgl.frontFace( gl.CW );\n\n    \t\t\t} else {\n\n    \t\t\t\tgl.frontFace( gl.CCW );\n\n    \t\t\t}\n\n    \t\t\tcurrentFlipSided = flipSided;\n\n    \t\t}\n\n    \t}\n\n    \tfunction setCullFace( cullFace ) {\n\n    \t\tif ( cullFace !== CullFaceNone ) {\n\n    \t\t\tenable( gl.CULL_FACE );\n\n    \t\t\tif ( cullFace !== currentCullFace ) {\n\n    \t\t\t\tif ( cullFace === CullFaceBack ) {\n\n    \t\t\t\t\tgl.cullFace( gl.BACK );\n\n    \t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n    \t\t\t\t\tgl.cullFace( gl.FRONT );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.CULL_FACE );\n\n    \t\t}\n\n    \t\tcurrentCullFace = cullFace;\n\n    \t}\n\n    \tfunction setLineWidth( width ) {\n\n    \t\tif ( width !== currentLineWidth ) {\n\n    \t\t\tgl.lineWidth( width );\n\n    \t\t\tcurrentLineWidth = width;\n\n    \t\t}\n\n    \t}\n\n    \tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n    \t\tif ( polygonOffset ) {\n\n    \t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n    \t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n    \t\t\t\tgl.polygonOffset( factor, units );\n\n    \t\t\t\tcurrentPolygonOffsetFactor = factor;\n    \t\t\t\tcurrentPolygonOffsetUnits = units;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n    \t\t}\n\n    \t}\n\n    \tfunction getScissorTest() {\n\n    \t\treturn currentScissorTest;\n\n    \t}\n\n    \tfunction setScissorTest( scissorTest ) {\n\n    \t\tcurrentScissorTest = scissorTest;\n\n    \t\tif ( scissorTest ) {\n\n    \t\t\tenable( gl.SCISSOR_TEST );\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.SCISSOR_TEST );\n\n    \t\t}\n\n    \t}\n\n    \t// texture\n\n    \tfunction activeTexture( webglSlot ) {\n\n    \t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n    \t\tif ( currentTextureSlot !== webglSlot ) {\n\n    \t\t\tgl.activeTexture( webglSlot );\n    \t\t\tcurrentTextureSlot = webglSlot;\n\n    \t\t}\n\n    \t}\n\n    \tfunction bindTexture( webglType, webglTexture ) {\n\n    \t\tif ( currentTextureSlot === null ) {\n\n    \t\t\tactiveTexture();\n\n    \t\t}\n\n    \t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n    \t\tif ( boundTexture === undefined ) {\n\n    \t\t\tboundTexture = { type: undefined, texture: undefined };\n    \t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n    \t\t}\n\n    \t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n    \t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n    \t\t\tboundTexture.type = webglType;\n    \t\t\tboundTexture.texture = webglTexture;\n\n    \t\t}\n\n    \t}\n\n    \tfunction compressedTexImage2D() {\n\n    \t\ttry {\n\n    \t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n    \t\t} catch ( error ) {\n\n    \t\t\tconsole.error( error );\n\n    \t\t}\n\n    \t}\n\n    \tfunction texImage2D() {\n\n    \t\ttry {\n\n    \t\t\tgl.texImage2D.apply( gl, arguments );\n\n    \t\t} catch ( error ) {\n\n    \t\t\tconsole.error( error );\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Deprecate\n\n    \tfunction clearColor( r, g, b, a ) {\n\n    \t\tcolorBuffer.setClear( r, g, b, a );\n\n    \t}\n\n    \tfunction clearDepth( depth ) {\n\n    \t\tdepthBuffer.setClear( depth );\n\n    \t}\n\n    \tfunction clearStencil( stencil ) {\n\n    \t\tstencilBuffer.setClear( stencil );\n\n    \t}\n\n    \t//\n\n    \tfunction scissor( scissor ) {\n\n    \t\tif ( currentScissor.equals( scissor ) === false ) {\n\n    \t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n    \t\t\tcurrentScissor.copy( scissor );\n\n    \t\t}\n\n    \t}\n\n    \tfunction viewport( viewport ) {\n\n    \t\tif ( currentViewport.equals( viewport ) === false ) {\n\n    \t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n    \t\t\tcurrentViewport.copy( viewport );\n\n    \t\t}\n\n    \t}\n\n    \t//\n\n    \tfunction reset() {\n\n    \t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n    \t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n    \t\t\t\tgl.disableVertexAttribArray( i );\n    \t\t\t\tenabledAttributes[ i ] = 0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tcapabilities = {};\n\n    \t\tcompressedTextureFormats = null;\n\n    \t\tcurrentTextureSlot = null;\n    \t\tcurrentBoundTextures = {};\n\n    \t\tcurrentBlending = null;\n\n    \t\tcurrentFlipSided = null;\n    \t\tcurrentCullFace = null;\n\n    \t\tcolorBuffer.reset();\n    \t\tdepthBuffer.reset();\n    \t\tstencilBuffer.reset();\n\n    \t}\n\n    \treturn {\n\n    \t\tbuffers: {\n    \t\t\tcolor: colorBuffer,\n    \t\t\tdepth: depthBuffer,\n    \t\t\tstencil: stencilBuffer\n    \t\t},\n\n    \t\tinit: init,\n    \t\tinitAttributes: initAttributes,\n    \t\tenableAttribute: enableAttribute,\n    \t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n    \t\tdisableUnusedAttributes: disableUnusedAttributes,\n    \t\tenable: enable,\n    \t\tdisable: disable,\n    \t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n    \t\tsetBlending: setBlending,\n\n    \t\tsetColorWrite: setColorWrite,\n    \t\tsetDepthTest: setDepthTest,\n    \t\tsetDepthWrite: setDepthWrite,\n    \t\tsetDepthFunc: setDepthFunc,\n    \t\tsetStencilTest: setStencilTest,\n    \t\tsetStencilWrite: setStencilWrite,\n    \t\tsetStencilFunc: setStencilFunc,\n    \t\tsetStencilOp: setStencilOp,\n\n    \t\tsetFlipSided: setFlipSided,\n    \t\tsetCullFace: setCullFace,\n\n    \t\tsetLineWidth: setLineWidth,\n    \t\tsetPolygonOffset: setPolygonOffset,\n\n    \t\tgetScissorTest: getScissorTest,\n    \t\tsetScissorTest: setScissorTest,\n\n    \t\tactiveTexture: activeTexture,\n    \t\tbindTexture: bindTexture,\n    \t\tcompressedTexImage2D: compressedTexImage2D,\n    \t\ttexImage2D: texImage2D,\n\n    \t\tclearColor: clearColor,\n    \t\tclearDepth: clearDepth,\n    \t\tclearStencil: clearStencil,\n\n    \t\tscissor: scissor,\n    \t\tviewport: viewport,\n\n    \t\treset: reset\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLCapabilities( gl, extensions, parameters ) {\n\n    \tvar maxAnisotropy;\n\n    \tfunction getMaxAnisotropy() {\n\n    \t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n    \t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n    \t\t} else {\n\n    \t\t\tmaxAnisotropy = 0;\n\n    \t\t}\n\n    \t\treturn maxAnisotropy;\n\n    \t}\n\n    \tfunction getMaxPrecision( precision ) {\n\n    \t\tif ( precision === 'highp' ) {\n\n    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n    \t\t\t\treturn 'highp';\n\n    \t\t\t}\n\n    \t\t\tprecision = 'mediump';\n\n    \t\t}\n\n    \t\tif ( precision === 'mediump' ) {\n\n    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n    \t\t\t\treturn 'mediump';\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn 'lowp';\n\n    \t}\n\n    \tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    \tvar maxPrecision = getMaxPrecision( precision );\n\n    \tif ( maxPrecision !== precision ) {\n\n    \t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n    \t\tprecision = maxPrecision;\n\n    \t}\n\n    \tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );\n\n    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n    \tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n    \tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n    \tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n    \tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    \tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n    \tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n    \tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n    \tvar vertexTextures = maxVertexTextures > 0;\n    \tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n    \tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n    \treturn {\n\n    \t\tgetMaxAnisotropy: getMaxAnisotropy,\n    \t\tgetMaxPrecision: getMaxPrecision,\n\n    \t\tprecision: precision,\n    \t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n    \t\tmaxTextures: maxTextures,\n    \t\tmaxVertexTextures: maxVertexTextures,\n    \t\tmaxTextureSize: maxTextureSize,\n    \t\tmaxCubemapSize: maxCubemapSize,\n\n    \t\tmaxAttributes: maxAttributes,\n    \t\tmaxVertexUniforms: maxVertexUniforms,\n    \t\tmaxVaryings: maxVaryings,\n    \t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n    \t\tvertexTextures: vertexTextures,\n    \t\tfloatFragmentTextures: floatFragmentTextures,\n    \t\tfloatVertexTextures: floatVertexTextures\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLExtensions( gl ) {\n\n    \tvar extensions = {};\n\n    \treturn {\n\n    \t\tget: function ( name ) {\n\n    \t\t\tif ( extensions[ name ] !== undefined ) {\n\n    \t\t\t\treturn extensions[ name ];\n\n    \t\t\t}\n\n    \t\t\tvar extension;\n\n    \t\t\tswitch ( name ) {\n\n    \t\t\t\tcase 'WEBGL_depth_texture':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'EXT_texture_filter_anisotropic':\n    \t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n    \t\t\t\t\textension = gl.getExtension( name );\n\n    \t\t\t}\n\n    \t\t\tif ( extension === null ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n    \t\t\t}\n\n    \t\t\textensions[ name ] = extension;\n\n    \t\t\treturn extension;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLClipping() {\n\n    \tvar scope = this,\n\n    \t\tglobalState = null,\n    \t\tnumGlobalPlanes = 0,\n    \t\tlocalClippingEnabled = false,\n    \t\trenderingShadows = false,\n\n    \t\tplane = new Plane(),\n    \t\tviewNormalMatrix = new Matrix3(),\n\n    \t\tuniform = { value: null, needsUpdate: false };\n\n    \tthis.uniform = uniform;\n    \tthis.numPlanes = 0;\n\n    \tthis.init = function( planes, enableLocalClipping, camera ) {\n\n    \t\tvar enabled =\n    \t\t\tplanes.length !== 0 ||\n    \t\t\tenableLocalClipping ||\n    \t\t\t// enable state of previous frame - the clipping code has to\n    \t\t\t// run another frame in order to reset the state:\n    \t\t\tnumGlobalPlanes !== 0 ||\n    \t\t\tlocalClippingEnabled;\n\n    \t\tlocalClippingEnabled = enableLocalClipping;\n\n    \t\tglobalState = projectPlanes( planes, camera, 0 );\n    \t\tnumGlobalPlanes = planes.length;\n\n    \t\treturn enabled;\n\n    \t};\n\n    \tthis.beginShadows = function() {\n\n    \t\trenderingShadows = true;\n    \t\tprojectPlanes( null );\n\n    \t};\n\n    \tthis.endShadows = function() {\n\n    \t\trenderingShadows = false;\n    \t\tresetGlobalState();\n\n    \t};\n\n    \tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\n    \t\tif ( ! localClippingEnabled ||\n    \t\t\t\tplanes === null || planes.length === 0 ||\n    \t\t\t\trenderingShadows && ! clipShadows ) {\n    \t\t\t// there's no local clipping\n\n    \t\t\tif ( renderingShadows ) {\n    \t\t\t\t// there's no global clipping\n\n    \t\t\t\tprojectPlanes( null );\n\n    \t\t\t} else {\n\n    \t\t\t\tresetGlobalState();\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n    \t\t\t\tlGlobal = nGlobal * 4,\n\n    \t\t\t\tdstArray = cache.clippingState || null;\n\n    \t\t\tuniform.value = dstArray; // ensure unique state\n\n    \t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n    \t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n    \t\t\t\tdstArray[ i ] = globalState[ i ];\n\n    \t\t\t}\n\n    \t\t\tcache.clippingState = dstArray;\n    \t\t\tthis.numPlanes += nGlobal;\n\n    \t\t}\n\n\n    \t};\n\n    \tfunction resetGlobalState() {\n\n    \t\tif ( uniform.value !== globalState ) {\n\n    \t\t\tuniform.value = globalState;\n    \t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n    \t\t}\n\n    \t\tscope.numPlanes = numGlobalPlanes;\n\n    \t}\n\n    \tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n    \t\tvar nPlanes = planes !== null ? planes.length : 0,\n    \t\t\tdstArray = null;\n\n    \t\tif ( nPlanes !== 0 ) {\n\n    \t\t\tdstArray = uniform.value;\n\n    \t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n    \t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n    \t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n    \t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n    \t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n    \t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var i = 0, i4 = dstOffset;\n    \t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\n    \t\t\t\t\tplane.copy( planes[ i ] ).\n    \t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\n    \t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n    \t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tuniform.value = dstArray;\n    \t\t\tuniform.needsUpdate = true;\n\n    \t\t}\n\n    \t\tscope.numPlanes = nPlanes;\n    \t\treturn dstArray;\n\n    \t}\n\n    }\n\n    /**\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author szimek / https://github.com/szimek/\n     * @author tschw\n     */\n\n    function WebGLRenderer( parameters ) {\n\n    \tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\n    \tparameters = parameters || {};\n\n    \tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n    \t_context = parameters.context !== undefined ? parameters.context : null,\n\n    \t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n    \t_depth = parameters.depth !== undefined ? parameters.depth : true,\n    \t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n    \t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n    \t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n    \t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n    \tvar lights = [];\n\n    \tvar opaqueObjects = [];\n    \tvar opaqueObjectsLastIndex = - 1;\n    \tvar transparentObjects = [];\n    \tvar transparentObjectsLastIndex = - 1;\n\n    \tvar morphInfluences = new Float32Array( 8 );\n\n    \tvar sprites = [];\n    \tvar lensFlares = [];\n\n    \t// public properties\n\n    \tthis.domElement = _canvas;\n    \tthis.context = null;\n\n    \t// clearing\n\n    \tthis.autoClear = true;\n    \tthis.autoClearColor = true;\n    \tthis.autoClearDepth = true;\n    \tthis.autoClearStencil = true;\n\n    \t// scene graph\n\n    \tthis.sortObjects = true;\n\n    \t// user-defined clipping\n\n    \tthis.clippingPlanes = [];\n    \tthis.localClippingEnabled = false;\n\n    \t// physically based shading\n\n    \tthis.gammaFactor = 2.0;\t// for backwards compatibility\n    \tthis.gammaInput = false;\n    \tthis.gammaOutput = false;\n\n    \t// physical lights\n\n    \tthis.physicallyCorrectLights = false;\n\n    \t// tone mapping\n\n    \tthis.toneMapping = LinearToneMapping;\n    \tthis.toneMappingExposure = 1.0;\n    \tthis.toneMappingWhitePoint = 1.0;\n\n    \t// morphs\n\n    \tthis.maxMorphTargets = 8;\n    \tthis.maxMorphNormals = 4;\n\n    \t// internal properties\n\n    \tvar _this = this,\n\n    \t// internal state cache\n\n    \t_currentProgram = null,\n    \t_currentRenderTarget = null,\n    \t_currentFramebuffer = null,\n    \t_currentMaterialId = - 1,\n    \t_currentGeometryProgram = '',\n    \t_currentCamera = null,\n\n    \t_currentScissor = new Vector4(),\n    \t_currentScissorTest = null,\n\n    \t_currentViewport = new Vector4(),\n\n    \t//\n\n    \t_usedTextureUnits = 0,\n\n    \t//\n\n    \t_clearColor = new Color( 0x000000 ),\n    \t_clearAlpha = 0,\n\n    \t_width = _canvas.width,\n    \t_height = _canvas.height,\n\n    \t_pixelRatio = 1,\n\n    \t_scissor = new Vector4( 0, 0, _width, _height ),\n    \t_scissorTest = false,\n\n    \t_viewport = new Vector4( 0, 0, _width, _height ),\n\n    \t// frustum\n\n    \t_frustum = new Frustum(),\n\n    \t// clipping\n\n    \t_clipping = new WebGLClipping(),\n    \t_clippingEnabled = false,\n    \t_localClippingEnabled = false,\n\n    \t_sphere = new Sphere(),\n\n    \t// camera matrices cache\n\n    \t_projScreenMatrix = new Matrix4(),\n\n    \t_vector3 = new Vector3(),\n\n    \t// light arrays cache\n\n    \t_lights = {\n\n    \t\thash: '',\n\n    \t\tambient: [ 0, 0, 0 ],\n    \t\tdirectional: [],\n    \t\tdirectionalShadowMap: [],\n    \t\tdirectionalShadowMatrix: [],\n    \t\tspot: [],\n    \t\tspotShadowMap: [],\n    \t\tspotShadowMatrix: [],\n    \t\tpoint: [],\n    \t\tpointShadowMap: [],\n    \t\tpointShadowMatrix: [],\n    \t\themi: [],\n\n    \t\tshadows: []\n\n    \t},\n\n    \t// info\n\n    \t_infoRender = {\n\n    \t\tcalls: 0,\n    \t\tvertices: 0,\n    \t\tfaces: 0,\n    \t\tpoints: 0\n\n    \t};\n\n    \tthis.info = {\n\n    \t\trender: _infoRender,\n    \t\tmemory: {\n\n    \t\t\tgeometries: 0,\n    \t\t\ttextures: 0\n\n    \t\t},\n    \t\tprograms: null\n\n    \t};\n\n\n    \t// initialize\n\n    \tvar _gl;\n\n    \ttry {\n\n    \t\tvar attributes = {\n    \t\t\talpha: _alpha,\n    \t\t\tdepth: _depth,\n    \t\t\tstencil: _stencil,\n    \t\t\tantialias: _antialias,\n    \t\t\tpremultipliedAlpha: _premultipliedAlpha,\n    \t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n    \t\t};\n\n    \t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\n    \t\tif ( _gl === null ) {\n\n    \t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n    \t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n    \t\t\t} else {\n\n    \t\t\t\tthrow 'Error creating WebGL context.';\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n    \t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n    \t\t\t_gl.getShaderPrecisionFormat = function () {\n\n    \t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n    \t\t\t};\n\n    \t\t}\n\n    \t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\n    \t} catch ( error ) {\n\n    \t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n    \t}\n\n    \tvar extensions = new WebGLExtensions( _gl );\n\n    \textensions.get( 'WEBGL_depth_texture' );\n    \textensions.get( 'OES_texture_float' );\n    \textensions.get( 'OES_texture_float_linear' );\n    \textensions.get( 'OES_texture_half_float' );\n    \textensions.get( 'OES_texture_half_float_linear' );\n    \textensions.get( 'OES_standard_derivatives' );\n    \textensions.get( 'ANGLE_instanced_arrays' );\n\n    \tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\n    \t\tBufferGeometry.MaxIndex = 4294967296;\n\n    \t}\n\n    \tvar capabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n    \tvar state = new WebGLState( _gl, extensions, paramThreeToGL );\n    \tvar properties = new WebGLProperties();\n    \tvar textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n    \tvar objects = new WebGLObjects( _gl, properties, this.info );\n    \tvar programCache = new WebGLPrograms( this, capabilities );\n    \tvar lightCache = new WebGLLights();\n\n    \tthis.info.programs = programCache.programs;\n\n    \tvar bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n    \tvar indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n    \t//\n\n    \tvar backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n    \tvar backgroundCamera2 = new PerspectiveCamera();\n    \tvar backgroundPlaneMesh = new Mesh(\n    \t\tnew PlaneBufferGeometry( 2, 2 ),\n    \t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n    \t);\n    \tvar backgroundBoxShader = ShaderLib[ 'cube' ];\n    \tvar backgroundBoxMesh = new Mesh(\n    \t\tnew BoxBufferGeometry( 5, 5, 5 ),\n    \t\tnew ShaderMaterial( {\n    \t\t\tuniforms: backgroundBoxShader.uniforms,\n    \t\t\tvertexShader: backgroundBoxShader.vertexShader,\n    \t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n    \t\t\tside: BackSide,\n    \t\t\tdepthTest: false,\n    \t\t\tdepthWrite: false,\n    \t\t\tfog: false\n    \t\t} )\n    \t);\n\n    \t//\n\n    \tfunction getTargetPixelRatio() {\n\n    \t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n    \t}\n\n    \tfunction glClearColor( r, g, b, a ) {\n\n    \t\tif ( _premultipliedAlpha === true ) {\n\n    \t\t\tr *= a; g *= a; b *= a;\n\n    \t\t}\n\n    \t\tstate.clearColor( r, g, b, a );\n\n    \t}\n\n    \tfunction setDefaultGLState() {\n\n    \t\tstate.init();\n\n    \t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n    \t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t}\n\n    \tfunction resetGLState() {\n\n    \t\t_currentProgram = null;\n    \t\t_currentCamera = null;\n\n    \t\t_currentGeometryProgram = '';\n    \t\t_currentMaterialId = - 1;\n\n    \t\tstate.reset();\n\n    \t}\n\n    \tsetDefaultGLState();\n\n    \tthis.context = _gl;\n    \tthis.capabilities = capabilities;\n    \tthis.extensions = extensions;\n    \tthis.properties = properties;\n    \tthis.state = state;\n\n    \t// shadow map\n\n    \tvar shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );\n\n    \tthis.shadowMap = shadowMap;\n\n\n    \t// Plugins\n\n    \tvar spritePlugin = new SpritePlugin( this, sprites );\n    \tvar lensFlarePlugin = new LensFlarePlugin( this, lensFlares );\n\n    \t// API\n\n    \tthis.getContext = function () {\n\n    \t\treturn _gl;\n\n    \t};\n\n    \tthis.getContextAttributes = function () {\n\n    \t\treturn _gl.getContextAttributes();\n\n    \t};\n\n    \tthis.forceContextLoss = function () {\n\n    \t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\n    \t};\n\n    \tthis.getMaxAnisotropy = function () {\n\n    \t\treturn capabilities.getMaxAnisotropy();\n\n    \t};\n\n    \tthis.getPrecision = function () {\n\n    \t\treturn capabilities.precision;\n\n    \t};\n\n    \tthis.getPixelRatio = function () {\n\n    \t\treturn _pixelRatio;\n\n    \t};\n\n    \tthis.setPixelRatio = function ( value ) {\n\n    \t\tif ( value === undefined ) return;\n\n    \t\t_pixelRatio = value;\n\n    \t\tthis.setSize( _viewport.z, _viewport.w, false );\n\n    \t};\n\n    \tthis.getSize = function () {\n\n    \t\treturn {\n    \t\t\twidth: _width,\n    \t\t\theight: _height\n    \t\t};\n\n    \t};\n\n    \tthis.setSize = function ( width, height, updateStyle ) {\n\n    \t\t_width = width;\n    \t\t_height = height;\n\n    \t\t_canvas.width = width * _pixelRatio;\n    \t\t_canvas.height = height * _pixelRatio;\n\n    \t\tif ( updateStyle !== false ) {\n\n    \t\t\t_canvas.style.width = width + 'px';\n    \t\t\t_canvas.style.height = height + 'px';\n\n    \t\t}\n\n    \t\tthis.setViewport( 0, 0, width, height );\n\n    \t};\n\n    \tthis.setViewport = function ( x, y, width, height ) {\n\n    \t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\n    \t};\n\n    \tthis.setScissor = function ( x, y, width, height ) {\n\n    \t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\n    \t};\n\n    \tthis.setScissorTest = function ( boolean ) {\n\n    \t\tstate.setScissorTest( _scissorTest = boolean );\n\n    \t};\n\n    \t// Clearing\n\n    \tthis.getClearColor = function () {\n\n    \t\treturn _clearColor;\n\n    \t};\n\n    \tthis.setClearColor = function ( color, alpha ) {\n\n    \t\t_clearColor.set( color );\n\n    \t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t};\n\n    \tthis.getClearAlpha = function () {\n\n    \t\treturn _clearAlpha;\n\n    \t};\n\n    \tthis.setClearAlpha = function ( alpha ) {\n\n    \t\t_clearAlpha = alpha;\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t};\n\n    \tthis.clear = function ( color, depth, stencil ) {\n\n    \t\tvar bits = 0;\n\n    \t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n    \t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n    \t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n    \t\t_gl.clear( bits );\n\n    \t};\n\n    \tthis.clearColor = function () {\n\n    \t\tthis.clear( true, false, false );\n\n    \t};\n\n    \tthis.clearDepth = function () {\n\n    \t\tthis.clear( false, true, false );\n\n    \t};\n\n    \tthis.clearStencil = function () {\n\n    \t\tthis.clear( false, false, true );\n\n    \t};\n\n    \tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n    \t\tthis.setRenderTarget( renderTarget );\n    \t\tthis.clear( color, depth, stencil );\n\n    \t};\n\n    \t// Reset\n\n    \tthis.resetGLState = resetGLState;\n\n    \tthis.dispose = function() {\n\n    \t\ttransparentObjects = [];\n    \t\ttransparentObjectsLastIndex = -1;\n    \t\topaqueObjects = [];\n    \t\topaqueObjectsLastIndex = -1;\n\n    \t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\n    \t};\n\n    \t// Events\n\n    \tfunction onContextLost( event ) {\n\n    \t\tevent.preventDefault();\n\n    \t\tresetGLState();\n    \t\tsetDefaultGLState();\n\n    \t\tproperties.clear();\n\n    \t}\n\n    \tfunction onMaterialDispose( event ) {\n\n    \t\tvar material = event.target;\n\n    \t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n    \t\tdeallocateMaterial( material );\n\n    \t}\n\n    \t// Buffer deallocation\n\n    \tfunction deallocateMaterial( material ) {\n\n    \t\treleaseMaterialProgramReference( material );\n\n    \t\tproperties.delete( material );\n\n    \t}\n\n\n    \tfunction releaseMaterialProgramReference( material ) {\n\n    \t\tvar programInfo = properties.get( material ).program;\n\n    \t\tmaterial.program = undefined;\n\n    \t\tif ( programInfo !== undefined ) {\n\n    \t\t\tprogramCache.releaseProgram( programInfo );\n\n    \t\t}\n\n    \t}\n\n    \t// Buffer rendering\n\n    \tthis.renderBufferImmediate = function ( object, program, material ) {\n\n    \t\tstate.initAttributes();\n\n    \t\tvar buffers = properties.get( object );\n\n    \t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n    \t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n    \t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n    \t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n    \t\tvar attributes = program.getAttributes();\n\n    \t\tif ( object.hasPositions ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.position );\n    \t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasNormals ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n    \t\t\tif ( ! material.isMeshPhongMaterial &&\n    \t\t\t     ! material.isMeshStandardMaterial &&\n    \t\t\t       material.shading === FlatShading ) {\n\n    \t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n    \t\t\t\t\tvar array = object.normalArray;\n\n    \t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n    \t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n    \t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n    \t\t\t\t\tarray[ i + 0 ] = nx;\n    \t\t\t\t\tarray[ i + 1 ] = ny;\n    \t\t\t\t\tarray[ i + 2 ] = nz;\n\n    \t\t\t\t\tarray[ i + 3 ] = nx;\n    \t\t\t\t\tarray[ i + 4 ] = ny;\n    \t\t\t\t\tarray[ i + 5 ] = nz;\n\n    \t\t\t\t\tarray[ i + 6 ] = nx;\n    \t\t\t\t\tarray[ i + 7 ] = ny;\n    \t\t\t\t\tarray[ i + 8 ] = nz;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.normal );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasUvs && material.map ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.uv );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.color );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tstate.disableUnusedAttributes();\n\n    \t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n    \t\tobject.count = 0;\n\n    \t};\n\n    \tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n    \t\tsetMaterial( material );\n\n    \t\tvar program = setProgram( camera, fog, material, object );\n\n    \t\tvar updateBuffers = false;\n    \t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\n    \t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n    \t\t\t_currentGeometryProgram = geometryProgram;\n    \t\t\tupdateBuffers = true;\n\n    \t\t}\n\n    \t\t// morph targets\n\n    \t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\n    \t\tif ( morphTargetInfluences !== undefined ) {\n\n    \t\t\tvar activeInfluences = [];\n\n    \t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\n    \t\t\t\tvar influence = morphTargetInfluences[ i ];\n    \t\t\t\tactiveInfluences.push( [ influence, i ] );\n\n    \t\t\t}\n\n    \t\t\tactiveInfluences.sort( absNumericalSort );\n\n    \t\t\tif ( activeInfluences.length > 8 ) {\n\n    \t\t\t\tactiveInfluences.length = 8;\n\n    \t\t\t}\n\n    \t\t\tvar morphAttributes = geometry.morphAttributes;\n\n    \t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\n    \t\t\t\tvar influence = activeInfluences[ i ];\n    \t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\n    \t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\n    \t\t\t\t\tvar index = influence[ 1 ];\n\n    \t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n    \t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n    \t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tfor ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {\n\n    \t\t\t\tmorphInfluences[ i ] = 0.0;\n\n    \t\t\t}\n\n    \t\t\tprogram.getUniforms().setValue(\n    \t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\n    \t\t\tupdateBuffers = true;\n\n    \t\t}\n\n    \t\t//\n\n    \t\tvar index = geometry.index;\n    \t\tvar position = geometry.attributes.position;\n    \t\tvar rangeFactor = 1;\n\n    \t\tif ( material.wireframe === true ) {\n\n    \t\t\tindex = objects.getWireframeAttribute( geometry );\n    \t\t\trangeFactor = 2;\n\n    \t\t}\n\n    \t\tvar renderer;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\trenderer = indexedBufferRenderer;\n    \t\t\trenderer.setIndex( index );\n\n    \t\t} else {\n\n    \t\t\trenderer = bufferRenderer;\n\n    \t\t}\n\n    \t\tif ( updateBuffers ) {\n\n    \t\t\tsetupVertexAttributes( material, program, geometry );\n\n    \t\t\tif ( index !== null ) {\n\n    \t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t//\n\n    \t\tvar dataCount = 0;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tdataCount = index.count;\n\n    \t\t} else if ( position !== undefined ) {\n\n    \t\t\tdataCount = position.count;\n\n    \t\t}\n\n    \t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n    \t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n    \t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n    \t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n    \t\tvar drawStart = Math.max( rangeStart, groupStart );\n    \t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n    \t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n    \t\tif ( drawCount === 0 ) return;\n\n    \t\t//\n\n    \t\tif ( object.isMesh ) {\n\n    \t\t\tif ( material.wireframe === true ) {\n\n    \t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n    \t\t\t\trenderer.setMode( _gl.LINES );\n\n    \t\t\t} else {\n\n    \t\t\t\tswitch ( object.drawMode ) {\n\n    \t\t\t\t\tcase TrianglesDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase TriangleStripDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase TriangleFanDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n\n    \t\t} else if ( object.isLine ) {\n\n    \t\t\tvar lineWidth = material.linewidth;\n\n    \t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n    \t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n    \t\t\tif ( object.isLineSegments ) {\n\n    \t\t\t\trenderer.setMode( _gl.LINES );\n\n    \t\t\t} else {\n\n    \t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n    \t\t\t}\n\n    \t\t} else if ( object.isPoints ) {\n\n    \t\t\trenderer.setMode( _gl.POINTS );\n\n    \t\t}\n\n    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n    \t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n    \t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\trenderer.render( drawStart, drawCount );\n\n    \t\t}\n\n    \t};\n\n    \tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n    \t\tvar extension;\n\n    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n    \t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\t\tif ( extension === null ) {\n\n    \t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( startIndex === undefined ) startIndex = 0;\n\n    \t\tstate.initAttributes();\n\n    \t\tvar geometryAttributes = geometry.attributes;\n\n    \t\tvar programAttributes = program.getAttributes();\n\n    \t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n    \t\tfor ( var name in programAttributes ) {\n\n    \t\t\tvar programAttribute = programAttributes[ name ];\n\n    \t\t\tif ( programAttribute >= 0 ) {\n\n    \t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n    \t\t\t\tif ( geometryAttribute !== undefined ) {\n\n    \t\t\t\t\tvar type = _gl.FLOAT;\n    \t\t\t\t\tvar array = geometryAttribute.array;\n    \t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\n    \t\t\t\t\tif ( array instanceof Float32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.FLOAT;\n\n    \t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\n    \t\t\t\t\t\tconsole.warn( \"Unsupported data buffer format: Float64Array\" );\n\n    \t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\n    \t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\n    \t\t\t\t\t\ttype = _gl.SHORT;\n\n    \t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\n    \t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.INT;\n\n    \t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\n    \t\t\t\t\t\ttype = _gl.BYTE;\n\n    \t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tvar size = geometryAttribute.itemSize;\n    \t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\n    \t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInterleavedBufferAttribute ) {\n\n    \t\t\t\t\t\tvar data = geometryAttribute.data;\n    \t\t\t\t\t\tvar stride = data.stride;\n    \t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n    \t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\n    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInstancedBufferAttribute ) {\n\n    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\n    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n    \t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n    \t\t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\t\tswitch ( value.length ) {\n\n    \t\t\t\t\t\t\tcase 2:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase 3:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase 4:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tdefault:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tstate.disableUnusedAttributes();\n\n    \t}\n\n    \t// Sorting\n\n    \tfunction absNumericalSort( a, b ) {\n\n    \t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\n    \t}\n\n    \tfunction painterSortStable( a, b ) {\n\n    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n    \t\t} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {\n\n    \t\t\treturn a.material.program.id - b.material.program.id;\n\n    \t\t} else if ( a.material.id !== b.material.id ) {\n\n    \t\t\treturn a.material.id - b.material.id;\n\n    \t\t} else if ( a.z !== b.z ) {\n\n    \t\t\treturn a.z - b.z;\n\n    \t\t} else {\n\n    \t\t\treturn a.id - b.id;\n\n    \t\t}\n\n    \t}\n\n    \tfunction reversePainterSortStable( a, b ) {\n\n    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n    \t\t} if ( a.z !== b.z ) {\n\n    \t\t\treturn b.z - a.z;\n\n    \t\t} else {\n\n    \t\t\treturn a.id - b.id;\n\n    \t\t}\n\n    \t}\n\n    \t// Rendering\n\n    \tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n    \t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar fog = scene.fog;\n\n    \t\t// reset caching for this frame\n\n    \t\t_currentGeometryProgram = '';\n    \t\t_currentMaterialId = - 1;\n    \t\t_currentCamera = null;\n\n    \t\t// update scene graph\n\n    \t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n    \t\t// update camera matrices and frustum\n\n    \t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n    \t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n    \t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n    \t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n    \t\tlights.length = 0;\n\n    \t\topaqueObjectsLastIndex = - 1;\n    \t\ttransparentObjectsLastIndex = - 1;\n\n    \t\tsprites.length = 0;\n    \t\tlensFlares.length = 0;\n\n    \t\t_localClippingEnabled = this.localClippingEnabled;\n    \t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n    \t\tprojectObject( scene, camera );\n\n    \t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n    \t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\n    \t\tif ( _this.sortObjects === true ) {\n\n    \t\t\topaqueObjects.sort( painterSortStable );\n    \t\t\ttransparentObjects.sort( reversePainterSortStable );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n    \t\tsetupShadows( lights );\n\n    \t\tshadowMap.render( scene, camera );\n\n    \t\tsetupLights( lights, camera );\n\n    \t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n    \t\t//\n\n    \t\t_infoRender.calls = 0;\n    \t\t_infoRender.vertices = 0;\n    \t\t_infoRender.faces = 0;\n    \t\t_infoRender.points = 0;\n\n    \t\tif ( renderTarget === undefined ) {\n\n    \t\t\trenderTarget = null;\n\n    \t\t}\n\n    \t\tthis.setRenderTarget( renderTarget );\n\n    \t\t//\n\n    \t\tvar background = scene.background;\n\n    \t\tif ( background === null ) {\n\n    \t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t\t} else if ( background && background.isColor ) {\n\n    \t\t\tglClearColor( background.r, background.g, background.b, 1 );\n    \t\t\tforceClear = true;\n\n    \t\t}\n\n    \t\tif ( this.autoClear || forceClear ) {\n\n    \t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\n    \t\t}\n\n    \t\tif ( background && background.isCubeTexture ) {\n\n    \t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\n    \t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n    \t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\n    \t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n    \t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\n    \t\t\tobjects.update( backgroundBoxMesh );\n\n    \t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\n    \t\t} else if ( background && background.isTexture ) {\n\n    \t\t\tbackgroundPlaneMesh.material.map = background;\n\n    \t\t\tobjects.update( backgroundPlaneMesh );\n\n    \t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( scene.overrideMaterial ) {\n\n    \t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n    \t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n    \t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\n    \t\t} else {\n\n    \t\t\t// opaque pass (front-to-back order)\n\n    \t\t\tstate.setBlending( NoBlending );\n    \t\t\trenderObjects( opaqueObjects, camera, fog );\n\n    \t\t\t// transparent pass (back-to-front order)\n\n    \t\t\trenderObjects( transparentObjects, camera, fog );\n\n    \t\t}\n\n    \t\t// custom render plugins (post pass)\n\n    \t\tspritePlugin.render( scene, camera );\n    \t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\n    \t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n    \t\tif ( renderTarget ) {\n\n    \t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n    \t\t}\n\n    \t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n    \t\tstate.setDepthTest( true );\n    \t\tstate.setDepthWrite( true );\n    \t\tstate.setColorWrite( true );\n\n    \t\t// _gl.finish();\n\n    \t};\n\n    \tfunction pushRenderItem( object, geometry, material, z, group ) {\n\n    \t\tvar array, index;\n\n    \t\t// allocate the next position in the appropriate array\n\n    \t\tif ( material.transparent ) {\n\n    \t\t\tarray = transparentObjects;\n    \t\t\tindex = ++ transparentObjectsLastIndex;\n\n    \t\t} else {\n\n    \t\t\tarray = opaqueObjects;\n    \t\t\tindex = ++ opaqueObjectsLastIndex;\n\n    \t\t}\n\n    \t\t// recycle existing render item or grow the array\n\n    \t\tvar renderItem = array[ index ];\n\n    \t\tif ( renderItem !== undefined ) {\n\n    \t\t\trenderItem.id = object.id;\n    \t\t\trenderItem.object = object;\n    \t\t\trenderItem.geometry = geometry;\n    \t\t\trenderItem.material = material;\n    \t\t\trenderItem.z = _vector3.z;\n    \t\t\trenderItem.group = group;\n\n    \t\t} else {\n\n    \t\t\trenderItem = {\n    \t\t\t\tid: object.id,\n    \t\t\t\tobject: object,\n    \t\t\t\tgeometry: geometry,\n    \t\t\t\tmaterial: material,\n    \t\t\t\tz: _vector3.z,\n    \t\t\t\tgroup: group\n    \t\t\t};\n\n    \t\t\t// assert( index === array.length );\n    \t\t\tarray.push( renderItem );\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Duplicated code (Frustum)\n\n    \tfunction isObjectViewable( object ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( geometry.boundingSphere === null )\n    \t\t\tgeometry.computeBoundingSphere();\n\n    \t\t_sphere.copy( geometry.boundingSphere ).\n    \t\t\tapplyMatrix4( object.matrixWorld );\n\n    \t\treturn isSphereViewable( _sphere );\n\n    \t}\n\n    \tfunction isSpriteViewable( sprite ) {\n\n    \t\t_sphere.center.set( 0, 0, 0 );\n    \t\t_sphere.radius = 0.7071067811865476;\n    \t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n    \t\treturn isSphereViewable( _sphere );\n\n    \t}\n\n    \tfunction isSphereViewable( sphere ) {\n\n    \t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n    \t\tvar numPlanes = _clipping.numPlanes;\n\n    \t\tif ( numPlanes === 0 ) return true;\n\n    \t\tvar planes = _this.clippingPlanes,\n\n    \t\t\tcenter = sphere.center,\n    \t\t\tnegRad = - sphere.radius,\n    \t\t\ti = 0;\n\n    \t\tdo {\n\n    \t\t\t// out when deeper than radius in the negative halfspace\n    \t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n    \t\t} while ( ++ i !== numPlanes );\n\n    \t\treturn true;\n\n    \t}\n\n    \tfunction projectObject( object, camera ) {\n\n    \t\tif ( object.visible === false ) return;\n\n    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\n    \t\tif ( visible ) {\n\n    \t\t\tif ( object.isLight ) {\n\n    \t\t\t\tlights.push( object );\n\n    \t\t\t} else if ( object.isSprite ) {\n\n    \t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\n    \t\t\t\t\tsprites.push( object );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( object.isLensFlare ) {\n\n    \t\t\t\tlensFlares.push( object );\n\n    \t\t\t} else if ( object.isImmediateRenderObject ) {\n\n    \t\t\t\tif ( _this.sortObjects === true ) {\n\n    \t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n    \t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n    \t\t\t\t}\n\n    \t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\n    \t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n    \t\t\t\tif ( object.isSkinnedMesh ) {\n\n    \t\t\t\t\tobject.skeleton.update();\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\n    \t\t\t\t\tvar material = object.material;\n\n    \t\t\t\t\tif ( material.visible === true ) {\n\n    \t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n    \t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tvar geometry = objects.update( object );\n\n    \t\t\t\t\t\tif ( material.isMultiMaterial ) {\n\n    \t\t\t\t\t\t\tvar groups = geometry.groups;\n    \t\t\t\t\t\t\tvar materials = material.materials;\n\n    \t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\t\t\t\t\t\t\tvar group = groups[ i ];\n    \t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n    \t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n    \t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tprojectObject( children[ i ], camera );\n\n    \t\t}\n\n    \t}\n\n    \tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\n    \t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n    \t\t\tvar renderItem = renderList[ i ];\n\n    \t\t\tvar object = renderItem.object;\n    \t\t\tvar geometry = renderItem.geometry;\n    \t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n    \t\t\tvar group = renderItem.group;\n\n    \t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n    \t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n    \t\t\tif ( object.isImmediateRenderObject ) {\n\n    \t\t\t\tsetMaterial( material );\n\n    \t\t\t\tvar program = setProgram( camera, fog, material, object );\n\n    \t\t\t\t_currentGeometryProgram = '';\n\n    \t\t\t\tobject.render( function ( object ) {\n\n    \t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n    \t\t\t\t} );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( object.onBeforeRender !== null ) object.onBeforeRender();\n\n    \t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction initMaterial( material, fog, object ) {\n\n    \t\tvar materialProperties = properties.get( material );\n\n    \t\tvar parameters = programCache.getParameters(\n    \t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\n    \t\tvar code = programCache.getProgramCode( material, parameters );\n\n    \t\tvar program = materialProperties.program;\n    \t\tvar programChange = true;\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\t// new material\n    \t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n    \t\t} else if ( program.code !== code ) {\n\n    \t\t\t// changed glsl or parameters\n    \t\t\treleaseMaterialProgramReference( material );\n\n    \t\t} else if ( parameters.shaderID !== undefined ) {\n\n    \t\t\t// same glsl and uniform list\n    \t\t\treturn;\n\n    \t\t} else {\n\n    \t\t\t// only rebuild uniform list\n    \t\t\tprogramChange = false;\n\n    \t\t}\n\n    \t\tif ( programChange ) {\n\n    \t\t\tif ( parameters.shaderID ) {\n\n    \t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n    \t\t\t\tmaterialProperties.__webglShader = {\n    \t\t\t\t\tname: material.type,\n    \t\t\t\t\tuniforms: exports.UniformsUtils.clone( shader.uniforms ),\n    \t\t\t\t\tvertexShader: shader.vertexShader,\n    \t\t\t\t\tfragmentShader: shader.fragmentShader\n    \t\t\t\t};\n\n    \t\t\t} else {\n\n    \t\t\t\tmaterialProperties.__webglShader = {\n    \t\t\t\t\tname: material.type,\n    \t\t\t\t\tuniforms: material.uniforms,\n    \t\t\t\t\tvertexShader: material.vertexShader,\n    \t\t\t\t\tfragmentShader: material.fragmentShader\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\n    \t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\n    \t\t\tmaterialProperties.program = program;\n    \t\t\tmaterial.program = program;\n\n    \t\t}\n\n    \t\tvar attributes = program.getAttributes();\n\n    \t\tif ( material.morphTargets ) {\n\n    \t\t\tmaterial.numSupportedMorphTargets = 0;\n\n    \t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n    \t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\n    \t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.morphNormals ) {\n\n    \t\t\tmaterial.numSupportedMorphNormals = 0;\n\n    \t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n    \t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\n    \t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\n    \t\tif ( ! material.isShaderMaterial &&\n    \t\t     ! material.isRawShaderMaterial ||\n    \t\t       material.clipping === true ) {\n\n    \t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n    \t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n    \t\t}\n\n    \t\tmaterialProperties.fog = fog;\n\n    \t\t// store the light setup it was created for\n\n    \t\tmaterialProperties.lightsHash = _lights.hash;\n\n    \t\tif ( material.lights ) {\n\n    \t\t\t// wire up the material to this renderer's lighting state\n\n    \t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n    \t\t\tuniforms.directionalLights.value = _lights.directional;\n    \t\t\tuniforms.spotLights.value = _lights.spot;\n    \t\t\tuniforms.pointLights.value = _lights.point;\n    \t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\n    \t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n    \t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n    \t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n    \t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n    \t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n    \t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\n    \t\t}\n\n    \t\tvar progUniforms = materialProperties.program.getUniforms(),\n    \t\t\tuniformsList =\n    \t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n    \t\tmaterialProperties.uniformsList = uniformsList;\n    \t\tmaterialProperties.dynamicUniforms =\n    \t\t\t\tWebGLUniforms.splitDynamic( uniformsList, uniforms );\n\n    \t}\n\n    \tfunction setMaterial( material ) {\n\n    \t\tmaterial.side === DoubleSide\n    \t\t\t? state.disable( _gl.CULL_FACE )\n    \t\t\t: state.enable( _gl.CULL_FACE );\n\n    \t\tstate.setFlipSided( material.side === BackSide );\n\n    \t\tmaterial.transparent === true\n    \t\t\t? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n    \t\t\t: state.setBlending( NoBlending );\n\n    \t\tstate.setDepthFunc( material.depthFunc );\n    \t\tstate.setDepthTest( material.depthTest );\n    \t\tstate.setDepthWrite( material.depthWrite );\n    \t\tstate.setColorWrite( material.colorWrite );\n    \t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n    \t}\n\n    \tfunction setProgram( camera, fog, material, object ) {\n\n    \t\t_usedTextureUnits = 0;\n\n    \t\tvar materialProperties = properties.get( material );\n\n    \t\tif ( _clippingEnabled ) {\n\n    \t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n    \t\t\t\tvar useCache =\n    \t\t\t\t\t\tcamera === _currentCamera &&\n    \t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n    \t\t\t\t// we might want to call this function with some ClippingGroup\n    \t\t\t\t// object instead of the material, once it becomes feasible\n    \t\t\t\t// (#8465, #8379)\n    \t\t\t\t_clipping.setState(\n    \t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n    \t\t\t\t\t\tcamera, materialProperties, useCache );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.needsUpdate === false ) {\n\n    \t\t\tif ( materialProperties.program === undefined ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n    \t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.needsUpdate ) {\n\n    \t\t\tinitMaterial( material, fog, object );\n    \t\t\tmaterial.needsUpdate = false;\n\n    \t\t}\n\n    \t\tvar refreshProgram = false;\n    \t\tvar refreshMaterial = false;\n    \t\tvar refreshLights = false;\n\n    \t\tvar program = materialProperties.program,\n    \t\t\tp_uniforms = program.getUniforms(),\n    \t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\n    \t\tif ( program.id !== _currentProgram ) {\n\n    \t\t\t_gl.useProgram( program.program );\n    \t\t\t_currentProgram = program.id;\n\n    \t\t\trefreshProgram = true;\n    \t\t\trefreshMaterial = true;\n    \t\t\trefreshLights = true;\n\n    \t\t}\n\n    \t\tif ( material.id !== _currentMaterialId ) {\n\n    \t\t\t_currentMaterialId = material.id;\n\n    \t\t\trefreshMaterial = true;\n\n    \t\t}\n\n    \t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n    \t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\n    \t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n    \t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n    \t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n    \t\t\t}\n\n\n    \t\t\tif ( camera !== _currentCamera ) {\n\n    \t\t\t\t_currentCamera = camera;\n\n    \t\t\t\t// lighting uniforms depend on the camera so enforce an update\n    \t\t\t\t// now, in case this material supports lights - or later, when\n    \t\t\t\t// the next material that does gets activated:\n\n    \t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n    \t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n    \t\t\t}\n\n    \t\t\t// load material specific uniforms\n    \t\t\t// (shader material also gets them for the sake of genericity)\n\n    \t\t\tif ( material.isShaderMaterial ||\n    \t\t\t     material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.envMap ) {\n\n    \t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n    \t\t\t\tif ( uCamPos !== undefined ) {\n\n    \t\t\t\t\tuCamPos.setValue( _gl,\n    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshLambertMaterial ||\n    \t\t\t     material.isMeshBasicMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.isShaderMaterial ||\n    \t\t\t     material.skinning ) {\n\n    \t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n    \t\t\t}\n\n    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\n    \t\t}\n\n    \t\t// skinning uniforms must be set even if material didn't change\n    \t\t// auto-setting of texture unit for bone texture must go before other textures\n    \t\t// not sure why, but otherwise weird things happen\n\n    \t\tif ( material.skinning ) {\n\n    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n    \t\t\tvar skeleton = object.skeleton;\n\n    \t\t\tif ( skeleton ) {\n\n    \t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( refreshMaterial ) {\n\n    \t\t\tif ( material.lights ) {\n\n    \t\t\t\t// the current material requires lighting info\n\n    \t\t\t\t// note: all lighting uniforms are always set correctly\n    \t\t\t\t// they simply reference the renderer's state for their\n    \t\t\t\t// values\n    \t\t\t\t//\n    \t\t\t\t// use the current material's .needsUpdate flags to set\n    \t\t\t\t// the GL state when required\n\n    \t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n    \t\t\t}\n\n    \t\t\t// refresh uniforms common to several materials\n\n    \t\t\tif ( fog && material.fog ) {\n\n    \t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n    \t\t\t}\n\n    \t\t\tif ( material.isMeshBasicMaterial ||\n    \t\t\t     material.isMeshLambertMaterial ||\n    \t\t\t     material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.isMeshDepthMaterial ) {\n\n    \t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n    \t\t\t}\n\n    \t\t\t// refresh single material specific uniforms\n\n    \t\t\tif ( material.isLineBasicMaterial ) {\n\n    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n    \t\t\t} else if ( material.isLineDashedMaterial ) {\n\n    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n    \t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n    \t\t\t} else if ( material.isPointsMaterial ) {\n\n    \t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n    \t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n    \t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshPhysicalMaterial ) {\n\n    \t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n    \t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n    \t\t\t\tif ( material.displacementMap ) {\n\n    \t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n    \t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n    \t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n    \t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n    \t\t\t}\n\n    \t\t\tWebGLUniforms.upload(\n    \t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n    \t\t}\n\n\n    \t\t// common matrices\n\n    \t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n    \t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n    \t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\n    \t\t// dynamic uniforms\n\n    \t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\n    \t\tif ( dynUniforms !== null ) {\n\n    \t\t\tWebGLUniforms.evalDynamic( dynUniforms, m_uniforms, object, material, camera );\n    \t\t\tWebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\n    \t\t}\n\n    \t\treturn program;\n\n    \t}\n\n    \t// Uniforms (refresh uniforms objects)\n\n    \tfunction refreshUniformsCommon( uniforms, material ) {\n\n    \t\tuniforms.opacity.value = material.opacity;\n\n    \t\tuniforms.diffuse.value = material.color;\n\n    \t\tif ( material.emissive ) {\n\n    \t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n    \t\t}\n\n    \t\tuniforms.map.value = material.map;\n    \t\tuniforms.specularMap.value = material.specularMap;\n    \t\tuniforms.alphaMap.value = material.alphaMap;\n\n    \t\tif ( material.aoMap ) {\n\n    \t\t\tuniforms.aoMap.value = material.aoMap;\n    \t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n    \t\t}\n\n    \t\t// uv repeat and offset setting priorities\n    \t\t// 1. color map\n    \t\t// 2. specular map\n    \t\t// 3. normal map\n    \t\t// 4. bump map\n    \t\t// 5. alpha map\n    \t\t// 6. emissive map\n\n    \t\tvar uvScaleMap;\n\n    \t\tif ( material.map ) {\n\n    \t\t\tuvScaleMap = material.map;\n\n    \t\t} else if ( material.specularMap ) {\n\n    \t\t\tuvScaleMap = material.specularMap;\n\n    \t\t} else if ( material.displacementMap ) {\n\n    \t\t\tuvScaleMap = material.displacementMap;\n\n    \t\t} else if ( material.normalMap ) {\n\n    \t\t\tuvScaleMap = material.normalMap;\n\n    \t\t} else if ( material.bumpMap ) {\n\n    \t\t\tuvScaleMap = material.bumpMap;\n\n    \t\t} else if ( material.roughnessMap ) {\n\n    \t\t\tuvScaleMap = material.roughnessMap;\n\n    \t\t} else if ( material.metalnessMap ) {\n\n    \t\t\tuvScaleMap = material.metalnessMap;\n\n    \t\t} else if ( material.alphaMap ) {\n\n    \t\t\tuvScaleMap = material.alphaMap;\n\n    \t\t} else if ( material.emissiveMap ) {\n\n    \t\t\tuvScaleMap = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( uvScaleMap !== undefined ) {\n\n    \t\t\t// backwards compatibility\n    \t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n    \t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n    \t\t\t}\n\n    \t\t\tvar offset = uvScaleMap.offset;\n    \t\t\tvar repeat = uvScaleMap.repeat;\n\n    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n    \t\t}\n\n    \t\tuniforms.envMap.value = material.envMap;\n\n    \t\t// don't flip CubeTexture envMaps, flip everything else:\n    \t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n    \t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n    \t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n    \t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\n    \t\tuniforms.reflectivity.value = material.reflectivity;\n    \t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n    \t}\n\n    \tfunction refreshUniformsLine( uniforms, material ) {\n\n    \t\tuniforms.diffuse.value = material.color;\n    \t\tuniforms.opacity.value = material.opacity;\n\n    \t}\n\n    \tfunction refreshUniformsDash( uniforms, material ) {\n\n    \t\tuniforms.dashSize.value = material.dashSize;\n    \t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n    \t\tuniforms.scale.value = material.scale;\n\n    \t}\n\n    \tfunction refreshUniformsPoints( uniforms, material ) {\n\n    \t\tuniforms.diffuse.value = material.color;\n    \t\tuniforms.opacity.value = material.opacity;\n    \t\tuniforms.size.value = material.size * _pixelRatio;\n    \t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\n    \t\tuniforms.map.value = material.map;\n\n    \t\tif ( material.map !== null ) {\n\n    \t\t\tvar offset = material.map.offset;\n    \t\t\tvar repeat = material.map.repeat;\n\n    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsFog( uniforms, fog ) {\n\n    \t\tuniforms.fogColor.value = fog.color;\n\n    \t\tif ( fog.isFog ) {\n\n    \t\t\tuniforms.fogNear.value = fog.near;\n    \t\t\tuniforms.fogFar.value = fog.far;\n\n    \t\t} else if ( fog.isFogExp2 ) {\n\n    \t\t\tuniforms.fogDensity.value = fog.density;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsLambert( uniforms, material ) {\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsPhong( uniforms, material ) {\n\n    \t\tuniforms.specular.value = material.specular;\n    \t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( material.bumpMap ) {\n\n    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n    \t\t}\n\n    \t\tif ( material.normalMap ) {\n\n    \t\t\tuniforms.normalMap.value = material.normalMap;\n    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n    \t\t}\n\n    \t\tif ( material.displacementMap ) {\n\n    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsStandard( uniforms, material ) {\n\n    \t\tuniforms.roughness.value = material.roughness;\n    \t\tuniforms.metalness.value = material.metalness;\n\n    \t\tif ( material.roughnessMap ) {\n\n    \t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n    \t\t}\n\n    \t\tif ( material.metalnessMap ) {\n\n    \t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n    \t\t}\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( material.bumpMap ) {\n\n    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n    \t\t}\n\n    \t\tif ( material.normalMap ) {\n\n    \t\t\tuniforms.normalMap.value = material.normalMap;\n    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n    \t\t}\n\n    \t\tif ( material.displacementMap ) {\n\n    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n    \t\t}\n\n    \t\tif ( material.envMap ) {\n\n    \t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n    \t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsPhysical( uniforms, material ) {\n\n    \t\tuniforms.clearCoat.value = material.clearCoat;\n    \t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n    \t\trefreshUniformsStandard( uniforms, material );\n\n    \t}\n\n    \t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n    \tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n    \t\tuniforms.ambientLightColor.needsUpdate = value;\n\n    \t\tuniforms.directionalLights.needsUpdate = value;\n    \t\tuniforms.pointLights.needsUpdate = value;\n    \t\tuniforms.spotLights.needsUpdate = value;\n    \t\tuniforms.hemisphereLights.needsUpdate = value;\n\n    \t}\n\n    \t// Lighting\n\n    \tfunction setupShadows( lights ) {\n\n    \t\tvar lightShadowsLength = 0;\n\n    \t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n    \t\t\tvar light = lights[ i ];\n\n    \t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_lights.shadows.length = lightShadowsLength;\n\n    \t}\n\n    \tfunction setupLights( lights, camera ) {\n\n    \t\tvar l, ll, light,\n    \t\tr = 0, g = 0, b = 0,\n    \t\tcolor,\n    \t\tintensity,\n    \t\tdistance,\n    \t\tshadowMap,\n\n    \t\tviewMatrix = camera.matrixWorldInverse,\n\n    \t\tdirectionalLength = 0,\n    \t\tpointLength = 0,\n    \t\tspotLength = 0,\n    \t\themiLength = 0;\n\n    \t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n    \t\t\tlight = lights[ l ];\n\n    \t\t\tcolor = light.color;\n    \t\t\tintensity = light.intensity;\n    \t\t\tdistance = light.distance;\n\n    \t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n    \t\t\tif ( light.isAmbientLight ) {\n\n    \t\t\t\tr += color.r * intensity;\n    \t\t\t\tg += color.g * intensity;\n    \t\t\t\tb += color.b * intensity;\n\n    \t\t\t} else if ( light.isDirectionalLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\tuniforms.direction.sub( _vector3 );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n    \t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n    \t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isSpotLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n    \t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n    \t\t\t\tuniforms.distance = distance;\n\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\tuniforms.direction.sub( _vector3 );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n    \t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n    \t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n    \t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n    \t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isPointLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n    \t\t\t\tuniforms.distance = light.distance;\n    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\n    \t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\n    \t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new Matrix4();\n\n    \t\t\t\t}\n\n    \t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n    \t\t\t\t// equal to inverse of the light's position\n    \t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n    \t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\n    \t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isHemisphereLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n    \t\t\t\tuniforms.direction.normalize();\n\n    \t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n    \t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n    \t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_lights.ambient[ 0 ] = r;\n    \t\t_lights.ambient[ 1 ] = g;\n    \t\t_lights.ambient[ 2 ] = b;\n\n    \t\t_lights.directional.length = directionalLength;\n    \t\t_lights.spot.length = spotLength;\n    \t\t_lights.point.length = pointLength;\n    \t\t_lights.hemi.length = hemiLength;\n\n    \t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\n    \t}\n\n    \t// GL state setting\n\n    \tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n    \t\tstate.setCullFace( cullFace );\n    \t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\n    \t};\n\n    \t// Textures\n\n    \tfunction allocTextureUnit() {\n\n    \t\tvar textureUnit = _usedTextureUnits;\n\n    \t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n    \t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n    \t\t}\n\n    \t\t_usedTextureUnits += 1;\n\n    \t\treturn textureUnit;\n\n    \t}\n\n    \tthis.allocTextureUnit = allocTextureUnit;\n\n    \t// this.setTexture2D = setTexture2D;\n    \tthis.setTexture2D = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\t// backwards compatibility: peel texture.texture\n    \t\treturn function setTexture2D( texture, slot ) {\n\n    \t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n    \t\t\t\tif ( ! warned ) {\n\n    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n    \t\t\t\t\twarned = true;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture = texture.texture;\n\n    \t\t\t}\n\n    \t\t\ttextures.setTexture2D( texture, slot );\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.setTexture = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\treturn function setTexture( texture, slot ) {\n\n    \t\t\tif ( ! warned ) {\n\n    \t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n    \t\t\t\twarned = true;\n\n    \t\t\t}\n\n    \t\t\ttextures.setTexture2D( texture, slot );\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.setTextureCube = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\treturn function setTextureCube( texture, slot ) {\n\n    \t\t\t// backwards compatibility: peel texture.texture\n    \t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n    \t\t\t\tif ( ! warned ) {\n\n    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n    \t\t\t\t\twarned = true;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture = texture.texture;\n\n    \t\t\t}\n\n    \t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n    \t\t\t// TODO: unify these code paths\n    \t\t\tif ( ( texture && texture.isCubeTexture ) ||\n    \t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n    \t\t\t\t// CompressedTexture can have Array in image :/\n\n    \t\t\t\t// this function alone should take care of cube textures\n    \t\t\t\ttextures.setTextureCube( texture, slot );\n\n    \t\t\t} else {\n\n    \t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n    \t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.getCurrentRenderTarget = function() {\n\n    \t\treturn _currentRenderTarget;\n\n    \t};\n\n    \tthis.setRenderTarget = function ( renderTarget ) {\n\n    \t\t_currentRenderTarget = renderTarget;\n\n    \t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n    \t\t\ttextures.setupRenderTarget( renderTarget );\n\n    \t\t}\n\n    \t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n    \t\tvar framebuffer;\n\n    \t\tif ( renderTarget ) {\n\n    \t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n    \t\t\tif ( isCube ) {\n\n    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n    \t\t\t} else {\n\n    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\n    \t\t\t}\n\n    \t\t\t_currentScissor.copy( renderTarget.scissor );\n    \t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n    \t\t\t_currentViewport.copy( renderTarget.viewport );\n\n    \t\t} else {\n\n    \t\t\tframebuffer = null;\n\n    \t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n    \t\t\t_currentScissorTest = _scissorTest;\n\n    \t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\n    \t\t}\n\n    \t\tif ( _currentFramebuffer !== framebuffer ) {\n\n    \t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n    \t\t\t_currentFramebuffer = framebuffer;\n\n    \t\t}\n\n    \t\tstate.scissor( _currentScissor );\n    \t\tstate.setScissorTest( _currentScissorTest );\n\n    \t\tstate.viewport( _currentViewport );\n\n    \t\tif ( isCube ) {\n\n    \t\t\tvar textureProperties = properties.get( renderTarget.texture );\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n    \t\t}\n\n    \t};\n\n    \tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n    \t\tif ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n    \t\tif ( framebuffer ) {\n\n    \t\t\tvar restore = false;\n\n    \t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n    \t\t\t\trestore = true;\n\n    \t\t\t}\n\n    \t\t\ttry {\n\n    \t\t\t\tvar texture = renderTarget.texture;\n    \t\t\t\tvar textureFormat = texture.format;\n    \t\t\t\tvar textureType = texture.type;\n\n    \t\t\t\tif ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n    \t\t\t\t     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n    \t\t\t\t     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n    \t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n    \t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n    \t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n    \t\t\t\t}\n\n    \t\t\t} finally {\n\n    \t\t\t\tif ( restore ) {\n\n    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t};\n\n    \t// Map three.js constants to WebGL constants\n\n    \tfunction paramThreeToGL( p ) {\n\n    \t\tvar extension;\n\n    \t\tif ( p === RepeatWrapping ) return _gl.REPEAT;\n    \t\tif ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n    \t\tif ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n    \t\tif ( p === NearestFilter ) return _gl.NEAREST;\n    \t\tif ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n    \t\tif ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n    \t\tif ( p === LinearFilter ) return _gl.LINEAR;\n    \t\tif ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n    \t\tif ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n    \t\tif ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n    \t\tif ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n    \t\tif ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n    \t\tif ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n    \t\tif ( p === ByteType ) return _gl.BYTE;\n    \t\tif ( p === ShortType ) return _gl.SHORT;\n    \t\tif ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n    \t\tif ( p === IntType ) return _gl.INT;\n    \t\tif ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;\n    \t\tif ( p === FloatType ) return _gl.FLOAT;\n\n    \t\textension = extensions.get( 'OES_texture_half_float' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === HalfFloatType ) return extension.HALF_FLOAT_OES;\n\n    \t\t}\n\n    \t\tif ( p === AlphaFormat ) return _gl.ALPHA;\n    \t\tif ( p === RGBFormat ) return _gl.RGB;\n    \t\tif ( p === RGBAFormat ) return _gl.RGBA;\n    \t\tif ( p === LuminanceFormat ) return _gl.LUMINANCE;\n    \t\tif ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n    \t\tif ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;\n    \t\tif ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;\n\n    \t\tif ( p === AddEquation ) return _gl.FUNC_ADD;\n    \t\tif ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;\n    \t\tif ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n    \t\tif ( p === ZeroFactor ) return _gl.ZERO;\n    \t\tif ( p === OneFactor ) return _gl.ONE;\n    \t\tif ( p === SrcColorFactor ) return _gl.SRC_COLOR;\n    \t\tif ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n    \t\tif ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;\n    \t\tif ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n    \t\tif ( p === DstAlphaFactor ) return _gl.DST_ALPHA;\n    \t\tif ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n    \t\tif ( p === DstColorFactor ) return _gl.DST_COLOR;\n    \t\tif ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n    \t\tif ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n    \t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n    \t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n    \t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'EXT_blend_minmax' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n    \t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n    \t\tif ( extension !== null ){\n\n    \t\t\tif ( p === UnsignedInt248Type ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n    \t\t}\n\n    \t\treturn 0;\n\n    \t}\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function FogExp2 ( color, density ) {\n\n    \tthis.name = '';\n\n    \tthis.color = new Color( color );\n    \tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n    }\n\n    FogExp2.prototype.isFogExp2 = true;\n\n    FogExp2.prototype.clone = function () {\n\n    \treturn new FogExp2( this.color.getHex(), this.density );\n\n    };\n\n    FogExp2.prototype.toJSON = function ( meta ) {\n\n    \treturn {\n    \t\ttype: 'FogExp2',\n    \t\tcolor: this.color.getHex(),\n    \t\tdensity: this.density\n    \t};\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Fog ( color, near, far ) {\n\n    \tthis.name = '';\n\n    \tthis.color = new Color( color );\n\n    \tthis.near = ( near !== undefined ) ? near : 1;\n    \tthis.far = ( far !== undefined ) ? far : 1000;\n\n    }\n\n    Fog.prototype.isFog = true;\n\n    Fog.prototype.clone = function () {\n\n    \treturn new Fog( this.color.getHex(), this.near, this.far );\n\n    };\n\n    Fog.prototype.toJSON = function ( meta ) {\n\n    \treturn {\n    \t\ttype: 'Fog',\n    \t\tcolor: this.color.getHex(),\n    \t\tnear: this.near,\n    \t\tfar: this.far\n    \t};\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Scene () {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Scene';\n\n    \tthis.background = null;\n    \tthis.fog = null;\n    \tthis.overrideMaterial = null;\n\n    \tthis.autoUpdate = true; // checked by the renderer\n\n    }\n\n    Scene.prototype = Object.create( Object3D.prototype );\n\n    Scene.prototype.constructor = Scene;\n\n    Scene.prototype.copy = function ( source, recursive ) {\n\n    \tObject3D.prototype.copy.call( this, source, recursive );\n\n    \tif ( source.background !== null ) this.background = source.background.clone();\n    \tif ( source.fog !== null ) this.fog = source.fog.clone();\n    \tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n    \tthis.autoUpdate = source.autoUpdate;\n    \tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n    \treturn this;\n\n    };\n\n    Scene.prototype.toJSON = function ( meta ) {\n\n    \tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n    \tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n    \treturn data;\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function LensFlare( texture, size, distance, blending, color ) {\n\n    \tObject3D.call( this );\n\n    \tthis.lensFlares = [];\n\n    \tthis.positionScreen = new Vector3();\n    \tthis.customUpdateCallback = undefined;\n\n    \tif ( texture !== undefined ) {\n\n    \t\tthis.add( texture, size, distance, blending, color );\n\n    \t}\n\n    }\n\n    LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: LensFlare,\n\n    \tisLensFlare: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.positionScreen.copy( source.positionScreen );\n    \t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n    \t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n    \t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n    \t\tif ( size === undefined ) size = - 1;\n    \t\tif ( distance === undefined ) distance = 0;\n    \t\tif ( opacity === undefined ) opacity = 1;\n    \t\tif ( color === undefined ) color = new Color( 0xffffff );\n    \t\tif ( blending === undefined ) blending = NormalBlending;\n\n    \t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n    \t\tthis.lensFlares.push( {\n    \t\t\ttexture: texture,\t// THREE.Texture\n    \t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n    \t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n    \t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n    \t\t\tscale: 1, \t\t// scale\n    \t\t\trotation: 0, \t\t// rotation\n    \t\t\topacity: opacity,\t// opacity\n    \t\t\tcolor: color,\t\t// color\n    \t\t\tblending: blending\t// blending\n    \t\t} );\n\n    \t},\n\n    \t/*\n    \t * Update lens flares update positions on all flares based on the screen position\n    \t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n    \t */\n\n    \tupdateLensFlares: function () {\n\n    \t\tvar f, fl = this.lensFlares.length;\n    \t\tvar flare;\n    \t\tvar vecX = - this.positionScreen.x * 2;\n    \t\tvar vecY = - this.positionScreen.y * 2;\n\n    \t\tfor ( f = 0; f < fl; f ++ ) {\n\n    \t\t\tflare = this.lensFlares[ f ];\n\n    \t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n    \t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n    \t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n    \t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *\tuvOffset: new THREE.Vector2(),\n     *\tuvScale: new THREE.Vector2()\n     * }\n     */\n\n    function SpriteMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'SpriteMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n    \tthis.map = null;\n\n    \tthis.rotation = 0;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    SpriteMaterial.prototype = Object.create( Material.prototype );\n    SpriteMaterial.prototype.constructor = SpriteMaterial;\n\n    SpriteMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n    \tthis.map = source.map;\n\n    \tthis.rotation = source.rotation;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Sprite( material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Sprite';\n\n    \tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n    }\n\n    Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Sprite,\n\n    \tisSprite: true,\n\n    \traycast: ( function () {\n\n    \t\tvar matrixPosition = new Vector3();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n    \t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\n    \t\t\tif ( distanceSq > guessSizeSq ) {\n\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t\tintersects.push( {\n\n    \t\t\t\tdistance: Math.sqrt( distanceSq ),\n    \t\t\t\tpoint: this.position,\n    \t\t\t\tface: null,\n    \t\t\t\tobject: this\n\n    \t\t\t} );\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LOD() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'LOD';\n\n    \tObject.defineProperties( this, {\n    \t\tlevels: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: []\n    \t\t}\n    \t} );\n\n    }\n\n\n    LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: LOD,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source, false );\n\n    \t\tvar levels = source.levels;\n\n    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tvar level = levels[ i ];\n\n    \t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \taddLevel: function ( object, distance ) {\n\n    \t\tif ( distance === undefined ) distance = 0;\n\n    \t\tdistance = Math.abs( distance );\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n    \t\t\tif ( distance < levels[ l ].distance ) {\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n    \t\tthis.add( object );\n\n    \t},\n\n    \tgetObjectForDistance: function ( distance ) {\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tif ( distance < levels[ i ].distance ) {\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn levels[ i - 1 ].object;\n\n    \t},\n\n    \traycast: ( function () {\n\n    \t\tvar matrixPosition = new Vector3();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n    \t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n    \t\t};\n\n    \t}() ),\n\n    \tupdate: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar v2 = new Vector3();\n\n    \t\treturn function update( camera ) {\n\n    \t\t\tvar levels = this.levels;\n\n    \t\t\tif ( levels.length > 1 ) {\n\n    \t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n    \t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\t\tvar distance = v1.distanceTo( v2 );\n\n    \t\t\t\tlevels[ 0 ].object.visible = true;\n\n    \t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n    \t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n    \t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n    \t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( ; i < l; i ++ ) {\n\n    \t\t\t\t\tlevels[ i ].object.visible = false;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}(),\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.levels = [];\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tvar level = levels[ i ];\n\n    \t\t\tdata.object.levels.push( {\n    \t\t\t\tobject: level.object.uuid,\n    \t\t\t\tdistance: level.distance\n    \t\t\t} );\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.image = { data: data, width: width, height: height };\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n    \tthis.flipY = false;\n    \tthis.generateMipmaps  = false;\n\n    }\n\n    DataTexture.prototype = Object.create( Texture.prototype );\n    DataTexture.prototype.constructor = DataTexture;\n\n    DataTexture.prototype.isDataTexture = true;\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author michael guerrero / http://realitymeltdown.com\n     * @author ikerr / http://verold.com\n     */\n\n    function Skeleton( bones, boneInverses, useVertexTexture ) {\n\n    \tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\n    \tthis.identityMatrix = new Matrix4();\n\n    \t// copy the bone array\n\n    \tbones = bones || [];\n\n    \tthis.bones = bones.slice( 0 );\n\n    \t// create a bone texture or an array of floats\n\n    \tif ( this.useVertexTexture ) {\n\n    \t\t// layout (1 matrix = 4 pixels)\n    \t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n    \t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n    \t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n    \t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n    \t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n    \t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n    \t\tsize = exports.Math.nextPowerOfTwo( Math.ceil( size ) );\n    \t\tsize = Math.max( size, 4 );\n\n    \t\tthis.boneTextureWidth = size;\n    \t\tthis.boneTextureHeight = size;\n\n    \t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n    \t\tthis.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );\n\n    \t} else {\n\n    \t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\n    \t}\n\n    \t// use the supplied bone inverses or calculate the inverses\n\n    \tif ( boneInverses === undefined ) {\n\n    \t\tthis.calculateInverses();\n\n    \t} else {\n\n    \t\tif ( this.bones.length === boneInverses.length ) {\n\n    \t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\n    \t\t\tthis.boneInverses = [];\n\n    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    }\n\n    Object.assign( Skeleton.prototype, {\n\n    \tcalculateInverses: function () {\n\n    \t\tthis.boneInverses = [];\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tvar inverse = new Matrix4();\n\n    \t\t\tif ( this.bones[ b ] ) {\n\n    \t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\n    \t\t\t}\n\n    \t\t\tthis.boneInverses.push( inverse );\n\n    \t\t}\n\n    \t},\n\n    \tpose: function () {\n\n    \t\tvar bone;\n\n    \t\t// recover the bind-time world matrices\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tbone = this.bones[ b ];\n\n    \t\t\tif ( bone ) {\n\n    \t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// compute the local matrices, positions, rotations and scales\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tbone = this.bones[ b ];\n\n    \t\t\tif ( bone ) {\n\n    \t\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n    \t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n    \t\t\t\t}\n\n    \t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tupdate: ( function () {\n\n    \t\tvar offsetMatrix = new Matrix4();\n\n    \t\treturn function update() {\n\n    \t\t\t// flatten bone matrices to array\n\n    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\t\t// compute the offset between the current and the original transform\n\n    \t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\n    \t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n    \t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\n    \t\t\t}\n\n    \t\t\tif ( this.useVertexTexture ) {\n\n    \t\t\t\tthis.boneTexture.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t} )(),\n\n    \tclone: function () {\n\n    \t\treturn new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function Bone( skin ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Bone';\n\n    \tthis.skin = skin;\n\n    }\n\n    Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Bone,\n\n    \tisBone: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.skin = source.skin;\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function SkinnedMesh( geometry, material, useVertexTexture ) {\n\n    \tMesh.call( this, geometry, material );\n\n    \tthis.type = 'SkinnedMesh';\n\n    \tthis.bindMode = \"attached\";\n    \tthis.bindMatrix = new Matrix4();\n    \tthis.bindMatrixInverse = new Matrix4();\n\n    \t// init bones\n\n    \t// TODO: remove bone creation as there is no reason (other than\n    \t// convenience) for THREE.SkinnedMesh to do this.\n\n    \tvar bones = [];\n\n    \tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n    \t\tvar bone, gbone;\n\n    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n    \t\t\tgbone = this.geometry.bones[ b ];\n\n    \t\t\tbone = new Bone( this );\n    \t\t\tbones.push( bone );\n\n    \t\t\tbone.name = gbone.name;\n    \t\t\tbone.position.fromArray( gbone.pos );\n    \t\t\tbone.quaternion.fromArray( gbone.rotq );\n    \t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n    \t\t}\n\n    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n    \t\t\tgbone = this.geometry.bones[ b ];\n\n    \t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n    \t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\n    \t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis.add( bones[ b ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tthis.normalizeSkinWeights();\n\n    \tthis.updateMatrixWorld( true );\n    \tthis.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\n    }\n\n\n    SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n    \tconstructor: SkinnedMesh,\n\n    \tisSkinnedMesh: true,\n\n    \tbind: function( skeleton, bindMatrix ) {\n\n    \t\tthis.skeleton = skeleton;\n\n    \t\tif ( bindMatrix === undefined ) {\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.skeleton.calculateInverses();\n\n    \t\t\tbindMatrix = this.matrixWorld;\n\n    \t\t}\n\n    \t\tthis.bindMatrix.copy( bindMatrix );\n    \t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n    \t},\n\n    \tpose: function () {\n\n    \t\tthis.skeleton.pose();\n\n    \t},\n\n    \tnormalizeSkinWeights: function () {\n\n    \t\tif ( (this.geometry && this.geometry.isGeometry) ) {\n\n    \t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n    \t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n    \t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\n    \t\t\t\tif ( scale !== Infinity ) {\n\n    \t\t\t\t\tsw.multiplyScalar( scale );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {\n\n    \t\t\tvar vec = new Vector4();\n\n    \t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n    \t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\n    \t\t\t\tvec.x = skinWeight.getX( i );\n    \t\t\t\tvec.y = skinWeight.getY( i );\n    \t\t\t\tvec.z = skinWeight.getZ( i );\n    \t\t\t\tvec.w = skinWeight.getW( i );\n\n    \t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\n    \t\t\t\tif ( scale !== Infinity ) {\n\n    \t\t\t\t\tvec.multiplyScalar( scale );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n    \t\t\t\t}\n\n    \t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tupdateMatrixWorld: function( force ) {\n\n    \t\tMesh.prototype.updateMatrixWorld.call( this, true );\n\n    \t\tif ( this.bindMode === \"attached\" ) {\n\n    \t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n    \t\t} else if ( this.bindMode === \"detached\" ) {\n\n    \t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function() {\n\n    \t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  linewidth: <float>,\n     *  linecap: \"round\",\n     *  linejoin: \"round\"\n     * }\n     */\n\n    function LineBasicMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'LineBasicMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.linewidth = 1;\n    \tthis.linecap = 'round';\n    \tthis.linejoin = 'round';\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    LineBasicMaterial.prototype = Object.create( Material.prototype );\n    LineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n    LineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n    LineBasicMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.linewidth = source.linewidth;\n    \tthis.linecap = source.linecap;\n    \tthis.linejoin = source.linejoin;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Line( geometry, material, mode ) {\n\n    \tif ( mode === 1 ) {\n\n    \t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n    \t\treturn new LineSegments( geometry, material );\n\n    \t}\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Line';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n    }\n\n    Line.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Line,\n\n    \tisLine: true,\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar precision = raycaster.linePrecision;\n    \t\t\tvar precisionSq = precision * precision;\n\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\tvar vStart = new Vector3();\n    \t\t\tvar vEnd = new Vector3();\n    \t\t\tvar interSegment = new Vector3();\n    \t\t\tvar interRay = new Vector3();\n    \t\t\tvar step = (this && this.isLineSegments) ? 2 : 1;\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n    \t\t\t\t\t\tvar a = indices[ i ];\n    \t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n    \t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n    \t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\t\tface: null,\n    \t\t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t\t} );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n    \t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n    \t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\t\tface: null,\n    \t\t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t\t} );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tvar vertices = geometry.vertices;\n    \t\t\t\tvar nbVertices = vertices.length;\n\n    \t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n    \t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n    \t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\tface: null,\n    \t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LineSegments( geometry, material ) {\n\n    \tLine.call( this, geometry, material );\n\n    \tthis.type = 'LineSegments';\n\n    }\n\n    LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n    \tconstructor: LineSegments,\n\n    \tisLineSegments: true\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  size: <float>,\n     *  sizeAttenuation: <bool>\n     * }\n     */\n\n    function PointsMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'PointsMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.map = null;\n\n    \tthis.size = 1;\n    \tthis.sizeAttenuation = true;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    PointsMaterial.prototype = Object.create( Material.prototype );\n    PointsMaterial.prototype.constructor = PointsMaterial;\n\n    PointsMaterial.prototype.isPointsMaterial = true;\n\n    PointsMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.size = source.size;\n    \tthis.sizeAttenuation = source.sizeAttenuation;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Points( geometry, material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Points';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n    }\n\n    Points.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Points,\n\n    \tisPoints: true,\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar object = this;\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n    \t\t\tvar threshold = raycaster.params.Points.threshold;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n    \t\t\tvar localThresholdSq = localThreshold * localThreshold;\n    \t\t\tvar position = new Vector3();\n\n    \t\t\tfunction testPoint( point, index ) {\n\n    \t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n    \t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n    \t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n    \t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n    \t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n    \t\t\t\t\t\tpoint: intersectPoint.clone(),\n    \t\t\t\t\t\tindex: index,\n    \t\t\t\t\t\tface: null,\n    \t\t\t\t\t\tobject: object\n\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n    \t\t\t\t\t\tvar a = indices[ i ];\n\n    \t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n    \t\t\t\t\t\ttestPoint( position, a );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n    \t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n    \t\t\t\t\t\ttestPoint( position, i );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tvar vertices = geometry.vertices;\n\n    \t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n    \t\t\t\t\ttestPoint( vertices[ i ], i );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Group() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Group';\n\n    }\n\n    Group.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Group\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n    \tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.generateMipmaps = false;\n\n    \tvar scope = this;\n\n    \tfunction update() {\n\n    \t\trequestAnimationFrame( update );\n\n    \t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n    \t\t\tscope.needsUpdate = true;\n\n    \t\t}\n\n    \t}\n\n    \tupdate();\n\n    }\n\n    VideoTexture.prototype = Object.create( Texture.prototype );\n    VideoTexture.prototype.constructor = VideoTexture;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.image = { width: width, height: height };\n    \tthis.mipmaps = mipmaps;\n\n    \t// no flipping for cube textures\n    \t// (also flipping doesn't work for compressed textures )\n\n    \tthis.flipY = false;\n\n    \t// can't generate mipmaps for compressed textures\n    \t// mips must be embedded in DDS files\n\n    \tthis.generateMipmaps = false;\n\n    }\n\n    CompressedTexture.prototype = Object.create( Texture.prototype );\n    CompressedTexture.prototype.constructor = CompressedTexture;\n\n    CompressedTexture.prototype.isCompressedTexture = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n    \tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.needsUpdate = true;\n\n    }\n\n    CanvasTexture.prototype = Object.create( Texture.prototype );\n    CanvasTexture.prototype.constructor = CanvasTexture;\n\n    /**\n     * @author Matt DesLauriers / @mattdesl\n     * @author atix / arthursilber.de\n     */\n\n    function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n    \tformat = format !== undefined ? format : DepthFormat;\n\n    \tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n    \t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )\n\n    \t}\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.image = { width: width, height: height };\n\n    \tthis.type = type !== undefined ? type : UnsignedShortType;\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n    \tthis.flipY = false;\n    \tthis.generateMipmaps\t= false;\n\n    }\n\n    DepthTexture.prototype = Object.create( Texture.prototype );\n    DepthTexture.prototype.constructor = DepthTexture;\n    DepthTexture.prototype.isDepthTexture = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WireframeGeometry( geometry ) {\n\n    \tBufferGeometry.call( this );\n\n    \tvar edge = [ 0, 0 ], hash = {};\n\n    \tfunction sortFunction( a, b ) {\n\n    \t\treturn a - b;\n\n    \t}\n\n    \tvar keys = [ 'a', 'b', 'c' ];\n\n    \tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\tvar vertices = geometry.vertices;\n    \t\tvar faces = geometry.faces;\n    \t\tvar numEdges = 0;\n\n    \t\t// allocate maximal size\n    \t\tvar edges = new Uint32Array( 6 * faces.length );\n\n    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n    \t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n    \t\t\t\tedge.sort( sortFunction );\n\n    \t\t\t\tvar key = edge.toString();\n\n    \t\t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n    \t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n    \t\t\t\t\thash[ key ] = true;\n    \t\t\t\t\tnumEdges ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n    \t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n    \t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\n    \t\t\t\tvar index = 6 * i + 3 * j;\n    \t\t\t\tcoords[ index + 0 ] = vertex.x;\n    \t\t\t\tcoords[ index + 1 ] = vertex.y;\n    \t\t\t\tcoords[ index + 2 ] = vertex.z;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\tif ( geometry.index !== null ) {\n\n    \t\t\t// Indexed BufferGeometry\n\n    \t\t\tvar indices = geometry.index.array;\n    \t\t\tvar vertices = geometry.attributes.position;\n    \t\t\tvar groups = geometry.groups;\n    \t\t\tvar numEdges = 0;\n\n    \t\t\tif ( groups.length === 0 ) {\n\n    \t\t\t\tgeometry.addGroup( 0, indices.length );\n\n    \t\t\t}\n\n    \t\t\t// allocate maximal size\n    \t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\n    \t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\n    \t\t\t\tvar group = groups[ o ];\n\n    \t\t\t\tvar start = group.start;\n    \t\t\t\tvar count = group.count;\n\n    \t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n    \t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n    \t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n    \t\t\t\t\t\tedge.sort( sortFunction );\n\n    \t\t\t\t\t\tvar key = edge.toString();\n\n    \t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n    \t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n    \t\t\t\t\t\t\thash[ key ] = true;\n    \t\t\t\t\t\t\tnumEdges ++;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n    \t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n    \t\t\t\t\tvar index = 6 * i + 3 * j;\n    \t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\n    \t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n    \t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n    \t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t\t} else {\n\n    \t\t\t// non-indexed BufferGeometry\n\n    \t\t\tvar vertices = geometry.attributes.position.array;\n    \t\t\tvar numEdges = vertices.length / 3;\n    \t\t\tvar numTris = numEdges / 3;\n\n    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\n    \t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\tvar index = 18 * i + 6 * j;\n\n    \t\t\t\t\tvar index1 = 9 * i + 3 * j;\n    \t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n    \t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n    \t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\n    \t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n    \t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n    \t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n    \t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n    WireframeGeometry.prototype.constructor = WireframeGeometry;\n\n    /**\n     * @author zz85 / https://github.com/zz85\n     * Parametric Surfaces Geometry\n     * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n     *\n     * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n     *\n     */\n\n    function ParametricGeometry( func, slices, stacks ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ParametricGeometry';\n\n    \tthis.parameters = {\n    \t\tfunc: func,\n    \t\tslices: slices,\n    \t\tstacks: stacks\n    \t};\n\n    \tvar verts = this.vertices;\n    \tvar faces = this.faces;\n    \tvar uvs = this.faceVertexUvs[ 0 ];\n\n    \tvar i, j, p;\n    \tvar u, v;\n\n    \tvar sliceCount = slices + 1;\n\n    \tfor ( i = 0; i <= stacks; i ++ ) {\n\n    \t\tv = i / stacks;\n\n    \t\tfor ( j = 0; j <= slices; j ++ ) {\n\n    \t\t\tu = j / slices;\n\n    \t\t\tp = func( u, v );\n    \t\t\tverts.push( p );\n\n    \t\t}\n\n    \t}\n\n    \tvar a, b, c, d;\n    \tvar uva, uvb, uvc, uvd;\n\n    \tfor ( i = 0; i < stacks; i ++ ) {\n\n    \t\tfor ( j = 0; j < slices; j ++ ) {\n\n    \t\t\ta = i * sliceCount + j;\n    \t\t\tb = i * sliceCount + j + 1;\n    \t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n    \t\t\td = ( i + 1 ) * sliceCount + j;\n\n    \t\t\tuva = new Vector2( j / slices, i / stacks );\n    \t\t\tuvb = new Vector2( ( j + 1 ) / slices, i / stacks );\n    \t\t\tuvc = new Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n    \t\t\tuvd = new Vector2( j / slices, ( i + 1 ) / stacks );\n\n    \t\t\tfaces.push( new Face3( a, b, d ) );\n    \t\t\tuvs.push( [ uva, uvb, uvd ] );\n\n    \t\t\tfaces.push( new Face3( b, c, d ) );\n    \t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n    \t\t}\n\n    \t}\n\n    \t// console.log(this);\n\n    \t// magic bullet\n    \t// var diff = this.mergeVertices();\n    \t// console.log('removed ', diff, ' vertices by merging');\n\n    \tthis.computeFaceNormals();\n    \tthis.computeVertexNormals();\n\n    }\n\n    ParametricGeometry.prototype = Object.create( Geometry.prototype );\n    ParametricGeometry.prototype.constructor = ParametricGeometry;\n\n    /**\n     * @author clockworkgeek / https://github.com/clockworkgeek\n     * @author timothypratley / https://github.com/timothypratley\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'PolyhedronGeometry';\n\n    \tthis.parameters = {\n    \t\tvertices: vertices,\n    \t\tindices: indices,\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    \tradius = radius || 1;\n    \tdetail = detail || 0;\n\n    \tvar that = this;\n\n    \tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\n    \t\tprepare( new Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\n    \t}\n\n    \tvar p = this.vertices;\n\n    \tvar faces = [];\n\n    \tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\n    \t\tvar v1 = p[ indices[ i ] ];\n    \t\tvar v2 = p[ indices[ i + 1 ] ];\n    \t\tvar v3 = p[ indices[ i + 2 ] ];\n\n    \t\tfaces[ j ] = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\n    \t}\n\n    \tvar centroid = new Vector3();\n\n    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\tsubdivide( faces[ i ], detail );\n\n    \t}\n\n\n    \t// Handle case when face straddles the seam\n\n    \tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\n    \t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\n    \t\tvar x0 = uvs[ 0 ].x;\n    \t\tvar x1 = uvs[ 1 ].x;\n    \t\tvar x2 = uvs[ 2 ].x;\n\n    \t\tvar max = Math.max( x0, x1, x2 );\n    \t\tvar min = Math.min( x0, x1, x2 );\n\n    \t\tif ( max > 0.9 && min < 0.1 ) {\n\n    \t\t\t// 0.9 is somewhat arbitrary\n\n    \t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n    \t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n    \t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\n    \t\t}\n\n    \t}\n\n\n    \t// Apply radius\n\n    \tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n    \t\tthis.vertices[ i ].multiplyScalar( radius );\n\n    \t}\n\n\n    \t// Merge vertices\n\n    \tthis.mergeVertices();\n\n    \tthis.computeFaceNormals();\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n\n    \t// Project vector onto sphere's surface\n\n    \tfunction prepare( vector ) {\n\n    \t\tvar vertex = vector.normalize().clone();\n    \t\tvertex.index = that.vertices.push( vertex ) - 1;\n\n    \t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n    \t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n    \t\tvar v = inclination( vector ) / Math.PI + 0.5;\n    \t\tvertex.uv = new Vector2( u, 1 - v );\n\n    \t\treturn vertex;\n\n    \t}\n\n\n    \t// Approximate a curved face with recursively sub-divided triangles.\n\n    \tfunction make( v1, v2, v3 ) {\n\n    \t\tvar face = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n    \t\tthat.faces.push( face );\n\n    \t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\n    \t\tvar azi = azimuth( centroid );\n\n    \t\tthat.faceVertexUvs[ 0 ].push( [\n    \t\t\tcorrectUV( v1.uv, v1, azi ),\n    \t\t\tcorrectUV( v2.uv, v2, azi ),\n    \t\t\tcorrectUV( v3.uv, v3, azi )\n    \t\t] );\n\n    \t}\n\n\n    \t// Analytically subdivide a face to the required detail level.\n\n    \tfunction subdivide( face, detail ) {\n\n    \t\tvar cols = Math.pow( 2, detail );\n    \t\tvar a = prepare( that.vertices[ face.a ] );\n    \t\tvar b = prepare( that.vertices[ face.b ] );\n    \t\tvar c = prepare( that.vertices[ face.c ] );\n    \t\tvar v = [];\n\n    \t\t// Construct all of the vertices for this subdivision.\n\n    \t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\n    \t\t\tv[ i ] = [];\n\n    \t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n    \t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n    \t\t\tvar rows = cols - i;\n\n    \t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\n    \t\t\t\tif ( j === 0 && i === cols ) {\n\n    \t\t\t\t\tv[ i ][ j ] = aj;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Construct all of the faces.\n\n    \t\tfor ( var i = 0; i < cols ; i ++ ) {\n\n    \t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n    \t\t\t\tvar k = Math.floor( j / 2 );\n\n    \t\t\t\tif ( j % 2 === 0 ) {\n\n    \t\t\t\t\tmake(\n    \t\t\t\t\t\tv[ i ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k ],\n    \t\t\t\t\t\tv[ i ][ k ]\n    \t\t\t\t\t);\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tmake(\n    \t\t\t\t\t\tv[ i ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k ]\n    \t\t\t\t\t);\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \t// Angle around the Y axis, counter-clockwise when looking from above.\n\n    \tfunction azimuth( vector ) {\n\n    \t\treturn Math.atan2( vector.z, - vector.x );\n\n    \t}\n\n\n    \t// Angle above the XZ plane.\n\n    \tfunction inclination( vector ) {\n\n    \t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n    \t}\n\n\n    \t// Texture fixing helper. Spheres have some odd behaviours.\n\n    \tfunction correctUV( uv, vector, azimuth ) {\n\n    \t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new Vector2( uv.x - 1, uv.y );\n    \t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n    \t\treturn uv.clone();\n\n    \t}\n\n    }\n\n    PolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n    PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function TetrahedronGeometry( radius, detail ) {\n\n    \tvar vertices = [\n    \t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n    \t];\n\n    \tvar indices = [\n    \t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'TetrahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    TetrahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function OctahedronGeometry( radius, detail ) {\n\n    \tvar vertices = [\n    \t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n    \t];\n\n    \tvar indices = [\n    \t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'OctahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    OctahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    OctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function IcosahedronGeometry( radius, detail ) {\n\n    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n    \tvar vertices = [\n    \t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n    \t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n    \t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n    \t];\n\n    \tvar indices = [\n    \t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n    \t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n    \t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n    \t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'IcosahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    IcosahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n    /**\n     * @author Abe Pazos / https://hamoid.com\n     */\n\n    function DodecahedronGeometry( radius, detail ) {\n\n    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n    \tvar r = 1 / t;\n\n    \tvar vertices = [\n\n    \t\t// (±1, ±1, ±1)\n    \t\t- 1, - 1, - 1,    - 1, - 1,  1,\n    \t\t- 1,  1, - 1,    - 1,  1,  1,\n    \t\t 1, - 1, - 1,     1, - 1,  1,\n    \t\t 1,  1, - 1,     1,  1,  1,\n\n    \t\t// (0, ±1/φ, ±φ)\n    \t\t 0, - r, - t,     0, - r,  t,\n    \t\t 0,  r, - t,     0,  r,  t,\n\n    \t\t// (±1/φ, ±φ, 0)\n    \t\t- r, - t,  0,    - r,  t,  0,\n    \t\t r, - t,  0,     r,  t,  0,\n\n    \t\t// (±φ, 0, ±1/φ)\n    \t\t- t,  0, - r,     t,  0, - r,\n    \t\t- t,  0,  r,     t,  0,  r\n    \t];\n\n    \tvar indices = [\n    \t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n    \t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n    \t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n    \t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n    \t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n    \t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n    \t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n    \t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n    \t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n    \t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n    \t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n    \t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'DodecahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    DodecahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n    /**\n     * @author WestLangley / https://github.com/WestLangley\n     * @author zz85 / https://github.com/zz85\n     * @author miningold / https://github.com/miningold\n     * @author jonobr1 / https://github.com/jonobr1\n     *\n     * Modified from the TorusKnotGeometry by @oosmoxiecode\n     *\n     * Creates a tube which extrudes along a 3d spline\n     *\n     * Uses parallel transport frames as described in\n     * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n     */\n\n    function TubeGeometry( path, segments, radius, radialSegments, closed, taper ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TubeGeometry';\n\n    \tthis.parameters = {\n    \t\tpath: path,\n    \t\tsegments: segments,\n    \t\tradius: radius,\n    \t\tradialSegments: radialSegments,\n    \t\tclosed: closed,\n    \t\ttaper: taper\n    \t};\n\n    \tsegments = segments || 64;\n    \tradius = radius || 1;\n    \tradialSegments = radialSegments || 8;\n    \tclosed = closed || false;\n    \ttaper = taper || TubeGeometry.NoTaper;\n\n    \tvar grid = [];\n\n    \tvar scope = this,\n\n    \t\ttangent,\n    \t\tnormal,\n    \t\tbinormal,\n\n    \t\tnumpoints = segments + 1,\n\n    \t\tu, v, r,\n\n    \t\tcx, cy,\n    \t\tpos, pos2 = new Vector3(),\n    \t\ti, j,\n    \t\tip, jp,\n    \t\ta, b, c, d,\n    \t\tuva, uvb, uvc, uvd;\n\n    \tvar frames = new TubeGeometry.FrenetFrames( path, segments, closed ),\n    \t\ttangents = frames.tangents,\n    \t\tnormals = frames.normals,\n    \t\tbinormals = frames.binormals;\n\n    \t// proxy internals\n    \tthis.tangents = tangents;\n    \tthis.normals = normals;\n    \tthis.binormals = binormals;\n\n    \tfunction vert( x, y, z ) {\n\n    \t\treturn scope.vertices.push( new Vector3( x, y, z ) ) - 1;\n\n    \t}\n\n    \t// construct the grid\n\n    \tfor ( i = 0; i < numpoints; i ++ ) {\n\n    \t\tgrid[ i ] = [];\n\n    \t\tu = i / ( numpoints - 1 );\n\n    \t\tpos = path.getPointAt( u );\n\n    \t\ttangent = tangents[ i ];\n    \t\tnormal = normals[ i ];\n    \t\tbinormal = binormals[ i ];\n\n    \t\tr = radius * taper( u );\n\n    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n    \t\t\tv = j / radialSegments * 2 * Math.PI;\n\n    \t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n    \t\t\tcy = r * Math.sin( v );\n\n    \t\t\tpos2.copy( pos );\n    \t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n    \t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n    \t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\n    \t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\n    \t\t}\n\n    \t}\n\n\n    \t// construct the mesh\n\n    \tfor ( i = 0; i < segments; i ++ ) {\n\n    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n    \t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n    \t\t\tjp = ( j + 1 ) % radialSegments;\n\n    \t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n    \t\t\tb = grid[ ip ][ j ];\n    \t\t\tc = grid[ ip ][ jp ];\n    \t\t\td = grid[ i ][ jp ];\n\n    \t\t\tuva = new Vector2( i / segments, j / radialSegments );\n    \t\t\tuvb = new Vector2( ( i + 1 ) / segments, j / radialSegments );\n    \t\t\tuvc = new Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n    \t\t\tuvd = new Vector2( i / segments, ( j + 1 ) / radialSegments );\n\n    \t\t\tthis.faces.push( new Face3( a, b, d ) );\n    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n    \t\t\tthis.faces.push( new Face3( b, c, d ) );\n    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n    \t\t}\n\n    \t}\n\n    \tthis.computeFaceNormals();\n    \tthis.computeVertexNormals();\n\n    }\n\n    TubeGeometry.prototype = Object.create( Geometry.prototype );\n    TubeGeometry.prototype.constructor = TubeGeometry;\n\n    TubeGeometry.NoTaper = function ( u ) {\n\n    \treturn 1;\n\n    };\n\n    TubeGeometry.SinusoidalTaper = function ( u ) {\n\n    \treturn Math.sin( Math.PI * u );\n\n    };\n\n    // For computing of Frenet frames, exposing the tangents, normals and binormals the spline\n    TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\n    \tvar\tnormal = new Vector3(),\n\n    \t\ttangents = [],\n    \t\tnormals = [],\n    \t\tbinormals = [],\n\n    \t\tvec = new Vector3(),\n    \t\tmat = new Matrix4(),\n\n    \t\tnumpoints = segments + 1,\n    \t\ttheta,\n    \t\tsmallest,\n\n    \t\ttx, ty, tz,\n    \t\ti, u;\n\n\n    \t// expose internals\n    \tthis.tangents = tangents;\n    \tthis.normals = normals;\n    \tthis.binormals = binormals;\n\n    \t// compute the tangent vectors for each segment on the path\n\n    \tfor ( i = 0; i < numpoints; i ++ ) {\n\n    \t\tu = i / ( numpoints - 1 );\n\n    \t\ttangents[ i ] = path.getTangentAt( u );\n    \t\ttangents[ i ].normalize();\n\n    \t}\n\n    \tinitialNormal3();\n\n    \t/*\n    \tfunction initialNormal1(lastBinormal) {\n    \t\t// fixed start binormal. Has dangers of 0 vectors\n    \t\tnormals[ 0 ] = new THREE.Vector3();\n    \t\tbinormals[ 0 ] = new THREE.Vector3();\n    \t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n    \t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n    \t}\n\n    \tfunction initialNormal2() {\n\n    \t\t// This uses the Frenet-Serret formula for deriving binormal\n    \t\tvar t2 = path.getTangentAt( epsilon );\n\n    \t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n    \t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n    \t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\n    \t}\n    \t*/\n\n    \tfunction initialNormal3() {\n\n    \t\t// select an initial normal vector perpendicular to the first tangent vector,\n    \t\t// and in the direction of the smallest tangent xyz component\n\n    \t\tnormals[ 0 ] = new Vector3();\n    \t\tbinormals[ 0 ] = new Vector3();\n    \t\tsmallest = Number.MAX_VALUE;\n    \t\ttx = Math.abs( tangents[ 0 ].x );\n    \t\tty = Math.abs( tangents[ 0 ].y );\n    \t\ttz = Math.abs( tangents[ 0 ].z );\n\n    \t\tif ( tx <= smallest ) {\n\n    \t\t\tsmallest = tx;\n    \t\t\tnormal.set( 1, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( ty <= smallest ) {\n\n    \t\t\tsmallest = ty;\n    \t\t\tnormal.set( 0, 1, 0 );\n\n    \t\t}\n\n    \t\tif ( tz <= smallest ) {\n\n    \t\t\tnormal.set( 0, 0, 1 );\n\n    \t\t}\n\n    \t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n    \t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n    \t}\n\n\n    \t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\n    \tfor ( i = 1; i < numpoints; i ++ ) {\n\n    \t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n    \t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n    \t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n    \t\tif ( vec.length() > Number.EPSILON ) {\n\n    \t\t\tvec.normalize();\n\n    \t\t\ttheta = Math.acos( exports.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n    \t\t}\n\n    \t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n    \t}\n\n\n    \t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n    \tif ( closed ) {\n\n    \t\ttheta = Math.acos( exports.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n    \t\ttheta /= ( numpoints - 1 );\n\n    \t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\n    \t\t\ttheta = - theta;\n\n    \t\t}\n\n    \t\tfor ( i = 1; i < numpoints; i ++ ) {\n\n    \t\t\t// twist a little...\n    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n    \t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     *\n     * see: http://www.blackpawn.com/texts/pqtorus/\n     */\n    function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'TorusKnotBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\ttubularSegments: tubularSegments,\n    \t\tradialSegments: radialSegments,\n    \t\tp: p,\n    \t\tq: q\n    \t};\n\n    \tradius = radius || 100;\n    \ttube = tube || 40;\n    \ttubularSegments = Math.floor( tubularSegments ) || 64;\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \tp = p || 2;\n    \tq = q || 3;\n\n    \t// used to calculate buffer length\n    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n    \tvar i, j, index = 0, indexOffset = 0;\n\n    \tvar vertex = new Vector3();\n    \tvar normal = new Vector3();\n    \tvar uv = new Vector2();\n\n    \tvar P1 = new Vector3();\n    \tvar P2 = new Vector3();\n\n    \tvar B = new Vector3();\n    \tvar T = new Vector3();\n    \tvar N = new Vector3();\n\n    \t// generate vertices, normals and uvs\n\n    \tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n    \t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n    \t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n    \t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n    \t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n    \t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n    \t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n    \t\t// calculate orthonormal basis\n\n    \t\tT.subVectors( P2, P1 );\n    \t\tN.addVectors( P2, P1 );\n    \t\tB.crossVectors( T, N );\n    \t\tN.crossVectors( B, T );\n\n    \t\t// normalize B, N. T can be ignored, we don't use it\n\n    \t\tB.normalize();\n    \t\tN.normalize();\n\n    \t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n    \t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n    \t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n    \t\t\tvar cx = - tube * Math.cos( v );\n    \t\t\tvar cy = tube * Math.sin( v );\n\n    \t\t\t// now calculate the final vertex position.\n    \t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n    \t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n    \t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n    \t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n    \t\t\t// vertex\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n    \t\t\tnormal.subVectors( vertex, P1 ).normalize();\n    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n    \t\t\t// uv\n    \t\t\tuv.x = i / tubularSegments;\n    \t\t\tuv.y = j / radialSegments;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n    \t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n    \t\t\t// indices\n    \t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n    \t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n    \t\t\tvar c = ( radialSegments + 1 ) * j + i;\n    \t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// this function calculates the current position on the torus curve\n\n    \tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n    \t\tvar cu = Math.cos( u );\n    \t\tvar su = Math.sin( u );\n    \t\tvar quOverP = q / p * u;\n    \t\tvar cs = Math.cos( quOverP );\n\n    \t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n    \t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n    \t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n    \t}\n\n    }\n\n    TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n    /**\n     * @author oosmoxiecode\n     */\n\n    function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TorusKnotGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\ttubularSegments: tubularSegments,\n    \t\tradialSegments: radialSegments,\n    \t\tp: p,\n    \t\tq: q\n    \t};\n\n    \tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n    \tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n    \tthis.mergeVertices();\n\n    }\n\n    TorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n    TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'TorusBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\tradialSegments: radialSegments,\n    \t\ttubularSegments: tubularSegments,\n    \t\tarc: arc\n    \t};\n\n    \tradius = radius || 100;\n    \ttube = tube || 40;\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \ttubularSegments = Math.floor( tubularSegments ) || 6;\n    \tarc = arc || Math.PI * 2;\n\n    \t// used to calculate buffer length\n    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n    \tvar vertices = new Float32Array( vertexCount * 3 );\n    \tvar normals = new Float32Array( vertexCount * 3 );\n    \tvar uvs = new Float32Array( vertexCount * 2 );\n\n    \t// offset variables\n    \tvar vertexBufferOffset = 0;\n    \tvar uvBufferOffset = 0;\n    \tvar indexBufferOffset = 0;\n\n    \t// helper variables\n    \tvar center = new Vector3();\n    \tvar vertex = new Vector3();\n    \tvar normal = new Vector3();\n\n    \tvar j, i;\n\n    \t// generate vertices, normals and uvs\n\n    \tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n    \t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n    \t\t\tvar u = i / tubularSegments * arc;\n    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n    \t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n    \t\t\tvertex.z = tube * Math.sin( v );\n\n    \t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n    \t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n    \t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\n    \t\t\t// this vector is used to calculate the normal\n    \t\t\tcenter.x = radius * Math.cos( u );\n    \t\t\tcenter.y = radius * Math.sin( u );\n\n    \t\t\t// normal\n    \t\t\tnormal.subVectors( vertex, center ).normalize();\n\n    \t\t\tnormals[ vertexBufferOffset ] = normal.x;\n    \t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n    \t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\n    \t\t\t// uv\n    \t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n    \t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\n    \t\t\t// update offsets\n    \t\t\tvertexBufferOffset += 3;\n    \t\t\tuvBufferOffset += 2;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n    \t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n    \t\t\t// indices\n    \t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n    \t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n    \t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n    \t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n    \t\t\t// face one\n    \t\t\tindices[ indexBufferOffset ] = a;\n    \t\t\tindices[ indexBufferOffset + 1 ] = b;\n    \t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n    \t\t\t// face two\n    \t\t\tindices[ indexBufferOffset + 3 ] = b;\n    \t\t\tindices[ indexBufferOffset + 4 ] = c;\n    \t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n    \t\t\t// update offset\n    \t\t\tindexBufferOffset += 6;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    }\n\n    TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n    /**\n     * @author oosmoxiecode\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n     */\n\n    function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TorusGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\tradialSegments: radialSegments,\n    \t\ttubularSegments: tubularSegments,\n    \t\tarc: arc\n    \t};\n\n    \tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\n    }\n\n    TorusGeometry.prototype = Object.create( Geometry.prototype );\n    TorusGeometry.prototype.constructor = TorusGeometry;\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    exports.ShapeUtils = {\n\n    \t// calculate area of the contour polygon\n\n    \tarea: function ( contour ) {\n\n    \t\tvar n = contour.length;\n    \t\tvar a = 0.0;\n\n    \t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n    \t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n    \t\t}\n\n    \t\treturn a * 0.5;\n\n    \t},\n\n    \ttriangulate: ( function () {\n\n    \t\t/**\n    \t\t * This code is a quick port of code written in C++ which was submitted to\n    \t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n    \t\t * See original code and more information here:\n    \t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n    \t\t *\n    \t\t * ported to actionscript by Zevan Rosser\n    \t\t * www.actionsnippet.com\n    \t\t *\n    \t\t * ported to javascript by Joshua Koo\n    \t\t * http://www.lab4games.net/zz85/blog\n    \t\t *\n    \t\t */\n\n    \t\tfunction snip( contour, u, v, w, n, verts ) {\n\n    \t\t\tvar p;\n    \t\t\tvar ax, ay, bx, by;\n    \t\t\tvar cx, cy, px, py;\n\n    \t\t\tax = contour[ verts[ u ] ].x;\n    \t\t\tay = contour[ verts[ u ] ].y;\n\n    \t\t\tbx = contour[ verts[ v ] ].x;\n    \t\t\tby = contour[ verts[ v ] ].y;\n\n    \t\t\tcx = contour[ verts[ w ] ].x;\n    \t\t\tcy = contour[ verts[ w ] ].y;\n\n    \t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\n    \t\t\tvar aX, aY, bX, bY, cX, cY;\n    \t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n    \t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n    \t\t\taX = cx - bx;  aY = cy - by;\n    \t\t\tbX = ax - cx;  bY = ay - cy;\n    \t\t\tcX = bx - ax;  cY = by - ay;\n\n    \t\t\tfor ( p = 0; p < n; p ++ ) {\n\n    \t\t\t\tpx = contour[ verts[ p ] ].x;\n    \t\t\t\tpy = contour[ verts[ p ] ].y;\n\n    \t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n    \t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n    \t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n    \t\t\t\tapx = px - ax;  apy = py - ay;\n    \t\t\t\tbpx = px - bx;  bpy = py - by;\n    \t\t\t\tcpx = px - cx;  cpy = py - cy;\n\n    \t\t\t\t// see if p is inside triangle abc\n\n    \t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n    \t\t\t\tcCROSSap = cX * apy - cY * apx;\n    \t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n    \t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n    \t\t\t}\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\t// takes in an contour array and returns\n\n    \t\treturn function triangulate( contour, indices ) {\n\n    \t\t\tvar n = contour.length;\n\n    \t\t\tif ( n < 3 ) return null;\n\n    \t\t\tvar result = [],\n    \t\t\t\tverts = [],\n    \t\t\t\tvertIndices = [];\n\n    \t\t\t/* we want a counter-clockwise polygon in verts */\n\n    \t\t\tvar u, v, w;\n\n    \t\t\tif ( exports.ShapeUtils.area( contour ) > 0.0 ) {\n\n    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n    \t\t\t} else {\n\n    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n    \t\t\t}\n\n    \t\t\tvar nv = n;\n\n    \t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n    \t\t\tvar count = 2 * nv;   /* error detection */\n\n    \t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n    \t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n    \t\t\t\tif ( ( count -- ) <= 0 ) {\n\n    \t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n    \t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n    \t\t\t\t\t//return null;\n    \t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n    \t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n    \t\t\t\t\tif ( indices ) return vertIndices;\n    \t\t\t\t\treturn result;\n\n    \t\t\t\t}\n\n    \t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n    \t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n    \t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n    \t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n    \t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n    \t\t\t\t\tvar a, b, c, s, t;\n\n    \t\t\t\t\t/* true names of the vertices */\n\n    \t\t\t\t\ta = verts[ u ];\n    \t\t\t\t\tb = verts[ v ];\n    \t\t\t\t\tc = verts[ w ];\n\n    \t\t\t\t\t/* output Triangle */\n\n    \t\t\t\t\tresult.push( [ contour[ a ],\n    \t\t\t\t\t\tcontour[ b ],\n    \t\t\t\t\t\tcontour[ c ] ] );\n\n\n    \t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n    \t\t\t\t\t/* remove v from the remaining polygon */\n\n    \t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n    \t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tnv --;\n\n    \t\t\t\t\t/* reset error detection counter */\n\n    \t\t\t\t\tcount = 2 * nv;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( indices ) return vertIndices;\n    \t\t\treturn result;\n\n    \t\t}\n\n    \t} )(),\n\n    \ttriangulateShape: function ( contour, holes ) {\n\n    \t\tfunction removeDupEndPts(points) {\n\n    \t\t\tvar l = points.length;\n\n    \t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n    \t\t\t\tpoints.pop();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tremoveDupEndPts( contour );\n    \t\tholes.forEach( removeDupEndPts );\n\n    \t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n    \t\t\t// inOtherPt needs to be collinear to the inSegment\n    \t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n    \t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n    \t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n    \t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n    \t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n    \t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n    \t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n    \t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n    \t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n    \t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n    \t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n    \t\t\t\t// not parallel\n\n    \t\t\t\tvar perpSeg2;\n    \t\t\t\tif ( limit > 0 ) {\n\n    \t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n    \t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n    \t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n    \t\t\t\t}\n\n    \t\t\t\t// i.e. to reduce rounding errors\n    \t\t\t\t// intersection at endpoint of segment#1?\n    \t\t\t\tif ( perpSeg2 === 0 ) {\n\n    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\n    \t\t\t\t}\n    \t\t\t\tif ( perpSeg2 === limit ) {\n\n    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n    \t\t\t\t\treturn [ inSeg1Pt2 ];\n\n    \t\t\t\t}\n    \t\t\t\t// intersection at endpoint of segment#2?\n    \t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n    \t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n    \t\t\t\t// return real intersection point\n    \t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n    \t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n    \t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// parallel or collinear\n    \t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n    \t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n    \t\t\t\t// they are collinear or degenerate\n    \t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n    \t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n    \t\t\t\t// both segments are points\n    \t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n    \t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n    \t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n    \t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\n    \t\t\t\t}\n    \t\t\t\t// segment#1  is a single point\n    \t\t\t\tif ( seg1Pt ) {\n\n    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\n    \t\t\t\t}\n    \t\t\t\t// segment#2  is a single point\n    \t\t\t\tif ( seg2Pt ) {\n\n    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n    \t\t\t\t\treturn [ inSeg2Pt1 ];\n\n    \t\t\t\t}\n\n    \t\t\t\t// they are collinear segments, which might overlap\n    \t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n    \t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n    \t\t\t\tif ( seg1dx !== 0 ) {\n\n    \t\t\t\t\t// the segments are NOT on a vertical line\n    \t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// the segments are on a vertical line\n    \t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n    \t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n    \t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n    \t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n    \t\t\t\t\t\treturn [ seg2min ];\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n    \t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n    \t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n    \t\t\t\t\t\treturn [ seg1min ];\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n    \t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n    \t\t\t// The order of legs is important\n\n    \t\t\t// translation of all points, so that Vertex is at (0,0)\n    \t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n    \t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n    \t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n    \t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n    \t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n    \t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n    \t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n    \t\t\t\t// angle != 180 deg.\n\n    \t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n    \t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n    \t\t\t\tif ( from2toAngle > 0 ) {\n\n    \t\t\t\t\t// main angle < 180 deg.\n    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// main angle > 180 deg.\n    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// angle == 180 deg.\n    \t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n    \t\t\t\treturn\t( from2otherAngle > 0 );\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\tfunction removeHoles( contour, holes ) {\n\n    \t\t\tvar shape = contour.concat(); // work on this shape\n    \t\t\tvar hole;\n\n    \t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n    \t\t\t\t// Check if hole point lies within angle around shape point\n    \t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n    \t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n    \t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n    \t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n    \t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n    \t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n    \t\t\t\tif ( ! insideAngle ) {\n\n    \t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n    \t\t\t\t\treturn\tfalse;\n\n    \t\t\t\t}\n\n    \t\t\t\t// Check if shape point lies within angle around hole point\n    \t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n    \t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n    \t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n    \t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n    \t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n    \t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n    \t\t\t\tif ( ! insideAngle ) {\n\n    \t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n    \t\t\t\t\treturn\tfalse;\n\n    \t\t\t\t}\n\n    \t\t\t\treturn\ttrue;\n\n    \t\t\t}\n\n    \t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n    \t\t\t\t// checks for intersections with shape edges\n    \t\t\t\tvar sIdx, nextIdx, intersection;\n    \t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n    \t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n    \t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n    \t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n    \t\t\t\t}\n\n    \t\t\t\treturn\tfalse;\n\n    \t\t\t}\n\n    \t\t\tvar indepHoles = [];\n\n    \t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n    \t\t\t\t// checks for intersections with hole edges\n    \t\t\t\tvar ihIdx, chkHole,\n    \t\t\t\t\thIdx, nextIdx, intersection;\n    \t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n    \t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n    \t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n    \t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n    \t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n    \t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n    \t\t\t\treturn\tfalse;\n\n    \t\t\t}\n\n    \t\t\tvar holeIndex, shapeIndex,\n    \t\t\t\tshapePt, holePt,\n    \t\t\t\tholeIdx, cutKey, failedCuts = [],\n    \t\t\t\ttmpShape1, tmpShape2,\n    \t\t\t\ttmpHole1, tmpHole2;\n\n    \t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\t\tindepHoles.push( h );\n\n    \t\t\t}\n\n    \t\t\tvar minShapeIndex = 0;\n    \t\t\tvar counter = indepHoles.length * 2;\n    \t\t\twhile ( indepHoles.length > 0 ) {\n\n    \t\t\t\tcounter --;\n    \t\t\t\tif ( counter < 0 ) {\n\n    \t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t\t// search for shape-vertex and hole-vertex,\n    \t\t\t\t// which can be connected without intersections\n    \t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n    \t\t\t\t\tshapePt = shape[ shapeIndex ];\n    \t\t\t\t\tholeIndex\t= - 1;\n\n    \t\t\t\t\t// search for hole which can be reached without intersections\n    \t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n    \t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n    \t\t\t\t\t\t// prevent multiple checks\n    \t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n    \t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n    \t\t\t\t\t\thole = holes[ holeIdx ];\n    \t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n    \t\t\t\t\t\t\tholePt = hole[ h2 ];\n    \t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n    \t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n    \t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n    \t\t\t\t\t\t\tholeIndex = h2;\n    \t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n    \t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n    \t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n    \t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n    \t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n    \t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n    \t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n    \t\t\t\t\t\t\t// Debug only, to show the selected cuts\n    \t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n    \t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n    \t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn shape; \t\t\t/* shape with no holes */\n\n    \t\t}\n\n\n    \t\tvar i, il, f, face,\n    \t\t\tkey, index,\n    \t\t\tallPointsMap = {};\n\n    \t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n    \t\tvar allpoints = contour.concat();\n\n    \t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n    \t\t}\n\n    \t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n    \t\t// prepare all points map\n\n    \t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n    \t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n    \t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\n    \t\t\t}\n\n    \t\t\tallPointsMap[ key ] = i;\n\n    \t\t}\n\n    \t\t// remove holes by cutting paths to holes and adding them to the shape\n    \t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n    \t\tvar triangles = exports.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n    \t\t//console.log( \"triangles\",triangles, triangles.length );\n\n    \t\t// check all face vertices against all points map\n\n    \t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n    \t\t\tface = triangles[ i ];\n\n    \t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n    \t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n    \t\t\t\tindex = allPointsMap[ key ];\n\n    \t\t\t\tif ( index !== undefined ) {\n\n    \t\t\t\t\tface[ f ] = index;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn triangles.concat();\n\n    \t},\n\n    \tisClockWise: function ( pts ) {\n\n    \t\treturn exports.ShapeUtils.area( pts ) < 0;\n\n    \t},\n\n    \t// Bezier Curves formulas obtained from\n    \t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n    \t// Quad Bezier Functions\n\n    \tb2: ( function () {\n\n    \t\tfunction b2p0( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn k * k * p;\n\n    \t\t}\n\n    \t\tfunction b2p1( t, p ) {\n\n    \t\t\treturn 2 * ( 1 - t ) * t * p;\n\n    \t\t}\n\n    \t\tfunction b2p2( t, p ) {\n\n    \t\t\treturn t * t * p;\n\n    \t\t}\n\n    \t\treturn function b2( t, p0, p1, p2 ) {\n\n    \t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\n    \t\t};\n\n    \t} )(),\n\n    \t// Cubic Bezier Functions\n\n    \tb3: ( function () {\n\n    \t\tfunction b3p0( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn k * k * k * p;\n\n    \t\t}\n\n    \t\tfunction b3p1( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn 3 * k * k * t * p;\n\n    \t\t}\n\n    \t\tfunction b3p2( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn 3 * k * t * t * p;\n\n    \t\t}\n\n    \t\tfunction b3p3( t, p ) {\n\n    \t\t\treturn t * t * t * p;\n\n    \t\t}\n\n    \t\treturn function b3( t, p0, p1, p2, p3 ) {\n\n    \t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\n    \t\t};\n\n    \t} )()\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     *\n     * Creates extruded geometry from a path shape.\n     *\n     * parameters = {\n     *\n     *  curveSegments: <int>, // number of points on the curves\n     *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n     *  amount: <int>, // Depth to extrude the shape\n     *\n     *  bevelEnabled: <bool>, // turn on bevel\n     *  bevelThickness: <float>, // how deep into the original shape bevel goes\n     *  bevelSize: <float>, // how far from shape outline is bevel\n     *  bevelSegments: <int>, // number of bevel layers\n     *\n     *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n     *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n     *\n     *  uvGenerator: <Object> // object that provides UV generator functions\n     *\n     * }\n     **/\n\n    function ExtrudeGeometry( shapes, options ) {\n\n    \tif ( typeof( shapes ) === \"undefined\" ) {\n\n    \t\tshapes = [];\n    \t\treturn;\n\n    \t}\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ExtrudeGeometry';\n\n    \tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n    \tthis.addShapeList( shapes, options );\n\n    \tthis.computeFaceNormals();\n\n    \t// can't really use automatic vertex normals\n    \t// as then front and back sides get smoothed too\n    \t// should do separate smoothing just for sides\n\n    \t//this.computeVertexNormals();\n\n    \t//console.log( \"took\", ( Date.now() - startTime ) );\n\n    }\n\n    ExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n    ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n    ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n    \tvar sl = shapes.length;\n\n    \tfor ( var s = 0; s < sl; s ++ ) {\n\n    \t\tvar shape = shapes[ s ];\n    \t\tthis.addShape( shape, options );\n\n    \t}\n\n    };\n\n    ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\n    \tvar amount = options.amount !== undefined ? options.amount : 100;\n\n    \tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n    \tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n    \tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n    \tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n    \tvar steps = options.steps !== undefined ? options.steps : 1;\n\n    \tvar extrudePath = options.extrudePath;\n    \tvar extrudePts, extrudeByPath = false;\n\n    \t// Use default WorldUVGenerator if no UV generators are specified.\n    \tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\n    \tvar splineTube, binormal, normal, position2;\n    \tif ( extrudePath ) {\n\n    \t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n    \t\textrudeByPath = true;\n    \t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n    \t\t// SETUP TNB variables\n\n    \t\t// Reuse TNB from TubeGeomtry for now.\n    \t\t// TODO1 - have a .isClosed in spline?\n\n    \t\tsplineTube = options.frames !== undefined ? options.frames : new TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\n    \t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n    \t\tbinormal = new Vector3();\n    \t\tnormal = new Vector3();\n    \t\tposition2 = new Vector3();\n\n    \t}\n\n    \t// Safeguards if bevels are not enabled\n\n    \tif ( ! bevelEnabled ) {\n\n    \t\tbevelSegments = 0;\n    \t\tbevelThickness = 0;\n    \t\tbevelSize = 0;\n\n    \t}\n\n    \t// Variables initialization\n\n    \tvar ahole, h, hl; // looping of holes\n    \tvar scope = this;\n\n    \tvar shapesOffset = this.vertices.length;\n\n    \tvar shapePoints = shape.extractPoints( curveSegments );\n\n    \tvar vertices = shapePoints.shape;\n    \tvar holes = shapePoints.holes;\n\n    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\n    \tif ( reverse ) {\n\n    \t\tvertices = vertices.reverse();\n\n    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n\n    \t\t\tif ( exports.ShapeUtils.isClockWise( ahole ) ) {\n\n    \t\t\t\tholes[ h ] = ahole.reverse();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\n    \t}\n\n\n    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\n    \t/* Vertices */\n\n    \tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\tahole = holes[ h ];\n\n    \t\tvertices = vertices.concat( ahole );\n\n    \t}\n\n\n    \tfunction scalePt2( pt, vec, size ) {\n\n    \t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n    \t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n    \t}\n\n    \tvar b, bs, t, z,\n    \t\tvert, vlen = vertices.length,\n    \t\tface, flen = faces.length;\n\n\n    \t// Find directions for point movement\n\n\n    \tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n    \t\t// computes for inPt the corresponding point inPt' on a new contour\n    \t\t//   shifted by 1 unit (length of normalized vector) to the left\n    \t\t// if we walk along contour clockwise, this new contour is outside the old one\n    \t\t//\n    \t\t// inPt' is the intersection of the two lines parallel to the two\n    \t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n    \t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\n    \t\t// good reading for geometry algorithms (here: line-line intersection)\n    \t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n    \t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n    \t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\n    \t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n    \t\t// check for collinear edges\n    \t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n    \t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n    \t\t\t// not collinear\n\n    \t\t\t// length of vectors for normalizing\n\n    \t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n    \t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n    \t\t\t// shift adjacent points by unit vectors to the left\n\n    \t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n    \t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n    \t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n    \t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n    \t\t\t// scaling factor for v_prev to intersection point\n\n    \t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n    \t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n    \t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n    \t\t\t// vector from inPt to intersection point\n\n    \t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n    \t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n    \t\t\t// Don't normalize!, otherwise sharp corners become ugly\n    \t\t\t//  but prevent crazy spikes\n    \t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n    \t\t\tif ( v_trans_lensq <= 2 ) {\n\n    \t\t\t\treturn\tnew Vector2( v_trans_x, v_trans_y );\n\n    \t\t\t} else {\n\n    \t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// handle special case of collinear edges\n\n    \t\t\tvar direction_eq = false;\t\t// assumes: opposite\n    \t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n    \t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n    \t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n    \t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n    \t\t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n    \t\t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( direction_eq ) {\n\n    \t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n    \t\t\t\tv_trans_x = - v_prev_y;\n    \t\t\t\tv_trans_y =  v_prev_x;\n    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n    \t\t\t} else {\n\n    \t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n    \t\t\t\tv_trans_x = v_prev_x;\n    \t\t\t\tv_trans_y = v_prev_y;\n    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn\tnew Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n    \t}\n\n\n    \tvar contourMovements = [];\n\n    \tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n    \t\tif ( j === il ) j = 0;\n    \t\tif ( k === il ) k = 0;\n\n    \t\t//  (j)---(i)---(k)\n    \t\t// console.log('i,j,k', i, j , k)\n\n    \t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n    \t}\n\n    \tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\n    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\tahole = holes[ h ];\n\n    \t\toneHoleMovements = [];\n\n    \t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n    \t\t\tif ( j === il ) j = 0;\n    \t\t\tif ( k === il ) k = 0;\n\n    \t\t\t//  (j)---(i)---(k)\n    \t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n    \t\t}\n\n    \t\tholesMovements.push( oneHoleMovements );\n    \t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n    \t}\n\n\n    \t// Loop bevelSegments, 1 for the front, 1 for the back\n\n    \tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n    \t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n    \t\tt = b / bevelSegments;\n    \t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n    \t\t// contract shape\n\n    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n    \t\t\tv( vert.x, vert.y,  - z );\n\n    \t\t}\n\n    \t\t// expand holes\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\toneHoleMovements = holesMovements[ h ];\n\n    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n    \t\t\t\tv( vert.x, vert.y,  - z );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tbs = bevelSize;\n\n    \t// Back facing vertices\n\n    \tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n    \t\tif ( ! extrudeByPath ) {\n\n    \t\t\tv( vert.x, vert.y, 0 );\n\n    \t\t} else {\n\n    \t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n    \t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n    \t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n    \t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n    \t\t\tv( position2.x, position2.y, position2.z );\n\n    \t\t}\n\n    \t}\n\n    \t// Add stepped vertices...\n    \t// Including front facing vertices\n\n    \tvar s;\n\n    \tfor ( s = 1; s <= steps; s ++ ) {\n\n    \t\tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n    \t\t\tif ( ! extrudeByPath ) {\n\n    \t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n    \t\t\t} else {\n\n    \t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n    \t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n    \t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n    \t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n    \t\t\t\tv( position2.x, position2.y, position2.z );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \t// Add bevel segments planes\n\n    \t//for ( b = 1; b <= bevelSegments; b ++ ) {\n    \tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n    \t\tt = b / bevelSegments;\n    \t\tz = bevelThickness * Math.cos ( t * Math.PI / 2 );\n    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n    \t\t// contract shape\n\n    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n    \t\t\tv( vert.x, vert.y,  amount + z );\n\n    \t\t}\n\n    \t\t// expand holes\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\toneHoleMovements = holesMovements[ h ];\n\n    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n    \t\t\t\tif ( ! extrudeByPath ) {\n\n    \t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \t/* Faces */\n\n    \t// Top and bottom faces\n\n    \tbuildLidFaces();\n\n    \t// Sides faces\n\n    \tbuildSideFaces();\n\n\n    \t/////  Internal functions\n\n    \tfunction buildLidFaces() {\n\n    \t\tif ( bevelEnabled ) {\n\n    \t\t\tvar layer = 0; // steps + 1\n    \t\t\tvar offset = vlen * layer;\n\n    \t\t\t// Bottom faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n    \t\t\t}\n\n    \t\t\tlayer = steps + bevelSegments * 2;\n    \t\t\toffset = vlen * layer;\n\n    \t\t\t// Top faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// Bottom faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n    \t\t\t}\n\n    \t\t\t// Top faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \t// Create faces for the z-sides of the shape\n\n    \tfunction buildSideFaces() {\n\n    \t\tvar layeroffset = 0;\n    \t\tsidewalls( contour, layeroffset );\n    \t\tlayeroffset += contour.length;\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\tsidewalls( ahole, layeroffset );\n\n    \t\t\t//, true\n    \t\t\tlayeroffset += ahole.length;\n\n    \t\t}\n\n    \t}\n\n    \tfunction sidewalls( contour, layeroffset ) {\n\n    \t\tvar j, k;\n    \t\ti = contour.length;\n\n    \t\twhile ( -- i >= 0 ) {\n\n    \t\t\tj = i;\n    \t\t\tk = i - 1;\n    \t\t\tif ( k < 0 ) k = contour.length - 1;\n\n    \t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n    \t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\n    \t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n    \t\t\t\tvar slen1 = vlen * s;\n    \t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n    \t\t\t\tvar a = layeroffset + j + slen1,\n    \t\t\t\t\tb = layeroffset + k + slen1,\n    \t\t\t\t\tc = layeroffset + k + slen2,\n    \t\t\t\t\td = layeroffset + j + slen2;\n\n    \t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \tfunction v( x, y, z ) {\n\n    \t\tscope.vertices.push( new Vector3( x, y, z ) );\n\n    \t}\n\n    \tfunction f3( a, b, c ) {\n\n    \t\ta += shapesOffset;\n    \t\tb += shapesOffset;\n    \t\tc += shapesOffset;\n\n    \t\tscope.faces.push( new Face3( a, b, c, null, null, 0 ) );\n\n    \t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\n    \t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\n    \t}\n\n    \tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n    \t\ta += shapesOffset;\n    \t\tb += shapesOffset;\n    \t\tc += shapesOffset;\n    \t\td += shapesOffset;\n\n    \t\tscope.faces.push( new Face3( a, b, d, null, null, 1 ) );\n    \t\tscope.faces.push( new Face3( b, c, d, null, null, 1 ) );\n\n    \t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\n    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\n    \t}\n\n    };\n\n    ExtrudeGeometry.WorldUVGenerator = {\n\n    \tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\n    \t\tvar vertices = geometry.vertices;\n\n    \t\tvar a = vertices[ indexA ];\n    \t\tvar b = vertices[ indexB ];\n    \t\tvar c = vertices[ indexC ];\n\n    \t\treturn [\n    \t\t\tnew Vector2( a.x, a.y ),\n    \t\t\tnew Vector2( b.x, b.y ),\n    \t\t\tnew Vector2( c.x, c.y )\n    \t\t];\n\n    \t},\n\n    \tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\n    \t\tvar vertices = geometry.vertices;\n\n    \t\tvar a = vertices[ indexA ];\n    \t\tvar b = vertices[ indexB ];\n    \t\tvar c = vertices[ indexC ];\n    \t\tvar d = vertices[ indexD ];\n\n    \t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\n    \t\t\treturn [\n    \t\t\t\tnew Vector2( a.x, 1 - a.z ),\n    \t\t\t\tnew Vector2( b.x, 1 - b.z ),\n    \t\t\t\tnew Vector2( c.x, 1 - c.z ),\n    \t\t\t\tnew Vector2( d.x, 1 - d.z )\n    \t\t\t];\n\n    \t\t} else {\n\n    \t\t\treturn [\n    \t\t\t\tnew Vector2( a.y, 1 - a.z ),\n    \t\t\t\tnew Vector2( b.y, 1 - b.z ),\n    \t\t\t\tnew Vector2( c.y, 1 - c.z ),\n    \t\t\t\tnew Vector2( d.y, 1 - d.z )\n    \t\t\t];\n\n    \t\t}\n\n    \t}\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * Text = 3D Text\n     *\n     * parameters = {\n     *  font: <THREE.Font>, // font\n     *\n     *  size: <float>, // size of the text\n     *  height: <float>, // thickness to extrude text\n     *  curveSegments: <int>, // number of points on the curves\n     *\n     *  bevelEnabled: <bool>, // turn on bevel\n     *  bevelThickness: <float>, // how deep into text bevel goes\n     *  bevelSize: <float> // how far from text outline is bevel\n     * }\n     */\n\n    function TextGeometry( text, parameters ) {\n\n    \tparameters = parameters || {};\n\n    \tvar font = parameters.font;\n\n    \tif ( (font && font.isFont) === false ) {\n\n    \t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n    \t\treturn new Geometry();\n\n    \t}\n\n    \tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n    \t// translate parameters to ExtrudeGeometry API\n\n    \tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n    \t// defaults\n\n    \tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n    \tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n    \tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n    \tExtrudeGeometry.call( this, shapes, parameters );\n\n    \tthis.type = 'TextGeometry';\n\n    }\n\n    TextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );\n    TextGeometry.prototype.constructor = TextGeometry;\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     * based on THREE.SphereGeometry\n     */\n\n    function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'SphereBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tradius = radius || 50;\n\n    \twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n    \theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n    \tphiStart = phiStart !== undefined ? phiStart : 0;\n    \tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n    \tvar thetaEnd = thetaStart + thetaLength;\n\n    \tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\n    \tvar positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \tvar index = 0, vertices = [], normal = new Vector3();\n\n    \tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n    \t\tvar verticesRow = [];\n\n    \t\tvar v = y / heightSegments;\n\n    \t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\n    \t\t\tvar u = x / widthSegments;\n\n    \t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n    \t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n    \t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n    \t\t\tnormal.set( px, py, pz ).normalize();\n\n    \t\t\tpositions.setXYZ( index, px, py, pz );\n    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n    \t\t\tuvs.setXY( index, u, 1 - v );\n\n    \t\t\tverticesRow.push( index );\n\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\tvertices.push( verticesRow );\n\n    \t}\n\n    \tvar indices = [];\n\n    \tfor ( var y = 0; y < heightSegments; y ++ ) {\n\n    \t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\n    \t\t\tvar v1 = vertices[ y ][ x + 1 ];\n    \t\t\tvar v2 = vertices[ y ][ x ];\n    \t\t\tvar v3 = vertices[ y + 1 ][ x ];\n    \t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\n    \t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n    \t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\n    \t\t}\n\n    \t}\n\n    \tthis.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n    \tthis.addAttribute( 'position', positions );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n    }\n\n    SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'SphereGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\n    }\n\n    SphereGeometry.prototype = Object.create( Geometry.prototype );\n    SphereGeometry.prototype.constructor = SphereGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'RingBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tinnerRadius: innerRadius,\n    \t\touterRadius: outerRadius,\n    \t\tthetaSegments: thetaSegments,\n    \t\tphiSegments: phiSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tinnerRadius = innerRadius || 20;\n    \touterRadius = outerRadius || 50;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    \tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n    \tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n    \tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// some helper variables\n    \tvar index = 0, indexOffset = 0, segment;\n    \tvar radius = innerRadius;\n    \tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n    \tvar vertex = new Vector3();\n    \tvar uv = new Vector2();\n    \tvar j, i;\n\n    \t// generate vertices, normals and uvs\n\n    \t// values are generate from the inside of the ring to the outside\n\n    \tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n    \t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n    \t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = radius * Math.cos( segment );\n    \t\t\tvertex.y = radius * Math.sin( segment );\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n    \t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex++;\n\n    \t\t}\n\n    \t\t// increase the radius for next row of vertices\n    \t\tradius += radiusStep;\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 0; j < phiSegments; j ++ ) {\n\n    \t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n    \t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n    \t\t\tsegment = i + thetaSegmentLevel;\n\n    \t\t\t// indices\n    \t\t\tvar a = segment;\n    \t\t\tvar b = segment + thetaSegments + 1;\n    \t\t\tvar c = segment + thetaSegments + 2;\n    \t\t\tvar d = segment + 1;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    }\n\n    RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    RingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n    /**\n     * @author Kaleb Murphy\n     */\n\n    function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'RingGeometry';\n\n    \tthis.parameters = {\n    \t\tinnerRadius: innerRadius,\n    \t\touterRadius: outerRadius,\n    \t\tthetaSegments: thetaSegments,\n    \t\tphiSegments: phiSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\n    }\n\n    RingGeometry.prototype = Object.create( Geometry.prototype );\n    RingGeometry.prototype.constructor = RingGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n     */\n\n    function PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'PlaneGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments\n    \t};\n\n    \tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\n    }\n\n    PlaneGeometry.prototype = Object.create( Geometry.prototype );\n    PlaneGeometry.prototype.constructor = PlaneGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n     // points - to create a closed torus, one must use a set of points\n     //    like so: [ a, b, c, d, a ], see first is the same as last.\n     // segments - the number of circumference segments to create\n     // phiStart - the starting radian\n     // phiLength - the radian (0 to 2PI) range of the lathed section\n     //    2PI is a closed lathe, less than 2PI is a portion.\n\n    function LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'LatheBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tpoints: points,\n    \t\tsegments: segments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength\n    \t};\n\n    \tsegments = Math.floor( segments ) || 12;\n    \tphiStart = phiStart || 0;\n    \tphiLength = phiLength || Math.PI * 2;\n\n    \t// clamp phiLength so it's in range of [ 0, 2PI ]\n    \tphiLength = exports.Math.clamp( phiLength, 0, Math.PI * 2 );\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = ( segments + 1 ) * points.length;\n    \tvar indexCount = segments * points.length * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n    \tvar index = 0, indexOffset = 0, base;\n    \tvar inverseSegments = 1.0 / segments;\n    \tvar vertex = new Vector3();\n    \tvar uv = new Vector2();\n    \tvar i, j;\n\n    \t// generate vertices and uvs\n\n    \tfor ( i = 0; i <= segments; i ++ ) {\n\n    \t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n    \t\tvar sin = Math.sin( phi );\n    \t\tvar cos = Math.cos( phi );\n\n    \t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = points[ j ].x * sin;\n    \t\t\tvertex.y = points[ j ].y;\n    \t\t\tvertex.z = points[ j ].x * cos;\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// uv\n    \t\t\tuv.x = i / segments;\n    \t\t\tuv.y = j / ( points.length - 1 );\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( i = 0; i < segments; i ++ ) {\n\n    \t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n    \t\t\tbase = j + i * points.length;\n\n    \t\t\t// indices\n    \t\t\tvar a = base;\n    \t\t\tvar b = base + points.length;\n    \t\t\tvar c = base + points.length + 1;\n    \t\t\tvar d = base + 1;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// generate normals\n\n    \tthis.computeVertexNormals();\n\n    \t// if the geometry is closed, we need to average the normals along the seam.\n    \t// because the corresponding vertices are identical (but still have different UVs).\n\n    \tif( phiLength === Math.PI * 2 ) {\n\n    \t\tvar normals = this.attributes.normal.array;\n    \t\tvar n1 = new Vector3();\n    \t\tvar n2 = new Vector3();\n    \t\tvar n = new Vector3();\n\n    \t\t// this is the buffer offset for the last line of vertices\n    \t\tbase = segments * points.length * 3;\n\n    \t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n    \t\t\t// select the normal of the vertex in the first line\n    \t\t\tn1.x = normals[ j + 0 ];\n    \t\t\tn1.y = normals[ j + 1 ];\n    \t\t\tn1.z = normals[ j + 2 ];\n\n    \t\t\t// select the normal of the vertex in the last line\n    \t\t\tn2.x = normals[ base + j + 0 ];\n    \t\t\tn2.y = normals[ base + j + 1 ];\n    \t\t\tn2.z = normals[ base + j + 2 ];\n\n    \t\t\t// average normals\n    \t\t\tn.addVectors( n1, n2 ).normalize();\n\n    \t\t\t// assign the new values to both normals\n    \t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n    \t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n    \t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n    \t\t} // next row\n\n    \t}\n\n    }\n\n    LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n    /**\n     * @author astrodud / http://astrodud.isgreat.org/\n     * @author zz85 / https://github.com/zz85\n     * @author bhouston / http://clara.io\n     */\n\n    // points - to create a closed torus, one must use a set of points\n    //    like so: [ a, b, c, d, a ], see first is the same as last.\n    // segments - the number of circumference segments to create\n    // phiStart - the starting radian\n    // phiLength - the radian (0 to 2PI) range of the lathed section\n    //    2PI is a closed lathe, less than 2PI is a portion.\n\n    function LatheGeometry( points, segments, phiStart, phiLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'LatheGeometry';\n\n    \tthis.parameters = {\n    \t\tpoints: points,\n    \t\tsegments: segments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength\n    \t};\n\n    \tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n    \tthis.mergeVertices();\n\n    }\n\n    LatheGeometry.prototype = Object.create( Geometry.prototype );\n    LatheGeometry.prototype.constructor = LatheGeometry;\n\n    /**\n     * @author jonobr1 / http://jonobr1.com\n     *\n     * Creates a one-sided polygonal geometry from a path shape. Similar to\n     * ExtrudeGeometry.\n     *\n     * parameters = {\n     *\n     *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n     *\n     *\tmaterial: <int> // material index for front and back faces\n     *\tuvGenerator: <Object> // object that provides UV generator functions\n     *\n     * }\n     **/\n\n    function ShapeGeometry( shapes, options ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ShapeGeometry';\n\n    \tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\n    \tthis.addShapeList( shapes, options );\n\n    \tthis.computeFaceNormals();\n\n    }\n\n    ShapeGeometry.prototype = Object.create( Geometry.prototype );\n    ShapeGeometry.prototype.constructor = ShapeGeometry;\n\n    /**\n     * Add an array of shapes to THREE.ShapeGeometry.\n     */\n    ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n    \tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n    \t\tthis.addShape( shapes[ i ], options );\n\n    \t}\n\n    \treturn this;\n\n    };\n\n    /**\n     * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n     */\n    ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\n    \tif ( options === undefined ) options = {};\n    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n    \tvar material = options.material;\n    \tvar uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\n    \t//\n\n    \tvar i, l, hole;\n\n    \tvar shapesOffset = this.vertices.length;\n    \tvar shapePoints = shape.extractPoints( curveSegments );\n\n    \tvar vertices = shapePoints.shape;\n    \tvar holes = shapePoints.holes;\n\n    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\n    \tif ( reverse ) {\n\n    \t\tvertices = vertices.reverse();\n\n    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n    \t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n    \t\t\thole = holes[ i ];\n\n    \t\t\tif ( exports.ShapeUtils.isClockWise( hole ) ) {\n\n    \t\t\t\tholes[ i ] = hole.reverse();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treverse = false;\n\n    \t}\n\n    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\n    \t// Vertices\n\n    \tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n    \t\thole = holes[ i ];\n    \t\tvertices = vertices.concat( hole );\n\n    \t}\n\n    \t//\n\n    \tvar vert, vlen = vertices.length;\n    \tvar face, flen = faces.length;\n\n    \tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\tvert = vertices[ i ];\n\n    \t\tthis.vertices.push( new Vector3( vert.x, vert.y, 0 ) );\n\n    \t}\n\n    \tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\tface = faces[ i ];\n\n    \t\tvar a = face[ 0 ] + shapesOffset;\n    \t\tvar b = face[ 1 ] + shapesOffset;\n    \t\tvar c = face[ 2 ] + shapesOffset;\n\n    \t\tthis.faces.push( new Face3( a, b, c, null, null, material ) );\n    \t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\n    \t}\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function EdgesGeometry( geometry, thresholdAngle ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n    \tvar thresholdDot = Math.cos( exports.Math.DEG2RAD * thresholdAngle );\n\n    \tvar edge = [ 0, 0 ], hash = {};\n\n    \tfunction sortFunction( a, b ) {\n\n    \t\treturn a - b;\n\n    \t}\n\n    \tvar keys = [ 'a', 'b', 'c' ];\n\n    \tvar geometry2;\n\n    \tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\tgeometry2 = new Geometry();\n    \t\tgeometry2.fromBufferGeometry( geometry );\n\n    \t} else {\n\n    \t\tgeometry2 = geometry.clone();\n\n    \t}\n\n    \tgeometry2.mergeVertices();\n    \tgeometry2.computeFaceNormals();\n\n    \tvar vertices = geometry2.vertices;\n    \tvar faces = geometry2.faces;\n\n    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\tvar face = faces[ i ];\n\n    \t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\tedge[ 0 ] = face[ keys[ j ] ];\n    \t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n    \t\t\tedge.sort( sortFunction );\n\n    \t\t\tvar key = edge.toString();\n\n    \t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\n    \t\t\t} else {\n\n    \t\t\t\thash[ key ].face2 = i;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tvar coords = [];\n\n    \tfor ( var key in hash ) {\n\n    \t\tvar h = hash[ key ];\n\n    \t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\n    \t\t\tvar vertex = vertices[ h.vert1 ];\n    \t\t\tcoords.push( vertex.x );\n    \t\t\tcoords.push( vertex.y );\n    \t\t\tcoords.push( vertex.z );\n\n    \t\t\tvertex = vertices[ h.vert2 ];\n    \t\t\tcoords.push( vertex.x );\n    \t\t\tcoords.push( vertex.y );\n    \t\t\tcoords.push( vertex.z );\n\n    \t\t}\n\n    \t}\n\n    \tthis.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );\n\n    }\n\n    EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n    EdgesGeometry.prototype.constructor = EdgesGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'CylinderBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradiusTop: radiusTop,\n    \t\tradiusBottom: radiusBottom,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tvar scope = this;\n\n    \tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n    \tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n    \theight = height !== undefined ? height : 100;\n\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \theightSegments = Math.floor( heightSegments ) || 1;\n\n    \topenEnded = openEnded !== undefined ? openEnded : false;\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\n    \t// used to calculate buffer length\n\n    \tvar nbCap = 0;\n\n    \tif ( openEnded === false ) {\n\n    \t\tif ( radiusTop > 0 ) nbCap ++;\n    \t\tif ( radiusBottom > 0 ) nbCap ++;\n\n    \t}\n\n    \tvar vertexCount = calculateVertexCount();\n    \tvar indexCount = calculateIndexCount();\n\n    \t// buffers\n\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n\n    \tvar index = 0,\n    \t    indexOffset = 0,\n    \t    indexArray = [],\n    \t    halfHeight = height / 2;\n\n    \t// group variables\n    \tvar groupStart = 0;\n\n    \t// generate geometry\n\n    \tgenerateTorso();\n\n    \tif ( openEnded === false ) {\n\n    \t\tif ( radiusTop > 0 ) generateCap( true );\n    \t\tif ( radiusBottom > 0 ) generateCap( false );\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// helper functions\n\n    \tfunction calculateVertexCount() {\n\n    \t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\n    \t\tif ( openEnded === false ) {\n\n    \t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\n    \t\t}\n\n    \t\treturn count;\n\n    \t}\n\n    \tfunction calculateIndexCount() {\n\n    \t\tvar count = radialSegments * heightSegments * 2 * 3;\n\n    \t\tif ( openEnded === false ) {\n\n    \t\t\tcount += radialSegments * nbCap * 3;\n\n    \t\t}\n\n    \t\treturn count;\n\n    \t}\n\n    \tfunction generateTorso() {\n\n    \t\tvar x, y;\n    \t\tvar normal = new Vector3();\n    \t\tvar vertex = new Vector3();\n\n    \t\tvar groupCount = 0;\n\n    \t\t// this will be used to calculate the normal\n    \t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n    \t\t// generate vertices, normals and uvs\n\n    \t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n    \t\t\tvar indexRow = [];\n\n    \t\t\tvar v = y / heightSegments;\n\n    \t\t\t// calculate the radius of the current row\n    \t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n    \t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n    \t\t\t\tvar u = x / radialSegments;\n\n    \t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n    \t\t\t\tvar sinTheta = Math.sin( theta );\n    \t\t\t\tvar cosTheta = Math.cos( theta );\n\n    \t\t\t\t// vertex\n    \t\t\t\tvertex.x = radius * sinTheta;\n    \t\t\t\tvertex.y = - v * height + halfHeight;\n    \t\t\t\tvertex.z = radius * cosTheta;\n    \t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t\t// normal\n    \t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n    \t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n    \t\t\t\t// uv\n    \t\t\t\tuvs.setXY( index, u, 1 - v );\n\n    \t\t\t\t// save index of vertex in respective row\n    \t\t\t\tindexRow.push( index );\n\n    \t\t\t\t// increase index\n    \t\t\t\tindex ++;\n\n    \t\t\t}\n\n    \t\t\t// now save vertices of the row in our index array\n    \t\t\tindexArray.push( indexRow );\n\n    \t\t}\n\n    \t\t// generate indices\n\n    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n    \t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n    \t\t\t\t// we use the index array to access the correct indices\n    \t\t\t\tvar i1 = indexArray[ y ][ x ];\n    \t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n    \t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n    \t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\n    \t\t\t\t// face one\n    \t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n    \t\t\t\t// face two\n    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n    \t\t\t\t// update counters\n    \t\t\t\tgroupCount += 6;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, 0 );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t}\n\n    \tfunction generateCap( top ) {\n\n    \t\tvar x, centerIndexStart, centerIndexEnd;\n\n    \t\tvar uv = new Vector2();\n    \t\tvar vertex = new Vector3();\n\n    \t\tvar groupCount = 0;\n\n    \t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n    \t\tvar sign = ( top === true ) ? 1 : - 1;\n\n    \t\t// save the index of the first center vertex\n    \t\tcenterIndexStart = index;\n\n    \t\t// first we generate the center vertex data of the cap.\n    \t\t// because the geometry needs one set of uvs per face,\n    \t\t// we must generate a center vertex per face/segment\n\n    \t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n    \t\t\t// vertex\n    \t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = 0.5;\n    \t\t\tuv.y = 0.5;\n\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\t// save the index of the last center vertex\n    \t\tcenterIndexEnd = index;\n\n    \t\t// now we generate the surrounding vertices, normals and uvs\n\n    \t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n    \t\t\tvar u = x / radialSegments;\n    \t\t\tvar theta = u * thetaLength + thetaStart;\n\n    \t\t\tvar cosTheta = Math.cos( theta );\n    \t\t\tvar sinTheta = Math.sin( theta );\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = radius * sinTheta;\n    \t\t\tvertex.y = halfHeight * sign;\n    \t\t\tvertex.z = radius * cosTheta;\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n    \t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\t// generate indices\n\n    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n    \t\t\tvar c = centerIndexStart + x;\n    \t\t\tvar i = centerIndexEnd + x;\n\n    \t\t\tif ( top === true ) {\n\n    \t\t\t\t// face top\n    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n    \t\t\t} else {\n\n    \t\t\t\t// face bottom\n    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n    \t\t\t}\n\n    \t\t\t// update counters\n    \t\t\tgroupCount += 3;\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t}\n\n    }\n\n    CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'CylinderGeometry';\n\n    \tthis.parameters = {\n    \t\tradiusTop: radiusTop,\n    \t\tradiusBottom: radiusBottom,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n    \tthis.mergeVertices();\n\n    }\n\n    CylinderGeometry.prototype = Object.create( Geometry.prototype );\n    CylinderGeometry.prototype.constructor = CylinderGeometry;\n\n    /**\n     * @author abelnation / http://github.com/abelnation\n     */\n\n    function ConeGeometry(\n    \tradius, height,\n    \tradialSegments, heightSegments,\n    \topenEnded, thetaStart, thetaLength ) {\n\n    \tCylinderGeometry.call( this,\n    \t\t0, radius, height,\n    \t\tradialSegments, heightSegments,\n    \t\topenEnded, thetaStart, thetaLength );\n\n    \tthis.type = 'ConeGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    }\n\n    ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n    ConeGeometry.prototype.constructor = ConeGeometry;\n\n    /*\n     * @author: abelnation / http://github.com/abelnation\n     */\n\n    function ConeBufferGeometry(\n    \tradius, height,\n    \tradialSegments, heightSegments,\n    \topenEnded, thetaStart, thetaLength ) {\n\n    \tCylinderBufferGeometry.call( this,\n    \t\t0, radius, height,\n    \t\tradialSegments, heightSegments,\n    \t\topenEnded, thetaStart, thetaLength );\n\n    \tthis.type = 'ConeBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    }\n\n    ConeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'CircleBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tsegments: segments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tradius = radius || 50;\n    \tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    \tvar vertices = segments + 2;\n\n    \tvar positions = new Float32Array( vertices * 3 );\n    \tvar normals = new Float32Array( vertices * 3 );\n    \tvar uvs = new Float32Array( vertices * 2 );\n\n    \t// center data is already zero, but need to set a few extras\n    \tnormals[ 2 ] = 1.0;\n    \tuvs[ 0 ] = 0.5;\n    \tuvs[ 1 ] = 0.5;\n\n    \tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\n    \t\tvar segment = thetaStart + s / segments * thetaLength;\n\n    \t\tpositions[ i ] = radius * Math.cos( segment );\n    \t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\n    \t\tnormals[ i + 2 ] = 1; // normal z\n\n    \t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n    \t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\n    \t}\n\n    \tvar indices = [];\n\n    \tfor ( var i = 1; i <= segments; i ++ ) {\n\n    \t\tindices.push( i, i + 1, 0 );\n\n    \t}\n\n    \tthis.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n    }\n\n    CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n    /**\n     * @author hughes\n     */\n\n    function CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'CircleGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tsegments: segments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\n    }\n\n    CircleGeometry.prototype = Object.create( Geometry.prototype );\n    CircleGeometry.prototype.constructor = CircleGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n     */\n\n    function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'BoxGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\tdepth: depth,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tdepthSegments: depthSegments\n    \t};\n\n    \tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n    \tthis.mergeVertices();\n\n    }\n\n    BoxGeometry.prototype = Object.create( Geometry.prototype );\n    BoxGeometry.prototype.constructor = BoxGeometry;\n\n\n\n    var Geometries = Object.freeze({\n    \tWireframeGeometry: WireframeGeometry,\n    \tParametricGeometry: ParametricGeometry,\n    \tTetrahedronGeometry: TetrahedronGeometry,\n    \tOctahedronGeometry: OctahedronGeometry,\n    \tIcosahedronGeometry: IcosahedronGeometry,\n    \tDodecahedronGeometry: DodecahedronGeometry,\n    \tPolyhedronGeometry: PolyhedronGeometry,\n    \tTubeGeometry: TubeGeometry,\n    \tTorusKnotGeometry: TorusKnotGeometry,\n    \tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n    \tTorusGeometry: TorusGeometry,\n    \tTorusBufferGeometry: TorusBufferGeometry,\n    \tTextGeometry: TextGeometry,\n    \tSphereBufferGeometry: SphereBufferGeometry,\n    \tSphereGeometry: SphereGeometry,\n    \tRingGeometry: RingGeometry,\n    \tRingBufferGeometry: RingBufferGeometry,\n    \tPlaneBufferGeometry: PlaneBufferGeometry,\n    \tPlaneGeometry: PlaneGeometry,\n    \tLatheGeometry: LatheGeometry,\n    \tLatheBufferGeometry: LatheBufferGeometry,\n    \tShapeGeometry: ShapeGeometry,\n    \tExtrudeGeometry: ExtrudeGeometry,\n    \tEdgesGeometry: EdgesGeometry,\n    \tConeGeometry: ConeGeometry,\n    \tConeBufferGeometry: ConeBufferGeometry,\n    \tCylinderGeometry: CylinderGeometry,\n    \tCylinderBufferGeometry: CylinderBufferGeometry,\n    \tCircleBufferGeometry: CircleBufferGeometry,\n    \tCircleGeometry: CircleGeometry,\n    \tBoxBufferGeometry: BoxBufferGeometry,\n    \tBoxGeometry: BoxGeometry\n    });\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ShadowMaterial() {\n\n    \tShaderMaterial.call( this, {\n    \t\tuniforms: exports.UniformsUtils.merge( [\n    \t\t\tUniformsLib[ \"lights\" ],\n    \t\t\t{\n    \t\t\t\topacity: { value: 1.0 }\n    \t\t\t}\n    \t\t] ),\n    \t\tvertexShader: ShaderChunk[ 'shadow_vert' ],\n    \t\tfragmentShader: ShaderChunk[ 'shadow_frag' ]\n    \t} );\n\n    \tthis.lights = true;\n    \tthis.transparent = true;\n\n    \tObject.defineProperties( this, {\n    \t\topacity: {\n    \t\t\tenumerable: true,\n    \t\t\tget: function () {\n    \t\t\t\treturn this.uniforms.opacity.value;\n    \t\t\t},\n    \t\t\tset: function ( value ) {\n    \t\t\t\tthis.uniforms.opacity.value = value;\n    \t\t\t}\n    \t\t}\n    \t} );\n\n    }\n\n    ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );\n    ShadowMaterial.prototype.constructor = ShadowMaterial;\n\n    ShadowMaterial.prototype.isShadowMaterial = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function RawShaderMaterial( parameters ) {\n\n    \tShaderMaterial.call( this, parameters );\n\n    \tthis.type = 'RawShaderMaterial';\n\n    }\n\n    RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n    RawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n    RawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function MultiMaterial( materials ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.type = 'MultiMaterial';\n\n    \tthis.materials = materials instanceof Array ? materials : [];\n\n    \tthis.visible = true;\n\n    }\n\n    MultiMaterial.prototype = {\n\n    \tconstructor: MultiMaterial,\n\n    \tisMultiMaterial: true,\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar output = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.2,\n    \t\t\t\ttype: 'material',\n    \t\t\t\tgenerator: 'MaterialExporter'\n    \t\t\t},\n    \t\t\tuuid: this.uuid,\n    \t\t\ttype: this.type,\n    \t\t\tmaterials: []\n    \t\t};\n\n    \t\tvar materials = this.materials;\n\n    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n    \t\t\tvar material = materials[ i ].toJSON( meta );\n    \t\t\tdelete material.metadata;\n\n    \t\t\toutput.materials.push( material );\n\n    \t\t}\n\n    \t\toutput.visible = this.visible;\n\n    \t\treturn output;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\tvar material = new this.constructor();\n\n    \t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\n    \t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\n    \t\t}\n\n    \t\tmaterial.visible = this.visible;\n\n    \t\treturn material;\n\n    \t}\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  roughness: <float>,\n     *  metalness: <float>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  bumpMap: new THREE.Texture( <Image> ),\n     *  bumpScale: <float>,\n     *\n     *  normalMap: new THREE.Texture( <Image> ),\n     *  normalScale: <Vector2>,\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  roughnessMap: new THREE.Texture( <Image> ),\n     *\n     *  metalnessMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n     *  envMapIntensity: <float>\n     *\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshStandardMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.defines = { 'STANDARD': '' };\n\n    \tthis.type = 'MeshStandardMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n    \tthis.roughness = 0.5;\n    \tthis.metalness = 0.5;\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.bumpMap = null;\n    \tthis.bumpScale = 1;\n\n    \tthis.normalMap = null;\n    \tthis.normalScale = new Vector2( 1, 1 );\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.roughnessMap = null;\n\n    \tthis.metalnessMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.envMapIntensity = 1.0;\n\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshStandardMaterial.prototype = Object.create( Material.prototype );\n    MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n    MeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n    MeshStandardMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.defines = { 'STANDARD': '' };\n\n    \tthis.color.copy( source.color );\n    \tthis.roughness = source.roughness;\n    \tthis.metalness = source.metalness;\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.bumpMap = source.bumpMap;\n    \tthis.bumpScale = source.bumpScale;\n\n    \tthis.normalMap = source.normalMap;\n    \tthis.normalScale.copy( source.normalScale );\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.roughnessMap = source.roughnessMap;\n\n    \tthis.metalnessMap = source.metalnessMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.envMapIntensity = source.envMapIntensity;\n\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *  reflectivity: <float>\n     * }\n     */\n\n    function MeshPhysicalMaterial( parameters ) {\n\n    \tMeshStandardMaterial.call( this );\n\n    \tthis.defines = { 'PHYSICAL': '' };\n\n    \tthis.type = 'MeshPhysicalMaterial';\n\n    \tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n    \tthis.clearCoat = 0.0;\n    \tthis.clearCoatRoughness = 0.0;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n    MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n    MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n    MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n    \tMeshStandardMaterial.prototype.copy.call( this, source );\n\n    \tthis.defines = { 'PHYSICAL': '' };\n\n    \tthis.reflectivity = source.reflectivity;\n\n    \tthis.clearCoat = source.clearCoat;\n    \tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  specular: <hex>,\n     *  shininess: <float>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  bumpMap: new THREE.Texture( <Image> ),\n     *  bumpScale: <float>,\n     *\n     *  normalMap: new THREE.Texture( <Image> ),\n     *  normalScale: <Vector2>,\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshPhongMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshPhongMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n    \tthis.specular = new Color( 0x111111 );\n    \tthis.shininess = 30;\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.bumpMap = null;\n    \tthis.bumpScale = 1;\n\n    \tthis.normalMap = null;\n    \tthis.normalScale = new Vector2( 1, 1 );\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshPhongMaterial.prototype = Object.create( Material.prototype );\n    MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n    MeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n    MeshPhongMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n    \tthis.specular.copy( source.specular );\n    \tthis.shininess = source.shininess;\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.bumpMap = source.bumpMap;\n    \tthis.bumpScale = source.bumpScale;\n\n    \tthis.normalMap = source.normalMap;\n    \tthis.normalScale.copy( source.normalScale );\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     *\n     * parameters = {\n     *  opacity: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>\n     * }\n     */\n\n    function MeshNormalMaterial( parameters ) {\n\n    \tMaterial.call( this, parameters );\n\n    \tthis.type = 'MeshNormalMaterial';\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n    \tthis.morphTargets = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshNormalMaterial.prototype = Object.create( Material.prototype );\n    MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n    MeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n    MeshNormalMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshLambertMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshLambertMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshLambertMaterial.prototype = Object.create( Material.prototype );\n    MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n    MeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n    MeshLambertMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  linewidth: <float>,\n     *\n     *  scale: <float>,\n     *  dashSize: <float>,\n     *  gapSize: <float>\n     * }\n     */\n\n    function LineDashedMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'LineDashedMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.linewidth = 1;\n\n    \tthis.scale = 1;\n    \tthis.dashSize = 3;\n    \tthis.gapSize = 1;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    LineDashedMaterial.prototype = Object.create( Material.prototype );\n    LineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n    LineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n    LineDashedMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.linewidth = source.linewidth;\n\n    \tthis.scale = source.scale;\n    \tthis.dashSize = source.dashSize;\n    \tthis.gapSize = source.gapSize;\n\n    \treturn this;\n\n    };\n\n\n\n    var Materials = Object.freeze({\n    \tShadowMaterial: ShadowMaterial,\n    \tSpriteMaterial: SpriteMaterial,\n    \tRawShaderMaterial: RawShaderMaterial,\n    \tShaderMaterial: ShaderMaterial,\n    \tPointsMaterial: PointsMaterial,\n    \tMultiMaterial: MultiMaterial,\n    \tMeshPhysicalMaterial: MeshPhysicalMaterial,\n    \tMeshStandardMaterial: MeshStandardMaterial,\n    \tMeshPhongMaterial: MeshPhongMaterial,\n    \tMeshNormalMaterial: MeshNormalMaterial,\n    \tMeshLambertMaterial: MeshLambertMaterial,\n    \tMeshDepthMaterial: MeshDepthMaterial,\n    \tMeshBasicMaterial: MeshBasicMaterial,\n    \tLineDashedMaterial: LineDashedMaterial,\n    \tLineBasicMaterial: LineBasicMaterial,\n    \tMaterial: Material\n    });\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    exports.Cache = {\n\n    \tenabled: false,\n\n    \tfiles: {},\n\n    \tadd: function ( key, file ) {\n\n    \t\tif ( this.enabled === false ) return;\n\n    \t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n    \t\tthis.files[ key ] = file;\n\n    \t},\n\n    \tget: function ( key ) {\n\n    \t\tif ( this.enabled === false ) return;\n\n    \t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n    \t\treturn this.files[ key ];\n\n    \t},\n\n    \tremove: function ( key ) {\n\n    \t\tdelete this.files[ key ];\n\n    \t},\n\n    \tclear: function () {\n\n    \t\tthis.files = {};\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LoadingManager( onLoad, onProgress, onError ) {\n\n    \tvar scope = this;\n\n    \tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\n    \tthis.onStart = undefined;\n    \tthis.onLoad = onLoad;\n    \tthis.onProgress = onProgress;\n    \tthis.onError = onError;\n\n    \tthis.itemStart = function ( url ) {\n\n    \t\titemsTotal ++;\n\n    \t\tif ( isLoading === false ) {\n\n    \t\t\tif ( scope.onStart !== undefined ) {\n\n    \t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tisLoading = true;\n\n    \t};\n\n    \tthis.itemEnd = function ( url ) {\n\n    \t\titemsLoaded ++;\n\n    \t\tif ( scope.onProgress !== undefined ) {\n\n    \t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n    \t\t}\n\n    \t\tif ( itemsLoaded === itemsTotal ) {\n\n    \t\t\tisLoading = false;\n\n    \t\t\tif ( scope.onLoad !== undefined ) {\n\n    \t\t\t\tscope.onLoad();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t};\n\n    \tthis.itemError = function ( url ) {\n\n    \t\tif ( scope.onError !== undefined ) {\n\n    \t\t\tscope.onError( url );\n\n    \t\t}\n\n    \t};\n\n    }\n\n    exports.DefaultLoadingManager = new LoadingManager();\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function XHRLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( XHRLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tif ( this.path !== undefined ) url = this.path + url;\n\n    \t\tvar scope = this;\n\n    \t\tvar cached = exports.Cache.get( url );\n\n    \t\tif ( cached !== undefined ) {\n\n    \t\t\tscope.manager.itemStart( url );\n\n    \t\t\tsetTimeout( function () {\n\n    \t\t\t\tif ( onLoad ) onLoad( cached );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t}, 0 );\n\n    \t\t\treturn cached;\n\n    \t\t}\n\n    \t\tvar request = new XMLHttpRequest();\n    \t\trequest.open( 'GET', url, true );\n\n    \t\trequest.addEventListener( 'load', function ( event ) {\n\n    \t\t\tvar response = event.target.response;\n\n    \t\t\texports.Cache.add( url, response );\n\n    \t\t\tif ( this.status === 200 ) {\n\n    \t\t\t\tif ( onLoad ) onLoad( response );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t} else if ( this.status === 0 ) {\n\n    \t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n    \t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n    \t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\n    \t\t\t\tif ( onLoad ) onLoad( response );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( onError ) onError( event );\n\n    \t\t\t\tscope.manager.itemError( url );\n\n    \t\t\t}\n\n    \t\t}, false );\n\n    \t\tif ( onProgress !== undefined ) {\n\n    \t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n    \t\t\t\tonProgress( event );\n\n    \t\t\t}, false );\n\n    \t\t}\n\n    \t\trequest.addEventListener( 'error', function ( event ) {\n\n    \t\t\tif ( onError ) onError( event );\n\n    \t\t\tscope.manager.itemError( url );\n\n    \t\t}, false );\n\n    \t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n    \t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n    \t\tif ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );\n\n    \t\trequest.send( null );\n\n    \t\tscope.manager.itemStart( url );\n\n    \t\treturn request;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetResponseType: function ( value ) {\n\n    \t\tthis.responseType = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     *\n     * Abstract Base class to block based textures loader (dds, pvr, ...)\n     */\n\n    function CompressedTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \t// override in sub classes\n    \tthis._parser = null;\n\n    }\n\n    Object.assign( CompressedTextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar images = [];\n\n    \t\tvar texture = new CompressedTexture();\n    \t\ttexture.image = images;\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setPath( this.path );\n    \t\tloader.setResponseType( 'arraybuffer' );\n\n    \t\tfunction loadTexture( i ) {\n\n    \t\t\tloader.load( url[ i ], function ( buffer ) {\n\n    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n    \t\t\t\timages[ i ] = {\n    \t\t\t\t\twidth: texDatas.width,\n    \t\t\t\t\theight: texDatas.height,\n    \t\t\t\t\tformat: texDatas.format,\n    \t\t\t\t\tmipmaps: texDatas.mipmaps\n    \t\t\t\t};\n\n    \t\t\t\tloaded += 1;\n\n    \t\t\t\tif ( loaded === 6 ) {\n\n    \t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n    \t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t\t\ttexture.format = texDatas.format;\n    \t\t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t\t}\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\tif ( Array.isArray( url ) ) {\n\n    \t\t\tvar loaded = 0;\n\n    \t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n    \t\t\t\tloadTexture( i );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// compressed cubemap texture stored in a single DDS file\n\n    \t\t\tloader.load( url, function ( buffer ) {\n\n    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n    \t\t\t\tif ( texDatas.isCubemap ) {\n\n    \t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n    \t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n    \t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n    \t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n    \t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n    \t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n    \t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n    \t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ttexture.image.width = texDatas.width;\n    \t\t\t\t\ttexture.image.height = texDatas.height;\n    \t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n    \t\t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.format = texDatas.format;\n    \t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author Nikos M. / https://github.com/foo123/\n     *\n     * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n     */\n\n    var DataTextureLoader = BinaryTextureLoader;\n    function BinaryTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \t// override in sub classes\n    \tthis._parser = null;\n\n    }\n\n    Object.assign( BinaryTextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar texture = new DataTexture();\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setResponseType( 'arraybuffer' );\n\n    \t\tloader.load( url, function ( buffer ) {\n\n    \t\t\tvar texData = scope._parser( buffer );\n\n    \t\t\tif ( ! texData ) return;\n\n    \t\t\tif ( undefined !== texData.image ) {\n\n    \t\t\t\ttexture.image = texData.image;\n\n    \t\t\t} else if ( undefined !== texData.data ) {\n\n    \t\t\t\ttexture.image.width = texData.width;\n    \t\t\t\ttexture.image.height = texData.height;\n    \t\t\t\ttexture.image.data = texData.data;\n\n    \t\t\t}\n\n    \t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n    \t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n    \t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n    \t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\n    \t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n    \t\t\tif ( undefined !== texData.format ) {\n\n    \t\t\t\ttexture.format = texData.format;\n\n    \t\t\t}\n    \t\t\tif ( undefined !== texData.type ) {\n\n    \t\t\t\ttexture.type = texData.type;\n\n    \t\t\t}\n\n    \t\t\tif ( undefined !== texData.mipmaps ) {\n\n    \t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n    \t\t\t}\n\n    \t\t\tif ( 1 === texData.mipmapCount ) {\n\n    \t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t}\n\n    \t\t\ttexture.needsUpdate = true;\n\n    \t\t\tif ( onLoad ) onLoad( texture, texData );\n\n    \t\t}, onProgress, onError );\n\n\n    \t\treturn texture;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ImageLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( ImageLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n    \t\timage.onload = function () {\n\n    \t\t\timage.onload = null;\n\n    \t\t\tURL.revokeObjectURL( image.src );\n\n    \t\t\tif ( onLoad ) onLoad( image );\n\n    \t\t\tscope.manager.itemEnd( url );\n\n    \t\t};\n\n    \t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\n    \t\t\timage.src = url;\n\n    \t\t} else {\n\n    \t\t\tvar loader = new XHRLoader();\n    \t\t\tloader.setPath( this.path );\n    \t\t\tloader.setResponseType( 'blob' );\n    \t\t\tloader.setWithCredentials( this.withCredentials );\n    \t\t\tloader.load( url, function ( blob ) {\n\n    \t\t\t\timage.src = URL.createObjectURL( blob );\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\tscope.manager.itemStart( url );\n\n    \t\treturn image;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CubeTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( CubeTextureLoader.prototype, {\n\n    \tload: function ( urls, onLoad, onProgress, onError ) {\n\n    \t\tvar texture = new CubeTexture();\n\n    \t\tvar loader = new ImageLoader( this.manager );\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n    \t\tloader.setPath( this.path );\n\n    \t\tvar loaded = 0;\n\n    \t\tfunction loadTexture( i ) {\n\n    \t\t\tloader.load( urls[ i ], function ( image ) {\n\n    \t\t\t\ttexture.images[ i ] = image;\n\n    \t\t\t\tloaded ++;\n\n    \t\t\t\tif ( loaded === 6 ) {\n\n    \t\t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t\t}\n\n    \t\t\t}, undefined, onError );\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n    \t\t\tloadTexture( i );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function TextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( TextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar texture = new Texture();\n\n    \t\tvar loader = new ImageLoader( this.manager );\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n    \t\tloader.setWithCredentials( this.withCredentials );\n    \t\tloader.setPath( this.path );\n    \t\tloader.load( url, function ( image ) {\n\n    \t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n    \t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n    \t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n    \t\t\ttexture.image = image;\n    \t\t\ttexture.needsUpdate = true;\n\n    \t\t\tif ( onLoad !== undefined ) {\n\n    \t\t\t\tonLoad( texture );\n\n    \t\t\t}\n\n    \t\t}, onProgress, onError );\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Light( color, intensity ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Light';\n\n    \tthis.color = new Color( color );\n    \tthis.intensity = intensity !== undefined ? intensity : 1;\n\n    \tthis.receiveShadow = undefined;\n\n    }\n\n    Light.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Light,\n\n    \tisLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.color.copy( source.color );\n    \t\tthis.intensity = source.intensity;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.color = this.color.getHex();\n    \t\tdata.object.intensity = this.intensity;\n\n    \t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n    \t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n    \t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n    \t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n    \t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n    \t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function HemisphereLight( skyColor, groundColor, intensity ) {\n\n    \tLight.call( this, skyColor, intensity );\n\n    \tthis.type = 'HemisphereLight';\n\n    \tthis.castShadow = undefined;\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.groundColor = new Color( groundColor );\n\n    }\n\n    HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: HemisphereLight,\n\n    \tisHemisphereLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.groundColor.copy( source.groundColor );\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LightShadow( camera ) {\n\n    \tthis.camera = camera;\n\n    \tthis.bias = 0;\n    \tthis.radius = 1;\n\n    \tthis.mapSize = new Vector2( 512, 512 );\n\n    \tthis.map = null;\n    \tthis.matrix = new Matrix4();\n\n    }\n\n    Object.assign( LightShadow.prototype, {\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.camera = source.camera.clone();\n\n    \t\tthis.bias = source.bias;\n    \t\tthis.radius = source.radius;\n\n    \t\tthis.mapSize.copy( source.mapSize );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar object = {};\n\n    \t\tif ( this.bias !== 0 ) object.bias = this.bias;\n    \t\tif ( this.radius !== 1 ) object.radius = this.radius;\n    \t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n    \t\tobject.camera = this.camera.toJSON( false ).object;\n    \t\tdelete object.camera.matrix;\n\n    \t\treturn object;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function SpotLightShadow() {\n\n    \tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n    }\n\n    SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n    \tconstructor: SpotLightShadow,\n\n    \tisSpotLightShadow: true,\n\n    \tupdate: function ( light ) {\n\n    \t\tvar fov = exports.Math.RAD2DEG * 2 * light.angle;\n    \t\tvar aspect = this.mapSize.width / this.mapSize.height;\n    \t\tvar far = light.distance || 500;\n\n    \t\tvar camera = this.camera;\n\n    \t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n    \t\t\tcamera.fov = fov;\n    \t\t\tcamera.aspect = aspect;\n    \t\t\tcamera.far = far;\n    \t\t\tcamera.updateProjectionMatrix();\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'SpotLight';\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.target = new Object3D();\n\n    \tObject.defineProperty( this, 'power', {\n    \t\tget: function () {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\treturn this.intensity * Math.PI;\n    \t\t},\n    \t\tset: function ( power ) {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\tthis.intensity = power / Math.PI;\n    \t\t}\n    \t} );\n\n    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n    \tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n    \tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n    \tthis.shadow = new SpotLightShadow();\n\n    }\n\n    SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: SpotLight,\n\n    \tisSpotLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.distance = source.distance;\n    \t\tthis.angle = source.angle;\n    \t\tthis.penumbra = source.penumbra;\n    \t\tthis.decay = source.decay;\n\n    \t\tthis.target = source.target.clone();\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n\n    function PointLight( color, intensity, distance, decay ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'PointLight';\n\n    \tObject.defineProperty( this, 'power', {\n    \t\tget: function () {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\treturn this.intensity * 4 * Math.PI;\n\n    \t\t},\n    \t\tset: function ( power ) {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\tthis.intensity = power / ( 4 * Math.PI );\n    \t\t}\n    \t} );\n\n    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n    \tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n    }\n\n    PointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: PointLight,\n\n    \tisPointLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.distance = source.distance;\n    \t\tthis.decay = source.decay;\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function DirectionalLightShadow( light ) {\n\n    \tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n    }\n\n    DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n    \tconstructor: DirectionalLightShadow\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function DirectionalLight( color, intensity ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'DirectionalLight';\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.target = new Object3D();\n\n    \tthis.shadow = new DirectionalLightShadow();\n\n    }\n\n    DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: DirectionalLight,\n\n    \tisDirectionalLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.target = source.target.clone();\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AmbientLight( color, intensity ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'AmbientLight';\n\n    \tthis.castShadow = undefined;\n\n    }\n\n    AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: AmbientLight,\n\n    \tisAmbientLight: true,\n\n    } );\n\n    /**\n     * @author tschw\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     */\n\n    exports.AnimationUtils = {\n\n    \t// same as Array.prototype.slice, but also works on typed arrays\n    \tarraySlice: function( array, from, to ) {\n\n    \t\tif ( exports.AnimationUtils.isTypedArray( array ) ) {\n\n    \t\t\treturn new array.constructor( array.subarray( from, to ) );\n\n    \t\t}\n\n    \t\treturn array.slice( from, to );\n\n    \t},\n\n    \t// converts an array to a specific type\n    \tconvertArray: function( array, type, forceClone ) {\n\n    \t\tif ( ! array || // let 'undefined' and 'null' pass\n    \t\t\t\t! forceClone && array.constructor === type ) return array;\n\n    \t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n    \t\t\treturn new type( array ); // create typed array\n\n    \t\t}\n\n    \t\treturn Array.prototype.slice.call( array ); // create Array\n\n    \t},\n\n    \tisTypedArray: function( object ) {\n\n    \t\treturn ArrayBuffer.isView( object ) &&\n    \t\t\t\t! ( object instanceof DataView );\n\n    \t},\n\n    \t// returns an array by which times and values can be sorted\n    \tgetKeyframeOrder: function( times ) {\n\n    \t\tfunction compareTime( i, j ) {\n\n    \t\t\treturn times[ i ] - times[ j ];\n\n    \t\t}\n\n    \t\tvar n = times.length;\n    \t\tvar result = new Array( n );\n    \t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n    \t\tresult.sort( compareTime );\n\n    \t\treturn result;\n\n    \t},\n\n    \t// uses the array previously returned by 'getKeyframeOrder' to sort data\n    \tsortedArray: function( values, stride, order ) {\n\n    \t\tvar nValues = values.length;\n    \t\tvar result = new values.constructor( nValues );\n\n    \t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n    \t\t\tvar srcOffset = order[ i ] * stride;\n\n    \t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n    \t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \t// function for parsing AOS keyframe formats\n    \tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\n    \t\tvar i = 1, key = jsonKeys[ 0 ];\n\n    \t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n    \t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t}\n\n    \t\tif ( key === undefined ) return; // no data\n\n    \t\tvar value = key[ valuePropertyName ];\n    \t\tif ( value === undefined ) return; // no data\n\n    \t\tif ( Array.isArray( value ) ) {\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t} else if ( value.toArray !== undefined ) {\n    \t\t\t// ...assume THREE.Math-ish\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalue.toArray( values, values.length );\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t} else {\n    \t\t\t// otherwise push as-is\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalues.push( value );\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     * Abstract base class of interpolants over parametric samples.\n     *\n     * The parameter domain is one dimensional, typically the time or a path\n     * along a curve defined by the data.\n     *\n     * The sample values can have any dimensionality and derived classes may\n     * apply special interpretations to the data.\n     *\n     * This class provides the interval seek in a Template Method, deferring\n     * the actual interpolation to derived classes.\n     *\n     * Time complexity is O(1) for linear access crossing at most two points\n     * and O(log N) for random access, where N is the number of positions.\n     *\n     * References:\n     *\n     * \t\thttp://www.oodesign.com/template-method-pattern.html\n     *\n     * @author tschw\n     */\n\n    function Interpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tthis.parameterPositions = parameterPositions;\n    \tthis._cachedIndex = 0;\n\n    \tthis.resultBuffer = resultBuffer !== undefined ?\n    \t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n    \tthis.sampleValues = sampleValues;\n    \tthis.valueSize = sampleSize;\n\n    }\n\n    Interpolant.prototype = {\n\n    \tconstructor: Interpolant,\n\n    \tevaluate: function( t ) {\n\n    \t\tvar pp = this.parameterPositions,\n    \t\t\ti1 = this._cachedIndex,\n\n    \t\t\tt1 = pp[   i1   ],\n    \t\t\tt0 = pp[ i1 - 1 ];\n\n    \t\tvalidate_interval: {\n\n    \t\t\tseek: {\n\n    \t\t\t\tvar right;\n\n    \t\t\t\tlinear_scan: {\n    //- See http://jsperf.com/comparison-to-undefined/3\n    //- slower code:\n    //-\n    //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n    \t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n    \t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\n    \t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n    \t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n    \t\t\t\t\t\t\t\t// after end\n\n    \t\t\t\t\t\t\t\ti1 = pp.length;\n    \t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n    \t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n    \t\t\t\t\t\t\tt0 = t1;\n    \t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n    \t\t\t\t\t\t\tif ( t < t1 ) {\n\n    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n    \t\t\t\t\t\t\t\tbreak seek;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// prepare binary search on the right side of the index\n    \t\t\t\t\t\tright = pp.length;\n    \t\t\t\t\t\tbreak linear_scan;\n\n    \t\t\t\t\t}\n\n    //- slower code:\n    //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n    \t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n    \t\t\t\t\t\t// looping?\n\n    \t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n    \t\t\t\t\t\tif ( t < t1global ) {\n\n    \t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n    \t\t\t\t\t\t\tt0 = t1global;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// linear reverse scan\n\n    \t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\n    \t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n    \t\t\t\t\t\t\t\t// before start\n\n    \t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n    \t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n    \t\t\t\t\t\t\tt1 = t0;\n    \t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n    \t\t\t\t\t\t\tif ( t >= t0 ) {\n\n    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n    \t\t\t\t\t\t\t\tbreak seek;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// prepare binary search on the left side of the index\n    \t\t\t\t\t\tright = i1;\n    \t\t\t\t\t\ti1 = 0;\n    \t\t\t\t\t\tbreak linear_scan;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// the interval is valid\n\n    \t\t\t\t\tbreak validate_interval;\n\n    \t\t\t\t} // linear scan\n\n    \t\t\t\t// binary search\n\n    \t\t\t\twhile ( i1 < right ) {\n\n    \t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n    \t\t\t\t\tif ( t < pp[ mid ] ) {\n\n    \t\t\t\t\t\tright = mid;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\ti1 = mid + 1;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tt1 = pp[   i1   ];\n    \t\t\t\tt0 = pp[ i1 - 1 ];\n\n    \t\t\t\t// check boundary cases, again\n\n    \t\t\t\tif ( t0 === undefined ) {\n\n    \t\t\t\t\tthis._cachedIndex = 0;\n    \t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( t1 === undefined ) {\n\n    \t\t\t\t\ti1 = pp.length;\n    \t\t\t\t\tthis._cachedIndex = i1;\n    \t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n    \t\t\t\t}\n\n    \t\t\t} // seek\n\n    \t\t\tthis._cachedIndex = i1;\n\n    \t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n    \t\t} // validate_interval\n\n    \t\treturn this.interpolate_( i1, t0, t, t1 );\n\n    \t},\n\n    \tsettings: null, // optional, subclass-specific settings structure\n    \t// Note: The indirection allows central control of many interpolants.\n\n    \t// --- Protected interface\n\n    \tDefaultSettings_: {},\n\n    \tgetSettings_: function() {\n\n    \t\treturn this.settings || this.DefaultSettings_;\n\n    \t},\n\n    \tcopySampleValue_: function( index ) {\n\n    \t\t// copies a sample value to the result buffer\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n    \t\t\toffset = index * stride;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] = values[ offset + i ];\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \t// Template methods for derived classes:\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tthrow new Error( \"call to abstract method\" );\n    \t\t// implementations shall return this.resultBuffer\n\n    \t},\n\n    \tintervalChanged_: function( i1, t0, t1 ) {\n\n    \t\t// empty\n\n    \t}\n\n    };\n\n    Object.assign( Interpolant.prototype, {\n\n    \tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n    \t\tInterpolant.prototype.copySampleValue_,\n\n    \tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n    \t\tInterpolant.prototype.copySampleValue_\n\n    } );\n\n    /**\n     * Fast and simple cubic spline interpolant.\n     *\n     * It was derived from a Hermitian construction setting the first derivative\n     * at each sample position to the linear slope between neighboring positions\n     * over their parameter interval.\n     *\n     * @author tschw\n     */\n\n    function CubicInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    \tthis._weightPrev = -0;\n    \tthis._offsetPrev = -0;\n    \tthis._weightNext = -0;\n    \tthis._offsetNext = -0;\n\n    }\n\n    CubicInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: CubicInterpolant,\n\n    \tDefaultSettings_: {\n\n    \t\tendingStart: \tZeroCurvatureEnding,\n    \t\tendingEnd:\t\tZeroCurvatureEnding\n\n    \t},\n\n    \tintervalChanged_: function( i1, t0, t1 ) {\n\n    \t\tvar pp = this.parameterPositions,\n    \t\t\tiPrev = i1 - 2,\n    \t\t\tiNext = i1 + 1,\n\n    \t\t\ttPrev = pp[ iPrev ],\n    \t\t\ttNext = pp[ iNext ];\n\n    \t\tif ( tPrev === undefined ) {\n\n    \t\t\tswitch ( this.getSettings_().endingStart ) {\n\n    \t\t\t\tcase ZeroSlopeEnding:\n\n    \t\t\t\t\t// f'(t0) = 0\n    \t\t\t\t\tiPrev = i1;\n    \t\t\t\t\ttPrev = 2 * t0 - t1;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase WrapAroundEnding:\n\n    \t\t\t\t\t// use the other end of the curve\n    \t\t\t\t\tiPrev = pp.length - 2;\n    \t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault: // ZeroCurvatureEnding\n\n    \t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n    \t\t\t\t\tiPrev = i1;\n    \t\t\t\t\ttPrev = t1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( tNext === undefined ) {\n\n    \t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n    \t\t\t\tcase ZeroSlopeEnding:\n\n    \t\t\t\t\t// f'(tN) = 0\n    \t\t\t\t\tiNext = i1;\n    \t\t\t\t\ttNext = 2 * t1 - t0;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase WrapAroundEnding:\n\n    \t\t\t\t\t// use the other end of the curve\n    \t\t\t\t\tiNext = 1;\n    \t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault: // ZeroCurvatureEnding\n\n    \t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n    \t\t\t\t\tiNext = i1 - 1;\n    \t\t\t\t\ttNext = t0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar halfDt = ( t1 - t0 ) * 0.5,\n    \t\t\tstride = this.valueSize;\n\n    \t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n    \t\tthis._weightNext = halfDt / ( tNext - t1 );\n    \t\tthis._offsetPrev = iPrev * stride;\n    \t\tthis._offsetNext = iNext * stride;\n\n    \t},\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n    \t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n    \t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n    \t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n    \t\t\tpp = p * p,\n    \t\t\tppp = pp * p;\n\n    \t\t// evaluate polynomials\n\n    \t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n    \t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n    \t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n    \t\tvar sN =       wN   * ppp   -           wN      * pp;\n\n    \t\t// combine data linearly\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] =\n    \t\t\t\t\tsP * values[ oP + i ] +\n    \t\t\t\t\ts0 * values[ o0 + i ] +\n    \t\t\t\t\ts1 * values[ o1 + i ] +\n    \t\t\t\t\tsN * values[ oN + i ];\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     * @author tschw\n     */\n\n    function LinearInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    LinearInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: LinearInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toffset1 = i1 * stride,\n    \t\t\toffset0 = offset1 - stride,\n\n    \t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n    \t\t\tweight0 = 1 - weight1;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] =\n    \t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n    \t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Interpolant that evaluates to the sample value at the position preceeding\n     * the parameter.\n     *\n     * @author tschw\n     */\n\n    function DiscreteInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    DiscreteInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: DiscreteInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\treturn this.copySampleValue_( i1 - 1 );\n\n    \t}\n\n    } );\n\n    var KeyframeTrackPrototype;\n\n    KeyframeTrackPrototype = {\n\n    \tTimeBufferType: Float32Array,\n    \tValueBufferType: Float32Array,\n\n    \tDefaultInterpolation: InterpolateLinear,\n\n    \tInterpolantFactoryMethodDiscrete: function( result ) {\n\n    \t\treturn new DiscreteInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodLinear: function( result ) {\n\n    \t\treturn new LinearInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodSmooth: function( result ) {\n\n    \t\treturn new CubicInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tsetInterpolation: function( interpolation ) {\n\n    \t\tvar factoryMethod;\n\n    \t\tswitch ( interpolation ) {\n\n    \t\t\tcase InterpolateDiscrete:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n    \t\t\t\tbreak;\n\n    \t\t\tcase InterpolateLinear:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n    \t\t\t\tbreak;\n\n    \t\t\tcase InterpolateSmooth:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tif ( factoryMethod === undefined ) {\n\n    \t\t\tvar message = \"unsupported interpolation for \" +\n    \t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n    \t\t\tif ( this.createInterpolant === undefined ) {\n\n    \t\t\t\t// fall back to default, unless the default itself is messed up\n    \t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n    \t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tconsole.warn( message );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.createInterpolant = factoryMethod;\n\n    \t},\n\n    \tgetInterpolation: function() {\n\n    \t\tswitch ( this.createInterpolant ) {\n\n    \t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n    \t\t\t\treturn InterpolateDiscrete;\n\n    \t\t\tcase this.InterpolantFactoryMethodLinear:\n\n    \t\t\t\treturn InterpolateLinear;\n\n    \t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n    \t\t\t\treturn InterpolateSmooth;\n\n    \t\t}\n\n    \t},\n\n    \tgetValueSize: function() {\n\n    \t\treturn this.values.length / this.times.length;\n\n    \t},\n\n    \t// move all keyframes either forwards or backwards in time\n    \tshift: function( timeOffset ) {\n\n    \t\tif( timeOffset !== 0.0 ) {\n\n    \t\t\tvar times = this.times;\n\n    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n    \t\t\t\ttimes[ i ] += timeOffset;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n    \tscale: function( timeScale ) {\n\n    \t\tif( timeScale !== 1.0 ) {\n\n    \t\t\tvar times = this.times;\n\n    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n    \t\t\t\ttimes[ i ] *= timeScale;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n    \t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n    \ttrim: function( startTime, endTime ) {\n\n    \t\tvar times = this.times,\n    \t\t\tnKeys = times.length,\n    \t\t\tfrom = 0,\n    \t\t\tto = nKeys - 1;\n\n    \t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n    \t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\n    \t\t++ to; // inclusive -> exclusive bound\n\n    \t\tif( from !== 0 || to !== nKeys ) {\n\n    \t\t\t// empty tracks are forbidden, so keep at least one keyframe\n    \t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\n    \t\t\tvar stride = this.getValueSize();\n    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, from, to );\n    \t\t\tthis.values = exports.AnimationUtils.\n    \t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n    \tvalidate: function() {\n\n    \t\tvar valid = true;\n\n    \t\tvar valueSize = this.getValueSize();\n    \t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n    \t\t\tconsole.error( \"invalid value size in track\", this );\n    \t\t\tvalid = false;\n\n    \t\t}\n\n    \t\tvar times = this.times,\n    \t\t\tvalues = this.values,\n\n    \t\t\tnKeys = times.length;\n\n    \t\tif( nKeys === 0 ) {\n\n    \t\t\tconsole.error( \"track is empty\", this );\n    \t\t\tvalid = false;\n\n    \t\t}\n\n    \t\tvar prevTime = null;\n\n    \t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\n    \t\t\tvar currTime = times[ i ];\n\n    \t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n    \t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n    \t\t\t\tvalid = false;\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tif( prevTime !== null && prevTime > currTime ) {\n\n    \t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n    \t\t\t\tvalid = false;\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tprevTime = currTime;\n\n    \t\t}\n\n    \t\tif ( values !== undefined ) {\n\n    \t\t\tif ( exports.AnimationUtils.isTypedArray( values ) ) {\n\n    \t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tvar value = values[ i ];\n\n    \t\t\t\t\tif ( isNaN( value ) ) {\n\n    \t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n    \t\t\t\t\t\tvalid = false;\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn valid;\n\n    \t},\n\n    \t// removes equivalent sequential keys as common in morph target sequences\n    \t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n    \toptimize: function() {\n\n    \t\tvar times = this.times,\n    \t\t\tvalues = this.values,\n    \t\t\tstride = this.getValueSize(),\n\n    \t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n    \t\t\twriteIndex = 1,\n    \t\t\tlastIndex = times.length - 1;\n\n    \t\tfor( var i = 1; i < lastIndex; ++ i ) {\n\n    \t\t\tvar keep = false;\n\n    \t\t\tvar time = times[ i ];\n    \t\t\tvar timeNext = times[ i + 1 ];\n\n    \t\t\t// remove adjacent keyframes scheduled at the same time\n\n    \t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n    \t\t\t\tif ( ! smoothInterpolation ) {\n\n    \t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n    \t\t\t\t\tvar offset = i * stride,\n    \t\t\t\t\t\toffsetP = offset - stride,\n    \t\t\t\t\t\toffsetN = offset + stride;\n\n    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n    \t\t\t\t\t\tvar value = values[ offset + j ];\n\n    \t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n    \t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n    \t\t\t\t\t\t\tkeep = true;\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else keep = true;\n\n    \t\t\t}\n\n    \t\t\t// in-place compaction\n\n    \t\t\tif ( keep ) {\n\n    \t\t\t\tif ( i !== writeIndex ) {\n\n    \t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n    \t\t\t\t\tvar readOffset = i * stride,\n    \t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j )\n\n    \t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n    \t\t\t\t}\n\n    \t\t\t\t++ writeIndex;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// flush last keyframe (compaction looks ahead)\n\n    \t\tif ( lastIndex > 0 ) {\n\n    \t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n    \t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )\n\n    \t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n    \t\t\t++ writeIndex;\n\n    \t\t}\n\n    \t\tif ( writeIndex !== times.length ) {\n\n    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, 0, writeIndex );\n    \t\t\tthis.values = exports.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    }\n\n    function KeyframeTrackConstructor( name, times, values, interpolation ) {\n\n    \tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\n    \tif( times === undefined || times.length === 0 ) {\n\n    \t\tthrow new Error( \"no keyframes in track named \" + name );\n\n    \t}\n\n    \tthis.name = name;\n\n    \tthis.times = exports.AnimationUtils.convertArray( times, this.TimeBufferType );\n    \tthis.values = exports.AnimationUtils.convertArray( values, this.ValueBufferType );\n\n    \tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n    \tthis.validate();\n    \tthis.optimize();\n\n    }\n\n    /**\n     *\n     * A Track of vectored keyframe values.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function VectorKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    VectorKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: VectorKeyframeTrack,\n\n    \tValueTypeName: 'vector'\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n    } );\n\n    /**\n     * Spherical linear unit quaternion interpolant.\n     *\n     * @author tschw\n     */\n\n    function QuaternionLinearInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    QuaternionLinearInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: QuaternionLinearInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toffset = i1 * stride,\n\n    \t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n    \t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n    \t\t\tQuaternion.slerpFlat( result, 0,\n    \t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * A Track of quaternion keyframe values.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    QuaternionKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: QuaternionKeyframeTrack,\n\n    \tValueTypeName: 'quaternion',\n\n    \t// ValueBufferType is inherited\n\n    \tDefaultInterpolation: InterpolateLinear,\n\n    \tInterpolantFactoryMethodLinear: function( result ) {\n\n    \t\treturn new QuaternionLinearInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n    } );\n\n    /**\n     *\n     * A Track of numeric keyframe values.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function NumberKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    NumberKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: NumberKeyframeTrack,\n\n    \tValueTypeName: 'number',\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n    } );\n\n    /**\n     *\n     * A Track that interpolates Strings\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function StringKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    StringKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: StringKeyframeTrack,\n\n    \tValueTypeName: 'string',\n    \tValueBufferType: Array,\n\n    \tDefaultInterpolation: InterpolateDiscrete,\n\n    \tInterpolantFactoryMethodLinear: undefined,\n\n    \tInterpolantFactoryMethodSmooth: undefined\n\n    } );\n\n    /**\n     *\n     * A Track of Boolean keyframe values.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function BooleanKeyframeTrack( name, times, values ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values );\n\n    }\n\n    BooleanKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: BooleanKeyframeTrack,\n\n    \tValueTypeName: 'bool',\n    \tValueBufferType: Array,\n\n    \tDefaultInterpolation: InterpolateDiscrete,\n\n    \tInterpolantFactoryMethodLinear: undefined,\n    \tInterpolantFactoryMethodSmooth: undefined\n\n    \t// Note: Actually this track could have a optimized / compressed\n    \t// representation of a single value and a custom interpolant that\n    \t// computes \"firstValue ^ isOdd( index )\".\n\n    } );\n\n    /**\n     *\n     * A Track of keyframe values that represent color.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function ColorKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    ColorKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: ColorKeyframeTrack,\n\n    \tValueTypeName: 'color'\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n\n    \t// Note: Very basic implementation and nothing special yet.\n    \t// However, this is the place for color space parameterization.\n\n    } );\n\n    /**\n     *\n     * A timed sequence of keyframes for a specific property.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function KeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.apply( this, arguments );\n\n    }\n\n    KeyframeTrack.prototype = KeyframeTrackPrototype;\n    KeyframeTrackPrototype.constructor = KeyframeTrack;\n\n    // Static methods:\n\n    Object.assign( KeyframeTrack, {\n\n    \t// Serialization (in static context, because of constructor invocation\n    \t// and automatic invocation of .toJSON):\n\n    \tparse: function( json ) {\n\n    \t\tif( json.type === undefined ) {\n\n    \t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\n    \t\t}\n\n    \t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n    \t\tif ( json.times === undefined ) {\n\n    \t\t\tvar times = [], values = [];\n\n    \t\t\texports.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n    \t\t\tjson.times = times;\n    \t\t\tjson.values = values;\n\n    \t\t}\n\n    \t\t// derived classes can define a static parse method\n    \t\tif ( trackType.parse !== undefined ) {\n\n    \t\t\treturn trackType.parse( json );\n\n    \t\t} else {\n\n    \t\t\t// by default, we asssume a constructor compatible with the base\n    \t\t\treturn new trackType(\n    \t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function( track ) {\n\n    \t\tvar trackType = track.constructor;\n\n    \t\tvar json;\n\n    \t\t// derived classes can define a static toJSON method\n    \t\tif ( trackType.toJSON !== undefined ) {\n\n    \t\t\tjson = trackType.toJSON( track );\n\n    \t\t} else {\n\n    \t\t\t// by default, we assume the data can be serialized as-is\n    \t\t\tjson = {\n\n    \t\t\t\t'name': track.name,\n    \t\t\t\t'times': exports.AnimationUtils.convertArray( track.times, Array ),\n    \t\t\t\t'values': exports.AnimationUtils.convertArray( track.values, Array )\n\n    \t\t\t};\n\n    \t\t\tvar interpolation = track.getInterpolation();\n\n    \t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n    \t\t\t\tjson.interpolation = interpolation;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tjson.type = track.ValueTypeName; // mandatory\n\n    \t\treturn json;\n\n    \t},\n\n    \t_getTrackTypeForValueTypeName: function( typeName ) {\n\n    \t\tswitch( typeName.toLowerCase() ) {\n\n    \t\t\tcase \"scalar\":\n    \t\t\tcase \"double\":\n    \t\t\tcase \"float\":\n    \t\t\tcase \"number\":\n    \t\t\tcase \"integer\":\n\n    \t\t\t\treturn NumberKeyframeTrack;\n\n    \t\t\tcase \"vector\":\n    \t\t\tcase \"vector2\":\n    \t\t\tcase \"vector3\":\n    \t\t\tcase \"vector4\":\n\n    \t\t\t\treturn VectorKeyframeTrack;\n\n    \t\t\tcase \"color\":\n\n    \t\t\t\treturn ColorKeyframeTrack;\n\n    \t\t\tcase \"quaternion\":\n\n    \t\t\t\treturn QuaternionKeyframeTrack;\n\n    \t\t\tcase \"bool\":\n    \t\t\tcase \"boolean\":\n\n    \t\t\t\treturn BooleanKeyframeTrack;\n\n    \t\t\tcase \"string\":\n\n    \t\t\t\treturn StringKeyframeTrack;\n\n    \t\t}\n\n    \t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Reusable set of Tracks that represent an animation.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     */\n\n    function AnimationClip( name, duration, tracks ) {\n\n    \tthis.name = name;\n    \tthis.tracks = tracks;\n    \tthis.duration = ( duration !== undefined ) ? duration : -1;\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \t// this means it should figure out its duration by scanning the tracks\n    \tif ( this.duration < 0 ) {\n\n    \t\tthis.resetDuration();\n\n    \t}\n\n    \tthis.optimize();\n\n    }\n\n    AnimationClip.prototype = {\n\n    \tconstructor: AnimationClip,\n\n    \tresetDuration: function() {\n\n    \t\tvar tracks = this.tracks,\n    \t\t\tduration = 0;\n\n    \t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n    \t\t\tvar track = this.tracks[ i ];\n\n    \t\t\tduration = Math.max(\n    \t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\n    \t\t}\n\n    \t\tthis.duration = duration;\n\n    \t},\n\n    \ttrim: function() {\n\n    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n    \t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \toptimize: function() {\n\n    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n    \t\t\tthis.tracks[ i ].optimize();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    // Static methods:\n\n    Object.assign( AnimationClip, {\n\n    \tparse: function( json ) {\n\n    \t\tvar tracks = [],\n    \t\t\tjsonTracks = json.tracks,\n    \t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n    \t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n    \t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n    \t\t}\n\n    \t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n    \t},\n\n\n    \ttoJSON: function( clip ) {\n\n    \t\tvar tracks = [],\n    \t\t\tclipTracks = clip.tracks;\n\n    \t\tvar json = {\n\n    \t\t\t'name': clip.name,\n    \t\t\t'duration': clip.duration,\n    \t\t\t'tracks': tracks\n\n    \t\t};\n\n    \t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n    \t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n    \t\t}\n\n    \t\treturn json;\n\n    \t},\n\n\n    \tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\n    \t\tvar numMorphTargets = morphTargetSequence.length;\n    \t\tvar tracks = [];\n\n    \t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n    \t\t\tvar times = [];\n    \t\t\tvar values = [];\n\n    \t\t\ttimes.push(\n    \t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n    \t\t\t\t\ti,\n    \t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n    \t\t\tvalues.push( 0, 1, 0 );\n\n    \t\t\tvar order = exports.AnimationUtils.getKeyframeOrder( times );\n    \t\t\ttimes = exports.AnimationUtils.sortedArray( times, 1, order );\n    \t\t\tvalues = exports.AnimationUtils.sortedArray( values, 1, order );\n\n    \t\t\t// if there is a key at the first frame, duplicate it as the\n    \t\t\t// last frame as well for perfect loop.\n    \t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n    \t\t\t\ttimes.push( numMorphTargets );\n    \t\t\t\tvalues.push( values[ 0 ] );\n\n    \t\t\t}\n\n    \t\t\ttracks.push(\n    \t\t\t\t\tnew NumberKeyframeTrack(\n    \t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n    \t\t\t\t\t\ttimes, values\n    \t\t\t\t\t).scale( 1.0 / fps ) );\n    \t\t}\n\n    \t\treturn new AnimationClip( name, -1, tracks );\n\n    \t},\n\n    \tfindByName: function( objectOrClipArray, name ) {\n\n    \t\tvar clipArray = objectOrClipArray;\n\n    \t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n    \t\t\tvar o = objectOrClipArray;\n    \t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n    \t\t\tif ( clipArray[ i ].name === name ) {\n\n    \t\t\t\treturn clipArray[ i ];\n\n    \t\t\t}\n    \t\t}\n\n    \t\treturn null;\n\n    \t},\n\n    \tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\n    \t\tvar animationToMorphTargets = {};\n\n    \t\t// tested with https://regex101.com/ on trick sequences\n    \t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n    \t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n    \t\t// sort morph target names into animation groups based\n    \t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n    \t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n    \t\t\tvar morphTarget = morphTargets[ i ];\n    \t\t\tvar parts = morphTarget.name.match( pattern );\n\n    \t\t\tif ( parts && parts.length > 1 ) {\n\n    \t\t\t\tvar name = parts[ 1 ];\n\n    \t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n    \t\t\t\tif ( ! animationMorphTargets ) {\n\n    \t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n    \t\t\t\t}\n\n    \t\t\t\tanimationMorphTargets.push( morphTarget );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar clips = [];\n\n    \t\tfor ( var name in animationToMorphTargets ) {\n\n    \t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n    \t\t}\n\n    \t\treturn clips;\n\n    \t},\n\n    \t// parse the animation.hierarchy format\n    \tparseAnimation: function( animation, bones ) {\n\n    \t\tif ( ! animation ) {\n\n    \t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar addNonemptyTrack = function(\n    \t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\n    \t\t\t// only return track if there are actually keys.\n    \t\t\tif ( animationKeys.length !== 0 ) {\n\n    \t\t\t\tvar times = [];\n    \t\t\t\tvar values = [];\n\n    \t\t\t\texports.AnimationUtils.flattenJSON(\n    \t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\n    \t\t\t\t// empty keys are filtered out, so check again\n    \t\t\t\tif ( times.length !== 0 ) {\n\n    \t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t\tvar tracks = [];\n\n    \t\tvar clipName = animation.name || 'default';\n    \t\t// automatic length determination in AnimationClip.\n    \t\tvar duration = animation.length || -1;\n    \t\tvar fps = animation.fps || 30;\n\n    \t\tvar hierarchyTracks = animation.hierarchy || [];\n\n    \t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n    \t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n    \t\t\t// skip empty tracks\n    \t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n    \t\t\t// process morph targets in a way exactly compatible\n    \t\t\t// with AnimationHandler.init( animation )\n    \t\t\tif ( animationKeys[0].morphTargets ) {\n\n    \t\t\t\t// figure out all morph targets used in this track\n    \t\t\t\tvar morphTargetNames = {};\n    \t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n    \t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\n    \t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\n    \t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\t// create a track for each morph target with all zero\n    \t\t\t\t// morphTargetInfluences except for the keys in which\n    \t\t\t\t// the morphTarget is named.\n    \t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n    \t\t\t\t\tvar times = [];\n    \t\t\t\t\tvar values = [];\n\n    \t\t\t\t\tfor ( var m = 0;\n    \t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\n    \t\t\t\t\t\tvar animationKey = animationKeys[k];\n\n    \t\t\t\t\t\ttimes.push( animationKey.time );\n    \t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttracks.push( new NumberKeyframeTrack(\n    \t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n    \t\t\t\t}\n\n    \t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n    \t\t\t} else {\n    \t\t\t\t// ...assume skeletal animation\n\n    \t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n    \t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n    \t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n    \t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( tracks.length === 0 ) {\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n    \t\treturn clip;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function MaterialLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n    \tthis.textures = {};\n\n    }\n\n    Object.assign( MaterialLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTextures: function ( value ) {\n\n    \t\tthis.textures = value;\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\tvar textures = this.textures;\n\n    \t\tfunction getTexture( name ) {\n\n    \t\t\tif ( textures[ name ] === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n    \t\t\t}\n\n    \t\t\treturn textures[ name ];\n\n    \t\t}\n\n    \t\tvar material = new Materials[ json.type ]();\n\n    \t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n    \t\tif ( json.name !== undefined ) material.name = json.name;\n    \t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n    \t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n    \t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n    \t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n    \t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n    \t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n    \t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n    \t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n    \t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n    \t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n    \t\tif ( json.fog !== undefined ) material.fog = json.fog;\n    \t\tif ( json.shading !== undefined ) material.shading = json.shading;\n    \t\tif ( json.blending !== undefined ) material.blending = json.blending;\n    \t\tif ( json.side !== undefined ) material.side = json.side;\n    \t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n    \t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n    \t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n    \t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n    \t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n    \t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n    \t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n    \t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n    \t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n    \t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n    \t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n    \t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\n    \t\t// for PointsMaterial\n\n    \t\tif ( json.size !== undefined ) material.size = json.size;\n    \t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n    \t\t// maps\n\n    \t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\n    \t\tif ( json.alphaMap !== undefined ) {\n\n    \t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n    \t\t\tmaterial.transparent = true;\n\n    \t\t}\n\n    \t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n    \t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n    \t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n    \t\tif ( json.normalScale !== undefined ) {\n\n    \t\t\tvar normalScale = json.normalScale;\n\n    \t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n    \t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n    \t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n    \t\t\t}\n\n    \t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n    \t\t}\n\n    \t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n    \t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n    \t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n    \t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n    \t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n    \t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n    \t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n    \t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n    \t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\n    \t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n    \t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n    \t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n    \t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n    \t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n    \t\t// MultiMaterial\n\n    \t\tif ( json.materials !== undefined ) {\n\n    \t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n    \t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn material;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferGeometryLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( BufferGeometryLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\tvar geometry = new BufferGeometry();\n\n    \t\tvar index = json.data.index;\n\n    \t\tvar TYPED_ARRAYS = {\n    \t\t\t'Int8Array': Int8Array,\n    \t\t\t'Uint8Array': Uint8Array,\n    \t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n    \t\t\t'Int16Array': Int16Array,\n    \t\t\t'Uint16Array': Uint16Array,\n    \t\t\t'Int32Array': Int32Array,\n    \t\t\t'Uint32Array': Uint32Array,\n    \t\t\t'Float32Array': Float32Array,\n    \t\t\t'Float64Array': Float64Array\n    \t\t};\n\n    \t\tif ( index !== undefined ) {\n\n    \t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n    \t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n    \t\t}\n\n    \t\tvar attributes = json.data.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tvar attribute = attributes[ key ];\n    \t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n    \t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n    \t\t}\n\n    \t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n    \t\tif ( groups !== undefined ) {\n\n    \t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar group = groups[ i ];\n\n    \t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar boundingSphere = json.data.boundingSphere;\n\n    \t\tif ( boundingSphere !== undefined ) {\n\n    \t\t\tvar center = new Vector3();\n\n    \t\t\tif ( boundingSphere.center !== undefined ) {\n\n    \t\t\t\tcenter.fromArray( boundingSphere.center );\n\n    \t\t\t}\n\n    \t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Loader() {\n\n    \tthis.onLoadStart = function () {};\n    \tthis.onLoadProgress = function () {};\n    \tthis.onLoadComplete = function () {};\n\n    }\n\n    Loader.prototype = {\n\n    \tconstructor: Loader,\n\n    \tcrossOrigin: undefined,\n\n    \textractUrlBase: function ( url ) {\n\n    \t\tvar parts = url.split( '/' );\n\n    \t\tif ( parts.length === 1 ) return './';\n\n    \t\tparts.pop();\n\n    \t\treturn parts.join( '/' ) + '/';\n\n    \t},\n\n    \tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n    \t\tvar array = [];\n\n    \t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n    \t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n    \t\t}\n\n    \t\treturn array;\n\n    \t},\n\n    \tcreateMaterial: ( function () {\n\n    \t\tvar color, textureLoader, materialLoader;\n\n    \t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n    \t\t\tif ( color === undefined ) color = new Color();\n    \t\t\tif ( textureLoader === undefined ) textureLoader = new TextureLoader();\n    \t\t\tif ( materialLoader === undefined ) materialLoader = new MaterialLoader();\n\n    \t\t\t// convert from old material format\n\n    \t\t\tvar textures = {};\n\n    \t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n    \t\t\t\tvar fullPath = texturePath + path;\n    \t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n    \t\t\t\tvar texture;\n\n    \t\t\t\tif ( loader !== null ) {\n\n    \t\t\t\t\ttexture = loader.load( fullPath );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n    \t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( repeat !== undefined ) {\n\n    \t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n    \t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n    \t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( offset !== undefined ) {\n\n    \t\t\t\t\ttexture.offset.fromArray( offset );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( wrap !== undefined ) {\n\n    \t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n    \t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n    \t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n    \t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( anisotropy !== undefined ) {\n\n    \t\t\t\t\ttexture.anisotropy = anisotropy;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar uuid = exports.Math.generateUUID();\n\n    \t\t\t\ttextures[ uuid ] = texture;\n\n    \t\t\t\treturn uuid;\n\n    \t\t\t}\n\n    \t\t\t//\n\n    \t\t\tvar json = {\n    \t\t\t\tuuid: exports.Math.generateUUID(),\n    \t\t\t\ttype: 'MeshLambertMaterial'\n    \t\t\t};\n\n    \t\t\tfor ( var name in m ) {\n\n    \t\t\t\tvar value = m[ name ];\n\n    \t\t\t\tswitch ( name ) {\n    \t\t\t\t\tcase 'DbgColor':\n    \t\t\t\t\tcase 'DbgIndex':\n    \t\t\t\t\tcase 'opticalDensity':\n    \t\t\t\t\tcase 'illumination':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'DbgName':\n    \t\t\t\t\t\tjson.name = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'blending':\n    \t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorAmbient':\n    \t\t\t\t\tcase 'mapAmbient':\n    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorDiffuse':\n    \t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorSpecular':\n    \t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorEmissive':\n    \t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'specularCoef':\n    \t\t\t\t\t\tjson.shininess = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'shading':\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapDiffuse':\n    \t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapDiffuseRepeat':\n    \t\t\t\t\tcase 'mapDiffuseOffset':\n    \t\t\t\t\tcase 'mapDiffuseWrap':\n    \t\t\t\t\tcase 'mapDiffuseAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapEmissive':\n    \t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapEmissiveRepeat':\n    \t\t\t\t\tcase 'mapEmissiveOffset':\n    \t\t\t\t\tcase 'mapEmissiveWrap':\n    \t\t\t\t\tcase 'mapEmissiveAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapLight':\n    \t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapLightRepeat':\n    \t\t\t\t\tcase 'mapLightOffset':\n    \t\t\t\t\tcase 'mapLightWrap':\n    \t\t\t\t\tcase 'mapLightAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAO':\n    \t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAORepeat':\n    \t\t\t\t\tcase 'mapAOOffset':\n    \t\t\t\t\tcase 'mapAOWrap':\n    \t\t\t\t\tcase 'mapAOAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBump':\n    \t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBumpScale':\n    \t\t\t\t\t\tjson.bumpScale = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBumpRepeat':\n    \t\t\t\t\tcase 'mapBumpOffset':\n    \t\t\t\t\tcase 'mapBumpWrap':\n    \t\t\t\t\tcase 'mapBumpAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormal':\n    \t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormalFactor':\n    \t\t\t\t\t\tjson.normalScale = [ value, value ];\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormalRepeat':\n    \t\t\t\t\tcase 'mapNormalOffset':\n    \t\t\t\t\tcase 'mapNormalWrap':\n    \t\t\t\t\tcase 'mapNormalAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapSpecular':\n    \t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapSpecularRepeat':\n    \t\t\t\t\tcase 'mapSpecularOffset':\n    \t\t\t\t\tcase 'mapSpecularWrap':\n    \t\t\t\t\tcase 'mapSpecularAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapMetalness':\n    \t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapMetalnessRepeat':\n    \t\t\t\t\tcase 'mapMetalnessOffset':\n    \t\t\t\t\tcase 'mapMetalnessWrap':\n    \t\t\t\t\tcase 'mapMetalnessAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapRoughness':\n    \t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapRoughnessRepeat':\n    \t\t\t\t\tcase 'mapRoughnessOffset':\n    \t\t\t\t\tcase 'mapRoughnessWrap':\n    \t\t\t\t\tcase 'mapRoughnessAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAlpha':\n    \t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAlphaRepeat':\n    \t\t\t\t\tcase 'mapAlphaOffset':\n    \t\t\t\t\tcase 'mapAlphaWrap':\n    \t\t\t\t\tcase 'mapAlphaAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'flipSided':\n    \t\t\t\t\t\tjson.side = BackSide;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'doubleSided':\n    \t\t\t\t\t\tjson.side = DoubleSide;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'transparency':\n    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n    \t\t\t\t\t\tjson.opacity = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'depthTest':\n    \t\t\t\t\tcase 'depthWrite':\n    \t\t\t\t\tcase 'colorWrite':\n    \t\t\t\t\tcase 'opacity':\n    \t\t\t\t\tcase 'reflectivity':\n    \t\t\t\t\tcase 'transparent':\n    \t\t\t\t\tcase 'visible':\n    \t\t\t\t\tcase 'wireframe':\n    \t\t\t\t\t\tjson[ name ] = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'vertexColors':\n    \t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n    \t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tdefault:\n    \t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n    \t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n    \t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n    \t\t\tmaterialLoader.setTextures( textures );\n\n    \t\t\treturn materialLoader.parse( json );\n\n    \t\t};\n\n    \t} )()\n\n    };\n\n    Loader.Handlers = {\n\n    \thandlers: [],\n\n    \tadd: function ( regex, loader ) {\n\n    \t\tthis.handlers.push( regex, loader );\n\n    \t},\n\n    \tget: function ( file ) {\n\n    \t\tvar handlers = this.handlers;\n\n    \t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n    \t\t\tvar regex = handlers[ i ];\n    \t\t\tvar loader  = handlers[ i + 1 ];\n\n    \t\t\tif ( regex.test( file ) ) {\n\n    \t\t\t\treturn loader;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function JSONLoader( manager ) {\n\n    \tif ( typeof manager === 'boolean' ) {\n\n    \t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n    \t\tmanager = undefined;\n\n    \t}\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \tthis.withCredentials = false;\n\n    }\n\n    Object.assign( JSONLoader.prototype, {\n\n    \tload: function( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setWithCredentials( this.withCredentials );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tvar json = JSON.parse( text );\n    \t\t\tvar metadata = json.metadata;\n\n    \t\t\tif ( metadata !== undefined ) {\n\n    \t\t\t\tvar type = metadata.type;\n\n    \t\t\t\tif ( type !== undefined ) {\n\n    \t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar object = scope.parse( json, texturePath );\n    \t\t\tonLoad( object.geometry, object.materials );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTexturePath: function ( value ) {\n\n    \t\tthis.texturePath = value;\n\n    \t},\n\n    \tparse: function ( json, texturePath ) {\n\n    \t\tvar geometry = new Geometry(),\n    \t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n    \t\tparseModel( scale );\n\n    \t\tparseSkin();\n    \t\tparseMorphing( scale );\n    \t\tparseAnimations();\n\n    \t\tgeometry.computeFaceNormals();\n    \t\tgeometry.computeBoundingSphere();\n\n    \t\tfunction parseModel( scale ) {\n\n    \t\t\tfunction isBitSet( value, position ) {\n\n    \t\t\t\treturn value & ( 1 << position );\n\n    \t\t\t}\n\n    \t\t\tvar i, j, fi,\n\n    \t\t\toffset, zLength,\n\n    \t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n    \t\t\ttype,\n    \t\t\tisQuad,\n    \t\t\thasMaterial,\n    \t\t\thasFaceVertexUv,\n    \t\t\thasFaceNormal, hasFaceVertexNormal,\n    \t\t\thasFaceColor, hasFaceVertexColor,\n\n    \t\tvertex, face, faceA, faceB, hex, normal,\n\n    \t\t\tuvLayer, uv, u, v,\n\n    \t\t\tfaces = json.faces,\n    \t\t\tvertices = json.vertices,\n    \t\t\tnormals = json.normals,\n    \t\t\tcolors = json.colors,\n\n    \t\t\tnUvLayers = 0;\n\n    \t\t\tif ( json.uvs !== undefined ) {\n\n    \t\t\t\t// disregard empty arrays\n\n    \t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n    \t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\toffset = 0;\n    \t\t\tzLength = vertices.length;\n\n    \t\t\twhile ( offset < zLength ) {\n\n    \t\t\t\tvertex = new Vector3();\n\n    \t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n    \t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n    \t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n    \t\t\t\tgeometry.vertices.push( vertex );\n\n    \t\t\t}\n\n    \t\t\toffset = 0;\n    \t\t\tzLength = faces.length;\n\n    \t\t\twhile ( offset < zLength ) {\n\n    \t\t\t\ttype = faces[ offset ++ ];\n\n\n    \t\t\t\tisQuad              = isBitSet( type, 0 );\n    \t\t\t\thasMaterial         = isBitSet( type, 1 );\n    \t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n    \t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n    \t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n    \t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n    \t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\n    \t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n    \t\t\t\tif ( isQuad ) {\n\n    \t\t\t\t\tfaceA = new Face3();\n    \t\t\t\t\tfaceA.a = faces[ offset ];\n    \t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n    \t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n    \t\t\t\t\tfaceB = new Face3();\n    \t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n    \t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n    \t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n    \t\t\t\t\toffset += 4;\n\n    \t\t\t\t\tif ( hasMaterial ) {\n\n    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n    \t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// to get face <=> uv index correspondence\n\n    \t\t\t\t\tfi = geometry.faces.length;\n\n    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n    \t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n    \t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n    \t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\tfaceA.normal.set(\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\t\tnormal = new Vector3(\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t\t);\n\n\n    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\thex = colors[ colorIndex ];\n\n    \t\t\t\t\t\tfaceA.color.setHex( hex );\n    \t\t\t\t\t\tfaceB.color.setHex( hex );\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tgeometry.faces.push( faceA );\n    \t\t\t\t\tgeometry.faces.push( faceB );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tface = new Face3();\n    \t\t\t\t\tface.a = faces[ offset ++ ];\n    \t\t\t\t\tface.b = faces[ offset ++ ];\n    \t\t\t\t\tface.c = faces[ offset ++ ];\n\n    \t\t\t\t\tif ( hasMaterial ) {\n\n    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tface.materialIndex = materialIndex;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// to get face <=> uv index correspondence\n\n    \t\t\t\t\tfi = geometry.faces.length;\n\n    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n    \t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n    \t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\tface.normal.set(\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\t\tnormal = new Vector3(\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t\t);\n\n    \t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tgeometry.faces.push( face );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseSkin() {\n\n    \t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n    \t\t\tif ( json.skinWeights ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n    \t\t\t\t\tvar x =                               json.skinWeights[ i ];\n    \t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n    \t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n    \t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n    \t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.skinIndices ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n    \t\t\t\t\tvar a =                               json.skinIndices[ i ];\n    \t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n    \t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n    \t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n    \t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tgeometry.bones = json.bones;\n\n    \t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n    \t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n    \t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseMorphing( scale ) {\n\n    \t\t\tif ( json.morphTargets !== undefined ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n    \t\t\t\t\tgeometry.morphTargets[ i ] = {};\n    \t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n    \t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n    \t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n    \t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n    \t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n    \t\t\t\t\t\tvar vertex = new Vector3();\n    \t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n    \t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n    \t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n    \t\t\t\t\t\tdstVertices.push( vertex );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n    \t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n    \t\t\t\tvar faces = geometry.faces;\n    \t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n    \t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseAnimations() {\n\n    \t\t\tvar outputAnimations = [];\n\n    \t\t\t// parse old style Bone/Hierarchy animations\n    \t\t\tvar animations = [];\n\n    \t\t\tif ( json.animation !== undefined ) {\n\n    \t\t\t\tanimations.push( json.animation );\n\n    \t\t\t}\n\n    \t\t\tif ( json.animations !== undefined ) {\n\n    \t\t\t\tif ( json.animations.length ) {\n\n    \t\t\t\t\tanimations = animations.concat( json.animations );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tanimations.push( json.animations );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n    \t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n    \t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n    \t\t\t}\n\n    \t\t\t// parse implicit morph animations\n    \t\t\tif ( geometry.morphTargets ) {\n\n    \t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n    \t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n    \t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n    \t\t\t}\n\n    \t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n    \t\t}\n\n    \t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n    \t\t\treturn { geometry: geometry };\n\n    \t\t} else {\n\n    \t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n    \t\t\treturn { geometry: geometry, materials: materials };\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ObjectLoader ( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n    \tthis.texturePath = '';\n\n    }\n\n    Object.assign( ObjectLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tif ( this.texturePath === '' ) {\n\n    \t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n    \t\t}\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tscope.parse( JSON.parse( text ), onLoad );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTexturePath: function ( value ) {\n\n    \t\tthis.texturePath = value;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n\n    \t},\n\n    \tparse: function ( json, onLoad ) {\n\n    \t\tvar geometries = this.parseGeometries( json.geometries );\n\n    \t\tvar images = this.parseImages( json.images, function () {\n\n    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n    \t\t} );\n\n    \t\tvar textures  = this.parseTextures( json.textures, images );\n    \t\tvar materials = this.parseMaterials( json.materials, textures );\n\n    \t\tvar object = this.parseObject( json.object, geometries, materials );\n\n    \t\tif ( json.animations ) {\n\n    \t\t\tobject.animations = this.parseAnimations( json.animations );\n\n    \t\t}\n\n    \t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n    \t\t}\n\n    \t\treturn object;\n\n    \t},\n\n    \tparseGeometries: function ( json ) {\n\n    \t\tvar geometries = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tvar geometryLoader = new JSONLoader();\n    \t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar geometry;\n    \t\t\t\tvar data = json[ i ];\n\n    \t\t\t\tswitch ( data.type ) {\n\n    \t\t\t\t\tcase 'PlaneGeometry':\n    \t\t\t\t\tcase 'PlaneBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.width,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'BoxGeometry':\n    \t\t\t\t\tcase 'BoxBufferGeometry':\n    \t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.width,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.depth,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.depthSegments\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'CircleGeometry':\n    \t\t\t\t\tcase 'CircleBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.segments,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'CylinderGeometry':\n    \t\t\t\t\tcase 'CylinderBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radiusTop,\n    \t\t\t\t\t\t\tdata.radiusBottom,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.openEnded,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'ConeGeometry':\n    \t\t\t\t\tcase 'ConeBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.openEnded,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'SphereGeometry':\n    \t\t\t\t\tcase 'SphereBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.phiStart,\n    \t\t\t\t\t\t\tdata.phiLength,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'DodecahedronGeometry':\n    \t\t\t\t\tcase 'IcosahedronGeometry':\n    \t\t\t\t\tcase 'OctahedronGeometry':\n    \t\t\t\t\tcase 'TetrahedronGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.detail\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'RingGeometry':\n    \t\t\t\t\tcase 'RingBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.innerRadius,\n    \t\t\t\t\t\t\tdata.outerRadius,\n    \t\t\t\t\t\t\tdata.thetaSegments,\n    \t\t\t\t\t\t\tdata.phiSegments,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'TorusGeometry':\n    \t\t\t\t\tcase 'TorusBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.tube,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.tubularSegments,\n    \t\t\t\t\t\t\tdata.arc\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'TorusKnotGeometry':\n    \t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.tube,\n    \t\t\t\t\t\t\tdata.tubularSegments,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.p,\n    \t\t\t\t\t\t\tdata.q\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'LatheGeometry':\n    \t\t\t\t\tcase 'LatheBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.points,\n    \t\t\t\t\t\t\tdata.segments,\n    \t\t\t\t\t\t\tdata.phiStart,\n    \t\t\t\t\t\t\tdata.phiLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'BufferGeometry':\n\n    \t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'Geometry':\n\n    \t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tdefault:\n\n    \t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n    \t\t\t\t\t\tcontinue;\n\n    \t\t\t\t}\n\n    \t\t\t\tgeometry.uuid = data.uuid;\n\n    \t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n    \t\t\t\tgeometries[ data.uuid ] = geometry;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn geometries;\n\n    \t},\n\n    \tparseMaterials: function ( json, textures ) {\n\n    \t\tvar materials = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tvar loader = new MaterialLoader();\n    \t\t\tloader.setTextures( textures );\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar material = loader.parse( json[ i ] );\n    \t\t\t\tmaterials[ material.uuid ] = material;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn materials;\n\n    \t},\n\n    \tparseAnimations: function ( json ) {\n\n    \t\tvar animations = [];\n\n    \t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n    \t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n    \t\t\tanimations.push( clip );\n\n    \t\t}\n\n    \t\treturn animations;\n\n    \t},\n\n    \tparseImages: function ( json, onLoad ) {\n\n    \t\tvar scope = this;\n    \t\tvar images = {};\n\n    \t\tfunction loadImage( url ) {\n\n    \t\t\tscope.manager.itemStart( url );\n\n    \t\t\treturn loader.load( url, function () {\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t}, undefined, function () {\n\n    \t\t\t\tscope.manager.itemError( url );\n\n    \t\t\t} );\n\n    \t\t}\n\n    \t\tif ( json !== undefined && json.length > 0 ) {\n\n    \t\t\tvar manager = new LoadingManager( onLoad );\n\n    \t\t\tvar loader = new ImageLoader( manager );\n    \t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar image = json[ i ];\n    \t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n    \t\t\t\timages[ image.uuid ] = loadImage( path );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn images;\n\n    \t},\n\n    \tparseTextures: function ( json, images ) {\n\n    \t\tfunction parseConstant( value, type ) {\n\n    \t\t\tif ( typeof( value ) === 'number' ) return value;\n\n    \t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n    \t\t\treturn type[ value ];\n\n    \t\t}\n\n    \t\tvar textures = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar data = json[ i ];\n\n    \t\t\t\tif ( data.image === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( images[ data.image ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n    \t\t\t\t}\n\n    \t\t\t\tvar texture = new Texture( images[ data.image ] );\n    \t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\ttexture.uuid = data.uuid;\n\n    \t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n    \t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );\n\n    \t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n    \t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n    \t\t\t\tif ( data.wrap !== undefined ) {\n\n    \t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );\n    \t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );\n    \t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );\n    \t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n    \t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n    \t\t\t\ttextures[ data.uuid ] = texture;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn textures;\n\n    \t},\n\n    \tparseObject: function () {\n\n    \t\tvar matrix = new Matrix4();\n\n    \t\treturn function parseObject( data, geometries, materials ) {\n\n    \t\t\tvar object;\n\n    \t\t\tfunction getGeometry( name ) {\n\n    \t\t\t\tif ( geometries[ name ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n    \t\t\t\t}\n\n    \t\t\t\treturn geometries[ name ];\n\n    \t\t\t}\n\n    \t\t\tfunction getMaterial( name ) {\n\n    \t\t\t\tif ( name === undefined ) return undefined;\n\n    \t\t\t\tif ( materials[ name ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n    \t\t\t\t}\n\n    \t\t\t\treturn materials[ name ];\n\n    \t\t\t}\n\n    \t\t\tswitch ( data.type ) {\n\n    \t\t\t\tcase 'Scene':\n\n    \t\t\t\t\tobject = new Scene();\n\n    \t\t\t\t\tif ( data.background !== undefined ) {\n\n    \t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n    \t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( data.fog !== undefined ) {\n\n    \t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n    \t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n    \t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n    \t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PerspectiveCamera':\n\n    \t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n    \t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n    \t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n    \t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n    \t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n    \t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'OrthographicCamera':\n\n    \t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'AmbientLight':\n\n    \t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'DirectionalLight':\n\n    \t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointLight':\n\n    \t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'SpotLight':\n\n    \t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'HemisphereLight':\n\n    \t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Mesh':\n\n    \t\t\t\t\tvar geometry = getGeometry( data.geometry );\n    \t\t\t\t\tvar material = getMaterial( data.material );\n\n    \t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n    \t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'LOD':\n\n    \t\t\t\t\tobject = new LOD();\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Line':\n\n    \t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'LineSegments':\n\n    \t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointCloud':\n    \t\t\t\tcase 'Points':\n\n    \t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Sprite':\n\n    \t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Group':\n\n    \t\t\t\t\tobject = new Group();\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n\n    \t\t\t\t\tobject = new Object3D();\n\n    \t\t\t}\n\n    \t\t\tobject.uuid = data.uuid;\n\n    \t\t\tif ( data.name !== undefined ) object.name = data.name;\n    \t\t\tif ( data.matrix !== undefined ) {\n\n    \t\t\t\tmatrix.fromArray( data.matrix );\n    \t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n    \t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n    \t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n    \t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n    \t\t\t}\n\n    \t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n    \t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n    \t\t\tif ( data.shadow ) {\n\n    \t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n    \t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n    \t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n    \t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n    \t\t\t}\n\n    \t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n    \t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n    \t\t\tif ( data.children !== undefined ) {\n\n    \t\t\t\tfor ( var child in data.children ) {\n\n    \t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( data.type === 'LOD' ) {\n\n    \t\t\t\tvar levels = data.levels;\n\n    \t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n    \t\t\t\t\tvar level = levels[ l ];\n    \t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n    \t\t\t\t\tif ( child !== undefined ) {\n\n    \t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn object;\n\n    \t\t};\n\n    \t}()\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Extensible curve object\n     *\n     * Some common of Curve methods\n     * .getPoint(t), getTangent(t)\n     * .getPointAt(u), getTangentAt(u)\n     * .getPoints(), .getSpacedPoints()\n     * .getLength()\n     * .updateArcLengths()\n     *\n     * This following classes subclasses THREE.Curve:\n     *\n     * -- 2d classes --\n     * THREE.LineCurve\n     * THREE.QuadraticBezierCurve\n     * THREE.CubicBezierCurve\n     * THREE.SplineCurve\n     * THREE.ArcCurve\n     * THREE.EllipseCurve\n     *\n     * -- 3d classes --\n     * THREE.LineCurve3\n     * THREE.QuadraticBezierCurve3\n     * THREE.CubicBezierCurve3\n     * THREE.SplineCurve3\n     *\n     * A series of curves can be represented as a THREE.CurvePath\n     *\n     **/\n\n    /**************************************************************\n     *\tAbstract Curve base class\n     **************************************************************/\n\n    function Curve() {}\n\n    Curve.prototype = {\n\n    \tconstructor: Curve,\n\n    \t// Virtual base class method to overwrite and implement in subclasses\n    \t//\t- t [0 .. 1]\n\n    \tgetPoint: function ( t ) {\n\n    \t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n    \t\treturn null;\n\n    \t},\n\n    \t// Get point at relative position in curve according to arc length\n    \t// - u [0 .. 1]\n\n    \tgetPointAt: function ( u ) {\n\n    \t\tvar t = this.getUtoTmapping( u );\n    \t\treturn this.getPoint( t );\n\n    \t},\n\n    \t// Get sequence of points using getPoint( t )\n\n    \tgetPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 5;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n    \t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t// Get sequence of points using getPointAt( u )\n\n    \tgetSpacedPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 5;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n    \t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t// Get total curve arc length\n\n    \tgetLength: function () {\n\n    \t\tvar lengths = this.getLengths();\n    \t\treturn lengths[ lengths.length - 1 ];\n\n    \t},\n\n    \t// Get list of cumulative segment lengths\n\n    \tgetLengths: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\n    \t\tif ( this.cacheArcLengths\n    \t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n    \t\t\t&& ! this.needsUpdate ) {\n\n    \t\t\t//console.log( \"cached\", this.cacheArcLengths );\n    \t\t\treturn this.cacheArcLengths;\n\n    \t\t}\n\n    \t\tthis.needsUpdate = false;\n\n    \t\tvar cache = [];\n    \t\tvar current, last = this.getPoint( 0 );\n    \t\tvar p, sum = 0;\n\n    \t\tcache.push( 0 );\n\n    \t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n    \t\t\tcurrent = this.getPoint ( p / divisions );\n    \t\t\tsum += current.distanceTo( last );\n    \t\t\tcache.push( sum );\n    \t\t\tlast = current;\n\n    \t\t}\n\n    \t\tthis.cacheArcLengths = cache;\n\n    \t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\n    \t},\n\n    \tupdateArcLengths: function() {\n\n    \t\tthis.needsUpdate = true;\n    \t\tthis.getLengths();\n\n    \t},\n\n    \t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n    \tgetUtoTmapping: function ( u, distance ) {\n\n    \t\tvar arcLengths = this.getLengths();\n\n    \t\tvar i = 0, il = arcLengths.length;\n\n    \t\tvar targetArcLength; // The targeted u distance value to get\n\n    \t\tif ( distance ) {\n\n    \t\t\ttargetArcLength = distance;\n\n    \t\t} else {\n\n    \t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n    \t\t}\n\n    \t\t//var time = Date.now();\n\n    \t\t// binary search for the index with largest value smaller than target u distance\n\n    \t\tvar low = 0, high = il - 1, comparison;\n\n    \t\twhile ( low <= high ) {\n\n    \t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n    \t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n    \t\t\tif ( comparison < 0 ) {\n\n    \t\t\t\tlow = i + 1;\n\n    \t\t\t} else if ( comparison > 0 ) {\n\n    \t\t\t\thigh = i - 1;\n\n    \t\t\t} else {\n\n    \t\t\t\thigh = i;\n    \t\t\t\tbreak;\n\n    \t\t\t\t// DONE\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\ti = high;\n\n    \t\t//console.log('b' , i, low, high, Date.now()- time);\n\n    \t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n    \t\t\tvar t = i / ( il - 1 );\n    \t\t\treturn t;\n\n    \t\t}\n\n    \t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n    \t\tvar lengthBefore = arcLengths[ i ];\n    \t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n    \t\tvar segmentLength = lengthAfter - lengthBefore;\n\n    \t\t// determine where we are between the 'before' and 'after' points\n\n    \t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n    \t\t// add that fractional amount to t\n\n    \t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n    \t\treturn t;\n\n    \t},\n\n    \t// Returns a unit vector tangent at t\n    \t// In case any sub curve does not implement its tangent derivation,\n    \t// 2 points a small delta apart will be used to find its gradient\n    \t// which seems to give a reasonable approximation\n\n    \tgetTangent: function( t ) {\n\n    \t\tvar delta = 0.0001;\n    \t\tvar t1 = t - delta;\n    \t\tvar t2 = t + delta;\n\n    \t\t// Capping in case of danger\n\n    \t\tif ( t1 < 0 ) t1 = 0;\n    \t\tif ( t2 > 1 ) t2 = 1;\n\n    \t\tvar pt1 = this.getPoint( t1 );\n    \t\tvar pt2 = this.getPoint( t2 );\n\n    \t\tvar vec = pt2.clone().sub( pt1 );\n    \t\treturn vec.normalize();\n\n    \t},\n\n    \tgetTangentAt: function ( u ) {\n\n    \t\tvar t = this.getUtoTmapping( u );\n    \t\treturn this.getTangent( t );\n\n    \t}\n\n    };\n\n    // TODO: Transformation for Curves?\n\n    /**************************************************************\n     *\t3D Curves\n     **************************************************************/\n\n    // A Factory method for creating new curve subclasses\n\n    Curve.create = function ( constructor, getPointFunc ) {\n\n    \tconstructor.prototype = Object.create( Curve.prototype );\n    \tconstructor.prototype.constructor = constructor;\n    \tconstructor.prototype.getPoint = getPointFunc;\n\n    \treturn constructor;\n\n    };\n\n    /**************************************************************\n     *\tLine\n     **************************************************************/\n\n    function LineCurve( v1, v2 ) {\n\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n\n    }\n\n    LineCurve.prototype = Object.create( Curve.prototype );\n    LineCurve.prototype.constructor = LineCurve;\n\n    LineCurve.prototype.isLineCurve = true;\n\n    LineCurve.prototype.getPoint = function ( t ) {\n\n    \tif ( t === 1 ) {\n\n    \t\treturn this.v2.clone();\n\n    \t}\n\n    \tvar point = this.v2.clone().sub( this.v1 );\n    \tpoint.multiplyScalar( t ).add( this.v1 );\n\n    \treturn point;\n\n    };\n\n    // Line curve is linear, so we can overwrite default getPointAt\n\n    LineCurve.prototype.getPointAt = function ( u ) {\n\n    \treturn this.getPoint( u );\n\n    };\n\n    LineCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangent = this.v2.clone().sub( this.v1 );\n\n    \treturn tangent.normalize();\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     *\n     **/\n\n    /**************************************************************\n     *\tCurved Path - a curve path is simply a array of connected\n     *  curves, but retains the api of a curve\n     **************************************************************/\n\n    function CurvePath() {\n\n    \tthis.curves = [];\n\n    \tthis.autoClose = false; // Automatically closes the path\n\n    }\n\n    CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n    \tconstructor: CurvePath,\n\n    \tadd: function ( curve ) {\n\n    \t\tthis.curves.push( curve );\n\n    \t},\n\n    \tclosePath: function () {\n\n    \t\t// Add a line curve if start and end of lines are not connected\n    \t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n    \t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n    \t\tif ( ! startPoint.equals( endPoint ) ) {\n\n    \t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n    \t\t}\n\n    \t},\n\n    \t// To get accurate point with reference to\n    \t// entire path distance at time t,\n    \t// following has to be done:\n\n    \t// 1. Length of each sub path have to be known\n    \t// 2. Locate and identify type of curve\n    \t// 3. Get t for the curve\n    \t// 4. Return curve.getPointAt(t')\n\n    \tgetPoint: function ( t ) {\n\n    \t\tvar d = t * this.getLength();\n    \t\tvar curveLengths = this.getCurveLengths();\n    \t\tvar i = 0;\n\n    \t\t// To think about boundaries points.\n\n    \t\twhile ( i < curveLengths.length ) {\n\n    \t\t\tif ( curveLengths[ i ] >= d ) {\n\n    \t\t\t\tvar diff = curveLengths[ i ] - d;\n    \t\t\t\tvar curve = this.curves[ i ];\n\n    \t\t\t\tvar segmentLength = curve.getLength();\n    \t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n    \t\t\t\treturn curve.getPointAt( u );\n\n    \t\t\t}\n\n    \t\t\ti ++;\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t\t// loop where sum != 0, sum > d , sum+1 <d\n\n    \t},\n\n    \t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n    \t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n    \t// getPoint() depends on getLength\n\n    \tgetLength: function () {\n\n    \t\tvar lens = this.getCurveLengths();\n    \t\treturn lens[ lens.length - 1 ];\n\n    \t},\n\n    \t// cacheLengths must be recalculated.\n    \tupdateArcLengths: function () {\n\n    \t\tthis.needsUpdate = true;\n    \t\tthis.cacheLengths = null;\n    \t\tthis.getLengths();\n\n    \t},\n\n    \t// Compute lengths and cache them\n    \t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n    \tgetCurveLengths: function () {\n\n    \t\t// We use cache values if curves and cache array are same length\n\n    \t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n    \t\t\treturn this.cacheLengths;\n\n    \t\t}\n\n    \t\t// Get length of sub-curve\n    \t\t// Push sums into cached array\n\n    \t\tvar lengths = [], sums = 0;\n\n    \t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n    \t\t\tsums += this.curves[ i ].getLength();\n    \t\t\tlengths.push( sums );\n\n    \t\t}\n\n    \t\tthis.cacheLengths = lengths;\n\n    \t\treturn lengths;\n\n    \t},\n\n    \tgetSpacedPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 40;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n    \t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n    \t\t}\n\n    \t\tif ( this.autoClose ) {\n\n    \t\t\tpoints.push( points[ 0 ] );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \tgetPoints: function ( divisions ) {\n\n    \t\tdivisions = divisions || 12;\n\n    \t\tvar points = [], last;\n\n    \t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n    \t\t\tvar curve = curves[ i ];\n    \t\t\tvar resolution = (curve && curve.isEllipseCurve) ? divisions * 2\n    \t\t\t\t: (curve && curve.isLineCurve) ? 1\n    \t\t\t\t: (curve && curve.isSplineCurve) ? divisions * curve.points.length\n    \t\t\t\t: divisions;\n\n    \t\t\tvar pts = curve.getPoints( resolution );\n\n    \t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\n    \t\t\t\tvar point = pts[ j ];\n\n    \t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n    \t\t\t\tpoints.push( point );\n    \t\t\t\tlast = point;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n    \t\t\tpoints.push( points[ 0 ] );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t/**************************************************************\n    \t *\tCreate Geometries Helpers\n    \t **************************************************************/\n\n    \t/// Generate geometry from path points (for Line or Points objects)\n\n    \tcreatePointsGeometry: function ( divisions ) {\n\n    \t\tvar pts = this.getPoints( divisions );\n    \t\treturn this.createGeometry( pts );\n\n    \t},\n\n    \t// Generate geometry from equidistant sampling along the path\n\n    \tcreateSpacedPointsGeometry: function ( divisions ) {\n\n    \t\tvar pts = this.getSpacedPoints( divisions );\n    \t\treturn this.createGeometry( pts );\n\n    \t},\n\n    \tcreateGeometry: function ( points ) {\n\n    \t\tvar geometry = new Geometry();\n\n    \t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n    \t\t\tvar point = points[ i ];\n    \t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    } );\n\n    /**************************************************************\n     *\tEllipse curve\n     **************************************************************/\n\n    function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \tthis.aX = aX;\n    \tthis.aY = aY;\n\n    \tthis.xRadius = xRadius;\n    \tthis.yRadius = yRadius;\n\n    \tthis.aStartAngle = aStartAngle;\n    \tthis.aEndAngle = aEndAngle;\n\n    \tthis.aClockwise = aClockwise;\n\n    \tthis.aRotation = aRotation || 0;\n\n    }\n\n    EllipseCurve.prototype = Object.create( Curve.prototype );\n    EllipseCurve.prototype.constructor = EllipseCurve;\n\n    EllipseCurve.prototype.isEllipseCurve = true;\n\n    EllipseCurve.prototype.getPoint = function( t ) {\n\n    \tvar twoPi = Math.PI * 2;\n    \tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n    \tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n    \t// ensures that deltaAngle is 0 .. 2 PI\n    \twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n    \twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n    \tif ( deltaAngle < Number.EPSILON ) {\n\n    \t\tif ( samePoints ) {\n\n    \t\t\tdeltaAngle = 0;\n\n    \t\t} else {\n\n    \t\t\tdeltaAngle = twoPi;\n\n    \t\t}\n\n    \t}\n\n    \tif ( this.aClockwise === true && ! samePoints ) {\n\n    \t\tif ( deltaAngle === twoPi ) {\n\n    \t\t\tdeltaAngle = - twoPi;\n\n    \t\t} else {\n\n    \t\t\tdeltaAngle = deltaAngle - twoPi;\n\n    \t\t}\n\n    \t}\n\n    \tvar angle = this.aStartAngle + t * deltaAngle;\n    \tvar x = this.aX + this.xRadius * Math.cos( angle );\n    \tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n    \tif ( this.aRotation !== 0 ) {\n\n    \t\tvar cos = Math.cos( this.aRotation );\n    \t\tvar sin = Math.sin( this.aRotation );\n\n    \t\tvar tx = x - this.aX;\n    \t\tvar ty = y - this.aY;\n\n    \t\t// Rotate the point about the center of the ellipse.\n    \t\tx = tx * cos - ty * sin + this.aX;\n    \t\ty = tx * sin + ty * cos + this.aY;\n\n    \t}\n\n    \treturn new Vector2( x, y );\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    exports.CurveUtils = {\n\n    \ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\n    \t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\n    \t},\n\n    \t// Puay Bing, thanks for helping with this derivative!\n\n    \ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\n    \t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n    \t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n    \t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n    \t\t\t3 * t * t * p3;\n\n    \t},\n\n    \ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\n    \t\t// To check if my formulas are correct\n\n    \t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n    \t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n    \t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n    \t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\n    \t\treturn h00 + h10 + h01 + h11;\n\n    \t},\n\n    \t// Catmull-Rom\n\n    \tinterpolate: function( p0, p1, p2, p3, t ) {\n\n    \t\tvar v0 = ( p2 - p0 ) * 0.5;\n    \t\tvar v1 = ( p3 - p1 ) * 0.5;\n    \t\tvar t2 = t * t;\n    \t\tvar t3 = t * t2;\n    \t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n    \t}\n\n    };\n\n    /**************************************************************\n     *\tSpline curve\n     **************************************************************/\n\n    function SplineCurve( points /* array of Vector2 */ ) {\n\n    \tthis.points = ( points === undefined ) ? [] : points;\n\n    }\n\n    SplineCurve.prototype = Object.create( Curve.prototype );\n    SplineCurve.prototype.constructor = SplineCurve;\n\n    SplineCurve.prototype.isSplineCurve = true;\n\n    SplineCurve.prototype.getPoint = function ( t ) {\n\n    \tvar points = this.points;\n    \tvar point = ( points.length - 1 ) * t;\n\n    \tvar intPoint = Math.floor( point );\n    \tvar weight = point - intPoint;\n\n    \tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n    \tvar point1 = points[ intPoint ];\n    \tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n    \tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n    \tvar interpolate = exports.CurveUtils.interpolate;\n\n    \treturn new Vector2(\n    \t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n    \t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n    \t);\n\n    };\n\n    /**************************************************************\n     *\tCubic Bezier curve\n     **************************************************************/\n\n    function CubicBezierCurve( v0, v1, v2, v3 ) {\n\n    \tthis.v0 = v0;\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n    \tthis.v3 = v3;\n\n    }\n\n    CubicBezierCurve.prototype = Object.create( Curve.prototype );\n    CubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n    CubicBezierCurve.prototype.getPoint = function ( t ) {\n\n    \tvar b3 = exports.ShapeUtils.b3;\n\n    \treturn new Vector2(\n    \t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n    \t);\n\n    };\n\n    CubicBezierCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangentCubicBezier = exports.CurveUtils.tangentCubicBezier;\n\n    \treturn new Vector2(\n    \t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n    \t).normalize();\n\n    };\n\n    /**************************************************************\n     *\tQuadratic Bezier curve\n     **************************************************************/\n\n\n    function QuadraticBezierCurve( v0, v1, v2 ) {\n\n    \tthis.v0 = v0;\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n\n    }\n\n    QuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n    QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\n    QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n    \tvar b2 = exports.ShapeUtils.b2;\n\n    \treturn new Vector2(\n    \t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n    \t);\n\n    };\n\n\n    QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangentQuadraticBezier = exports.CurveUtils.tangentQuadraticBezier;\n\n    \treturn new Vector2(\n    \t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n    \t).normalize();\n\n    };\n\n    var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n    \tfromPoints: function ( vectors ) {\n\n    \t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n    \t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\n    \t\t}\n\n    \t},\n\n    \tmoveTo: function ( x, y ) {\n\n    \t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n    \t},\n\n    \tlineTo: function ( x, y ) {\n\n    \t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( x, y );\n\n    \t},\n\n    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n    \t\tvar curve = new QuadraticBezierCurve(\n    \t\t\tthis.currentPoint.clone(),\n    \t\t\tnew Vector2( aCPx, aCPy ),\n    \t\t\tnew Vector2( aX, aY )\n    \t\t);\n\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( aX, aY );\n\n    \t},\n\n    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n    \t\tvar curve = new CubicBezierCurve(\n    \t\t\tthis.currentPoint.clone(),\n    \t\t\tnew Vector2( aCP1x, aCP1y ),\n    \t\t\tnew Vector2( aCP2x, aCP2y ),\n    \t\t\tnew Vector2( aX, aY )\n    \t\t);\n\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( aX, aY );\n\n    \t},\n\n    \tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n    \t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n    \t\tvar curve = new SplineCurve( npts );\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n    \t},\n\n    \tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \t\tvar x0 = this.currentPoint.x;\n    \t\tvar y0 = this.currentPoint.y;\n\n    \t\tthis.absarc( aX + x0, aY + y0, aRadius,\n    \t\t\taStartAngle, aEndAngle, aClockwise );\n\n    \t},\n\n    \tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n    \t},\n\n    \tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \t\tvar x0 = this.currentPoint.x;\n    \t\tvar y0 = this.currentPoint.y;\n\n    \t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n    \t},\n\n    \tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n    \t\tif ( this.curves.length > 0 ) {\n\n    \t\t\t// if a previous curve is present, attempt to join\n    \t\t\tvar firstPoint = curve.getPoint( 0 );\n\n    \t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n    \t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.curves.push( curve );\n\n    \t\tvar lastPoint = curve.getPoint( 1 );\n    \t\tthis.currentPoint.copy( lastPoint );\n\n    \t}\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Defines a 2d shape plane using paths.\n     **/\n\n    // STEP 1 Create a path.\n    // STEP 2 Turn path into shape.\n    // STEP 3 ExtrudeGeometry takes in Shape/Shapes\n    // STEP 3a - Extract points from each shape, turn to vertices\n    // STEP 3b - Triangulate each shape, add faces.\n\n    function Shape() {\n\n    \tPath.apply( this, arguments );\n\n    \tthis.holes = [];\n\n    }\n\n    Shape.prototype = Object.assign( Object.create( PathPrototype ), {\n\n    \tconstructor: Shape,\n\n    \tgetPointsHoles: function ( divisions ) {\n\n    \t\tvar holesPts = [];\n\n    \t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n    \t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n    \t\t}\n\n    \t\treturn holesPts;\n\n    \t},\n\n    \t// Get points of shape and holes (keypoints based on segments parameter)\n\n    \textractAllPoints: function ( divisions ) {\n\n    \t\treturn {\n\n    \t\t\tshape: this.getPoints( divisions ),\n    \t\t\tholes: this.getPointsHoles( divisions )\n\n    \t\t};\n\n    \t},\n\n    \textractPoints: function ( divisions ) {\n\n    \t\treturn this.extractAllPoints( divisions );\n\n    \t}\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Creates free form 2d path using series of points, lines or curves.\n     *\n     **/\n\n    function Path( points ) {\n\n    \tCurvePath.call( this );\n    \tthis.currentPoint = new Vector2();\n\n    \tif ( points ) {\n\n    \t\tthis.fromPoints( points );\n\n    \t}\n\n    }\n\n    Path.prototype = PathPrototype;\n    PathPrototype.constructor = Path;\n\n\n    // minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n    function ShapePath() {\n    \tthis.subPaths = [];\n    \tthis.currentPath = null;\n    }\n\n    ShapePath.prototype = {\n    \tmoveTo: function ( x, y ) {\n    \t\tthis.currentPath = new Path();\n    \t\tthis.subPaths.push(this.currentPath);\n    \t\tthis.currentPath.moveTo( x, y );\n    \t},\n    \tlineTo: function ( x, y ) {\n    \t\tthis.currentPath.lineTo( x, y );\n    \t},\n    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n    \t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n    \t},\n    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n    \t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n    \t},\n    \tsplineThru: function ( pts ) {\n    \t\tthis.currentPath.splineThru( pts );\n    \t},\n\n    \ttoShapes: function ( isCCW, noHoles ) {\n\n    \t\tfunction toShapesNoHoles( inSubpaths ) {\n\n    \t\t\tvar shapes = [];\n\n    \t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n    \t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n    \t\t\t\tvar tmpShape = new Shape();\n    \t\t\t\ttmpShape.curves = tmpPath.curves;\n\n    \t\t\t\tshapes.push( tmpShape );\n\n    \t\t\t}\n\n    \t\t\treturn shapes;\n\n    \t\t}\n\n    \t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n    \t\t\tvar polyLen = inPolygon.length;\n\n    \t\t\t// inPt on polygon contour => immediate success    or\n    \t\t\t// toggling of inside/outside at every single! intersection point of an edge\n    \t\t\t//  with the horizontal line through inPt, left of inPt\n    \t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n    \t\t\tvar inside = false;\n    \t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n    \t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n    \t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n    \t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n    \t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n    \t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n    \t\t\t\t\t// not parallel\n    \t\t\t\t\tif ( edgeDy < 0 ) {\n\n    \t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n    \t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n    \t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n    \t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n    \t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n    \t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n    \t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n    \t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// parallel or collinear\n    \t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n    \t\t\t\t\t// edge lies on the same horizontal line as inPt\n    \t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n    \t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n    \t\t\t\t\t// continue;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn\tinside;\n\n    \t\t}\n\n    \t\tvar isClockWise = exports.ShapeUtils.isClockWise;\n\n    \t\tvar subPaths = this.subPaths;\n    \t\tif ( subPaths.length === 0 ) return [];\n\n    \t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n    \t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n    \t\tif ( subPaths.length === 1 ) {\n\n    \t\t\ttmpPath = subPaths[ 0 ];\n    \t\t\ttmpShape = new Shape();\n    \t\t\ttmpShape.curves = tmpPath.curves;\n    \t\t\tshapes.push( tmpShape );\n    \t\t\treturn shapes;\n\n    \t\t}\n\n    \t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n    \t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n    \t\t// console.log(\"Holes first\", holesFirst);\n\n    \t\tvar betterShapeHoles = [];\n    \t\tvar newShapes = [];\n    \t\tvar newShapeHoles = [];\n    \t\tvar mainIdx = 0;\n    \t\tvar tmpPoints;\n\n    \t\tnewShapes[ mainIdx ] = undefined;\n    \t\tnewShapeHoles[ mainIdx ] = [];\n\n    \t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n    \t\t\ttmpPath = subPaths[ i ];\n    \t\t\ttmpPoints = tmpPath.getPoints();\n    \t\t\tsolid = isClockWise( tmpPoints );\n    \t\t\tsolid = isCCW ? ! solid : solid;\n\n    \t\t\tif ( solid ) {\n\n    \t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n    \t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n    \t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n    \t\t\t\tif ( holesFirst )\tmainIdx ++;\n    \t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n    \t\t\t\t//console.log('cw', i);\n\n    \t\t\t} else {\n\n    \t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n    \t\t\t\t//console.log('ccw', i);\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// only Holes? -> probably all Shapes with wrong orientation\n    \t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n    \t\tif ( newShapes.length > 1 ) {\n\n    \t\t\tvar ambiguous = false;\n    \t\t\tvar toChange = [];\n\n    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n    \t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n    \t\t\t}\n\n    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n    \t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n    \t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n    \t\t\t\t\tvar ho = sho[ hIdx ];\n    \t\t\t\t\tvar hole_unassigned = true;\n\n    \t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n    \t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n    \t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n    \t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n    \t\t\t\t\t\t\t\thole_unassigned = false;\n    \t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tambiguous = true;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( hole_unassigned ) {\n\n    \t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n    \t\t\t// console.log(\"ambiguous: \", ambiguous);\n    \t\t\tif ( toChange.length > 0 ) {\n\n    \t\t\t\t// console.log(\"to change: \", toChange);\n    \t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar tmpHoles;\n\n    \t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n    \t\t\ttmpShape = newShapes[ i ].s;\n    \t\t\tshapes.push( tmpShape );\n    \t\t\ttmpHoles = newShapeHoles[ i ];\n\n    \t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n    \t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t//console.log(\"shape\", shapes);\n\n    \t\treturn shapes;\n\n    \t}\n    }\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Font( data ) {\n\n    \tthis.data = data;\n\n    }\n\n    Object.assign( Font.prototype, {\n\n    \tisFont: true,\n\n    \tgenerateShapes: function ( text, size, divisions ) {\n\n    \t\tfunction createPaths( text ) {\n\n    \t\t\tvar chars = String( text ).split( '' );\n    \t\t\tvar scale = size / data.resolution;\n    \t\t\tvar offset = 0;\n\n    \t\t\tvar paths = [];\n\n    \t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n    \t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n    \t\t\t\toffset += ret.offset;\n\n    \t\t\t\tpaths.push( ret.path );\n\n    \t\t\t}\n\n    \t\t\treturn paths;\n\n    \t\t}\n\n    \t\tfunction createPath( c, scale, offset ) {\n\n    \t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n    \t\t\tif ( ! glyph ) return;\n\n    \t\t\tvar path = new ShapePath();\n\n    \t\t\tvar pts = [], b2 = exports.ShapeUtils.b2, b3 = exports.ShapeUtils.b3;\n    \t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n    \t\t\tif ( glyph.o ) {\n\n    \t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n    \t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n    \t\t\t\t\tvar action = outline[ i ++ ];\n\n    \t\t\t\t\tswitch ( action ) {\n\n    \t\t\t\t\t\tcase 'm': // moveTo\n\n    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.moveTo( x, y );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'l': // lineTo\n\n    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.lineTo( x, y );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n    \t\t\t\t\t\t\tif ( laste ) {\n\n    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n    \t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n    \t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n    \t\t\t\t\t\t\tif ( laste ) {\n\n    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n    \t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n    \t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn { offset: glyph.ha * scale, path: path };\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( size === undefined ) size = 100;\n    \t\tif ( divisions === undefined ) divisions = 4;\n\n    \t\tvar data = this.data;\n\n    \t\tvar paths = createPaths( text );\n    \t\tvar shapes = [];\n\n    \t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n    \t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n    \t\t}\n\n    \t\treturn shapes;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function FontLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( FontLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tvar json;\n\n    \t\t\ttry {\n\n    \t\t\t\tjson = JSON.parse( text );\n\n    \t\t\t} catch ( e ) {\n\n    \t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n    \t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n    \t\t\t}\n\n    \t\t\tvar font = scope.parse( json );\n\n    \t\t\tif ( onLoad ) onLoad( font );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\treturn new Font( json );\n\n    \t}\n\n    } );\n\n    var context;\n\n    function getAudioContext() {\n\n    \tif ( context === undefined ) {\n\n    \t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n    \t}\n\n    \treturn context;\n\n    }\n\n    /**\n     * @author Reece Aaron Lecrivain / http://reecenotes.com/\n     */\n\n    function AudioLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( AudioLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setResponseType( 'arraybuffer' );\n    \t\tloader.load( url, function ( buffer ) {\n\n    \t\t\tvar context = getAudioContext();\n\n    \t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n    \t\t\t\tonLoad( audioBuffer );\n\n    \t\t\t} );\n\n    \t\t}, onProgress, onError );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function StereoCamera() {\n\n    \tthis.type = 'StereoCamera';\n\n    \tthis.aspect = 1;\n\n    \tthis.eyeSep = 0.064;\n\n    \tthis.cameraL = new PerspectiveCamera();\n    \tthis.cameraL.layers.enable( 1 );\n    \tthis.cameraL.matrixAutoUpdate = false;\n\n    \tthis.cameraR = new PerspectiveCamera();\n    \tthis.cameraR.layers.enable( 2 );\n    \tthis.cameraR.matrixAutoUpdate = false;\n\n    }\n\n    Object.assign( StereoCamera.prototype, {\n\n    \tupdate: ( function () {\n\n    \t\tvar instance, focus, fov, aspect, near, far, zoom;\n\n    \t\tvar eyeRight = new Matrix4();\n    \t\tvar eyeLeft = new Matrix4();\n\n    \t\treturn function update( camera ) {\n\n    \t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n    \t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n    \t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom;\n\n    \t\t\tif ( needsUpdate ) {\n\n    \t\t\t\tinstance = this;\n    \t\t\t\tfocus = camera.focus;\n    \t\t\t\tfov = camera.fov;\n    \t\t\t\taspect = camera.aspect * this.aspect;\n    \t\t\t\tnear = camera.near;\n    \t\t\t\tfar = camera.far;\n    \t\t\t\tzoom = camera.zoom;\n\n    \t\t\t\t// Off-axis stereoscopic effect based on\n    \t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n    \t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n    \t\t\t\tvar eyeSep = this.eyeSep / 2;\n    \t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n    \t\t\t\tvar ymax = ( near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n    \t\t\t\tvar xmin, xmax;\n\n    \t\t\t\t// translate xOffset\n\n    \t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n    \t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n    \t\t\t\t// for left eye\n\n    \t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n    \t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n    \t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n    \t\t\t\t// for right eye\n\n    \t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n    \t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n    \t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n    \t\t\t}\n\n    \t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n    \t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n    \t\t};\n\n    \t} )()\n\n    } );\n\n    /**\n     * Camera for rendering cube maps\n     *\t- renders scene into axis-aligned cube\n     *\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function CubeCamera( near, far, cubeResolution ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'CubeCamera';\n\n    \tvar fov = 90, aspect = 1;\n\n    \tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPX.up.set( 0, - 1, 0 );\n    \tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n    \tthis.add( cameraPX );\n\n    \tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNX.up.set( 0, - 1, 0 );\n    \tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n    \tthis.add( cameraNX );\n\n    \tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPY.up.set( 0, 0, 1 );\n    \tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n    \tthis.add( cameraPY );\n\n    \tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNY.up.set( 0, 0, - 1 );\n    \tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n    \tthis.add( cameraNY );\n\n    \tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPZ.up.set( 0, - 1, 0 );\n    \tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n    \tthis.add( cameraPZ );\n\n    \tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNZ.up.set( 0, - 1, 0 );\n    \tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n    \tthis.add( cameraNZ );\n\n    \tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n    \tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\n    \tthis.updateCubeMap = function ( renderer, scene ) {\n\n    \t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n    \t\tvar renderTarget = this.renderTarget;\n    \t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n    \t\trenderTarget.texture.generateMipmaps = false;\n\n    \t\trenderTarget.activeCubeFace = 0;\n    \t\trenderer.render( scene, cameraPX, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 1;\n    \t\trenderer.render( scene, cameraNX, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 2;\n    \t\trenderer.render( scene, cameraPY, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 3;\n    \t\trenderer.render( scene, cameraNY, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 4;\n    \t\trenderer.render( scene, cameraPZ, renderTarget );\n\n    \t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n    \t\trenderTarget.activeCubeFace = 5;\n    \t\trenderer.render( scene, cameraNZ, renderTarget );\n\n    \t\trenderer.setRenderTarget( null );\n\n    \t};\n\n    }\n\n    CubeCamera.prototype = Object.create( Object3D.prototype );\n    CubeCamera.prototype.constructor = CubeCamera;\n\n    function AudioListener() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'AudioListener';\n\n    \tthis.context = getAudioContext();\n\n    \tthis.gain = this.context.createGain();\n    \tthis.gain.connect( this.context.destination );\n\n    \tthis.filter = null;\n\n    }\n\n    AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: AudioListener,\n\n    \tgetInput: function () {\n\n    \t\treturn this.gain;\n\n    \t},\n\n    \tremoveFilter: function ( ) {\n\n    \t\tif ( this.filter !== null ) {\n\n    \t\t\tthis.gain.disconnect( this.filter );\n    \t\t\tthis.filter.disconnect( this.context.destination );\n    \t\t\tthis.gain.connect( this.context.destination );\n    \t\t\tthis.filter = null;\n\n    \t\t}\n\n    \t},\n\n    \tgetFilter: function () {\n\n    \t\treturn this.filter;\n\n    \t},\n\n    \tsetFilter: function ( value ) {\n\n    \t\tif ( this.filter !== null ) {\n\n    \t\t\tthis.gain.disconnect( this.filter );\n    \t\t\tthis.filter.disconnect( this.context.destination );\n\n    \t\t} else {\n\n    \t\t\tthis.gain.disconnect( this.context.destination );\n\n    \t\t}\n\n    \t\tthis.filter = value;\n    \t\tthis.gain.connect( this.filter );\n    \t\tthis.filter.connect( this.context.destination );\n\n    \t},\n\n    \tgetMasterVolume: function () {\n\n    \t\treturn this.gain.gain.value;\n\n    \t},\n\n    \tsetMasterVolume: function ( value ) {\n\n    \t\tthis.gain.gain.value = value;\n\n    \t},\n\n    \tupdateMatrixWorld: ( function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar quaternion = new Quaternion();\n    \t\tvar scale = new Vector3();\n\n    \t\tvar orientation = new Vector3();\n\n    \t\treturn function updateMatrixWorld( force ) {\n\n    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n    \t\t\tvar listener = this.context.listener;\n    \t\t\tvar up = this.up;\n\n    \t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n    \t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n    \t\t\tlistener.setPosition( position.x, position.y, position.z );\n    \t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n    \t\t};\n\n    \t} )()\n\n    } );\n\n    function Audio( listener ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Audio';\n\n    \tthis.context = listener.context;\n    \tthis.source = this.context.createBufferSource();\n    \tthis.source.onended = this.onEnded.bind( this );\n\n    \tthis.gain = this.context.createGain();\n    \tthis.gain.connect( listener.getInput() );\n\n    \tthis.autoplay = false;\n\n    \tthis.startTime = 0;\n    \tthis.playbackRate = 1;\n    \tthis.isPlaying = false;\n    \tthis.hasPlaybackControl = true;\n    \tthis.sourceType = 'empty';\n\n    \tthis.filters = [];\n\n    }\n\n    Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Audio,\n\n    \tgetOutput: function () {\n\n    \t\treturn this.gain;\n\n    \t},\n\n    \tsetNodeSource: function ( audioNode ) {\n\n    \t\tthis.hasPlaybackControl = false;\n    \t\tthis.sourceType = 'audioNode';\n    \t\tthis.source = audioNode;\n    \t\tthis.connect();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetBuffer: function ( audioBuffer ) {\n\n    \t\tthis.source.buffer = audioBuffer;\n    \t\tthis.sourceType = 'buffer';\n\n    \t\tif ( this.autoplay ) this.play();\n\n    \t\treturn this;\n\n    \t},\n\n    \tplay: function () {\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar source = this.context.createBufferSource();\n\n    \t\tsource.buffer = this.source.buffer;\n    \t\tsource.loop = this.source.loop;\n    \t\tsource.onended = this.source.onended;\n    \t\tsource.start( 0, this.startTime );\n    \t\tsource.playbackRate.value = this.playbackRate;\n\n    \t\tthis.isPlaying = true;\n\n    \t\tthis.source = source;\n\n    \t\treturn this.connect();\n\n    \t},\n\n    \tpause: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.stop();\n    \t\tthis.startTime = this.context.currentTime;\n    \t\tthis.isPlaying = false;\n\n    \t\treturn this;\n\n    \t},\n\n    \tstop: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.stop();\n    \t\tthis.startTime = 0;\n    \t\tthis.isPlaying = false;\n\n    \t\treturn this;\n\n    \t},\n\n    \tconnect: function () {\n\n    \t\tif ( this.filters.length > 0 ) {\n\n    \t\t\tthis.source.connect( this.filters[ 0 ] );\n\n    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n    \t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n    \t\t\t}\n\n    \t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n    \t\t} else {\n\n    \t\t\tthis.source.connect( this.getOutput() );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdisconnect: function () {\n\n    \t\tif ( this.filters.length > 0 ) {\n\n    \t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n    \t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n    \t\t\t}\n\n    \t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n    \t\t} else {\n\n    \t\t\tthis.source.disconnect( this.getOutput() );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetFilters: function () {\n\n    \t\treturn this.filters;\n\n    \t},\n\n    \tsetFilters: function ( value ) {\n\n    \t\tif ( ! value ) value = [];\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tthis.disconnect();\n    \t\t\tthis.filters = value;\n    \t\t\tthis.connect();\n\n    \t\t} else {\n\n    \t\t\tthis.filters = value;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetFilter: function () {\n\n    \t\treturn this.getFilters()[ 0 ];\n\n    \t},\n\n    \tsetFilter: function ( filter ) {\n\n    \t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n    \t},\n\n    \tsetPlaybackRate: function ( value ) {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.playbackRate = value;\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tthis.source.playbackRate.value = this.playbackRate;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetPlaybackRate: function () {\n\n    \t\treturn this.playbackRate;\n\n    \t},\n\n    \tonEnded: function () {\n\n    \t\tthis.isPlaying = false;\n\n    \t},\n\n    \tgetLoop: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn this.source.loop;\n\n    \t},\n\n    \tsetLoop: function ( value ) {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.loop = value;\n\n    \t},\n\n    \tgetVolume: function () {\n\n    \t\treturn this.gain.gain.value;\n\n    \t},\n\n\n    \tsetVolume: function ( value ) {\n\n    \t\tthis.gain.gain.value = value;\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    function PositionalAudio( listener ) {\n\n    \tAudio.call( this, listener );\n\n    \tthis.panner = this.context.createPanner();\n    \tthis.panner.connect( this.gain );\n\n    }\n\n    PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n    \tconstructor: PositionalAudio,\n\n    \tgetOutput: function () {\n\n    \t\treturn this.panner;\n\n    \t},\n\n    \tgetRefDistance: function () {\n\n    \t\treturn this.panner.refDistance;\n\n    \t},\n\n    \tsetRefDistance: function ( value ) {\n\n    \t\tthis.panner.refDistance = value;\n\n    \t},\n\n    \tgetRolloffFactor: function () {\n\n    \t\treturn this.panner.rolloffFactor;\n\n    \t},\n\n    \tsetRolloffFactor: function ( value ) {\n\n    \t\tthis.panner.rolloffFactor = value;\n\n    \t},\n\n    \tgetDistanceModel: function () {\n\n    \t\treturn this.panner.distanceModel;\n\n    \t},\n\n    \tsetDistanceModel: function ( value ) {\n\n    \t\tthis.panner.distanceModel = value;\n\n    \t},\n\n    \tgetMaxDistance: function () {\n\n    \t\treturn this.panner.maxDistance;\n\n    \t},\n\n    \tsetMaxDistance: function ( value ) {\n\n    \t\tthis.panner.maxDistance = value;\n\n    \t},\n\n    \tupdateMatrixWorld: ( function () {\n\n    \t\tvar position = new Vector3();\n\n    \t\treturn function updateMatrixWorld( force ) {\n\n    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n    \t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n    \t\t};\n\n    \t} )()\n\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AudioAnalyser( audio, fftSize ) {\n\n    \tthis.analyser = audio.context.createAnalyser();\n    \tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n    \tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n    \taudio.getOutput().connect( this.analyser );\n\n    }\n\n    Object.assign( AudioAnalyser.prototype, {\n\n    \tgetFrequencyData: function () {\n\n    \t\tthis.analyser.getByteFrequencyData( this.data );\n\n    \t\treturn this.data;\n\n    \t},\n\n    \tgetAverageFrequency: function () {\n\n    \t\tvar value = 0, data = this.getFrequencyData();\n\n    \t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n    \t\t\tvalue += data[ i ];\n\n    \t\t}\n\n    \t\treturn value / data.length;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Buffered scene graph property that allows weighted accumulation.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function PropertyMixer( binding, typeName, valueSize ) {\n\n    \tthis.binding = binding;\n    \tthis.valueSize = valueSize;\n\n    \tvar bufferType = Float64Array,\n    \t\tmixFunction;\n\n    \tswitch ( typeName ) {\n\n    \t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\n    \t\tcase 'string':\n    \t\tcase 'bool':\n\n    \t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\n    \t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\n    \t}\n\n    \tthis.buffer = new bufferType( valueSize * 4 );\n    \t// layout: [ incoming | accu0 | accu1 | orig ]\n    \t//\n    \t// interpolators can use .buffer as their .result\n    \t// the data then goes to 'incoming'\n    \t//\n    \t// 'accu0' and 'accu1' are used frame-interleaved for\n    \t// the cumulative result and are compared to detect\n    \t// changes\n    \t//\n    \t// 'orig' stores the original state of the property\n\n    \tthis._mixBufferRegion = mixFunction;\n\n    \tthis.cumulativeWeight = 0;\n\n    \tthis.useCount = 0;\n    \tthis.referenceCount = 0;\n\n    }\n\n    PropertyMixer.prototype = {\n\n    \tconstructor: PropertyMixer,\n\n    \t// accumulate data in the 'incoming' region into 'accu<i>'\n    \taccumulate: function( accuIndex, weight ) {\n\n    \t\t// note: happily accumulating nothing when weight = 0, the caller knows\n    \t\t// the weight and shouldn't have made the call in the first place\n\n    \t\tvar buffer = this.buffer,\n    \t\t\tstride = this.valueSize,\n    \t\t\toffset = accuIndex * stride + stride,\n\n    \t\t\tcurrentWeight = this.cumulativeWeight;\n\n    \t\tif ( currentWeight === 0 ) {\n\n    \t\t\t// accuN := incoming * weight\n\n    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n    \t\t\t}\n\n    \t\t\tcurrentWeight = weight;\n\n    \t\t} else {\n\n    \t\t\t// accuN := accuN + incoming * weight\n\n    \t\t\tcurrentWeight += weight;\n    \t\t\tvar mix = weight / currentWeight;\n    \t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n    \t\t}\n\n    \t\tthis.cumulativeWeight = currentWeight;\n\n    \t},\n\n    \t// apply the state of 'accu<i>' to the binding when accus differ\n    \tapply: function( accuIndex ) {\n\n    \t\tvar stride = this.valueSize,\n    \t\t\tbuffer = this.buffer,\n    \t\t\toffset = accuIndex * stride + stride,\n\n    \t\t\tweight = this.cumulativeWeight,\n\n    \t\t\tbinding = this.binding;\n\n    \t\tthis.cumulativeWeight = 0;\n\n    \t\tif ( weight < 1 ) {\n\n    \t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n    \t\t\tvar originalValueOffset = stride * 3;\n\n    \t\t\tthis._mixBufferRegion(\n    \t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n    \t\t}\n\n    \t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n    \t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n    \t\t\t\t// value has changed -> update scene graph\n\n    \t\t\t\tbinding.setValue( buffer, offset );\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t// remember the state of the bound property and copy it to both accus\n    \tsaveOriginalState: function() {\n\n    \t\tvar binding = this.binding;\n\n    \t\tvar buffer = this.buffer,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toriginalValueOffset = stride * 3;\n\n    \t\tbinding.getValue( buffer, originalValueOffset );\n\n    \t\t// accu[0..1] := orig -- initially detect changes against the original\n    \t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n    \t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n    \t\t}\n\n    \t\tthis.cumulativeWeight = 0;\n\n    \t},\n\n    \t// apply the state previously taken via 'saveOriginalState' to the binding\n    \trestoreOriginalState: function() {\n\n    \t\tvar originalValueOffset = this.valueSize * 3;\n    \t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n    \t},\n\n\n    \t// mix functions\n\n    \t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tif ( t >= 0.5 ) {\n\n    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tQuaternion.slerpFlat( buffer, dstOffset,\n    \t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\n    \t},\n\n    \t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tvar s = 1 - t;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tvar j = dstOffset + i;\n\n    \t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     *\n     * A reference to a real property in the scene graph.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function PropertyBinding( rootNode, path, parsedPath ) {\n\n    \tthis.path = path;\n    \tthis.parsedPath = parsedPath ||\n    \t\t\tPropertyBinding.parseTrackName( path );\n\n    \tthis.node = PropertyBinding.findNode(\n    \t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\n    \tthis.rootNode = rootNode;\n\n    }\n\n    PropertyBinding.prototype = {\n\n    \tconstructor: PropertyBinding,\n\n    \tgetValue: function getValue_unbound( targetArray, offset ) {\n\n    \t\tthis.bind();\n    \t\tthis.getValue( targetArray, offset );\n\n    \t\t// Note: This class uses a State pattern on a per-method basis:\n    \t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n    \t\t// prototype version of these methods with one that represents\n    \t\t// the bound state. When the property is not found, the methods\n    \t\t// become no-ops.\n\n    \t},\n\n    \tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n    \t\tthis.bind();\n    \t\tthis.setValue( sourceArray, offset );\n\n    \t},\n\n    \t// create getter / setter pair for a property in the scene graph\n    \tbind: function() {\n\n    \t\tvar targetObject = this.node,\n    \t\t\tparsedPath = this.parsedPath,\n\n    \t\t\tobjectName = parsedPath.objectName,\n    \t\t\tpropertyName = parsedPath.propertyName,\n    \t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n    \t\tif ( ! targetObject ) {\n\n    \t\t\ttargetObject = PropertyBinding.findNode(\n    \t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n    \t\t\tthis.node = targetObject;\n\n    \t\t}\n\n    \t\t// set fail state so we can just 'return' on error\n    \t\tthis.getValue = this._getValue_unavailable;\n    \t\tthis.setValue = this._setValue_unavailable;\n\n     \t\t// ensure there is a value node\n    \t\tif ( ! targetObject ) {\n\n    \t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( objectName ) {\n\n    \t\t\tvar objectIndex = parsedPath.objectIndex;\n\n    \t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n    \t\t\tswitch ( objectName ) {\n\n    \t\t\t\tcase 'materials':\n\n    \t\t\t\t\tif ( ! targetObject.material ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttargetObject = targetObject.material.materials;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'bones':\n\n    \t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n    \t\t\t\t\t// and convert the integer string to a true integer.\n\n    \t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n    \t\t\t\t\t// support resolving morphTarget names into indices.\n    \t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n    \t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n    \t\t\t\t\t\t\tobjectIndex = i;\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n\n    \t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n    \t\t\t}\n\n\n    \t\t\tif ( objectIndex !== undefined ) {\n\n    \t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n    \t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// resolve property\n    \t\tvar nodeProperty = targetObject[ propertyName ];\n\n    \t\tif ( nodeProperty === undefined ) {\n\n    \t\t\tvar nodeName = parsedPath.nodeName;\n\n    \t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n    \t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\t// determine versioning scheme\n    \t\tvar versioning = this.Versioning.None;\n\n    \t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n    \t\t\tversioning = this.Versioning.NeedsUpdate;\n    \t\t\tthis.targetObject = targetObject;\n\n    \t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n    \t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n    \t\t\tthis.targetObject = targetObject;\n\n    \t\t}\n\n    \t\t// determine how the property gets bound\n    \t\tvar bindingType = this.BindingType.Direct;\n\n    \t\tif ( propertyIndex !== undefined ) {\n    \t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n    \t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n    \t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n    \t\t\t\t// support resolving morphTarget names into indices.\n    \t\t\t\tif ( ! targetObject.geometry ) {\n\n    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n    \t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n    \t\t\t\t\t\tpropertyIndex = i;\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tbindingType = this.BindingType.ArrayElement;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n    \t\t\tthis.propertyIndex = propertyIndex;\n\n    \t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n    \t\t\t// must use copy for Object3D.Euler/Quaternion\n\n    \t\t\tbindingType = this.BindingType.HasFromToArray;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n\n    \t\t} else if ( nodeProperty.length !== undefined ) {\n\n    \t\t\tbindingType = this.BindingType.EntireArray;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n\n    \t\t} else {\n\n    \t\t\tthis.propertyName = propertyName;\n\n    \t\t}\n\n    \t\t// select getter / setter\n    \t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n    \t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n    \t},\n\n    \tunbind: function() {\n\n    \t\tthis.node = null;\n\n    \t\t// back to the prototype version of getValue / setValue\n    \t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n    \t\tthis.getValue = this._getValue_unbound;\n    \t\tthis.setValue = this._setValue_unbound;\n\n    \t}\n\n    };\n\n    Object.assign( PropertyBinding.prototype, { // prototype, continued\n\n    \t// these are used to \"bind\" a nonexistent property\n    \t_getValue_unavailable: function() {},\n    \t_setValue_unavailable: function() {},\n\n    \t// initial state of these methods that calls 'bind'\n    \t_getValue_unbound: PropertyBinding.prototype.getValue,\n    \t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n    \tBindingType: {\n    \t\tDirect: 0,\n    \t\tEntireArray: 1,\n    \t\tArrayElement: 2,\n    \t\tHasFromToArray: 3\n    \t},\n\n    \tVersioning: {\n    \t\tNone: 0,\n    \t\tNeedsUpdate: 1,\n    \t\tMatrixWorldNeedsUpdate: 2\n    \t},\n\n    \tGetterByBindingType: [\n\n    \t\tfunction getValue_direct( buffer, offset ) {\n\n    \t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n    \t\t},\n\n    \t\tfunction getValue_array( buffer, offset ) {\n\n    \t\t\tvar source = this.resolvedProperty;\n\n    \t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n    \t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n    \t\t\t}\n\n    \t\t},\n\n    \t\tfunction getValue_arrayElement( buffer, offset ) {\n\n    \t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n    \t\t},\n\n    \t\tfunction getValue_toArray( buffer, offset ) {\n\n    \t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n    \t\t}\n\n    \t],\n\n    \tSetterByBindingTypeAndVersioning: [\n\n    \t\t[\n    \t\t\t// Direct\n\n    \t\t\tfunction setValue_direct( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// EntireArray\n\n    \t\t\tfunction setValue_array( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// ArrayElement\n\n    \t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// HasToFromArray\n\n    \t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t]\n\n    \t]\n\n    } );\n\n    PropertyBinding.Composite =\n    \t\tfunction( targetGroup, path, optionalParsedPath ) {\n\n    \tvar parsedPath = optionalParsedPath ||\n    \t\t\tPropertyBinding.parseTrackName( path );\n\n    \tthis._targetGroup = targetGroup;\n    \tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n    };\n\n    PropertyBinding.Composite.prototype = {\n\n    \tconstructor: PropertyBinding.Composite,\n\n    \tgetValue: function( array, offset ) {\n\n    \t\tthis.bind(); // bind all binding\n\n    \t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n    \t\t\tbinding = this._bindings[ firstValidIndex ];\n\n    \t\t// and only call .getValue on the first\n    \t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n    \t},\n\n    \tsetValue: function( array, offset ) {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].setValue( array, offset );\n\n    \t\t}\n\n    \t},\n\n    \tbind: function() {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].bind();\n\n    \t\t}\n\n    \t},\n\n    \tunbind: function() {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].unbind();\n\n    \t\t}\n\n    \t}\n\n    };\n\n    PropertyBinding.create = function( root, path, parsedPath ) {\n\n    \tif ( ! ( (root && root.isAnimationObjectGroup) ) ) {\n\n    \t\treturn new PropertyBinding( root, path, parsedPath );\n\n    \t} else {\n\n    \t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n    \t}\n\n    };\n\n    PropertyBinding.parseTrackName = function( trackName ) {\n\n    \t// matches strings in the form of:\n    \t//    nodeName.property\n    \t//    nodeName.property[accessor]\n    \t//    nodeName.material.property[accessor]\n    \t//    uuid.property[accessor]\n    \t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n    \t//    parentName/nodeName.property\n    \t//    parentName/parentName/nodeName.property[index]\n    \t//    .bone[Armature.DEF_cog].position\n    \t//    scene:helium_balloon_model:helium_balloon_model.position\n    \t// created and tested via https://regex101.com/#javascript\n\n    \tvar re = /^((?:\\w+[\\/:])*)(\\w+)?(?:\\.(\\w+)(?:\\[(.+)\\])?)?\\.(\\w+)(?:\\[(.+)\\])?$/;\n    \tvar matches = re.exec( trackName );\n\n    \tif ( ! matches ) {\n\n    \t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\n    \t}\n\n    \tvar results = {\n    \t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n    \t\tnodeName: matches[ 2 ], \t// allowed to be null, specified root node.\n    \t\tobjectName: matches[ 3 ],\n    \t\tobjectIndex: matches[ 4 ],\n    \t\tpropertyName: matches[ 5 ],\n    \t\tpropertyIndex: matches[ 6 ]\t// allowed to be null, specifies that the whole property is set.\n    \t};\n\n    \tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n    \t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\n    \t}\n\n    \treturn results;\n\n    };\n\n    PropertyBinding.findNode = function( root, nodeName ) {\n\n    \tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n    \t\treturn root;\n\n    \t}\n\n    \t// search into skeleton bones.\n    \tif ( root.skeleton ) {\n\n    \t\tvar searchSkeleton = function( skeleton ) {\n\n    \t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n    \t\t\t\tvar bone = skeleton.bones[ i ];\n\n    \t\t\t\tif ( bone.name === nodeName ) {\n\n    \t\t\t\t\treturn bone;\n\n    \t\t\t\t}\n    \t\t\t}\n\n    \t\t\treturn null;\n\n    \t\t};\n\n    \t\tvar bone = searchSkeleton( root.skeleton );\n\n    \t\tif ( bone ) {\n\n    \t\t\treturn bone;\n\n    \t\t}\n    \t}\n\n    \t// search into node subtree.\n    \tif ( root.children ) {\n\n    \t\tvar searchNodeSubtree = function( children ) {\n\n    \t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\n    \t\t\t\tvar childNode = children[ i ];\n\n    \t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n    \t\t\t\t\treturn childNode;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n    \t\t\t\tif ( result ) return result;\n\n    \t\t\t}\n\n    \t\t\treturn null;\n\n    \t\t};\n\n    \t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n    \t\tif ( subTreeNode ) {\n\n    \t\t\treturn subTreeNode;\n\n    \t\t}\n\n    \t}\n\n    \treturn null;\n\n    };\n\n    /**\n     *\n     * A group of objects that receives a shared animation state.\n     *\n     * Usage:\n     *\n     * \t-\tAdd objects you would otherwise pass as 'root' to the\n     * \t\tconstructor or the .clipAction method of AnimationMixer.\n     *\n     * \t-\tInstead pass this object as 'root'.\n     *\n     * \t-\tYou can also add and remove objects later when the mixer\n     * \t\tis running.\n     *\n     * Note:\n     *\n     *  \tObjects of this class appear as one object to the mixer,\n     *  \tso cache control of the individual objects must be done\n     *  \ton the group.\n     *\n     * Limitation:\n     *\n     * \t- \tThe animated properties must be compatible among the\n     * \t\tall objects in the group.\n     *\n     *  -\tA single property can either be controlled through a\n     *  \ttarget group or directly, but not both.\n     *\n     * @author tschw\n     */\n\n    function AnimationObjectGroup( var_args ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \t// cached objects followed by the active ones\n    \tthis._objects = Array.prototype.slice.call( arguments );\n\n    \tthis.nCachedObjects_ = 0;\t\t\t// threshold\n    \t// note: read by PropertyBinding.Composite\n\n    \tvar indices = {};\n    \tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n    \tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\tindices[ arguments[ i ].uuid ] = i;\n\n    \t}\n\n    \tthis._paths = [];\t\t\t\t\t// inside: string\n    \tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n    \tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n    \tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n    \tvar scope = this;\n\n    \tthis.stats = {\n\n    \t\tobjects: {\n    \t\t\tget total() { return scope._objects.length; },\n    \t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n    \t\t},\n\n    \t\tget bindingsPerObject() { return scope._bindings.length; }\n\n    \t};\n\n    }\n\n    AnimationObjectGroup.prototype = {\n\n    \tconstructor: AnimationObjectGroup,\n\n    \tisAnimationObjectGroup: true,\n\n    \tadd: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tpaths = this._paths,\n    \t\t\tparsedPaths = this._parsedPaths,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index === undefined ) {\n\n    \t\t\t\t// unknown object -> add it to the ACTIVE region\n\n    \t\t\t\tindex = nObjects ++;\n    \t\t\t\tindicesByUUID[ uuid ] = index;\n    \t\t\t\tobjects.push( object );\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tbindings[ j ].push(\n    \t\t\t\t\t\t\tnew PropertyBinding(\n    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( index < nCachedObjects ) {\n\n    \t\t\t\tvar knownObject = objects[ index ];\n\n    \t\t\t\t// move existing object to the ACTIVE region\n\n    \t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n    \t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n    \t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n    \t\t\t\tobjects[ index ] = lastCachedObject;\n\n    \t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n    \t\t\t\tobjects[ firstActiveIndex ] = object;\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n    \t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n    \t\t\t\t\tif ( binding === undefined ) {\n\n    \t\t\t\t\t\t// since we do not bother to create new bindings\n    \t\t\t\t\t\t// for objects that are cached, the binding may\n    \t\t\t\t\t\t// or may not exist\n\n    \t\t\t\t\t\tbinding = new PropertyBinding(\n    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( objects[ index ] !== knownObject) {\n\n    \t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n    \t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n    \t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\n    \t\t\t} // else the object is already where we want it to be\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \tremove: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n    \t\t\t\t// move existing object into the CACHED region\n\n    \t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n    \t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n    \t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n    \t\t\t\tobjects[ index ] = firstActiveObject;\n\n    \t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n    \t\t\t\tobjects[ lastCachedIndex ] = object;\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n    \t\t\t\t\tbindingsForPath[ index ] = firstActive;\n    \t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \t// remove & forget\n    \tuncache: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index !== undefined ) {\n\n    \t\t\t\tdelete indicesByUUID[ uuid ];\n\n    \t\t\t\tif ( index < nCachedObjects ) {\n\n    \t\t\t\t\t// object is cached, shrink the CACHED region\n\n    \t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n    \t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n    \t\t\t\t\t\tlastIndex = -- nObjects,\n    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n    \t\t\t\t\t// last cached object takes this object's place\n    \t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n    \t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n    \t\t\t\t\t// last object goes to the activated slot and pop\n    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n    \t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n    \t\t\t\t\tobjects.pop();\n\n    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n    \t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n    \t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n    \t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n    \t\t\t\t\t\tbindingsForPath.pop();\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// object is active, just swap with the last and pop\n\n    \t\t\t\t\tvar lastIndex = -- nObjects,\n    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n    \t\t\t\t\tobjects[ index ] = lastObject;\n    \t\t\t\t\tobjects.pop();\n\n    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n    \t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n    \t\t\t\t\t\tbindingsForPath.pop();\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} // cached or active\n\n    \t\t\t} // if object is known\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \t// Internal interface used by befriended PropertyBinding.Composite:\n\n    \tsubscribe_: function( path, parsedPath ) {\n    \t\t// returns an array of bindings for the given path that is changed\n    \t\t// according to the contained objects in the group\n\n    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n    \t\t\tindex = indicesByPath[ path ],\n    \t\t\tbindings = this._bindings;\n\n    \t\tif ( index !== undefined ) return bindings[ index ];\n\n    \t\tvar paths = this._paths,\n    \t\t\tparsedPaths = this._parsedPaths,\n    \t\t\tobjects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tbindingsForPath = new Array( nObjects );\n\n    \t\tindex = bindings.length;\n\n    \t\tindicesByPath[ path ] = index;\n\n    \t\tpaths.push( path );\n    \t\tparsedPaths.push( parsedPath );\n    \t\tbindings.push( bindingsForPath );\n\n    \t\tfor ( var i = nCachedObjects,\n    \t\t\t\tn = objects.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = objects[ i ];\n\n    \t\t\tbindingsForPath[ i ] =\n    \t\t\t\t\tnew PropertyBinding( object, path, parsedPath );\n\n    \t\t}\n\n    \t\treturn bindingsForPath;\n\n    \t},\n\n    \tunsubscribe_: function( path ) {\n    \t\t// tells the group to forget about a property path and no longer\n    \t\t// update the array previously obtained with 'subscribe_'\n\n    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n    \t\t\tindex = indicesByPath[ path ];\n\n    \t\tif ( index !== undefined ) {\n\n    \t\t\tvar paths = this._paths,\n    \t\t\t\tparsedPaths = this._parsedPaths,\n    \t\t\t\tbindings = this._bindings,\n    \t\t\t\tlastBindingsIndex = bindings.length - 1,\n    \t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n    \t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n    \t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n    \t\t\tbindings[ index ] = lastBindings;\n    \t\t\tbindings.pop();\n\n    \t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n    \t\t\tparsedPaths.pop();\n\n    \t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n    \t\t\tpaths.pop();\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     *\n     * Action provided by AnimationMixer for scheduling clip playback on specific\n     * objects.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     *\n     */\n\n    function AnimationAction( mixer, clip, localRoot ) {\n\n    \tthis._mixer = mixer;\n    \tthis._clip = clip;\n    \tthis._localRoot = localRoot || null;\n\n    \tvar tracks = clip.tracks,\n    \t\tnTracks = tracks.length,\n    \t\tinterpolants = new Array( nTracks );\n\n    \tvar interpolantSettings = {\n    \t\t\tendingStart: \tZeroCurvatureEnding,\n    \t\t\tendingEnd:\t\tZeroCurvatureEnding\n    \t};\n\n    \tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n    \t\tvar interpolant = tracks[ i ].createInterpolant( null );\n    \t\tinterpolants[ i ] = interpolant;\n    \t\tinterpolant.settings = interpolantSettings;\n\n    \t}\n\n    \tthis._interpolantSettings = interpolantSettings;\n\n    \tthis._interpolants = interpolants;\t// bound by the mixer\n\n    \t// inside: PropertyMixer (managed by the mixer)\n    \tthis._propertyBindings = new Array( nTracks );\n\n    \tthis._cacheIndex = null;\t\t\t// for the memory manager\n    \tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n    \tthis._timeScaleInterpolant = null;\n    \tthis._weightInterpolant = null;\n\n    \tthis.loop = LoopRepeat;\n    \tthis._loopCount = -1;\n\n    \t// global mixer time when the action is to be started\n    \t// it's set back to 'null' upon start of the action\n    \tthis._startTime = null;\n\n    \t// scaled local time of the action\n    \t// gets clamped or wrapped to 0..clip.duration according to loop\n    \tthis.time = 0;\n\n    \tthis.timeScale = 1;\n    \tthis._effectiveTimeScale = 1;\n\n    \tthis.weight = 1;\n    \tthis._effectiveWeight = 1;\n\n    \tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n    \tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n    \tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\n    \tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n    \tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n    \tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n    };\n\n    AnimationAction.prototype = {\n\n    \tconstructor: AnimationAction,\n\n    \t// State & Scheduling\n\n    \tplay: function() {\n\n    \t\tthis._mixer._activateAction( this );\n\n    \t\treturn this;\n\n    \t},\n\n    \tstop: function() {\n\n    \t\tthis._mixer._deactivateAction( this );\n\n    \t\treturn this.reset();\n\n    \t},\n\n    \treset: function() {\n\n    \t\tthis.paused = false;\n    \t\tthis.enabled = true;\n\n    \t\tthis.time = 0;\t\t\t// restart clip\n    \t\tthis._loopCount = -1;\t// forget previous loops\n    \t\tthis._startTime = null;\t// forget scheduling\n\n    \t\treturn this.stopFading().stopWarping();\n\n    \t},\n\n    \tisRunning: function() {\n\n    \t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n    \t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n    \t},\n\n    \t// return true when play has been called\n    \tisScheduled: function() {\n\n    \t\treturn this._mixer._isActiveAction( this );\n\n    \t},\n\n    \tstartAt: function( time ) {\n\n    \t\tthis._startTime = time;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetLoop: function( mode, repetitions ) {\n\n    \t\tthis.loop = mode;\n    \t\tthis.repetitions = repetitions;\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Weight\n\n    \t// set the weight stopping any scheduled fading\n    \t// although .enabled = false yields an effective weight of zero, this\n    \t// method does *not* change .enabled, because it would be confusing\n    \tsetEffectiveWeight: function( weight ) {\n\n    \t\tthis.weight = weight;\n\n    \t\t// note: same logic as when updated at runtime\n    \t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n    \t\treturn this.stopFading();\n\n    \t},\n\n    \t// return the weight considering fading and .enabled\n    \tgetEffectiveWeight: function() {\n\n    \t\treturn this._effectiveWeight;\n\n    \t},\n\n    \tfadeIn: function( duration ) {\n\n    \t\treturn this._scheduleFading( duration, 0, 1 );\n\n    \t},\n\n    \tfadeOut: function( duration ) {\n\n    \t\treturn this._scheduleFading( duration, 1, 0 );\n\n    \t},\n\n    \tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\n    \t\tfadeOutAction.fadeOut( duration );\n    \t\tthis.fadeIn( duration );\n\n    \t\tif( warp ) {\n\n    \t\t\tvar fadeInDuration = this._clip.duration,\n    \t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n    \t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n    \t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n    \t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n    \t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\n    \t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n    \t},\n\n    \tstopFading: function() {\n\n    \t\tvar weightInterpolant = this._weightInterpolant;\n\n    \t\tif ( weightInterpolant !== null ) {\n\n    \t\t\tthis._weightInterpolant = null;\n    \t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Time Scale Control\n\n    \t// set the weight stopping any scheduled warping\n    \t// although .paused = true yields an effective time scale of zero, this\n    \t// method does *not* change .paused, because it would be confusing\n    \tsetEffectiveTimeScale: function( timeScale ) {\n\n    \t\tthis.timeScale = timeScale;\n    \t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \t// return the time scale considering warping and .paused\n    \tgetEffectiveTimeScale: function() {\n\n    \t\treturn this._effectiveTimeScale;\n\n    \t},\n\n    \tsetDuration: function( duration ) {\n\n    \t\tthis.timeScale = this._clip.duration / duration;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \tsyncWith: function( action ) {\n\n    \t\tthis.time = action.time;\n    \t\tthis.timeScale = action.timeScale;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \thalt: function( duration ) {\n\n    \t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n    \t},\n\n    \twarp: function( startTimeScale, endTimeScale, duration ) {\n\n    \t\tvar mixer = this._mixer, now = mixer.time,\n    \t\t\tinterpolant = this._timeScaleInterpolant,\n\n    \t\t\ttimeScale = this.timeScale;\n\n    \t\tif ( interpolant === null ) {\n\n    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n    \t\t\tthis._timeScaleInterpolant = interpolant;\n\n    \t\t}\n\n    \t\tvar times = interpolant.parameterPositions,\n    \t\t\tvalues = interpolant.sampleValues;\n\n    \t\ttimes[ 0 ] = now;\n    \t\ttimes[ 1 ] = now + duration;\n\n    \t\tvalues[ 0 ] = startTimeScale / timeScale;\n    \t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n    \t\treturn this;\n\n    \t},\n\n    \tstopWarping: function() {\n\n    \t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n    \t\tif ( timeScaleInterpolant !== null ) {\n\n    \t\t\tthis._timeScaleInterpolant = null;\n    \t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Object Accessors\n\n    \tgetMixer: function() {\n\n    \t\treturn this._mixer;\n\n    \t},\n\n    \tgetClip: function() {\n\n    \t\treturn this._clip;\n\n    \t},\n\n    \tgetRoot: function() {\n\n    \t\treturn this._localRoot || this._mixer._root;\n\n    \t},\n\n    \t// Interna\n\n    \t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n    \t\t// called by the mixer\n\n    \t\tvar startTime = this._startTime;\n\n    \t\tif ( startTime !== null ) {\n\n    \t\t\t// check for scheduled start of action\n\n    \t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n    \t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n    \t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n    \t\t\t}\n\n    \t\t\t// start\n\n    \t\t\tthis._startTime = null; // unschedule\n    \t\t\tdeltaTime = timeDirection * timeRunning;\n\n    \t\t}\n\n    \t\t// apply time scale and advance time\n\n    \t\tdeltaTime *= this._updateTimeScale( time );\n    \t\tvar clipTime = this._updateTime( deltaTime );\n\n    \t\t// note: _updateTime may disable the action resulting in\n    \t\t// an effective weight of 0\n\n    \t\tvar weight = this._updateWeight( time );\n\n    \t\tif ( weight > 0 ) {\n\n    \t\t\tvar interpolants = this._interpolants;\n    \t\t\tvar propertyMixers = this._propertyBindings;\n\n    \t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n    \t\t\t\tinterpolants[ j ].evaluate( clipTime );\n    \t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_updateWeight: function( time ) {\n\n    \t\tvar weight = 0;\n\n    \t\tif ( this.enabled ) {\n\n    \t\t\tweight = this.weight;\n    \t\t\tvar interpolant = this._weightInterpolant;\n\n    \t\t\tif ( interpolant !== null ) {\n\n    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n    \t\t\t\tweight *= interpolantValue;\n\n    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n    \t\t\t\t\tthis.stopFading();\n\n    \t\t\t\t\tif ( interpolantValue === 0 ) {\n\n    \t\t\t\t\t\t// faded out, disable\n    \t\t\t\t\t\tthis.enabled = false;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis._effectiveWeight = weight;\n    \t\treturn weight;\n\n    \t},\n\n    \t_updateTimeScale: function( time ) {\n\n    \t\tvar timeScale = 0;\n\n    \t\tif ( ! this.paused ) {\n\n    \t\t\ttimeScale = this.timeScale;\n\n    \t\t\tvar interpolant = this._timeScaleInterpolant;\n\n    \t\t\tif ( interpolant !== null ) {\n\n    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n    \t\t\t\ttimeScale *= interpolantValue;\n\n    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n    \t\t\t\t\tthis.stopWarping();\n\n    \t\t\t\t\tif ( timeScale === 0 ) {\n\n    \t\t\t\t\t\t// motion has halted, pause\n    \t\t\t\t\t\tthis.paused = true;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// warp done - apply final time scale\n    \t\t\t\t\t\tthis.timeScale = timeScale;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis._effectiveTimeScale = timeScale;\n    \t\treturn timeScale;\n\n    \t},\n\n    \t_updateTime: function( deltaTime ) {\n\n    \t\tvar time = this.time + deltaTime;\n\n    \t\tif ( deltaTime === 0 ) return time;\n\n    \t\tvar duration = this._clip.duration,\n\n    \t\t\tloop = this.loop,\n    \t\t\tloopCount = this._loopCount;\n\n    \t\tif ( loop === LoopOnce ) {\n\n    \t\t\tif ( loopCount === -1 ) {\n    \t\t\t\t// just started\n\n    \t\t\t\tthis.loopCount = 0;\n    \t\t\t\tthis._setEndings( true, true, false );\n\n    \t\t\t}\n\n    \t\t\thandle_stop: {\n\n    \t\t\t\tif ( time >= duration ) {\n\n    \t\t\t\t\ttime = duration;\n\n    \t\t\t\t} else if ( time < 0 ) {\n\n    \t\t\t\t\ttime = 0;\n\n    \t\t\t\t} else break handle_stop;\n\n    \t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n    \t\t\t\telse this.enabled = false;\n\n    \t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\ttype: 'finished', action: this,\n    \t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n    \t\t\t\t} );\n\n    \t\t\t}\n\n    \t\t} else { // repetitive Repeat or PingPong\n\n    \t\t\tvar pingPong = ( loop === LoopPingPong );\n\n    \t\t\tif ( loopCount === -1 ) {\n    \t\t\t\t// just started\n\n    \t\t\t\tif ( deltaTime >= 0 ) {\n\n    \t\t\t\t\tloopCount = 0;\n\n    \t\t\t\t\tthis._setEndings(\n    \t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// when looping in reverse direction, the initial\n    \t\t\t\t\t// transition through zero counts as a repetition,\n    \t\t\t\t\t// so leave loopCount at -1\n\n    \t\t\t\t\tthis._setEndings(\n    \t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( time >= duration || time < 0 ) {\n    \t\t\t\t// wrap around\n\n    \t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n    \t\t\t\ttime -= duration * loopDelta;\n\n    \t\t\t\tloopCount += Math.abs( loopDelta );\n\n    \t\t\t\tvar pending = this.repetitions - loopCount;\n\n    \t\t\t\tif ( pending < 0 ) {\n    \t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n    \t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n    \t\t\t\t\telse this.enabled = false;\n\n    \t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n    \t\t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\t\ttype: 'finished', action: this,\n    \t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n    \t\t\t\t\t} );\n\n    \t\t\t\t} else {\n    \t\t\t\t\t// keep running\n\n    \t\t\t\t\tif ( pending === 0 ) {\n    \t\t\t\t\t\t// entering the last round\n\n    \t\t\t\t\t\tvar atStart = deltaTime < 0;\n    \t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tthis._loopCount = loopCount;\n\n    \t\t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n    \t\t\t\t// invert time for the \"pong round\"\n\n    \t\t\t\tthis.time = time;\n    \t\t\t\treturn duration - time;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.time = time;\n    \t\treturn time;\n\n    \t},\n\n    \t_setEndings: function( atStart, atEnd, pingPong ) {\n\n    \t\tvar settings = this._interpolantSettings;\n\n    \t\tif ( pingPong ) {\n\n    \t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n    \t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\n    \t\t} else {\n\n    \t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n    \t\t\tif ( atStart ) {\n\n    \t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n    \t\t\t} else {\n\n    \t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n    \t\t\t}\n\n    \t\t\tif ( atEnd ) {\n\n    \t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n    \t\t\t} else {\n\n    \t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_scheduleFading: function( duration, weightNow, weightThen ) {\n\n    \t\tvar mixer = this._mixer, now = mixer.time,\n    \t\t\tinterpolant = this._weightInterpolant;\n\n    \t\tif ( interpolant === null ) {\n\n    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n    \t\t\tthis._weightInterpolant = interpolant;\n\n    \t\t}\n\n    \t\tvar times = interpolant.parameterPositions,\n    \t\t\tvalues = interpolant.sampleValues;\n\n    \t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n    \t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     *\n     * Player for AnimationClips.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function AnimationMixer( root ) {\n\n    \tthis._root = root;\n    \tthis._initMemoryManager();\n    \tthis._accuIndex = 0;\n\n    \tthis.time = 0;\n\n    \tthis.timeScale = 1.0;\n\n    }\n\n    Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {\n\n    \t// return an action for a clip optionally using a custom root target\n    \t// object (this method allocates a lot of dynamic memory in case a\n    \t// previously unknown clip/root combination is specified)\n    \tclipAction: function( clip, optionalRoot ) {\n\n    \t\tvar root = optionalRoot || this._root,\n    \t\t\trootUuid = root.uuid,\n\n    \t\t\tclipObject = typeof clip === 'string' ?\n    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n    \t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n    \t\t\tprototypeAction = null;\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\tvar existingAction =\n    \t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n    \t\t\tif ( existingAction !== undefined ) {\n\n    \t\t\t\treturn existingAction;\n\n    \t\t\t}\n\n    \t\t\t// we know the clip, so we don't have to parse all\n    \t\t\t// the bindings again but can just copy\n    \t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n    \t\t\t// also, take the clip from the prototype action\n    \t\t\tif ( clipObject === null )\n    \t\t\t\tclipObject = prototypeAction._clip;\n\n    \t\t}\n\n    \t\t// clip must be known when specified via string\n    \t\tif ( clipObject === null ) return null;\n\n    \t\t// allocate all resources required to run it\n    \t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n    \t\tthis._bindAction( newAction, prototypeAction );\n\n    \t\t// and make the action known to the memory manager\n    \t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n    \t\treturn newAction;\n\n    \t},\n\n    \t// get an existing action\n    \texistingAction: function( clip, optionalRoot ) {\n\n    \t\tvar root = optionalRoot || this._root,\n    \t\t\trootUuid = root.uuid,\n\n    \t\t\tclipObject = typeof clip === 'string' ?\n    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n    \t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t},\n\n    \t// deactivates all previously scheduled actions\n    \tstopAllAction: function() {\n\n    \t\tvar actions = this._actions,\n    \t\t\tnActions = this._nActiveActions,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = this._nActiveBindings;\n\n    \t\tthis._nActiveActions = 0;\n    \t\tthis._nActiveBindings = 0;\n\n    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n    \t\t\tactions[ i ].reset();\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n    \t\t\tbindings[ i ].useCount = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// advance the time and update apply the animation\n    \tupdate: function( deltaTime ) {\n\n    \t\tdeltaTime *= this.timeScale;\n\n    \t\tvar actions = this._actions,\n    \t\t\tnActions = this._nActiveActions,\n\n    \t\t\ttime = this.time += deltaTime,\n    \t\t\ttimeDirection = Math.sign( deltaTime ),\n\n    \t\t\taccuIndex = this._accuIndex ^= 1;\n\n    \t\t// run active actions\n\n    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n    \t\t\tvar action = actions[ i ];\n\n    \t\t\tif ( action.enabled ) {\n\n    \t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// update scene graph\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tnBindings = this._nActiveBindings;\n\n    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n    \t\t\tbindings[ i ].apply( accuIndex );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// return this mixer's root target object\n    \tgetRoot: function() {\n\n    \t\treturn this._root;\n\n    \t},\n\n    \t// free all resources specific to a particular clip\n    \tuncacheClip: function( clip ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tclipUuid = clip.uuid,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\t// note: just calling _removeInactiveAction would mess up the\n    \t\t\t// iteration state and also require updating the state we can\n    \t\t\t// just throw away\n\n    \t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n    \t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar action = actionsToRemove[ i ];\n\n    \t\t\t\tthis._deactivateAction( action );\n\n    \t\t\t\tvar cacheIndex = action._cacheIndex,\n    \t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n    \t\t\t\taction._cacheIndex = null;\n    \t\t\t\taction._byClipCacheIndex = null;\n\n    \t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n    \t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n    \t\t\t\tactions.pop();\n\n    \t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n    \t\t\t}\n\n    \t\t\tdelete actionsByClip[ clipUuid ];\n\n    \t\t}\n\n    \t},\n\n    \t// free all resources specific to a particular root target object\n    \tuncacheRoot: function( root ) {\n\n    \t\tvar rootUuid = root.uuid,\n    \t\t\tactionsByClip = this._actionsByClip;\n\n    \t\tfor ( var clipUuid in actionsByClip ) {\n\n    \t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n    \t\t\t\taction = actionByRoot[ rootUuid ];\n\n    \t\t\tif ( action !== undefined ) {\n\n    \t\t\t\tthis._deactivateAction( action );\n    \t\t\t\tthis._removeInactiveAction( action );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n    \t\tif ( bindingByName !== undefined ) {\n\n    \t\t\tfor ( var trackName in bindingByName ) {\n\n    \t\t\t\tvar binding = bindingByName[ trackName ];\n    \t\t\t\tbinding.restoreOriginalState();\n    \t\t\t\tthis._removeInactiveBinding( binding );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t// remove a targeted clip from the cache\n    \tuncacheAction: function( clip, optionalRoot ) {\n\n    \t\tvar action = this.existingAction( clip, optionalRoot );\n\n    \t\tif ( action !== null ) {\n\n    \t\t\tthis._deactivateAction( action );\n    \t\t\tthis._removeInactiveAction( action );\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    // Implementation details:\n\n    Object.assign( AnimationMixer.prototype, {\n\n    \t_bindAction: function( action, prototypeAction ) {\n\n    \t\tvar root = action._localRoot || this._root,\n    \t\t\ttracks = action._clip.tracks,\n    \t\t\tnTracks = tracks.length,\n    \t\t\tbindings = action._propertyBindings,\n    \t\t\tinterpolants = action._interpolants,\n    \t\t\trootUuid = root.uuid,\n    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n    \t\tif ( bindingsByName === undefined ) {\n\n    \t\t\tbindingsByName = {};\n    \t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n    \t\t\tvar track = tracks[ i ],\n    \t\t\t\ttrackName = track.name,\n    \t\t\t\tbinding = bindingsByName[ trackName ];\n\n    \t\t\tif ( binding !== undefined ) {\n\n    \t\t\t\tbindings[ i ] = binding;\n\n    \t\t\t} else {\n\n    \t\t\t\tbinding = bindings[ i ];\n\n    \t\t\t\tif ( binding !== undefined ) {\n\n    \t\t\t\t\t// existing binding, make sure the cache knows\n\n    \t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n    \t\t\t\t\t\t++ binding.referenceCount;\n    \t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tcontinue;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar path = prototypeAction && prototypeAction.\n    \t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n    \t\t\t\tbinding = new PropertyMixer(\n    \t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n    \t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n    \t\t\t\t++ binding.referenceCount;\n    \t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n    \t\t\t\tbindings[ i ] = binding;\n\n    \t\t\t}\n\n    \t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n    \t\t}\n\n    \t},\n\n    \t_activateAction: function( action ) {\n\n    \t\tif ( ! this._isActiveAction( action ) ) {\n\n    \t\t\tif ( action._cacheIndex === null ) {\n\n    \t\t\t\t// this action has been forgotten by the cache, but the user\n    \t\t\t\t// appears to be still using it -> rebind\n\n    \t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n    \t\t\t\t\tclipUuid = action._clip.uuid,\n    \t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n    \t\t\t\tthis._bindAction( action,\n    \t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n    \t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n    \t\t\t}\n\n    \t\t\tvar bindings = action._propertyBindings;\n\n    \t\t\t// increment reference counts / sort out state\n    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar binding = bindings[ i ];\n\n    \t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n    \t\t\t\t\tthis._lendBinding( binding );\n    \t\t\t\t\tbinding.saveOriginalState();\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis._lendAction( action );\n\n    \t\t}\n\n    \t},\n\n    \t_deactivateAction: function( action ) {\n\n    \t\tif ( this._isActiveAction( action ) ) {\n\n    \t\t\tvar bindings = action._propertyBindings;\n\n    \t\t\t// decrement reference counts / sort out state\n    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar binding = bindings[ i ];\n\n    \t\t\t\tif ( -- binding.useCount === 0 ) {\n\n    \t\t\t\t\tbinding.restoreOriginalState();\n    \t\t\t\t\tthis._takeBackBinding( binding );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis._takeBackAction( action );\n\n    \t\t}\n\n    \t},\n\n    \t// Memory manager\n\n    \t_initMemoryManager: function() {\n\n    \t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n    \t\tthis._nActiveActions = 0;\n\n    \t\tthis._actionsByClip = {};\n    \t\t// inside:\n    \t\t// {\n    \t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n    \t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n    \t\t// }\n\n\n    \t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n    \t\tthis._nActiveBindings = 0;\n\n    \t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n    \t\tthis._controlInterpolants = []; // same game as above\n    \t\tthis._nActiveControlInterpolants = 0;\n\n    \t\tvar scope = this;\n\n    \t\tthis.stats = {\n\n    \t\t\tactions: {\n    \t\t\t\tget total() { return scope._actions.length; },\n    \t\t\t\tget inUse() { return scope._nActiveActions; }\n    \t\t\t},\n    \t\t\tbindings: {\n    \t\t\t\tget total() { return scope._bindings.length; },\n    \t\t\t\tget inUse() { return scope._nActiveBindings; }\n    \t\t\t},\n    \t\t\tcontrolInterpolants: {\n    \t\t\t\tget total() { return scope._controlInterpolants.length; },\n    \t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n    \t\t\t}\n\n    \t\t};\n\n    \t},\n\n    \t// Memory management for AnimationAction objects\n\n    \t_isActiveAction: function( action ) {\n\n    \t\tvar index = action._cacheIndex;\n    \t\treturn index !== null && index < this._nActiveActions;\n\n    \t},\n\n    \t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip === undefined ) {\n\n    \t\t\tactionsForClip = {\n\n    \t\t\t\tknownActions: [ action ],\n    \t\t\t\tactionByRoot: {}\n\n    \t\t\t};\n\n    \t\t\taction._byClipCacheIndex = 0;\n\n    \t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n    \t\t} else {\n\n    \t\t\tvar knownActions = actionsForClip.knownActions;\n\n    \t\t\taction._byClipCacheIndex = knownActions.length;\n    \t\t\tknownActions.push( action );\n\n    \t\t}\n\n    \t\taction._cacheIndex = actions.length;\n    \t\tactions.push( action );\n\n    \t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n    \t},\n\n    \t_removeInactiveAction: function( action ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n    \t\t\tcacheIndex = action._cacheIndex;\n\n    \t\tlastInactiveAction._cacheIndex = cacheIndex;\n    \t\tactions[ cacheIndex ] = lastInactiveAction;\n    \t\tactions.pop();\n\n    \t\taction._cacheIndex = null;\n\n\n    \t\tvar clipUuid = action._clip.uuid,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ],\n    \t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n    \t\t\tlastKnownAction =\n    \t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n    \t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n    \t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n    \t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n    \t\tknownActionsForClip.pop();\n\n    \t\taction._byClipCacheIndex = null;\n\n\n    \t\tvar actionByRoot = actionsForClip.actionByRoot,\n    \t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\n    \t\tdelete actionByRoot[ rootUuid ];\n\n    \t\tif ( knownActionsForClip.length === 0 ) {\n\n    \t\t\tdelete actionsByClip[ clipUuid ];\n\n    \t\t}\n\n    \t\tthis._removeInactiveBindingsForAction( action );\n\n    \t},\n\n    \t_removeInactiveBindingsForAction: function( action ) {\n\n    \t\tvar bindings = action._propertyBindings;\n    \t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tvar binding = bindings[ i ];\n\n    \t\t\tif ( -- binding.referenceCount === 0 ) {\n\n    \t\t\t\tthis._removeInactiveBinding( binding );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_lendAction: function( action ) {\n\n    \t\t// [ active actions |  inactive actions  ]\n    \t\t// [  active actions >| inactive actions ]\n    \t\t//                 s        a\n    \t\t//                  <-swap->\n    \t\t//                 a        s\n\n    \t\tvar actions = this._actions,\n    \t\t\tprevIndex = action._cacheIndex,\n\n    \t\t\tlastActiveIndex = this._nActiveActions ++,\n\n    \t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n    \t\taction._cacheIndex = lastActiveIndex;\n    \t\tactions[ lastActiveIndex ] = action;\n\n    \t\tfirstInactiveAction._cacheIndex = prevIndex;\n    \t\tactions[ prevIndex ] = firstInactiveAction;\n\n    \t},\n\n    \t_takeBackAction: function( action ) {\n\n    \t\t// [  active actions  | inactive actions ]\n    \t\t// [ active actions |< inactive actions  ]\n    \t\t//        a        s\n    \t\t//         <-swap->\n    \t\t//        s        a\n\n    \t\tvar actions = this._actions,\n    \t\t\tprevIndex = action._cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n    \t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n    \t\taction._cacheIndex = firstInactiveIndex;\n    \t\tactions[ firstInactiveIndex ] = action;\n\n    \t\tlastActiveAction._cacheIndex = prevIndex;\n    \t\tactions[ prevIndex ] = lastActiveAction;\n\n    \t},\n\n    \t// Memory management for PropertyMixer objects\n\n    \t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\n    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n    \t\t\tbindings = this._bindings;\n\n    \t\tif ( bindingByName === undefined ) {\n\n    \t\t\tbindingByName = {};\n    \t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n    \t\t}\n\n    \t\tbindingByName[ trackName ] = binding;\n\n    \t\tbinding._cacheIndex = bindings.length;\n    \t\tbindings.push( binding );\n\n    \t},\n\n    \t_removeInactiveBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tpropBinding = binding.binding,\n    \t\t\trootUuid = propBinding.rootNode.uuid,\n    \t\t\ttrackName = propBinding.path,\n    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n    \t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n    \t\t\tcacheIndex = binding._cacheIndex;\n\n    \t\tlastInactiveBinding._cacheIndex = cacheIndex;\n    \t\tbindings[ cacheIndex ] = lastInactiveBinding;\n    \t\tbindings.pop();\n\n    \t\tdelete bindingByName[ trackName ];\n\n    \t\tremove_empty_map: {\n\n    \t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\n    \t\t\tdelete bindingsByRoot[ rootUuid ];\n\n    \t\t}\n\n    \t},\n\n    \t_lendBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tprevIndex = binding._cacheIndex,\n\n    \t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n    \t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n    \t\tbinding._cacheIndex = lastActiveIndex;\n    \t\tbindings[ lastActiveIndex ] = binding;\n\n    \t\tfirstInactiveBinding._cacheIndex = prevIndex;\n    \t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n    \t},\n\n    \t_takeBackBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tprevIndex = binding._cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n    \t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n    \t\tbinding._cacheIndex = firstInactiveIndex;\n    \t\tbindings[ firstInactiveIndex ] = binding;\n\n    \t\tlastActiveBinding._cacheIndex = prevIndex;\n    \t\tbindings[ prevIndex ] = lastActiveBinding;\n\n    \t},\n\n\n    \t// Memory management of Interpolants for weight and time scale\n\n    \t_lendControlInterpolant: function() {\n\n    \t\tvar interpolants = this._controlInterpolants,\n    \t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n    \t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n    \t\tif ( interpolant === undefined ) {\n\n    \t\t\tinterpolant = new LinearInterpolant(\n    \t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n    \t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n    \t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n    \t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n    \t\t}\n\n    \t\treturn interpolant;\n\n    \t},\n\n    \t_takeBackControlInterpolant: function( interpolant ) {\n\n    \t\tvar interpolants = this._controlInterpolants,\n    \t\t\tprevIndex = interpolant.__cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n    \t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n    \t\tinterpolant.__cacheIndex = firstInactiveIndex;\n    \t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n    \t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n    \t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n    \t},\n\n    \t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Uniform( value ) {\n\n    \tif ( typeof value === 'string' ) {\n\n    \t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n    \t\tvalue = arguments[ 1 ];\n\n    \t}\n\n    \tthis.value = value;\n\n    \tthis.dynamic = false;\n\n    }\n\n    Uniform.prototype = {\n\n    \tconstructor: Uniform,\n\n    \tonUpdate: function ( callback ) {\n\n    \t\tthis.dynamic = true;\n    \t\tthis.onUpdateCallback = callback;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedBufferGeometry() {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'InstancedBufferGeometry';\n    \tthis.maxInstancedCount = undefined;\n\n    }\n\n    InstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;\n\n    InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\n    InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\n    \tthis.groups.push( {\n\n    \t\tstart: start,\n    \t\tcount: count,\n    \t\tinstances: instances\n\n    \t} );\n\n    };\n\n    InstancedBufferGeometry.prototype.copy = function ( source ) {\n\n    \tvar index = source.index;\n\n    \tif ( index !== null ) {\n\n    \t\tthis.setIndex( index.clone() );\n\n    \t}\n\n    \tvar attributes = source.attributes;\n\n    \tfor ( var name in attributes ) {\n\n    \t\tvar attribute = attributes[ name ];\n    \t\tthis.addAttribute( name, attribute.clone() );\n\n    \t}\n\n    \tvar groups = source.groups;\n\n    \tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\tvar group = groups[ i ];\n    \t\tthis.addGroup( group.start, group.count, group.instances );\n\n    \t}\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.data = interleavedBuffer;\n    \tthis.itemSize = itemSize;\n    \tthis.offset = offset;\n\n    \tthis.normalized = normalized === true;\n\n    }\n\n\n    InterleavedBufferAttribute.prototype = {\n\n    \tconstructor: InterleavedBufferAttribute,\n\n    \tisInterleavedBufferAttribute: true,\n\n    \tget count() {\n\n    \t\treturn this.data.count;\n\n    \t},\n\n    \tget array() {\n\n    \t\treturn this.data.array;\n\n    \t},\n\n    \tsetX: function ( index, x ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( index, y ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( index, z ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetW: function ( index, w ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetX: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n    \t},\n\n    \tgetY: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n    \t},\n\n    \tgetZ: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n    \t},\n\n    \tgetW: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n    \t},\n\n    \tsetXY: function ( index, x, y ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZ: function ( index, x, y, z ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n    \t\tthis.data.array[ index + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZW: function ( index, x, y, z, w ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n    \t\tthis.data.array[ index + 2 ] = z;\n    \t\tthis.data.array[ index + 3 ] = w;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InterleavedBuffer( array, stride ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.array = array;\n    \tthis.stride = stride;\n    \tthis.count = array !== undefined ? array.length / stride : 0;\n\n    \tthis.dynamic = false;\n    \tthis.updateRange = { offset: 0, count: - 1 };\n\n    \tthis.version = 0;\n\n    }\n\n    InterleavedBuffer.prototype = {\n\n    \tconstructor: InterleavedBuffer,\n\n    \tisInterleavedBuffer: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tsetDynamic: function ( value ) {\n\n    \t\tthis.dynamic = value;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.array = new source.array.constructor( source.array );\n    \t\tthis.count = source.count;\n    \t\tthis.stride = source.stride;\n    \t\tthis.dynamic = source.dynamic;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyAt: function ( index1, attribute, index2 ) {\n\n    \t\tindex1 *= this.stride;\n    \t\tindex2 *= attribute.stride;\n\n    \t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tset: function ( value, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.array.set( value, offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n    \tInterleavedBuffer.call( this, array, stride );\n\n    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\n    }\n\n    InstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );\n    InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;\n\n    InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\n    InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\n    \tInterleavedBuffer.prototype.copy.call( this, source );\n\n    \tthis.meshPerAttribute = source.meshPerAttribute;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\n    \tBufferAttribute.call( this, array, itemSize );\n\n    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\n    }\n\n    InstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n    InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;\n\n    InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\n    InstancedBufferAttribute.prototype.copy = function ( source ) {\n\n    \tBufferAttribute.prototype.copy.call( this, source );\n\n    \tthis.meshPerAttribute = source.meshPerAttribute;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author bhouston / http://clara.io/\n     * @author stephomi / http://stephaneginier.com/\n     */\n\n    function Raycaster( origin, direction, near, far ) {\n\n    \tthis.ray = new Ray( origin, direction );\n    \t// direction is assumed to be normalized (for accurate distance calculations)\n\n    \tthis.near = near || 0;\n    \tthis.far = far || Infinity;\n\n    \tthis.params = {\n    \t\tMesh: {},\n    \t\tLine: {},\n    \t\tLOD: {},\n    \t\tPoints: { threshold: 1 },\n    \t\tSprite: {}\n    \t};\n\n    \tObject.defineProperties( this.params, {\n    \t\tPointCloud: {\n    \t\t\tget: function () {\n    \t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n    \t\t\t\treturn this.Points;\n    \t\t\t}\n    \t\t}\n    \t} );\n\n    }\n\n    function ascSort( a, b ) {\n\n    \treturn a.distance - b.distance;\n\n    }\n\n    function intersectObject( object, raycaster, intersects, recursive ) {\n\n    \tif ( object.visible === false ) return;\n\n    \tobject.raycast( raycaster, intersects );\n\n    \tif ( recursive === true ) {\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    //\n\n    Raycaster.prototype = {\n\n    \tconstructor: Raycaster,\n\n    \tlinePrecision: 1,\n\n    \tset: function ( origin, direction ) {\n\n    \t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n    \t\tthis.ray.set( origin, direction );\n\n    \t},\n\n    \tsetFromCamera: function ( coords, camera ) {\n\n    \t\tif ( (camera && camera.isPerspectiveCamera) ) {\n\n    \t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n    \t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n    \t\t} else if ( (camera && camera.isOrthographicCamera) ) {\n\n    \t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n    \t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n    \t\t} else {\n\n    \t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n    \t\t}\n\n    \t},\n\n    \tintersectObject: function ( object, recursive ) {\n\n    \t\tvar intersects = [];\n\n    \t\tintersectObject( object, this, intersects, recursive );\n\n    \t\tintersects.sort( ascSort );\n\n    \t\treturn intersects;\n\n    \t},\n\n    \tintersectObjects: function ( objects, recursive ) {\n\n    \t\tvar intersects = [];\n\n    \t\tif ( Array.isArray( objects ) === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n    \t\t\treturn intersects;\n\n    \t\t}\n\n    \t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n    \t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n    \t\t}\n\n    \t\tintersects.sort( ascSort );\n\n    \t\treturn intersects;\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Clock( autoStart ) {\n\n    \tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n    \tthis.startTime = 0;\n    \tthis.oldTime = 0;\n    \tthis.elapsedTime = 0;\n\n    \tthis.running = false;\n\n    }\n\n    Clock.prototype = {\n\n    \tconstructor: Clock,\n\n    \tstart: function () {\n\n    \t\tthis.startTime = ( performance || Date ).now();\n\n    \t\tthis.oldTime = this.startTime;\n    \t\tthis.running = true;\n\n    \t},\n\n    \tstop: function () {\n\n    \t\tthis.getElapsedTime();\n    \t\tthis.running = false;\n\n    \t},\n\n    \tgetElapsedTime: function () {\n\n    \t\tthis.getDelta();\n    \t\treturn this.elapsedTime;\n\n    \t},\n\n    \tgetDelta: function () {\n\n    \t\tvar diff = 0;\n\n    \t\tif ( this.autoStart && ! this.running ) {\n\n    \t\t\tthis.start();\n\n    \t\t}\n\n    \t\tif ( this.running ) {\n\n    \t\t\tvar newTime = ( performance || Date ).now();\n\n    \t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n    \t\t\tthis.oldTime = newTime;\n\n    \t\t\tthis.elapsedTime += diff;\n\n    \t\t}\n\n    \t\treturn diff;\n\n    \t}\n\n    };\n\n    /**\n     * Spline from Tween.js, slightly optimized (and trashed)\n     * http://sole.github.com/tween.js/examples/05_spline.html\n     *\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Spline( points ) {\n\n    \tthis.points = points;\n\n    \tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n    \tpoint, intPoint, weight, w2, w3,\n    \tpa, pb, pc, pd;\n\n    \tthis.initFromArray = function ( a ) {\n\n    \t\tthis.points = [];\n\n    \t\tfor ( var i = 0; i < a.length; i ++ ) {\n\n    \t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\n    \t\t}\n\n    \t};\n\n    \tthis.getPoint = function ( k ) {\n\n    \t\tpoint = ( this.points.length - 1 ) * k;\n    \t\tintPoint = Math.floor( point );\n    \t\tweight = point - intPoint;\n\n    \t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n    \t\tc[ 1 ] = intPoint;\n    \t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n    \t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\n    \t\tpa = this.points[ c[ 0 ] ];\n    \t\tpb = this.points[ c[ 1 ] ];\n    \t\tpc = this.points[ c[ 2 ] ];\n    \t\tpd = this.points[ c[ 3 ] ];\n\n    \t\tw2 = weight * weight;\n    \t\tw3 = weight * w2;\n\n    \t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n    \t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n    \t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\n    \t\treturn v3;\n\n    \t};\n\n    \tthis.getControlPointsArray = function () {\n\n    \t\tvar i, p, l = this.points.length,\n    \t\t\tcoords = [];\n\n    \t\tfor ( i = 0; i < l; i ++ ) {\n\n    \t\t\tp = this.points[ i ];\n    \t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\n    \t\t}\n\n    \t\treturn coords;\n\n    \t};\n\n    \t// approximate length by summing linear segments\n\n    \tthis.getLength = function ( nSubDivisions ) {\n\n    \t\tvar i, index, nSamples, position,\n    \t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n    \t\t\toldPosition = new Vector3(),\n    \t\t\ttmpVec = new Vector3(),\n    \t\t\tchunkLengths = [],\n    \t\t\ttotalLength = 0;\n\n    \t\t// first point has 0 length\n\n    \t\tchunkLengths[ 0 ] = 0;\n\n    \t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\n    \t\tnSamples = this.points.length * nSubDivisions;\n\n    \t\toldPosition.copy( this.points[ 0 ] );\n\n    \t\tfor ( i = 1; i < nSamples; i ++ ) {\n\n    \t\t\tindex = i / nSamples;\n\n    \t\t\tposition = this.getPoint( index );\n    \t\t\ttmpVec.copy( position );\n\n    \t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\n    \t\t\toldPosition.copy( position );\n\n    \t\t\tpoint = ( this.points.length - 1 ) * index;\n    \t\t\tintPoint = Math.floor( point );\n\n    \t\t\tif ( intPoint !== oldIntPoint ) {\n\n    \t\t\t\tchunkLengths[ intPoint ] = totalLength;\n    \t\t\t\toldIntPoint = intPoint;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// last point ends with total length\n\n    \t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\n    \t\treturn { chunks: chunkLengths, total: totalLength };\n\n    \t};\n\n    \tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\n    \t\tvar i, j,\n    \t\t\tindex, indexCurrent, indexNext,\n    \t\t\trealDistance,\n    \t\t\tsampling, position,\n    \t\t\tnewpoints = [],\n    \t\t\ttmpVec = new Vector3(),\n    \t\t\tsl = this.getLength();\n\n    \t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\n    \t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\n    \t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n    \t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\n    \t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\n    \t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\n    \t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n    \t\t\tindexNext = i / ( this.points.length - 1 );\n\n    \t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\n    \t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\n    \t\t\t\tposition = this.getPoint( index );\n    \t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\n    \t\t\t}\n\n    \t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\n    \t\t}\n\n    \t\tthis.points = newpoints;\n\n    \t};\n\n    \t// Catmull-Rom\n\n    \tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\n    \t\tvar v0 = ( p2 - p0 ) * 0.5,\n    \t\t\tv1 = ( p3 - p1 ) * 0.5;\n\n    \t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n    \t}\n\n    }\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n     *\n     * The poles (phi) are at the positive and negative y axis.\n     * The equator starts at positive z.\n     */\n\n    function Spherical( radius, phi, theta ) {\n\n    \tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n    \tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n    \tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n    \treturn this;\n\n    }\n\n    Spherical.prototype = {\n\n    \tconstructor: Spherical,\n\n    \tset: function ( radius, phi, theta ) {\n\n    \t\tthis.radius = radius;\n    \t\tthis.phi = phi;\n    \t\tthis.theta = theta;\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( other ) {\n\n    \t\tthis.radius.copy( other.radius );\n    \t\tthis.phi.copy( other.phi );\n    \t\tthis.theta.copy( other.theta );\n\n    \t\treturn this;\n\n    \t},\n\n    \t// restrict phi to be betwee EPS and PI-EPS\n    \tmakeSafe: function() {\n\n    \t\tvar EPS = 0.000001;\n    \t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromVector3: function( vec3 ) {\n\n    \t\tthis.radius = vec3.length();\n\n    \t\tif ( this.radius === 0 ) {\n\n    \t\t\tthis.theta = 0;\n    \t\t\tthis.phi = 0;\n\n    \t\t} else {\n\n    \t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n    \t\t\tthis.phi = Math.acos( exports.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    };\n\n    /**\r\n     * @author alteredq / http://alteredqualia.com/\r\n     */\r\n\r\n    function MorphBlendMesh( geometry, material ) {\n\r\n    \tMesh.call( this, geometry, material );\r\n\r\n    \tthis.animationsMap = {};\r\n    \tthis.animationsList = [];\r\n\r\n    \t// prepare default animation\r\n    \t// (all frames played together in 1 second)\r\n\r\n    \tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n    \tvar name = \"__default\";\r\n\r\n    \tvar startFrame = 0;\r\n    \tvar endFrame = numFrames - 1;\r\n\r\n    \tvar fps = numFrames / 1;\r\n\r\n    \tthis.createAnimation( name, startFrame, endFrame, fps );\r\n    \tthis.setAnimationWeight( name, 1 );\r\n\r\n    }\r\n\r\n    MorphBlendMesh.prototype = Object.create( Mesh.prototype );\r\n    MorphBlendMesh.prototype.constructor = MorphBlendMesh;\r\n\r\n    MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n    \tvar animation = {\r\n\r\n    \t\tstart: start,\r\n    \t\tend: end,\r\n\r\n    \t\tlength: end - start + 1,\r\n\r\n    \t\tfps: fps,\r\n    \t\tduration: ( end - start ) / fps,\r\n\r\n    \t\tlastFrame: 0,\r\n    \t\tcurrentFrame: 0,\r\n\r\n    \t\tactive: false,\r\n\r\n    \t\ttime: 0,\r\n    \t\tdirection: 1,\r\n    \t\tweight: 1,\r\n\r\n    \t\tdirectionBackwards: false,\r\n    \t\tmirroredLoop: false\r\n\r\n    \t};\r\n\r\n    \tthis.animationsMap[ name ] = animation;\r\n    \tthis.animationsList.push( animation );\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n    \tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\r\n    \tvar firstAnimation, frameRanges = {};\r\n\r\n    \tvar geometry = this.geometry;\r\n\r\n    \tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n    \t\tvar morph = geometry.morphTargets[ i ];\r\n    \t\tvar chunks = morph.name.match( pattern );\r\n\r\n    \t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n    \t\t\tvar name = chunks[ 1 ];\r\n\r\n    \t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\r\n    \t\t\tvar range = frameRanges[ name ];\r\n\r\n    \t\t\tif ( i < range.start ) range.start = i;\r\n    \t\t\tif ( i > range.end ) range.end = i;\r\n\r\n    \t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n    \t\t}\r\n\r\n    \t}\r\n\r\n    \tfor ( var name in frameRanges ) {\r\n\r\n    \t\tvar range = frameRanges[ name ];\r\n    \t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n    \t}\r\n\r\n    \tthis.firstAnimation = firstAnimation;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.direction = 1;\r\n    \t\tanimation.directionBackwards = false;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.direction = - 1;\r\n    \t\tanimation.directionBackwards = true;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.fps = fps;\r\n    \t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.duration = duration;\r\n    \t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.weight = weight;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.time = time;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n    \tvar time = 0;\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\ttime = animation.time;\r\n\r\n    \t}\r\n\r\n    \treturn time;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n    \tvar duration = - 1;\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tduration = animation.duration;\r\n\r\n    \t}\r\n\r\n    \treturn duration;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.time = 0;\r\n    \t\tanimation.active = true;\r\n\r\n    \t} else {\r\n\r\n    \t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.active = false;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n    \tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n    \t\tvar animation = this.animationsList[ i ];\r\n\r\n    \t\tif ( ! animation.active ) continue;\r\n\r\n    \t\tvar frameTime = animation.duration / animation.length;\r\n\r\n    \t\tanimation.time += animation.direction * delta;\r\n\r\n    \t\tif ( animation.mirroredLoop ) {\r\n\r\n    \t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n    \t\t\t\tanimation.direction *= - 1;\r\n\r\n    \t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n    \t\t\t\t\tanimation.time = animation.duration;\r\n    \t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n    \t\t\t\t}\r\n\r\n    \t\t\t\tif ( animation.time < 0 ) {\r\n\r\n    \t\t\t\t\tanimation.time = 0;\r\n    \t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n    \t\t\t\t}\r\n\r\n    \t\t\t}\r\n\r\n    \t\t} else {\r\n\r\n    \t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n    \t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n    \t\t}\r\n\r\n    \t\tvar keyframe = animation.start + exports.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n    \t\tvar weight = animation.weight;\r\n\r\n    \t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n    \t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n    \t\t\tanimation.lastFrame = animation.currentFrame;\r\n    \t\t\tanimation.currentFrame = keyframe;\r\n\r\n    \t\t}\r\n\r\n    \t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n    \t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n    \t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n    \t\t} else {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\r\n    \t\t}\r\n\r\n    \t}\r\n\r\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function ImmediateRenderObject( material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.material = material;\n    \tthis.render = function ( renderCallback ) {};\n\n    }\n\n    ImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n    ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n    ImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function VertexNormalsHelper( object, size, hex, linewidth ) {\n\n    \tthis.object = object;\n\n    \tthis.size = ( size !== undefined ) ? size : 1;\n\n    \tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n    \t//\n\n    \tvar nNormals = 0;\n\n    \tvar objGeometry = this.object.geometry;\n\n    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\tnNormals = objGeometry.faces.length * 3;\n\n    \t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\n    \t\tnNormals = objGeometry.attributes.normal.count;\n\n    \t}\n\n    \t//\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\n    \tgeometry.addAttribute( 'position', positions );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n    \t//\n\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.update();\n\n    }\n\n    VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n    VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\n    VertexNormalsHelper.prototype.update = ( function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar normalMatrix = new Matrix3();\n\n    \treturn function update() {\n\n    \t\tvar keys = [ 'a', 'b', 'c' ];\n\n    \t\tthis.object.updateMatrixWorld( true );\n\n    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n    \t\tvar matrixWorld = this.object.matrixWorld;\n\n    \t\tvar position = this.geometry.attributes.position;\n\n    \t\t//\n\n    \t\tvar objGeometry = this.object.geometry;\n\n    \t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\t\tvar vertices = objGeometry.vertices;\n\n    \t\t\tvar faces = objGeometry.faces;\n\n    \t\t\tvar idx = 0;\n\n    \t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\t\tvar face = faces[ i ];\n\n    \t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n    \t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n    \t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n    \t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\t\t\tidx = idx + 1;\n\n    \t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\t\t\tidx = idx + 1;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\n    \t\t\tvar objPos = objGeometry.attributes.position;\n\n    \t\t\tvar objNorm = objGeometry.attributes.normal;\n\n    \t\t\tvar idx = 0;\n\n    \t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n    \t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n    \t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n    \t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n    \t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\t\tidx = idx + 1;\n\n    \t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\t\tidx = idx + 1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tposition.needsUpdate = true;\n\n    \t\treturn this;\n\n    \t};\n\n    }() );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function SpotLightHelper( light ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = [\n    \t\t0, 0, 0,   0,   0,   1,\n    \t\t0, 0, 0,   1,   0,   1,\n    \t\t0, 0, 0, - 1,   0,   1,\n    \t\t0, 0, 0,   0,   1,   1,\n    \t\t0, 0, 0,   0, - 1,   1\n    \t];\n\n    \tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n    \t\tvar p1 = ( i / l ) * Math.PI * 2;\n    \t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n    \t\tpositions.push(\n    \t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n    \t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n    \t\t);\n\n    \t}\n\n    \tgeometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { fog: false } );\n\n    \tthis.cone = new LineSegments( geometry, material );\n    \tthis.add( this.cone );\n\n    \tthis.update();\n\n    }\n\n    SpotLightHelper.prototype = Object.create( Object3D.prototype );\n    SpotLightHelper.prototype.constructor = SpotLightHelper;\n\n    SpotLightHelper.prototype.dispose = function () {\n\n    \tthis.cone.geometry.dispose();\n    \tthis.cone.material.dispose();\n\n    };\n\n    SpotLightHelper.prototype.update = function () {\n\n    \tvar vector = new Vector3();\n    \tvar vector2 = new Vector3();\n\n    \treturn function update() {\n\n    \t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n    \t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n    \t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n    \t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n    \t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n    \t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n    \t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t};\n\n    }();\n\n    /**\n     * @author Sean Griffin / http://twitter.com/sgrif\n     * @author Michael Guerrero / http://realitymeltdown.com\n     * @author mrdoob / http://mrdoob.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function SkeletonHelper( object ) {\n\n    \tthis.bones = this.getBoneList( object );\n\n    \tvar geometry = new Geometry();\n\n    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n    \t\tvar bone = this.bones[ i ];\n\n    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\tgeometry.vertices.push( new Vector3() );\n    \t\t\tgeometry.vertices.push( new Vector3() );\n    \t\t\tgeometry.colors.push( new Color( 0, 0, 1 ) );\n    \t\t\tgeometry.colors.push( new Color( 0, 1, 0 ) );\n\n    \t\t}\n\n    \t}\n\n    \tgeometry.dynamic = true;\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    \tthis.root = object;\n\n    \tthis.matrix = object.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.update();\n\n    }\n\n\n    SkeletonHelper.prototype = Object.create( LineSegments.prototype );\n    SkeletonHelper.prototype.constructor = SkeletonHelper;\n\n    SkeletonHelper.prototype.getBoneList = function( object ) {\n\n    \tvar boneList = [];\n\n    \tif ( (object && object.isBone) ) {\n\n    \t\tboneList.push( object );\n\n    \t}\n\n    \tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n    \t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\n    \t}\n\n    \treturn boneList;\n\n    };\n\n    SkeletonHelper.prototype.update = function () {\n\n    \tvar geometry = this.geometry;\n\n    \tvar matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );\n\n    \tvar boneMatrix = new Matrix4();\n\n    \tvar j = 0;\n\n    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n    \t\tvar bone = this.bones[ i ];\n\n    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n    \t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\n    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n    \t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\n    \t\t\tj += 2;\n\n    \t\t}\n\n    \t}\n\n    \tgeometry.verticesNeedUpdate = true;\n\n    \tgeometry.computeBoundingSphere();\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function PointLightHelper( light, sphereSize ) {\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n    \tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n    \tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \tMesh.call( this, geometry, material );\n\n    \tthis.matrix = this.light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \t/*\n    \tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n    \tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n    \tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n    \tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n    \tvar d = light.distance;\n\n    \tif ( d === 0.0 ) {\n\n    \t\tthis.lightDistance.visible = false;\n\n    \t} else {\n\n    \t\tthis.lightDistance.scale.set( d, d, d );\n\n    \t}\n\n    \tthis.add( this.lightDistance );\n    \t*/\n\n    }\n\n    PointLightHelper.prototype = Object.create( Mesh.prototype );\n    PointLightHelper.prototype.constructor = PointLightHelper;\n\n    PointLightHelper.prototype.dispose = function () {\n\n    \tthis.geometry.dispose();\n    \tthis.material.dispose();\n\n    };\n\n    PointLightHelper.prototype.update = function () {\n\n    \tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t/*\n    \tvar d = this.light.distance;\n\n    \tif ( d === 0.0 ) {\n\n    \t\tthis.lightDistance.visible = false;\n\n    \t} else {\n\n    \t\tthis.lightDistance.visible = true;\n    \t\tthis.lightDistance.scale.set( d, d, d );\n\n    \t}\n    \t*/\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function HemisphereLightHelper( light, sphereSize ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.colors = [ new Color(), new Color() ];\n\n    \tvar geometry = new SphereGeometry( sphereSize, 4, 2 );\n    \tgeometry.rotateX( - Math.PI / 2 );\n\n    \tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\n    \t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\n    \t}\n\n    \tvar material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );\n\n    \tthis.lightSphere = new Mesh( geometry, material );\n    \tthis.add( this.lightSphere );\n\n    \tthis.update();\n\n    }\n\n    HemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n    HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n    HemisphereLightHelper.prototype.dispose = function () {\n\n    \tthis.lightSphere.geometry.dispose();\n    \tthis.lightSphere.material.dispose();\n\n    };\n\n    HemisphereLightHelper.prototype.update = function () {\n\n    \tvar vector = new Vector3();\n\n    \treturn function update() {\n\n    \t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n    \t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\n    \t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n    \t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\n    \t};\n\n    }();\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function GridHelper( size, divisions, color1, color2 ) {\n\n    \tdivisions = divisions || 1;\n    \tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n    \tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n    \tvar center = divisions / 2;\n    \tvar step = ( size * 2 ) / divisions;\n    \tvar vertices = [], colors = [];\n\n    \tfor ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {\n\n    \t\tvertices.push( - size, 0, k, size, 0, k );\n    \t\tvertices.push( k, 0, - size, k, 0, size );\n\n    \t\tvar color = i === center ? color1 : color2;\n\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n\n    \t}\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );\n    \tgeometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    }\n\n    GridHelper.prototype = Object.create( LineSegments.prototype );\n    GridHelper.prototype.constructor = GridHelper;\n\n    GridHelper.prototype.setColors = function () {\n\n    \tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function FaceNormalsHelper( object, size, hex, linewidth ) {\n\n    \t// FaceNormalsHelper only supports THREE.Geometry\n\n    \tthis.object = object;\n\n    \tthis.size = ( size !== undefined ) ? size : 1;\n\n    \tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n    \t//\n\n    \tvar nNormals = 0;\n\n    \tvar objGeometry = this.object.geometry;\n\n    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\tnNormals = objGeometry.faces.length;\n\n    \t} else {\n\n    \t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n    \t}\n\n    \t//\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\n    \tgeometry.addAttribute( 'position', positions );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n    \t//\n\n    \tthis.matrixAutoUpdate = false;\n    \tthis.update();\n\n    }\n\n    FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n    FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\n    FaceNormalsHelper.prototype.update = ( function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar normalMatrix = new Matrix3();\n\n    \treturn function update() {\n\n    \t\tthis.object.updateMatrixWorld( true );\n\n    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n    \t\tvar matrixWorld = this.object.matrixWorld;\n\n    \t\tvar position = this.geometry.attributes.position;\n\n    \t\t//\n\n    \t\tvar objGeometry = this.object.geometry;\n\n    \t\tvar vertices = objGeometry.vertices;\n\n    \t\tvar faces = objGeometry.faces;\n\n    \t\tvar idx = 0;\n\n    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tvar normal = face.normal;\n\n    \t\t\tv1.copy( vertices[ face.a ] )\n    \t\t\t\t.add( vertices[ face.b ] )\n    \t\t\t\t.add( vertices[ face.c ] )\n    \t\t\t\t.divideScalar( 3 )\n    \t\t\t\t.applyMatrix4( matrixWorld );\n\n    \t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\tidx = idx + 1;\n\n    \t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\tidx = idx + 1;\n\n    \t\t}\n\n    \t\tposition.needsUpdate = true;\n\n    \t\treturn this;\n\n    \t};\n\n    }() );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function DirectionalLightHelper( light, size ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tif ( size === undefined ) size = 1;\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( [\n    \t\t- size,   size, 0,\n    \t\t  size,   size, 0,\n    \t\t  size, - size, 0,\n    \t\t- size, - size, 0,\n    \t\t- size,   size, 0\n    \t], 3 ) );\n\n    \tvar material = new LineBasicMaterial( { fog: false } );\n\n    \tthis.add( new Line( geometry, material ) );\n\n    \tgeometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n    \tthis.add( new Line( geometry, material ));\n\n    \tthis.update();\n\n    }\n\n    DirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n    DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n    DirectionalLightHelper.prototype.dispose = function () {\n\n    \tvar lightPlane = this.children[ 0 ];\n    \tvar targetLine = this.children[ 1 ];\n\n    \tlightPlane.geometry.dispose();\n    \tlightPlane.material.dispose();\n    \ttargetLine.geometry.dispose();\n    \ttargetLine.material.dispose();\n\n    };\n\n    DirectionalLightHelper.prototype.update = function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar v3 = new Vector3();\n\n    \treturn function update() {\n\n    \t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n    \t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n    \t\tv3.subVectors( v2, v1 );\n\n    \t\tvar lightPlane = this.children[ 0 ];\n    \t\tvar targetLine = this.children[ 1 ];\n\n    \t\tlightPlane.lookAt( v3 );\n    \t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t\ttargetLine.lookAt( v3 );\n    \t\ttargetLine.scale.z = v3.length();\n\n    \t};\n\n    }();\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     *\t- shows frustum, line of sight and up of the camera\n     *\t- suitable for fast updates\n     * \t- based on frustum visualization in lightgl.js shadowmap example\n     *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n     */\n\n    function CameraHelper( camera ) {\n\n    \tvar geometry = new Geometry();\n    \tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n    \tvar pointMap = {};\n\n    \t// colors\n\n    \tvar hexFrustum = 0xffaa00;\n    \tvar hexCone = 0xff0000;\n    \tvar hexUp = 0x00aaff;\n    \tvar hexTarget = 0xffffff;\n    \tvar hexCross = 0x333333;\n\n    \t// near\n\n    \taddLine( \"n1\", \"n2\", hexFrustum );\n    \taddLine( \"n2\", \"n4\", hexFrustum );\n    \taddLine( \"n4\", \"n3\", hexFrustum );\n    \taddLine( \"n3\", \"n1\", hexFrustum );\n\n    \t// far\n\n    \taddLine( \"f1\", \"f2\", hexFrustum );\n    \taddLine( \"f2\", \"f4\", hexFrustum );\n    \taddLine( \"f4\", \"f3\", hexFrustum );\n    \taddLine( \"f3\", \"f1\", hexFrustum );\n\n    \t// sides\n\n    \taddLine( \"n1\", \"f1\", hexFrustum );\n    \taddLine( \"n2\", \"f2\", hexFrustum );\n    \taddLine( \"n3\", \"f3\", hexFrustum );\n    \taddLine( \"n4\", \"f4\", hexFrustum );\n\n    \t// cone\n\n    \taddLine( \"p\", \"n1\", hexCone );\n    \taddLine( \"p\", \"n2\", hexCone );\n    \taddLine( \"p\", \"n3\", hexCone );\n    \taddLine( \"p\", \"n4\", hexCone );\n\n    \t// up\n\n    \taddLine( \"u1\", \"u2\", hexUp );\n    \taddLine( \"u2\", \"u3\", hexUp );\n    \taddLine( \"u3\", \"u1\", hexUp );\n\n    \t// target\n\n    \taddLine( \"c\", \"t\", hexTarget );\n    \taddLine( \"p\", \"c\", hexCross );\n\n    \t// cross\n\n    \taddLine( \"cn1\", \"cn2\", hexCross );\n    \taddLine( \"cn3\", \"cn4\", hexCross );\n\n    \taddLine( \"cf1\", \"cf2\", hexCross );\n    \taddLine( \"cf3\", \"cf4\", hexCross );\n\n    \tfunction addLine( a, b, hex ) {\n\n    \t\taddPoint( a, hex );\n    \t\taddPoint( b, hex );\n\n    \t}\n\n    \tfunction addPoint( id, hex ) {\n\n    \t\tgeometry.vertices.push( new Vector3() );\n    \t\tgeometry.colors.push( new Color( hex ) );\n\n    \t\tif ( pointMap[ id ] === undefined ) {\n\n    \t\t\tpointMap[ id ] = [];\n\n    \t\t}\n\n    \t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\n    \t}\n\n    \tLineSegments.call( this, geometry, material );\n\n    \tthis.camera = camera;\n    \tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n    \tthis.matrix = camera.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.pointMap = pointMap;\n\n    \tthis.update();\n\n    }\n\n    CameraHelper.prototype = Object.create( LineSegments.prototype );\n    CameraHelper.prototype.constructor = CameraHelper;\n\n    CameraHelper.prototype.update = function () {\n\n    \tvar geometry, pointMap;\n\n    \tvar vector = new Vector3();\n    \tvar camera = new Camera();\n\n    \tfunction setPoint( point, x, y, z ) {\n\n    \t\tvector.set( x, y, z ).unproject( camera );\n\n    \t\tvar points = pointMap[ point ];\n\n    \t\tif ( points !== undefined ) {\n\n    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \treturn function update() {\n\n    \t\tgeometry = this.geometry;\n    \t\tpointMap = this.pointMap;\n\n    \t\tvar w = 1, h = 1;\n\n    \t\t// we need just camera projection matrix\n    \t\t// world matrix must be identity\n\n    \t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n    \t\t// center / target\n\n    \t\tsetPoint( \"c\", 0, 0, - 1 );\n    \t\tsetPoint( \"t\", 0, 0,  1 );\n\n    \t\t// near\n\n    \t\tsetPoint( \"n1\", - w, - h, - 1 );\n    \t\tsetPoint( \"n2\",   w, - h, - 1 );\n    \t\tsetPoint( \"n3\", - w,   h, - 1 );\n    \t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n    \t\t// far\n\n    \t\tsetPoint( \"f1\", - w, - h, 1 );\n    \t\tsetPoint( \"f2\",   w, - h, 1 );\n    \t\tsetPoint( \"f3\", - w,   h, 1 );\n    \t\tsetPoint( \"f4\",   w,   h, 1 );\n\n    \t\t// up\n\n    \t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n    \t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n    \t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n    \t\t// cross\n\n    \t\tsetPoint( \"cf1\", - w,   0, 1 );\n    \t\tsetPoint( \"cf2\",   w,   0, 1 );\n    \t\tsetPoint( \"cf3\",   0, - h, 1 );\n    \t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n    \t\tsetPoint( \"cn1\", - w,   0, - 1 );\n    \t\tsetPoint( \"cn2\",   w,   0, - 1 );\n    \t\tsetPoint( \"cn3\",   0, - h, - 1 );\n    \t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n    \t\tgeometry.verticesNeedUpdate = true;\n\n    \t};\n\n    }();\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    // a helper to show the world-axis-aligned bounding box for an object\n\n    function BoundingBoxHelper( object, hex ) {\n\n    \tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\n    \tthis.object = object;\n\n    \tthis.box = new Box3();\n\n    \tMesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );\n\n    }\n\n    BoundingBoxHelper.prototype = Object.create( Mesh.prototype );\n    BoundingBoxHelper.prototype.constructor = BoundingBoxHelper;\n\n    BoundingBoxHelper.prototype.update = function () {\n\n    \tthis.box.setFromObject( this.object );\n\n    \tthis.box.size( this.scale );\n\n    \tthis.box.getCenter( this.position );\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BoxHelper( object, color ) {\n\n    \tif ( color === undefined ) color = 0xffff00;\n\n    \tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n    \tvar positions = new Float32Array( 8 * 3 );\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n    \tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n    \tif ( object !== undefined ) {\n\n    \t\tthis.update( object );\n\n    \t}\n\n    }\n\n    BoxHelper.prototype = Object.create( LineSegments.prototype );\n    BoxHelper.prototype.constructor = BoxHelper;\n\n    BoxHelper.prototype.update = ( function () {\n\n    \tvar box = new Box3();\n\n    \treturn function update( object ) {\n\n    \t\tif ( (object && object.isBox3) ) {\n\n    \t\t\tbox.copy( object );\n\n    \t\t} else {\n\n    \t\t\tbox.setFromObject( object );\n\n    \t\t}\n\n    \t\tif ( box.isEmpty() ) return;\n\n    \t\tvar min = box.min;\n    \t\tvar max = box.max;\n\n    \t\t/*\n    \t\t  5____4\n    \t\t1/___0/|\n    \t\t| 6__|_7\n    \t\t2/___3/\n\n    \t\t0: max.x, max.y, max.z\n    \t\t1: min.x, max.y, max.z\n    \t\t2: min.x, min.y, max.z\n    \t\t3: max.x, min.y, max.z\n    \t\t4: max.x, max.y, min.z\n    \t\t5: min.x, max.y, min.z\n    \t\t6: min.x, min.y, min.z\n    \t\t7: max.x, min.y, min.z\n    \t\t*/\n\n    \t\tvar position = this.geometry.attributes.position;\n    \t\tvar array = position.array;\n\n    \t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n    \t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n    \t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n    \t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n    \t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n    \t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n    \t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n    \t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n    \t\tposition.needsUpdate = true;\n\n    \t\tthis.geometry.computeBoundingSphere();\n\n    \t};\n\n    } )();\n\n    var lineGeometry = new BufferGeometry();\n    lineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n    var coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n    coneGeometry.translate( 0, - 0.5, 0 );\n\n    function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n    \t// dir is assumed to be normalized\n\n    \tObject3D.call( this );\n\n    \tif ( color === undefined ) color = 0xffff00;\n    \tif ( length === undefined ) length = 1;\n    \tif ( headLength === undefined ) headLength = 0.2 * length;\n    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n    \tthis.position.copy( origin );\n\n    \tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n    \tthis.line.matrixAutoUpdate = false;\n    \tthis.add( this.line );\n\n    \tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n    \tthis.cone.matrixAutoUpdate = false;\n    \tthis.add( this.cone );\n\n    \tthis.setDirection( dir );\n    \tthis.setLength( length, headLength, headWidth );\n\n    }\n\n    ArrowHelper.prototype = Object.create( Object3D.prototype );\n    ArrowHelper.prototype.constructor = ArrowHelper;\n\n    ArrowHelper.prototype.setDirection = ( function () {\n\n    \tvar axis = new Vector3();\n    \tvar radians;\n\n    \treturn function setDirection( dir ) {\n\n    \t\t// dir is assumed to be normalized\n\n    \t\tif ( dir.y > 0.99999 ) {\n\n    \t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n    \t\t} else if ( dir.y < - 0.99999 ) {\n\n    \t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n    \t\t} else {\n\n    \t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n    \t\t\tradians = Math.acos( dir.y );\n\n    \t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n    \t\t}\n\n    \t};\n\n    }() );\n\n    ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n    \tif ( headLength === undefined ) headLength = 0.2 * length;\n    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n    \tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n    \tthis.line.updateMatrix();\n\n    \tthis.cone.scale.set( headWidth, headLength, headWidth );\n    \tthis.cone.position.y = length;\n    \tthis.cone.updateMatrix();\n\n    };\n\n    ArrowHelper.prototype.setColor = function ( color ) {\n\n    \tthis.line.material.color.copy( color );\n    \tthis.cone.material.color.copy( color );\n\n    };\n\n    /**\n     * @author sroucheray / http://sroucheray.org/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AxisHelper( size ) {\n\n    \tsize = size || 1;\n\n    \tvar vertices = new Float32Array( [\n    \t\t0, 0, 0,  size, 0, 0,\n    \t\t0, 0, 0,  0, size, 0,\n    \t\t0, 0, 0,  0, 0, size\n    \t] );\n\n    \tvar colors = new Float32Array( [\n    \t\t1, 0, 0,  1, 0.6, 0,\n    \t\t0, 1, 0,  0.6, 1, 0,\n    \t\t0, 0, 1,  0, 0.6, 1\n    \t] );\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    }\n\n    AxisHelper.prototype = Object.create( LineSegments.prototype );\n    AxisHelper.prototype.constructor = AxisHelper;\n\n    /**\n     * @author zz85 https://github.com/zz85\n     *\n     * Centripetal CatmullRom Curve - which is useful for avoiding\n     * cusps and self-intersections in non-uniform catmull rom curves.\n     * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n     *\n     * curve.type accepts centripetal(default), chordal and catmullrom\n     * curve.tension is used for catmullrom which defaults to 0.5\n     */\n\n    exports.CatmullRomCurve3 = ( function() {\n\n    \tvar\n    \t\ttmp = new Vector3(),\n    \t\tpx = new CubicPoly(),\n    \t\tpy = new CubicPoly(),\n    \t\tpz = new CubicPoly();\n\n    \t/*\n    \tBased on an optimized c++ solution in\n    \t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n    \t - http://ideone.com/NoEbVM\n\n    \tThis CubicPoly class could be used for reusing some variables and calculations,\n    \tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n    \twhich can be placed in CurveUtils.\n    \t*/\n\n    \tfunction CubicPoly() {\n\n    \t}\n\n    \t/*\n    \t * Compute coefficients for a cubic polynomial\n    \t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n    \t * such that\n    \t *   p(0) = x0, p(1) = x1\n    \t *  and\n    \t *   p'(0) = t0, p'(1) = t1.\n    \t */\n    \tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\n    \t\tthis.c0 = x0;\n    \t\tthis.c1 = t0;\n    \t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n    \t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n    \t};\n\n    \tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n    \t\t// compute tangents when parameterized in [t1,t2]\n    \t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n    \t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n    \t\t// rescale tangents for parametrization in [0,1]\n    \t\tt1 *= dt1;\n    \t\tt2 *= dt1;\n\n    \t\t// initCubicPoly\n    \t\tthis.init( x1, x2, t1, t2 );\n\n    \t};\n\n    \t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n    \tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\n    \t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n    \t};\n\n    \tCubicPoly.prototype.calc = function( t ) {\n\n    \t\tvar t2 = t * t;\n    \t\tvar t3 = t2 * t;\n    \t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\n    \t};\n\n    \t// Subclass Three.js curve\n    \treturn Curve.create(\n\n    \t\tfunction ( p /* array of Vector3 */ ) {\n\n    \t\t\tthis.points = p || [];\n    \t\t\tthis.closed = false;\n\n    \t\t},\n\n    \t\tfunction ( t ) {\n\n    \t\t\tvar points = this.points,\n    \t\t\t\tpoint, intPoint, weight, l;\n\n    \t\t\tl = points.length;\n\n    \t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\n    \t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n    \t\t\tintPoint = Math.floor( point );\n    \t\t\tweight = point - intPoint;\n\n    \t\t\tif ( this.closed ) {\n\n    \t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n    \t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n    \t\t\t\tintPoint = l - 2;\n    \t\t\t\tweight = 1;\n\n    \t\t\t}\n\n    \t\t\tvar p0, p1, p2, p3; // 4 points\n\n    \t\t\tif ( this.closed || intPoint > 0 ) {\n\n    \t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// extrapolate first point\n    \t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n    \t\t\t\tp0 = tmp;\n\n    \t\t\t}\n\n    \t\t\tp1 = points[ intPoint % l ];\n    \t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n    \t\t\tif ( this.closed || intPoint + 2 < l ) {\n\n    \t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// extrapolate last point\n    \t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n    \t\t\t\tp3 = tmp;\n\n    \t\t\t}\n\n    \t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\n    \t\t\t\t// init Centripetal / Chordal Catmull-Rom\n    \t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n    \t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n    \t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n    \t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n    \t\t\t\t// safety check for repeated points\n    \t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n    \t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n    \t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n    \t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n    \t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n    \t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n    \t\t\t} else if ( this.type === 'catmullrom' ) {\n\n    \t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n    \t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n    \t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n    \t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\n    \t\t\t}\n\n    \t\t\tvar v = new Vector3(\n    \t\t\t\tpx.calc( weight ),\n    \t\t\t\tpy.calc( weight ),\n    \t\t\t\tpz.calc( weight )\n    \t\t\t);\n\n    \t\t\treturn v;\n\n    \t\t}\n\n    \t);\n\n    } )();\n\n    /**************************************************************\n     *\tClosed Spline 3D curve\n     **************************************************************/\n\n\n    function ClosedSplineCurve3( points ) {\n\n    \tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\n    \texports.CatmullRomCurve3.call( this, points );\n    \tthis.type = 'catmullrom';\n    \tthis.closed = true;\n\n    }\n\n    ClosedSplineCurve3.prototype = Object.create( exports.CatmullRomCurve3.prototype );\n\n    /**************************************************************\n     *\tSpline 3D curve\n     **************************************************************/\n\n\n    var SplineCurve3 = Curve.create(\n\n    \tfunction ( points /* array of Vector3 */ ) {\n\n    \t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n    \t\tthis.points = ( points === undefined ) ? [] : points;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar points = this.points;\n    \t\tvar point = ( points.length - 1 ) * t;\n\n    \t\tvar intPoint = Math.floor( point );\n    \t\tvar weight = point - intPoint;\n\n    \t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n    \t\tvar point1 = points[ intPoint ];\n    \t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n    \t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n    \t\tvar interpolate = exports.CurveUtils.interpolate;\n\n    \t\treturn new Vector3(\n    \t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n    \t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n    \t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tCubic Bezier 3D curve\n     **************************************************************/\n\n    exports.CubicBezierCurve3 = Curve.create(\n\n    \tfunction ( v0, v1, v2, v3 ) {\n\n    \t\tthis.v0 = v0;\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n    \t\tthis.v3 = v3;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar b3 = exports.ShapeUtils.b3;\n\n    \t\treturn new Vector3(\n    \t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n    \t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tQuadratic Bezier 3D curve\n     **************************************************************/\n\n    exports.QuadraticBezierCurve3 = Curve.create(\n\n    \tfunction ( v0, v1, v2 ) {\n\n    \t\tthis.v0 = v0;\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar b2 = exports.ShapeUtils.b2;\t\t\n\n    \t\treturn new Vector3(\n    \t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n    \t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tLine3D\n     **************************************************************/\n\n    exports.LineCurve3 = Curve.create(\n\n    \tfunction ( v1, v2 ) {\n\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tif ( t === 1 ) {\n\n    \t\t\treturn this.v2.clone();\n\n    \t\t}\n\n    \t\tvar vector = new Vector3();\n\n    \t\tvector.subVectors( this.v2, this.v1 ); // diff\n    \t\tvector.multiplyScalar( t );\n    \t\tvector.add( this.v1 );\n\n    \t\treturn vector;\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tArc curve\n     **************************************************************/\n\n    function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n    }\n\n    ArcCurve.prototype = Object.create( EllipseCurve.prototype );\n    ArcCurve.prototype.constructor = ArcCurve;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    exports.SceneUtils = {\n\n    \tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n    \t\tvar group = new Group();\n\n    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n    \t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\n    \t\t}\n\n    \t\treturn group;\n\n    \t},\n\n    \tdetach: function ( child, parent, scene ) {\n\n    \t\tchild.applyMatrix( parent.matrixWorld );\n    \t\tparent.remove( child );\n    \t\tscene.add( child );\n\n    \t},\n\n    \tattach: function ( child, scene, parent ) {\n\n    \t\tvar matrixWorldInverse = new Matrix4();\n    \t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n    \t\tchild.applyMatrix( matrixWorldInverse );\n\n    \t\tscene.remove( child );\n    \t\tparent.add( child );\n\n    \t}\n\n    };\n\n    function Face4 ( a, b, c, d, normal, color, materialIndex ) {\n    \tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n    \treturn new Face3( a, b, c, normal, color, materialIndex );\n    }\n\n    var LineStrip = 0;\n\n    var LinePieces = 1;\n\n    function PointCloud ( geometry, material ) {\n    \tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n    \treturn new Points( geometry, material );\n    }\n\n    function ParticleSystem ( geometry, material ) {\n    \tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n    \treturn new Points( geometry, material );\n    }\n\n    function PointCloudMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function ParticleBasicMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function ParticleSystemMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function Vertex ( x, y, z ) {\n    \tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n    \treturn new Vector3( x, y, z );\n    }\n\n    //\n\n    function EdgesHelper( object, hex ) {\n    \tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n    \treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n    }\n\n    function WireframeHelper( object, hex ) {\n    \tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n    \treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n    }\n\n    //\n\n    Object.assign( Box2.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t},\n    \tempty: function () {\n    \t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n    \t\treturn this.isEmpty();\n    \t},\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tsize: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n    \t\treturn this.getSize( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Box3.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t},\n    \tempty: function () {\n    \t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n    \t\treturn this.isEmpty();\n    \t},\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tisIntersectionSphere: function ( sphere ) {\n    \t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n    \t\treturn this.intersectsSphere( sphere );\n    \t},\n    \tsize: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n    \t\treturn this.getSize( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Line3.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Matrix3.prototype, {\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n    \t\treturn vector.applyMatrix3( this );\n    \t},\n    \tmultiplyVector3Array: function ( a ) {\n    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n    \t\treturn this.applyToVector3Array( a );\n    \t}\n    } );\n\n    Object.assign( Matrix4.prototype, {\n    \textractPosition: function ( m ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n    \t\treturn this.copyPosition( m );\n    \t},\n    \tsetRotationFromQuaternion: function ( q ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n    \t\treturn this.makeRotationFromQuaternion( q );\n    \t},\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n    \t\treturn vector.applyProjection( this );\n    \t},\n    \tmultiplyVector4: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n    \t\treturn vector.applyMatrix4( this );\n    \t},\n    \tmultiplyVector3Array: function ( a ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n    \t\treturn this.applyToVector3Array( a );\n    \t},\n    \trotateAxis: function ( v ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n    \t\tv.transformDirection( this );\n    \t},\n    \tcrossVector: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n    \t\treturn vector.applyMatrix4( this );\n    \t},\n    \ttranslate: function ( v ) {\n    \t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n    \t},\n    \trotateX: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n    \t},\n    \trotateY: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n    \t},\n    \trotateZ: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n    \t},\n    \trotateByAxis: function ( axis, angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n    \t}\n    } );\n\n    Object.assign( Plane.prototype, {\n    \tisIntersectionLine: function ( line ) {\n    \t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n    \t\treturn this.intersectsLine( line );\n    \t}\n    } );\n\n    Object.assign( Quaternion.prototype, {\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n    \t\treturn vector.applyQuaternion( this );\n    \t}\n    } );\n\n    Object.assign( Ray.prototype, {\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tisIntersectionPlane: function ( plane ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n    \t\treturn this.intersectsPlane( plane );\n    \t},\n    \tisIntersectionSphere: function ( sphere ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n    \t\treturn this.intersectsSphere( sphere );\n    \t}\n    } );\n\n    Object.assign( Shape.prototype, {\n    \textrude: function ( options ) {\n    \t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n    \t\treturn new ExtrudeGeometry( this, options );\n    \t},\n    \tmakeGeometry: function ( options ) {\n    \t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n    \t\treturn new ShapeGeometry( this, options );\n    \t}\n    } );\n\n    Object.assign( Vector3.prototype, {\n    \tsetEulerFromRotationMatrix: function () {\n    \t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n    \t},\n    \tsetEulerFromQuaternion: function () {\n    \t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n    \t},\n    \tgetPositionFromMatrix: function ( m ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n    \t\treturn this.setFromMatrixPosition( m );\n    \t},\n    \tgetScaleFromMatrix: function ( m ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n    \t\treturn this.setFromMatrixScale( m );\n    \t},\n    \tgetColumnFromMatrix: function ( index, matrix ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n    \t\treturn this.setFromMatrixColumn( matrix, index );\n    \t}\n    } );\n\n    //\n\n    Object.assign( Object3D.prototype, {\n    \tgetChildByName: function ( name ) {\n    \t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n    \t\treturn this.getObjectByName( name );\n    \t},\n    \trenderDepth: function ( value ) {\n    \t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n    \t},\n    \ttranslate: function ( distance, axis ) {\n    \t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n    \t\treturn this.translateOnAxis( axis, distance );\n    \t}\n    } );\n\n    Object.defineProperties( Object3D.prototype, {\n    \teulerOrder: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n    \t\t\treturn this.rotation.order;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n    \t\t\tthis.rotation.order = value;\n    \t\t}\n    \t},\n    \tuseQuaternion: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( LOD.prototype, {\n    \tobjects: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n    \t\t\treturn this.levels;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n    \tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n    \t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n    \tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n    \tthis.setFocalLength( focalLength );\n\n    };\n\n    //\n\n    Object.defineProperties( Light.prototype, {\n    \tonlyShadow: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n    \t\t}\n    \t},\n    \tshadowCameraFov: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n    \t\t\tthis.shadow.camera.fov = value;\n    \t\t}\n    \t},\n    \tshadowCameraLeft: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n    \t\t\tthis.shadow.camera.left = value;\n    \t\t}\n    \t},\n    \tshadowCameraRight: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n    \t\t\tthis.shadow.camera.right = value;\n    \t\t}\n    \t},\n    \tshadowCameraTop: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n    \t\t\tthis.shadow.camera.top = value;\n    \t\t}\n    \t},\n    \tshadowCameraBottom: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n    \t\t\tthis.shadow.camera.bottom = value;\n    \t\t}\n    \t},\n    \tshadowCameraNear: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n    \t\t\tthis.shadow.camera.near = value;\n    \t\t}\n    \t},\n    \tshadowCameraFar: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n    \t\t\tthis.shadow.camera.far = value;\n    \t\t}\n    \t},\n    \tshadowCameraVisible: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n    \t\t}\n    \t},\n    \tshadowBias: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n    \t\t\tthis.shadow.bias = value;\n    \t\t}\n    \t},\n    \tshadowDarkness: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n    \t\t}\n    \t},\n    \tshadowMapWidth: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n    \t\t\tthis.shadow.mapSize.width = value;\n    \t\t}\n    \t},\n    \tshadowMapHeight: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n    \t\t\tthis.shadow.mapSize.height = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( BufferAttribute.prototype, {\n    \tlength: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n    \t\t\treturn this.array.length;\n    \t\t}\n    \t}\n    } );\n\n    Object.assign( BufferGeometry.prototype, {\n    \taddIndex: function ( index ) {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n    \t\tthis.setIndex( index );\n    \t},\n    \taddDrawCall: function ( start, count, indexOffset ) {\n    \t\tif ( indexOffset !== undefined ) {\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n    \t\t}\n    \t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n    \t\tthis.addGroup( start, count );\n    \t},\n    \tclearDrawCalls: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n    \t\tthis.clearGroups();\n    \t},\n    \tcomputeTangents: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n    \t},\n    \tcomputeOffsets: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n    \t}\n    } );\n\n    Object.defineProperties( BufferGeometry.prototype, {\n    \tdrawcalls: {\n    \t\tget: function () {\n    \t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n    \t\t\treturn this.groups;\n    \t\t}\n    \t},\n    \toffsets: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n    \t\t\treturn this.groups;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( Material.prototype, {\n    \twrapAround: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n    \t\t}\n    \t},\n    \twrapRGB: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n    \t\t\treturn new Color();\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( MeshPhongMaterial.prototype, {\n    \tmetal: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n    \t\t\treturn false;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( ShaderMaterial.prototype, {\n    \tderivatives: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n    \t\t\treturn this.extensions.derivatives;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n    \t\t\tthis.extensions.derivatives = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    EventDispatcher.prototype = Object.assign( Object.create( {\n\n    \t// Note: Extra base ensures these properties are not 'assign'ed.\n\n    \tconstructor: EventDispatcher,\n\n    \tapply: function ( target ) {\n\n    \t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n    \t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\n    \t\tObject.assign( target, this );\n\n    \t}\n\n    } ), EventDispatcher.prototype );\n\n    //\n\n    Object.assign( WebGLRenderer.prototype, {\n    \tsupportsFloatTextures: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n    \t\treturn this.extensions.get( 'OES_texture_float' );\n    \t},\n    \tsupportsHalfFloatTextures: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n    \t\treturn this.extensions.get( 'OES_texture_half_float' );\n    \t},\n    \tsupportsStandardDerivatives: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n    \t\treturn this.extensions.get( 'OES_standard_derivatives' );\n    \t},\n    \tsupportsCompressedTextureS3TC: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n    \t},\n    \tsupportsCompressedTexturePVRTC: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n    \t},\n    \tsupportsBlendMinMax: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n    \t\treturn this.extensions.get( 'EXT_blend_minmax' );\n    \t},\n    \tsupportsVertexTextures: function () {\n    \t\treturn this.capabilities.vertexTextures;\n    \t},\n    \tsupportsInstancedArrays: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n    \t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n    \t},\n    \tenableScissorTest: function ( boolean ) {\n    \t\t// console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n    \t\tthis.setScissorTest( boolean );\n    \t},\n    \tinitMaterial: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n    \t},\n    \taddPrePlugin: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n    \t},\n    \taddPostPlugin: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n    \t},\n    \tupdateShadowMap: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n    \t}\n    } );\n\n    Object.defineProperties( WebGLRenderer.prototype, {\n    \tshadowMapEnabled: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.enabled;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n    \t\t\tthis.shadowMap.enabled = value;\n    \t\t}\n    \t},\n    \tshadowMapType: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.type;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n    \t\t\tthis.shadowMap.type = value;\n    \t\t}\n    \t},\n    \tshadowMapCullFace: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.cullFace;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n    \t\t\tthis.shadowMap.cullFace = value;\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( WebGLShadowMap.prototype, {\n    \tcullFace: {\n    \t\tget: function () {\n    \t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n    \t\t},\n    \t\tset: function ( cullFace ) {\n    \t\t\tvar value = ( cullFace !== CullFaceBack );\n    \t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n    \t\t\tthis.renderReverseSided = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( WebGLRenderTarget.prototype, {\n    \twrapS: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n    \t\t\treturn this.texture.wrapS;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n    \t\t\tthis.texture.wrapS = value;\n    \t\t}\n    \t},\n    \twrapT: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n    \t\t\treturn this.texture.wrapT;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n    \t\t\tthis.texture.wrapT = value;\n    \t\t}\n    \t},\n    \tmagFilter: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n    \t\t\treturn this.texture.magFilter;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n    \t\t\tthis.texture.magFilter = value;\n    \t\t}\n    \t},\n    \tminFilter: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n    \t\t\treturn this.texture.minFilter;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n    \t\t\tthis.texture.minFilter = value;\n    \t\t}\n    \t},\n    \tanisotropy: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n    \t\t\treturn this.texture.anisotropy;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n    \t\t\tthis.texture.anisotropy = value;\n    \t\t}\n    \t},\n    \toffset: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n    \t\t\treturn this.texture.offset;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n    \t\t\tthis.texture.offset = value;\n    \t\t}\n    \t},\n    \trepeat: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n    \t\t\treturn this.texture.repeat;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n    \t\t\tthis.texture.repeat = value;\n    \t\t}\n    \t},\n    \tformat: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n    \t\t\treturn this.texture.format;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n    \t\t\tthis.texture.format = value;\n    \t\t}\n    \t},\n    \ttype: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n    \t\t\treturn this.texture.type;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n    \t\t\tthis.texture.type = value;\n    \t\t}\n    \t},\n    \tgenerateMipmaps: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n    \t\t\treturn this.texture.generateMipmaps;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n    \t\t\tthis.texture.generateMipmaps = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.assign( Audio.prototype, {\n    \tload: function ( file ) {\n    \t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n    \t\tvar scope = this;\n    \t\tvar audioLoader = new AudioLoader();\n    \t\taudioLoader.load( file, function ( buffer ) {\n    \t\t\tscope.setBuffer( buffer );\n    \t\t} );\n    \t\treturn this;\n    \t}\n    } );\n\n    Object.assign( AudioAnalyser.prototype, {\n    \tgetData: function ( file ) {\n    \t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n    \t\treturn this.getFrequencyData();\n    \t}\n    } );\n\n    //\n\n    var GeometryUtils = {\n\n    \tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n    \t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\n    \t\tvar matrix;\n\n    \t\tif ( geometry2.isMesh ) {\n\n    \t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n    \t\t\tmatrix = geometry2.matrix;\n    \t\t\tgeometry2 = geometry2.geometry;\n\n    \t\t}\n\n    \t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n    \t},\n\n    \tcenter: function ( geometry ) {\n\n    \t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n    \t\treturn geometry.center();\n\n    \t}\n\n    };\n\n    var ImageUtils = {\n\n    \tcrossOrigin: undefined,\n\n    \tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n    \t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n    \t\tvar loader = new TextureLoader();\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n    \t\tif ( mapping ) texture.mapping = mapping;\n\n    \t\treturn texture;\n\n    \t},\n\n    \tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n    \t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n    \t\tvar loader = new CubeTextureLoader();\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n    \t\tif ( mapping ) texture.mapping = mapping;\n\n    \t\treturn texture;\n\n    \t},\n\n    \tloadCompressedTexture: function () {\n\n    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n    \t},\n\n    \tloadCompressedTextureCube: function () {\n\n    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n    \t}\n\n    };\n\n    //\n\n    function Projector () {\n\n    \tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n    \tthis.projectVector = function ( vector, camera ) {\n\n    \t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n    \t\tvector.project( camera );\n\n    \t};\n\n    \tthis.unprojectVector = function ( vector, camera ) {\n\n    \t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n    \t\tvector.unproject( camera );\n\n    \t};\n\n    \tthis.pickingRay = function ( vector, camera ) {\n\n    \t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n    \t};\n\n    }\n\n    //\n\n    function CanvasRenderer () {\n\n    \tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n    \tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \tthis.clear = function () {};\n    \tthis.render = function () {};\n    \tthis.setClearColor = function () {};\n    \tthis.setSize = function () {};\n\n    }\n\n    Object.defineProperty( exports, 'AudioContext', {\n    \tget: function () {\n    \t\treturn exports.getAudioContext();\n    \t}\n    });\n\n    exports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n    exports.WebGLRenderTarget = WebGLRenderTarget;\n    exports.WebGLRenderer = WebGLRenderer;\n    exports.ShaderLib = ShaderLib;\n    exports.UniformsLib = UniformsLib;\n    exports.ShaderChunk = ShaderChunk;\n    exports.FogExp2 = FogExp2;\n    exports.Fog = Fog;\n    exports.Scene = Scene;\n    exports.LensFlare = LensFlare;\n    exports.Sprite = Sprite;\n    exports.LOD = LOD;\n    exports.SkinnedMesh = SkinnedMesh;\n    exports.Skeleton = Skeleton;\n    exports.Bone = Bone;\n    exports.Mesh = Mesh;\n    exports.LineSegments = LineSegments;\n    exports.Line = Line;\n    exports.Points = Points;\n    exports.Group = Group;\n    exports.VideoTexture = VideoTexture;\n    exports.DataTexture = DataTexture;\n    exports.CompressedTexture = CompressedTexture;\n    exports.CubeTexture = CubeTexture;\n    exports.CanvasTexture = CanvasTexture;\n    exports.DepthTexture = DepthTexture;\n    exports.TextureIdCount = TextureIdCount;\n    exports.Texture = Texture;\n    exports.MaterialIdCount = MaterialIdCount;\n    exports.CompressedTextureLoader = CompressedTextureLoader;\n    exports.BinaryTextureLoader = BinaryTextureLoader;\n    exports.DataTextureLoader = DataTextureLoader;\n    exports.CubeTextureLoader = CubeTextureLoader;\n    exports.TextureLoader = TextureLoader;\n    exports.ObjectLoader = ObjectLoader;\n    exports.MaterialLoader = MaterialLoader;\n    exports.BufferGeometryLoader = BufferGeometryLoader;\n    exports.LoadingManager = LoadingManager;\n    exports.JSONLoader = JSONLoader;\n    exports.ImageLoader = ImageLoader;\n    exports.FontLoader = FontLoader;\n    exports.XHRLoader = XHRLoader;\n    exports.Loader = Loader;\n    exports.AudioLoader = AudioLoader;\n    exports.SpotLightShadow = SpotLightShadow;\n    exports.SpotLight = SpotLight;\n    exports.PointLight = PointLight;\n    exports.HemisphereLight = HemisphereLight;\n    exports.DirectionalLightShadow = DirectionalLightShadow;\n    exports.DirectionalLight = DirectionalLight;\n    exports.AmbientLight = AmbientLight;\n    exports.LightShadow = LightShadow;\n    exports.Light = Light;\n    exports.StereoCamera = StereoCamera;\n    exports.PerspectiveCamera = PerspectiveCamera;\n    exports.OrthographicCamera = OrthographicCamera;\n    exports.CubeCamera = CubeCamera;\n    exports.Camera = Camera;\n    exports.AudioListener = AudioListener;\n    exports.PositionalAudio = PositionalAudio;\n    exports.getAudioContext = getAudioContext;\n    exports.AudioAnalyser = AudioAnalyser;\n    exports.Audio = Audio;\n    exports.VectorKeyframeTrack = VectorKeyframeTrack;\n    exports.StringKeyframeTrack = StringKeyframeTrack;\n    exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n    exports.NumberKeyframeTrack = NumberKeyframeTrack;\n    exports.ColorKeyframeTrack = ColorKeyframeTrack;\n    exports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n    exports.PropertyMixer = PropertyMixer;\n    exports.PropertyBinding = PropertyBinding;\n    exports.KeyframeTrack = KeyframeTrack;\n    exports.AnimationObjectGroup = AnimationObjectGroup;\n    exports.AnimationMixer = AnimationMixer;\n    exports.AnimationClip = AnimationClip;\n    exports.Uniform = Uniform;\n    exports.InstancedBufferGeometry = InstancedBufferGeometry;\n    exports.BufferGeometry = BufferGeometry;\n    exports.GeometryIdCount = GeometryIdCount;\n    exports.Geometry = Geometry;\n    exports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n    exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n    exports.InterleavedBuffer = InterleavedBuffer;\n    exports.InstancedBufferAttribute = InstancedBufferAttribute;\n    exports.DynamicBufferAttribute = DynamicBufferAttribute;\n    exports.Float64Attribute = Float64Attribute;\n    exports.Float32Attribute = Float32Attribute;\n    exports.Uint32Attribute = Uint32Attribute;\n    exports.Int32Attribute = Int32Attribute;\n    exports.Uint16Attribute = Uint16Attribute;\n    exports.Int16Attribute = Int16Attribute;\n    exports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n    exports.Uint8Attribute = Uint8Attribute;\n    exports.Int8Attribute = Int8Attribute;\n    exports.BufferAttribute = BufferAttribute;\n    exports.Face3 = Face3;\n    exports.Object3DIdCount = Object3DIdCount;\n    exports.Object3D = Object3D;\n    exports.Raycaster = Raycaster;\n    exports.Layers = Layers;\n    exports.EventDispatcher = EventDispatcher;\n    exports.Clock = Clock;\n    exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n    exports.LinearInterpolant = LinearInterpolant;\n    exports.DiscreteInterpolant = DiscreteInterpolant;\n    exports.CubicInterpolant = CubicInterpolant;\n    exports.Interpolant = Interpolant;\n    exports.Triangle = Triangle;\n    exports.Spline = Spline;\n    exports.Spherical = Spherical;\n    exports.Plane = Plane;\n    exports.Frustum = Frustum;\n    exports.Sphere = Sphere;\n    exports.Ray = Ray;\n    exports.Matrix4 = Matrix4;\n    exports.Matrix3 = Matrix3;\n    exports.Box3 = Box3;\n    exports.Box2 = Box2;\n    exports.Line3 = Line3;\n    exports.Euler = Euler;\n    exports.Vector4 = Vector4;\n    exports.Vector3 = Vector3;\n    exports.Vector2 = Vector2;\n    exports.Quaternion = Quaternion;\n    exports.Color = Color;\n    exports.MorphBlendMesh = MorphBlendMesh;\n    exports.ImmediateRenderObject = ImmediateRenderObject;\n    exports.VertexNormalsHelper = VertexNormalsHelper;\n    exports.SpotLightHelper = SpotLightHelper;\n    exports.SkeletonHelper = SkeletonHelper;\n    exports.PointLightHelper = PointLightHelper;\n    exports.HemisphereLightHelper = HemisphereLightHelper;\n    exports.GridHelper = GridHelper;\n    exports.FaceNormalsHelper = FaceNormalsHelper;\n    exports.DirectionalLightHelper = DirectionalLightHelper;\n    exports.CameraHelper = CameraHelper;\n    exports.BoundingBoxHelper = BoundingBoxHelper;\n    exports.BoxHelper = BoxHelper;\n    exports.ArrowHelper = ArrowHelper;\n    exports.AxisHelper = AxisHelper;\n    exports.ClosedSplineCurve3 = ClosedSplineCurve3;\n    exports.SplineCurve3 = SplineCurve3;\n    exports.ArcCurve = ArcCurve;\n    exports.EllipseCurve = EllipseCurve;\n    exports.SplineCurve = SplineCurve;\n    exports.CubicBezierCurve = CubicBezierCurve;\n    exports.QuadraticBezierCurve = QuadraticBezierCurve;\n    exports.LineCurve = LineCurve;\n    exports.Shape = Shape;\n    exports.ShapePath = ShapePath;\n    exports.Path = Path;\n    exports.Font = Font;\n    exports.CurvePath = CurvePath;\n    exports.Curve = Curve;\n    exports.WireframeGeometry = WireframeGeometry;\n    exports.ParametricGeometry = ParametricGeometry;\n    exports.TetrahedronGeometry = TetrahedronGeometry;\n    exports.OctahedronGeometry = OctahedronGeometry;\n    exports.IcosahedronGeometry = IcosahedronGeometry;\n    exports.DodecahedronGeometry = DodecahedronGeometry;\n    exports.PolyhedronGeometry = PolyhedronGeometry;\n    exports.TubeGeometry = TubeGeometry;\n    exports.TorusKnotGeometry = TorusKnotGeometry;\n    exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n    exports.TorusGeometry = TorusGeometry;\n    exports.TorusBufferGeometry = TorusBufferGeometry;\n    exports.TextGeometry = TextGeometry;\n    exports.SphereBufferGeometry = SphereBufferGeometry;\n    exports.SphereGeometry = SphereGeometry;\n    exports.RingGeometry = RingGeometry;\n    exports.RingBufferGeometry = RingBufferGeometry;\n    exports.PlaneBufferGeometry = PlaneBufferGeometry;\n    exports.PlaneGeometry = PlaneGeometry;\n    exports.LatheGeometry = LatheGeometry;\n    exports.LatheBufferGeometry = LatheBufferGeometry;\n    exports.ShapeGeometry = ShapeGeometry;\n    exports.ExtrudeGeometry = ExtrudeGeometry;\n    exports.EdgesGeometry = EdgesGeometry;\n    exports.ConeGeometry = ConeGeometry;\n    exports.ConeBufferGeometry = ConeBufferGeometry;\n    exports.CylinderGeometry = CylinderGeometry;\n    exports.CylinderBufferGeometry = CylinderBufferGeometry;\n    exports.CircleBufferGeometry = CircleBufferGeometry;\n    exports.CircleGeometry = CircleGeometry;\n    exports.BoxBufferGeometry = BoxBufferGeometry;\n    exports.BoxGeometry = BoxGeometry;\n    exports.ShadowMaterial = ShadowMaterial;\n    exports.SpriteMaterial = SpriteMaterial;\n    exports.RawShaderMaterial = RawShaderMaterial;\n    exports.ShaderMaterial = ShaderMaterial;\n    exports.PointsMaterial = PointsMaterial;\n    exports.MultiMaterial = MultiMaterial;\n    exports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n    exports.MeshStandardMaterial = MeshStandardMaterial;\n    exports.MeshPhongMaterial = MeshPhongMaterial;\n    exports.MeshNormalMaterial = MeshNormalMaterial;\n    exports.MeshLambertMaterial = MeshLambertMaterial;\n    exports.MeshDepthMaterial = MeshDepthMaterial;\n    exports.MeshBasicMaterial = MeshBasicMaterial;\n    exports.LineDashedMaterial = LineDashedMaterial;\n    exports.LineBasicMaterial = LineBasicMaterial;\n    exports.Material = Material;\n    exports.REVISION = REVISION;\n    exports.MOUSE = MOUSE;\n    exports.CullFaceNone = CullFaceNone;\n    exports.CullFaceBack = CullFaceBack;\n    exports.CullFaceFront = CullFaceFront;\n    exports.CullFaceFrontBack = CullFaceFrontBack;\n    exports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n    exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n    exports.BasicShadowMap = BasicShadowMap;\n    exports.PCFShadowMap = PCFShadowMap;\n    exports.PCFSoftShadowMap = PCFSoftShadowMap;\n    exports.FrontSide = FrontSide;\n    exports.BackSide = BackSide;\n    exports.DoubleSide = DoubleSide;\n    exports.FlatShading = FlatShading;\n    exports.SmoothShading = SmoothShading;\n    exports.NoColors = NoColors;\n    exports.FaceColors = FaceColors;\n    exports.VertexColors = VertexColors;\n    exports.NoBlending = NoBlending;\n    exports.NormalBlending = NormalBlending;\n    exports.AdditiveBlending = AdditiveBlending;\n    exports.SubtractiveBlending = SubtractiveBlending;\n    exports.MultiplyBlending = MultiplyBlending;\n    exports.CustomBlending = CustomBlending;\n    exports.BlendingMode = BlendingMode;\n    exports.AddEquation = AddEquation;\n    exports.SubtractEquation = SubtractEquation;\n    exports.ReverseSubtractEquation = ReverseSubtractEquation;\n    exports.MinEquation = MinEquation;\n    exports.MaxEquation = MaxEquation;\n    exports.ZeroFactor = ZeroFactor;\n    exports.OneFactor = OneFactor;\n    exports.SrcColorFactor = SrcColorFactor;\n    exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n    exports.SrcAlphaFactor = SrcAlphaFactor;\n    exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n    exports.DstAlphaFactor = DstAlphaFactor;\n    exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n    exports.DstColorFactor = DstColorFactor;\n    exports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n    exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n    exports.NeverDepth = NeverDepth;\n    exports.AlwaysDepth = AlwaysDepth;\n    exports.LessDepth = LessDepth;\n    exports.LessEqualDepth = LessEqualDepth;\n    exports.EqualDepth = EqualDepth;\n    exports.GreaterEqualDepth = GreaterEqualDepth;\n    exports.GreaterDepth = GreaterDepth;\n    exports.NotEqualDepth = NotEqualDepth;\n    exports.MultiplyOperation = MultiplyOperation;\n    exports.MixOperation = MixOperation;\n    exports.AddOperation = AddOperation;\n    exports.NoToneMapping = NoToneMapping;\n    exports.LinearToneMapping = LinearToneMapping;\n    exports.ReinhardToneMapping = ReinhardToneMapping;\n    exports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n    exports.CineonToneMapping = CineonToneMapping;\n    exports.UVMapping = UVMapping;\n    exports.CubeReflectionMapping = CubeReflectionMapping;\n    exports.CubeRefractionMapping = CubeRefractionMapping;\n    exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n    exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n    exports.SphericalReflectionMapping = SphericalReflectionMapping;\n    exports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n    exports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n    exports.TextureMapping = TextureMapping;\n    exports.RepeatWrapping = RepeatWrapping;\n    exports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n    exports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n    exports.TextureWrapping = TextureWrapping;\n    exports.NearestFilter = NearestFilter;\n    exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n    exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n    exports.LinearFilter = LinearFilter;\n    exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n    exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n    exports.TextureFilter = TextureFilter;\n    exports.UnsignedByteType = UnsignedByteType;\n    exports.ByteType = ByteType;\n    exports.ShortType = ShortType;\n    exports.UnsignedShortType = UnsignedShortType;\n    exports.IntType = IntType;\n    exports.UnsignedIntType = UnsignedIntType;\n    exports.FloatType = FloatType;\n    exports.HalfFloatType = HalfFloatType;\n    exports.UnsignedShort4444Type = UnsignedShort4444Type;\n    exports.UnsignedShort5551Type = UnsignedShort5551Type;\n    exports.UnsignedShort565Type = UnsignedShort565Type;\n    exports.UnsignedInt248Type = UnsignedInt248Type;\n    exports.AlphaFormat = AlphaFormat;\n    exports.RGBFormat = RGBFormat;\n    exports.RGBAFormat = RGBAFormat;\n    exports.LuminanceFormat = LuminanceFormat;\n    exports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n    exports.RGBEFormat = RGBEFormat;\n    exports.DepthFormat = DepthFormat;\n    exports.DepthStencilFormat = DepthStencilFormat;\n    exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n    exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n    exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n    exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n    exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n    exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n    exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n    exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n    exports.RGB_ETC1_Format = RGB_ETC1_Format;\n    exports.LoopOnce = LoopOnce;\n    exports.LoopRepeat = LoopRepeat;\n    exports.LoopPingPong = LoopPingPong;\n    exports.InterpolateDiscrete = InterpolateDiscrete;\n    exports.InterpolateLinear = InterpolateLinear;\n    exports.InterpolateSmooth = InterpolateSmooth;\n    exports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n    exports.ZeroSlopeEnding = ZeroSlopeEnding;\n    exports.WrapAroundEnding = WrapAroundEnding;\n    exports.TrianglesDrawMode = TrianglesDrawMode;\n    exports.TriangleStripDrawMode = TriangleStripDrawMode;\n    exports.TriangleFanDrawMode = TriangleFanDrawMode;\n    exports.LinearEncoding = LinearEncoding;\n    exports.sRGBEncoding = sRGBEncoding;\n    exports.GammaEncoding = GammaEncoding;\n    exports.RGBEEncoding = RGBEEncoding;\n    exports.LogLuvEncoding = LogLuvEncoding;\n    exports.RGBM7Encoding = RGBM7Encoding;\n    exports.RGBM16Encoding = RGBM16Encoding;\n    exports.RGBDEncoding = RGBDEncoding;\n    exports.BasicDepthPacking = BasicDepthPacking;\n    exports.RGBADepthPacking = RGBADepthPacking;\n    exports.CubeGeometry = BoxGeometry;\n    exports.Face4 = Face4;\n    exports.LineStrip = LineStrip;\n    exports.LinePieces = LinePieces;\n    exports.MeshFaceMaterial = MultiMaterial;\n    exports.PointCloud = PointCloud;\n    exports.Particle = Sprite;\n    exports.ParticleSystem = ParticleSystem;\n    exports.PointCloudMaterial = PointCloudMaterial;\n    exports.ParticleBasicMaterial = ParticleBasicMaterial;\n    exports.ParticleSystemMaterial = ParticleSystemMaterial;\n    exports.Vertex = Vertex;\n    exports.EdgesHelper = EdgesHelper;\n    exports.WireframeHelper = WireframeHelper;\n    exports.GeometryUtils = GeometryUtils;\n    exports.ImageUtils = ImageUtils;\n    exports.Projector = Projector;\n    exports.CanvasRenderer = CanvasRenderer;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/build/three.js\n ** module id = 33\n ** module chunks = 0\n **/","module.exports = new RegExp(\n\t'^' +\n\n\t// protocol identifier\n\t'(?:(?:(?:https?):)?//)' +\n\n\t// user:pass authentication\n\t'(?:\\\\S+(?::\\\\S*)?@)?' +\n\t'(?:' +\n\n\t// IP address exclusion\n\t// private & local networks\n\t'(' +\n\t'(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})' +\n\t'(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})' +\n\t'(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})' +\n\n\t// IP address dotted notation octets\n\t// excludes loopback network 0.0.0.0\n\t// excludes reserved space >= 224.0.0.0\n\t// excludes network & broacast addresses\n\t// (first & last IP address of each class)\n\t'(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])' +\n\t'(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}' +\n\t'(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))' +\n\t'|' +\n\n\t// host name\n\t'(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)' +\n\n\t// domain name\n\t'(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*' +\n\n\t// TLD identifier\n\t'(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))?' +\n\t')' +\n\n\t')' +\n\n\t// port number\n\t'(?::(\\\\d{2,5}))?' +\n\n\t// resource path\n\t'(?:/\\\\S*)?' +\n\t'$', 'i'\n);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils/urlregex.js\n ** module id = 34\n ** module chunks = 0\n **/","/**\n * lodash 3.0.3 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar arrayEach = require('lodash._arrayeach'),\n    baseEach = require('lodash._baseeach'),\n    bindCallback = require('lodash._bindcallback'),\n    isArray = require('lodash.isarray');\n\n/**\n * Creates a function for `_.forEach` or `_.forEachRight`.\n *\n * @private\n * @param {Function} arrayFunc The function to iterate over an array.\n * @param {Function} eachFunc The function to iterate over a collection.\n * @returns {Function} Returns the new each function.\n */\nfunction createForEach(arrayFunc, eachFunc) {\n  return function(collection, iteratee, thisArg) {\n    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))\n      ? arrayFunc(collection, iteratee)\n      : eachFunc(collection, bindCallback(iteratee, thisArg, 3));\n  };\n}\n\n/**\n * Iterates over elements of `collection` invoking `iteratee` for each element.\n * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n * (value, index|key, collection). Iteratee functions may exit iteration early\n * by explicitly returning `false`.\n *\n * **Note:** As with other \"Collections\" methods, objects with a \"length\" property\n * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\n * may be used for object iteration.\n *\n * @static\n * @memberOf _\n * @alias each\n * @category Collection\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {Array|Object|string} Returns `collection`.\n * @example\n *\n * _([1, 2]).forEach(function(n) {\n *   console.log(n);\n * }).value();\n * // => logs each value from left to right and returns the array\n *\n * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {\n *   console.log(n, key);\n * });\n * // => logs each value-key pair and returns the object (iteration order is not guaranteed)\n */\nvar forEach = createForEach(arrayEach, baseEach);\n\nmodule.exports = forEach;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/index.js\n ** module id = 35\n ** module chunks = 0\n **/","/**\n * lodash 3.2.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar baseAssign = require('lodash._baseassign'),\n    createAssigner = require('lodash._createassigner'),\n    keys = require('lodash.keys');\n\n/**\n * A specialized version of `_.assign` for customizing assigned values without\n * support for argument juggling, multiple sources, and `this` binding `customizer`\n * functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {Function} customizer The function to customize assigned values.\n * @returns {Object} Returns `object`.\n */\nfunction assignWith(object, source, customizer) {\n  var index = -1,\n      props = keys(source),\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index],\n        value = object[key],\n        result = customizer(value, source[key], key, object, source);\n\n    if ((result === result ? (result !== value) : (value === value)) ||\n        (value === undefined && !(key in object))) {\n      object[key] = result;\n    }\n  }\n  return object;\n}\n\n/**\n * Assigns own enumerable properties of source object(s) to the destination\n * object. Subsequent sources overwrite property assignments of previous sources.\n * If `customizer` is provided it is invoked to produce the assigned values.\n * The `customizer` is bound to `thisArg` and invoked with five arguments:\n * (objectValue, sourceValue, key, object, source).\n *\n * **Note:** This method mutates `object` and is based on\n * [`Object.assign`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign).\n *\n * @static\n * @memberOf _\n * @alias extend\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {*} [thisArg] The `this` binding of `customizer`.\n * @returns {Object} Returns `object`.\n * @example\n *\n * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });\n * // => { 'user': 'fred', 'age': 40 }\n *\n * // using a customizer callback\n * var defaults = _.partialRight(_.assign, function(value, other) {\n *   return _.isUndefined(value) ? other : value;\n * });\n *\n * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n * // => { 'user': 'barney', 'age': 36 }\n */\nvar assign = createAssigner(function(object, source, customizer) {\n  return customizer\n    ? assignWith(object, source, customizer)\n    : baseAssign(object, source);\n});\n\nmodule.exports = assign;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/index.js\n ** module id = 36\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Audio = function ( listener ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Audio';\n\tthis.started = false;\n\n\tif (listener.context) {\n\n\t\tthis.context = listener.context;\n\t\t// this.source = this.context.createBufferSource();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.input );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.connect( this.gain );\n\n\t} else {\n\n\t\tthis.source = new Audio();\n\n\t}\n};\n\nTHREE.Audio.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Audio.prototype.load = function ( sources ) {\n\t//todo: support multiple sources for different audio formats\n\n\tvar scope = this;\n\tvar file;\n\tvar i;\n\tvar match;\n\tvar element = this.source instanceof window.HTMLAudioElement ? this.source : new Audio();\n\n\tif (typeof sources === 'string') {\n\t\tsources = [sources];\n\t}\n\n\tfor (i = 0; i < sources.length; i++) {\n\t\tfile = sources[i];\n\t\tmatch = /\\.([a-z0-9]+)$/i.exec(file);\n\t\tif (match && element.canPlayType('audio/' + match[1])) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (this.context) {\n\t\tvar request = new XMLHttpRequest();\n\t\trequest.open( 'GET', file, true );\n\t\trequest.responseType = 'arraybuffer';\n\t\trequest.onload = function ( e ) {\n\t\t\tconsole.log('audio buffer loaded. decoding...', e );\n\t\t\tscope.context.decodeAudioData( this.response, function ( buffer ) {\n\n\t\t\t\tscope.buffer = buffer;\n\t\t\t\tif (scope.started) {\n\t\t\t\t\tscope.start();\n\t\t\t\t}\n\n\t\t\t}, function onFailure(e) {\n\t\t\t\tconsole.log('Decoding the audio buffer failed', e);\n\t\t\t} );\n\n\t\t};\n\n\t\trequest.onerror = function ( e ) {\n\t\t\tconsole.log('error', e);\n\t\t};\n\n\t\trequest.send();\n\n\t} else {\n\n\t\tthis.source.src = file;\n\t\tthis.source.play();\n\n\t}\n\n\treturn this;\n};\n\nTHREE.Audio.prototype.stop = function ( value ) {\n\n\tif (this.context) {\n\t\tthis.source.stop();\n\t\tthis.source.disconnect( this.panner );\n\t\tthis.source = null;\n\t} else {\n\t\tthis.source.pause();\n\t\tthis.source.currentTime = 0;\n\t}\n\tthis.started = false;\n};\n\nTHREE.Audio.prototype.start = function ( value ) {\n\n\tthis.started = true;\n\tif (this.context) {\n\t\tif (this.source) {\n\t\t\tthis.source.disconnect( this.panner );\n\t\t}\n\n\t\tif (this.buffer) {\n\t\t\tthis.source = this.context.createBufferSource();\n\t\t\tthis.source.buffer = this.buffer;\n\t\t\tthis.source.connect( this.panner );\n\t\t\tthis.source.start( 0 );\n\t\t}\n\t} else {\n\t\tthis.source.currentTime = 0;\n\t\tthis.source.play();\n\t}\n\n};\n\nTHREE.Audio.prototype.setLoop = function ( value ) {\n\n\tthis.source.loop = value;\n\n};\n\nTHREE.Audio.prototype.setRefDistance = function ( value ) {\n\n\tif ( this.panner ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t}\n\n};\n\nTHREE.Audio.prototype.setRolloffFactor = function ( value ) {\n\n\tif ( this.panner ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t}\n\n};\n\nTHREE.Audio.prototype.volume = function ( volume, time ) {\n\n\tif ( this.gain ) {\n\n\t\tif ( volume !== undefined ) {\n\t\t\tthis.gain.gain.linearRampToValueAtTime( volume, this.context.currentTime + (time || 0));\n\t\t}\n\n\t\treturn this.gain.gain.value;\n\t}\n\n\tif ( volume !== undefined ) {\n\t\tthis.source.volume = volume;\n\t}\n\n\treturn this.source.volume;\n};\n\nTHREE.Audio.prototype.updateMatrixWorld = ( function () {\n\n\tvar position = new THREE.Vector3();\n\n\treturn function ( force ) {\n\n\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif (this.panner) {\n\n\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t}\n\n\t};\n\n} )();\n\n// File:src/extras/audio/AudioListener.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AudioListener = function () {\n\tvar AudioContext = window.AudioContext || window.webkitAudioContext;\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'AudioListener';\n\n\tif (AudioContext) {\n\t\tthis.context = new AudioContext();\n\t\tthis.input = this.context.createGain();\n\n\t\tthis.input.connect( this.context.destination );\n\t}\n};\n\nTHREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.AudioListener.prototype.volume = function (val) {\n\tif (this.input) {\n\t\tval = val !== undefined && parseFloat(val);\n\t\tif (!isNaN(val)) {\n\t\t\tthis.input.gain.value = val;\n\t\t}\n\n\t\treturn this.input.gain.value;\n\t}\n};\n\nTHREE.AudioListener.prototype.updateMatrixWorld = ( function () {\n\n\tvar position = new THREE.Vector3();\n\tvar quaternion = new THREE.Quaternion();\n\tvar scale = new THREE.Vector3();\n\n\tvar orientation = new THREE.Vector3();\n\n\treturn function ( force ) {\n\n\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tvar listener;\n\n\t\tif (this.context) {\n\t\t\tlistener = this.context.listener;\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\torientation.set( 0, 0, -1 ).applyQuaternion( quaternion );\n\n            // Error Fixed\n            try {\n\t\t\t    listener.setPosition( position.x, position.y, position.z );\n\t\t\t    listener.setOrientation( orientation.x, orientation.y, orientation.z, this.up.x, this.up.y, this.up.z );\n            } catch (e) {}\n\n\t\t}\n\t};\n\n} ());\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/ThreeAudio.js\n ** module id = 37\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author zz85 / https://github.com/zz85\n *\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\n *\n * First implemented by Simon Wallner\n * http://www.simonwallner.at/projects/atmospheric-scattering\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n*/\n\nTHREE.ShaderLib[ 'sky' ] = {\n\n\tuniforms: {\n\n\t\tluminance: { value: 1 },\n\t\tturbidity: { value: 2 },\n\t\treileigh: { value: 1 },\n\t\tmieCoefficient: { value: 0.005 },\n\t\tmieDirectionalG: { value: 0.8 },\n\t\tsunPosition: { value: new THREE.Vector3() }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec3 vWorldPosition;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n\t\t\t\"vWorldPosition = worldPosition.xyz;\",\n\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\",\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform sampler2D skySampler;\",\n\t\t\"uniform vec3 sunPosition;\",\n\t\t\"varying vec3 vWorldPosition;\",\n\n\t\t\"vec3 cameraPos = vec3(0., 0., 0.);\",\n\t\t\"// uniform sampler2D sDiffuse;\",\n\t\t\"// const float turbidity = 10.0; //\",\n\t\t\"// const float reileigh = 2.; //\",\n\t\t\"// const float luminance = 1.0; //\",\n\t\t\"// const float mieCoefficient = 0.005;\",\n\t\t\"// const float mieDirectionalG = 0.8;\",\n\n\t\t\"uniform float luminance;\",\n\t\t\"uniform float turbidity;\",\n\t\t\"uniform float reileigh;\",\n\t\t\"uniform float mieCoefficient;\",\n\t\t\"uniform float mieDirectionalG;\",\n\n\t\t\"// constants for atmospheric scattering\",\n\t\t\"const float e = 2.71828182845904523536028747135266249775724709369995957;\",\n\t\t\"const float pi = 3.141592653589793238462643383279502884197169;\",\n\n\t\t\"const float n = 1.0003; // refractive index of air\",\n\t\t\"const float N = 2.545E25; // number of molecules per unit volume for air at\",\n\t\t\t\t\t\t\t\t\"// 288.15K and 1013mb (sea level -45 celsius)\",\n\t\t\"const float pn = 0.035;\t// depolatization factor for standard air\",\n\n\t\t\"// wavelength of used primaries, according to preetham\",\n\t\t\"const vec3 lambda = vec3(680E-9, 550E-9, 450E-9);\",\n\n\t\t\"// mie stuff\",\n\t\t\"// K coefficient for the primaries\",\n\t\t\"const vec3 K = vec3(0.686, 0.678, 0.666);\",\n\t\t\"const float v = 4.0;\",\n\n\t\t\"// optical length at zenith for molecules\",\n\t\t\"const float rayleighZenithLength = 8.4E3;\",\n\t\t\"const float mieZenithLength = 1.25E3;\",\n\t\t\"const vec3 up = vec3(0.0, 1.0, 0.0);\",\n\n\t\t\"const float EE = 1000.0;\",\n\t\t\"const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\",\n\t\t\"// 66 arc seconds -> degrees, and the cosine of that\",\n\n\t\t\"// earth shadow hack\",\n\t\t\"const float cutoffAngle = pi/1.95;\",\n\t\t\"const float steepness = 1.5;\",\n\n\n\t\t\"vec3 totalRayleigh(vec3 lambda)\",\n\t\t\"{\",\n\t\t\t\"return (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));\",\n\t\t\"}\",\n\n\t\t// see http://blenderartists.org/forum/showthread.php?321110-Shaders-and-Skybox-madness\n\t\t\"// A simplied version of the total Reayleigh scattering to works on browsers that use ANGLE\",\n\t\t\"vec3 simplifiedRayleigh()\",\n\t\t\"{\",\n\t\t\t\"return 0.0005 / vec3(94, 40, 18);\",\n\t\t\t// return 0.00054532832366 / (3.0 * 2.545E25 * pow(vec3(680E-9, 550E-9, 450E-9), vec3(4.0)) * 6.245);\n\t\t\"}\",\n\n\t\t\"float rayleighPhase(float cosTheta)\",\n\t\t\"{\t \",\n\t\t\t\"return (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\"//\treturn (1.0 / (3.0*pi)) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\"//\treturn (3.0 / 4.0) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\"}\",\n\n\t\t\"vec3 totalMie(vec3 lambda, vec3 K, float T)\",\n\t\t\"{\",\n\t\t\t\"float c = (0.2 * T ) * 10E-18;\",\n\t\t\t\"return 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;\",\n\t\t\"}\",\n\n\t\t\"float hgPhase(float cosTheta, float g)\",\n\t\t\"{\",\n\t\t\t\"return (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));\",\n\t\t\"}\",\n\n\t\t\"float sunIntensity(float zenithAngleCos)\",\n\t\t\"{\",\n\t\t// This function originally used `exp(n)`, but it returns an incorrect value\n\t\t// on Samsung S6 phones. So it has been replaced with the equivalent `pow(e, n)`.\n\t\t// See https://github.com/mrdoob/three.js/issues/8382\n\t\t\t\"return EE * max(0.0, 1.0 - pow(e, -((cutoffAngle - acos(zenithAngleCos))/steepness)));\",\n\t\t\"}\",\n\n\t\t\"// float logLuminance(vec3 c)\",\n\t\t\"// {\",\n\t\t\"// \treturn log(c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722);\",\n\t\t\"// }\",\n\n\t\t\"// Filmic ToneMapping http://filmicgames.com/archives/75\",\n\t\t\"float A = 0.15;\",\n\t\t\"float B = 0.50;\",\n\t\t\"float C = 0.10;\",\n\t\t\"float D = 0.20;\",\n\t\t\"float E = 0.02;\",\n\t\t\"float F = 0.30;\",\n\t\t\"float W = 1000.0;\",\n\n\t\t\"vec3 Uncharted2Tonemap(vec3 x)\",\n\t\t\"{\",\n\t\t   \"return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\",\n\t\t\"}\",\n\n\n\t\t\"void main() \",\n\t\t\"{\",\n\t\t\t\"float sunfade = 1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);\",\n\n\t\t\t\"// luminance =  1.0 ;// vWorldPosition.y / 450000. + 0.5; //sunPosition.y / 450000. * 1. + 0.5;\",\n\n\t\t\t \"// gl_FragColor = vec4(sunfade, sunfade, sunfade, 1.0);\",\n\n\t\t\t\"float reileighCoefficient = reileigh - (1.0* (1.0-sunfade));\",\n\n\t\t\t\"vec3 sunDirection = normalize(sunPosition);\",\n\n\t\t\t\"float sunE = sunIntensity(dot(sunDirection, up));\",\n\n\t\t\t\"// extinction (absorbtion + out scattering) \",\n\t\t\t\"// rayleigh coefficients\",\n\n\t\t\t// \"vec3 betaR = totalRayleigh(lambda) * reileighCoefficient;\",\n\t\t\t\"vec3 betaR = simplifiedRayleigh() * reileighCoefficient;\",\n\n\t\t\t\"// mie coefficients\",\n\t\t\t\"vec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;\",\n\n\t\t\t\"// optical length\",\n\t\t\t\"// cutoff angle at 90 to avoid singularity in next formula.\",\n\t\t\t\"float zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPos))));\",\n\t\t\t\"float sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\",\n\t\t\t\"float sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\",\n\n\n\n\t\t\t\"// combined extinction factor\t\",\n\t\t\t\"vec3 Fex = exp(-(betaR * sR + betaM * sM));\",\n\n\t\t\t\"// in scattering\",\n\t\t\t\"float cosTheta = dot(normalize(vWorldPosition - cameraPos), sunDirection);\",\n\n\t\t\t\"float rPhase = rayleighPhase(cosTheta*0.5+0.5);\",\n\t\t\t\"vec3 betaRTheta = betaR * rPhase;\",\n\n\t\t\t\"float mPhase = hgPhase(cosTheta, mieDirectionalG);\",\n\t\t\t\"vec3 betaMTheta = betaM * mPhase;\",\n\n\n\t\t\t\"vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));\",\n\t\t\t\"Lin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up, sunDirection),5.0),0.0,1.0));\",\n\n\t\t\t\"//nightsky\",\n\t\t\t\"vec3 direction = normalize(vWorldPosition - cameraPos);\",\n\t\t\t\"float theta = acos(direction.y); // elevation --> y-axis, [-pi/2, pi/2]\",\n\t\t\t\"float phi = atan(direction.z, direction.x); // azimuth --> x-axis [-pi/2, pi/2]\",\n\t\t\t\"vec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);\",\n\t\t\t\"// vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;\",\n\t\t\t\"vec3 L0 = vec3(0.1) * Fex;\",\n\n\t\t\t\"// composition + solar disc\",\n\t\t\t\"//if (cosTheta > sunAngularDiameterCos)\",\n\t\t\t\"float sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);\",\n\t\t\t\"// if (normalize(vWorldPosition - cameraPos).y>0.0)\",\n\t\t\t\"L0 += (sunE * 19000.0 * Fex)*sundisk;\",\n\n\n\t\t\t\"vec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));\",\n\n\t\t\t\"vec3 texColor = (Lin+L0);   \",\n\t\t\t\"texColor *= 0.04 ;\",\n\t\t\t\"texColor += vec3(0.0,0.001,0.0025)*0.3;\",\n\n\t\t\t\"float g_fMaxLuminance = 1.0;\",\n\t\t\t\"float fLumScaled = 0.1 / luminance;     \",\n\t\t\t\"float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (g_fMaxLuminance * g_fMaxLuminance)))) / (1.0 + fLumScaled); \",\n\n\t\t\t\"float ExposureBias = fLumCompressed;\",\n\n\t\t\t\"vec3 curr = Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);\",\n\t\t\t\"vec3 color = curr*whiteScale;\",\n\n\t\t\t\"vec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));\",\n\n\n\t\t\t\"gl_FragColor.rgb = retColor;\",\n\n\t\t\t\"gl_FragColor.a = 1.0;\",\n\t\t\"}\",\n\n\t].join( \"\\n\" )\n\n};\n\nTHREE.Sky = function () {\n\n\tvar skyShader = THREE.ShaderLib[ \"sky\" ];\n\tvar skyUniforms = THREE.UniformsUtils.clone( skyShader.uniforms );\n\n\tvar skyMat = new THREE.ShaderMaterial( {\n\t\tfragmentShader: skyShader.fragmentShader,\n\t\tvertexShader: skyShader.vertexShader,\n\t\tuniforms: skyUniforms,\n\t\tside: THREE.BackSide\n\t} );\n\n\tvar skyGeo = new THREE.SphereBufferGeometry( 450000, 32, 15 );\n\tvar skyMesh = new THREE.Mesh( skyGeo, skyMat );\n\n\n\t// Expose variables\n\tthis.mesh = skyMesh;\n\tthis.uniforms = skyUniforms;\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./bower_components/SkyShader/index.js\n ** module id = 38\n ** module chunks = 0\n **/","'use strict';\n\nvar assign        = require('es5-ext/object/assign')\n  , normalizeOpts = require('es5-ext/object/normalize-options')\n  , isCallable    = require('es5-ext/object/is-callable')\n  , contains      = require('es5-ext/string/#/contains')\n\n  , d;\n\nd = module.exports = function (dscr, value/*, options*/) {\n\tvar c, e, w, options, desc;\n\tif ((arguments.length < 2) || (typeof dscr !== 'string')) {\n\t\toptions = value;\n\t\tvalue = dscr;\n\t\tdscr = null;\n\t} else {\n\t\toptions = arguments[2];\n\t}\n\tif (dscr == null) {\n\t\tc = w = true;\n\t\te = false;\n\t} else {\n\t\tc = contains.call(dscr, 'c');\n\t\te = contains.call(dscr, 'e');\n\t\tw = contains.call(dscr, 'w');\n\t}\n\n\tdesc = { value: value, configurable: c, enumerable: e, writable: w };\n\treturn !options ? desc : assign(normalizeOpts(options), desc);\n};\n\nd.gs = function (dscr, get, set/*, options*/) {\n\tvar c, e, options, desc;\n\tif (typeof dscr !== 'string') {\n\t\toptions = set;\n\t\tset = get;\n\t\tget = dscr;\n\t\tdscr = null;\n\t} else {\n\t\toptions = arguments[3];\n\t}\n\tif (get == null) {\n\t\tget = undefined;\n\t} else if (!isCallable(get)) {\n\t\toptions = get;\n\t\tget = set = undefined;\n\t} else if (set == null) {\n\t\tset = undefined;\n\t} else if (!isCallable(set)) {\n\t\toptions = set;\n\t\tset = undefined;\n\t}\n\tif (dscr == null) {\n\t\tc = true;\n\t\te = false;\n\t} else {\n\t\tc = contains.call(dscr, 'c');\n\t\te = contains.call(dscr, 'e');\n\t}\n\n\tdesc = { get: get, set: set, configurable: c, enumerable: e };\n\treturn !options ? desc : assign(normalizeOpts(options), desc);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/d/index.js\n ** module id = 39\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = function (fn) {\n\tif (typeof fn !== 'function') throw new TypeError(fn + \" is not a function\");\n\treturn fn;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/valid-callable.js\n ** module id = 40\n ** module chunks = 0\n **/","/**\n * lodash 3.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * A specialized version of `_.forEach` for arrays without support for callback\n * shorthands or `this` binding.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash._arrayeach/index.js\n ** module id = 41\n ** module chunks = 0\n **/","/**\n * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar keys = require('lodash.keys');\n\n/**\n * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * The base implementation of `_.forEach` without support for callback\n * shorthands and `this` binding.\n *\n * @private\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object|string} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `baseForIn` and `baseForOwn` which iterates\n * over `object` properties returned by `keysFunc` invoking `iteratee` for\n * each property. Iteratee functions may exit iteration early by explicitly\n * returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for callback\n * shorthands and `this` binding.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    var length = collection ? getLength(collection) : 0;\n    if (!isLength(length)) {\n      return eachFunc(collection, iteratee);\n    }\n    var index = fromRight ? length : -1,\n        iterable = toObject(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for `_.forIn` or `_.forInRight`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var iterable = toObject(object),\n        props = keysFunc(object),\n        length = props.length,\n        index = fromRight ? length : -1;\n\n    while ((fromRight ? index-- : ++index < length)) {\n      var key = props[index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * Gets the \"length\" property value of `object`.\n *\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n * that affects Safari on at least iOS 8.1-8.3 ARM64.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {*} Returns the \"length\" value.\n */\nvar getLength = baseProperty('length');\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Converts `value` to an object if it's not one.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {Object} Returns the object.\n */\nfunction toObject(value) {\n  return isObject(value) ? value : Object(value);\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = baseEach;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash._baseeach/index.js\n ** module id = 42\n ** module chunks = 0\n **/","/**\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * A specialized version of `baseCallback` which only supports `this` binding\n * and specifying the number of arguments to provide to `func`.\n *\n * @private\n * @param {Function} func The function to bind.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {number} [argCount] The number of arguments to provide to `func`.\n * @returns {Function} Returns the callback.\n */\nfunction bindCallback(func, thisArg, argCount) {\n  if (typeof func != 'function') {\n    return identity;\n  }\n  if (thisArg === undefined) {\n    return func;\n  }\n  switch (argCount) {\n    case 1: return function(value) {\n      return func.call(thisArg, value);\n    };\n    case 3: return function(value, index, collection) {\n      return func.call(thisArg, value, index, collection);\n    };\n    case 4: return function(accumulator, value, index, collection) {\n      return func.call(thisArg, accumulator, value, index, collection);\n    };\n    case 5: return function(value, other, key, object, source) {\n      return func.call(thisArg, value, other, key, object, source);\n    };\n  }\n  return function() {\n    return func.apply(thisArg, arguments);\n  };\n}\n\n/**\n * This method returns the first argument provided to it.\n *\n * @static\n * @memberOf _\n * @category Utility\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'user': 'fred' };\n *\n * _.identity(object) === object;\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = bindCallback;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash._bindcallback/index.js\n ** module id = 43\n ** module chunks = 0\n **/","/**\n * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar arrayTag = '[object Array]',\n    funcTag = '[object Function]';\n\n/** Used to detect host constructors (Safari > 5). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/**\n * Checks if `value` is object-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar fnToString = Function.prototype.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeIsArray = getNative(Array, 'isArray');\n\n/**\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = object == null ? undefined : object[key];\n  return isNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(function() { return arguments; }());\n * // => false\n */\nvar isArray = nativeIsArray || function(value) {\n  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;\n};\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in older versions of Chrome and Safari which return 'function' for regexes\n  // and Safari 8 equivalents which return 'object' for typed array constructors.\n  return isObject(value) && objToString.call(value) == funcTag;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is a native function.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n * @example\n *\n * _.isNative(Array.prototype.push);\n * // => true\n *\n * _.isNative(_);\n * // => false\n */\nfunction isNative(value) {\n  if (value == null) {\n    return false;\n  }\n  if (isFunction(value)) {\n    return reIsNative.test(fnToString.call(value));\n  }\n  return isObjectLike(value) && reIsHostCtor.test(value);\n}\n\nmodule.exports = isArray;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash.isarray/index.js\n ** module id = 44\n ** module chunks = 0\n **/","/**\n * lodash 3.2.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar baseCopy = require('lodash._basecopy'),\n    keys = require('lodash.keys');\n\n/**\n * The base implementation of `_.assign` without support for argument juggling,\n * multiple sources, and `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return source == null\n    ? object\n    : baseCopy(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._baseassign/index.js\n ** module id = 45\n ** module chunks = 0\n **/","/**\n * lodash 3.1.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar bindCallback = require('lodash._bindcallback'),\n    isIterateeCall = require('lodash._isiterateecall'),\n    restParam = require('lodash.restparam');\n\n/**\n * Creates a function that assigns properties of source object(s) to a given\n * destination object.\n *\n * **Note:** This function is used to create `_.assign`, `_.defaults`, and `_.merge`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return restParam(function(object, sources) {\n    var index = -1,\n        length = object == null ? 0 : sources.length,\n        customizer = length > 2 ? sources[length - 2] : undefined,\n        guard = length > 2 ? sources[2] : undefined,\n        thisArg = length > 1 ? sources[length - 1] : undefined;\n\n    if (typeof customizer == 'function') {\n      customizer = bindCallback(customizer, thisArg, 5);\n      length -= 2;\n    } else {\n      customizer = typeof thisArg == 'function' ? thisArg : undefined;\n      length -= (customizer ? 1 : 0);\n    }\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._createassigner/index.js\n ** module id = 46\n ** module chunks = 0\n **/","'use strict';\n\nvar forEach = Array.prototype.forEach, create = Object.create;\n\nvar process = function (src, obj) {\n\tvar key;\n\tfor (key in src) obj[key] = src[key];\n};\n\nmodule.exports = function (options/*, …options*/) {\n\tvar result = create(null);\n\tforEach.call(arguments, function (options) {\n\t\tif (options == null) return;\n\t\tprocess(Object(options), result);\n\t});\n\treturn result;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/normalize-options.js\n ** module id = 48\n ** module chunks = 0\n **/","// Deprecated\n\n'use strict';\n\nmodule.exports = function (obj) { return typeof obj === 'function'; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/is-callable.js\n ** module id = 49\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? Object.assign\n\t: require('./shim');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/assign/index.js\n ** module id = 50\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? String.prototype.contains\n\t: require('./shim');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/string/#/contains/index.js\n ** module id = 51\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = function () {\n\tvar assign = Object.assign, obj;\n\tif (typeof assign !== 'function') return false;\n\tobj = { foo: 'raz' };\n\tassign(obj, { bar: 'dwa' }, { trzy: 'trzy' });\n\treturn (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/assign/is-implemented.js\n ** module id = 52\n ** module chunks = 0\n **/","'use strict';\n\nvar keys  = require('../keys')\n  , value = require('../valid-value')\n\n  , max = Math.max;\n\nmodule.exports = function (dest, src/*, …srcn*/) {\n\tvar error, i, l = max(arguments.length, 2), assign;\n\tdest = Object(value(dest));\n\tassign = function (key) {\n\t\ttry { dest[key] = src[key]; } catch (e) {\n\t\t\tif (!error) error = e;\n\t\t}\n\t};\n\tfor (i = 1; i < l; ++i) {\n\t\tsrc = arguments[i];\n\t\tkeys(src).forEach(assign);\n\t}\n\tif (error !== undefined) throw error;\n\treturn dest;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/assign/shim.js\n ** module id = 53\n ** module chunks = 0\n **/","'use strict';\n\nvar str = 'razdwatrzy';\n\nmodule.exports = function () {\n\tif (typeof str.contains !== 'function') return false;\n\treturn ((str.contains('dwa') === true) && (str.contains('foo') === false));\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/string/#/contains/is-implemented.js\n ** module id = 55\n ** module chunks = 0\n **/","'use strict';\n\nvar indexOf = String.prototype.indexOf;\n\nmodule.exports = function (searchString/*, position*/) {\n\treturn indexOf.call(this, searchString, arguments[1]) > -1;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/string/#/contains/shim.js\n ** module id = 56\n ** module chunks = 0\n **/","/**\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property names to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @returns {Object} Returns `object`.\n */\nfunction baseCopy(source, props, object) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n    object[key] = source[key];\n  }\n  return object;\n}\n\nmodule.exports = baseCopy;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._baseassign/~/lodash._basecopy/index.js\n ** module id = 57\n ** module chunks = 0\n **/","/**\n * lodash 3.0.9 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^\\d+$/;\n\n/**\n * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Gets the \"length\" property value of `object`.\n *\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n * that affects Safari on at least iOS 8.1-8.3 ARM64.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {*} Returns the \"length\" value.\n */\nvar getLength = baseProperty('length');\n\n/**\n * Checks if `value` is array-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(getLength(value));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return value > -1 && value % 1 == 0 && value < length;\n}\n\n/**\n * Checks if the provided arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n      ? (isArrayLike(object) && isIndex(index, object.length))\n      : (type == 'string' && index in object)) {\n    var other = object[index];\n    return value === value ? (value === other) : (other !== other);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isIterateeCall;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._createassigner/~/lodash._isiterateecall/index.js\n ** module id = 59\n ** module chunks = 0\n **/","/**\n * lodash 3.6.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that invokes `func` with the `this` binding of the\n * created function and arguments from `start` and beyond provided as an array.\n *\n * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n * @example\n *\n * var say = _.restParam(function(what, names) {\n *   return what + ' ' + _.initial(names).join(', ') +\n *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n * });\n *\n * say('hello', 'fred', 'barney', 'pebbles');\n * // => 'hello fred, barney, & pebbles'\n */\nfunction restParam(func, start) {\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        rest = Array(length);\n\n    while (++index < length) {\n      rest[index] = args[start + index];\n    }\n    switch (start) {\n      case 0: return func.call(this, rest);\n      case 1: return func.call(this, args[0], rest);\n      case 2: return func.call(this, args[0], args[1], rest);\n    }\n    var otherArgs = Array(start + 1);\n    index = -1;\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = rest;\n    return func.apply(this, otherArgs);\n  };\n}\n\nmodule.exports = restParam;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._createassigner/~/lodash.restparam/index.js\n ** module id = 60\n ** module chunks = 0\n **/","/**\n * lodash 3.9.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]';\n\n/** Used to detect host constructors (Safari > 5). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/**\n * Checks if `value` is object-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar fnToString = Function.prototype.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = object == null ? undefined : object[key];\n  return isNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in older versions of Chrome and Safari which return 'function' for regexes\n  // and Safari 8 equivalents which return 'object' for typed array constructors.\n  return isObject(value) && objToString.call(value) == funcTag;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is a native function.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n * @example\n *\n * _.isNative(Array.prototype.push);\n * // => true\n *\n * _.isNative(_);\n * // => false\n */\nfunction isNative(value) {\n  if (value == null) {\n    return false;\n  }\n  if (isFunction(value)) {\n    return reIsNative.test(fnToString.call(value));\n  }\n  return isObjectLike(value) && reIsHostCtor.test(value);\n}\n\nmodule.exports = getNative;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash.keys/~/lodash._getnative/index.js\n ** module id = 61\n ** module chunks = 0\n **/","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\nmodule.exports = isArguments;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash.keys/~/lodash.isarguments/index.js\n ** module id = 62\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = function (value) {\n\tif (value == null) throw new TypeError(\"Cannot use null or undefined\");\n\treturn value;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/valid-value.js\n ** module id = 64\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? Object.keys\n\t: require('./shim');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/keys/index.js\n ** module id = 65\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = function () {\n\ttry {\n\t\tObject.keys('primitive');\n\t\treturn true;\n\t} catch (e) { return false; }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/keys/is-implemented.js\n ** module id = 68\n ** module chunks = 0\n **/","'use strict';\n\nvar keys = Object.keys;\n\nmodule.exports = function (object) {\n\treturn keys(object == null ? object : Object(object));\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/keys/shim.js\n ** module id = 69\n ** module chunks = 0\n **/","/**\n * lodash 3.1.2 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar getNative = require('lodash._getnative'),\n    isArguments = require('lodash.isarguments'),\n    isArray = require('lodash.isarray');\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^\\d+$/;\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = getNative(Object, 'keys');\n\n/**\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Gets the \"length\" property value of `object`.\n *\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n * that affects Safari on at least iOS 8.1-8.3 ARM64.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {*} Returns the \"length\" value.\n */\nvar getLength = baseProperty('length');\n\n/**\n * Checks if `value` is array-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(getLength(value));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return value > -1 && value % 1 == 0 && value < length;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * A fallback implementation of `Object.keys` which creates an array of the\n * own enumerable property names of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction shimKeys(object) {\n  var props = keysIn(object),\n      propsLength = props.length,\n      length = propsLength && object.length;\n\n  var allowIndexes = !!length && isLength(length) &&\n    (isArray(object) || isArguments(object));\n\n  var index = -1,\n      result = [];\n\n  while (++index < propsLength) {\n    var key = props[index];\n    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nvar keys = !nativeKeys ? shimKeys : function(object) {\n  var Ctor = object == null ? undefined : object.constructor;\n  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||\n      (typeof object != 'function' && isArrayLike(object))) {\n    return shimKeys(object);\n  }\n  return isObject(object) ? nativeKeys(object) : [];\n};\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  if (object == null) {\n    return [];\n  }\n  if (!isObject(object)) {\n    object = Object(object);\n  }\n  var length = object.length;\n  length = (length && isLength(length) &&\n    (isArray(object) || isArguments(object)) && length) || 0;\n\n  var Ctor = object.constructor,\n      index = -1,\n      isProto = typeof Ctor == 'function' && Ctor.prototype === object,\n      result = Array(length),\n      skipIndexes = length > 0;\n\n  while (++index < length) {\n    result[index] = (index + '');\n  }\n  for (var key in object) {\n    if (!(skipIndexes && isIndex(key, length)) &&\n        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = keys;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash._baseeach/~/lodash.keys/index.js\n ** module id = 54\n ** module chunks = 0\n **/"],"sourceRoot":"","file":"vr.js"}