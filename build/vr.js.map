{"version":3,"sources":["webpack:///vr.js","webpack:///webpack/bootstrap d90f45d9c081d9fe9fc5","webpack:///./src/entry.js","webpack:///./src/vr.js","webpack:///./src/css/style.css?21aa","webpack:///./src/css/style.css","webpack:///./~/ismobilejs/isMobile.js","webpack:///./~/style-loader/addStyles.js","webpack:///./src/materials.js","webpack:///./src/vr-object.js","webpack:///./src/objects ^\\.\\/.*$","webpack:///./src/objects/empty.js","webpack:///./bower_components/nosleep/NoSleep.js","webpack:///./src/objects/box.js","webpack:///./src/objects/cylinder.js","webpack:///./src/objects/floor.js","webpack:///./src/objects/grid.js","webpack:///./src/objects/image.js","webpack:///./src/objects/panorama.js","webpack:///./src/objects/sky.js","webpack:///./src/objects/sound.js","webpack:///./src/objects/sphere.js","webpack:///./src/objects/text.js","webpack:///./src/objects/torus.js","webpack:///./src/objects/video.js","webpack:///./bower_components/DeviceOrientationControls/index.js","webpack:///./bower_components/OrbitControls/index.js","webpack:///./bower_components/AugmentedConsole/index.js","webpack:///./src/lib/CSS3DRenderer.js","webpack:///./src/lib/CanvasRenderer.js","webpack:///./src/lib/Projector.js","webpack:///./src/lib/VRStereoEffect.js","webpack:///./src/lib/VRControls.js","webpack:///./~/event-emitter/index.js","webpack:///./~/css-loader/lib/css-base.js","webpack:///./~/three/build/three.js","webpack:///./src/utils/urlregex.js","webpack:///./~/lodash.foreach/index.js","webpack:///./~/lodash.assign/index.js","webpack:///./src/lib/ThreeAudio.js","webpack:///./bower_components/SkyShader/index.js","webpack:///./~/event-emitter/~/d/index.js","webpack:///./~/event-emitter/~/es5-ext/object/valid-callable.js","webpack:///./~/lodash.assign/~/lodash._baseassign/index.js","webpack:///./~/lodash.assign/~/lodash._createassigner/index.js","webpack:///./~/lodash.foreach/~/lodash._baseeach/index.js","webpack:///./~/lodash.foreach/~/lodash._arrayeach/index.js","webpack:///./~/lodash.foreach/~/lodash._bindcallback/index.js","webpack:///./~/lodash.foreach/~/lodash.isarray/index.js","webpack:///./~/event-emitter/~/es5-ext/object/normalize-options.js","webpack:///./~/event-emitter/~/es5-ext/object/is-callable.js","webpack:///./~/event-emitter/~/es5-ext/object/assign/index.js","webpack:///./~/event-emitter/~/es5-ext/string/#/contains/index.js","webpack:///./~/event-emitter/~/es5-ext/object/assign/is-implemented.js","webpack:///./~/event-emitter/~/es5-ext/object/assign/shim.js","webpack:///./~/event-emitter/~/es5-ext/string/#/contains/is-implemented.js","webpack:///./~/event-emitter/~/es5-ext/string/#/contains/shim.js","webpack:///./~/lodash.assign/~/lodash._baseassign/~/lodash._basecopy/index.js","webpack:///./~/lodash.assign/~/lodash._createassigner/~/lodash._isiterateecall/index.js","webpack:///./~/lodash.assign/~/lodash._createassigner/~/lodash.restparam/index.js","webpack:///./~/lodash.assign/~/lodash.keys/~/lodash._getnative/index.js","webpack:///./~/lodash.assign/~/lodash.keys/~/lodash.isarguments/index.js","webpack:///./~/event-emitter/~/es5-ext/object/valid-value.js","webpack:///./~/event-emitter/~/es5-ext/object/keys/index.js","webpack:///./~/event-emitter/~/es5-ext/object/keys/is-implemented.js","webpack:///./~/event-emitter/~/es5-ext/object/keys/shim.js","webpack:///./~/lodash.foreach/~/lodash._baseeach/~/lodash.keys/index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","i","_m","args","slice","fn","a","b","apply","concat","initRequirements","VR","initialize","noSleep","NoSleep","window","addEventListener","resize","isMobile","any","disableOrientation","THREE","isFullscreen","document","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","fullScreenError","vrMode","vrEffect","exit","pruneObject","object","raycastable","indexOf","splice","vrObjects","VRObject","findObject","children","forEach","raycast","intersect","intersects","parent","vrObject","prune","raycaster","ray","origin","setFromMatrixPosition","camera","matrixWorld","direction","set","unproject","sub","normalize","intersectObjects","length","scene","push","Mesh","target","emit","render","Date","now","lastTick","waitRenderInative","delta","Math","min","vrControls","update","animationCallbacks","cb","updateMatrixWorld","mouseControls","autoRotate","renderLoop","going","requestAnimationFrame","stop","start","visibilityChange","hidden","mozHidden","msHidden","webkitHidden","audioListener","volume","width","height","innerWidth","innerHeight","aspect","updateProjectionMatrix","renderer","setSize","initShake","lastX","lastY","lastZ","lastTime","threshold","evt","time","diff","dist","current","accelerationIncludingGravity","deltaX","deltaY","deltaZ","undefined","abs","x","y","z","sqrt","navigator","vibrate","orientationPossible","initScene","mode","attachCanvas","body","insertBefore","domElement","firstChild","renderMode","MODE_CSS","CSS3DRenderer","MODE_CANVAS","CanvasRenderer","setPixelRatio","devicePixelRatio","isSupportWebgl","WebGLRenderer","antialias","setClearColor","event","Scene","bodyWrapper","name","moveTo","cameraWrapper","PerspectiveCamera","NEAR","FAR","setFocalLength","add","AudioListener","VRControls","freeze","orientationEnabled","VRStereoEffect","near","far","screen","enabled","reset","lockOrientation","mozLockOrientation","orientation","lock","exitVR","position","rotation","isWebview","hmd","OrbitControls","target0","copy","enableZoom","enablePan","autoRotateSpeed","enableDamping","dampingFactor","autoRotateTimer","clearTimeout","setTimeout","dLight","DirectionalLight","castShadow","shadowCameraVisible","shadowMapWidth","shadowMapHeight","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraFar","shadowCameraNear","shadowDarkness","AmbientLight","canvas","zeroSensor","Raycaster","ImageUtils","crossOrigin","eventEmitter","materials","nop","requestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","bind","objectMethods","createElement","gl","experimental","getContext","Boolean","init","controls","animate","callback","end","requestVR","requestFullScreen","enableOrientation","controlMode","times","n","method","key","creator","options","obj","prototype","this","hasOwnProperty","Object","defineProperty","get","content","locals","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","global","apple_phone","apple_ipod","apple_tablet","android_phone","android_tablet","amazon_phone","amazon_tablet","windows_phone","windows_tablet","other_blackberry","other_blackberry_10","other_opera","other_chrome","other_firefox","seven_inch","RegExp","match","regex","userAgent","test","IsMobileClass","ua","tmp","split","apple","phone","ipod","tablet","device","amazon","android","windows","other","blackberry","blackberry10","opera","firefox","chrome","instantiate","IM","Class","addStylesToDom","styles","item","domStyle","stylesInDom","refs","j","parts","addStyle","listToStyles","list","newStyles","css","media","sourceMap","part","insertStyleElement","styleElement","head","getHeadElement","lastStyleElementInsertedAtTop","styleElementsInsertedAtTop","insertAt","nextSibling","appendChild","Error","removeStyleElement","parentNode","removeChild","idx","createStyleElement","type","createLinkElement","linkElement","rel","remove","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","URL","createObjectURL","revokeObjectURL","Blob","btoa","updateLink","href","applyToTag","newObj","index","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","setAttribute","unescape","encodeURIComponent","JSON","stringify","blob","oldSrc","memoize","memo","arguments","isOldIE","toLowerCase","getElementsByTagName","newList","mayRemove","textStore","replacement","filter","join","imageTexture","src","mapping","imageLoaded","scale","ctx","iOS","image","naturalWidth","naturalHeight","max","floor","drawImage","texture","needsUpdate","parse","isDataUri","dataUri","exec","urlRegex","images","location","hostname","port","Texture","material","threeTexture","textures","opts","Material","materialTypes","MeshLambertMaterial","map","assign","ambient","color","emissive","specularMap","normalMap","alphaMap","envMap","lightMap","val","assetPath","lambert","basic","MeshBasicMaterial","phong","MeshPhongMaterial","normal","MeshNormalMaterial","depth","MeshDepthMaterial","textureFiles","asphalt","repeat","brick-tiles","bricks","checkerboard","grass","metal-floor","shininess","metal","shading","SmoothShading","stone","tiles","weathered-wood","wood","standard","library","props","textureFactory","file","imagePath","url","Vector2","wrapS","wrapT","RepeatWrapping","materialDef","distance","geometry","scratchVector1","worldToLocal","boundingBox","distanceToPoint","scratchVector2","distanceTo","frustum","cameraViewProjectionMatrix","self","isNear","wasNear","NEAR_DISTANCE","receiveShadow","computeBoundingBox","allObjects","parseFloat","setMaterial","Color","prop","visible","Frustum","Matrix4","matrixWorldInverse","getInverse","multiplyMatrices","projectionMatrix","setFromMatrix","intersectsObject","xAxis","Vector3","yAxis","zAxis","WeakMap","hide","show","isNaN","moveX","translateX","moveY","translateY","moveUp","moveDown","moveZ","translateZ","rotateX","angle","rotateOnAxis","rotateY","rotateZ","setScale","e","count","Quaternion","offset","Object3D","webpackContext","req","webpackContextResolve","./box","./box.js","./cylinder","./cylinder.js","./empty","./empty.js","./floor","./floor.js","./grid","./grid.js","./image","./image.js","./panorama","./panorama.js","./sky","./sky.js","./sound","./sound.js","./sphere","./sphere.js","./text","./text.js","./torus","./torus.js","./video","./video.js","keys","resolve","root","addSourceToVideo","element","dataURI","source","Android","WebM","MP4","noSleepTimer","noSleepVideo","enable","duration","disable","setInterval","play","clearInterval","pause","BoxGeometry","mesh","cylinder","CylinderGeometry","radiusTop","radiusBottom","radiusSegments","heightSegments","openEnded","CircleGeometry","radius","segments","applyMatrix","makeRotationX","PI","size","step","GridHelper","setColors","colorCenterLine","color1","colorGrid","color2","tex","UVMapping","t","makeScale","PlaneBufferGeometry","side","DoubleSide","transparent","loadTexture","path","_parent","texturePlaceholder","overdraw","Image","onload","dispatchEvent","scaleX","scaleY","offsetX","offsetY","phiStart","phiLength","thetaStart","thetaLength","SphereGeometry","makeRotationY","mapRender","isListener","context","fillStyle","fillRect","STR_CHILDEN_NAME","preview","pretex","mapKey","cubeSrc","left","right","down","top","front","back","getObjectByName","lastCube","cube","sides","callbackOnload","CSS3DObject","fromArray","arrMaterial","MultiMaterial","data","stereo","userData","TAU","HALF_PI","params","mod","sinTheta","cosTheta","phi","sinPhi","cosPhi","sin","altitude","cos","azimuth","sunPosition","light","intensity","exp","multiplyScalar","Sky","setOptions","param","uniforms","value","Array","isArray","setAltitude","setAzimuth","listener","Audio","load","widthSegments","fontSizeRegex","newLineRegex","spaceRegex","log2","log","nextPowerOfTwo","pow","ceil","Line","word","spaceWidth","measureText","totalWidth","wordsWidth","words","wrap","text","letter","line","inherit","fontSize","padding","lineHeight","measure","lines","getComputedStyle","resolution","wrapped","font","String","trim","charAt","reduce","previous","mipmap","textAlign","textBaseline","space","fillText","textWidth","textHeight","container","wordWidth","minFilter","LinearMipMapLinearFilter","generateMipmaps","TorusGeometry","tube","radialSegments","tubularSegments","arc","video","extRegex","isPowerOfTwo","num","loadedMetadata","newAspectRatio","vid","videoWidth","videoHeight","sphere","aspectRatio","LinearFilter","playing","setSource","sources","ext","hostΩ","canPlayType","loop","VideoTexture","format","RGBFormat","readyState","vol","muted","currentTime","error","code","MediaError","MEDIA_ERR_DECODE","touchStart","removeEventListener","DeviceOrientationControls","scope","reorder","deviceOrientation","screenOrientation","alpha","alphaOffsetAngle","onDeviceOrientationChangeEvent","onScreenOrientationChangeEvent","setObjectQuaternion","zee","euler","Euler","q0","q1","quaternion","beta","gamma","orient","setFromEuler","multiply","setFromAxisAngle","connect","disconnect","degToRad","updateAlphaOffsetAngle","dispose","getAutoRotationAngle","getZoomScale","zoomSpeed","rotateLeft","sphericalDelta","theta","rotateUp","dollyIn","dollyScale","OrthographicCamera","zoom","minZoom","maxZoom","zoomChanged","dollyOut","handleMouseDownRotate","rotateStart","clientX","clientY","handleMouseDownDolly","dollyStart","handleMouseDownPan","panStart","handleMouseMoveRotate","rotateEnd","rotateDelta","subVectors","clientWidth","rotateSpeed","clientHeight","handleMouseMoveDolly","dollyEnd","dollyDelta","handleMouseMovePan","panEnd","panDelta","pan","handleMouseUp","handleMouseWheel","handleKeyDown","keyCode","UP","keyPanSpeed","BOTTOM","LEFT","RIGHT","handleTouchStartRotate","touches","pageX","pageY","handleTouchStartDolly","dx","dy","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleTouchEnd","onMouseDown","preventDefault","button","mouseButtons","ORBIT","enableRotate","state","STATE","ROTATE","ZOOM","DOLLY","PAN","NONE","onMouseMove","onMouseUp","startEvent","endEvent","onMouseWheel","stopPropagation","onKeyDown","enableKeys","onTouchStart","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","onTouchMove","onTouchEnd","onContextMenu","minDistance","maxDistance","Infinity","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","MOUSE","MIDDLE","clone","position0","zoom0","getPolarAngle","spherical","getAzimuthalAngle","changeEvent","quat","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","applyQuaternion","setFromVector3","makeSafe","panOffset","setFromSpherical","lookAt","distanceToSquared","EPS","dot","Spherical","panLeft","v","objectMatrix","setFromMatrixColumn","panUp","targetDistance","tan","fov","matrix","bottom","create","EventDispatcher","constructor","defineProperties","center","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","addSupportedType","supportedTypes","_oldConsole","console","elements","Matrix3","Vector4","w","order","Ray","Ray origin","Ray direction","special","style","CSS3DSprite","_width","_height","_widthHalf","_heightHalf","cache","objects","overflow","WebkitTransformStyle","MozTransformStyle","oTransformStyle","transformStyle","cameraElement","getSize","epsilon","getCameraCSSMatrix","getObjectCSSMatrix","renderObject","transpose","copyPosition","cachedStyle","WebkitTransform","MozTransform","oTransform","transform","l","getEffectiveFOV","WebkitPerspective","MozPerspective","oPerspective","perspective","SpriteCanvasMaterial","parameters","program","setValues","calculateLights","_ambientLight","setRGB","_directionalLights","_pointLights","ll","_lights","lightColor","PointLight","calculateLight","_lightColor","lightPosition","_vector3","amount","renderSprite","v1","setOpacity","opacity","setBlending","blending","_canvasWidthHalf","_canvasHeightHalf","_elemBox","SpriteMaterial","pattern","_patterns","version","textureToPattern","setFillStyle","bitmap","ox","oy","sx","sy","cx","cy","_context","save","translate","rotate","restore","getStyle","setStrokeStyle","renderLine","v2","beginPath","positionScreen","lineTo","LineBasicMaterial","setLineWidth","linewidth","setLineCap","linecap","setLineJoin","linejoin","vertexColors","VertexColors","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","expandByScalar","LineDashedMaterial","setLineDash","dashSize","gapSize","renderFace3","v3","uv1","uv2","uv3","_this","info","vertices","faces","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","drawTriangle","_diffuseColor","_emissiveColor","FaceColors","_color","_centroid","positionWorld","divideScalar","normalModel","wireframe","strokePath","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","fillPath","_uvs","uvs","patternPath","SphericalReflectionMapping","_normal","vertexNormalsModel","applyMatrix3","_normalViewMatrix","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","addScalar","x0","y0","x1","y1","x2","y2","closePath","fill","CompressedTexture","DataTexture","complete","setTransform","repeatX","repeatY","createPattern","onUpdate","u0","v0","u1","u2","d","f","det","idet","expand","pixels","_contextGlobalAlpha","globalAlpha","_contextGlobalCompositeOperation","NormalBlending","globalCompositeOperation","AdditiveBlending","SubtractiveBlending","MultiplyBlending","_contextLineWidth","lineWidth","_contextLineCap","lineCap","_contextLineJoin","lineJoin","_contextStrokeStyle","strokeStyle","_contextFillStyle","_contextLineDash","_renderData","_elements","_camera","_v1","_v2","_v3","_projector","Projector","_canvas","_canvasWidth","_canvasHeight","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_pixelRatio","_clearColor","_clearAlpha","RenderableVertex","_clipBox","Box2","_clearBox","autoClear","sortObjects","sortElements","supportsVertexTextures","setFaceCulling","getContextAttributes","getPixelRatio","updateStyle","setViewport","setScissor","setScissorTest","setClearColorHex","hex","getClearColor","getClearAlpha","getMaxAnisotropy","clear","isEmpty","clearRect","r","g","makeEmpty","clearColor","clearDepth","clearStencil","Camera","projectScene","lights","getNormalMatrix","el","RenderableSprite","RenderableLine","setFromPoints","intersectsBox","RenderableFace","union","RenderableObject","renderOrder","vertexNormalsLength","vertex","getNextObjectInPool","_objectCount","_objectPoolLength","_objectPool","getNextVertexInPool","_vertexCount","_vertexPoolLength","_vertexPool","getNextFaceInPool","_faceCount","_facePoolLength","face","_facePool","getNextLineInPool","_lineCount","_linePoolLength","_linePool","getNextSpriteInPool","_spriteCount","_spritePoolLength","sprite","_spritePool","painterSort","clipLine","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","lerp","_object","_vertex","_face","_line","_sprite","_modelMatrix","_vector4","Box3","_boundingBox","_points3","_viewMatrix","_viewProjectionMatrix","_modelViewProjectionMatrix","_normalMatrix","_frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","project","unprojectVector","pickingRay","RenderList","setObject","normalMatrix","normals","projectVertex","applyMatrix4","invW","pushVertex","pushNormal","pushUv","checkTriangleVisibility","checkBackfaceCulling","pushLine","pushTriangle","uv","renderList","addObject","applyProjection","autoUpdate","traverseVisible","Light","frustumCulled","Sprite","intersectsSprite","sort","o","ol","BufferGeometry","attributes","groups","positions","array","indices","group","Geometry","faceVertexUvs","isFaceMaterial","objectMaterials","vl","morphTargets","morphInfluences","morphTargetInfluences","tl","influence","targetVertex","fl","materialIndex","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","nl","vertexUvs","u","LineSegments","colors","fullScreenElement","perspectiveMatrixFromVRFieldOfView","zNear","zFar","outMat","out","upTan","upDegrees","RADIANS","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","h","hmdDevice","hmdWidth","hmdHeight","offsetWidth","offsetHeight","updateProjection","fovLeft","fovRight","leftEyeParams","rightEyeParams","leftEyeRect","rightEyeRect","leftEyeViewport","rightEyeViewport","getEyeParameters","renderRect","currentFieldOfView","setFieldOfView","eyeOffsetLeft","eyeTranslation","eyeOffsetRight","leftRenderRect","rightRenderRect","getRecommendedEyeRenderRect","getCurrentEyeFieldOfView","getRecommendedEyeFieldOfView","getEyeTranslation","cameraLeft","cameraRight","gotVRDevices","devices","HMDVRDevice","hardwareUnitId","setTimewarp","fullScreenParam","vrDisplay","poll","pollTimeout","scan","onFullscreenChange","inWebview","vrPreview","separation","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","getVRDevices","then","mozGetVRDevices","bool","leftScene","rightScene","renderTarget","forceClear","WebGLRenderTarget","decompose","drawingBufferWidth","setRenderTarget","enableScissorTest","PositionSensorVRDevice","sensorDevice","resetSensor","deviceOrientationChange","deviceControls","vrState","zeroAngle","vrBrowser","getState","hasOrientation","hasPosition","on","once","off","methods","descriptors","base","callable","Function","descriptor","configurable","enumerable","writable","__ee__","__eeOnceListener__","listeners","candidate","toString","result","mediaQuery","alreadyImportedModules","factory","magFilter","anisotropy","encoding","TextureIdCount","uuid","generateUUID","sourceFile","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","ClampToEdgeWrapping","RGBAFormat","UnsignedByteType","premultiplyAlpha","flipY","unpackAlignment","LinearEncoding","scissor","scissorTest","viewport","depthBuffer","stencilBuffer","depthTexture","WebGLRenderTargetCube","activeCubeFace","activeMipMapLevel","_x","_y","_z","_w","Float32Array","CubeTexture","CubeReflectionMapping","UniformContainer","seq","flatten","nBlocks","blockSize","firstElem","arrayCacheF32","toArray","allocTexUnits","arrayCacheI32","Int32Array","allocTextureUnit","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setTexture2D","emptyTexture","setValueT6","setTextureCube","emptyCubeTexture","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","getSingularSetter","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","units","setValueT6a","getPureArraySetter","SingleUniform","activeInfo","setValue","PureArrayUniform","StructuredUniform","addUniform","uniformObject","parseUniform","pathLength","RePathPart","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","LensFlarePlugin","flares","Uint16Array","vertexBuffer","createBuffer","elementBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","tempTexture","createTexture","occlusionTexture","bindTexture","TEXTURE_2D","texImage2D","RGB","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","RGBA","shader","vertexShader","fragmentShader","createProgram","getAttribLocation","renderType","occlusionMap","screenPosition","createShader","FRAGMENT_SHADER","VERTEX_SHADER","prefix","getPrecision","shaderSource","compileShader","attachShader","linkProgram","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","useProgram","initAttributes","enableAttribute","disableUnusedAttributes","vertexAttribPointer","FLOAT","CULL_FACE","setDepthWrite","flare","containsPoint","activeTexture","TEXTURE0","TEXTURE1","copyTexImage2D","BLEND","DEPTH_TEST","drawElements","TRIANGLES","UNSIGNED_SHORT","customUpdateCallback","updateLensFlares","jl","lensFlares","blendEquation","blendSrc","blendDst","resetGLState","SpritePlugin","sprites","uvOffset","uvScale","modelViewMatrix","fogType","fogDensity","fogNear","fogFar","fogColor","alphaTest","createElementNS","painterSortStable","spritePosition","spriteRotation","spriteScale","oldFogType","sceneFogType","fog","isFog","isFogExp2","density","setDepthTest","depthTest","depthWrite","MaterialIdCount","NoColors","SrcAlphaFactor","OneMinusSrcAlphaFactor","AddEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","LessEqualDepth","clippingPlanes","clipShadows","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","_needsUpdate","count$1","ShaderMaterial","defines","clipping","skinning","morphNormals","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","depthPacking","BasicDepthPacking","displacementMap","displacementScale","displacementBias","Sphere","Plane","constant","p0","p1","p2","p3","p4","p5","planes","WebGLShadowMap","_renderer","_objects","capabilities","getDepthMaterial","isPointLight","lightPositionWorld","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","isBufferGeometry","morphAttributes","isGeometry","useSkinning","isSkinnedMesh","variantIndex","_MorphingFlag","_SkinningFlag","localClippingEnabled","keyA","keyB","materialsForVariant","_materialCache","cachedMaterial","renderSingleSided","renderReverseSided","lightPos","projectObject","shadowCamera","layers","mask","isMesh","isLine","isPoints","_renderList","_gl","_state","_projScreenMatrix","_lightShadows","shadows","_shadowMapSize","_maxShadowMapSize","maxTextureSize","_lookTarget","_lightPositionWorld","_NumberOfMaterialVariants","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","RGBADepthPacking","distanceShader","ShaderLib","distanceUniforms","UniformsUtils","depthMaterial","distanceMaterial","USE_SHADOWMAP","PCFShadowMap","faceCount","il","shadow","mapSize","vpWidth","vpHeight","pars","NearestFilter","isSpotLightShadow","shadowMap","shadowMatrix","vpDimensions","isMultiMaterial","k","kl","groupMaterial","renderBufferDirect","clearAlpha","_order","DefaultOrder","Layers","onRotationChange","onQuaternionChange","setFromQuaternion","Object3DIdCount","DefaultUp","onChange","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","onBeforeRender","count$2","Line3","Triangle","Face3","isVector3","isColor","aoMap","aoMapIntensity","combine","MultiplyOperation","reflectivity","refractionRatio","BufferAttribute","itemSize","normalized","TypeError","dynamic","updateRange","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Int32Attribute","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","setDynamic","GeometryIdCount","skinWeights","skinIndices","lineDistances","boundingSphere","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","count$3","DirectGeometry","uvs2","drawRange","random","drawMode","TrianglesDrawMode","updateMorphTargets","BoxBufferGeometry","depthSegments","calculateVertexCount","calculateIndexCount","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy","ix","vertexBufferOffset","uvBufferOffset","numberOfVertices","indexBufferOffset","addGroup","groupStart","vertexCount","indexCount","setIndex","addAttribute","width_half","height_half","segment_width","segment_height","offset2","focus","view","filmGauge","filmOffset","WebGLIndexedBufferRenderer","infoRender","setMode","UNSIGNED_INT","calls","renderInstances","extension","drawElementsInstancedANGLE","maxInstancedCount","WebGLBufferRenderer","drawArrays","isInterleavedBufferAttribute","drawArraysInstancedANGLE","WebGLLights","shadowBias","shadowRadius","shadowMapSize","coneCos","penumbraCos","decay","skyColor","groundColor","WebGLShader","string","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getEncodingComponents","sRGBEncoding","RGBEEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","GammaEncoding","getTexelDecodingFunction","functionName","components","getTexelEncodingFunction","getToneMappingFunction","toneMapping","toneMappingName","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","generateExtensions","rendererExtensions","chunks","envMapCubeUV","bumpMap","flatShading","logarithmicDepthBuffer","filterEmptyLine","generateDefines","fetchAttributeLocations","identifiers","ACTIVE_ATTRIBUTES","getActiveAttrib","replaceLightNums","replace","numDirLights","numSpotLights","numPointLights","numHemiLights","parseIncludes","include","ShaderChunk","unrollLoops","snippet","unroll","parseInt","WebGLProgram","__webglShader","shadowMapTypeDefine","shadowMapType","PCFSoftShadowMap","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","CubeRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","MixOperation","AddOperation","prefixVertex","prefixFragment","gammaFactorDefine","gammaFactor","customExtensions","customDefines","isRawShaderMaterial","maxBones","emissiveMap","roughnessMap","metalnessMap","useVertexTexture","doubleSided","flipSided","numClippingPlanes","shadowMapEnabled","sizeAttenuation","useFog","fogExp","physicallyCorrectLights","NoToneMapping","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","isShaderMaterial","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","bindAttribLocation","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","diagnostics","deleteShader","cachedUniforms","getUniforms","cachedAttributes","getAttributes","destroy","deleteProgram","programIdCount","usedTimes","WebGLPrograms","allocateBones","floatVertexTextures","skeleton","nVertexUniforms","maxVertexUniforms","nVertexMatrices","bones","getTextureEncodingFromMap","gammaOverrideLinear","isTexture","isWebGLRenderTarget","programs","shaderIDs","MeshStandardMaterial","MeshPhysicalMaterial","PointsMaterial","parameterNames","getParameters","nClipPlanes","shaderID","getMaxPrecision","currentRenderTarget","getCurrentRenderTarget","vertexTextures","gammaOutput","gammaInput","envMapMode","FlatShading","maxMorphTargets","maxMorphNormals","directional","point","spot","hemi","getProgramCode","acquireProgram","pl","programInfo","releaseProgram","pop","WebGLGeometries","properties","onGeometryDispose","buffergeometry","geometries","deleteAttribute","deleteAttributes","property","bufferproperty","memory","getAttributeBuffer","attribute","__webglBuffer","buffer","deleteBuffer","removeAttributeBuffer","_bufferGeometry","setFromObject","WebGLObjects","updateFromObject","updateAttribute","bufferType","attributeProperties","updateBuffer","usage","DYNAMIC_DRAW","bufferSubData","BYTES_PER_ELEMENT","subarray","getWireframeAttribute","TypeArray","WebGLTextures","paramThreeToGL","clampToMaxSize","maxSize","makePowerOfTwo","HTMLImageElement","HTMLCanvasElement","nearestPowerOfTwo","textureNeedsPowerOfTwo","filterFallback","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LINEAR","onTextureDispose","deallocateTexture","_infoMemory","onRenderTargetDispose","deallocateRenderTarget","textureProperties","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","renderTargetProperties","isWebGLRenderTargetCube","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","slot","__version","uploadTexture","TEXTURE_CUBE_MAP","pixelStorei","UNPACK_FLIP_Y_WEBGL","isCompressed","isCompressedTexture","isDataTexture","cubeImage","maxCubemapSize","isPowerOfTwoImage","glFormat","glType","setTextureParameters","getCompressedTextureFormats","compressedTexImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","generateMipmap","setTextureCubeDynamic","textureType","FloatType","HalfFloatType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","isDepthTexture","internalFormat","DEPTH_COMPONENT","_isWebGL2","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DepthStencilFormat","DEPTH_STENCIL","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthTexture","isCube","webglDepthTexture","DepthFormat","setupDepthRenderbuffer","createRenderbuffer","setupRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","webglTexture","WebGL2RenderingContext","WebGLProperties","delete","WebGLState","ColorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","setClear","equals","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","setTest","depthMask","setFunc","NeverDepth","NEVER","AlwaysDepth","ALWAYS","LessDepth","LESS","LEQUAL","EqualDepth","EQUAL","GreaterEqualDepth","GEQUAL","GreaterDepth","GREATER","NotEqualDepth","NOTEQUAL","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","stencil","setDepthFunc","setFlipSided","setCullFace","CullFaceBack","newAttributes","enabledAttributes","enableVertexAttribArray","attributeDivisors","vertexAttribDivisorANGLE","enableAttributeAndDivisor","meshPerAttribute","disableVertexAttribArray","compressedTextureFormats","formats","getParameter","COMPRESSED_TEXTURE_FORMATS","NoBlending","currentBlending","currentPremultipledAlpha","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE","blendFunc","SRC_ALPHA","ZERO","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","SRC_COLOR","CustomBlending","currentBlendEquation","currentBlendEquationAlpha","currentBlendSrc","currentBlendDst","currentBlendSrcAlpha","currentBlendDstAlpha","setColorWrite","colorBuffer","setStencilTest","setStencilWrite","stencilWrite","setStencilFunc","setStencilOp","currentFlipSided","frontFace","CW","CCW","cullFace","CullFaceNone","currentCullFace","BACK","CullFaceFront","FRONT","FRONT_AND_BACK","currentLineWidth","setPolygonOffset","factor","POLYGON_OFFSET_FILL","currentPolygonOffsetFactor","currentPolygonOffsetUnits","getScissorTest","currentScissorTest","SCISSOR_TEST","webglSlot","maxTextures","currentTextureSlot","webglType","boundTexture","currentBoundTextures","emptyTextures","currentScissor","currentViewport","maxVertexAttributes","MAX_VERTEX_ATTRIBS","MAX_TEXTURE_IMAGE_UNITS","buffers","WebGLCapabilities","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getShaderPrecisionFormat","HIGH_FLOAT","MEDIUM_FLOAT","maxPrecision","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","floatFragmentTextures","WebGLExtensions","getExtension","WebGLClipping","resetGlobalState","uniform","globalState","numGlobalPlanes","numPlanes","projectPlanes","dstOffset","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","viewNormalMatrix","i4","plane","renderingShadows","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","getTargetPixelRatio","_currentRenderTarget","glClearColor","_premultipliedAlpha","setDefaultGLState","_currentScissor","_scissor","_currentViewport","_viewport","_currentProgram","_currentCamera","_currentGeometryProgram","_currentMaterialId","onContextLost","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReference","programCache","setupVertexAttributes","startIndex","isInstancedBufferGeometry","geometryAttributes","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","SHORT","INT","BYTE","stride","isInstancedInterleavedBuffer","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","absNumericalSort","reversePainterSortStable","pushRenderItem","transparentObjects","transparentObjectsLastIndex","opaqueObjects","opaqueObjectsLastIndex","renderItem","isObjectViewable","computeBoundingSphere","_sphere","isSphereViewable","isSpriteViewable","intersectsSphere","_clipping","negRad","isLight","isSprite","isLensFlare","isImmediateRenderObject","renderObjects","overrideMaterial","setProgram","renderBufferImmediate","initMaterial","materialProperties","programChange","numSupportedMorphTargets","numSupportedMorphNormals","lightsHash","hash","ambientLightColor","directionalLights","spotLights","pointLights","hemisphereLights","directionalShadowMap","directionalShadowMatrix","spotShadowMap","spotShadowMatrix","pointShadowMap","pointShadowMatrix","progUniforms","uniformsList","seqWithValue","dynamicUniforms","splitDynamic","_usedTextureUnits","_clippingEnabled","_localClippingEnabled","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","LN2","isMeshPhongMaterial","isMeshStandardMaterial","uCamPos","cameraPosition","isMeshLambertMaterial","isMeshBasicMaterial","setOptional","markUniformsLightsNeedsUpdate","refreshUniformsFog","isMeshDepthMaterial","refreshUniformsCommon","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","refreshUniformsLambert","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshNormalMaterial","upload","dynUniforms","evalDynamic","diffuse","emissiveIntensity","uvScaleMap","offsetRepeat","flipEnvMap","isCubeTexture","totalSize","lightMapIntensity","specular","bumpScale","normalScale","roughness","metalness","envMapIntensity","clearCoat","clearCoatRoughness","setupShadows","lightShadowsLength","setupLights","directionalLength","pointLength","spotLength","hemiLength","isAmbientLight","isDirectionalLight","lightCache","transformDirection","bias","isSpotLight","penumbra","identity","setPosition","isHemisphereLight","textureUnit","REPEAT","MirroredRepeatWrapping","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LinearMipMapNearestFilter","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UnsignedShort4444Type","UNSIGNED_SHORT_4_4_4_4","UnsignedShort5551Type","UNSIGNED_SHORT_5_5_5_1","UnsignedShort565Type","UNSIGNED_SHORT_5_6_5","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","HALF_FLOAT_OES","AlphaFormat","ALPHA","LuminanceFormat","LUMINANCE","LuminanceAlphaFormat","LUMINANCE_ALPHA","SubtractEquation","FUNC_SUBTRACT","ReverseSubtractEquation","FUNC_REVERSE_SUBTRACT","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","DstAlphaFactor","DST_ALPHA","OneMinusDstAlphaFactor","ONE_MINUS_DST_ALPHA","DstColorFactor","DST_COLOR","OneMinusDstColorFactor","ONE_MINUS_DST_COLOR","SrcAlphaSaturateFactor","SRC_ALPHA_SATURATE","RGB_S3TC_DXT1_Format","COMPRESSED_RGB_S3TC_DXT1_EXT","RGBA_S3TC_DXT1_Format","COMPRESSED_RGBA_S3TC_DXT1_EXT","RGBA_S3TC_DXT3_Format","COMPRESSED_RGBA_S3TC_DXT3_EXT","RGBA_S3TC_DXT5_Format","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1_Format","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","RGB_PVRTC_2BPPV1_Format","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","RGBA_PVRTC_4BPPV1_Format","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","RGBA_PVRTC_2BPPV1_Format","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1_Format","COMPRESSED_RGB_ETC1_WEBGL","MinEquation","MIN_EXT","MaxEquation","MAX_EXT","UnsignedInt248Type","UNSIGNED_INT_24_8_WEBGL","_alpha","_depth","_stencil","_antialias","_preserveDrawingBuffer","preserveDrawingBuffer","autoClearColor","autoClearDepth","autoClearStencil","toneMappingExposure","toneMappingWhitePoint","_currentFramebuffer","_currentScissorTest","_scissorTest","_infoRender","points","rangeMin","rangeMax","MaxIndex","bufferRenderer","indexedBufferRenderer","backgroundCamera","backgroundCamera2","backgroundPlaneMesh","backgroundBoxShader","backgroundBoxMesh","spritePlugin","lensFlarePlugin","forceContextLoss","loseContext","boolean","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","nx","ny","nz","uvArray","colorArray","updateBuffers","geometryProgram","activeInfluences","removeAttribute","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","LINES","TriangleStripDrawMode","TRIANGLE_STRIP","TriangleFanDrawMode","TRIANGLE_FAN","isLineSegments","LINE_STRIP","POINTS","isCamera","background","extractRotation","frontFaceDirection","FrontFaceDirectionCW","warned","setTexture","readRenderTargetPixels","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","FogExp2","Fog","LensFlare","LOD","levels","Skeleton","boneInverses","identityMatrix","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","Bone","skin","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","bone","gbone","pos","rotq","scl","normalizeSkinWeights","Points","Group","HAVE_CURRENT_DATA","CanvasTexture","DepthTexture","WireframeGeometry","sortFunction","edge","numEdges","edges","coords","index2","getX","getY","getZ","numTris","index1","ParametricGeometry","func","slices","stacks","verts","sliceCount","uva","uvb","uvc","uvd","computeFaceNormals","computeVertexNormals","PolyhedronGeometry","detail","prepare","that","inclination","make","centroid","azi","correctUV","subdivide","cols","aj","bj","rows","atan2","mergeVertices","TetrahedronGeometry","OctahedronGeometry","IcosahedronGeometry","DodecahedronGeometry","TubeGeometry","closed","taper","vert","NoTaper","tangent","binormal","ip","jp","grid","numpoints","pos2","frames","FrenetFrames","tangents","binormals","getPointAt","TorusKnotBufferGeometry","q","calculatePositionOnCurve","cu","su","quOverP","cs","indexOffset","P1","P2","B","T","N","addVectors","crossVectors","setXYZ","setXY","setX","TorusKnotGeometry","heightScale","fromBufferGeometry","TorusBufferGeometry","ExtrudeGeometry","shapes","addShapeList","TextGeometry","isFont","generateShapes","curveSegments","bevelThickness","bevelSize","bevelEnabled","SphereBufferGeometry","thetaEnd","verticesRow","px","py","pz","v4","RingBufferGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","segment","radiusStep","thetaSegmentLevel","RingGeometry","PlaneGeometry","LatheBufferGeometry","clamp","inverseSegments","n1","n2","LatheGeometry","ShapeGeometry","EdgesGeometry","thresholdAngle","geometry2","thresholdDot","DEG2RAD","vert1","vert2","face1","face2","CylinderBufferGeometry","nbCap","generateTorso","slope","indexRow","halfHeight","indexArray","i1","i2","i3","generateCap","centerIndexStart","centerIndexEnd","sign","ConeGeometry","ConeBufferGeometry","CircleBufferGeometry","s","ii","ShadowMaterial","merge","UniformsLib","RawShaderMaterial","STANDARD","PHYSICAL","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","onStart","itemStart","itemEnd","itemError","XHRLoader","manager","DefaultLoadingManager","CompressedTextureLoader","_parser","BinaryTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","HemisphereLight","updateMatrix","LightShadow","SpotLightShadow","SpotLight","power","DirectionalLightShadow","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrackConstructor","values","interpolation","AnimationUtils","convertArray","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","validate","optimize","VectorKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","NumberKeyframeTrack","StringKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","KeyframeTrack","AnimationClip","tracks","resetDuration","MaterialLoader","BufferGeometryLoader","Loader","onLoadStart","onLoadProgress","onLoadComplete","JSONLoader","withCredentials","ObjectLoader","texturePath","Curve","LineCurve","CurvePath","curves","autoClose","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","SplineCurve","CubicBezierCurve","QuadraticBezierCurve","Shape","Path","holes","currentPoint","fromPoints","ShapePath","subPaths","currentPath","Font","FontLoader","getAudioContext","AudioContext","webkitAudioContext","AudioLoader","StereoCamera","eyeSep","cameraL","cameraR","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","updateCubeMap","gain","createGain","destination","createBufferSource","onended","onEnded","getInput","autoplay","startTime","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","PositionalAudio","panner","createPanner","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getOutput","PropertyMixer","binding","typeName","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","PropertyBinding","rootNode","parsedPath","parseTrackName","node","findNode","nodeName","AnimationObjectGroup","var_args","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindings","_bindingsIndicesByPath","stats",{"end":{"file":"vr.js","comments_before":[],"nlb":false,"endpos":1153190,"endcol":17,"endline":44007,"pos":1153185,"col":12,"line":44007,"value":"total","type":"name","_comments_dumped":true},"start":{"file":"vr.js","comments_before":[],"nlb":false,"endpos":1153190,"endcol":17,"endline":44007,"pos":1153185,"col":12,"line":44007,"value":"total","type":"name","_comments_dumped":true},"name":"total"},"total","inUse","bindingsPerObject","AnimationAction","mixer","clip","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","endingStart","ZeroCurvatureEnding","endingEnd","interpolant","createInterpolant","settings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","LoopRepeat","_loopCount","_startTime","timeScale","_effectiveTimeScale","weight","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","_root","_initMemoryManager","_accuIndex","Uniform","InstancedBufferGeometry","InterleavedBufferAttribute","interleavedBuffer","InterleavedBuffer","InstancedInterleavedBuffer","InstancedBufferAttribute","PointCloud","ascSort","intersectObject","recursive","Clock","autoStart","oldTime","elapsedTime","running","Spline","interpolate","t2","t3","intPoint","w2","w3","pa","pb","pc","pd","initFromArray","getPoint","getControlPointsArray","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","MorphBlendMesh","animationsMap","animationsList","numFrames","startFrame","endFrame","fps","createAnimation","setAnimationWeight","ImmediateRenderObject","renderCallback","VertexNormalsHelper","nNormals","objGeometry","SpotLightHelper","cone","SkeletonHelper","getBoneList","isBone","PointLightHelper","sphereSize","HemisphereLightHelper","lightSphere","divisions","FaceNormalsHelper","DirectionalLightHelper","CameraHelper","addLine","addPoint","pointMap","hexFrustum","hexCone","hexUp","hexTarget","hexCross","BoundingBoxHelper","box","BoxHelper","ArrowHelper","dir","headLength","headWidth","lineGeometry","coneGeometry","setDirection","setLength","AxisHelper","ClosedSplineCurve3","CatmullRomCurve3","ArcCurve","aRadius","Face4","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","EdgesHelper","WireframeHelper","Number","EPSILON","output","nextKey","_listeners","hasEventListener","listenerArray","REVISION","CullFaceFrontBack","FrontFaceDirectionCCW","BasicShadowMap","BlendingMode","TextureMapping","TextureWrapping","TextureFilter","RGBEFormat","LoopOnce","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroSlopeEnding","WrapAroundEnding","LogLuvEncoding","RAD2DEG","chars","rnd","euclideanModulo","mapLinear","a1","a2","b1","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degrees","radToDeg","radians","round","isVector2","setScalar","scalar","setY","setComponent","getComponent","addScaledVector","subScalar","isFinite","divide","clampScalar","minVal","maxVal","clampLength","roundToZero","lengthSq","lengthManhattan","distanceToManhattan","lerpVectors","fromAttribute","rotateAround","toJSON","meta","getDataURL","toDataURL","metadata","generator","transformUv","isVector4","setZ","setW","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","epsilon2","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","onChangeCallback","isEuler","c1","c2","c3","s3","axis","halfAngle","setFromRotationMatrix","trace","vFrom","vTo","conjugate","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","slerp","qb","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","qa","qm","slerpFlat","dst","src0","srcOffset0","src1","srcOffset1","z0","w0","z1","w1","sqrSin","len","tDir","multiplyVectors","applyEuler","applyAxisAngle","qx","qy","qz","qw","iz","iw","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","angleTo","dz","sinPhiRadius","setFromMatrixScale","sz","temp","isMatrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","me","extractBasis","makeBasis","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","z2","wx","wy","wz","eye","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","applyToVector3Array","applyToBuffer","determinant","flattenToArrayOffset","getPosition","throwOnDegenerate","t11","t12","t13","t14","msg","detInv","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationZ","makeRotationAxis","tx","ty","compose","invSX","invSY","invSZ","makeFrustum","makePerspective","ymax","ymin","xmin","xmax","makeOrthographic","onUpdateCallback","merged","uniforms_src","uniforms_dst","parameter_src","isMatrix3","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_fragment","fog_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_template","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_flip","normal_fragment","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","setHex","setStyle","setHSL","hue2rgb","handleAlpha","ColorKeywords","copyGammaToLinear","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","getHSL","optionalTarget","hue","saturation","hsl","lightness","offsetHSL","addColors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","dashed","tCube","tFlip","equirect","tEquirect","distanceRGBA","physical","expandByPoint","setFromCenterAndSize","halfSize","getCenter","expandByVector","containsBox","clampPoint","clampedPoint","isMaterial","newValue","currentValue","extractFromCache","isRoot","srcPlanes","dstPlanes","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","traverse","closestPoint","intersectsPlane","getBoundingSphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","setFromMatrix4","matrix4","transposeIntoArray","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","denominator","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","referencePoint","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","negRadius","d1","d2","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","RotationOrders","asin","newOrder","toVector3","optionalResult","channel","toggle","isObject3D","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","translateOnAxis","localToWorld","getObjectById","getObjectByProperty","child","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseAncestors","force","isRootObject","distanceSq","closestPointToPointParameter","startP","startEnd","clampToLine","startEnd2","startEnd_startP","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","triangle","area","midpoint","edgeList","projectedPoint","isBufferAttribute","copyAt","copyArray","copyColorsArray","copyIndicesArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXYZW","addFace","tempNormals","tempUVs","tempUVs2","ab","vA","vB","vC","areaWeighted","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","computeTangents","computeLineDistances","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","colors1","colors2","vertexCopy","faceCopy","faceVertexColors","uvCopy","mergeMesh","verticesMap","unique","changes","precisionPoints","faceIndicesToRemove","dupIndex","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","getNormalIndex","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","morphTarget","morphNormal","getIndex","getAttribute","clearGroups","setDrawRange","direct","__directGeometry","lineDistance","fromDirectGeometry","pA","pB","pC","normalizeNormals","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","toNonIndexed","array2","setDrawMode","morphTargetDictionary","ml","uvIntersection","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","uvA","uvB","uvC","faceIndex","inverseMatrix","tempA","tempB","tempC","fvA","fvB","fvC","faceMaterial","targets","uvs_f","isPerspectiveCamera","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getFilmWidth","setViewOffset","fullWidth","fullHeight","clearViewOffset","skew","isOrthographicCamera","zoomW","zoomH","scaleW","scaleH","vecX","vecY","wantedRotation","matrixPosition","guessSizeSq","level","addLevel","getObjectForDistance","pose","offsetMatrix","sw","vec","skinWeight","linePrecision","precisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","testPoint","rayPointDistanceSq","localThresholdSq","intersectPoint","distanceToRay","localThreshold","SinusoidalTaper","initialNormal3","smallest","MAX_VALUE","tz","mat","getTangentAt","ShapeUtils","contour","triangulate","snip","bX","bY","cX","cY","apx","apy","bpx","bpy","cpx","cpy","cCROSSap","bCROSScp","aCROSSbp","vertIndices","nv","triangulateShape","removeDupEndPts","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","removeHoles","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","shape","prevShapeIdx","nextShapeIdx","insideAngle","hole","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","intersectsHoleEdge","ihIdx","chkHole","hIdx","indepHoles","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","hl","minShapeIndex","counter","h2","allPointsMap","allpoints","shapeWithoutHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","addShape","scalePt2","pt","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","buildLidFaces","layer","vlen","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","ahole","slen1","slen2","f4","shapesOffset","uvgen","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","extrudePts","splineTube","position2","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","getSpacedPoints","shapePoints","extractPoints","reverse","bs","contourMovements","oneHoleMovements","holesMovements","verticesMovements","indexA","indexB","indexC","indexD","Geometries","isShadowMaterial","Materials","Cache","files","cached","request","XMLHttpRequest","open","response","status","responseType","overrideMimeType","send","setPath","setResponseType","setWithCredentials","loader","texDatas","mipmapCount","isCubemap","DataTextureLoader","texData","setCrossOrigin","urls","isJPEG","search","arraySlice","from","to","isTypedArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","KeyframeTrackPrototype","InterpolantFactoryMethodDiscrete","getValueSize","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","ValueTypeName","getInterpolation","shift","timeOffset","endTime","nKeys","valid","prevTime","currTime","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","json","trackType","_getTrackTypeForValueTypeName","track","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","animationMorphTargets","clips","parseAnimation","animation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","setTextures","getTexture","TYPED_ARRAYS","typedArray","drawcalls","offsets","extractUrlBase","initMaterials","createMaterial","textureLoader","materialLoader","fullPath","Handlers","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","handlers","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","morphAnimationClips","substring","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","loadImage","parseConstant","getGeometry","getMaterial","isInteger","getUtoTmapping","getPoints","lengths","getLengths","cacheArcLengths","last","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getPointFunc","isLineCurve","curve","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","isEllipseCurve","isSplineCurve","createPointsGeometry","createGeometry","createSpacedPointsGeometry","twoPi","deltaAngle","samePoints","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","h00","h10","h01","h11","point0","point1","point2","point3","PathPrototype","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","extractAllPoints","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","createPaths","paths","ret","createPath","glyph","glyphs","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","outline","_cachedOutline","action","ha","decodeAudioData","audioBuffer","instance","eyeRight","eyeLeft","eyeSepOnProjection","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setOrientation","setNodeSource","audioNode","setBuffer","getFilters","setFilters","setPlaybackRate","getPlaybackRate","getLoop","setLoop","getVolume","setVolume","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","setMaxDistance","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","targetArray","sourceArray","targetObject","objectName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","dest","Composite","targetGroup","optionalParsedPath","_targetGroup","subscribe_","firstValidIndex","bindings","isAnimationObjectGroup","re","matches","results","searchSkeleton","searchNodeSubtree","childNode","subTreeNode","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","clipAction","optionalRoot","rootUuid","clipObject","clipUuid","actionsForClip","_actionsByClip","prototypeAction","existingAction","actionByRoot","knownActions","newAction","_bindAction","_addInactiveAction","stopAllAction","actions","_actions","nActions","_nActiveActions","_nActiveBindings","uncacheClip","actionsByClip","actionsToRemove","cacheIndex","lastInactiveAction","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","bindingsByRoot","_bindingsByRootAndName","bindingByName","_removeInactiveBinding","uncacheAction","bindingsByName","_addInactiveBinding","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","controlInterpolants","knownActionsForClip","lastKnownAction","byClipCacheIndex","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","propBinding","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","instances","isInterleavedBuffer","setFromCamera","performance","getElapsedTime","getDelta","newTime","vec3","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","morph","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe","objPos","objNorm","vector2","coneLength","coneWidth","boneList","matrixWorldInv","boneMatrix","lightPlane","targetLine","setPoint","setColor","CubicPoly","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","SplineCurve3","CubicBezierCurve3","QuadraticBezierCurve3","LineCurve3","SceneUtils","createMultiMaterialObject","detach","attach","LineStrip","LinePieces","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","extrude","makeGeometry","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","addIndex","addDrawCall","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","audioLoader","getData","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","CubeGeometry","MeshFaceMaterial","Particle","createForEach","arrayFunc","eachFunc","collection","iteratee","thisArg","bindCallback","arrayEach","baseEach","assignWith","customizer","baseAssign","createAssigner","started","input","HTMLAudioElement","onerror","linearRampToValueAtTime","luminance","turbidity","reileigh","mieCoefficient","mieDirectionalG","skyShader","skyUniforms","skyMat","skyGeo","skyMesh","normalizeOpts","isCallable","contains","dscr","desc","gs","baseCopy","assigner","restParam","guard","isIterateeCall","baseForOwn","baseFor","baseProperty","createBaseEach","fromRight","isLength","iterable","toObject","createBaseFor","keysFunc","MAX_SAFE_INTEGER","isObject","argCount","accumulator","isObjectLike","getNative","isNative","isFunction","objToString","funcTag","reIsNative","fnToString","reIsHostCtor","arrayTag","objectProto","nativeIsArray","process","foo","bar","trzy","str","searchString","isArrayLike","isIndex","reIsUint","FUNC_ERROR_TEXT","nativeMax","rest","otherArgs","isArguments","isArrayLikeObject","propertyIsEnumerable","objectToString","argsTag","tag","genTag","__webpack_module_template_argument_0__","__webpack_module_template_argument_1__","__webpack_module_template_argument_2__","shimKeys","keysIn","propsLength","allowIndexes","Ctor","isProto","skipIndexes","nativeKeys"],"mappings":"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IACAC,GAAA,IACA83B,GAAA,IACAE,GAAA,IACAE,GAAA,IACAE,GAAA,IACAE,GAAA,IACA/V,GAAA,EACAE,GAAA,EACAE,GAAA,EACAriB,GAAA,EACAwiB,GAAA,EACAE,GAAA,EACAE,GAAA,EACAE,GAAA,EACAja,GAAA,EACAyK,GAAA,EACAC,GAAA,EACAqB,GAAA,EACAjE,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAtyC,GAAA,IACAw1B,GAAA,IACAif,GAAA,IACAG,GAAA,IACAC,GAAA,IACAx2B,GAAA,IACAq2B,GAAA,IACAC,GAAA,IACAsrC,IACAjgF,aACAw1B,yBACAif,yBACAG,oCACAC,oCACAx2B,8BACAq2B,2BACAC,4BAEA98C,GAAA,IACAq8B,GAAA,KACA6iC,GAAA,KACAmpB,IACAroF,kBACAq8B,uBACA6iC,2BAEA3uB,GAAA,KACA8U,GAAA,KACAC,GAAA,KACAj0C,GAAA,KACAiuD,GAAA,KACAnvD,GAAA,KACAm4E,IACA/3C,iBACA8U,8BACAC,6BACAj0C,gBACAiuD,6BACAnvD,6BAEAosB,GAAA,KACAwjC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAtY,GAAA,KACAC,GAAA,KACA2X,GAAA,KACAE,GAAA,KACAE,GAAA,KACAsD,GAAA,KACA9C,GAAA,KACAtuD,GAAA,KACAuqB,GAAA,KACAikC,GAAA,KACAE,GAAA,KACA8nB,GAAAjsD,GACAytB,GAAA,KACArB,GAAA,KACAmZ,GAAA,KACAE,GAAA,KACAE,GAAA,KACAE,GAAA,KACAE,GAAA,KACAE,GAAA,KACAE,GAAA,KACAE,GAAA,KACAE,GAAA,KACA2lB,GAAA,KACAzI,GAAA,KACA0I,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAzJ,GAAA,KACA0J,GAAA,KACAC,GAAA,KACA1zC,GAAA,EACA6xB,GAAA,EACAE,GAAA,EACAxqC,GAAA,IACA8c,GAAA,KACAK,GAAA,KACAJ,GAAA,KACAqvC,GAAA,KACApvC,GAAA,KACAC,GAAA,KA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AC,GAAA,iyBAEAC,GAAA,yiBAEAC,GAAA,qRAEAC,GAAA,wKAEAxjD;AACAg9C,qBACAC,0BACAC,sBACAC,kBACAC,uBACAC,gBACAC,sBACAC,SACAC,yBACAC,4BACAC,iCACAC,+BACAC,0BACAC,kBACAC,uBACAC,qBACAC,gBACAC,UACAC,+BACAC,wBACAC,+BACAC,0BACAC,wBACAC,6BACAC,sBACAC,2BACAC,mBACAC,wBACAC,sBACAC,iBACAC,gBACAC,qBACAC,qBACAC,0BACAC,yBACAC,eACAC,yBACAC,8BACAC,4BACAC,iCACAC,mBACAC,wBACAC,6BACAC,2BACAC,sBACAC,gBACAC,qBACAC,yBACAC,8BACAC,yBACAC,8BACAC,sBACAC,2BACAC,sBACAC,eACAC,mBACAC,2BACAC,WACAC,gCACAC,kBACAC,yBACAC,8BACAC,2BACAC,yBACAC,oBACAC,4BACAC,mBACAC,wBACAC,mBACAC,qBACAC,wBACAC,6BACAC,wBACAC,6BACAC,oBACAC,kBACAC,aACAC,qBACAC,mBACAC,cACAC,mBAEAC,aACAC,aACAC,cACAC,cACAC,qBACAC,qBACAC,iBACAC,iBACAC,mBACAC,mBACAC,kBACAC,kBACAC,oBACAC,oBACAC,kBACAC,kBACAC,qBACAC,qBACAC,eACAC,eACAC,eACAC,eACAC,eACAC,eAoBAl+F,GAAArO,WAEAwpB,YAAAnb,EAEA+wC,SAAA,EAEA3lB,EAAA,EAAAC,EAAA,EAAA7nC,EAAA,EAEAgD,IAAA,SAAAilB,GAgBA,MAdAA,MAAAslC,QAEAn/C,KAAA5D,KAAAyd,GAEO,gBAAAA,GAEP7Z,KAAAusG,OAAA1yF,GAEO,gBAAAA,IAEP7Z,KAAAwsG,SAAA3yF,GAIA7Z,MAIAs3F,UAAA,SAAAC,GAEAv3F,KAAAw5B,EAAA+9D,EACAv3F,KAAAy5B,EAAA89D,EACAv3F,KAAApO,EAAA2lG,GAIAgV,OAAA,SAAAtzE,GAQA,MANAA,GAAApjC,KAAA8S,MAAAswB,GAEAj5B,KAAAw5B,GAAAP,GAAA,YACAj5B,KAAAy5B,GAAAR,GAAA,WACAj5B,KAAApO,GAAA,IAAAqnC,GAAA,IAEAj5B,MAIAmtB,OAAA,SAAAqM,EAAAC,EAAA7nC,GAMA,MAJAoO,MAAAw5B,IACAx5B,KAAAy5B,IACAz5B,KAAApO,IAEAoO,MAIAysG,OAAA,WAEA,QAAAC,GAAAr7G,EAAA6pF,EAAA/lE,GAIA,MAFA,GAAAA,OAAA,GACAA,EAAA,IAAAA,GAAA,GACA,IAAAA,EAAA9jB,EAAA,GAAA6pF,EAAA7pF,GAAA8jB,EACA,GAAAA,EAAA+lE,EACA,IAAA/lE,EAAA9jB,EAAA,GAAA6pF,EAAA7pF,IAAA,IAAA8jB,GACA9jB,EAIA,gBAAAyxC,EAAAq9C,EAAA5zD,GAOA,GAJAuW,EAAAhyC,EAAA+E,KAAAqgG,gBAAApzD,EAAA,GACAq9C,EAAArvF,EAAA+E,KAAAsoF,MAAAgC,EAAA,KACA5zD,EAAAz7B,EAAA+E,KAAAsoF,MAAA5xD,EAAA,KAEA,IAAA4zD,EAEAngF,KAAAw5B,EAAAx5B,KAAAy5B,EAAAz5B,KAAApO,EAAA26B,MAEQ,CAER,GAAAl7B,GAAA,IAAAk7B,KAAA,EAAA4zD,GAAA5zD,EAAA4zD,EAAA5zD,EAAA4zD,EACAjF,EAAA,EAAA3uD,EAAAl7B,CAEA2O,MAAAw5B,EAAAkzE,EAAAxxB,EAAA7pF,EAAAyxC,EAAA,KACA9iC,KAAAy5B,EAAAizE,EAAAxxB,EAAA7pF,EAAAyxC,GACA9iC,KAAApO,EAAA86G,EAAAxxB,EAAA7pF,EAAAyxC,EAAA,KAIA,MAAA9iC,UAMAwsG,SAAA,SAAA3hF,GAEA,QAAA8hF,GAAAxmD,GAEA1tD,SAAA0tD,GAEAj4C,WAAAi4C,GAAA,EASA,GAAAh1D,EAEA,IAAAA,EAAA,kCAAA+X,KAAA2hB,GAAA,CAIA,GAAA1gB,GACA5P,EAAApJ,EAAA,GACA61D,EAAA71D,EAAA,EAEA,QAAAoJ,GAEA,UACA,WAEA,GAAA4P,EAAA,gEAAAjB,KAAA89C,GASA,MANAhnD,MAAAw5B,EAAA3jC,KAAAC,IAAA,IAAAozD,SAAA/+C,EAAA,YACAnK,KAAAy5B,EAAA5jC,KAAAC,IAAA,IAAAozD,SAAA/+C,EAAA,YACAnK,KAAApO,EAAAiE,KAAAC,IAAA,IAAAozD,SAAA/+C,EAAA,YAEAwiG,EAAAxiG,EAAA,IAEAnK,IAIA,IAAAmK,EAAA,sEAAAjB,KAAA89C,GASA,MANAhnD,MAAAw5B,EAAA3jC,KAAAC,IAAA,IAAAozD,SAAA/+C,EAAA,YACAnK,KAAAy5B,EAAA5jC,KAAAC,IAAA,IAAAozD,SAAA/+C,EAAA,YACAnK,KAAApO,EAAAiE,KAAAC,IAAA,IAAAozD,SAAA/+C,EAAA,YAEAwiG,EAAAxiG,EAAA,IAEAnK,IAIA,MAEA,WACA,WAEA,GAAAmK,EAAA,gFAAAjB,KAAA89C,GAAA,CAGA,GAAAlkB,GAAA50B,WAAA/D,EAAA,QACAg2E,EAAAj3B,SAAA/+C,EAAA,WACAoiB,EAAA28B,SAAA/+C,EAAA,UAIA,OAFAwiG,GAAAxiG,EAAA,IAEAnK,KAAAysG,OAAA3pE,EAAAq9C,EAAA5zD,SAQO,IAAAp7B,EAAA,qBAAA+X,KAAA2hB,GAAA,CAIP,GAAAoO,GAAA9nC,EAAA,GACAsjB,EAAAwkB,EAAAhkC,MAEA,QAAAwf,EAOA,MAJAzU,MAAAw5B,EAAA0vB,SAAAjwB,EAAA5c,OAAA,GAAA4c,EAAA5c,OAAA,WACArc,KAAAy5B,EAAAyvB,SAAAjwB,EAAA5c,OAAA,GAAA4c,EAAA5c,OAAA,WACArc,KAAApO,EAAAs3D,SAAAjwB,EAAA5c,OAAA,GAAA4c,EAAA5c,OAAA,WAEArc,IAEQ,QAAAyU,EAOR,MAJAzU,MAAAw5B,EAAA0vB,SAAAjwB,EAAA5c,OAAA,GAAA4c,EAAA5c,OAAA,WACArc,KAAAy5B,EAAAyvB,SAAAjwB,EAAA5c,OAAA,GAAA4c,EAAA5c,OAAA,WACArc,KAAApO,EAAAs3D,SAAAjwB,EAAA5c,OAAA,GAAA4c,EAAA5c,OAAA,WAEArc,KAMA,GAAA6qB,KAAA51B,OAAA,GAGA,GAAAgkC,GAAAnoC,EAAA87G,cAAA/hF,EAEApyB,UAAAwgC,GAGAj5B,KAAAusG,OAAAtzE,GAWA,MAAAj5B,OAIAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,YAAAvpB,KAAAw5B,EAAAx5B,KAAAy5B,EAAAz5B,KAAApO,IAIAwK,KAAA,SAAA+N,GAMA,MAJAnK,MAAAw5B,EAAArvB,EAAAqvB,EACAx5B,KAAAy5B,EAAAtvB,EAAAsvB,EACAz5B,KAAApO,EAAAuY,EAAAvY,EAEAoO,MAIA6sG,kBAAA,SAAA1iG,EAAAkgD,GAQA,MANA5xD,UAAA4xD,MAAA,GAEArqD,KAAAw5B,EAAA3jC,KAAA+kB,IAAAzQ,EAAAqvB,EAAA6wB,GACArqD,KAAAy5B,EAAA5jC,KAAA+kB,IAAAzQ,EAAAsvB,EAAA4wB,GACArqD,KAAApO,EAAAiE,KAAA+kB,IAAAzQ,EAAAvY,EAAAy4D,GAEArqD,MAIA8sG,kBAAA,SAAA3iG,EAAAkgD,GAEA5xD,SAAA4xD,MAAA,EAEA,IAAA0iD,GAAA1iD,EAAA,IAAAA,EAAA,CAMA,OAJArqD,MAAAw5B,EAAA3jC,KAAA+kB,IAAAzQ,EAAAqvB,EAAAuzE,GACA/sG,KAAAy5B,EAAA5jC,KAAA+kB,IAAAzQ,EAAAsvB,EAAAszE,GACA/sG,KAAApO,EAAAiE,KAAA+kB,IAAAzQ,EAAAvY,EAAAm7G,GAEA/sG,MAIAgtG,qBAAA,WAEA,GAAAxzE,GAAAx5B,KAAAw5B,EAAAC,EAAAz5B,KAAAy5B,EAAA7nC,EAAAoO,KAAApO,CAMA,OAJAoO,MAAAw5B,MACAx5B,KAAAy5B,MACAz5B,KAAApO,MAEAoO,MAIAitG,qBAAA,WAMA,MAJAjtG,MAAAw5B,EAAA3jC,KAAAiD,KAAAkH,KAAAw5B,GACAx5B,KAAAy5B,EAAA5jC,KAAAiD,KAAAkH,KAAAy5B,GACAz5B,KAAApO,EAAAiE,KAAAiD,KAAAkH,KAAApO,GAEAoO,MAIAktG,OAAA,WAEA,WAAAltG,KAAAw5B,GAAA,OAAAx5B,KAAAy5B,GAAA,MAAAz5B,KAAApO,GAAA,GAIAu7G,aAAA,WAEA,gBAAAntG,KAAAktG,SAAA7kE,SAAA,KAAA52C,MAAA,KAIA27G,OAAA,SAAAC,GAIA,GAOAC,GAAAC,EAPAC,EAAAH,IAAmCvqE,EAAA,EAAAq9C,EAAA,EAAA5zD,EAAA,GAEnCiN,EAAAx5B,KAAAw5B,EAAAC,EAAAz5B,KAAAy5B,EAAA7nC,EAAAoO,KAAApO,EAEA8W,EAAA7S,KAAA6S,IAAA8wB,EAAAC,EAAA7nC,GACAkE,EAAAD,KAAAC,IAAA0jC,EAAAC,EAAA7nC,GAGA67G,GAAA33G,EAAA4S,GAAA,CAEA,IAAA5S,IAAA4S,EAEA4kG,EAAA,EACAC,EAAA,MAEO,CAEP,GAAA33G,GAAA8S,EAAA5S,CAIA,QAFAy3G,EAAA,IAAAE,EAAA73G,GAAA8S,EAAA5S,GAAAF,GAAA,EAAA8S,EAAA5S,GAEA4S,GAEA,IAAA8wB,GAAA8zE,GAAA7zE,EAAA7nC,GAAAgE,GAAAhE,EAAA6nC,EAAA,IAA4D,MAC5D,KAAAA,GAAA6zE,GAAA17G,EAAA4nC,GAAA5jC,EAAA,CAA4C,MAC5C,KAAAhE,GAAA07G,GAAA9zE,EAAAC,GAAA7jC,EAAA,EAIA03G,GAAA,EAQA,MAJAE,GAAA1qE,EAAAwqE,EACAE,EAAArtB,EAAAotB,EACAC,EAAAjhF,EAAAkhF,EAEAD,GAIA99E,SAAA,WAEA,kBAAA1vB,KAAAw5B,EAAA,YAAAx5B,KAAAy5B,EAAA,YAAAz5B,KAAApO,EAAA,QAIA87G,UAAA,SAAA5qE,EAAAq9C,EAAA5zD,GAEA,GAAAihF,GAAAxtG,KAAAotG,QAMA,OAJAI,GAAA1qE,KAAiB0qE,EAAArtB,KAAYqtB,EAAAjhF,KAE7BvsB,KAAAysG,OAAAe,EAAA1qE,EAAA0qE,EAAArtB,EAAAqtB,EAAAjhF,GAEAvsB,MAIAlF,IAAA,SAAAqP,GAMA,MAJAnK,MAAAw5B,GAAArvB,EAAAqvB,EACAx5B,KAAAy5B,GAAAtvB,EAAAsvB,EACAz5B,KAAApO,GAAAuY,EAAAvY,EAEAoO,MAIA2tG,UAAA,SAAA74F,EAAAE,GAMA,MAJAhV,MAAAw5B,EAAA1kB,EAAA0kB,EAAAxkB,EAAAwkB,EACAx5B,KAAAy5B,EAAA3kB,EAAA2kB,EAAAzkB,EAAAykB,EACAz5B,KAAApO,EAAAkjB,EAAAljB,EAAAojB,EAAApjB,EAEAoO,MAIAk0B,UAAA,SAAAisD,GAMA,MAJAngF,MAAAw5B,GAAA2mD,EACAngF,KAAAy5B,GAAA0mD,EACAngF,KAAApO,GAAAuuF,EAEAngF,MAIAlL,IAAA,SAAAqV,GAMA,MAJAnK,MAAAw5B,EAAA3jC,KAAA6S,IAAA,EAAA1I,KAAAw5B,EAAArvB,EAAAqvB,GACAx5B,KAAAy5B,EAAA5jC,KAAA6S,IAAA,EAAA1I,KAAAy5B,EAAAtvB,EAAAsvB,GACAz5B,KAAApO,EAAAiE,KAAA6S,IAAA,EAAA1I,KAAApO,EAAAuY,EAAAvY,GAEAoO,MAIA6gB,SAAA,SAAA1W,GAMA,MAJAnK,MAAAw5B,GAAArvB,EAAAqvB,EACAx5B,KAAAy5B,GAAAtvB,EAAAsvB,EACAz5B,KAAApO,GAAAuY,EAAAvY,EAEAoO,MAIAwZ,eAAA,SAAA2mE,GAMA,MAJAngF,MAAAw5B,GAAA2mD,EACAngF,KAAAy5B,GAAA0mD,EACAngF,KAAApO,GAAAuuF,EAEAngF,MAIA68B,KAAA,SAAA1yB,EAAA2V,GAMA,MAJA9f,MAAAw5B,IAAArvB,EAAAqvB,EAAAx5B,KAAAw5B,GAAA1Z,EACA9f,KAAAy5B,IAAAtvB,EAAAsvB,EAAAz5B,KAAAy5B,GAAA3Z,EACA9f,KAAApO,IAAAuY,EAAAvY,EAAAoO,KAAApO,GAAAkuB,EAEA9f,MAIAm4D,OAAA,SAAA/mE,GAEA,MAAAA,GAAAooC,IAAAx5B,KAAAw5B,GAAApoC,EAAAqoC,IAAAz5B,KAAAy5B,GAAAroC,EAAAQ,IAAAoO,KAAApO,GAIAqmB,UAAA,SAAAkoB,EAAA3vB,GAQA,MANA/X,UAAA+X,MAAA,GAEAxQ,KAAAw5B,EAAA2G,EAAA3vB,GACAxQ,KAAAy5B,EAAA0G,EAAA3vB,EAAA,GACAxQ,KAAApO,EAAAuuC,EAAA3vB,EAAA,GAEAxQ,MAIAkrC,QAAA,SAAA/K,EAAA3vB,GASA,MAPA/X,UAAA0nC,UACA1nC,SAAA+X,MAAA,GAEA2vB,EAAA3vB,GAAAxQ,KAAAw5B,EACA2G,EAAA3vB,EAAA,GAAAxQ,KAAAy5B,EACA0G,EAAA3vB,EAAA,GAAAxQ,KAAApO,EAEAuuC,GAIAu4D,OAAA,WAEA,MAAA14F,MAAAktG,WAMAp8G,EAAA87G,eAA6BgB,UAAA,SAAAC,aAAA,SAAAC,KAAA,MAAAC,WAAA,QAAAC,MAAA,SAC7BC,MAAA,SAAAC,OAAA,SAAAC,MAAA,EAAAC,eAAA,SAAAC,KAAA,IAAAC,WAAA,QACAC,MAAA,SAAAC,UAAA,SAAAC,UAAA,QAAAC,WAAA,QAAAC,UAAA,SAAAC,MAAA,SACAC,eAAA,QAAAC,SAAA,SAAAC,QAAA,SAAAC,KAAA,MAAAC,SAAA,IAAAC,SAAA,MACAC,cAAA,SAAAC,SAAA,SAAAC,UAAA,MAAAC,SAAA,SAAAC,UAAA,SAAAC,YAAA,QACAC,eAAA,QAAAC,WAAA,SAAAC,WAAA,SAAAC,QAAA,QAAAC,WAAA,SAAAC,aAAA,QACAC,cAAA,QAAAC,cAAA,QAAAC,cAAA,QAAAC,cAAA,MAAAC,WAAA,QACAC,SAAA,SAAAC,YAAA,MAAAC,QAAA,QAAAC,QAAA,QAAAC,WAAA,QAAAC,UAAA,SACAC,YAAA,SAAAC,YAAA,QAAAC,QAAA,SAAAC,UAAA,SAAAC,WAAA,SAAAC,KAAA,SACAC,UAAA,SAAAC,KAAA,QAAAC,MAAA,MAAAC,YAAA,SAAAC,KAAA,QAAAC,SAAA,SAAAC,QAAA,SACAC,UAAA,SAAAC,OAAA,QAAAC,MAAA,SAAAC,MAAA,SAAAC,SAAA,SAAAC,cAAA,SAAAC,UAAA,QACAC,aAAA,SAAAC,UAAA,SAAAC,WAAA,SAAAC,UAAA,SAAAC,qBAAA,SAAAC,UAAA,SACAC,WAAA,QAAAC,UAAA,SAAAC,UAAA,SAAAC,YAAA,SAAAC,cAAA,QAAAC,aAAA,QACAC,eAAA,QAAAC,eAAA,QAAAC,eAAA,SAAAC,YAAA,SAAAC,KAAA,MAAAC,UAAA,QACAC,MAAA,SAAAC,QAAA,SAAAC,OAAA,QAAAC,iBAAA,QAAAC,WAAA,IAAAC,aAAA,SACAC,aAAA,QAAAC,eAAA,QAAAC,gBAAA,QAAAC,kBAAA,MAAAC,gBAAA,QACAC,gBAAA,SAAAC,aAAA,QAAAC,UAAA,SAAAC,UAAA,SAAAC,SAAA,SAAAC,YAAA,SACAC,KAAA,IAAAC,QAAA,SAAAC,MAAA,QAAAC,UAAA,QAAAC,OAAA,SAAAC,UAAA,SAAAC,OAAA,SACAC,cAAA,SAAAC,UAAA,SAAAC,cAAA,SAAAC,cAAA,SAAAC,WAAA,SAAAC,UAAA,SACAC,KAAA,SAAAC,KAAA,SAAAC,KAAA,SAAAC,WAAA,SAAAC,OAAA,QAAAC,IAAA,SAAAC,UAAA,SACAC,UAAA,QAAAC,YAAA,QAAAC,OAAA,SAAAC,WAAA,SAAAC,SAAA,QAAAC,SAAA,SACAC,OAAA,SAAAC,OAAA,SAAAC,QAAA,QAAAC,UAAA,QAAAC,UAAA,QAAAC,UAAA,QAAAC,KAAA,SACAC,YAAA,MAAAC,UAAA,QAAAltF,IAAA,SAAAmtF,KAAA,MAAAC,QAAA,SAAAC,OAAA,SAAAC,UAAA,QACAC,OAAA,SAAAC,MAAA,SAAAC,MAAA,SAAAC,WAAA,SAAAC,OAAA,SAAAC,YAAA,SAMA,IAAAt2B,KAEAwmB,QAEAj9B,SAAgBjwD,MAAA,GAAAzL,GAAA,WAChB8f,SAAgBrU,MAAA,GAEhB7P,KAAY6P,MAAA,MACZowD,cAAqBpwD,MAAA,GAAAyQ,GAAA,UAErBjgB,aAAoBwP,MAAA,MACpBtP,UAAiBsP,MAAA,MAEjBrP,QAAeqP,MAAA,MACfqwD,YAAmBrwD,MAAA,IACnB2lC,cAAqB3lC,MAAA,GACrB4lC,iBAAwB5lC,MAAA,MAIxBi9F,OAEA13D,OAAcvlC,MAAA,MACdwlC,gBAAuBxlC,MAAA,IAIvBk9F,UAEAtsG,UAAiBoP,MAAA,MACjBwwD,mBAA0BxwD,MAAA,IAI1Bm9F,aAEAtsD,aAAoB7wC,MAAA,OAIpBo9F,SAEApvD,SAAgBhuC,MAAA,MAChB0wD,WAAkB1wD,MAAA,IAIlBq9F,WAEA5sG,WAAkBuP,MAAA,MAClB2wD,aAAoB3wD,MAAA,GAAAjN,GAAA,OAIpBuqG,iBAEAh/D,iBAAwBt+B,MAAA,MACxBu+B,mBAA0Bv+B,MAAA,GAC1Bw+B,kBAAyBx+B,MAAA,IAIzBu9F,cAEAzsD,cAAqB9wC,MAAA,OAIrBw9F,cAEAzsD,cAAqB/wC,MAAA,OAIrB67B,KAEAZ,YAAmBj7B,MAAA,OACnBk7B,SAAgBl7B,MAAA,GAChBm7B,QAAen7B,MAAA,KACfo7B,UAAiBp7B,MAAA,GAAAzL,GAAA,YAIjB4rB,QAEA0sC,mBAA0B7sD,UAE1B8sD,mBAA0B9sD,SAAA+1C,YAC1Bj7D,aACAwV,SAEA8yC,UACAyI,cACAC,gBACAC,mBAGAmhB,sBAA6BltD,UAC7BmtD,yBAAgCntD,UAEhC+sD,YAAmB/sD,SAAA+1C,YACnBzlD,SACArO,YACAnH,aACAsY,YACA44C,WACAC,eACAC,SAEA9I,UACAyI,cACAC,gBACAC,mBAGAqhB,eAAsBptD,UACtBqtD,kBAAyBrtD,UAEzBgtD,aAAoBhtD,SAAA+1C,YACpBzlD,SACArO,YACAiqD,SACA94C,YAEAgwC,UACAyI,cACAC,gBACAC,mBAGAuhB,gBAAuBttD,UACvButD,mBAA0BvtD,UAE1BitD,kBAAyBjtD,SAAA+1C,YACzBj7D,aACAqxD,YACAC,kBAKAkrB,QAEArH,SAAgBjwD,MAAA,GAAAzL,GAAA,WAChB8f,SAAgBrU,MAAA,GAChBpF,MAAaoF,MAAA,GACbzR,OAAcyR,MAAA,GACd7P,KAAY6P,MAAA,MACZowD,cAAqBpwD,MAAA,GAAAyQ,GAAA,YAYrBkyB,IAEA3xC,OAEA+O,SAAA9oB,EAAA4rD,cAAA4jC,OAEAC,GAAAwmB,OACAxmB,GAAAu2B,MACAv2B,GAAA7qC,MAIAnE,aAAAuX,GAAA4iD,eACAl6D,eAAAsX,GAAA2iD,gBAIA7gG,SAEAgP,SAAA9oB,EAAA4rD,cAAA4jC,OAEAC,GAAAwmB,OACAxmB,GAAAu2B,MACAv2B,GAAAw2B,SACAx2B,GAAAy2B,YACAz2B,GAAA7qC,IACA6qC,GAAAvmD,QAGA5vB,UAAoByP,MAAA,GAAAzL,GAAA,OAKpBmjC,aAAAuX,GAAA8iD,iBACAp6D,eAAAsX,GAAA6iD,kBAIA5gG,OAEA6O,SAAA9oB,EAAA4rD,cAAA4jC,OAEAC,GAAAwmB,OACAxmB,GAAAu2B,MACAv2B,GAAAw2B,SACAx2B,GAAAy2B,YACAz2B,GAAA02B,QACA12B,GAAA22B,UACA32B,GAAA42B,gBACA52B,GAAA7qC,IACA6qC,GAAAvmD,QAGA5vB,UAAoByP,MAAA,GAAAzL,GAAA,IACpBk8D,UAAoBzwD,MAAA,GAAAzL,GAAA,UACpBvC,WAAoBgO,MAAA,OAKpB03B,aAAAuX,GAAAgjD,eACAt6D,eAAAsX,GAAA+iD,gBAIAx/F,UAEAuN,SAAA9oB,EAAA4rD,cAAA4jC,OAEAC,GAAAwmB,OACAxmB,GAAAu2B,MACAv2B,GAAAw2B,SACAx2B,GAAAy2B,YACAz2B,GAAA02B,QACA12B,GAAA22B,UACA32B,GAAA42B,gBACA52B,GAAA62B,aACA72B,GAAA82B,aACA92B,GAAA7qC,IACA6qC,GAAAvmD,QAGA5vB,UAAoByP,MAAA,GAAAzL,GAAA,IACpBq8D,WAAoB5wD,MAAA,IACpB6wD,WAAoB7wD,MAAA,GACpB8wD,iBAA2B9wD,MAAA,MAK3B03B,aAAAuX,GAAAkjD,kBACAx6D,eAAAsX,GAAAijD,mBAIA56B,QAEAv3D,SAAA9oB,EAAA4rD,cAAA4jC,OAEAC,GAAApP,OACAoP,GAAA7qC,MAIAnE,aAAAuX,GAAAsjD,YACA56D,eAAAsX,GAAAqjD,aAIAmL,QAEA19F,SAAA9oB,EAAA4rD,cAAA4jC,OAEAC,GAAAwmB,OACAxmB,GAAA7qC,KAGAttC,OAAoByR,MAAA,GACpBuX,UAAoBvX,MAAA,GACpBuwD,WAAoBvwD,MAAA,MAKpB03B,aAAAuX,GAAA0iD,gBACAh6D,eAAAsX,GAAAyiD,iBAIApgG,OAEAyO,SAAA9oB,EAAA4rD,cAAA4jC,OAEAC,GAAAwmB,OACAxmB,GAAA42B,kBAIA5lE,aAAAuX,GAAAoiD,WACA15D,eAAAsX,GAAAmiD,YAIAhgG,QAEA2O,UAEAsU,SAAkBrU,MAAA,IAIlB03B,aAAAuX,GAAAojD,YACA16D,eAAAsX,GAAAmjD,aAQAp0F,MAEA+B,UACA29F,OAAe19F,MAAA,MACf29F,OAAe39F,MAAA,IACfqU,SAAiBrU,MAAA,IAGjB03B,aAAAuX,GAAAkiD,UACAx5D,eAAAsX,GAAAiiD,WAQA0M,UAEA79F,UACA89F,WAAmB79F,MAAA,MACnB29F,OAAe39F,MAAA,KAGf03B,aAAAuX,GAAAwiD,cACA95D,eAAAsX,GAAAuiD,eAIAsM,cAEA/9F,UAEAkhC,UAAkBjhC,MAAA,GAAA7K,KAIlBuiC,aAAAuX,GAAAsiD,kBACA55D,eAAAsX,GAAAqiD,mBAMA3uD,IAAAo7D,UAEAh+F,SAAA9oB,EAAA4rD,cAAA4jC,OAEA9jC,GAAAnwC,SAAAuN,UAGAgxD,WAAmB/wD,MAAA,GACnBgxD,oBAA4BhxD,MAAA,MAK5B03B,aAAAuX,GAAAkjD,kBACAx6D,eAAAsX,GAAAijD,mBAeA5zE,EAAAp4B,WAEAwpB,YAAA4O,EAEAvjC,IAAA,SAAAkB,EAAA4S,GAKA,MAHA1I,MAAAlK,IAAAsG,KAAAtG,GACAkK,KAAA0I,IAAAtM,KAAAsM,GAEA1I,MAIAq6B,cAAA,SAAA82C,GAEAnxE,KAAA05B,WAEA,QAAApoC,GAAA,EAAA0rD,EAAAm0B,EAAAl8E,OAA0C+nD,EAAA1rD,EAAQA,IAElD0O,KAAA63G,cAAA1mC,EAAA7/E,GAIA,OAAA0O,OAIA83G,qBAAA,WAEA,GAAA9pF,GAAA,GAAAphB,EAEA,iBAAA6c,EAAAhV,GAEA,GAAAsjG,GAAA/pF,EAAA5xB,KAAAqY,GAAA+E,eAAA,GAIA,OAHAxZ,MAAAlK,IAAAsG,KAAAqtB,GAAA30B,IAAAijH,GACA/3G,KAAA0I,IAAAtM,KAAAqtB,GAAA3uB,IAAAi9G,GAEA/3G,SAMAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,OAIA5D,KAAA,SAAA42F,GAKA,MAHAhzF,MAAAlK,IAAAsG,KAAA42F,EAAAl9F,KACAkK,KAAA0I,IAAAtM,KAAA42F,EAAAtqF,KAEA1I,MAIA05B,UAAA,WAKA,MAHA15B,MAAAlK,IAAA6C,EAAAqH,KAAAlK,IAAA8C,IAAAguB,KACA5mB,KAAA0I,IAAA/P,EAAAqH,KAAA0I,IAAA9P,IAAAguB,KAEA5mB,MAIAs5B,QAAA,WAIA,MAAAt5B,MAAA0I,IAAA/P,EAAAqH,KAAAlK,IAAA6C,GAAAqH,KAAA0I,IAAA9P,EAAAoH,KAAAlK,IAAA8C,GAIAo/G,UAAA,SAAA3K,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAzgG,EACA,OAAA5M,MAAAs5B,UAAAgP,EAAA1zC,IAAA,KAAA0zC,EAAAwzC,WAAA97E,KAAAlK,IAAAkK,KAAA0I,KAAA8Q,eAAA,KAIAmS,QAAA,SAAA0hF,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAzgG,EACA,OAAA5M,MAAAs5B,UAAAgP,EAAA1zC,IAAA,KAAA0zC,EAAAxlB,WAAA9iB,KAAA0I,IAAA1I,KAAAlK,MAIA+hH,cAAA,SAAA3oD,GAKA,MAHAlvD,MAAAlK,QAAAo5D,GACAlvD,KAAA0I,QAAAwmD,GAEAlvD,MAIAi4G,eAAA,SAAAj6E,GAKA,MAHAh+B,MAAAlK,IAAAhB,IAAAkpC,GACAh+B,KAAA0I,IAAA5N,IAAAkjC,GAEAh+B,MAIAixB,eAAA,SAAAsmE,GAKA,MAHAv3F,MAAAlK,IAAAo+B,WAAAqjE,GACAv3F,KAAA0I,IAAAwrB,UAAAqjE,GAEAv3F,MAIAszC,cAAA,SAAA4b,GAEA,MAAAA,GAAAv2D,EAAAqH,KAAAlK,IAAA6C,GAAAu2D,EAAAv2D,EAAAqH,KAAA0I,IAAA/P,GACAu2D,EAAAt2D,EAAAoH,KAAAlK,IAAA8C,GAAAs2D,EAAAt2D,EAAAoH,KAAA0I,IAAA9P,GAEA,GAIA,GAIAs/G,YAAA,SAAAllB,GAEA,MAAAhzF,MAAAlK,IAAA6C,GAAAq6F,EAAAl9F,IAAA6C,GAAAq6F,EAAAtqF,IAAA/P,GAAAqH,KAAA0I,IAAA/P,GACAqH,KAAAlK,IAAA8C,GAAAo6F,EAAAl9F,IAAA8C,GAAAo6F,EAAAtqF,IAAA9P,GAAAoH,KAAA0I,IAAA9P,GAEA,GAIA,GAIAgjE,aAAA,SAAA1M,EAAAm+C,GAKA,GAAA/kE,GAAA+kE,GAAA,GAAAzgG,EAEA,OAAA07B,GAAA1zC,KACAs6D,EAAAv2D,EAAAqH,KAAAlK,IAAA6C,IAAAqH,KAAA0I,IAAA/P,EAAAqH,KAAAlK,IAAA6C,IACAu2D,EAAAt2D,EAAAoH,KAAAlK,IAAA8C,IAAAoH,KAAA0I,IAAA9P,EAAAoH,KAAAlK,IAAA8C,KAKA0hC,cAAA,SAAA04D,GAIA,MAAAA,GAAAtqF,IAAA/P,EAAAqH,KAAAlK,IAAA6C,GAAAq6F,EAAAl9F,IAAA6C,EAAAqH,KAAA0I,IAAA/P,GACAq6F,EAAAtqF,IAAA9P,EAAAoH,KAAAlK,IAAA8C,GAAAo6F,EAAAl9F,IAAA8C,EAAAoH,KAAA0I,IAAA9P,GAEA,GAIA,GAIAu/G,WAAA,SAAAjpD,EAAAm+C,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAzgG,EACA,OAAA07B,GAAAlsC,KAAA8yD,GAAAivB,MAAAn+E,KAAAlK,IAAAkK,KAAA0I,MAIA4E,gBAAA,WAEA,GAAA0gB,GAAA,GAAAphB,EAEA,iBAAAsiD,GAEA,GAAAkpD,GAAApqF,EAAA5xB,KAAA8yD,GAAAivB,MAAAn+E,KAAAlK,IAAAkK,KAAA0I,IACA,OAAA0vG,GAAAtjH,IAAAo6D,GAAAj6D,aAMAjB,UAAA,SAAAg/F,GAKA,MAHAhzF,MAAAlK,IAAA4S,IAAAsqF,EAAAl9F,KACAkK,KAAA0I,IAAA5S,IAAAk9F,EAAAtqF,KAEA1I,MAIAw6B,MAAA,SAAAw4D,GAKA,MAHAhzF,MAAAlK,QAAAk9F,EAAAl9F,KACAkK,KAAA0I,QAAAsqF,EAAAtqF,KAEA1I,MAIAuvB,UAAA,SAAA/e,GAKA,MAHAxQ,MAAAlK,IAAAgF,IAAA0V,GACAxQ,KAAA0I,IAAA5N,IAAA0V,GAEAxQ,MAIAm4D,OAAA,SAAA66B,GAEA,MAAAA,GAAAl9F,IAAAqiE,OAAAn4D,KAAAlK,MAAAk9F,EAAAtqF,IAAAyvD,OAAAn4D,KAAA0I,OAqzBAmB,EAAA9J,WAEAwpB,YAAA1f,EAEAwuG,YAAA,EAEAltB,GAAAriF,eAEA,MAAA9I,MAAAm3C,cAIAg0C,GAAAriF,aAAA+Q,GAEAA,KAAA,GAAA7Z,KAAAhK,SACAgK,KAAAm3C,aAAAt9B,GAIAmT,UAAA,SAAAq2D,GAEA,GAAA5qF,SAAA4qF,EAEA,OAAA1jF,KAAA0jF,GAAA,CAEA,GAAAi1B,GAAAj1B,EAAA1jF,EAEA,IAAAlH,SAAA6/G,EAAA,CAOA,GAAAC,GAAAv4G,KAAAL,EAEAlH,UAAA8/G,IAOAA,KAAAp5D,QAEAo5D,EAAA3jH,IAAA0jH,GAEQC,KAAAr5D,WAAAo5D,KAAAp5D,UAERq5D,EAAAn8G,KAAAk8G,GAEQ,aAAA34G,EAGRK,KAAAL,GAAA40F,OAAA+jB,GAIAt4G,KAAAL,GAAA24G,MAQA5f,OAAA,SAAAC,GAkGA,QAAA6f,GAAArtF,GAEA,GAAAk4D,KAEA,QAAA1jF,KAAAwrB,GAAA,CAEA,GAAA/S,GAAA+S,EAAAxrB,SACAyY,GAAA0gF,SACAzV,EAAAluF,KAAAijB,GAIA,MAAAirE,GA5GA,GAAAo1B,GAAAhgH,SAAAkgG,CAEA8f,KAEA9f,GACAhvF,YACAP,WAKA,IAAAgP,IACA0gF,UACAnqE,QAAA,IACAxpB,KAAA,WACA4zF,UAAA,mBAiGA,IA5FA3gF,EAAA0wB,KAAA9oC,KAAA8oC,KACA1wB,EAAAjT,KAAAnF,KAAAmF,KAEA,KAAAnF,KAAAzF,OAAA6d,EAAA7d,KAAAyF,KAAAzF,MAEAyF,KAAAmK,OAAAnK,KAAAmK,MAAAg1C,UAAA/mC,EAAAjO,MAAAnK,KAAAmK,MAAA+iG,UAEAz0G,SAAAuH,KAAAyqE,YAAAryD,EAAAqyD,UAAAzqE,KAAAyqE,WACAhyE,SAAAuH,KAAA0qE,YAAAtyD,EAAAsyD,UAAA1qE,KAAA0qE,WAEA1qE,KAAAoK,UAAApK,KAAAoK,SAAA+0C,UAAA/mC,EAAAhO,SAAApK,KAAAoK,SAAA8iG,UACAltG,KAAAsqE,UAAAtqE,KAAAsqE,SAAAnrB,UAAA/mC,EAAAkyD,SAAAtqE,KAAAsqE,SAAA4iC,UACAz0G,SAAAuH,KAAA6L,YAAAuM,EAAAvM,UAAA7L,KAAA6L,WAEA7L,KAAAgK,KAAAhK,KAAAgK,IAAA4jD,YAAAx1C,EAAApO,IAAAhK,KAAAgK,IAAA0uF,OAAAC,GAAA7vD,MACA9oC,KAAAuK,UAAAvK,KAAAuK,SAAAqjD,YAAAx1C,EAAA7N,SAAAvK,KAAAuK,SAAAmuF,OAAAC,GAAA7vD,MACA9oC,KAAAyK,UAAAzK,KAAAyK,SAAAmjD,YAAAx1C,EAAA3N,SAAAzK,KAAAyK,SAAAiuF,OAAAC,GAAA7vD,MACA9oC,KAAA6nD,SAAA7nD,KAAA6nD,QAAA+F,YAEAx1C,EAAAyvC,QAAA7nD,KAAA6nD,QAAA6wC,OAAAC,GAAA7vD,KACA1wB,EAAAmyD,UAAAvqE,KAAAuqE,WAGAvqE,KAAAsK,WAAAtK,KAAAsK,UAAAsjD,YAEAx1C,EAAA9N,UAAAtK,KAAAsK,UAAAouF,OAAAC,GAAA7vD,KACA1wB,EAAAoyD,YAAAxqE,KAAAwqE,YAAAt/B,WAGAlrC,KAAAm4C,iBAAAn4C,KAAAm4C,gBAAAyV,YAEAx1C,EAAA+/B,gBAAAn4C,KAAAm4C,gBAAAugD,OAAAC,GAAA7vD,KACA1wB,EAAAggC,kBAAAp4C,KAAAo4C,kBACAhgC,EAAAigC,iBAAAr4C,KAAAq4C,kBAGAr4C,KAAA2qD,cAAA3qD,KAAA2qD,aAAAiD,YAAAx1C,EAAAuyC,aAAA3qD,KAAA2qD,aAAA+tC,OAAAC,GAAA7vD,MACA9oC,KAAA4qD,cAAA5qD,KAAA4qD,aAAAgD,YAAAx1C,EAAAwyC,aAAA5qD,KAAA4qD,aAAA8tC,OAAAC,GAAA7vD,MAEA9oC,KAAA0qD,aAAA1qD,KAAA0qD,YAAAkD,YAAAx1C,EAAAsyC,YAAA1qD,KAAA0qD,YAAAguC,OAAAC,GAAA7vD,MACA9oC,KAAAqK,aAAArK,KAAAqK,YAAAujD,YAAAx1C,EAAA/N,YAAArK,KAAAqK,YAAAquF,OAAAC,GAAA7vD,MAEA9oC,KAAAwK,QAAAxK,KAAAwK,OAAAojD,YAEAx1C,EAAA5N,OAAAxK,KAAAwK,OAAAkuF,OAAAC,GAAA7vD,KACA1wB,EAAAonC,aAAAx/C,KAAAw/C,cAIA/mD,SAAAuH,KAAAyU,OAAA2D,EAAA3D,KAAAzU,KAAAyU,MACAhc,SAAAuH,KAAAkrD,kBAAA9yC,EAAA8yC,gBAAAlrD,KAAAkrD,iBAEAlrD,KAAAouB,WAAA4H,KAAA5d,EAAAgW,SAAApuB,KAAAouB,UACApuB,KAAA+L,UAAAC,KAAAoM,EAAArM,QAAA/L,KAAA+L,SACA/L,KAAAsV,OAAA6rB,KAAA/oB,EAAA9C,KAAAtV,KAAAsV,MACAtV,KAAAwwB,eAAA0lB,KAAA99B,EAAAoY,aAAAxwB,KAAAwwB,cAEAxwB,KAAAkuB,QAAA,IAAA9V,EAAA8V,QAAAluB,KAAAkuB,SACAluB,KAAAwV,eAAA,IAAA4C,EAAA5C,YAAAxV,KAAAwV,aAEA4C,EAAAq+B,UAAAz2C,KAAAy2C,UACAr+B,EAAA29B,UAAA/1C,KAAA+1C,UACA39B,EAAA49B,WAAAh2C,KAAAg2C,WAEAh2C,KAAAk1C,UAAA,IAAA98B,EAAA88B,UAAAl1C,KAAAk1C,WACAl1C,KAAAk3C,sBAAA,IAAA9+B,EAAA8+B,mBAAAl3C,KAAAk3C,oBACAl3C,KAAA8yB,aAAA,IAAA1a,EAAA0a,UAAA9yB,KAAA8yB,WACA9yB,KAAAgzB,mBAAA,IAAA5a,EAAA4a,mBAAAhzB,KAAAgzB,oBACA,UAAAhzB,KAAAizB,mBAAA7a,EAAA6a,iBAAAjzB,KAAAizB,kBACA,UAAAjzB,KAAAkzB,oBAAA9a,EAAA8a,kBAAAlzB,KAAAkzB,mBAEA9a,EAAAo/B,SAAAx3C,KAAAw3C,SACAp/B,EAAAuoB,aAAA3gC,KAAA2gC,aAoBA83E,EAAA,CAEA,GAAA9uG,GAAA6uG,EAAA7f,EAAAhvF,UACAP,EAAAovG,EAAA7f,EAAAvvF,OAEAO,GAAA1U,OAAA,IAAAmjB,EAAAzO,YACAP,EAAAnU,OAAA,IAAAmjB,EAAAhP,UAIA,MAAAgP,IAIA+O,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,OAIA5D,KAAA,SAAAyW,GAEA7S,KAAAzF,KAAAsY,EAAAtY,KAEAyF,KAAA01C,IAAA7iC,EAAA6iC,IACA11C,KAAAg6B,OAAAnnB,EAAAmnB,OAEAh6B,KAAAouB,SAAAvb,EAAAub,SACApuB,KAAAsV,KAAAzC,EAAAyC,KACAtV,KAAA+L,QAAA8G,EAAA9G,QACA/L,KAAAwwB,aAAA3d,EAAA2d,aAEAxwB,KAAAkuB,QAAArb,EAAAqb,QACAluB,KAAAwV,YAAA3C,EAAA2C,YAEAxV,KAAAq0C,SAAAxhC,EAAAwhC,SACAr0C,KAAAs0C,SAAAzhC,EAAAyhC,SACAt0C,KAAAo0C,cAAAvhC,EAAAuhC,cACAp0C,KAAAs2C,cAAAzjC,EAAAyjC,cACAt2C,KAAAu2C,cAAA1jC,EAAA0jC,cACAv2C,KAAAw2C,mBAAA3jC,EAAA2jC,mBAEAx2C,KAAAy2C,UAAA5jC,EAAA4jC,UACAz2C,KAAA+1C,UAAAljC,EAAAkjC,UACA/1C,KAAAg2C,WAAAnjC,EAAAmjC,WAEAh2C,KAAA62C,WAAAhkC,EAAAgkC,WAEA72C,KAAA82C,UAAAjkC,EAAAikC,UAEA92C,KAAA+2C,cAAAlkC,EAAAkkC,cACA/2C,KAAAg3C,oBAAAnkC,EAAAmkC,oBACAh3C,KAAAi3C,mBAAApkC,EAAAokC,mBAEAj3C,KAAAk1C,UAAAriC,EAAAqiC,UAEAl1C,KAAAk3C,mBAAArkC,EAAAqkC,mBAEAl3C,KAAA6V,SAAAhD,EAAAgD,SAEA7V,KAAAsO,QAAAuE,EAAAvE,QACAtO,KAAA42C,YAAA/jC,EAAA+jC,WAEA,IAAA8hE,GAAA7lG,EAAA8jC,eACAgiE,EAAA,IAEA,WAAAD,EAAA,CAEA,GAAAj5G,GAAAi5G,EAAAzjH,MACA0jH,GAAA,GAAA7+F,OAAAra,EAEA,QAAAnO,GAAA,EAAuBA,IAAAmO,IAASnO,EAChCqnH,EAAArnH,GAAAonH,EAAApnH,GAAA61B,QAMA,MAFAnnB,MAAA22C,eAAAgiE,EAEA34G,MAIAhK,OAAA,WAEAgK,KAAAgW,eAA2B7Q,KAAA,YAI3Bgc,QAAA,WAEAnhB,KAAAgW,eAA2B7Q,KAAA,cAM3BjF,OAAA+J,OAAAJ,EAAA9J,UAAAupB,EAAAvpB,UAEA,IAAAq3C,IAAA,CAgFAC,GAAAt3C,UAAAG,OAAAmpB,OAAAxf,EAAA9J,WACAs3C,EAAAt3C,UAAAwpB,YAAA8tB,EAEAA,EAAAt3C,UAAA4rD,kBAAA,EAEAtU,EAAAt3C,UAAA3D,KAAA,SAAAyW,GAwBA,MAtBAhJ,GAAA9J,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAwxC,eAAA3+B,EAAA2+B,eACAxxC,KAAAuxC,aAAA1+B,EAAA0+B,aAEAvxC,KAAA4Z,SAAA9oB,EAAA4rD,cAAAv1B,MAAAtU,EAAA+G,UAEA5Z,KAAAs3C,QAAAzkC,EAAAykC,QAEAt3C,KAAA8yB,UAAAjgB,EAAAigB,UACA9yB,KAAAgzB,mBAAAngB,EAAAmgB,mBAEAhzB,KAAAg6B,OAAAnnB,EAAAmnB,OACAh6B,KAAAu3C,SAAA1kC,EAAA0kC,SAEAv3C,KAAAw3C,SAAA3kC,EAAA2kC,SAEAx3C,KAAA2gC,aAAA9tB,EAAA8tB,aACA3gC,KAAAy3C,aAAA5kC,EAAA4kC,aAEAz3C,KAAA03C,WAAA7kC,EAAA6kC,WAEA13C,MAIAq3C,EAAAt3C,UAAA24F,OAAA,SAAAC,GAEA,GAAAvgF,GAAAvO,EAAA9J,UAAA24F,OAAAxnG,KAAA8O,KAAA24F,EAMA,OAJAvgF,GAAAwB,SAAA5Z,KAAA4Z,SACAxB,EAAAm5B,aAAAvxC,KAAAuxC,aACAn5B,EAAAo5B,eAAAxxC,KAAAwxC,eAEAp5B,GAwDAhN,EAAArL,UAAAG,OAAAmpB,OAAAxf,EAAA9J,WACAqL,EAAArL,UAAAwpB,YAAAne,EAEAA,EAAArL,UAAA8oE,qBAAA,EAEAz9D,EAAArL,UAAA3D,KAAA,SAAAyW,GAoBA,MAlBAhJ,GAAA9J,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAi4C,aAAAplC,EAAAolC,aAEAj4C,KAAAw3C,SAAA3kC,EAAA2kC,SACAx3C,KAAA2gC,aAAA9tB,EAAA8tB,aAEA3gC,KAAAgK,IAAA6I,EAAA7I,IAEAhK,KAAAuK,SAAAsI,EAAAtI,SAEAvK,KAAAm4C,gBAAAtlC,EAAAslC,gBACAn4C,KAAAo4C,kBAAAvlC,EAAAulC,kBACAp4C,KAAAq4C,iBAAAxlC,EAAAwlC,iBAEAr4C,KAAA8yB,UAAAjgB,EAAAigB,UACA9yB,KAAAgzB,mBAAAngB,EAAAmgB,mBAEAhzB,MAgBAq9B,GAAAt9B,WAEAwpB,YAAA8T,GAEAu7E,QAAA,EAEAhkH,IAAA,SAAAkB,EAAA4S,GAKA,MAHA1I,MAAAlK,IAAAsG,KAAAtG,GACAkK,KAAA0I,IAAAtM,KAAAsM,GAEA1I,MAIA64G,aAAA,SAAA14E,GAUA,OARA24E,KAAAlyF,KACAmyF,IAAAnyF,KACAoyF,IAAApyF,KAEAqyF,IAAAryF,KACAsyF,IAAAtyF,KACAuyF,IAAAvyF,KAEAt1B,EAAA,EAAAi7B,EAAA4T,EAAAlrC,OAAwCs3B,EAAAj7B,EAAOA,GAAA,GAE/C,GAAAqH,GAAAwnC,EAAA7uC,GACAsH,EAAAunC,EAAA7uC,EAAA,GACAuH,EAAAsnC,EAAA7uC,EAAA,EAEAwnH,GAAAngH,IAAAmgH,EAAAngH,GACAogH,EAAAngH,IAAAmgH,EAAAngH,GACAogH,EAAAngH,IAAAmgH,EAAAngH,GAEAF,EAAAsgH,MAAAtgH,GACAC,EAAAsgH,MAAAtgH,GACAC,EAAAsgH,MAAAtgH,GAIAmH,KAAAlK,IAAAlB,IAAAkkH,EAAAC,EAAAC,GACAh5G,KAAA0I,IAAA9T,IAAAqkH,EAAAC,EAAAC,IAIA9+E,cAAA,SAAA82C,GAEAnxE,KAAA05B,WAEA,QAAApoC,GAAA,EAAA0rD,EAAAm0B,EAAAl8E,OAA0C+nD,EAAA1rD,EAAQA,IAElD0O,KAAA63G,cAAA1mC,EAAA7/E,GAIA,OAAA0O,OAIA83G,qBAAA,WAEA,GAAA9pF,GAAA,GAAAhf,EAEA,iBAAAya,EAAAhV,GAEA,GAAAsjG,GAAA/pF,EAAA5xB,KAAAqY,GAAA+E,eAAA,GAKA,OAHAxZ,MAAAlK,IAAAsG,KAAAqtB,GAAA30B,IAAAijH,GACA/3G,KAAA0I,IAAAtM,KAAAqtB,GAAA3uB,IAAAi9G,GAEA/3G,SAMA4wD,cAAA,WAKA,GAAA5iC,GAAA,GAAAhf,EAEA,iBAAA1b,GAEA,GAAAosB,GAAA1f,IAgEA,OA9DA1M,GAAA6C,mBAAA,GAEA6J,KAAA05B,YAEApmC,EAAA8lH,SAAA,SAAA7uB,GAEA,GAAAr9E,GAAAq9E,EAAAr9E,QAEA,IAAAzU,SAAAyU,EAEA,GAAAA,KAAA8sC,WAIA,OAFAnoB,GAAA3kB,EAAA2kB,SAEAvgC,EAAA,EAAA0rD,EAAAnrB,EAAA58B,OAAgD+nD,EAAA1rD,EAAQA,IAExD08B,EAAA5xB,KAAAy1B,EAAAvgC,IACA08B,EAAAyQ,aAAA8rD,EAAA71F,aAEAgrB,EAAAm4F,cAAA7pF,OAIU,IAAA9gB,KAAA4sC,iBAAA,CAEV,GAAAwW,GAAApjD,EAAA8yB,WAAAlkC,QAEA,IAAArD,SAAA63D,EAAA,CAEA,GAAAnwB,GAAA3vB,EAAA4zD,CAEA9T,MAAA/K,8BAEAplB,EAAAmwB,EAAAl4C,KAAA+nB,MACA3vB,EAAA8/C,EAAA9/C,OACA4zD,EAAA9T,EAAAl4C,KAAAgsD,SAIAjkC,EAAAmwB,EAAAnwB,MACA3vB,EAAA,EACA4zD,EAAA,EAIA,QAAA9yE,GAAAkf,EAAAwsC,EAAA7c,EAAAlrC,OAAmD+nD,EAAA1rD,EAAQA,GAAA8yE,EAE3Dp2C,EAAA/V,UAAAkoB,EAAA7uC,GACA08B,EAAAyQ,aAAA8rD,EAAA71F,aAEAgrB,EAAAm4F,cAAA7pF,OAYAhuB,SAMAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,OAIA5D,KAAA,SAAA42F,GAKA,MAHAhzF,MAAAlK,IAAAsG,KAAA42F,EAAAl9F,KACAkK,KAAA0I,IAAAtM,KAAA42F,EAAAtqF,KAEA1I,MAIA05B,UAAA,WAKA,MAHA15B,MAAAlK,IAAA6C,EAAAqH,KAAAlK,IAAA8C,EAAAoH,KAAAlK,IAAA+C,IAAA+tB,KACA5mB,KAAA0I,IAAA/P,EAAAqH,KAAA0I,IAAA9P,EAAAoH,KAAA0I,IAAA7P,IAAA+tB,KAEA5mB,MAIAs5B,QAAA,WAIA,MAAAt5B,MAAA0I,IAAA/P,EAAAqH,KAAAlK,IAAA6C,GAAAqH,KAAA0I,IAAA9P,EAAAoH,KAAAlK,IAAA8C,GAAAoH,KAAA0I,IAAA7P,EAAAmH,KAAAlK,IAAA+C,GAIAm/G,UAAA,SAAA3K,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EACA,OAAAhP,MAAAs5B,UAAAgP,EAAA1zC,IAAA,OAAA0zC,EAAAwzC,WAAA97E,KAAAlK,IAAAkK,KAAA0I,KAAA8Q,eAAA,KAIAmS,QAAA,SAAA0hF,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EACA,OAAAhP,MAAAs5B,UAAAgP,EAAA1zC,IAAA,OAAA0zC,EAAAxlB,WAAA9iB,KAAA0I,IAAA1I,KAAAlK,MAIA+hH,cAAA,SAAA3oD,GAKA,MAHAlvD,MAAAlK,QAAAo5D,GACAlvD,KAAA0I,QAAAwmD,GAEAlvD,MAIAi4G,eAAA,SAAAj6E,GAKA,MAHAh+B,MAAAlK,IAAAhB,IAAAkpC,GACAh+B,KAAA0I,IAAA5N,IAAAkjC,GAEAh+B,MAIAixB,eAAA,SAAAsmE,GAKA,MAHAv3F,MAAAlK,IAAAo+B,WAAAqjE,GACAv3F,KAAA0I,IAAAwrB,UAAAqjE,GAEAv3F,MAIAszC,cAAA,SAAA4b,GAEA,MAAAA,GAAAv2D,EAAAqH,KAAAlK,IAAA6C,GAAAu2D,EAAAv2D,EAAAqH,KAAA0I,IAAA/P,GACAu2D,EAAAt2D,EAAAoH,KAAAlK,IAAA8C,GAAAs2D,EAAAt2D,EAAAoH,KAAA0I,IAAA9P,GACAs2D,EAAAr2D,EAAAmH,KAAAlK,IAAA+C,GAAAq2D,EAAAr2D,EAAAmH,KAAA0I,IAAA7P,GAEA,GAIA,GAIAq/G,YAAA,SAAAllB,GAEA,MAAAhzF,MAAAlK,IAAA6C,GAAAq6F,EAAAl9F,IAAA6C,GAAAq6F,EAAAtqF,IAAA/P,GAAAqH,KAAA0I,IAAA/P,GACAqH,KAAAlK,IAAA8C,GAAAo6F,EAAAl9F,IAAA8C,GAAAo6F,EAAAtqF,IAAA9P,GAAAoH,KAAA0I,IAAA9P,GACAoH,KAAAlK,IAAA+C,GAAAm6F,EAAAl9F,IAAA+C,GAAAm6F,EAAAtqF,IAAA7P,GAAAmH,KAAA0I,IAAA7P,GAEA,GAIA,GAIA+iE,aAAA,SAAA1M,EAAAm+C,GAKA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EAEA,OAAAs5B,GAAA1zC,KACAs6D,EAAAv2D,EAAAqH,KAAAlK,IAAA6C,IAAAqH,KAAA0I,IAAA/P,EAAAqH,KAAAlK,IAAA6C,IACAu2D,EAAAt2D,EAAAoH,KAAAlK,IAAA8C,IAAAoH,KAAA0I,IAAA9P,EAAAoH,KAAAlK,IAAA8C,IACAs2D,EAAAr2D,EAAAmH,KAAAlK,IAAA+C,IAAAmH,KAAA0I,IAAA7P,EAAAmH,KAAAlK,IAAA+C,KAKAyhC,cAAA,SAAA04D,GAIA,MAAAA,GAAAtqF,IAAA/P,EAAAqH,KAAAlK,IAAA6C,GAAAq6F,EAAAl9F,IAAA6C,EAAAqH,KAAA0I,IAAA/P,GACAq6F,EAAAtqF,IAAA9P,EAAAoH,KAAAlK,IAAA8C,GAAAo6F,EAAAl9F,IAAA8C,EAAAoH,KAAA0I,IAAA9P,GACAo6F,EAAAtqF,IAAA7P,EAAAmH,KAAAlK,IAAA+C,GAAAm6F,EAAAl9F,IAAA+C,EAAAmH,KAAA0I,IAAA7P,GAEA,GAIA,GAIA2sE,iBAAA,WAEA,GAAA6zC,EAEA,iBAAAn7F,GAQA,MANAzlB,UAAA4gH,MAAA,GAAArqG,IAGAhP,KAAAm4G,WAAAj6F,EAAAuL,OAAA4vF,GAGAA,EAAA9wF,kBAAArK,EAAAuL,SAAAvL,EAAA9J,OAAA8J,EAAA9J,WAMAklG,gBAAA,SAAAz3C,GAKA,GAAA/rE,GAAA4S,CAsCA,OApCAm5D,GAAA52D,OAAAtS,EAAA,GAEA7C,EAAA+rE,EAAA52D,OAAAtS,EAAAqH,KAAAlK,IAAA6C,EACA+P,EAAAm5D,EAAA52D,OAAAtS,EAAAqH,KAAA0I,IAAA/P,IAIA7C,EAAA+rE,EAAA52D,OAAAtS,EAAAqH,KAAA0I,IAAA/P,EACA+P,EAAAm5D,EAAA52D,OAAAtS,EAAAqH,KAAAlK,IAAA6C,GAIAkpE,EAAA52D,OAAArS,EAAA,GAEA9C,GAAA+rE,EAAA52D,OAAArS,EAAAoH,KAAAlK,IAAA8C,EACA8P,GAAAm5D,EAAA52D,OAAArS,EAAAoH,KAAA0I,IAAA9P,IAIA9C,GAAA+rE,EAAA52D,OAAArS,EAAAoH,KAAA0I,IAAA9P,EACA8P,GAAAm5D,EAAA52D,OAAArS,EAAAoH,KAAAlK,IAAA8C,GAIAipE,EAAA52D,OAAApS,EAAA,GAEA/C,GAAA+rE,EAAA52D,OAAApS,EAAAmH,KAAAlK,IAAA+C,EACA6P,GAAAm5D,EAAA52D,OAAApS,EAAAmH,KAAA0I,IAAA7P,IAIA/C,GAAA+rE,EAAA52D,OAAApS,EAAAmH,KAAA0I,IAAA7P,EACA6P,GAAAm5D,EAAA52D,OAAApS,EAAAmH,KAAAlK,IAAA+C,GAIA/C,GAAA+rE,EAAArpB,UAAA9vC,GAAAm5D,EAAArpB,UAIA2/D,WAAA,SAAAjpD,EAAAm+C,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EACA,OAAAs5B,GAAAlsC,KAAA8yD,GAAAivB,MAAAn+E,KAAAlK,IAAAkK,KAAA0I,MAIA4E,gBAAA,WAEA,GAAA0gB,GAAA,GAAAhf,EAEA,iBAAAkgD,GAEA,GAAAkpD,GAAApqF,EAAA5xB,KAAA8yD,GAAAivB,MAAAn+E,KAAAlK,IAAAkK,KAAA0I,IACA,OAAA0vG,GAAAtjH,IAAAo6D,GAAAj6D,aAMAskH,kBAAA,WAEA,GAAAvrF,GAAA,GAAAhf,EAEA,iBAAAq+F,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAA/0D,GAMA,OAJAt4C,MAAAg4G,UAAA1vE,EAAA7e,QAEA6e,EAAAl0B,OAAA,GAAApU,KAAAyU,KAAAuZ,GAAA/4B,SAEAqzC,MAMAt0C,UAAA,SAAAg/F,GAQA,MANAhzF,MAAAlK,IAAA4S,IAAAsqF,EAAAl9F,KACAkK,KAAA0I,IAAA5S,IAAAk9F,EAAAtqF,KAGA1I,KAAAs5B,WAAAt5B,KAAA05B,YAEA15B,MAIAw6B,MAAA,SAAAw4D,GAKA,MAHAhzF,MAAAlK,QAAAk9F,EAAAl9F,KACAkK,KAAA0I,QAAAsqF,EAAAtqF,KAEA1I,MAIAy+B,aAAA,WAEA,GAAA0yC,IACA,GAAAniE,GACA,GAAAA,GACA,GAAAA,GACA,GAAAA,GACA,GAAAA,GACA,GAAAA,GACA,GAAAA,GACA,GAAAA,GAGA,iBAAAma,GAGA,MAAAnpB,MAAAs5B,UAAAt5B,MAGAmxE,EAAA,GAAAv8E,IAAAoL,KAAAlK,IAAA6C,EAAAqH,KAAAlK,IAAA8C,EAAAoH,KAAAlK,IAAA+C,GAAA4lC,aAAAtV,GACAgoD,EAAA,GAAAv8E,IAAAoL,KAAAlK,IAAA6C,EAAAqH,KAAAlK,IAAA8C,EAAAoH,KAAA0I,IAAA7P,GAAA4lC,aAAAtV,GACAgoD,EAAA,GAAAv8E,IAAAoL,KAAAlK,IAAA6C,EAAAqH,KAAA0I,IAAA9P,EAAAoH,KAAAlK,IAAA+C,GAAA4lC,aAAAtV,GACAgoD,EAAA,GAAAv8E,IAAAoL,KAAAlK,IAAA6C,EAAAqH,KAAA0I,IAAA9P,EAAAoH,KAAA0I,IAAA7P,GAAA4lC,aAAAtV,GACAgoD,EAAA,GAAAv8E,IAAAoL,KAAA0I,IAAA/P,EAAAqH,KAAAlK,IAAA8C,EAAAoH,KAAAlK,IAAA+C,GAAA4lC,aAAAtV,GACAgoD,EAAA,GAAAv8E,IAAAoL,KAAA0I,IAAA/P,EAAAqH,KAAAlK,IAAA8C,EAAAoH,KAAA0I,IAAA7P,GAAA4lC,aAAAtV,GACAgoD,EAAA,GAAAv8E,IAAAoL,KAAA0I,IAAA/P,EAAAqH,KAAA0I,IAAA9P,EAAAoH,KAAAlK,IAAA+C,GAAA4lC,aAAAtV,GACAgoD,EAAA,GAAAv8E,IAAAoL,KAAA0I,IAAA/P,EAAAqH,KAAA0I,IAAA9P,EAAAoH,KAAA0I,IAAA7P,GAAA4lC,aAAAtV,GAEAnpB,KAAAq6B,cAAA82C,GAEAnxE,UAMAuvB,UAAA,SAAA/e,GAKA,MAHAxQ,MAAAlK,IAAAgF,IAAA0V,GACAxQ,KAAA0I,IAAA5N,IAAA0V,GAEAxQ,MAIAm4D,OAAA,SAAA66B,GAEA,MAAAA,GAAAl9F,IAAAqiE,OAAAn4D,KAAAlK,MAAAk9F,EAAAtqF,IAAAyvD,OAAAn4D,KAAA0I,OAkBA4vC,GAAAv4C,WAEAwpB,YAAA+uB,GAEA1jD,IAAA,SAAA60B,EAAArV,GAKA,MAHApU,MAAAypB,OAAArtB,KAAAqtB,GACAzpB,KAAAoU,SAEApU,MAIAq6B,cAAA,WAEA,GAAA24D,GAAA,GAAA31D,GAEA,iBAAA8zC,EAAAqoC,GAEA,GAAA/vF,GAAAzpB,KAAAypB,MAEAhxB,UAAA+gH,EAEA/vF,EAAArtB,KAAAo9G,GAIAxmB,EAAA34D,cAAA82C,GAAA6mC,UAAAvuF,EAMA,QAFAgwF,GAAA,EAEAnoH,EAAA,EAAA0rD,EAAAm0B,EAAAl8E,OAA2C+nD,EAAA1rD,EAAQA,IAEnDmoH,EAAA5jH,KAAA6S,IAAA+wG,EAAAhwF,EAAAlB,kBAAA4oD,EAAA7/E,IAMA,OAFA0O,MAAAoU,OAAAve,KAAAiD,KAAA2gH,GAEAz5G,SAMAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,OAIA5D,KAAA,SAAA8hB,GAKA,MAHAle,MAAAypB,OAAArtB,KAAA8hB,EAAAuL,QACAzpB,KAAAoU,OAAA8J,EAAA9J,OAEApU,MAIA05G,MAAA,WAEA,MAAA15G,MAAAoU,QAAA,GAIAk/B,cAAA,SAAA4b,GAEA,MAAAA,GAAA3mC,kBAAAvoB,KAAAypB,SAAAzpB,KAAAoU,OAAApU,KAAAoU,QAIA9G,gBAAA,SAAA4hD,GAEA,MAAAA,GAAA1hD,WAAAxN,KAAAypB,QAAAzpB,KAAAoU,QAIAoxD,iBAAA,SAAAtnD,GAEA,GAAAy7F,GAAA35G,KAAAoU,OAAA8J,EAAA9J,MAEA,OAAA8J,GAAAuL,OAAAlB,kBAAAvoB,KAAAypB,SAAAkwF,KAIAr/E,cAAA,SAAA04D,GAEA,MAAAA,GAAAxtB,iBAAAxlE,OAIAs5G,gBAAA,SAAAz3C,GAUA,MAAAhsE,MAAA6C,IAAAsH,KAAAypB,OAAAhB,IAAAo5C,EAAA52D,QAAA42D,EAAArpB,WAAAx4C,KAAAoU,QAIA+jG,WAAA,SAAAjpD,EAAAm+C,GAEA,GAAAuM,GAAA55G,KAAAypB,OAAAlB,kBAAA2mC,GAEA5mB,EAAA+kE,GAAA,GAAAr+F,EAWA,OATAs5B,GAAAlsC,KAAA8yD,GAEA0qD,EAAA55G,KAAAoU,OAAApU,KAAAoU,SAEAk0B,EAAAxzC,IAAAkL,KAAAypB,QAAA10B,YACAuzC,EAAA9uB,eAAAxZ,KAAAoU,QAAAtZ,IAAAkF,KAAAypB,SAIA6e,GAIAuxE,eAAA,SAAAxM,GAEA,GAAAra,GAAAqa,GAAA,GAAAhwE,GAKA,OAHA21D,GAAAp+F,IAAAoL,KAAAypB,OAAAzpB,KAAAypB,QACAupE,EAAA/hE,eAAAjxB,KAAAoU,QAEA4+E,GAIAv0D,aAAA,SAAAtV,GAKA,MAHAnpB,MAAAypB,OAAAgV,aAAAtV,GACAnpB,KAAAoU,OAAApU,KAAAoU,OAAA+U,EAAAi7E,oBAEApkG,MAIAuvB,UAAA,SAAA/e,GAIA,MAFAxQ,MAAAypB,OAAA3uB,IAAA0V,GAEAxQ,MAIAm4D,OAAA,SAAAj6C,GAEA,MAAAA,GAAAuL,OAAA0uC,OAAAn4D,KAAAypB,SAAAvL,EAAA9J,SAAApU,KAAAoU,SA+BAiW,GAAAtqB,WAEAwpB,YAAAc,GAEAw7E,WAAA,EAEAjxG,IAAA,SAAAoqG,EAAAC,EAAAC,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,EAAAC,GAEA,GAAAlG,GAAAx5F,KAAAoqB,QAMA,OAJAovE,GAAA,GAAAwF,EAAoBxF,EAAA,GAAA4F,EAAe5F,EAAA,GAAAgG,EACnChG,EAAA,GAAAyF,EAAoBzF,EAAA,GAAA6F,EAAe7F,EAAA,GAAAiG,EACnCjG,EAAA,GAAA0F,EAAoB1F,EAAA,GAAA8F,EAAe9F,EAAA,GAAAkG,EAEnC1/F,MAIA4rE,SAAA,WAUA,MARA5rE,MAAApL,IAEA,MACA,MACA,OAIAoL,MAIAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAtR,UAAAjY,KAAAoqB,WAIAhuB,KAAA,SAAAjL,GAEA,GAAA6uG,GAAA7uG,EAAAi5B,QAUA,OARApqB,MAAApL,IAEAorG,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAIAhgG,MAIA85G,eAAA,SAAA3oH,GAEA,GAAA6uG,GAAA7uG,EAAAi5B,QAUA,OARApqB,MAAApL,IAEAorG,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAIAhgG,MAIAwjG,oBAAA,WAEA,GAAAx1E,EAEA,iBAAAmS,EAAA3vB,EAAAvb,GAEAwD,SAAAu1B,MAAA,GAAAhf,IACAvW,SAAA+X,MAAA,GACA/X,SAAAxD,MAAAkrC,EAAAlrC,OAEA,QAAA3D,GAAA,EAAAoS,EAAA8M,EAAmCvb,EAAA3D,EAAYA,GAAA,EAAAoS,GAAA,EAE/CsqB,EAAA/V,UAAAkoB,EAAAz8B,GACAsqB,EAAA0F,aAAA1zB,MACAguB,EAAAkd,QAAA/K,EAAAz8B,EAIA,OAAAy8B,OAMAsjE,cAAA,WAEA,GAAAz1E,EAEA,iBAAAwiC,EAAAhgD,EAAAvb,GAEAwD,SAAAu1B,MAAA,GAAAhf,IACAvW,SAAA+X,MAAA,GACA/X,SAAAxD,MAAAu7D,EAAAv7D,OAAAu7D,EAAA7Q,SAEA,QAAAruD,GAAA,EAAAoS,EAAA8M,EAAmCvb,EAAA3D,EAAYA,IAAAoS,IAE/CsqB,EAAAr1B,EAAA63D,EAAAmnB,KAAAj0E,GACAsqB,EAAAp1B,EAAA43D,EAAAonB,KAAAl0E,GACAsqB,EAAAn1B,EAAA23D,EAAAqnB,KAAAn0E,GAEAsqB,EAAA0F,aAAA1zB,MAEAwwD,EAAAwrB,OAAAhuD,EAAAr1B,EAAAq1B,EAAAp1B,EAAAo1B,EAAAn1B,EAIA,OAAA23D,OAMAh3C,eAAA,SAAA2mE,GAEA,GAAAqZ,GAAAx5F,KAAAoqB,QAMA,OAJAovE,GAAA,IAAArZ,EAAmBqZ,EAAA,IAAArZ,EAAcqZ,EAAA,IAAArZ,EACjCqZ,EAAA,IAAArZ,EAAmBqZ,EAAA,IAAArZ,EAAcqZ,EAAA,IAAArZ,EACjCqZ,EAAA,IAAArZ,EAAmBqZ,EAAA,IAAArZ,EAAcqZ,EAAA,IAAArZ,EAEjCngF,MAIA0jG,YAAA,WAEA,GAAAlK,GAAAx5F,KAAAoqB,SAEAz4B,EAAA6nG,EAAA,GAAA5nG,EAAA4nG,EAAA,GAAApoG,EAAAooG,EAAA,GACAjkE,EAAAikE,EAAA,GAAAnpF,EAAAmpF,EAAA,GAAAhkE,EAAAgkE,EAAA,GACA//D,EAAA+/D,EAAA,GAAA12D,EAAA02D,EAAA,GAAAloG,EAAAkoG,EAAA,EAEA,OAAA7nG,GAAA0e,EAAA/e,EAAAK,EAAA6jC,EAAAsN,EAAAlxC,EAAA2jC,EAAAjkC,EAAAM,EAAA4jC,EAAAiE,EAAAroC,EAAAmkC,EAAAuN,EAAA1xC,EAAAif,EAAAopB,GAIA/qB,WAAA,SAAAya,EAAA06E,GAEA16E,KAAA41E,SAMA,IAAAiB,GAAA72E,EAAAiB,SACAovE,EAAAx5F,KAAAoqB,SAEA40E,EAAAgB,EAAA,GAAAZ,EAAAY,EAAA,GAAAR,EAAAQ,EAAA,GACAf,EAAAe,EAAA,GAAAX,EAAAW,EAAA,GAAAP,EAAAO,EAAA,GACAd,EAAAc,EAAA,GAAAV,EAAAU,EAAA,GAAAN,EAAAM,EAAA,GAEA8D,EAAApE,EAAAL,EAAAI,EAAAH,EACAyE,EAAAtE,EAAAP,EAAAQ,EAAAT,EACA+E,EAAA1E,EAAAL,EAAAI,EAAAH,EAEAzpE,EAAAupE,EAAA8E,EAAA1E,EAAA2E,EAAAvE,EAAAwE,CAEA,QAAAvuE,EAAA,CAEA,GAAAyuE,GAAA,mEAEA,IAAAL,KAAA,EAEA,SAAAh/F,OAAAq/F,EAQA,OAAAlkG,MAAA4rE,WAGA,GAAAu4B,GAAA,EAAA1uE,CAcA,OAZA+jE,GAAA,GAAAsK,EAAAK,EACA3K,EAAA,IAAAgG,EAAAF,EAAAI,EAAAN,GAAA+E,EACA3K,EAAA,IAAAiG,EAAAL,EAAAI,EAAAH,GAAA8E,EAEA3K,EAAA,GAAAuK,EAAAI,EACA3K,EAAA,IAAAkG,EAAAV,EAAAQ,EAAAN,GAAAiF,EACA3K,EAAA,IAAAgG,EAAAP,EAAAQ,EAAAT,GAAAmF,EAEA3K,EAAA,GAAAwK,EAAAG,EACA3K,EAAA,IAAA4F,EAAAF,EAAAI,EAAAN,GAAAmF,EACA3K,EAAA,IAAA6F,EAAAL,EAAAI,EAAAH,GAAAkF,EAEAnkG,MAIAgsB,UAAA,WAEA,GAAA/pB,GAAA9Q,EAAA6O,KAAAoqB,QAMA,OAJAnoB,GAAA9Q,EAAA,GAAmBA,EAAA,GAAAA,EAAA,GAAiBA,EAAA,GAAA8Q,EACpCA,EAAA9Q,EAAA,GAAmBA,EAAA,GAAAA,EAAA,GAAiBA,EAAA,GAAA8Q,EACpCA,EAAA9Q,EAAA,GAAmBA,EAAA,GAAAA,EAAA,GAAiBA,EAAA,GAAA8Q,EAEpCjC,MAIA2jG,qBAAA,SAAAxjE,EAAA3vB,GAKA,MAAAxQ,MAAAkrC,QAAA/K,EAAA3vB,IAIAypB,gBAAA,SAAA8/E,GAEA,MAAA/5G,MAAA85G,eAAAC,GAAArrG,WAAA1O,MAAAgsB,aAIAguF,mBAAA,SAAAxgF,GAEA,GAAAroC,GAAA6O,KAAAoqB,QAYA,OAVAoP,GAAA,GAAAroC,EAAA,GACAqoC,EAAA,GAAAroC,EAAA,GACAqoC,EAAA,GAAAroC,EAAA,GACAqoC,EAAA,GAAAroC,EAAA,GACAqoC,EAAA,GAAAroC,EAAA,GACAqoC,EAAA,GAAAroC,EAAA,GACAqoC,EAAA,GAAAroC,EAAA,GACAqoC,EAAA,GAAAroC,EAAA,GACAqoC,EAAA,GAAAroC,EAAA,GAEA6O,MAIAiY,UAAA,SAAAkoB,EAAA3vB,GAEA/X,SAAA+X,MAAA,EAEA,QAAAlf,GAAA,EAAqB,EAAAA,EAAOA,IAE5B0O,KAAAoqB,SAAA94B,GAAA6uC,EAAA7uC,EAAAkf,EAIA,OAAAxQ,OAIAkrC,QAAA,SAAA/K,EAAA3vB,GAEA/X,SAAA0nC,UACA1nC,SAAA+X,MAAA,EAEA,IAAAgpF,GAAAx5F,KAAAoqB,QAcA,OAZA+V,GAAA3vB,GAAAgpF,EAAA,GACAr5D,EAAA3vB,EAAA,GAAAgpF,EAAA,GACAr5D,EAAA3vB,EAAA,GAAAgpF,EAAA,GAEAr5D,EAAA3vB,EAAA,GAAAgpF,EAAA,GACAr5D,EAAA3vB,EAAA,GAAAgpF,EAAA,GACAr5D,EAAA3vB,EAAA,GAAAgpF,EAAA,GAEAr5D,EAAA3vB,EAAA,GAAAgpF,EAAA,GACAr5D,EAAA3vB,EAAA,GAAAgpF,EAAA,GACAr5D,EAAA3vB,EAAA,GAAAgpF,EAAA,GAEAr5D,IAiBAoY,GAAAx4C,WAEAwpB,YAAAgvB,GAEA3jD,IAAA,SAAAqW,EAAAutC,GAKA,MAHAx4C,MAAAiL,OAAA7O,KAAA6O,GACAjL,KAAAw4C,WAEAx4C,MAIAi6G,cAAA,SAAAthH,EAAAC,EAAAC,EAAA0xB,GAKA,MAHAvqB,MAAAiL,OAAArW,IAAA+D,EAAAC,EAAAC,GACAmH,KAAAw4C,SAAAjuB,EAEAvqB,MAIAk6G,8BAAA,SAAAjvG,EAAAikD,GAKA,MAHAlvD,MAAAiL,OAAA7O,KAAA6O,GACAjL,KAAAw4C,UAAA0W,EAAAzmC,IAAAzoB,KAAAiL,QAEAjL,MAIAm6G,sBAAA,WAEA,GAAAnsF,GAAA,GAAAhf,GACA6gB,EAAA,GAAA7gB,EAEA,iBAAArd,EAAAC,EAAAR,GAEA,GAAA6Z,GAAA+iB,EAAAlL,WAAA1xB,EAAAQ,GAAAksG,MAAAjuE,EAAA/M,WAAAnxB,EAAAC,IAAAmD,WAMA,OAFAiL,MAAAk6G,8BAAAjvG,EAAAtZ,GAEAqO,SAMAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,OAIA5D,KAAA,SAAAylE,GAKA,MAHA7hE,MAAAiL,OAAA7O,KAAAylE,EAAA52D,QACAjL,KAAAw4C,SAAAqpB,EAAArpB,SAEAx4C,MAIAjL,UAAA,WAIA,GAAAqlH,GAAA,EAAAp6G,KAAAiL,OAAAhW,QAIA,OAHA+K,MAAAiL,OAAAuO,eAAA4gG,GACAp6G,KAAAw4C,UAAA4hE,EAEAp6G,MAIAqhC,OAAA,WAKA,MAHArhC,MAAAw4C,UAAA,GACAx4C,KAAAiL,OAAAo2B,SAEArhC,MAIAsN,gBAAA,SAAA4hD,GAEA,MAAAlvD,MAAAiL,OAAAwd,IAAAymC,GAAAlvD,KAAAw4C,UAIA6hE,iBAAA,SAAAn8F,GAEA,MAAAle,MAAAsN,gBAAA4Q,EAAAuL,QAAAvL,EAAA9J,QAIAkmG,aAAA,SAAAprD,EAAAm+C,GAEA,MAAArtG,MAAAu6G,WAAArrD,EAAAm+C,GAAAv4G,IAAAo6D,GAAA7tB,UAIAk5E,WAAA,SAAArrD,EAAAm+C,GAEA,GAAAmN,GAAAx6G,KAAAsN,gBAAA4hD,GAEA5mB,EAAA+kE,GAAA,GAAAr+F,EACA,OAAAs5B,GAAAlsC,KAAA4D,KAAAiL,QAAAuO,eAAAghG,IAIAC,cAAA,WAEA,GAAAzsF,GAAA,GAAAhf,EAEA,iBAAAwM,EAAA6xF,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,GAEAra,EAAA6mB,EAAA5lB,MAAAo4B,GAEA0sF,EAAA16G,KAAAiL,OAAAwd,IAAA9zB,EAEA,QAAA+lH,EAGA,WAAA16G,KAAAsN,gBAAAkO,EAAA9kB,OAEA4xC,EAAAlsC,KAAAof,EAAA9kB,OAKA+B,MAIA,IAAA0c,KAAAqG,EAAA9kB,MAAA+xB,IAAAzoB,KAAAiL,QAAAjL,KAAAw4C,UAAAkiE,CAEA,UAAAvlG,KAAA,EAEA1c,OAIA6vC,EAAAlsC,KAAAzH,GAAA6kB,eAAArE,GAAAra,IAAA0gB,EAAA9kB,WAMAikH,eAAA,SAAAn/F,GAIA,GAAAo/F,GAAA56G,KAAAsN,gBAAAkO,EAAA9kB,OACAmkH,EAAA76G,KAAAsN,gBAAAkO,EAAArc,IAEA,UAAAy7G,GAAAC,EAAA,KAAAA,GAAAD,EAAA,GAIAtgF,cAAA,SAAA04D,GAEA,MAAAA,GAAAsmB,gBAAAt5G,OAIAwlE,iBAAA,SAAAtnD,GAEA,MAAAA,GAAAo7F,gBAAAt5G,OAIA86G,cAAA,SAAAzN,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EACA,OAAAs5B,GAAAlsC,KAAA4D,KAAAiL,QAAAuO,gBAAAxZ,KAAAw4C,WAIA/Z,aAAA,WAEA,GAAAzQ,GAAA,GAAAhf,GACA+rG,EAAA,GAAA1wF,GAEA,iBAAAlB,EAAA6xF,GAEA,GAAAC,GAAAj7G,KAAA86G,cAAA9sF,GAAAyQ,aAAAtV,GAIAmV,EAAA08E,GAAAD,EAAA9gF,gBAAA9Q,GACAle,EAAAjL,KAAAiL,OAAAyoB,aAAA4K,GAAAvpC,WAKA,OAFAiL,MAAAw4C,UAAAyiE,EAAAxyF,IAAAxd,GAEAjL,SAMAuvB,UAAA,SAAA/e,GAIA,MAFAxQ,MAAAw4C,SAAAx4C,KAAAw4C,SAAAhoC,EAAAiY,IAAAzoB,KAAAiL,QAEAjL,MAIAm4D,OAAA,SAAA0J,GAEA,MAAAA,GAAA52D,OAAAktD,OAAAn4D,KAAAiL,SAAA42D,EAAArpB,WAAAx4C,KAAAw4C,WA2BAjqC,GAAAxO,WAEAwpB,YAAAhb,GAEA3Z,IAAA,SAAA6jD,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAC,GAAA/4C,KAAA+4C,MASA,OAPAA,GAAA,GAAA38C,KAAAq8C,GACAM,EAAA,GAAA38C,KAAAs8C,GACAK,EAAA,GAAA38C,KAAAu8C,GACAI,EAAA,GAAA38C,KAAAw8C,GACAG,EAAA,GAAA38C,KAAAy8C,GACAE,EAAA,GAAA38C,KAAA08C,GAEA94C,MAIAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,OAIA5D,KAAA,SAAAqR,GAIA,OAFAsrC,GAAA/4C,KAAA+4C,OAEAznD,EAAA,EAAsB,EAAAA,EAAOA,IAE7BynD,EAAAznD,GAAA8K,KAAAqR,EAAAsrC,OAAAznD,GAIA,OAAA0O,OAIA6O,cAAA,SAAA1d,GAEA,GAAA4nD,GAAA/4C,KAAA+4C,OACAinD,EAAA7uG,EAAAi5B,SACA8wF,EAAAlb,EAAA,GAAAmb,EAAAnb,EAAA,GAAAob,EAAApb,EAAA,GAAAqb,EAAArb,EAAA,GACAsb,EAAAtb,EAAA,GAAAub,EAAAvb,EAAA,GAAAwb,EAAAxb,EAAA,GAAAyb,EAAAzb,EAAA,GACA0b,EAAA1b,EAAA,GAAA2b,EAAA3b,EAAA,GAAA4b,EAAA5b,EAAA,IAAA6b,EAAA7b,EAAA,IACA8b,EAAA9b,EAAA,IAAA+b,EAAA/b,EAAA,IAAAgc,EAAAhc,EAAA,IAAAic,EAAAjc,EAAA,GASA,OAPAjnD,GAAA,GAAAkhE,cAAAoB,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,GAAA/mH,YACAgkD,EAAA,GAAAkhE,cAAAoB,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,GAAA/mH,YACAgkD,EAAA,GAAAkhE,cAAAoB,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,GAAAhnH;AACAgkD,EAAA,GAAAkhE,cAAAoB,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,GAAAhnH,YACAgkD,EAAA,GAAAkhE,cAAAoB,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,GAAAjnH,YACAgkD,EAAA,GAAAkhE,cAAAoB,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,GAAAjnH,YAEAiL,MAIA8O,iBAAA,WAEA,GAAAoP,GAAA,GAAAo6B,GAEA,iBAAAhlD,GAEA,GAAA4Z,GAAA5Z,EAAA4Z,QAQA,OANA,QAAAA,EAAAm0C,gBACAn0C,EAAAk4D,wBAEAlnD,EAAA9hB,KAAA8Q,EAAAm0C,gBACA5iB,aAAAnrC,EAAAoB,aAEAsL,KAAAwlE,iBAAAtnD,OAMAyhB,iBAAA,WAEA,GAAAzhB,GAAA,GAAAo6B,GAEA,iBAAArc,GAMA,MAJA/d,GAAAuL,OAAA70B,IAAA,OACAspB,EAAA9J,OAAA,kBACA8J,EAAAugB,aAAAxC,EAAAvnC,aAEAsL,KAAAwlE,iBAAAtnD,OAMAsnD,iBAAA,SAAAtnD,GAMA,OAJA66B,GAAA/4C,KAAA+4C,OACAtvB,EAAAvL,EAAAuL,OACAyyF,GAAAh+F,EAAA9J,OAEA9iB,EAAA,EAAsB,EAAAA,EAAOA,IAAA,CAE7B,GAAA2b,GAAA8rC,EAAAznD,GAAAgc,gBAAAmc,EAEA,IAAAyyF,EAAAjvG,EAEA,SAMA,UAIAqtB,cAAA,WAEA,GAAAoe,GAAA,GAAA1pC,GACA2pC,EAAA,GAAA3pC,EAEA,iBAAAgkF,GAIA,OAFAj6C,GAAA/4C,KAAA+4C,OAEAznD,EAAA,EAAuB,EAAAA,EAAQA,IAAA,CAE/B,GAAAuwE,GAAA9oB,EAAAznD,EAEAonD,GAAA//C,EAAAkpE,EAAA52D,OAAAtS,EAAA,EAAAq6F,EAAAl9F,IAAA6C,EAAAq6F,EAAAtqF,IAAA/P,EACAggD,EAAAhgD,EAAAkpE,EAAA52D,OAAAtS,EAAA,EAAAq6F,EAAAtqF,IAAA/P,EAAAq6F,EAAAl9F,IAAA6C,EACA+/C,EAAA9/C,EAAAipE,EAAA52D,OAAArS,EAAA,EAAAo6F,EAAAl9F,IAAA8C,EAAAo6F,EAAAtqF,IAAA9P,EACA+/C,EAAA//C,EAAAipE,EAAA52D,OAAArS,EAAA,EAAAo6F,EAAAtqF,IAAA9P,EAAAo6F,EAAAl9F,IAAA8C,EACA8/C,EAAA7/C,EAAAgpE,EAAA52D,OAAApS,EAAA,EAAAm6F,EAAAl9F,IAAA+C,EAAAm6F,EAAAtqF,IAAA7P,EACA8/C,EAAA9/C,EAAAgpE,EAAA52D,OAAApS,EAAA,EAAAm6F,EAAAtqF,IAAA7P,EAAAm6F,EAAAl9F,IAAA+C,CAEA,IAAAsjH,GAAAt6C,EAAAv0D,gBAAAorC,GACA0jE,EAAAv6C,EAAAv0D,gBAAAqrC,EAIA,MAAAwjE,GAAA,EAAAC,EAEA,SAMA,aAOA9oE,cAAA,SAAA4b,GAIA,OAFAnW,GAAA/4C,KAAA+4C,OAEAznD,EAAA,EAAsB,EAAAA,EAAOA,IAE7B,GAAAynD,EAAAznD,GAAAgc,gBAAA4hD,GAAA,EAEA,QAMA,YA6cAzkC,GAAA1qB,WAEAwpB,YAAAkB,GAEA71B,IAAA,SAAAL,EAAAI,GAKA,MAHAqL,MAAAzL,OAAA6H,KAAA7H,GACAyL,KAAArL,UAAAyH,KAAAzH,GAEAqL,MAIAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,OAIA5D,KAAA,SAAA9H,GAKA,MAHA0L,MAAAzL,OAAA6H,KAAA9H,EAAAC,QACAyL,KAAArL,UAAAyH,KAAA9H,EAAAK,WAEAqL,MAIAq8G,GAAA,SAAAlnG,EAAAk4F,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EAEA,OAAAs5B,GAAAlsC,KAAA4D,KAAArL,WAAA6kB,eAAArE,GAAAra,IAAAkF,KAAAzL,SAIA+zB,OAAA,SAAAM,GAIA,MAFA5oB,MAAArL,UAAAyH,KAAAwsB,GAAA9zB,IAAAkL,KAAAzL,QAAAQ,YAEAiL,MAIAs8G,OAAA,WAEA,GAAAtuF,GAAA,GAAAhf,EAEA,iBAAAmG,GAIA,MAFAnV,MAAAzL,OAAA6H,KAAA4D,KAAAq8G,GAAAlnG,EAAA6Y,IAEAhuB,SAMAu8G,oBAAA,SAAArtD,EAAAm+C,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EACAs5B,GAAAxlB,WAAAosC,EAAAlvD,KAAAzL,OACA,IAAAioH,GAAAl0E,EAAA7f,IAAAzoB,KAAArL,UAEA,UAAA6nH,EAEAl0E,EAAAlsC,KAAA4D,KAAAzL,QAIA+zC,EAAAlsC,KAAA4D,KAAArL,WAAA6kB,eAAAgjG,GAAA1hH,IAAAkF,KAAAzL,SAIA+Y,gBAAA,SAAA4hD,GAEA,MAAAr5D,MAAAiD,KAAAkH,KAAAy8G,kBAAAvtD,KAIAutD,kBAAA,WAEA,GAAAzuF,GAAA,GAAAhf,EAEA,iBAAAkgD,GAEA,GAAAstD,GAAAxuF,EAAAlL,WAAAosC,EAAAlvD,KAAAzL,QAAAk0B,IAAAzoB,KAAArL,UAIA,UAAA6nH,EAEAx8G,KAAAzL,OAAAg0B,kBAAA2mC,IAIAlhC,EAAA5xB,KAAA4D,KAAArL,WAAA6kB,eAAAgjG,GAAA1hH,IAAAkF,KAAAzL,QAEAy5B,EAAAzF,kBAAA2mC,QAMAwtD,oBAAA,WAEA,GAAAC,GAAA,GAAA3tG,GACA4tG,EAAA,GAAA5tG,GACA9W,EAAA,GAAA8W,EAEA,iBAAAomB,EAAApH,EAAA6uF,EAAAC,GASAH,EAAAvgH,KAAAg5B,GAAAt6B,IAAAkzB,GAAAxU,eAAA,IACAojG,EAAAxgH,KAAA4xB,GAAAl5B,IAAAsgC,GAAArgC,YACAmD,EAAAkE,KAAA4D,KAAAzL,QAAAO,IAAA6nH,EAEA,IAMAI,GAAA1gF,EAAA2gF,EAAAC,EANAC,EAAA,GAAA9nF,EAAA5nB,WAAAwgB,GACAmvF,GAAAn9G,KAAArL,UAAA8zB,IAAAm0F,GACAQ,EAAAllH,EAAAuwB,IAAAzoB,KAAArL,WACA2hG,GAAAp+F,EAAAuwB,IAAAm0F,GACAxrH,EAAA8G,EAAAkgG,WACA3iE,EAAA5/B,KAAA6C,IAAA,EAAAykH,IAGA,IAAA1nF,EAAA,EAQA,GAJAsnF,EAAAI,EAAA7mB,EAAA8mB,EACA/gF,EAAA8gF,EAAAC,EAAA9mB,EACA2mB,EAAAC,EAAAznF,EAEAsnF,GAAA,EAEA,GAAA1gF,IAAA4gF,EAEA,GAAAA,GAAA5gF,EAAA,CAKA,GAAAghF,GAAA,EAAA5nF,CACAsnF,IAAAM,EACAhhF,GAAAghF,EACAL,EAAAD,KAAAI,EAAA9gF,EAAA,EAAA+gF,GAAA/gF,GAAA8gF,EAAAJ,EAAA1gF,EAAA,EAAAi6D,GAAAllG,MAMAirC,GAAA6gF,EACAH,EAAAlnH,KAAA6S,IAAA,IAAAy0G,EAAA9gF,EAAA+gF,IACAJ,GAAAD,IAAA1gF,KAAA,EAAAi6D,GAAAllG,MAQAirC,IAAA6gF,EACAH,EAAAlnH,KAAA6S,IAAA,IAAAy0G,EAAA9gF,EAAA+gF,IACAJ,GAAAD,IAAA1gF,KAAA,EAAAi6D,GAAAllG,OAMA6rH,GAAA5gF,GAIA0gF,EAAAlnH,KAAA6S,IAAA,KAAAy0G,EAAAD,EAAAE,IACA/gF,EAAA0gF,EAAA,GAAAG,EAAArnH,KAAAC,IAAAD,KAAA6S,KAAAw0G,GAAA5mB,GAAA4mB,GACAF,GAAAD,IAAA1gF,KAAA,EAAAi6D,GAAAllG,GAEU6rH,GAAA5gF,GAIV0gF,EAAA,EACA1gF,EAAAxmC,KAAAC,IAAAD,KAAA6S,KAAAw0G,GAAA5mB,GAAA4mB,GACAF,EAAA3gF,KAAA,EAAAi6D,GAAAllG,IAMA2rH,EAAAlnH,KAAA6S,IAAA,IAAAy0G,EAAAD,EAAAE,IACA/gF,EAAA0gF,EAAA,EAAAG,EAAArnH,KAAAC,IAAAD,KAAA6S,KAAAw0G,GAAA5mB,GAAA4mB,GACAF,GAAAD,IAAA1gF,KAAA,EAAAi6D,GAAAllG,OAUAirC,GAAA8gF,EAAA,GAAAD,IACAH,EAAAlnH,KAAA6S,IAAA,IAAAy0G,EAAA9gF,EAAA+gF,IACAJ,GAAAD,IAAA1gF,KAAA,EAAAi6D,GAAAllG,CAgBA,OAZAyrH,IAEAA,EAAAzgH,KAAA4D,KAAArL,WAAA6kB,eAAAujG,GAAAjiH,IAAAkF,KAAAzL,QAIAuoH,GAEAA,EAAA1gH,KAAAwgH,GAAApjG,eAAA6iB,GAAAvhC,IAAA6hH,GAIAK,MAMAM,gBAAA,WAEA,GAAAtvF,GAAA,GAAAhf,EAEA,iBAAAkP,EAAAmvF,GAEAr/E,EAAAlL,WAAA5E,EAAAuL,OAAAzpB,KAAAzL,OACA,IAAAgpH,GAAAvvF,EAAAvF,IAAAzoB,KAAArL,WACAynH,EAAApuF,EAAAvF,IAAAuF,GAAAuvF,IACAC,EAAAt/F,EAAA9J,OAAA8J,EAAA9J,MAEA,IAAAgoG,EAAAoB,EAAA,WAEA,IAAAC,GAAA5nH,KAAAiD,KAAA0kH,EAAApB,GAGAsB,EAAAH,EAAAE,EAGAE,EAAAJ,EAAAE,CAGA,UAAAC,GAAA,EAAAC,EAAA,KAKA,EAAAD,EAAA19G,KAAAq8G,GAAAsB,EAAAtQ,GAGArtG,KAAAq8G,GAAAqB,EAAArQ,OAMA7nC,iBAAA,SAAAtnD,GAEA,MAAAle,MAAAsN,gBAAA4Q,EAAAuL,SAAAvL,EAAA9J,QAIAwpG,gBAAA,SAAA/7C,GAEA,GAAA64C,GAAA74C,EAAA52D,OAAAwd,IAAAzoB,KAAArL,UAEA,QAAA+lH,EAGA,WAAA74C,EAAAv0D,gBAAAtN,KAAAzL,QAEA,EAMA,IAIA,IAAA4gB,KAAAnV,KAAAzL,OAAAk0B,IAAAo5C,EAAA52D,QAAA42D,EAAArpB,UAAAkiE,CAIA,OAAAvlG,IAAA,EAAAA,EAAA,MAIA0oG,eAAA,SAAAh8C,EAAAwrC,GAEA,GAAAl4F,GAAAnV,KAAA49G,gBAAA/7C,EAEA,eAAA1sD,EAEA,KAIAnV,KAAAq8G,GAAAlnG,EAAAk4F,IAMAiM,gBAAA,SAAAz3C,GAIA,GAAAi8C,GAAAj8C,EAAAv0D,gBAAAtN,KAAAzL,OAEA,QAAAupH,EAEA,QAIA,IAAApD,GAAA74C,EAAA52D,OAAAwd,IAAAzoB,KAAArL,UAEA,UAAA+lH,EAAAoD,GAEA,GAMA,GAIAC,aAAA,SAAA/qB,EAAAqa,GAEA,GAAA2Q,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAEAC,EAAA,EAAAt+G,KAAArL,UAAAgE,EACA4lH,EAAA,EAAAv+G,KAAArL,UAAAiE,EACA4lH,EAAA,EAAAx+G,KAAArL,UAAAkE,EAEAtE,EAAAyL,KAAAzL,MA0BA,OAxBA+pH,IAAA,GAEAN,GAAAhrB,EAAAl9F,IAAA6C,EAAApE,EAAAoE,GAAA2lH,EACAL,GAAAjrB,EAAAtqF,IAAA/P,EAAApE,EAAAoE,GAAA2lH,IAIAN,GAAAhrB,EAAAtqF,IAAA/P,EAAApE,EAAAoE,GAAA2lH,EACAL,GAAAjrB,EAAAl9F,IAAA6C,EAAApE,EAAAoE,GAAA2lH,GAIAC,GAAA,GAEAL,GAAAlrB,EAAAl9F,IAAA8C,EAAArE,EAAAqE,GAAA2lH,EACAJ,GAAAnrB,EAAAtqF,IAAA9P,EAAArE,EAAAqE,GAAA2lH,IAIAL,GAAAlrB,EAAAtqF,IAAA9P,EAAArE,EAAAqE,GAAA2lH,EACAJ,GAAAnrB,EAAAl9F,IAAA8C,EAAArE,EAAAqE,GAAA2lH,GAIAP,EAAAG,GAAAD,EAAAD,EAAA,OAKAC,EAAAF,cAAAE,IAEAD,EAAAE,GAAAF,WAAAE,GAEAK,GAAA,GAEAJ,GAAAprB,EAAAl9F,IAAA+C,EAAAtE,EAAAsE,GAAA2lH,EACAH,GAAArrB,EAAAtqF,IAAA7P,EAAAtE,EAAAsE,GAAA2lH,IAIAJ,GAAAprB,EAAAtqF,IAAA7P,EAAAtE,EAAAsE,GAAA2lH,EACAH,GAAArrB,EAAAl9F,IAAA+C,EAAAtE,EAAAsE,GAAA2lH,GAIAR,EAAAK,GAAAD,EAAAH,EAAA,OAEAG,EAAAJ,cAAAI,IAEAH,EAAAI,GAAAJ,WAAAI,GAIA,EAAAJ,EAAA,KAEAj+G,KAAAq8G,GAAA2B,GAAA,EAAAA,EAAAC,EAAA5Q,MAIA/yE,cAAA,WAEA,GAAA1R,GAAA,GAAA5Z,EAEA,iBAAAgkF,GAEA,cAAAhzF,KAAA+9G,aAAA/qB,EAAApqE,OAMA61F,kBAAA,WAGA,GAAAvmH,GAAA,GAAA8W,GACA0vG,EAAA,GAAA1vG,GACA2vG,EAAA,GAAA3vG,GACA/D,EAAA,GAAA+D,EAEA,iBAAArd,EAAAC,EAAAR,EAAAwtH,EAAAvR,GAIAqR,EAAA57F,WAAAlxB,EAAAD,GACAgtH,EAAA77F,WAAA1xB,EAAAO,GACAsZ,EAAA8wE,aAAA2iC,EAAAC,EAOA,IACA5+B,GADA8+B,EAAA7+G,KAAArL,UAAA8zB,IAAAxd,EAGA,IAAA4zG,EAAA,GAEA,GAAAD,EAAA,WACA7+B,GAAA,MAEQ,QAAA8+B,GAOR,WALA9+B,GAAA,GACA8+B,KAQA3mH,EAAA4qB,WAAA9iB,KAAAzL,OAAA5C,EACA,IAAAmtH,GAAA/+B,EAAA//E,KAAArL,UAAA8zB,IAAAk2F,EAAA5iC,aAAA7jF,EAAAymH,GAGA,MAAAG,EAEA,WAIA,IAAAC,GAAAh/B,EAAA//E,KAAArL,UAAA8zB,IAAAi2F,EAAA5gB,MAAA5lG,GAGA,MAAA6mH,EAEA,WAKA,IAAAD,EAAAC,EAAAF,EAEA,WAKA,IAAAG,IAAAj/B,EAAA7nF,EAAAuwB,IAAAxd,EAGA,UAAA+zG,EAEA,KAKAh/G,KAAAq8G,GAAA2C,EAAAH,EAAAxR,OAMA5uE,aAAA,SAAAs7E,GAOA,MALA/5G,MAAArL,UAAAmG,IAAAkF,KAAAzL,QAAAkqC,aAAAs7E,GACA/5G,KAAAzL,OAAAkqC,aAAAs7E,GACA/5G,KAAArL,UAAAG,IAAAkL,KAAAzL,QACAyL,KAAArL,UAAAI,YAEAiL,MAIAm4D,OAAA,SAAA7jE,GAEA,MAAAA,GAAAC,OAAA4jE,OAAAn4D,KAAAzL,SAAAD,EAAAK,UAAAwjE,OAAAn4D,KAAArL,aAqBA0rB,GAAA4+F,gBAAA,qCAEA5+F,GAAA69B,aAAA,MAEA79B,GAAAtgB,WAEAwpB,YAAAlJ,GAEAo6E,SAAA,EAEAtP,GAAAxyF,KAEA,MAAAqH,MAAAoqC,IAIA+gD,GAAAxyF,GAAAkhB,GAEA7Z,KAAAoqC,GAAAvwB,EACA7Z,KAAAw6F,oBAIArP,GAAAvyF,KAEA,MAAAoH,MAAAqqC,IAIA8gD,GAAAvyF,GAAAihB,GAEA7Z,KAAAqqC,GAAAxwB,EACA7Z,KAAAw6F,oBAIArP,GAAAtyF,KAEA,MAAAmH,MAAAsqC,IAIA6gD,GAAAtyF,GAAAghB,GAEA7Z,KAAAsqC,GAAAzwB,EACA7Z,KAAAw6F,oBAIArP,GAAA3gE,SAEA,MAAAxqB,MAAAi+C,QAIAktC,GAAA3gE,OAAA3Q,GAEA7Z,KAAAi+C,OAAApkC,EACA7Z,KAAAw6F,oBAIA5lG,IAAA,SAAA+D,EAAAC,EAAAC,EAAA2xB,GASA,MAPAxqB,MAAAoqC,GAAAzxC,EACAqH,KAAAqqC,GAAAzxC,EACAoH,KAAAsqC,GAAAzxC,EACAmH,KAAAi+C,OAAAzzB,GAAAxqB,KAAAi+C,OAEAj+C,KAAAw6F,mBAEAx6F,MAIAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,YAAAvpB,KAAAoqC,GAAApqC,KAAAqqC,GAAArqC,KAAAsqC,GAAAtqC,KAAAi+C,SAIA7hD,KAAA,SAAAgkB,GASA,MAPApgB,MAAAoqC,GAAAhqB,EAAAgqB,GACApqC,KAAAqqC,GAAAjqB,EAAAiqB,GACArqC,KAAAsqC,GAAAlqB,EAAAkqB,GACAtqC,KAAAi+C,OAAA79B,EAAA69B,OAEAj+C,KAAAw6F,mBAEAx6F,MAIAg7F,sBAAA,SAAA7pG,EAAAq5B,EAAAx0B,GAEA,GAAAmoF,GAAArtF,EAAA+E,KAAAsoF,MAIAqb,EAAAroG,EAAAi5B,SACAqvE,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,GACAO,EAAAP,EAAA,GAAAQ,EAAAR,EAAA,GAAAS,EAAAT,EAAA,GA8GA,OA5GAhvE,MAAAxqB,KAAAi+C,OAEA,QAAAzzB,GAEAxqB,KAAAqqC,GAAAx0C,KAAAqpH,KAAA/gC,EAAAwb,EAAA,OAEA9jG,KAAA6C,IAAAihG,GAAA,QAEA35F,KAAAoqC,GAAAv0C,KAAA6jF,OAAAogB,EAAAG,GACAj6F,KAAAsqC,GAAAz0C,KAAA6jF,OAAAggB,EAAAD,KAIAz5F,KAAAoqC,GAAAv0C,KAAA6jF,MAAAsgB,EAAAH,GACA75F,KAAAsqC,GAAA,IAIO,QAAA9f,GAEPxqB,KAAAoqC,GAAAv0C,KAAAqpH,MAAA/gC,EAAA2b,EAAA,OAEAjkG,KAAA6C,IAAAohG,GAAA,QAEA95F,KAAAqqC,GAAAx0C,KAAA6jF,MAAAigB,EAAAM,GACAj6F,KAAAsqC,GAAAz0C,KAAA6jF,MAAAkgB,EAAAC,KAIA75F,KAAAqqC,GAAAx0C,KAAA6jF,OAAAqgB,EAAAN,GACAz5F,KAAAsqC,GAAA,IAIO,QAAA9f,GAEPxqB,KAAAoqC,GAAAv0C,KAAAqpH,KAAA/gC,EAAA6b,EAAA,OAEAnkG,KAAA6C,IAAAshG,GAAA,QAEAh6F,KAAAqqC,GAAAx0C,KAAA6jF,OAAAqgB,EAAAE,GACAj6F,KAAAsqC,GAAAz0C,KAAA6jF,OAAAggB,EAAAG,KAIA75F,KAAAqqC,GAAA,EACArqC,KAAAsqC,GAAAz0C,KAAA6jF,MAAAkgB,EAAAH,KAIO,QAAAjvE,GAEPxqB,KAAAqqC,GAAAx0C,KAAAqpH,MAAA/gC,EAAA4b,EAAA,OAEAlkG,KAAA6C,IAAAqhG,GAAA,QAEA/5F,KAAAoqC,GAAAv0C,KAAA6jF,MAAAsgB,EAAAC,GACAj6F,KAAAsqC,GAAAz0C,KAAA6jF,MAAAkgB,EAAAH,KAIAz5F,KAAAoqC,GAAA,EACApqC,KAAAsqC,GAAAz0C,KAAA6jF,OAAAggB,EAAAG,KAIO,QAAArvE,GAEPxqB,KAAAsqC,GAAAz0C,KAAAqpH,KAAA/gC,EAAAyb,EAAA,OAEA/jG,KAAA6C,IAAAkhG,GAAA,QAEA55F,KAAAoqC,GAAAv0C,KAAA6jF,OAAAogB,EAAAD,GACA75F,KAAAqqC,GAAAx0C,KAAA6jF,OAAAqgB,EAAAN,KAIAz5F,KAAAoqC,GAAA,EACApqC,KAAAqqC,GAAAx0C,KAAA6jF,MAAAigB,EAAAM,KAIO,QAAAzvE,IAEPxqB,KAAAsqC,GAAAz0C,KAAAqpH,MAAA/gC,EAAAub,EAAA,OAEA7jG,KAAA6C,IAAAghG,GAAA,QAEA15F,KAAAoqC,GAAAv0C,KAAA6jF,MAAAsgB,EAAAH,GACA75F,KAAAqqC,GAAAx0C,KAAA6jF,MAAAigB,EAAAF,KAIAz5F,KAAAoqC,GAAAv0C,KAAA6jF,OAAAogB,EAAAG,GACAj6F,KAAAqqC,GAAA,IAUArqC,KAAAi+C,OAAAzzB,EAEAx0B,KAAA,GAAAgK,KAAAw6F,mBAEAx6F,MAIAs+C,kBAAA,WAEA,GAAAn1B,EAEA,iBAAA+xD,EAAA1wD,EAAAx0B,GAMA,MAJAyC,UAAA0wB,MAAA,GAAA3a,IAEA2a,EAAA83E,2BAAA/lB,GAEAl7E,KAAAg7F,sBAAA7xE,EAAAqB,EAAAx0B,OAMAkyB,eAAA,SAAAU,EAAA4B,GAEA,MAAAxqB,MAAApL,IAAAg0B,EAAAjwB,EAAAiwB,EAAAhwB,EAAAgwB,EAAA/vB,EAAA2xB,GAAAxqB,KAAAi+C,SAIAt+B,QAAA,WAIA,GAAAu7D,GAAA,GAAA3qE,EAEA,iBAAA4uG,GAIA,MAFAjkC,GAAAt6D,aAAA5gB,MAEAA,KAAAs+C,kBAAA48B,EAAAikC,OAMAhnD,OAAA,SAAA/3C,GAEA,MAAAA,GAAAgqB,KAAApqC,KAAAoqC,IAAAhqB,EAAAiqB,KAAArqC,KAAAqqC,IAAAjqB,EAAAkqB,KAAAtqC,KAAAsqC,IAAAlqB,EAAA69B,SAAAj+C,KAAAi+C,QAIAhmC,UAAA,SAAAkoB,GASA,MAPAngC,MAAAoqC,GAAAjK,EAAA,GACAngC,KAAAqqC,GAAAlK,EAAA,GACAngC,KAAAsqC,GAAAnK,EAAA,GACA1nC,SAAA0nC,EAAA,KAAAngC,KAAAi+C,OAAA9d,EAAA,IAEAngC,KAAAw6F,mBAEAx6F,MAIAkrC,QAAA,SAAA/K,EAAA3vB,GAUA,MARA/X,UAAA0nC,UACA1nC,SAAA+X,MAAA,GAEA2vB,EAAA3vB,GAAAxQ,KAAAoqC,GACAjK,EAAA3vB,EAAA,GAAAxQ,KAAAqqC,GACAlK,EAAA3vB,EAAA,GAAAxQ,KAAAsqC,GACAnK,EAAA3vB,EAAA,GAAAxQ,KAAAi+C,OAEA9d,GAIAi/E,UAAA,SAAAC,GAEA,MAAAA,GAEAA,EAAAzqH,IAAAoL,KAAAoqC,GAAApqC,KAAAqqC,GAAArqC,KAAAsqC,IAIA,GAAAt7B,GAAAhP,KAAAoqC,GAAApqC,KAAAqqC,GAAArqC,KAAAsqC,KAMAmU,SAAA,SAAAv/C,GAIA,MAFAc,MAAAw6F,iBAAAt7F,EAEAc,MAIAw6F,iBAAA,cAcAr8C,GAAAp+C,WAEAwpB,YAAA40B,GAEAvpD,IAAA,SAAA0qH,GAEAt/G,KAAAk7C,KAAA,GAAAokE,GAIAnsG,OAAA,SAAAmsG,GAEAt/G,KAAAk7C,MAAA,GAAAokE,GAIAC,OAAA,SAAAD,GAEAt/G,KAAAk7C,MAAA,GAAAokE,GAIAjsG,QAAA,SAAAisG,GAEAt/G,KAAAk7C,QAAA,GAAAokE,IAIAx9G,KAAA,SAAAm5C,GAEA,YAAAj7C,KAAAk7C,KAAAD,EAAAC,QA8FAzqC,GAAA+tC,UAAA,GAAAxvC,GAAA,OACAyB,GAAAkuC,yBAAA,EAEAz+C,OAAA+J,OAAAwG,GAAA1Q,UAAAupB,EAAAvpB,WAEAy/G,YAAA,EAEAlrG,YAAA,SAAA6U,GAEAnpB,KAAAmpB,OAAAxa,iBAAAwa,EAAAnpB,KAAAmpB,QAEAnpB,KAAAmpB,OAAAmd,UAAAtmC,KAAAlE,SAAAkE,KAAAwgB,WAAAxgB,KAAAoI,QAIAq3G,yBAAA,SAAA3kB,EAAA9qF,GAIAhQ,KAAAwgB,WAAAM,iBAAAg6E,EAAA9qF,IAIA0vG,qBAAA,SAAAt/F,GAEApgB,KAAAwgB,WAAAI,aAAAR,GAAA,IAIAu/F,sBAAA,SAAAxuH,GAIA6O,KAAAwgB,WAAAw6E,sBAAA7pG,IAIAyuH,0BAAA,SAAA1kC,GAIAl7E,KAAAwgB,WAAApkB,KAAA8+E,IAIAjrE,aAAA,WAKA,GAAAsQ,GAAA,GAAAhQ,EAEA,iBAAAuqF,EAAA9qF,GAMA,MAJAuQ,GAAAO,iBAAAg6E,EAAA9qF,GAEAhQ,KAAAwgB,WAAAK,SAAAN,GAEAvgB,SAMA+P,QAAA,WAEA,GAAAie,GAAA,GAAAhf,GAAA,MAEA,iBAAAgB,GAEA,MAAAhQ,MAAAiQ,aAAA+d,EAAAhe,OAMAE,QAAA,WAEA,GAAA8d,GAAA,GAAAhf,GAAA,MAEA,iBAAAgB,GAEA,MAAAhQ,MAAAiQ,aAAA+d,EAAAhe,OAMAG,QAAA,WAEA,GAAA6d,GAAA,GAAAhf,GAAA,MAEA,iBAAAgB,GAEA,MAAAhQ,MAAAiQ,aAAA+d,EAAAhe,OAMA6vG,gBAAA,WAKA,GAAA7xF,GAAA,GAAAhf,EAEA,iBAAA8rF,EAAA7tF,GAMA,MAJA+gB,GAAA5xB,KAAA0+F,GAAA7yE,gBAAAjoB,KAAAwgB,YAEAxgB,KAAAlE,SAAAhB,IAAAkzB,EAAAxU,eAAAvM,IAEAjN,SAMAwP,WAAA,WAEA,GAAAwe,GAAA,GAAAhf,GAAA,MAEA,iBAAA/B,GAEA,MAAAjN,MAAA6/G,gBAAA7xF,EAAA/gB,OAMAyC,WAAA,WAEA,GAAAse,GAAA,GAAAhf,GAAA,MAEA,iBAAA/B,GAEA,MAAAjN,MAAA6/G,gBAAA7xF,EAAA/gB,OAMA6C,WAAA,WAEA,GAAAke,GAAA,GAAAhf,GAAA,MAEA,iBAAA/B,GAEA,MAAAjN,MAAA6/G,gBAAA7xF,EAAA/gB,OAMA6yG,aAAA,SAAA9hF,GAEA,MAAAA,GAAAS,aAAAz+B,KAAAtL,cAIA0Y,aAAA,WAEA,GAAA2tG,GAAA,GAAAvsG,EAEA,iBAAAwvB,GAEA,MAAAA,GAAAS,aAAAs8E,EAAArsG,WAAA1O,KAAAtL,kBAMA4zB,OAAA,WAIA,GAAAyyF,GAAA,GAAAvsG,EAEA,iBAAAwvB,GAEA+8E,EAAAzyF,OAAA0V,EAAAh+B,KAAAlE,SAAAkE,KAAA4nB,IAEA5nB,KAAAwgB,WAAAw6E,sBAAA+f,OAMAjgH,IAAA,SAAAxH,GAEA,GAAAgU,UAAArS,OAAA,GAEA,OAAA3D,GAAA,EAAuBA,EAAAgW,UAAArS,OAAsB3D,IAE7C0O,KAAAlF,IAAAwM,UAAAhW,GAIA,OAAA0O,MAIA,MAAA1M,KAAA0M,KAGAA,MAIA1M,KAAAksH,aAEA,OAAAlsH,EAAAY,QAEAZ,EAAAY,OAAAqR,OAAAjS,GAIAA,EAAAY,OAAA8L,KACA1M,EAAA0iB,eAA8B7Q,KAAA,UAE9BnF,KAAAnM,SAAAsB,KAAA7B,IAQA0M,OAIAuF,OAAA,SAAAjS,GAEA,GAAAgU,UAAArS,OAAA,EAEA,OAAA3D,GAAA,EAAuBA,EAAAgW,UAAArS,OAAsB3D,IAE7C0O,KAAAuF,OAAA+B,UAAAhW,GAMA,IAAAgV,GAAAtG,KAAAnM,SAAAL,QAAAF,EAEA,MAAAgT,IAEAhT,EAAAY,OAAA,KAEAZ,EAAA0iB,eAA8B7Q,KAAA,YAE9BnF,KAAAnM,SAAAJ,OAAA6S,EAAA,KAMAy5G,cAAA,SAAA/uH,GAEA,MAAAgP,MAAAggH,oBAAA,KAAAhvH,IAIA2mB,gBAAA,SAAApd,GAEA,MAAAyF,MAAAggH,oBAAA,OAAAzlH,IAIAylH,oBAAA,SAAAzlH,EAAAsf,GAEA,GAAA7Z,KAAAzF,KAAAsf,EAAA,MAAA7Z,KAEA,QAAA1O,GAAA,EAAAi7B,EAAAvsB,KAAAnM,SAAAoB,OAAgDs3B,EAAAj7B,EAAOA,IAAA,CAEvD,GAAA2uH,GAAAjgH,KAAAnM,SAAAvC,GACAgC,EAAA2sH,EAAAD,oBAAAzlH,EAAAsf,EAEA,IAAAphB,SAAAnF,EAEA,MAAAA,GAMA,MAAAmF,SAIAynH,iBAAA,SAAA7S,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EAIA,OAFAhP,MAAA7J,mBAAA,GAEAmyC,EAAA9zC,sBAAAwL,KAAAtL,cAIAyrH,mBAAA,WAEA,GAAArkH,GAAA,GAAAkT,GACA5G,EAAA,GAAA4G,EAEA,iBAAAq+F,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAA98F,EAMA,OAJAvQ,MAAA7J,mBAAA,GAEA6J,KAAAtL,YAAA4xC,UAAAxqC,EAAAwsC,EAAAlgC,GAEAkgC,MAMA83E,iBAAA,WAEA,GAAA5/F,GAAA,GAAAjQ,EAEA,iBAAA88F,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAhtF,GAIA,OAFArgB,MAAAmgH,mBAAA3/F,GAEA8nB,EAAAgW,kBAAA99B,EAAAxgB,KAAAjE,SAAAyuB,OAAA,OAMA61F,cAAA,WAEA,GAAAvkH,GAAA,GAAAkT,GACAwR,EAAA,GAAAjQ,EAEA,iBAAA88F,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EAMA,OAJAhP,MAAA7J,mBAAA,GAEA6J,KAAAtL,YAAA4xC,UAAAxqC,EAAA0kB,EAAA8nB,GAEAA,MAMAg4E,kBAAA,WAEA,GAAA9/F,GAAA,GAAAjQ,EAEA,iBAAA88F,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EAIA,OAFAhP,MAAAmgH,mBAAA3/F,GAEA8nB,EAAA1zC,IAAA,OAAAqzB,gBAAAzH,OAMAzsB,QAAA,aAEAqlH,SAAA,SAAAl6G,GAEAA,EAAAc,KAIA,QAFAnM,GAAAmM,KAAAnM,SAEAvC,EAAA,EAAAi7B,EAAA14B,EAAAoB,OAA2Cs3B,EAAAj7B,EAAOA,IAElDuC,EAAAvC,GAAA8nH,SAAAl6G,IAMAqgC,gBAAA,SAAArgC,GAEA,GAAAc,KAAAsO,WAAA,GAEApP,EAAAc,KAIA,QAFAnM,GAAAmM,KAAAnM,SAEAvC,EAAA,EAAAi7B,EAAA14B,EAAAoB,OAA2Cs3B,EAAAj7B,EAAOA,IAElDuC,EAAAvC,GAAAiuC,gBAAArgC,KAMAqhH,kBAAA,SAAArhH,GAEA,GAAAhL,GAAA8L,KAAA9L,MAEA,QAAAA,IAEAgL,EAAAhL,GAEAA,EAAAqsH,kBAAArhH,KAMA8iF,aAAA,WAEAhiF,KAAAmpB,OAAA07E,QAAA7kG,KAAAlE,SAAAkE,KAAAwgB,WAAAxgB,KAAAoI,OAEApI,KAAA4+C,wBAAA,GAIAzoD,kBAAA,SAAAqqH,GAEAxgH,KAAA0+C,oBAAA,GAAA1+C,KAAAgiF,gBAEAhiF,KAAA4+C,0BAAA,GAAA4hE,KAAA,KAEA,OAAAxgH,KAAA9L,OAEA8L,KAAAtL,YAAA0H,KAAA4D,KAAAmpB,QAIAnpB,KAAAtL,YAAAia,iBAAA3O,KAAA9L,OAAAQ,YAAAsL,KAAAmpB,QAIAnpB,KAAA4+C,wBAAA,EAEA4hE,GAAA,EAQA,QAFA3sH,GAAAmM,KAAAnM,SAEAvC,EAAA,EAAAi7B,EAAA14B,EAAAoB,OAA2Cs3B,EAAAj7B,EAAOA,IAElDuC,EAAAvC,GAAA6E,kBAAAqqH,IAMA9nB,OAAA,SAAAC,GAwGA,QAAA6f,GAAArtF,GAEA,GAAAk4D,KACA,QAAA1jF,KAAAwrB,GAAA,CAEA,GAAA/S,GAAA+S,EAAAxrB,SACAyY,GAAA0gF,SACAzV,EAAAluF,KAAAijB,GAGA,MAAAirE,GA/GA,GAAAo9B,GAAAhoH,SAAAkgG,GAAA,KAAAA,EAEAlE,IAKAgsB,KAGA9nB,GACA5oC,cACA9xD,aACA0L,YACAP,WAGAqrF,EAAAqE,UACAnqE,QAAA,IACAxpB,KAAA,SACA4zF,UAAA,mBAOA,IAAAzlG,KAyCA,IAvCAA,EAAAw1C,KAAA9oC,KAAA8oC,KACAx1C,EAAA6R,KAAAnF,KAAAmF,KAEA,KAAAnF,KAAAzF,OAAAjH,EAAAiH,KAAAyF,KAAAzF,MACA,OAAAyM,KAAAC,UAAAjH,KAAAsY,YAAkDhlB,EAAAglB,SAAAtY,KAAAsY,UAClDtY,KAAAjD,cAAA,IAAAzJ,EAAAyJ,YAAA,GACAiD,KAAA+N,iBAAA,IAAAza,EAAAya,eAAA,GACA/N,KAAAsO,WAAA,IAAAhb,EAAAgb,SAAA,GAEAhb,EAAA61B,OAAAnpB,KAAAmpB,OAAA+hB,UAIAzyC,SAAAuH,KAAAkN,WAEAzU,SAAAkgG,EAAA5oC,WAAA/vD,KAAAkN,SAAA47B,QAEA6vD,EAAA5oC,WAAA/vD,KAAAkN,SAAA47B,MAAA9oC,KAAAkN,SAAAwrF,OAAAC,IAIArlG,EAAA4Z,SAAAlN,KAAAkN,SAAA47B,MAIArwC,SAAAuH,KAAAyJ,WAEAhR,SAAAkgG,EAAA16F,UAAA+B,KAAAyJ,SAAAq/B,QAEA6vD,EAAA16F,UAAA+B,KAAAyJ,SAAAq/B,MAAA9oC,KAAAyJ,SAAAivF,OAAAC,IAIArlG,EAAAmW,SAAAzJ,KAAAyJ,SAAAq/B,MAMA9oC,KAAAnM,SAAAoB,OAAA,GAEA3B,EAAAO,WAEA,QAAAvC,GAAA,EAAuBA,EAAA0O,KAAAnM,SAAAoB,OAA0B3D,IAEjDgC,EAAAO,SAAAsB,KAAA6K,KAAAnM,SAAAvC,GAAAonG,OAAAC,GAAArlG,QAMA,GAAAmtH,EAAA,CAEA,GAAA1wD,GAAAyoD,EAAA7f,EAAA5oC,YACA9xD,EAAAu6G,EAAA7f,EAAA16F,WACA0L,EAAA6uG,EAAA7f,EAAAhvF,UACAP,EAAAovG,EAAA7f,EAAAvvF,OAEA2mD,GAAA96D,OAAA,IAAAw/F,EAAA1kC,cACA9xD,EAAAhJ,OAAA,IAAAw/F,EAAAx2F,aACA0L,EAAA1U,OAAA,IAAAw/F,EAAA9qF,YACAP,EAAAnU,OAAA,IAAAw/F,EAAArrF,UAMA,MAFAqrF,GAAAnhG,SAEAmhG,GAqBAttE,MAAA,SAAAqnE,GAEA,UAAAxuF,MAAAupB,aAAAntB,KAAA4D,KAAAwuF,IAIApyF,KAAA,SAAAyW,EAAA27E,GA4BA,GA1BA/1F,SAAA+1F,OAAA,GAEAxuF,KAAAzF,KAAAsY,EAAAtY,KAEAyF,KAAA4nB,GAAAxrB,KAAAyW,EAAA+U,IAEA5nB,KAAAlE,SAAAM,KAAAyW,EAAA/W,UACAkE,KAAAwgB,WAAApkB,KAAAyW,EAAA2N,YACAxgB,KAAAoI,MAAAhM,KAAAyW,EAAAzK,OAEApI,KAAAmpB,OAAA/sB,KAAAyW,EAAAsW,QACAnpB,KAAAtL,YAAA0H,KAAAyW,EAAAne,aAEAsL,KAAA0+C,iBAAA7rC,EAAA6rC,iBACA1+C,KAAA4+C,uBAAA/rC,EAAA+rC,uBAEA5+C,KAAAsO,QAAAuE,EAAAvE,QAEAtO,KAAAjD,WAAA8V,EAAA9V,WACAiD,KAAA+N,cAAA8E,EAAA9E,cAEA/N,KAAAy/B,cAAA5sB,EAAA4sB,cACAz/B,KAAA06B,YAAA7nB,EAAA6nB,YAEA16B,KAAAsY,SAAAtR,KAAA+B,MAAA/B,KAAAC,UAAA4L,EAAAyF,WAEAk2E,KAAA,EAEA,OAAAl9F,GAAA,EAAuBA,EAAAuhB,EAAAhf,SAAAoB,OAA4B3D,IAAA,CAEnD,GAAA2uH,GAAAptG,EAAAhf,SAAAvC,EACA0O,MAAAlF,IAAAmlH,EAAA94F,SAMA,MAAAnnB,QAMA,IAAA8+C,IAAA,CAcAC,IAAAh/C,WAEAwpB,YAAAw1B,GAEAnqD,IAAA,SAAA8B,EAAAyI,GAKA,MAHAa,MAAAtJ,MAAA0F,KAAA1F,GACAsJ,KAAAb,IAAA/C,KAAA+C,GAEAa,MAIAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,OAIA5D,KAAA,SAAAof,GAKA,MAHAxb,MAAAtJ,MAAA0F,KAAAof,EAAA9kB,OACAsJ,KAAAb,IAAA/C,KAAAof,EAAArc,KAEAa,MAIAg4G,UAAA,SAAA3K,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EACA,OAAAs5B,GAAAwzC,WAAA97E,KAAAtJ,MAAAsJ,KAAAb,KAAAqa,eAAA,KAIA5jB,MAAA,SAAAy3G,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EACA,OAAAs5B,GAAAxlB,WAAA9iB,KAAAb,IAAAa,KAAAtJ,QAIAgqH,WAAA,WAEA,MAAA1gH,MAAAtJ,MAAA6xB,kBAAAvoB,KAAAb,MAIA8N,SAAA,WAEA,MAAAjN,MAAAtJ,MAAA8W,WAAAxN,KAAAb,MAIAk9G,GAAA,SAAAlnG,EAAAk4F,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EAEA,OAAAhP,MAAApK,MAAA0yC,GAAA9uB,eAAArE,GAAAra,IAAAkF,KAAAtJ,QAIAiqH,6BAAA,WAEA,GAAAC,GAAA,GAAA5xG,GACA6xG,EAAA,GAAA7xG,EAEA,iBAAAkgD,EAAA4xD,GAEAF,EAAA99F,WAAAosC,EAAAlvD,KAAAtJ,OACAmqH,EAAA/9F,WAAA9iB,KAAAb,IAAAa,KAAAtJ,MAEA,IAAAqqH,GAAAF,EAAAp4F,IAAAo4F,GACAG,EAAAH,EAAAp4F,IAAAm4F,GAEAzrG,EAAA6rG,EAAAD,CAQA,OANAD,KAEA3rG,EAAArkB,EAAA+E,KAAAsoF,MAAAhpE,EAAA,MAIAA,MAMAonG,oBAAA,SAAArtD,EAAA4xD,EAAAzT,GAEA,GAAAl4F,GAAAnV,KAAA2gH,6BAAAzxD,EAAA4xD,GAEAx4E,EAAA+kE,GAAA,GAAAr+F,EAEA,OAAAhP,MAAApK,MAAA0yC,GAAA9uB,eAAArE,GAAAra,IAAAkF,KAAAtJ,QAIA+nC,aAAA,SAAAtV,GAKA,MAHAnpB,MAAAtJ,MAAA+nC,aAAAtV,GACAnpB,KAAAb,IAAAs/B,aAAAtV,GAEAnpB,MAIAm4D,OAAA,SAAA38C,GAEA,MAAAA,GAAA9kB,MAAAyhE,OAAAn4D,KAAAtJ,QAAA8kB,EAAArc,IAAAg5D,OAAAn4D,KAAAb,OAmBA6/C,GAAA/zC,OAAA,WAEA,GAAAmqB,GAAA,GAAApmB,EAEA,iBAAArd,EAAAC,EAAAR,EAAAi8G,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EAEAs5B,GAAAxlB,WAAA1xB,EAAAQ,GACAwjC,EAAAtS,WAAAnxB,EAAAC,GACA02C,EAAAw1D,MAAA1oE,EAEA,IAAA6rF,GAAA34E,EAAA8vD,UACA,OAAA6oB,GAAA,EAEA34E,EAAA9uB,eAAA,EAAA3jB,KAAAiD,KAAAmoH,IAIA34E,EAAA1zC,IAAA,WAQAoqD,GAAAkiE,mBAAA,WAEA,GAAA9rF,GAAA,GAAApmB,GACAgf,EAAA,GAAAhf,GACA6gB,EAAA,GAAA7gB,EAEA,iBAAAkgD,EAAAv9D,EAAAC,EAAAR,EAAAi8G,GAEAj4E,EAAAtS,WAAA1xB,EAAAO,GACAq8B,EAAAlL,WAAAlxB,EAAAD,GACAk+B,EAAA/M,WAAAosC,EAAAv9D,EAEA,IAAAwvH,GAAA/rF,EAAA3M,IAAA2M,GACAgsF,EAAAhsF,EAAA3M,IAAAuF,GACAqzF,EAAAjsF,EAAA3M,IAAAoH,GACAyxF,EAAAtzF,EAAAvF,IAAAuF,GACAuzF,EAAAvzF,EAAAvF,IAAAoH,GAEA2xF,EAAAL,EAAAG,EAAAF,IAEA94E,EAAA+kE,GAAA,GAAAr+F,EAGA,QAAAwyG,EAIA,MAAAl5E,GAAA1zC,IAAA,SAIA,IAAA6sH,GAAA,EAAAD,EACA9/E,GAAA4/E,EAAAD,EAAAD,EAAAG,GAAAE,EACA74F,GAAAu4F,EAAAI,EAAAH,EAAAC,GAAAI,CAGA,OAAAn5E,GAAA1zC,IAAA,EAAA8sC,EAAA9Y,IAAA8Y,OAMAsd,GAAA1L,cAAA,WAEA,GAAAtlB,GAAA,GAAAhf,EAEA,iBAAAkgD,EAAAv9D,EAAAC,EAAAR,GAEA,GAAAk3C,GAAA0W,GAAAkiE,mBAAAhyD,EAAAv9D,EAAAC,EAAAR,EAAA48B,EAEA,OAAAsa,GAAA3vC,GAAA,GAAA2vC,EAAA1vC,GAAA,GAAA0vC,EAAA3vC,EAAA2vC,EAAA1vC,GAAA,MAMAomD,GAAAj/C,WAEAwpB,YAAAy1B,GAEApqD,IAAA,SAAAjD,EAAAC,EAAAR,GAMA,MAJA4O,MAAArO,EAAAyK,KAAAzK,GACAqO,KAAApO,EAAAwK,KAAAxK,GACAoO,KAAA5O,EAAAgL,KAAAhL,GAEA4O,MAIA0hH,wBAAA,SAAAvwC,EAAAwwC,EAAAliC,EAAAC,GAMA,MAJA1/E,MAAArO,EAAAyK,KAAA+0E,EAAAwwC,IACA3hH,KAAApO,EAAAwK,KAAA+0E,EAAAsO,IACAz/E,KAAA5O,EAAAgL,KAAA+0E,EAAAuO,IAEA1/E,MAIAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,OAIA5D,KAAA,SAAAwlH,GAMA,MAJA5hH,MAAArO,EAAAyK,KAAAwlH,EAAAjwH,GACAqO,KAAApO,EAAAwK,KAAAwlH,EAAAhwH,GACAoO,KAAA5O,EAAAgL,KAAAwlH,EAAAxwH,GAEA4O,MAIA6hH,KAAA,WAEA,GAAAzsF,GAAA,GAAApmB,GACAgf,EAAA,GAAAhf,EAEA,mBAKA,MAHAomB,GAAAtS,WAAA9iB,KAAA5O,EAAA4O,KAAApO,GACAo8B,EAAAlL,WAAA9iB,KAAArO,EAAAqO,KAAApO,GAEA,GAAAwjC,EAAA0oE,MAAA9vE,GAAA/4B,aAMA6sH,SAAA,SAAAzU,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EACA,OAAAs5B,GAAAwzC,WAAA97E,KAAArO,EAAAqO,KAAApO,GAAAkJ,IAAAkF,KAAA5O,GAAAooB,eAAA,MAIAvO,OAAA,SAAAoiG,GAEA,MAAAruD,IAAA/zC,OAAAjL,KAAArO,EAAAqO,KAAApO,EAAAoO,KAAA5O,EAAAi8G,IAIAxrC,MAAA,SAAAwrC,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAA90D,GAEA,OAAAjQ,GAAA6xE,sBAAAn6G,KAAArO,EAAAqO,KAAApO,EAAAoO,KAAA5O,IAIA8vH,mBAAA,SAAAhyD,EAAAm+C,GAEA,MAAAruD,IAAAkiE,mBAAAhyD,EAAAlvD,KAAArO,EAAAqO,KAAApO,EAAAoO,KAAA5O,EAAAi8G,IAIA/5D,cAAA,SAAA4b,GAEA,MAAAlQ,IAAA1L,cAAA4b,EAAAlvD,KAAArO,EAAAqO,KAAApO,EAAAoO,KAAA5O,IAIAmrH,oBAAA,WAEA,GAAA16C,GAAAkgD,EAAAC,EAAA3I,CAEA,iBAAAnqD,EAAAm+C,GAEA50G,SAAAopE,IAEAA,EAAA,GAAAtpB,IACAwpE,GAAA,GAAAhjE,IAAA,GAAAA,IAAA,GAAAA,KACAijE,EAAA,GAAAhzG,GACAqqG,EAAA,GAAArqG,GAIA,IAAAs5B,GAAA+kE,GAAA,GAAAr+F,GACA0X,EAAAE,GASA,IALAi7C,EAAAs4C,sBAAAn6G,KAAArO,EAAAqO,KAAApO,EAAAoO,KAAA5O,GACAywE,EAAAy4C,aAAAprD,EAAA8yD,GAIAhiH,KAAAszC,cAAA0uE,MAAA,EAIA15E,EAAAlsC,KAAA4lH,OAEQ,CAIRD,EAAA,GAAAntH,IAAAoL,KAAArO,EAAAqO,KAAApO,GACAmwH,EAAA,GAAAntH,IAAAoL,KAAApO,EAAAoO,KAAA5O,GACA2wH,EAAA,GAAAntH,IAAAoL,KAAA5O,EAAA4O,KAAArO,EAEA,QAAAL,GAAA,EAAuBA,EAAAywH,EAAA9sH,OAAqB3D,IAAA,CAE5CywH,EAAAzwH,GAAAirH,oBAAAyF,GAAA,EAAA3I,EAEA,IAAApsG,GAAA+0G,EAAAz5F,kBAAA8wF,EAEA3yF,GAAAzZ,IAEAyZ,EAAAzZ,EAEAq7B,EAAAlsC,KAAAi9G,KAQA,MAAA/wE,OAMA6vB,OAAA,SAAAypD,GAEA,MAAAA,GAAAjwH,EAAAwmE,OAAAn4D,KAAArO,IAAAiwH,EAAAhwH,EAAAumE,OAAAn4D,KAAApO,IAAAgwH,EAAAxwH,EAAA+mE,OAAAn4D,KAAA5O,KA2BA6tD,GAAAl/C,WAEAwpB,YAAA01B,GAEA93B,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,OAIA5D,KAAA,SAAAyW,GAEA7S,KAAArO,EAAAkhB,EAAAlhB,EACAqO,KAAApO,EAAAihB,EAAAjhB,EACAoO,KAAA5O,EAAAyhB,EAAAzhB,EAEA4O,KAAAiL,OAAA7O,KAAAyW,EAAA5H,QACAjL,KAAAmK,MAAA/N,KAAAyW,EAAA1I,OAEAnK,KAAAkhC,cAAAruB,EAAAquB,aAEA,QAAA5vC,GAAA,EAAA0rD,EAAAnqC,EAAA0uB,cAAAtsC,OAAwD+nD,EAAA1rD,EAAQA,IAEhE0O,KAAAuhC,cAAAjwC,GAAAuhB,EAAA0uB,cAAAjwC,GAAA61B,OAIA,QAAA71B,GAAA,EAAA0rD,EAAAnqC,EAAA2d,aAAAv7B,OAAuD+nD,EAAA1rD,EAAQA,IAE/D0O,KAAAwwB,aAAAl/B,GAAAuhB,EAAA2d,aAAAl/B,GAAA61B,OAIA,OAAAnnB,QA2EA8K,GAAA/K,UAAAG,OAAAmpB,OAAAxf,EAAA9J,WACA+K,GAAA/K,UAAAwpB,YAAAze,GAEAA,GAAA/K,UAAA0oE,qBAAA,EAEA39D,GAAA/K,UAAA3D,KAAA,SAAAyW,GA4BA,MA1BAhJ,GAAA9J,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAmK,MAAA/N,KAAAyW,EAAA1I,OAEAnK,KAAAgK,IAAA6I,EAAA7I,IAEAhK,KAAAo/C,MAAAvsC,EAAAusC,MACAp/C,KAAAq/C,eAAAxsC,EAAAwsC,eAEAr/C,KAAAqK,YAAAwI,EAAAxI,YAEArK,KAAAuK,SAAAsI,EAAAtI,SAEAvK,KAAAwK,OAAAqI,EAAArI,OACAxK,KAAAs/C,QAAAzsC,EAAAysC,QACAt/C,KAAAw/C,aAAA3sC,EAAA2sC,aACAx/C,KAAAy/C,gBAAA5sC,EAAA4sC,gBAEAz/C,KAAA8yB,UAAAjgB,EAAAigB,UACA9yB,KAAAgzB,mBAAAngB,EAAAmgB,mBACAhzB,KAAAizB,iBAAApgB,EAAAogB,iBACAjzB,KAAAkzB,kBAAArgB,EAAAqgB,kBAEAlzB,KAAAw3C,SAAA3kC,EAAA2kC,SACAx3C,KAAA2gC,aAAA9tB,EAAA8tB,aAEA3gC,MA8BA0/C,GAAA3/C,WAEAwpB,YAAAm2B,GAEAuiE,mBAAA,EAEA92B,GAAAriF,aAAA+Q,GAEAA,KAAA,GAAA7Z,KAAA2uB,WAIAqyB,WAAA,SAAAnnC,GAIA,MAFA7Z,MAAA8/C,QAAAjmC,EAEA7Z,MAIA5D,KAAA,SAAAyW,GASA,MAPA7S,MAAAmgC,MAAA,GAAAttB,GAAAstB,MAAA5W,YAAA1W,EAAAstB,OACAngC,KAAA2/C,SAAA9sC,EAAA8sC,SACA3/C,KAAAsQ,MAAAuC,EAAAvC,MACAtQ,KAAA4/C,WAAA/sC,EAAA+sC,WAEA5/C,KAAA8/C,QAAAjtC,EAAAitC,QAEA9/C,MAIAkiH,OAAA,SAAAnqC,EAAAznB,EAAAonB,GAEAK,GAAA/3E,KAAA2/C,SACA+3B,GAAApnB,EAAA3Q,QAEA,QAAAruD,GAAA,EAAAi7B,EAAAvsB,KAAA2/C,SAAyCpzB,EAAAj7B,EAAOA,IAEhD0O,KAAAmgC,MAAA43C,EAAAzmF,GAAAg/D,EAAAnwB,MAAAu3C,EAAApmF,EAIA,OAAA0O,OAIAmiH,UAAA,SAAAhiF,GAIA,MAFAngC,MAAAmgC,MAAAvrC,IAAAurC,GAEAngC,MAIAoiH,gBAAA,SAAAxgF,GAIA,OAFAzB,GAAAngC,KAAAmgC,MAAA3vB,EAAA,EAEAlf,EAAA,EAAAi7B,EAAAqV,EAAA3sC,OAAyCs3B,EAAAj7B,EAAOA,IAAA,CAEhD,GAAA6Y,GAAAy3B,EAAAtwC,EAEAmH,UAAA0R,IAGAA,EAAA,GAAAiE,IAIA+xB,EAAA3vB,KAAArG,EAAAqvB,EACA2G,EAAA3vB,KAAArG,EAAAsvB,EACA0G,EAAA3vB,KAAArG,EAAAvY,EAIA,MAAAoO,OAIAqiH,iBAAA,SAAAjiF,GAIA,OAFAD,GAAAngC,KAAAmgC,MAAA3vB,EAAA,EAEAlf,EAAA,EAAAi7B,EAAA6T,EAAAnrC,OAA0Cs3B,EAAAj7B,EAAOA,IAAA,CAEjD,GAAAgV,GAAA85B,EAAA9uC,EAEA6uC,GAAA3vB,KAAAlK,EAAA3U,EACAwuC,EAAA3vB,KAAAlK,EAAA1U,EACAuuC,EAAA3vB,KAAAlK,EAAAlV,EAIA,MAAA4O,OAIAsiH,kBAAA,SAAAC,GAIA,OAFApiF,GAAAngC,KAAAmgC,MAAA3vB,EAAA,EAEAlf,EAAA,EAAAi7B,EAAAg2F,EAAAttH,OAA0Cs3B,EAAAj7B,EAAOA,IAAA,CAEjD,GAAA0sC,GAAAukF,EAAAjxH,EAEAmH,UAAAulC,IAGAA,EAAA,GAAApxB,IAIAuzB,EAAA3vB,KAAAwtB,EAAArlC,EACAwnC,EAAA3vB,KAAAwtB,EAAAplC,EAIA,MAAAoH,OAIAwiH,kBAAA,SAAAD,GAIA,OAFApiF,GAAAngC,KAAAmgC,MAAA3vB,EAAA,EAEAlf,EAAA,EAAAi7B,EAAAg2F,EAAAttH,OAA0Cs3B,EAAAj7B,EAAOA,IAAA,CAEjD,GAAA0sC,GAAAukF,EAAAjxH,EAEAmH,UAAAulC,IAGAA,EAAA,GAAAhvB,IAIAmxB,EAAA3vB,KAAAwtB,EAAArlC,EACAwnC,EAAA3vB,KAAAwtB,EAAAplC,EACAunC,EAAA3vB,KAAAwtB,EAAAnlC,EAIA,MAAAmH,OAIAyiH,kBAAA,SAAAF,GAIA,OAFApiF,GAAAngC,KAAAmgC,MAAA3vB,EAAA,EAEAlf,EAAA,EAAAi7B,EAAAg2F,EAAAttH,OAA0Cs3B,EAAAj7B,EAAOA,IAAA,CAEjD,GAAA0sC,GAAAukF,EAAAjxH,EAEAmH,UAAAulC,IAGAA,EAAA,GAAA1T,IAIA6V,EAAA3vB,KAAAwtB,EAAArlC,EACAwnC,EAAA3vB,KAAAwtB,EAAAplC,EACAunC,EAAA3vB,KAAAwtB,EAAAnlC,EACAsnC,EAAA3vB,KAAAwtB,EAAAzT,EAIA,MAAAvqB,OAIApL,IAAA,SAAAilB,EAAArJ,GAMA,MAJA/X,UAAA+X,MAAA,GAEAxQ,KAAAmgC,MAAAvrC,IAAAilB,EAAArJ,GAEAxQ,MAIA23E,KAAA,SAAArxE,GAEA,MAAAtG,MAAAmgC,MAAA75B,EAAAtG,KAAA2/C,WAIAu8B,KAAA,SAAA51E,EAAA3N,GAIA,MAFAqH,MAAAmgC,MAAA75B,EAAAtG,KAAA2/C,UAAAhnD,EAEAqH,MAIA43E,KAAA,SAAAtxE,GAEA,MAAAtG,MAAAmgC,MAAA75B,EAAAtG,KAAA2/C,SAAA,IAIA63C,KAAA,SAAAlxF,EAAA1N,GAIA,MAFAoH,MAAAmgC,MAAA75B,EAAAtG,KAAA2/C,SAAA,GAAA/mD,EAEAoH,MAIA63E,KAAA,SAAAvxE,GAEA,MAAAtG,MAAAmgC,MAAA75B,EAAAtG,KAAA2/C,SAAA,IAIAu5C,KAAA,SAAA5yF,EAAAzN,GAIA,MAFAmH,MAAAmgC,MAAA75B,EAAAtG,KAAA2/C,SAAA,GAAA9mD,EAEAmH,MAIA0iH,KAAA,SAAAp8G,GAEA,MAAAtG,MAAAmgC,MAAA75B,EAAAtG,KAAA2/C,SAAA,IAIAw5C,KAAA,SAAA7yF,EAAAikB,GAIA,MAFAvqB,MAAAmgC,MAAA75B,EAAAtG,KAAA2/C,SAAA,GAAAp1B,EAEAvqB,MAIAi8E,MAAA,SAAA31E,EAAA3N,EAAAC,GAOA,MALA0N,IAAAtG,KAAA2/C,SAEA3/C,KAAAmgC,MAAA75B,EAAA,GAAA3N,EACAqH,KAAAmgC,MAAA75B,EAAA,GAAA1N,EAEAoH,MAIAg8E,OAAA,SAAA11E,EAAA3N,EAAAC,EAAAC,GAQA,MANAyN,IAAAtG,KAAA2/C,SAEA3/C,KAAAmgC,MAAA75B,EAAA,GAAA3N,EACAqH,KAAAmgC,MAAA75B,EAAA,GAAA1N,EACAoH,KAAAmgC,MAAA75B,EAAA,GAAAzN,EAEAmH,MAIA2iH,QAAA,SAAAr8G,EAAA3N,EAAAC,EAAAC,EAAA0xB,GASA,MAPAjkB,IAAAtG,KAAA2/C,SAEA3/C,KAAAmgC,MAAA75B,EAAA,GAAA3N,EACAqH,KAAAmgC,MAAA75B,EAAA,GAAA1N,EACAoH,KAAAmgC,MAAA75B,EAAA,GAAAzN,EACAmH,KAAAmgC,MAAA75B,EAAA,GAAAikB,EAEAvqB,MAIAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,QAqHAE,OAAA+J,OAAAq2B,GAAAvgC,UAAAupB,EAAAvpB,WAEAi6C,YAAA,EAEA1lC,YAAA,SAAA6U,GAIA,OAFAmV,IAAA,GAAAjU,KAAA4P,gBAAA9Q,GAEA73B,EAAA,EAAA0rD,EAAAh9C,KAAA6xB,SAAA58B,OAAiD+nD,EAAA1rD,EAAQA,IAAA,CAEzD,GAAAspC,GAAA56B,KAAA6xB,SAAAvgC,EACAspC,GAAA6D,aAAAtV,GAIA,OAAA73B,GAAA,EAAA0rD,EAAAh9C,KAAA8xB,MAAA78B,OAA8C+nD,EAAA1rD,EAAQA,IAAA,CAEtD,GAAAkqC,GAAAx7B,KAAA8xB,MAAAxgC,EACAkqC,GAAAvwB,OAAAyoB,aAAA4K,GAAAvpC,WAEA,QAAA2O,GAAA,EAAAwwC,EAAA1Y,EAAA+F,cAAAtsC,OAAuDi/C,EAAAxwC,EAAQA,IAE/D83B,EAAA+F,cAAA79B,GAAAgwB,aAAA4K,GAAAvpC,YAqBA,MAfA,QAAAiL,KAAAqN,aAEArN,KAAAgO,qBAIA,OAAAhO,KAAAqhD,gBAEArhD,KAAAolE,wBAIAplE,KAAAuhD,oBAAA,EACAvhD,KAAAyhD,mBAAA,EAEAzhD,MAIA+P,QAAA,WAIA,GAAAgrG,EAEA,iBAAA/qG,GAQA,MANAvX,UAAAsiH,MAAA,GAAAvsG,IAEAusG,EAAAxmG,cAAAvE,GAEAhQ,KAAAsU,YAAAymG,GAEA/6G,SAMAkQ,QAAA,WAIA,GAAA6qG,EAEA,iBAAA/qG,GAQA,MANAvX,UAAAsiH,MAAA,GAAAvsG,IAEAusG,EAAArkG,cAAA1G,GAEAhQ,KAAAsU,YAAAymG,GAEA/6G,SAMAmQ,QAAA,WAIA,GAAA4qG,EAEA,iBAAA/qG,GAQA,MANAvX,UAAAsiH,MAAA,GAAAvsG,IAEAusG,EAAAtW,cAAAz0F,GAEAhQ,KAAAsU,YAAAymG,GAEA/6G,SAMAuvB,UAAA,WAIA,GAAAwrF,EAEA,iBAAApiH,EAAAC,EAAAC,GAQA,MANAJ,UAAAsiH,MAAA,GAAAvsG,IAEAusG,EAAAvW,gBAAA7rG,EAAAC,EAAAC,GAEAmH,KAAAsU,YAAAymG,GAEA/6G,SAMAoI,MAAA,WAIA,GAAA2yG,EAEA,iBAAApiH,EAAAC,EAAAC,GAQA,MANAJ,UAAAsiH,MAAA,GAAAvsG,IAEAusG,EAAA3lG,UAAAzc,EAAAC,EAAAC,GAEAmH,KAAAsU,YAAAymG,GAEA/6G,SAMAsoB,OAAA,WAEA,GAAAxoB,EAEA,iBAAAk+B,GAEAvlC,SAAAqH,MAAA,GAAA2Q,KAEA3Q,EAAAwoB,OAAA0V,GAEAl+B,EAAAkiF,eAEAhiF,KAAAsU,YAAAxU,EAAAqpB,YAMAkzD,mBAAA,SAAAnvE,GAiDA,QAAA01G,GAAAjxH,EAAAC,EAAAR,EAAA8vC,GAEA,GAAAK,GAAA9oC,SAAA8lC,GAAAskF,EAAAlxH,GAAAw1B,QAAA07F,EAAAjxH,GAAAu1B,QAAA07F,EAAAzxH,GAAA+1B,YACAqJ,EAAA/3B,SAAAmpC,GAAAliB,EAAAkiB,OAAAjwC,GAAAw1B,QAAAzH,EAAAkiB,OAAAhwC,GAAAu1B,QAAAzH,EAAAkiB,OAAAxwC,GAAA+1B,YAEAqU,EAAA,GAAAyjB,IAAAttD,EAAAC,EAAAR,EAAAmwC,EAAA/Q,EAAA0Q,EAEAxhB,GAAAoS,MAAA38B,KAAAqmC,GAEA/iC,SAAA46B,GAEA3T,EAAA6gB,cAAA,GAAAprC,MAAA2tH,EAAAnxH,GAAAw1B,QAAA27F,EAAAlxH,GAAAu1B,QAAA27F,EAAA1xH,GAAA+1B,UAIA1uB,SAAAspD,GAEAriC,EAAA6gB,cAAA,GAAAprC,MAAA4tH,EAAApxH,GAAAw1B,QAAA47F,EAAAnxH,GAAAu1B,QAAA47F,EAAA3xH,GAAA+1B,UAhEA,GAAAzH,GAAA1f,KAEAogC,EAAA,OAAAlzB,EAAA5G,MAAA4G,EAAA5G,MAAA65B,MAAA1nC,OACAunC,EAAA9yB,EAAA8yB,WAEAE,EAAAF,EAAAlkC,SAAAqkC,MACA5B,EAAA9lC,SAAAunC,EAAA/0B,OAAA+0B,EAAA/0B,OAAAk1B,MAAA1nC,OACAmpC,EAAAnpC,SAAAunC,EAAA71B,MAAA61B,EAAA71B,MAAAg2B,MAAA1nC,OACA46B,EAAA56B,SAAAunC,EAAAd,GAAAc,EAAAd,GAAAiB,MAAA1nC,OACAspD,EAAAtpD,SAAAunC,EAAAvO,IAAAuO,EAAAvO,IAAA0O,MAAA1nC,MAEAA,UAAAspD,IAAA/hD,KAAAugC,cAAA,MAMA,QAJAsiF,MACAC,KACAC,KAEAzxH,EAAA,EAAAoS,EAAA,EAA6BpS,EAAA4uC,EAAAjrC,OAAsB3D,GAAA,EAAAoS,GAAA,EAEnDgc,EAAAmS,SAAA18B,KAAA,GAAA6Z,GAAAkxB,EAAA5uC,GAAA4uC,EAAA5uC,EAAA,GAAA4uC,EAAA5uC,EAAA,KAEAmH,SAAA8lC,GAEAskF,EAAA1tH,KAAA,GAAA6Z,GAAAuvB,EAAAjtC,GAAAitC,EAAAjtC,EAAA,GAAAitC,EAAAjtC,EAAA,KAIAmH,SAAAmpC,GAEAliB,EAAAkiB,OAAAzsC,KAAA,GAAAiZ,GAAAwzB,EAAAtwC,GAAAswC,EAAAtwC,EAAA,GAAAswC,EAAAtwC,EAAA,KAIAmH,SAAA46B,GAEAyvF,EAAA3tH,KAAA,GAAAyX,GAAAymB,EAAA3vB,GAAA2vB,EAAA3vB,EAAA,KAIAjL,SAAAspD,GAEAghE,EAAA5tH,KAAA,GAAAyX,GAAAm1C,EAAAr+C,GAAAq+C,EAAAr+C,EAAA,IA6BA,IAAAjL,SAAA2nC,EAAA,CAEA,GAAAH,GAAA/yB,EAAA+yB,MAEA,IAAAA,EAAAhrC,OAAA,EAEA,OAAA3D,GAAA,EAAwBA,EAAA2uC,EAAAhrC,OAAmB3D,IAO3C,OALA+uC,GAAAJ,EAAA3uC,GAEAoF,EAAA2pC,EAAA3pC,MACA4Z,EAAA+vB,EAAA/vB,MAEA5M,EAAAhN,EAAAw9C,EAAAx9C,EAAA4Z,EAAiD4jC,EAAAxwC,EAAQA,GAAA,EAEzDk/G,EAAAxiF,EAAA18B,GAAA08B,EAAA18B,EAAA,GAAA08B,EAAA18B,EAAA,GAAA28B,EAAAa,mBAQA,QAAA5vC,GAAA,EAAwBA,EAAA8uC,EAAAnrC,OAAoB3D,GAAA,EAE5CsxH,EAAAxiF,EAAA9uC,GAAA8uC,EAAA9uC,EAAA,GAAA8uC,EAAA9uC,EAAA,QAQA,QAAAA,GAAA,EAAuBA,EAAA4uC,EAAAjrC,OAAA,EAA0B3D,GAAA,EAEjDsxH,EAAAtxH,IAAA,EAAAA,EAAA,EAoBA,OAdA0O,MAAA04E,qBAEA,OAAAxrE,EAAAG,cAEArN,KAAAqN,YAAAH,EAAAG,YAAA8Z,SAIA,OAAAja,EAAAm0C,iBAEArhD,KAAAqhD,eAAAn0C,EAAAm0C,eAAAl6B,SAIAnnB,MAIAypB,OAAA,WAEAzpB,KAAAgO,oBAEA,IAAAwC,GAAAxQ,KAAAqN,YAAA2qG,YAAA32E,QAIA,OAFArhC,MAAAuvB,UAAA/e,EAAA7X,EAAA6X,EAAA5X,EAAA4X,EAAA3X,GAEA2X,GAIAzb,UAAA,WAEAiL,KAAAolE,uBAEA,IAAA37C,GAAAzpB,KAAAqhD,eAAA53B,OACArV,EAAApU,KAAAqhD,eAAAjtC,OAEA+rE,EAAA,IAAA/rE,EAAA,IAAAA,EAEA+U,EAAA,GAAA3a,EAUA,OATA2a,GAAAv0B,IACAurF,EAAA,KAAAA,EAAA12D,EAAA9wB,EACA,EAAAwnF,EAAA,GAAAA,EAAA12D,EAAA7wB,EACA,IAAAunF,KAAA12D,EAAA5wB,EACA,SAGAmH,KAAAsU,YAAA6U,GAEAnpB,MAIA04E,mBAAA,WAIA,OAFAxiF,GAAA,GAAA8Y,GAAAg0G,EAAA,GAAAh0G,GAEAwmB,EAAA,EAAAyL,EAAAjhC,KAAA8xB,MAAA78B,OAA8CgsC,EAAAzL,EAAQA,IAAA,CAEtD,GAAAgG,GAAAx7B,KAAA8xB,MAAA0D,GAEAytF,EAAAjjH,KAAA6xB,SAAA2J,EAAA7pC,GACAuxH,EAAAljH,KAAA6xB,SAAA2J,EAAA5pC,GACAuxH,EAAAnjH,KAAA6xB,SAAA2J,EAAApqC,EAEA8E,GAAA4sB,WAAAqgG,EAAAD,GACAF,EAAAlgG,WAAAmgG,EAAAC,GACAhtH,EAAA4nG,MAAAklB,GAEA9sH,EAAAnB,YAEAymC,EAAAvwB,OAAA7O,KAAAlG,KAMAyiF,qBAAA,SAAAyqC,GAEA3qH,SAAA2qH,OAAA,EAEA,IAAAx6F,GAAA8X,EAAAlL,EAAAyL,EAAAzF,EAAA3J,CAIA,KAFAA,EAAA,GAAA/X,OAAA9Z,KAAA6xB,SAAA58B,QAEA2zB,EAAA,EAAA8X,EAAA1gC,KAAA6xB,SAAA58B,OAA6CyrC,EAAA9X,EAAQA,IAErDiJ,EAAAjJ,GAAA,GAAA5Z,EAIA,IAAAo0G,EAAA,CAKA,GAAAH,GAAAC,EAAAC,EACAjtH,EAAA,GAAA8Y,GAAAg0G,EAAA,GAAAh0G,EAEA,KAAAwmB,EAAA,EAAAyL,EAAAjhC,KAAA8xB,MAAA78B,OAA2CgsC,EAAAzL,EAAQA,IAEnDgG,EAAAx7B,KAAA8xB,MAAA0D,GAEAytF,EAAAjjH,KAAA6xB,SAAA2J,EAAA7pC,GACAuxH,EAAAljH,KAAA6xB,SAAA2J,EAAA5pC,GACAuxH,EAAAnjH,KAAA6xB,SAAA2J,EAAApqC,GAEA8E,EAAA4sB,WAAAqgG,EAAAD,GACAF,EAAAlgG,WAAAmgG,EAAAC,GACAhtH,EAAA4nG,MAAAklB,GAEAnxF,EAAA2J,EAAA7pC,GAAAmJ,IAAA5E,GACA27B,EAAA2J,EAAA5pC,GAAAkJ,IAAA5E,GACA27B,EAAA2J,EAAApqC,GAAA0J,IAAA5E,OAMA,KAAAs/B,EAAA,EAAAyL,EAAAjhC,KAAA8xB,MAAA78B,OAA2CgsC,EAAAzL,EAAQA,IAEnDgG,EAAAx7B,KAAA8xB,MAAA0D,GAEA3D,EAAA2J,EAAA7pC,GAAAmJ,IAAA0gC,EAAAvwB,QACA4mB,EAAA2J,EAAA5pC,GAAAkJ,IAAA0gC,EAAAvwB,QACA4mB,EAAA2J,EAAApqC,GAAA0J,IAAA0gC,EAAAvwB,OAMA,KAAA2d,EAAA,EAAA8X,EAAA1gC,KAAA6xB,SAAA58B,OAA6CyrC,EAAA9X,EAAQA,IAErDiJ,EAAAjJ,GAAA7zB,WAIA,KAAAygC,EAAA,EAAAyL,EAAAjhC,KAAA8xB,MAAA78B,OAA0CgsC,EAAAzL,EAAQA,IAAA,CAElDgG,EAAAx7B,KAAA8xB,MAAA0D,EAEA,IAAA+L,GAAA/F,EAAA+F,aAEA,KAAAA,EAAAtsC,QAEAssC,EAAA,GAAAnlC,KAAAy1B,EAAA2J,EAAA7pC,IACA4vC,EAAA,GAAAnlC,KAAAy1B,EAAA2J,EAAA5pC,IACA2vC,EAAA,GAAAnlC,KAAAy1B,EAAA2J,EAAApqC,MAIAmwC,EAAA,GAAA1P,EAAA2J,EAAA7pC,GAAAw1B,QACAoa,EAAA,GAAA1P,EAAA2J,EAAA5pC,GAAAu1B,QACAoa,EAAA,GAAA1P,EAAA2J,EAAApqC,GAAA+1B,SAMAnnB,KAAA8xB,MAAA78B,OAAA,IAEA+K,KAAAyhD,mBAAA,IAMA4hE,oBAAA,WAEA,GAAA/xH,GAAA0rD,EAAAxnB,EAAAyL,EAAAzF,CAMA,KAAAhG,EAAA,EAAAyL,EAAAjhC,KAAA8xB,MAAA78B,OAA0CgsC,EAAAzL,EAAQA,IAgBlD,IAdAgG,EAAAx7B,KAAA8xB,MAAA0D,GAEAgG,EAAA8nF,qBAMA9nF,EAAA8nF,qBAAAlnH,KAAAo/B,EAAAvwB,QAJAuwB,EAAA8nF,qBAAA9nF,EAAAvwB,OAAAkc,QAQAqU,EAAA+nF,0BAAA/nF,EAAA+nF,4BAEAjyH,EAAA,EAAA0rD,EAAAxhB,EAAA+F,cAAAtsC,OAAmD+nD,EAAA1rD,EAAQA,IAE3DkqC,EAAA+nF,wBAAAjyH,GAMAkqC,EAAA+nF,wBAAAjyH,GAAA8K,KAAAo/B,EAAA+F,cAAAjwC,IAJAkqC,EAAA+nF,wBAAAjyH,GAAAkqC,EAAA+F,cAAAjwC,GAAA61B,OAcA,IAAAq8F,GAAA,GAAAljF,GAGA,KAFAkjF,EAAA1xF,MAAA9xB,KAAA8xB,MAEAxgC,EAAA,EAAA0rD,EAAAh9C,KAAA2gC,aAAA1rC,OAAiD+nD,EAAA1rD,EAAQA,IAAA,CAIzD,IAAA0O,KAAAy3C,aAAAnmD,GAAA,CAEA0O,KAAAy3C,aAAAnmD,MACA0O,KAAAy3C,aAAAnmD,GAAAmyH,eACAzjH,KAAAy3C,aAAAnmD,GAAAiwC,gBAEA,IAGAmiF,GAAAniF,EAHAoiF,EAAA3jH,KAAAy3C,aAAAnmD,GAAAmyH,YACAG,EAAA5jH,KAAAy3C,aAAAnmD,GAAAiwC,aAIA,KAAA/L,EAAA,EAAAyL,EAAAjhC,KAAA8xB,MAAA78B,OAA4CgsC,EAAAzL,EAAQA,IAEpDkuF,EAAA,GAAA10G,GACAuyB,GAA0B5vC,EAAA,GAAAqd,GAAApd,EAAA,GAAAod,GAAA5d,EAAA,GAAA4d,IAE1B20G,EAAAxuH,KAAAuuH,GACAE,EAAAzuH,KAAAosC,GAMA,GAAAkW,GAAAz3C,KAAAy3C,aAAAnmD,EAIAkyH,GAAA3xF,SAAA7xB,KAAA2gC,aAAArvC,GAAAugC,SAIA2xF,EAAA9qC,qBACA8qC,EAAA7qC,sBAIA,IAAA+qC,GAAAniF,CAEA,KAAA/L,EAAA,EAAAyL,EAAAjhC,KAAA8xB,MAAA78B,OAA2CgsC,EAAAzL,EAAQA,IAEnDgG,EAAAx7B,KAAA8xB,MAAA0D,GAEAkuF,EAAAjsE,EAAAgsE,YAAAjuF,GACA+L,EAAAkW,EAAAlW,cAAA/L,GAEAkuF,EAAAtnH,KAAAo/B,EAAAvwB,QAEAs2B,EAAA5vC,EAAAyK,KAAAo/B,EAAA+F,cAAA,IACAA,EAAA3vC,EAAAwK,KAAAo/B,EAAA+F,cAAA,IACAA,EAAAnwC,EAAAgL,KAAAo/B,EAAA+F,cAAA,IAQA,IAAA/L,EAAA,EAAAyL,EAAAjhC,KAAA8xB,MAAA78B,OAA0CgsC,EAAAzL,EAAQA,IAElDgG,EAAAx7B,KAAA8xB,MAAA0D,GAEAgG,EAAAvwB,OAAAuwB,EAAA8nF,qBACA9nF,EAAA+F,cAAA/F,EAAA+nF,yBAMAM,gBAAA,aAMAC,qBAAA,WAKA,OAHAvuF,GAAA,EACA1D,EAAA7xB,KAAA6xB,SAEAvgC,EAAA,EAAA0rD,EAAAnrB,EAAA58B,OAA4C+nD,EAAA1rD,EAAQA,IAEpDA,EAAA,IAEAikC,GAAA1D,EAAAvgC,GAAAkc,WAAAqkB,EAAAvgC,EAAA,KAIA0O,KAAAohD,cAAA9vD,GAAAikC,GAMAvnB,mBAAA,WAEA,OAAAhO,KAAAqN,cAEArN,KAAAqN,YAAA,GAAAgwB,KAIAr9B,KAAAqN,YAAAgtB,cAAAr6B,KAAA6xB,WAIAuzC,sBAAA,WAEA,OAAAplE,KAAAqhD,iBAEArhD,KAAAqhD,eAAA,GAAA/I,KAIAt4C,KAAAqhD,eAAAhnB,cAAAr6B,KAAA6xB,WAIAyuD,MAAA,SAAApzE,EAAAic,EAAA46F,GAEA,IAAA72G,KAAA8sC,eAAA,GAOA,GAAA1b,GACA0lF,EAAAhkH,KAAA6xB,SAAA58B,OACAgvH,EAAAjkH,KAAA6xB,SACAqyF,EAAAh3G,EAAA2kB,SACAsyF,EAAAnkH,KAAA8xB,MACAsyF,EAAAl3G,EAAA4kB,MACAuyF,EAAArkH,KAAAugC,cAAA,GACAwhB,EAAA70C,EAAAqzB,cAAA,GACA+jF,EAAAtkH,KAAA4hC,OACA2iF,EAAAr3G,EAAA00B,MAEAnpC,UAAAsrH,MAAA,GAEAtrH,SAAA0wB,IAEAmV,GAAA,GAAAjU,KAAA4P,gBAAA9Q,GAMA,QAAA73B,GAAA,EAAA0rD,EAAAknE,EAAAjvH,OAA6C+nD,EAAA1rD,EAAQA,IAAA,CAErD,GAAAspC,GAAAspF,EAAA5yH,GAEAkzH,EAAA5pF,EAAAzT,OAEA1uB,UAAA0wB,GAAAq7F,EAAA/lF,aAAAtV,GAEA86F,EAAA9uH,KAAAqvH,GAMA,OAAAlzH,GAAA,EAAA0rD,EAAAunE,EAAAtvH,OAA2C+nD,EAAA1rD,EAAQA,IAEnDgzH,EAAAnvH,KAAAovH,EAAAjzH,GAAA61B,QAMA,KAAA71B,EAAA,EAAA0rD,EAAAonE,EAAAnvH,OAAsC+nD,EAAA1rD,EAAQA,IAAA,CAE9C,GAAAmzH,GAAAx5G,EAAAd,EAAAqxB,EAAA4oF,EAAA9yH,GACAgwC,EAAA9F,EAAA+F,cACAmjF,EAAAlpF,EAAAhL,YAEAi0F,GAAA,GAAAxlE,IAAAzjB,EAAA7pC,EAAAqyH,EAAAxoF,EAAA5pC,EAAAoyH,EAAAxoF,EAAApqC,EAAA4yH,GACAS,EAAAx5G,OAAA7O,KAAAo/B,EAAAvwB,QAEAxS,SAAA6lC,GAEAmmF,EAAAx5G,OAAAyoB,aAAA4K,GAAAvpC,WAIA,QAAA2O,GAAA,EAAAwwC,EAAA5S,EAAArsC,OAAsDi/C,EAAAxwC,EAAQA,IAE9DuH,EAAAq2B,EAAA59B,GAAAyjB,QAEA1uB,SAAA6lC,GAEArzB,EAAAyoB,aAAA4K,GAAAvpC,YAIA0vH,EAAAljF,cAAApsC,KAAA8V,EAIAw5G,GAAAt6G,MAAA/N,KAAAo/B,EAAArxB,MAEA,QAAAzG,GAAA,EAAAwwC,EAAAwwE,EAAAzvH,OAAqDi/C,EAAAxwC,EAAQA,IAE7DyG,EAAAu6G,EAAAhhH,GACA+gH,EAAAj0F,aAAAr7B,KAAAgV,EAAAgd,QAIAs9F,GAAAvjF,cAAA1F,EAAA0F,cAAA6iF,EAEAI,EAAAhvH,KAAAsvH,GAMA,IAAAnzH,EAAA,EAAA0rD,EAAA+E,EAAA9sD,OAAoC+nD,EAAA1rD,EAAQA,IAAA,CAE5C,GAAA4tC,GAAA6iB,EAAAzwD,GAAAqzH,IAEA,IAAAlsH,SAAAymC,EAAA,CAMA,OAAAx7B,GAAA,EAAAwwC,EAAAhV,EAAAjqC,OAAuCi/C,EAAAxwC,EAAQA,IAE/CihH,EAAAxvH,KAAA+pC,EAAAx7B,GAAAyjB,QAIAk9F,GAAAlvH,KAAAwvH,OAMAC,UAAA,SAAAjxG,IAEAA,KAAAwnC,WAAA,IAOAxnC,EAAA+qC,kBAAA/qC,EAAAquE,eAEAhiF,KAAAsgF,MAAA3sE,EAAAzG,SAAAyG,EAAAwV,UAUAwwD,cAAA,WAEA,GAGA/wD,GAAAjpB,EAGArO,EAAA0rD,EAAAxhB,EACA4E,EAAA18B,EAAAwwC,EAPA2wE,KACAC,KAAAC,KAGAC,EAAA,EACAluE,EAAAjhD,KAAA+kB,IAAA,GAAAoqG,EAIA,KAAA1zH,EAAA,EAAA0rD,EAAAh9C,KAAA6xB,SAAA58B,OAA6C+nD,EAAA1rD,EAAQA,IAErDs3B,EAAA5oB,KAAA6xB,SAAAvgC,GACAqO,EAAA9J,KAAAuhG,MAAAxuE,EAAAjwB,EAAAm+C,GAAA,IAAAjhD,KAAAuhG,MAAAxuE,EAAAhwB,EAAAk+C,GAAA,IAAAjhD,KAAAuhG,MAAAxuE,EAAA/vB,EAAAi+C,GAEAr+C,SAAAosH,EAAAllH,IAEAklH,EAAAllH,GAAArO,EACAwzH,EAAA3vH,KAAA6K,KAAA6xB,SAAAvgC,IACAyzH,EAAAzzH,GAAAwzH,EAAA7vH,OAAA,GAKA8vH,EAAAzzH,GAAAyzH,EAAAF,EAAAllH,GASA,IAAAslH,KAEA,KAAA3zH,EAAA,EAAA0rD,EAAAh9C,KAAA8xB,MAAA78B,OAA0C+nD,EAAA1rD,EAAQA,IAAA,CAElDkqC,EAAAx7B,KAAA8xB,MAAAxgC,GAEAkqC,EAAA7pC,EAAAozH,EAAAvpF,EAAA7pC,GACA6pC,EAAA5pC,EAAAmzH,EAAAvpF,EAAA5pC,GACA4pC,EAAApqC,EAAA2zH,EAAAvpF,EAAApqC,GAEAgvC,GAAA5E,EAAA7pC,EAAA6pC,EAAA5pC,EAAA4pC,EAAApqC,EAMA,QAJA8zH,GAAA,GAIAzlH,EAAA,EAAuB,EAAAA,EAAOA,IAE9B,GAAA2gC,EAAA3gC,KAAA2gC,GAAA3gC,EAAA,OAEAylH,EAAAzlH,EACAwlH,EAAA9vH,KAAA7D,EACA,QAQA,IAAAA,EAAA2zH,EAAAhwH,OAAA,EAA+C3D,GAAA,EAAQA,IAAA,CAEvD,GAAA2T,GAAAggH,EAAA3zH,EAIA,KAFA0O,KAAA8xB,MAAAr+B,OAAAwR,EAAA,GAEAvB,EAAA,EAAAwwC,EAAAl0C,KAAAugC,cAAAtrC,OAAmDi/C,EAAAxwC,EAAQA,IAE3D1D,KAAAugC,cAAA78B,GAAAjQ,OAAAwR,EAAA,GAQA,GAAA/M,GAAA8H,KAAA6xB,SAAA58B,OAAA6vH,EAAA7vH,MAEA,OADA+K,MAAA6xB,SAAAizF,EACA5sH,GAIAitH,yBAAA,WAeA,QAAAC,GAAAzzH,EAAAC,GAEA,MAAAD,GAAAuvC,cAAAtvC,EAAAsvC,cAVA,OALApP,GAAA9xB,KAAA8xB,MACA78B,EAAA68B,EAAA78B,OAIA3D,EAAA,EAAsB2D,EAAA3D,EAAYA,IAElCwgC,EAAAxgC,GAAA+zH,IAAA/zH,CAYAwgC,GAAA8N,KAAAwlF,EAIA,IAGAE,GAAAC,EAHAlB,EAAArkH,KAAAugC,cAAA,GACAwhB,EAAA/hD,KAAAugC,cAAA,EAIA8jF,MAAApvH,aAAAqwH,MACAvjE,KAAA9sD,aAAAswH,KAEA,QAAAj0H,GAAA,EAAsB2D,EAAA3D,EAAYA,IAAA,CAElC,GAAAN,GAAA8gC,EAAAxgC,GAAA+zH,GAEAC,MAAAnwH,KAAAkvH,EAAArzH,IACAu0H,KAAApwH,KAAA4sD,EAAA/wD,IAIAs0H,IAAAtlH,KAAAugC,cAAA,GAAA+kF,GACAC,IAAAvlH,KAAAugC,cAAA,GAAAglF,IAIA7sB,OAAA,WA4HA,QAAA8sB,GAAA3rG,EAAA/d,EAAAP,GAEA,MAAAA,GAAAse,EAAA,GAAA/d,EAAA+d,IAAA,GAAA/d,GAIA,QAAA2pH,GAAAx6G,GAEA,GAAAw7D,GAAAx7D,EAAAtS,EAAA0vC,WAAAp9B,EAAArS,EAAAyvC,WAAAp9B,EAAApS,EAAAwvC,UAEA,OAAA5vC,UAAAitH,EAAAj/C,GAEAi/C,EAAAj/C,IAIAi/C,EAAAj/C,GAAAloC,EAAAtpC,OAAA,EACAspC,EAAAppC,KAAA8V,EAAAtS,EAAAsS,EAAArS,EAAAqS,EAAApS,GAEA6sH,EAAAj/C,IAIA,QAAAk/C,GAAAx7G,GAEA,GAAAs8D,GAAAt8D,EAAAqvB,EAAA6O,WAAAl+B,EAAAsvB,EAAA4O,WAAAl+B,EAAAvY,EAAAy2C,UAEA,OAAA5vC,UAAAmtH,EAAAn/C,GAEAm/C,EAAAn/C,IAIAm/C,EAAAn/C,GAAA7kC,EAAA3sC,OACA2sC,EAAAzsC,KAAAgV,EAAA+iG,UAEA0Y,EAAAn/C,IAIA,QAAAo/C,GAAA3mF,GAEA,GAAAunC,GAAAvnC,EAAAvmC,EAAA0vC,WAAAnJ,EAAAtmC,EAAAyvC,UAEA,OAAA5vC,UAAAqtH,EAAAr/C,GAEAq/C,EAAAr/C,IAIAq/C,EAAAr/C,GAAApzC,EAAAp+B,OAAA,EACAo+B,EAAAl+B,KAAA+pC,EAAAvmC,EAAAumC,EAAAtmC,GAEAktH,EAAAr/C,IA/KA,GAAAruD,IACA0gF,UACAnqE,QAAA,IACAxpB,KAAA,WACA4zF,UAAA,mBAUA,IAJA3gF,EAAA0wB,KAAA9oC,KAAA8oC,KACA1wB,EAAAjT,KAAAnF,KAAAmF,KACA,KAAAnF,KAAAzF,OAAA6d,EAAA7d,KAAAyF,KAAAzF,MAEA9B,SAAAuH,KAAA8sB,WAAA,CAEA,GAAAA,GAAA9sB,KAAA8sB,UAEA,QAAAntB,KAAAmtB,GAEAr0B,SAAAq0B,EAAAntB,KAAAyY,EAAAzY,GAAAmtB,EAAAntB,GAIA,OAAAyY,GAMA,OAFAyZ,MAEAvgC,EAAA,EAAsBA,EAAA0O,KAAA6xB,SAAA58B,OAA0B3D,IAAA,CAEhD,GAAAspC,GAAA56B,KAAA6xB,SAAAvgC,EACAugC,GAAA18B,KAAAylC,EAAAjiC,EAAAiiC,EAAAhiC,EAAAgiC,EAAA/hC,GAYA,OARAi5B,MACAyM,KACAmnF,KACA9jF,KACAgkF,KACAvyF,KACAyyF,KAEAx0H,EAAA,EAAsBA,EAAA0O,KAAA8xB,MAAA78B,OAAuB3D,IAAA,CAE7C,GAAAkqC,GAAAx7B,KAAA8xB,MAAAxgC,GAEAy0H,GAAA,EACAC,GAAA,EACAC,EAAAxtH,SAAAuH,KAAAugC,cAAA,GAAAjvC,GACA40H,EAAA1qF,EAAAvwB,OAAAhW,SAAA,EACAkxH,EAAA3qF,EAAA+F,cAAAtsC,OAAA,EACAmxH,EAAA,IAAA5qF,EAAArxB,MAAAqvB,GAAA,IAAAgC,EAAArxB,MAAAsvB,GAAA,IAAA+B,EAAArxB,MAAAvY,EACAy0H,EAAA7qF,EAAAhL,aAAAv7B,OAAA,EAEAqxH,EAAA,CAeA,IAbAA,EAAAd,EAAAc,EAAA,KACAA,EAAAd,EAAAc,EAAA,EAAAP,GACAO,EAAAd,EAAAc,EAAA,EAAAN,GACAM,EAAAd,EAAAc,EAAA,EAAAL,GACAK,EAAAd,EAAAc,EAAA,EAAAJ,GACAI,EAAAd,EAAAc,EAAA,EAAAH,GACAG,EAAAd,EAAAc,EAAA,EAAAF,GACAE,EAAAd,EAAAc,EAAA,EAAAD,GAEAv0F,EAAA38B,KAAAmxH,GACAx0F,EAAA38B,KAAAqmC,EAAA7pC,EAAA6pC,EAAA5pC,EAAA4pC,EAAApqC,GACA0gC,EAAA38B,KAAAqmC,EAAA0F,eAEA+kF,EAAA,CAEA,GAAA1lF,GAAAvgC,KAAAugC,cAAA,GAAAjvC,EAEAwgC,GAAA38B,KACA0wH,EAAAtlF,EAAA,IACAslF,EAAAtlF,EAAA,IACAslF,EAAAtlF,EAAA,KAWA,GANA2lF,GAEAp0F,EAAA38B,KAAAswH,EAAAjqF,EAAAvwB,SAIAk7G,EAAA,CAEA,GAAA5kF,GAAA/F,EAAA+F,aAEAzP,GAAA38B,KACAswH,EAAAlkF,EAAA,IACAkkF,EAAAlkF,EAAA,IACAkkF,EAAAlkF,EAAA,KAWA,GANA6kF,GAEAt0F,EAAA38B,KAAAwwH,EAAAnqF,EAAArxB,QAIAk8G,EAAA,CAEA,GAAA71F,GAAAgL,EAAAhL,YAEAsB,GAAA38B,KACAwwH,EAAAn1F,EAAA,IACAm1F,EAAAn1F,EAAA,IACAm1F,EAAAn1F,EAAA,MAwEA,MARApY,WAEAA,OAAAyZ,WACAzZ,OAAAmmB,UACAqD,EAAA3sC,OAAA,IAAAmjB,OAAAwpB,UACAvO,EAAAp+B,OAAA,IAAAmjB,OAAAib,SACAjb,OAAA0Z,QAEA1Z,GAIA+O,MAAA,WA0BA,UAAAmZ,KAAAlkC,KAAA4D,OAIA5D,KAAA,SAAAyW,GAEA7S,KAAA6xB,YACA7xB,KAAA8xB,SACA9xB,KAAAugC,mBACAvgC,KAAA4hC,SAIA,QAFA/P,GAAAhf,EAAAgf,SAEAvgC,EAAA,EAAA0rD,EAAAnrB,EAAA58B,OAA4C+nD,EAAA1rD,EAAQA,IAEpD0O,KAAA6xB,SAAA18B,KAAA08B,EAAAvgC,GAAA61B,QAMA,QAFAya,GAAA/uB,EAAA+uB,OAEAtwC,EAAA,EAAA0rD,EAAApb,EAAA3sC,OAA0C+nD,EAAA1rD,EAAQA,IAElD0O,KAAA4hC,OAAAzsC,KAAAysC,EAAAtwC,GAAA61B,QAMA,QAFA2K,GAAAjf,EAAAif,MAEAxgC,EAAA,EAAA0rD,EAAAlrB,EAAA78B,OAAyC+nD,EAAA1rD,EAAQA,IAEjD0O,KAAA8xB,MAAA38B,KAAA28B,EAAAxgC,GAAA61B,QAIA,QAAA71B,GAAA,EAAA0rD,EAAAnqC,EAAA0tB,cAAAtrC,OAAwD+nD,EAAA1rD,EAAQA,IAAA,CAEhE,GAAAivC,GAAA1tB,EAAA0tB,cAAAjvC,EAEAmH,UAAAuH,KAAAugC,cAAAjvC,KAEA0O,KAAAugC,cAAAjvC,MAIA,QAAAoS,GAAA,EAAAwwC,EAAA3T,EAAAtrC,OAAkDi/C,EAAAxwC,EAAQA,IAAA,CAI1D,OAFA2vB,GAAAkN,EAAA78B,GAAA6iH,KAEA3oE,EAAA,EAAAC,EAAAxqB,EAAAp+B,OAAyC4oD,EAAAD,EAAQA,IAAA,CAEjD,GAAA1e,GAAA7L,EAAAuqB,EAEA2oE,GAAApxH,KAAA+pC,EAAA/X,SAIAnnB,KAAAugC,cAAAjvC,GAAA6D,KAAAoxH,IAMA,MAAAvmH,OAIAmhB,QAAA,WAEAnhB,KAAAgW,eAA2B7Q,KAAA,cAM3B,IAAA08C,IAAA,CA6CA3hD,QAAA+J,OAAA63C,GAAA/hD,UAAAupB,EAAAvpB,WAEAiO,mBAAAsyB,GAAAvgC,UAAAiO,mBACAo3D,sBAAA9kC,GAAAvgC,UAAAqlE,sBAEAsT,mBAAA,aAMAC,qBAAA,aAMA6tC,cAAA,SAAAt5G,GAQA,OANAmzB,GAEAa,EADAjB,KAGAnO,EAAA5kB,EAAA4kB,MAEAxgC,EAAA,EAAsBA,EAAAwgC,EAAA78B,OAAkB3D,IAAA,CAExC,GAAAkqC,GAAA1J,EAAAxgC,EAIAkqC,GAAA0F,oBAEAA,EAAA1F,EAAA0F,cAEAzoC,SAAA4nC,IAEAA,EAAA/vB,MAAA,EAAAhf,EAAA+uC,EAAA3pC,MACAupC,EAAA9qC,KAAAkrC,IAIAA,GACA3pC,MAAA,EAAApF,EACA4vC,kBAOAzoC,SAAA4nC,IAEAA,EAAA/vB,MAAA,EAAAhf,EAAA+uC,EAAA3pC,MACAupC,EAAA9qC,KAAAkrC,IAIArgC,KAAAigC,UAIAwmF,aAAA,SAAAv5G,GAEA,GAYAw5G,GAZA50F,EAAA5kB,EAAA4kB,MACAD,EAAA3kB,EAAA2kB,SACA0O,EAAArzB,EAAAqzB,cAEA0lF,EAAA1lF,EAAA,IAAAA,EAAA,GAAAtrC,OAAA,EACA0xH,EAAApmF,EAAA,IAAAA,EAAA,GAAAtrC,OAAA,EAIA0rC,EAAAzzB,EAAAyzB,aACAimF,EAAAjmF,EAAA1rC,MAIA,IAAA2xH,EAAA,GAEAF,IAEA,QAAAp1H,GAAA,EAAuBs1H,EAAAt1H,EAAwBA,IAE/Co1H,EAAAp1H,KAIA0O,MAAA2gC,aAAA7kC,SAAA4qH,EAIA,GAGAG,GAHApvE,EAAAvqC,EAAAuqC,aACAqvE,EAAArvE,EAAAxiD,MAIA,IAAA6xH,EAAA,GAEAD,IAEA,QAAAv1H,GAAA,EAAuBw1H,EAAAx1H,EAAwBA,IAE/Cu1H,EAAAv1H,KAIA0O,MAAA2gC,aAAA11B,OAAA47G,EAcA,OARA1lE,GAAAj0C,EAAAi0C,YACAD,EAAAh0C,EAAAg0C,YAEA6lE,EAAA5lE,EAAAlsD,SAAA48B,EAAA58B,OACA+xH,EAAA9lE,EAAAjsD,SAAA48B,EAAA58B,OAIA3D,EAAA,EAAsBA,EAAAwgC,EAAA78B,OAAkB3D,IAAA,CAExC,GAAAkqC,GAAA1J,EAAAxgC,EAEA0O,MAAA6xB,SAAA18B,KAAA08B,EAAA2J,EAAA7pC,GAAAkgC,EAAA2J,EAAA5pC,GAAAigC,EAAA2J,EAAApqC,GAEA,IAAAmwC,GAAA/F,EAAA+F,aAEA,QAAAA,EAAAtsC,OAEA+K,KAAAu+B,QAAAppC,KAAAosC,EAAA,GAAAA,EAAA,GAAAA,EAAA,QAEQ,CAER,GAAAt2B,GAAAuwB,EAAAvwB,MAEAjL,MAAAu+B,QAAAppC,KAAA8V,OAIA,GAAAulB,GAAAgL,EAAAhL,YAEA,QAAAA,EAAAv7B,OAEA+K,KAAA4hC,OAAAzsC,KAAAq7B,EAAA,GAAAA,EAAA,GAAAA,EAAA,QAEQ,CAER,GAAArmB,GAAAqxB,EAAArxB,KAEAnK,MAAA4hC,OAAAzsC,KAAAgV,OAIA,GAAA87G,KAAA,GAEA,GAAAxkF,GAAAlB,EAAA,GAAAjvC;AAEAmH,SAAAgpC,EAEAzhC,KAAAqzB,IAAAl+B,KAAAssC,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAMAzhC,KAAAqzB,IAAAl+B,KAAA,GAAAyX,GAAA,GAAAA,GAAA,GAAAA,IAMA,GAAA+5G,KAAA,GAEA,GAAAllF,GAAAlB,EAAA,GAAAjvC,EAEAmH,UAAAgpC,EAEAzhC,KAAA+hD,KAAA5sD,KAAAssC,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAMAzhC,KAAA+hD,KAAA5sD,KAAA,GAAAyX,GAAA,GAAAA,GAAA,GAAAA,IAQA,OAAAlJ,GAAA,EAAuBkjH,EAAAljH,EAAwBA,IAAA,CAE/C,GAAAujH,GAAAtmF,EAAAj9B,GAAAmuB,QAEA60F,GAAAhjH,GAAAvO,KAAA8xH,EAAAzrF,EAAA7pC,GAAAs1H,EAAAzrF,EAAA5pC,GAAAq1H,EAAAzrF,EAAApqC,IAIA,OAAAsS,GAAA,EAAuBojH,EAAApjH,EAAwBA,IAAA,CAE/C,GAAAwjH,GAAAzvE,EAAA/zC,GAAA69B,cAAAjwC,EAEAu1H,GAAAnjH,GAAAvO,KAAA+xH,EAAAv1H,EAAAu1H,EAAAt1H,EAAAs1H,EAAA91H,GAMA21H,GAEA/mH,KAAAmhD,YAAAhsD,KAAAgsD,EAAA3lB,EAAA7pC,GAAAwvD,EAAA3lB,EAAA5pC,GAAAuvD,EAAA3lB,EAAApqC,IAIA41H,GAEAhnH,KAAAkhD,YAAA/rD,KAAA+rD,EAAA1lB,EAAA7pC,GAAAuvD,EAAA1lB,EAAA5pC,GAAAsvD,EAAA1lB,EAAApqC,IAcA,MARA4O,MAAAwmH,cAAAt5G,GAEAlN,KAAAuhD,mBAAAr0C,EAAAq0C,mBACAvhD,KAAAyhD,kBAAAv0C,EAAAu0C,kBACAzhD,KAAA0hD,iBAAAx0C,EAAAw0C,iBACA1hD,KAAAwhD,cAAAt0C,EAAAs0C,cACAxhD,KAAA4hD,iBAAA10C,EAAA00C,iBAEA5hD,MAIAmhB,QAAA,WAEAnhB,KAAAgW,eAA2B7Q,KAAA,eAkC3BjF,OAAA+J,OAAA81B,GAAAhgC,UAAAupB,EAAAvpB,WAEA+5C,kBAAA,EAEAqtE,SAAA,WAEA,MAAAnnH,MAAAsG,OAIA29C,SAAA,SAAA39C,GAEAtG,KAAAsG,SAIA49C,aAAA,SAAA3pD,EAAA+1D,GAEA,OAAAA,KAAA2xD,sBAAA,IAAA3xD,KAAA/K,iCAAA,MAIAvlD,MAAAkkD,aAAA3pD,EAAA,GAAAmlD,IAAAp4C,UAAA,GAAAA,UAAA,KAMA,UAAA/M,MAGAyF,MAAAikD,SAAAqM,IAMAtwD,KAAAggC,WAAAzlC,GAAA+1D,EAEAtwD,OAIAonH,aAAA,SAAA7sH,GAEA,MAAAyF,MAAAggC,WAAAzlC,IAIAg5E,gBAAA,SAAAh5E,GAIA,aAFAyF,MAAAggC,WAAAzlC,GAEAyF,MAIA6jD,SAAA,SAAAntD,EAAA4Z,EAAA4wB,GAEAlhC,KAAAigC,OAAA9qC,MAEAuB,QACA4Z,QACA4wB,cAAAzoC,SAAAyoC,IAAA,KAMAmmF,YAAA,WAEArnH,KAAAigC,WAIAqnF,aAAA,SAAA5wH,EAAA4Z,GAEAtQ,KAAAgiD,UAAAtrD,QACAsJ,KAAAgiD,UAAA1xC,SAIAgE,YAAA,SAAA6U,GAEA,GAAArtB,GAAAkE,KAAAggC,WAAAlkC,QAEArD,UAAAqD,IAEAqtB,EAAAq6E,oBAAA1nG,EAAAqkC,OACArkC,EAAAgN,aAAA,EAIA,IAAAmC,GAAAjL,KAAAggC,WAAA/0B,MAEA,IAAAxS,SAAAwS,EAAA,CAEA,GAAAqzB,IAAA,GAAAjU,KAAA4P,gBAAA9Q,EAEAmV,GAAAklE,oBAAAv4F,EAAAk1B,OACAl1B,EAAAnC,aAAA,EAgBA,MAZA,QAAA9I,KAAAqN,aAEArN,KAAAgO,qBAIA,OAAAhO,KAAAqhD,gBAEArhD,KAAAolE,wBAIAplE,MAIA+P,QAAA,WAIA,GAAAgrG,EAEA,iBAAA/qG,GAQA,MANAvX,UAAAsiH,MAAA,GAAAvsG,IAEAusG,EAAAxmG,cAAAvE,GAEAhQ,KAAAsU,YAAAymG,GAEA/6G,SAMAkQ,QAAA,WAIA,GAAA6qG,EAEA,iBAAA/qG,GAQA,MANAvX,UAAAsiH,MAAA,GAAAvsG,IAEAusG,EAAArkG,cAAA1G,GAEAhQ,KAAAsU,YAAAymG,GAEA/6G,SAMAmQ,QAAA,WAIA,GAAA4qG,EAEA,iBAAA/qG,GAQA,MANAvX,UAAAsiH,MAAA,GAAAvsG,IAEAusG,EAAAtW,cAAAz0F,GAEAhQ,KAAAsU,YAAAymG,GAEA/6G,SAMAuvB,UAAA,WAIA,GAAAwrF,EAEA,iBAAApiH,EAAAC,EAAAC,GAQA,MANAJ,UAAAsiH,MAAA,GAAAvsG,IAEAusG,EAAAvW,gBAAA7rG,EAAAC,EAAAC,GAEAmH,KAAAsU,YAAAymG,GAEA/6G,SAMAoI,MAAA,WAIA,GAAA2yG,EAEA,iBAAApiH,EAAAC,EAAAC,GAQA,MANAJ,UAAAsiH,MAAA,GAAAvsG,IAEAusG,EAAA3lG,UAAAzc,EAAAC,EAAAC,GAEAmH,KAAAsU,YAAAymG,GAEA/6G,SAMAsoB,OAAA,WAEA,GAAAxoB,EAEA,iBAAAk+B,GAEAvlC,SAAAqH,MAAA,GAAA2Q,KAEA3Q,EAAAwoB,OAAA0V,GAEAl+B,EAAAkiF,eAEAhiF,KAAAsU,YAAAxU,EAAAqpB,YAMAM,OAAA,WAEAzpB,KAAAgO,oBAEA,IAAAwC,GAAAxQ,KAAAqN,YAAA2qG,YAAA32E,QAIA,OAFArhC,MAAAuvB,UAAA/e,EAAA7X,EAAA6X,EAAA5X,EAAA4X,EAAA3X,GAEA2X,GAIAogD,cAAA,SAAAt9D,GAIA,GAAA4Z,GAAA5Z,EAAA4Z,QAEA,IAAA5Z,KAAA+nD,UAAA/nD,KAAA8nD,OAAA,CAEA,GAAAlb,GAAA,GAAA0gB,IAAA,EAAA1zC,EAAA2kB,SAAA58B,OAAA,GACA2sC,EAAA,GAAAgf,IAAA,EAAA1zC,EAAA00B,OAAA3sC,OAAA,EAKA,IAHA+K,KAAAkkD,aAAA,WAAAhkB,EAAAsiF,kBAAAt1G,EAAA2kB,WACA7xB,KAAAkkD,aAAA,QAAAtiB,EAAAwgF,gBAAAl1G,EAAA00B,SAEA10B,EAAAk0C,eAAAl0C,EAAAk0C,cAAAnsD,SAAAiY,EAAA2kB,SAAA58B,OAAA,CAEA,GAAAmsD,GAAA,GAAAR,IAAA1zC,EAAAk0C,cAAAnsD,OAAA,EAEA+K,MAAAkkD,aAAA,eAAA9C,EAAA+gE,UAAAj1G,EAAAk0C,gBAIA,OAAAl0C,EAAAm0C,iBAEArhD,KAAAqhD,eAAAn0C,EAAAm0C,eAAAl6B,SAIA,OAAAja,EAAAG,cAEArN,KAAAqN,YAAAH,EAAAG,YAAA8Z,aAIO7zB,MAAA6nD,QAEPjuC,KAAA8sC,YAEAh6C,KAAAymH,aAAAv5G,EAMA,OAAAlN,OAIA8wD,iBAAA,SAAAx9D,GAEA,GAAA4Z,GAAA5Z,EAAA4Z,QAEA,IAAA5Z,KAAA6nD,OAAA,CAEA,GAAAosE,GAAAr6G,EAAAs6G,gBASA,IAPAt6G,EAAAo0C,sBAAA,IAEAimE,EAAA9uH,OACAyU,EAAAo0C,oBAAA,GAIA7oD,SAAA8uH,EAEA,MAAAvnH,MAAAymH,aAAAv5G,EAIAq6G,GAAAhmE,mBAAAr0C,EAAAq0C,mBACAgmE,EAAA9lE,kBAAAv0C,EAAAu0C,kBACA8lE,EAAA7lE,iBAAAx0C,EAAAw0C,iBACA6lE,EAAA/lE,cAAAt0C,EAAAs0C,cACA+lE,EAAA3lE,iBAAA10C,EAAA00C,iBAEA10C,EAAAq0C,oBAAA,EACAr0C,EAAAu0C,mBAAA,EACAv0C,EAAAw0C,kBAAA,EACAx0C,EAAAs0C,eAAA,EACAt0C,EAAA00C,kBAAA,EAEA10C,EAAAq6G,EAIA,GAAAj3D,EAsFA,OApFApjD,GAAAq0C,sBAAA,IAEA+O,EAAAtwD,KAAAggC,WAAAlkC,SAEArD,SAAA63D,IAEAA,EAAAkyD,kBAAAt1G,EAAA2kB,UACAy+B,EAAAxnD,aAAA,GAIAoE,EAAAq0C,oBAAA,GAIAr0C,EAAAu0C,qBAAA,IAEA6O,EAAAtwD,KAAAggC,WAAA/0B,OAEAxS,SAAA63D,IAEAA,EAAAkyD,kBAAAt1G,EAAAqxB,SACA+xB,EAAAxnD,aAAA,GAIAoE,EAAAu0C,mBAAA,GAIAv0C,EAAAw0C,oBAAA,IAEA4O,EAAAtwD,KAAAggC,WAAA71B,MAEA1R,SAAA63D,IAEAA,EAAA8xD,gBAAAl1G,EAAA00B,QACA0uB,EAAAxnD,aAAA,GAIAoE,EAAAw0C,kBAAA,GAIAx0C,EAAAs0C,gBAEA8O,EAAAtwD,KAAAggC,WAAAd,GAEAzmC,SAAA63D,IAEAA,EAAAgyD,kBAAAp1G,EAAAmmB,KACAi9B,EAAAxnD,aAAA,GAIAoE,EAAAs0C,eAAA,GAIAt0C,EAAAy0C,0BAEA2O,EAAAtwD,KAAAggC,WAAAynF,aAEAhvH,SAAA63D,IAEAA,EAAA6xD,UAAAj1G,EAAAk0C,eACAkP,EAAAxnD,aAAA,GAIAoE,EAAAy0C,yBAAA,GAIAz0C,EAAA00C,mBAEA10C,EAAAs5G,cAAAlzH,EAAA4Z,UACAlN,KAAAigC,OAAA/yB,EAAA+yB,OAEA/yB,EAAA00C,kBAAA,GAIA5hD,MAIAymH,aAAA,SAAAv5G,GAIA,MAFAA,GAAAs6G,kBAAA,GAAA1lE,KAAA2kE,aAAAv5G,GAEAlN,KAAA0nH,mBAAAx6G,EAAAs6G,mBAIAE,mBAAA,SAAAx6G,GAEA,GAAAgzB,GAAA,GAAAsK,cAAA,EAAAt9B,EAAA2kB,SAAA58B,OAGA,IAFA+K,KAAAkkD,aAAA,cAAAxE,IAAAxf,EAAA,GAAAsiF,kBAAAt1G,EAAA2kB,WAEA3kB,EAAAqxB,QAAAtpC,OAAA,GAEA,GAAAspC,GAAA,GAAAiM,cAAA,EAAAt9B,EAAAqxB,QAAAtpC,OACA+K,MAAAkkD,aAAA,YAAAxE,IAAAnhB,EAAA,GAAAikF,kBAAAt1G,EAAAqxB,UAIA,GAAArxB,EAAA00B,OAAA3sC,OAAA,GAEA,GAAA2sC,GAAA,GAAA4I,cAAA,EAAAt9B,EAAA00B,OAAA3sC,OACA+K,MAAAkkD,aAAA,WAAAxE,IAAA9d,EAAA,GAAAwgF,gBAAAl1G,EAAA00B,SAIA,GAAA10B,EAAAmmB,IAAAp+B,OAAA,GAEA,GAAAo+B,GAAA,GAAAmX,cAAA,EAAAt9B,EAAAmmB,IAAAp+B,OACA+K,MAAAkkD,aAAA,QAAAxE,IAAArsB,EAAA,GAAAivF,kBAAAp1G,EAAAmmB,MAIA,GAAAnmB,EAAA60C,KAAA9sD,OAAA,GAEA,GAAA8sD,GAAA,GAAAvX,cAAA,EAAAt9B,EAAA60C,KAAA9sD,OACA+K,MAAAkkD,aAAA,SAAAxE,IAAAqC,EAAA,GAAAugE,kBAAAp1G,EAAA60C,OAIA,GAAA70C,EAAAkzB,QAAAnrC,OAAA,GAEA,GAAAw8D,GAAAvkD,EAAA2kB,SAAA58B,OAAA,MAAA0rD,YAAA9Q,YACAzP,EAAA,GAAAqxB,GAAA,EAAAvkD,EAAAkzB,QAAAnrC,OACA+K,MAAAikD,SAAA,GAAAvE,IAAAtf,EAAA,GAAAiiF,iBAAAn1G,EAAAkzB,UAMApgC,KAAAigC,OAAA/yB,EAAA+yB,MAIA,QAAA1lC,KAAA2S,GAAAyzB,aAAA,CAKA,OAHAR,MACAQ,EAAAzzB,EAAAyzB,aAAApmC,GAEAjJ,EAAA,EAAAi7B,EAAAoU,EAAA1rC,OAAgDs3B,EAAAj7B,EAAOA,IAAA,CAEvD,GAAA21H,GAAAtmF,EAAArvC,GAEAg/D,EAAA,GAAA1P,IAAA,EAAAqmE,EAAAhyH,OAAA,EAEAkrC,GAAAhrC,KAAAm7D,EAAAkyD,kBAAAyE,IAIAjnH,KAAA+5C,gBAAAx/C,GAAA4lC,EAMA,GAAAjzB,EAAAi0C,YAAAlsD,OAAA,GAEA,GAAAksD,GAAA,GAAAP,IAAA,EAAA1zC,EAAAi0C,YAAAlsD,OAAA,EACA+K,MAAAkkD,aAAA,YAAA/C,EAAAshE,kBAAAv1G,EAAAi0C,cAIA,GAAAj0C,EAAAg0C,YAAAjsD,OAAA,GAEA,GAAAisD,GAAA,GAAAN,IAAA,EAAA1zC,EAAAg0C,YAAAjsD,OAAA,EACA+K,MAAAkkD,aAAA,aAAAhD,EAAAuhE,kBAAAv1G,EAAAg0C,cAkBA,MAZA,QAAAh0C,EAAAm0C,iBAEArhD,KAAAqhD,eAAAn0C,EAAAm0C,eAAAl6B,SAIA,OAAAja,EAAAG,cAEArN,KAAAqN,YAAAH,EAAAG,YAAA8Z,SAIAnnB,MAIAgO,mBAAA,WAEA,OAAAhO,KAAAqN,cAEArN,KAAAqN,YAAA,GAAAgwB,IAIA,IAAA6C,GAAAlgC,KAAAggC,WAAAlkC,SAAAqkC,KAEA1nC,UAAAynC,EAEAlgC,KAAAqN,YAAAwrG,aAAA34E,GAIAlgC,KAAAqN,YAAAqsB,YAIApqB,MAAAtP,KAAAqN,YAAAvX,IAAA6C,IAAA2W,MAAAtP,KAAAqN,YAAAvX,IAAA8C,IAAA0W,MAAAtP,KAAAqN,YAAAvX,IAAA+C,IAQAusE,sBAAA,WAEA,GAAA4tB,GAAA,GAAA31D,IACAW,EAAA,GAAAhvB,EAEA,mBAEA,OAAAhP,KAAAqhD,iBAEArhD,KAAAqhD,eAAA,GAAA/I,IAIA,IAAApY,GAAAlgC,KAAAggC,WAAAlkC,QAEA,IAAAokC,EAAA,CAEA,GAAAC,GAAAD,EAAAC,MACA1W,EAAAzpB,KAAAqhD,eAAA53B,MAEAupE,GAAA6lB,aAAA14E,GACA6yD,EAAAglB,UAAAvuF,EAOA,QAFAgwF,GAAA,EAEAnoH,EAAA,EAAA0rD,EAAA7c,EAAAlrC,OAA2C+nD,EAAA1rD,EAAQA,GAAA,EAEnD0sC,EAAA/lB,UAAAkoB,EAAA7uC,GACAmoH,EAAA5jH,KAAA6S,IAAA+wG,EAAAhwF,EAAAlB,kBAAAyV,GAIAh+B,MAAAqhD,eAAAjtC,OAAAve,KAAAiD,KAAA2gH,GAEAnqG,MAAAtP,KAAAqhD,eAAAjtC,aAYAskE,mBAAA,aAMAC,qBAAA,WAEA,GAAAryE,GAAAtG,KAAAsG,MACA05B,EAAAhgC,KAAAggC,WACAC,EAAAjgC,KAAAigC,MAEA,IAAAD,EAAAlkC,SAAA,CAEA,GAAAokC,GAAAF,EAAAlkC,SAAAqkC,KAEA,IAAA1nC,SAAAunC,EAAA/0B,OAEAjL,KAAAkkD,aAAA,YAAAxE,IAAA,GAAAlV,cAAAtK,EAAAjrC,QAAA,QAQA,QAFAkrC,GAAAH,EAAA/0B,OAAAk1B,MAEA7uC,EAAA,EAAA0rD,EAAA7c,EAAAlrC,OAA2C+nD,EAAA1rD,EAAQA,IAEnD6uC,EAAA7uC,GAAA,CAMA,IAEA2xH,GAAAC,EAAAC,EAFA5kF,EAAAyB,EAAA/0B,OAAAk1B,MAIAwnF,EAAA,GAAA34G,GACA44G,EAAA,GAAA54G,GACA64G,EAAA,GAAA74G,GAEA9Y,EAAA,GAAA8Y,GACAg0G,EAAA,GAAAh0G,EAIA,IAAA1I,EAAA,CAEA,GAAA85B,GAAA95B,EAAA65B,KAEA,KAAAF,EAAAhrC,QAEA+K,KAAA6jD,SAAA,EAAAzjB,EAAAnrC,OAIA,QAAAyO,GAAA,EAAAwwC,EAAAjU,EAAAhrC,OAA4Ci/C,EAAAxwC,IAAQA,EAOpD,OALA28B,GAAAJ,EAAAv8B,GAEAhN,EAAA2pC,EAAA3pC,MACA4Z,EAAA+vB,EAAA/vB,MAEAhf,EAAAoF,EAAAsmD,EAAAtmD,EAAA4Z,EAAiD0sC,EAAA1rD,EAAQA,GAAA,EAEzD2xH,EAAA,EAAA7iF,EAAA9uC,EAAA,GACA4xH,EAAA,EAAA9iF,EAAA9uC,EAAA,GACA6xH,EAAA,EAAA/iF,EAAA9uC,EAAA,GAEAq2H,EAAA1vG,UAAAioB,EAAA+iF,GACA2E,EAAA3vG,UAAAioB,EAAAgjF,GACA2E,EAAA5vG,UAAAioB,EAAAijF,GAEAjtH,EAAA4sB,WAAA+kG,EAAAD,GACA5E,EAAAlgG,WAAA6kG,EAAAC,GACA1xH,EAAA4nG,MAAAklB,GAEAzkF,EAAA0kF,IAAA/sH,EAAAyC,EACA4lC,EAAA0kF,EAAA,IAAA/sH,EAAA0C,EACA2lC,EAAA0kF,EAAA,IAAA/sH,EAAA2C,EAEA0lC,EAAA2kF,IAAAhtH,EAAAyC,EACA4lC,EAAA2kF,EAAA,IAAAhtH,EAAA0C,EACA2lC,EAAA2kF,EAAA,IAAAhtH,EAAA2C,EAEA0lC,EAAA4kF,IAAAjtH,EAAAyC,EACA4lC,EAAA4kF,EAAA,IAAAjtH,EAAA0C,EACA2lC,EAAA4kF,EAAA,IAAAjtH,EAAA2C,MAUA,QAAAvH,GAAA,EAAA0rD,EAAA9c,EAAAjrC,OAA+C+nD,EAAA1rD,EAAQA,GAAA,EAEvDq2H,EAAA1vG,UAAAioB,EAAA5uC,GACAs2H,EAAA3vG,UAAAioB,EAAA5uC,EAAA,GACAu2H,EAAA5vG,UAAAioB,EAAA5uC,EAAA,GAEA4E,EAAA4sB,WAAA+kG,EAAAD,GACA5E,EAAAlgG,WAAA6kG,EAAAC,GACA1xH,EAAA4nG,MAAAklB,GAEAzkF,EAAAjtC,GAAA4E,EAAAyC,EACA4lC,EAAAjtC,EAAA,GAAA4E,EAAA0C,EACA2lC,EAAAjtC,EAAA,GAAA4E,EAAA2C,EAEA0lC,EAAAjtC,EAAA,GAAA4E,EAAAyC,EACA4lC,EAAAjtC,EAAA,GAAA4E,EAAA0C,EACA2lC,EAAAjtC,EAAA,GAAA4E,EAAA2C,EAEA0lC,EAAAjtC,EAAA,GAAA4E,EAAAyC,EACA4lC,EAAAjtC,EAAA,GAAA4E,EAAA0C,EACA2lC,EAAAjtC,EAAA,GAAA4E,EAAA2C,CAMAmH,MAAA8nH,mBAEA9nF,EAAA/0B,OAAAnC,aAAA,IAMAw3E,MAAA,SAAApzE,EAAAsD,GAEA,IAAAtD,KAAA4sC,qBAAA,GAOArhD,SAAA+X,MAAA,EAEA,IAAAwvB,GAAAhgC,KAAAggC,UAEA,QAAArgC,KAAAqgC,GAEA,GAAAvnC,SAAAyU,EAAA8yB,WAAArgC,GAUA,OARAooH,GAAA/nF,EAAArgC,GACAqoH,EAAAD,EAAA5nF,MAEA8nF,EAAA/6G,EAAA8yB,WAAArgC,GACAuoH,EAAAD,EAAA9nF,MAEAgoF,EAAAF,EAAAtoE,SAEAruD,EAAA,EAAAoS,EAAAykH,EAAA33G,EAAmDlf,EAAA42H,EAAAjzH,OAA4B3D,IAAAoS,IAE/EskH,EAAAtkH,GAAAwkH,EAAA52H,EAMA,OAAA0O,QAIA8nH,iBAAA,WAMA,OAFAnvH,GAAAC,EAAAC,EAAA4G,EAFA8+B,EAAAv+B,KAAAggC,WAAA/0B,OAAAk1B,MAIA7uC,EAAA,EAAA0rD,EAAAze,EAAAtpC,OAA2C+nD,EAAA1rD,EAAQA,GAAA,EAEnDqH,EAAA4lC,EAAAjtC,GACAsH,EAAA2lC,EAAAjtC,EAAA,GACAuH,EAAA0lC,EAAAjtC,EAAA,GAEAmO,EAAA,EAAA5J,KAAAiD,KAAAH,IAAAC,IAAAC,KAEA0lC,EAAAjtC,IAAAmO,EACA8+B,EAAAjtC,EAAA,IAAAmO,EACA8+B,EAAAjtC,EAAA,IAAAmO,GAMA2oH,aAAA,WAEA,UAAApoH,KAAAsG,MAGA,MAAAtG,KAIA,IAAA2+E,GAAA,GAAA5+C,IAEAK,EAAApgC,KAAAsG,MAAA65B,MACAH,EAAAhgC,KAAAggC,UAEA,QAAAzlC,KAAAylC,GAAA,CAWA,OATAswB,GAAAtwB,EAAAzlC,GAEA4lC,EAAAmwB,EAAAnwB,MACAwf,EAAA2Q,EAAA3Q,SAEA0oE,EAAA,GAAAloF,GAAA5W,YAAA6W,EAAAnrC,OAAA0qD,GAEAr5C,EAAA,EAAAoxE,EAAA,EAEApmF,EAAA,EAAAi7B,EAAA6T,EAAAnrC,OAA2Cs3B,EAAAj7B,EAAOA,IAAA,CAElDgV,EAAA85B,EAAA9uC,GAAAquD,CAEA,QAAAj8C,GAAA,EAAwBi8C,EAAAj8C,EAAcA,IAEtC2kH,EAAA3wC,KAAAv3C,EAAA75B,KAMAq4E,EAAAz6B,aAAA3pD,EAAA,GAAAmlD,IAAA2oE,EAAA1oE,IAIA,MAAAg/B,IAIA+Z,OAAA,WAEA,GAAAtgF,IACA0gF,UACAnqE,QAAA,IACAxpB,KAAA,iBACA4zF,UAAA,yBAUA,IAJA3gF,EAAA0wB,KAAA9oC,KAAA8oC,KACA1wB,EAAAjT,KAAAnF,KAAAmF,KACA,KAAAnF,KAAAzF,OAAA6d,EAAA7d,KAAAyF,KAAAzF,MAEA9B,SAAAuH,KAAA8sB,WAAA,CAEA,GAAAA,GAAA9sB,KAAA8sB,UAEA,QAAAntB,KAAAmtB,GAEAr0B,SAAAq0B,EAAAntB,KAAAyY,EAAAzY,GAAAmtB,EAAAntB,GAIA,OAAAyY,GAIAA,QAAmB4nB,cAEnB,IAAA15B,GAAAtG,KAAAsG,KAEA,WAAAA,EAAA,CAEA,GAAA65B,GAAArmB,MAAA/Z,UAAAtO,MAAAP,KAAAoV,EAAA65B,MAEA/nB,QAAA9R,OACAnB,KAAAmB,EAAA65B,MAAA5W,YAAAhvB,KACA4lC,SAKA,GAAAH,GAAAhgC,KAAAggC,UAEA,QAAArgC,KAAAqgC,GAAA,CAEA,GAAAswB,GAAAtwB,EAAArgC,GAEAwgC,EAAArmB,MAAA/Z,UAAAtO,MAAAP,KAAAo/D,EAAAnwB,MAEA/nB,QAAA4nB,WAAArgC,IACAggD,SAAA2Q,EAAA3Q,SACAx6C,KAAAmrD,EAAAnwB,MAAA5W,YAAAhvB,KACA4lC,QACAyf,WAAA0Q,EAAA1Q,YAKA,GAAA3f,GAAAjgC,KAAAigC,MAEAA,GAAAhrC,OAAA,IAEAmjB,OAAA6nB,OAAAj5B,KAAA+B,MAAA/B,KAAAC,UAAAg5B,IAIA,IAAAohB,GAAArhD,KAAAqhD,cAWA,OATA,QAAAA,IAEAjpC,OAAAipC,gBACA53B,OAAA43B,EAAA53B,OAAAyhB,UACA92B,OAAAitC,EAAAjtC,SAKAgE,GAIA+O,MAAA,WA0BA,UAAA4Y,KAAA3jC,KAAA4D,OAIA5D,KAAA,SAAAyW,GAEA,GAAAvM,GAAAuM,EAAAvM,KAEA,QAAAA,GAEAtG,KAAAikD,SAAA39C,EAAA6gB,QAIA,IAAA6Y,GAAAntB,EAAAmtB,UAEA,QAAAzlC,KAAAylC,GAAA,CAEA,GAAAswB,GAAAtwB,EAAAzlC,EACAyF,MAAAkkD,aAAA3pD,EAAA+1D,EAAAnpC,SAMA,OAFA8Y,GAAAptB,EAAAotB,OAEA3uC,EAAA,EAAAi7B,EAAA0T,EAAAhrC,OAAyCs3B,EAAAj7B,EAAOA,IAAA,CAEhD,GAAA+uC,GAAAJ,EAAA3uC,EACA0O,MAAA6jD,SAAAxjB,EAAA3pC,MAAA2pC,EAAA/vB,MAAA+vB,EAAAa,eAIA,MAAAlhC,OAIAmhB,QAAA,WAEAnhB,KAAAgW,eAA2B7Q,KAAA,eAM3B46B,GAAAuxC,SAAA,MAwBAl8E,GAAA2K,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAA5Y,GAAA1Q,YAEAwpB,YAAAn0B,GAEA+lD,QAAA,EAEAmtE,YAAA,SAAAzuG,GAEA7Z,KAAAkiD,SAAAroC,GAIAzd,KAAA,SAAAyW,GAMA,MAJApC,IAAA1Q,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAkiD,SAAArvC,EAAAqvC,SAEAliD,MAIAoiD,mBAAA,WAEA,GAAAzhB,GAAA3gC,KAAAkN,SAAAyzB,YAEA,IAAAloC,SAAAkoC,KAAA1rC,OAAA,GAEA+K,KAAA6gC,yBACA7gC,KAAAuoH,wBAEA,QAAAp3H,GAAA,EAAAq3H,EAAA7nF,EAAA1rC,OAAiDuzH,EAAAr3H,EAAQA,IAEzD6O,KAAA6gC,sBAAA1rC,KAAA,GACA6K,KAAAuoH,sBAAA5nF,EAAAxvC,GAAAoJ,MAAApJ,IAQA4C,QAAA,WAuBA,QAAA00H,GAAAv5D,EAAAxW,EAAAC,EAAAC,EAAApnB,EAAAC,EAAAC,GAUA,MARAstB,IAAAkiE,mBAAAhyD,EAAAxW,EAAAC,EAAAC,EAAA8vE,GAEAl3F,EAAAhY,eAAAkvG,EAAA/vH,GACA84B,EAAAjY,eAAAkvG,EAAA9vH,GACA84B,EAAAlY,eAAAkvG,EAAA7vH,GAEA24B,EAAA12B,IAAA22B,GAAA32B,IAAA42B,GAEAF,EAAArK,QAIA,QAAAwhG,GAAAr1H,EAAAe,EAAAC,EAAAqzH,EAAAC,EAAAC,EAAA34D,GAEA,GAAAl7D,GACAyV,EAAAnW,EAAAmW,QAYA,IARAzV,EAFAyV,EAAA6L,OAAA8rB,GAEA9sC,EAAAmqH,kBAAAoJ,EAAAD,EAAAD,GAAA,EAAAz4D,GAIA56D,EAAAmqH,kBAAAkJ,EAAAC,EAAAC,EAAAp+G,EAAA6L,OAAAC,GAAA25C,GAIA,OAAAl7D,EAAA,WAEA40H,GAAAxsH,KAAA8yD,GACA05D,EAAAnqF,aAAAnrC,EAAAoB,YAEA,IAAAuY,GAAA5Y,EAAAC,IAAAC,OAAAiZ,WAAAo7G,EAEA,OAAA37G,GAAA5Y,EAAA+G,MAAA6R,EAAA5Y,EAAAgH,IAAA,MAGA4R,WACAiiD,MAAA05D,EAAAzhG,QACA7zB,UAKA,QAAAu1H,GAAAv1H,EAAAe,EAAAC,EAAA4rC,EAAA7M,EAAA1hC,EAAAC,EAAAR,GAEA6xH,EAAAhrG,UAAAioB,EAAA,EAAAvuC,GACAuxH,EAAAjrG,UAAAioB,EAAA,EAAAtuC,GACAuxH,EAAAlrG,UAAAioB,EAAA,EAAA9uC,EAEA,IAAA03H,GAAAH,EAAAr1H,EAAAe,EAAAC,EAAA2uH,EAAAC,EAAAC,EAAA4F,EAmBA,OAjBAD,KAEAz1F,IAEA21F,EAAA/wG,UAAAob,EAAA,EAAA1hC,GACAs3H,EAAAhxG,UAAAob,EAAA,EAAAzhC,GACAs3H,EAAAjxG,UAAAob,EAAA,EAAAjiC,GAEA03H,EAAA5pF,GAAAupF,EAAAM,EAAA9F,EAAAC,EAAAC,EAAA6F,EAAAC,EAAAC,IAIAJ,EAAAttF,KAAA,GAAAyjB,IAAAttD,EAAAC,EAAAR,EAAA4tD,GAAA/zC,OAAAg4G,EAAAC,EAAAC,IACA2F,EAAAK,UAAAx3H,GAIAm3H,EA5FA,GAAAM,GAAA,GAAA56G,GACAla,EAAA,GAAAm2B,IACAvM,EAAA,GAAAo6B,IAEA2qE,EAAA,GAAAj0G,GACAk0G,EAAA,GAAAl0G,GACAm0G,EAAA,GAAAn0G,GAEAq6G,EAAA,GAAAr6G,GACAs6G,EAAA,GAAAt6G,GACAu6G,EAAA,GAAAv6G,GAEAg6G,EAAA,GAAAp8G,GACAq8G,EAAA,GAAAr8G,GACAs8G,EAAA,GAAAt8G,GAEA87G,EAAA,GAAA15G,GAEA+5G,EAAA,GAAA/5G,GACA45G,EAAA,GAAA55G,EA6EA,iBAAA3a,EAAAJ,GAEA,GAAAiZ,GAAAlN,KAAAkN,SACAzD,EAAAzJ,KAAAyJ,SACA/U,EAAAsL,KAAAtL,WAEA,IAAA+D,SAAAgR,IAIA,OAAAyD,EAAAm0C,gBAAAn0C,EAAAk4D,wBAEAlnD,EAAA9hB,KAAA8Q,EAAAm0C,gBACAnjC,EAAAugB,aAAA/pC,GAEAL,EAAAC,IAAAkxE,iBAAAtnD,MAAA,IAIAkrG,EAAA16G,WAAAha,GACAJ,EAAA8H,KAAA/H,EAAAC,KAAAmqC,aAAA2qF,GAIA,OAAAl8G,EAAAG,aAEA/Y,EAAAgmC,cAAAptB,EAAAG,gBAAA,IAFA,CAMA,GAAAgmB,GAAAy1F,CAEA,IAAA57G,KAAA4sC,iBAAA,CAEA,GAAAnoD,GAAAC,EAAAR,EACAkV,EAAA4G,EAAA5G,MACA05B,EAAA9yB,EAAA8yB,WACAE,EAAAF,EAAAlkC,SAAAqkC,KAQA,IANA1nC,SAAAunC,EAAAd,KAEA7L,EAAA2M,EAAAd,GAAAiB,OAIA,OAAA75B,EAIA,OAFA85B,GAAA95B,EAAA65B,MAEA7uC,EAAA,EAAAi7B,EAAA6T,EAAAnrC,OAA6Cs3B,EAAAj7B,EAAOA,GAAA,EAEpDK,EAAAyuC,EAAA9uC,GACAM,EAAAwuC,EAAA9uC,EAAA,GACAF,EAAAgvC,EAAA9uC,EAAA,GAEAw3H,EAAAD,EAAA7oH,KAAA3L,EAAAC,EAAA4rC,EAAA7M,EAAA1hC,EAAAC,EAAAR,GAEA03H,IAEAA,EAAAK,UAAAtzH,KAAA8S,MAAArX,EAAA,GACA2C,EAAAkB,KAAA2zH,QASA,QAAAx3H,GAAA,EAAAi7B,EAAA2T,EAAAjrC,OAA+Cs3B,EAAAj7B,EAAOA,GAAA,EAEtDK,EAAAL,EAAA,EACAM,EAAAD,EAAA,EACAP,EAAAO,EAAA,EAEAm3H,EAAAD,EAAA7oH,KAAA3L,EAAAC,EAAA4rC,EAAA7M,EAAA1hC,EAAAC,EAAAR,GAEA03H,IAEAA,EAAAxiH,MAAA3U,EACAsC,EAAAkB,KAAA2zH,QAQQ,IAAA57G,KAAA8sC,WAAA,CAER,GAAAwvE,GAAAC,EAAAC,EACAlpF,EAAA/2B,KAAAk0C,gBACA1/C,EAAAuiC,KAAA,EAAA/2B,EAAAxL,UAAA,KAEA4zB,EAAA3kB,EAAA2kB,SACAC,EAAA5kB,EAAA4kB,MACAyO,EAAArzB,EAAAqzB,cAAA,EACAA,GAAAtrC,OAAA,IAAAo+B,EAAAkN,EAEA,QAAA/K,GAAA,EAAAyL,EAAAnP,EAAA78B,OAA2CgsC,EAAAzL,EAAQA,IAAA,CAEnD,GAAAgG,GAAA1J,EAAA0D,GACAm0F,EAAAnpF,KAAA,EAAAviC,EAAAu9B,EAAA0F,eAAAz3B,CAEA,IAAAhR,SAAAkxH,EAAA,CAMA,GAJAH,EAAA33F,EAAA2J,EAAA7pC,GACA83H,EAAA53F,EAAA2J,EAAA5pC,GACA83H,EAAA73F,EAAA2J,EAAApqC,GAEAu4H,EAAAhpF,gBAAA,GAEA,GAAAA,GAAAzzB,EAAAyzB,aACAC,EAAA5gC,KAAA6gC,qBAEAoiF,GAAAruH,IAAA,OACAsuH,EAAAtuH,IAAA,OACAuuH,EAAAvuH,IAAA,MAEA,QAAAugB,GAAA,EAAA2rB,EAAAH,EAAA1rC,OAAoD6rC,EAAA3rB,EAAQA,IAAA,CAE5D,GAAA4rB,GAAAH,EAAAzrB,EAEA,QAAA4rB,EAAA,CAEA,GAAA6oF,GAAAjpF,EAAAxrB,GAAA0c,QAEAoxF,GAAAtrB,gBAAA0xB,EAAAvmG,WAAA8mG,EAAApuF,EAAA7pC,GAAA63H,GAAAzoF,GACAmiF,EAAAvrB,gBAAA2xB,EAAAxmG,WAAA8mG,EAAApuF,EAAA5pC,GAAA63H,GAAA1oF,GACAoiF,EAAAxrB,gBAAA4xB,EAAAzmG,WAAA8mG,EAAApuF,EAAApqC,GAAAs4H,GAAA3oF,IAIAkiF,EAAAnoH,IAAA0uH,GACAtG,EAAApoH,IAAA2uH,GACAtG,EAAAroH,IAAA4uH,GAEAF,EAAAvG,EACAwG,EAAAvG,EACAwG,EAAAvG,EAMA,GAFA2F,EAAAH,EAAA3oH,KAAA3L,EAAAC,EAAAk1H,EAAAC,EAAAC,EAAAX,GAEA,CAEA,GAAA11F,EAAA,CAEA,GAAAw2F,GAAAx2F,EAAAmC,EACAwzF,GAAA5sH,KAAAytH,EAAA,IACAZ,EAAA7sH,KAAAytH,EAAA,IACAX,EAAA9sH,KAAAytH,EAAA,IAEAf,EAAA5pF,GAAAupF,EAAAM,EAAAS,EAAAC,EAAAC,EAAAV,EAAAC,EAAAC,GAIAJ,EAAAttF,OACAstF,EAAAK,UAAA3zF,EACAvhC,EAAAkB,KAAA2zH,YAYA3hG,MAAA,WAEA,UAAAnnB,MAAAupB,YAAAvpB,KAAAkN,SAAAlN,KAAAyJ,UAAArN,KAAA4D,SAsMAqiD,GAAAtiD,UAAAG,OAAAmpB,OAAA0W,GAAAhgC,WACAsiD,GAAAtiD,UAAAwpB,YAAA84B,GAgGAhtC,GAAAtV,UAAAG,OAAAmpB,OAAA0W,GAAAhgC,WACAsV,GAAAtV,UAAAwpB,YAAAlU,GAmBAykB,GAAA/5B,UAAAG,OAAAmpB,OAAA5Y,GAAA1Q,WACA+5B,GAAA/5B,UAAAwpB,YAAAuQ,GAEAA,GAAA/5B,UAAAw0E,UAAA,EAEAz6C,GAAA/5B,UAAAugH,kBAAA,WAEA,GAAA9/F,GAAA,GAAAjQ,EAEA,iBAAA88F,GAEA,GAAA/kE,GAAA+kE,GAAA,GAAAr+F,EAIA,OAFAhP,MAAAmgH,mBAAA3/F,GAEA8nB,EAAA1zC,IAAA,QAAAqzB,gBAAAzH,OAMAsZ,GAAA/5B,UAAAuoB,OAAA,WAIA,GAAAyyF,GAAA,GAAAvsG,EAEA,iBAAAwvB,GAEA+8E,EAAAzyF,OAAAtoB,KAAAlE,SAAAkiC,EAAAh+B,KAAA4nB,IAEA5nB,KAAAwgB,WAAAw6E,sBAAA+f,OAMAjhF,GAAA/5B,UAAAonB,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,OAIA85B,GAAA/5B,UAAA3D,KAAA,SAAAyW,GAOA,MALApC,IAAA1Q,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAyO,mBAAArS,KAAAyW,EAAApE,oBACAzO,KAAA4O,iBAAAxS,KAAAyW,EAAAjE,kBAEA5O,MAkCAtF,GAAAqF,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAAyQ,GAAA/5B,YAEAwpB,YAAA7uB,GAEAovH,qBAAA,EAEA1tH,KAAA,SAAAyW,GAiBA,MAfAinB,IAAA/5B,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAkpB,IAAArW,EAAAqW,IACAlpB,KAAA8hB,KAAAjP,EAAAiP,KAEA9hB,KAAA5E,KAAAyX,EAAAzX,KACA4E,KAAA3E,IAAAwX,EAAAxX,IACA2E,KAAAwkD,MAAA3xC,EAAA2xC,MAEAxkD,KAAA1I,OAAAub,EAAAvb,OACA0I,KAAAykD,KAAA,OAAA5xC,EAAA4xC,KAAA,KAAAvkD,OAAA+J,UAAiE4I,EAAA4xC,MAEjEzkD,KAAA0kD,UAAA7xC,EAAA6xC,UACA1kD,KAAA2kD,WAAA9xC,EAAA8xC,WAEA3kD,MAYAnF,eAAA,SAAAkvH,GAGA,GAAAC,GAAA,GAAAhqH,KAAAiqH,gBAAAF,CAEA/pH,MAAAkpB,IAAA,EAAAp4B,EAAA+E,KAAAkgG,QAAAlgG,KAAAq0H,KAAAF,GACAhqH,KAAAzI,0BAOA4yH,eAAA,WAEA,GAAAH,GAAAn0H,KAAAozB,IAAA,GAAAn4B,EAAA+E,KAAAgpF,QAAA7+E,KAAAkpB,IAEA,UAAAlpB,KAAAiqH,gBAAAD,GAIAx9F,gBAAA,WAEA,SAAA17B,EAAA+E,KAAAkgG,QAAAlgG,KAAAq0H,KACAr0H,KAAAozB,IAAA,GAAAn4B,EAAA+E,KAAAgpF,QAAA7+E,KAAAkpB,KAAAlpB,KAAA8hB,OAIAsoG,aAAA,WAGA,MAAApqH,MAAA0kD,UAAA7uD,KAAAC,IAAAkK,KAAA1I,OAAA,IAIA2yH,cAAA,WAGA,MAAAjqH,MAAA0kD,UAAA7uD,KAAA6S,IAAA1I,KAAA1I,OAAA,IAuCA+yH,cAAA,SAAAC,EAAAC,EAAA5xH,EAAAC,EAAA1B,EAAAC,GAEA6I,KAAA1I,OAAAgzH,EAAAC,EAEAvqH,KAAAykD,MACA6lE,YACAC,aACAp0G,QAAAxd,EACAyd,QAAAxd,EACA1B,QACAC,UAGA6I,KAAAzI,0BAIAizH,gBAAA,WAEAxqH,KAAAykD,KAAA,KACAzkD,KAAAzI,0BAIAA,uBAAA,WAEA,GAAA6D,GAAA4E,KAAA5E,KACAoc,EAAApc,EAAAvF,KAAAozB,IACA,GAAAn4B,EAAA+E,KAAAgpF,QAAA7+E,KAAAkpB,KAAAlpB,KAAA8hB,KACA3qB,EAAA,EAAAqgB,EACAtgB,EAAA8I,KAAA1I,OAAAH,EACAkgB,GAAA,GAAAngB,EACAutD,EAAAzkD,KAAAykD,IAEA,WAAAA,EAAA,CAEA,GAAA6lE,GAAA7lE,EAAA6lE,UACAC,EAAA9lE,EAAA8lE,UAEAlzG,IAAAotC,EAAAtuC,QAAAjf,EAAAozH,EACA9yG,GAAAitC,EAAAruC,QAAAjf,EAAAozH,EACArzH,GAAAutD,EAAAvtD,MAAAozH,EACAnzH,GAAAstD,EAAAttD,OAAAozH,EAIA,GAAAE,GAAAzqH,KAAA2kD,UACA,KAAA8lE,IAAApzG,GAAAjc,EAAAqvH,EAAAzqH,KAAAoqH,gBAEApqH,KAAA4O,iBAAAq2F,YACA5tF,IAAAngB,EAAAsgB,EAAArgB,EAAAqgB,EAAApc,EAAA4E,KAAA3E,MAIAq9F,OAAA,SAAAC,GAEA,GAAAvgF,GAAA3H,GAAA1Q,UAAA24F,OAAAxnG,KAAA8O,KAAA24F,EAgBA,OAdAvgF,GAAA9kB,OAAA41B,IAAAlpB,KAAAkpB,IACA9Q,EAAA9kB,OAAAwuB,KAAA9hB,KAAA8hB,KAEA1J,EAAA9kB,OAAA8H,KAAA4E,KAAA5E,KACAgd,EAAA9kB,OAAA+H,IAAA2E,KAAA3E,IACA+c,EAAA9kB,OAAAkxD,MAAAxkD,KAAAwkD,MAEApsC,EAAA9kB,OAAAgE,OAAA0I,KAAA1I,OAEA,OAAA0I,KAAAykD,OAAArsC,EAAA9kB,OAAAmxD,KAAAvkD,OAAA+J,UAAoEjK,KAAAykD,OAEpErsC,EAAA9kB,OAAAoxD,UAAA1kD,KAAA0kD,UACAtsC,EAAA9kB,OAAAqxD,WAAA3kD,KAAA2kD,WAEAvsC,KAgCAyJ,GAAA9hB,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAAyQ,GAAA/5B,YAEAwpB,YAAA1H,GAEA6oG,sBAAA,EAEAtuH,KAAA,SAAAyW,GAcA,MAZAinB,IAAA/5B,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAqX,KAAAxE,EAAAwE,KACArX,KAAAsX,MAAAzE,EAAAyE,MACAtX,KAAAwX,IAAA3E,EAAA2E,IACAxX,KAAAopB,OAAAvW,EAAAuW,OACAppB,KAAA5E,KAAAyX,EAAAzX,KACA4E,KAAA3E,IAAAwX,EAAAxX,IAEA2E,KAAA8hB,KAAAjP,EAAAiP,KACA9hB,KAAAykD,KAAA,OAAA5xC,EAAA4xC,KAAA,KAAAvkD,OAAA+J,UAAiE4I,EAAA4xC,MAEjEzkD,MAIAqqH,cAAA,SAAAC,EAAAC,EAAA5xH,EAAAC,EAAA1B,EAAAC,GAEA6I,KAAAykD,MACA6lE,YACAC,aACAp0G,QAAAxd,EACAyd,QAAAxd,EACA1B,QACAC,UAGA6I,KAAAzI,0BAIAizH,gBAAA,WAEAxqH,KAAAykD,KAAA,KACAzkD,KAAAzI,0BAIAA,uBAAA,WAEA,GAAAgtB,IAAAvkB,KAAAsX,MAAAtX,KAAAqX,OAAA,EAAArX,KAAA8hB,MACA0C,GAAAxkB,KAAAwX,IAAAxX,KAAAopB,SAAA,EAAAppB,KAAA8hB,MACAqN,GAAAnvB,KAAAsX,MAAAtX,KAAAqX,MAAA,EACA+X,GAAApvB,KAAAwX,IAAAxX,KAAAopB,QAAA,EAEA/R,EAAA8X,EAAA5K,EACAjN,EAAA6X,EAAA5K,EACA/M,EAAA4X,EAAA5K,EACA4E,EAAAgG,EAAA5K,CAEA,WAAAxkB,KAAAykD,KAAA,CAEA,GAAAkmE,GAAA3qH,KAAA8hB,MAAA9hB,KAAAykD,KAAAvtD,MAAA8I,KAAAykD,KAAA6lE,WACAM,EAAA5qH,KAAA8hB,MAAA9hB,KAAAykD,KAAAttD,OAAA6I,KAAAykD,KAAA8lE,YACAM,GAAA7qH,KAAAsX,MAAAtX,KAAAqX,MAAArX,KAAAykD,KAAAvtD,MACA4zH,GAAA9qH,KAAAwX,IAAAxX,KAAAopB,QAAAppB,KAAAykD,KAAAttD,MAEAkgB,IAAAwzG,GAAA7qH,KAAAykD,KAAAtuC,QAAAw0G,GACArzG,EAAAD,EAAAwzG,GAAA7qH,KAAAykD,KAAAvtD,MAAAyzH,GACAnzG,GAAAszG,GAAA9qH,KAAAykD,KAAAruC,QAAAw0G,GACAxhG,EAAA5R,EAAAszG,GAAA9qH,KAAAykD,KAAAttD,OAAAyzH,GAIA5qH,KAAA4O,iBAAA22F,iBAAAluF,EAAAC,EAAAE,EAAA4R,EAAAppB,KAAA5E,KAAA4E,KAAA3E,MAIAq9F,OAAA,SAAAC,GAEA,GAAAvgF,GAAA3H,GAAA1Q,UAAA24F,OAAAxnG,KAAA8O,KAAA24F,EAYA,OAVAvgF,GAAA9kB,OAAAwuB,KAAA9hB,KAAA8hB,KACA1J,EAAA9kB,OAAA+jB,KAAArX,KAAAqX,KACAe,EAAA9kB,OAAAgkB,MAAAtX,KAAAsX,MACAc,EAAA9kB,OAAAkkB,IAAAxX,KAAAwX,IACAY,EAAA9kB,OAAA81B,OAAAppB,KAAAopB,OACAhR,EAAA9kB,OAAA8H,KAAA4E,KAAA5E,KACAgd,EAAA9kB,OAAA+H,IAAA2E,KAAA3E,IAEA,OAAA2E,KAAAykD,OAAArsC,EAAA9kB,OAAAmxD,KAAAvkD,OAAA+J,UAAoEjK,KAAAykD,OAEpErsC,IAkRA,IAAA40C,IAAA,CAsjMAqoB,IAAAt1E,UAAA61C,WAAA,EAEAy/B,GAAAt1E,UAAAonB,MAAA,WAEA,UAAAkuD,IAAAr1E,KAAAmK,MAAA+iG,SAAAltG,KAAA61C,UAIAw/B,GAAAt1E,UAAA24F,OAAA,SAAAC,GAEA,OACAxzF,KAAA,UACAgF,MAAAnK,KAAAmK,MAAA+iG,SACAr3D,QAAA71C,KAAA61C,UAqBAy/B,GAAAv1E,UAAA41C,OAAA,EAEA2/B,GAAAv1E,UAAAonB,MAAA,WAEA,UAAAmuD,IAAAt1E,KAAAmK,MAAA+iG,SAAAltG,KAAA5E,KAAA4E,KAAA3E,MAIAi6E,GAAAv1E,UAAA24F,OAAA,SAAAC,GAEA,OACAxzF,KAAA,MACAgF,MAAAnK,KAAAmK,MAAA+iG,SACA9xG,KAAA4E,KAAA5E,KACAC,IAAA2E,KAAA3E,MAuBAhB,GAAA0F,UAAAG,OAAAmpB,OAAA5Y,GAAA1Q,WAEA1F,GAAA0F,UAAAwpB,YAAAlvB,GAEAA,GAAA0F,UAAA3D,KAAA,SAAAyW,EAAA27E,GAWA,MATA/9E,IAAA1Q,UAAA3D,KAAAlL,KAAA8O,KAAA6S,EAAA27E,GAEA,OAAA37E,EAAA2hE,aAAAx0E,KAAAw0E,WAAA3hE,EAAA2hE,WAAArtD,SACA,OAAAtU,EAAA6iC,MAAA11C,KAAA01C,IAAA7iC,EAAA6iC,IAAAvuB,SACA,OAAAtU,EAAAmzD,mBAAAhmE,KAAAgmE,iBAAAnzD,EAAAmzD,iBAAA7+C,SAEAnnB,KAAAs/B,WAAAzsB,EAAAysB,WACAt/B,KAAA0+C,iBAAA7rC,EAAA6rC,iBAEA1+C,MAIA3F,GAAA0F,UAAA24F,OAAA,SAAAC,GAEA,GAAAvgF,GAAA3H,GAAA1Q,UAAA24F,OAAAxnG,KAAA8O,KAAA24F,EAKA,OAHA,QAAA34F,KAAAw0E,aAAAp8D,EAAA9kB,OAAAkhF,WAAAx0E,KAAAw0E,WAAAkkB,OAAAC,IACA,OAAA34F,KAAA01C,MAAAt9B,EAAA9kB,OAAAoiD,IAAA11C,KAAA01C,IAAAgjD,UAEAtgF,GA0BAm9D,GAAAx1E,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAA5Y,GAAA1Q,YAEAwpB,YAAAgsD,GAEA1P,aAAA,EAEAzpE,KAAA,SAAAyW,GAEApC,GAAA1Q,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAA+vB,eAAA3zB,KAAAyW,EAAAkd,gBACA/vB,KAAAg0C,qBAAAnhC,EAAAmhC,oBAEA,QAAA1iD,GAAA,EAAAi7B,EAAA1Z,EAAAshC,WAAAl/C,OAAoDs3B,EAAAj7B,EAAOA,IAE3D0O,KAAAm0C,WAAAh/C,KAAA0d,EAAAshC,WAAA7iD,GAIA,OAAA0O,OAIAlF,IAAA,SAAA+N,EAAA4L,EAAAxH,EAAAmhB,EAAAjkB,EAAA+jB,GAEAz1B,SAAAgc,MAAA,IACAhc,SAAAwU,MAAA,GACAxU,SAAAy1B,MAAA,GACAz1B,SAAA0R,MAAA,GAAAiE,GAAA,WACA3V,SAAA21B,MAAA4H,IAEA/oB,EAAApX,KAAAC,IAAAmX,EAAApX,KAAA6S,IAAA,EAAAuE,IAEAjN,KAAAm0C,WAAAh/C,MACA0T,UACA4L,OACAxH,WACAtU,EAAA,EAAAC,EAAA,EAAAC,EAAA,EACAuP,MAAA,EACArM,SAAA,EACAmyB,UACA/jB,QACAikB,cAUA6lB,iBAAA,WAEA,GAAAze,GACA6d,EADApS,EAAAjhC,KAAAm0C,WAAAl/C,OAEA81H,EAAA,GAAA/qH,KAAA+vB,eAAAp3B,EACAqyH,EAAA,GAAAhrH,KAAA+vB,eAAAn3B,CAEA,KAAA48B,EAAA,EAAkByL,EAAAzL,EAAQA,IAE1B6d,EAAArzC,KAAAm0C,WAAA3e,GAEA6d,EAAA16C,EAAAqH,KAAA+vB,eAAAp3B,EAAAoyH,EAAA13E,EAAApmC,SACAomC,EAAAz6C,EAAAoH,KAAA+vB,eAAAn3B,EAAAoyH,EAAA33E,EAAApmC,SAEAomC,EAAA43E,eAAA53E,EAAA16C,EAAA9C,KAAA2e,GAAA,IACA6+B,EAAAt3C,UAAA,KAAAs3C,EAAA43E,eAAA53E,EAAAt3C,aAuCAyyB,GAAAzuB,UAAAG,OAAAmpB,OAAAxf,EAAA9J,WACAyuB,GAAAzuB,UAAAwpB,YAAAiF,GAEAA,GAAAzuB,UAAA3D,KAAA,SAAAyW,GASA,MAPAhJ,GAAA9J,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAmK,MAAA/N,KAAAyW,EAAA1I,OACAnK,KAAAgK,IAAA6I,EAAA7I,IAEAhK,KAAAjE,SAAA8W,EAAA9W,SAEAiE,MAmBA0/B,GAAA3/B,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAA5Y,GAAA1Q,YAEAwpB,YAAAmW,GAEAkmC,UAAA,EAEA7xE,QAAA,WAEA,GAAAm3H,GAAA,GAAAl8G,EAEA,iBAAA3a,EAAAJ,GAEAi3H,EAAA12H,sBAAAwL,KAAAtL,YAEA,IAAAgsH,GAAArsH,EAAAC,IAAAmoH,kBAAAyO,GACAC,EAAAnrH,KAAAoI,MAAAzP,EAAAqH,KAAAoI,MAAAxP,EAAA,CAEA8nH,GAAAyK,GAMAl3H,EAAAkB,MAEA8X,SAAApX,KAAAiD,KAAA4nH,GACAxxD,MAAAlvD,KAAAlE,SACA0/B,KAAA,KACAloC,OAAA0M,WAQAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,YAAAvpB,KAAAyJ,UAAArN,KAAA4D,SA4BAw1E,GAAAz1E,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAA5Y,GAAA1Q,YAEAwpB,YAAAisD,GAEAp5E,KAAA,SAAAyW,GAEApC,GAAA1Q,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAAA,EAIA,QAFA4iE,GAAA5iE,EAAA4iE,OAEAnkF,EAAA,EAAAi7B,EAAAkpD,EAAAxgF,OAAyCs3B,EAAAj7B,EAAOA,IAAA,CAEhD,GAAA85H,GAAA31C,EAAAnkF,EAEA0O,MAAAqrH,SAAAD,EAAA93H,OAAA6zB,QAAAikG,EAAAn+G,UAIA,MAAAjN,OAIAqrH,SAAA,SAAA/3H,EAAA2Z,GAEAxU,SAAAwU,MAAA,GAEAA,EAAApX,KAAA6C,IAAAuU,EAIA,QAFAwoE,GAAAz1E,KAAAy1E,OAEAlpD,EAAA,EAAsBA,EAAAkpD,EAAAxgF,UAEtBgY,EAAAwoE,EAAAlpD,GAAAtf,UAFyCsf,KAUzCkpD,EAAAhiF,OAAA84B,EAAA,GAA4Btf,WAAA3Z,WAE5B0M,KAAAlF,IAAAxH,IAIAg4H,qBAAA,SAAAr+G,GAIA,OAFAwoE,GAAAz1E,KAAAy1E,OAEAnkF,EAAA,EAAAi7B,EAAAkpD,EAAAxgF,OAAyCs3B,EAAAj7B,KAEzC2b,EAAAwoE,EAAAnkF,GAAA2b,UAFgD3b,KAUhD,MAAAmkF,GAAAnkF,EAAA,GAAAgC,QAIAS,QAAA,WAEA,GAAAm3H,GAAA,GAAAl8G,EAEA,iBAAA3a,EAAAJ,GAEAi3H,EAAA12H,sBAAAwL,KAAAtL,YAEA,IAAAuY,GAAA5Y,EAAAC,IAAAC,OAAAiZ,WAAA09G,EAEAlrH,MAAAsrH,qBAAAr+G,GAAAlZ,QAAAM,EAAAJ,OAMA+B,OAAA,WAEA,GAAAg4B,GAAA,GAAAhf,GACA6gB,EAAA,GAAA7gB,EAEA,iBAAAva,GAEA,GAAAghF,GAAAz1E,KAAAy1E,MAEA,IAAAA,EAAAxgF,OAAA,GAEA+4B,EAAAx5B,sBAAAC,EAAAC,aACAm7B,EAAAr7B,sBAAAwL,KAAAtL,YAEA,IAAAuY,GAAA+gB,EAAAxgB,WAAAqiB,EAEA4lD,GAAA,GAAAniF,OAAAgb,SAAA,CAEA,QAAAhd,GAAA,EAAAi7B,EAAAkpD,EAAAxgF,OAA2Cs3B,EAAAj7B,GAE3C2b,GAAAwoE,EAAAnkF,GAAA2b,SAFkD3b,IAIlDmkF,EAAAnkF,EAAA,GAAAgC,OAAAgb,SAAA,EACAmnE,EAAAnkF,GAAAgC,OAAAgb,SAAA,CAUA,MAAeie,EAAAj7B,EAAOA,IAEtBmkF,EAAAnkF,GAAAgC,OAAAgb,SAAA,OAUAoqF,OAAA,SAAAC,GAEA,GAAAvgF,GAAA3H,GAAA1Q,UAAA24F,OAAAxnG,KAAA8O,KAAA24F,EAEAvgF,GAAA9kB,OAAAmiF,SAIA,QAFAA,GAAAz1E,KAAAy1E,OAEAnkF,EAAA,EAAAi7B,EAAAkpD,EAAAxgF,OAAyCs3B,EAAAj7B,EAAOA,IAAA,CAEhD,GAAA85H,GAAA31C,EAAAnkF,EAEA8mB,GAAA9kB,OAAAmiF,OAAAtgF,MACA7B,OAAA83H,EAAA93H,OAAAw1C,KACA77B,SAAAm+G,EAAAn+G,WAKA,MAAAmL,MAwBAwc,GAAA70B,UAAAG,OAAAmpB,OAAA7f,EAAAzJ,WACA60B,GAAA70B,UAAAwpB,YAAAqL,GAEAA,GAAA70B,UAAAg0D,eAAA,EA+EA7zD,OAAA+J,OAAAyrE,GAAA31E,WAEAk2E,kBAAA,WAEAj2E,KAAA21E,eAEA,QAAA/jF,GAAA,EAAAskF,EAAAl2E,KAAAytD,MAAAx4D,OAA8CihF,EAAAtkF,EAAQA,IAAA,CAEtD,GAAAk2B,GAAA,GAAAtZ,EAEAxO,MAAAytD,MAAA77D,IAEAk2B,EAAApZ,WAAA1O,KAAAytD,MAAA77D,GAAA8C,aAIAsL,KAAA21E,aAAAxgF,KAAA2yB,KAMAyjG,KAAA,WAMA,OAJA90C,GAIA7kF,EAAA,EAAAskF,EAAAl2E,KAAAytD,MAAAx4D,OAA8CihF,EAAAtkF,EAAQA,IAEtD6kF,EAAAz2E,KAAAytD,MAAA77D,GAEA6kF,GAEAA,EAAA/hF,YAAAga,WAAA1O,KAAA21E,aAAA/jF,GAQA,QAAAA,GAAA,EAAAskF,EAAAl2E,KAAAytD,MAAAx4D,OAA8CihF,EAAAtkF,EAAQA,IAEtD6kF,EAAAz2E,KAAAytD,MAAA77D,GAEA6kF,IAEAA,EAAAviF,QAAAuiF,EAAAviF,OAAA49F,QAEArb,EAAAttD,OAAAza,WAAA+nE,EAAAviF,OAAAQ,aACA+hF,EAAAttD,OAAAtI,SAAA41D,EAAA/hF,cAIA+hF,EAAAttD,OAAA/sB,KAAAq6E,EAAA/hF,aAIA+hF,EAAAttD,OAAAmd,UAAAmwC,EAAA36E,SAAA26E,EAAAj2D,WAAAi2D,EAAAruE,SAQApS,OAAA,WAEA,GAAAw1H,GAAA,GAAAh9G,EAEA,mBAIA,OAAA5c,GAAA,EAAAskF,EAAAl2E,KAAAytD,MAAAx4D,OAA+CihF,EAAAtkF,EAAQA,IAAA,CAIvD,GAAAu3B,GAAAnpB,KAAAytD,MAAA77D,GAAAoO,KAAAytD,MAAA77D,GAAA8C,YAAAsL,KAAA41E,cAEA41C,GAAA78G,iBAAAwa,EAAAnpB,KAAA21E,aAAA/jF,IACA45H,EAAAtgF,QAAAlrC,KAAA+1E,aAAA,GAAAnkF,GAIAoO,KAAA6qD,mBAEA7qD,KAAAg2E,YAAAltE,aAAA,OAQAqe,MAAA,WAEA,UAAAuuD,IAAA11E,KAAAytD,MAAAztD,KAAA21E,aAAA31E,KAAA6qD,qBAsBAsrB,GAAAp2E,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAA5Y,GAAA1Q,YAEAwpB,YAAA4sD,GAEA2b,QAAA,EAEA11F,KAAA,SAAAyW,GAMA,MAJApC,IAAA1Q,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAo2E,KAAAvjE,EAAAujE,KAEAp2E,QA0EAq2E,GAAAt2E,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAAj0B,GAAA2K,YAEAwpB,YAAA8sD,GAEAn8B,eAAA,EAEA17C,KAAA,SAAA6uD,EAAAkpB,GAEAv2E,KAAAqtD,WAEA50D,SAAA89E,IAEAv2E,KAAA7J,mBAAA,GAEA6J,KAAAqtD,SAAA4oB,oBAEAM,EAAAv2E,KAAAtL,aAIAsL,KAAAu2E,WAAAn6E,KAAAm6E,GACAv2E,KAAAw2E,kBAAA9nE,WAAA6nE,IAIAg1C,KAAA,WAEAvrH,KAAAqtD,SAAAk+D,QAIAz0C,qBAAA,WAEA,GAAA92E,KAAAkN,UAAAlN,KAAAkN,SAAA8sC,WAEA,OAAA1oD,GAAA,EAAuBA,EAAA0O,KAAAkN,SAAAg0C,YAAAjsD,OAAsC3D,IAAA,CAE7D,GAAAm6H,GAAAzrH,KAAAkN,SAAAg0C,YAAA5vD,GAEA8W,EAAA,EAAAqjH,EAAApzB,iBAEAjwF,KAAAwe,IAEA6kG,EAAAjyG,eAAApR,GAIAqjH,EAAA72H,IAAA,aAMO,IAAAoL,KAAAkN,UAAAlN,KAAAkN,SAAA4sC,iBAMP,OAJA4xE,GAAA,GAAAphG,GAEAqhG,EAAA3rH,KAAAkN,SAAA8yB,WAAA2rF,WAEAr6H,EAAA,EAAuBA,EAAAq6H,EAAAr7G,MAAsBhf,IAAA,CAE7Co6H,EAAA/yH,EAAAgzH,EAAAh0C,KAAArmF,GACAo6H,EAAA9yH,EAAA+yH,EAAA/zC,KAAAtmF,GACAo6H,EAAA7yH,EAAA8yH,EAAA9zC,KAAAvmF,GACAo6H,EAAAnhG,EAAAohG,EAAAjJ,KAAApxH,EAEA,IAAA8W,GAAA,EAAAsjH,EAAArzB,iBAEAjwF,KAAAwe,IAEA8kG,EAAAlyG,eAAApR,GAIAsjH,EAAA92H,IAAA,SAIA+2H,EAAAhJ,QAAArxH,EAAAo6H,EAAA/yH,EAAA+yH,EAAA9yH,EAAA8yH,EAAA7yH,EAAA6yH,EAAAnhG,KAQAp0B,kBAAA,SAAAqqH,GAEAprH,GAAA2K,UAAA5J,kBAAAjF,KAAA8O,MAAA,GAEA,aAAAA,KAAAs2E,SAEAt2E,KAAAw2E,kBAAA9nE,WAAA1O,KAAAtL,aAEO,aAAAsL,KAAAs2E,UAEPt2E,KAAAw2E,kBAAA9nE,WAAA1O,KAAAu2E,aAUApvD,MAAA,WAEA,UAAAnnB,MAAAupB,YAAAvpB,KAAAkN,SAAAlN,KAAAyJ,SAAAzJ,KAAAqtD,SAAAxC,kBAAAzuD,KAAA4D,SAsCAiwB,GAAAlwB,UAAAG,OAAAmpB,OAAAxf,EAAA9J,WACAkwB,GAAAlwB,UAAAwpB,YAAA0G,GAEAA,GAAAlwB,UAAAgpE,qBAAA,EAEA94C,GAAAlwB,UAAA3D,KAAA,SAAAyW,GAUA,MARAhJ,GAAA9J,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAmK,MAAA/N,KAAAyW,EAAA1I,OAEAnK,KAAAmwB,UAAAtd,EAAAsd,UACAnwB,KAAAqwB,QAAAxd,EAAAwd,QACArwB,KAAAuwB,SAAA1d,EAAA0d,SAEAvwB,MA0BA8a,GAAA/a,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAA5Y,GAAA1Q,YAEAwpB,YAAAzO,GAEAsgC,QAAA,EAEArnD,QAAA,WAEA,GAAAq1H,GAAA,GAAA56G,GACAla,EAAA,GAAAm2B,IACAvM,EAAA,GAAAo6B,GAEA,iBAAAjkD,EAAAJ,GAEA,GAAA6iD,GAAAziD,EAAAu3H,cACAC,EAAA/0E,IAEA5pC,EAAAlN,KAAAkN,SACAxY,EAAAsL,KAAAtL,WASA,IALA,OAAAwY,EAAAm0C,gBAAAn0C,EAAAk4D,wBAEAlnD,EAAA9hB,KAAA8Q,EAAAm0C,gBACAnjC,EAAAugB,aAAA/pC,GAEAL,EAAAC,IAAAkxE,iBAAAtnD,MAAA,GAIAkrG,EAAA16G,WAAAha,GACAJ,EAAA8H,KAAA/H,EAAAC,KAAAmqC,aAAA2qF,EAEA,IAAA0C,GAAA,GAAA98G,GACA+8G,EAAA,GAAA/8G,GACAg9G,EAAA,GAAAh9G,GACAi9G,EAAA,GAAAj9G,GACA0F,EAAA1U,WAAAo0E,eAAA,GAEA,IAAAlnE,KAAA4sC,iBAAA,CAEA,GAAAxzC,GAAA4G,EAAA5G,MACA05B,EAAA9yB,EAAA8yB,WACAE,EAAAF,EAAAlkC,SAAAqkC,KAEA,WAAA75B,EAIA,OAFA85B,GAAA95B,EAAA65B,MAEA7uC,EAAA,EAAAi7B,EAAA6T,EAAAnrC,OAAA,EAAiDs3B,EAAAj7B,EAAOA,GAAAojB,EAAA,CAExD,GAAA/iB,GAAAyuC,EAAA9uC,GACAM,EAAAwuC,EAAA9uC,EAAA,EAEAw6H,GAAA7zG,UAAAioB,EAAA,EAAAvuC,GACAo6H,EAAA9zG,UAAAioB,EAAA,EAAAtuC,EAEA,IAAAs6H,GAAA53H,EAAAooH,oBAAAoP,EAAAC,EAAAE,EAAAD,EAEA,MAAAE,EAAAL,GAAA,CAEAI,EAAAxtF,aAAAz+B,KAAAtL,YAEA,IAAAuY,GAAA5Y,EAAAC,IAAAC,OAAAiZ,WAAAy+G,EAEAh/G,GAAA5Y,EAAA+G,MAAA6R,EAAA5Y,EAAAgH,KAEApH,EAAAkB,MAEA8X,WAGAiiD,MAAA88D,EAAA7kG,QAAAsX,aAAAz+B,KAAAtL,aACA4R,MAAAhV,EACAkqC,KAAA,KACA2tF,UAAA,KACA71H,OAAA0M,YAQA,QAAA1O,GAAA,EAAAi7B,EAAA2T,EAAAjrC,OAAA,IAAuDs3B,EAAAj7B,EAAOA,GAAAojB,EAAA,CAE9Do3G,EAAA7zG,UAAAioB,EAAA,EAAA5uC,GACAy6H,EAAA9zG,UAAAioB,EAAA,EAAA5uC,EAAA,EAEA,IAAA46H,GAAA53H,EAAAooH,oBAAAoP,EAAAC,EAAAE,EAAAD,EAEA,MAAAE,EAAAL,GAAA,CAEAI,EAAAxtF,aAAAz+B,KAAAtL,YAEA,IAAAuY,GAAA5Y,EAAAC,IAAAC,OAAAiZ,WAAAy+G,EAEAh/G,GAAA5Y,EAAA+G,MAAA6R,EAAA5Y,EAAAgH,KAEApH,EAAAkB,MAEA8X,WAGAiiD,MAAA88D,EAAA7kG,QAAAsX,aAAAz+B,KAAAtL,aACA4R,MAAAhV,EACAkqC,KAAA,KACA2tF,UAAA,KACA71H,OAAA0M,aAQQ,IAAAkN,KAAA8sC,WAKR,OAHAnoB,GAAA3kB,EAAA2kB,SACAs6F,EAAAt6F,EAAA58B,OAEA3D,EAAA,EAAwB66H,EAAA,EAAA76H,EAAoBA,GAAAojB,EAAA,CAE5C,GAAAw3G,GAAA53H,EAAAooH,oBAAA7qF,EAAAvgC,GAAAugC,EAAAvgC,EAAA,GAAA26H,EAAAD,EAEA,MAAAE,EAAAL,GAAA,CAEAI,EAAAxtF,aAAAz+B,KAAAtL,YAEA,IAAAuY,GAAA5Y,EAAAC,IAAAC,OAAAiZ,WAAAy+G,EAEAh/G,GAAA5Y,EAAA+G,MAAA6R,EAAA5Y,EAAAgH,KAEApH,EAAAkB,MAEA8X,WAGAiiD,MAAA88D,EAAA7kG,QAAAsX,aAAAz+B,KAAAtL,aACA4R,MAAAhV,EACAkqC,KAAA,KACA2tF,UAAA,KACA71H,OAAA0M,cAYAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,YAAAvpB,KAAAkN,SAAAlN,KAAAyJ,UAAArN,KAAA4D,SAkBA2hC,GAAA5hC,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAAvO,GAAA/a,YAEAwpB,YAAAoY,GAEAyyC,gBAAA,IAqCAlmB,GAAAnuD,UAAAG,OAAAmpB,OAAAxf,EAAA9J,WACAmuD,GAAAnuD,UAAAwpB,YAAA2kC,GAEAA,GAAAnuD,UAAAopE,kBAAA,EAEAjb,GAAAnuD,UAAA3D,KAAA,SAAAyW,GAWA,MATAhJ,GAAA9J,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAmK,MAAA/N,KAAAyW,EAAA1I,OAEAnK,KAAAgK,IAAA6I,EAAA7I,IAEAhK,KAAAyU,KAAA5B,EAAA4B,KACAzU,KAAAkrD,gBAAAr4C,EAAAq4C,gBAEAlrD,MAmBA+2E,GAAAh3E,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAA5Y,GAAA1Q,YAEAwpB,YAAAwtD,GAEA17B,UAAA,EAEAtnD,QAAA,WAEA,GAAAq1H,GAAA,GAAA56G,GACAla,EAAA,GAAAm2B,IACAvM,EAAA,GAAAo6B,GAEA,iBAAAjkD,EAAAJ,GAyBA,QAAAm4H,GAAAl9D,EAAA5oD,GAEA,GAAA+lH,GAAA/3H,EAAAmoH,kBAAAvtD,EAEA,IAAAo9D,EAAAD,EAAA,CAEA,GAAAE,GAAAj4H,EAAAioH,oBAAArtD,EACAq9D,GAAA9tF,aAAA/pC,EAEA,IAAAuY,GAAA5Y,EAAAC,IAAAC,OAAAiZ,WAAA++G,EAEA,IAAAt/G,EAAA5Y,EAAA+G,MAAA6R,EAAA5Y,EAAAgH,IAAA,MAEApH,GAAAkB,MAEA8X,WACAu/G,cAAA32H,KAAAiD,KAAAuzH,GACAn9D,MAAAq9D,EAAAplG,QACA7gB,QACAk1B,KAAA,KACAloC,YA3CA,GAAAA,GAAA0M,KACAkN,EAAAlN,KAAAkN,SACAxY,EAAAsL,KAAAtL,YACAqD,EAAA1D,EAAAokB,OAAAs+D,OAAAh/E,SASA,IALA,OAAAmV,EAAAm0C,gBAAAn0C,EAAAk4D,wBAEAlnD,EAAA9hB,KAAA8Q,EAAAm0C,gBACAnjC,EAAAugB,aAAA/pC,GAEAL,EAAAC,IAAAkxE,iBAAAtnD,MAAA,GAIAkrG,EAAA16G,WAAAha,GACAJ,EAAA8H,KAAA/H,EAAAC,KAAAmqC,aAAA2qF,EAEA,IAAAqD,GAAA10H,IAAAiI,KAAAoI,MAAAzP,EAAAqH,KAAAoI,MAAAxP,EAAAoH,KAAAoI,MAAAvP,GAAA,GACAyzH,EAAAG,IACA3wH,EAAA,GAAAkT,EA8BA,IAAA9B,KAAA4sC,iBAAA,CAEA,GAAAxzC,GAAA4G,EAAA5G,MACA05B,EAAA9yB,EAAA8yB,WACAE,EAAAF,EAAAlkC,SAAAqkC,KAEA,WAAA75B,EAIA,OAFA85B,GAAA95B,EAAA65B,MAEA7uC,EAAA,EAAA0rD,EAAA5c,EAAAnrC,OAA8C+nD,EAAA1rD,EAAQA,IAAA,CAEtD,GAAAK,GAAAyuC,EAAA9uC,EAEAwK,GAAAmc,UAAAioB,EAAA,EAAAvuC,GAEAy6H,EAAAtwH,EAAAnK,OAMA,QAAAL,GAAA,EAAAi7B,EAAA2T,EAAAjrC,OAAA,EAAmDs3B,EAAAj7B,EAAOA,IAE1DwK,EAAAmc,UAAAioB,EAAA,EAAA5uC,GAEA86H,EAAAtwH,EAAAxK,OAUA,QAFAugC,GAAA3kB,EAAA2kB,SAEAvgC,EAAA,EAAAi7B,EAAAsF,EAAA58B,OAA6Cs3B,EAAAj7B,EAAOA,IAEpD86H,EAAAv6F,EAAAvgC,WAUA61B,MAAA,WAEA,UAAAnnB,MAAAupB,YAAAvpB,KAAAkN,SAAAlN,KAAAyJ,UAAArN,KAAA4D,SAkBAg3E,GAAAj3E,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAA5Y,GAAA1Q,YAEAwpB,YAAAytD,KAgCAp4D,GAAA7e,UAAAG,OAAAmpB,OAAA7f,EAAAzJ,WACA6e,GAAA7e,UAAAwpB,YAAA3K,GAyBA+V,GAAA50B,UAAAG,OAAAmpB,OAAA7f,EAAAzJ,WACA40B,GAAA50B,UAAAwpB,YAAAoL,GAEAA,GAAA50B,UAAA+zD,qBAAA,EAcAojB,GAAAn3E,UAAAG,OAAAmpB,OAAA7f,EAAAzJ,WACAm3E,GAAAn3E,UAAAwpB,YAAA2tD,GA+BAC,GAAAp3E,UAAAG,OAAAmpB,OAAA7f,EAAAzJ,WACAo3E,GAAAp3E,UAAAwpB,YAAA4tD,GACAA,GAAAp3E,UAAAo1D,gBAAA,EAsLAiiB,GAAAr3E,UAAAG,OAAAmpB,OAAA0W,GAAAhgC,WACAq3E,GAAAr3E,UAAAwpB,YAAA6tD,GAqFAY,GAAAj4E,UAAAG,OAAAmpB,OAAAiX,GAAAvgC,WACAi4E,GAAAj4E,UAAAwpB,YAAAyuD,GA4OAY,GAAA74E,UAAAG,OAAAmpB,OAAAiX,GAAAvgC,WACA64E,GAAA74E,UAAAwpB,YAAAqvD,GA2BAgB,GAAA75E,UAAAG,OAAAmpB,OAAAuvD,GAAA74E,WACA65E,GAAA75E,UAAAwpB,YAAAqwD,GA2BAC,GAAA95E,UAAAG,OAAAmpB,OAAAuvD,GAAA74E,WACA85E,GAAA95E,UAAAwpB,YAAAswD,GAkCAC,GAAA/5E,UAAAG,OAAAmpB,OAAAuvD,GAAA74E,WACA+5E,GAAA/5E,UAAAwpB,YAAAuwD,GA0DAC,GAAAh6E,UAAAG,OAAAmpB,OAAAuvD,GAAA74E,WACAg6E,GAAAh6E,UAAAwpB,YAAAwwD,GA6IAC,GAAAj6E,UAAAG,OAAAmpB,OAAAiX,GAAAvgC,WACAi6E,GAAAj6E,UAAAwpB,YAAAywD,GAEAA,GAAAI,QAAA,SAAA14C,GAEA,UAIAs4C,GAAA0yC,gBAAA,SAAAhrF,GAEA,MAAA7rC,MAAAmjB,IAAAnjB,KAAA2e,GAAAktB,IAKAs4C,GAAAa,aAAA,SAAAnlE,EAAArB,EAAA4lE,GA6DA,QAAA0yC,KAKApuF,EAAA,MAAAvvB,GACA+rE,EAAA,MAAA/rE,GACA49G,EAAAr4B,OAAAs4B,UACAloB,EAAA9uG,KAAA6C,IAAAoiF,EAAA,GAAAniF,GACAisG,EAAA/uG,KAAA6C,IAAAoiF,EAAA,GAAAliF,GACAk0H,EAAAj3H,KAAA6C,IAAAoiF,EAAA,GAAAjiF,GAEA+zH,GAAAjoB,IAEAioB,EAAAjoB,EACA15F,EAAArW,IAAA,QAIAg4H,GAAAhoB,IAEAgoB,EAAAhoB,EACA35F,EAAArW,IAAA,QAIAg4H,GAAAE,GAEA7hH,EAAArW,IAAA,OAIA82H,EAAA3vC,aAAAjB,EAAA,GAAA7vE,GAAAlW,YAEAwpC,EAAA,GAAAw9C,aAAAjB,EAAA,GAAA4wC,GACA3wC,EAAA,GAAAgB,aAAAjB,EAAA,GAAAv8C,EAAA,IA9FA,GAUA9c,GACAmrG,EAEAjoB,EAAAC,EAAAkoB,EACAx7H,EAAAowC,EAdAz2B,EAAA,GAAA+D,GAEA8rE,KACAv8C,KACAw8C,KAEA2wC,EAAA,GAAA18G,GACA+9G,EAAA,GAAAv+G,GAEAksE,EAAArmE,EAAA,CAeA,KANArU,KAAA86E,WACA96E,KAAAu+B,UACAv+B,KAAA+6E,YAIAzpF,EAAA,EAAiBopF,EAAAppF,EAAeA,IAEhCowC,EAAApwC,GAAAopF,EAAA,GAEAI,EAAAxpF,GAAAokB,EAAAs3G,aAAAtrF,GACAo5C,EAAAxpF,GAAAyD,WAwEA,KApEA43H,IAoEAr7H,EAAA,EAAiBopF,EAAAppF,EAAeA,IAEhCitC,EAAAjtC,GAAAitC,EAAAjtC,EAAA,GAAA61B,QAEA4zD,EAAAzpF,GAAAypF,EAAAzpF,EAAA,GAAA61B,QAEAukG,EAAA3vC,aAAAjB,EAAAxpF,EAAA,GAAAwpF,EAAAxpF,IAEAo6H,EAAAz2H,SAAAs/F,OAAAC,UAEAk3B,EAAA32H,YAEA0sB,EAAA5rB,KAAAwjG,KAAAvoG,EAAA+E,KAAAsoF,MAAArD,EAAAxpF,EAAA,GAAAm3B,IAAAqyD,EAAAxpF,IAAA,OAEAitC,EAAAjtC,GAAAmtC,aAAAsuF,EAAAroB,iBAAAgnB,EAAAjqG,KAIAs5D,EAAAzpF,GAAAyqF,aAAAjB,EAAAxpF,GAAAitC,EAAAjtC,GAOA,IAAA2oF,EAWA,IATAx4D,EAAA5rB,KAAAwjG,KAAAvoG,EAAA+E,KAAAsoF,MAAA5/C,EAAA,GAAA9V,IAAA8V,EAAAm8C,EAAA,WACAj5D,GAAAi5D,EAAA,EAEAI,EAAA,GAAAryD,IAAAijG,EAAA3vC,aAAAx9C,EAAA,GAAAA,EAAAm8C,EAAA,SAEAj5D,MAIAnwB,EAAA,EAAkBopF,EAAAppF,EAAeA,IAGjCitC,EAAAjtC,GAAAmtC,aAAAsuF,EAAAroB,iBAAA5pB,EAAAxpF,GAAAmwB,EAAAnwB,IACAypF,EAAAzpF,GAAAyqF,aAAAjB,EAAAxpF,GAAAitC,EAAAjtC,KA0KA2pF,GAAAl7E,UAAAG,OAAAmpB,OAAA0W,GAAAhgC,WACAk7E,GAAAl7E,UAAAwpB,YAAA0xD,GA4BAkB,GAAAp8E,UAAAG,OAAAmpB,OAAAiX,GAAAvgC,WACAo8E,GAAAp8E,UAAAwpB,YAAA4yD,GA8HAG,GAAAv8E,UAAAG,OAAAmpB,OAAA0W,GAAAhgC,WACAu8E,GAAAv8E,UAAAwpB,YAAA+yD,GA0BAl/D,GAAArd,UAAAG,OAAAmpB,OAAAiX,GAAAvgC,WACAqd,GAAArd,UAAAwpB,YAAAnM,GAMAtsB,EAAAm8H,YAIApL,KAAA,SAAAqL,GAKA,OAHAztH,GAAAytH,EAAAj4H,OACAtD,EAAA,EAEAN,EAAAoO,EAAA,EAAAy7E,EAAA,EAAiCz7E,EAAAy7E,EAAO7pF,EAAA6pF,IAExCvpF,GAAAu7H,EAAA77H,GAAAsH,EAAAu0H,EAAAhyC,GAAAtiF,EAAAs0H,EAAAhyC,GAAAviF,EAAAu0H,EAAA77H,GAAAuH,CAIA,UAAAjH,GAIAw7H,YAAA,WAgBA,QAAAC,GAAAF,EAAAxrF,EAAA9Y,EAAA2B,EAAA9qB,EAAA24E,GAEA,GAAA/mF,GACA0sG,EAAAC,EAAAE,EAAAC,EACAhvE,EAAAC,EAAAguD,EAAAC,CAWA,IATA0gB,EAAAmvB,EAAA90C,EAAA12C,IAAA/oC,EACAqlG,EAAAkvB,EAAA90C,EAAA12C,IAAA9oC,EAEAslG,EAAAgvB,EAAA90C,EAAAxvD,IAAAjwB,EACAwlG,EAAA+uB,EAAA90C,EAAAxvD,IAAAhwB,EAEAu2B,EAAA+9F,EAAA90C,EAAA7tD,IAAA5xB,EACAy2B,EAAA89F,EAAA90C,EAAA7tD,IAAA3xB,EAEA27F,OAAAC,SAAA0J,EAAAH,IAAA3uE,EAAA4uE,IAAAG,EAAAH,IAAA7uE,EAAA4uE,GAAA,QAEA,IAAArY,GAAAC,EAAA0nC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,CAMA,KAJAvoC,EAAAv2D,EAAA+uE,EAAoBvY,EAAAv2D,EAAA+uE,EACpBkvB,EAAAtvB,EAAA5uE,EAAoBm+F,EAAAtvB,EAAA5uE,EACpBm+F,EAAArvB,EAAAH,EAAoByvB,EAAArvB,EAAAH,EAEpB3sG,EAAA,EAAmBoO,EAAApO,EAAOA,IAK1B,GAHA+rF,EAAA8vC,EAAA90C,EAAA/mF,IAAAsH,EACA0kF,EAAA6vC,EAAA90C,EAAA/mF,IAAAuH,IAEAwkF,IAAA2gB,GAAA1gB,IAAA2gB,GACA5gB,IAAA8gB,GAAA7gB,IAAA8gB,GACA/gB,IAAAjuD,GAAAkuD,IAAAjuD,KAEAq+F,EAAArwC,EAAA2gB,EAAsB2vB,EAAArwC,EAAA2gB,EACtB2vB,EAAAvwC,EAAA8gB,EAAsB0vB,EAAAvwC,EAAA8gB,EACtB0vB,EAAAzwC,EAAAjuD,EAAsB2+F,EAAAzwC,EAAAjuD,EAItB6+F,EAAAvoC,EAAAkoC,EAAAjoC,EAAAgoC,EACAI,EAAAR,EAAAG,EAAAF,EAAAC,EACAO,EAAAX,EAAAS,EAAAR,EAAAO,EAEAI,IAAA15B,OAAAC,SAAAw5B,IAAAz5B,OAAAC,SAAAu5B,IAAAx5B,OAAAC,SAAA,QAIA,UAMA,gBAAA04B,EAAA9sF,GAEA,GAAA3gC,GAAAytH,EAAAj4H,MAEA,MAAAwK,EAAA,WAEA,IAMAiiC,GAAA9Y,EAAA2B,EANA+d,KACA8vC,KACA81C,IAMA,IAAAp9H,EAAAm8H,WAAApL,KAAAqL,GAAA,EAEA,IAAAtkG,EAAA,EAAoBnpB,EAAAmpB,EAAOA,IAAAwvD,EAAAxvD,SAI3B,KAAAA,EAAA,EAAoBnpB,EAAAmpB,EAAOA,IAAAwvD,EAAAxvD,GAAAnpB,EAAA,EAAAmpB,CAI3B,IAAAulG,GAAA1uH,EAIA6Q,EAAA,EAAA69G,CAEA,KAAAvlG,EAAAulG,EAAA,EAAwBA,EAAA,GAAQ,CAIhC,GAAA79G,KAAA,EASA,MAAA8vB,GAAA8tF,EACA5lF,CAUA,IAJA5G,EAAA9Y,EAAc8Y,GAAAysF,IAAAzsF,EAAA,GACd9Y,EAAA8Y,EAAA,EAAkB9Y,GAAAulG,IAAAvlG,EAAA,GAClB2B,EAAA3B,EAAA,EAAkB2B,GAAA4jG,IAAA5jG,EAAA,GAElB6iG,EAAAF,EAAAxrF,EAAA9Y,EAAA2B,EAAA4jG,EAAA/1C,GAAA,CAEA,GAAAzmF,GAAAC,EAAAR,EAAA+uF,EAAAhrE,CAmBA,KAfAxjB,EAAAymF,EAAA12C,GACA9vC,EAAAwmF,EAAAxvD,GACAx3B,EAAAgnF,EAAA7tD,GAIA+d,EAAAnzC,MAAA+3H,EAAAv7H,GACAu7H,EAAAt7H,GACAs7H,EAAA97H,KAGA88H,EAAA/4H,MAAAijF,EAAA12C,GAAA02C,EAAAxvD,GAAAwvD,EAAA7tD,KAIA41D,EAAAv3D,EAAAzT,EAAAyT,EAAA,EAAgCulG,EAAAh5G,EAAQgrE,IAAAhrE,IAExCijE,EAAA+H,GAAA/H,EAAAjjE,EAIAg5G,KAIA79G,EAAA,EAAA69G,GAMA,MAAA/tF,GAAA8tF,EACA5lF,MAMA8lF,iBAAA,SAAAlB,EAAA3mC,GAEA,QAAA8nC,GAAAl9C,GAEA,GAAA5kD,GAAA4kD,EAAAl8E,MAEAs3B,GAAA,GAAA4kD,EAAA5kD,EAAA,GAAA4rC,OAAAgZ,EAAA,KAEAA,EAAAzhB,MASA,QAAA4+D,GAAAC,EAAAC,EAAAC,GAGA,MAAAF,GAAA51H,IAAA61H,EAAA71H,EAEA41H,EAAA51H,EAAA61H,EAAA71H,EAEA41H,EAAA51H,GAAA81H,EAAA91H,GAAA81H,EAAA91H,GAAA61H,EAAA71H,EAIA61H,EAAA71H,GAAA81H,EAAA91H,GAAA81H,EAAA91H,GAAA41H,EAAA51H,EAMA41H,EAAA31H,EAAA41H,EAAA51H,EAEA21H,EAAA31H,GAAA61H,EAAA71H,GAAA61H,EAAA71H,GAAA41H,EAAA51H,EAIA41H,EAAA51H,GAAA61H,EAAA71H,GAAA61H,EAAA71H,GAAA21H,EAAA31H,EAQA,QAAA81H,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAC,GAAAJ,EAAAj2H,EAAAg2H,EAAAh2H,EAAAs2H,EAAAL,EAAAh2H,EAAA+1H,EAAA/1H,EACAs2H,EAAAJ,EAAAn2H,EAAAk2H,EAAAl2H,EAAAw2H,EAAAL,EAAAl2H,EAAAi2H,EAAAj2H,EAEAw2H,EAAAT,EAAAh2H,EAAAk2H,EAAAl2H,EACA02H,EAAAV,EAAA/1H,EAAAi2H,EAAAj2H,EAEA02H,EAAAL,EAAAC,EAAAF,EAAAG,EACAI,EAAAN,EAAAG,EAAAJ,EAAAK,CAEA,IAAAx5H,KAAA6C,IAAA42H,GAAA/6B,OAAAC,QAAA,CAIA,GAAAg7B,EACA,IAAAF,EAAA,GAEA,KAAAC,KAAAD,EAAA,QAEA,IADAE,EAAAL,EAAAC,EAAAF,EAAAG,EACA,EAAAG,KAAAF,EAAA,aAES,CAET,GAAAC,EAAA,GAAAD,EAAAC,EAAA,QAEA,IADAC,EAAAL,EAAAC,EAAAF,EAAAG,EACAG,EAAA,GAAAF,EAAAE,EAAA,SAMA,OAAAA,EAEA,UACA,IAAAD,OAAAD,GACAX,KAGA,IAAAa,IAAAF,EAEA,UACA,IAAAC,OAAAD,GACAV,KAIA,QAAAW,EAAA,OAAAV,EACA,IAAAU,IAAAD,EAAA,OAAAR,EAGA,IAAAW,GAAAD,EAAAF,CACA,SAAkB32H,EAAAg2H,EAAAh2H,EAAA82H,EAAAT,EAClBp2H,EAAA+1H,EAAA/1H,EAAA62H,EAAAR,IAKA,OAAAM,GACAJ,EAAAC,IAAAF,EAAAG,EAAA,QAGA,IAAAK,GAAA,IAAAV,GAAA,IAAAC,EACAU,EAAA,IAAAT,GAAA,IAAAC,CAEA,IAAAO,GAAAC,EAEA,MAAAhB,GAAAh2H,IAAAk2H,EAAAl2H,GACAg2H,EAAA/1H,IAAAi2H,EAAAj2H,MACA+1H,EAIA,IAAAe,EAEA,MAAApB,GAAAO,EAAAC,EAAAH,IACAA,KAIA,IAAAgB,EAEA,MAAArB,GAAAK,EAAAC,EAAAC,IACAA,KAKA,IAAAe,GAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,CAsDA,OArDA,KAAAnB,GAGAL,EAAAh2H,EAAAi2H,EAAAj2H,GAEAi3H,EAAAjB,EAA8BmB,EAAAnB,EAAAh2H,EAC9Bk3H,EAAAjB,EAA8BmB,EAAAnB,EAAAj2H,IAI9Bi3H,EAAAhB,EAA8BkB,EAAAlB,EAAAj2H,EAC9Bk3H,EAAAlB,EAA8BoB,EAAApB,EAAAh2H,GAG9Bk2H,EAAAl2H,EAAAm2H,EAAAn2H,GAEAq3H,EAAAnB,EAA8BqB,EAAArB,EAAAl2H,EAC9Bs3H,EAAAnB,EAA8BqB,EAAArB,EAAAn2H,IAI9Bq3H,EAAAlB,EAA8BoB,EAAApB,EAAAn2H,EAC9Bs3H,EAAApB,EAA8BsB,EAAAtB,EAAAl2H,KAO9Bg2H,EAAA/1H,EAAAg2H,EAAAh2H,GAEAg3H,EAAAjB,EAA8BmB,EAAAnB,EAAA/1H,EAC9Bi3H,EAAAjB,EAA8BmB,EAAAnB,EAAAh2H,IAI9Bg3H,EAAAhB,EAA8BkB,EAAAlB,EAAAh2H,EAC9Bi3H,EAAAlB,EAA8BoB,EAAApB,EAAA/1H,GAG9Bi2H,EAAAj2H,EAAAk2H,EAAAl2H,GAEAo3H,EAAAnB,EAA8BqB,EAAArB,EAAAj2H,EAC9Bq3H,EAAAnB,EAA8BqB,EAAArB,EAAAl2H,IAI9Bo3H,EAAAlB,EAA8BoB,EAAApB,EAAAl2H,EAC9Bq3H,EAAApB,EAA8BsB,EAAAtB,EAAAj2H,IAK9Bs3H,GAAAJ,EAEAI,EAAAH,KACAA,IAAAG,EAEAnB,MACAiB,GAGAG,GAAAJ,GAAAC,EAAAH,IACAG,EAAAC,GAIAH,EAAAK,KACAL,IAAAK,EAEApB,MACAa,GAGAO,GAAAJ,GAAAH,EAAAC,IACAD,EAAAK,GAQA,QAAAG,GAAAC,EAAAC,EAAAC,EAAA9B,GAKA,GAAA+B,GAAAF,EAAA33H,EAAA03H,EAAA13H,EAAA83H,EAAAH,EAAA13H,EAAAy3H,EAAAz3H,EACA83H,EAAAH,EAAA53H,EAAA03H,EAAA13H,EAAAg4H,EAAAJ,EAAA33H,EAAAy3H,EAAAz3H,EACAg4H,EAAAnC,EAAA91H,EAAA03H,EAAA13H,EAAAk4H,EAAApC,EAAA71H,EAAAy3H,EAAAz3H,EAGAk4H,EAAAN,EAAAG,EAAAF,EAAAC,EACAK,EAAAP,EAAAK,EAAAJ,EAAAG,CAEA,IAAA/6H,KAAA6C,IAAAo4H,GAAAv8B,OAAAC,QAAA,CAIA,GAAAw8B,GAAAJ,EAAAD,EAAAE,EAAAH,CAGA,OAAAI,GAAA,EAGAC,GAAA,GAAAC,GAAA,EAKAD,GAAA,GAAAC,GAAA,EAQA,MAAAD,GAAA,EAOA,QAAAE,GAAA/D,EAAA3mC,GAKA,QAAA2qC,GAAAC,EAAAC,GAGA,GAAAC,GAAAC,EAAAr8H,OAAA,EAEAs8H,EAAAJ,EAAA,CACA,GAAAI,MAAAF,EAEA,IAAAG,GAAAL,EAAA,CACAK,GAAAH,IAAAG,EAAA,EAEA,IAAAC,GAAArB,EAAAkB,EAAAH,GAAAG,EAAAC,GAAAD,EAAAE,GAAAE,EAAAN,GACA,KAAAK,EAGA,QAKA,IAAAE,GAAAD,EAAAz8H,OAAA,EAEA28H,EAAAR,EAAA,CACA,GAAAQ,MAAAD,EAEA,IAAAE,GAAAT,EAAA,CAIA,OAHAS,GAAAF,IAAAE,EAAA,GAEAJ,EAAArB,EAAAsB,EAAAN,GAAAM,EAAAE,GAAAF,EAAAG,GAAAP,EAAAH,IACAM,GAOA,GAJA,EAQA,QAAAK,GAAAC,EAAAC,GAGA,GAAAC,GAAAC,EAAApJ,CACA,KAAAmJ,EAAA,EAAuBA,EAAAX,EAAAr8H,OAAqBg9H,IAI5C,GAFAC,EAAAD,EAAA,EAA4BC,GAAAZ,EAAAr8H,OAC5B6zH,EAAA4F,EAAAqD,EAAAC,EAAAV,EAAAW,GAAAX,EAAAY,IAAA,GACApJ,EAAA7zH,OAAA,UAIA,UAMA,QAAAk9H,GAAAJ,EAAAC,GAGA,GAAAI,GAAAC,EACAC,EAAAJ,EAAApJ,CACA,KAAAsJ,EAAA,EAAwBA,EAAAG,EAAAt9H,OAA2Bm9H,IAGnD,IADAC,EAAA9rC,EAAAgsC,EAAAH,IACAE,EAAA,EAAwBA,EAAAD,EAAAp9H,OAAuBq9H,IAI/C,GAFAJ,EAAAI,EAAA,EAA6BJ,GAAAG,EAAAp9H,OAC7B6zH,EAAA4F,EAAAqD,EAAAC,EAAAK,EAAAC,GAAAD,EAAAH,IAAA,GACApJ,EAAA7zH,OAAA,UAKA,UAUA,OAvFAy8H,GAiFAc,EAAAC,EACAC,EAAAC,EACAC,EAAAC,EACAC,EAAAC,EACAC,EAAAC,EAtFA3B,EAAApE,EAAAp7H,SA2DAygI,KAyBAW,KAIApwF,EAAA,EAAAqwF,EAAA5sC,EAAAtxF,OAA0Ck+H,EAAArwF,EAAQA,IAElDyvF,EAAAp9H,KAAA2tC,EAMA,KAFA,GAAAswF,GAAA,EACAC,EAAA,EAAAd,EAAAt9H,OACAs9H,EAAAt9H,OAAA,IAEAo+H,MACA,EAAAA,KASA,IAAAZ,EAAAW,EAAyCX,EAAAnB,EAAAr8H,OAA2Bw9H,IAAA,CAEpEC,EAAApB,EAAAmB,GACAD,EAAA,EAGA,QAAA1vF,GAAA,EAAyBA,EAAAyvF,EAAAt9H,OAAuB6tC,IAMhD,GAJA8vF,EAAAL,EAAAzvF,GAGA+vF,EAAAH,EAAA/5H,EAAA,IAAA+5H,EAAA95H,EAAA,IAAAg6H,EACAn6H,SAAAy6H,EAAAL,GAAA,CAEAnB,EAAAnrC,EAAAqsC,EACA,QAAAU,GAAA,EAA2BA,EAAA5B,EAAAz8H,OAAkBq+H,IAG7C,GADAX,EAAAjB,EAAA4B,GACApC,EAAAuB,EAAAa,KACAxB,EAAAY,EAAAC,KACAR,EAAAO,EAAAC,GAAA,CAEAH,EAAAc,EACAf,EAAA9+H,OAAAqvC,EAAA,GAEAgwF,EAAAxB,EAAA7/H,MAAA,EAAAghI,EAAA,GACAM,EAAAzB,EAAA7/H,MAAAghI,GACAO,EAAAtB,EAAAjgI,MAAA+gI,GACAS,EAAAvB,EAAAjgI,MAAA,EAAA+gI,EAAA,GAEAlB,EAAAwB,EAAAhhI,OAAAkhI,GAAAlhI,OAAAmhI,GAAAnhI,OAAAihI,GAEAK,EAAAX,CAKA,OAGA,GAAAD,GAAA,OAEAU,GAAAL,IAAA,EAGA,GAAAL,GAAA,QAMA,MAAAlB,GA3ZAjD,EAAAnB,GACA3mC,EAAAzyF,QAAAu6H,EAuaA,QARA/8H,GAAA0rD,EAAAxnB,EAAAgG,EACA77B,EAAA2G,EACAitH,KAIAC,EAAAtG,EAAAp7H,SAEAgxC,EAAA,EAAAqwF,EAAA5sC,EAAAtxF,OAAyCk+H,EAAArwF,EAAQA,IAEjDhpB,MAAA/Z,UAAA5K,KAAAtD,MAAA2hI,EAAAjtC,EAAAzjD,GAQA,KAAAxxC,EAAA,EAAA0rD,EAAAw2E,EAAAv+H,OAAyC+nD,EAAA1rD,EAAQA,IAEjDqO,EAAA6zH,EAAAliI,GAAAqH,EAAA,IAAA66H,EAAAliI,GAAAsH,EAEAH,SAAA86H,EAAA5zH,GAMA4zH,EAAA5zH,GAAArO,CAKA,IAAAmiI,GAAAxC,EAAA/D,EAAA3mC,GAEAmtC,EAAA5iI,EAAAm8H,WAAAE,YAAAsG,GAAA;AAKA,IAAAniI,EAAA,EAAA0rD,EAAA02E,EAAAz+H,OAAyC+nD,EAAA1rD,EAAQA,IAIjD,IAFAkqC,EAAAk4F,EAAApiI,GAEAkkC,EAAA,EAAmB,EAAAA,EAAOA,IAE1B71B,EAAA67B,EAAAhG,GAAA78B,EAAA,IAAA6iC,EAAAhG,GAAA58B,EAEA0N,EAAAitH,EAAA5zH,GAEAlH,SAAA6N,IAEAk1B,EAAAhG,GAAAlvB,EAQA,OAAAotH,GAAA5hI,UAIA6hI,YAAA,SAAAC,GAEA,MAAA9iI,GAAAm8H,WAAApL,KAAA+R,GAAA,GASAr9B,GAAA,WAEA,QAAAs9B,GAAA1+G,EAAA9jB,GAEA,GAAAusD,GAAA,EAAAzoC,CACA,OAAAyoC,KAAAvsD,EAIA,QAAAyiI,GAAA3+G,EAAA9jB,GAEA,YAAA8jB,KAAA9jB,EAIA,QAAA0iI,GAAA5+G,EAAA9jB,GAEA,MAAA8jB,KAAA9jB,EAIA,gBAAA8jB,EAAAsjC,EAAAC,EAAAC,GAEA,MAAAk7E,GAAA1+G,EAAAsjC,GAAAq7E,EAAA3+G,EAAAujC,GAAAq7E,EAAA5+G,EAAAwjC,OAQAq7E,GAAA,WAEA,QAAAC,GAAA9+G,EAAA9jB,GAEA,GAAAusD,GAAA,EAAAzoC,CACA,OAAAyoC,OAAAvsD,EAIA,QAAA6iI,GAAA/+G,EAAA9jB,GAEA,GAAAusD,GAAA,EAAAzoC,CACA,UAAAyoC,IAAAzoC,EAAA9jB,EAIA,QAAA8iI,GAAAh/G,EAAA9jB,GAEA,GAAAusD,GAAA,EAAAzoC,CACA,UAAAyoC,EAAAzoC,IAAA9jB,EAIA,QAAA+iI,GAAAj/G,EAAA9jB,GAEA,MAAA8jB,OAAA9jB,EAIA,gBAAA8jB,EAAAsjC,EAAAC,EAAAC,EAAAC,GAEA,MAAAq7E,GAAA9+G,EAAAsjC,GAAAy7E,EAAA/+G,EAAAujC,GAAAy7E,EAAAh/G,EAAAwjC,GAAAy7E,EAAAj/G,EAAAyjC,QA6DA2jC,GAAAx8E,UAAAG,OAAAmpB,OAAAiX,GAAAvgC,WACAw8E,GAAAx8E,UAAAwpB,YAAAgzD,GAEAA,GAAAx8E,UAAA08E,aAAA,SAAAD,EAAA38E,GAIA,OAFA8wF,GAAAnU,EAAAvnF,OAEAkrF,EAAA,EAAqBwQ,EAAAxQ,EAAQA,IAAA,CAE7B,GAAAmxC,GAAA90C,EAAA2D,EACAngF,MAAAq0H,SAAA/C,EAAAzxH,KAMA08E,GAAAx8E,UAAAs0H,SAAA,SAAA/C,EAAAzxH,GAyGA,QAAAy0H,GAAAC,EAAA7I,EAAAj3G,GAIA,MAAAi3G,GAAAvkG,QAAA3N,eAAA/E,GAAA3Z,IAAAy5H,GAYA,QAAAC,GAAAC,EAAAC,EAAAC,GASA,GAAAC,GAAAC,EAAAC,EAAA,EAKAC,EAAAN,EAAA97H,EAAA+7H,EAAA/7H,EAAAq8H,EAAAP,EAAA77H,EAAA87H,EAAA97H,EACAq8H,EAAAN,EAAAh8H,EAAA87H,EAAA97H,EAAAu8H,EAAAP,EAAA/7H,EAAA67H,EAAA77H,EAEAu8H,EAAAJ,IAAAC,IAGAI,EAAAL,EAAAG,EAAAF,EAAAC,CAEA,IAAAp/H,KAAA6C,IAAA08H,GAAA7gC,OAAAC,QAAA,CAMA,GAAA6gC,GAAAx/H,KAAAiD,KAAAq8H,GACAG,EAAAz/H,KAAAiD,KAAAm8H,IAAAC,KAIAK,EAAAb,EAAA/7H,EAAAq8H,EAAAK,EACAG,EAAAd,EAAA97H,EAAAm8H,EAAAM,EAEAI,EAAAd,EAAAh8H,EAAAu8H,EAAAI,EACAI,EAAAf,EAAA/7H,EAAAq8H,EAAAK,EAIAK,IAAAF,EAAAF,GAAAL,GACAQ,EAAAF,GAAAP,IACAF,EAAAG,EAAAF,EAAAC,EAIAL,GAAAW,EAAAR,EAAAY,EAAAlB,EAAA97H,EACAk8H,EAAAW,EAAAR,EAAAW,EAAAlB,EAAA77H,CAIA,IAAAg9H,GAAAhB,IAAAC,GACA,OAAAe,EAEA,UAAAhpH,GAAAgoH,EAAAC,EAIAC,GAAAj/H,KAAAiD,KAAA88H,EAAA,OAIO,CAIP,GAAAC,IAAA,CACAd,GAAAxgC,OAAAC,QAEAygC,EAAA1gC,OAAAC,UAEAqhC,GAAA,GAMAd,GAAAxgC,OAAAC,QAEAygC,GAAA1gC,OAAAC,UAEAqhC,GAAA,GAMAhgI,KAAAkqF,KAAAi1C,KAAAn/H,KAAAkqF,KAAAm1C,KAEAW,GAAA,GAQAA,GAGAjB,GAAAI,EACAH,EAAAE,EACAD,EAAAj/H,KAAAiD,KAAAq8H,KAKAP,EAAAG,EACAF,EAAAG,EACAF,EAAAj/H,KAAAiD,KAAAq8H,EAAA,IAMA,UAAAvoH,GAAAgoH,EAAAE,EAAAD,EAAAC,GAwMA,QAAAgB,KAEA,GAAA94C,EAAA,CAEA,GAAA+4C,GAAA,EACAvlH,EAAAwlH,EAAAD,CAIA,KAAAzkI,EAAA,EAAmB2kI,EAAA3kI,EAAUA,IAE7BkqC,EAAA1J,EAAAxgC,GACA4kI,EAAA16F,EAAA,GAAAhrB,EAAAgrB,EAAA,GAAAhrB,EAAAgrB,EAAA,GAAAhrB,EASA,KALAulH,EAAAI,EAAA,EAAAC,EACA5lH,EAAAwlH,EAAAD,EAIAzkI,EAAA,EAAmB2kI,EAAA3kI,EAAUA,IAE7BkqC,EAAA1J,EAAAxgC,GACA4kI,EAAA16F,EAAA,GAAAhrB,EAAAgrB,EAAA,GAAAhrB,EAAAgrB,EAAA,GAAAhrB,OAIO,CAIP,IAAAlf,EAAA,EAAmB2kI,EAAA3kI,EAAUA,IAE7BkqC,EAAA1J,EAAAxgC,GACA4kI,EAAA16F,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAMA,KAAAlqC,EAAA,EAAmB2kI,EAAA3kI,EAAUA,IAE7BkqC,EAAA1J,EAAAxgC,GACA4kI,EAAA16F,EAAA,GAAAw6F,EAAAG,EAAA36F,EAAA,GAAAw6F,EAAAG,EAAA36F,EAAA,GAAAw6F,EAAAG,IAUA,QAAAE,KAEA,GAAAC,GAAA,CAIA,KAHAC,EAAArJ,EAAAoJ,GACAA,GAAApJ,EAAAj4H,OAEA6tC,EAAA,EAAAqwF,EAAA5sC,EAAAtxF,OAAqCk+H,EAAArwF,EAAQA,IAE7C0zF,EAAAjwC,EAAAzjD,GACAyzF,EAAAC,EAAAF,GAGAA,GAAAE,EAAAvhI,OAMA,QAAAshI,GAAArJ,EAAAoJ,GAEA,GAAA5yH,GAAAk6C,CAGA,KAFAtsD,EAAA47H,EAAAj4H,SAEA3D,GAAA,IAEAoS,EAAApS,EACAssD,EAAAtsD,EAAA,EACA,EAAAssD,MAAAsvE,EAAAj4H,OAAA,EAIA,IAAAkrF,GAAA,EAAAwQ,EAAAwlC,EAAA,EAAAC,CAEA,KAAAj2C,EAAA,EAAmBwQ,EAAAxQ,EAAQA,IAAA,CAE3B,GAAAs2C,GAAAT,EAAA71C,EACAu2C,EAAAV,GAAA71C,EAAA,GAEAxuF,EAAA2kI,EAAA5yH,EAAA+yH,EACA7kI,EAAA0kI,EAAA14E,EAAA64E,EACArlI,EAAAklI,EAAA14E,EAAA84E,EACAnhG,EAAA+gG,EAAA5yH,EAAAgzH,CAEAC,GAAAhlI,EAAAC,EAAAR,EAAAmkC,EAAA23F,EAAA/sC,EAAAwQ,EAAAjtF,EAAAk6C,KASA,QAAAh1B,GAAAjwB,EAAAC,EAAAC,GAEA6mB,EAAAmS,SAAA18B,KAAA,GAAA6Z,GAAArW,EAAAC,EAAAC,IAIA,QAAAq9H,GAAAvkI,EAAAC,EAAAR,GAEAO,GAAAilI,EACAhlI,GAAAglI,EACAxlI,GAAAwlI,EAEAl3G,EAAAoS,MAAA38B,KAAA,GAAA8pD,IAAAttD,EAAAC,EAAAR,EAAA,aAEA,IAAAiiC,GAAAwjG,EAAAC,cAAAp3G,EAAA/tB,EAAAC,EAAAR,EAEAsuB,GAAA6gB,cAAA,GAAAprC,KAAAk+B,GAIA,QAAAsjG,GAAAhlI,EAAAC,EAAAR,EAAAmkC,EAAAwhG,EAAAC,EAAAC,EAAAC,EAAAC,GAEAxlI,GAAAilI,EACAhlI,GAAAglI,EACAxlI,GAAAwlI,EACArhG,GAAAqhG,EAEAl3G,EAAAoS,MAAA38B,KAAA,GAAA8pD,IAAAttD,EAAAC,EAAA2jC,EAAA,cACA7V,EAAAoS,MAAA38B,KAAA,GAAA8pD,IAAArtD,EAAAR,EAAAmkC,EAAA,aAEA,IAAAlC,GAAAwjG,EAAAO,mBAAA13G,EAAA/tB,EAAAC,EAAAR,EAAAmkC,EAEA7V,GAAA6gB,cAAA,GAAAprC,MAAAk+B,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACA3T,EAAA6gB,cAAA,GAAAprC,MAAAk+B,EAAA,GAAAA,EAAA,GAAAA,EAAA,KA9jBA,GAaAgkG,GAKAC,EAAAh9C,EAAArvE,EAAAssH,EAlBAzpG,EAAAr1B,SAAAoH,EAAAiuB,OAAAjuB,EAAAiuB,OAAA,IAEAgvD,EAAArkF,SAAAoH,EAAAi9E,eAAAj9E,EAAAi9E,eAAA,EACAC,EAAAtkF,SAAAoH,EAAAk9E,UAAAl9E,EAAAk9E,UAAAD,EAAA,EACAs5C,EAAA39H,SAAAoH,EAAAu2H,cAAAv2H,EAAAu2H,cAAA,EAEAp5C,EAAAvkF,SAAAoH,EAAAm9E,aAAAn9E,EAAAm9E,cAAA,EAEAH,EAAApkF,SAAAoH,EAAAg9E,cAAAh9E,EAAAg9E,cAAA,GAEAs5C,EAAA19H,SAAAoH,EAAAs2H,MAAAt2H,EAAAs2H,MAAA,EAEAqB,EAAA33H,EAAA23H,YACAC,GAAA,EAGAZ,EAAAp+H,SAAAoH,EAAA63H,YAAA73H,EAAA63H,YAAAn7C,GAAAo7C,gBAGAH,KAEAH,EAAAG,EAAAI,gBAAAzB,GAEAsB,GAAA,EACAz6C,GAAA,EAOAs6C,EAAA7+H,SAAAoH,EAAA+6E,OAAA/6E,EAAA+6E,OAAA,GAAAZ,IAAAa,aAAA28C,EAAArB,GAAA,GAIA77C,EAAA,GAAAtrE,GACA/D,EAAA,GAAA+D,GACAuoH,EAAA,GAAAvoH,IAMAguE,IAEAo5C,EAAA,EACAt5C,EAAA,EACAC,EAAA,EAMA,IAAAy5C,GAAA1zF,EAAAqwF,EACAzzG,EAAA1f,KAEA42H,EAAA52H,KAAA6xB,SAAA58B,OAEA4iI,EAAAvG,EAAAwG,cAAAj7C,GAEAhrD,EAAAgmG,EAAAvG,MACA/qC,EAAAsxC,EAAAtxC,MAEAwxC,GAAAjnI,EAAAm8H,WAAA0G,YAAA9hG,EAEA,IAAAkmG,EAAA,CAMA,IAJAlmG,IAAAkmG,UAIAj1F,EAAA,EAAAqwF,EAAA5sC,EAAAtxF,OAAqCk+H,EAAArwF,EAAQA,IAE7C0zF,EAAAjwC,EAAAzjD,GAEAhyC,EAAAm8H,WAAA0G,YAAA6C,KAEAjwC,EAAAzjD,GAAA0zF,EAAAuB,UAMAA,IAAA,EAKA,GAAAjmG,GAAAhhC,EAAAm8H,WAAAmB,iBAAAv8F,EAAA00D,GAIA2mC,EAAAr7F,CAEA,KAAAiR,EAAA,EAAAqwF,EAAA5sC,EAAAtxF,OAAoCk+H,EAAArwF,EAAQA,IAE5C0zF,EAAAjwC,EAAAzjD,GAEAjR,IAAA//B,OAAA0kI,EAgJA,QAnIA5kI,GAAAomI,EAAA7iH,EAAAtc,EACAshF,EACA3+C,EADAw6F,EAAAnkG,EAAA58B,OACAghI,EAAAnkG,EAAA78B,OA+HAgjI,KAEA3mI,EAAA,EAAA0rD,EAAAkwE,EAAAj4H,OAAAyO,EAAAs5C,EAAA,EAAAY,EAAAtsD,EAAA,EAAiE0rD,EAAA1rD,EAAQA,IAAAoS,IAAAk6C,IAEzEl6C,IAAAs5C,IAAAt5C,EAAA,GACAk6C,IAAAZ,IAAAY,EAAA,GAKAq6E,EAAA3mI,GAAAkjI,EAAAtH,EAAA57H,GAAA47H,EAAAxpH,GAAAwpH,EAAAtvE,GAIA,IAAAs6E,GAAAC,KAAAC,GAAAH,EAAAnmI,QAEA,KAAAgxC,EAAA,EAAAqwF,EAAA5sC,EAAAtxF,OAAoCk+H,EAAArwF,EAAQA,IAAA,CAM5C,IAJA0zF,EAAAjwC,EAAAzjD,GAEAo1F,KAEA5mI,EAAA,EAAA0rD,EAAAw5E,EAAAvhI,OAAAyO,EAAAs5C,EAAA,EAAAY,EAAAtsD,EAAA,EAA4D0rD,EAAA1rD,EAAQA,IAAAoS,IAAAk6C,IAEpEl6C,IAAAs5C,IAAAt5C,EAAA,GACAk6C,IAAAZ,IAAAY,EAAA,GAGAs6E,EAAA5mI,GAAAkjI,EAAAgC,EAAAllI,GAAAklI,EAAA9yH,GAAA8yH,EAAA54E,GAIAu6E,GAAAhjI,KAAA+iI,GACAE,MAAAtmI,OAAAomI,GAOA,IAAAtmI,EAAA,EAAiBwkI,EAAAxkI,EAAmBA,IAAA,CAUpC,IANAujB,EAAAvjB,EAAAwkI,EACAv9H,EAAAikF,EAAAjnF,KAAAqjB,IAAA/D,EAAAtf,KAAA2e,GAAA,GACAwjH,EAAAj7C,EAAAlnF,KAAAmjB,IAAA7D,EAAAtf,KAAA2e,GAAA,GAIAljB,EAAA,EAAA0rD,EAAAkwE,EAAAj4H,OAAuC+nD,EAAA1rD,EAAQA,IAE/C6oF,EAAAm6C,EAAApH,EAAA57H,GAAA2mI,EAAA3mI,GAAA0mI,GAEApvG,EAAAuxD,EAAAxhF,EAAAwhF,EAAAvhF,GAAAC,EAMA,KAAAiqC,EAAA,EAAAqwF,EAAA5sC,EAAAtxF,OAAqCk+H,EAAArwF,EAAQA,IAK7C,IAHA0zF,EAAAjwC,EAAAzjD,GACAo1F,EAAAC,EAAAr1F,GAEAxxC,EAAA,EAAA0rD,EAAAw5E,EAAAvhI,OAAsC+nD,EAAA1rD,EAAQA,IAE9C6oF,EAAAm6C,EAAAkC,EAAAllI,GAAA4mI,EAAA5mI,GAAA0mI,GAEApvG,EAAAuxD,EAAAxhF,EAAAwhF,EAAAvhF,GAAAC,GAYA,IAJAm/H,EAAAj7C,EAIAzrF,EAAA,EAAiB0kI,EAAA1kI,EAAUA,IAE3B6oF,EAAA6C,EAAAs3C,EAAAziG,EAAAvgC,GAAA8mI,GAAA9mI,GAAA0mI,GAAAnmG,EAAAvgC,GAEAmmI,GAQAxsH,EAAA7O,KAAAk7H,EAAA/4F,QAAA,IAAA/kB,eAAA2gE,EAAAxhF,GACA2hF,EAAAl+E,KAAAk7H,EAAAv8C,UAAA,IAAAvhE,eAAA2gE,EAAAvhF,GAEA2+H,EAAAn7H,KAAAi7H,EAAA,IAAAv8H,IAAAmQ,GAAAnQ,IAAAw/E,GAEA1xD,EAAA2uG,EAAA5+H,EAAA4+H,EAAA3+H,EAAA2+H,EAAA1+H,IAXA+vB,EAAAuxD,EAAAxhF,EAAAwhF,EAAAvhF,EAAA,EAoBA,IAAAunF,GAEA,KAAAA,GAAA,EAAiBg2C,GAAAh2C,GAAYA,KAE7B,IAAA7uF,EAAA,EAAkB0kI,EAAA1kI,EAAUA,IAE5B6oF,EAAA6C,EAAAs3C,EAAAziG,EAAAvgC,GAAA8mI,GAAA9mI,GAAA0mI,GAAAnmG,EAAAvgC,GAEAmmI,GAQAxsH,EAAA7O,KAAAk7H,EAAA/4F,QAAA4hD,KAAA3mE,eAAA2gE,EAAAxhF,GACA2hF,EAAAl+E,KAAAk7H,EAAAv8C,UAAAoF,KAAA3mE,eAAA2gE,EAAAvhF,GAEA2+H,EAAAn7H,KAAAi7H,EAAAl3C,KAAArlF,IAAAmQ,GAAAnQ,IAAAw/E,GAEA1xD,EAAA2uG,EAAA5+H,EAAA4+H,EAAA3+H,EAAA2+H,EAAA1+H,IAXA+vB,EAAAuxD,EAAAxhF,EAAAwhF,EAAAvhF,EAAAk1B,EAAAqoG,EAAAh2C,GAuBA,KAAAvuF,EAAAwkI,EAAA,EAAiCxkI,GAAA,EAAQA,IAAA,CAQzC,IANAujB,EAAAvjB,EAAAwkI,EACAv9H,EAAAikF,EAAAjnF,KAAAqjB,IAAA/D,EAAAtf,KAAA2e,GAAA,GACAwjH,EAAAj7C,EAAAlnF,KAAAmjB,IAAA7D,EAAAtf,KAAA2e,GAAA,GAIAljB,EAAA,EAAA0rD,EAAAkwE,EAAAj4H,OAAuC+nD,EAAA1rD,EAAQA,IAE/C6oF,EAAAm6C,EAAApH,EAAA57H,GAAA2mI,EAAA3mI,GAAA0mI,GACApvG,EAAAuxD,EAAAxhF,EAAAwhF,EAAAvhF,EAAAk1B,EAAAj1B,EAMA,KAAAiqC,EAAA,EAAAqwF,EAAA5sC,EAAAtxF,OAAqCk+H,EAAArwF,EAAQA,IAK7C,IAHA0zF,EAAAjwC,EAAAzjD,GACAo1F,EAAAC,EAAAr1F,GAEAxxC,EAAA,EAAA0rD,EAAAw5E,EAAAvhI,OAAsC+nD,EAAA1rD,EAAQA,IAE9C6oF,EAAAm6C,EAAAkC,EAAAllI,GAAA4mI,EAAA5mI,GAAA0mI,GAEAP,EAMA7uG,EAAAuxD,EAAAxhF,EAAAwhF,EAAAvhF,EAAAy+H,EAAAlB,EAAA,GAAAv9H,EAAAy+H,EAAAlB,EAAA,GAAAx9H,EAAAE,GAJA+vB,EAAAuxD,EAAAxhF,EAAAwhF,EAAAvhF,EAAAk1B,EAAAj1B,GAkBAi9H,IAIAO,KAsJA95C,GAAAo7C,kBAEAb,cAAA,SAAA5pH,EAAAmrH,EAAAC,EAAAC,GAEA,GAAA1mG,GAAA3kB,EAAA2kB,SAEAlgC,EAAAkgC,EAAAwmG,GACAzmI,EAAAigC,EAAAymG,GACAlnI,EAAAygC,EAAA0mG,EAEA,QACA,GAAA3rH,GAAAjb,EAAAgH,EAAAhH,EAAAiH,GACA,GAAAgU,GAAAhb,EAAA+G,EAAA/G,EAAAgH,GACA,GAAAgU,GAAAxb,EAAAuH,EAAAvH,EAAAwH,KAKAw+H,mBAAA,SAAAlqH,EAAAmrH,EAAAC,EAAAC,EAAAC,GAEA,GAAA3mG,GAAA3kB,EAAA2kB,SAEAlgC,EAAAkgC,EAAAwmG,GACAzmI,EAAAigC,EAAAymG,GACAlnI,EAAAygC,EAAA0mG,GACAhjG,EAAA1D,EAAA2mG,EAEA,OAAA3iI,MAAA6C,IAAA/G,EAAAiH,EAAAhH,EAAAgH,GAAA,KAGA,GAAAgU,GAAAjb,EAAAgH,EAAA,EAAAhH,EAAAkH,GACA,GAAA+T,GAAAhb,EAAA+G,EAAA,EAAA/G,EAAAiH,GACA,GAAA+T,GAAAxb,EAAAuH,EAAA,EAAAvH,EAAAyH,GACA,GAAA+T,GAAA2oB,EAAA58B,EAAA,EAAA48B,EAAA18B,KAMA,GAAA+T,GAAAjb,EAAAiH,EAAA,EAAAjH,EAAAkH,GACA,GAAA+T,GAAAhb,EAAAgH,EAAA,EAAAhH,EAAAiH,GACA,GAAA+T,GAAAxb,EAAAwH,EAAA,EAAAxH,EAAAyH,GACA,GAAA+T,GAAA2oB,EAAA38B,EAAA,EAAA28B,EAAA18B,MA0DA6jF,GAAA38E,UAAAG,OAAAmpB,OAAAkzD,GAAAx8E,WACA28E,GAAA38E,UAAAwpB,YAAAmzD,GAqGAO,GAAAl9E,UAAAG,OAAAmpB,OAAA0W,GAAAhgC,WACAk9E,GAAAl9E,UAAAwpB,YAAA0zD,GA0BAxmE,GAAA1W,UAAAG,OAAAmpB,OAAAiX,GAAAvgC,WACA0W,GAAA1W,UAAAwpB,YAAA9S,GAwHA+mE,GAAAz9E,UAAAG,OAAAmpB,OAAA0W,GAAAhgC,WACAy9E,GAAAz9E,UAAAwpB,YAAAi0D,GAyBAQ,GAAAj+E,UAAAG,OAAAmpB,OAAAiX,GAAAvgC,WACAi+E,GAAAj+E,UAAAwpB,YAAAy0D,GAwBAC,GAAAl+E,UAAAG,OAAAmpB,OAAAiX,GAAAvgC,WACAk+E,GAAAl+E,UAAAwpB,YAAA00D,GA2JAC,GAAAn+E,UAAAG,OAAAmpB,OAAA0W,GAAAhgC,WACAm+E,GAAAn+E,UAAAwpB,YAAA20D,GAiCAK,GAAAx+E,UAAAG,OAAAmpB,OAAAiX,GAAAvgC,WACAw+E,GAAAx+E,UAAAwpB,YAAAg1D,GAgCAC,GAAAz+E,UAAAG,OAAAmpB,OAAAiX,GAAAvgC,WACAy+E,GAAAz+E,UAAAwpB,YAAAi1D,GAKAA,GAAAz+E,UAAA08E,aAAA,SAAAD,EAAA38E,GAEA,OAAAvO,GAAA,EAAAi7B,EAAAiwD,EAAAvnF,OAAwCs3B,EAAAj7B,EAAOA,IAE/C0O,KAAAq0H,SAAA73C,EAAAlrF,GAAAuO,EAIA,OAAAG,OAOAw+E,GAAAz+E,UAAAs0H,SAAA,SAAA/C,EAAAzxH,GAEApH,SAAAoH,SACA,IAOAvO,GAAAi7B,EAAAmlG,EAPA70C,EAAApkF,SAAAoH,EAAAg9E,cAAAh9E,EAAAg9E,cAAA,GAEApzE,EAAA5J,EAAA4J,SACAotH,EAAAp+H,SAAAoH,EAAA63H,YAAAn7C,GAAAo7C,iBAAA93H,EAAA63H,YAMAd,EAAA52H,KAAA6xB,SAAA58B,OACA4iI,EAAAvG,EAAAwG,cAAAj7C,GAEAhrD,EAAAgmG,EAAAvG,MACA/qC,EAAAsxC,EAAAtxC,MAEAwxC,GAAAjnI,EAAAm8H,WAAA0G,YAAA9hG,EAEA,IAAAkmG,EAAA,CAMA,IAJAlmG,IAAAkmG,UAIAzmI,EAAA,EAAAi7B,EAAAg6D,EAAAtxF,OAAoCs3B,EAAAj7B,EAAOA,IAE3CogI,EAAAnrC,EAAAj1F,GAEAR,EAAAm8H,WAAA0G,YAAAjC,KAEAnrC,EAAAj1F,GAAAogI,EAAAqG,UAMAA,IAAA,EAIA,GAAAjmG,GAAAhhC,EAAAm8H,WAAAmB,iBAAAv8F,EAAA00D,EAIA,KAAAj1F,EAAA,EAAAi7B,EAAAg6D,EAAAtxF,OAAmCs3B,EAAAj7B,EAAOA,IAE1CogI,EAAAnrC,EAAAj1F,GACAugC,IAAA//B,OAAA4/H,EAMA,IAAAv3C,GACA3+C,EADAw6F,EAAAnkG,EAAA58B,OACAghI,EAAAnkG,EAAA78B,MAEA,KAAA3D,EAAA,EAAiB0kI,EAAA1kI,EAAUA,IAE3B6oF,EAAAtoD,EAAAvgC,GAEA0O,KAAA6xB,SAAA18B,KAAA,GAAA6Z,GAAAmrE,EAAAxhF,EAAAwhF,EAAAvhF,EAAA,GAIA,KAAAtH,EAAA,EAAiB2kI,EAAA3kI,EAAUA,IAAA,CAE3BkqC,EAAA1J,EAAAxgC,EAEA,IAAAK,GAAA6pC,EAAA,GAAAo7F,EACAhlI,EAAA4pC,EAAA,GAAAo7F,EACAxlI,EAAAoqC,EAAA,GAAAo7F,CAEA52H,MAAA8xB,MAAA38B,KAAA,GAAA8pD,IAAAttD,EAAAC,EAAAR,EAAA,UAAAqY,IACAzJ,KAAAugC,cAAA,GAAAprC,KAAA0hI,EAAAC,cAAA92H,KAAArO,EAAAC,EAAAR,MAmGAqtF,GAAA1+E,UAAAG,OAAAmpB,OAAA0W,GAAAhgC,WACA0+E,GAAA1+E,UAAAwpB,YAAAk1D,GA6TAS,GAAAn/E,UAAAG,OAAAmpB,OAAA0W,GAAAhgC,WACAm/E,GAAAn/E,UAAAwpB,YAAA21D,GA4BArrE,GAAA9T,UAAAG,OAAAmpB,OAAAiX,GAAAvgC,WACA8T,GAAA9T,UAAAwpB,YAAA1V,GA8BAmsE,GAAAjgF,UAAAG,OAAAmpB,OAAAxV,GAAA9T,WACAigF,GAAAjgF,UAAAwpB,YAAAy2D,GA6BAC,GAAAlgF,UAAAG,OAAAmpB,OAAA0W,GAAAhgC,WACAkgF,GAAAlgF,UAAAwpB,YAAA02D,GAmEAC,GAAAngF,UAAAG,OAAAmpB,OAAA0W,GAAAhgC,WACAmgF,GAAAngF,UAAAwpB,YAAA22D,GAuBA/rE,GAAApU,UAAAG,OAAAmpB,OAAAiX,GAAAvgC,WACAoU,GAAApU,UAAAwpB,YAAApV,GA2BAT,GAAA3T,UAAAG,OAAAmpB,OAAAiX,GAAAvgC,WACA2T,GAAA3T,UAAAwpB,YAAA7V,EAIA,IAAA+kH,IAAAv4H,OAAAjF,QACAm8E,qBACAY,sBACA4B,uBACAC,sBACAC,uBACAC,wBACAnB,sBACAoB,gBACAmC,qBACAlB,2BACA79D,iBACAk/D,uBACAI,gBACAO,wBACAxmE,kBACAunE,gBACAR,sBACAnoE,uBACA4oE,iBACAM,iBACAL,uBACAM,iBACAjC,mBACAkC,iBACAuB,gBACAC,sBACApsE,oBACAqrE,0BACAgB,wBACA/rE,kBACAkuC,qBACA3uC,gBAqCA2sE,IAAAtgF,UAAAG,OAAAmpB,OAAAguB,EAAAt3C,WACAsgF,GAAAtgF,UAAAwpB,YAAA82D,GAEAA,GAAAtgF,UAAA24H,kBAAA,EAcAl4C,GAAAzgF,UAAAG,OAAAmpB,OAAAguB,EAAAt3C,WACAygF,GAAAzgF,UAAAwpB,YAAAi3D,GAEAA,GAAAzgF,UAAAyqD,qBAAA,EAkBAryC,GAAApY,WAEAwpB,YAAApR,GAEAwlC,iBAAA,EAEA+6C,OAAA,SAAAC,GAeA,OAbAlE,IACAqE,UACAnqE,QAAA,IACAxpB,KAAA,WACA4zF,UAAA,oBAEAjwD,KAAA9oC,KAAA8oC,KACA3jC,KAAAnF,KAAAmF,KACAlH,cAGAA,EAAA+B,KAAA/B,UAEA3M,EAAA,EAAAi7B,EAAAtuB,EAAAhJ,OAA4Cs3B,EAAAj7B,EAAOA,IAAA,CAEnD,GAAAmY,GAAAxL,EAAA3M,GAAAonG,OAAAC,SACAlvF,GAAAqvF,SAEArE,EAAAx2F,UAAA9I,KAAAsU,GAMA,MAFAgrF,GAAAnmF,QAAAtO,KAAAsO,QAEAmmF,GAIAttE,MAAA,WAIA,OAFA1d,GAAA,GAAAzJ,MAAAupB,YAEAj4B,EAAA,EAAsBA,EAAA0O,KAAA/B,UAAAhJ,OAA2B3D,IAEjDmY,EAAAxL,UAAA9I,KAAA6K,KAAA/B,UAAA3M,GAAA61B,QAMA,OAFA1d,GAAA6E,QAAAtO,KAAAsO,QAEA7E,IAmHAukD,GAAAjuD,UAAAG,OAAAmpB,OAAAxf,EAAA9J,WACAiuD,GAAAjuD,UAAAwpB,YAAAykC,GAEAA,GAAAjuD,UAAAsoE,wBAAA,EAEAra,GAAAjuD,UAAA3D,KAAA,SAAAyW,GAoDA,MAlDAhJ,GAAA9J,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAs3C,SAAqBmpC,SAAA,IAErBzgF,KAAAmK,MAAA/N,KAAAyW,EAAA1I,OACAnK,KAAAyqE,UAAA53D,EAAA43D,UACAzqE,KAAA0qE,UAAA73D,EAAA63D,UAEA1qE,KAAAgK,IAAA6I,EAAA7I,IAEAhK,KAAAyK,SAAAoI,EAAApI,SACAzK,KAAAqqE,kBAAAx3D,EAAAw3D,kBAEArqE,KAAAo/C,MAAAvsC,EAAAusC,MACAp/C,KAAAq/C,eAAAxsC,EAAAwsC,eAEAr/C,KAAAoK,SAAAhO,KAAAyW,EAAAzI,UACApK,KAAA0qD,YAAA73C,EAAA63C,YACA1qD,KAAA+pE,kBAAAl3D,EAAAk3D,kBAEA/pE,KAAA6nD,QAAAh1C,EAAAg1C,QACA7nD,KAAAuqE,UAAA13D,EAAA03D,UAEAvqE,KAAAsK,UAAAuI,EAAAvI,UACAtK,KAAAwqE,YAAApuE,KAAAyW,EAAA23D,aAEAxqE,KAAAm4C,gBAAAtlC,EAAAslC,gBACAn4C,KAAAo4C,kBAAAvlC,EAAAulC,kBACAp4C,KAAAq4C,iBAAAxlC,EAAAwlC,iBAEAr4C,KAAA2qD,aAAA93C,EAAA83C,aAEA3qD,KAAA4qD,aAAA/3C,EAAA+3C,aAEA5qD,KAAAuK,SAAAsI,EAAAtI,SAEAvK,KAAAwK,OAAAqI,EAAArI,OACAxK,KAAA2qE,gBAAA93D,EAAA83D,gBAEA3qE,KAAAy/C,gBAAA5sC,EAAA4sC,gBAEAz/C,KAAA8yB,UAAAjgB,EAAAigB,UACA9yB,KAAAgzB,mBAAAngB,EAAAmgB,mBACAhzB,KAAAizB,iBAAApgB,EAAAogB,iBACAjzB,KAAAkzB,kBAAArgB,EAAAqgB,kBAEAlzB,KAAAw3C,SAAA3kC,EAAA2kC,SACAx3C,KAAA2gC,aAAA9tB,EAAA8tB,aACA3gC,KAAAy3C,aAAA5kC,EAAA4kC,aAEAz3C,MA6BAiuD,GAAAluD,UAAAG,OAAAmpB,OAAA2kC,GAAAjuD,WACAkuD,GAAAluD,UAAAwpB,YAAA0kC,GAEAA,GAAAluD,UAAAwpE,wBAAA,EAEAtb,GAAAluD,UAAA3D,KAAA,SAAAyW,GAWA,MATAm7C,IAAAjuD,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAs3C,SAAqBopC,SAAA,IAErB1gF,KAAAw/C,aAAA3sC,EAAA2sC,aAEAx/C,KAAA4qE,UAAA/3D,EAAA+3D,UACA5qE,KAAA6qE,mBAAAh4D,EAAAg4D,mBAEA7qE,MA4GAgL,GAAAjL,UAAAG,OAAAmpB,OAAAxf,EAAA9J,WACAiL,GAAAjL,UAAAwpB,YAAAve,GAEAA,GAAAjL,UAAAqoE,qBAAA,EAEAp9D,GAAAjL,UAAA3D,KAAA,SAAAyW,GAgDA,MA9CAhJ,GAAA9J,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAmK,MAAA/N,KAAAyW,EAAA1I,OACAnK,KAAAsqE,SAAAluE,KAAAyW,EAAAy3D,UACAtqE,KAAA6L,UAAAgH,EAAAhH,UAEA7L,KAAAgK,IAAA6I,EAAA7I,IAEAhK,KAAAyK,SAAAoI,EAAApI,SACAzK,KAAAqqE,kBAAAx3D,EAAAw3D,kBAEArqE,KAAAo/C,MAAAvsC,EAAAusC,MACAp/C,KAAAq/C,eAAAxsC,EAAAwsC,eAEAr/C,KAAAoK,SAAAhO,KAAAyW,EAAAzI,UACApK,KAAA0qD,YAAA73C,EAAA63C,YACA1qD,KAAA+pE,kBAAAl3D,EAAAk3D,kBAEA/pE,KAAA6nD,QAAAh1C,EAAAg1C,QACA7nD,KAAAuqE,UAAA13D,EAAA03D,UAEAvqE,KAAAsK,UAAAuI,EAAAvI,UACAtK,KAAAwqE,YAAApuE,KAAAyW,EAAA23D,aAEAxqE,KAAAm4C,gBAAAtlC,EAAAslC,gBACAn4C,KAAAo4C,kBAAAvlC,EAAAulC,kBACAp4C,KAAAq4C,iBAAAxlC,EAAAwlC,iBAEAr4C,KAAAqK,YAAAwI,EAAAxI,YAEArK,KAAAuK,SAAAsI,EAAAtI,SAEAvK,KAAAwK,OAAAqI,EAAArI,OACAxK,KAAAs/C,QAAAzsC,EAAAysC,QACAt/C,KAAAw/C,aAAA3sC,EAAA2sC,aACAx/C,KAAAy/C,gBAAA5sC,EAAA4sC,gBAEAz/C,KAAA8yB,UAAAjgB,EAAAigB,UACA9yB,KAAAgzB,mBAAAngB,EAAAmgB,mBACAhzB,KAAAizB,iBAAApgB,EAAAogB,iBACAjzB,KAAAkzB,kBAAArgB,EAAAqgB,kBAEAlzB,KAAAw3C,SAAA3kC,EAAA2kC,SACAx3C,KAAA2gC,aAAA9tB,EAAA8tB,aACA3gC,KAAAy3C,aAAA5kC,EAAA4kC,aAEAz3C,MAgCAkL,GAAAnL,UAAAG,OAAAmpB,OAAAxf,EAAA9J,WACAmL,GAAAnL,UAAAwpB,YAAAre,GAEAA,GAAAnL,UAAA2pE,sBAAA,EAEAx+D,GAAAnL,UAAA3D,KAAA,SAAAyW,GAOA,MALAhJ,GAAA9J,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAA8yB,UAAAjgB,EAAAigB,UACA9yB,KAAAgzB,mBAAAngB,EAAAmgB,mBAEAhzB,MAoFA+J,GAAAhK,UAAAG,OAAAmpB,OAAAxf,EAAA9J,WACAgK,GAAAhK,UAAAwpB,YAAAxf,GAEAA,GAAAhK,UAAAyoE,uBAAA,EAEAz+D,GAAAhK,UAAA3D,KAAA,SAAAyW,GAoCA,MAlCAhJ,GAAA9J,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAmK,MAAA/N,KAAAyW,EAAA1I,OAEAnK,KAAAgK,IAAA6I,EAAA7I,IAEAhK,KAAAyK,SAAAoI,EAAApI,SACAzK,KAAAqqE,kBAAAx3D,EAAAw3D,kBAEArqE,KAAAo/C,MAAAvsC,EAAAusC,MACAp/C,KAAAq/C,eAAAxsC,EAAAwsC,eAEAr/C,KAAAoK,SAAAhO,KAAAyW,EAAAzI,UACApK,KAAA0qD,YAAA73C,EAAA63C,YACA1qD,KAAA+pE,kBAAAl3D,EAAAk3D,kBAEA/pE,KAAAqK,YAAAwI,EAAAxI,YAEArK,KAAAuK,SAAAsI,EAAAtI,SAEAvK,KAAAwK,OAAAqI,EAAArI,OACAxK,KAAAs/C,QAAAzsC,EAAAysC,QACAt/C,KAAAw/C,aAAA3sC,EAAA2sC,aACAx/C,KAAAy/C,gBAAA5sC,EAAA4sC,gBAEAz/C,KAAA8yB,UAAAjgB,EAAAigB,UACA9yB,KAAAgzB,mBAAAngB,EAAAmgB,mBACAhzB,KAAAizB,iBAAApgB,EAAAogB,iBACAjzB,KAAAkzB,kBAAArgB,EAAAqgB,kBAEAlzB,KAAAw3C,SAAA3kC,EAAA2kC,SACAx3C,KAAA2gC,aAAA9tB,EAAA8tB,aACA3gC,KAAAy3C,aAAA5kC,EAAA4kC,aAEAz3C,MAuCAkxB,GAAAnxB,UAAAG,OAAAmpB,OAAAxf,EAAA9J,WACAmxB,GAAAnxB,UAAAwpB,YAAA2H,GAEAA,GAAAnxB,UAAAkpE,sBAAA,EAEA/3C,GAAAnxB,UAAA3D,KAAA,SAAAyW,GAYA,MAVAhJ,GAAA9J,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAmK,MAAA/N,KAAAyW,EAAA1I,OAEAnK,KAAAmwB,UAAAtd,EAAAsd,UAEAnwB,KAAAoI,MAAAyK,EAAAzK,MACApI,KAAAoxB,SAAAve,EAAAue,SACApxB,KAAAqxB,QAAAxe,EAAAwe,QAEArxB,KAMA,IAAA24H,IAAAz4H,OAAAjF,QACAolF,kBACA7xD,kBACAgyD,qBACAnpC,iBACA6W,kBACA/1C,iBACA81C,wBACAD,wBACAhjD,qBACAE,sBACAnB,uBACAqB,oBACAN,qBACAomB,sBACAjB,qBACApmB,YAOA/Y,GAAA8nI,OAEAr9H,SAAA,EAEAs9H,SAEA/9H,IAAA,SAAA6E,EAAA8M,GAEAzM,KAAAzE,WAAA,IAIAyE,KAAA64H,MAAAl5H,GAAA8M,IAIArM,IAAA,SAAAT,GAEA,MAAAK,MAAAzE,WAAA,EAIAyE,KAAA64H,MAAAl5H,GAJA,QAQA4F,OAAA,SAAA5F,SAEAK,MAAA64H,MAAAl5H,IAIA05B,MAAA,WAEAr5B,KAAA64H,WA2EA/nI,EAAA0wF,sBAAA,GAAAb,IAYAzgF,OAAA+J,OAAAq3E,GAAAvhF,WAEAqa,KAAA,SAAAzN,EAAAi0E,EAAAC,EAAAC,GAEAroF,SAAAuH,KAAA0V,OAAA/I,EAAA3M,KAAA0V,KAAA/I,EAEA,IAAA+S,GAAA1f,KAEA84H,EAAAhoI,EAAA8nI,MAAAx4H,IAAAuM,EAEA,IAAAlU,SAAAqgI,EAYA,MAVAp5G,GAAA6hE,QAAAJ,UAAAx0E,GAEA/P,WAAA,WAEAgkF,KAAAk4C,GAEAp5G,EAAA6hE,QAAAH,QAAAz0E,IAEQ,GAERmsH,CAIA,IAAAC,GAAA,GAAAC,eA+DA,OA9DAD,GAAAE,KAAA,MAAAtsH,GAAA,GAEAosH,EAAA1mI,iBAAA,gBAAA+H,GAEA,GAAA8+H,GAAA9+H,EAAA/E,OAAA6jI,QAEApoI,GAAA8nI,MAAA99H,IAAA6R,EAAAusH,GAEA,MAAAl5H,KAAAm5H,QAEAv4C,KAAAs4C,GAEAx5G,EAAA6hE,QAAAH,QAAAz0E,IAEQ,IAAA3M,KAAAm5H,QAORv4C,KAAAs4C,GAEAx5G,EAAA6hE,QAAAH,QAAAz0E,KAIAm0E,KAAA1mF,GAEAslB,EAAA6hE,QAAAF,UAAA10E,MAIO,GAEPlU,SAAAooF,GAEAk4C,EAAA1mI,iBAAA,oBAAA+H,GAEAymF,EAAAzmF,KAEQ,GAIR2+H,EAAA1mI,iBAAA,iBAAA+H,GAEA0mF,KAAA1mF,GAEAslB,EAAA6hE,QAAAF,UAAA10E,KAEO,GAEPlU,SAAAuH,KAAAo5H,eAAAL,EAAAK,aAAAp5H,KAAAo5H,cACA3gI,SAAAuH,KAAAilF,kBAAA8zC,EAAA9zC,gBAAAjlF,KAAAilF,iBAEA8zC,EAAAM,kBAAAN,EAAAM,iBAAA,cAEAN,EAAAO,KAAA,MAEA55G,EAAA6hE,QAAAJ,UAAAx0E,GAEAosH,GAIAQ,QAAA,SAAA1/G,GAGA,MADA7Z,MAAA0V,KAAAmE,EACA7Z,MAIAw5H,gBAAA,SAAA3/G,GAGA,MADA7Z,MAAAo5H,aAAAv/G,EACA7Z,MAIAy5H,mBAAA,SAAA5/G,GAGA,MADA7Z,MAAAilF,gBAAAprE,EACA7Z,QAqBAE,OAAA+J,OAAAw3E,GAAA1hF,WAEAqa,KAAA,SAAAzN,EAAAi0E,EAAAC,EAAAC,GAaA,QAAArrE,GAAAnkB,GAEAooI,EAAAt/G,KAAAzN,EAAArb,GAAA,SAAAk/D,GAEA,GAAAmpE,GAAAj6G,EAAAgiE,QAAAlxB,GAAA,EAEApnD,GAAA9X,IACA4F,MAAAyiI,EAAAziI,MACAC,OAAAwiI,EAAAxiI,OACA0nB,OAAA86G,EAAA96G,OACAqqB,QAAAywF,EAAAzwF,SAGAj4C,GAAA,EAEA,IAAAA,IAEA,IAAA0oI,EAAAC,cACA/wH,EAAAoU,UAAAmB,IAEAvV,EAAAgW,OAAA86G,EAAA96G,OACAhW,EAAAC,aAAA,EAEA83E,KAAA/3E,KAIQg4E,EAAAC,GAtCR,GAAAphE,GAAA1f,KAEAoJ,KAEAP,EAAA,GAAA8rB,GACA9rB,GAAAN,MAAAa,CAEA,IAAAswH,GAAA,GAAAp4C,IAAAthF,KAAAuhF,QAmCA,IAlCAm4C,EAAAH,QAAAv5H,KAAA0V,MACAgkH,EAAAF,gBAAA,eAiCA1/G,MAAAC,QAAApN,GAIA,OAFA1b,GAAA,EAEAK,EAAA,EAAA0rD,EAAArwC,EAAA1X,OAAwC+nD,EAAA1rD,IAAQA,EAEhDmkB,EAAAnkB,OAQAooI,GAAAt/G,KAAAzN,EAAA,SAAA6jD,GAEA,GAAAmpE,GAAAj6G,EAAAgiE,QAAAlxB,GAAA,EAEA,IAAAmpE,EAAAE,UAIA,OAFA/nG,GAAA6nG,EAAAzwF,QAAAj0C,OAAA0kI,EAAAC,YAEApkG,EAAA,EAAyB1D,EAAA0D,EAAWA,IAAA,CAEpCpsB,EAAAosB,IAAyB0T,WAEzB,QAAA53C,GAAA,EAA0BA,EAAAqoI,EAAAC,YAA0BtoI,IAEpD8X,EAAAosB,GAAA0T,QAAA/zC,KAAAwkI,EAAAzwF,QAAA1T,EAAAmkG,EAAAC,YAAAtoI,IACA8X,EAAAosB,GAAA3W,OAAA86G,EAAA96G,OACAzV,EAAAosB,GAAAt+B,MAAAyiI,EAAAziI,MACAkS,EAAAosB,GAAAr+B,OAAAwiI,EAAAxiI,WAQA0R,GAAAN,MAAArR,MAAAyiI,EAAAziI,MACA2R,EAAAN,MAAApR,OAAAwiI,EAAAxiI,OACA0R,EAAAqgC,QAAAywF,EAAAzwF,OAIA,KAAAywF,EAAAC,cAEA/wH,EAAAoU,UAAAmB,IAIAvV,EAAAgW,OAAA86G,EAAA96G,OACAhW,EAAAC,aAAA,EAEA83E,KAAA/3E,IAEQg4E,EAAAC,EAIR,OAAAj4E,IAIA0wH,QAAA,SAAA1/G,GAGA,MADA7Z,MAAA0V,KAAAmE,EACA7Z,OAYA,IAAA85H,IAAAn4C,EAUAzhF,QAAA+J,OAAA03E,GAAA5hF,WAEAqa,KAAA,SAAAzN,EAAAi0E,EAAAC,EAAAC,GAEA,GAAAphE,GAAA1f,KAEA6I,EAAA,GAAA+rB,IAEA8kG,EAAA,GAAAp4C,IAAAthF,KAAAuhF,QA2DA,OA1DAm4C,GAAAF,gBAAA,eAEAE,EAAAt/G,KAAAzN,EAAA,SAAA6jD,GAEA,GAAAupE,GAAAr6G,EAAAgiE,QAAAlxB,EAEAupE,KAEAthI,SAAAshI,EAAAxxH,MAEAM,EAAAN,MAAAwxH,EAAAxxH,MAEQ9P,SAAAshI,EAAA3hH,OAERvP,EAAAN,MAAArR,MAAA6iI,EAAA7iI,MACA2R,EAAAN,MAAApR,OAAA4iI,EAAA5iI,OACA0R,EAAAN,MAAA6P,KAAA2hH,EAAA3hH,MAIAvP,EAAAgE,MAAApU,SAAAshI,EAAAltH,MAAAktH,EAAAltH,MAAAu8B,GACAvgC,EAAAiE,MAAArU,SAAAshI,EAAAjtH,MAAAitH,EAAAjtH,MAAAs8B,GAEAvgC,EAAA6/B,UAAAjwC,SAAAshI,EAAArxF,UAAAqxF,EAAArxF,UAAAtqB,GACAvV,EAAAoU,UAAAxkB,SAAAshI,EAAA98G,UAAA88G,EAAA98G,UAAAC,GAEArU,EAAA8/B,WAAAlwC,SAAAshI,EAAApxF,WAAAoxF,EAAApxF,WAAA,EAEAlwC,SAAAshI,EAAAl7G,SAEAhW,EAAAgW,OAAAk7G,EAAAl7G,QAGApmB,SAAAshI,EAAA50H,OAEA0D,EAAA1D,KAAA40H,EAAA50H,MAIA1M,SAAAshI,EAAA7wF,UAEArgC,EAAAqgC,QAAA6wF,EAAA7wF,SAIA,IAAA6wF,EAAAH,cAEA/wH,EAAAoU,UAAAmB,IAIAvV,EAAAC,aAAA,EAEA83E,KAAA/3E,EAAAkxH,KAEOl5C,EAAAC,GAGPj4E,KAgBA3I,OAAA+J,OAAA23E,GAAA7hF,WAEAqa,KAAA,SAAAzN,EAAAi0E,EAAAC,EAAAC,GAEA,GAAAphE,GAAA1f,KAEAuI,EAAA3V,SAAAuiD,gBAAA,qCAaA,IAZA5sC,EAAAwN,OAAA,WAEAxN,EAAAwN,OAAA,KAEAlQ,IAAAE,gBAAAwC,EAAAN,KAEA24E,KAAAr4E,GAEAmX,EAAA6hE,QAAAH,QAAAz0E,IAIA,IAAAA,EAAAnZ,QAAA,SAEA+U,EAAAN,IAAA0E,MAEO,CAEP,GAAA+sH,GAAA,GAAAp4C,GACAo4C,GAAAH,QAAAv5H,KAAA0V,MACAgkH,EAAAF,gBAAA,QACAE,EAAAD,mBAAAz5H,KAAAilF,iBACAy0C,EAAAt/G,KAAAzN,EAAA,SAAAzF,GAEAqB,EAAAN,IAAApC,IAAAC,gBAAAoB,IAEQ25E,EAAAC,GAMR,MAFAphE,GAAA6hE,QAAAJ,UAAAx0E,GAEApE,GAIAyxH,eAAA,SAAAngH,GAGA,MADA7Z,MAAAjC,YAAA8b,EACA7Z,MAIAy5H,mBAAA,SAAA5/G,GAGA,MADA7Z,MAAAilF,gBAAAprE,EACA7Z,MAIAu5H,QAAA,SAAA1/G,GAGA,MADA7Z,MAAA0V,KAAAmE,EACA7Z,QAgBAE,OAAA+J,OAAA43E,GAAA9hF,WAEAqa,KAAA,SAAA6/G,EAAAr5C,EAAAC,EAAAC,GAUA,QAAArrE,GAAAnkB,GAEAooI,EAAAt/G,KAAA6/G,EAAA3oI,GAAA,SAAAiX,GAEAM,EAAAO,OAAA9X,GAAAiX,EAEAtX,IAEA,IAAAA,IAEA4X,EAAAC,aAAA,EAEA83E,KAAA/3E,KAIQpQ,OAAAqoF,GAxBR,GAAAj4E,GAAA,GAAA4hC,GAEAivF,EAAA,GAAA93C,IAAA5hF,KAAAuhF,QACAm4C,GAAAM,eAAAh6H,KAAAjC,aACA27H,EAAAH,QAAAv5H,KAAA0V,KAwBA,QAtBAzkB,GAAA,EAsBAK,EAAA,EAAsBA,EAAA2oI,EAAAhlI,SAAiB3D,EAEvCmkB,EAAAnkB,EAIA,OAAAuX,IAIAmxH,eAAA,SAAAngH,GAGA,MADA7Z,MAAAjC,YAAA8b,EACA7Z,MAIAu5H,QAAA,SAAA1/G,GAGA,MADA7Z,MAAA0V,KAAAmE,EACA7Z,QAgBAE,OAAA+J,OAAA63E,GAAA/hF,WAEAqa,KAAA,SAAAzN,EAAAi0E,EAAAC,EAAAC,GAEA,GAAAj4E,GAAA,GAAAW,GAEAkwH,EAAA,GAAA93C,IAAA5hF,KAAAuhF,QAqBA,OApBAm4C,GAAAM,eAAAh6H,KAAAjC,aACA27H,EAAAD,mBAAAz5H,KAAAilF,iBACAy0C,EAAAH,QAAAv5H,KAAA0V,MACAgkH,EAAAt/G,KAAAzN,EAAA,SAAApE,GAGA,GAAA2xH,GAAAvtH,EAAAwtH,OAAA,wBAAAxtH,EAAAwtH,OAAA,qBAEAtxH,GAAAgW,OAAAq7G,EAAAp7G,GAAAuqB,GACAxgC,EAAAN,QACAM,EAAAC,aAAA,EAEArQ,SAAAmoF,GAEAA,EAAA/3E,IAIOg4E,EAAAC,GAEPj4E,GAIAmxH,eAAA,SAAAngH,GAGA,MADA7Z,MAAAjC,YAAA8b,EACA7Z,MAIAy5H,mBAAA,SAAA5/G,GAGA,MADA7Z,MAAAilF,gBAAAprE,EACA7Z,MAIAu5H,QAAA,SAAA1/G,GAGA,MADA7Z,MAAA0V,KAAAmE,EACA7Z,QA0BAw/B,GAAAz/B,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAA5Y,GAAA1Q,YAEAwpB,YAAAiW,GAEAmmC,SAAA,EAEAvpE,KAAA,SAAAyW,GAOA,MALApC,IAAA1Q,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAmK,MAAA/N,KAAAyW,EAAA1I,OACAnK,KAAAsZ,UAAAzG,EAAAyG,UAEAtZ,MAIA04F,OAAA,SAAAC,GAEA,GAAAvgF,GAAA3H,GAAA1Q,UAAA24F,OAAAxnG,KAAA8O,KAAA24F,EAcA,OAZAvgF,GAAA9kB,OAAA6W,MAAAnK,KAAAmK,MAAA+iG,SACA90F,EAAA9kB,OAAAgmB,UAAAtZ,KAAAsZ,UAEA7gB,SAAAuH,KAAAimD,cAAA7tC,EAAA9kB,OAAA2yD,YAAAjmD,KAAAimD,YAAAinD,UAEAz0G,SAAAuH,KAAAiN,WAAAmL,EAAA9kB,OAAA2Z,SAAAjN,KAAAiN,UACAxU,SAAAuH,KAAAgQ,QAAAoI,EAAA9kB,OAAA0c,MAAAhQ,KAAAgQ,OACAvX,SAAAuH,KAAA+lD,QAAA3tC,EAAA9kB,OAAAyyD,MAAA/lD,KAAA+lD,OACAttD,SAAAuH,KAAA2rE,WAAAvzD,EAAA9kB,OAAAq4E,SAAA3rE,KAAA2rE,UAEAlzE,SAAAuH,KAAAi9C,SAAA7kC,EAAA9kB,OAAA2pD,OAAAj9C,KAAAi9C,OAAAy7C,UAEAtgF,KAyBA2pE,GAAAhiF,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAAmW,GAAAz/B,YAEAwpB,YAAAw4D,GAEAjW,mBAAA,EAEA1vE,KAAA,SAAAyW,GAMA,MAJA2sB,IAAAz/B,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAimD,YAAA7pD,KAAAyW,EAAAozC,aAEAjmD,QAwBAE,OAAA+J,OAAAg4E,GAAAliF,WAEA3D,KAAA,SAAAyW,GASA,MAPA7S,MAAAvL,OAAAoe,EAAApe,OAAA0yB,QAEAnnB,KAAAyrE,KAAA54D,EAAA44D,KACAzrE,KAAAoU,OAAAvB,EAAAuB,OAEApU,KAAAk9C,QAAA9gD,KAAAyW,EAAAqqC,SAEAl9C,MAIAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,OAIA04F,OAAA,WAEA,GAAAplG,KASA,OAPA,KAAA0M,KAAAyrE,OAAAn4E,EAAAm4E,KAAAzrE,KAAAyrE,MACA,IAAAzrE,KAAAoU,SAAA9gB,EAAA8gB,OAAApU,KAAAoU,SACA,MAAApU,KAAAk9C,QAAAvkD,GAAA,MAAAqH,KAAAk9C,QAAAtkD,KAAAtF,EAAA4pD,QAAAl9C,KAAAk9C,QAAAhS,WAEA53C,EAAAmB,OAAAuL,KAAAvL,OAAAikG,QAAA,GAAAplG,aACAA,GAAAmB,OAAA00B,OAEA71B,KAgBA4uF,GAAAniF,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAA44D,GAAAliF,YAEAwpB,YAAA24D,GAEA3kC,mBAAA,EAEAvnD,OAAA,SAAAqjB,GAEA,GAAA6P,GAAA,EAAAp4B,EAAA+E,KAAAkgG,QAAA18E,EAAArJ,MACA1Y,EAAA0I,KAAAk9C,QAAAhmD,MAAA8I,KAAAk9C,QAAA/lD,OACAkE,EAAAge,EAAApM,UAAA,IAEAxY,EAAAuL,KAAAvL,QAEAy0B,IAAAz0B,EAAAy0B,KAAA5xB,IAAA7C,EAAA6C,QAAA+D,IAAA5G,EAAA4G,OAEA5G,EAAAy0B,MACAz0B,EAAA6C,SACA7C,EAAA4G,MACA5G,EAAA8C,6BA6CA4qF,GAAApiF,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAAmW,GAAAz/B,YAEAwpB,YAAA44D,GAEAzW,aAAA,EAEAtvE,KAAA,SAAAyW,GAaA,MAXA2sB,IAAAz/B,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAiN,SAAA4F,EAAA5F,SACAjN,KAAAgQ,MAAA6C,EAAA7C,MACAhQ,KAAA2rE,SAAA94D,EAAA84D,SACA3rE,KAAA+lD,MAAAlzC,EAAAkzC,MAEA/lD,KAAA3K,OAAAwd,EAAAxd,OAAA8xB,QAEAnnB,KAAAi9C,OAAApqC,EAAAoqC,OAAA91B,QAEAnnB,QAsCAytB,GAAA1tB,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAAmW,GAAAz/B,YAEAwpB,YAAAkE,GAEA4rB,cAAA,EAEAj9C,KAAA,SAAAyW,GASA,MAPA2sB,IAAAz/B,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAiN,SAAA4F,EAAA5F,SACAjN,KAAA+lD,MAAAlzC,EAAAkzC,MAEA/lD,KAAAi9C,OAAApqC,EAAAoqC,OAAA91B,QAEAnnB,QAgBAqiF,GAAAtiF,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAA44D,GAAAliF,YAEAwpB,YAAA84D,KAwBAvlF,GAAAiD,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAAmW,GAAAz/B,YAEAwpB,YAAAzsB,GAEAwuE,oBAAA,EAEAlvE,KAAA,SAAAyW,GAQA,MANA2sB,IAAAz/B,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAA3K,OAAAwd,EAAAxd,OAAA8xB,QAEAnnB,KAAAi9C,OAAApqC,EAAAoqC,OAAA91B,QAEAnnB,QAoBAtC,GAAAqC,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAAmW,GAAAz/B,YAEAwpB,YAAA7rB,GAEA2tE,gBAAA,IAUAv6E,EAAAyyF,gBAGA62C,WAAA,SAAAj6F,EAAAk6F,EAAAC,GAEA,MAAAxpI,GAAAyyF,eAAAg3C,aAAAp6F,GAEA,GAAAA,GAAA5W,YAAA4W,EAAAoxB,SAAA8oE,EAAAC,IAIAn6F,EAAA1uC,MAAA4oI,EAAAC,IAKA92C,aAAA,SAAArjD,EAAAh7B,EAAAq1H,GAEA,OAAAr6F,IACAq6F,GAAAr6F,EAAA5W,cAAApkB,EAAAg7B,EAEA,gBAAAh7B,GAAAmsD,kBAEA,GAAAnsD,GAAAg7B,GAIArmB,MAAA/Z,UAAAtO,MAAAP,KAAAivC,IAIAo6F,aAAA,SAAAjnI,GAEA,MAAAmnI,aAAAC,OAAApnI,MACAA,YAAAqnI,YAKAC,iBAAA,SAAAp7H,GAEA,QAAAq7H,GAAAvpI,EAAAoS,GAEA,MAAAlE,GAAAlO,GAAAkO,EAAAkE,GAMA,OAFAjE,GAAAD,EAAAvK,OACAqzC,EAAA,GAAAxuB,OAAAra,GACAnO,EAAA,EAAsBA,IAAAmO,IAASnO,EAAAg3C,EAAAh3C,IAI/B,OAFAg3C,GAAA1I,KAAAi7F,GAEAvyF,GAKAwyF,YAAA,SAAAz3C,EAAAjf,EAAA55C,GAKA,OAHAuwG,GAAA13C,EAAApuF,OACAqzC,EAAA,GAAA+6C,GAAA95D,YAAAwxG,GAEAzpI,EAAA,EAAA+vE,EAAA,EAAqCA,IAAA05D,IAAuBzpI,EAI5D,OAFA0pI,GAAAxwG,EAAAl5B,GAAA8yE,EAEA1gE,EAAA,EAAuBA,IAAA0gE,IAAc1gE,EAErC4kC,EAAA+4B,KAAAgiB,EAAA23C,EAAAt3H,EAMA,OAAA4kC,IAKA2yF,YAAA,SAAAC,EAAA17H,EAAA6jF,EAAA83C,GAIA,IAFA,GAAA7pI,GAAA,EAAAqO,EAAAu7H,EAAA,GAEAziI,SAAAkH,GAAAlH,SAAAkH,EAAAw7H,IAEAx7H,EAAAu7H,EAAA5pI,IAIA,IAAAmH,SAAAkH,EAAA,CAEA,GAAAka,GAAAla,EAAAw7H,EACA,IAAA1iI,SAAAohB,EAEA,GAAAC,MAAAC,QAAAF,IAEA,EAEAA,GAAAla,EAAAw7H,GAEA1iI,SAAAohB,IAEAra,EAAArK,KAAAwK,EAAA1H,MACAorF,EAAAluF,KAAAtD,MAAAwxF,EAAAxpE,IAIAla,EAAAu7H,EAAA5pI,WAEQmH,SAAAkH,OAED,IAAAlH,SAAAohB,EAAAqxB,SAGP,EAEArxB,GAAAla,EAAAw7H,GAEA1iI,SAAAohB,IAEAra,EAAArK,KAAAwK,EAAA1H,MACA4hB,EAAAqxB,QAAAm4C,IAAApuF,SAIA0K,EAAAu7H,EAAA5pI,WAEQmH,SAAAkH,OAKR,GAEAka,GAAAla,EAAAw7H,GAEA1iI,SAAAohB,IAEAra,EAAArK,KAAAwK,EAAA1H,MACAorF,EAAAluF,KAAA0kB,IAIAla,EAAAu7H,EAAA5pI,WAEQmH,SAAAkH,MA2CR2iF,GAAAviF,WAEAwpB,YAAA+4D,GAEA84C,SAAA,SAAAjmH,GAEA,GAAAkmH,GAAAr7H,KAAAuiF,mBACA9C,EAAAz/E,KAAA2iF,aAEAg7B,EAAA0d,EAAA57C,GACAi+B,EAAA2d,EAAA57C,EAAA,EAEA67C,GAAA,CAEAC,EAAA,CAEA,GAAAjkH,EAEAkkH,GAAA,CAKAC,EAAA,KAAA9d,EAAAxoG,GAAA,CAEA,OAAAumH,GAAAj8C,EAAA,IAAwC,CAExC,GAAAhnF,SAAAklH,EAAA,CAEA,GAAAD,EAAAvoG,EAAA,KAAAsmH,EAMA,OAFAh8C,GAAA47C,EAAApmI,OACA+K,KAAA2iF,aAAAlD,EACAz/E,KAAA27H,UAAAl8C,EAAA,EAAAtqE,EAAAuoG,GAIA,GAAAj+B,IAAAi8C,EAAA,KAKA,IAHAhe,EAAAC,EACAA,EAAA0d,IAAA57C,GAEAk+B,EAAAxoG,EAGA,KAAAomH,GAOAjkH,EAAA+jH,EAAApmI,MACA,MAAAumI,GAMA,IAAArmH,GAAAuoG,EAiDA,KAAA4d,EA7CA,IAAAM,GAAAP,EAAA,EAEAO,GAAAzmH,IAEAsqE,EAAA,EACAi+B,EAAAke,EAMA,QAAAF,GAAAj8C,EAAA,IAAwC,CAExC,GAAAhnF,SAAAilH,EAKA,MADA19G,MAAA2iF,aAAA,EACA3iF,KAAA67H,aAAA,EAAA1mH,EAAAwoG,EAIA,IAAAl+B,IAAAi8C,EAAA,KAKA,IAHA/d,EAAAD,EACAA,EAAA2d,IAAA57C,EAAA,GAEAtqE,GAAAuoG,EAGA,KAAA6d,GAOAjkH,EAAAmoE,EACAA,EAAA,GAaA,KAAAnoE,EAAAmoE,GAAA,CAEA,GAAAq8C,GAAAr8C,EAAAnoE,IAAA,CAEAnC,GAAAkmH,EAAAS,GAEAxkH,EAAAwkH,EAIAr8C,EAAAq8C,EAAA,EAWA,GALAne,EAAA0d,EAAA57C,GACAi+B,EAAA2d,EAAA57C,EAAA,GAIAhnF,SAAAilH,EAGA,MADA19G,MAAA2iF,aAAA,EACA3iF,KAAA67H,aAAA,EAAA1mH,EAAAwoG,EAIA,IAAAllH,SAAAklH,EAIA,MAFAl+B,GAAA47C,EAAApmI,OACA+K,KAAA2iF,aAAAlD,EACAz/E,KAAA27H,UAAAl8C,EAAA,EAAAi+B,EAAAvoG,GAMAnV,KAAA2iF,aAAAlD,EAEAz/E,KAAA+7H,iBAAAt8C,EAAAi+B,EAAAC,GAIA,MAAA39G,MAAAg8H,aAAAv8C,EAAAi+B,EAAAvoG,EAAAwoG,IAIArxB,SAAA,KAKA2vC,oBAEAC,aAAA,WAEA,MAAAl8H,MAAAssF,UAAAtsF,KAAAi8H,kBAIAE,iBAAA,SAAA71H,GASA,OALAgiC,GAAAtoC,KAAA0iF,aACAW,EAAArjF,KAAAwiF,aACApe,EAAApkE,KAAA4iF,UACApyE,EAAAlK,EAAA89D,EAEA9yE,EAAA,EAAsBA,IAAA8yE,IAAc9yE,EAEpCg3C,EAAAh3C,GAAA+xF,EAAA7yE,EAAAlf,EAIA,OAAAg3C,IAMA0zF,aAAA,SAAAv8C,EAAAi+B,EAAAvoG,EAAAwoG,GAEA,SAAA94G,OAAA,4BAKAk3H,iBAAA,SAAAt8C,EAAAi+B,EAAAC,MAQAz9G,OAAA+J,OAAAq4E,GAAAviF,WAEA87H,aACAv5C,GAAAviF,UAAAo8H,iBAEAR,UACAr5C,GAAAviF,UAAAo8H,mBA2BAt5C,GAAA9iF,UACAG,OAAA+J,OAAA/J,OAAAmpB,OAAAi5D,GAAAviF,YAEAwpB,YAAAs5D,GAEAo5C,kBAEAhwC,YAAAC,GACAC,UAAAD,IAIA6vC,iBAAA,SAAAt8C,EAAAi+B,EAAAC,GAEA,GAAA0d,GAAAr7H,KAAAuiF,mBACA65C,EAAA38C,EAAA,EACA48C,EAAA58C,EAAA,EAEA68C,EAAAjB,EAAAe,GACAG,EAAAlB,EAAAgB,EAEA,IAAA5jI,SAAA6jI,EAEA,OAAAt8H,KAAAk8H,eAAAjwC,aAEA,IAAA2J,IAGAwmC,EAAA38C,EACA68C,EAAA,EAAA5e,EAAAC,CAEA,MAEA,KAAA9nB,IAGAumC,EAAAf,EAAApmI,OAAA,EACAqnI,EAAA5e,EAAA2d,EAAAe,GAAAf,EAAAe,EAAA,EAEA,MAEA,SAGAA,EAAA38C,EACA68C,EAAA3e,EAMA,GAAAllH,SAAA8jI,EAEA,OAAAv8H,KAAAk8H,eAAA/vC,WAEA,IAAAyJ,IAGAymC,EAAA58C,EACA88C,EAAA,EAAA5e,EAAAD,CAEA,MAEA,KAAA7nB,IAGAwmC,EAAA,EACAE,EAAA5e,EAAA0d,EAAA,GAAAA,EAAA,EAEA,MAEA,SAGAgB,EAAA58C,EAAA,EACA88C,EAAA7e,EAMA,GAAA8e,GAAA,IAAA7e,EAAAD,GACAt5C,EAAApkE,KAAA4iF,SAEA5iF,MAAA8iF,YAAA05C,GAAA9e,EAAA4e,GACAt8H,KAAAgjF,YAAAw5C,GAAAD,EAAA5e,GACA39G,KAAA+iF,YAAAq5C,EAAAh4D,EACApkE,KAAAijF,YAAAo5C,EAAAj4D,GAIA43D,aAAA,SAAAv8C,EAAAi+B,EAAAvoG,EAAAwoG,GAuBA,OArBAr1E,GAAAtoC,KAAA0iF,aACAW,EAAArjF,KAAAwiF,aACApe,EAAApkE,KAAA4iF,UAEA65C,EAAAh9C,EAAArb,EAAAs4D,EAAAD,EAAAr4D,EACAu4D,EAAA38H,KAAA+iF,YAAA65C,EAAA58H,KAAAijF,YACA45C,EAAA78H,KAAA8iF,YAAAg6C,EAAA98H,KAAAgjF,YAEA3xF,GAAA8jB,EAAAuoG,IAAAC,EAAAD,GACA2d,EAAAhqI,IACA0rI,EAAA1B,EAAAhqI,EAIA2rI,GAAAH,EAAAE,EAAA,EAAAF,EAAAxB,EAAAwB,EAAAxrI,EACA0rH,GAAA,EAAA8f,GAAAE,GAAA,OAAAF,GAAAxB,IAAA,GAAAwB,GAAAxrI,EAAA,EACAgrC,GAAA,GAAAygG,GAAAC,GAAA,IAAAD,GAAAzB,EAAA,GAAAhqI,EACA4rI,EAAAH,EAAAC,EAAAD,EAAAzB,EAIA/pI,EAAA,EAAsBA,IAAA8yE,IAAc9yE,EAEpCg3C,EAAAh3C,GACA0rI,EAAA35C,EAAAs5C,EAAArrI,GACAyrH,EAAA15B,EAAAq5C,EAAAprI,GACA+qC,EAAAgnD,EAAAo5C,EAAAnrI,GACA2rI,EAAA55C,EAAAu5C,EAAAtrI,EAIA,OAAAg3C,MAkBA46C,GAAAnjF,UACAG,OAAA+J,OAAA/J,OAAAmpB,OAAAi5D,GAAAviF,YAEAwpB,YAAA25D,GAEA84C,aAAA,SAAAv8C,EAAAi+B,EAAAvoG,EAAAwoG,GAYA,OAVAr1E,GAAAtoC,KAAA0iF,aACAW,EAAArjF,KAAAwiF,aACApe,EAAApkE,KAAA4iF,UAEAs6C,EAAAz9C,EAAArb,EACA+4D,EAAAD,EAAA94D,EAEAg5D,GAAAjoH,EAAAuoG,IAAAC,EAAAD,GACA2f,EAAA,EAAAD,EAEA9rI,EAAA,EAAsBA,IAAA8yE,IAAc9yE,EAEpCg3C,EAAAh3C,GACA+xF,EAAA85C,EAAA7rI,GAAA+rI,EACAh6C,EAAA65C,EAAA5rI,GAAA8rI,CAIA,OAAA90F,MAsBA66C,GAAApjF,UACAG,OAAA+J,OAAA/J,OAAAmpB,OAAAi5D,GAAAviF,YAEAwpB,YAAA45D,GAEA64C,aAAA,SAAAv8C,EAAAi+B,EAAAvoG,EAAAwoG,GAEA,MAAA39G,MAAAm8H,iBAAA18C,EAAA,KAMA,IAAA69C,GAEAA,KAEA75C,eAAAj5C,aACAk5C,gBAAAl5C,aAEAo5C,qBAAA8R,GAEA6nC,iCAAA,SAAAj1F,GAEA,UAAA66C,IACAnjF,KAAAR,MAAAQ,KAAAqjF,OAAArjF,KAAAw9H,eAAAl1F,IAIAm1F,+BAAA,SAAAn1F,GAEA,UAAA46C,IACAljF,KAAAR,MAAAQ,KAAAqjF,OAAArjF,KAAAw9H,eAAAl1F,IAIAo1F,+BAAA,SAAAp1F,GAEA,UAAAu6C,IACA7iF,KAAAR,MAAAQ,KAAAqjF,OAAArjF,KAAAw9H,eAAAl1F,IAIAq7C,iBAAA,SAAAL,GAEA,GAAAq6C,EAEA,QAAAr6C,GAEA,IAAAmS,IAEAkoC,EAAA39H,KAAAu9H,gCAEA,MAEA,KAAA7nC,IAEAioC,EAAA39H,KAAAy9H,8BAEA,MAEA,KAAA9nC,IAEAgoC,EAAA39H,KAAA09H,+BAMA,GAAAjlI,SAAAklI,EAyBA39H,KAAAqsF,kBAAAsxC,MAzBA,CAEA,GAAAC,GAAA,iCACA59H,KAAA69H,cAAA,yBAAA79H,KAAAzF,IAEA,IAAA9B,SAAAuH,KAAAqsF,kBAAA,CAGA,GAAA/I,IAAAtjF,KAAA4jF,qBAMA,SAAA/+E,OAAA+4H,EAJA59H,MAAA2jF,iBAAA3jF,KAAA4jF,yBAmBAk6C,iBAAA,WAEA,OAAA99H,KAAAqsF,mBAEA,IAAArsF,MAAAu9H,iCAEA,MAAA9nC,GAEA,KAAAz1F,MAAAy9H,+BAEA,MAAA/nC,GAEA,KAAA11F,MAAA09H,+BAEA,MAAA/nC,MAMA6nC,aAAA,WAEA,MAAAx9H,MAAAqjF,OAAApuF,OAAA+K,KAAAR,MAAAvK,QAKA8oI,MAAA,SAAAC,GAEA,OAAAA,EAIA,OAFAx+H,GAAAQ,KAAAR,MAEAlO,EAAA,EAAAmO,EAAAD,EAAAvK,OAAwC3D,IAAAmO,IAASnO,EAEjDkO,EAAAlO,IAAA0sI,CAMA,OAAAh+H,OAKAoI,MAAA,SAAA6kF,GAEA,OAAAA,EAIA,OAFAztF,GAAAQ,KAAAR,MAEAlO,EAAA,EAAAmO,EAAAD,EAAAvK,OAAwC3D,IAAAmO,IAASnO,EAEjDkO,EAAAlO,IAAA27F,CAMA,OAAAjtF,OAMAoc,KAAA,SAAAosE,EAAAy1C,GAOA,IALA,GAAAz+H,GAAAQ,KAAAR,MACA0+H,EAAA1+H,EAAAvK,OACAolI,EAAA,EACAC,EAAA4D,EAAA,EAEA7D,IAAA6D,GAAA1+H,EAAA66H,GAAA7xC,KAAA6xC,CACA,WAAAC,GAAA96H,EAAA86H,GAAA2D,KAAA3D,CAIA,MAFAA,EAEA,IAAAD,GAAAC,IAAA4D,EAAA,CAGA7D,GAAAC,MAAAzkI,KAAA6S,IAAA4xH,EAAA,GAAAD,EAAAC,EAAA,EAEA,IAAAl2D,GAAApkE,KAAAw9H,cACAx9H,MAAAR,MAAA1O,EAAAyyF,eAAA62C,WAAA56H,EAAA66H,EAAAC,GACAt6H,KAAAqjF,OAAAvyF,EAAAyyF,eACA62C,WAAAp6H,KAAAqjF,OAAAg3C,EAAAj2D,EAAAk2D,EAAAl2D,GAIA,MAAApkE,OAKA6jF,SAAA,WAEA,GAAAs6C,IAAA,EAEAv7C,EAAA5iF,KAAAw9H,cACA56C,GAAA/sF,KAAA8S,MAAAi6E,KAAA,IAGAu7C,GAAA,EAIA,IAAA3+H,GAAAQ,KAAAR,MACA6jF,EAAArjF,KAAAqjF,OAEA66C,EAAA1+H,EAAAvK,MAEA,KAAAipI,IAGAC,GAAA,EAMA,QAFAC,GAAA,KAEA9sI,EAAA,EAAqBA,IAAA4sI,EAAa5sI,IAAA,CAElC,GAAA+sI,GAAA7+H,EAAAlO,EAEA,oBAAA+sI,IAAA/uH,MAAA+uH,GAAA,CAGAF,GAAA,CACA,OAIA,UAAAC,KAAAC,EAAA,CAGAF,GAAA,CACA,OAIAC,EAAAC,EAIA,GAAA5lI,SAAA4qF,GAEAvyF,EAAAyyF,eAAAg3C,aAAAl3C,GAEA,OAAA/xF,GAAA,EAAAmO,EAAA4jF,EAAApuF,OAA2C3D,IAAAmO,IAASnO,EAAA,CAEpD,GAAAuoB,GAAAwpE,EAAA/xF,EAEA,IAAAge,MAAAuK,GAAA,CAGAskH,GAAA,CACA,QAUA,MAAAA,IAMAr6C,SAAA,WAWA,OATAtkF,GAAAQ,KAAAR,MACA6jF,EAAArjF,KAAAqjF,OACAjf,EAAApkE,KAAAw9H,eAEAc,EAAAt+H,KAAA89H,qBAAAnoC,GAEA4oC,EAAA,EACAtvF,EAAAzvC,EAAAvK,OAAA,EAEA3D,EAAA,EAAqB29C,EAAA39C,IAAeA,EAAA,CAEpC,GAAAktI,IAAA,EAEAvmI,EAAAuH,EAAAlO,GACAmtI,EAAAj/H,EAAAlO,EAAA,EAIA,IAAA2G,IAAAwmI,IAAA,IAAAntI,GAAA2G,MAAA,IAEA,GAAAqmI,EAsBSE,GAAA,MAdT,QAJAhuH,GAAAlf,EAAA8yE,EACAs6D,EAAAluH,EAAA4zD,EACAu6D,EAAAnuH,EAAA4zD,EAEA1gE,EAAA,EAAyBA,IAAA0gE,IAAc1gE,EAAA,CAEvC,GAAAmW,GAAAwpE,EAAA7yE,EAAA9M,EAEA,IAAAmW,IAAAwpE,EAAAq7C,EAAAh7H,IACAmW,IAAAwpE,EAAAs7C,EAAAj7H,GAAA,CAEA86H,GAAA,CACA,QAYA,GAAAA,EAAA,CAEA,GAAAltI,IAAAitI,EAAA,CAEA/+H,EAAA++H,GAAA/+H,EAAAlO,EAKA,QAHAstI,GAAAttI,EAAA8yE,EACAy6D,EAAAN,EAAAn6D,EAEA1gE,EAAA,EAAyBA,IAAA0gE,IAAc1gE,EAEvC2/E,EAAAw7C,EAAAn7H,GAAA2/E,EAAAu7C,EAAAl7H,KAIA66H,GAQA,GAAAtvF,EAAA,GAEAzvC,EAAA++H,GAAA/+H,EAAAyvC,EAEA,QAAA2vF,GAAA3vF,EAAAm1B,EAAAy6D,EAAAN,EAAAn6D,EAAA1gE,EAAA,EAA2FA,IAAA0gE,IAAc1gE,EAEzG2/E,EAAAw7C,EAAAn7H,GAAA2/E,EAAAu7C,EAAAl7H,KAEA66H,EAWA,MAPAA,KAAA/+H,EAAAvK,SAEA+K,KAAAR,MAAA1O,EAAAyyF,eAAA62C,WAAA56H,EAAA,EAAA++H,GACAv+H,KAAAqjF,OAAAvyF,EAAAyyF,eAAA62C,WAAA/2C,EAAA,EAAAk7C,EAAAn6D,IAIApkE,OA4CA+jF,GAAAhkF,UACAG,OAAA+J,OAAA/J,OAAAmpB,OAAAi0G,KAEA/zG,YAAAw6D,GAEA85C,cAAA,WAsBA75C,GAAAjkF,UACAG,OAAA+J,OAAA/J,OAAAmpB,OAAAi5D,GAAAviF,YAEAwpB,YAAAy6D,GAEAg4C,aAAA,SAAAv8C,EAAAi+B,EAAAvoG,EAAAwoG,GAUA,OARAr1E,GAAAtoC,KAAA0iF,aACAW,EAAArjF,KAAAwiF,aACApe,EAAApkE,KAAA4iF,UAEApyE,EAAAivE,EAAArb,EAEAtkD,GAAA3K,EAAAuoG,IAAAC,EAAAD,GAEAv+G,EAAAqR,EAAA4zD,EAAsC5zD,IAAArR,EAAgBqR,GAAA,EAEtDD,EAAAisF,UAAAl0D,EAAA,EACA+6C,EAAA7yE,EAAA4zD,EAAAif,EAAA7yE,EAAAsP,EAIA,OAAAwoB,MAqBA27C,GAAAlkF,UACAG,OAAA+J,OAAA/J,OAAAmpB,OAAAi0G,KAEA/zG,YAAA06D,GAEA45C,cAAA,aAIAj6C,qBAAA8R,GAEA+nC,+BAAA,SAAAn1F,GAEA,UAAA07C,IACAhkF,KAAAR,MAAAQ,KAAAqjF,OAAArjF,KAAAw9H,eAAAl1F,IAIAo1F,+BAAAjlI,SAmBAyrF,GAAAnkF,UACAG,OAAA+J,OAAA/J,OAAAmpB,OAAAi0G,KAEA/zG,YAAA26D,GAEA25C,cAAA,WAwBA15C,GAAApkF,UACAG,OAAA+J,OAAA/J,OAAAmpB,OAAAi0G,KAEA/zG,YAAA46D,GAEA05C,cAAA,SACAn6C,gBAAA5pE,MAEA8pE,qBAAA6R,GAEAgoC,+BAAAhlI,OAEAilI,+BAAAjlI,SAoBA2rF,GAAArkF,UACAG,OAAA+J,OAAA/J,OAAAmpB,OAAAi0G,KAEA/zG,YAAA66D,GAEAy5C,cAAA,OACAn6C,gBAAA5pE,MAEA8pE,qBAAA6R,GAEAgoC,+BAAAhlI,OACAilI,+BAAAjlI,SAwBA4rF,GAAAtkF,UACAG,OAAA+J,OAAA/J,OAAAmpB,OAAAi0G,KAEA/zG,YAAA86D,GAEAw5C,cAAA,UA4BAv5C,GAAAvkF,UAAAu9H,GACAA,GAAA/zG,YAAA+6D,GAIApkF,OAAA+J,OAAAq6E,IAKAv7E,MAAA,SAAA+1H,GAEA,GAAArmI,SAAAqmI,EAAA35H,KAEA,SAAAN,OAAA,sCAIA,IAAAk6H,GAAAz6C,GAAA06C,8BAAAF,EAAA35H,KAEA,IAAA1M,SAAAqmI,EAAAt/H,MAAA,CAEA,GAAAA,MAAA6jF,IAEAvyF,GAAAyyF,eAAA03C,YAAA6D,EAAAvsH,KAAA/S,EAAA6jF,EAAA,SAEAy7C,EAAAt/H,QACAs/H,EAAAz7C,SAKA,MAAA5qF,UAAAsmI,EAAAh2H,MAEAg2H,EAAAh2H,MAAA+1H,GAKA,GAAAC,GACAD,EAAAvkI,KAAAukI,EAAAt/H,MAAAs/H,EAAAz7C,OAAAy7C,EAAAx7C,gBAMAoV,OAAA,SAAAumC,GAEA,GAEAH,GAFAC,EAAAE,EAAA11G,WAKA,IAAA9wB,SAAAsmI,EAAArmC,OAEAomC,EAAAC,EAAArmC,OAAAumC,OAEO,CAGPH,GAEAvkI,KAAA0kI,EAAA1kI,KACAiF,MAAA1O,EAAAyyF,eAAAC,aAAAy7C,EAAAz/H,MAAAsa,OACAupE,OAAAvyF,EAAAyyF,eAAAC,aAAAy7C,EAAA57C,OAAAvpE,OAIA,IAAAwpE,GAAA27C,EAAAnB,kBAEAx6C,KAAA27C,EAAAr7C,uBAEAk7C,EAAAx7C,iBAQA,MAFAw7C,GAAA35H,KAAA85H,EAAApB,cAEAiB,GAIAE,8BAAA,SAAAt1C,GAEA,OAAAA,EAAAliF,eAEA,aACA,aACA,YACA,aACA,cAEA,MAAA08E,GAEA,cACA,cACA,cACA,cAEA,MAAAH,GAEA,aAEA,MAAAM,GAEA,kBAEA,MAAAJ,GAEA,YACA,cAEA,MAAAG,GAEA,cAEA,MAAAD,IAIA,SAAAt/E,OAAA,yBAAA6kF,MAiCAnF,GAAAxkF,WAEAwpB,YAAAg7D,GAEAE,cAAA,WAKA,OAHAD,GAAAxkF,KAAAwkF,OACApxE,EAAA,EAEA9hB,EAAA,EAAAmO,EAAA+kF,EAAAvvF,OAAyC3D,IAAAmO,IAASnO,EAAA,CAElD,GAAA2tI,GAAAj/H,KAAAwkF,OAAAlzF,EAEA8hB,GAAAvd,KAAA6S,IACA0K,EAAA6rH,EAAAz/H,MAAAy/H,EAAAz/H,MAAAvK,OAAA,IAIA+K,KAAAoT,YAIAgJ,KAAA,WAEA,OAAA9qB,GAAA,EAAsBA,EAAA0O,KAAAwkF,OAAAvvF,OAAwB3D,IAE9C0O,KAAAwkF,OAAAlzF,GAAA8qB,KAAA,EAAApc,KAAAoT,SAIA,OAAApT,OAIA8jF,SAAA,WAEA,OAAAxyF,GAAA,EAAsBA,EAAA0O,KAAAwkF,OAAAvvF,OAAwB3D,IAE9C0O,KAAAwkF,OAAAlzF,GAAAwyF,UAIA,OAAA9jF,QAQAE,OAAA+J,OAAAs6E,IAEAx7E,MAAA,SAAA+1H,GAMA,OAJAt6C,MACA06C,EAAAJ,EAAAt6C,OACA26C,EAAA,GAAAL,EAAA5tC,KAAA,GAEA5/F,EAAA,EAAAmO,EAAAy/H,EAAAjqI,OAA6C3D,IAAAmO,IAASnO,EAEtDkzF,EAAArvF,KAAAmvF,GAAAv7E,MAAAm2H,EAAA5tI,IAAA8W,MAAA+2H,GAIA,WAAA56C,IAAAu6C,EAAAvkI,KAAAukI,EAAA1rH,SAAAoxE,IAKAkU,OAAA,SAAAjN,GAaA,OAXAjH,MACA46C,EAAA3zC,EAAAjH,OAEAs6C,GAEAvkI,KAAAkxF,EAAAlxF,KACA6Y,SAAAq4E,EAAAr4E,SACAoxE,UAIAlzF,EAAA,EAAAmO,EAAA2/H,EAAAnqI,OAA6C3D,IAAAmO,IAASnO,EAEtDkzF,EAAArvF,KAAAmvF,GAAAoU,OAAA0mC,EAAA9tI,IAIA,OAAAwtI,IAKAO,8BAAA,SAAA9kI,EAAA+kI,EAAApuC,EAAAquC,GAKA,OAHAC,GAAAF,EAAArqI,OACAuvF,KAEAlzF,EAAA,EAAsBkuI,EAAAluI,EAAqBA,IAAA,CAE3C,GAAAkO,MACA6jF,IAEA7jF,GAAArK,MACA7D,EAAAkuI,EAAA,GAAAA,EACAluI,GACAA,EAAA,GAAAkuI,GAEAn8C,EAAAluF,KAAA,MAEA,IAAAq1B,GAAA15B,EAAAyyF,eAAAq3C,iBAAAp7H,EACAA,GAAA1O,EAAAyyF,eAAAu3C,YAAAt7H,EAAA,EAAAgrB,GACA64D,EAAAvyF,EAAAyyF,eAAAu3C,YAAAz3C,EAAA,EAAA74D,GAIA+0G,GAAA,IAAA//H,EAAA,KAEAA,EAAArK,KAAAqqI,GACAn8C,EAAAluF,KAAAkuF,EAAA,KAIAmB,EAAArvF,KACA,GAAA+uF,IACA,0BAAAo7C,EAAAhuI,GAAAiJ,KAAA,IACAiF,EAAA6jF,GACAj7E,MAAA,EAAA8oF,IAGA,UAAA3M,IAAAhqF,EAAA,GAAAiqF,IAIAi7C,WAAA,SAAAC,EAAAnlI,GAEA,GAAAolI,GAAAD,CAEA,KAAA5lH,MAAAC,QAAA2lH,GAAA,CAEA,GAAA7/F,GAAA6/F,CACAC,GAAA9/F,EAAA3yB,UAAA2yB,EAAA3yB,SAAA0yH,YAAA//F,EAAA+/F,WAIA,OAAAtuI,GAAA,EAAsBA,EAAAquI,EAAA1qI,OAAsB3D,IAE5C,GAAAquI,EAAAruI,GAAAiJ,SAEA,MAAAolI,GAAAruI,EAKA,cAIAuuI,oCAAA,SAAAl/F,EAAAuwD,EAAAquC,GAUA,OARAO,MAIArxG,EAAA,qBAIAn9B,EAAA,EAAA0rD,EAAArc,EAAA1rC,OAAgD+nD,EAAA1rD,EAAQA,IAAA,CAExD,GAAA21H,GAAAtmF,EAAArvC,GACAqS,EAAAsjH,EAAA1sH,KAAAoH,MAAA8sB,EAEA,IAAA9qB,KAAA1O,OAAA,GAEA,GAAAsF,GAAAoJ,EAAA,GAEAo8H,EAAAD,EAAAvlI,EACAwlI,KAEAD,EAAAvlI,GAAAwlI,MAIAA,EAAA5qI,KAAA8xH,IAMA,GAAA+Y,KAEA,QAAAzlI,KAAAulI,GAEAE,EAAA7qI,KAAAovF,GAAA86C,8BAAA9kI,EAAAulI,EAAAvlI,GAAA22F,EAAAquC,GAIA,OAAAS,IAKAC,eAAA,SAAAC,EAAAzyE,GAEA,IAAAyyE,EAGA,WAoCA,QAhCAC,GAAA,SACApB,EAAAqB,EAAAC,EAAAC,EAAAC,GAGA,OAAAF,EAAAprI,OAAA,CAEA,GAAAuK,MACA6jF,IAEAvyF,GAAAyyF,eAAA03C,YACAoF,EAAA7gI,EAAA6jF,EAAAi9C,GAGA,IAAA9gI,EAAAvK,QAEAsrI,EAAAprI,KAAA,GAAA4pI,GAAAqB,EAAA5gI,EAAA6jF,MAQAmB,KAEAg8C,EAAAN,EAAA3lI,MAAA,UAEA6Y,EAAA8sH,EAAAjrI,QAAA,GACAi8F,EAAAgvC,EAAAhvC,KAAA,GAEAuvC,EAAAP,EAAAQ,cAEA59F,EAAA,EAAsBA,EAAA29F,EAAAxrI,OAA4B6tC,IAAA,CAElD,GAAAu9F,GAAAI,EAAA39F,GAAAvwB,IAGA,IAAA8tH,GAAA,IAAAA,EAAAprI,OAIA,GAAAorI,EAAA,GAAA1/F,aAAA,CAIA,OADAggG,MACA/iF,EAAA,EAAwBA,EAAAyiF,EAAAprI,OAA0B2oD,IAElD,GAAAyiF,EAAAziF,GAAAjd,aAEA,OAAAxvC,GAAA,EAA0BA,EAAAkvI,EAAAziF,GAAAjd,aAAA1rC,OAA0C9D,IAEpEwvI,EAAAN,EAAAziF,GAAAjd,aAAAxvC,IAAA,EAUA,QAAAyvI,KAAAD,GAAA,CAKA,OAHAnhI,MACA6jF,KAEAlyF,EAAA,EACAA,IAAAkvI,EAAAziF,GAAAjd,aAAA1rC,SAAsD9D,EAAA,CAEtD,GAAA0vI,GAAAR,EAAAziF,EAEAp+C,GAAArK,KAAA0rI,EAAA5oI,MACAorF,EAAAluF,KAAA0rI,EAAA5Z,cAAA2Z,EAAA,KAIAp8C,EAAArvF,KAAA,GAAA+uF,IACA,yBAAA08C,EAAA,IAAAphI,EAAA6jF,IAIAjwE,EAAAutH,EAAA1rI,QAAAi8F,GAAA,OAEQ,CAGR,GAAA4vC,GAAA,UAAArzE,EAAA3qB,GAAAvoC,KAAA,GAEA4lI,GACAp8C,GAAA+8C,EAAA,YACAT,EAAA,MAAA77C,GAEA27C,EACAl8C,GAAA68C,EAAA,cACAT,EAAA,MAAA77C,GAEA27C,EACAp8C,GAAA+8C,EAAA,SACAT,EAAA,MAAA77C,IAMA,OAAAA,EAAAvvF,OAEA,WAIA,IAAAw2F,GAAA,GAAAlH,IAAAi8C,EAAAptH,EAAAoxE,EAEA,OAAAiH,MAiBAvrF,OAAA+J,OAAAy6E,GAAA3kF,WAEAqa,KAAA,SAAAzN,EAAAi0E,EAAAC,EAAAC,GAEA,GAAAphE,GAAA1f,KAEA05H,EAAA,GAAAp4C,IAAA5hE,EAAA6hE,QACAm4C,GAAAt/G,KAAAzN,EAAA,SAAA2O,GAEAslE,EAAAlhE,EAAA3W,MAAA/B,KAAA+B,MAAAuS,MAEOulE,EAAAC,IAIPigD,YAAA,SAAAlnH,GAEA7Z,KAAA2J,SAAAkQ,GAIA9Q,MAAA,SAAA+1H,GAIA,QAAAkC,GAAAzmI,GAQA,MANA9B,UAAAkR,EAAApP,GAMAoP,EAAApP,GAVA,GAAAoP,GAAA3J,KAAA2J,SAcAF,EAAA,GAAAkvH,IAAAmG,EAAA35H,KAmDA,IAjDA1M,SAAAqmI,EAAAh2F,OAAAr/B,EAAAq/B,KAAAg2F,EAAAh2F,MACArwC,SAAAqmI,EAAAvkI,OAAAkP,EAAAlP,KAAAukI,EAAAvkI,MACA9B,SAAAqmI,EAAA30H,OAAAV,EAAAU,MAAAoiG,OAAAuyB,EAAA30H,OACA1R,SAAAqmI,EAAAr0D,YAAAhhE,EAAAghE,UAAAq0D,EAAAr0D,WACAhyE,SAAAqmI,EAAAp0D,YAAAjhE,EAAAihE,UAAAo0D,EAAAp0D,WACAjyE,SAAAqmI,EAAA10H,UAAAX,EAAAW,SAAAmiG,OAAAuyB,EAAA10H,UACA3R,SAAAqmI,EAAAx0D,UAAA7gE,EAAA6gE,SAAAiiC,OAAAuyB,EAAAx0D,UACA7xE,SAAAqmI,EAAAjzH,YAAApC,EAAAoC,UAAAizH,EAAAjzH,WACApT,SAAAqmI,EAAAllH,WAAAnQ,EAAAmQ,SAAAklH,EAAAllH,UACAnhB,SAAAqmI,EAAAvtF,eAAA9nC,EAAA8nC,aAAAutF,EAAAvtF,cACA94C,SAAAqmI,EAAAttF,iBAAA/nC,EAAA+nC,eAAAstF,EAAAttF,gBACA/4C,SAAAqmI,EAAAtuG,eAAA/mB,EAAA+mB,aAAAsuG,EAAAtuG,cACA/3B,SAAAqmI,EAAAppF,MAAAjsC,EAAAisC,IAAAopF,EAAAppF,KACAj9C,SAAAqmI,EAAA/yH,UAAAtC,EAAAsC,QAAA+yH,EAAA/yH,SACAtT,SAAAqmI,EAAA1wG,WAAA3kB,EAAA2kB,SAAA0wG,EAAA1wG,UACA31B,SAAAqmI,EAAAxpH,OAAA7L,EAAA6L,KAAAwpH,EAAAxpH,MACA7c,SAAAqmI,EAAA5wG,UAAAzkB,EAAAykB,QAAA4wG,EAAA5wG,SACAz1B,SAAAqmI,EAAAtpH,cAAA/L,EAAA+L,YAAAspH,EAAAtpH,aACA/c,SAAAqmI,EAAA5pF,YAAAzrC,EAAAyrC,UAAA4pF,EAAA5pF,WACAz8C,SAAAqmI,EAAA/oF,YAAAtsC,EAAAssC,UAAA+oF,EAAA/oF,WACAt9C,SAAAqmI,EAAA9oF,aAAAvsC,EAAAusC,WAAA8oF,EAAA9oF,YACAv9C,SAAAqmI,EAAAjoF,aAAAptC,EAAAotC,WAAAioF,EAAAjoF,YACAp+C,SAAAqmI,EAAAhsG,YAAArpB,EAAAqpB,UAAAgsG,EAAAhsG,WACAr6B,SAAAqmI,EAAA9rG,qBAAAvpB,EAAAupB,mBAAA8rG,EAAA9rG,oBACAv6B,SAAAqmI,EAAA7rG,mBAAAxpB,EAAAwpB,iBAAA6rG,EAAA7rG,kBACAx6B,SAAAqmI,EAAA5rG,oBAAAzpB,EAAAypB,kBAAA4rG,EAAA5rG;AACAz6B,SAAAqmI,EAAAtnF,WAAA/tC,EAAA+tC,SAAAsnF,EAAAtnF,UACA/+C,SAAAqmI,EAAAn+F,eAAAl3B,EAAAk3B,aAAAm+F,EAAAn+F,cAIAloC,SAAAqmI,EAAArqH,OAAAhL,EAAAgL,KAAAqqH,EAAArqH,MACAhc,SAAAqmI,EAAA5zE,kBAAAzhD,EAAAyhD,gBAAA4zE,EAAA5zE,iBAIAzyD,SAAAqmI,EAAA90H,MAAAP,EAAAO,IAAAg3H,EAAAlC,EAAA90H,MAEAvR,SAAAqmI,EAAAv0H,WAEAd,EAAAc,SAAAy2H,EAAAlC,EAAAv0H,UACAd,EAAA+L,aAAA,GAIA/c,SAAAqmI,EAAAj3E,UAAAp+C,EAAAo+C,QAAAm5E,EAAAlC,EAAAj3E,UACApvD,SAAAqmI,EAAAv0D,YAAA9gE,EAAA8gE,UAAAu0D,EAAAv0D,WAEA9xE,SAAAqmI,EAAAx0H,YAAAb,EAAAa,UAAA02H,EAAAlC,EAAAx0H,YACA7R,SAAAqmI,EAAAt0D,YAAA,CAEA,GAAAA,GAAAs0D,EAAAt0D,WAEA1wD,OAAAC,QAAAywD,MAAA,IAIAA,SAIA/gE,EAAA+gE,aAAA,GAAA59D,IAAAqL,UAAAuyD,GA4BA,GAxBA/xE,SAAAqmI,EAAA3mF,kBAAA1uC,EAAA0uC,gBAAA6oF,EAAAlC,EAAA3mF,kBACA1/C,SAAAqmI,EAAA1mF,oBAAA3uC,EAAA2uC,kBAAA0mF,EAAA1mF,mBACA3/C,SAAAqmI,EAAAzmF,mBAAA5uC,EAAA4uC,iBAAAymF,EAAAzmF,kBAEA5/C,SAAAqmI,EAAAn0E,eAAAlhD,EAAAkhD,aAAAq2E,EAAAlC,EAAAn0E,eACAlyD,SAAAqmI,EAAAl0E,eAAAnhD,EAAAmhD,aAAAo2E,EAAAlC,EAAAl0E,eAEAnyD,SAAAqmI,EAAAp0E,cAAAjhD,EAAAihD,YAAAs2E,EAAAlC,EAAAp0E,cACAjyD,SAAAqmI,EAAA/0D,oBAAAtgE,EAAAsgE,kBAAA+0D,EAAA/0D,mBAEAtxE,SAAAqmI,EAAAz0H,cAAAZ,EAAAY,YAAA22H,EAAAlC,EAAAz0H,cAEA5R,SAAAqmI,EAAAt0H,SAAAf,EAAAe,OAAAw2H,EAAAlC,EAAAt0H,SAEA/R,SAAAqmI,EAAAt/E,eAAA/1C,EAAA+1C,aAAAs/E,EAAAt/E,cAEA/mD,SAAAqmI,EAAAr0H,WAAAhB,EAAAgB,SAAAu2H,EAAAlC,EAAAr0H,WACAhS,SAAAqmI,EAAAz0D,oBAAA5gE,EAAA4gE,kBAAAy0D,EAAAz0D,mBAEA5xE,SAAAqmI,EAAA1/E,QAAA31C,EAAA21C,MAAA4hF,EAAAlC,EAAA1/E,QACA3mD,SAAAqmI,EAAAz/E,iBAAA51C,EAAA41C,eAAAy/E,EAAAz/E,gBAIA5mD,SAAAqmI,EAAA7gI,UAEA,OAAA3M,GAAA,EAAAi7B,EAAAuyG,EAAA7gI,UAAAhJ,OAAkDs3B,EAAAj7B,EAAOA,IAEzDmY,EAAAxL,UAAA9I,KAAA6K,KAAA+I,MAAA+1H,EAAA7gI,UAAA3M,IAMA,OAAAmY,MAgBAvJ,OAAA+J,OAAA06E,GAAA5kF,WAEAqa,KAAA,SAAAzN,EAAAi0E,EAAAC,EAAAC,GAEA,GAAAphE,GAAA1f,KAEA05H,EAAA,GAAAp4C,IAAA5hE,EAAA6hE,QACAm4C,GAAAt/G,KAAAzN,EAAA,SAAA2O,GAEAslE,EAAAlhE,EAAA3W,MAAA/B,KAAA+B,MAAAuS,MAEOulE,EAAAC,IAIP/3E,MAAA,SAAA+1H,GAEA,GAAA5xH,GAAA,GAAA6yB,IAEAz5B,EAAAw4H,EAAA1mH,KAAA9R,MAEA26H,GACAhhF,oBACAE,sBACAE,oCACAE,sBACA1Q,wBACAxE,sBACAsV,wBACAnW,0BACAsW,0BAGA,IAAAroD,SAAA6N,EAAA,CAEA,GAAA46H,GAAA,GAAAD,GAAA36H,EAAAnB,MAAAmB,EAAA65B,MACAjzB,GAAA+2C,SAAA,GAAAvE,IAAAwhF,EAAA,IAIA,GAAAlhG,GAAA8+F,EAAA1mH,KAAA4nB,UAEA,QAAArgC,KAAAqgC,GAAA,CAEA,GAAAswB,GAAAtwB,EAAArgC,GACAuhI,EAAA,GAAAD,GAAA3wE,EAAAnrD,MAAAmrD,EAAAnwB,MAEAjzB,GAAAg3C,aAAAvkD,EAAA,GAAA+/C,IAAAwhF,EAAA5wE,EAAA3Q,SAAA2Q,EAAA1Q,aAIA,GAAA3f,GAAA6+F,EAAA1mH,KAAA6nB,QAAA6+F,EAAA1mH,KAAA+oH,WAAArC,EAAA1mH,KAAAgpH,OAEA,IAAA3oI,SAAAwnC,EAEA,OAAA3uC,GAAA,EAAAmO,EAAAwgC,EAAAhrC,OAA0C3D,IAAAmO,IAASnO,EAAA,CAEnD,GAAA+uC,GAAAJ,EAAA3uC,EAEA4b,GAAA22C,SAAAxjB,EAAA3pC,MAAA2pC,EAAA/vB,MAAA+vB,EAAAa,eAMA,GAAAmgB,GAAAy9E,EAAA1mH,KAAAipC,cAEA,IAAA5oD,SAAA4oD,EAAA,CAEA,GAAA53B,GAAA,GAAAza,EAEAvW,UAAA4oD,EAAA53B,QAEAA,EAAAxR,UAAAopC,EAAA53B,QAIAvc,EAAAm0C,eAAA,GAAA/I,IAAA7uB,EAAA43B,EAAAjtC,QAIA,MAAAlH,MAkBA03E,GAAA7kF,WAEAwpB,YAAAq7D,GAEA7mF,YAAAtF,OAEA4oI,eAAA,SAAA10H,GAEA,GAAAhJ,GAAAgJ,EAAAzK,MAAA,IAEA,YAAAyB,EAAA1O,OAAA,MAEA0O,EAAA+rD,MAEA/rD,EAAAoE,KAAA,WAIAu5H,cAAA,SAAArjI,EAAAknF,EAAApnF,GAIA,OAFAoiC,MAEA7uC,EAAA,EAAsBA,EAAA2M,EAAAhJ,SAAsB3D,EAE5C6uC,EAAA7uC,GAAA0O,KAAAuhI,eAAAtjI,EAAA3M,GAAA6zF,EAAApnF,EAIA,OAAAoiC,IAIAohG,eAAA,WAEA,GAAAp3H,GAAAq3H,EAAAC,CAEA,iBAAAtwI,EAAAg0F,EAAApnF,GAUA,QAAA0X,GAAAC,EAAAnK,EAAAiF,EAAA6K,EAAAstB,GAEA,GAGA9/B,GAHA64H,EAAAv8C,EAAAzvE,EACAgkH,EAAA90C,GAAA+8C,SAAAvhI,IAAAshI,EAIA,QAAAhI,EAEA7wH,EAAA6wH,EAAAt/G,KAAAsnH,IAIAF,EAAAxH,eAAAj8H,GACA8K,EAAA24H,EAAApnH,KAAAsnH,IAIAjpI,SAAA8S,IAEA1C,EAAA0C,OAAA0M,UAAA1M,GAEA,IAAAA,EAAA,KAAA1C,EAAAgE,MAAAE,IACA,IAAAxB,EAAA,KAAA1C,EAAAiE,MAAAC,KAIAtU,SAAA+X,GAEA3H,EAAA2H,OAAAyH,UAAAzH,GAIA/X,SAAA4iB,IAEA,WAAAA,EAAA,KAAAxS,EAAAgE,MAAAE,IACA,WAAAsO,EAAA,KAAAxS,EAAAgE,MAAAo/D,IAEA,WAAA5wD,EAAA,KAAAxS,EAAAiE,MAAAC,IACA,WAAAsO,EAAA,KAAAxS,EAAAiE,MAAAm/D,KAIAxzE,SAAAkwC,IAEA9/B,EAAA8/B,aAIA,IAAAG,GAAAh4C,EAAA+E,KAAAkzC,cAIA,OAFAp/B,GAAAm/B,GAAAjgC,EAEAigC,EA7DArwC,SAAA0R,MAAA,GAAAiE,IACA3V,SAAA+oI,MAAA,GAAA1/C,KACArpF,SAAAgpI,MAAA,GAAA/8C,IAIA,IAAA/6E,MA6DAm1H,GACAh2F,KAAAh4C,EAAA+E,KAAAkzC,eACA5jC,KAAA,sBAGA,QAAA5K,KAAApJ,GAAA,CAEA,GAAA0oB,GAAA1oB,EAAAoJ,EAEA,QAAAA,GACA,eACA,eACA,qBACA,mBACA,KACA,eACAukI,EAAAvkI,KAAAsf,CACA,MACA,gBACAilH,EAAA1wG,SAAA8mE,GAAAr7E,EACA,MACA,oBACA,iBAEA,KACA,oBACAilH,EAAA30H,QAAA8N,UAAA4B,GAAAqzF,QACA,MACA,qBACA4xB,EAAAx0D,SAAAngE,EAAA8N,UAAA4B,GAAAqzF,QACA,MACA,qBACA4xB,EAAA10H,SAAAD,EAAA8N,UAAA4B,GAAAqzF,QACA,MACA,oBACA4xB,EAAAjzH,UAAAgO,CACA,MACA,eACA,UAAAA,EAAArS,gBAAAs3H,EAAA35H,KAAA,qBACA,UAAA0U,EAAArS,gBAAAs3H,EAAA35H,KAAA,qBACA,aAAA0U,EAAArS,gBAAAs3H,EAAA35H,KAAA,uBACA,MACA,kBACA25H,EAAA90H,IAAAyL,EAAAoE,EAAA1oB,EAAAywI,iBAAAzwI,EAAA0wI,iBAAA1wI,EAAA2wI,eAAA3wI,EAAA4wI,qBACA,MACA,wBACA,uBACA,qBACA,2BACA,KACA,mBACAjD,EAAAp0E,YAAAj1C,EAAAoE,EAAA1oB,EAAA6wI,kBAAA7wI,EAAA8wI,kBAAA9wI,EAAA+wI,gBAAA/wI,EAAAgxI,sBACA,MACA,yBACA,wBACA,sBACA,4BACA,KACA,gBACArD,EAAAr0H,SAAAgL,EAAAoE,EAAA1oB,EAAAixI,eAAAjxI,EAAAkxI,eAAAlxI,EAAAmxI,aAAAnxI,EAAAoxI,mBACA,MACA,sBACA,qBACA,mBACA,yBACA,KACA,aACAzD,EAAA1/E,MAAA3pC,EAAAoE,EAAA1oB,EAAAqxI,YAAArxI,EAAAsxI,YAAAtxI,EAAAuxI,UAAAvxI,EAAAwxI,gBACA,MACA,mBACA,kBACA,gBACA,sBACA,KACA,eACA7D,EAAAj3E,QAAApyC,EAAAoE,EAAA1oB,EAAAyxI,cAAAzxI,EAAA0xI,cAAA1xI,EAAA2xI,YAAA3xI,EAAA4xI,kBACA,MACA,oBACAjE,EAAAv0D,UAAA1wD,CACA,MACA,qBACA,oBACA,kBACA,wBACA,KACA,iBACAilH,EAAAx0H,UAAAmL,EAAAoE,EAAA1oB,EAAA6xI,gBAAA7xI,EAAA8xI,gBAAA9xI,EAAA+xI,cAAA/xI,EAAAgyI,oBACA,MACA,uBACArE,EAAAt0D,aAAA3wD,IACA,MACA,uBACA,sBACA,oBACA,0BACA,KACA,mBACAilH,EAAAz0H,YAAAoL,EAAAoE,EAAA1oB,EAAAiyI,kBAAAjyI,EAAAkyI,kBAAAlyI,EAAAmyI,gBAAAnyI,EAAAoyI,sBACA,MACA,yBACA,wBACA,sBACA,4BACA,KACA,oBACAzE,EAAAl0E,aAAAn1C,EAAAoE,EAAA1oB,EAAAqyI,mBAAAryI,EAAAsyI,mBAAAtyI,EAAAuyI,iBAAAvyI,EAAAwyI,uBACA,MACA,0BACA,yBACA,uBACA,6BACA,KACA,oBACA7E,EAAAn0E,aAAAl1C,EAAAoE,EAAA1oB,EAAAyyI,mBAAAzyI,EAAA0yI,mBAAA1yI,EAAA2yI,iBAAA3yI,EAAA4yI,uBACA,MACA,0BACA,yBACA,uBACA,6BACA,KACA,gBACAjF,EAAAv0H,SAAAkL,EAAAoE,EAAA1oB,EAAA6yI,eAAA7yI,EAAA8yI,eAAA9yI,EAAA+yI,aAAA/yI,EAAAgzI,mBACA,MACA,sBACA,qBACA,mBACA,yBACA,KACA,iBACArF,EAAAxpH,KAAA8rB,EACA,MACA,mBACA09F,EAAAxpH,KAAAC,EACA,MACA,oBAEAupH,EAAA5wG,QAAArU,CACA,MACA,iBACA,iBACA,iBACA,cACA,mBACA,kBACA,cACA,gBACAilH,EAAAvkI,GAAAsf,CACA,MACA,oBACAA,KAAA,IAAAilH,EAAAtuG,aAAAC,IACA,SAAA5W,IAAAilH,EAAAtuG,aAAAgC,KAgBA,MAPA,sBAAAssG,EAAA35H,YAAA25H,GAAA10H,SACA,sBAAA00H,EAAA35H,YAAA25H,GAAAx0D,SAEAw0D,EAAA5wG,QAAA,IAAA4wG,EAAAtpH,aAAA,GAEAisH,EAAAV,YAAAp3H,GAEA83H,EAAA14H,MAAA+1H,QAQAl6C,GAAA+8C,UAEAyC,YAEAtpI,IAAA,SAAA8G,EAAA83H,GAEA15H,KAAAokI,SAAAjvI,KAAAyM,EAAA83H,IAIAt5H,IAAA,SAAAqM,GAIA,OAFA23H,GAAApkI,KAAAokI,SAEA9yI,EAAA,EAAAi7B,EAAA63G,EAAAnvI,OAA2Cs3B,EAAAj7B,EAAOA,GAAA,GAElD,GAAAsQ,GAAAwiI,EAAA9yI,GACAooI,EAAA0K,EAAA9yI,EAAA,EAEA,IAAAsQ,EAAAE,KAAA2K,GAEA,MAAAitH,GAMA,cA0BAx5H,OAAA+J,OAAA+6E,GAAAjlF,WAEAqa,KAAA,SAAAzN,EAAAi0E,EAAAC,EAAAC,GAEA,GAAAphE,GAAA1f,KAEAmlF,EAAAnlF,KAAAmlF,aAAA,gBAAAnlF,MAAAmlF,YAAAnlF,KAAAmlF,YAAAP,GAAA7kF,UAAAshI,eAAA10H,GAEA+sH,EAAA,GAAAp4C,IAAAthF,KAAAuhF,QACAm4C,GAAAD,mBAAAz5H,KAAAilF,iBACAy0C,EAAAt/G,KAAAzN,EAAA,SAAA2O,GAEA,GAAAwjH,GAAA93H,KAAA+B,MAAAuS,GACAw9E,EAAAgmC,EAAAhmC,QAEA,IAAArgG,SAAAqgG,EAAA,CAEA,GAAA3zF,GAAA2zF,EAAA3zF,IAEA,IAAA1M,SAAA0M,EAAA,CAEA,cAAAA,EAAAqC,cAGA,MAIA,cAAArC,EAAAqC,cAGA,QAQA,GAAAlU,GAAAosB,EAAA3W,MAAA+1H,EAAA35C,EACAvE,GAAAttF,EAAA4Z,SAAA5Z,EAAA2K,YAEO4iF,EAAAC,IAIPujD,eAAA,SAAAxqH,GAEA7Z,KAAAmlF,YAAAtrE,GAIA9Q,MAAA,SAAA+1H,EAAA35C,GAcA,QAAAm/C,GAAAl8H,GAEA,QAAAm8H,GAAA1qH,EAAA/d,GAEA,MAAA+d,GAAA,GAAA/d,EAIA,GAAAxK,GAAAoS,EAAA8gI,EAEAh0H,EAAAi0H,EAEAC,EAAAC,EAAAC,EAAA1jG,EAEA/7B,EACA0/H,EACA9e,EACAE,EACAC,EAAAC,EACAC,EAAAC,EAEAzrF,EAAAY,EAAAspG,EAAAC,EAAA9rG,EAAAhuB,EAEA+5H,EAAA9lG,EAAAwC,EAAA9Y,EAEAkJ,EAAAgtG,EAAAhtG,MACAD,EAAAitG,EAAAjtG,SACA0M,EAAAugG,EAAAvgG,QACAqD,EAAAk9F,EAAAl9F,OAEAqjG,EAAA,CAEA,IAAAxsI,SAAAqmI,EAAAzrG,IAAA,CAIA,IAAA/hC,EAAA,EAAoBA,EAAAwtI,EAAAzrG,IAAAp+B,OAAqB3D,IAEzCwtI,EAAAzrG,IAAA/hC,GAAA2D,QAAAgwI,GAIA,KAAA3zI,EAAA,EAAoB2zI,EAAA3zI,EAAeA,IAEnC4b,EAAAqzB,cAAAjvC,MASA,IAHAkf,EAAA,EACAi0H,EAAA5yG,EAAA58B,OAEAwvI,EAAAj0H,GAEAoqB,EAAA,GAAA5rB,GAEA4rB,EAAAjiC,EAAAk5B,EAAArhB,KAAApI,EACAwyB,EAAAhiC,EAAAi5B,EAAArhB,KAAApI,EACAwyB,EAAA/hC,EAAAg5B,EAAArhB,KAAApI,EAEA8E,EAAA2kB,SAAA18B,KAAAylC,EAOA,KAHApqB,EAAA,EACAi0H,EAAA3yG,EAAA78B,OAEAwvI,EAAAj0H,GAeA,GAbArL,EAAA2sB,EAAAthB,KAGAq0H,EAAAN,EAAAp/H,EAAA,GACA4gH,EAAAwe,EAAAp/H,EAAA,GACA8gH,EAAAse,EAAAp/H,EAAA,GACA+gH,EAAAqe,EAAAp/H,EAAA,GACAghH,EAAAoe,EAAAp/H,EAAA,GACAihH,EAAAme,EAAAp/H,EAAA,GACAkhH,EAAAke,EAAAp/H,EAAA,GAIA0/H,EAAA,CA0BA,GAxBAC,EAAA,GAAA7lF,IACA6lF,EAAAnzI,EAAAmgC,EAAAthB,GACAs0H,EAAAlzI,EAAAkgC,EAAAthB,EAAA,GACAs0H,EAAA1zI,EAAA0gC,EAAAthB,EAAA,GAEAu0H,EAAA,GAAA9lF,IACA8lF,EAAApzI,EAAAmgC,EAAAthB,EAAA,GACAu0H,EAAAnzI,EAAAkgC,EAAAthB,EAAA,GACAu0H,EAAA3zI,EAAA0gC,EAAAthB,EAAA,GAEAA,GAAA,EAEAu1G,IAEA7kF,EAAApP,EAAAthB,KACAs0H,EAAA5jG,gBACA6jG,EAAA7jG,iBAMAsjG,EAAAt3H,EAAA4kB,MAAA78B,OAEAgxH,EAEA,IAAA30H,EAAA,EAAsB2zI,EAAA3zI,EAAeA,IAOrC,IALA0zI,EAAAlG,EAAAzrG,IAAA/hC,GAEA4b,EAAAqzB,cAAAjvC,GAAAkzI,MACAt3H,EAAAqzB,cAAAjvC,GAAAkzI,EAAA,MAEA9gI,EAAA,EAAuB,EAAAA,EAAOA,IAE9BkhI,EAAA9yG,EAAAthB,KAEAkxB,EAAAsjG,EAAA,EAAAJ,GACAh8G,EAAAo8G,EAAA,EAAAJ,EAAA,GAEA1lG,EAAA,GAAAtyB,GAAA80B,EAAA9Y,GAEA,IAAAllB,GAAAwJ,EAAAqzB,cAAAjvC,GAAAkzI,GAAArvI,KAAA+pC,GACA,IAAAx7B,GAAAwJ,EAAAqzB,cAAAjvC,GAAAkzI,EAAA,GAAArvI,KAAA+pC,EAsBA,IAdAgnF,IAEAye,EAAA,EAAA7yG,EAAAthB,KAEAs0H,EAAA75H,OAAArW,IACA2pC,EAAAomG,KACApmG,EAAAomG,KACApmG,EAAAomG,IAGAI,EAAA95H,OAAA7O,KAAA0oI,EAAA75H,SAIAk7G,EAEA,IAAA70H,EAAA,EAAsB,EAAAA,EAAOA,IAE7BqzI,EAAA,EAAA7yG,EAAAthB,KAEAvF,EAAA,GAAA+D,GACAuvB,EAAAomG,KACApmG,EAAAomG,KACApmG,EAAAomG,IAIA,IAAArzI,GAAAwzI,EAAAvjG,cAAApsC,KAAA8V,GACA,IAAA3Z,GAAAyzI,EAAAxjG,cAAApsC,KAAA8V,EAkBA,IAXAm7G,IAEAse,EAAA5yG,EAAAthB,KACAyoB,EAAA2I,EAAA8iG,GAEAI,EAAA36H,MAAAoiG,OAAAtzE,GACA8rG,EAAA56H,MAAAoiG,OAAAtzE,IAKAotF,EAEA,IAAA/0H,EAAA,EAAsB,EAAAA,EAAOA,IAE7BozI,EAAA5yG,EAAAthB,KACAyoB,EAAA2I,EAAA8iG,GAEA,IAAApzI,GAAAwzI,EAAAt0G,aAAAr7B,KAAA,GAAAiZ,GAAA6qB,IACA,IAAA3nC,GAAAyzI,EAAAv0G,aAAAr7B,KAAA,GAAAiZ,GAAA6qB,GAMA/rB,GAAA4kB,MAAA38B,KAAA2vI,GACA53H,EAAA4kB,MAAA38B,KAAA4vI,OAES,CAkBT,GAhBAvpG,EAAA,GAAAyjB,IACAzjB,EAAA7pC,EAAAmgC,EAAAthB,KACAgrB,EAAA5pC,EAAAkgC,EAAAthB,KACAgrB,EAAApqC,EAAA0gC,EAAAthB,KAEAu1G,IAEA7kF,EAAApP,EAAAthB,KACAgrB,EAAA0F,iBAMAsjG,EAAAt3H,EAAA4kB,MAAA78B,OAEAgxH,EAEA,IAAA30H,EAAA,EAAsB2zI,EAAA3zI,EAAeA,IAMrC,IAJA0zI,EAAAlG,EAAAzrG,IAAA/hC,GAEA4b,EAAAqzB,cAAAjvC,GAAAkzI,MAEA9gI,EAAA,EAAuB,EAAAA,EAAOA,IAE9BkhI,EAAA9yG,EAAAthB,KAEAkxB,EAAAsjG,EAAA,EAAAJ,GACAh8G,EAAAo8G,EAAA,EAAAJ,EAAA,GAEA1lG,EAAA,GAAAtyB,GAAA80B,EAAA9Y,GAEA1b,EAAAqzB,cAAAjvC,GAAAkzI,GAAArvI,KAAA+pC,EAoBA,IAZAgnF,IAEAye,EAAA,EAAA7yG,EAAAthB,KAEAgrB,EAAAvwB,OAAArW,IACA2pC,EAAAomG,KACApmG,EAAAomG,KACApmG,EAAAomG,KAKAxe,EAEA,IAAA70H,EAAA,EAAsB,EAAAA,EAAOA,IAE7BqzI,EAAA,EAAA7yG,EAAAthB,KAEAvF,EAAA,GAAA+D,GACAuvB,EAAAomG,KACApmG,EAAAomG,KACApmG,EAAAomG,IAGAnpG,EAAA+F,cAAApsC,KAAA8V,EAeA,IARAm7G,IAEAse,EAAA5yG,EAAAthB,KACAgrB,EAAArxB,MAAAoiG,OAAA3qE,EAAA8iG,KAKAre,EAEA,IAAA/0H,EAAA,EAAsB,EAAAA,EAAOA,IAE7BozI,EAAA5yG,EAAAthB,KACAgrB,EAAAhL,aAAAr7B,KAAA,GAAAiZ,GAAAwzB,EAAA8iG,IAMAx3H,GAAA4kB,MAAA38B,KAAAqmC,IAQA,QAAA0pG,KAEA,GAAAC,GAAA1sI,SAAAqmI,EAAAqG,oBAAArG,EAAAqG,oBAAA,CAEA,IAAArG,EAAA59E,YAEA,OAAA5vD,GAAA,EAAAi7B,EAAAuyG,EAAA59E,YAAAjsD,OAAqDs3B,EAAAj7B,EAAOA,GAAA6zI,EAAA,CAE5D,GAAAxsI,GAAAmmI,EAAA59E,YAAA5vD,GACAsH,EAAAusI,EAAA,EAAArG,EAAA59E,YAAA5vD,EAAA,KACAuH,EAAAssI,EAAA,EAAArG,EAAA59E,YAAA5vD,EAAA,KACAi5B,EAAA46G,EAAA,EAAArG,EAAA59E,YAAA5vD,EAAA,IAEA4b,GAAAg0C,YAAA/rD,KAAA,GAAAm1B,GAAA3xB,EAAAC,EAAAC,EAAA0xB,IAMA,GAAAu0G,EAAA39E,YAEA,OAAA7vD,GAAA,EAAAi7B,EAAAuyG,EAAA39E,YAAAlsD,OAAqDs3B,EAAAj7B,EAAOA,GAAA6zI,EAAA,CAE5D,GAAAxzI,GAAAmtI,EAAA39E,YAAA7vD,GACAM,EAAAuzI,EAAA,EAAArG,EAAA39E,YAAA7vD,EAAA,KACAF,EAAA+zI,EAAA,EAAArG,EAAA39E,YAAA7vD,EAAA,KACAikC,EAAA4vG,EAAA,EAAArG,EAAA39E,YAAA7vD,EAAA,IAEA4b,GAAAi0C,YAAAhsD,KAAA,GAAAm1B,GAAA34B,EAAAC,EAAAR,EAAAmkC,IAMAroB,EAAAugD,MAAAqxE,EAAArxE,MAEAvgD,EAAAugD,OAAAvgD,EAAAugD,MAAAx4D,OAAA,IAAAiY,EAAAg0C,YAAAjsD,SAAAiY,EAAAi0C,YAAAlsD,QAAAiY,EAAAi0C,YAAAlsD,SAAAiY,EAAA2kB,SAAA58B,QASA,QAAAmwI,GAAAh9H,GAEA,GAAA3P,SAAAqmI,EAAAn+F,aAEA,OAAArvC,GAAA,EAAAi7B,EAAAuyG,EAAAn+F,aAAA1rC,OAAsDs3B,EAAAj7B,EAAOA,IAAA,CAE7D4b,EAAAyzB,aAAArvC,MACA4b,EAAAyzB,aAAArvC,GAAAiJ,KAAAukI,EAAAn+F,aAAArvC,GAAAiJ,KACA2S,EAAAyzB,aAAArvC,GAAAugC,WAKA,QAHAwzG,GAAAn4H,EAAAyzB,aAAArvC,GAAAugC,SACAyzG,EAAAxG,EAAAn+F,aAAArvC,GAAAugC,SAEAjJ,EAAA,EAAA8X,EAAA4kG,EAAArwI,OAAkDyrC,EAAA9X,EAAQA,GAAA,GAE1D,GAAAgS,GAAA,GAAA5rB,EACA4rB,GAAAjiC,EAAA2sI,EAAA18G,GAAAxgB,EACAwyB,EAAAhiC,EAAA0sI,EAAA18G,EAAA,GAAAxgB,EACAwyB,EAAA/hC,EAAAysI,EAAA18G,EAAA,GAAAxgB,EAEAi9H,EAAAlwI,KAAAylC,IAQA,GAAAniC,SAAAqmI,EAAAyG,aAAAzG,EAAAyG,YAAAtwI,OAAA,EAOA,OAHA68B,GAAA5kB,EAAA4kB,MACAyzG,EAAAzG,EAAAyG,YAAA,GAAA3jG,OAEAtwC,EAAA,EAAAi7B,EAAAuF,EAAA78B,OAA0Cs3B,EAAAj7B,EAAOA,IAEjDwgC,EAAAxgC,GAAA6Y,MAAA8N,UAAAstH,EAAA,EAAAj0I,GAQA,QAAAk0I,KAEA,GAAAC,MAGA7F,IAEAnnI,UAAAqmI,EAAAoB,WAEAN,EAAAzqI,KAAA2pI,EAAAoB,WAIAznI,SAAAqmI,EAAAc,aAEAd,EAAAc,WAAA3qI,OAEA2qI,IAAA9tI,OAAAgtI,EAAAc,YAIAA,EAAAzqI,KAAA2pI,EAAAc,YAMA,QAAAtuI,GAAA,EAAuBA,EAAAsuI,EAAA3qI,OAAuB3D,IAAA,CAE9C,GAAAm6F,GAAAlH,GAAA07C,eAAAL,EAAAtuI,GAAA4b,EAAAugD,MACAg+B,IAAAg6C,EAAAtwI,KAAAs2F,GAKA,GAAAv+E,EAAAyzB,aAAA,CAGA,GAAA+kG,GAAAnhD,GAAAs7C,oCAAA3yH,EAAAyzB,aAAA,GACA8kG,KAAA3zI,OAAA4zI,GAIAD,EAAAxwI,OAAA,IAAAiY,EAAA0yH,WAAA6F,GA7bA,GAAAv4H,GAAA,GAAAozB,IACAl4B,EAAA3P,SAAAqmI,EAAA12H,MAAA,EAAA02H,EAAA12H,MAAA,CAgcA,IA9bAk8H,EAAAl8H,GAEA88H,IACAE,EAAAh9H,GACAo9H,IAEAt4H,EAAAwrE,qBACAxrE,EAAAk4D,wBAubA3sE,SAAAqmI,EAAA7gI,WAAA,IAAA6gI,EAAA7gI,UAAAhJ,OAEA,OAAeiY,WAIf,IAAAjP,GAAA2mF,GAAA7kF,UAAAuhI,cAAAxC,EAAA7gI,UAAAknF,EAAAnlF,KAAAjC,YAEA,QAAemP,WAAAjP,gBAmBfiC,OAAA+J,OAAAi7E,GAAAnlF,WAEAqa,KAAA,SAAAzN,EAAAi0E,EAAAC,EAAAC,GAEA,KAAA9gF,KAAAmlF,cAEAnlF,KAAAmlF,YAAAx4E,EAAAg5H,UAAA,EAAAh5H,EAAAi5H,YAAA,QAIA,IAAAlmH,GAAA1f,KAEA05H,EAAA,GAAAp4C,IAAA5hE,EAAA6hE,QACAm4C,GAAAt/G,KAAAzN,EAAA,SAAA2O,GAEAoE,EAAA3W,MAAA/B,KAAA+B,MAAAuS,GAAAslE,IAEOC,EAAAC,IAIPujD,eAAA,SAAAxqH,GAEA7Z,KAAAmlF,YAAAtrE,GAIAmgH,eAAA,SAAAngH,GAEA7Z,KAAAjC,YAAA8b,GAIA9Q,MAAA,SAAA+1H,EAAAl+C,GAEA,GAAA7wB,GAAA/vD,KAAA6lI,gBAAA/G,EAAA/uE,YAEA3mD,EAAApJ,KAAA8lI,YAAAhH,EAAA11H,OAAA,WAEA3Q,SAAAmoF,KAAAttF,KAIAqW,EAAA3J,KAAA+lI,cAAAjH,EAAAn1H,SAAAP,GACAnL,EAAA+B,KAAAgmI,eAAAlH,EAAA7gI,UAAA0L,GAEArW,EAAA0M,KAAAimI,YAAAnH,EAAAxrI,OAAAy8D,EAAA9xD,EAcA,OAZA6gI,GAAAc,aAEAtsI,EAAAssI,WAAA5/H,KAAAwlI,gBAAA1G,EAAAc,cAIAnnI,SAAAqmI,EAAA11H,QAAA,IAAA01H,EAAA11H,OAAAnU,SAEAwD,SAAAmoF,KAAAttF,GAIAA,GAIAuyI,gBAAA,SAAA/G,GAEA,GAAA/uE,KAEA,IAAAt3D,SAAAqmI,EAKA,OAHAoH,GAAA,GAAAlhD,IACAmhD,EAAA,GAAAxhD,IAEArzF,EAAA,EAAAi7B,EAAAuyG,EAAA7pI,OAAwCs3B,EAAAj7B,EAAOA,IAAA,CAE/C,GAAA4b,GACAkL,EAAA0mH,EAAAxtI,EAEA,QAAA8mB,EAAAjT,MAEA,oBACA,0BAEA+H,EAAA,GAAAurH,IAAArgH,EAAAjT,MACAiT,EAAAlhB,MACAkhB,EAAAjhB,OACAihB,EAAAiC,cACAjC,EAAAnE,eAGA,MAEA,mBACA,wBACA,mBAEA/G,EAAA,GAAAurH,IAAArgH,EAAAjT,MACAiT,EAAAlhB,MACAkhB,EAAAjhB,OACAihB,EAAAjN,MACAiN,EAAAiC,cACAjC,EAAAnE,eACAmE,EAAAkqC,cAGA,MAEA,sBACA,2BAEAp1C,EAAA,GAAAurH,IAAArgH,EAAAjT,MACAiT,EAAAhE,OACAgE,EAAA/D,SACA+D,EAAA7B,WACA6B,EAAA5B,YAGA,MAEA,wBACA,6BAEAtJ,EAAA,GAAAurH,IAAArgH,EAAAjT,MACAiT,EAAAtE,UACAsE,EAAArE,aACAqE,EAAAjhB,OACAihB,EAAAkF,eACAlF,EAAAnE,eACAmE,EAAAlE,UACAkE,EAAA7B,WACA6B,EAAA5B,YAGA,MAEA,oBACA,yBAEAtJ,EAAA,GAAAurH,IAAArgH,EAAAjT,MACAiT,EAAAhE,OACAgE,EAAAjhB,OACAihB,EAAAkF,eACAlF,EAAAnE,eACAmE,EAAAlE,UACAkE,EAAA7B,WACA6B,EAAA5B,YAGA,MAEA,sBACA,2BAEAtJ,EAAA,GAAAurH,IAAArgH,EAAAjT,MACAiT,EAAAhE,OACAgE,EAAAiC,cACAjC,EAAAnE,eACAmE,EAAA/B,SACA+B,EAAA9B,UACA8B,EAAA7B,WACA6B,EAAA5B,YAGA,MAEA,4BACA,0BACA,yBACA,0BAEAtJ,EAAA,GAAAurH,IAAArgH,EAAAjT,MACAiT,EAAAhE,OACAgE,EAAAygE,OAGA,MAEA,oBACA,yBAEA3rE,EAAA,GAAAurH,IAAArgH,EAAAjT,MACAiT,EAAAqlE,YACArlE,EAAAslE,YACAtlE,EAAAulE,cACAvlE,EAAAwlE,YACAxlE,EAAA7B,WACA6B,EAAA5B,YAGA,MAEA,qBACA,0BAEAtJ,EAAA,GAAAurH,IAAArgH,EAAAjT,MACAiT,EAAAhE,OACAgE,EAAAiF,KACAjF,EAAAkF,eACAlF,EAAAmF,gBACAnF,EAAAoF,IAGA,MAEA,yBACA,8BAEAtQ,EAAA,GAAAurH,IAAArgH,EAAAjT,MACAiT,EAAAhE,OACAgE,EAAAiF,KACAjF,EAAAmF,gBACAnF,EAAAkF,eACAlF,EAAA/mB,EACA+mB,EAAA8iE,EAGA,MAEA,qBACA,0BAEAhuE,EAAA,GAAAurH,IAAArgH,EAAAjT,MACAiT,EAAA+4D,OACA/4D,EAAA/D,SACA+D,EAAA/B,SACA+B,EAAA9B,UAGA,MAEA,sBAEApJ,EAAAi5H,EAAAp9H,MAAAqP,EAEA,MAEA,gBAEAlL,EAAAg5H,EAAAn9H,MAAAqP,OAAApY,KAAAmlF,aAAAj4E,QAEA,MAEA,SAIA,SAIAA,EAAA47B,KAAA1wB,EAAA0wB,KAEArwC,SAAA2f,EAAA7d,OAAA2S,EAAA3S,KAAA6d,EAAA7d,MAEAw1D,EAAA33C,EAAA0wB,MAAA57B,EAMA,MAAA6iD,IAIAi2E,eAAA,SAAAlH,EAAAn1H,GAEA,GAAA1L,KAEA,IAAAxF,SAAAqmI,EAAA,CAEA,GAAApF,GAAA,GAAAh1C,GACAg1C,GAAAqH,YAAAp3H,EAEA,QAAArY,GAAA,EAAAi7B,EAAAuyG,EAAA7pI,OAAwCs3B,EAAAj7B,EAAOA,IAAA,CAE/C,GAAAmY,GAAAiwH,EAAA3wH,MAAA+1H,EAAAxtI,GACA2M,GAAAwL,EAAAq/B,MAAAr/B,GAMA,MAAAxL,IAIAunI,gBAAA,SAAA1G,GAIA,OAFAc,MAEAtuI,EAAA,EAAsBA,EAAAwtI,EAAA7pI,OAAiB3D,IAAA,CAEvC,GAAAm6F,GAAAlH,GAAAx7E,MAAA+1H,EAAAxtI,GAEAsuI,GAAAzqI,KAAAs2F,GAIA,MAAAm0C,IAIAkG,YAAA,SAAAhH,EAAAl+C,GAKA,QAAAwlD,GAAAz5H,GAIA,MAFA+S,GAAA6hE,QAAAJ,UAAAx0E,GAEA+sH,EAAAt/G,KAAAzN,EAAA,WAEA+S,EAAA6hE,QAAAH,QAAAz0E,IAEQlU,OAAA,WAERinB,EAAA6hE,QAAAF,UAAA10E,KAbA,GAAA+S,GAAA1f,KACAoJ,IAkBA,IAAA3Q,SAAAqmI,KAAA7pI,OAAA,GAEA,GAAAssF,GAAA,GAAAZ,IAAAC,GAEA84C,EAAA,GAAA93C,IAAAL,EACAm4C,GAAAM,eAAAh6H,KAAAjC,YAEA,QAAAzM,GAAA,EAAAi7B,EAAAuyG,EAAA7pI,OAAwCs3B,EAAAj7B,EAAOA,IAAA,CAE/C,GAAAiX,GAAAu2H,EAAAxtI,GACAokB,EAAA,4BAAA5T,KAAAyG,EAAAoE,KAAApE,EAAAoE,IAAA+S,EAAAylE,YAAA58E,EAAAoE,GAEAvD,GAAAb,EAAAugC,MAAAs9F,EAAA1wH,IAMA,MAAAtM,IAIA28H,cAAA,SAAAjH,EAAA11H,GAEA,QAAAi9H,GAAAxsH,EAAA1U,GAEA,yBAAA0U,EAIA1U,EAAA0U,GAIA,GAAAlQ,KAEA,IAAAlR,SAAAqmI,EAEA,OAAAxtI,GAAA,EAAAi7B,EAAAuyG,EAAA7pI,OAAwCs3B,EAAAj7B,EAAOA,IAAA,CAE/C,GAAA8mB,GAAA0mH,EAAAxtI,EAEAmH,UAAA2f,EAAA7P,MAMA9P,SAAA2Q,EAAAgP,EAAA7P,MAMA,IAAAM,GAAA,GAAAW,GAAAJ,EAAAgP,EAAA7P,OACAM,GAAAC,aAAA,EAEAD,EAAAigC,KAAA1wB,EAAA0wB,KAEArwC,SAAA2f,EAAA7d,OAAAsO,EAAAtO,KAAA6d,EAAA7d,MAEA9B,SAAA2f,EAAAlQ,UAAAW,EAAAX,QAAAm+H,EAAAjuH,EAAAlQ,QAAAitF,KAEA18F,SAAA2f,EAAA5H,QAAA3H,EAAA2H,OAAAyH,UAAAG,EAAA5H,QACA/X,SAAA2f,EAAA7M,QAAA1C,EAAA0C,OAAA0M,UAAAG,EAAA7M,QACA9S,SAAA2f,EAAAiD,OAEAxS,EAAAgE,MAAAw5H,EAAAjuH,EAAAiD,KAAA,GAAA+5E,IACAvsF,EAAAiE,MAAAu5H,EAAAjuH,EAAAiD,KAAA,GAAA+5E,KAIA38F,SAAA2f,EAAA6E,YAAApU,EAAAoU,UAAAopH,EAAAjuH,EAAA6E,UAAAo4E,KACA58F,SAAA2f,EAAAswB,YAAA7/B,EAAA6/B,UAAA29F,EAAAjuH,EAAAswB,UAAA2sD,KACA58F,SAAA2f,EAAAuwB,aAAA9/B,EAAA8/B,WAAAvwB,EAAAuwB,YAEAlwC,SAAA2f,EAAAoxB,QAAA3gC,EAAA2gC,MAAApxB,EAAAoxB,OAEA7/B,EAAAyO,EAAA0wB,MAAAjgC,EAMA,MAAAc,IAIAs8H,YAAA,WAEA,GAAA98G,GAAA,GAAA3a,EAEA,iBAAA4J,EAAA23C,EAAA9xD,GAIA,QAAAqoI,GAAA/rI,GAQA,MANA9B,UAAAs3D,EAAAx1D,GAMAw1D,EAAAx1D,GAIA,QAAAgsI,GAAAhsI,GAEA,MAAA9B,UAAA8B,EAAA9B,QAEAA,SAAAwF,EAAA1D,GAMA0D,EAAA1D,IAxBA,GAAAjH,EA4BA,QAAA8kB,EAAAjT,MAEA,YAEA7R,EAAA,GAAA+G,IAEA5B,SAAA2f,EAAAo8D,YAEA+f,OAAAiyC,UAAApuH,EAAAo8D,cAEAlhF,EAAAkhF,WAAA,GAAApmE,GAAAgK,EAAAo8D,aAMA/7E,SAAA2f,EAAAs9B,MAEA,QAAAt9B,EAAAs9B,IAAAvwC,KAEA7R,EAAAoiD,IAAA,GAAA4/B,IAAAl9D,EAAAs9B,IAAAvrC,MAAAiO,EAAAs9B,IAAAt6C,KAAAgd,EAAAs9B,IAAAr6C,KAEW,YAAA+c,EAAAs9B,IAAAvwC,OAEX7R,EAAAoiD,IAAA,GAAA2/B,IAAAj9D,EAAAs9B,IAAAvrC,MAAAiO,EAAAs9B,IAAAG,UAMA,MAEA,yBAEAviD,EAAA,GAAAoH,IAAA0d,EAAA8Q,IAAA9Q,EAAA9gB,OAAA8gB,EAAAhd,KAAAgd,EAAA/c,KAEA5C,SAAA2f,EAAAosC,QAAAlxD,EAAAkxD,MAAApsC,EAAAosC,OACA/rD,SAAA2f,EAAA0J,OAAAxuB,EAAAwuB,KAAA1J,EAAA0J,MACArpB,SAAA2f,EAAAssC,YAAApxD,EAAAoxD,UAAAtsC,EAAAssC,WACAjsD,SAAA2f,EAAAusC,aAAArxD,EAAAqxD,WAAAvsC,EAAAusC,YACAlsD,SAAA2f,EAAAqsC,OAAAnxD,EAAAmxD,KAAAvkD,OAAA+J,UAAuEmO,EAAAqsC,MAEvE,MAEA,0BAEAnxD,EAAA,GAAAuuB,IAAAzJ,EAAAf,KAAAe,EAAAd,MAAAc,EAAAZ,IAAAY,EAAAgR,OAAAhR,EAAAhd,KAAAgd,EAAA/c,IAEA,MAEA,oBAEA/H,EAAA,GAAAoK,IAAA0a,EAAAjO,MAAAiO,EAAAkB,UAEA,MAEA,wBAEAhmB,EAAA,GAAAwJ,IAAAsb,EAAAjO,MAAAiO,EAAAkB,UAEA,MAEA,kBAEAhmB,EAAA,GAAAm6B,IAAArV,EAAAjO,MAAAiO,EAAAkB,UAAAlB,EAAAnL,SAAAmL,EAAA2tC,MAEA,MAEA,iBAEAzyD,EAAA,GAAA6uF,IAAA/pE,EAAAjO,MAAAiO,EAAAkB,UAAAlB,EAAAnL,SAAAmL,EAAApI,MAAAoI,EAAAuzD,SAAAvzD,EAAA2tC,MAEA,MAEA,uBAEAzyD,EAAA,GAAAyuF,IAAA3pE,EAAAjO,MAAAiO,EAAA6tC,YAAA7tC,EAAAkB,UAEA,MAEA,YAEA,GAAApM,GAAAo5H,EAAAluH,EAAAlL,UACAzD,EAAA88H,EAAAnuH,EAAA3O,SAIAnW,GAFA4Z,EAAAugD,OAAAvgD,EAAAugD,MAAAx4D,OAAA,EAEA,GAAAohF,IAAAnpE,EAAAzD,GAIA,GAAArU,IAAA8X,EAAAzD,EAIA,MAEA,WAEAnW,EAAA,GAAAkiF,GAEA,MAEA,YAEAliF,EAAA,GAAAwnB,IAAAwrH,EAAAluH,EAAAlL,UAAAq5H,EAAAnuH,EAAA3O,UAAA2O,EAAAjf,KAEA,MAEA,oBAEA7F,EAAA,GAAAquC,IAAA2kG,EAAAluH,EAAAlL,UAAAq5H,EAAAnuH,EAAA3O,UAEA,MAEA,kBACA,aAEAnW,EAAA,GAAAyjF,IAAAuvD,EAAAluH,EAAAlL,UAAAq5H,EAAAnuH,EAAA3O,UAEA,MAEA,cAEAnW,EAAA,GAAAosC,IAAA6mG,EAAAnuH,EAAA3O,UAEA,MAEA,aAEAnW,EAAA,GAAA0jF,GAEA,MAEA,SAEA1jF,EAAA,GAAAmd,IAoCA,GAhCAnd,EAAAw1C,KAAA1wB,EAAA0wB,KAEArwC,SAAA2f,EAAA7d,OAAAjH,EAAAiH,KAAA6d,EAAA7d,MACA9B,SAAA2f,EAAA+Q,QAEAA,EAAAlR,UAAAG,EAAA+Q,QACAA,EAAAmd,UAAAhzC,EAAAwI,SAAAxI,EAAAktB,WAAAltB,EAAA8U,SAIA3P,SAAA2f,EAAAtc,UAAAxI,EAAAwI,SAAAmc,UAAAG,EAAAtc,UACArD,SAAA2f,EAAArc,UAAAzI,EAAAyI,SAAAkc,UAAAG,EAAArc,UACAtD,SAAA2f,EAAAoI,YAAAltB,EAAAktB,WAAAvI,UAAAG,EAAAoI,YACA/nB,SAAA2f,EAAAhQ,OAAA9U,EAAA8U,MAAA6P,UAAAG,EAAAhQ,QAIA3P,SAAA2f,EAAArb,aAAAzJ,EAAAyJ,WAAAqb,EAAArb,YACAtE,SAAA2f,EAAArK,gBAAAza,EAAAya,cAAAqK,EAAArK,eAEAqK,EAAA6kC,SAEAxkD,SAAA2f,EAAA6kC,OAAAwuB,OAAAn4E,EAAA2pD,OAAAwuB,KAAArzD,EAAA6kC,OAAAwuB,MACAhzE,SAAA2f,EAAA6kC,OAAA7oC,SAAA9gB,EAAA2pD,OAAA7oC,OAAAgE,EAAA6kC,OAAA7oC,QACA3b,SAAA2f,EAAA6kC,OAAAC,SAAA5pD,EAAA2pD,OAAAC,QAAAjlC,UAAAG,EAAA6kC,OAAAC,SACAzkD,SAAA2f,EAAA6kC,OAAAxoD,SAAAnB,EAAA2pD,OAAAxoD,OAAAuL,KAAAimI,YAAA7tH,EAAA6kC,OAAAxoD,UAIAgE,SAAA2f,EAAA9J,UAAAhb,EAAAgb,QAAA8J,EAAA9J,SACA7V,SAAA2f,EAAAE,WAAAhlB,EAAAglB,SAAAF,EAAAE,UAEA7f,SAAA2f,EAAAvkB,SAEA,OAAAosH,KAAA7nG,GAAAvkB,SAEAP,EAAAwH,IAAAkF,KAAAimI,YAAA7tH,EAAAvkB,SAAAosH,GAAAlwD,EAAA9xD,GAMA,YAAAma,EAAAjT,KAIA,OAFAswE,GAAAr9D,EAAAq9D,OAEAlpD,EAAA,EAAwBA,EAAAkpD,EAAAxgF,OAAmBs3B,IAAA,CAE3C,GAAA6+F,GAAA31C,EAAAlpD,GACA0zF,EAAA3sH,EAAA0sH,oBAAA,OAAAoL,EAAA93H,OAEAmF,UAAAwnH,GAEA3sH,EAAA+3H,SAAApL,EAAAmL,EAAAn+G,UAQA,MAAA3Z,SA6CA8xF,GAAArlF,WAEAwpB,YAAA67D,GAKAsK,SAAA,SAAAv6E,GAGA,aAOA6lE,WAAA,SAAAt5C,GAEA,GAAAvsB,GAAAnV,KAAAymI,eAAA/kG,EACA,OAAA1hC,MAAA0vF,SAAAv6E,IAMAuxH,UAAA,SAAAv0C,GAEAA,MAAA,EAIA,QAFAhhB,MAEA57C,EAAA,EAAsB48D,GAAA58D,EAAgBA,IAEtC47C,EAAAh8E,KAAA6K,KAAA0vF,SAAAn6D,EAAA48D,GAIA,OAAAhhB,IAMAymD,gBAAA,SAAAzlC,GAEAA,MAAA,EAIA,QAFAhhB,MAEA57C,EAAA,EAAsB48D,GAAA58D,EAAgBA,IAEtC47C,EAAAh8E,KAAA6K,KAAAg7E,WAAAzlD,EAAA48D,GAIA,OAAAhhB,IAMAye,UAAA,WAEA,GAAA+2C,GAAA3mI,KAAA4mI,YACA,OAAAD,KAAA1xI,OAAA,IAMA2xI,WAAA,SAAAz0C,GAIA,GAFAA,MAAAnyF,KAAA,qBAAAA,KAAA,0BAEAA,KAAA6mI,iBACA7mI,KAAA6mI,gBAAA5xI,SAAAk9F,EAAA,IACAnyF,KAAA8I,YAGA,MAAA9I,MAAA6mI,eAIA7mI,MAAA8I,aAAA,CAEA,IACA1Q,GACA/G,EAFA85B,KACA27G,EAAA9mI,KAAA0vF,SAAA,GACAq3C,EAAA,CAIA,KAFA57G,EAAAh2B,KAAA,GAEA9D,EAAA,EAAkB8gG,GAAA9gG,EAAgBA,IAElC+G,EAAA4H,KAAA0vF,SAAAr+F,EAAA8gG,GACA40C,GAAA3uI,EAAAoV,WAAAs5H,GACA37G,EAAAh2B,KAAA4xI,GACAD,EAAA1uI,CAMA,OAFA4H,MAAA6mI,gBAAA17G,EAEAA,GAIA67G,iBAAA,WAEAhnI,KAAA8I,aAAA,EACA9I,KAAA4mI,cAMAH,eAAA,SAAA/kG,EAAAz0B,GAEA,GAIAg6H,GAJAC,EAAAlnI,KAAA4mI,aAEAt1I,EAAA,EAAA0rD,EAAAkqF,EAAAjyI,MAMAgyI,GAFAh6H,EAEAA,EAIAy0B,EAAAwlG,EAAAlqF,EAAA,EAUA,KAFA,GAAAmqF,GAAAvwC,EAAA,EAAAC,EAAA75C,EAAA,EAEA65C,GAAAD,GAMA,GAJAtlG,EAAAuE,KAAA8S,MAAAiuF,GAAAC,EAAAD,GAAA,GAEAuwC,EAAAD,EAAA51I,GAAA21I,EAEA,EAAAE,EAEAvwC,EAAAtlG,EAAA,MAEQ,MAAA61I,EAAA,GAIA,CAERtwC,EAAAvlG,CACA,OALAulG,EAAAvlG,EAAA,EAiBA,GAJAA,EAAAulG,EAIAqwC,EAAA51I,KAAA21I,EAAA,CAEA,GAAA9xH,GAAA7jB,GAAA0rD,EAAA,EACA,OAAA7nC,GAMA,GAAAiyH,GAAAF,EAAA51I,GACA+1I,EAAAH,EAAA51I,EAAA,GAEAg2I,EAAAD,EAAAD,EAIAG,GAAAN,EAAAG,GAAAE,EAIAnyH,GAAA7jB,EAAAi2I,IAAAvqF,EAAA,EAEA,OAAA7nC,IASAqyH,WAAA,SAAAryH,GAEA,GAAAvf,GAAA,KACA+nH,EAAAxoG,EAAAvf,EACAo5F,EAAA75E,EAAAvf,CAIA,GAAA+nH,MAAA,GACA3uB,EAAA,IAAAA,EAAA,EAEA,IAAAy4C,GAAAznI,KAAA0vF,SAAAiuB,GACA+pB,EAAA1nI,KAAA0vF,SAAAV,GAEA08B,EAAAgc,EAAAvgH,QAAAryB,IAAA2yI,EACA,OAAA/b,GAAA32H,aAIAi4H,aAAA,SAAAtrF,GAEA,GAAAvsB,GAAAnV,KAAAymI,eAAA/kG,EACA,OAAA1hC,MAAAwnI,WAAAryH,KAcAiwE,GAAA/7D,OAAA,SAAAE,EAAAo+G,GAMA,MAJAp+G,GAAAxpB,UAAAG,OAAAmpB,OAAA+7D,GAAArlF,WACAwpB,EAAAxpB,UAAAwpB,cACAA,EAAAxpB,UAAA2vF,SAAAi4C,EAEAp+G,GAeA87D,GAAAtlF,UAAAG,OAAAmpB,OAAA+7D,GAAArlF,WACAslF,GAAAtlF,UAAAwpB,YAAA87D,GAEAA,GAAAtlF,UAAA6nI,aAAA,EAEAviD,GAAAtlF,UAAA2vF,SAAA,SAAAv6E,GAEA,OAAAA,EAEA,MAAAnV,MAAA6vB,GAAA1I,OAIA,IAAA+nC,GAAAlvD,KAAA6vB,GAAA1I,QAAAryB,IAAAkL,KAAAguB,GAGA,OAFAkhC,GAAA11C,eAAArE,GAAAra,IAAAkF,KAAAguB,IAEAkhC,GAMAm2B,GAAAtlF,UAAAi7E,WAAA,SAAAt5C,GAEA,MAAA1hC,MAAA0vF,SAAAhuD,IAIA2jD,GAAAtlF,UAAAynI,WAAA,SAAAryH,GAEA,GAAAklE,GAAAr6E,KAAA6vB,GAAA1I,QAAAryB,IAAAkL,KAAAguB,GAEA,OAAAqsD,GAAAtlF,aAsBAuwF,GAAAvlF,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAA+7D,GAAArlF,YAEAwpB,YAAA+7D,GAEAxqF,IAAA,SAAA+sI,GAEA7nI,KAAAulF,OAAApwF,KAAA0yI,IAIApzG,UAAA,WAGA,GAAAqzG,GAAA9nI,KAAAulF,OAAA,GAAAmK,SAAA,GACAq4C,EAAA/nI,KAAAulF,OAAAvlF,KAAAulF,OAAAtwF,OAAA,GAAAy6F,SAAA,EAEAo4C,GAAA3vE,OAAA4vE,IAEA/nI,KAAAulF,OAAApwF,KAAA,GAAAkwF,IAAA0iD,EAAAD,KAeAp4C,SAAA,SAAAv6E,GAQA,IANA,GAAAogB,GAAApgB,EAAAnV,KAAA4vF,YACAo4C,EAAAhoI,KAAAioI,kBACA32I,EAAA,EAIAA,EAAA02I,EAAA/yI,QAAA,CAEA,GAAA+yI,EAAA12I,IAAAikC,EAAA,CAEA,GAAAr9B,GAAA8vI,EAAA12I,GAAAikC,EACAsyG,EAAA7nI,KAAAulF,OAAAj0F,GAEAg2I,EAAAO,EAAAj4C,YACAluD,EAAA,IAAA4lG,EAAA,IAAApvI,EAAAovI,CAEA,OAAAO,GAAA7sD,WAAAt5C,GAIApwC,IAIA,aAUAs+F,UAAA,WAEA,GAAAs4C,GAAAloI,KAAAioI,iBACA,OAAAC,KAAAjzI,OAAA,IAKA+xI,iBAAA,WAEAhnI,KAAA8I,aAAA,EACA9I,KAAAmoI,aAAA,KACAnoI,KAAA4mI,cAOAqB,gBAAA,WAIA,GAAAjoI,KAAAmoI,cAAAnoI,KAAAmoI,aAAAlzI,SAAA+K,KAAAulF,OAAAtwF,OAEA,MAAA+K,MAAAmoI,YASA,QAFAxB,MAAAyB,EAAA,EAEA92I,EAAA,EAAAi7B,EAAAvsB,KAAAulF,OAAAtwF,OAA8Cs3B,EAAAj7B,EAAOA,IAErD82I,GAAApoI,KAAAulF,OAAAj0F,GAAAs+F,YACA+2C,EAAAxxI,KAAAizI,EAMA,OAFApoI,MAAAmoI,aAAAxB,EAEAA,GAIA/O,gBAAA,SAAAzlC,GAEAA,MAAA,GAIA,QAFAhhB,MAEA7/E,EAAA,EAAsB6gG,GAAA7gG,EAAgBA,IAEtC6/E,EAAAh8E,KAAA6K,KAAA0vF,SAAAp+F,EAAA6gG,GAUA,OANAnyF,MAAAwlF,WAEArU,EAAAh8E,KAAAg8E,EAAA,IAIAA,GAIAu1D,UAAA,SAAAv0C,GAEAA,KAAA,EAIA,QAFA20C,GAAA31D,KAEA7/E,EAAA,EAAAi0F,EAAAvlF,KAAAulF,OAA4Cj0F,EAAAi0F,EAAAtwF,OAAmB3D,IAU/D,OARAu2I,GAAAtiD,EAAAj0F,GACA0qB,EAAA6rH,KAAAQ,eAAA,EAAAl2C,EACA01C,KAAAD,YAAA,EACAC,KAAAS,cAAAn2C,EAAA01C,EAAA12D,OAAAl8E,OACAk9F,EAEAyhC,EAAAiU,EAAAnB,UAAA1qH,GAEAtY,EAAA,EAAuBA,EAAAkwH,EAAA3+H,OAAgByO,IAAA,CAEvC,GAAAwrD,GAAA0kE,EAAAlwH,EAEAojI,MAAA3uE,OAAAjJ,KAEAiiB,EAAAh8E,KAAA+5D,GACA43E,EAAA53E,GAYA,MANAlvD,MAAAwlF,WAAArU,EAAAl8E,OAAA,IAAAk8E,IAAAl8E,OAAA,GAAAkjE,OAAAgZ,EAAA,KAEAA,EAAAh8E,KAAAg8E,EAAA,IAIAA,GAUAo3D,qBAAA,SAAAp2C,GAEA,GAAAyhC,GAAA5zH,KAAA0mI,UAAAv0C,EACA,OAAAnyF,MAAAwoI,eAAA5U,IAMA6U,2BAAA,SAAAt2C,GAEA,GAAAyhC,GAAA5zH,KAAA43H,gBAAAzlC,EACA,OAAAnyF,MAAAwoI,eAAA5U,IAIA4U,eAAA,SAAAr3D,GAIA,OAFAjkE,GAAA,GAAAozB,IAEAhvC,EAAA,EAAAi7B,EAAA4kD,EAAAl8E,OAAyCs3B,EAAAj7B,EAAOA,IAAA,CAEhD,GAAA49D,GAAAiiB,EAAA7/E,EACA4b,GAAA2kB,SAAA18B,KAAA,GAAA6Z,GAAAkgD,EAAAv2D,EAAAu2D,EAAAt2D,EAAAs2D,EAAAr2D,GAAA,IAIA,MAAAqU,MA2BAu4E,GAAA1lF,UAAAG,OAAAmpB,OAAA+7D,GAAArlF,WACA0lF,GAAA1lF,UAAAwpB,YAAAk8D,GAEAA,GAAA1lF,UAAAsoI,gBAAA,EAEA5iD,GAAA1lF,UAAA2vF,SAAA,SAAAv6E,GAOA,IALA,GAAAuzH,GAAA,EAAA7yI,KAAA2e,GACAm0H,EAAA3oI,KAAA+lF,UAAA/lF,KAAA8lF,YACA8iD,EAAA/yI,KAAA6C,IAAAiwI,GAAAp0C,OAAAC,QAGA,EAAAm0C,MAAAD,CACA,MAAAC,EAAAD,GAAAC,GAAAD,CAEAC,GAAAp0C,OAAAC,UAIAm0C,EAFAC,EAEA,EAIAF,GAMA1oI,KAAAgmF,cAAA,GAAA4iD,IAEAD,IAAAD,EAEAC,GAAAD,EAIAC,GAAAD,EAMA,IAAA14H,GAAAhQ,KAAA8lF,YAAA3wE,EAAAwzH,EACAhwI,EAAAqH,KAAA0lF,GAAA1lF,KAAA4lF,QAAA/vF,KAAAqjB,IAAAlJ,GACApX,EAAAoH,KAAA2lF,GAAA3lF,KAAA6lF,QAAAhwF,KAAAmjB,IAAAhJ,EAEA,QAAAhQ,KAAAimF,UAAA,CAEA,GAAA/sE,GAAArjB,KAAAqjB,IAAAlZ,KAAAimF,WACAjtE,EAAAnjB,KAAAmjB,IAAAhZ,KAAAimF,WAEA0e,EAAAhsG,EAAAqH,KAAA0lF,GACAkf,EAAAhsG,EAAAoH,KAAA2lF,EAGAhtF,GAAAgsG,EAAAzrF,EAAA0rF,EAAA5rF,EAAAhZ,KAAA0lF,GACA9sF,EAAA+rG,EAAA3rF,EAAA4rF,EAAA1rF,EAAAlZ,KAAA2lF,GAIA,UAAA/4E,GAAAjU,EAAAC,IAQA9H,EAAA+3I,YAEAC,uBAAA,SAAA3zH,EAAAsjC,EAAAC,EAAAC,GAEA,YAAAxjC,IAAAujC,EAAAD,GAAA,EAAAtjC,GAAAwjC,EAAAD,IAMAqwF,mBAAA,SAAA5zH,EAAAsjC,EAAAC,EAAAC,EAAAC,GAEA,SAAAH,GAAA,EAAAtjC,IAAA,EAAAA,GACA,EAAAujC,GAAA,EAAAvjC,IAAA,EAAAA,GAAA,EAAAA,EAAAujC,GAAA,EAAAvjC,GACA,EAAAA,EAAAwjC,GAAA,EAAAxjC,GAAA,EAAAA,IAAAwjC,EACA,EAAAxjC,IAAAyjC,GAIAowF,cAAA,SAAA7zH,EAAAsjC,EAAAC,EAAAC,EAAAC,GAIA,GAAAqwF,GAAA,EAAA9zH,IAAA,EAAAA,EACA+zH,EAAA,EAAA/zH,IAAA,EAAAA,EAAA,EACAg0H,EAAA,GAAAh0H,IAAA,EAAAA,EACAi0H,EAAA,EAAAj0H,IAAA,EAAAA,CAEA,OAAA8zH,GAAAC,EAAAC,EAAAC,GAMAr6C,YAAA,SAAAt2C,EAAAC,EAAAC,EAAAC,EAAAzjC,GAEA,GAAAigB,GAAA,IAAAujB,EAAAF,GACAzqB,EAAA,IAAA4qB,EAAAF,GACAs2C,EAAA75E,IACA85E,EAAA95E,EAAA65E,CACA,UAAAt2C,EAAA,EAAAC,EAAAvjB,EAAApH,GAAAihE,GAAA,GAAAv2C,EAAA,EAAAC,EAAA,EAAAvjB,EAAApH,GAAAghE,EAAA55D,EAAAjgB,EAAAujC,IAgBAwtC,GAAAnmF,UAAAG,OAAAmpB,OAAA+7D,GAAArlF,WACAmmF,GAAAnmF,UAAAwpB,YAAA28D,GAEAA,GAAAnmF,UAAAuoI,eAAA,EAEApiD,GAAAnmF,UAAA2vF,SAAA,SAAAv6E,GAEA,GAAAg8D,GAAAnxE,KAAAmxE,OACAjiB,GAAAiiB,EAAAl8E,OAAA,GAAAkgB,EAEA+5E,EAAAr5F,KAAA8S,MAAAumD,GACAi+B,EAAAj+B,EAAAggC,EAEAm6C,EAAAl4D,EAAA,IAAA+d,MAAA,GACAo6C,EAAAn4D,EAAA+d,GACAq6C,EAAAp4D,EAAA+d,EAAA/d,EAAAl8E,OAAA,EAAAk8E,EAAAl8E,OAAA,EAAAi6F,EAAA,GACAs6C,EAAAr4D,EAAA+d,EAAA/d,EAAAl8E,OAAA,EAAAk8E,EAAAl8E,OAAA,EAAAi6F,EAAA,GAEAH,EAAAj+F,EAAA+3I,WAAA95C,WAEA,WAAAniF,GACAmiF,EAAAs6C,EAAA1wI,EAAA2wI,EAAA3wI,EAAA4wI,EAAA5wI,EAAA6wI,EAAA7wI,EAAAw0F,GACA4B,EAAAs6C,EAAAzwI,EAAA0wI,EAAA1wI,EAAA2wI,EAAA3wI,EAAA4wI,EAAA5wI,EAAAu0F,KAkBAhH,GAAApmF,UAAAG,OAAAmpB,OAAA+7D,GAAArlF,WACAomF,GAAApmF,UAAAwpB,YAAA48D,GAEAA,GAAApmF,UAAA2vF,SAAA,SAAAv6E,GAEA,GAAA6+G,GAAAljI,EAAAm8H,WAAA+G,EAEA,WAAApnH,GACAonH,EAAA7+G,EAAAnV,KAAAo1B,GAAAz8B,EAAAqH,KAAAguB,GAAAr1B,EAAAqH,KAAA6vB,GAAAl3B,EAAAqH,KAAAuxB,GAAA54B,GACAq7H,EAAA7+G,EAAAnV,KAAAo1B,GAAAx8B,EAAAoH,KAAAguB,GAAAp1B,EAAAoH,KAAA6vB,GAAAj3B,EAAAoH,KAAAuxB,GAAA34B,KAKAutF,GAAApmF,UAAAynI,WAAA,SAAAryH,GAEA,GAAA4zH,GAAAj4I,EAAA+3I,WAAAE,kBAEA,WAAAn8H,GACAm8H,EAAA5zH,EAAAnV,KAAAo1B,GAAAz8B,EAAAqH,KAAAguB,GAAAr1B,EAAAqH,KAAA6vB,GAAAl3B,EAAAqH,KAAAuxB,GAAA54B,GACAowI,EAAA5zH,EAAAnV,KAAAo1B,GAAAx8B,EAAAoH,KAAAguB,GAAAp1B,EAAAoH,KAAA6vB,GAAAj3B,EAAAoH,KAAAuxB,GAAA34B,IACA7D,aAiBAqxF,GAAArmF,UAAAG,OAAAmpB,OAAA+7D,GAAArlF,WACAqmF,GAAArmF,UAAAwpB,YAAA68D,GAGAA,GAAArmF,UAAA2vF,SAAA,SAAAv6E,GAEA,GAAAohF,GAAAzlG,EAAAm8H,WAAA12B,EAEA,WAAA3pF,GACA2pF,EAAAphF,EAAAnV,KAAAo1B,GAAAz8B,EAAAqH,KAAAguB,GAAAr1B,EAAAqH,KAAA6vB,GAAAl3B,GACA49F,EAAAphF,EAAAnV,KAAAo1B,GAAAx8B,EAAAoH,KAAAguB,GAAAp1B,EAAAoH,KAAA6vB,GAAAj3B,KAMAwtF,GAAArmF,UAAAynI,WAAA,SAAAryH,GAEA,GAAA2zH,GAAAh4I,EAAA+3I,WAAAC,sBAEA,WAAAl8H,GACAk8H,EAAA3zH,EAAAnV,KAAAo1B,GAAAz8B,EAAAqH,KAAAguB,GAAAr1B,EAAAqH,KAAA6vB,GAAAl3B,GACAmwI,EAAA3zH,EAAAnV,KAAAo1B,GAAAx8B,EAAAoH,KAAAguB,GAAAp1B,EAAAoH,KAAA6vB,GAAAj3B,IACA7D,YAIA,IAAA00I,IAAAvpI,OAAA+J,OAAA/J,OAAAmpB,OAAAi8D,GAAAvlF,YAEA0mF,WAAA,SAAA87B,GAEAviH,KAAAxF,OAAA+nH,EAAA,GAAA5pH,EAAA4pH,EAAA,GAAA3pH,EAEA,QAAAtH,GAAA,EAAAi7B,EAAAg2F,EAAAttH,OAA0Cs3B,EAAAj7B,EAAOA,IAEjD0O,KAAAgwB,OAAAuyF,EAAAjxH,GAAAqH,EAAA4pH,EAAAjxH,GAAAsH,IAMA4B,OAAA,SAAA7B,EAAAC,GAEAoH,KAAAwmF,aAAA5xF,IAAA+D,EAAAC,IAIAo3B,OAAA,SAAAr3B,EAAAC,GAEA,GAAAivI,GAAA,GAAAxiD,IAAArlF,KAAAwmF,aAAAr/D,QAAA,GAAAva,GAAAjU,EAAAC,GACAoH,MAAAulF,OAAApwF,KAAA0yI,GAEA7nI,KAAAwmF,aAAA5xF,IAAA+D,EAAAC,IAIA8wI,iBAAA,SAAAC,EAAAC,EAAAlkD,EAAAC,GAEA,GAAAkiD,GAAA,GAAAzhD,IACApmF,KAAAwmF,aAAAr/D,QACA,GAAAva,GAAA+8H,EAAAC,GACA,GAAAh9H,GAAA84E,EAAAC,GAGA3lF,MAAAulF,OAAApwF,KAAA0yI,GAEA7nI,KAAAwmF,aAAA5xF,IAAA8wF,EAAAC,IAIAkkD,cAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAvkD,EAAAC,GAEA,GAAAkiD,GAAA,GAAA1hD,IACAnmF,KAAAwmF,aAAAr/D,QACA,GAAAva,GAAAk9H,EAAAC,GACA,GAAAn9H,GAAAo9H,EAAAC,GACA,GAAAr9H,GAAA84E,EAAAC,GAGA3lF,MAAAulF,OAAApwF,KAAA0yI,GAEA7nI,KAAAwmF,aAAA5xF,IAAA8wF,EAAAC,IAIAukD,WAAA,SAAAtW,GAEA,GAAAuW,IAAAnqI,KAAAwmF,aAAAr/D,SAAAr1B,OAAA8hI,GAEAiU,EAAA,GAAA3hD,IAAAikD,EACAnqI,MAAAulF,OAAApwF,KAAA0yI,GAEA7nI,KAAAwmF,aAAApqF,KAAAw3H,IAAA3+H,OAAA,KAIAuoB,IAAA,SAAAkoE,EAAAC,EAAAmO,EAAAhO,EAAAC,EAAAC,GAEA,GAAA7xD,GAAAn0B,KAAAwmF,aAAA7tF,EACAy7B,EAAAp0B,KAAAwmF,aAAA5tF,CAEAoH,MAAAoqI,OAAA1kD,EAAAvxD,EAAAwxD,EAAAvxD,EAAA0/D,EACAhO,EAAAC,EAAAC,IAIAokD,OAAA,SAAA1kD,EAAAC,EAAAmO,EAAAhO,EAAAC,EAAAC,GAEAhmF,KAAAqqI,WAAA3kD,EAAAC,EAAAmO,IAAAhO,EAAAC,EAAAC,IAIAskD,QAAA,SAAA5kD,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAA9xD,GAAAn0B,KAAAwmF,aAAA7tF,EACAy7B,EAAAp0B,KAAAwmF,aAAA5tF,CAEAoH,MAAAqqI,WAAA3kD,EAAAvxD,EAAAwxD,EAAAvxD,EAAAwxD,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,IAIAokD,WAAA,SAAA3kD,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAA4hD,GAAA,GAAApiD,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAEA,IAAAjmF,KAAAulF,OAAAtwF,OAAA,GAGA,GAAAs1I,GAAA1C,EAAAn4C,SAAA,EAEA66C,GAAApyE,OAAAn4D,KAAAwmF,eAEAxmF,KAAAgwB,OAAAu6G,EAAA5xI,EAAA4xI,EAAA3xI,GAMAoH,KAAAulF,OAAApwF,KAAA0yI,EAEA,IAAA2C,GAAA3C,EAAAn4C,SAAA,EACA1vF,MAAAwmF,aAAApqF,KAAAouI,KAyBAnkD,IAAAtmF,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAAogH,KAEAlgH,YAAA88D,GAEAokD,eAAA,SAAAt4C,GAIA,OAFAu4C,MAEAp5I,EAAA,EAAAi7B,EAAAvsB,KAAAumF,MAAAtxF,OAA6Cs3B,EAAAj7B,EAAOA,IAEpDo5I,EAAAp5I,GAAA0O,KAAAumF,MAAAj1F,GAAAo1I,UAAAv0C,EAIA,OAAAu4C,IAMAC,iBAAA,SAAAx4C,GAEA,OAEAm/B,MAAAtxH,KAAA0mI,UAAAv0C,GACA5L,MAAAvmF,KAAAyqI,eAAAt4C,KAMA2lC,cAAA,SAAA3lC,GAEA,MAAAnyF,MAAA2qI,iBAAAx4C,MAyBA7L,GAAAvmF,UAAA0pI,GACAA,GAAAlgH,YAAA+8D,GASAI,GAAA3mF,WACAvF,OAAA,SAAA7B,EAAAC,GACAoH,KAAA4mF,YAAA,GAAAN,IACAtmF,KAAA2mF,SAAAxxF,KAAA6K,KAAA4mF,aACA5mF,KAAA4mF,YAAApsF,OAAA7B,EAAAC,IAEAo3B,OAAA,SAAAr3B,EAAAC,GACAoH,KAAA4mF,YAAA52D,OAAAr3B,EAAAC,IAEA8wI,iBAAA,SAAAC,EAAAC,EAAAlkD,EAAAC,GACA3lF,KAAA4mF,YAAA8iD,iBAAAC,EAAAC,EAAAlkD,EAAAC,IAEAkkD,cAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAvkD,EAAAC,GACA3lF,KAAA4mF,YAAAijD,cAAAC,EAAAC,EAAAC,EAAAC,EAAAvkD,EAAAC,IAEAukD,WAAA,SAAAtW,GACA5zH,KAAA4mF,YAAAsjD,WAAAtW,IAGAgX,SAAA,SAAAC,EAAAC,GAEA,QAAAC,GAAAC,GAIA,OAFAxuD,MAEAlrF,EAAA,EAAAi7B,EAAAy+G,EAAA/1I,OAA8Cs3B,EAAAj7B,EAAOA,IAAA,CAErD,GAAA25I,GAAAD,EAAA15I,GAEA45I,EAAA,GAAA7kD,GACA6kD,GAAA3lD,OAAA0lD,EAAA1lD,OAEA/I,EAAArnF,KAAA+1I,GAIA,MAAA1uD,GAIA,QAAA2uD,GAAA1W,EAAA2W,GASA,OAPAC,GAAAD,EAAAn2I,OAMAq2I,GAAA,EACAj6I,EAAAg6I,EAAA,EAAAnwD,EAAA,EAAwCmwD,EAAAnwD,EAAa7pF,EAAA6pF,IAAA,CAErD,GAAAqwD,GAAAH,EAAA/5I,GACAm6I,EAAAJ,EAAAlwD,GAEAuwD,EAAAD,EAAA7yI,EAAA4yI,EAAA5yI,EACA+yI,EAAAF,EAAA5yI,EAAA2yI,EAAA3yI,CAEA,IAAA/C,KAAA6C,IAAAgzI,GAAAn3C,OAAAC,QAAA,CASA,GANA,EAAAk3C,IAEAH,EAAAH,EAAAlwD,GAAsCuwD,KACtCD,EAAAJ,EAAA/5I,GAAsCq6I,MAGtCjX,EAAA77H,EAAA2yI,EAAA3yI,GAAA67H,EAAA77H,EAAA4yI,EAAA5yI,EAAA,QAEA,IAAA67H,EAAA77H,IAAA2yI,EAAA3yI,GAEA,GAAA67H,EAAA97H,IAAA4yI,EAAA5yI,EAAA,aAGU,CAEV,GAAAgzI,GAAAD,GAAAjX,EAAA97H,EAAA4yI,EAAA5yI,GAAA8yI,GAAAhX,EAAA77H,EAAA2yI,EAAA3yI,EACA,QAAA+yI,EAAA,QACA,MAAAA,EAAA,QACAL,WAIS,CAGT,GAAA7W,EAAA77H,IAAA2yI,EAAA3yI,EAAA,QAEA,IAAA4yI,EAAA7yI,GAAA87H,EAAA97H,GAAA87H,EAAA97H,GAAA4yI,EAAA5yI,GACA4yI,EAAA5yI,GAAA87H,EAAA97H,GAAA87H,EAAA97H,GAAA6yI,EAAA7yI,EAAA,UAOA,MAAA2yI,GAIA,GAAA3X,GAAA7iI,EAAAm8H,WAAA0G,YAEAhtC,EAAA3mF,KAAA2mF,QACA,QAAAA,EAAA1xF,OAAA,QAEA,IAAA61I,KAAA,QAAAC,GAAApkD,EAGA,IAAAilD,GAAAX,EAAAC,EAAA1uD,IAEA,QAAAmK,EAAA1xF,OAMA,MAJAg2I,GAAAtkD,EAAA,GACAukD,EAAA,GAAA7kD,IACA6kD,EAAA3lD,OAAA0lD,EAAA1lD,OACA/I,EAAArnF,KAAA+1I,GACA1uD,CAIA,IAAAqvD,IAAAlY,EAAAhtC,EAAA,GAAA+/C,YACAmF,GAAAhB,GAAAgB,GAIA,IAIAC,GAJAC,KACAC,KACAC,KACAC,EAAA,CAGAF,GAAAE,GAAAzzI,OACAwzI,EAAAC,KAEA,QAAA56I,GAAA,EAAAi7B,EAAAo6D,EAAA1xF,OAA2Cs3B,EAAAj7B,EAAOA,IAElD25I,EAAAtkD,EAAAr1F,GACAw6I,EAAAb,EAAAvE,YACAkF,EAAAjY,EAAAmY,GACAF,EAAAf,GAAAe,IAEAA,IAEAC,GAAAG,EAAAE,QAEAF,EAAAE,IAAgC/rD,EAAA,GAAAkG,IAAAh1F,EAAAy6I,GAChCE,EAAAE,GAAA/rD,EAAAoF,OAAA0lD,EAAA1lD,OAEAsmD,GAAAK,IACAD,EAAAC,OAMAD,EAAAC,GAAA/2I,MAAwC2tC,EAAAmoG,EAAA55I,EAAAy6I,EAAA,IASxC,KAAAE,EAAA,SAAAjB,GAAApkD,EAGA,IAAAqlD,EAAA/2I,OAAA,GAKA,OAHAk3I,IAAA,EACAC,KAEAna,EAAA,EAAAoa,EAAAL,EAAA/2I,OAAmDo3I,EAAApa,EAAaA,IAEhE8Z,EAAA9Z,KAIA,QAAAA,GAAA,EAAAoa,EAAAL,EAAA/2I,OAAmDo3I,EAAApa,EAAaA,IAIhE,OAFAqa,GAAAL,EAAAha,GAEAK,EAAA,EAA2BA,EAAAga,EAAAr3I,OAAmBq9H,IAAA,CAK9C,OAHAia,GAAAD,EAAAha,GACAka,GAAA,EAEAC,EAAA,EAA6BA,EAAAT,EAAA/2I,OAA0Bw3I,IAEvDtB,EAAAoB,EAAAl7I,EAAA26I,EAAAS,GAAAp7I,KAEA4gI,IAAAwa,GAAAL,EAAAj3I,MAAiDu3I,MAAAza,EAAA0a,IAAAF,EAAA/a,KAAAY,IACjDka,GAEAA,GAAA,EACAT,EAAAU,GAAAt3I,KAAAo3I,IAIAJ,GAAA,EAOAK,IAEAT,EAAA9Z,GAAA98H,KAAAo3I,GAQAH,EAAAn3I,OAAA,IAGAk3I,IAAAF,EAAAF,IAQA,OAFAa,GAEAt7I,EAAA,EAAA0rD,EAAAgvF,EAAA/2I,OAA6C+nD,EAAA1rD,EAAQA,IAAA,CAErD45I,EAAAc,EAAA16I,GAAA6uF,EACA3D,EAAArnF,KAAA+1I,GACA0B,EAAAX,EAAA36I,EAEA,QAAAoS,GAAA,EAAAwwC,EAAA04F,EAAA33I,OAA6Ci/C,EAAAxwC,EAAQA,IAErDwnI,EAAA3kD,MAAApxF,KAAAy3I,EAAAlpI,GAAAo/B,GAQA,MAAA05C,KAgBAt8E,OAAA+J,OAAA48E,GAAA9mF,WAEA48E,QAAA,EAEAC,eAAA,SAAAthE,EAAA7G,EAAA09E,GAEA,QAAA06C,GAAAvxH,GAQA,OANA06E,GAAA75E,OAAAb,GAAApZ,MAAA,IACAkG,EAAAqM,EAAA2D,EAAA4D,WACAxL,EAAA,EAEAs8H,KAEAx7I,EAAA,EAAuBA,EAAA0kG,EAAA/gG,OAAkB3D,IAAA,CAEzC,GAAAy7I,GAAAC,EAAAh3C,EAAA1kG,GAAA8W,EAAAoI,EACAA,IAAAu8H,EAAAv8H,OAEAs8H,EAAA33I,KAAA43I,EAAAr3H,MAIA,MAAAo3H,GAIA,QAAAE,GAAA57I,EAAAgX,EAAAoI,GAEA,GAAAy8H,GAAA70H,EAAA80H,OAAA97I,IAAAgnB,EAAA80H,OAAA,IAEA,IAAAD,EAAA,CAEA,GAGAt0I,GAAAC,EAAAi1H,EAAAC,EAAAqf,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAHA/3H,EAAA,GAAAgxE,IAEAktC,KAAAr9B,EAAAzlG,EAAAm8H,WAAA12B,GAAAy9B,EAAAljI,EAAAm8H,WAAA+G,EAGA,IAAAiZ,EAAAptG,EAIA,OAFA6tG,GAAAT,EAAAU,iBAAAV,EAAAU,eAAAV,EAAAptG,EAAA39B,MAAA,MAEA5Q,EAAA,EAAAi7B,EAAAmhH,EAAAz4I,OAA4Cs3B,EAAAj7B,GAAO,CAEnD,GAAAs8I,GAAAF,EAAAp8I,IAEA,QAAAs8I,GAEA,QAEAj1I,EAAA+0I,EAAAp8I,KAAA8W,EAAAoI,EACA5X,EAAA80I,EAAAp8I,KAAA8W,EAEAsN,EAAAlb,OAAA7B,EAAAC,EAEA,MAEA,SAEAD,EAAA+0I,EAAAp8I,KAAA8W,EAAAoI,EACA5X,EAAA80I,EAAAp8I,KAAA8W,EAEAsN,EAAAsa,OAAAr3B,EAAAC,EAEA,MAEA,SAWA,GATAi1H,EAAA6f,EAAAp8I,KAAA8W,EAAAoI,EACAs9G,EAAA4f,EAAAp8I,KAAA8W,EACAilI,EAAAK,EAAAp8I,KAAA8W,EAAAoI,EACA88H,EAAAI,EAAAp8I,KAAA8W,EAEAsN,EAAAg0H,iBAAA2D,EAAAC,EAAAzf,EAAAC,GAEA2f,EAAA7Z,IAAA3+H,OAAA,GAEA,CAEAk4I,EAAAM,EAAA90I,EACAy0I,EAAAK,EAAA70I,CAEA,QAAA8mF,GAAA,EAA6ByS,GAAAzS,EAAiBA,IAAA,CAE9C,GAAAvqE,GAAAuqE,EAAAyS,CACAoE,GAAAphF,EAAAg4H,EAAAE,EAAAxf,GACAt3B,EAAAphF,EAAAi4H,EAAAE,EAAAxf,IAMA,KAEA,SAaA,GAXAD,EAAA6f,EAAAp8I,KAAA8W,EAAAoI,EACAs9G,EAAA4f,EAAAp8I,KAAA8W,EACAilI,EAAAK,EAAAp8I,KAAA8W,EAAAoI,EACA88H,EAAAI,EAAAp8I,KAAA8W,EACAmlI,EAAAG,EAAAp8I,KAAA8W,EAAAoI,EACAg9H,EAAAE,EAAAp8I,KAAA8W,EAEAsN,EAAAm0H,cAAAwD,EAAAC,EAAAC,EAAAC,EAAA3f,EAAAC,GAEA2f,EAAA7Z,IAAA3+H,OAAA,GAEA,CAEAk4I,EAAAM,EAAA90I,EACAy0I,EAAAK,EAAA70I,CAEA,QAAA8mF,GAAA,EAA6ByS,GAAAzS,EAAiBA,IAAA,CAE9C,GAAAvqE,GAAAuqE,EAAAyS,CACA6hC,GAAA7+G,EAAAg4H,EAAAE,EAAAE,EAAA1f,GACAmG,EAAA7+G,EAAAi4H,EAAAE,EAAAE,EAAA1f,MAcA,OAAet9G,OAAAy8H,EAAAY,GAAAzlI,EAAAsN,SAMfjd,SAAAgc,MAAA,KACAhc,SAAA05F,MAAA,EAOA,QALA/5E,GAAApY,KAAAoY,KAEA00H,EAAAD,EAAAvxH,GACAkhE,KAEAnrF,EAAA,EAAAk+D,EAAAu9E,EAAA73I,OAAyCs6D,EAAAl+D,EAAQA,IAEjDyoB,MAAA/Z,UAAA5K,KAAAtD,MAAA2qF,EAAAswD,EAAAz7I,GAAAu5I,WAIA,OAAApuD,MAgBAt8E,OAAA+J,OAAA68E,GAAA/mF,WAEAqa,KAAA,SAAAzN,EAAAi0E,EAAAC,EAAAC,GAEA,GAAAphE,GAAA1f,KAEA05H,EAAA,GAAAp4C,IAAAthF,KAAAuhF,QACAm4C,GAAAt/G,KAAAzN,EAAA,SAAA2O,GAEA,GAAAwjH,EAEA,KAEAA,EAAA93H,KAAA+B,MAAAuS,GAEQ,MAAAjL,GAGRyuH,EAAA93H,KAAA+B,MAAAuS,EAAAqqH,UAAA,GAAArqH,EAAArmB,OAAA,IAIA,GAAAinB,GAAAwD,EAAA3W,MAAA+1H,EAEAl+C,MAAA1kE,IAEO2kE,EAAAC,IAIP/3E,MAAA,SAAA+1H,GAEA,UAAAj4C,IAAAi4C,KAMA,IAAAjoH,GAwBA3W,QAAA+J,OAAAi9E,GAAAnnF,WAEAqa,KAAA,SAAAzN,EAAAi0E,EAAAC,EAAAC,GAEA,GAAA44C,GAAA,GAAAp4C,IAAAthF,KAAAuhF,QACAm4C,GAAAF,gBAAA,eACAE,EAAAt/G,KAAAzN,EAAA,SAAA6jD,GAEA,GAAA35C,GAAAkwE,IAEAlwE,GAAAi3H,gBAAAt9E,EAAA,SAAAu9E,GAEAntD,EAAAmtD,MAIOltD,EAAAC,MA4BP5gF,OAAA+J,OAAAk9E,GAAApnF,WAEA/J,OAAA,WAEA,GAAAg4I,GAAAxpF,EAAAt7B,EAAA5xB,EAAA8D,EAAAC,EAAAymB,EAEAmsH,EAAA,GAAAz/H,GACA0/H,EAAA,GAAA1/H,EAEA,iBAAA/Z,GAEA,GAAAqU,GAAAklI,IAAAhuI,MAAAwkD,IAAA/vD,EAAA+vD,OAAAt7B,IAAAz0B,EAAAy0B,KACA5xB,IAAA7C,EAAA6C,OAAA0I,KAAA1I,QAAA8D,IAAA3G,EAAA2G,MACAC,IAAA5G,EAAA4G,KAAAymB,IAAArtB,EAAAqtB,IAEA,IAAAhZ,EAAA,CAEAklI,EAAAhuI,KACAwkD,EAAA/vD,EAAA+vD,MACAt7B,EAAAz0B,EAAAy0B,IACA5xB,EAAA7C,EAAA6C,OAAA0I,KAAA1I,OACA8D,EAAA3G,EAAA2G,KACAC,EAAA5G,EAAA4G,IACAymB,EAAArtB,EAAAqtB,IAKA,IAIAujF,GAAAC,EAJA12F,EAAAna,EAAAma,iBAAAuY,QACAigE,EAAApnF,KAAAonF,OAAA,EACA+mD,EAAA/mD,EAAAhsF,EAAAopD,EACA2gD,EAAA/pG,EAAAvF,KAAAozB,IAAAn4B,EAAA+E,KAAAgpF,QAAA31D,EAAA,IAAApH,CAKAosH,GAAA9jH,SAAA,KAAAg9D,EACA6mD,EAAA7jH,SAAA,IAAAg9D,EAIAie,GAAAF,EAAA7tG,EAAA62I,EACA7oC,EAAAH,EAAA7tG,EAAA62I,EAEAv/H,EAAAwb,SAAA,KAAAhvB,GAAAkqG,EAAAD,GACAz2F,EAAAwb,SAAA,IAAAk7E,EAAAD,IAAAC,EAAAD,GAEArlG,KAAAqnF,QAAAz4E,iBAAAxS,KAAAwS,GAIAy2F,GAAAF,EAAA7tG,EAAA62I,EACA7oC,EAAAH,EAAA7tG,EAAA62I,EAEAv/H,EAAAwb,SAAA,KAAAhvB,GAAAkqG,EAAAD,GACAz2F,EAAAwb,SAAA,IAAAk7E,EAAAD,IAAAC,EAAAD,GAEArlG,KAAAsnF,QAAA14E,iBAAAxS,KAAAwS,GAIA5O,KAAAqnF,QAAA3yF,YAAA0H,KAAA3H,EAAAC,aAAAmsB,SAAAqtH,GACAluI,KAAAsnF,QAAA5yF,YAAA0H,KAAA3H,EAAAC,aAAAmsB,SAAAotH,SA4FA1mD,GAAAxnF,UAAAG,OAAAmpB,OAAA5Y,GAAA1Q,WACAwnF,GAAAxnF,UAAAwpB,YAAAg+D,GAiBAxsF,GAAAgF,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAA5Y,GAAA1Q,YAEAwpB,YAAAxuB,GAEAutF,SAAA,WAEA,MAAAtoF,MAAAgoF,MAIAomD,aAAA,WAEA,OAAApuI,KAAA8H,SAEA9H,KAAAgoF,KAAAhnE,WAAAhhB,KAAA8H,QACA9H,KAAA8H,OAAAkZ,WAAAhhB,KAAA6W,QAAAqxE,aACAloF,KAAAgoF,KAAAjnE,QAAA/gB,KAAA6W,QAAAqxE,aACAloF,KAAA8H,OAAA,OAMAumI,UAAA,WAEA,MAAAruI,MAAA8H,QAIAwmI,UAAA,SAAAz0H,GAEA,OAAA7Z,KAAA8H,QAEA9H,KAAAgoF,KAAAhnE,WAAAhhB,KAAA8H,QACA9H,KAAA8H,OAAAkZ,WAAAhhB,KAAA6W,QAAAqxE,cAIAloF,KAAAgoF,KAAAhnE,WAAAhhB,KAAA6W,QAAAqxE,aAIAloF,KAAA8H,OAAA+R,EACA7Z,KAAAgoF,KAAAjnE,QAAA/gB,KAAA8H,QACA9H,KAAA8H,OAAAiZ,QAAA/gB,KAAA6W,QAAAqxE,cAIAqmD,gBAAA,WAEA,MAAAvuI,MAAAgoF,UAAAnuE,OAIA20H,gBAAA,SAAA30H,GAEA7Z,KAAAgoF,UAAAnuE,SAIA1jB,kBAAA,WAEA,GAAA2F,GAAA,GAAAkT,GACAwR,EAAA,GAAAjQ,GACAnI,EAAA,GAAA4G,GAEArT,EAAA,GAAAqT,EAEA,iBAAAwxG,GAEA/vG,GAAA1Q,UAAA5J,kBAAAjF,KAAA8O,KAAAwgH,EAEA,IAAAtmG,GAAAla,KAAA6W,QAAAqD,SACA0N,EAAA5nB,KAAA4nB,EAEA5nB,MAAAtL,YAAA4xC,UAAAxqC,EAAA0kB,EAAApY,GAEAzM,EAAA/G,IAAA,QAAAqzB,gBAAAzH,GAEAtG,EAAA2xD,YAAA/vE,EAAAnD,EAAAmD,EAAAlD,EAAAkD,EAAAjD,GACAqhB,EAAAu0H,eAAA9yI,EAAAhD,EAAAgD,EAAA/C,EAAA+C,EAAA9C,EAAA+uB,EAAAjvB,EAAAivB,EAAAhvB,EAAAgvB,EAAA/uB,SAiCAshB,GAAApa,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAA5Y,GAAA1Q,YAEAwpB,YAAApP,GAEAovE,UAAA,WAEA,MAAAvpF,MAAAgoF,MAIA0mD,cAAA,SAAAC,GAOA,MALA3uI,MAAA2oF,oBAAA,EACA3oF,KAAA4oF,WAAA,YACA5oF,KAAA6S,OAAA87H,EACA3uI,KAAA+gB,UAEA/gB,MAIA4uI,UAAA,SAAAb,GAOA,MALA/tI,MAAA6S,OAAA29C,OAAAu9E,EACA/tI,KAAA4oF,WAAA,SAEA5oF,KAAAuoF,UAAAvoF,KAAAuT,OAEAvT,MAIAuT,KAAA,WAEA,GAAAvT,KAAA0oF,aAAA,GAOA1oF,KAAA2oF,sBAAA,GAOA,GAAA91E,GAAA7S,KAAA6W,QAAAsxE,oBAYA,OAVAt1E,GAAA29C,OAAAxwD,KAAA6S,OAAA29C,OACA39C,EAAA8L,KAAA3e,KAAA6S,OAAA8L,KACA9L,EAAAu1E,QAAApoF,KAAA6S,OAAAu1E,QACAv1E,EAAAnc,MAAA,EAAAsJ,KAAAwoF,WACA31E,EAAA41E,aAAA5uE,MAAA7Z,KAAAyoF,aAEAzoF,KAAA0oF,WAAA,EAEA1oF,KAAA6S,SAEA7S,KAAA+gB,YAIAtN,MAAA,WAEA,MAAAzT,MAAA2oF,sBAAA,GAOA3oF,KAAA6S,OAAApc,OACAuJ,KAAAwoF,UAAAxoF,KAAA6W,QAAAqI,YACAlf,KAAA0oF,WAAA,EAEA1oF,MAXA,QAeAvJ,KAAA,WAEA,MAAAuJ,MAAA2oF,sBAAA,GAOA3oF,KAAA6S,OAAApc,OACAuJ,KAAAwoF,UAAA,EACAxoF,KAAA0oF,WAAA,EAEA1oF,MAXA,QAeA+gB,QAAA,WAEA,GAAA/gB,KAAA6oF,QAAA5zF,OAAA,GAEA+K,KAAA6S,OAAAkO,QAAA/gB,KAAA6oF,QAAA,GAEA,QAAAv3F,GAAA,EAAAi7B,EAAAvsB,KAAA6oF,QAAA5zF,OAAgDs3B,EAAAj7B,EAAOA,IAEvD0O,KAAA6oF,QAAAv3F,EAAA,GAAAyvB,QAAA/gB,KAAA6oF,QAAAv3F,GAIA0O,MAAA6oF,QAAA7oF,KAAA6oF,QAAA5zF,OAAA,GAAA8rB,QAAA/gB,KAAAupF,iBAIAvpF,MAAA6S,OAAAkO,QAAA/gB,KAAAupF,YAIA,OAAAvpF,OAIAghB,WAAA,WAEA,GAAAhhB,KAAA6oF,QAAA5zF,OAAA,GAEA+K,KAAA6S,OAAAmO,WAAAhhB,KAAA6oF,QAAA,GAEA,QAAAv3F,GAAA,EAAAi7B,EAAAvsB,KAAA6oF,QAAA5zF,OAAgDs3B,EAAAj7B,EAAOA,IAEvD0O,KAAA6oF,QAAAv3F,EAAA,GAAA0vB,WAAAhhB,KAAA6oF,QAAAv3F,GAIA0O,MAAA6oF,QAAA7oF,KAAA6oF,QAAA5zF,OAAA,GAAA+rB,WAAAhhB,KAAAupF,iBAIAvpF,MAAA6S,OAAAmO,WAAAhhB,KAAAupF,YAIA,OAAAvpF,OAIA6uI,WAAA,WAEA,MAAA7uI,MAAA6oF,SAIAimD,WAAA,SAAAj1H,GAgBA,MAdAA,WAEA7Z,KAAA0oF,aAAA,GAEA1oF,KAAAghB,aACAhhB,KAAA6oF,QAAAhvE,EACA7Z,KAAA+gB,WAIA/gB,KAAA6oF,QAAAhvE,EAIA7Z,MAIAquI,UAAA,WAEA,MAAAruI,MAAA6uI,aAAA,IAIAP,UAAA,SAAAxmI,GAEA,MAAA9H,MAAA8uI,WAAAhnI,WAIAinI,gBAAA,SAAAl1H,GAEA,MAAA7Z,MAAA2oF,sBAAA,GAOA3oF,KAAAyoF,aAAA5uE,EAEA7Z,KAAA0oF,aAAA,IAEA1oF,KAAA6S,OAAA41E,aAAA5uE,MAAA7Z,KAAAyoF,cAIAzoF,MAfA,QAmBAgvI,gBAAA,WAEA,MAAAhvI,MAAAyoF,cAIAJ,QAAA,WAEAroF,KAAA0oF,WAAA,GAIAumD,QAAA,WAEA,MAAAjvI,MAAA2oF,sBAAA,GAGA,EAIA3oF,KAAA6S,OAAA8L,MAIAuwH,QAAA,SAAAr1H,GAEA7Z,KAAA2oF,sBAAA,IAOA3oF,KAAA6S,OAAA8L,KAAA9E;EAIAs1H,UAAA,WAEA,MAAAnvI,MAAAgoF,UAAAnuE,OAKAu1H,UAAA,SAAAv1H,GAIA,MAFA7Z,MAAAgoF,UAAAnuE,QAEA7Z,QAeA8oF,GAAA/oF,UAAAG,OAAA+J,OAAA/J,OAAAmpB,OAAAlP,GAAApa,YAEAwpB,YAAAu/D,GAEAS,UAAA,WAEA,MAAAvpF,MAAA+oF,QAIAsmD,eAAA,WAEA,MAAArvI,MAAA+oF,OAAAumD,aAIAC,eAAA,SAAA11H,GAEA7Z,KAAA+oF,OAAAumD,YAAAz1H,GAIA21H,iBAAA,WAEA,MAAAxvI,MAAA+oF,OAAA0mD,eAIAC,iBAAA,SAAA71H,GAEA7Z,KAAA+oF,OAAA0mD,cAAA51H,GAIA81H,iBAAA,WAEA,MAAA3vI,MAAA+oF,OAAA6mD,eAIAC,iBAAA,SAAAh2H,GAEA7Z,KAAA+oF,OAAA6mD,cAAA/1H,GAIAi2H,eAAA,WAEA,MAAA9vI,MAAA+oF,OAAApiE,aAIAopH,eAAA,SAAAl2H,GAEA7Z,KAAA+oF,OAAApiE,YAAA9M,GAIA1jB,kBAAA,WAEA,GAAA2F,GAAA,GAAAkT,EAEA,iBAAAwxG,GAEA/vG,GAAA1Q,UAAA5J,kBAAAjF,KAAA8O,KAAAwgH,GAEA1kH,EAAAtH,sBAAAwL,KAAAtL,aAEAsL,KAAA+oF,OAAAld,YAAA/vE,EAAAnD,EAAAmD,EAAAlD,EAAAkD,EAAAjD,SAwBAqH,OAAA+J,OAAAg/E,GAAAlpF,WAEAiwI,iBAAA,WAIA,MAFAhwI,MAAAopF,SAAA6mD,qBAAAjwI,KAAAoY,MAEApY,KAAAoY,MAIA83H,oBAAA,WAIA,OAFAr2H,GAAA,EAAAzB,EAAApY,KAAAgwI,mBAEA1+I,EAAA,EAAsBA,EAAA8mB,EAAAnjB,OAAiB3D,IAEvCuoB,GAAAzB,EAAA9mB,EAIA,OAAAuoB,GAAAzB,EAAAnjB,UA0DAu0F,GAAAzpF,WAEAwpB,YAAAigE,GAGA2mD,WAAA,SAAAC,EAAAjjD,GAKA,GAAA38B,GAAAxwD,KAAAwwD,OACA4T,EAAApkE,KAAA4iF,UACApyE,EAAA4/H,EAAAhsE,IAEAisE,EAAArwI,KAAAgqF,gBAEA,QAAAqmD,EAAA,CAIA,OAAA/+I,GAAA,EAAuBA,IAAA8yE,IAAc9yE,EAErCk/D,EAAAhgD,EAAAlf,GAAAk/D,EAAAl/D,EAIA++I,GAAAljD,MAEO,CAIPkjD,GAAAljD,CACA,IAAAmjD,GAAAnjD,EAAAkjD,CACArwI,MAAA+pF,iBAAAv5B,EAAAhgD,EAAA,EAAA8/H,EAAAlsE,GAIApkE,KAAAgqF,iBAAAqmD,GAKAx+I,MAAA,SAAAu+I,GAEA,GAAAhsE,GAAApkE,KAAA4iF,UACApyB,EAAAxwD,KAAAwwD,OACAhgD,EAAA4/H,EAAAhsE,IAEA+oB,EAAAntF,KAAAgqF,iBAEAP,EAAAzpF,KAAAypF,OAIA,IAFAzpF,KAAAgqF,iBAAA,EAEA,EAAAmD,EAAA,CAIA,GAAAojD,GAAA,EAAAnsE,CAEApkE,MAAA+pF,iBACAv5B,EAAAhgD,EAAA+/H,EAAA,EAAApjD,EAAA/oB,GAIA,OAAA9yE,GAAA8yE,EAAA/zD,EAAA+zD,IAAgD9yE,IAAA+e,IAAS/e,EAEzD,GAAAk/D,EAAAl/D,KAAAk/D,EAAAl/D,EAAA8yE,GAAA,CAIAqlB,EAAAh7C,SAAA+hB,EAAAhgD,EACA,SASAggI,kBAAA,WAEA,GAAA/mD,GAAAzpF,KAAAypF,QAEAj5B,EAAAxwD,KAAAwwD,OACA4T,EAAApkE,KAAA4iF,UAEA2tD,EAAA,EAAAnsE,CAEAqlB,GAAAgnD,SAAAjgF,EAAA+/E,EAGA,QAAAj/I,GAAA8yE,EAAA/zD,EAAAkgI,EAAoDj/I,IAAA+e,IAAS/e,EAE7Dk/D,EAAAl/D,GAAAk/D,EAAA+/E,EAAAj/I,EAAA8yE,EAIApkE,MAAAgqF,iBAAA,GAKA0mD,qBAAA,WAEA,GAAAH,GAAA,EAAAvwI,KAAA4iF,SACA5iF,MAAAypF,QAAAh7C,SAAAzuC,KAAAwwD,OAAA+/E,IAOA1mD,QAAA,SAAAr5B,EAAA6Q,EAAA25D,EAAA7lH,EAAAivD,GAEA,GAAAjvD,GAAA,GAEA,OAAA7jB,GAAA,EAAuBA,IAAA8yE,IAAc9yE,EAErCk/D,EAAA6Q,EAAA/vE,GAAAk/D,EAAAwqE,EAAA1pI,IAQAs4F,OAAA,SAAAp5B,EAAA6Q,EAAA25D,EAAA7lH,EAAAivD,GAEA7zD,EAAAisF,UAAAhsC,EAAA6Q,EACA7Q,EAAA6Q,EAAA7Q,EAAAwqE,EAAA7lH,IAIA20E,MAAA,SAAAt5B,EAAA6Q,EAAA25D,EAAA7lH,EAAAivD,GAIA,OAFA+b,GAAA,EAAAhrE,EAEA7jB,EAAA,EAAsBA,IAAA8yE,IAAc9yE,EAAA,CAEpC,GAAAoS,GAAA29D,EAAA/vE,CAEAk/D,GAAA9sD,GAAA8sD,EAAA9sD,GAAAy8E,EAAA3vB,EAAAwqE,EAAA1pI,GAAA6jB,KA+BAg1E,GAAApqF,WAEAwpB,YAAA4gE,GAEAsmD,SAAA,SAAAE,EAAAngI,GAEAxQ,KAAAxB,OACAwB,KAAAywI,SAAAE,EAAAngI,IAUAi+B,SAAA,SAAAmiG,EAAApgI,GAEAxQ,KAAAxB,OACAwB,KAAAyuC,SAAAmiG,EAAApgI,IAKAhS,KAAA,WAEA,GAAAqyI,GAAA7wI,KAAAuqF,KACAF,EAAArqF,KAAAqqF,WAEAymD,EAAAzmD,EAAAymD,WACAxQ,EAAAj2C,EAAAi2C,aACAyQ,EAAA1mD,EAAA0mD,aAgBA,IAdAF,IAEAA,EAAA1mD,GAAAK,SACAxqF,KAAAoqF,SAAAC,EAAAI,WAAAzqF,KAAAoqF,SAEApqF,KAAAuqF,KAAAsmD,GAKA7wI,KAAAywI,SAAAzwI,KAAAgxI,sBACAhxI,KAAAyuC,SAAAzuC,KAAAixI,sBAGAJ,EAAA,CAOA,GAAAC,EAAA,CAEA,GAAAI,GAAA7mD,EAAA6mD,WAGA,QAAAJ,GAEA,gBAEA,IAAAD,EAAApnI,SAGA,MAIA,KAAAonI,EAAApnI,SAAAxL,UAGA,MAIA4yI,KAAApnI,SAAAxL,SAEA,MAEA,aAEA,IAAA4yI,EAAAxjF,SAGA,MAOAwjF,KAAAxjF,SAAAI,KAGA,QAAAn8D,GAAA,EAAyBA,EAAAu/I,EAAA57I,OAAyB3D,IAElD,GAAAu/I,EAAAv/I,GAAAiJ,OAAA22I,EAAA,CAEAA,EAAA5/I,CACA,OAMA,KAEA,SAEA,GAAAmH,SAAAo4I,EAAAC,GAGA,MAIAD,KAAAC,GAKA,GAAAr4I,SAAAy4I,EAAA,CAEA,GAAAz4I,SAAAo4I,EAAAK,GAGA,MAIAL,KAAAK,IAOA,GAAAC,GAAAN,EAAAvQ,EAEA,IAAA7nI,SAAA04I,EAAA,CAWA,GAAAC,GAAApxI,KAAAqxI,WAAAC,IAEA74I,UAAAo4I,EAAA/nI,aAEAsoI,EAAApxI,KAAAqxI,WAAAE,YACAvxI,KAAA6wI,gBAEOp4I,SAAAo4I,EAAAjyF,yBAEPwyF,EAAApxI,KAAAqxI,WAAAG,uBACAxxI,KAAA6wI,eAKA,IAAAY,GAAAzxI,KAAA0xI,YAAAC,MAEA,IAAAl5I,SAAAs4I,EAAA,CAGA,6BAAAzQ,EAAA,CAIA,IAAAuQ,EAAA3jI,SAGA,MAIA,KAAA2jI,EAAA3jI,SAAAyzB,aAGA,MAIA,QAAArvC,GAAA,EAAwBA,EAAA0O,KAAAuqF,KAAAr9E,SAAAyzB,aAAA1rC,OAA4C3D,IAEpE,GAAAu/I,EAAA3jI,SAAAyzB,aAAArvC,GAAAiJ,OAAAw2I,EAAA,CAEAA,EAAAz/I,CACA,QAQAmgJ,EAAAzxI,KAAA0xI,YAAAE,aAEA5xI,KAAA6xI,iBAAAV,EACAnxI,KAAA+wI,oBAEOt4I,UAAA04I,EAAAl5H,WAAAxf,SAAA04I,EAAAjmG,SAGPumG,EAAAzxI,KAAA0xI,YAAAI,eAEA9xI,KAAA6xI,iBAAAV,GAEO14I,SAAA04I,EAAAl8I,QAEPw8I,EAAAzxI,KAAA0xI,YAAAK,YAEA/xI,KAAA6xI,iBAAAV,GAIAnxI,KAAAsgI,cAKAtgI,MAAAywI,SAAAzwI,KAAAgyI,oBAAAP,GACAzxI,KAAAyuC,SAAAzuC,KAAAiyI,iCAAAR,GAAAL,OAtFA,CAAA/mD,EAAAI,YA0FAynD,OAAA,WAEAlyI,KAAAuqF,KAAA,KAIAvqF,KAAAywI,SAAAzwI,KAAAmyI,kBACAnyI,KAAAyuC,SAAAzuC,KAAAoyI,oBAMAlyI,OAAA+J,OAAAkgF,GAAApqF,WAGAixI,sBAAA,aACAC,sBAAA,aAGAkB,kBAAAhoD,GAAApqF,UAAA0wI,SACA2B,kBAAAjoD,GAAApqF,UAAA0uC,SAEAijG,aACAC,OAAA,EACAI,YAAA,EACAH,aAAA,EACAE,eAAA,GAGAT,YACAC,KAAA,EACAC,YAAA,EACAC,uBAAA,GAGAQ,qBAEA,SAAAxhF,EAAAhgD,GAEAggD,EAAAhgD,GAAAxQ,KAAAuqF,KAAAvqF,KAAAsgI,eAIA,SAAA9vE,EAAAhgD,GAIA,OAFAqC,GAAA7S,KAAA6xI,iBAEAvgJ,EAAA,EAAAmO,EAAAoT,EAAA5d,OAA0C3D,IAAAmO,IAASnO,EAEnDk/D,EAAAhgD,KAAAqC,EAAAvhB,IAMA,SAAAk/D,EAAAhgD,GAEAggD,EAAAhgD,GAAAxQ,KAAA6xI,iBAAA7xI,KAAA+wI,gBAIA,SAAAvgF,EAAAhgD,GAEAxQ,KAAA6xI,iBAAA3mG,QAAAslB,EAAAhgD,KAMAyhI,mCAKA,SAAAzhF,EAAAhgD,GAEAxQ,KAAAuqF,KAAAvqF,KAAAsgI,cAAA9vE,EAAAhgD,IAIA,SAAAggD,EAAAhgD,GAEAxQ,KAAAuqF,KAAAvqF,KAAAsgI,cAAA9vE,EAAAhgD,GACAxQ,KAAA6wI,aAAA/nI,aAAA,GAIA,SAAA0nD,EAAAhgD,GAEAxQ,KAAAuqF,KAAAvqF,KAAAsgI,cAAA9vE,EAAAhgD,GACAxQ,KAAA6wI,aAAAjyF,wBAAA,KAQA,SAAA4R,EAAAhgD,GAIA,OAFA6hI,GAAAryI,KAAA6xI,iBAEAvgJ,EAAA,EAAAmO,EAAA4yI,EAAAp9I,OAAyC3D,IAAAmO,IAASnO,EAElD+gJ,EAAA/gJ,GAAAk/D,EAAAhgD,MAMA,SAAAggD,EAAAhgD,GAIA,OAFA6hI,GAAAryI,KAAA6xI,iBAEAvgJ,EAAA,EAAAmO,EAAA4yI,EAAAp9I,OAAyC3D,IAAAmO,IAASnO,EAElD+gJ,EAAA/gJ,GAAAk/D,EAAAhgD,IAIAxQ,MAAA6wI,aAAA/nI,aAAA,GAIA,SAAA0nD,EAAAhgD,GAIA,OAFA6hI,GAAAryI,KAAA6xI,iBAEAvgJ,EAAA,EAAAmO,EAAA4yI,EAAAp9I,OAAyC3D,IAAAmO,IAASnO,EAElD+gJ,EAAA/gJ,GAAAk/D,EAAAhgD,IAIAxQ,MAAA6wI,aAAAjyF,wBAAA,KAQA,SAAA4R,EAAAhgD,GAEAxQ,KAAA6xI,iBAAA7xI,KAAA+wI,eAAAvgF,EAAAhgD,IAIA,SAAAggD,EAAAhgD,GAEAxQ,KAAA6xI,iBAAA7xI,KAAA+wI,eAAAvgF,EAAAhgD,GACAxQ,KAAA6wI,aAAA/nI,aAAA,GAIA,SAAA0nD,EAAAhgD,GAEAxQ,KAAA6xI,iBAAA7xI,KAAA+wI,eAAAvgF,EAAAhgD,GACAxQ,KAAA6wI,aAAAjyF,wBAAA,KAQA,SAAA4R,EAAAhgD,GAEAxQ,KAAA6xI,iBAAA55H,UAAAu4C,EAAAhgD,IAIA,SAAAggD,EAAAhgD,GAEAxQ,KAAA6xI,iBAAA55H,UAAAu4C,EAAAhgD,GACAxQ,KAAA6wI,aAAA/nI,aAAA,GAIA,SAAA0nD,EAAAhgD,GAEAxQ,KAAA6xI,iBAAA55H,UAAAu4C,EAAAhgD,GACAxQ,KAAA6wI,aAAAjyF,wBAAA,OAUAurC,GAAAmoD,UACA,SAAAC,EAAA78H,EAAA88H,GAEA,GAAAnoD,GAAAmoD,GACAroD,GAAAG,eAAA50E,EAEA1V,MAAAyyI,aAAAF,EACAvyI,KAAAgrF,UAAAunD,EAAAG,WAAAh9H,EAAA20E,IAIAF,GAAAmoD,UAAAvyI,WAEAwpB,YAAA4gE,GAAAmoD,UAEA7B,SAAA,SAAAtwG,EAAA3vB,GAEAxQ,KAAAxB,MAEA,IAAAm0I,GAAA3yI,KAAAyyI,aAAA7nD,gBACAnB,EAAAzpF,KAAAgrF,UAAA2nD,EAGAl6I,UAAAgxF,KAAAgnD,SAAAtwG,EAAA3vB,IAIAi+B,SAAA,SAAAtO,EAAA3vB,GAIA,OAFAoiI,GAAA5yI,KAAAgrF,UAEA15F,EAAA0O,KAAAyyI,aAAA7nD,gBACAnrF,EAAAmzI,EAAA39I,OAA4B3D,IAAAmO,IAASnO,EAErCshJ,EAAAthJ,GAAAm9C,SAAAtO,EAAA3vB,IAMAhS,KAAA,WAIA,OAFAo0I,GAAA5yI,KAAAgrF,UAEA15F,EAAA0O,KAAAyyI,aAAA7nD,gBACAnrF,EAAAmzI,EAAA39I,OAA4B3D,IAAAmO,IAASnO,EAErCshJ,EAAAthJ,GAAAkN,QAMA0zI,OAAA,WAIA,OAFAU,GAAA5yI,KAAAgrF,UAEA15F,EAAA0O,KAAAyyI,aAAA7nD,gBACAnrF,EAAAmzI,EAAA39I,OAA4B3D,IAAAmO,IAASnO,EAErCshJ,EAAAthJ,GAAA4gJ,WAQA/nD,GAAA9gE,OAAA,SAAA5W,EAAAiD,EAAA20E,GAEA,MAAA53E,MAAAogI,uBAMA,GAAA1oD,IAAAmoD,UAAA7/H,EAAAiD,EAAA20E,GAJA,GAAAF,IAAA13E,EAAAiD,EAAA20E,IAUAF,GAAAG,eAAA,SAAA81C,GAcA,GAAA0S,GAAA,uEACAC,EAAAD,EAAA5pI,KAAAk3H,EAEA,KAAA2S,EAEA,SAAAluI,OAAA,kCAAAu7H,EAIA,IAAA4S,IAEAvoD,SAAAsoD,EAAA,GACAjC,WAAAiC,EAAA,GACA7B,YAAA6B,EAAA,GACAzS,aAAAyS,EAAA,GACAhC,cAAAgC,EAAA,GAGA,WAAAC,EAAA1S,cAAA,IAAA0S,EAAA1S,aAAArrI,OAEA,SAAA4P,OAAA,8CAAAu7H,EAIA,OAAA4S,IAIA7oD,GAAAK,SAAA,SAAA/3E,EAAAg4E,GAEA,IAAAA,GAAA,KAAAA,GAAA,SAAAA,GAAA,MAAAA,GAAA,KAAAA,OAAAh4E,EAAAlY,MAAAkwF,IAAAh4E,EAAAq2B,KAEA,MAAAr2B,EAKA,IAAAA,EAAA46C,SAAA,CAEA,GAAA4lF,GAAA,SAAA5lF,GAEA,OAAA/7D,GAAA,EAAsBA,EAAA+7D,EAAAI,MAAAx4D,OAA2B3D,IAAA,CAEjD,GAAAmlF,GAAAppB,EAAAI,MAAAn8D,EAEA,IAAAmlF,EAAAl8E,OAAAkwF,EAEA,MAAAhU,GAKA,aAIAA,EAAAw8D,EAAAxgI,EAAA46C,SAEA,IAAAopB,EAEA,MAAAA,GAMA,GAAAhkE,EAAA5e,SAAA,CAEA,GAAAq/I,GAAA,SAAAr/I,GAEA,OAAAvC,GAAA,EAAsBA,EAAAuC,EAAAoB,OAAqB3D,IAAA,CAE3C,GAAA6hJ,GAAAt/I,EAAAvC,EAEA,IAAA6hJ,EAAA54I,OAAAkwF,GAAA0oD,EAAArqG,OAAA2hD,EAEA,MAAA0oD,EAIA,IAAA7qG,GAAA4qG,EAAAC,EAAAt/I,SAEA,IAAAy0C,EAAA,MAAAA,GAIA,aAIA8qG,EAAAF,EAAAzgI,EAAA5e,SAEA,IAAAu/I,EAEA,MAAAA,GAMA,aA0EA1oD,GAAA3qF,WAEAwpB,YAAAmhE,GAEAmoD,wBAAA,EAEA/3I,IAAA,SAAA6vF,GAWA,OATAv/D,GAAAprB,KAAAk5C,SACAm6F,EAAAjoH,EAAAn2B,OACAq+I,EAAAtzI,KAAA4qF,gBACA2oD,EAAAvzI,KAAA6qF,eACAiiD,EAAA9sI,KAAA8qF,OACA0oD,EAAAxzI,KAAA+qF,aACA6nD,EAAA5yI,KAAAgrF,UACAyoD,EAAAb,EAAA39I,OAEA3D,EAAA,EAAAmO,EAAA6H,UAAArS,OAA4C3D,IAAAmO,IAASnO,EAAA,CAErD,GAAAgC,GAAAgU,UAAAhW,GACAw3C,EAAAx1C,EAAAw1C,KACAxiC,EAAAitI,EAAAzqG,EAEA,IAAArwC,SAAA6N,EAAA,CAIAA,EAAA+sI,IACAE,EAAAzqG,GAAAxiC,EACA8kB,EAAAj2B,KAAA7B,EAIA,QAAAoQ,GAAA,EAAAvS,EAAAsiJ,EAAuC/vI,IAAAvS,IAASuS,EAEhDkvI,EAAAlvI,GAAAvO,KACA,GAAAg1F,IACA72F,EAAAw5I,EAAAppI,GAAA8vI,EAAA9vI,SAIQ,IAAA4vI,EAAAhtI,EAAA,CAER,GAAAotI,GAAAtoH,EAAA9kB,GAIAqtI,IAAAL,EACAM,EAAAxoH,EAAAuoH,EAEAJ,GAAAK,EAAA9qG,MAAAxiC,EACA8kB,EAAA9kB,GAAAstI,EAEAL,EAAAzqG,GAAA6qG,EACAvoH,EAAAuoH,GAAArgJ,CAIA,QAAAoQ,GAAA,EAAAvS,EAAAsiJ,EAAuC/vI,IAAAvS,IAASuS,EAAA,CAEhD,GAAAmwI,GAAAjB,EAAAlvI,GACAowI,EAAAD,EAAAF,GACAlqD,EAAAoqD,EAAAvtI,EAEAutI,GAAAvtI,GAAAwtI,EAEAr7I,SAAAgxF,IAMAA,EAAA,GAAAU,IACA72F,EAAAw5I,EAAAppI,GAAA8vI,EAAA9vI,KAIAmwI,EAAAF,GAAAlqD,OAIQr+D,GAAA9kB,KAAAotI,EAUR1zI,KAAA4qF,gBAAA0oD,GAIA/tI,OAAA,SAAAolF,GAQA,OANAv/D,GAAAprB,KAAAk5C,SACAo6F,EAAAtzI,KAAA4qF,gBACA2oD,EAAAvzI,KAAA6qF,eACA+nD,EAAA5yI,KAAAgrF,UACAyoD,EAAAb,EAAA39I,OAEA3D,EAAA,EAAAmO,EAAA6H,UAAArS,OAA4C3D,IAAAmO,IAASnO,EAAA,CAErD,GAAAgC,GAAAgU,UAAAhW,GACAw3C,EAAAx1C,EAAAw1C,KACAxiC,EAAAitI,EAAAzqG,EAEA,IAAArwC,SAAA6N,MAAAgtI,EAAA,CAIA,GAAAS,GAAAT,IACAU,EAAA5oH,EAAA2oH,EAEAR,GAAAS,EAAAlrG,MAAAxiC,EACA8kB,EAAA9kB,GAAA0tI,EAEAT,EAAAzqG,GAAAirG,EACA3oH,EAAA2oH,GAAAzgJ,CAIA,QAAAoQ,GAAA,EAAAvS,EAAAsiJ,EAAuC/vI,IAAAvS,IAASuS,EAAA,CAEhD,GAAAmwI,GAAAjB,EAAAlvI,GACAuwI,EAAAJ,EAAAE,GACAtqD,EAAAoqD,EAAAvtI,EAEAutI,GAAAvtI,GAAA2tI,EACAJ,EAAAE,GAAAtqD,IAQAzpF,KAAA4qF,gBAAA0oD,GAKAY,QAAA,SAAAvpD,GASA,OAPAv/D,GAAAprB,KAAAk5C,SACAm6F,EAAAjoH,EAAAn2B,OACAq+I,EAAAtzI,KAAA4qF,gBACA2oD,EAAAvzI,KAAA6qF,eACA+nD,EAAA5yI,KAAAgrF,UACAyoD,EAAAb,EAAA39I,OAEA3D,EAAA,EAAAmO,EAAA6H,UAAArS,OAA4C3D,IAAAmO,IAASnO,EAAA,CAErD,GAAAgC,GAAAgU,UAAAhW,GACAw3C,EAAAx1C,EAAAw1C,KACAxiC,EAAAitI,EAAAzqG,EAEA,IAAArwC,SAAA6N,EAIA,SAFAitI,GAAAzqG,GAEAwqG,EAAAhtI,EAAA,CAIA,GAAAqtI,KAAAL,EACAM,EAAAxoH,EAAAuoH,GACA1kG,IAAAokG,EACAc,EAAA/oH,EAAA6jB,EAGAskG,GAAAK,EAAA9qG,MAAAxiC,EACA8kB,EAAA9kB,GAAAstI,EAGAL,EAAAY,EAAArrG,MAAA6qG,EACAvoH,EAAAuoH,GAAAQ,EACA/oH,EAAAskC,KAIA,QAAAhsD,GAAA,EAAAvS,EAAAsiJ,EAAwC/vI,IAAAvS,IAASuS,EAAA,CAEjD,GAAAmwI,GAAAjB,EAAAlvI,GACAowI,EAAAD,EAAAF,GACA7M,EAAA+M,EAAA5kG,EAEA4kG,GAAAvtI,GAAAwtI,EACAD,EAAAF,GAAA7M,EACA+M,EAAAnkF,WAIS,CAIT,GAAAzgB,KAAAokG,EACAc,EAAA/oH,EAAA6jB,EAEAskG,GAAAY,EAAArrG,MAAAxiC,EACA8kB,EAAA9kB,GAAA6tI,EACA/oH,EAAAskC,KAIA,QAAAhsD,GAAA,EAAAvS,EAAAsiJ,EAAwC/vI,IAAAvS,IAASuS,EAAA,CAEjD,GAAAmwI,GAAAjB,EAAAlvI,EAEAmwI,GAAAvtI,GAAAutI,EAAA5kG,GACA4kG,EAAAnkF,QAUA1vD,KAAA4qF,gBAAA0oD,GAMAZ,WAAA,SAAAh9H,EAAA20E,GAIA,GAAA+pD,GAAAp0I,KAAAirF,uBACA3kF,EAAA8tI,EAAA1+H,GACAk9H,EAAA5yI,KAAAgrF,SAEA,IAAAvyF,SAAA6N,EAAA,MAAAssI,GAAAtsI,EAEA,IAAAwmI,GAAA9sI,KAAA8qF,OACA0oD,EAAAxzI,KAAA+qF,aACA3/D,EAAAprB,KAAAk5C,SACAm6F,EAAAjoH,EAAAn2B,OACAq+I,EAAAtzI,KAAA4qF,gBACAipD,EAAA,GAAA/5H,OAAAu5H,EAEA/sI,GAAAssI,EAAA39I,OAEAm/I,EAAA1+H,GAAApP,EAEAwmI,EAAA33I,KAAAugB,GACA89H,EAAAr+I,KAAAk1F,GACAuoD,EAAAz9I,KAAA0+I,EAEA,QAAAviJ,GAAAgiJ,EACA7zI,EAAA2rB,EAAAn2B,OAA2B3D,IAAAmO,IAASnO,EAAA,CAEpC,GAAAgC,GAAA83B,EAAA95B,EAEAuiJ,GAAAviJ,GACA,GAAA64F,IAAA72F,EAAAoiB,EAAA20E,GAIA,MAAAwpD,IAIAQ,aAAA,SAAA3+H,GAIA,GAAA0+H,GAAAp0I,KAAAirF,uBACA3kF,EAAA8tI,EAAA1+H,EAEA,IAAAjd,SAAA6N,EAAA,CAEA,GAAAwmI,GAAA9sI,KAAA8qF,OACA0oD,EAAAxzI,KAAA+qF,aACA6nD,EAAA5yI,KAAAgrF,UACAspD,EAAA1B,EAAA39I,OAAA,EACAs/I,EAAA3B,EAAA0B,GACAE,EAAA9+H,EAAA4+H,EAEAF,GAAAI,GAAAluI,EAEAssI,EAAAtsI,GAAAiuI,EACA3B,EAAAljF,MAEA8jF,EAAAltI,GAAAktI,EAAAc,GACAd,EAAA9jF,MAEAo9E,EAAAxmI,GAAAwmI,EAAAwH,GACAxH,EAAAp9E,SAoFA67B,GAAAxrF,WAEAwpB,YAAAgiE,GAIAh4E,KAAA,WAIA,MAFAvT,MAAA2rF,OAAA8oD,gBAAAz0I,MAEAA,MAIAvJ,KAAA,WAIA,MAFAuJ,MAAA2rF,OAAA+oD,kBAAA10I,MAEAA,KAAAxE,SAIAA,MAAA,WASA,MAPAwE,MAAAstF,QAAA,EACAttF,KAAAzE,SAAA,EAEAyE,KAAA/H,KAAA,EACA+H,KAAA+sF,WAAA,GACA/sF,KAAAgtF,WAAA,KAEAhtF,KAAA20I,aAAAC,eAIAC,UAAA,WAEA,MAAA70I,MAAAzE,UAAAyE,KAAAstF,QAAA,IAAAttF,KAAAitF,WACA,OAAAjtF,KAAAgtF,YAAAhtF,KAAA2rF,OAAAmpD,gBAAA90I,OAKA+0I,YAAA,WAEA,MAAA/0I,MAAA2rF,OAAAmpD,gBAAA90I,OAIAg1I,QAAA,SAAA/8I,GAIA,MAFA+H,MAAAgtF,WAAA/0F,EAEA+H,MAIAkvI,QAAA,SAAA/1I,EAAAk0F,GAKA,MAHArtF,MAAA2e,KAAAxlB,EACA6G,KAAAqtF,cAEArtF,MASAi1I,mBAAA,SAAA9nD,GAOA,MALAntF,MAAAmtF,SAGAntF,KAAAotF,iBAAAptF,KAAAzE,QAAA4xF,EAAA,EAEAntF,KAAA20I,cAKAO,mBAAA,WAEA,MAAAl1I,MAAAotF,kBAIA+nD,OAAA,SAAA/hI,GAEA,MAAApT,MAAAo1I,gBAAAhiI,EAAA,MAIAiiI,QAAA,SAAAjiI,GAEA,MAAApT,MAAAo1I,gBAAAhiI,EAAA,MAIAkiI,cAAA,SAAAC,EAAAniI,EAAAoiI,GAKA,GAHAD,EAAAF,QAAAjiI,GACApT,KAAAm1I,OAAA/hI,GAEAoiI,EAAA,CAEA,GAAAC,GAAAz1I,KAAA4rF,MAAAx4E,SACAsiI,EAAAH,EAAA3pD,MAAAx4E,SAEAuiI,EAAAD,EAAAD,EACAG,EAAAH,EAAAC,CAEAH,GAAAC,KAAA,EAAAG,EAAAviI,GACApT,KAAAw1I,KAAAI,EAAA,EAAAxiI,GAIA,MAAApT,OAIA61I,YAAA,SAAAC,EAAA1iI,EAAAoiI,GAEA,MAAAM,GAAAR,cAAAt1I,KAAAoT,EAAAoiI,IAIAb,WAAA,WAEA,GAAAoB,GAAA/1I,KAAA6sF,kBASA,OAPA,QAAAkpD,IAEA/1I,KAAA6sF,mBAAA,KACA7sF,KAAA2rF,OAAAqqD,4BAAAD,IAIA/1I,MASAi2I,sBAAA,SAAAhpD,GAKA,MAHAjtF,MAAAitF,YACAjtF,KAAAktF,oBAAAltF,KAAAstF,OAAA,EAAAL,EAEAjtF,KAAA40I,eAKAsB,sBAAA,WAEA,MAAAl2I,MAAAktF,qBAIAipD,YAAA,SAAA/iI,GAIA,MAFApT,MAAAitF,UAAAjtF,KAAA4rF,MAAAx4E,WAEApT,KAAA40I,eAIAwB,SAAA,SAAAxI,GAKA,MAHA5tI,MAAA/H,KAAA21I,EAAA31I,KACA+H,KAAAitF,UAAA2gD,EAAA3gD,UAEAjtF,KAAA40I,eAIAyB,KAAA,SAAAjjI,GAEA,MAAApT,MAAAw1I,KAAAx1I,KAAAktF,oBAAA,EAAA95E,IAIAoiI,KAAA,SAAAc,EAAAC,EAAAnjI,GAEA,GAAAo4E,GAAAxrF,KAAA2rF,OAAAl2F,EAAA+1F,EAAAvzF,KACAm0F,EAAApsF,KAAA4sF,sBAEAK,EAAAjtF,KAAAitF,SAEA,QAAAb,IAEAA,EAAAZ,EAAAgrD,0BACAx2I,KAAA4sF,sBAAAR,EAIA,IAAA5sF,GAAA4sF,EAAA7J,mBACAc,EAAA+I,EAAA5J,YAQA,OANAhjF,GAAA,GAAA/J,EACA+J,EAAA,GAAA/J,EAAA2d,EAEAiwE,EAAA,GAAAizD,EAAArpD,EACA5J,EAAA,GAAAkzD,EAAAtpD,EAEAjtF,MAIA40I,YAAA,WAEA,GAAA6B,GAAAz2I,KAAA4sF,qBASA,OAPA,QAAA6pD,IAEAz2I,KAAA4sF,sBAAA,KACA5sF,KAAA2rF,OAAAqqD,4BAAAS,IAIAz2I,MAMA02I,SAAA,WAEA,MAAA12I,MAAA2rF,QAIAgrD,QAAA,WAEA,MAAA32I,MAAA4rF,OAIAgrD,QAAA,WAEA,MAAA52I,MAAA6rF,YAAA7rF,KAAA2rF,OAAAgC,OAMAkpD,QAAA,SAAA5+I,EAAA6+I,EAAAC,EAAA3G,GAGA,GAAA5nD,GAAAxoF,KAAAgtF,UAEA,WAAAxE,EAAA,CAIA,GAAAwuD,IAAA/+I,EAAAuwF,GAAAuuD,CACA,MAAAC,GAAA,IAAAD,EAEA,MAMA/2I,MAAAgtF,WAAA,KACA8pD,EAAAC,EAAAC,EAMAF,GAAA92I,KAAAi3I,iBAAAh/I,EACA,IAAAi/I,GAAAl3I,KAAAm3I,YAAAL,GAKA3pD,EAAAntF,KAAAo3I,cAAAn/I,EAEA,IAAAk1F,EAAA,EAKA,OAHApB,GAAA/rF,KAAAwsF,cACA6qD,EAAAr3I,KAAAysF,kBAEA/oF,EAAA,EAAAvS,EAAA46F,EAAA92F,OAAgDyO,IAAAvS,IAASuS,EAEzDqoF,EAAAroF,GAAA03H,SAAA8b,GACAG,EAAA3zI,GAAAysI,WAAAC,EAAAjjD,IAQAiqD,cAAA,SAAAn/I,GAEA,GAAAk1F,GAAA,CAEA,IAAAntF,KAAAzE,QAAA,CAEA4xF,EAAAntF,KAAAmtF,MACA,IAAAf,GAAApsF,KAAA6sF,kBAEA,WAAAT,EAAA,CAEA,GAAAkrD,GAAAlrD,EAAAgvC,SAAAnjI,GAAA,EAEAk1F,IAAAmqD,EAEAr/I,EAAAm0F,EAAA7J,mBAAA,KAEAviF,KAAA20I,aAEA,IAAA2C,IAGAt3I,KAAAzE,SAAA,KAWA,MADAyE,MAAAotF,iBAAAD,EACAA,GAIA8pD,iBAAA,SAAAh/I,GAEA,GAAAg1F,GAAA,CAEA,KAAAjtF,KAAAstF,OAAA,CAEAL,EAAAjtF,KAAAitF,SAEA,IAAAb,GAAApsF,KAAA4sF,qBAEA,WAAAR,EAAA,CAEA,GAAAkrD,GAAAlrD,EAAAgvC,SAAAnjI,GAAA,EAEAg1F,IAAAqqD,EAEAr/I,EAAAm0F,EAAA7J,mBAAA,KAEAviF,KAAA40I,cAEA,IAAA3nD,EAGAjtF,KAAAstF,QAAA,EAKAttF,KAAAitF,cAWA,MADAjtF,MAAAktF,oBAAAD,EACAA,GAIAkqD,YAAA,SAAAL,GAEA,GAAA7+I,GAAA+H,KAAA/H,KAAA6+I,CAEA,QAAAA,EAAA,MAAA7+I,EAEA,IAAAmb,GAAApT,KAAA4rF,MAAAx4E,SAEAuL,EAAA3e,KAAA2e,KACA44H,EAAAv3I,KAAA+sF,UAEA,IAAApuE,IAAA42E,GAAA,CAEA,KAAAgiD,IAGAv3I,KAAAu3I,UAAA,EACAv3I,KAAAw3I,aAAA,SAIAC,GAAA,CAEA,GAAAx/I,GAAAmb,EAEAnb,EAAAmb,MAES,QAAAnb,GAIA,KAAAw/I,EAFTx/I,GAAA,EAIA+H,KAAAutF,kBAAAvtF,KAAAstF,QAAA,EACAttF,KAAAzE,SAAA,EAEAyE,KAAA2rF,OAAA31E,eACA7Q,KAAA,WAAAyoI,OAAA5tI,KACArL,UAAA,EAAAmiJ,EAAA,YAKO,CAEP,GAAAY,GAAA/4H,IAAA62E,EAyBA,IAvBA,KAAA+hD,IAGAT,GAAA,GAEAS,EAAA,EAEAv3I,KAAAw3I,aACA,MAAAx3I,KAAAqtF,YAAAqqD,IAQA13I,KAAAw3I,YACA,IAAAx3I,KAAAqtF,aAAA,EAAAqqD,IAMAz/I,GAAAmb,GAAA,EAAAnb,EAAA,CAGA,GAAA0/I,GAAA9hJ,KAAA8S,MAAA1Q,EAAAmb,EACAnb,IAAAmb,EAAAukI,EAEAJ,GAAA1hJ,KAAA6C,IAAAi/I,EAEA,IAAAC,GAAA53I,KAAAqtF,YAAAkqD,CAEA,MAAAK,EAGA53I,KAAAutF,kBAAAvtF,KAAAstF,QAAA,EACAttF,KAAAzE,SAAA,EAEAtD,EAAA6+I,EAAA,EAAA1jI,EAAA,EAEApT,KAAA2rF,OAAA31E,eACA7Q,KAAA,WAAAyoI,OAAA5tI,KACArL,UAAAmiJ,EAAA,aAGS,CAGT,OAAAc,EAAA,CAGA,GAAAC,GAAA,EAAAf,CACA92I,MAAAw3I,YAAAK,KAAAH,OAIA13I,MAAAw3I,aAAA,KAAAE,EAIA13I,MAAA+sF,WAAAwqD,EAEAv3I,KAAA2rF,OAAA31E,eACA7Q,KAAA,OAAAyoI,OAAA5tI,KAAA23I,eAOA,GAAAD,GAAA,OAAAH,GAIA,MADAv3I,MAAA/H,OACAmb,EAAAnb,EAOA,MADA+H,MAAA/H,OACAA,GAIAu/I,YAAA,SAAAK,EAAAC,EAAAJ,GAEA,GAAAprD,GAAAtsF,KAAAusF,oBAEAmrD,IAEAprD,EAAAL,YAAA2J,GACAtJ,EAAAH,UAAAyJ,KAMAiiD,EAEAvrD,EAAAL,YAAAjsF,KAAAwtF,iBACAoI,GAAA1J,GAIAI,EAAAL,YAAA4J,GAIAiiD,EAEAxrD,EAAAH,UAAAnsF,KAAAytF,eACAmI,GAAA1J,GAIAI,EAAAH,UAAA0J,KAQAu/C,gBAAA,SAAAhiI,EAAA2kI,EAAAC,GAEA,GAAAxsD,GAAAxrF,KAAA2rF,OAAAl2F,EAAA+1F,EAAAvzF,KACAm0F,EAAApsF,KAAA6sF,kBAEA,QAAAT,IAEAA,EAAAZ,EAAAgrD,0BACAx2I,KAAA6sF,mBAAAT,EAIA,IAAA5sF,GAAA4sF,EAAA7J,mBACAc,EAAA+I,EAAA5J,YAKA,OAHAhjF,GAAA,GAAA/J,EAAuB4tF,EAAA,GAAA00D,EACvBv4I,EAAA,GAAA/J,EAAA2d,EAAkCiwE,EAAA,GAAA20D,EAElCh4I,OA4BAE,OAAA+J,OAAAyjF,GAAA3tF,UAAAupB,EAAAvpB,WAKAk4I,WAAA,SAAAxsD,EAAAysD,GAEA,GAAAzlI,GAAAylI,GAAAl4I,KAAA2tF,MACAwqD,EAAA1lI,EAAAq2B,KAEAsvG,EAAA,gBAAA3sD,GACAlH,GAAAk7C,WAAAhtH,EAAAg5E,KAEA4sD,EAAA,OAAAD,IAAAtvG,KAAA2iD,EAEA6sD,EAAAt4I,KAAAu4I,eAAAF,GACAG,EAAA,IAEA,IAAA//I,SAAA6/I,EAAA,CAEA,GAAAG,GACAH,EAAAI,aAAAP,EAEA,IAAA1/I,SAAAggJ,EAEA,MAAAA,EAMAD,GAAAF,EAAAK,aAAA,GAGA,OAAAP,IACAA,EAAAI,EAAA5sD,OAKA,UAAAwsD,EAAA,WAGA,IAAAQ,GAAA,GAAArtD,IAAAvrF,KAAAo4I,EAAAF,EAOA,OALAl4I,MAAA64I,YAAAD,EAAAJ,GAGAx4I,KAAA84I,mBAAAF,EAAAP,EAAAF,GAEAS,GAKAH,eAAA,SAAAhtD,EAAAysD,GAEA,GAAAzlI,GAAAylI,GAAAl4I,KAAA2tF,MACAwqD,EAAA1lI,EAAAq2B,KAEAsvG,EAAA,gBAAA3sD,GACAlH,GAAAk7C,WAAAhtH,EAAAg5E,KAEA4sD,EAAAD,IAAAtvG,KAAA2iD,EAEA6sD,EAAAt4I,KAAAu4I,eAAAF,EAEA,OAAA5/I,UAAA6/I,EAEAA,EAAAI,aAAAP,IAAA,KAIA,MAKAY,cAAA,WAEA,GAAAC,GAAAh5I,KAAAi5I,SACAC,EAAAl5I,KAAAm5I,gBACAvG,EAAA5yI,KAAAgrF,UACAyoD,EAAAzzI,KAAAo5I,gBAEAp5I,MAAAm5I,gBAAA,EACAn5I,KAAAo5I,iBAAA,CAEA,QAAA9nJ,GAAA,EAAsBA,IAAA4nJ,IAAgB5nJ,EAEtC0nJ,EAAA1nJ,GAAAkK,OAIA,QAAAlK,GAAA,EAAsBA,IAAAmiJ,IAAiBniJ,EAEvCshJ,EAAAthJ,GAAA24F,SAAA,CAIA,OAAAjqF,OAKAhK,OAAA,SAAA8gJ,GAEAA,GAAA92I,KAAAitF,SAYA,QAVA+rD,GAAAh5I,KAAAi5I,SACAC,EAAAl5I,KAAAm5I,gBAEAlhJ,EAAA+H,KAAA/H,MAAA6+I,EACAC,EAAAlhJ,KAAAkqF,KAAA+2D,GAEA1G,EAAApwI,KAAA6tF,YAAA,EAIAv8F,EAAA,EAAsBA,IAAA4nJ,IAAgB5nJ,EAAA,CAEtC,GAAAs8I,GAAAoL,EAAA1nJ,EAEAs8I,GAAAryI,SAEAqyI,EAAAiJ,QAAA5+I,EAAA6+I,EAAAC,EAAA3G,GAWA,OAHAwC,GAAA5yI,KAAAgrF,UACAyoD,EAAAzzI,KAAAo5I,iBAEA9nJ,EAAA,EAAsBA,IAAAmiJ,IAAiBniJ,EAEvCshJ,EAAAthJ,GAAAO,MAAAu+I,EAIA,OAAApwI,OAKA42I,QAAA,WAEA,MAAA52I,MAAA2tF,OAKA0rD,YAAA,SAAA5tD,GAEA,GAAAutD,GAAAh5I,KAAAi5I,SACAZ,EAAA5sD,EAAA3iD,KACAwwG,EAAAt5I,KAAAu4I,eACAD,EAAAgB,EAAAjB,EAEA,IAAA5/I,SAAA6/I,EAAA,CAQA,OAFAiB,GAAAjB,EAAAK,aAEArnJ,EAAA,EAAAmO,EAAA85I,EAAAtkJ,OAAmD3D,IAAAmO,IAASnO,EAAA,CAE5D,GAAAs8I,GAAA2L,EAAAjoJ,EAEA0O,MAAA00I,kBAAA9G,EAEA,IAAA4L,GAAA5L,EAAAlhD,YACA+sD,EAAAT,IAAA/jJ,OAAA,EAEA24I,GAAAlhD,YAAA,KACAkhD,EAAAjhD,kBAAA,KAEA8sD,EAAA/sD,YAAA8sD,EACAR,EAAAQ,GAAAC,EACAT,EAAAtpF,MAEA1vD,KAAA05I,iCAAA9L,SAIA0L,GAAAjB,KAOAsB,YAAA,SAAAlnI,GAEA,GAAA0lI,GAAA1lI,EAAAq2B,KACAwwG,EAAAt5I,KAAAu4I,cAEA,QAAAF,KAAAiB,GAAA,CAEA,GAAAZ,GAAAY,EAAAjB,GAAAK,aACA9K,EAAA8K,EAAAP,EAEA1/I,UAAAm1I,IAEA5tI,KAAA00I,kBAAA9G,GACA5tI,KAAA45I,sBAAAhM,IAMA,GAAAiM,GAAA75I,KAAA85I,uBACAC,EAAAF,EAAA1B,EAEA,IAAA1/I,SAAAshJ,EAEA,OAAA3Z,KAAA2Z,GAAA,CAEA,GAAAtwD,GAAAswD,EAAA3Z,EACA32C,GAAAinD,uBACA1wI,KAAAg6I,uBAAAvwD,KASAwwD,cAAA,SAAAxuD,EAAAysD,GAEA,GAAAtK,GAAA5tI,KAAAy4I,eAAAhtD,EAAAysD,EAEA,QAAAtK,IAEA5tI,KAAA00I,kBAAA9G,GACA5tI,KAAA45I,sBAAAhM,OAUA1tI,OAAA+J,OAAAyjF,GAAA3tF,WAEA84I,YAAA,SAAAjL,EAAA4K,GAEA,GAAA/lI,GAAAm7H,EAAA/hD,YAAA7rF,KAAA2tF,MACAnJ,EAAAopD,EAAAhiD,MAAApH,OACAsH,EAAAtH,EAAAvvF,OACA29I,EAAAhF,EAAAnhD,kBACAV,EAAA6hD,EAAAphD,cACA2rD,EAAA1lI,EAAAq2B,KACA+wG,EAAA75I,KAAA85I,uBACAI,EAAAL,EAAA1B,EAEA1/I,UAAAyhJ,IAEAA,KACAL,EAAA1B,GAAA+B,EAIA,QAAA5oJ,GAAA,EAAsBA,IAAAw6F,IAAex6F,EAAA,CAErC,GAAA2tI,GAAAz6C,EAAAlzF,GACA8uI,EAAAnB,EAAA1kI,KACAkvF,EAAAywD,EAAA9Z,EAEA,IAAA3nI,SAAAgxF,EAEAmpD,EAAAthJ,GAAAm4F,MAEQ,CAIR,GAFAA,EAAAmpD,EAAAthJ,GAEAmH,SAAAgxF,EAAA,CAIA,OAAAA,EAAAiD,gBAEAjD,EAAAS,eACAlqF,KAAAm6I,oBAAA1wD,EAAA0uD,EAAA/X,GAIA,UAIA,GAAA1qH,GAAA8iI,KACA/rD,kBAAAn7F,GAAAm4F,QAAAY,UAEAZ,GAAA,GAAAD,IACAW,GAAA9gE,OAAA5W,EAAA2tH,EAAA1qH,GACAupH,EAAApB,cAAAoB,EAAAzB,kBAEA/zC,EAAAS,eACAlqF,KAAAm6I,oBAAA1wD,EAAA0uD,EAAA/X,GAEAwS,EAAAthJ,GAAAm4F,EAIAsC,EAAAz6F,GAAAoxF,aAAA+G,EAAAj5B,SAMAikF,gBAAA,SAAA7G,GAEA,IAAA5tI,KAAA80I,gBAAAlH,GAAA,CAEA,UAAAA,EAAAlhD,YAAA,CAKA,GAAAyrD,IAAAvK,EAAA/hD,YAAA7rF,KAAA2tF,OAAA7kD,KACAuvG,EAAAzK,EAAAhiD,MAAA9iD,KACAwvG,EAAAt4I,KAAAu4I,eAAAF,EAEAr4I,MAAA64I,YAAAjL,EACA0K,KAAAK,aAAA,IAEA34I,KAAA84I,mBAAAlL,EAAAyK,EAAAF,GAOA,OAHAvF,GAAAhF,EAAAnhD,kBAGAn7F,EAAA,EAAAmO,EAAAmzI,EAAA39I,OAA4C3D,IAAAmO,IAASnO,EAAA,CAErD,GAAAm4F,GAAAmpD,EAAAthJ,EAEA,KAAAm4F,EAAAQ,aAEAjqF,KAAAo6I,aAAA3wD,GACAA,EAAA+mD,qBAMAxwI,KAAAq6I,YAAAzM,KAMA8G,kBAAA,SAAA9G,GAEA,GAAA5tI,KAAA80I,gBAAAlH,GAAA,CAKA,OAHAgF,GAAAhF,EAAAnhD,kBAGAn7F,EAAA,EAAAmO,EAAAmzI,EAAA39I,OAA4C3D,IAAAmO,IAASnO,EAAA,CAErD,GAAAm4F,GAAAmpD,EAAAthJ,EAEA,OAAAm4F,EAAAQ,WAEAR,EAAAinD,uBACA1wI,KAAAs6I,iBAAA7wD,IAMAzpF,KAAAu6I,gBAAA3M,KAQAhgD,mBAAA,WAEA5tF,KAAAi5I,YACAj5I,KAAAm5I,gBAAA,EAEAn5I,KAAAu4I,kBAQAv4I,KAAAgrF,aACAhrF,KAAAo5I,iBAAA,EAEAp5I,KAAA85I,0BAGA95I,KAAAw6I,wBACAx6I,KAAAy6I,4BAAA,CAEA,IAAA/6H,GAAA1f,IAEAA,MAAAkrF,OAEA8tD,SACA7tD,GAAAC,SAAqB,MAAA1rE,GAAAu5H,SAAAhkJ,QACrBk2F,GAAAE,SAAqB,MAAA3rE,GAAAy5H,kBAErBvG,UACAznD,GAAAC,SAAqB,MAAA1rE,GAAAsrE,UAAA/1F,QACrBk2F,GAAAE,SAAqB,MAAA3rE,GAAA05H,mBAErBsB,qBACAvvD,GAAAC,SAAqB,MAAA1rE,GAAA86H,qBAAAvlJ,QACrBk2F,GAAAE,SAAqB,MAAA3rE,GAAA+6H,gCASrB3F,gBAAA,SAAAlH,GAEA,GAAAtnI,GAAAsnI,EAAAlhD,WACA,eAAApmF,KAAAtG,KAAAm5I,iBAIAL,mBAAA,SAAAlL,EAAAyK,EAAAF,GAEA,GAAAa,GAAAh5I,KAAAi5I,SACAK,EAAAt5I,KAAAu4I,eACAD,EAAAgB,EAAAjB,EAEA,IAAA5/I,SAAA6/I,EAEAA,GAEAK,cAAA/K,GACA8K,iBAIA9K,EAAAjhD,kBAAA,EAEA2sD,EAAAjB,GAAAC,MAEO,CAEP,GAAAK,GAAAL,EAAAK,YAEA/K,GAAAjhD,kBAAAgsD,EAAA1jJ,OACA0jJ,EAAAxjJ,KAAAy4I,GAIAA,EAAAlhD,YAAAssD,EAAA/jJ,OACA+jJ,EAAA7jJ,KAAAy4I,GAEA0K,EAAAI,aAAAP,GAAAvK,GAIAgM,sBAAA,SAAAhM,GAEA,GAAAoL,GAAAh5I,KAAAi5I,SACAQ,EAAAT,IAAA/jJ,OAAA,GACAukJ,EAAA5L,EAAAlhD,WAEA+sD,GAAA/sD,YAAA8sD,EACAR,EAAAQ,GAAAC,EACAT,EAAAtpF,MAEAk+E,EAAAlhD,YAAA,IAGA,IAAA2rD,GAAAzK,EAAAhiD,MAAA9iD,KACAwwG,EAAAt5I,KAAAu4I,eACAD,EAAAgB,EAAAjB,GACAsC,EAAArC,EAAAK,aAEAiC,EACAD,IAAA1lJ,OAAA,GAEA4lJ,EAAAjN,EAAAjhD,iBAEAiuD,GAAAjuD,kBAAAkuD,EACAF,EAAAE,GAAAD,EACAD,EAAAjrF,MAEAk+E,EAAAjhD,kBAAA,IAGA,IAAA+rD,GAAAJ,EAAAI,aACAP,GAAAa,EAAAntD,YAAA7rF,KAAA2tF,OAAA7kD,WAEA4vG,GAAAP,GAEA,IAAAwC,EAAA1lJ,cAEAqkJ,GAAAjB,GAIAr4I,KAAA05I,iCAAA9L,IAIA8L,iCAAA,SAAA9L,GAGA,OADAgF,GAAAhF,EAAAnhD,kBACAn7F,EAAA,EAAAmO,EAAAmzI,EAAA39I,OAA2C3D,IAAAmO,IAASnO,EAAA,CAEpD,GAAAm4F,GAAAmpD,EAAAthJ,EAEA,OAAAm4F,EAAAS,gBAEAlqF,KAAAg6I,uBAAAvwD,KAQA4wD,YAAA,SAAAzM,GAQA,GAAAoL,GAAAh5I,KAAAi5I,SACA6B,EAAAlN,EAAAlhD,YAEAquD,EAAA/6I,KAAAm5I,kBAEA6B,EAAAhC,EAAA+B,EAEAnN,GAAAlhD,YAAAquD,EACA/B,EAAA+B,GAAAnN,EAEAoN,EAAAtuD,YAAAouD,EACA9B,EAAA8B,GAAAE,GAIAT,gBAAA,SAAA3M,GAQA,GAAAoL,GAAAh5I,KAAAi5I,SACA6B,EAAAlN,EAAAlhD,YAEAuuD,IAAAj7I,KAAAm5I,gBAEA+B,EAAAlC,EAAAiC,EAEArN,GAAAlhD,YAAAuuD,EACAjC,EAAAiC,GAAArN,EAEAsN,EAAAxuD,YAAAouD,EACA9B,EAAA8B,GAAAI,GAMAf,oBAAA,SAAA1wD,EAAA0uD,EAAA/X,GAEA,GAAAyZ,GAAA75I,KAAA85I,uBACAC,EAAAF,EAAA1B,GAEAvF,EAAA5yI,KAAAgrF,SAEAvyF,UAAAshJ,IAEAA,KACAF,EAAA1B,GAAA4B,GAIAA,EAAA3Z,GAAA32C,EAEAA,EAAAiD,YAAAkmD,EAAA39I,OACA29I,EAAAz9I,KAAAs0F,IAIAuwD,uBAAA,SAAAvwD,GAEA,GAAAmpD,GAAA5yI,KAAAgrF,UACAmwD,EAAA1xD,UACA0uD,EAAAgD,EAAA/wD,SAAAthD,KACAs3F,EAAA+a,EAAAzlI,KACAmkI,EAAA75I,KAAA85I,uBACAC,EAAAF,EAAA1B,GAEAiD,EAAAxI,IAAA39I,OAAA,GACAukJ,EAAA/vD,EAAAiD,WAEA0uD,GAAA1uD,YAAA8sD,EACA5G,EAAA4G,GAAA4B,EACAxI,EAAAljF,YAEAqqF,GAAA3Z,EAEAib,GAAA,CAEA,OAAAC,KAAAvB,GAAA,KAAAsB,SAEAxB,GAAA1B,KAMAiC,aAAA,SAAA3wD,GAEA,GAAAmpD,GAAA5yI,KAAAgrF,UACA8vD,EAAArxD,EAAAiD,YAEAquD,EAAA/6I,KAAAo5I,mBAEAmC,EAAA3I,EAAAmI,EAEAtxD,GAAAiD,YAAAquD,EACAnI,EAAAmI,GAAAtxD,EAEA8xD,EAAA7uD,YAAAouD,EACAlI,EAAAkI,GAAAS,GAIAjB,iBAAA,SAAA7wD,GAEA,GAAAmpD,GAAA5yI,KAAAgrF,UACA8vD,EAAArxD,EAAAiD,YAEAuuD,IAAAj7I,KAAAo5I,iBAEAoC,EAAA5I,EAAAqI,EAEAxxD,GAAAiD,YAAAuuD,EACArI,EAAAqI,GAAAxxD,EAEA+xD,EAAA9uD,YAAAouD,EACAlI,EAAAkI,GAAAU,GAOAhF,wBAAA,WAEA,GAAAzqD,GAAA/rF,KAAAw6I,qBACAO,EAAA/6I,KAAAy6I,8BACAruD,EAAAL,EAAAgvD,EAaA,OAXAtiJ,UAAA2zF,IAEAA,EAAA,GAAAlJ,IACA,GAAA14C,cAAA,MAAAA,cAAA,GACA,EAAAxqC,KAAAy7I,kCAEArvD,EAAAsvD,aAAAX,EACAhvD,EAAAgvD,GAAA3uD,GAIAA,GAIA4pD,4BAAA,SAAA5pD,GAEA,GAAAL,GAAA/rF,KAAAw6I,qBACAM,EAAA1uD,EAAAsvD,aAEAT,IAAAj7I,KAAAy6I,4BAEAkB,EAAA5vD,EAAAkvD,EAEA7uD,GAAAsvD,aAAAT,EACAlvD,EAAAkvD,GAAA7uD,EAEAuvD,EAAAD,aAAAZ,EACA/uD,EAAA+uD,GAAAa,GAIAF,iCAAA,GAAAjxG,cAAA,KAuBAsjD,GAAA/tF,WAEAwpB,YAAAukE,GAEA54D,SAAA,SAAAh2B,GAKA,MAHAc,MAAA8/C,SAAA,EACA9/C,KAAAwlG,iBAAAtmG,EAEAc,OAmBA+tF,GAAAhuF,UAAAG,OAAAmpB,OAAA0W,GAAAhgC,WACAguF,GAAAhuF,UAAAwpB,YAAAwkE,GAEAA,GAAAhuF,UAAA4jE,2BAAA,EAEAoqB,GAAAhuF,UAAA8jD,SAAA,SAAAntD,EAAA4Z,EAAAsrI,GAEA57I,KAAAigC,OAAA9qC,MAEAuB,QACA4Z,QACAsrI,eAMA7tD,GAAAhuF,UAAA3D,KAAA,SAAAyW,GAEA,GAAAvM,GAAAuM,EAAAvM,KAEA,QAAAA,GAEAtG,KAAAikD,SAAA39C,EAAA6gB,QAIA,IAAA6Y,GAAAntB,EAAAmtB,UAEA,QAAAzlC,KAAAylC,GAAA,CAEA,GAAAswB,GAAAtwB,EAAAzlC,EACAyF,MAAAkkD,aAAA3pD,EAAA+1D,EAAAnpC,SAMA,OAFA8Y,GAAAptB,EAAAotB,OAEA3uC,EAAA,EAAAi7B,EAAA0T,EAAAhrC,OAAwCs3B,EAAAj7B,EAAOA,IAAA,CAE/C,GAAA+uC,GAAAJ,EAAA3uC,EACA0O,MAAA6jD,SAAAxjB,EAAA3pC,MAAA2pC,EAAA/vB,MAAA+vB,EAAAu7G,WAIA,MAAA57I,OAqBAguF,GAAAjuF,WAEAwpB,YAAAykE,GAEAzoC,8BAAA,EAEA4lC,GAAA76E,SAEA,MAAAtQ,MAAAoY,KAAA9H,OAIA66E,GAAAhrD,SAEA,MAAAngC,MAAAoY,KAAA+nB,OAIA+7C,KAAA,SAAA51E,EAAA3N,GAIA,MAFAqH,MAAAoY,KAAA+nB,MAAA75B,EAAAtG,KAAAoY,KAAAgsD,OAAApkE,KAAAwQ,QAAA7X,EAEAqH,MAIAw3F,KAAA,SAAAlxF,EAAA1N,GAIA,MAFAoH,MAAAoY,KAAA+nB,MAAA75B,EAAAtG,KAAAoY,KAAAgsD,OAAApkE,KAAAwQ,OAAA,GAAA5X,EAEAoH,MAIAk5F,KAAA,SAAA5yF,EAAAzN,GAIA,MAFAmH,MAAAoY,KAAA+nB,MAAA75B,EAAAtG,KAAAoY,KAAAgsD,OAAApkE,KAAAwQ,OAAA,GAAA3X,EAEAmH,MAIAm5F,KAAA,SAAA7yF,EAAAikB,GAIA,MAFAvqB,MAAAoY,KAAA+nB,MAAA75B,EAAAtG,KAAAoY,KAAAgsD,OAAApkE,KAAAwQ,OAAA,GAAA+Z,EAEAvqB,MAIA23E,KAAA,SAAArxE,GAEA,MAAAtG,MAAAoY,KAAA+nB,MAAA75B,EAAAtG,KAAAoY,KAAAgsD,OAAApkE,KAAAwQ,SAIAonE,KAAA,SAAAtxE,GAEA,MAAAtG,MAAAoY,KAAA+nB,MAAA75B,EAAAtG,KAAAoY,KAAAgsD,OAAApkE,KAAAwQ,OAAA,IAIAqnE,KAAA,SAAAvxE,GAEA,MAAAtG,MAAAoY,KAAA+nB,MAAA75B,EAAAtG,KAAAoY,KAAAgsD,OAAApkE,KAAAwQ,OAAA,IAIAkyG,KAAA,SAAAp8G,GAEA,MAAAtG,MAAAoY,KAAA+nB,MAAA75B,EAAAtG,KAAAoY,KAAAgsD,OAAApkE,KAAAwQ,OAAA,IAIAyrE,MAAA,SAAA31E,EAAA3N,EAAAC,GAOA,MALA0N,KAAAtG,KAAAoY,KAAAgsD,OAAApkE,KAAAwQ,OAEAxQ,KAAAoY,KAAA+nB,MAAA75B,EAAA,GAAA3N,EACAqH,KAAAoY,KAAA+nB,MAAA75B,EAAA,GAAA1N,EAEAoH,MAIAg8E,OAAA,SAAA11E,EAAA3N,EAAAC,EAAAC,GAQA,MANAyN,KAAAtG,KAAAoY,KAAAgsD,OAAApkE,KAAAwQ,OAEAxQ,KAAAoY,KAAA+nB,MAAA75B,EAAA,GAAA3N,EACAqH,KAAAoY,KAAA+nB,MAAA75B,EAAA,GAAA1N,EACAoH,KAAAoY,KAAA+nB,MAAA75B,EAAA,GAAAzN,EAEAmH,MAIA2iH,QAAA,SAAAr8G,EAAA3N,EAAAC,EAAAC,EAAA0xB,GASA,MAPAjkB,KAAAtG,KAAAoY,KAAAgsD,OAAApkE,KAAAwQ,OAEAxQ,KAAAoY,KAAA+nB,MAAA75B,EAAA,GAAA3N,EACAqH,KAAAoY,KAAA+nB,MAAA75B,EAAA,GAAA1N,EACAoH,KAAAoY,KAAA+nB,MAAA75B,EAAA,GAAAzN,EACAmH,KAAAoY,KAAA+nB,MAAA75B,EAAA,GAAAikB,EAEAvqB,OAyBAkuF,GAAAnuF,WAEAwpB,YAAA2kE,GAEA2tD,qBAAA,EAEA1wD,GAAAriF,aAAA+Q,GAEAA,KAAA,GAAA7Z,KAAA2uB,WAIAqyB,WAAA,SAAAnnC,GAIA,MAFA7Z,MAAA8/C,QAAAjmC,EAEA7Z,MAIA5D,KAAA,SAAAyW,GAOA,MALA7S,MAAAmgC,MAAA,GAAAttB,GAAAstB,MAAA5W,YAAA1W,EAAAstB,OACAngC,KAAAsQ,MAAAuC,EAAAvC,MACAtQ,KAAAokE,OAAAvxD,EAAAuxD,OACApkE,KAAA8/C,QAAAjtC,EAAAitC,QAEA9/C,MAIAkiH,OAAA,SAAAnqC,EAAAznB,EAAAonB,GAEAK,GAAA/3E,KAAAokE,OACAsT,GAAApnB,EAAA8T,MAEA,QAAA9yE,GAAA,EAAAi7B,EAAAvsB,KAAAokE,OAAuC73C,EAAAj7B,EAAOA,IAE9C0O,KAAAmgC,MAAA43C,EAAAzmF,GAAAg/D,EAAAnwB,MAAAu3C,EAAApmF,EAIA,OAAA0O,OAIApL,IAAA,SAAAilB,EAAArJ,GAMA,MAJA/X,UAAA+X,MAAA,GAEAxQ,KAAAmgC,MAAAvrC,IAAAilB,EAAArJ,GAEAxQ,MAIAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,QAkBAmuF,GAAApuF,UAAAG,OAAAmpB,OAAA6kE,GAAAnuF,WACAouF,GAAApuF,UAAAwpB,YAAA4kE,GAEAA,GAAApuF,UAAAskE,8BAAA,EAEA8pB,GAAApuF,UAAA3D,KAAA,SAAAyW,GAMA,MAJAq7E,IAAAnuF,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAw7D,iBAAA3oD,EAAA2oD,iBAEAx7D,MAgBAouF,GAAAruF,UAAAG,OAAAmpB,OAAAq2B,GAAA3/C,WACAquF,GAAAruF,UAAAwpB,YAAA6kE,GAEAA,GAAAruF,UAAAukE,4BAAA,EAEA8pB,GAAAruF,UAAA3D,KAAA,SAAAyW,GAMA,MAJA6sC,IAAA3/C,UAAA3D,KAAAlL,KAAA8O,KAAA6S,GAEA7S,KAAAw7D,iBAAA3oD,EAAA2oD,iBAEAx7D,MAiEAnC,GAAAkC,WAEAwpB,YAAA1rB,GAEA+tH,cAAA,EAEAh3H,IAAA,SAAAL,EAAAI,GAIAqL,KAAA1L,IAAAM,IAAAL,EAAAI,IAIAmnJ,cAAA,SAAArkE,EAAAhjF,GAEAA,KAAAq1H,qBAEA9pH,KAAA1L,IAAAC,OAAAC,sBAAAC,EAAAC,aACAsL,KAAA1L,IAAAK,UAAAC,IAAA6iF,EAAA9+E,EAAA8+E,EAAA7+E,EAAA,IAAA/D,UAAAJ,GAAAK,IAAAkL,KAAA1L,IAAAC,QAAAQ,aAEON,KAAAi2H,uBAEP1qH,KAAA1L,IAAAC,OAAAK,IAAA6iF,EAAA9+E,EAAA8+E,EAAA7+E,GAAAnE,EAAA2G,KAAA3G,EAAA4G,MAAA5G,EAAA2G,KAAA3G,EAAA4G,MAAAxG,UAAAJ,GACAuL,KAAA1L,IAAAK,UAAAC,IAAA,QAAA42E,mBAAA/2E,EAAAC,eAUA65F,gBAAA,SAAAj7F,EAAAk7F,GAEA,GAAAv6F,KAMA,OAJAs6F,IAAAj7F,EAAA0M,KAAA/L,EAAAu6F,GAEAv6F,EAAA2rC,KAAA0uD,IAEAr6F,GAIAe,iBAAA,SAAAo2B,EAAAojE,GAEA,GAAAv6F,KAEA,IAAA6lB,MAAAC,QAAAqR,MAAA,EAGA,MAAAn3B,EAIA,QAAA3C,GAAA,EAAAi7B,EAAAnB,EAAAn2B,OAA0Cs3B,EAAAj7B,EAAOA,IAEjDi9F,GAAAnjE,EAAA95B,GAAA0O,KAAA/L,EAAAu6F,EAMA,OAFAv6F,GAAA2rC,KAAA0uD,IAEAr6F,IAsBAw6F,GAAA1uF,WAEAwpB,YAAAklE,GAEA/3F,MAAA,WAEAsJ,KAAAwoF,WAAAuzD,aAAAvmJ,MAAAC,MAEAuK,KAAA2uF,QAAA3uF,KAAAwoF,UACAxoF,KAAA6uF,SAAA,GAIAp4F,KAAA,WAEAuJ,KAAAg8I,iBACAh8I,KAAA6uF,SAAA,GAIAmtD,eAAA,WAGA,MADAh8I,MAAAi8I,WACAj8I,KAAA4uF,aAIAqtD,SAAA,WAEA,GAAA/jJ,GAAA,CAQA,IANA8H,KAAA0uF,YAAA1uF,KAAA6uF,SAEA7uF,KAAAtJ,QAIAsJ,KAAA6uF,QAAA,CAEA,GAAAqtD,IAAAH,aAAAvmJ,MAAAC,KAEAyC,IAAAgkJ,EAAAl8I,KAAA2uF,SAAA,IACA3uF,KAAA2uF,QAAAutD,EAEAl8I,KAAA4uF,aAAA12F,EAIA,MAAAA,KA2MAwwB,GAAA3oB,WAEAwpB,YAAAb,GAEA9zB,IAAA,SAAAwf,EAAAyE,EAAA4I,GAMA,MAJAzhB,MAAAoU,SACApU,KAAA6Y,MACA7Y,KAAAyhB,QAEAzhB,MAIAmnB,MAAA,WAEA,UAAAnnB,MAAAupB,aAAAntB,KAAA4D,OAIA5D,KAAA,SAAAuG,GAMA,MAJA3C,MAAAoU,OAAAhY,KAAAuG,EAAAyR,QACApU,KAAA6Y,IAAAzc,KAAAuG,EAAAkW,KACA7Y,KAAAyhB,MAAArlB,KAAAuG,EAAA8e,OAEAzhB,MAKAmoB,SAAA,WAEA,GAAAK,GAAA,IAGA,OAFAxoB,MAAA6Y,IAAAhjB,KAAA6S,IAAA8f,EAAA3yB,KAAAC,IAAAD,KAAA2e,GAAAgU,EAAAxoB,KAAA6Y,MAEA7Y,MAIAkoB,eAAA,SAAAi0H,GAgBA,MAdAn8I,MAAAoU,OAAA+nI,EAAAlnJ,SAEA,IAAA+K,KAAAoU,QAEApU,KAAAyhB,MAAA,EACAzhB,KAAA6Y,IAAA,IAIA7Y,KAAAyhB,MAAA5rB,KAAA6jF,MAAAyiE,EAAAxjJ,EAAAwjJ,EAAAtjJ,GACAmH,KAAA6Y,IAAAhjB,KAAAwjG,KAAAvoG,EAAA+E,KAAAsoF,MAAAg+D,EAAAvjJ,EAAAoH,KAAAoU,OAAA,QAIApU,OAkCA4wF,GAAA7wF,UAAAG,OAAAmpB,OAAAj0B,GAAA2K,WACA6wF,GAAA7wF,UAAAwpB,YAAAqnE,GAEAA,GAAA7wF,UAAAoxF,gBAAA,SAAA52F,EAAA7D,EAAAyI,EAAA+xF,GAEA,GAAAgvC,IAEAxpI,QACAyI,MAEAlK,OAAAkK,EAAAzI,EAAA,EAEAw6F,MACA99E,UAAAjU,EAAAzI,GAAAw6F,EAEAkrD,UAAA,EACAC,aAAA,EAEAC,QAAA,EAEArkJ,KAAA,EACAtD,UAAA,EACAw4F,OAAA,EAEAovD,oBAAA,EACAC,cAAA,EAIAx8I,MAAA6wF,cAAAt2F,GAAA2lI,EACAlgI,KAAA8wF,eAAA37F,KAAA+qI,IAIAtvC,GAAA7wF,UAAA08I,qBAAA,SAAAvrD,GAQA,OAJAwrD,GAFAjuH,EAAA,mBAEAkuH,KAEAzvI,EAAAlN,KAAAkN,SAEA5b,EAAA,EAAA0rD,EAAA9vC,EAAAyzB,aAAA1rC,OAAwD+nD,EAAA1rD,EAAQA,IAAA,CAEhE,GAAAsrJ,GAAA1vI,EAAAyzB,aAAArvC,GACAq2D,EAAAi1F,EAAAriJ,KAAAoH,MAAA8sB,EAEA,IAAAk5B,KAAA1yD,OAAA,GAEA,GAAAsF,GAAAotD,EAAA,EAEAg1F,GAAApiJ,KAAAoiJ,EAAApiJ,IAA2D7D,MAAAkwB,IAAAznB,MAAAynB,MAE3D,IAAAowE,GAAA2lD,EAAApiJ,EAEAjJ,GAAA0lG,EAAAtgG,QAAAsgG,EAAAtgG,MAAApF,GACAA,EAAA0lG,EAAA73F,MAAA63F,EAAA73F,IAAA7N,GAEAorJ,MAAAniJ,IAMA,OAAAA,KAAAoiJ,GAAA,CAEA,GAAA3lD,GAAA2lD,EAAApiJ,EACAyF,MAAAmxF,gBAAA52F,EAAAy8F,EAAAtgG,MAAAsgG,EAAA73F,IAAA+xF,GAIAlxF,KAAA08I,kBAIA9rD,GAAA7wF,UAAA88I,6BAAA,SAAAtiJ,GAEA,GAAA2lI,GAAAlgI,KAAA6wF,cAAAt2F,EAEA2lI,KAEAA,EAAAvrI,UAAA,EACAurI,EAAAqc,oBAAA,IAMA3rD,GAAA7wF,UAAA+8I,8BAAA,SAAAviJ,GAEA,GAAA2lI,GAAAlgI,KAAA6wF,cAAAt2F,EAEA2lI,KAEAA,EAAAvrI,UAAA,GACAurI,EAAAqc,oBAAA,IAMA3rD,GAAA7wF,UAAAg9I,gBAAA,SAAAxiJ,EAAA22F,GAEA,GAAAgvC,GAAAlgI,KAAA6wF,cAAAt2F,EAEA2lI,KAEAA,EAAAhvC,MACAgvC,EAAA9sH,UAAA8sH,EAAA/gI,IAAA+gI,EAAAxpI,OAAAwpI,EAAAhvC,MAMAN,GAAA7wF,UAAAi9I,qBAAA,SAAAziJ,EAAA6Y,GAEA,GAAA8sH,GAAAlgI,KAAA6wF,cAAAt2F,EAEA2lI,KAEAA,EAAA9sH,WACA8sH,EAAAhvC,KAAAgvC,EAAA/gI,IAAA+gI,EAAAxpI,OAAAwpI,EAAA9sH,WAMAw9E,GAAA7wF,UAAAqxF,mBAAA,SAAA72F,EAAA4yF,GAEA,GAAA+yC,GAAAlgI,KAAA6wF,cAAAt2F,EAEA2lI,KAEAA,EAAA/yC,WAMAyD,GAAA7wF,UAAAk9I,iBAAA,SAAA1iJ,EAAAtC,GAEA,GAAAioI,GAAAlgI,KAAA6wF,cAAAt2F,EAEA2lI,KAEAA,EAAAjoI,SAMA24F,GAAA7wF,UAAAm9I,iBAAA,SAAA3iJ,GAEA,GAAAtC,GAAA,EAEAioI,EAAAlgI,KAAA6wF,cAAAt2F,EAQA,OANA2lI,KAEAjoI,EAAAioI,EAAAjoI,MAIAA,GAIA24F,GAAA7wF,UAAAo9I,qBAAA,SAAA5iJ,GAEA,GAAA6Y,GAAA,GAEA8sH,EAAAlgI,KAAA6wF,cAAAt2F,EAQA,OANA2lI,KAEA9sH,EAAA8sH,EAAA9sH,UAIAA,GAIAw9E,GAAA7wF,UAAAq9I,cAAA,SAAA7iJ,GAEA,GAAA2lI,GAAAlgI,KAAA6wF,cAAAt2F,EAEA2lI,KAEAA,EAAAjoI,KAAA,EACAioI,EAAAoc,QAAA,IAUA1rD,GAAA7wF,UAAAs9I,cAAA,SAAA9iJ,GAEA,GAAA2lI,GAAAlgI,KAAA6wF,cAAAt2F,EAEA2lI,KAEAA,EAAAoc,QAAA,IAMA1rD,GAAA7wF,UAAA/J,OAAA,SAAAJ,GAEA,OAAAtE,GAAA,EAAA0rD,EAAAh9C,KAAA8wF,eAAA77F,OAAsD+nD,EAAA1rD,EAAQA,IAAA,CAE9D,GAAA4uI,GAAAlgI,KAAA8wF,eAAAx/F,EAEA,IAAA4uI,EAAAoc,OAAA,CAEA,GAAAnd,GAAAe,EAAA9sH,SAAA8sH,EAAAjrI,MAEAirI,GAAAjoI,MAAAioI,EAAAvrI,UAAAiB,EAEAsqI,EAAAsc,cAEAtc,EAAAjoI,KAAAioI,EAAA9sH,UAAA8sH,EAAAjoI,KAAA,KAEAioI,EAAAvrI,WAAA,GAEAurI,EAAAjoI,KAAAioI,EAAA9sH,WAEA8sH,EAAAjoI,KAAAioI,EAAA9sH,SACA8sH,EAAAqc,oBAAA,GAIArc,EAAAjoI,KAAA,IAEAioI,EAAAjoI,KAAA,EACAioI,EAAAqc,oBAAA,KAQArc,EAAAjoI,KAAAioI,EAAAjoI,KAAAioI,EAAA9sH,SAEA8sH,EAAAjoI,KAAA,IAAAioI,EAAAjoI,MAAAioI,EAAA9sH,UAIA,IAAAkqI,GAAApd,EAAAxpI,MAAA5F,EAAA+E,KAAAsoF,MAAAtoF,KAAA8S,MAAAu3H,EAAAjoI,KAAAknI,GAAA,EAAAe,EAAAjrI,OAAA,GACAk4F,EAAA+yC,EAAA/yC,MAEAmwD,KAAApd,EAAAmc,eAEAr8I,KAAA6gC,sBAAAq/F,EAAAkc,WAAA,EACAp8I,KAAA6gC,sBAAAq/F,EAAAmc,cAAA,EAAAlvD,EAEAntF,KAAA6gC,sBAAAy8G,GAAA,EAEApd,EAAAkc,UAAAlc,EAAAmc,aACAnc,EAAAmc,aAAAiB,EAIA,IAAAhN,GAAApQ,EAAAjoI,KAAAknI,GAEAe,GAAAqc,qBAAAjM,EAAA,EAAAA,GAEApQ,EAAAmc,eAAAnc,EAAAkc,WAEAp8I,KAAA6gC,sBAAAq/F,EAAAmc,cAAA/L,EAAAnjD,EACAntF,KAAA6gC,sBAAAq/F,EAAAkc,YAAA,EAAA9L,GAAAnjD,GAIAntF,KAAA6gC,sBAAAq/F,EAAAmc,cAAAlvD,KAqBAkE,GAAAtxF,UAAAG,OAAAmpB,OAAA5Y,GAAA1Q,WACAsxF,GAAAtxF,UAAAwpB,YAAA8nE,GAEAA,GAAAtxF,UAAA+lE,yBAAA,EAmDAyrB,GAAAxxF,UAAAG,OAAAmpB,OAAAsY,GAAA5hC,WACAwxF,GAAAxxF,UAAAwpB,YAAAgoE,GAEAA,GAAAxxF,UAAA/J,OAAA,WAEA,GAAAg4B,GAAA,GAAAhf,GACA6gB,EAAA,GAAA7gB,GACAsvB,EAAA,GAAAjU,GAEA,mBAEA,GAAA9X,IAAA,YAEAvS,MAAA1M,OAAA6C,mBAAA,GAEAmoC,EAAArE,gBAAAj6B,KAAA1M,OAAAoB,YAEA,IAAAA,GAAAsL,KAAA1M,OAAAoB,YAEAoH,EAAAkE,KAAAkN,SAAA8yB,WAAAlkC,SAIA21F,EAAAzxF,KAAA1M,OAAA4Z,QAEA,IAAAukF,KAAAz3C,WAQA,OANAnoB,GAAA4/D,EAAA5/D,SAEAC,EAAA2/D,EAAA3/D,MAEA7sB,EAAA,EAEA3T,EAAA,EAAAi7B,EAAAuF,EAAA78B,OAAyCs3B,EAAAj7B,EAAOA,IAIhD,OAFAkqC,GAAA1J,EAAAxgC,GAEAoS,EAAA,EAAAwwC,EAAA1Y,EAAA+F,cAAAtsC,OAAwDi/C,EAAAxwC,EAAQA,IAAA,CAEhE,GAAAk3B,GAAA/I,EAAA2J,EAAAjpB,EAAA7O,KAEAuH,EAAAuwB,EAAA+F,cAAA79B,EAEAsqB,GAAA5xB,KAAAw+B,GAAA6D,aAAA/pC,GAEAm7B,EAAAzzB,KAAA6O,GAAAyoB,aAAA4K,GAAAvpC,YAAAykB,eAAAxZ,KAAAyU,MAAA3Z,IAAAkzB,GAEAlyB,EAAAkgF,OAAA/2E,EAAA+oB,EAAAr1B,EAAAq1B,EAAAp1B,EAAAo1B,EAAAn1B,GAEAoM,GAAA,EAEAnJ,EAAAkgF,OAAA/2E,EAAA4qB,EAAAl3B,EAAAk3B,EAAAj3B,EAAAi3B,EAAAh3B,GAEAoM,GAAA,MAMO,IAAAwsF,KAAA33C,iBAUP,OARAyjG,GAAA9rD,EAAAzxD,WAAAlkC,SAEA0hJ,EAAA/rD,EAAAzxD,WAAA/0B,OAEAhG,EAAA,EAIAvB,EAAA,EAAAwwC,EAAAqpG,EAAAjtI,MAA0C4jC,EAAAxwC,EAAQA,IAElDsqB,EAAAp5B,IAAA2oJ,EAAA5lE,KAAAj0E,GAAA65I,EAAA3lE,KAAAl0E,GAAA65I,EAAA1lE,KAAAn0E,IAAA+6B,aAAA/pC,GAEAm7B,EAAAj7B,IAAA4oJ,EAAA7lE,KAAAj0E,GAAA85I,EAAA5lE,KAAAl0E,GAAA85I,EAAA3lE,KAAAn0E,IAEAmsB,EAAA6D,aAAA4K,GAAAvpC,YAAAykB,eAAAxZ,KAAAyU,MAAA3Z,IAAAkzB,GAEAlyB,EAAAkgF,OAAA/2E,EAAA+oB,EAAAr1B,EAAAq1B,EAAAp1B,EAAAo1B,EAAAn1B,GAEAoM,GAAA,EAEAnJ,EAAAkgF,OAAA/2E,EAAA4qB,EAAAl3B,EAAAk3B,EAAAj3B,EAAAi3B,EAAAh3B,GAEAoM,GAAA,CAQA,OAFAnJ,GAAAgN,aAAA,EAEA9I,SAuDA0xF,GAAA3xF,UAAAG,OAAAmpB,OAAA5Y,GAAA1Q,WACA2xF,GAAA3xF,UAAAwpB,YAAAmoE,GAEAA,GAAA3xF,UAAAohB,QAAA,WAEAnhB,KAAA2xF,KAAAzkF,SAAAiU,UACAnhB,KAAA2xF,KAAAloF,SAAA0X,WAIAuwE,GAAA3xF,UAAA/J,OAAA,WAEA,GAAAgoC,GAAA,GAAAhvB,GACAyuI,EAAA,GAAAzuI,EAEA,mBAEA,GAAA0uI,GAAA19I,KAAAqZ,MAAApM,SAAAjN,KAAAqZ,MAAApM,SAAA,IACA0wI,EAAAD,EAAA7nJ,KAAAozB,IAAAjpB,KAAAqZ,MAAArJ,MAEAhQ,MAAA2xF,KAAAvpF,MAAAxT,IAAA+oJ,IAAAD,GAEA1/G,EAAAxpC,sBAAAwL,KAAAqZ,MAAA3kB,aACA+oJ,EAAAjpJ,sBAAAwL,KAAAqZ,MAAAhkB,OAAAX,aAEAsL,KAAA2xF,KAAArpE,OAAAm1H,EAAA3oJ,IAAAkpC,IAEAh+B,KAAA2xF,KAAAloF,SAAAU,MAAA/N,KAAA4D,KAAAqZ,MAAAlP,OAAAqP,eAAAxZ,KAAAqZ,MAAAC,eAkDAs4E,GAAA7xF,UAAAG,OAAAmpB,OAAAsY,GAAA5hC,WACA6xF,GAAA7xF,UAAAwpB,YAAAqoE,GAEAA,GAAA7xF,UAAA8xF,YAAA,SAAAv+F,GAEA,GAAAsqJ,KAEAtqJ,MAAAw+F,QAEA8rD,EAAAzoJ,KAAA7B,EAIA,QAAAhC,GAAA,EAAqBA,EAAAgC,EAAAO,SAAAoB,OAA4B3D,IAEjDssJ,EAAAzoJ,KAAAtD,MAAA+rJ,EAAA59I,KAAA6xF,YAAAv+F,EAAAO,SAAAvC,IAIA,OAAAssJ,IAIAhsD,GAAA7xF,UAAA/J,OAAA,WAUA,OARAkX,GAAAlN,KAAAkN,SAEA2wI,GAAA,GAAArvI,IAAAE,WAAA1O,KAAAyS,KAAA/d,aAEAopJ,EAAA,GAAAtvI,GAEA9K,EAAA,EAEApS,EAAA,EAAqBA,EAAA0O,KAAAytD,MAAAx4D,OAAuB3D,IAAA,CAE5C,GAAAmlF,GAAAz2E,KAAAytD,MAAAn8D,EAEAmlF,GAAAviF,QAAAuiF,EAAAviF,OAAA49F,SAEAgsD,EAAAnvI,iBAAAkvI,EAAApnE,EAAA/hF,aACAwY,EAAA2kB,SAAAnuB,GAAAlP,sBAAAspJ,GAEAA,EAAAnvI,iBAAAkvI,EAAApnE,EAAAviF,OAAAQ,aACAwY,EAAA2kB,SAAAnuB,EAAA,GAAAlP,sBAAAspJ,GAEAp6I,GAAA,GAMAwJ,EAAAq0C,oBAAA,EAEAr0C,EAAAk4D,yBA+CA2sB,GAAAhyF,UAAAG,OAAAmpB,OAAAj0B,GAAA2K,WACAgyF,GAAAhyF,UAAAwpB,YAAAwoE,GAEAA,GAAAhyF,UAAAohB,QAAA,WAEAnhB,KAAAkN,SAAAiU,UACAnhB,KAAAyJ,SAAA0X,WAIA4wE,GAAAhyF,UAAA/J,OAAA,WAEAgK,KAAAyJ,SAAAU,MAAA/N,KAAA4D,KAAAqZ,MAAAlP,OAAAqP,eAAAxZ,KAAAqZ,MAAAC,YAsDA24E,GAAAlyF,UAAAG,OAAAmpB,OAAA5Y,GAAA1Q,WACAkyF,GAAAlyF,UAAAwpB,YAAA0oE,GAEAA,GAAAlyF,UAAAohB,QAAA,WAEAnhB,KAAAkyF,YAAAhlF,SAAAiU,UACAnhB,KAAAkyF,YAAAzoF,SAAA0X,WAIA8wE,GAAAlyF,UAAA/J,OAAA,WAEA,GAAAgoC,GAAA,GAAAhvB,EAEA,mBAEAhP,KAAA4hC,OAAA,GAAAxlC,KAAA4D,KAAAqZ,MAAAlP,OAAAqP,eAAAxZ,KAAAqZ,MAAAC,WACAtZ,KAAA4hC,OAAA,GAAAxlC,KAAA4D,KAAAqZ,MAAA4sC,aAAAzsC,eAAAxZ,KAAAqZ,MAAAC,WAEAtZ,KAAAkyF,YAAA5pE,OAAA0V,EAAAxpC,sBAAAwL,KAAAqZ,MAAA3kB,aAAA2sC,UACArhC,KAAAkyF,YAAAhlF,SAAAw0C,kBAAA,MA4CA/sC,GAAA5U,UAAAG,OAAAmpB,OAAAsY,GAAA5hC,WACA4U,GAAA5U,UAAAwpB,YAAA5U,GAEAA,GAAA5U,UAAA6U,UAAA,aAwDAw9E,GAAAryF,UAAAG,OAAAmpB,OAAAsY,GAAA5hC,WACAqyF,GAAAryF,UAAAwpB,YAAA6oE,GAEAA,GAAAryF,UAAA/J,OAAA,WAEA,GAAAg4B,GAAA,GAAAhf,GACA6gB,EAAA,GAAA7gB,GACAsvB,EAAA,GAAAjU,GAEA,mBAEArqB,KAAA1M,OAAA6C,mBAAA,GAEAmoC,EAAArE,gBAAAj6B,KAAA1M,OAAAoB,YAgBA,QAdAA,GAAAsL,KAAA1M,OAAAoB,YAEAoH,EAAAkE,KAAAkN,SAAA8yB,WAAAlkC,SAIA21F,EAAAzxF,KAAA1M,OAAA4Z,SAEA2kB,EAAA4/D,EAAA5/D,SAEAC,EAAA2/D,EAAA3/D,MAEA7sB,EAAA,EAEA3T,EAAA,EAAAi7B,EAAAuF,EAAA78B,OAAwCs3B,EAAAj7B,EAAOA,IAAA,CAE/C,GAAAkqC,GAAA1J,EAAAxgC,GAEA2Z,EAAAuwB,EAAAvwB,MAEA+iB,GAAA5xB,KAAAy1B,EAAA2J,EAAA7pC,IACAmJ,IAAA+2B,EAAA2J,EAAA5pC,IACAkJ,IAAA+2B,EAAA2J,EAAApqC,IACAwhC,aAAA,GACA6L,aAAA/pC,GAEAm7B,EAAAzzB,KAAA6O,GAAAyoB,aAAA4K,GAAAvpC,YAAAykB,eAAAxZ,KAAAyU,MAAA3Z,IAAAkzB,GAEAlyB,EAAAkgF,OAAA/2E,EAAA+oB,EAAAr1B,EAAAq1B,EAAAp1B,EAAAo1B,EAAAn1B,GAEAoM,GAAA,EAEAnJ,EAAAkgF,OAAA/2E,EAAA4qB,EAAAl3B,EAAAk3B,EAAAj3B,EAAAi3B,EAAAh3B,GAEAoM,GAAA,EAMA,MAFAnJ,GAAAgN,aAAA,EAEA9I,SA8CAqyF,GAAAtyF,UAAAG,OAAAmpB,OAAA5Y,GAAA1Q,WACAsyF,GAAAtyF,UAAAwpB,YAAA8oE,GAEAA,GAAAtyF,UAAAohB,QAAA,WAEA,GAAA48H,GAAA/9I,KAAAnM,SAAA,GACAmqJ,EAAAh+I,KAAAnM,SAAA,EAEAkqJ,GAAA7wI,SAAAiU,UACA48H,EAAAt0I,SAAA0X,UACA68H,EAAA9wI,SAAAiU,UACA68H,EAAAv0I,SAAA0X,WAIAkxE,GAAAtyF,UAAA/J,OAAA,WAEA,GAAAg4B,GAAA,GAAAhf,GACA6gB,EAAA,GAAA7gB,GACAuiB,EAAA,GAAAviB,EAEA,mBAEAgf,EAAAx5B,sBAAAwL,KAAAqZ,MAAA3kB,aACAm7B,EAAAr7B,sBAAAwL,KAAAqZ,MAAAhkB,OAAAX,aACA68B,EAAAzO,WAAA+M,EAAA7B,EAEA,IAAA+vH,GAAA/9I,KAAAnM,SAAA,GACAmqJ,EAAAh+I,KAAAnM,SAAA,EAEAkqJ,GAAAz1H,OAAAiJ,GACAwsH,EAAAt0I,SAAAU,MAAA/N,KAAA4D,KAAAqZ,MAAAlP,OAAAqP,eAAAxZ,KAAAqZ,MAAAC,WAEA0kI,EAAA11H,OAAAiJ,GACAysH,EAAA51I,MAAAvP,EAAA04B,EAAAt8B,aAiHAq9F,GAAAvyF,UAAAG,OAAAmpB,OAAAsY,GAAA5hC,WACAuyF,GAAAvyF,UAAAwpB,YAAA+oE,GAEAA,GAAAvyF,UAAA/J,OAAA,WAOA,QAAAioJ,GAAA/uF,EAAAv2D,EAAAC,EAAAC,GAEAmlC,EAAAppC,IAAA+D,EAAAC,EAAAC,GAAAhE,UAAAJ,EAEA,IAAA08E,GAAAshB,EAAAvjC,EAEA,IAAAz2D,SAAA04E,EAEA,OAAA7/E,GAAA,EAAA0rD,EAAAm0B,EAAAl8E,OAA2C+nD,EAAA1rD,EAAQA,IAEnD4b,EAAA2kB,SAAAs/C,EAAA7/E,IAAA8K,KAAA4hC,GAfA,GAAA9wB,GAAAulF,EAEAz0D,EAAA,GAAAhvB,GACAva,EAAA,GAAAqlC,GAoBA,mBAEA5sB,EAAAlN,KAAAkN,SACAulF,EAAAzyF,KAAAyyF,QAEA,IAAAloE,GAAA,EAAAuY,EAAA,CAKAruC,GAAAma,iBAAAxS,KAAA4D,KAAAvL,OAAAma,kBAIAqvI,EAAA,YACAA,EAAA,WAIAA,EAAA,MAAA1zH,GAAAuY,EAAA,IACAm7G,EAAA,KAAA1zH,GAAAuY,EAAA,IACAm7G,EAAA,MAAA1zH,EAAAuY,EAAA,IACAm7G,EAAA,KAAA1zH,EAAAuY,EAAA,IAIAm7G,EAAA,MAAA1zH,GAAAuY,EAAA,GACAm7G,EAAA,KAAA1zH,GAAAuY,EAAA,GACAm7G,EAAA,MAAA1zH,EAAAuY,EAAA,GACAm7G,EAAA,KAAA1zH,EAAAuY,EAAA,GAIAm7G,EAAA,QAAA1zH,EAAA,IAAAuY,EAAA,IACAm7G,EAAA,SAAA1zH,EAAA,IAAAuY,EAAA,IACAm7G,EAAA,SAAAn7G,EAAA,IAIAm7G,EAAA,OAAA1zH,EAAA,KACA0zH,EAAA,MAAA1zH,EAAA,KACA0zH,EAAA,SAAAn7G,EAAA,GACAm7G,EAAA,QAAAn7G,EAAA,GAEAm7G,EAAA,OAAA1zH,EAAA,MACA0zH,EAAA,MAAA1zH,EAAA,MACA0zH,EAAA,SAAAn7G,EAAA,IACAm7G,EAAA,QAAAn7G,EAAA,IAEA51B,EAAAq0C,oBAAA,MAwBAwxC,GAAAhzF,UAAAG,OAAAmpB,OAAAj0B,GAAA2K,WACAgzF,GAAAhzF,UAAAwpB,YAAAwpE,GAEAA,GAAAhzF,UAAA/J,OAAA;AAEAgK,KAAAgzF,IAAApiC,cAAA5wD,KAAA1M,QAEA0M,KAAAgzF,IAAAv+E,KAAAzU,KAAAoI,OAEApI,KAAAgzF,IAAAglB,UAAAh4G,KAAAlE,WA6BAm3F,GAAAlzF,UAAAG,OAAAmpB,OAAAsY,GAAA5hC,WACAkzF,GAAAlzF,UAAAwpB,YAAA0pE,GAEAA,GAAAlzF,UAAA/J,OAAA,WAEA,GAAAg9F,GAAA,GAAA31D,GAEA,iBAAA/pC,GAYA,GAVAA,KAAAslH,OAEA5lB,EAAA52F,KAAA9I,GAIA0/F,EAAApiC,cAAAt9D,IAIA0/F,EAAA15D,UAAA,CAEA,GAAAxjC,GAAAk9F,EAAAl9F,IACA4S,EAAAsqF,EAAAtqF,IAkBA5M,EAAAkE,KAAAkN,SAAA8yB,WAAAlkC,SACAqkC,EAAArkC,EAAAqkC,KAEAA,GAAA,GAAAz3B,EAAA/P,EAA0BwnC,EAAA,GAAAz3B,EAAA9P,EAAqBunC,EAAA,GAAAz3B,EAAA7P,EAC/CsnC,EAAA,GAAArqC,EAAA6C,EAA0BwnC,EAAA,GAAAz3B,EAAA9P,EAAqBunC,EAAA,GAAAz3B,EAAA7P,EAC/CsnC,EAAA,GAAArqC,EAAA6C,EAA0BwnC,EAAA,GAAArqC,EAAA8C,EAAqBunC,EAAA,GAAAz3B,EAAA7P,EAC/CsnC,EAAA,GAAAz3B,EAAA/P,EAA0BwnC,EAAA,IAAArqC,EAAA8C,EAAqBunC,EAAA,IAAAz3B,EAAA7P,EAC/CsnC,EAAA,IAAAz3B,EAAA/P,EAA0BwnC,EAAA,IAAAz3B,EAAA9P,EAAqBunC,EAAA,IAAArqC,EAAA+C,EAC/CsnC,EAAA,IAAArqC,EAAA6C,EAA0BwnC,EAAA,IAAAz3B,EAAA9P,EAAqBunC,EAAA,IAAArqC,EAAA+C,EAC/CsnC,EAAA,IAAArqC,EAAA6C,EAA0BwnC,EAAA,IAAArqC,EAAA8C,EAAqBunC,EAAA,IAAArqC,EAAA+C,EAC/CsnC,EAAA,IAAAz3B,EAAA/P,EAA0BwnC,EAAA,IAAArqC,EAAA8C,EAAqBunC,EAAA,IAAArqC,EAAA+C,EAE/CiD,EAAAgN,aAAA,EAEA9I,KAAAkN,SAAAk4D,4BAMA,IAAAkuB,IAAA,GAAAvzD,GACAuzD,IAAApvC,aAAA,cAAAtD,KAAA,gBAEA,IAAA2yC,IAAA,GAAArU,IAAA,WACAqU,IAAAhkE,UAAA,SA4BA2jE,GAAAnzF,UAAAG,OAAAmpB,OAAA5Y,GAAA1Q,WACAmzF,GAAAnzF,UAAAwpB,YAAA2pE,GAEAA,GAAAnzF,UAAAyzF,aAAA,WAEA,GACA2D,GADA2D,EAAA,GAAA9rF,EAGA,iBAAAmkF,GAIAA,EAAAv6F,EAAA,OAEAoH,KAAAwgB,WAAA5rB,IAAA,SAEOu+F,EAAAv6F,GAAA,OAEPoH,KAAAwgB,WAAA5rB,IAAA,UAIAkmG,EAAAlmG,IAAAu+F,EAAAt6F,EAAA,GAAAs6F,EAAAx6F,GAAA5D,YAEAoiG,EAAAthG,KAAAwjG,KAAAlG,EAAAv6F,GAEAoH,KAAAwgB,WAAAM,iBAAAg6E,EAAA3D,QAQAjE,GAAAnzF,UAAA0zF,UAAA,SAAAx+F,EAAAm+F,EAAAC,GAEA56F,SAAA26F,MAAA,GAAAn+F,GACAwD,SAAA46F,MAAA,GAAAD,GAEApzF,KAAAwb,KAAApT,MAAAxT,IAAA,EAAAiB,KAAA6S,IAAA,EAAAzT,EAAAm+F,GAAA,GACApzF,KAAAwb,KAAAwmE,eAEAhiF,KAAA2xF,KAAAvpF,MAAAxT,IAAAy+F,EAAAD,EAAAC,GACArzF,KAAA2xF,KAAA71F,SAAAlD,EAAA3D,EACA+K,KAAA2xF,KAAA3P,gBAIAkR,GAAAnzF,UAAAm+I,SAAA,SAAA/zI,GAEAnK,KAAAwb,KAAA/R,SAAAU,MAAA/N,KAAA+N,GACAnK,KAAA2xF,KAAAloF,SAAAU,MAAA/N,KAAA+N,IAmCAupF,GAAA3zF,UAAAG,OAAAmpB,OAAAsY,GAAA5hC,WACA2zF,GAAA3zF,UAAAwpB,YAAAmqE,GAaA5iG,EAAA8iG,iBAAA,WAkBA,QAAAuqD,MAhBA,GACAl8I,GAAA,GAAA+M,GACAouE,EAAA,GAAA+gE,GACA9gE,EAAA,GAAA8gE,GACA7gE,EAAA,GAAA6gE,EAgEA,OAxCAA,GAAAp+I,UAAAhB,KAAA,SAAAo1B,EAAAE,EAAAqpF,EAAAC,GAEA39G,KAAAo+I,GAAAjqH,EACAn0B,KAAA06F,GAAAgjB,EACA19G,KAAA26F,GAAA,GAAAxmE,EAAA,EAAAE,EAAA,EAAAqpF,EAAAC,EACA39G,KAAA46F,GAAA,EAAAzmE,EAAA,EAAAE,EAAAqpF,EAAAC,GAIAwgC,EAAAp+I,UAAAs+I,yBAAA,SAAAlqH,EAAAE,EAAAE,EAAA+pH,EAAAC,EAAAC,EAAAC,GAGA,GAAA9gC,IAAAtpF,EAAAF,GAAAoqH,GAAAhqH,EAAAJ,IAAAoqH,EAAAC,IAAAjqH,EAAAF,GAAAmqH,EACAxvD,GAAAz6D,EAAAF,GAAAmqH,GAAAF,EAAAjqH,IAAAmqH,EAAAC,IAAAH,EAAA/pH,GAAAkqH,CAGA9gC,IAAA6gC,EACAxvD,GAAAwvD,EAGAx+I,KAAAjB,KAAAs1B,EAAAE,EAAAopF,EAAA3uB,IAKAmvD,EAAAp+I,UAAA2+I,eAAA,SAAAvqH,EAAAE,EAAAE,EAAA+pH,EAAAK,GAEA3+I,KAAAjB,KAAAs1B,EAAAE,EAAAoqH,GAAApqH,EAAAJ,GAAAwqH,GAAAL,EAAAjqH,KAIA8pH,EAAAp+I,UAAA6+I,KAAA,SAAAzpI,GAEA,GAAA65E,GAAA75E,IACA85E,EAAAD,EAAA75E,CACA,OAAAnV,MAAAo+I,GAAAp+I,KAAA06F,GAAAvlF,EAAAnV,KAAA26F,GAAA3L,EAAAhvF,KAAA46F,GAAA3L,GAKA7J,GAAA/7D,OAEA,SAAAh4B,GAEA2O,KAAAmxE,OAAA9/E,MACA2O,KAAAi6E,QAAA,GAIA,SAAA9kE,GAEA,GACA+5C,GAAAggC,EAAA/B,EAAA5gE,EADA4kD,EAAAnxE,KAAAmxE,MAGA5kD,GAAA4kD,EAAAl8E,OAIAi6D,GAAA3iC,GAAAvsB,KAAAi6E,OAAA,MAAA9kE,EACA+5E,EAAAr5F,KAAA8S,MAAAumD,GACAi+B,EAAAj+B,EAAAggC,EAEAlvF,KAAAi6E,OAEAiV,KAAA,KAAAr5F,KAAA8S,MAAA9S,KAAA6C,IAAAw2F,GAAA/d,EAAAl8E,QAAA,GAAAk8E,EAAAl8E,OAEQ,IAAAk4F,GAAA+B,IAAA3iE,EAAA,IAER2iE,EAAA3iE,EAAA,EACA4gE,EAAA,EAIA,IAAA10C,GAAAC,EAAAC,EAAAC,CA6BA,IA3BA54C,KAAAi6E,QAAAiV,EAAA,EAEAz2C,EAAA04B,GAAA+d,EAAA,GAAA3iE,IAKAtqB,EAAA6gB,WAAAquD,EAAA,GAAAA,EAAA,IAAAr2E,IAAAq2E,EAAA,IACA14B,EAAAx2C,GAIAy2C,EAAAy4B,EAAA+d,EAAA3iE,GACAosB,EAAAw4B,GAAA+d,EAAA,GAAA3iE,GAEAvsB,KAAAi6E,QAAA1tD,EAAA2iE,EAAA,EAEAt2C,EAAAu4B,GAAA+d,EAAA,GAAA3iE,IAKAtqB,EAAA6gB,WAAAquD,EAAA5kD,EAAA,GAAA4kD,EAAA5kD,EAAA,IAAAzxB,IAAAq2E,EAAA5kD,EAAA,IACAqsB,EAAA32C,GAIAxJ,SAAAuH,KAAAmF,MAAA,gBAAAnF,KAAAmF,MAAA,YAAAnF,KAAAmF,KAAA,CAGA,GAAAyV,GAAA,YAAA5a,KAAAmF,KAAA,OACAo5I,EAAA1oJ,KAAA+kB,IAAA69B,EAAAlwB,kBAAAmwB,GAAA99B,GACA4jI,EAAA3oJ,KAAA+kB,IAAA89B,EAAAnwB,kBAAAowB,GAAA/9B,GACA6jI,EAAA5oJ,KAAA+kB,IAAA+9B,EAAApwB,kBAAAqwB,GAAAh+B,EAGA,MAAA4jI,MAAA,GACA,KAAAD,MAAAC,GACA,KAAAC,MAAAD,GAEAphE,EAAAihE,yBAAA5lG,EAAA9/C,EAAA+/C,EAAA//C,EAAAggD,EAAAhgD,EAAAigD,EAAAjgD,EAAA4lJ,EAAAC,EAAAC,GACAphE,EAAAghE,yBAAA5lG,EAAA7/C,EAAA8/C,EAAA9/C,EAAA+/C,EAAA//C,EAAAggD,EAAAhgD,EAAA2lJ,EAAAC,EAAAC,GACAnhE,EAAA+gE,yBAAA5lG,EAAA5/C,EAAA6/C,EAAA7/C,EAAA8/C,EAAA9/C,EAAA+/C,EAAA//C,EAAA0lJ,EAAAC,EAAAC,OAEQ,mBAAAz+I,KAAAmF,KAAA,CAER,GAAAw5I,GAAAlmJ,SAAAuH,KAAA2+I,QAAA3+I,KAAA2+I,QAAA,EACAvhE,GAAAshE,eAAAjmG,EAAA9/C,EAAA+/C,EAAA//C,EAAAggD,EAAAhgD,EAAAigD,EAAAjgD,EAAAgmJ,GACAthE,EAAAqhE,eAAAjmG,EAAA7/C,EAAA8/C,EAAA9/C,EAAA+/C,EAAA//C,EAAAggD,EAAAhgD,EAAA+lJ,GACArhE,EAAAohE,eAAAjmG,EAAA5/C,EAAA6/C,EAAA7/C,EAAA8/C,EAAA9/C,EAAA+/C,EAAA//C,EAAA8lJ,GAIA,GAAA/1H,GAAA,GAAA5Z,GACAouE,EAAAwhE,KAAAzxD,GACA9P,EAAAuhE,KAAAzxD,GACA7P,EAAAshE,KAAAzxD,GAGA,OAAAvkE,QAuBA+qE,GAAA5zF,UAAAG,OAAAmpB,OAAAv4B,EAAA8iG,iBAAA7zF,UAOA,IAAA8+I,IAAAz5D,GAAA/7D,OAEA,SAAA8nD,GAGAnxE,KAAAmxE,OAAA14E,SAAA04E,QAIA,SAAAh8D,GAEA,GAAAg8D,GAAAnxE,KAAAmxE,OACAjiB,GAAAiiB,EAAAl8E,OAAA,GAAAkgB,EAEA+5E,EAAAr5F,KAAA8S,MAAAumD,GACAi+B,EAAAj+B,EAAAggC,EAEAm6C,EAAAl4D,EAAA,GAAA+d,MAAA,GACAo6C,EAAAn4D,EAAA+d,GACAq6C,EAAAp4D,EAAA+d,EAAA/d,EAAAl8E,OAAA,EAAAk8E,EAAAl8E,OAAA,EAAAi6F,EAAA,GACAs6C,EAAAr4D,EAAA+d,EAAA/d,EAAAl8E,OAAA,EAAAk8E,EAAAl8E,OAAA,EAAAi6F,EAAA,GAEAH,EAAAj+F,EAAA+3I,WAAA95C,WAEA,WAAA//E,GACA+/E,EAAAs6C,EAAA1wI,EAAA2wI,EAAA3wI,EAAA4wI,EAAA5wI,EAAA6wI,EAAA7wI,EAAAw0F,GACA4B,EAAAs6C,EAAAzwI,EAAA0wI,EAAA1wI,EAAA2wI,EAAA3wI,EAAA4wI,EAAA5wI,EAAAu0F,GACA4B,EAAAs6C,EAAAxwI,EAAAywI,EAAAzwI,EAAA0wI,EAAA1wI,EAAA2wI,EAAA3wI,EAAAs0F,KAWAr8F,GAAAguJ,kBAAA15D,GAAA/7D,OAEA,SAAA+L,EAAApH,EAAA6B,EAAA0B,GAEAvxB,KAAAo1B,KACAp1B,KAAAguB,KACAhuB,KAAA6vB,KACA7vB,KAAAuxB,MAIA,SAAApc,GAEA,GAAA6+G,GAAAljI,EAAAm8H,WAAA+G,EAEA,WAAAhlH,GACAglH,EAAA7+G,EAAAnV,KAAAo1B,GAAAz8B,EAAAqH,KAAAguB,GAAAr1B,EAAAqH,KAAA6vB,GAAAl3B,EAAAqH,KAAAuxB,GAAA54B,GACAq7H,EAAA7+G,EAAAnV,KAAAo1B,GAAAx8B,EAAAoH,KAAAguB,GAAAp1B,EAAAoH,KAAA6vB,GAAAj3B,EAAAoH,KAAAuxB,GAAA34B,GACAo7H,EAAA7+G,EAAAnV,KAAAo1B,GAAAv8B,EAAAmH,KAAAguB,GAAAn1B,EAAAmH,KAAA6vB,GAAAh3B,EAAAmH,KAAAuxB,GAAA14B,MAWA/H,EAAAiuJ,sBAAA35D,GAAA/7D,OAEA,SAAA+L,EAAApH,EAAA6B,GAEA7vB,KAAAo1B,KACAp1B,KAAAguB,KACAhuB,KAAA6vB,MAIA,SAAA1a,GAEA,GAAAohF,GAAAzlG,EAAAm8H,WAAA12B,EAEA,WAAAvnF,GACAunF,EAAAphF,EAAAnV,KAAAo1B,GAAAz8B,EAAAqH,KAAAguB,GAAAr1B,EAAAqH,KAAA6vB,GAAAl3B,GACA49F,EAAAphF,EAAAnV,KAAAo1B,GAAAx8B,EAAAoH,KAAAguB,GAAAp1B,EAAAoH,KAAA6vB,GAAAj3B,GACA29F,EAAAphF,EAAAnV,KAAAo1B,GAAAv8B,EAAAmH,KAAAguB,GAAAn1B,EAAAmH,KAAA6vB,GAAAh3B,MAWA/H,EAAAkuJ,WAAA55D,GAAA/7D,OAEA,SAAA2E,EAAA6B,GAEA7vB,KAAAguB,KACAhuB,KAAA6vB,MAIA,SAAA1a,GAEA,OAAAA,EAEA,MAAAnV,MAAA6vB,GAAA1I,OAIA,IAAA6W,GAAA,GAAAhvB,EAMA,OAJAgvB,GAAAlb,WAAA9iB,KAAA6vB,GAAA7vB,KAAAguB,IACAgQ,EAAAxkB,eAAArE,GACA6oB,EAAAljC,IAAAkF,KAAAguB,IAEAgQ,IAgBA61D,GAAA9zF,UAAAG,OAAAmpB,OAAAo8D,GAAA1lF,WACA8zF,GAAA9zF,UAAAwpB,YAAAsqE,GAMA/iG,EAAAmuJ,YAEAC,0BAAA,SAAAhyI,EAAAjP,GAIA,OAFAoiC,GAAA,GAAA22C,IAEA1lF,EAAA,EAAAi7B,EAAAtuB,EAAAhJ,OAA4Cs3B,EAAAj7B,EAAOA,IAEnD+uC,EAAAvlC,IAAA,GAAA1F,IAAA8X,EAAAjP,EAAA3M,IAIA,OAAA+uC,IAIA8+G,OAAA,SAAAl/B,EAAA/rH,EAAAgB,GAEA+qH,EAAA3rG,YAAApgB,EAAAQ,aACAR,EAAAqR,OAAA06G,GACA/qH,EAAA4F,IAAAmlH,IAIAm/B,OAAA,SAAAn/B,EAAA/qH,EAAAhB,GAEA,GAAAua,GAAA,GAAAD,EACAC,GAAAC,WAAAxa,EAAAQ,aACAurH,EAAA3rG,YAAA7F,GAEAvZ,EAAAqQ,OAAA06G,GACA/rH,EAAA4G,IAAAmlH,IAWA,IAAAo/B,IAAA,EAEAC,GAAA,CA8CAp/I,QAAA+J,OAAAkuB,EAAAp4B,WACA0pB,OAAA,SAAA4jF,GAEA,MAAArtG,MAAAg4G,UAAA3K,IAEAqM,MAAA,WAEA,MAAA15G,MAAAs5B,WAEAimH,kBAAA,SAAAvsD,GAEA,MAAAhzF,MAAAs6B,cAAA04D,IAEAv+E,KAAA,SAAA44F,GAEA,MAAArtG,MAAA2rB,QAAA0hF,MAIAntG,OAAA+J,OAAAozB,GAAAt9B,WACA0pB,OAAA,SAAA4jF,GAEA,MAAArtG,MAAAg4G,UAAA3K,IAEAqM,MAAA,WAEA,MAAA15G,MAAAs5B,WAEAimH,kBAAA,SAAAvsD,GAEA,MAAAhzF,MAAAs6B,cAAA04D,IAEAwsD,qBAAA,SAAAthI,GAEA,MAAAle,MAAAwlE,iBAAAtnD,IAEAzJ,KAAA,SAAA44F,GAEA,MAAArtG,MAAA2rB,QAAA0hF,MAIAntG,OAAA+J,OAAA80C,GAAAh/C,WACA0pB,OAAA,SAAA4jF,GAEA,MAAArtG,MAAAg4G,UAAA3K,MAIAntG,OAAA+J,OAAAogB,GAAAtqB,WACA0/I,gBAAA,SAAAzhH,GAEA,MAAAA,GAAAtK,aAAA1zB,OAEA0/I,qBAAA,SAAA/tJ,GAEA,MAAAqO,MAAAwjG,oBAAA7xG,MAIAuO,OAAA+J,OAAAuE,EAAAzO,WACA4/I,gBAAA,SAAAxuJ,GAEA,MAAA6O,MAAAisB,aAAA96B,IAEAyuH,0BAAA,SAAA1kC,GAEA,MAAAl7E,MAAAihG,2BAAA/lB,IAEAukE,gBAAA,SAAAzhH,GAEA,MAAAA,GAAAqB,gBAAAr/B,OAEA4/I,gBAAA,SAAA5hH,GAEA,MAAAA,GAAAS,aAAAz+B,OAEA0/I,qBAAA,SAAA/tJ,GAEA,MAAAqO,MAAAwjG,oBAAA7xG,IAEAkuJ,WAAA,SAAAj3H,GAEAA,EAAA4iD,mBAAAxrE,OAEA8/I,YAAA,SAAA9hH,GAEA,MAAAA,GAAAS,aAAAz+B,OAEAuvB,UAAA,SAAA3G,KAGA7Y,QAAA,SAAAC,KAGAE,QAAA,SAAAF,KAGAG,QAAA,SAAAH,KAGA+vI,aAAA,SAAAjlD,EAAA9qF,OAKA9P,OAAA+J,OAAAsuC,GAAAx4C,WACAigJ,mBAAA,SAAAxkI,GAEA,MAAAxb,MAAA26G,eAAAn/F,MAIAtb,OAAA+J,OAAAsG,EAAAxQ,WACA0/I,gBAAA,SAAAzhH,GAEA,MAAAA,GAAA/V,gBAAAjoB,SAIAE,OAAA+J,OAAAwgB,GAAA1qB,WACAw/I,kBAAA,SAAAvsD,GAEA,MAAAhzF,MAAAs6B,cAAA04D,IAEAitD,oBAAA,SAAAp+E,GAEA,MAAA7hE,MAAAs5G,gBAAAz3C,IAEA29E,qBAAA,SAAAthI,GAEA,MAAAle,MAAAwlE,iBAAAtnD,MAIAhe,OAAA+J,OAAAo8E,GAAAtmF,WACAmgJ,QAAA,SAAArgJ,GAEA,UAAA08E,IAAAv8E,KAAAH,IAEAsgJ,aAAA,SAAAtgJ,GAEA,UAAA2+E,IAAAx+E,KAAAH,MAIAK,OAAA+J,OAAA+E,EAAAjP,WACAqgJ,2BAAA,aAGAC,uBAAA,aAGAC,sBAAA,SAAAnvJ,GAEA,MAAA6O,MAAAxL,sBAAArD,IAEAovJ,mBAAA,SAAApvJ,GAEA,MAAA6O,MAAA4+F,mBAAAztG,IAEAqvJ,oBAAA,SAAAl6I,EAAA6iB,GAEA,MAAAnpB,MAAA8oB,oBAAAK,EAAA7iB,MAMApG,OAAA+J,OAAAwG,GAAA1Q,WACA0gJ,eAAA,SAAAlmJ,GAEA,MAAAyF,MAAA2X,gBAAApd,IAEAmmJ,YAAA,SAAA7mI,KAGA0V,UAAA,SAAAtiB,EAAA6tF,GAEA,MAAA96F,MAAA6/G,gBAAA/kB,EAAA7tF,MAIA/M,OAAAspB,iBAAA/Y,GAAA1Q,WACA4gJ,YACAvgJ,IAAA,WAEA,MAAAJ,MAAAjE,SAAAyuB,OAEA51B,IAAA,SAAAilB,GAEA7Z,KAAAjE,SAAAyuB,MAAA3Q,IAGA+mI,eACAxgJ,IAAA,aAGAxL,IAAA,SAAAilB,QAMA3Z,OAAAspB,iBAAAgsD,GAAAz1E,WACAqrB,SACAhrB,IAAA,WAEA,MAAAJ,MAAAy1E,WAOA/6E,GAAAqF,UAAA8gJ,QAAA,SAAA92B,EAAArlE,GAKAjsD,SAAAisD,IAAA1kD,KAAA0kD,aACA1kD,KAAAnF,eAAAkvH,IAMA7pH,OAAAspB,iBAAAgW,GAAAz/B,WACA+gJ,YACAlsJ,IAAA,SAAAilB,MAIAknI,iBACAnsJ,IAAA,SAAAilB,GAEA7Z,KAAAi9C,OAAAxoD,OAAAy0B,IAAArP,IAGA1c,kBACAvI,IAAA,SAAAilB,GAEA7Z,KAAAi9C,OAAAxoD,OAAA4iB,KAAAwC,IAGAzc,mBACAxI,IAAA,SAAAilB,GAEA7Z,KAAAi9C,OAAAxoD,OAAA6iB,MAAAuC,IAGAxc,iBACAzI,IAAA,SAAAilB,GAEA7Z,KAAAi9C,OAAAxoD,OAAA+iB,IAAAqC,IAGAvc,oBACA1I,IAAA,SAAAilB,GAEA7Z,KAAAi9C,OAAAxoD,OAAA20B,OAAAvP,IAGArc,kBACA5I,IAAA,SAAAilB,GAEA7Z,KAAAi9C,OAAAxoD,OAAA2G,KAAAye,IAGAtc,iBACA3I,IAAA,SAAAilB,GAEA7Z,KAAAi9C,OAAAxoD,OAAA4G,IAAAwe,IAGA7c,qBACApI,IAAA,SAAAilB,MAIA6rC,YACA9wD,IAAA,SAAAilB,GAEA7Z,KAAAi9C,OAAAwuB,KAAA5xD,IAGApc,gBACA7I,IAAA,SAAAilB,MAIA5c,gBACArI,IAAA,SAAAilB,GAEA7Z,KAAAi9C,OAAAC,QAAAhmD,MAAA2iB,IAGA3c,iBACAtI,IAAA,SAAAilB,GAEA7Z,KAAAi9C,OAAAC,QAAA/lD,OAAA0iB,MAOA3Z,OAAAspB,iBAAAk2B,GAAA3/C,WACA9K,QACAmL,IAAA,WAEA,MAAAJ,MAAAmgC,MAAAlrC,WAKAiL,OAAA+J,OAAA81B,GAAAhgC,WACAihJ,SAAA,SAAA16I,GAEAtG,KAAAikD,SAAA39C,IAEA26I,YAAA,SAAAvqJ,EAAA4Z,EAAAkrE,GAKAx7E,KAAA6jD,SAAAntD,EAAA4Z,IAEA4wI,eAAA,WAEAlhJ,KAAAqnH,eAEAxD,gBAAA,aAGAs9B,eAAA,eAKAjhJ,OAAAspB,iBAAAuW,GAAAhgC,WACAohI,WACA/gI,IAAA,WAEA,MAAAJ,MAAAigC,SAGAmhG,SACAhhI,IAAA,WAEA,MAAAJ,MAAAigC,WAOA//B,OAAAspB,iBAAA3f,EAAA9J,WACAqhJ,YACAhhJ,IAAA,aAGAxL,IAAA,SAAAilB,MAIAwnI,SACAjhJ,IAAA,WAEA,UAAAgO,OAKAlO,OAAAspB,iBAAAxe,GAAAjL,WACA+L,OACA1L,IAAA,WAEA,UAEAxL,IAAA,SAAAilB,QAMA3Z,OAAAspB,iBAAA6tB,EAAAt3C,WACA43C,aACAv3C,IAAA,WAEA,MAAAJ,MAAA03C,WAAAC,aAEA/iD,IAAA,SAAAilB,GAEA7Z,KAAA03C,WAAAC,YAAA99B,MAOAyP,EAAAvpB,UAAAG,OAAA+J,OAAA/J,OAAAmpB,QAIAE,YAAAD,EAEAz3B,MAAA,SAAAwD,GAKA6K,OAAA+J,OAAA5U,EAAA2K,SAIKspB,EAAAvpB,WAILG,OAAA+J,OAAAhQ,GAAA8F,WACAuhJ,sBAAA,WAEA,MAAAthJ,MAAA03C,WAAAt3C,IAAA,sBAEAmhJ,0BAAA,WAEA,MAAAvhJ,MAAA03C,WAAAt3C,IAAA,2BAEAohJ,4BAAA,WAEA,MAAAxhJ,MAAA03C,WAAAt3C,IAAA,6BAEAqhJ,8BAAA,WAEA,MAAAzhJ,MAAA03C,WAAAt3C,IAAA,kCAEAshJ,+BAAA,WAEA,MAAA1hJ,MAAA03C,WAAAt3C,IAAA,mCAEAuhJ,oBAAA,WAEA,MAAA3hJ,MAAA03C,WAAAt3C,IAAA,qBAEAo4B,uBAAA,WACA,MAAAx4B,MAAAm5C,aAAAuV,gBAEAkzF,wBAAA,WAEA,MAAA5hJ,MAAA03C,WAAAt3C,IAAA,2BAEAqmC,kBAAA,SAAAyrC,GAEAlyE,KAAA+4B,eAAAm5C,IAEA/L,aAAA,aAGA07E,aAAA,aAGAC,cAAA,aAGAC,gBAAA,eAKA7hJ,OAAAspB,iBAAAvvB,GAAA8F,WACAkrD,kBACA7qD,IAAA,WACA,MAAAJ,MAAAw9C,UAAAjiD,SAEA3G,IAAA,SAAAilB,GAEA7Z,KAAAw9C,UAAAjiD,QAAAse,IAGAyvC,eACAlpD,IAAA,WACA,MAAAJ,MAAAw9C,UAAAr4C,MAEAvQ,IAAA,SAAAilB,GAEA7Z,KAAAw9C,UAAAr4C,KAAA0U,IAGAmoI,mBACA5hJ,IAAA,WACA,MAAAJ,MAAAw9C,UAAAqgB,UAEAjpE,IAAA,SAAAilB,GAEA7Z,KAAAw9C,UAAAqgB,SAAAhkD,MAKA3Z,OAAAspB,iBAAAwvB,GAAAj5C,WACA89D,UACAz9D,IAAA,WACA,MAAAJ,MAAA66C,mBAAAojB,GAAAhD,IAEArmE,IAAA,SAAAipE,GACA,GAAAhkD,GAAAgkD,IAAA5C,EAEAj7D,MAAA66C,mBAAAhhC,MAOA3Z,OAAAspB,iBAAA6c,EAAAtmC,WACA8M,OACAzM,IAAA,WAEA,MAAAJ,MAAA6I,QAAAgE,OAEAjY,IAAA,SAAAilB,GAEA7Z,KAAA6I,QAAAgE,MAAAgN,IAGA/M,OACA1M,IAAA,WAEA,MAAAJ,MAAA6I,QAAAiE,OAEAlY,IAAA,SAAAilB,GAEA7Z,KAAA6I,QAAAiE,MAAA+M,IAGA6uB,WACAtoC,IAAA,WAEA,MAAAJ,MAAA6I,QAAA6/B,WAEA9zC,IAAA,SAAAilB,GAEA7Z,KAAA6I,QAAA6/B,UAAA7uB,IAGAoD,WACA7c,IAAA,WAEA,MAAAJ,MAAA6I,QAAAoU,WAEAroB,IAAA,SAAAilB,GAEA7Z,KAAA6I,QAAAoU,UAAApD,IAGA8uB,YACAvoC,IAAA,WAEA,MAAAJ,MAAA6I,QAAA8/B,YAEA/zC,IAAA,SAAAilB,GAEA7Z,KAAA6I,QAAA8/B,WAAA9uB,IAGArJ,QACApQ,IAAA,WAEA,MAAAJ,MAAA6I,QAAA2H,QAEA5b,IAAA,SAAAilB,GAEA7Z,KAAA6I,QAAA2H,OAAAqJ,IAGAtO,QACAnL,IAAA,WAEA,MAAAJ,MAAA6I,QAAA0C,QAEA3W,IAAA,SAAAilB,GAEA7Z,KAAA6I,QAAA0C,OAAAsO,IAGAgF,QACAze,IAAA,WAEA,MAAAJ,MAAA6I,QAAAgW,QAEAjqB,IAAA,SAAAilB,GAEA7Z,KAAA6I,QAAAgW,OAAAhF,IAGA1U,MACA/E,IAAA,WAEA,MAAAJ,MAAA6I,QAAA1D,MAEAvQ,IAAA,SAAAilB,GAEA7Z,KAAA6I,QAAA1D,KAAA0U,IAGAsD,iBACA/c,IAAA,WAEA,MAAAJ,MAAA6I,QAAAsU,iBAEAvoB,IAAA,SAAAilB,GAEA7Z,KAAA6I,QAAAsU,gBAAAtD,MAOA3Z,OAAA+J,OAAAkQ,GAAApa,WACAqa,KAAA,SAAA3N,GAEA,GAAAiT,GAAA1f,KACAiiJ,EAAA,GAAA/6D,GAIA,OAHA+6D,GAAA7nI,KAAA3N,EAAA,SAAA+jD,GACA9wC,EAAAkvH,UAAAp+E,KAEAxwD,QAIAE,OAAA+J,OAAAg/E,GAAAlpF,WACAmiJ,QAAA,SAAAz1I,GAEA,MAAAzM,MAAAgwI,qBAMA,IAAAmS,KAEA7hE,MAAA,SAAA8hE,EAAAzjE,EAAAolC,GAIA,GAAA56F,EAEAw1D,GAAAxjC,SAEAwjC,EAAAjgC,kBAAAigC,EAAAqD,eAEA74D,EAAAw1D,EAAAx1D,OACAw1D,IAAAzxE,UAIAk1I,EAAA9hE,MAAA3B,EAAAx1D,EAAA46F,IAIAt6F,OAAA,SAAAvc,GAGA,MAAAA,GAAAuc,WAMA3rB,IAEAC,YAAAtF,OAEAgd,YAAA,SAAA9I,EAAAzE,EAAA04E,EAAAE,GAIA,GAAA44C,GAAA,GAAA53C,GACA43C,GAAAM,eAAAh6H,KAAAjC,YAEA,IAAA8K,GAAA6wH,EAAAt/G,KAAAzN,EAAAi0E,EAAAnoF,OAAAqoF,EAIA,OAFA54E,KAAAW,EAAAX,WAEAW,GAIAw5I,gBAAA,SAAApoB,EAAA/xH,EAAA04E,EAAAE,GAIA,GAAA44C,GAAA,GAAA73C,GACA63C,GAAAM,eAAAh6H,KAAAjC,YAEA,IAAA8K,GAAA6wH,EAAAt/G,KAAA6/G,EAAAr5C,EAAAnoF,OAAAqoF,EAIA,OAFA54E,KAAAW,EAAAX,WAEAW,GAIAy5I,sBAAA,aAMAC,0BAAA,aAkDAriJ,QAAAC,eAAArP,EAAA,gBACAsP,IAAA,WACA,MAAAtP,GAAAi2F,qBAIAj2F,EAAAm5C,wBACAn5C,EAAAu1C,oBACAv1C,EAAAmJ,iBACAnJ,EAAA0rD,aACA1rD,EAAAyvF,eACAzvF,EAAAg4D,eACAh4D,EAAAukF,WACAvkF,EAAAwkF,OACAxkF,EAAAuJ,SACAvJ,EAAAykF,aACAzkF,EAAA4uC,UACA5uC,EAAA0kF,OACA1kF,EAAAulF,eACAvlF,EAAA4kF,YACA5kF,EAAAqlF,QACArlF,EAAAsE,QACAtE,EAAA6wC,gBACA7wC,EAAAgqB,QACAhqB,EAAAimF,UACAjmF,EAAAkmF,SACAlmF,EAAA8tB,gBACA9tB,EAAA8jC,eACA9jC,EAAA6jC,qBACA7jC,EAAA25C,cACA35C,EAAAomF,iBACApmF,EAAAqmF,gBACArmF,EAAA+3C,iBACA/3C,EAAA0Y,UACA1Y,EAAAmlD,kBACAnlD,EAAA2wF,2BACA3wF,EAAA6wF,uBACA7wF,EAAAgpI,qBACAhpI,EAAA+wF,qBACA/wF,EAAAgxF,iBACAhxF,EAAAo0F,gBACAp0F,EAAA4zF,kBACA5zF,EAAA6zF,wBACA7zF,EAAA6vF,kBACA7vF,EAAAk0F,cACAl0F,EAAA8wF,eACA9wF,EAAAg2F,cACAh2F,EAAAwwF,aACAxwF,EAAA8zF,UACA9zF,EAAAo2F,eACAp2F,EAAAoxF,mBACApxF,EAAAqxF,aACArxF,EAAA28B,cACA38B,EAAAixF,mBACAjxF,EAAAuxF,0BACAvxF,EAAAgM,oBACAhM,EAAA4M,gBACA5M,EAAAmxF,eACAnxF,EAAA0uC,SACA1uC,EAAAq2F,gBACAr2F,EAAA4J,qBACA5J,EAAA+wB,sBACA/wB,EAAAy2F,cACAz2F,EAAAgpC,UACAhpC,EAAAiK,iBACAjK,EAAAg4F,mBACAh4F,EAAAi2F,mBACAj2F,EAAAm4F,iBACAn4F,EAAAqpB,SACArpB,EAAAizF,uBACAjzF,EAAAqzF,uBACArzF,EAAAmzF,2BACAnzF,EAAAozF,uBACApzF,EAAAuzF,sBACAvzF,EAAAszF,wBACAtzF,EAAA04F,iBACA14F,EAAAq5F,mBACAr5F,EAAAwzF,iBACAxzF,EAAA45F,wBACA55F,EAAA48F,kBACA58F,EAAAyzF,iBACAzzF,EAAAg9F,WACAh9F,EAAAi9F,2BACAj9F,EAAAivC,kBACAjvC,EAAAmwD,mBACAnwD,EAAAwvC,YACAxvC,EAAAk9F,8BACAl9F,EAAAq9F,8BACAr9F,EAAAo9F,qBACAp9F,EAAAs9F,4BACAt9F,EAAAiwD,0BACAjwD,EAAA+vD,oBACA/vD,EAAA8vD,oBACA9vD,EAAA4vD,mBACA5vD,EAAA2vD,kBACA3vD,EAAA0vD,mBACA1vD,EAAAwvD,kBACAxvD,EAAAsvD,yBACAtvD,EAAAovD,kBACApvD,EAAAkvD,iBACAlvD,EAAA4uD,mBACA5uD,EAAAmuD,SACAnuD,EAAAytD,mBACAztD,EAAA2f,YACA3f,EAAA+M,aACA/M,EAAAqtD,UACArtD,EAAAw4B,kBACAx4B,EAAA29F,SACA39F,EAAAkzF,+BACAlzF,EAAAoyF,qBACApyF,EAAAqyF,uBACAryF,EAAA+xF,oBACA/xF,EAAAwxF,eACAxxF,EAAAkuD,YACAluD,EAAAg+F,UACAh+F,EAAA43B,aACA53B,EAAAynD,SACAznD,EAAAyd,WACAzd,EAAAwnD,UACAxnD,EAAA25B,OACA35B,EAAA0d,UACA1d,EAAAu5B,WACAv5B,EAAAusC,QACAvsC,EAAAqnC,OACArnC,EAAAiuD,SACAjuD,EAAAuvB,SACAvvB,EAAAw5B,UACAx5B,EAAAke,UACAle,EAAA8b,UACA9b,EAAAyf,aACAzf,EAAAsd,QACAtd,EAAA8/F,kBACA9/F,EAAAugG,yBACAvgG,EAAAygG,uBACAzgG,EAAA4gG,mBACA5gG,EAAA8gG,kBACA9gG,EAAAihG,oBACAjhG,EAAAmhG,yBACAnhG,EAAA6jB,cACA7jB,EAAAshG,qBACAthG,EAAAuhG,0BACAvhG,EAAAwhG,gBACAxhG,EAAAiiG,qBACAjiG,EAAAmiG,aACAniG,EAAAoiG,eACApiG,EAAA4iG,cACA5iG,EAAA6iG,sBACA7iG,EAAA+tJ,gBACA/tJ,EAAA+iG,YACA/iG,EAAA20F,gBACA30F,EAAAo1F,eACAp1F,EAAAq1F,oBACAr1F,EAAAs1F,wBACAt1F,EAAAu0F,aACAv0F,EAAAu1F,SACAv1F,EAAA41F,aACA51F,EAAAw1F,QACAx1F,EAAA+1F,QACA/1F,EAAAw0F,aACAx0F,EAAAs0F,SACAt0F,EAAAsmF,qBACAtmF,EAAAknF,sBACAlnF,EAAA8oF,uBACA9oF,EAAA+oF,sBACA/oF,EAAAgpF,uBACAhpF,EAAAipF,wBACAjpF,EAAA8nF,sBACA9nF,EAAAkpF,gBACAlpF,EAAAqrF,qBACArrF,EAAAmqF,2BACAnqF,EAAAssB,iBACAtsB,EAAAwrF,uBACAxrF,EAAA4rF,gBACA5rF,EAAAmsF,wBACAnsF,EAAA2lB,kBACA3lB,EAAAktF,gBACAltF,EAAA0sF,sBACA1sF,EAAAukB,uBACAvkB,EAAAmtF,iBACAntF,EAAAytF,iBACAztF,EAAAotF,uBACAptF,EAAA0tF,iBACA1tF,EAAAyrF,mBACAzrF,EAAA2tF,iBACA3tF,EAAAkvF,gBACAlvF,EAAAmvF,sBACAnvF,EAAA+iB,oBACA/iB,EAAAouF,0BACApuF,EAAAovF,wBACApvF,EAAAqjB,kBACArjB,EAAAuxD,qBACAvxD,EAAA4iB,eACA5iB,EAAAuvF,kBACAvvF,EAAA09B,kBACA19B,EAAA0vF,qBACA1vF,EAAAumD,iBACAvmD,EAAAo9D,kBACAp9D,EAAAqnB,iBACArnB,EAAAm9D,wBACAn9D,EAAAk9D,wBACAl9D,EAAAka,qBACAla,EAAAoa,sBACApa,EAAAiZ,uBACAjZ,EAAAsa,oBACAta,EAAAga,qBACAha,EAAAogC,sBACApgC,EAAAm/B,qBACAn/B,EAAA+Y,WACA/Y,EAAAgkG,YACAhkG,EAAAm2B,SACAn2B,EAAAgtE,gBACAhtE,EAAAmqE,gBACAnqE,EAAAmtE,iBACAntE,EAAAikG,qBACAjkG,EAAA6jF,wBACA7jF,EAAAkkG,yBACAlkG,EAAAmkG,kBACAnkG,EAAAgsD,gBACAhsD,EAAAy4D,oBACAz4D,EAAAqwC,aACArwC,EAAAswC,YACAtwC,EAAAykB,cACAzkB,EAAAg+D,eACAh+D,EAAAkb,iBACAlb,EAAAolD,YACAplD,EAAA0hC,cACA1hC,EAAA2/B,gBACA3/B,EAAAgrE,cACAhrE,EAAAklC,kBACAllC,EAAAolC,oBACAplC,EAAAqlC,uBACArlC,EAAAslC,oBACAtlC,EAAA6rE,kBACA7rE,EAAAokG,gBACApkG,EAAAulD,eACAvlD,EAAA48E,oBACA58E,EAAA88E,2BACA98E,EAAAg/E,eACAh/E,EAAAk/E,eACAl/E,EAAAg9E,cACAh9E,EAAAi9E,aACAj9E,EAAAk9E,kBACAl9E,EAAAm9E,0BACAn9E,EAAAqlD,kBACArlD,EAAAslD,0BACAtlD,EAAAo9E,kBACAp9E,EAAAs9E,0BACAt9E,EAAAw9E,kBACAx9E,EAAA09E,0BACA19E,EAAA49E,0BACA59E,EAAA6nE,cACA7nE,EAAA+nE,eACA/nE,EAAAioE,aACAjoE,EAAA4lD,kBACA5lD,EAAAooE,cACApoE,EAAAsoE,qBACAtoE,EAAAwoE,gBACAxoE,EAAA0oE,iBACA1oE,EAAAyuD,qBACAzuD,EAAAk5D,gBACAl5D,EAAAm5D,gBACAn5D,EAAAw6D,iBACAx6D,EAAAu2D,qBACAv2D,EAAAw2D,uBACAx2D,EAAAy2D,yBACAz2D,EAAA02D,qBACA12D,EAAAokB,aACApkB,EAAA45C,yBACA55C,EAAA64D,yBACA74D,EAAAg5D,oCACAh5D,EAAAi5D,oCACAj5D,EAAAyiC,8BACAziC,EAAA84D,2BACA94D,EAAA+4D,2BACA/4D,EAAAqkG,kBACArkG,EAAAic,kBACAjc,EAAAs4C,uBACAt4C,EAAAm7E,0BACAn7E,EAAAskG,mBACAtkG,EAAAwsD,iBACAxsD,EAAAshE,8BACAthE,EAAAuhE,6BACAvhE,EAAAstB,gBACAttB,EAAAu7E,6BACAv7E,EAAAosB,4BACApsB,EAAAukG,iBACAvkG,EAAAw4C,oBACAx4C,EAAAg8E,YACAh8E,EAAAi8E,aACAj8E,EAAAk8E,qBACAl8E,EAAAm8E,WACAn8E,EAAAo8E,mBACAp8E,EAAA8jE,aACA9jE,EAAA+jE,iBACA/jE,EAAA07E,yBACA17E,EAAA47E,yBACA57E,EAAA87E,wBACA97E,EAAAo/E,sBACAp/E,EAAAs8E,eACAt8E,EAAAguB,aACAhuB,EAAAu4C,cACAv4C,EAAAw8E,mBACAx8E,EAAA08E,wBACA18E,EAAAwkG,cACAxkG,EAAAgmE,eACAhmE,EAAA2kE,sBACA3kE,EAAA89E,wBACA99E,EAAAg+E,yBACAh+E,EAAAk+E,yBACAl+E,EAAAo+E,yBACAp+E,EAAAs+E,2BACAt+E,EAAAw+E,2BACAx+E,EAAA0+E,4BACA1+E,EAAA4+E,4BACA5+E,EAAA8+E,mBACA9+E,EAAAykG,YACAzkG,EAAA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","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ((function(modules) {\n\t// Check all modules for deduplicated modules\n\tfor(var i in modules) {\n\t\tswitch(typeof modules[i]) {\n\t\tcase \"number\":\n\t\t\t// Module is a copy of another module\n\t\t\tmodules[i] = modules[modules[i]];\n\t\t\tbreak;\n\t\tcase \"object\":\n\t\t\t// Module can be created from a template\n\t\t\tmodules[i] = (function(_m) {\n\t\t\t\tvar args = _m.slice(1), fn = modules[_m[0]];\n\t\t\t\treturn function (a,b,c) {\n\t\t\t\t\tfn.apply(null, [a,b,c].concat(args));\n\t\t\t\t};\n\t\t\t}(modules[i]));\n\t\t}\n\t}\n\treturn modules;\n}([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function () {\n\t\t'use strict';\n\t\n\t\t//global-ish declarations\n\t\tvar VR,\n\t\t\tNoSleep = __webpack_require__(10).NoSleep,\n\t\t\tisMobile = __webpack_require__(4);\n\t\n\t\tfunction initRequirements() {\n\t\t\t//load styles\n\t\t\t__webpack_require__(2);\n\t\n\t\t\tVR = __webpack_require__(1);\n\t\t}\n\t\n\t\tfunction initialize() {\n\t\t\tinitRequirements();\n\t\n\t\t\t//todo: set up button/info elements\n\t\n\t//\t\tVR.init();\n\t\n\t        VR.noSleep = new NoSleep();\n\t\t\twindow.addEventListener('resize', VR.resize, false);\n\t\n\t\t\tif (!isMobile.any) {\n\t\t\t\tVR.disableOrientation();\n\t\t\t}\n\t\n\t\t\t/*\n\t\t\texport global things\n\t\t\t*/\n\t\t\twindow.VR = VR;\n\t\t\twindow.THREE = VR.THREE;\n\t\t}\n\t\n\t\tinitialize();\n\t//\tVR.start();\n\t}());\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function () {\n\t\t'use strict';\n\t\n\t\t//constants\n\t\tvar NEAR = 1,\n\t\t\tFAR = 1000000,\n\t\n\t\t//global-ish declarations\n\t\t\tTHREE,\n\t\t\teventEmitter,\n\t\t\tmaterials = __webpack_require__(6),\n\t\t\tnop = function () {},\n\t\t\trequestFullscreen = nop,\n\t\t\texitFullscreen = (\n\t\t\t\tdocument.exitFullscreen ||\n\t\t\t\tdocument.mozCancelFullScreen ||\n\t\t\t\tdocument.webkitExitFullscreen ||\n\t\t\t\tdocument.msExitFullscreen ||\n\t\t\t\tnop\n\t\t\t).bind(document),\n\t\t// Const\n\t\t\tMODE_CSS = 'css3d',\n\t\t\tMODE_CANVAS = 'canvas',\n\t\n\t\t//scene assets\n\t\t\tcamera,\n\t\t\tscene,\n\t\t\tbody,\n\t\t\trenderer,\n\t\t\taudioListener,\n\t\t\tvrControls,\n\t\t\tvrEffect,\n\t\t\tmouseControls,\n\t        autoRotateTimer = null,\n\t\t\traycaster,\n\t\t\ttarget,\n\t\n\t\t\tbodyWrapper,\n\t\t\tcameraWrapper,\n\t\n\t\t\tfloor,\n\t\n\t\t//state\n\t\t\tgoing = false,\n\t\t\tvrMode = false,\n\t\t\torientationEnabled,\n\t\t\torientationPossible = false,\n\t\n\t\t//exported object\n\t\t\tVR,\n\t\n\t\t\tVRObject = __webpack_require__(7),\n\t\t\tobjectMethods = [\n\t\t\t\t'box',\n\t\t\t\t'cylinder',\n\t\t\t\t'torus',\n\t\t\t\t'sphere',\n\t\t\t\t'empty',\n\t\t\t\t'sound',\n\t\t\t\t'floor',\n\t\t\t\t'sky',\n\t\t\t\t'panorama',\n\t\t\t\t'image',\n\t\t\t\t'video',\n\t\t\t\t'text',\n\t\t\t\t'grid'\n\t\t\t],\n\t\n\t\t\t//todo: use a weak map or set instead\n\t\t\tvrObjects = [],\n\t\t\traycastable = [],\n\t\n\t\t\tlastTick = 0,\n\t        waitRenderInative = 0,\n\t\t\tanimationCallbacks = [];\n\t\n\t    var isSupportWebgl = (function () {\n\t        var canvas = document.createElement('canvas');\n\t        var gl = null;\n\t        var experimental = false;\n\t        try {\n\t            gl = canvas.getContext('webgl');\n\t        } catch (x) {\n\t            gl = null;\n\t        }\n\t\n\t        if (gl === null) {\n\t            try {\n\t                gl = canvas.getContext('experimental-webgl');\n\t                experimental = true;\n\t            } catch (x) {\n\t                gl = null;\n\t            }\n\t        }\n\t        return Boolean(gl);\n\t    })();\n\t\n\t    window.isSupportWebgl = isSupportWebgl;\n\t\n\t\tfunction isFullscreen() {\n\t\t\treturn !!(document.fullscreenElement ||\n\t\t\t\tdocument.mozFullScreenElement ||\n\t\t\t\tdocument.webkitFullscreenElement ||\n\t\t\t\tdocument.msFullscreenElement);\n\t\t}\n\t\n\t\tfunction fullScreenError() {\n\t\t\tvrMode = false;\n\t\t\tif (vrEffect) {\n\t\t\t\tvrEffect.exit();\n\t\t\t}\n\t\t}\n\t\n\t\tfunction pruneObject(object) {\n\t\t\tvar i = raycastable.indexOf(object);\n\t\t\tif (i >= 0) {\n\t\t\t\traycastable.splice(i, 1);\n\t\t\t}\n\t\n\t\t\ti = vrObjects.indexOf(VRObject.findObject(object));\n\t\t\tif (i >= 0) {\n\t\t\t\tvrObjects.splice(i, 1);\n\t\t\t}\n\t\n\t\t\tobject.children.forEach(pruneObject);\n\t\t}\n\t\n\t\tfunction raycast() {\n\t\t\tvar i,\n\t\t\t\tintersect,\n\t\t\t\tobject,\n\t\t\t\tintersects,\n\t\t\t\tparent,\n\t\t\t\tprune = [],\n\t\t\t\tvrObject;\n\t\n\t\t\traycaster.ray.origin.setFromMatrixPosition(camera.matrixWorld); // world position\n\t\t\traycaster.ray.direction.set(0, 0, 0.5).unproject(camera).sub(raycaster.ray.origin).normalize();\n\t\n\t\t\tintersects = raycaster.intersectObjects(raycastable, true);\n\t\t\tfor (i = 0; i < intersects.length; i++) {\n\t\t\t\tintersect = intersects[i];\n\t\n\t\t\t\t// if object has been removed from scene, remove it from raycastable\n\t\t\t\tparent = intersect.object;\n\t\t\t\twhile (parent && parent !== scene) {\n\t\t\t\t\tif (!parent.parent) {\n\t\t\t\t\t\tprune.push(parent);\n\t\t\t\t\t}\n\t\t\t\t\tparent = parent.parent;\n\t\t\t\t}\n\t\n\t\t\t\tif (parent && intersect.object instanceof THREE.Mesh) {\n\t\t\t\t\tobject = intersect.object;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tprune.forEach(pruneObject);\n\t\n\t\t\tif (target !== object) {\n\t\t\t\tif (target) {\n\t\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\t\tvrObject.emit('lookaway');\n\t\t\t\t\tVR.emit('lookaway', vrObject);\n\t\t\t\t}\n\t\t\t\ttarget = object;\n\t\t\t\tif (target) {\n\t\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\t\twhile (!vrObject && target.parent) {\n\t\t\t\t\t\ttarget = target.parent;\n\t\t\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\t\t}\n\t\t\t\t\tif (vrObject) {\n\t\t\t\t\t\tvrObject.emit('lookat', intersect);\n\t\t\t\t\t\tVR.emit('lookat', vrObject, intersect);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tfunction render() {\n\t       // if (CLOSE_RENDER) {\n\t       //     return;\n\t       // }\n\t        // Will not start render when application has been active.\n\t        // The case only in taobao client. Very suck!\n\t        if (Date.now() / 1000 - lastTick > 5) {\n\t            if (waitRenderInative === 0) {\n\t                waitRenderInative = Date.now() / 1000;\n\t            }\n\t            if (Date.now() / 1000 - waitRenderInative > 1) {\n\t                lastTick = Date.now();\n\t            }\n\t            return;\n\t        }\n\t        waitRenderInative = 0;\n\t\n\t\t\tvar now = Date.now() / 1000,\n\t\t\t\tdelta = Math.min(1, now - lastTick);\n\t\n\t\t\tvrControls.update();\n\t\n\t\t\tanimationCallbacks.forEach(function (cb) {\n\t\t\t\tcb(delta, now);\n\t\t\t});\n\t\n\t\t\tscene.updateMatrixWorld();\n\t\n\t\t\tvrObjects.forEach(function (object) {\n\t\t\t\tobject.update(now);\n\t\t\t});\n\t        if (mouseControls.autoRotate === true) {\n\t            mouseControls.update();\n\t        }\n\t\n\t\t\traycast();\n\t\n\t\t\tvrEffect.render(scene, camera);\n\t\n\t\t\tlastTick = now;\n\t\t}\n\t\n\t\tfunction renderLoop() {\n\t\t\tif (going) {\n\t\t\t\trender();\n\t\t\t\trequestAnimationFrame(renderLoop);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction stop() {\n\t\t\tgoing = false;\n\t\t}\n\t\n\t\tfunction start() {\n\t\t\tif (!going) {\n\t\t\t\tgoing = true;\n\t\t\t\trenderLoop();\n\t\t\t}\n\t\t}\n\t\n\t\t/*\n\t\tMute any sounds when this browser tab is in the background or minimized.\n\t\t*/\n\t\tfunction visibilityChange() {\n\t\t\tif (document.hidden || document.mozHidden || document.msHidden || document.webkitHidden) {\n\t\t\t\taudioListener.volume(0);\n\t\t\t} else {\n\t\t\t\taudioListener.volume(1);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction resize(width, height) {\n\t\t\twidth = typeof width === 'number' && width || window.innerWidth;\n\t\t\theight = typeof height === 'number' && height || window.innerHeight;\n\t\n\t\t\tcamera.aspect = width / height;\n\t\t\tcamera.updateProjectionMatrix();\n\t\t\trenderer.setSize(width, height);\n\t\t}\n\t\n\t\tfunction initShake() {\n\t\t\tvar lastTime = 0,\n\t\t\t\tlastX,\n\t\t\t\tlastY,\n\t\t\t\tlastZ,\n\t\t\t\tthreshold = 15;\n\t\n\t\t\twindow.addEventListener('devicemotion', function (evt) {\n\t\t\t\tvar current = evt.accelerationIncludingGravity,\n\t\t\t\t\ttime,\n\t\t\t\t\tdiff,\n\t\t\t\t\tdeltaX = 0,\n\t\t\t\t\tdeltaY = 0,\n\t\t\t\t\tdeltaZ = 0,\n\t\t\t\t\tdist;\n\t\n\t\t\t\tif (lastX !== undefined) {\n\t\t\t\t\tdeltaX = Math.abs(lastX - current.x);\n\t\t\t\t\tdeltaY = Math.abs(lastY - current.y);\n\t\t\t\t\tdeltaZ = Math.abs(lastZ - current.z);\n\t\n\t\t\t\t\t// if (deltaX > threshold &&\n\t\t\t\t\t// \t\t(deltaY > threshold || deltaZ > threshold)\n\t\t\t\t\t// \t) {\n\t\t\t\t\tdist = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);\n\t\t\t\t\tif (dist > threshold) {\n\t\n\t\t\t\t\t\ttime = Date.now();\n\t\t\t\t\t\tdiff = time - lastTime;\n\t\t\t\t\t\tif (diff > 1000) {\n\t\t\t\t\t\t\tif (navigator.vibrate) {\n\t\t\t\t\t\t\t\tnavigator.vibrate(100);\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tlastTime = Date.now();\n\t\n\t\t\t\t\t\t\tVR.emit('shake');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tlastX = current.x;\n\t\t\t\tlastY = current.y;\n\t\t\t\tlastZ = current.z;\n\t\n\t\t\t\torientationPossible = true;\n\t\t\t}, false);\n\t\t}\n\t\n\t\tfunction initScene(mode) {\n\t\t\tfunction attachCanvas() {\n\t\t\t\tdocument.body.insertBefore(renderer.domElement, document.body.firstChild || null);\n\t\t\t\tresize();\n\t\t\t}\n\t\n\t\t\tif (renderer) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar renderMode = mode || 'auto';\n\t        if (renderMode === MODE_CSS) {\n\t            renderer = new THREE.CSS3DRenderer();\n\t        } else if (renderMode === MODE_CANVAS) {\n\t            renderer = new THREE.CanvasRenderer();\n\t            renderer.setPixelRatio( window.devicePixelRatio );\n\t        } else {\n\t            renderer = !isSupportWebgl?new THREE.CanvasRenderer():new THREE.WebGLRenderer({ antialias: false });\n\t            renderer.setPixelRatio( window.devicePixelRatio );\n\t        }\n\t\n\t\t\t//create renderer and place in document\n\t        // Antialiasing temporarily disabled to improve performance.\n\t        renderer.setClearColor(0x000000, 0);\n\t        renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\tif (isSupportWebgl) {\n\t            renderer.domElement.addEventListener('webglcontextlost', function contextLost(event) {\n\t                console.log('lost context', event);\n\t            });\n\t        }\n\t\t\t// renderer.shadowMapEnabled = true;\n\t\t\t// renderer.shadowMapSoft = true;\n\t\n\t\t\t//need a scene to put all our objects in\n\t\t\tscene = new THREE.Scene();\n\t\n\t\t\tbodyWrapper = new VRObject(scene, __webpack_require__(9), null, {\n\t\t\t\tname: 'body'\n\t\t\t}).moveTo(0, 1.5, 4);\n\t\t\tbody = bodyWrapper.object;\n\t\n\t\t\tcameraWrapper = new VRObject(body, function (parent) {\n\t        //    camera = new THREE.OrthographicCamera(\n\t        //            window.innerWidth / - 24, window.innerWidth / 24,window.innerHeight / 24, window.innerHeight / - 24, -310, 100000);\n\t        //    camera.position.x = 0;\n\t        //    camera.position.y = 0;\n\t        //    camera.zoom = 0.4;\n\t\t\t//\tcamera.position.set(-0.000001, 0.0001, 0.0001);\n\t\t\t//\tcamera.rotation.set(0, 0, 0);\n\t\n\t\t\t\t//need a camera with which to look at stuff\n\t            // The viewer proportion will be a square not a rect.\n\t\t\t\tcamera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, NEAR, FAR);\n\t            camera.setFocalLength(8);\n\t            // camera.zoom = 0.8;\n\t\t\t\t// camera.position.set(-0.000001, 1, 0.0001);\n\t            // camera.autoBackward = true;\n\t\t\t\tparent.add(camera);\n\t\t\t\treturn camera;\n\t\t\t})\n\t\t\t// set camera position so that OrbitControls works properly.\n\t\t\t\t.moveTo(0, 0.0001, 0.0001);\n\t\n\t\t\taudioListener = new THREE.AudioListener();\n\t\t\taudioListener.name = 'audio-listener';\n\t\t\tcamera.add(audioListener);\n\t\n\t\t\t//VRControls point the camera wherever we're looking\n\t\t\tvrControls = new THREE.VRControls(camera);\n\t\t\tvrControls.freeze = !orientationEnabled;\n\t\n\t\t\t//render left and right eye\n\t\t\tvrEffect = new THREE.VRStereoEffect(renderer);\n\t\t\tvrEffect.near = NEAR;\n\t\t\tvrEffect.far = FAR;\n\t\t\tvrEffect.addEventListener('fullscreenchange', function (evt) {\n\t\t\t\tvar screen;\n\t\t\t\tif (isFullscreen()) {\n\t\t\t\t\tif (vrMode) {\n\t\t\t\t\t\t//no mouse control\n\t\t\t\t\t\tmouseControls.enabled = false;\n\t\n\t\t\t\t\t\tvrControls.freeze = false;\n\t\t\t\t\t\tvrControls.reset();\n\t\n\t\t\t\t\t\tscreen = window.screen;\n\t\t\t\t\t\tif (screen.lockOrientation) {\n\t\t\t\t\t\t\tscreen.lockOrientation('landscape-primary');\n\t\t\t\t\t\t} else if (screen.mozLockOrientation) {\n\t\t\t\t\t\t\tscreen.mozLockOrientation('landscape-primary');\n\t\t\t\t\t\t} else if (screen.orientation && screen.orientation.lock) {\n\t\t\t\t\t\t\tscreen.orientation.lock('landscape-primary');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tVR.exitVR();\n\t\t\t\t}\n\t\n\t\t\t\tcamera.position.set(0, 0.0001, 0.0001);\n\t\t\t\tcamera.rotation.set(0, 0, 0);\n\t\n\t\t\t\tVR.emit('fullscreenchange', evt);\n\t\t\t});\n\t        scene.isWebview = vrEffect.isWebview;\n\t\n\t\t\t//report on HMD\n\t\t\tvrControls.addEventListener('devicechange', function () {\n\t\t\t\torientationPossible = true;\n\t\t\t\tif (orientationEnabled === undefined) {\n\t\t\t\t\torientationEnabled = vrControls.mode() === 'deviceorientation';\n\t\t\t\t}\n\t\n\t\t\t\tvrControls.freeze = !orientationEnabled && !vrMode;\n\t\n\t\t\t\tVR.emit('devicechange', vrControls.mode(), vrEffect.hmd());\n\t\t\t});\n\t\n\t\t\t// mouse control in case got no orientation device\n\t        // Re-start autorotate if user has not been controlled.\n\t\t\tmouseControls = new THREE.OrbitControls(camera, renderer.domElement);\n\t\t\tmouseControls.target0.set(0, 0.0001, 0.000);\n\t\t\tmouseControls.target.copy(mouseControls.target0);\n\t        mouseControls.enableZoom = true;\n\t        mouseControls.enablePan = true;\n\t        mouseControls.autoRotate = false;\n\t\t\tif (renderMode === MODE_CSS) {\n\t        \tmouseControls.autoRotateSpeed = 0.5;\n\t\t\t} else {\n\t        \tmouseControls.autoRotateSpeed = 1.0;\n\t\t\t}\n\t        mouseControls.enableDamping = true;\n\t        mouseControls.dampingFactor = 0.55;\n\t        mouseControls.addEventListener('start', function(){\n\t            if (autoRotateTimer) {\n\t                clearTimeout(autoRotateTimer);\n\t            }\n\t            if (orientationEnabled) {\n\t                mouseControls.enabled = false;\n\t                mouseControls.autoRotate = false;\n\t            } else {\n\t                mouseControls.enabled = true;\n\t                mouseControls.autoRotate = false;\n\t            }\n\t        });\n\t        mouseControls.addEventListener('end', function(){\n\t            autoRotateTimer = setTimeout(function(){\n\t                if (orientationEnabled) {\n\t                    mouseControls.enabled = false;\n\t                    mouseControls.autoRotate = false;\n\t                } else {\n\t                    mouseControls.enabled = true;\n\t                    mouseControls.autoRotate = true;\n\t                }\n\t            }, 2000);\n\t        });\n\t        mouseControls.enabled = false;\n\t\t\tmouseControls.update();\n\t\n\t\t\t//todo: remove any default lights once other lights are added\n\t        // Will not use this way because memory\n\t\t\tvar dLight = new THREE.DirectionalLight(0xffffff, 0.8);\n\t\t\tdLight.name = 'directional-light';\n\t\t\tdLight.position.set(20, 100, 100);\n\t\n\t\t\tdLight.castShadow = true;\n\t\t\tdLight.shadowCameraVisible = true;\n\t\n\t\t\tdLight.shadowMapWidth = 2048;\n\t\t\tdLight.shadowMapHeight = 2048;\n\t\n\t\t\tdLight.shadowCameraLeft = -10;\n\t\t\tdLight.shadowCameraRight = 10;\n\t\t\tdLight.shadowCameraTop = 10;\n\t\t\tdLight.shadowCameraBottom = -10;\n\t\n\t\t\tdLight.shadowCameraFar = 150;\n\t\t\tdLight.shadowCameraNear = 100;\n\t\t\tdLight.shadowDarkness = 1;\n\t\n\t\t\tscene.add(dLight);\n\t\n\t\t\tscene.add(new THREE.AmbientLight(0x444444));\n\t\n\t\t\tif (VR) {\n\t\t\t\tVR.camera = cameraWrapper;\n\t\t\t\tVR.body = bodyWrapper;\n\t\t\t\tVR.scene = scene;\n\t\t\t\tVR.canvas = renderer.domElement;\n\t\t\t\tVR.renderer = renderer;\n\t\t\t\tVR.zeroSensor = vrControls.zeroSensor;\n\t\t\t}\n\t\n\t\t\traycaster = new THREE.Raycaster();\n\t\n\t\t\tif (document.body) {\n\t\t\t\tattachCanvas();\n\t\t\t} else {\n\t\t\t\twindow.addEventListener('load', attachCanvas, false);\n\t\t\t}\n\t\n\t\t\tVR.canvas.addEventListener('webkitfullscreenerror', fullScreenError, false);\n\t\t\tVR.canvas.addEventListener('fullscreenerror', fullScreenError, false);\n\t\t}\n\t\n\t\tfunction initRequirements() {\n\t\t\t//load external requirements\n\t\t\tTHREE = __webpack_require__(33);\n\t\t\t__webpack_require__(23);\n\t\t\t__webpack_require__(24);\n\t\n\t\t\t//if (typeof __DEV__ !== 'undefined' && __DEV__) {\n\t\t\t\t__webpack_require__(25);\n\t\t\t//}\n\t\n\t\t\tTHREE.ImageUtils.crossOrigin = '';\n\t\n\t\t\teventEmitter = __webpack_require__(31);\n\t\n\t        //if (!isSupportWebgl) {\n\t\t\t\t// compatible mode\n\t\t\t\t// Fixed render in all mobile device\n\t\t\t\t__webpack_require__(26);\n\t            __webpack_require__(27);\n\t            __webpack_require__(28);\n\t          //  return;\n\t        //}\n\t\n\t\t\t//my VR stuff. todo: move these to a separate repo or two for easy packaging\n\t\t\t__webpack_require__(29);\n\t\t\t__webpack_require__(30);\n\t\t}\n\t\n\t\n\t\tfunction initialize(renderMode) {\n\t\t\t//todo: set up button/info elements\n\t\n\t\t\tinitScene(renderMode);\n\t\n\t\t\tinitShake();\n\t\n\t\t\tresize();\n\t\n\t\n\t\t\tdocument.addEventListener('visibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('mozvisibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('msvisibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('webkitvisibilitychange', visibilityChange);\n\t\t}\n\t\n\t\tinitRequirements();\n\t\n\t\tmodule.exports = VR = {\n\t\t\tinit: initialize,\n\t\t\trender: render,\n\t\t\tstart: start,\n\t\t\tstop: stop,\n\t\t\tresize: resize,\n\t        controls: mouseControls,\n\t        orientationPossible: function () {\n\t            return orientationPossible;\n\t        },\n\t\n\t\t\tTHREE: THREE,\n\t\n\t\t\tmaterials: materials,\n\t\n\t\t\tanimate: function (callback) {\n\t\t\t\tvar i;\n\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\ti = animationCallbacks.indexOf(callback);\n\t\t\t\t\tif (i < 0) {\n\t\t\t\t\t\tanimationCallbacks.push(callback);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tend: function (callback) {\n\t\t\t\tvar i;\n\t\n\t\t\t\tif (!callback) {\n\t\t\t\t\tanimationCallbacks.length = 0;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\ti = animationCallbacks.indexOf(callback);\n\t\t\t\t\tif (i >= 0) {\n\t\t\t\t\t\tanimationCallbacks.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\trequestVR: function () {\n\t\t\t\t//todo: check if it's possible\n\t\t\t\tif (vrMode || !vrEffect) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tvrMode = true;\n\t\n\t\t\t\t//full screen and render two eyes\n\t\t\t\t//always full screen\n\t\t\t\tvrEffect.requestFullScreen();\n\t\t\t\tmouseControls.enabled = false;\n\t\t\t},\n\t\n\t\t\texitVR: function () {\n\t\t\t\tvrMode = false;\n\t\t\t\tif (!vrEffect.isWebview() && isFullscreen()) {\n\t\t\t\t\texitFullscreen();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t            vrEffect.exit();\n\t\n\t\t\t\tvrControls.freeze = !orientationEnabled;\n\t\t\t\tcamera.rotation.set(0, 0, 0);\n\t\t\t\tmouseControls.enabled = true;\n\t\t\t},\n\t\n\t\t\tvrMode: function () {\n\t\t\t\treturn vrMode && isFullscreen();\n\t\t\t},\n\t\n\t\t\torientationEnabled: function () {\n\t\t\t\treturn !!orientationEnabled;\n\t\t\t},\n\t\t\tenableOrientation: function () {\n\t            // clearTimeout(autoRotateTimer);\n\t\t\t\torientationEnabled = true;\n\t\t\t\tif (!vrMode) {\n\t\t\t\t\tvrControls.freeze = false;\n\t\t\t\t}\n\t\t\t\tmouseControls.enabled = false;\n\t            mouseControls.autoRotate = false;\n\t\t\t},\n\t\t\tdisableOrientation: function () {\n\t            // clearTimeout(autoRotateTimer);\n\t\t\t\torientationEnabled = false;\n\t\t\t\tcamera.rotation.set(0, 0, 0);\n\t\t\t\tvrControls.freeze = !vrMode;\n\t\t\t\tmouseControls.enabled = true;\n\t            mouseControls.autoRotate = true;\n\t\t\t},\n\t\n\t\t\tisFullscreen: isFullscreen,\n\t\t\trequestFullscreen: requestFullscreen,\n\t\t\texitFullscreen: function () {\n\t\t\t\tif (isFullscreen()) {\n\t\t\t\t\texitFullscreen();\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tcontrolMode: function () {\n\t\t\t\treturn vrControls && vrControls.mode();\n\t\t\t},\n\t\n\t\t\tzeroSensor: nop,\n\t\n\t\t\tvibrate: navigator.vibrate ? navigator.vibrate.bind(navigator) : nop,\n\t\n\t\t\t// Utility\n\t\t\ttimes: function (n, callback) {\n\t\t\t\tvar i;\n\t\n\t\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\t\tcallback(i);\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tcamera: cameraWrapper,\n\t\t\tbody: bodyWrapper,\n\t\t\tscene: scene,\n\t\t\trenderer: renderer || null,\n\t\t\tcanvas: renderer && renderer.domElement || null,\n\t        isSupportWebgl: isSupportWebgl\n\t\t};\n\t\n\t\tobjectMethods.forEach(function (method) {\n\t\t\tvar creator = __webpack_require__(8)(\"./\" + method),\n\t\t\t\tkey;\n\t\n\t\t\tVR[method] = function (options) {\n\t\t\t\tvar obj = new VRObject(scene, creator, body, options, renderer);\n\t\t\t\tvrObjects.push(obj);\n\t\t\t\tif (obj.raycastable) {\n\t\t\t\t\traycastable.push(obj.object);\n\t\t\t\t}\n\t\t\t\treturn obj;\n\t\t\t};\n\t\n\t\t\tVRObject.prototype[method] = function (options) {\n\t\t\t\tvar obj = new VRObject(this.object, creator, body, options, renderer);\n\t\t\t\tvrObjects.push(obj);\n\t\t\t\tif (obj.raycastable) {\n\t\t\t\t\traycastable.push(obj.object);\n\t\t\t\t}\n\t\t\t\treturn obj;\n\t\t\t};\n\t\n\t\t\tfor (key in creator) {\n\t\t\t\tif (creator.hasOwnProperty(key) && typeof creator[key] === 'function') {\n\t\t\t\t\tVR[method][key] = creator[key];\n\t\t\t\t\tVRObject.prototype[method][key] = creator[key];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\teventEmitter(VR);\n\t\n\t\tObject.defineProperty(VR, 'target', {\n\t\t\tget: function () {\n\t\t\t\treturn target;\n\t\t\t}\n\t\t});\n\t    // Compatible in android < 5.0\n\t    // Fix something what VR was undefined.\n\t    window.VR = VR;\n\t}());\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(3);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(5)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../node_modules/css-loader/index.js!./style.css\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../node_modules/css-loader/index.js!./style.css\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(32)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"body{font-family:Helvetica Neue,Helvetica,Arial,sans-serif;color:#eee;overflow:hidden;background:#282828;height:100%;width:100%;margin:0;padding:0}canvas{width:100%!important;height:100%!important;top:0;left:0}#buttons{position:absolute;bottom:0;left:0;padding:12px;margin:8px;border-radius:8px;background-color:hsla(0,0%,50%,.6)}#buttons>*{margin:0 10px;display:inline-block;width:18px;height:18px;cursor:pointer}#buttons>:first-child{margin-left:0}#buttons>.unsupported,#fs-disable{display:none}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * isMobile.js v0.3.9\n\t *\n\t * A simple library to detect Apple phones and tablets,\n\t * Android phones and tablets, other mobile devices (like blackberry, mini-opera and windows phone),\n\t * and any kind of seven inch device, via user agent sniffing.\n\t *\n\t * @author: Kai Mallea (kmallea@gmail.com)\n\t *\n\t * @license: http://creativecommons.org/publicdomain/zero/1.0/\n\t */\n\t(function (global) {\n\t\n\t    var apple_phone         = /iPhone/i,\n\t        apple_ipod          = /iPod/i,\n\t        apple_tablet        = /iPad/i,\n\t        android_phone       = /(?=.*\\bAndroid\\b)(?=.*\\bMobile\\b)/i, // Match 'Android' AND 'Mobile'\n\t        android_tablet      = /Android/i,\n\t        amazon_phone        = /(?=.*\\bAndroid\\b)(?=.*\\bSD4930UR\\b)/i,\n\t        amazon_tablet       = /(?=.*\\bAndroid\\b)(?=.*\\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\\b)/i,\n\t        windows_phone       = /IEMobile/i,\n\t        windows_tablet      = /(?=.*\\bWindows\\b)(?=.*\\bARM\\b)/i, // Match 'Windows' AND 'ARM'\n\t        other_blackberry    = /BlackBerry/i,\n\t        other_blackberry_10 = /BB10/i,\n\t        other_opera         = /Opera Mini/i,\n\t        other_chrome        = /(CriOS|Chrome)(?=.*\\bMobile\\b)/i,\n\t        other_firefox       = /(?=.*\\bFirefox\\b)(?=.*\\bMobile\\b)/i, // Match 'Firefox' AND 'Mobile'\n\t        seven_inch = new RegExp(\n\t            '(?:' +         // Non-capturing group\n\t\n\t            'Nexus 7' +     // Nexus 7\n\t\n\t            '|' +           // OR\n\t\n\t            'BNTV250' +     // B&N Nook Tablet 7 inch\n\t\n\t            '|' +           // OR\n\t\n\t            'Kindle Fire' + // Kindle Fire\n\t\n\t            '|' +           // OR\n\t\n\t            'Silk' +        // Kindle Fire, Silk Accelerated\n\t\n\t            '|' +           // OR\n\t\n\t            'GT-P1000' +    // Galaxy Tab 7 inch\n\t\n\t            ')',            // End non-capturing group\n\t\n\t            'i');           // Case-insensitive matching\n\t\n\t    var match = function(regex, userAgent) {\n\t        return regex.test(userAgent);\n\t    };\n\t\n\t    var IsMobileClass = function(userAgent) {\n\t        var ua = userAgent || navigator.userAgent;\n\t        // Facebook mobile app's integrated browser adds a bunch of strings that\n\t        // match everything. Strip it out if it exists.\n\t        var tmp = ua.split('[FBAN');\n\t        if (typeof tmp[1] !== 'undefined') {\n\t            ua = tmp[0];\n\t        }\n\t\n\t        this.apple = {\n\t            phone:  match(apple_phone, ua),\n\t            ipod:   match(apple_ipod, ua),\n\t            tablet: !match(apple_phone, ua) && match(apple_tablet, ua),\n\t            device: match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)\n\t        };\n\t        this.amazon = {\n\t            phone:  match(amazon_phone, ua),\n\t            tablet: !match(amazon_phone, ua) && match(amazon_tablet, ua),\n\t            device: match(amazon_phone, ua) || match(amazon_tablet, ua)\n\t        };\n\t        this.android = {\n\t            phone:  match(amazon_phone, ua) || match(android_phone, ua),\n\t            tablet: !match(amazon_phone, ua) && !match(android_phone, ua) && (match(amazon_tablet, ua) || match(android_tablet, ua)),\n\t            device: match(amazon_phone, ua) || match(amazon_tablet, ua) || match(android_phone, ua) || match(android_tablet, ua)\n\t        };\n\t        this.windows = {\n\t            phone:  match(windows_phone, ua),\n\t            tablet: match(windows_tablet, ua),\n\t            device: match(windows_phone, ua) || match(windows_tablet, ua)\n\t        };\n\t        this.other = {\n\t            blackberry:   match(other_blackberry, ua),\n\t            blackberry10: match(other_blackberry_10, ua),\n\t            opera:        match(other_opera, ua),\n\t            firefox:      match(other_firefox, ua),\n\t            chrome:       match(other_chrome, ua),\n\t            device:       match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(other_opera, ua) || match(other_firefox, ua) || match(other_chrome, ua)\n\t        };\n\t        this.seven_inch = match(seven_inch, ua);\n\t        this.any = this.apple.device || this.android.device || this.windows.device || this.other.device || this.seven_inch;\n\t        // excludes 'other' devices and ipods, targeting touchscreen phones\n\t        this.phone = this.apple.phone || this.android.phone || this.windows.phone;\n\t        // excludes 7 inch devices, classifying as phone or tablet is left to the user\n\t        this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet;\n\t\n\t        if (typeof window === 'undefined') {\n\t            return this;\n\t        }\n\t    };\n\t\n\t    var instantiate = function() {\n\t        var IM = new IsMobileClass();\n\t        IM.Class = IsMobileClass;\n\t        return IM;\n\t    };\n\t\n\t    if (typeof module != 'undefined' && module.exports && typeof window === 'undefined') {\n\t        //node\n\t        module.exports = IsMobileClass;\n\t    } else if (typeof module != 'undefined' && module.exports && typeof window !== 'undefined') {\n\t        //browserify\n\t        module.exports = instantiate();\n\t    } else if (true) {\n\t        //AMD\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (global.isMobile = instantiate()), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else {\n\t        global.isMobile = instantiate();\n\t    }\n\t\n\t})(this);\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tvar stylesInDom = {},\r\n\t\tmemoize = function(fn) {\r\n\t\t\tvar memo;\r\n\t\t\treturn function () {\r\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\t\treturn memo;\r\n\t\t\t};\r\n\t\t},\r\n\t\tisOldIE = memoize(function() {\r\n\t\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t\t}),\r\n\t\tgetHeadElement = memoize(function () {\r\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t\t}),\r\n\t\tsingletonElement = null,\r\n\t\tsingletonCounter = 0,\r\n\t\tstyleElementsInsertedAtTop = [];\r\n\t\r\n\tmodule.exports = function(list, options) {\r\n\t\tif(false) {\r\n\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t\t}\r\n\t\r\n\t\toptions = options || {};\r\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t\t// tags it will allow on a page\r\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\t\r\n\t\t// By default, add <style> tags to the bottom of <head>.\r\n\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\t\r\n\t\tvar styles = listToStyles(list);\r\n\t\taddStylesToDom(styles, options);\r\n\t\r\n\t\treturn function update(newList) {\r\n\t\t\tvar mayRemove = [];\r\n\t\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\t\tvar item = styles[i];\r\n\t\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\t\tdomStyle.refs--;\r\n\t\t\t\tmayRemove.push(domStyle);\r\n\t\t\t}\r\n\t\t\tif(newList) {\r\n\t\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\t\taddStylesToDom(newStyles, options);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction addStylesToDom(styles, options) {\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tif(domStyle) {\r\n\t\t\t\tdomStyle.refs++;\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t\t}\r\n\t\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar parts = [];\r\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction listToStyles(list) {\r\n\t\tvar styles = [];\r\n\t\tvar newStyles = {};\r\n\t\tfor(var i = 0; i < list.length; i++) {\r\n\t\t\tvar item = list[i];\r\n\t\t\tvar id = item[0];\r\n\t\t\tvar css = item[1];\r\n\t\t\tvar media = item[2];\r\n\t\t\tvar sourceMap = item[3];\r\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\t\tif(!newStyles[id])\r\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\t\telse\r\n\t\t\t\tnewStyles[id].parts.push(part);\r\n\t\t}\r\n\t\treturn styles;\r\n\t}\r\n\t\r\n\tfunction insertStyleElement(options, styleElement) {\r\n\t\tvar head = getHeadElement();\r\n\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\t\tif (options.insertAt === \"top\") {\r\n\t\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t\t} else {\r\n\t\t\t\thead.appendChild(styleElement);\r\n\t\t\t}\r\n\t\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t\t} else if (options.insertAt === \"bottom\") {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction removeStyleElement(styleElement) {\r\n\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\t\tif(idx >= 0) {\r\n\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction createStyleElement(options) {\r\n\t\tvar styleElement = document.createElement(\"style\");\r\n\t\tstyleElement.type = \"text/css\";\r\n\t\tinsertStyleElement(options, styleElement);\r\n\t\treturn styleElement;\r\n\t}\r\n\t\r\n\tfunction createLinkElement(options) {\r\n\t\tvar linkElement = document.createElement(\"link\");\r\n\t\tlinkElement.rel = \"stylesheet\";\r\n\t\tinsertStyleElement(options, linkElement);\r\n\t\treturn linkElement;\r\n\t}\r\n\t\r\n\tfunction addStyle(obj, options) {\r\n\t\tvar styleElement, update, remove;\r\n\t\r\n\t\tif (options.singleton) {\r\n\t\t\tvar styleIndex = singletonCounter++;\r\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t\t} else if(obj.sourceMap &&\r\n\t\t\ttypeof URL === \"function\" &&\r\n\t\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\t\ttypeof Blob === \"function\" &&\r\n\t\t\ttypeof btoa === \"function\") {\r\n\t\t\tstyleElement = createLinkElement(options);\r\n\t\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t\tif(styleElement.href)\r\n\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tstyleElement = createStyleElement(options);\r\n\t\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tupdate(obj);\r\n\t\r\n\t\treturn function updateStyle(newObj) {\r\n\t\t\tif(newObj) {\r\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tupdate(obj = newObj);\r\n\t\t\t} else {\r\n\t\t\t\tremove();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tvar replaceText = (function () {\r\n\t\tvar textStore = [];\r\n\t\r\n\t\treturn function (index, replacement) {\r\n\t\t\ttextStore[index] = replacement;\r\n\t\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t\t};\r\n\t})();\r\n\t\r\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\t\tvar css = remove ? \"\" : obj.css;\r\n\t\r\n\t\tif (styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t\t} else {\r\n\t\t\tvar cssNode = document.createTextNode(css);\r\n\t\t\tvar childNodes = styleElement.childNodes;\r\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\t\tif (childNodes.length) {\r\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t\t} else {\r\n\t\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction applyToTag(styleElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\r\n\t\tif(media) {\r\n\t\t\tstyleElement.setAttribute(\"media\", media)\r\n\t\t}\r\n\t\r\n\t\tif(styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = css;\r\n\t\t} else {\r\n\t\t\twhile(styleElement.firstChild) {\r\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t\t}\r\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateLink(linkElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\t\r\n\t\tif(sourceMap) {\r\n\t\t\t// http://stackoverflow.com/a/26603875\r\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t\t}\r\n\t\r\n\t\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\t\r\n\t\tvar oldSrc = linkElement.href;\r\n\t\r\n\t\tlinkElement.href = URL.createObjectURL(blob);\r\n\t\r\n\t\tif(oldSrc)\r\n\t\t\tURL.revokeObjectURL(oldSrc);\r\n\t}\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar THREE = __webpack_require__(33),\n\t\t\tforEach = __webpack_require__(35),\n\t\t\tassign = __webpack_require__(36),\n\t\n\t\t\tiOS = navigator.userAgent.match(/(iPad|iPhone|iPod)/g),\n\t\t\tandroid = navigator.userAgent.toLowerCase().match(/android/g),\n\t\n\t\t\t// https://gist.github.com/dperini/729294\n\t\t\t//urlRegex = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/i,\n\t\t\turlRegex = __webpack_require__(34),\n\t\n\t\t\tdataUri = /^data:image\\/(?:png|jpe?g|gif);/,\n\t\t\tassetPath = '//gw.alicdn.com/tps/',\n\t\n\t\t\timages = {},\n\t\n\t\t\tmaterialTypes = {\n\t\t\t\tlambert: THREE.MeshLambertMaterial,\n\t\t\t\tbasic: THREE.MeshBasicMaterial,\n\t\t\t\tphong: THREE.MeshPhongMaterial,\n\t\t\t\tnormal: THREE.MeshNormalMaterial,\n\t\t\t\tdepth: THREE.MeshDepthMaterial\n\t\t\t},\n\t\t\ttextureFiles = {\n\t    // Will use these when you need it.\n\t\t\t\t'asphalt': {\n\t                map:'TB1kK63NVXXXXaVaFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 12\n\t\t\t\t},\n\t\t\t\t'brick-tiles': {\n\t                map:'TB1YcUKNVXXXXbpXXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 2\n\t\t\t\t},\n\t\t\t\t'bricks': {\n\t\t\t\t\ttype: 'phong',\n\t\t\t\t\trepeat: 4,\n\t                map:'TB1rswLNVXXXXbcXXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\tnormalMap: 'TB1T.7hNVXXXXXlXVXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\tspecularMap: 'TB1WIn.NVXXXXaPapXXXXXXXXXX-512-512.jpg_320x320.jpg'\n\t\t\t\t},\n\t\t\t\t'checkerboard': {\n\t\t\t\t\trepeat: 10,\n\t\t\t\t\tmap: 'TB17ZseNVXXXXbfaXXXXXXXXXXX-256-256.png_140x140.jpg'\n\t\t\t\t},\n\t\t\t\t'grass': {\n\t                map:'TB17jZqNVXXXXc4XFXXXXXXXXXX-256-256.jpg_140x140.jpg',\n\t\t\t\t\trepeat: 12\n\t\t\t\t},\n\t\t\t\t'metal-floor': {\n\t\t\t\t\ttype: 'phong',\n\t\t\t\t\tshininess: 100,\n\t                map:'TB18JAwNVXXXXbiXFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 2\n\t\t\t\t},\n\t\t\t\t'metal': {\n\t                map:'TB1sEEhNVXXXXbSXVXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\ttype: 'phong',\n\t\t\t\t\tshininess: 100,\n\t\t\t\t\tshading: THREE.SmoothShading,\n\t\t\t\t\trepeat: 2\n\t\t\t\t},\n\t\t\t\t'stone': {\n\t                map:'TB1c37bNVXXXXXwaXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 8\n\t\t\t\t},\n\t\t\t\t'tiles': {\n\t                map:'TB1BbZCNVXXXXaMXpXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 4\n\t\t\t\t},\n\t\t\t\t'weathered-wood': {\n\t                map:'TB12QIwNVXXXXXGXFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\t\trepeat: 8\n\t\t\t\t},\n\t\t\t\t'wood': {\n\t                map:'TB1rpEANVXXXXa8XpXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t                repeat: 4\n\t\t\t\t}\n\t\t\t},\n\t\t\ttextures = {},\n\t\t\tmaterials;\n\t\n\t\tfunction imageTexture(src, mapping, callback) {\n\t\t\tvar image,\n\t\t\t\tparse,\n\t\t\t\ttexture,\n\t\t\t\tisDataUri;\n\t\n\t\t\tfunction imageLoaded() {\n\t\t\t\tvar scale,\n\t\t\t\t\tcanvas,\n\t\t\t\t\tctx,\n\t\t\t\t\tsmallImage;\n\t\n\t\t\t\t/*\n\t\t\t\tiOS doesn't know how to handle large images. Even though the MAX_TEXTURE_SIZE\n\t\t\t\tmay be 4096, it still breaks on images that large. So we scale them down.\n\t            Change 2048 to 1024 fix memory is too high in iOS.\n\t            Modify by KeynesQ\n\t\t\t\t*/\n\t\t\t//\tif (iOS && (image.naturalWidth > 2048 || image.naturalHeight > 2048)) {\n\t\t\t//\t\tscale = 1024 / Math.max( image.naturalWidth, image.naturalHeight );\n\t\n\t\t\t//\t\tcanvas = document.createElement('canvas');\n\t\t\t//\t\tcanvas.width = 1024;\n\t\t\t//\t\tcanvas.height = 512;\n\t\n\t\t\t//\t\tctx = canvas.getContext('2d');\n\t\t\t//\t\tctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, canvas.width, canvas.height);\n\t\n\t\t\t//\t\timage = canvas;\n\t\t\t//\t}\n\t                // Reduce momery in mobile device.\n\t                if ((iOS || android) && (image.naturalWidth > 2048 || image.naturalHeight > 2048)) {\n\t                // scales the image by (float) scale < 1\n\t\n\t                    scale = 1024 / Math.max( image.naturalWidth, image.naturalHeight );\n\t                    canvas = document.createElement('canvas');\n\t                    canvas.width = Math.floor(image.naturalWidth * scale);\n\t                    canvas.height = Math.floor(image.naturalHeight * scale);\n\t\n\t                    ctx = canvas.getContext('2d');\n\t\n\t                    ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, canvas.width, canvas.height);\n\t                   // if (iOS) {\n\t                   //     var dstData = ctx.createImageData(canvas.width, canvas.height),\n\t                   //         dstBuff = dstData.data,\n\t                   //         srcBuff = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n\t                   //     var _worker = new Worker('//h5.m.taobao.com/js/trip/hotel/worker.js');\n\t                   //     _worker.onmessage = function (e) {\n\t                   //         var data = e.data[0];\n\t                   //         // Get new image data\n\t                   //         ctx.putImageData(data, 0, 0);\n\t                   //         texture.image = canvas;\n\t                   //         texture.needsUpdate = true;\n\t                   //         if (typeof callback === 'function') {\n\t                   //             setTimeout(callback.bind(null, texture, image), 1);\n\t                   //         }\n\t                   //         _worker.terminate();\n\t                   //     };\n\t                   //     _worker.postMessage([dstData, srcBuff, canvas.width, canvas.height]);\n\t                   //     return;\n\t                   // }\n\t\n\t                    image = canvas;\n\t                }\n\t\n\t                texture.image = image;\n\t                texture.needsUpdate = true;\n\t                if (typeof callback === 'function') {\n\t                    setTimeout(callback.bind(null, texture, image), 1);\n\t                }\n\t            }\n\t\n\t            parse = dataUri.exec(src);\n\t            isDataUri = !!parse;\n\t            if (!parse) {\n\t                parse = urlRegex.exec(src);\n\t            }\n\t\n\t            // if (!parse) {\n\t            // \tconsole.error('Invalid image URL: ' + src);\n\t            // \treturn;\n\t            // }\n\t\n\t            if (images[src]) {\n\t                image = images[src];\n\t            } else {\n\t                image = document.createElement('img');\n\t                if (parse && (parse[1] && parse[1] !== window.location.hostname || parse[2] && parse[2] !== window.location.port)) {\n\t                    image.crossOrigin = 'anonymous';\n\t                }\n\t                image.src = src;\n\t                images[src] = image;\n\t            }\n\t\n\t            texture = new THREE.Texture(undefined, mapping);\n\t\n\t            if (image.naturalWidth || isDataUri) {\n\t                setTimeout(imageLoaded, 1);\n\t            } else {\n\t                image.addEventListener('load', imageLoaded);\n\t            }\n\t\n\t            return texture;\n\t        }\n\t\n\t\n\t\tfunction material(options) {\n\t\t\tvar opts,\n\t\t\t\tMaterial = materialTypes[options.type] || THREE.MeshLambertMaterial;\n\t\n\t\t\tfunction threeTexture(fn) {\n\t\t\t\tif (typeof fn === 'string') {\n\t\t\t\t\tif (urlRegex.test(fn) || dataUri.test(fn)) {\n\t\t\t\t\t\treturn imageTexture(fn);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfn = textures[fn];\n\t\t\t\t}\n\t\t\t\tif (typeof fn === 'function') {\n\t\t\t\t\treturn fn(options);\n\t\t\t\t}\n\t\n\t\t\t\treturn fn;\n\t\t\t}\n\t\n\t\t\tif (typeof options === 'string') {\n\t\t\t\toptions = {\n\t\t\t\t\tmap: options\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\topts = assign({}, options);\n\t\t\tforEach({\n\t\t\t\tambient: options.ambient || options.color,\n\t\t\t\temissive: options.emissive || options.color,\n\t\t\t\tmap: threeTexture(options.map),\n\t\t\t\tspecularMap: threeTexture(options.specularMap),\n\t\t\t\tnormalMap: threeTexture(options.normalMap),\n\t\t\t\talphaMap: threeTexture(options.alphaMap),\n\t\t\t\tenvMap: threeTexture(options.envMap),\n\t\t\t\tlightMap: threeTexture(options.lightMap)\n\t\t\t}, function (val, key) {\n\t\t\t\tif (val !== undefined) {\n\t\t\t\t\topts[key] = val;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tdelete opts.type;\n\t\n\t\t\treturn new Material(opts);\n\t\t}\n\t\n\t\t//figure out if script is loaded relative so we know where to find the images\n\t//\tassetPath = (function () {\n\t//\t\tvar url,\n\t//\t\t\tscripts;\n\t//\n\t//\t\tif (document.currentScript) {\n\t//\t\t\turl = document.currentScript.getAttribute('src');\n\t//\t\t} else {\n\t//\t\t\tscripts = document.getElementsByTagName('script');\n\t//\t\t\turl = scripts[scripts.length - 1].getAttribute('src');\n\t//\t\t}\n\t//\n\t//\t\tif (!urlRegex.test(url)) {\n\t//\t\t\treturn url.replace(/[a-z\\-\\.]+\\.js$/i, '');\n\t//\t\t}\n\t//\n\t//\t\treturn __ASSET_PATH__;\n\t//\t}());\n\t\n\t\tmaterials = {\n\t\t\tstandard: function () {\n\t\t\t\treturn new THREE.MeshLambertMaterial();\n\t\t\t},\n\t\t\ttextures: textures,\n\t\t\timageTexture: imageTexture,\n\t\t\tmaterial: material,\n\t\t\tlibrary: ['standard']\n\t\t};\n\t\n\t\tforEach(textureFiles, function (props, key) {\n\t\t\tfunction textureFactory(file, options) {\n\t\t\t\tfunction imagePath(url) {\n\t\t\t\t\tif ((/\\.(png|jpg)$/i).test(url)) {\n\t\t\t\t\t\treturn assetPath + url;\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn url;\n\t\t\t\t}\n\t\n\t\t\t\toptions = options || {};\n\t\n\t\t\t\treturn function (opts) {\n\t\t\t\t\tvar texture = imageTexture(imagePath(file));\n\t\n\t\t\t\t\topts = assign({}, options, opts);\n\t\n\t\t\t\t\tif (opts.repeat) {\n\t\t\t\t\t\tif (opts.repeat > 0) {\n\t\t\t\t\t\t\ttexture.repeat.set(opts.repeat, opts.repeat);\n\t\t\t\t\t\t} else if (opts.repeat instanceof THREE.Vector2) {\n\t\t\t\t\t\t\ttexture.repeat.copy(opts.repeat);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttexture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\t}\n\t\t\t\t\treturn texture;\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\tvar map = textureFactory(props.map || key + '.jpg', props),\n\t\t\t\tmaterialDef;\n\t\n\t\t\tmaterialDef = assign({}, props, {\n\t\t\t\tmap: map\n\t\t\t});\n\t\t\ttextures[key] = map;\n\t\n\t\t\tif (props.normalMap) {\n\t\t\t\tmaterialDef.normalMap = textures[key + '-normal'] = textureFactory(props.normalMap, props);\n\t\t\t}\n\t\n\t\t\tif (props.specularMap) {\n\t\t\t\tmaterialDef.specularMap = textures[key + '-specular'] = textureFactory(props.specularMap, props);\n\t\t\t}\n\t\n\t\t\tmaterials.library.push(key);\n\t\t\tmaterials[key] = function (options) {\n\t\t\t\tvar opts = assign({}, materialDef, options);\n\t\n\t\t\t\treturn material(opts);\n\t\t\t};\n\t\t});\n\t\n\t\treturn materials;\n\t\n\t\t//var parse = urlRegex.exec('https://lh5.googleusercontent.com:80/-SNO8rWDqbUM/U085rfOBRuI/AAAAAAAAEdM/nWEWCtNceZ0/w955-h382-no/PANO_20130225_131211.jpg');\n\t}());\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar\tNEAR_DISTANCE = 3,\n\t\t\tmaterials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(33),\n\t\t\teventEmitter = __webpack_require__(31),\n\t\n\t\t\txAxis = new THREE.Vector3(1, 0, 0),\n\t\t\tyAxis = new THREE.Vector3(0, 1, 0),\n\t\t\tzAxis = new THREE.Vector3(0, 0, 1),\n\t\n\t\t\tscratchVector1 = new THREE.Vector3(),\n\t\t\tscratchVector2 = new THREE.Vector3(),\n\t\n\t\t\tallObjects = window.WeakMap ? new window.WeakMap() : {};\n\t\n\t\tfunction distance(object, origin) {\n\t\t\tvar geometry;\n\t\n\t\t\tgeometry = object.geometry;\n\t\n\t\t\t//assumes object world matrix has been updated\n\t\t\tscratchVector1.setFromMatrixPosition(origin.matrixWorld);\n\t\n\t\t\tif (!geometry) {\n\t\t\t\t//first convert to world coordinate\n\t\t\t\tscratchVector2.setFromMatrixPosition(object.matrixWorld);\n\t\t\t\treturn scratchVector2.distanceTo(scratchVector1);\n\t\t\t}\n\t\n\t\t\tobject.worldToLocal(scratchVector1);\n\t\t\treturn object.geometry.boundingBox.distanceToPoint(scratchVector1);\n\t\t}\n\t\n\t\tfunction VRObject(parent, creator, body, options, renderer) {\n\t\t\tvar material,\n\t\t\t\tobject,\n\t\t\t\tself = this,\n\t\n\t\t\t\tisNear = false,\n\t\t\t\tisTarget = false,\n\t\n\t\t\t\tcamera = body && (function () {\n\t\t\t\t\tvar i,\n\t\t\t\t\t\tc;\n\t\t\t\t\tfor (i = 0; i < body.children.length; i++) {\n\t\t\t\t\t\tc = body.children[i];\n\t\t\t\t\t\tif (c instanceof THREE.PerspectiveCamera) {\n\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}()),\n\t\t\t\tfrustum,\n\t\t\t\tcameraViewProjectionMatrix,\n\t\n\t\t\t\traycaster;\n\t\n\t\t\toptions = options || {};\n\t\n\t\t\teventEmitter(this);\n\t\n\t\t\tif (body) {\n\t\t\t\t// raycaster = new THREE.Raycaster();\n\t\n\t\t\t\tthis.update = function () {\n\t\t\t\t\tvar wasNear = isNear,\n\t\t\t\t\t\twasTarget = isTarget,\n\t\n\t\t\t\t\t\tintersects, intersect, i;\n\t\n\t\t\t\t\tisNear = self.distance < NEAR_DISTANCE;\n\t\t\t\t\tif (isNear !== wasNear) {\n\t\t\t\t\t\tif (isNear) {\n\t\t\t\t\t\t\tself.emit('near', self);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.emit('far', self);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/*\n\t\t\t\t\traycaster.ray.origin.copy(origin);\n\t\t\t\t\traycaster.ray.direction.set(0, 0, 0.5).unproject(camera).sub(origin).normalize();\n\t\n\t\t\t\t\t//todo: consider whether this needs to be recursive. maybe a different event\n\t\t\t\t\tintersects = raycaster.intersectObject(object);\n\t\t\t\t\tif (intersects.length) {\n\t\t\t\t\t\tisTarget = true;\n\t\t\t\t\t\tif (!wasTarget) {\n\t\t\t\t\t\t\tself.emit('target-on', intersects[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (wasTarget) {\n\t\t\t\t\t\tself.emit('target-off');\n\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t//todo: get material from options\n\t\t\tthis.object = object = creator.call(this, parent, options, renderer);\n\t\t\tthis.parent = this.object.parent || parent;\n\t\n\t\t\tif (object instanceof THREE.Mesh) {\n\t\t\t\tif (options.castShadow !== false) {\n\t\t\t\t\tobject.castShadow = true;\n\t\t\t\t}\n\t\t\t\tif (options.receiveShadow !== false) {\n\t\t\t\t\tobject.receiveShadow = true;\n\t\t\t\t}\n\t\n\t\t\t\tif (object.geometry) {\n\t\t\t\t\tobject.geometry.computeBoundingBox();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (options.name !== undefined) {\n\t\t\t\tobject.name = options.name;\n\t\t\t}\n\t\t\tself.name = object.name;\n\t\n\t\t\tif (allObjects.set) {\n\t\t\t\tallObjects.set(object, this);\n\t\t\t} else {\n\t\t\t\tallObjects[object.id] = this;\n\t\t\t}\n\t\n\t\t\tobject.position.set(\n\t\t\t\tparseFloat(options.x) || 0,\n\t\t\t\tparseFloat(options.y) || 0,\n\t\t\t\tparseFloat(options.z) || 0\n\t\t\t);\n\t\n\t\t\tthis.setMaterial(options.material);\n\t\n\t\t\tif (options.color) {\n\t\t\t\tmaterial = object.material;\n\t\t\t\tmaterial.color = new THREE.Color(options.color);\n\t\t\t\tmaterial.ambient = material.color;\n\t\t\t}\n\t\n\t\t\t['position', 'scale', 'rotation', 'quaternion', 'material'].forEach(function (prop) {\n\t\t\t\tif (prop in object && !self[prop]) {\n\t\t\t\t\tself[prop] = object[prop];\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'visible', {\n\t\t\t\tset: function (val) {\n\t\t\t\t\tself.object.visible = !!val;\n\t\t\t\t},\n\t\t\t\tget: function () {\n\t\t\t\t\treturn self.object.visible;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'distance', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn distance(self.object, body || parent);\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tif (camera) {\n\t\t\t\tfrustum = new THREE.Frustum();\n\t\t\t\tcameraViewProjectionMatrix = new THREE.Matrix4();\n\t\t\t\tObject.defineProperty(this, 'inView', {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\tcamera.updateMatrixWorld(); // make sure the camera matrix is updated\n\t\t\t\t\t\tcamera.matrixWorldInverse.getInverse(camera.matrixWorld);\n\t\t\t\t\t\tcameraViewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\t\t\t\t\t\tfrustum.setFromMatrix(cameraViewProjectionMatrix);\n\t\t\t\t\t\treturn frustum.intersectsObject(self.object);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\n\t\tVRObject.prototype.hide = function () {\n\t\t\tthis.object.visible = false;\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.show = function () {\n\t\t\tthis.object.visible = true;\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.moveTo = function (x, y, z) {\n\t\t\tvar position = this.object.position;\n\t\n\t\t\tx = !isNaN(x) ? x : position.x;\n\t\t\ty = !isNaN(y) ? y : position.y;\n\t\t\tz = !isNaN(z) ? z : position.z;\n\t\n\t\t\tposition.set(x, y, z);\n\t\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.moveX = function (distance) {\n\t\t\tthis.object.translateX(distance);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.moveY = function (distance) {\n\t\t\tthis.object.translateY(distance);\n\t\t\treturn this;\n\t\t};\n\t\tVRObject.prototype.moveUp = VRObject.prototype.moveY;\n\t\tVRObject.prototype.moveDown = function (distance) {\n\t\t\tthis.moveY(-distance);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.moveZ = function (distance) {\n\t\t\tthis.object.translateZ(distance);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.rotateX = function (angle) {\n\t\t\tthis.object.rotateOnAxis(xAxis, angle);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.rotateY = function (angle) {\n\t\t\tthis.object.rotateOnAxis(yAxis, angle);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.rotateZ = function (angle) {\n\t\t\tthis.object.rotateOnAxis(zAxis, angle);\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.setScale = function (x, y, z) {\n\t\t\tvar scale = this.object.scale;\n\t\n\t\t\tif (x !== undefined && !isNaN(x)) {\n\t\t\t\tif (y === undefined && z === undefined) {\n\t\t\t\t\ty = z = x;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tx = !isNaN(x) ? x : scale.x;\n\t\t\ty = !isNaN(y) ? y : scale.y;\n\t\t\tz = !isNaN(z) ? z : scale.z;\n\t\n\t\t\tscale.set(x, y, z);\n\t\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.setMaterial = function (material, options) {\n\t\t\tif (material && this.object instanceof THREE.Mesh) {\n\t\t\t\tif (typeof material === 'function') {\n\t\t\t\t\tmaterial = material();\n\t\t\t\t} else if (typeof material === 'string' && materials[material]) {\n\t\t\t\t\tmaterial = materials[material](options);\n\t\t\t\t} else if (material && !(material instanceof THREE.Material) && typeof material !== 'number') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tmaterial = materials.material(material);\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\t\n\t\t\t\tif (material instanceof THREE.Material) {\n\t\t\t\t\tthis.object.material = material;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\t};\n\t\n\t\tVRObject.prototype.update = function () {};\n\t\n\t\tVRObject.prototype.raycastable = true;\n\t\n\t\tVRObject.repeat = function (count, options) {\n\t\t\tvar i,\n\t\t\t\tchange = false,\n\t\t\t\tlastObject = this,\n\t\t\t\tcurrentPosition = new THREE.Vector3(),\n\t\t\t\tdeltaPosition = new THREE.Vector3(),\n\t\t\t\tcurrentQuaternion = new THREE.Quaternion(),\n\t\t\t\tdeltaQuaternion = new THREE.Quaternion();\n\t\n\t\t\tif (!options) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif (options.offset) {}\n\t\n\t\t\tfor (i = 0; i < count; i++) {\n\t\n\t\t\t}\n\t\t};\n\t\n\t\tVRObject.findObject = function (object) {\n\t\t\tif (object instanceof VRObject) {\n\t\t\t\treturn object;\n\t\t\t}\n\t\n\t\t\tif (object && object instanceof THREE.Object3D) {\n\t\t\t\tif (allObjects.get) {\n\t\t\t\t\treturn allObjects.get(object);\n\t\t\t\t}\n\t\n\t\t\t\treturn allObjects[object.id];\n\t\t\t}\n\t\n\t\t\t// if (typeof object === 'number') {\n\t\t\t// \treturn allObjects[object];\n\t\t\t// }\n\t\t};\n\t\n\t\treturn VRObject;\n\t\n\t}());\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar map = {\n\t\t\"./box\": 11,\n\t\t\"./box.js\": 11,\n\t\t\"./cylinder\": 12,\n\t\t\"./cylinder.js\": 12,\n\t\t\"./empty\": 9,\n\t\t\"./empty.js\": 9,\n\t\t\"./floor\": 13,\n\t\t\"./floor.js\": 13,\n\t\t\"./grid\": 14,\n\t\t\"./grid.js\": 14,\n\t\t\"./image\": 15,\n\t\t\"./image.js\": 15,\n\t\t\"./panorama\": 16,\n\t\t\"./panorama.js\": 16,\n\t\t\"./sky\": 17,\n\t\t\"./sky.js\": 17,\n\t\t\"./sound\": 18,\n\t\t\"./sound.js\": 18,\n\t\t\"./sphere\": 19,\n\t\t\"./sphere.js\": 19,\n\t\t\"./text\": 20,\n\t\t\"./text.js\": 20,\n\t\t\"./torus\": 21,\n\t\t\"./torus.js\": 21,\n\t\t\"./video\": 22,\n\t\t\"./video.js\": 22\n\t};\n\tfunction webpackContext(req) {\n\t\treturn __webpack_require__(webpackContextResolve(req));\n\t};\n\tfunction webpackContextResolve(req) {\n\t\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n\t};\n\twebpackContext.keys = function webpackContextKeys() {\n\t\treturn Object.keys(map);\n\t};\n\twebpackContext.resolve = webpackContextResolve;\n\tmodule.exports = webpackContext;\n\twebpackContext.id = 8;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(33);\n\t\n\t\treturn function empty(parent, options) {\n\t\t\tvar obj = new THREE.Object3D();\n\t\n\t\t\tobj.name = 'empty';\n\t\n\t\t\tparent.add(obj);\n\t\n\t\t\treturn obj;\n\t\t};\n\t}());\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * NoSleep.js v0.5.0 - git.io/vfn01\n\t * Rich Tibbett\n\t * MIT license\n\t **/\n\t(function(root) {\n\t  // UA matching\n\t  var ua = {\n\t    Android: /Android/ig.test(navigator.userAgent),\n\t    iOS: /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent)\n\t  };\n\t\n\t  var media = {\n\t    WebM: \"data:video/webm;base64,GkXfo0AgQoaBAUL3gQFC8oEEQvOBCEKCQAR3ZWJtQoeBAkKFgQIYU4BnQI0VSalmQCgq17FAAw9CQE2AQAZ3aGFtbXlXQUAGd2hhbW15RIlACECPQAAAAAAAFlSua0AxrkAu14EBY8WBAZyBACK1nEADdW5khkAFVl9WUDglhohAA1ZQOIOBAeBABrCBCLqBCB9DtnVAIueBAKNAHIEAAIAwAQCdASoIAAgAAUAmJaQAA3AA/vz0AAA=\",\n\t    MP4: \"data:video/mp4;base64,AAAAHGZ0eXBpc29tAAACAGlzb21pc28ybXA0MQAAAAhmcmVlAAAAG21kYXQAAAGzABAHAAABthADAowdbb9/AAAC6W1vb3YAAABsbXZoZAAAAAB8JbCAfCWwgAAAA+gAAAAAAAEAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIVdHJhawAAAFx0a2hkAAAAD3wlsIB8JbCAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAIAAAACAAAAAABsW1kaWEAAAAgbWRoZAAAAAB8JbCAfCWwgAAAA+gAAAAAVcQAAAAAAC1oZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVmlkZW9IYW5kbGVyAAAAAVxtaW5mAAAAFHZtaGQAAAABAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEAAAAMdXJsIAAAAAEAAAEcc3RibAAAALhzdHNkAAAAAAAAAAEAAACobXA0dgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIAAgASAAAAEgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABj//wAAAFJlc2RzAAAAAANEAAEABDwgEQAAAAADDUAAAAAABS0AAAGwAQAAAbWJEwAAAQAAAAEgAMSNiB9FAEQBFGMAAAGyTGF2YzUyLjg3LjQGAQIAAAAYc3R0cwAAAAAAAAABAAAAAQAAAAAAAAAcc3RzYwAAAAAAAAABAAAAAQAAAAEAAAABAAAAFHN0c3oAAAAAAAAAEwAAAAEAAAAUc3RjbwAAAAAAAAABAAAALAAAAGB1ZHRhAAAAWG1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAAK2lsc3QAAAAjqXRvbwAAABtkYXRhAAAAAQAAAABMYXZmNTIuNzguMw==\"\n\t  };\n\t\n\t  function addSourceToVideo(element, type, dataURI) {\n\t    var source = document.createElement('source');\n\t    source.src = dataURI;\n\t    source.type = \"video/\" + type;\n\t    element.appendChild(source);\n\t  }\n\t\n\t  // NoSleep instance constructor\n\t  var NoSleep = function() {\n\t    if (ua.iOS) {\n\t      this.noSleepTimer = null;\n\t    } else if (ua.Android) {\n\t      // Set up no sleep video element\n\t      this.noSleepVideo = document.createElement('video');\n\t      this.noSleepVideo.setAttribute(\"loop\", \"\");\n\t\n\t      // Append nosleep video sources\n\t      addSourceToVideo(this.noSleepVideo, \"webm\", media.WebM);\n\t      addSourceToVideo(this.noSleepVideo, \"mp4\", media.MP4);\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  // Enable NoSleep instance\n\t  NoSleep.prototype.enable = function(duration) {\n\t    if (ua.iOS) {\n\t      this.disable();\n\t      this.noSleepTimer = window.setInterval(function() {\n\t        window.location = window.location;\n\t        window.setTimeout(window.stop, 0);\n\t      }, duration || 15000);\n\t    } else if (ua.Android) {\n\t      this.noSleepVideo.play();\n\t    }\n\t  };\n\t\n\t  // Disable NoSleep instance\n\t  NoSleep.prototype.disable = function() {\n\t    if (ua.iOS) {\n\t      if (this.noSleepTimer) {\n\t        window.clearInterval(this.noSleepTimer);\n\t        this.noSleepTimer = null;\n\t      }\n\t    } else if (ua.Android) {\n\t      this.noSleepVideo.pause();\n\t    }\n\t  };\n\t\n\t  // Append NoSleep API to root object\n\t  root.NoSleep = NoSleep;\n\t})(this);\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(33),\n\t\t\tgeometry = new THREE.BoxGeometry( 1, 1, 1 );\n\t\n\t\treturn function box(parent, options) {\n\t\t\tvar mesh;\n\t\n\t\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\t\tmesh.name = 'box';\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(33);\n\t\n\t\tfunction cylinder(parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmesh;\n\t\n\t\t\tgeometry = new THREE.CylinderGeometry(\n\t\t\t\toptions.radiusTop === undefined ? 0.5 : options.radiusTop,\n\t\t\t\toptions.radiusBottom === undefined ? 0.5 : options.radiusBottom,\n\t\t\t\toptions.height === undefined ? 1 : options.height,\n\t\t\t\toptions.radiusSegments === undefined ? 16 : options.radiusSegments,\n\t\t\t\toptions.heightSegments,\n\t\t\t\toptions.openEnded\n\t\t\t);\n\t\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\t\tmesh.name = 'cylinder';\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t}\n\t\n\t\treturn cylinder;\n\t}());\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(33);\n\t\n\t\tfunction floor(parent, options) {\n\t\t\tvar obj,\n\t\t\t\tgeometry;\n\t\n\t\t\tgeometry = new THREE.CircleGeometry( options.radius || 100, options.segments || 16 );\n\t\t\tgeometry.applyMatrix( new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\t\n\t\t\tobj = new THREE.Mesh(\n\t\t\t\tgeometry,\n\t\t\t\tmaterials.checkerboard({\n\t\t\t\t\trepeat: 100\n\t\t\t\t})\n\t\t\t);\n\t\t\tobj.name = 'floor';\n\t\n\t\t\tobj.receiveShadow = true;\n\t\n\t\t\tparent.add(obj);\n\t\n\t\t\treturn obj;\n\t\t}\n\t\n\t\treturn floor;\n\t}());\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar THREE = __webpack_require__(33);\n\t\n\t\treturn function box(parent, options) {\n\t\t\tvar obj,\n\t\t\t\tsize = options && options.size || 10,\n\t\t\t\tstep = options && options.step || 1;\n\t\n\t\t\tobj = new THREE.GridHelper(size, step);\n\t\t\tobj.name = 'grid';\n\t\t\tif (options) {\n\t\t\t\tobj.setColors(options.colorCenterLine || obj.color1, options.colorGrid || obj.color2);\n\t\t\t}\n\t\t\tobj.geometry.computeBoundingBox();\n\t\n\t\t\tparent.add(obj);\n\t\n\t\t\treturn obj;\n\t\t};\n\t}());\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(33);\n\t\n\t\treturn function image(parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmaterial,\n\t\t\t\tmesh,\n\t\t\t\tsrc,\n\t\t\t\ttex,\n\t\t\t\tself = this;\n\t\n\t\t\tif (typeof options === 'string') {\n\t\t\t\tsrc = options;\n\t\t\t} else if (options) {\n\t\t\t\tsrc = options.src;\n\t\t\t}\n\t\n\t\t\tif (src) {\n\t\t\t\ttex = materials.imageTexture(src, THREE.UVMapping, function (t, image) {\n\t\t\t\t\t//todo: don't do any of this if object has been deleted\n\t\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(1, image.naturalHeight / image.naturalWidth, 1));\n\t\t\t\t\tmaterial.map = tex;\n\t\t\t\t\tmaterial.visible = true;\n\t\t\t\t\tmesh.visible = true;\n\t\t\t\t\tparent.add(mesh);\n\t\n\t\t\t\t\tself.emit('loaded');\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1, 8);\n\t\n\t\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t\tside: THREE.DoubleSide,\n\t\t\t\ttransparent: true,\n\t\t\t\tmap: tex\n\t\t\t});\n\t\n\t\t\tmesh = new THREE.Mesh( geometry, material );\n\t\n\t\t\tmesh.visible = false;\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t    var p = {};\n\t        p.scaleX = p.scaleX || 1;\n\t        p.scaleY = p.scaleY || 1;\n\t        p.offsetX = p.offsetX || 0;\n\t        p.offsetY = p.offsetY || 0;\n\t        p.phiStart = p.phiStart || 0;\n\t        p.phiLength = p.phiLength || Math.PI * 2;\n\t        p.thetaStart = p.thetaStart || 0;\n\t        p.thetaLength = p.thetaLength || Math.PI;\n\t    // Reduce ptr.\n\t    var isSupportWebgl = Boolean(window.isSupportWebgl);\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(33),\n\t        // geometry = new THREE.BoxGeometry(15, 15, 15, 10, 10, 10);\n\t            // geometry = new THREE.SphereGeometry(100, 60, 60);\n\t        // geometry = new THREE.SphereGeometry(60, 100, 100,\n\t        geometry = new THREE.SphereGeometry(16, 32, 32, p.phiStart, p.phiLength, p.thetaStart, p.thetaLength);\n\t        geometry.applyMatrix(new THREE.Matrix4().makeScale(-2, 2, 2.3));\n\t        geometry.applyMatrix(new THREE.Matrix4().makeRotationY(- Math.PI / 3));\n\t    // Will not render panorama if already contains the key.\n\t    var mapRender = {};\n\t    var isListener = false;\n\t    // Will use css3drenderer if not support webgl.\n\t    \n\t    var texturePlaceholder = document.createElement( 'canvas' );\n\t    texturePlaceholder.width = 64;\n\t    texturePlaceholder.height = 64;\n\t    var context = texturePlaceholder.getContext( '2d' );\n\t    context.fillStyle = 'rgb( 200, 200, 200 )';\n\t    context.fillRect( 0, 0, texturePlaceholder.width, texturePlaceholder.height );\n\t\tvar STR_CHILDEN_NAME = 'obj3DElement';\n\t\n\t    function loadTexture( path, _parent ) {\n\t        var texture = new THREE.Texture( texturePlaceholder );\n\t        var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5 } );\n\t        var image = new Image();\n\t        image.onload = function () {\n\t            texture.image = this;\n\t            texture.needsUpdate = true;\n\t            _parent.dispatchEvent({\n\t                type: 'img-loaded'\n\t            });\n\t        };\n\t        image.src = path;\n\t        return material;\n\t    }\n\t\n\t\treturn function panorama(parent, options, renderer) {\n\t        var src,\n\t            preview,\n\t            cubeSrc = {};\n\t\t\tvar self = this;\n\t\t\tvar material,\n\t\t\t\tmesh,\n\t            pretex,\n\t            mapKey,\n\t\t\t\ttex;\n\t\n\t\t\tif (typeof options === 'string') {\n\t\t\t\tsrc = options;\n\t\t\t} else if (options) {\n\t\t\t\tsrc = options.src;\n\t            preview = options.preview;\n\t            if (options.left) {\n\t                cubeSrc.left = options.left;\n\t                cubeSrc.right = options.right;\n\t                cubeSrc.down = options.down;\n\t                cubeSrc.top = options.top;\n\t                cubeSrc.front = options.front;\n\t                cubeSrc.back = options.back;\n\t            }\n\t\t\t}\n\t        mapKey = src;\n\t        if (!isSupportWebgl) {\n\t            mapKey = cubeSrc.left;\n\t        }\n\t        if (mapRender[mapKey]) {\n\t            // Remove all mesh object if scene contains them.\n\t            // Optimezei and Reduce Memory Usage for Panorama Model.\n\t            for (var key in mapRender) {\n\t                if(mapRender.hasOwnProperty(key)) {\n\t                    while (parent.getObjectByName(key)) {\n\t                        parent.remove(parent.getObjectByName(key));\n\t                    }\n\t                }\n\t            }\n\t            parent.add(mapRender[mapKey]);\n\t            parent.dispatchEvent({\n\t                type: 'img-loaded'\n\t            });\n\t            return mapRender[mapKey];\n\t        }\n\t\t\tif (renderer instanceof THREE.CSS3DRenderer) {\n\t            var lastCube = parent.getObjectByName('cube');\n\t            if (lastCube) {\n\t                for ( var i = 0; i < 6; i ++ ) {\n\t                    if (lastCube.getObjectByName(STR_CHILDEN_NAME + i)) {\n\t                        lastCube.remove(lastCube.getObjectByName(STR_CHILDEN_NAME + i));\n\t                    }\n\t                }\n\t                //\n\t                parent.remove(lastCube);\n\t            }\n\t\t\t\tvar cube = new THREE.Object3D();\n\t\t\t\tvar sides = [\n\t                {\n\t                    url: cubeSrc.right,\n\t                    position: [ -512, 0, 0 ],\n\t                    rotation: [ 0, Math.PI / 2, 0 ]\n\t                },\n\t                {\n\t                    url: cubeSrc.left,\n\t                    position: [ 512, 0, 0 ],\n\t                    rotation: [ 0, -Math.PI / 2, 0 ]\n\t                },\n\t                {\n\t                    url: cubeSrc.top,\n\t                    position: [ 0,  512, 0 ],\n\t                    rotation: [ Math.PI / 2, 0, Math.PI ]\n\t                },\n\t                {\n\t                    url: cubeSrc.down,\n\t                    position: [ 0, -512, 0 ],\n\t                    rotation: [ - Math.PI / 2, 0, Math.PI ]\n\t                },\n\t                {\n\t                    url: cubeSrc.front,\n\t                    position: [ 0, 0,  512 ],\n\t                    rotation: [ 0, Math.PI, 0 ]\n\t                },\n\t                {\n\t                    url: cubeSrc.back,\n\t                    position: [ 0, 0, -512 ],\n\t                    rotation: [ 0, 0, 0 ]\n\t                }\n\t            ];\n\t            // Remove children from cube;\n\t            parent.add(cube);\n\t            var callbackOnload = function () {\n\t                // Notify outside to do something when image has been loaded.\n\t                parent.dispatchEvent({\n\t                    type: 'img-loaded'\n\t                });\n\t            };\n\t            for ( var i = 0; i < sides.length; i ++ ) {\n\t                var side = sides[ i ];\n\t                var element = document.createElement( 'img' );\n\t                element.width = 1026; // 2 pixels extra to close the gap.\n\t                element.src = side.url;\n\t                element.onload = callbackOnload;\n\t                var object = new THREE.CSS3DObject( element );\n\t                object.name = STR_CHILDEN_NAME + i;\n\t                object.position.fromArray( side.position );\n\t                object.rotation.fromArray( side.rotation );\n\t                cube.add( object );\n\t            }\n\t\t\t\tcube.name = 'cube';\n\t            return cube;\n\t\n\t\t\t}\n\t        if (!isSupportWebgl) {\n\t            var arrMaterial = [\n\t                loadTexture( cubeSrc.right, parent ), // right\n\t                loadTexture( cubeSrc.left, parent ), // left\n\t                loadTexture( cubeSrc.top, parent ), // top\n\t                loadTexture( cubeSrc.down, parent ), // bottom\n\t                loadTexture( cubeSrc.front, parent ), // front\n\t                loadTexture( cubeSrc.back, parent ) // back\n\t            ];\n\t\n\t            mesh = new THREE.Mesh( new THREE.BoxGeometry( 60, 60, 60, 20, 20, 20 ), new THREE.MultiMaterial( arrMaterial ) );\n\t            mesh.scale.x = - 1;\n\t            // The primy name use one of array.\n\t            mesh.name = mapKey;\n\t            // Fisheye\n\t            // for ( var i = 0, l = mesh.geometry.vertices.length; i < l; i ++ ) {\n\t            //     var vertex = mesh.geometry.vertices[ i ];\n\t            //     vertex.normalize();\n\t            //     vertex.multiplyScalar( 550 );\n\t            // }\n\t            mapRender[mapKey] = mesh;\n\t            parent.add( mesh );\n\t            return mesh;\n\t        }\n\t\n\t\t\tif (preview) {\n\t\t\t\tpretex = materials.imageTexture(preview, THREE.UVMapping, function () {\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tif (src) {\n\t            if (!isListener) {\n\t                parent.addEventListener('loaded', function (event) {\n\t                    var data = event.data;\n\t                    while (parent.getObjectByName('preview')) {\n\t                        parent.remove(parent.getObjectByName('preview'));\n\t                    }\n\t\n\t                    material = new THREE.MeshBasicMaterial({\n\t                        map: data.tex\n\t                    });\n\t                    mesh = new THREE.Mesh(geometry, material);\n\t                    mapRender[data.src] = mesh;\n\t\n\t                    mesh.name = src;\n\t\n\t                    parent.add(mesh);\n\t                    parent.dispatchEvent({\n\t                        type: 'img-loaded'\n\t                    });\n\t                });\n\t                isListener = true;\n\t            }\n\t\t\t\ttex = materials.imageTexture(src, THREE.UVMapping, function () {\n\t                parent.dispatchEvent({\n\t                    type: 'loaded',\n\t                    data: {\n\t                        src: src,\n\t                        tex: tex\n\t                    }\n\t                });\n\t\t\t\t\tself.emit('loaded');\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t\t// transparent: true,\n\t\t\t\t// envMap: tex,\n\t\t\t\tmap: pretex\n\t            // side: THREE.DoubleSide,\n\t            // debug\n\t            // wireframe: true,\n\t            // depthWrite: false\n\t            // envMap:cubemap\n\t\t\t});\n\t\n\t\t\tmesh = new THREE.Mesh(geometry, material);\n\t\n\t\t\tif (options && options.stereo) {\n\t\t\t\tif (options.stereo === 'vertical') {\n\t\t\t\t\ttex.repeat.y = 0.5;\n\t\t\t\t} else {\n\t\t\t\t\ttex.repeat.x = 0.5;\n\t\t\t\t}\n\t\t\t\tmesh.userData.stereo = options.stereo;\n\t\t\t}\n\t\n\t        mesh.name = 'preview';\n\t\n\t        parent.add(mesh);\n\t\n\t\t\tthis.raycastable = false;\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(33),\n\t\t\tTAU = Math.PI * 2,\n\t\t\tHALF_PI = Math.PI / 2,\n\t\n\t\t\tdistance = 400000,\n\t\t\tscratchVector = new THREE.Vector3(),\n\t\n\t\t\tparams = [\n\t\t\t\t'luminance',\n\t\t\t\t'turbidity',\n\t\t\t\t'reileigh',\n\t\t\t\t'mieCoefficient',\n\t\t\t\t'mieDirectionalG'\n\t\t\t];\n\t\n\t\t__webpack_require__(38);\n\t\n\t\treturn function sky(parent, options) {\n\t\t\tvar obj = new THREE.Sky(),\n\t\t\t\tself = this,\n\t\t\t\tscene = parent,\n\t\t\t\tlight,\n\t\t\t\tsunPosition,\n\t\t\t\tazimuth = Math.PI / 6,\n\t\t\t\taltitude = Math.PI / 6;\n\t\n\t\t\tfunction mod(x, y) {\n\t\t\t\treturn x - y * Math.floor(x / y);\n\t\t\t}\n\t\n\t\t\tfunction update() {\n\t\t\t\tvar sinTheta,\n\t\t\t\t\tcosTheta,\n\t\t\t\t\tphi,\n\t\t\t\t\tsinPhi,\n\t\t\t\t\tcosPhi;\n\t\n\t\t\t\tsinTheta = Math.sin(altitude);\n\t\t\t\tcosTheta = Math.cos(altitude);\n\t\t\t\tphi = -HALF_PI - azimuth;\n\t\t\t\tsinPhi = Math.sin(phi);\n\t\t\t\tcosPhi = Math.cos(phi);\n\t\n\t\t\t\tsunPosition.set(\n\t\t\t\t\tdistance * cosPhi * cosTheta,\n\t\t\t\t\tdistance * sinTheta,\n\t\t\t\t\tdistance * sinPhi * cosTheta\n\t\t\t\t);\n\t\n\t\t\t\tif (light) {\n\t\t\t\t\tlight.intensity = 1.5 * Math.max(0.0, 1.0 - Math.exp(-((Math.PI / 1.95 - Math.abs(HALF_PI - altitude)) / 1.5)));\n\t\t\t\t\tlight.position.copy(sunPosition).normalize().multiplyScalar(100);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tobj.mesh.name = 'sky';\n\t\n\t\t\tparent.add(obj.mesh);\n\t\n\t\t\twhile (!(scene instanceof THREE.Scene) && scene.parent) {\n\t\t\t\tscene = scene.parent;\n\t\t\t}\n\t\t\tlight = scene.getObjectByName('directional-light');\n\t\n\t\t\tthis.setOptions = function (options) {\n\t\t\t\tvar needUpdate = false,\n\t\t\t\t\taltitude,\n\t\t\t\t\tazimuth;\n\t\n\t\t\t\tif (options) {\n\t\t\t\t\tparams.forEach(function (param) {\n\t\t\t\t\t\tvar val = options[param];\n\t\t\t\t\t\tif (val !== undefined) {\n\t\t\t\t\t\t\tval = parseFloat(val);\n\t\t\t\t\t\t\tif (!isNaN(val)) {\n\t\t\t\t\t\t\t\tobj.uniforms[param].value = val;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\n\t\t\t\t\tif (options.sunPosition instanceof THREE.Vector3) {\n\t\t\t\t\t\tobj.uniforms.sunPosition.value.copy(options.sunPosition);\n\t\t\t\t\t} else if (Array.isArray(options.sunPosition)) {\n\t\t\t\t\t\tobj.uniforms.sunPosition.value.set(obj.uniforms.sunPosition.value, options.sunPosition);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.altitude = options.altitude;\n\t\t\t\t\t\tself.azimuth = options.azimuth;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tObject.defineProperty(this, 'azimuth', {\n\t\t\t\tset: function (val) {\n\t\t\t\t\tval = mod(parseFloat(val), TAU);\n\t\t\t\t\tif (!isNaN(val) && val !== azimuth) {\n\t\t\t\t\t\tazimuth = val;\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tget: function () {\n\t\t\t\t\treturn azimuth;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'altitude', {\n\t\t\t\tset: function (val) {\n\t\t\t\t\tval = mod(parseFloat(val), TAU);\n\t\t\t\t\tif (!isNaN(val) && val !== altitude) {\n\t\t\t\t\t\taltitude = val;\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tget: function() {\n\t\t\t\t\treturn altitude;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tthis.setAltitude = function (val) {\n\t\t\t\tself.altitude = val;\n\t\t\t\treturn this;\n\t\t\t};\n\t\n\t\t\tthis.setAzimuth = function (val) {\n\t\t\t\tself.azimuth = val;\n\t\t\t\treturn this;\n\t\t\t};\n\t\n\t\t\tsunPosition = obj.uniforms.sunPosition.value;\n\t\t\tupdate();\n\t\n\t\t\tthis.setOptions(options);\n\t\n\t\t\tthis.raycastable = false;\n\t\n\t\t\treturn obj.mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(33);\n\t\n\t\t__webpack_require__(37);\n\t\n\t\treturn function sound(parent, options) {\n\t\t\tvar obj,\n\t\t\t\tsrc,\n\t\t\t\tlistener,\n\t\t\t\tscene = parent;\n\t\n\t\t\tif (typeof options === 'string' || Array.isArray(options)) {\n\t\t\t\tsrc = options;\n\t\t\t} else if (options) {\n\t\t\t\tsrc = options.src;\n\t\t\t}\n\t\n\t\t\twhile (!(scene instanceof THREE.Scene) && scene.parent) {\n\t\t\t\tscene = scene.parent;\n\t\t\t}\n\t\n\t\t\tlistener = scene.getObjectByName('audio-listener');\n\t\t\tobj = new THREE.Audio(listener);\n\t\t\t// obj.setLoop(true);\n\t\t\tobj.load(src);\n\t\n\t\t\tthis.start = obj.start.bind(obj);\n\t\t\tthis.volume = obj.volume.bind(obj);\n\t\n\t\t\tparent.add(obj);\n\t\n\t\t\treturn obj;\n\t\t};\n\t}());\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(33);\n\t\n\t\treturn function box(parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmesh;\n\t\n\t\t\tgeometry = new THREE.SphereGeometry(\n\t\t\t\toptions.radius === undefined ? 0.5 : options.radius,\n\t\t\t\toptions.widthSegments === undefined ? 16 : options.widthSegments,\n\t\t\t\toptions.heightSegments === undefined ? 12 : options.heightSegments,\n\t\t\t\toptions.phiStart,\n\t\t\t\toptions.phiLength,\n\t\t\t\toptions.thetaStart,\n\t\t\t\toptions.thetaLength\n\t\t\t);\n\t\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\t\tmesh.name = 'sphere';\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar THREE = __webpack_require__(33),\n\t\t\tfontSizeRegex = /(\\d+)px/i,\n\t\t\tnewLineRegex = /[\\n\\r]/,\n\t\t\tspaceRegex = /[\\t ]/,\n\t\t\tlog2 = Math.log(2),\n\t\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1);\n\t\n\t\treturn function text(parent, options) {\n\t\t\tvar self = this,\n\t\t\t\tmaterial,\n\t\t\t\tcanvas,\n\t\t\t\tctx,\n\t\t\t\tmesh,\n\t\t\t\tcontainer,\n\t\t\t\tsrc,\n\t\t\t\ttextWidth = 0,\n\t\t\t\ttextHeight = 0,\n\t\t\t\tprops = {\n\t\t\t\t\ttext: '',\n\t\t\t\t\tfont: '80px sans-serif',\n\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\ttextBaseline: '',\n\t\t\t\t\tdirection: '',\n\t\t\t\t\tfillStyle: 'white',\n\t\t\t\t\tresolution: 256, //pixels per meter\n\t\t\t\t\twrap: 5 //in meters\n\t\t\t\t},\n\t\t\t\ttex;\n\t\n\t\t\tfunction nextPowerOfTwo(n) {\n\t\t\t\treturn Math.pow(2, Math.ceil(Math.log(n) / log2));\n\t\t\t}\n\t\n\t\t\tfunction Line(word) {\n\t\t\t\tthis.spaceWidth = ctx.measureText(' ').width;\n\t\t\t\tthis.totalWidth = 0;\n\t\t\t\tthis.wordsWidth = 0;\n\t\t\t\tthis.words = [];\n\t\t\t\tthis.wrap = false;\n\t\t\t\tif (word) {\n\t\t\t\t\tthis.add(word);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tLine.prototype.text = function () {\n\t\t\t\treturn this.words.join(' ');\n\t\t\t};\n\t\n\t\t\tLine.prototype.add = function(word) {\n\t\t\t\tvar wordWidth;\n\t\t\t\tif (this.words.length) {\n\t\t\t\t\tthis.totalWidth += this.spaceWidth;\n\t\t\t\t}\n\t\t\t\tthis.words.push(word);\n\t\t\t\twordWidth = Line.measure(word);\n\t\t\t\tthis.totalWidth += wordWidth;\n\t\t\t\tthis.wordsWidth += wordWidth;\n\t\t\t};\n\t\n\t\t\tLine.prototype.measure = function(word) {\n\t\t\t\tvar width = this.totalWidth;\n\t\t\t\tif (word) {\n\t\t\t\t\twidth += Line.measure(word);\n\t\t\t\t\tif (this.words.length) {\n\t\t\t\t\t\twidth += this.spaceWidth;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn width;\n\t\t\t};\n\t\n\t\t\tLine.measure = function(word) {\n\t\t\t\treturn ctx.measureText(word).width;\n\t\t\t};\n\t\n\t\t\tfunction update() {\n\t\t\t\t//text stuffs\n\t\t\t\tvar text,\n\t\t\t\t\tword = '',\n\t\t\t\t\tletter,\n\t\t\t\t\tisSpace,\n\t\t\t\t\tline,\n\t\t\t\t\tlines = [],\n\t\t\t\t\tparse,\n\t\n\t\t\t\t\t//layout\n\t\t\t\t\tdirection = getComputedStyle(document.body).direction,\n\t\t\t\t\tinherit,\n\t\t\t\t\tresolution = parseFloat(props.resolution) || 256,\n\t\t\t\t\twrap,\n\t\t\t\t\twrapped = false,\n\t\t\t\t\tfontSize,\n\t\t\t\t\tpadding,\n\t\n\t\t\t\t\t//measurements\n\t\t\t\t\tlineHeight,\n\t\t\t\t\ti, start, y, measure,\n\t\t\t\t\twidth,\n\t\t\t\t\theight = 0;\n\t\n\t\t\t\twrap = parseFloat(props.wrap);\n\t\t\t\tif (isNaN(wrap) || wrap < 0) {\n\t\t\t\t\twrap = 5;\n\t\t\t\t}\n\t\t\t\twidth = resolution * wrap;\n\t\n\t\t\t\tctx.font = props.font;\n\t\t\t\tparse = fontSizeRegex.exec(ctx.font);\n\t\t\t\tfontSize = parseFloat(parse && parse[1]) || 50;\n\t\n\t\t\t\tlineHeight = fontSize * 1.5;\n\t\n\t\t\t\tline = new Line();\n\t\n\t\t\t\ttext = props.text === 0 ? '0' : String(props.text || '');\n\t\t\t\tif (wrap) {\n\t\t\t\t\ttext = text.trim() + ' ';\n\t\t\t\t\tfor (i = 0; i < text.length; i++) {\n\t\t\t\t\t\tletter = text.charAt(i);\n\t\t\t\t\t\tif (newLineRegex.test(letter)) {\n\t\t\t\t\t\t\tline.add(word);\n\t\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t\t\tword = '';\n\t\t\t\t\t\t\tline = new Line();\n\t\t\t\t\t\t} else if (spaceRegex.test(letter)) {\n\t\t\t\t\t\t\tmeasure = line.measure(word);\n\t\t\t\t\t\t\tif (measure < width) {\n\t\t\t\t\t\t\t\tif (line) {\n\t\t\t\t\t\t\t\t\tline.add(word);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tline = new Line(word);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (!line && Line.measure(word) >= width) {\n\t\t\t\t\t\t\t\t//one very long word\n\t\t\t\t\t\t\t\tlines.push(new Line(word));\n\t\t\t\t\t\t\t\tword = '';\n\t\t\t\t\t\t\t\tline = new Line();\n\t\t\t\t\t\t\t\twrapped = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tline.wrap = true;\n\t\t\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t\t\t\tline = new Line(word);\n\t\t\t\t\t\t\t\twrapped = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tword = '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tword += letter;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (line) {\n\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlines.push(new Line(text));\n\t\t\t\t}\n\t\n\t\t\t\tif (!width || !wrapped) {\n\t\t\t\t\twidth = lines.reduce(function (previous, line) {\n\t\t\t\t\t\treturn Math.max(previous, line.totalWidth);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t\twidth = Math.min(width, 2048);\n\t\n\t\t\t\theight = lines.length * lineHeight;\n\t\n\t\t\t\tif (options && options.mipmap === false) {\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t} else {\n\t\t\t\t\tcanvas.width = nextPowerOfTwo(width);\n\t\t\t\t\tcanvas.height = nextPowerOfTwo(height);\n\t\t\t\t}\n\t\n\t\t\t\tmesh.scale.set(canvas.width / resolution, canvas.height / resolution, 1);\n\t\n\t\t\t\t//debug\n\t\t\t\t// ctx.fillStyle = 'rgba(100, 100, 100, 0.5)';\n\t\t\t\t// ctx.fillRect(0, 0, canvas.width, canvas.height);\n\t\t\t\t// document.body.appendChild(canvas);\n\t\t\t\t// canvas.style.cssText = 'position: absolute; width: auto !important; height: auto !important; max-width: 80%';\n\t\n\t\t\t\t/*\n\t\t\t\tset all these properties again because they get reset\n\t\t\t\twhen you resize the canvas\n\t\t\t\t*/\n\t\t\t\tctx.font = props.font;\n\t\t\t\tctx.textAlign = props.textAlign;\n\t\t\t\tctx.textBaseline = props.textBaseline;\n\t\t\t\tctx.direction = props.direction;\n\t\t\t\tctx.fillStyle = props.fillStyle;\n\t\t\t\t//todo: add maxWidth?\n\t\n\t\t\t\tpadding = (canvas.width - width) / 2;\n\t\t\t\ty = (canvas.height - height) / 2 + lineHeight / 2;\n\t\n\t\t\t\tinherit = (ctx.direction === '' || ctx.direction === 'inherit');\n\t\t\t\tif (ctx.textAlign === 'center') {\n\t\t\t\t\tstart = canvas.width / 2;\n\t\t\t\t} else if (ctx.textAlign === 'right' ||\n\t\t\t\t\tctx.textAlign === 'end' && (ctx.direction === 'ltr' || inherit && direction === 'ltr') ||\n\t\t\t\t\tctx.textAlign === 'start' && (ctx.direction === 'rtl' || inherit && direction === 'rtl')) {\n\t\n\t\t\t\t\tstart = canvas.width - padding;\n\t\t\t\t} else {\n\t\t\t\t\tstart = padding;\n\t\t\t\t}\n\t\n\t\t\t\tlines.forEach(function (line) {\n\t\t\t\t\tvar x,\n\t\t\t\t\t\tspace;\n\t\t\t\t\tif (props.textAlign === 'justify' && line.wrap && line.words.length > 1) {\n\t\t\t\t\t\tx = start;\n\t\t\t\t\t\tspace = (width - line.wordsWidth) / (line.words.length - 1);\n\t\t\t\t\t\tline.words.forEach(function (word) {\n\t\t\t\t\t\t\tctx.fillText(word, x, y);\n\t\t\t\t\t\t\tx += space + Line.measure(word);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.fillText(line.text(), start, y);\n\t\t\t\t\t}\n\t\t\t\t\ty += lineHeight;\n\t\t\t\t});\n\t\n\t\t\t\ttextWidth = width / resolution;\n\t\t\t\ttextHeight = lines.length * lineHeight / resolution;\n\t\n\t\t\t\ttex.needsUpdate = true;\n\t\n\t\t\t\tmesh.name = text.trim();\n\t\t\t}\n\t\n\t\t\tcanvas = document.createElement('canvas');\n\t\t\tctx = canvas.getContext('2d');\n\t\t\ttex = new THREE.Texture(canvas);\n\t\n\t\t\tif (canvas.width === nextPowerOfTwo(canvas.width) &&\n\t\t\t\tcanvas.height === nextPowerOfTwo(canvas.height)) {\n\t\n\t\t\t\ttex.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\t\ttex.generateMipmaps = true;\n\t\t\t}\n\t\n\t\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t\tside: THREE.DoubleSide,\n\t\t\t\ttransparent: true,\n\t\t\t\tmap: tex\n\t\t\t});\n\t\n\t\t\tmesh = new THREE.Mesh(geometry, material);\n\t\n\t\t\tcontainer = new THREE.Object3D();\n\t\t\tcontainer.name = 'text';\n\t\t\tcontainer.add(mesh);\n\t\t\tparent.add(container);\n\t\n\t\t\tif (typeof options === 'string') {\n\t\t\t\tprops.text = options;\n\t\t\t} else if (options) {\n\t\t\t\tObject.keys(props).forEach(function (key) {\n\t\t\t\t\tprops[key] = options[key] || props[key];\n\t\t\t\t});\n\t\t\t}\n\t\t\tupdate();\n\t\n\t\t\tObject.keys(props).forEach(function (key) {\n\t\t\t\tObject.defineProperty(self, key, {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\treturn props[key];\n\t\t\t\t\t},\n\t\t\t\t\tset: function (val) {\n\t\t\t\t\t\tprops[key] = val;\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(self, 'width', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn textWidth;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(self, 'height', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn textHeight;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tthis.material = material;\n\t\n\t\t\treturn container;\n\t\t};\n\t}());\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar materials = __webpack_require__(6),\n\t\t\tTHREE = __webpack_require__(33);\n\t\n\t\treturn function torus(parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmesh;\n\t\n\t\t\tgeometry = new THREE.TorusGeometry(\n\t\t\t\toptions.radius === undefined ? 0.5 : options.radius,\n\t\t\t\toptions.tube === undefined ? 0.125 : options.tube,\n\t\t\t\toptions.radialSegments === undefined ? 12 : options.radialSegments,\n\t\t\t\toptions.tubularSegments === undefined ? 16 : options.tubularSegments,\n\t\t\t\toptions.arc\n\t\t\t);\n\t\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\t\tmesh.name = 'torus';\n\t\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t}());\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = (function () {\n\t\t'use strict';\n\t\n\t\tvar THREE = __webpack_require__(33),\n\t\t\turlRegex = __webpack_require__(34),\n\t\t\textRegex = /\\.(webm|ogg|ogv|m4v|mp4|mov)/i,\n\t\t\tvideo;\n\t\n\t\tvideo = function (parent, options) {\n\t\t\tvar geometry,\n\t\t\t\tmaterial,\n\t\t\t\tmesh,\n\t\t\t\tvid,\n\t\t\t\ttex,\n\t\t\t\taspectRatio = 1,\n\t\t\t\tplaying = false,\n\t\t\t\tself = this;\n\t\n\t\t\tfunction isPowerOfTwo(num) {\n\t\t\t\treturn num > 0 && (num & (num-1)) === 0; // jshint ignore:line\n\t\t\t}\n\t\n\t\t\tfunction loadedMetadata() {\n\t\t\t\t//todo: don't do any of this if object has been deleted\n\t\n\t\t\t\tvar newAspectRatio = vid.videoWidth / vid.videoHeight;\n\t\t\t\tif (!options || !options.sphere) {\n\t\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(1, aspectRatio / newAspectRatio, 1));\n\t\t\t\t}\n\t\t\t\taspectRatio = newAspectRatio;\n\t\n\t\t\t\tif (vid.videoWidth === vid.videoHeight &&\n\t\t\t\t\t\tisPowerOfTwo(vid.videoWidth) && isPowerOfTwo(vid.videoHeight)) {\n\t\n\t\t\t\t\ttex.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\t\t\ttex.generateMipmaps = true;\n\t\t\t\t} else {\n\t\t\t\t\ttex.minFilter = THREE.LinearFilter;\n\t\t\t\t\ttex.generateMipmaps = false;\n\t\t\t\t}\n\t\n\t\t\t\tmaterial.map = tex;\n\t\t\t\tmaterial.visible = true;\n\t\n\t\t\t\tif (playing) {\n\t\t\t\t\tvid.play();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction setSource(sources) {\n\t\t\t\tsources.forEach(function (src) {\n\t\t\t\t\tvar parse,\n\t\t\t\t\t\text,\n\t\t\t\t\t\tsource;\n\t\n\t\t\t\t\tif (!src) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tparse = urlRegex.exec(src);\n\t\t\t\t\tif (parse &&\n\t\t\t\t\t\t\t(parse[1] && parse[1] !== window.location.hostΩ ||\n\t\t\t\t\t\t\t\tparse[2] && parse[2] !== window.location.port)) {\n\t\n\t\t\t\t\t\tif (vid.crossOrigin !== undefined) {\n\t\t\t\t\t\t\tvid.crossOrigin = 'anonymous';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('Browser does not support cross-origin video');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsource = document.createElement('source');\n\t\t\t\t\tsource.src = src;\n\t\n\t\t\t\t\text = extRegex.exec(src);\n\t\t\t\t\tif (!ext || vid.canPlayType('video/' + ext[1])) {\n\t\t\t\t\t\tvid.appendChild(source);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\t/*\n\t\t\tPause the video when this browser tab is in the background or minimized.\n\t\t\tResume when it comes back in focus, but only if the user didn't pause manually.\n\t\t\t*/\n\t\t\tfunction visibilityChange() {\n\t\t\t\tif (document.hidden || document.mozHidden || document.msHidden || document.webkitHidden) {\n\t\t\t\t\tvid.pause();\n\t\t\t\t} else if (playing) {\n\t\t\t\t\tvid.play();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tvid = document.createElement('video');\n\t\t\tvid.loop = true;\n\t\t\tvid.addEventListener('loadedmetadata', loadedMetadata, false);\n\t\n\t\t\tif (Array.isArray(options)) {\n\t\t\t\tsetSource(options);\n\t\t\t} if (typeof options === 'string') {\n\t\t\t\tsetSource([options]);\n\t\t\t} else if (typeof options.src === 'string') {\n\t\t\t\tsetSource([options.src]);\n\t\t\t} else if (Array.isArray(options.src)) {\n\t\t\t\tsetSource(options.src);\n\t\t\t}\n\t\n\t\t\tvid.load();\n\t\n\t\t\ttex = new THREE.VideoTexture(vid, THREE.UVMapping);\n\t\t\ttex.format = THREE.RGBFormat;\n\t\n\t\t\tif (options && options.sphere) {\n\t\t\t\tgeometry = new THREE.SphereGeometry(\n\t\t\t\t\t994, //radius\n\t\t\t\t\t60, //widthSegments\n\t\t\t\t\t60, //heightSegments\n\t\t\t\t\t(parseFloat(options.phiStart) || 0) * Math.PI * 2,\n\t\t\t\t\t(parseFloat(options.phiLength) || 1) * Math.PI * 2,\n\t\t\t\t\t(parseFloat(options.thetaStart) || 0) * Math.PI,\n\t\t\t\t\t(parseFloat(options.thetaLength) || 1) * Math.PI\n\t\t\t\t);\n\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(-1, 1, 1));\n\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeRotationY(- Math.PI / 2));\n\t\t\t} else {\n\t\t\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1, 8);\n\t\t\t}\n\t\n\t\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t\tside: THREE.DoubleSide,\n\t\t\t\tmap: tex,\n\t\t\t\tvisible: false\n\t\t\t});\n\t\n\t\t\tmesh = new THREE.Mesh(geometry, material);\n\t\n\t\t\tif (options && options.stereo) {\n\t\t\t\tif (options.stereo === 'vertical') {\n\t\t\t\t\ttex.repeat.y = 0.5;\n\t\t\t\t} else {\n\t\t\t\t\ttex.repeat.x = 0.5;\n\t\t\t\t}\n\t\t\t\tmesh.userData.stereo = options.stereo;\n\t\t\t}\n\t\n\t\t\tif (vid.readyState) {\n\t\t\t\tloadedMetadata();\n\t\t\t}\n\t\n\t\t\tthis.play = function play() {\n\t\t\t\tplaying = true;\n\t\t\t\tvid.play();\n\t\t\t\treturn this;\n\t\t\t};\n\t\n\t\t\tthis.pause = function pause() {\n\t\t\t\tplaying = false;\n\t\t\t\tvid.pause();\n\t\t\t\treturn this;\n\t\t\t};\n\t\n\t\t\tthis.canPlayType = video.canPlayType;\n\t\n\t\t\tObject.defineProperty(this, 'width', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.videoWidth;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'height', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.videoHeight;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'paused', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn !playing;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'volume', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.volume;\n\t\t\t\t},\n\t\t\t\tset: function (vol) {\n\t\t\t\t\tvid.volume = vol;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'muted', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.muted;\n\t\t\t\t},\n\t\t\t\tset: function (muted) {\n\t\t\t\t\tvid.muted = muted;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'duration', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.duration || 0;\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tObject.defineProperty(this, 'currentTime', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn vid.currentTime;\n\t\t\t\t},\n\t\t\t\tset: function (currentTime) {\n\t\t\t\t\tif (vid.readyState && currentTime < vid.duration && currentTime >= 0) {\n\t\t\t\t\t\tvid.currentTime = currentTime;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\t[\n\t\t\t\t'loadedmetadata',\n\t\t\t\t'play',\n\t\t\t\t'pause',\n\t\t\t\t'playing',\n\t\t\t\t'progress'\n\t\t\t].forEach(function registerMediaEvent(event) {\n\t\t\t\tvid.addEventListener(event, self.emit.bind(self, event));\n\t\t\t});\n\t\n\t\t\t//sometimes video fails to play because it's too big. remove it and try again\n\t\t\tvid.addEventListener('error', function (evt) {\n\t\t\t\tif (vid.error.code === window.MediaError.MEDIA_ERR_DECODE && vid.childNodes.length > 1) {\n\t\t\t\t\tmaterial.visible = false;\n\t\t\t\t\tvid.removeChild(vid.firstChild);\n\t\t\t\t\tvid.load();\n\t\t\t\t}\n\t\n\t\t\t\tself.emit(event, evt);\n\t\t\t}, true);\n\t\n\t\t\tthis.element = vid;\n\t\n\t\t\twindow.addEventListener('touchstart', function touchStart() {\n\t\t\t\tif (playing) {\n\t\t\t\t\tvid.play();\n\t\t\t\t} else {\n\t\t\t\t\tvid.load();\n\t\t\t\t}\n\t\t\t\twindow.removeEventListener('touchstart', touchStart, true);\n\t\t\t}, true);\n\t\n\t\t\t//pause when window is hidden\n\t\t\tdocument.addEventListener('visibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('mozvisibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('msvisibilitychange', visibilityChange);\n\t\t\tdocument.addEventListener('webkitvisibilitychange', visibilityChange);\n\t\n\t\t\tmesh.name = 'video';\n\t\t\tthis.raycastable = !(options && options.sphere);\n\t\t\tparent.add(mesh);\n\t\n\t\t\treturn mesh;\n\t\t};\n\t\n\t\tvideo.canPlayType = function canPlayType(type) {\n\t\t\tvar element = document.createElement('video');\n\t\t\treturn element.canPlayType(type);\n\t\t};\n\t\n\t\treturn video;\n\t}());\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * @author richt / http://richt.me\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n\t */\n\t\n\tTHREE.DeviceOrientationControls = function( object ) {\n\t\n\t\tvar scope = this;\n\t\n\t\tthis.object = object;\n\t\tthis.object.rotation.reorder( \"YXZ\" );\n\t\n\t\tthis.enabled = true;\n\t\n\t\tthis.deviceOrientation = {};\n\t\tthis.screenOrientation = 0;\n\t\n\t\tthis.alpha = 0;\n\t\tthis.alphaOffsetAngle = 0;\n\t\n\t\n\t\tvar onDeviceOrientationChangeEvent = function( event ) {\n\t\n\t\t\tscope.deviceOrientation = event;\n\t\n\t\t};\n\t\n\t\tvar onScreenOrientationChangeEvent = function() {\n\t\n\t\t\tscope.screenOrientation = window.orientation || 0;\n\t\n\t\t};\n\t\n\t\t// The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\t\n\t\tvar setObjectQuaternion = function() {\n\t\n\t\t\tvar zee = new THREE.Vector3( 0, 0, 1 );\n\t\n\t\t\tvar euler = new THREE.Euler();\n\t\n\t\t\tvar q0 = new THREE.Quaternion();\n\t\n\t\t\tvar q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\n\t\n\t\t\treturn function( quaternion, alpha, beta, gamma, orient ) {\n\t\n\t\t\t\teuler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\n\t\n\t\t\t\tquaternion.setFromEuler( euler ); // orient the device\n\t\n\t\t\t\tquaternion.multiply( q1 ); // camera looks out the back of the device, not the top\n\t\n\t\t\t\tquaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\n\t\n\t\t\t}\n\t\n\t\t}();\n\t\n\t\tthis.connect = function() {\n\t\n\t\t\tonScreenOrientationChangeEvent(); // run once on load\n\t\n\t\t\twindow.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\t\twindow.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\t\n\t\t\tscope.enabled = true;\n\t\n\t\t};\n\t\n\t\tthis.disconnect = function() {\n\t\n\t\t\twindow.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\t\twindow.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\t\n\t\t\tscope.enabled = false;\n\t\n\t\t};\n\t\n\t\tthis.update = function() {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tvar alpha = scope.deviceOrientation.alpha ? THREE.Math.degToRad( scope.deviceOrientation.alpha ) + this.alphaOffsetAngle : 0; // Z\n\t\t\tvar beta = scope.deviceOrientation.beta ? THREE.Math.degToRad( scope.deviceOrientation.beta ) : 0; // X'\n\t\t\tvar gamma = scope.deviceOrientation.gamma ? THREE.Math.degToRad( scope.deviceOrientation.gamma ) : 0; // Y''\n\t\t\tvar orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\n\t\n\t\t\tsetObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\n\t\t\tthis.alpha = alpha;\n\t\n\t\t};\n\t\n\t\tthis.updateAlphaOffsetAngle = function( angle ) {\n\t\n\t\t\tthis.alphaOffsetAngle = angle;\n\t\t\tthis.update();\n\t\n\t\t};\n\t\n\t\tthis.dispose = function() {\n\t\n\t\t\tthis.disconnect();\n\t\n\t\t};\n\t\n\t\tthis.connect();\n\t\n\t};\n\t\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * @author qiao / https://github.com/qiao\n\t * @author mrdoob / http://mrdoob.com\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author erich666 / http://erichaines.com\n\t */\n\t\n\t// This set of controls performs orbiting, dollying (zooming), and panning.\n\t// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n\t//\n\t//    Orbit - left mouse / touch: one finger move\n\t//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n\t//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\t\n\tTHREE.OrbitControls = function ( object, domElement ) {\n\t\n\t\tthis.object = object;\n\t\n\t\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\t\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\t\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new THREE.Vector3();\n\t\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\t\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\t\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = 0; // radians\n\t\tthis.maxPolarAngle = Math.PI; // radians\n\t\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\t\tthis.minAzimuthAngle = - Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\t\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.25;\n\t\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = true;\n\t\tthis.zoomSpeed = 1.0;\n\t\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 1.0;\n\t\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = true;\n\t\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\t\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\t\n\t\t// Set to false to disable use of the keys\n\t\tthis.enableKeys = true;\n\t\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\t\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\t\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\t\n\t\t//\n\t\t// public methods\n\t\t//\n\t\n\t\tthis.getPolarAngle = function () {\n\t\n\t\t\treturn spherical.phi;\n\t\n\t\t};\n\t\n\t\tthis.getAzimuthalAngle = function () {\n\t\n\t\t\treturn spherical.theta;\n\t\n\t\t};\n\t\n\t\tthis.reset = function () {\n\t\n\t\t\tscope.target.copy( scope.target0 );\n\t\t\tscope.object.position.copy( scope.position0 );\n\t\t\tscope.object.zoom = scope.zoom0;\n\t\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent( changeEvent );\n\t\n\t\t\tscope.update();\n\t\n\t\t\tstate = STATE.NONE;\n\t\n\t\t};\n\t\n\t\t// this method is exposed, but perhaps it would be better if we can make it private...\n\t\tthis.update = function() {\n\t\n\t\t\tvar offset = new THREE.Vector3();\n\t\n\t\t\t// so camera.up is the orbit axis\n\t\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\t\tvar quatInverse = quat.clone().inverse();\n\t\n\t\t\tvar lastPosition = new THREE.Vector3();\n\t\t\tvar lastQuaternion = new THREE.Quaternion();\n\t\n\t\t\treturn function update () {\n\t\n\t\t\t\tvar position = scope.object.position;\n\t\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion( quat );\n\t\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3( offset );\n\t\n\t\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\t\n\t\t\t\t\trotateLeft( getAutoRotationAngle() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\t\n\t\t\t\t// restrict theta to be between desired limits\n\t\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\t\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\t\n\t\t\t\tspherical.makeSafe();\n\t\n\t\n\t\t\t\tspherical.radius *= scale;\n\t\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\t\n\t\t\t\t// move target to panned location\n\t\t\t\tscope.target.add( panOffset );\n\t\n\t\t\t\toffset.setFromSpherical( spherical );\n\t\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion( quatInverse );\n\t\n\t\t\t\tposition.copy( scope.target ).add( offset );\n\t\n\t\t\t\tscope.object.lookAt( scope.target );\n\t\n\t\t\t\tif ( scope.enableDamping === true ) {\n\t\n\t\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tscale = 1;\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\t\n\t\t\t\t// update condition is:\n\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\t\n\t\t\t\tif ( zoomChanged ||\n\t\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\t\n\t\t\t\t\tscope.dispatchEvent( changeEvent );\n\t\n\t\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\t\tzoomChanged = false;\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn false;\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\tthis.dispose = function() {\n\t\n\t\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\t\n\t\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\t\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\t\n\t\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\t\n\t\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\t\n\t\t};\n\t\n\t\t//\n\t\t// internals\n\t\t//\n\t\n\t\tvar scope = this;\n\t\n\t\tvar changeEvent = { type: 'change' };\n\t\tvar startEvent = { type: 'start' };\n\t\tvar endEvent = { type: 'end' };\n\t\n\t\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\t\n\t\tvar state = STATE.NONE;\n\t\n\t\tvar EPS = 0.000001;\n\t\n\t\t// current position in spherical coordinates\n\t\tvar spherical = new THREE.Spherical();\n\t\tvar sphericalDelta = new THREE.Spherical();\n\t\n\t\tvar scale = 1;\n\t\tvar panOffset = new THREE.Vector3();\n\t\tvar zoomChanged = false;\n\t\n\t\tvar rotateStart = new THREE.Vector2();\n\t\tvar rotateEnd = new THREE.Vector2();\n\t\tvar rotateDelta = new THREE.Vector2();\n\t\n\t\tvar panStart = new THREE.Vector2();\n\t\tvar panEnd = new THREE.Vector2();\n\t\tvar panDelta = new THREE.Vector2();\n\t\n\t\tvar dollyStart = new THREE.Vector2();\n\t\tvar dollyEnd = new THREE.Vector2();\n\t\tvar dollyDelta = new THREE.Vector2();\n\t\n\t\tfunction getAutoRotationAngle() {\n\t\n\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\t\n\t\t}\n\t\n\t\tfunction getZoomScale() {\n\t\n\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\t\n\t\t}\n\t\n\t\tfunction rotateLeft( angle ) {\n\t\n\t\t\tsphericalDelta.theta -= angle;\n\t\n\t\t}\n\t\n\t\tfunction rotateUp( angle ) {\n\t\n\t\t\tsphericalDelta.phi -= angle;\n\t\n\t\t}\n\t\n\t\tvar panLeft = function() {\n\t\n\t\t\tvar v = new THREE.Vector3();\n\t\n\t\t\treturn function panLeft( distance, objectMatrix ) {\n\t\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar( - distance );\n\t\n\t\t\t\tpanOffset.add( v );\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\tvar panUp = function() {\n\t\n\t\t\tvar v = new THREE.Vector3();\n\t\n\t\t\treturn function panUp( distance, objectMatrix ) {\n\t\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\n\t\t\t\tv.multiplyScalar( distance );\n\t\n\t\t\t\tpanOffset.add( v );\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tvar pan = function() {\n\t\n\t\t\tvar offset = new THREE.Vector3();\n\t\n\t\t\treturn function pan ( deltaX, deltaY ) {\n\t\n\t\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\t\n\t\t\t\t\t// perspective\n\t\t\t\t\tvar position = scope.object.position;\n\t\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\t\tvar targetDistance = offset.length();\n\t\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\t\n\t\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\t\n\t\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\t\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\t\tscope.enablePan = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}();\n\t\n\t\tfunction dollyIn( dollyScale ) {\n\t\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\t\n\t\t\t\tscale /= dollyScale;\n\t\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\t\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction dollyOut( dollyScale ) {\n\t\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\t\n\t\t\t\tscale *= dollyScale;\n\t\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\t\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\t\n\t\tfunction handleMouseDownRotate( event ) {\n\t\n\t\t\t//console.log( 'handleMouseDownRotate' );\n\t\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\t\n\t\t}\n\t\n\t\tfunction handleMouseDownDolly( event ) {\n\t\n\t\t\t//console.log( 'handleMouseDownDolly' );\n\t\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\t\n\t\t}\n\t\n\t\tfunction handleMouseDownPan( event ) {\n\t\n\t\t\t//console.log( 'handleMouseDownPan' );\n\t\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\t\n\t\t}\n\t\n\t\tfunction handleMouseMoveRotate( event ) {\n\t\n\t\t\t//console.log( 'handleMouseMoveRotate' );\n\t\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\t\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\t\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\t\n\t\t\trotateStart.copy( rotateEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleMouseMoveDolly( event ) {\n\t\n\t\t\t//console.log( 'handleMouseMoveDolly' );\n\t\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\t\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\t\n\t\t\tif ( dollyDelta.y > 0 ) {\n\t\n\t\t\t\tdollyIn( getZoomScale() );\n\t\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\t\n\t\t\t\tdollyOut( getZoomScale() );\n\t\n\t\t\t}\n\t\n\t\t\tdollyStart.copy( dollyEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleMouseMovePan( event ) {\n\t\n\t\t\t//console.log( 'handleMouseMovePan' );\n\t\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\t\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\t\n\t\t\tpan( panDelta.x, panDelta.y );\n\t\n\t\t\tpanStart.copy( panEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleMouseUp( event ) {\n\t\n\t\t\t//console.log( 'handleMouseUp' );\n\t\n\t\t}\n\t\n\t\tfunction handleMouseWheel( event ) {\n\t\n\t\t\t//console.log( 'handleMouseWheel' );\n\t\n\t\t\tif ( event.deltaY < 0 ) {\n\t\n\t\t\t\tdollyOut( getZoomScale() );\n\t\n\t\t\t} else if ( event.deltaY > 0 ) {\n\t\n\t\t\t\tdollyIn( getZoomScale() );\n\t\n\t\t\t}\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleKeyDown( event ) {\n\t\n\t\t\t//console.log( 'handleKeyDown' );\n\t\n\t\t\tswitch ( event.keyCode ) {\n\t\n\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction handleTouchStartRotate( event ) {\n\t\n\t\t\t//console.log( 'handleTouchStartRotate' );\n\t\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\n\t\t}\n\t\n\t\tfunction handleTouchStartDolly( event ) {\n\t\n\t\t\t//console.log( 'handleTouchStartDolly' );\n\t\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\t\n\t\t\tdollyStart.set( 0, distance );\n\t\n\t\t}\n\t\n\t\tfunction handleTouchStartPan( event ) {\n\t\n\t\t\t//console.log( 'handleTouchStartPan' );\n\t\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\n\t\t}\n\t\n\t\tfunction handleTouchMoveRotate( event ) {\n\t\n\t\t\t//console.log( 'handleTouchMoveRotate' );\n\t\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\t\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( -2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\t\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( -2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\t\n\t\t\trotateStart.copy( rotateEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleTouchMoveDolly( event ) {\n\t\n\t\t\t//console.log( 'handleTouchMoveDolly' );\n\t\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\t\n\t\t\tdollyEnd.set( 0, distance );\n\t\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\t\n\t\t\tif ( dollyDelta.y > 0 ) {\n\t\n\t\t\t\tdollyOut( getZoomScale() );\n\t\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\t\n\t\t\t\tdollyIn( getZoomScale() );\n\t\n\t\t\t}\n\t\n\t\t\tdollyStart.copy( dollyEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleTouchMovePan( event ) {\n\t\n\t\t\t//console.log( 'handleTouchMovePan' );\n\t\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\t\n\t\t\tpan( panDelta.x, panDelta.y );\n\t\n\t\t\tpanStart.copy( panEnd );\n\t\n\t\t\tscope.update();\n\t\n\t\t}\n\t\n\t\tfunction handleTouchEnd( event ) {\n\t\n\t\t\t//console.log( 'handleTouchEnd' );\n\t\n\t\t}\n\t\n\t\t//\n\t\t// event handlers - FSM: listen for events and reset state\n\t\t//\n\t\n\t\tfunction onMouseDown( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tevent.preventDefault();\n\t\n\t\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\t\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\n\t\t\t\thandleMouseDownRotate( event );\n\t\n\t\t\t\tstate = STATE.ROTATE;\n\t\n\t\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\t\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\n\t\t\t\thandleMouseDownDolly( event );\n\t\n\t\t\t\tstate = STATE.DOLLY;\n\t\n\t\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\t\n\t\t\t\tif ( scope.enablePan === false ) return;\n\t\n\t\t\t\thandleMouseDownPan( event );\n\t\n\t\t\t\tstate = STATE.PAN;\n\t\n\t\t\t}\n\t\n\t\t\tif ( state !== STATE.NONE ) {\n\t\n\t\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\t\n\t\t\t\tscope.dispatchEvent( startEvent );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction onMouseMove( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tevent.preventDefault();\n\t\n\t\t\tif ( state === STATE.ROTATE ) {\n\t\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\n\t\t\t\thandleMouseMoveRotate( event );\n\t\n\t\t\t} else if ( state === STATE.DOLLY ) {\n\t\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\n\t\t\t\thandleMouseMoveDolly( event );\n\t\n\t\t\t} else if ( state === STATE.PAN ) {\n\t\n\t\t\t\tif ( scope.enablePan === false ) return;\n\t\n\t\t\t\thandleMouseMovePan( event );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction onMouseUp( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\thandleMouseUp( event );\n\t\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\t\n\t\t\tscope.dispatchEvent( endEvent );\n\t\n\t\t\tstate = STATE.NONE;\n\t\n\t\t}\n\t\n\t\tfunction onMouseWheel( event ) {\n\t\n\t\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\t\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\n\t\t\thandleMouseWheel( event );\n\t\n\t\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\n\t\t\tscope.dispatchEvent( endEvent );\n\t\n\t\t}\n\t\n\t\tfunction onKeyDown( event ) {\n\t\n\t\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\t\n\t\t\thandleKeyDown( event );\n\t\n\t\t}\n\t\n\t\tfunction onTouchStart( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tswitch ( event.touches.length ) {\n\t\n\t\t\t\tcase 1:\t// one-fingered touch: rotate\n\t\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\n\t\t\t\t\thandleTouchStartRotate( event );\n\t\n\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 2:\t// two-fingered touch: dolly\n\t\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\n\t\t\t\t\thandleTouchStartDolly( event );\n\t\n\t\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 3: // three-fingered touch: pan\n\t\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\n\t\t\t\t\thandleTouchStartPan( event );\n\t\n\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\n\t\t\t\t\tstate = STATE.NONE;\n\t\n\t\t\t}\n\t\n\t\t\tif ( state !== STATE.NONE ) {\n\t\n\t\t\t\tscope.dispatchEvent( startEvent );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction onTouchMove( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\n\t\t\tswitch ( event.touches.length ) {\n\t\n\t\t\t\tcase 1: // one-fingered touch: rotate\n\t\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\n\t\n\t\t\t\t\thandleTouchMoveRotate( event );\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 2: // two-fingered touch: dolly\n\t\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\n\t\n\t\t\t\t\thandleTouchMoveDolly( event );\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 3: // three-fingered touch: pan\n\t\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\n\t\n\t\t\t\t\thandleTouchMovePan( event );\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\n\t\t\t\t\tstate = STATE.NONE;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction onTouchEnd( event ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\n\t\t\thandleTouchEnd( event );\n\t\n\t\t\tscope.dispatchEvent( endEvent );\n\t\n\t\t\tstate = STATE.NONE;\n\t\n\t\t}\n\t\n\t\tfunction onContextMenu( event ) {\n\t\n\t\t\tevent.preventDefault();\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\t\n\t\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\t\n\t\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\t\n\t\twindow.addEventListener( 'keydown', onKeyDown, false );\n\t\n\t\t// force an update at start\n\t\n\t\tthis.update();\n\t\n\t};\n\t\n\tTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\tTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\t\n\tObject.defineProperties( THREE.OrbitControls.prototype, {\n\t\n\t\tcenter: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\t\treturn this.target;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t// backward compatibility\n\t\n\t\tnoZoom: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\treturn ! this.enableZoom;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\tthis.enableZoom = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tnoRotate: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\treturn ! this.enableRotate;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\tthis.enableRotate = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tnoPan: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\treturn ! this.enablePan;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\tthis.enablePan = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tnoKeys: {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\treturn ! this.enableKeys;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\tthis.enableKeys = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tstaticMoving : {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\treturn ! this.enableDamping;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\tthis.enableDamping = ! value;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tdynamicDampingFactor : {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\treturn this.dampingFactor;\n\t\n\t\t\t},\n\t\n\t\t\tset: function ( value ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\tthis.dampingFactor = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t} );\n\t\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t( function() {\n\t\n\t\tvar _oldConsole = console.log;\n\t\n\t\tvar supportedTypes = [];\n\t\n\t\tfunction addSupportedType( type, format ) {\n\t\n\t\t\tsupportedTypes.push( {\n\t\t\t\ttype: type,\n\t\t\t\tformat: format\n\t\t\t} );\n\t\n\t\t}\n\t\n\t\taddSupportedType( THREE.Matrix4, function( v ) {\n\t\n\t\t\tvar e = v.elements;\n\t\t\t\t\t\n\t\t\treturn [\n\t\t\t\t[ e[ 0 ], e[ 4 ], e[ 8 ], e[ 12 ] ],\n\t\t\t\t[ e[ 1 ], e[ 5 ], e[ 9 ], e[ 13 ] ],\n\t\t\t\t[ e[ 2 ], e[ 6 ], e[ 10 ], e[ 14 ] ],\n\t\t\t\t[ e[ 3 ], e[ 7 ], e[ 11 ], e[ 15 ] ]\n\t\t\t];\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Matrix3, function( v ) {\n\t\n\t\t\tvar e = v.elements;\n\t\t\t\t\t\n\t\t\treturn [\n\t\t\t\t[ e[ 0 ], e[ 3 ], e[ 6 ] ],\n\t\t\t\t[ e[ 1 ], e[ 4 ], e[ 7 ] ],\n\t\t\t\t[ e[ 2 ], e[ 5 ], e[ 8 ] ]\n\t\t\t];\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Vector2, function( v ) {\n\t\n\t\t\treturn {\n\t\t\t\tVector2: { x: v.x, y: v.y }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Vector3, function( v ) {\n\t\n\t\t\treturn {\n\t\t\t\tVector3: { x: v.x, y: v.y, z: v.z }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Vector4, function( v ) {\n\t\n\t\t\treturn {\n\t\t\t\tVector4: { x: v.x, y: v.y, z: v.z, w: v.w }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Euler, function( v ) {\n\t\n\t\t\treturn {\n\t\t\t\tVector4: { x: v.x, y: v.y, z: v.z, order: v.order }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\taddSupportedType( THREE.Ray, function( v ) {\n\t\n\t\t\treturn { \n\t\t\t\t'Ray origin': { x: v.origin.x, y: v.origin.y, z: v.origin.z },\n\t\t\t\t'Ray direction': { x: v.direction.x, y: v.direction.y, z: v.direction.z }\n\t\t\t};\n\t\n\t\t} );\n\t\n\t\tfunction stacktrace() { \n\t\t\tvar err = new Error();\n\t\t\treturn err.stack;\n\t\t}\n\t\n\t\tconsole.log = function() {\n\t\n\t\t\t//console.trace ();\n\t\n\t\t\tvar special = false;\n\t\n\t\t\t[].forEach.call( arguments, function( a ) { \n\t\t\t\tsupportedTypes.forEach( function( t ) {\n\t\t\t\t\tif( a instanceof t.type ) special = true;;\n\t\t\t\t} );\n\t\t\t} );\n\t\n\t\t\tif( special ) {\n\t\n\t\t\t\t[].forEach.call( arguments, function( a ) { \n\t\t\t\t\n\t\t\t\t\t_oldConsole.apply( console, [ a ] );\n\t\n\t\t\t\t\tsupportedTypes.forEach( function( t ) {\n\t\n\t\t\t\t\t\tif( a instanceof t.type ) {\n\t\n\t\t\t\t\t\t\tconsole.table( t.format( a ) );\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t} );\n\t\n\t\t\t\t} );\n\t\n\t\t\t} else {\n\t\n\t\t\t\t_oldConsole.apply( console, arguments );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t} )();\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.CSS3DObject = function ( element ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.element = element;\n\t\tthis.element.style.position = 'absolute';\n\t\n\t\tthis.addEventListener( 'removed', function ( event ) {\n\t\n\t\t\tif ( this.element.parentNode !== null ) {\n\t\n\t\t\t\tthis.element.parentNode.removeChild( this.element );\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t};\n\t\n\tTHREE.CSS3DObject.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\n\t\n\tTHREE.CSS3DSprite = function ( element ) {\n\t\n\t\tTHREE.CSS3DObject.call( this, element );\n\t\n\t};\n\t\n\tTHREE.CSS3DSprite.prototype = Object.create( THREE.CSS3DObject.prototype );\n\tTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\n\t\n\t//\n\t\n\tTHREE.CSS3DRenderer = function () {\n\t\n\t\tconsole.log( 'THREE.CSS3DRenderer', THREE.REVISION );\n\t\n\t\tvar _width, _height;\n\t\tvar _widthHalf, _heightHalf;\n\t\n\t\tvar matrix = new THREE.Matrix4();\n\t\n\t\tvar cache = {\n\t\t\tcamera: { fov: 0, style: '' },\n\t\t\tobjects: {}\n\t\t};\n\t\n\t\tvar domElement = document.createElement( 'div' );\n\t\tdomElement.style.overflow = 'hidden';\n\t\n\t\tdomElement.style.WebkitTransformStyle = 'preserve-3d';\n\t\tdomElement.style.MozTransformStyle = 'preserve-3d';\n\t\tdomElement.style.oTransformStyle = 'preserve-3d';\n\t\tdomElement.style.transformStyle = 'preserve-3d';\n\t\n\t\tthis.domElement = domElement;\n\t\n\t\tvar cameraElement = document.createElement( 'div' );\n\t\n\t\tcameraElement.style.WebkitTransformStyle = 'preserve-3d';\n\t\tcameraElement.style.MozTransformStyle = 'preserve-3d';\n\t\tcameraElement.style.oTransformStyle = 'preserve-3d';\n\t\tcameraElement.style.transformStyle = 'preserve-3d';\n\t\n\t\tdomElement.appendChild( cameraElement );\n\t\n\t\tthis.setClearColor = function () {};\n\t\n\t\tthis.getSize = function() {\n\t\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\t\n\t\t};\n\t\n\t\tthis.setSize = function ( width, height ) {\n\t\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\n\t\t\t_widthHalf = _width / 2;\n\t\t\t_heightHalf = _height / 2;\n\t\n\t\t\tdomElement.style.width = width + 'px';\n\t\t\tdomElement.style.height = height + 'px';\n\t\n\t\t\tcameraElement.style.width = width + 'px';\n\t\t\tcameraElement.style.height = height + 'px';\n\t\n\t\t};\n\t\n\t\tvar epsilon = function ( value ) {\n\t\n\t\t\treturn Math.abs( value ) < 0.000001 ? 0 : value;\n\t\n\t\t};\n\t\n\t\tvar getCameraCSSMatrix = function ( matrix ) {\n\t\n\t\t\tvar elements = matrix.elements;\n\t\n\t\t\treturn 'matrix3d(' +\n\t\t\t\tepsilon( elements[ 0 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 1 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 2 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 3 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 4 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 5 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 6 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 7 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 8 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 9 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 10 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 11 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 12 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 13 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 14 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 15 ] ) +\n\t\t\t')';\n\t\n\t\t};\n\t\n\t\tvar getObjectCSSMatrix = function ( matrix ) {\n\t\n\t\t\tvar elements = matrix.elements;\n\t\n\t\t\treturn 'translate3d(-50%,-50%,0) matrix3d(' +\n\t\t\t\tepsilon( elements[ 0 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 1 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 2 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 3 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 4 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 5 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 6 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 7 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 8 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 9 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 10 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 11 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 12 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 13 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 14 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 15 ] ) +\n\t\t\t')';\n\t\n\t\t};\n\t\n\t\tvar renderObject = function ( object, camera ) {\n\t\n\t\t\tif ( object instanceof THREE.CSS3DObject ) {\n\t\n\t\t\t\tvar style;\n\t\n\t\t\t\tif ( object instanceof THREE.CSS3DSprite ) {\n\t\n\t\t\t\t\t// http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\n\t\n\t\t\t\t\tmatrix.copy( camera.matrixWorldInverse );\n\t\t\t\t\tmatrix.transpose();\n\t\t\t\t\tmatrix.copyPosition( object.matrixWorld );\n\t\t\t\t\tmatrix.scale( object.scale );\n\t\n\t\t\t\t\tmatrix.elements[ 3 ] = 0;\n\t\t\t\t\tmatrix.elements[ 7 ] = 0;\n\t\t\t\t\tmatrix.elements[ 11 ] = 0;\n\t\t\t\t\tmatrix.elements[ 15 ] = 1;\n\t\n\t\t\t\t\tstyle = getObjectCSSMatrix( matrix );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tstyle = getObjectCSSMatrix( object.matrixWorld );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar element = object.element;\n\t\t\t\tvar cachedStyle = cache.objects[ object.id ];\n\t\n\t\t\t\tif ( cachedStyle === undefined || cachedStyle !== style ) {\n\t\n\t\t\t\t\telement.style.WebkitTransform = style;\n\t\t\t\t\telement.style.MozTransform = style;\n\t\t\t\t\telement.style.oTransform = style;\n\t\t\t\t\telement.style.transform = style;\n\t\n\t\t\t\t\tcache.objects[ object.id ] = style;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( element.parentNode !== cameraElement ) {\n\t\n\t\t\t\t\tcameraElement.appendChild( element );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\n\t\n\t\t\t\trenderObject( object.children[ i ], camera );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.render = function ( scene, camera ) {\n\t\n\t\t\tvar fov = 0.5 / Math.tan( THREE.Math.degToRad( camera.getEffectiveFOV() * 0.5 ) ) * _height;\n\t\n\t\t\tif ( cache.camera.fov !== fov ) {\n\t\n\t\t\t\tdomElement.style.WebkitPerspective = fov + \"px\";\n\t\t\t\tdomElement.style.MozPerspective = fov + \"px\";\n\t\t\t\tdomElement.style.oPerspective = fov + \"px\";\n\t\t\t\tdomElement.style.perspective = fov + \"px\";\n\t\n\t\t\t\tcache.camera.fov = fov;\n\t\n\t\t\t}\n\t\n\t\t\tscene.updateMatrixWorld();\n\t\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\t\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\t\n\t\t\tvar style = \"translate3d(0,0,\" + fov + \"px)\" + getCameraCSSMatrix( camera.matrixWorldInverse ) +\n\t\t\t\t\" translate3d(\" + _widthHalf + \"px,\" + _heightHalf + \"px, 0)\";\n\t\n\t\t\tif ( cache.camera.style !== style ) {\n\t\n\t\t\t\tcameraElement.style.WebkitTransform = style;\n\t\t\t\tcameraElement.style.MozTransform = style;\n\t\t\t\tcameraElement.style.oTransform = style;\n\t\t\t\tcameraElement.style.transform = style;\n\t\n\t\t\t\tcache.camera.style = style;\n\t\n\t\t\t}\n\t\n\t\t\trenderObject( scene, camera );\n\t\n\t\t};\n\t\n\t};\n\t\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.SpriteCanvasMaterial = function ( parameters ) {\n\t\n\t\tTHREE.Material.call( this );\n\t\n\t\tthis.type = 'SpriteCanvasMaterial';\n\t\n\t\tthis.color = new THREE.Color( 0xffffff );\n\t\tthis.program = function ( context, color ) {};\n\t\n\t\tthis.setValues( parameters );\n\t\n\t};\n\t\n\tTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\t\n\tTHREE.SpriteCanvasMaterial.prototype.clone = function () {\n\t\n\t\tvar material = new THREE.SpriteCanvasMaterial();\n\t\n\t\tmaterial.copy( this );\n\t\tmaterial.color.copy( this.color );\n\t\tmaterial.program = this.program;\n\t\n\t\treturn material;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.CanvasRenderer = function ( parameters ) {\n\t\n\t\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\n\t\n\t\tparameters = parameters || {};\n\t\n\t\tvar _this = this,\n\t\t_renderData, _elements, _lights,\n\t\t_projector = new THREE.Projector(),\n\t\n\t\t_canvas = parameters.canvas !== undefined\n\t\t\t\t ? parameters.canvas\n\t\t\t\t : document.createElement( 'canvas' ),\n\t\n\t\t_canvasWidth = _canvas.width,\n\t\t_canvasHeight = _canvas.height,\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\n\t\n\t\t_viewportX = 0,\n\t\t_viewportY = 0,\n\t\t_viewportWidth = _canvasWidth,\n\t\t_viewportHeight = _canvasHeight,\n\t\n\t\t_pixelRatio = 1,\n\t\n\t\t_context = _canvas.getContext( '2d', {\n\t\t\talpha: parameters.alpha === true\n\t\t} ),\n\t\n\t\t_clearColor = new THREE.Color( 0x000000 ),\n\t\t_clearAlpha = parameters.alpha === true ? 0 : 1,\n\t\n\t\t_contextGlobalAlpha = 1,\n\t\t_contextGlobalCompositeOperation = 0,\n\t\t_contextStrokeStyle = null,\n\t\t_contextFillStyle = null,\n\t\t_contextLineWidth = null,\n\t\t_contextLineCap = null,\n\t\t_contextLineJoin = null,\n\t\t_contextLineDash = [],\n\t\n\t\t_camera,\n\t\n\t\t_v1, _v2, _v3, _v4,\n\t\t_v5 = new THREE.RenderableVertex(),\n\t\t_v6 = new THREE.RenderableVertex(),\n\t\n\t\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\n\t\t_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\n\t\n\t\t_color = new THREE.Color(),\n\t\t_color1 = new THREE.Color(),\n\t\t_color2 = new THREE.Color(),\n\t\t_color3 = new THREE.Color(),\n\t\t_color4 = new THREE.Color(),\n\t\n\t\t_diffuseColor = new THREE.Color(),\n\t\t_emissiveColor = new THREE.Color(),\n\t\n\t\t_lightColor = new THREE.Color(),\n\t\n\t\t_patterns = {},\n\t\n\t\t_image, _uvs,\n\t\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\n\t\n\t\t_clipBox = new THREE.Box2(),\n\t\t_clearBox = new THREE.Box2(),\n\t\t_elemBox = new THREE.Box2(),\n\t\n\t\t_ambientLight = new THREE.Color(),\n\t\t_directionalLights = new THREE.Color(),\n\t\t_pointLights = new THREE.Color(),\n\t\n\t\t_vector3 = new THREE.Vector3(), // Needed for PointLight\n\t\t_centroid = new THREE.Vector3(),\n\t\t_normal = new THREE.Vector3(),\n\t\t_normalViewMatrix = new THREE.Matrix3();\n\t\n\t\t/* TODO\n\t\t_canvas.mozImageSmoothingEnabled = false;\n\t\t_canvas.webkitImageSmoothingEnabled = false;\n\t\t_canvas.msImageSmoothingEnabled = false;\n\t\t_canvas.imageSmoothingEnabled = false;\n\t\t*/\n\t\n\t\t// dash+gap fallbacks for Firefox and everything else\n\t\n\t\tif ( _context.setLineDash === undefined ) {\n\t\n\t\t\t_context.setLineDash = function () {};\n\t\n\t\t}\n\t\n\t\tthis.domElement = _canvas;\n\t\n\t\tthis.autoClear = true;\n\t\tthis.sortObjects = true;\n\t\tthis.sortElements = true;\n\t\n\t\tthis.info = {\n\t\n\t\t\trender: {\n\t\n\t\t\t\tvertices: 0,\n\t\t\t\tfaces: 0\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// WebGLRenderer compatibility\n\t\n\t\tthis.supportsVertexTextures = function () {};\n\t\tthis.setFaceCulling = function () {};\n\t\n\t\t// API\n\t\n\t\tthis.getContext = function () {\n\t\n\t\t\treturn _context;\n\t\n\t\t};\n\t\n\t\tthis.getContextAttributes = function () {\n\t\n\t\t\treturn _context.getContextAttributes();\n\t\n\t\t};\n\t\n\t\tthis.getPixelRatio = function () {\n\t\n\t\t\treturn _pixelRatio;\n\t\n\t\t};\n\t\n\t\tthis.setPixelRatio = function ( value ) {\n\t\n\t\t\tif ( value !== undefined ) _pixelRatio = value;\n\t\n\t\t};\n\t\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\t\n\t\t\t_canvasWidth = width * _pixelRatio;\n\t\t\t_canvasHeight = height * _pixelRatio;\n\t\n\t\t\t_canvas.width = _canvasWidth;\n\t\t\t_canvas.height = _canvasHeight;\n\t\n\t\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\n\t\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\n\t\n\t\t\tif ( updateStyle !== false ) {\n\t\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\n\t\t\t}\n\t\n\t\t\t_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\t\n\t\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\t\n\t\t\t_contextGlobalAlpha = 1;\n\t\t\t_contextGlobalCompositeOperation = 0;\n\t\t\t_contextStrokeStyle = null;\n\t\t\t_contextFillStyle = null;\n\t\t\t_contextLineWidth = null;\n\t\t\t_contextLineCap = null;\n\t\t\t_contextLineJoin = null;\n\t\n\t\t\tthis.setViewport( 0, 0, width, height );\n\t\n\t\t};\n\t\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\t\n\t\t\t_viewportX = x * _pixelRatio;\n\t\t\t_viewportY = y * _pixelRatio;\n\t\n\t\t\t_viewportWidth = width * _pixelRatio;\n\t\t\t_viewportHeight = height * _pixelRatio;\n\t\n\t\t};\n\t\n\t\tthis.setScissor = function () {};\n\t\tthis.setScissorTest = function () {};\n\t\n\t\tthis.setClearColor = function ( color, alpha ) {\n\t\n\t\t\t_clearColor.set( color );\n\t\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\t\n\t\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\t\n\t\t};\n\t\n\t\tthis.setClearColorHex = function ( hex, alpha ) {\n\t\n\t\t\tconsole.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n\t\t\tthis.setClearColor( hex, alpha );\n\t\n\t\t};\n\t\n\t\tthis.getClearColor = function () {\n\t\n\t\t\treturn _clearColor;\n\t\n\t\t};\n\t\n\t\tthis.getClearAlpha = function () {\n\t\n\t\t\treturn _clearAlpha;\n\t\n\t\t};\n\t\n\t\tthis.getMaxAnisotropy = function () {\n\t\n\t\t\treturn 0;\n\t\n\t\t};\n\t\n\t\tthis.clear = function () {\n\t\n\t\t\tif ( _clearBox.isEmpty() === false ) {\n\t\n\t\t\t\t_clearBox.intersect( _clipBox );\n\t\t\t\t_clearBox.expandByScalar( 2 );\n\t\n\t\t\t\t_clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t\t\t\t_clearBox.min.y =  - _clearBox.min.y + _canvasHeightHalf;\t\t// higher y value !\n\t\t\t\t_clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t\t\t\t_clearBox.max.y =  - _clearBox.max.y + _canvasHeightHalf;\t\t// lower y value !\n\t\n\t\t\t\tif ( _clearAlpha < 1 ) {\n\t\n\t\t\t\t\t_context.clearRect(\n\t\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t\t);\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( _clearAlpha > 0 ) {\n\t\n\t\t\t\t\tsetBlending( THREE.NormalBlending );\n\t\t\t\t\tsetOpacity( 1 );\n\t\n\t\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\n\t\n\t\t\t\t\t_context.fillRect(\n\t\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t\t);\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_clearBox.makeEmpty();\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// compatibility\n\t\n\t\tthis.clearColor = function () {};\n\t\tthis.clearDepth = function () {};\n\t\tthis.clearStencil = function () {};\n\t\n\t\tthis.render = function ( scene, camera ) {\n\t\n\t\t\tif ( camera instanceof THREE.Camera === false ) {\n\t\n\t\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.autoClear === true ) this.clear();\n\t\n\t\t\t_this.info.render.vertices = 0;\n\t\t\t_this.info.render.faces = 0;\n\t\n\t\t\t_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );\n\t\t\t_context.translate( _canvasWidthHalf, _canvasHeightHalf );\n\t\n\t\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t\t_elements = _renderData.elements;\n\t\t\t_lights = _renderData.lights;\n\t\t\t_camera = camera;\n\t\n\t\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\t\n\t\t\t/* DEBUG\n\t\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n\t\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n\t\t\t*/\n\t\n\t\t\tcalculateLights();\n\t\n\t\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\n\t\n\t\t\t\tvar element = _elements[ e ];\n\t\n\t\t\t\tvar material = element.material;\n\t\n\t\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\t\n\t\t\t\t_elemBox.makeEmpty();\n\t\n\t\t\t\tif ( element instanceof THREE.RenderableSprite ) {\n\t\n\t\t\t\t\t_v1 = element;\n\t\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\n\t\n\t\t\t\t\trenderSprite( _v1, element, material );\n\t\n\t\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\n\t\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\t\n\t\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\n\t\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t\t_v2.positionScreen\n\t\t\t\t\t] );\n\t\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\t\n\t\t\t\t\t\trenderLine( _v1, _v2, element, material );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\n\t\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\t\n\t\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\t\n\t\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\n\t\n\t\t\t\t\tif ( material.overdraw > 0 ) {\n\t\n\t\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\n\t\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\n\t\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t\t_v3.positionScreen\n\t\t\t\t\t] );\n\t\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\t\n\t\t\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t/* DEBUG\n\t\t\t\tsetLineWidth( 1 );\n\t\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n\t\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n\t\t\t\t*/\n\t\n\t\t\t\t_clearBox.union( _elemBox );\n\t\n\t\t\t}\n\t\n\t\t\t/* DEBUG\n\t\t\tsetLineWidth( 1 );\n\t\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n\t\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n\t\t\t*/\n\t\n\t\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\n\t\n\t\t};\n\t\n\t\t//\n\t\n\t\tfunction calculateLights() {\n\t\n\t\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t\t_pointLights.setRGB( 0, 0, 0 );\n\t\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\t\n\t\t\t\tvar light = _lights[ l ];\n\t\t\t\tvar lightColor = light.color;\n\t\n\t\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\t\n\t\t\t\t\t_ambientLight.add( lightColor );\n\t\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\t\n\t\t\t\t\t// for sprites\n\t\n\t\t\t\t\t_directionalLights.add( lightColor );\n\t\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\t\n\t\t\t\t\t// for sprites\n\t\n\t\t\t\t\t_pointLights.add( lightColor );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction calculateLight( position, normal, color ) {\n\t\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\t\n\t\t\t\tvar light = _lights[ l ];\n\t\n\t\t\t\t_lightColor.copy( light.color );\n\t\n\t\t\t\tif ( light instanceof THREE.DirectionalLight ) {\n\t\n\t\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\t\n\t\t\t\t\tvar amount = normal.dot( lightPosition );\n\t\n\t\t\t\t\tif ( amount <= 0 ) continue;\n\t\n\t\t\t\t\tamount *= light.intensity;\n\t\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\t\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\t\n\t\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\t\n\t\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\t\n\t\t\t\t\tif ( amount <= 0 ) continue;\n\t\n\t\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\t\n\t\t\t\t\tif ( amount == 0 ) continue;\n\t\n\t\t\t\t\tamount *= light.intensity;\n\t\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction renderSprite( v1, element, material ) {\n\t\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\t\n\t\t\tvar scaleX = element.scale.x * _canvasWidthHalf;\n\t\t\tvar scaleY = element.scale.y * _canvasHeightHalf;\n\t\n\t\t\tvar dist = 0.5 * Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite\n\t\t\t_elemBox.min.set( v1.x - dist, v1.y - dist );\n\t\t\t_elemBox.max.set( v1.x + dist, v1.y + dist );\n\t\n\t\t\tif ( material instanceof THREE.SpriteMaterial ) {\n\t\n\t\t\t\tvar texture = material.map;\n\t\n\t\t\t\tif ( texture !== null ) {\n\t\n\t\t\t\t\tvar pattern = _patterns[ texture.id ];\n\t\n\t\t\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\t\n\t\t\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t\t\t_patterns[ texture.id ] = pattern;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( pattern.canvas !== undefined ) {\n\t\n\t\t\t\t\t\tsetFillStyle( pattern.canvas );\n\t\n\t\t\t\t\t\tvar bitmap = texture.image;\n\t\n\t\t\t\t\t\tvar ox = bitmap.width * texture.offset.x;\n\t\t\t\t\t\tvar oy = bitmap.height * texture.offset.y;\n\t\n\t\t\t\t\t\tvar sx = bitmap.width * texture.repeat.x;\n\t\t\t\t\t\tvar sy = bitmap.height * texture.repeat.y;\n\t\n\t\t\t\t\t\tvar cx = scaleX / sx;\n\t\t\t\t\t\tvar cy = scaleY / sy;\n\t\n\t\t\t\t\t\t_context.save();\n\t\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t\t_context.translate( - scaleX / 2, - scaleY / 2 );\n\t\t\t\t\t\t_context.scale( cx, cy );\n\t\t\t\t\t\t_context.translate( - ox, - oy );\n\t\t\t\t\t\t_context.fillRect( ox, oy, sx, sy );\n\t\t\t\t\t\t_context.restore();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// no texture\n\t\n\t\t\t\t\tsetFillStyle( material.color.getStyle() );\n\t\n\t\t\t\t\t_context.save();\n\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t_context.scale( scaleX, - scaleY );\n\t\t\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t\t\t_context.restore();\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( material instanceof THREE.SpriteCanvasMaterial ) {\n\t\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\t\tsetFillStyle( material.color.getStyle() );\n\t\n\t\t\t\t_context.save();\n\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t_context.scale( scaleX, scaleY );\n\t\n\t\t\t\tmaterial.program( _context );\n\t\n\t\t\t\t_context.restore();\n\t\n\t\t\t}\n\t\n\t\t\t/* DEBUG\n\t\t\tsetStrokeStyle( 'rgb(255,255,0)' );\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( v1.x - 10, v1.y );\n\t\t\t_context.lineTo( v1.x + 10, v1.y );\n\t\t\t_context.moveTo( v1.x, v1.y - 10 );\n\t\t\t_context.lineTo( v1.x, v1.y + 10 );\n\t\t\t_context.stroke();\n\t\t\t*/\n\t\n\t\t}\n\t\n\t\tfunction renderLine( v1, v2, element, material ) {\n\t\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\t\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\n\t\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\n\t\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\t\n\t\t\t\tsetLineWidth( material.linewidth );\n\t\t\t\tsetLineCap( material.linecap );\n\t\t\t\tsetLineJoin( material.linejoin );\n\t\n\t\t\t\tif ( material.vertexColors !== THREE.VertexColors ) {\n\t\n\t\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar colorStyle1 = element.vertexColors[ 0 ].getStyle();\n\t\t\t\t\tvar colorStyle2 = element.vertexColors[ 1 ].getStyle();\n\t\n\t\t\t\t\tif ( colorStyle1 === colorStyle2 ) {\n\t\n\t\t\t\t\t\tsetStrokeStyle( colorStyle1 );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\ttry {\n\t\n\t\t\t\t\t\t\tvar grad = _context.createLinearGradient(\n\t\t\t\t\t\t\t\tv1.positionScreen.x,\n\t\t\t\t\t\t\t\tv1.positionScreen.y,\n\t\t\t\t\t\t\t\tv2.positionScreen.x,\n\t\t\t\t\t\t\t\tv2.positionScreen.y\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tgrad.addColorStop( 0, colorStyle1 );\n\t\t\t\t\t\t\tgrad.addColorStop( 1, colorStyle2 );\n\t\n\t\t\t\t\t\t} catch ( exception ) {\n\t\n\t\t\t\t\t\t\tgrad = colorStyle1;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tsetStrokeStyle( grad );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_context.stroke();\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\t\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\t\n\t\t\t\tsetLineWidth( material.linewidth );\n\t\t\t\tsetLineCap( material.linecap );\n\t\t\t\tsetLineJoin( material.linejoin );\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\t\tsetLineDash( [ material.dashSize, material.gapSize ] );\n\t\n\t\t\t\t_context.stroke();\n\t\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\t\n\t\t\t\tsetLineDash( [] );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\n\t\n\t\t\t_this.info.render.vertices += 3;\n\t\t\t_this.info.render.faces ++;\n\t\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\t\n\t\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\n\t\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\n\t\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\n\t\n\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\n\t\n\t\t\tif ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {\n\t\n\t\t\t\t_diffuseColor.copy( material.color );\n\t\t\t\t_emissiveColor.copy( material.emissive );\n\t\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\t\n\t\t\t\t\t_diffuseColor.multiply( element.color );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_color.copy( _ambientLight );\n\t\n\t\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\t\n\t\t\t\tcalculateLight( _centroid, element.normalModel, _color );\n\t\n\t\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\n\t\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\t\n\t\t\t} else if ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t\t    material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t\t    material instanceof THREE.MeshPhongMaterial ) {\n\t\n\t\t\t\tif ( material.map !== null ) {\n\t\n\t\t\t\t\tvar mapping = material.map.mapping;\n\t\n\t\t\t\t\tif ( mapping === THREE.UVMapping ) {\n\t\n\t\t\t\t\t\t_uvs = element.uvs;\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( material.envMap !== null ) {\n\t\n\t\t\t\t\tif ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {\n\t\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv1x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv1y = 0.5 * _normal.y + 0.5;\n\t\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv2x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv2y = 0.5 * _normal.y + 0.5;\n\t\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv3x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv3y = 0.5 * _normal.y + 0.5;\n\t\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t_color.copy( material.color );\n\t\n\t\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\t\n\t\t\t\t\t\t_color.multiply( element.color );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t\t : fillPath( _color );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\t\n\t\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\n\t\n\t\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\t\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\t\n\t\t\t} else {\n\t\n\t\t\t\t_color.setRGB( 1, 1, 1 );\n\t\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\n\t\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( x0, y0 );\n\t\t\t_context.lineTo( x1, y1 );\n\t\t\t_context.lineTo( x2, y2 );\n\t\t\t_context.closePath();\n\t\n\t\t}\n\t\n\t\tfunction strokePath( color, linewidth, linecap, linejoin ) {\n\t\n\t\t\tsetLineWidth( linewidth );\n\t\t\tsetLineCap( linecap );\n\t\t\tsetLineJoin( linejoin );\n\t\t\tsetStrokeStyle( color.getStyle() );\n\t\n\t\t\t_context.stroke();\n\t\n\t\t\t_elemBox.expandByScalar( linewidth * 2 );\n\t\n\t\t}\n\t\n\t\tfunction fillPath( color ) {\n\t\n\t\t\tsetFillStyle( color.getStyle() );\n\t\t\t_context.fill();\n\t\n\t\t}\n\t\n\t\tfunction textureToPattern( texture ) {\n\t\n\t\t\tif ( texture.version === 0 ||\n\t\t\t\ttexture instanceof THREE.CompressedTexture ||\n\t\t\t\ttexture instanceof THREE.DataTexture ) {\n\t\n\t\t\t\treturn {\n\t\t\t\t\tcanvas: undefined,\n\t\t\t\t\tversion: texture.version\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\tvar image = texture.image;\n\t\n\t\t\tif ( image.complete === false ) {\n\t\n\t\t\t\treturn {\n\t\t\t\t\tcanvas: undefined,\n\t\t\t\t\tversion: 0\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\tvar canvas = document.createElement( 'canvas' );\n\t\t\tcanvas.width = image.width;\n\t\t\tcanvas.height = image.height;\n\t\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.setTransform( 1, 0, 0, - 1, 0, image.height );\n\t\t\tcontext.drawImage( image, 0, 0 );\n\t\n\t\t\tvar repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t\t\tvar repeatY = texture.wrapT === THREE.RepeatWrapping;\n\t\n\t\t\tvar repeat = 'no-repeat';\n\t\n\t\t\tif ( repeatX === true && repeatY === true ) {\n\t\n\t\t\t\trepeat = 'repeat';\n\t\n\t\t\t} else if ( repeatX === true ) {\n\t\n\t\t\t\trepeat = 'repeat-x';\n\t\n\t\t\t} else if ( repeatY === true ) {\n\t\n\t\t\t\trepeat = 'repeat-y';\n\t\n\t\t\t}\n\t\n\t\t\tvar pattern = _context.createPattern( canvas, repeat );\n\t\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t\t\treturn {\n\t\t\t\tcanvas: pattern,\n\t\t\t\tversion: texture.version\n\t\t\t};\n\t\n\t\t}\n\t\n\t\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\n\t\n\t\t\tvar pattern = _patterns[ texture.id ];\n\t\n\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\t\n\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t_patterns[ texture.id ] = pattern;\n\t\n\t\t\t}\n\t\n\t\t\tif ( pattern.canvas !== undefined ) {\n\t\n\t\t\t\tsetFillStyle( pattern.canvas );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tsetFillStyle( 'rgba( 0, 0, 0, 1)' );\n\t\t\t\t_context.fill();\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\t\n\t\t\tvar a, b, c, d, e, f, det, idet,\n\t\t\toffsetX = texture.offset.x / texture.repeat.x,\n\t\t\toffsetY = texture.offset.y / texture.repeat.y,\n\t\t\twidth = texture.image.width * texture.repeat.x,\n\t\t\theight = texture.image.height * texture.repeat.y;\n\t\n\t\t\tu0 = ( u0 + offsetX ) * width;\n\t\t\tv0 = ( v0 + offsetY ) * height;\n\t\n\t\t\tu1 = ( u1 + offsetX ) * width;\n\t\t\tv1 = ( v1 + offsetY ) * height;\n\t\n\t\t\tu2 = ( u2 + offsetX ) * width;\n\t\t\tv2 = ( v2 + offsetY ) * height;\n\t\n\t\t\tx1 -= x0; y1 -= y0;\n\t\t\tx2 -= x0; y2 -= y0;\n\t\n\t\t\tu1 -= u0; v1 -= v0;\n\t\t\tu2 -= u0; v2 -= v0;\n\t\n\t\t\tdet = u1 * v2 - u2 * v1;\n\t\n\t\t\tif ( det === 0 ) return;\n\t\n\t\t\tidet = 1 / det;\n\t\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\t\n\t\t\te = x0 - a * u0 - c * v0;\n\t\t\tf = y0 - b * u0 - d * v0;\n\t\n\t\t\t_context.save();\n\t\t\t_context.transform( a, b, c, d, e, f );\n\t\t\t_context.fill();\n\t\t\t_context.restore();\n\t\n\t\t}\n\t\n\t\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\n\t\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\t\n\t\t\tvar a, b, c, d, e, f, det, idet,\n\t\t\twidth = image.width - 1,\n\t\t\theight = image.height - 1;\n\t\n\t\t\tu0 *= width; v0 *= height;\n\t\t\tu1 *= width; v1 *= height;\n\t\t\tu2 *= width; v2 *= height;\n\t\n\t\t\tx1 -= x0; y1 -= y0;\n\t\t\tx2 -= x0; y2 -= y0;\n\t\n\t\t\tu1 -= u0; v1 -= v0;\n\t\t\tu2 -= u0; v2 -= v0;\n\t\n\t\t\tdet = u1 * v2 - u2 * v1;\n\t\n\t\t\tidet = 1 / det;\n\t\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\t\n\t\t\te = x0 - a * u0 - c * v0;\n\t\t\tf = y0 - b * u0 - d * v0;\n\t\n\t\t\t_context.save();\n\t\t\t_context.transform( a, b, c, d, e, f );\n\t\t\t_context.clip();\n\t\t\t_context.drawImage( image, 0, 0 );\n\t\t\t_context.restore();\n\t\n\t\t}\n\t\n\t\t// Hide anti-alias gaps\n\t\n\t\tfunction expand( v1, v2, pixels ) {\n\t\n\t\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\n\t\t\tdet = x * x + y * y, idet;\n\t\n\t\t\tif ( det === 0 ) return;\n\t\n\t\t\tidet = pixels / Math.sqrt( det );\n\t\n\t\t\tx *= idet; y *= idet;\n\t\n\t\t\tv2.x += x; v2.y += y;\n\t\t\tv1.x -= x; v1.y -= y;\n\t\n\t\t}\n\t\n\t\t// Context cached methods.\n\t\n\t\tfunction setOpacity( value ) {\n\t\n\t\t\tif ( _contextGlobalAlpha !== value ) {\n\t\n\t\t\t\t_context.globalAlpha = value;\n\t\t\t\t_contextGlobalAlpha = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setBlending( value ) {\n\t\n\t\t\tif ( _contextGlobalCompositeOperation !== value ) {\n\t\n\t\t\t\tif ( value === THREE.NormalBlending ) {\n\t\n\t\t\t\t\t_context.globalCompositeOperation = 'source-over';\n\t\n\t\t\t\t} else if ( value === THREE.AdditiveBlending ) {\n\t\n\t\t\t\t\t_context.globalCompositeOperation = 'lighter';\n\t\n\t\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\n\t\n\t\t\t\t\t_context.globalCompositeOperation = 'darker';\n\t\n\t\t\t\t} else if ( value === THREE.MultiplyBlending ) {\n\t\n\t\t\t\t\t_context.globalCompositeOperation = 'multiply';\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_contextGlobalCompositeOperation = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setLineWidth( value ) {\n\t\n\t\t\tif ( _contextLineWidth !== value ) {\n\t\n\t\t\t\t_context.lineWidth = value;\n\t\t\t\t_contextLineWidth = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setLineCap( value ) {\n\t\n\t\t\t// \"butt\", \"round\", \"square\"\n\t\n\t\t\tif ( _contextLineCap !== value ) {\n\t\n\t\t\t\t_context.lineCap = value;\n\t\t\t\t_contextLineCap = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setLineJoin( value ) {\n\t\n\t\t\t// \"round\", \"bevel\", \"miter\"\n\t\n\t\t\tif ( _contextLineJoin !== value ) {\n\t\n\t\t\t\t_context.lineJoin = value;\n\t\t\t\t_contextLineJoin = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setStrokeStyle( value ) {\n\t\n\t\t\tif ( _contextStrokeStyle !== value ) {\n\t\n\t\t\t\t_context.strokeStyle = value;\n\t\t\t\t_contextStrokeStyle = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setFillStyle( value ) {\n\t\n\t\t\tif ( _contextFillStyle !== value ) {\n\t\n\t\t\t\t_context.fillStyle = value;\n\t\t\t\t_contextFillStyle = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setLineDash( value ) {\n\t\n\t\t\tif ( _contextLineDash.length !== value.length ) {\n\t\n\t\t\t\t_context.setLineDash( value );\n\t\t\t\t_contextLineDash = value;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author julianwa / https://github.com/julianwa\n\t */\n\t\n\tTHREE.RenderableObject = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.object = null;\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableFace = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.v1 = new THREE.RenderableVertex();\n\t\tthis.v2 = new THREE.RenderableVertex();\n\t\tthis.v3 = new THREE.RenderableVertex();\n\t\n\t\tthis.normalModel = new THREE.Vector3();\n\t\n\t\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\t\tthis.vertexNormalsLength = 0;\n\t\n\t\tthis.color = new THREE.Color();\n\t\tthis.material = null;\n\t\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\t\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableVertex = function () {\n\t\n\t\tthis.position = new THREE.Vector3();\n\t\tthis.positionWorld = new THREE.Vector3();\n\t\tthis.positionScreen = new THREE.Vector4();\n\t\n\t\tthis.visible = true;\n\t\n\t};\n\t\n\tTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\t\n\t\tthis.positionWorld.copy( vertex.positionWorld );\n\t\tthis.positionScreen.copy( vertex.positionScreen );\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableLine = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.v1 = new THREE.RenderableVertex();\n\t\tthis.v2 = new THREE.RenderableVertex();\n\t\n\t\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\t\tthis.material = null;\n\t\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableSprite = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.object = null;\n\t\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t\tthis.z = 0;\n\t\n\t\tthis.rotation = 0;\n\t\tthis.scale = new THREE.Vector2();\n\t\n\t\tthis.material = null;\n\t\tthis.renderOrder = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.Projector = function () {\n\t\n\t\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\t\n\t\t_renderData = { objects: [], lights: [], elements: [] },\n\t\n\t\t_vector3 = new THREE.Vector3(),\n\t\t_vector4 = new THREE.Vector4(),\n\t\n\t\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t\t_boundingBox = new THREE.Box3(),\n\t\t_points3 = new Array( 3 ),\n\t\t_points4 = new Array( 4 ),\n\t\n\t\t_viewMatrix = new THREE.Matrix4(),\n\t\t_viewProjectionMatrix = new THREE.Matrix4(),\n\t\n\t\t_modelMatrix,\n\t\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\t\n\t\t_normalMatrix = new THREE.Matrix3(),\n\t\n\t\t_frustum = new THREE.Frustum(),\n\t\n\t\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\t\n\t\t//\n\t\n\t\tthis.projectVector = function ( vector, camera ) {\n\t\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\t\n\t\t};\n\t\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\t\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\t\n\t\t};\n\t\n\t\tthis.pickingRay = function ( vector, camera ) {\n\t\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\t\n\t\t};\n\t\n\t\t//\n\t\n\t\tvar RenderList = function () {\n\t\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\t\n\t\t\tvar object = null;\n\t\t\tvar material = null;\n\t\n\t\t\tvar normalMatrix = new THREE.Matrix3();\n\t\n\t\t\tfunction setObject( value ) {\n\t\n\t\t\t\tobject = value;\n\t\t\t\tmaterial = object.material;\n\t\n\t\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\t\n\t\t\t\tnormals.length = 0;\n\t\t\t\tuvs.length = 0;\n\t\n\t\t\t}\n\t\n\t\t\tfunction projectVertex( vertex ) {\n\t\n\t\t\t\tvar position = vertex.position;\n\t\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\t\tvar positionScreen = vertex.positionScreen;\n\t\n\t\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\t\n\t\t\t\tvar invW = 1 / positionScreen.w;\n\t\n\t\t\t\tpositionScreen.x *= invW;\n\t\t\t\tpositionScreen.y *= invW;\n\t\t\t\tpositionScreen.z *= invW;\n\t\n\t\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushVertex( x, y, z ) {\n\t\n\t\t\t\t_vertex = getNextVertexInPool();\n\t\t\t\t_vertex.position.set( x, y, z );\n\t\n\t\t\t\tprojectVertex( _vertex );\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushNormal( x, y, z ) {\n\t\n\t\t\t\tnormals.push( x, y, z );\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushUv( x, y ) {\n\t\n\t\t\t\tuvs.push( x, y );\n\t\n\t\t\t}\n\t\n\t\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\t\n\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\t\n\t\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t\t_points3[ 2 ] = v3.positionScreen;\n\t\n\t\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\t\n\t\t\t}\n\t\n\t\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\t\n\t\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushLine( a, b ) {\n\t\n\t\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\t\tvar v2 = _vertexPool[ b ];\n\t\n\t\t\t\t_line = getNextLineInPool();\n\t\n\t\t\t\t_line.id = object.id;\n\t\t\t\t_line.v1.copy( v1 );\n\t\t\t\t_line.v2.copy( v2 );\n\t\t\t\t_line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;\n\t\t\t\t_line.renderOrder = object.renderOrder;\n\t\n\t\t\t\t_line.material = object.material;\n\t\n\t\t\t\t_renderData.elements.push( _line );\n\t\n\t\t\t}\n\t\n\t\t\tfunction pushTriangle( a, b, c ) {\n\t\n\t\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\t\tvar v3 = _vertexPool[ c ];\n\t\n\t\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\t\n\t\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\t\n\t\t\t\t\t_face = getNextFaceInPool();\n\t\n\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\t\n\t\t\t\t\t// use first vertex normal as face normal\n\t\n\t\t\t\t\t_face.normalModel.fromArray( normals, a * 3 );\n\t\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\t\n\t\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t_face.vertexNormalsLength = 3;\n\t\n\t\t\t\t\t_face.material = object.material;\n\t\n\t\t\t\t\t_renderData.elements.push( _face );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\tsetObject: setObject,\n\t\t\t\tprojectVertex: projectVertex,\n\t\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\t\tpushVertex: pushVertex,\n\t\t\t\tpushNormal: pushNormal,\n\t\t\t\tpushUv: pushUv,\n\t\t\t\tpushLine: pushLine,\n\t\t\t\tpushTriangle: pushTriangle\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tvar renderList = new RenderList();\n\t\n\t\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\t\n\t\t\t_faceCount = 0;\n\t\t\t_lineCount = 0;\n\t\t\t_spriteCount = 0;\n\t\n\t\t\t_renderData.elements.length = 0;\n\t\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\t\n\t\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\n\t\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\t\n\t\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\t\n\t\t\t//\n\t\n\t\t\t_objectCount = 0;\n\t\n\t\t\t_renderData.objects.length = 0;\n\t\t\t_renderData.lights.length = 0;\n\t\n\t\t\tfunction addObject( object ) {\n\t\n\t\t\t\t_object = getNextObjectInPool();\n\t\t\t\t_object.id = object.id;\n\t\t\t\t_object.object = object;\n\t\n\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\n\t\t\t\t_object.z = _vector3.z;\n\t\t\t\t_object.renderOrder = object.renderOrder;\n\t\n\t\t\t\t_renderData.objects.push( _object );\n\t\n\t\t\t}\n\t\n\t\t\tscene.traverseVisible( function ( object ) {\n\t\n\t\t\t\tif ( object instanceof THREE.Light ) {\n\t\n\t\t\t\t\t_renderData.lights.push( object );\n\t\n\t\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line ) {\n\t\n\t\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\n\t\n\t\t\t\t\taddObject( object );\n\t\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\t\n\t\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\n\t\n\t\t\t\t\taddObject( object );\n\t\n\t\t\t\t}\n\t\n\t\t\t} );\n\t\n\t\t\tif ( sortObjects === true ) {\n\t\n\t\t\t\t_renderData.objects.sort( painterSort );\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tfor ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\n\t\n\t\t\t\tvar object = _renderData.objects[ o ].object;\n\t\t\t\tvar geometry = object.geometry;\n\t\n\t\t\t\trenderList.setObject( object );\n\t\n\t\t\t\t_modelMatrix = object.matrixWorld;\n\t\n\t\t\t\t_vertexCount = 0;\n\t\n\t\t\t\tif ( object instanceof THREE.Mesh ) {\n\t\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\t\tvar groups = geometry.groups;\n\t\n\t\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\t\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar normals = attributes.normal.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\t\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\t\n\t\t\t\t\t\t\tif ( groups.length > 0 ) {\n\t\n\t\t\t\t\t\t\t\tfor ( var o = 0; o < groups.length; o ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tvar group = groups[ o ];\n\t\n\t\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\n\t\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\t\n\t\t\t\t\t\tvar material = object.material;\n\t\n\t\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material : null;\n\t\n\t\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\t\n\t\t\t\t\t\t\tvar vertex = vertices[ v ];\n\t\n\t\t\t\t\t\t\t_vector3.copy( vertex );\n\t\n\t\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\t\n\t\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\t\n\t\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\t\n\t\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\t\n\t\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\t\n\t\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\t\t\tvar face = faces[ f ];\n\t\n\t\t\t\t\t\t\tmaterial = isFaceMaterial === true\n\t\t\t\t\t\t\t\t ? objectMaterials.materials[ face.materialIndex ]\n\t\t\t\t\t\t\t\t : object.material;\n\t\n\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\t\n\t\t\t\t\t\t\tvar side = material.side;\n\t\n\t\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\t\n\t\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\t\n\t\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\t\n\t\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\t\n\t\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face = getNextFaceInPool();\n\t\n\t\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t\t_face.v3.copy( v3 );\n\t\n\t\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\t\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\t\n\t\t\t\t\t\t\t\t_face.normalModel.negate();\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\t\n\t\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\t\n\t\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\t\n\t\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\t\n\t\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\t\n\t\t\t\t\t\t\t\t\tnormalModel.negate();\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\t\n\t\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\t\n\t\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\t\n\t\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t\t_face.material = material;\n\t\n\t\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\t\n\t\t\t\t\t\t\t_renderData.elements.push( _face );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( object instanceof THREE.Line ) {\n\t\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\t\n\t\t\t\t\t\tif ( attributes.position !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( geometry.index !== null ) {\n\t\n\t\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\t\n\t\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\t\n\t\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\t\n\t\t\t\t\t\tvar vertices = object.geometry.vertices;\n\t\n\t\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\t\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\t\n\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\t\n\t\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\t\n\t\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\t\n\t\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\t\n\t\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\t\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\t\n\t\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\t\n\t\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\t\n\t\t\t\t\t\t\t\t_line = getNextLineInPool();\n\t\n\t\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\t\n\t\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\t\n\t\t\t\t\t\t\t\t_line.material = object.material;\n\t\n\t\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\t\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\t\n\t\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\t\n\t\t\t\t\tvar invW = 1 / _vector4.w;\n\t\n\t\t\t\t\t_vector4.z *= invW;\n\t\n\t\t\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\t\n\t\t\t\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t\t\t\t_sprite.id = object.id;\n\t\t\t\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t\t\t\t_sprite.z = _vector4.z;\n\t\t\t\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t\t\t\t_sprite.object = object;\n\t\n\t\t\t\t\t\t_sprite.rotation = object.rotation;\n\t\n\t\t\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\t\n\t\t\t\t\t\t_sprite.material = object.material;\n\t\n\t\t\t\t\t\t_renderData.elements.push( _sprite );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( sortElements === true ) {\n\t\n\t\t\t\t_renderData.elements.sort( painterSort );\n\t\n\t\t\t}\n\t\n\t\t\treturn _renderData;\n\t\n\t\t};\n\t\n\t\t// Pools\n\t\n\t\tfunction getNextObjectInPool() {\n\t\n\t\t\tif ( _objectCount === _objectPoolLength ) {\n\t\n\t\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t\t_objectPool.push( object );\n\t\t\t\t_objectPoolLength ++;\n\t\t\t\t_objectCount ++;\n\t\t\t\treturn object;\n\t\n\t\t\t}\n\t\n\t\t\treturn _objectPool[ _objectCount ++ ];\n\t\n\t\t}\n\t\n\t\tfunction getNextVertexInPool() {\n\t\n\t\t\tif ( _vertexCount === _vertexPoolLength ) {\n\t\n\t\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t\t_vertexPool.push( vertex );\n\t\t\t\t_vertexPoolLength ++;\n\t\t\t\t_vertexCount ++;\n\t\t\t\treturn vertex;\n\t\n\t\t\t}\n\t\n\t\t\treturn _vertexPool[ _vertexCount ++ ];\n\t\n\t\t}\n\t\n\t\tfunction getNextFaceInPool() {\n\t\n\t\t\tif ( _faceCount === _facePoolLength ) {\n\t\n\t\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t\t_facePool.push( face );\n\t\t\t\t_facePoolLength ++;\n\t\t\t\t_faceCount ++;\n\t\t\t\treturn face;\n\t\n\t\t\t}\n\t\n\t\t\treturn _facePool[ _faceCount ++ ];\n\t\n\t\n\t\t}\n\t\n\t\tfunction getNextLineInPool() {\n\t\n\t\t\tif ( _lineCount === _linePoolLength ) {\n\t\n\t\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t\t_linePool.push( line );\n\t\t\t\t_linePoolLength ++;\n\t\t\t\t_lineCount ++;\n\t\t\t\treturn line;\n\t\n\t\t\t}\n\t\n\t\t\treturn _linePool[ _lineCount ++ ];\n\t\n\t\t}\n\t\n\t\tfunction getNextSpriteInPool() {\n\t\n\t\t\tif ( _spriteCount === _spritePoolLength ) {\n\t\n\t\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t\t_spritePool.push( sprite );\n\t\t\t\t_spritePoolLength ++;\n\t\t\t\t_spriteCount ++;\n\t\t\t\treturn sprite;\n\t\n\t\t\t}\n\t\n\t\t\treturn _spritePool[ _spriteCount ++ ];\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tfunction painterSort( a, b ) {\n\t\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\t\n\t\t\t\treturn a.renderOrder - b.renderOrder;\n\t\n\t\t\t} else if ( a.z !== b.z ) {\n\t\n\t\t\t\treturn b.z - a.z;\n\t\n\t\t\t} else if ( a.id !== b.id ) {\n\t\n\t\t\t\treturn a.id - b.id;\n\t\n\t\t\t} else {\n\t\n\t\t\t\treturn 0;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction clipLine( s1, s2 ) {\n\t\n\t\t\tvar alpha1 = 0, alpha2 = 1,\n\t\n\t\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t\t// Z = -1 and Z = +1, respectively.\n\t\t\tbc1near =  s1.z + s1.w,\n\t\t\tbc2near =  s2.z + s2.w,\n\t\t\tbc1far =  - s1.z + s1.w,\n\t\t\tbc2far =  - s2.z + s2.w;\n\t\n\t\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\t\n\t\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\t\treturn true;\n\t\n\t\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\t\n\t\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\t\treturn false;\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// The line segment spans at least one clip plane.\n\t\n\t\t\t\tif ( bc1near < 0 ) {\n\t\n\t\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\t\n\t\t\t\t} else if ( bc2near < 0 ) {\n\t\n\t\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( bc1far < 0 ) {\n\t\n\t\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\t\n\t\t\t\t} else if ( bc2far < 0 ) {\n\t\n\t\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( alpha2 < alpha1 ) {\n\t\n\t\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\t\treturn false;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * @author bchirls / http://bchirls.com/\n\t */\n\t\n\tTHREE.VRStereoEffect = function ( renderer, fullScreenElement, options ) {\n\t\n\t\t// internals\n\t\tvar self = this;\n\t\tvar width = 0, height = 0;\n\t\tvar hmdWidth, hmdHeight;\n\t\n\t\tvar hmdDevice;\n\t\tvar vrMode;\n\t    var inWebview = false;\n\t\tvar vrPreview = false;\n\t\tvar eyeOffsetLeft = new THREE.Vector3();\n\t\tvar eyeOffsetRight = new THREE.Vector3();\n\t\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar scale = new THREE.Vector3();\n\t\n\t\tvar cameraLeft = new THREE.PerspectiveCamera();\n\t\tvar cameraRight = new THREE.PerspectiveCamera();\n\t\tvar leftRenderRect = {\n\t\t\tx: 0, y: 0, width: 0, height: 0\n\t\t};\n\t\tvar rightRenderRect = {\n\t\t\tx: 0, y: 0, width: 0, height: 0\n\t\t};\n\t\n\t\tvar near = 2;\n\t\tvar far = 40000;\n\t\n\t\tvar requestFullscreen;\n\t\tvar fullScreenParam = {\n\t\t\tvrDisplay: null\n\t\t};\n\t\tvar fovScale;\n\t\n\t\tvar RADIANS = Math.PI / 180;\n\t\n\t\tvar poll = options && options.poll || 1000;\n\t\tvar pollTimeout;\n\t\n\t\tfunction perspectiveMatrixFromVRFieldOfView(fov, zNear, zFar) {\n\t\t\tvar outMat = new THREE.Matrix4(),\n\t\t\t\tout = outMat.elements,\n\t\t\t\tupTan = Math.tan(fov.upDegrees * RADIANS),\n\t\t\t\tdownTan = Math.tan(fov.downDegrees * RADIANS),\n\t\t\t\tleftTan = Math.tan(fov.leftDegrees * RADIANS),\n\t\t\t\trightTan = Math.tan(fov.rightDegrees * RADIANS),\n\t\n\t\t\t\txScale = 2 / (leftTan + rightTan),\n\t\t\t\tyScale = 2 / (upTan + downTan);\n\t\n\t\t\tout[0] = xScale;\n\t\t\tout[4] = 0;\n\t\t\tout[8] = -((leftTan - rightTan) * xScale * 0.5);\n\t\t\tout[12] = 0;\n\t\n\t\t\tout[1] = 0;\n\t\t\tout[5] = yScale;\n\t\t\tout[9] = ((upTan - downTan) * yScale * 0.5);\n\t\t\tout[13] = 0;\n\t\n\t\t\tout[2] = 0;\n\t\t\tout[6] = 0;\n\t\t\tout[10] = zFar / (zNear - zFar);\n\t\t\tout[14] = (zFar * zNear) / (zNear - zFar);\n\t\n\t\t\tout[3] = 0;\n\t\t\tout[7] = 0;\n\t\t\tout[11] = -1;\n\t\t\tout[15] = 0;\n\t\n\t\t\treturn outMat;\n\t\t}\n\t\n\t\tfunction resize() {\n\t\t\tvar w, h;\n\t\n\t\t\tif (hmdDevice && vrMode) {\n\t\t\t\tw = hmdWidth;// / Math.pow(window.devicePixelRatio || 1, 2);\n\t\t\t\th = hmdHeight;// / Math.pow(window.devicePixelRatio || 1, 2);\n\t\t\t} else {\n\t\t\t\tw = width || renderer.domElement.offsetWidth || window.innerWidth;\n\t\t\t\th = height || renderer.domElement.offsetHeight || window.innerHeight;\n\t\t\t}\n\t\n\t\t\trenderer.setSize(w, h);\n\t\t}\n\t\n\t\tfunction updateProjection() {\n\t\t\tvar fovLeft,\n\t\t\t\tfovRight,\n\t\n\t\t\t\tleftEyeParams,\n\t\t\t\trightEyeParams,\n\t\t\t\tleftEyeRect,\n\t\t\t\trightEyeRect,\n\t\n\t\t\t\tleftEyeViewport,\n\t\t\t\trightEyeViewport;\n\t\n\t\t\tif (!hmdDevice) {\n\t\t\t\tcameraLeft.fov = 80;\n\t\t\t\tcameraRight.fov = 80;\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// if (amount && hmdDevice.setFieldOfView) {\n\t\t\t// \tfovScale += amount;\n\t\t\t// \tfovScale = Math.max(0.1, fovScale);\n\t\n\t\t\t// \tfovLeft = hmdDevice.getRecommendedEyeFieldOfView('left');\n\t\n\t\t\t// \tfovLeft.upDegrees *= fovScale;\n\t\t\t// \tfovLeft.downDegrees *= fovScale;\n\t\t\t// \tfovLeft.leftDegrees *= fovScale;\n\t\t\t// \tfovLeft.rightDegrees *= fovScale;\n\t\n\t\t\t// \tfovRight = hmdDevice.getRecommendedEyeFieldOfView('right');\n\t\t\t// \tfovRight.upDegrees *= fovScale;\n\t\t\t// \tfovRight.downDegrees *= fovScale;\n\t\t\t// \tfovRight.leftDegrees *= fovScale;\n\t\t\t// \tfovRight.rightDegrees *= fovScale;\n\t\n\t\t\t// \thmdDevice.setFieldOfView(fovLeft, fovRight);\n\t\t\t// }\n\t\n\t\t\tif (hmdDevice.getEyeParameters) {\n\t\t\t\tleftEyeParams = hmdDevice.getEyeParameters('left');\n\t\t\t\trightEyeParams = hmdDevice.getEyeParameters('right');\n\t\t\t\tleftEyeRect = leftEyeParams.renderRect;\n\t\t\t\trightEyeRect = rightEyeParams.renderRect;\n\t\n\t\t\t\thmdWidth = rightEyeRect.x + rightEyeRect.width;\n\t\t\t\thmdHeight = Math.max(leftEyeRect.y + leftEyeRect.height, rightEyeRect.y + rightEyeRect.height);\n\t\n\t\t\t\tfovLeft = leftEyeParams.currentFieldOfView;\n\t\t\t\tfovRight = rightEyeParams.currentFieldOfView;\n\t\n\t\t\t\thmdDevice.setFieldOfView(fovLeft, fovRight, near, far);\n\t\n\t\t\t\teyeOffsetLeft.copy(leftEyeParams.eyeTranslation);\n\t\t\t\teyeOffsetRight.copy(rightEyeParams.eyeTranslation);\n\t\n\t\t\t\tleftRenderRect = leftEyeParams.renderRect;\n\t\t\t\trightRenderRect = rightEyeParams.renderRect;\n\t\t\t} else if (hmdDevice.getRecommendedEyeRenderRect) {\n\t\t\t\tleftEyeViewport = hmdDevice.getRecommendedEyeRenderRect('left');\n\t\t\t\trightEyeViewport = hmdDevice.getRecommendedEyeRenderRect('right');\n\t\n\t\t\t\thmdWidth = leftEyeViewport.width + rightEyeViewport.width;\n\t\t\t\thmdHeight = Math.max(leftEyeViewport.height, rightEyeViewport.height);\n\t\n\t\t\t\tif (hmdDevice.getCurrentEyeFieldOfView) {\n\t\t\t\t\tfovLeft = hmdDevice.getCurrentEyeFieldOfView('left');\n\t\t\t\t\tfovRight = hmdDevice.getCurrentEyeFieldOfView('right');\n\t\t\t\t} else {\n\t\t\t\t\tfovLeft = hmdDevice.getRecommendedEyeFieldOfView('left');\n\t\t\t\t\tfovRight = hmdDevice.getRecommendedEyeFieldOfView('right');\n\t\t\t\t}\n\t\n\t\t\t\teyeOffsetLeft.copy(hmdDevice.getEyeTranslation('left'));\n\t\t\t\teyeOffsetRight.copy(hmdDevice.getEyeTranslation('right'));\n\t\n\t\t\t\tleftRenderRect.x = leftEyeViewport.left;\n\t\t\t\tleftRenderRect.y = leftEyeViewport.top;\n\t\t\t\tleftRenderRect.width = leftEyeViewport.width;\n\t\t\t\tleftRenderRect.height = leftEyeViewport.height;\n\t\n\t\t\t\trightRenderRect.x = rightEyeViewport.left;\n\t\t\t\trightRenderRect.y = rightEyeViewport.top;\n\t\t\t\trightRenderRect.width = rightEyeViewport.width;\n\t\t\t\trightRenderRect.height = rightEyeViewport.height;\n\t\t\t}\n\t\n\t\t\tresize();\n\t\n\t\t\tcameraLeft.projectionMatrix = perspectiveMatrixFromVRFieldOfView(fovLeft, near, far);\n\t\t\tcameraRight.projectionMatrix = perspectiveMatrixFromVRFieldOfView(fovRight, near, far);\n\t\t}\n\t\n\t\tfunction gotVRDevices(devices) {\n\t\t\tvar i,\n\t\t\t\tdevice;\n\t\n\t\t\tfor (i = 0; i < devices.length; i++) {\n\t\t\t\tdevice = devices[i];\n\t\t\t\tif ( device instanceof HMDVRDevice ) {\n\t\n\t\t\t\t\tif ( hmdDevice && device.hardwareUnitId === hmdDevice.hardwareUnitId ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\n\t\t\t\t\thmdDevice = device;\n\t\t\t\t\tconsole.log('Using HMD Device:', hmdDevice.deviceName);\n\t\n\t\t\t\t\tif (hmdDevice.setTimewarp) {\n\t\t\t\t\t\t//hmdDevice.setTimewarp(false);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tupdateProjection();\n\t\n\t\t\t\t\tfullScreenParam.vrDisplay = hmdDevice;\n\t\n\t\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t\t} );\n\t\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (poll) {\n\t\t\t\tclearTimeout(pollTimeout);\n\t\t\t\tsetTimeout(self.scan, poll);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction onFullscreenChange() {\n\t\t\tif (!document.webkitFullscreenElement &&\n\t\t\t\t\t!document.mozFullScreenElement &&\n\t\t\t\t\t!document.msFullscreenElement) {\n\t\t\t\tvrMode = false;\n\t\t\t}\n\t\n\t\t\tupdateProjection();\n\t\n\t\t\tself.dispatchEvent( {\n\t\t\t\ttype: \"fullscreenchange\"\n\t\t\t} );\n\t\t}\n\t\n\t\t// API\n\t\n\t\tthis.separation = 0.01;\n\t\n\t\t// initialization\n\t\n\t\trenderer.autoClear = false;\n\t\n\t\tif (!fullScreenElement) {\n\t\t\tfullScreenElement = renderer.domElement;\n\t\t}\n\t\trequestFullscreen = fullScreenElement.webkitRequestFullscreen ||\n\t\t\tfullScreenElement.mozRequestFullScreen ||\n\t\t\tfullScreenElement.msRequestFullscreen;\n\t\tif (requestFullscreen) {\n\t\t\trequestFullscreen = requestFullscreen.bind(fullScreenElement, fullScreenParam);\n\t\t}\n\t\n\t\tdocument.addEventListener('fullscreenchange', onFullscreenChange, false);\n\t\tdocument.addEventListener('webkitfullscreenchange', onFullscreenChange, false);\n\t\tdocument.addEventListener('mozfullscreenchange', onFullscreenChange, false);\n\t\tdocument.addEventListener('MSFullscreenChange', onFullscreenChange, false);\n\t\n\t\t//todo: method for adjusting HMD FOV\n\t\n\t\tthis.scan = function () {\n\t\t\tif (navigator.getVRDevices) {\n\t\t\t\tnavigator.getVRDevices().then(gotVRDevices);\n\t\t\t} else if (navigator.mozGetVRDevices) {\n\t\t\t\tnavigator.mozGetVRDevices(gotVRDevices);\n\t\t\t}\n\t\t};\n\t\n\t\tthis.requestFullScreen = function () {\n\t\t\tvrMode = true;\n\t\t\trequestFullscreen();\n\t\t};\n\t\n\t\tthis.exit = function () {\n\t\t\tvrMode = false;\n\t\t\tvrPreview = false;\n\t\t};\n\t\n\t\tthis.setSize = function ( w, h ) {\n\t\t\twidth = w;\n\t\t\theight = h;\n\t\n\t\t\tresize();\n\t\t};\n\t\n\t\tthis.vrPreview = function (val) {\n\t\t\tif (val !== undefined) {\n\t\t\t\tvrPreview = !!val;\n\t\t\t}\n\t\t\treturn vrPreview;\n\t\t};\n\t\n\t\tthis.isFullscreen = function () {\n\t\t\treturn vrMode;\n\t\t};\n\t\n\t    // Add by kuilin.qkl\n\t    this.isWebview = function (bool) {\n\t        if (typeof bool === 'undefined') return inWebview;\n\t        inWebview = bool;\n\t        return inWebview;\n\t    };\n\t\n\t\tthis.hmd = function () {\n\t\t\treturn hmdDevice;\n\t\t};\n\t\n\t\tthis.render = function ( leftScene, rightScene, camera, renderTarget, forceClear ) {\n\t\t\tvar w, h;\n\t\n\t\t\tif ( rightScene && rightScene instanceof THREE.Scene ) {\n\t\t\t\t//rightScene.updateMatrixWorld();\n\t\t\t} else {\n\t\t\t\tif ( (!camera || camera instanceof THREE.WebGLRenderTarget) && rightScene instanceof THREE.Camera ) {\n\t\t\t\t\tforceClear = renderTarget;\n\t\t\t\t\trenderTarget = camera;\n\t\t\t\t\tcamera = rightScene;\n\t\t\t\t}\n\t\t\t\trightScene = leftScene;\n\t\t\t}\n\t\n\t\t\t//leftScene.updateMatrixWorld();\n\t\n\t\t\tif ( camera.parent === undefined ) {\n\t\t\t\tcamera.updateMatrixWorld();\n\t\t\t}\n\t\n\t\t\tw = width || renderer.domElement.width;\n\t\t\th = height || renderer.domElement.height;\n\t        // This code would not be annotated if mobile model.\n\t\t\tw /= window.devicePixelRatio || 1;\n\t\t\th /= window.devicePixelRatio || 1;\n\t\n\t\t\t/**\n\t\t\t *  TODO: make this work when CSS VR Rendering is fixed\n\t\t\t *  http://blog.bitops.com/blog/2014/08/20/updated-firefox-vr-builds/\n\t         *  Open by kuilin.qkl\n\t         */\n\t\t\tif (renderer instanceof THREE.CanvasRenderer || renderer instanceof THREE.CSS3DRenderer) {\n\t\t\t\trenderer.render( leftScene, camera );\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif (!vrMode && !vrPreview) {\n\t\t\t\trenderer.enableScissorTest( false );\n\t\t\t\trenderer.setViewport( 0, 0, w, h );\n\t\t\t\trenderer.render( leftScene, camera, renderTarget, true );\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tcamera.matrixWorld.decompose( position, quaternion, scale );\n\t\n\t\t\tif (!hmdDevice) {\n\t\t\t\t// left\n\t\t\t\tcameraLeft.fov = camera.fov;\n\t\t\t\tcameraLeft.aspect = 0.5 * camera.aspect;\n\t\t\t\tcameraLeft.near = camera.near;\n\t\t\t\tcameraLeft.far = camera.far;\n\t\t\t\tcameraLeft.updateProjectionMatrix();\n\t\n\t\t\t\t// right\n\t\n\t\t\t\tcameraRight.fov = camera.fov;\n\t\t\t\tcameraRight.aspect = 0.5 * camera.aspect;\n\t\t\t\tcameraRight.near = camera.near;\n\t\t\t\tcameraRight.far = camera.far;\n\t\t\t\tcameraRight.updateProjectionMatrix();\n\t\t\t}\n\t\n\t\t\tcameraLeft.position.copy( position );\n\t\t\tcameraLeft.quaternion.copy( quaternion );\n\t\n\t\t\tcameraRight.position.copy( position );\n\t\t\tcameraRight.quaternion.copy( quaternion );\n\t\n\t\t\tif (hmdDevice) {\n\t\t\t\tcameraLeft.position.add( eyeOffsetLeft ) ;\n\t\t\t\tcameraRight.position.add( eyeOffsetRight );\n\t\t\t} else {\n\t\t\t\tcameraLeft.translateX( - this.separation );\n\t\t\t\tcameraRight.translateX( this.separation );\n\t\t\t}\n\t\n\t\t\tcameraLeft.updateMatrixWorld();\n\t\t\tcameraRight.updateMatrixWorld();\n\t\n\t        // Bug fixed if device's Ratio > 1\n\t        w = renderer.context.drawingBufferWidth / ( 2 * window.devicePixelRatio );\n\t\n\t\t\tif (renderTarget) {\n\t\t\t\trenderer.setRenderTarget(renderTarget);\n\t\t\t}\n\t\n\t\t\trightScene.traverseVisible(function (obj) {\n\t\t\t\tif (obj.material && obj.material.map) {\n\t\t\t\t\tif (obj.userData.stereo === 'vertical') {\n\t\t\t\t\t\tobj.material.map.offset.set(0, 0.5);\n\t\t\t\t\t} else if (obj.userData.stereo) {\n\t\t\t\t\t\tobj.material.map.offset.set(0.5, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t        // Modify by kuilin.qkl\n\t        // Not use Fullscreen\n\t        if (inWebview) {\n\t            renderer.setScissor( 0, h >> 1, w * 2, h >> 1 );\n\t            renderer.setViewport( 0, h >> 1, w * 2, h >> 1 );\n\t        } else {\n\t            renderer.setScissor( w, 0, w, h );\n\t            renderer.setViewport( w, 0, w, h );\n\t        }\n\t\t\trenderer.render( rightScene, cameraRight, renderTarget, forceClear );\n\t\n\t\t\tleftScene.traverseVisible(function (obj) {\n\t\t\t\tif (obj.userData.stereo && obj.material && obj.material.map) {\n\t\t\t\t\tobj.material.map.offset.set(0, 0);\n\t\t\t\t}\n\t\t\t});\n\t        if (inWebview) {\n\t            renderer.setScissor( 0, 0, w * 2, h >> 1 );\n\t            renderer.setViewport( 0, 0, w * 2, h >> 1 );\n\t        } else {\n\t            renderer.setScissor( 0, 0, w, h );\n\t            renderer.setViewport( 0, 0, w, h );\n\t        }\n\t\t\trenderer.render( leftScene, cameraLeft, renderTarget, forceClear );\n\t\n\t\t\t//reset viewport, scissor\n\t\t\tw *= 2;\n\t        renderer.setViewport( 0, 0, w, h );\n\t        renderer.setScissor( 0, 0, w, h );\n\t\t\trenderer.enableScissorTest( false );\n\t\t};\n\t\n\t\tObject.defineProperty(this, 'near', {\n\t\t\tget: function () {\n\t\t\t\treturn near;\n\t\t\t},\n\t\t\tset: function (val) {\n\t\t\t\tval = parseFloat(val);\n\t\t\t\tif (val && !isNaN(val)) {\n\t\t\t\t\tnear = Math.max(0, val);\n\t\t\t\t\tupdateProjection();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\tObject.defineProperty(this, 'far', {\n\t\t\tget: function () {\n\t\t\t\treturn far;\n\t\t\t},\n\t\t\tset: function (val) {\n\t\t\t\tval = parseFloat(val);\n\t\t\t\tif (val && !isNaN(val)) {\n\t\t\t\t\tfar = Math.max(0, val);\n\t\t\t\t\tupdateProjection();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\tthis.scan();\n\t\tresize();\n\t};\n\t\n\tTHREE.VRStereoEffect.prototype = Object.create( THREE.EventDispatcher.prototype );\n\t\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\tTHREE.VRControls = function ( object, options ) {\n\t\n\t\tvar self = this;\n\t\n\t\t//HMD sensor stuff\n\t\tvar sensorDevice;\n\t\tvar vrState;\n\t\n\t\t//device orientation stuff\n\t\tvar deviceControls;\n\t\tvar zeroAngle = 0;\n\t\n\t\tvar mode = '';\n\t\n\t\tvar vrBrowser = navigator.getVRDevices || navigator.mozGetVRDevices;\n\t\n\t\tvar poll = options && options.poll || 1000;\n\t\tvar pollTimeout;\n\t\n\t\tfunction gotVRDevices( devices ) {\n\t\t\tvar i,\n\t\t\t\tdevice;\n\t\n\t\t\tfor ( i = 0; i < devices.length; ++i ) {\n\t\t\t\tdevice = devices[i];\n\t\t\t\tif ( devices[i] instanceof PositionSensorVRDevice ) {\n\t\n\t\t\t\t\tif ( sensorDevice && devices[i].hardwareUnitId === sensorDevice.hardwareUnitId ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tsensorDevice = device;\n\t\t\t\t\tconsole.log('Using Sensor Device:', sensorDevice.deviceName);\n\t\n\t\t\t\t\tif ( sensorDevice.zeroSensor ) {\n\t\t\t\t\t\tself.zeroSensor = sensorDevice.zeroSensor.bind(sensorDevice);\n\t\t\t\t\t} else if ( sensorDevice.resetSensor ) {\n\t\t\t\t\t\tself.zeroSensor = sensorDevice.resetSensor.bind(sensorDevice);\n\t\t\t\t\t}\n\t\t\t\t\tself.zeroSensor();\n\t\n\t\t\t\t\tmode = 'hmd';\n\t\n\t\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t\t} );\n\t\n\t\t\t\t\tbreak; // We keep the first we encounter\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (poll) {\n\t\t\t\tclearTimeout(pollTimeout);\n\t\t\t\tsetTimeout(self.scan, poll);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction deviceOrientationChange( event ) {\n\t\t\tif ( typeof event.gamma === 'number' ) {\n\t\t\t\tmode = 'deviceorientation';\n\t\t\t\twindow.removeEventListener( 'deviceorientation', deviceOrientationChange, false );\n\t\t\t\tdeviceControls = new THREE.DeviceOrientationControls( object );\n\t\t\t\tdeviceControls.connect();\n\t\t\t\tif (!this.freeze) {\n\t\t\t\t\tdeviceControls.update();\n\t\t\t\t}\n\t\n\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t\n\t\tthis.update = function() {\n\t\t\t// Applies head rotation from sensor data.\n\t\t\tif (self.freeze) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif ( sensorDevice ) {\n\t\t\t\tvrState = sensorDevice.getState();\n\t\t\t\tif ( vrState ) {\n\t\t\t\t\tif ( vrState.orientation && vrState.hasOrientation !== false ) {\n\t\t\t\t\t\tobject.quaternion.copy( vrState.orientation );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( vrState.position && vrState.hasPosition !== false ) {\n\t\t\t\t\t\t// vrState.position is null if using DK1 or if DK2 camera is not plugged in\n\t\t\t\t\t\tobject.position.copy( vrState.position );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tobject.updateMatrixWorld();\n\t\t\t\t}\n\t\t\t} else if (deviceControls && deviceControls.deviceOrientation.gamma !== undefined) {\n\t\t\t\tdeviceControls.update();\n\t\t\t\tobject.rotateY(-zeroAngle);\n\t\t\t\tobject.updateMatrixWorld();\n\t\t\t}\n\t\t};\n\t\n\t\t//only useful when frozen\n\t\tthis.reset = function () {\n\t\t\tif ( object ) {\n\t\t\t\tobject.quaternion.set( 0, 0, 0, 1 );\n\t\t\t\tobject.position.set( 0, 0, 0 );\n\t\t\t}\n\t\t};\n\t\n\t\t//zeros only rotation on Y axis\n\t\t//todo: find out if it zeros out position. need a DK2 to test\n\t\tthis.zeroSensor = function () {\n\t\t\tif (sensorDevice && sensorDevice.zeroSensor) {\n\t\t\t\tsensorDevice.zeroSensor();\n\t\t\t}\n\t\t\tzeroAngle = object.rotation.y;\n\t\t\tself.update();\n\t\t};\n\t\n\t\tthis.freeze = false;\n\t\n\t\t//method to query which tech we're using\n\t\tthis.mode = function () {\n\t\t\treturn mode;\n\t\t};\n\t\n\t\tthis.scan = function () {\n\t\t\tif ( navigator.getVRDevices ) {\n\t\t\t\tnavigator.getVRDevices().then( gotVRDevices );\n\t\t\t} else if ( navigator.mozGetVRDevices ) {\n\t\t\t\tnavigator.mozGetVRDevices( gotVRDevices );\n\t\t\t}\n\t\t};\n\t\n\t\t//todo: connect/disconnect methods\n\t\t//todo: method to query orientation/position without changing object\n\t\t//todo: work without an object\n\t\n\t\tif ( vrBrowser ) {\n\t\t\tthis.scan();\n\t\t} else if ( \"DeviceOrientationEvent\" in window && THREE.DeviceOrientationControls) {\n\t\t\t//device orientation\n\t\t\twindow.addEventListener( \"deviceorientation\", deviceOrientationChange, false );\n\t\t}\n\t};\n\t\n\tTHREE.VRControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\t\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar d        = __webpack_require__(39)\n\t  , callable = __webpack_require__(40)\n\t\n\t  , apply = Function.prototype.apply, call = Function.prototype.call\n\t  , create = Object.create, defineProperty = Object.defineProperty\n\t  , defineProperties = Object.defineProperties\n\t  , hasOwnProperty = Object.prototype.hasOwnProperty\n\t  , descriptor = { configurable: true, enumerable: false, writable: true }\n\t\n\t  , on, once, off, emit, methods, descriptors, base;\n\t\n\ton = function (type, listener) {\n\t\tvar data;\n\t\n\t\tcallable(listener);\n\t\n\t\tif (!hasOwnProperty.call(this, '__ee__')) {\n\t\t\tdata = descriptor.value = create(null);\n\t\t\tdefineProperty(this, '__ee__', descriptor);\n\t\t\tdescriptor.value = null;\n\t\t} else {\n\t\t\tdata = this.__ee__;\n\t\t}\n\t\tif (!data[type]) data[type] = listener;\n\t\telse if (typeof data[type] === 'object') data[type].push(listener);\n\t\telse data[type] = [data[type], listener];\n\t\n\t\treturn this;\n\t};\n\t\n\tonce = function (type, listener) {\n\t\tvar once, self;\n\t\n\t\tcallable(listener);\n\t\tself = this;\n\t\ton.call(this, type, once = function () {\n\t\t\toff.call(self, type, once);\n\t\t\tapply.call(listener, this, arguments);\n\t\t});\n\t\n\t\tonce.__eeOnceListener__ = listener;\n\t\treturn this;\n\t};\n\t\n\toff = function (type, listener) {\n\t\tvar data, listeners, candidate, i;\n\t\n\t\tcallable(listener);\n\t\n\t\tif (!hasOwnProperty.call(this, '__ee__')) return this;\n\t\tdata = this.__ee__;\n\t\tif (!data[type]) return this;\n\t\tlisteners = data[type];\n\t\n\t\tif (typeof listeners === 'object') {\n\t\t\tfor (i = 0; (candidate = listeners[i]); ++i) {\n\t\t\t\tif ((candidate === listener) ||\n\t\t\t\t\t\t(candidate.__eeOnceListener__ === listener)) {\n\t\t\t\t\tif (listeners.length === 2) data[type] = listeners[i ? 0 : 1];\n\t\t\t\t\telse listeners.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ((listeners === listener) ||\n\t\t\t\t\t(listeners.__eeOnceListener__ === listener)) {\n\t\t\t\tdelete data[type];\n\t\t\t}\n\t\t}\n\t\n\t\treturn this;\n\t};\n\t\n\temit = function (type) {\n\t\tvar i, l, listener, listeners, args;\n\t\n\t\tif (!hasOwnProperty.call(this, '__ee__')) return;\n\t\tlisteners = this.__ee__[type];\n\t\tif (!listeners) return;\n\t\n\t\tif (typeof listeners === 'object') {\n\t\t\tl = arguments.length;\n\t\t\targs = new Array(l - 1);\n\t\t\tfor (i = 1; i < l; ++i) args[i - 1] = arguments[i];\n\t\n\t\t\tlisteners = listeners.slice();\n\t\t\tfor (i = 0; (listener = listeners[i]); ++i) {\n\t\t\t\tapply.call(listener, this, args);\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (arguments.length) {\n\t\t\tcase 1:\n\t\t\t\tcall.call(listeners, this);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcall.call(listeners, this, arguments[1]);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcall.call(listeners, this, arguments[1], arguments[2]);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tl = arguments.length;\n\t\t\t\targs = new Array(l - 1);\n\t\t\t\tfor (i = 1; i < l; ++i) {\n\t\t\t\t\targs[i - 1] = arguments[i];\n\t\t\t\t}\n\t\t\t\tapply.call(listeners, this, args);\n\t\t\t}\n\t\t}\n\t};\n\t\n\tmethods = {\n\t\ton: on,\n\t\tonce: once,\n\t\toff: off,\n\t\temit: emit\n\t};\n\t\n\tdescriptors = {\n\t\ton: d(on),\n\t\tonce: d(once),\n\t\toff: d(off),\n\t\temit: d(emit)\n\t};\n\t\n\tbase = defineProperties({}, descriptors);\n\t\n\tmodule.exports = exports = function (o) {\n\t\treturn (o == null) ? create(base) : defineProperties(Object(o), descriptors);\n\t};\n\texports.methods = methods;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\t// css base code, injected by the css-loader\r\n\tmodule.exports = function() {\r\n\t\tvar list = [];\r\n\t\r\n\t\t// return the list of modules as css string\r\n\t\tlist.toString = function toString() {\r\n\t\t\tvar result = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar item = this[i];\r\n\t\t\t\tif(item[2]) {\r\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(item[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result.join(\"\");\r\n\t\t};\r\n\t\r\n\t\t// import a list of modules into the list\r\n\t\tlist.i = function(modules, mediaQuery) {\r\n\t\t\tif(typeof modules === \"string\")\r\n\t\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\t\tvar alreadyImportedModules = {};\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar id = this[i][0];\r\n\t\t\t\tif(typeof id === \"number\")\r\n\t\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\t\tvar item = modules[i];\r\n\t\t\t\t// skip already imported module\r\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn list;\r\n\t};\r\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function (global, factory) {\n\t    true ? factory(exports) :\n\t    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t    (factory((global.THREE = global.THREE || {})));\n\t}(this, (function (exports) { 'use strict';\n\t\n\t    // Polyfills\n\t\n\t    if ( Number.EPSILON === undefined ) {\n\t\n\t    \tNumber.EPSILON = Math.pow( 2, - 52 );\n\t\n\t    }\n\t\n\t    //\n\t\n\t    if ( Math.sign === undefined ) {\n\t\n\t    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\t\n\t    \tMath.sign = function ( x ) {\n\t\n\t    \t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    if ( Function.prototype.name === undefined ) {\n\t\n\t    \t// Missing in IE9-11.\n\t    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\t\n\t    \tObject.defineProperty( Function.prototype, 'name', {\n\t\n\t    \t\tget: function () {\n\t\n\t    \t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\t\n\t    \t\t}\n\t\n\t    \t} );\n\t\n\t    }\n\t\n\t    if ( Object.assign === undefined ) {\n\t\n\t    \t// Missing in IE.\n\t    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\t\n\t    \t( function () {\n\t\n\t    \t\tObject.assign = function ( target ) {\n\t\n\t    \t\t\t'use strict';\n\t\n\t    \t\t\tif ( target === undefined || target === null ) {\n\t\n\t    \t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar output = Object( target );\n\t\n\t    \t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\t\n\t    \t\t\t\tvar source = arguments[ index ];\n\t\n\t    \t\t\t\tif ( source !== undefined && source !== null ) {\n\t\n\t    \t\t\t\t\tfor ( var nextKey in source ) {\n\t\n\t    \t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\t\n\t    \t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn output;\n\t\n\t    \t\t};\n\t\n\t    \t} )();\n\t\n\t    }\n\t\n\t    /**\n\t     * https://github.com/mrdoob/eventdispatcher.js/\n\t     */\n\t\n\t    function EventDispatcher() {}\n\t\n\t    Object.assign( EventDispatcher.prototype, {\n\t\n\t    \taddEventListener: function ( type, listener ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) this._listeners = {};\n\t\n\t    \t\tvar listeners = this._listeners;\n\t\n\t    \t\tif ( listeners[ type ] === undefined ) {\n\t\n\t    \t\t\tlisteners[ type ] = [];\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\t\n\t    \t\t\tlisteners[ type ].push( listener );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \thasEventListener: function ( type, listener ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) return false;\n\t\n\t    \t\tvar listeners = this._listeners;\n\t\n\t    \t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tremoveEventListener: function ( type, listener ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) return;\n\t\n\t    \t\tvar listeners = this._listeners;\n\t    \t\tvar listenerArray = listeners[ type ];\n\t\n\t    \t\tif ( listenerArray !== undefined ) {\n\t\n\t    \t\t\tvar index = listenerArray.indexOf( listener );\n\t\n\t    \t\t\tif ( index !== - 1 ) {\n\t\n\t    \t\t\t\tlistenerArray.splice( index, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tdispatchEvent: function ( event ) {\n\t\n\t    \t\tif ( this._listeners === undefined ) return;\n\t\n\t    \t\tvar listeners = this._listeners;\n\t    \t\tvar listenerArray = listeners[ event.type ];\n\t\n\t    \t\tif ( listenerArray !== undefined ) {\n\t\n\t    \t\t\tevent.target = this;\n\t\n\t    \t\t\tvar array = [], i = 0;\n\t    \t\t\tvar length = listenerArray.length;\n\t\n\t    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\t\tarray[ i ] = listenerArray[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\t\tarray[ i ].call( this, event );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var REVISION = '81';\n\t    var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n\t    var CullFaceNone = 0;\n\t    var CullFaceBack = 1;\n\t    var CullFaceFront = 2;\n\t    var CullFaceFrontBack = 3;\n\t    var FrontFaceDirectionCW = 0;\n\t    var FrontFaceDirectionCCW = 1;\n\t    var BasicShadowMap = 0;\n\t    var PCFShadowMap = 1;\n\t    var PCFSoftShadowMap = 2;\n\t    var FrontSide = 0;\n\t    var BackSide = 1;\n\t    var DoubleSide = 2;\n\t    var FlatShading = 1;\n\t    var SmoothShading = 2;\n\t    var NoColors = 0;\n\t    var FaceColors = 1;\n\t    var VertexColors = 2;\n\t    var NoBlending = 0;\n\t    var NormalBlending = 1;\n\t    var AdditiveBlending = 2;\n\t    var SubtractiveBlending = 3;\n\t    var MultiplyBlending = 4;\n\t    var CustomBlending = 5;\n\t    var BlendingMode = {\n\t        NoBlending: NoBlending,\n\t        NormalBlending: NormalBlending,\n\t        AdditiveBlending: AdditiveBlending,\n\t        SubtractiveBlending: SubtractiveBlending,\n\t        MultiplyBlending: MultiplyBlending,\n\t        CustomBlending: CustomBlending\n\t    };\n\t    var AddEquation = 100;\n\t    var SubtractEquation = 101;\n\t    var ReverseSubtractEquation = 102;\n\t    var MinEquation = 103;\n\t    var MaxEquation = 104;\n\t    var ZeroFactor = 200;\n\t    var OneFactor = 201;\n\t    var SrcColorFactor = 202;\n\t    var OneMinusSrcColorFactor = 203;\n\t    var SrcAlphaFactor = 204;\n\t    var OneMinusSrcAlphaFactor = 205;\n\t    var DstAlphaFactor = 206;\n\t    var OneMinusDstAlphaFactor = 207;\n\t    var DstColorFactor = 208;\n\t    var OneMinusDstColorFactor = 209;\n\t    var SrcAlphaSaturateFactor = 210;\n\t    var NeverDepth = 0;\n\t    var AlwaysDepth = 1;\n\t    var LessDepth = 2;\n\t    var LessEqualDepth = 3;\n\t    var EqualDepth = 4;\n\t    var GreaterEqualDepth = 5;\n\t    var GreaterDepth = 6;\n\t    var NotEqualDepth = 7;\n\t    var MultiplyOperation = 0;\n\t    var MixOperation = 1;\n\t    var AddOperation = 2;\n\t    var NoToneMapping = 0;\n\t    var LinearToneMapping = 1;\n\t    var ReinhardToneMapping = 2;\n\t    var Uncharted2ToneMapping = 3;\n\t    var CineonToneMapping = 4;\n\t    var UVMapping = 300;\n\t    var CubeReflectionMapping = 301;\n\t    var CubeRefractionMapping = 302;\n\t    var EquirectangularReflectionMapping = 303;\n\t    var EquirectangularRefractionMapping = 304;\n\t    var SphericalReflectionMapping = 305;\n\t    var CubeUVReflectionMapping = 306;\n\t    var CubeUVRefractionMapping = 307;\n\t    var TextureMapping = {\n\t        UVMapping: UVMapping,\n\t        CubeReflectionMapping: CubeReflectionMapping,\n\t        CubeRefractionMapping: CubeRefractionMapping,\n\t        EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t        EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t        SphericalReflectionMapping: SphericalReflectionMapping,\n\t        CubeUVReflectionMapping: CubeUVReflectionMapping,\n\t        CubeUVRefractionMapping: CubeUVRefractionMapping\n\t    };\n\t    var RepeatWrapping = 1000;\n\t    var ClampToEdgeWrapping = 1001;\n\t    var MirroredRepeatWrapping = 1002;\n\t    var TextureWrapping = {\n\t        RepeatWrapping: RepeatWrapping,\n\t        ClampToEdgeWrapping: ClampToEdgeWrapping,\n\t        MirroredRepeatWrapping: MirroredRepeatWrapping\n\t    };\n\t    var NearestFilter = 1003;\n\t    var NearestMipMapNearestFilter = 1004;\n\t    var NearestMipMapLinearFilter = 1005;\n\t    var LinearFilter = 1006;\n\t    var LinearMipMapNearestFilter = 1007;\n\t    var LinearMipMapLinearFilter = 1008;\n\t    var TextureFilter = {\n\t        NearestFilter: NearestFilter,\n\t        NearestMipMapNearestFilter: NearestMipMapNearestFilter,\n\t        NearestMipMapLinearFilter: NearestMipMapLinearFilter,\n\t        LinearFilter: LinearFilter,\n\t        LinearMipMapNearestFilter: LinearMipMapNearestFilter,\n\t        LinearMipMapLinearFilter: LinearMipMapLinearFilter\n\t    };\n\t    var UnsignedByteType = 1009;\n\t    var ByteType = 1010;\n\t    var ShortType = 1011;\n\t    var UnsignedShortType = 1012;\n\t    var IntType = 1013;\n\t    var UnsignedIntType = 1014;\n\t    var FloatType = 1015;\n\t    var HalfFloatType = 1016;\n\t    var UnsignedShort4444Type = 1017;\n\t    var UnsignedShort5551Type = 1018;\n\t    var UnsignedShort565Type = 1019;\n\t    var UnsignedInt248Type = 1020;\n\t    var AlphaFormat = 1021;\n\t    var RGBFormat = 1022;\n\t    var RGBAFormat = 1023;\n\t    var LuminanceFormat = 1024;\n\t    var LuminanceAlphaFormat = 1025;\n\t    var RGBEFormat = RGBAFormat;\n\t    var DepthFormat = 1026;\n\t    var DepthStencilFormat = 1027;\n\t    var RGB_S3TC_DXT1_Format = 2001;\n\t    var RGBA_S3TC_DXT1_Format = 2002;\n\t    var RGBA_S3TC_DXT3_Format = 2003;\n\t    var RGBA_S3TC_DXT5_Format = 2004;\n\t    var RGB_PVRTC_4BPPV1_Format = 2100;\n\t    var RGB_PVRTC_2BPPV1_Format = 2101;\n\t    var RGBA_PVRTC_4BPPV1_Format = 2102;\n\t    var RGBA_PVRTC_2BPPV1_Format = 2103;\n\t    var RGB_ETC1_Format = 2151;\n\t    var LoopOnce = 2200;\n\t    var LoopRepeat = 2201;\n\t    var LoopPingPong = 2202;\n\t    var InterpolateDiscrete = 2300;\n\t    var InterpolateLinear = 2301;\n\t    var InterpolateSmooth = 2302;\n\t    var ZeroCurvatureEnding = 2400;\n\t    var ZeroSlopeEnding = 2401;\n\t    var WrapAroundEnding = 2402;\n\t    var TrianglesDrawMode = 0;\n\t    var TriangleStripDrawMode = 1;\n\t    var TriangleFanDrawMode = 2;\n\t    var LinearEncoding = 3000;\n\t    var sRGBEncoding = 3001;\n\t    var GammaEncoding = 3007;\n\t    var RGBEEncoding = 3002;\n\t    var LogLuvEncoding = 3003;\n\t    var RGBM7Encoding = 3004;\n\t    var RGBM16Encoding = 3005;\n\t    var RGBDEncoding = 3006;\n\t    var BasicDepthPacking = 3200;\n\t    var RGBADepthPacking = 3201;\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    exports.Math = {\n\t\n\t    \tDEG2RAD: Math.PI / 180,\n\t    \tRAD2DEG: 180 / Math.PI,\n\t\n\t    \tgenerateUUID: function () {\n\t\n\t    \t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\t\n\t    \t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t    \t\tvar uuid = new Array( 36 );\n\t    \t\tvar rnd = 0, r;\n\t\n\t    \t\treturn function generateUUID() {\n\t\n\t    \t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\t\n\t    \t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\t\n\t    \t\t\t\t\tuuid[ i ] = '-';\n\t\n\t    \t\t\t\t} else if ( i === 14 ) {\n\t\n\t    \t\t\t\t\tuuid[ i ] = '4';\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t    \t\t\t\t\tr = rnd & 0xf;\n\t    \t\t\t\t\trnd = rnd >> 4;\n\t    \t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn uuid.join( '' );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclamp: function ( value, min, max ) {\n\t\n\t    \t\treturn Math.max( min, Math.min( max, value ) );\n\t\n\t    \t},\n\t\n\t    \t// compute euclidian modulo of m % n\n\t    \t// https://en.wikipedia.org/wiki/Modulo_operation\n\t\n\t    \teuclideanModulo: function ( n, m ) {\n\t\n\t    \t\treturn ( ( n % m ) + m ) % m;\n\t\n\t    \t},\n\t\n\t    \t// Linear mapping from range <a1, a2> to range <b1, b2>\n\t\n\t    \tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\t\n\t    \t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\t\n\t    \t},\n\t\n\t    \t// http://en.wikipedia.org/wiki/Smoothstep\n\t\n\t    \tsmoothstep: function ( x, min, max ) {\n\t\n\t    \t\tif ( x <= min ) return 0;\n\t    \t\tif ( x >= max ) return 1;\n\t\n\t    \t\tx = ( x - min ) / ( max - min );\n\t\n\t    \t\treturn x * x * ( 3 - 2 * x );\n\t\n\t    \t},\n\t\n\t    \tsmootherstep: function ( x, min, max ) {\n\t\n\t    \t\tif ( x <= min ) return 0;\n\t    \t\tif ( x >= max ) return 1;\n\t\n\t    \t\tx = ( x - min ) / ( max - min );\n\t\n\t    \t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\t\n\t    \t},\n\t\n\t    \trandom16: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n\t    \t\treturn Math.random();\n\t\n\t    \t},\n\t\n\t    \t// Random integer from <low, high> interval\n\t\n\t    \trandInt: function ( low, high ) {\n\t\n\t    \t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\t\n\t    \t},\n\t\n\t    \t// Random float from <low, high> interval\n\t\n\t    \trandFloat: function ( low, high ) {\n\t\n\t    \t\treturn low + Math.random() * ( high - low );\n\t\n\t    \t},\n\t\n\t    \t// Random float from <-range/2, range/2> interval\n\t\n\t    \trandFloatSpread: function ( range ) {\n\t\n\t    \t\treturn range * ( 0.5 - Math.random() );\n\t\n\t    \t},\n\t\n\t    \tdegToRad: function ( degrees ) {\n\t\n\t    \t\treturn degrees * exports.Math.DEG2RAD;\n\t\n\t    \t},\n\t\n\t    \tradToDeg: function ( radians ) {\n\t\n\t    \t\treturn radians * exports.Math.RAD2DEG;\n\t\n\t    \t},\n\t\n\t    \tisPowerOfTwo: function ( value ) {\n\t\n\t    \t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\t\n\t    \t},\n\t\n\t    \tnearestPowerOfTwo: function ( value ) {\n\t\n\t    \t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\t\n\t    \t},\n\t\n\t    \tnextPowerOfTwo: function ( value ) {\n\t\n\t    \t\tvalue --;\n\t    \t\tvalue |= value >> 1;\n\t    \t\tvalue |= value >> 2;\n\t    \t\tvalue |= value >> 4;\n\t    \t\tvalue |= value >> 8;\n\t    \t\tvalue |= value >> 16;\n\t    \t\tvalue ++;\n\t\n\t    \t\treturn value;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author egraether / http://egraether.com/\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     */\n\t\n\t    function Vector2( x, y ) {\n\t\n\t    \tthis.x = x || 0;\n\t    \tthis.y = y || 0;\n\t\n\t    }\n\t\n\t    Vector2.prototype = {\n\t\n\t    \tconstructor: Vector2,\n\t\n\t    \tisVector2: true,\n\t\n\t    \tget width() {\n\t\n\t    \t\treturn this.x;\n\t\n\t    \t},\n\t\n\t    \tset width( value ) {\n\t\n\t    \t\tthis.x = value;\n\t\n\t    \t},\n\t\n\t    \tget height() {\n\t\n\t    \t\treturn this.y;\n\t\n\t    \t},\n\t\n\t    \tset height( value ) {\n\t\n\t    \t\tthis.y = value;\n\t\n\t    \t},\n\t\n\t    \t//\n\t\n\t    \tset: function ( x, y ) {\n\t\n\t    \t\tthis.x = x;\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.x = scalar;\n\t    \t\tthis.y = scalar;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( x ) {\n\t\n\t    \t\tthis.x = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( y ) {\n\t\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponent: function ( index, value ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: this.x = value; break;\n\t    \t\t\tcase 1: this.y = value; break;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetComponent: function ( index ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: return this.x;\n\t    \t\t\tcase 1: return this.y;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.x, this.y );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( v ) {\n\t\n\t    \t\tthis.x = v.x;\n\t    \t\tthis.y = v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t    \t\t\treturn this.addVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x += v.x;\n\t    \t\tthis.y += v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.x += s;\n\t    \t\tthis.y += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x + b.x;\n\t    \t\tthis.y = a.y + b.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScaledVector: function ( v, s ) {\n\t\n\t    \t\tthis.x += v.x * s;\n\t    \t\tthis.y += v.y * s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t    \t\t\treturn this.subVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x -= v.x;\n\t    \t\tthis.y -= v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubScalar: function ( s ) {\n\t\n\t    \t\tthis.x -= s;\n\t    \t\tthis.y -= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x - b.x;\n\t    \t\tthis.y = a.y - b.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( v ) {\n\t\n\t    \t\tthis.x *= v.x;\n\t    \t\tthis.y *= v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( scalar ) {\n\t\n\t    \t\tif ( isFinite( scalar ) ) {\n\t\n\t    \t\t\tthis.x *= scalar;\n\t    \t\t\tthis.y *= scalar;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.x = 0;\n\t    \t\t\tthis.y = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivide: function ( v ) {\n\t\n\t    \t\tthis.x /= v.x;\n\t    \t\tthis.y /= v.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivideScalar: function ( scalar ) {\n\t\n\t    \t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t    \t},\n\t\n\t    \tmin: function ( v ) {\n\t\n\t    \t\tthis.x = Math.min( this.x, v.x );\n\t    \t\tthis.y = Math.min( this.y, v.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmax: function ( v ) {\n\t\n\t    \t\tthis.x = Math.max( this.x, v.x );\n\t    \t\tthis.y = Math.max( this.y, v.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclamp: function ( min, max ) {\n\t\n\t    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclampScalar: function () {\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t    \t\t\tif ( min === undefined ) {\n\t\n\t    \t\t\t\tmin = new Vector2();\n\t    \t\t\t\tmax = new Vector2();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmin.set( minVal, minVal );\n\t    \t\t\tmax.set( maxVal, maxVal );\n\t\n\t    \t\t\treturn this.clamp( min, max );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclampLength: function ( min, max ) {\n\t\n\t    \t\tvar length = this.length();\n\t\n\t    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\t\n\t    \t},\n\t\n\t    \tfloor: function () {\n\t\n\t    \t\tthis.x = Math.floor( this.x );\n\t    \t\tthis.y = Math.floor( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tceil: function () {\n\t\n\t    \t\tthis.x = Math.ceil( this.x );\n\t    \t\tthis.y = Math.ceil( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tround: function () {\n\t\n\t    \t\tthis.x = Math.round( this.x );\n\t    \t\tthis.y = Math.round( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \troundToZero: function () {\n\t\n\t    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.x = - this.x;\n\t    \t\tthis.y = - this.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this.x * v.x + this.y * v.y;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this.x * this.x + this.y * this.y;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\t\n\t    \t},\n\t\n\t    \tlengthManhattan: function() {\n\t\n\t    \t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\treturn this.divideScalar( this.length() );\n\t\n\t    \t},\n\t\n\t    \tangle: function () {\n\t\n\t    \t\t// computes the angle in radians with respect to the positive x-axis\n\t\n\t    \t\tvar angle = Math.atan2( this.y, this.x );\n\t\n\t    \t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\t\n\t    \t\treturn angle;\n\t\n\t    \t},\n\t\n\t    \tdistanceTo: function ( v ) {\n\t\n\t    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceToSquared: function ( v ) {\n\t\n\t    \t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t    \t\treturn dx * dx + dy * dy;\n\t\n\t    \t},\n\t\n\t    \tdistanceToManhattan: function ( v ) {\n\t\n\t    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\t\n\t    \t},\n\t\n\t    \tsetLength: function ( length ) {\n\t\n\t    \t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( v, alpha ) {\n\t\n\t    \t\tthis.x += ( v.x - this.x ) * alpha;\n\t    \t\tthis.y += ( v.y - this.y ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t    \t},\n\t\n\t    \tequals: function ( v ) {\n\t\n\t    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.x = array[ offset ];\n\t    \t\tthis.y = array[ offset + 1 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.x;\n\t    \t\tarray[ offset + 1 ] = this.y;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tindex = index * attribute.itemSize + offset;\n\t\n\t    \t\tthis.x = attribute.array[ index ];\n\t    \t\tthis.y = attribute.array[ index + 1 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trotateAround: function ( center, angle ) {\n\t\n\t    \t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\t\n\t    \t\tvar x = this.x - center.x;\n\t    \t\tvar y = this.y - center.y;\n\t\n\t    \t\tthis.x = x * c - y * s + center.x;\n\t    \t\tthis.y = x * s + y * c + center.y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author szimek / https://github.com/szimek/\n\t     */\n\t\n\t    function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: TextureIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.sourceFile = '';\n\t\n\t    \tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t    \tthis.mipmaps = [];\n\t\n\t    \tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\t\n\t    \tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t    \tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\t\n\t    \tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t    \tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\t\n\t    \tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\t\n\t    \tthis.format = format !== undefined ? format : RGBAFormat;\n\t    \tthis.type = type !== undefined ? type : UnsignedByteType;\n\t\n\t    \tthis.offset = new Vector2( 0, 0 );\n\t    \tthis.repeat = new Vector2( 1, 1 );\n\t\n\t    \tthis.generateMipmaps = true;\n\t    \tthis.premultiplyAlpha = false;\n\t    \tthis.flipY = true;\n\t    \tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\n\t\n\t    \t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t    \t//\n\t    \t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t    \t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t    \tthis.encoding = encoding !== undefined ? encoding :  LinearEncoding;\n\t\n\t    \tthis.version = 0;\n\t    \tthis.onUpdate = null;\n\t\n\t    }\n\t\n\t    Texture.DEFAULT_IMAGE = undefined;\n\t    Texture.DEFAULT_MAPPING = UVMapping;\n\t\n\t    Texture.prototype = {\n\t\n\t    \tconstructor: Texture,\n\t\n\t    \tisTexture: true,\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.version ++;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.image = source.image;\n\t    \t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\t\n\t    \t\tthis.mapping = source.mapping;\n\t\n\t    \t\tthis.wrapS = source.wrapS;\n\t    \t\tthis.wrapT = source.wrapT;\n\t\n\t    \t\tthis.magFilter = source.magFilter;\n\t    \t\tthis.minFilter = source.minFilter;\n\t\n\t    \t\tthis.anisotropy = source.anisotropy;\n\t\n\t    \t\tthis.format = source.format;\n\t    \t\tthis.type = source.type;\n\t\n\t    \t\tthis.offset.copy( source.offset );\n\t    \t\tthis.repeat.copy( source.repeat );\n\t\n\t    \t\tthis.generateMipmaps = source.generateMipmaps;\n\t    \t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t    \t\tthis.flipY = source.flipY;\n\t    \t\tthis.unpackAlignment = source.unpackAlignment;\n\t    \t\tthis.encoding = source.encoding;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\t\n\t    \t\t\treturn meta.textures[ this.uuid ];\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getDataURL( image ) {\n\t\n\t    \t\t\tvar canvas;\n\t\n\t    \t\t\tif ( image.toDataURL !== undefined ) {\n\t\n\t    \t\t\t\tcanvas = image;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\t\t\tcanvas.width = image.width;\n\t    \t\t\t\tcanvas.height = image.height;\n\t\n\t    \t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\t\n\t    \t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\treturn canvas.toDataURL( 'image/png' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar output = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Texture',\n\t    \t\t\t\tgenerator: 'Texture.toJSON'\n\t    \t\t\t},\n\t\n\t    \t\t\tuuid: this.uuid,\n\t    \t\t\tname: this.name,\n\t\n\t    \t\t\tmapping: this.mapping,\n\t\n\t    \t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t    \t\t\toffset: [ this.offset.x, this.offset.y ],\n\t    \t\t\twrap: [ this.wrapS, this.wrapT ],\n\t\n\t    \t\t\tminFilter: this.minFilter,\n\t    \t\t\tmagFilter: this.magFilter,\n\t    \t\t\tanisotropy: this.anisotropy,\n\t\n\t    \t\t\tflipY: this.flipY\n\t    \t\t};\n\t\n\t    \t\tif ( this.image !== undefined ) {\n\t\n\t    \t\t\t// TODO: Move to THREE.Image\n\t\n\t    \t\t\tvar image = this.image;\n\t\n\t    \t\t\tif ( image.uuid === undefined ) {\n\t\n\t    \t\t\t\timage.uuid = exports.Math.generateUUID(); // UGH\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\t\n\t    \t\t\t\tmeta.images[ image.uuid ] = {\n\t    \t\t\t\t\tuuid: image.uuid,\n\t    \t\t\t\t\turl: getDataURL( image )\n\t    \t\t\t\t};\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\toutput.image = image.uuid;\n\t\n\t    \t\t}\n\t\n\t    \t\tmeta.textures[ this.uuid ] = output;\n\t\n\t    \t\treturn output;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t},\n\t\n\t    \ttransformUv: function ( uv ) {\n\t\n\t    \t\tif ( this.mapping !== UVMapping )  return;\n\t\n\t    \t\tuv.multiply( this.repeat );\n\t    \t\tuv.add( this.offset );\n\t\n\t    \t\tif ( uv.x < 0 || uv.x > 1 ) {\n\t\n\t    \t\t\tswitch ( this.wrapS ) {\n\t\n\t    \t\t\t\tcase RepeatWrapping:\n\t\n\t    \t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase ClampToEdgeWrapping:\n\t\n\t    \t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase MirroredRepeatWrapping:\n\t\n\t    \t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\t\n\t    \t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( uv.y < 0 || uv.y > 1 ) {\n\t\n\t    \t\t\tswitch ( this.wrapT ) {\n\t\n\t    \t\t\t\tcase RepeatWrapping:\n\t\n\t    \t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase ClampToEdgeWrapping:\n\t\n\t    \t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase MirroredRepeatWrapping:\n\t\n\t    \t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\t\n\t    \t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.flipY ) {\n\t\n\t    \t\t\tuv.y = 1 - uv.y;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( Texture.prototype, EventDispatcher.prototype );\n\t\n\t    var count = 0;\n\t    function TextureIdCount() { return count++; };\n\t\n\t    /**\n\t     * @author supereggbert / http://www.paulbrunt.co.uk/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author egraether / http://egraether.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Vector4( x, y, z, w ) {\n\t\n\t    \tthis.x = x || 0;\n\t    \tthis.y = y || 0;\n\t    \tthis.z = z || 0;\n\t    \tthis.w = ( w !== undefined ) ? w : 1;\n\t\n\t    }\n\t\n\t    Vector4.prototype = {\n\t\n\t    \tconstructor: Vector4,\n\t\n\t    \tisVector4: true,\n\t\n\t    \tset: function ( x, y, z, w ) {\n\t\n\t    \t\tthis.x = x;\n\t    \t\tthis.y = y;\n\t    \t\tthis.z = z;\n\t    \t\tthis.w = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.x = scalar;\n\t    \t\tthis.y = scalar;\n\t    \t\tthis.z = scalar;\n\t    \t\tthis.w = scalar;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( x ) {\n\t\n\t    \t\tthis.x = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( y ) {\n\t\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( z ) {\n\t\n\t    \t\tthis.z = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetW: function ( w ) {\n\t\n\t    \t\tthis.w = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponent: function ( index, value ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: this.x = value; break;\n\t    \t\t\tcase 1: this.y = value; break;\n\t    \t\t\tcase 2: this.z = value; break;\n\t    \t\t\tcase 3: this.w = value; break;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetComponent: function ( index ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: return this.x;\n\t    \t\t\tcase 1: return this.y;\n\t    \t\t\tcase 2: return this.z;\n\t    \t\t\tcase 3: return this.w;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( v ) {\n\t\n\t    \t\tthis.x = v.x;\n\t    \t\tthis.y = v.y;\n\t    \t\tthis.z = v.z;\n\t    \t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t    \t\t\treturn this.addVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x += v.x;\n\t    \t\tthis.y += v.y;\n\t    \t\tthis.z += v.z;\n\t    \t\tthis.w += v.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.x += s;\n\t    \t\tthis.y += s;\n\t    \t\tthis.z += s;\n\t    \t\tthis.w += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x + b.x;\n\t    \t\tthis.y = a.y + b.y;\n\t    \t\tthis.z = a.z + b.z;\n\t    \t\tthis.w = a.w + b.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScaledVector: function ( v, s ) {\n\t\n\t    \t\tthis.x += v.x * s;\n\t    \t\tthis.y += v.y * s;\n\t    \t\tthis.z += v.z * s;\n\t    \t\tthis.w += v.w * s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t    \t\t\treturn this.subVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x -= v.x;\n\t    \t\tthis.y -= v.y;\n\t    \t\tthis.z -= v.z;\n\t    \t\tthis.w -= v.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubScalar: function ( s ) {\n\t\n\t    \t\tthis.x -= s;\n\t    \t\tthis.y -= s;\n\t    \t\tthis.z -= s;\n\t    \t\tthis.w -= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x - b.x;\n\t    \t\tthis.y = a.y - b.y;\n\t    \t\tthis.z = a.z - b.z;\n\t    \t\tthis.w = a.w - b.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( scalar ) {\n\t\n\t    \t\tif ( isFinite( scalar ) ) {\n\t\n\t    \t\t\tthis.x *= scalar;\n\t    \t\t\tthis.y *= scalar;\n\t    \t\t\tthis.z *= scalar;\n\t    \t\t\tthis.w *= scalar;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.x = 0;\n\t    \t\t\tthis.y = 0;\n\t    \t\t\tthis.z = 0;\n\t    \t\t\tthis.w = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( m ) {\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t    \t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivideScalar: function ( scalar ) {\n\t\n\t    \t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t    \t},\n\t\n\t    \tsetAxisAngleFromQuaternion: function ( q ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\n\t    \t\t// q is assumed to be normalized\n\t\n\t    \t\tthis.w = 2 * Math.acos( q.w );\n\t\n\t    \t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\t\n\t    \t\tif ( s < 0.0001 ) {\n\t\n\t    \t\t\t this.x = 1;\n\t    \t\t\t this.y = 0;\n\t    \t\t\t this.z = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t this.x = q.x / s;\n\t    \t\t\t this.y = q.y / s;\n\t    \t\t\t this.z = q.z / s;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetAxisAngleFromRotationMatrix: function ( m ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tvar angle, x, y, z,\t\t// variables for result\n\t    \t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t    \t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\t\n\t    \t\t\tte = m.elements,\n\t\n\t    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\t\n\t    \t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t    \t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t    \t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\t\n\t    \t\t\t// singularity found\n\t    \t\t\t// first check for identity matrix which must have +1 for all terms\n\t    \t\t\t// in leading diagonal and zero in other terms\n\t\n\t    \t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t    \t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t    \t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t    \t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\t\n\t    \t\t\t\t// this singularity is identity matrix so angle = 0\n\t\n\t    \t\t\t\tthis.set( 1, 0, 0, 0 );\n\t\n\t    \t\t\t\treturn this; // zero angle, arbitrary axis\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// otherwise this singularity is angle = 180\n\t\n\t    \t\t\tangle = Math.PI;\n\t\n\t    \t\t\tvar xx = ( m11 + 1 ) / 2;\n\t    \t\t\tvar yy = ( m22 + 1 ) / 2;\n\t    \t\t\tvar zz = ( m33 + 1 ) / 2;\n\t    \t\t\tvar xy = ( m12 + m21 ) / 4;\n\t    \t\t\tvar xz = ( m13 + m31 ) / 4;\n\t    \t\t\tvar yz = ( m23 + m32 ) / 4;\n\t\n\t    \t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\t\n\t    \t\t\t\t// m11 is the largest diagonal term\n\t\n\t    \t\t\t\tif ( xx < epsilon ) {\n\t\n\t    \t\t\t\t\tx = 0;\n\t    \t\t\t\t\ty = 0.707106781;\n\t    \t\t\t\t\tz = 0.707106781;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tx = Math.sqrt( xx );\n\t    \t\t\t\t\ty = xy / x;\n\t    \t\t\t\t\tz = xz / x;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( yy > zz ) {\n\t\n\t    \t\t\t\t// m22 is the largest diagonal term\n\t\n\t    \t\t\t\tif ( yy < epsilon ) {\n\t\n\t    \t\t\t\t\tx = 0.707106781;\n\t    \t\t\t\t\ty = 0;\n\t    \t\t\t\t\tz = 0.707106781;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\ty = Math.sqrt( yy );\n\t    \t\t\t\t\tx = xy / y;\n\t    \t\t\t\t\tz = yz / y;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\n\t    \t\t\t\tif ( zz < epsilon ) {\n\t\n\t    \t\t\t\t\tx = 0.707106781;\n\t    \t\t\t\t\ty = 0.707106781;\n\t    \t\t\t\t\tz = 0;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tz = Math.sqrt( zz );\n\t    \t\t\t\t\tx = xz / z;\n\t    \t\t\t\t\ty = yz / z;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.set( x, y, z, angle );\n\t\n\t    \t\t\treturn this; // return 180 deg rotation\n\t\n\t    \t\t}\n\t\n\t    \t\t// as we have reached here there are no singularities so we can handle normally\n\t\n\t    \t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t    \t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t    \t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\t\n\t    \t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\t\n\t    \t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t    \t\t// caught by singularity test above, but I've left it in just in case\n\t\n\t    \t\tthis.x = ( m32 - m23 ) / s;\n\t    \t\tthis.y = ( m13 - m31 ) / s;\n\t    \t\tthis.z = ( m21 - m12 ) / s;\n\t    \t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmin: function ( v ) {\n\t\n\t    \t\tthis.x = Math.min( this.x, v.x );\n\t    \t\tthis.y = Math.min( this.y, v.y );\n\t    \t\tthis.z = Math.min( this.z, v.z );\n\t    \t\tthis.w = Math.min( this.w, v.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmax: function ( v ) {\n\t\n\t    \t\tthis.x = Math.max( this.x, v.x );\n\t    \t\tthis.y = Math.max( this.y, v.y );\n\t    \t\tthis.z = Math.max( this.z, v.z );\n\t    \t\tthis.w = Math.max( this.w, v.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclamp: function ( min, max ) {\n\t\n\t    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t    \t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclampScalar: function () {\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t    \t\t\tif ( min === undefined ) {\n\t\n\t    \t\t\t\tmin = new Vector4();\n\t    \t\t\t\tmax = new Vector4();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t    \t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\t\n\t    \t\t\treturn this.clamp( min, max );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tfloor: function () {\n\t\n\t    \t\tthis.x = Math.floor( this.x );\n\t    \t\tthis.y = Math.floor( this.y );\n\t    \t\tthis.z = Math.floor( this.z );\n\t    \t\tthis.w = Math.floor( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tceil: function () {\n\t\n\t    \t\tthis.x = Math.ceil( this.x );\n\t    \t\tthis.y = Math.ceil( this.y );\n\t    \t\tthis.z = Math.ceil( this.z );\n\t    \t\tthis.w = Math.ceil( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tround: function () {\n\t\n\t    \t\tthis.x = Math.round( this.x );\n\t    \t\tthis.y = Math.round( this.y );\n\t    \t\tthis.z = Math.round( this.z );\n\t    \t\tthis.w = Math.round( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \troundToZero: function () {\n\t\n\t    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t    \t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.x = - this.x;\n\t    \t\tthis.y = - this.y;\n\t    \t\tthis.z = - this.z;\n\t    \t\tthis.w = - this.w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\t\n\t    \t},\n\t\n\t    \tlengthManhattan: function () {\n\t\n\t    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\treturn this.divideScalar( this.length() );\n\t\n\t    \t},\n\t\n\t    \tsetLength: function ( length ) {\n\t\n\t    \t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( v, alpha ) {\n\t\n\t    \t\tthis.x += ( v.x - this.x ) * alpha;\n\t    \t\tthis.y += ( v.y - this.y ) * alpha;\n\t    \t\tthis.z += ( v.z - this.z ) * alpha;\n\t    \t\tthis.w += ( v.w - this.w ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t    \t},\n\t\n\t    \tequals: function ( v ) {\n\t\n\t    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.x = array[ offset ];\n\t    \t\tthis.y = array[ offset + 1 ];\n\t    \t\tthis.z = array[ offset + 2 ];\n\t    \t\tthis.w = array[ offset + 3 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.x;\n\t    \t\tarray[ offset + 1 ] = this.y;\n\t    \t\tarray[ offset + 2 ] = this.z;\n\t    \t\tarray[ offset + 3 ] = this.w;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tindex = index * attribute.itemSize + offset;\n\t\n\t    \t\tthis.x = attribute.array[ index ];\n\t    \t\tthis.y = attribute.array[ index + 1 ];\n\t    \t\tthis.z = attribute.array[ index + 2 ];\n\t    \t\tthis.w = attribute.array[ index + 3 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author szimek / https://github.com/szimek/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author Marius Kintel / https://github.com/kintel\n\t     */\n\t\n\t    /*\n\t     In options, we can specify:\n\t     * Texture parameters for an auto-generated target texture\n\t     * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t    */\n\t    function WebGLRenderTarget( width, height, options ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.width = width;\n\t    \tthis.height = height;\n\t\n\t    \tthis.scissor = new Vector4( 0, 0, width, height );\n\t    \tthis.scissorTest = false;\n\t\n\t    \tthis.viewport = new Vector4( 0, 0, width, height );\n\t\n\t    \toptions = options || {};\n\t\n\t    \tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\t\n\t    \tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\n\t    \tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t    \tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t    \tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\n\t    }\n\t\n\t    Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisWebGLRenderTarget: true,\n\t\n\t    \tsetSize: function ( width, height ) {\n\t\n\t    \t\tif ( this.width !== width || this.height !== height ) {\n\t\n\t    \t\t\tthis.width = width;\n\t    \t\t\tthis.height = height;\n\t\n\t    \t\t\tthis.dispose();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.viewport.set( 0, 0, width, height );\n\t    \t\tthis.scissor.set( 0, 0, width, height );\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.width = source.width;\n\t    \t\tthis.height = source.height;\n\t\n\t    \t\tthis.viewport.copy( source.viewport );\n\t\n\t    \t\tthis.texture = source.texture.clone();\n\t\n\t    \t\tthis.depthBuffer = source.depthBuffer;\n\t    \t\tthis.stencilBuffer = source.stencilBuffer;\n\t    \t\tthis.depthTexture = source.depthTexture;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com\n\t     */\n\t\n\t    function WebGLRenderTargetCube( width, height, options ) {\n\t\n\t    \tWebGLRenderTarget.call( this, width, height, options );\n\t\n\t    \tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\t    \tthis.activeMipMapLevel = 0;\n\t\n\t    }\n\t\n\t    WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n\t    WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\t\n\t    WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Quaternion( x, y, z, w ) {\n\t\n\t    \tthis._x = x || 0;\n\t    \tthis._y = y || 0;\n\t    \tthis._z = z || 0;\n\t    \tthis._w = ( w !== undefined ) ? w : 1;\n\t\n\t    }\n\t\n\t    Quaternion.prototype = {\n\t\n\t    \tconstructor: Quaternion,\n\t\n\t    \tget x () {\n\t\n\t    \t\treturn this._x;\n\t\n\t    \t},\n\t\n\t    \tset x ( value ) {\n\t\n\t    \t\tthis._x = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget y () {\n\t\n\t    \t\treturn this._y;\n\t\n\t    \t},\n\t\n\t    \tset y ( value ) {\n\t\n\t    \t\tthis._y = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget z () {\n\t\n\t    \t\treturn this._z;\n\t\n\t    \t},\n\t\n\t    \tset z ( value ) {\n\t\n\t    \t\tthis._z = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget w () {\n\t\n\t    \t\treturn this._w;\n\t\n\t    \t},\n\t\n\t    \tset w ( value ) {\n\t\n\t    \t\tthis._w = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tset: function ( x, y, z, w ) {\n\t\n\t    \t\tthis._x = x;\n\t    \t\tthis._y = y;\n\t    \t\tthis._z = z;\n\t    \t\tthis._w = w;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( quaternion ) {\n\t\n\t    \t\tthis._x = quaternion.x;\n\t    \t\tthis._y = quaternion.y;\n\t    \t\tthis._z = quaternion.z;\n\t    \t\tthis._w = quaternion.w;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromEuler: function ( euler, update ) {\n\t\n\t    \t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t    \t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\t\n\t    \t\t}\n\t\n\t    \t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t    \t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t    \t\t//\tcontent/SpinCalc.m\n\t\n\t    \t\tvar c1 = Math.cos( euler._x / 2 );\n\t    \t\tvar c2 = Math.cos( euler._y / 2 );\n\t    \t\tvar c3 = Math.cos( euler._z / 2 );\n\t    \t\tvar s1 = Math.sin( euler._x / 2 );\n\t    \t\tvar s2 = Math.sin( euler._y / 2 );\n\t    \t\tvar s3 = Math.sin( euler._z / 2 );\n\t\n\t    \t\tvar order = euler.order;\n\t\n\t    \t\tif ( order === 'XYZ' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'YXZ' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'ZXY' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'ZYX' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'YZX' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    \t\t} else if ( order === 'XZY' ) {\n\t\n\t    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( update !== false ) this.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromAxisAngle: function ( axis, angle ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\n\t    \t\t// assumes axis is normalized\n\t\n\t    \t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\t\n\t    \t\tthis._x = axis.x * s;\n\t    \t\tthis._y = axis.y * s;\n\t    \t\tthis._z = axis.z * s;\n\t    \t\tthis._w = Math.cos( halfAngle );\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromRotationMatrix: function ( m ) {\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tvar te = m.elements,\n\t\n\t    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\t\n\t    \t\t\ttrace = m11 + m22 + m33,\n\t    \t\t\ts;\n\t\n\t    \t\tif ( trace > 0 ) {\n\t\n\t    \t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\t\n\t    \t\t\tthis._w = 0.25 / s;\n\t    \t\t\tthis._x = ( m32 - m23 ) * s;\n\t    \t\t\tthis._y = ( m13 - m31 ) * s;\n\t    \t\t\tthis._z = ( m21 - m12 ) * s;\n\t\n\t    \t\t} else if ( m11 > m22 && m11 > m33 ) {\n\t\n\t    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\t\n\t    \t\t\tthis._w = ( m32 - m23 ) / s;\n\t    \t\t\tthis._x = 0.25 * s;\n\t    \t\t\tthis._y = ( m12 + m21 ) / s;\n\t    \t\t\tthis._z = ( m13 + m31 ) / s;\n\t\n\t    \t\t} else if ( m22 > m33 ) {\n\t\n\t    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\t\n\t    \t\t\tthis._w = ( m13 - m31 ) / s;\n\t    \t\t\tthis._x = ( m12 + m21 ) / s;\n\t    \t\t\tthis._y = 0.25 * s;\n\t    \t\t\tthis._z = ( m23 + m32 ) / s;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\t\n\t    \t\t\tthis._w = ( m21 - m12 ) / s;\n\t    \t\t\tthis._x = ( m13 + m31 ) / s;\n\t    \t\t\tthis._y = ( m23 + m32 ) / s;\n\t    \t\t\tthis._z = 0.25 * s;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromUnitVectors: function () {\n\t\n\t    \t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\t\n\t    \t\t// assumes direction vectors vFrom and vTo are normalized\n\t\n\t    \t\tvar v1, r;\n\t\n\t    \t\tvar EPS = 0.000001;\n\t\n\t    \t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\tr = vFrom.dot( vTo ) + 1;\n\t\n\t    \t\t\tif ( r < EPS ) {\n\t\n\t    \t\t\t\tr = 0;\n\t\n\t    \t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\t\n\t    \t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tv1.crossVectors( vFrom, vTo );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis._x = v1.x;\n\t    \t\t\tthis._y = v1.y;\n\t    \t\t\tthis._z = v1.z;\n\t    \t\t\tthis._w = r;\n\t\n\t    \t\t\treturn this.normalize();\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tinverse: function () {\n\t\n\t    \t\treturn this.conjugate().normalize();\n\t\n\t    \t},\n\t\n\t    \tconjugate: function () {\n\t\n\t    \t\tthis._x *= - 1;\n\t    \t\tthis._y *= - 1;\n\t    \t\tthis._z *= - 1;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\tvar l = this.length();\n\t\n\t    \t\tif ( l === 0 ) {\n\t\n\t    \t\t\tthis._x = 0;\n\t    \t\t\tthis._y = 0;\n\t    \t\t\tthis._z = 0;\n\t    \t\t\tthis._w = 1;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tl = 1 / l;\n\t\n\t    \t\t\tthis._x = this._x * l;\n\t    \t\t\tthis._y = this._y * l;\n\t    \t\t\tthis._z = this._z * l;\n\t    \t\t\tthis._w = this._w * l;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( q, p ) {\n\t\n\t    \t\tif ( p !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t    \t\t\treturn this.multiplyQuaternions( q, p );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.multiplyQuaternions( this, q );\n\t\n\t    \t},\n\t\n\t    \tpremultiply: function ( q ) {\n\t\n\t    \t\treturn this.multiplyQuaternions( q, this );\n\t\n\t    \t},\n\t\n\t    \tmultiplyQuaternions: function ( a, b ) {\n\t\n\t    \t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\n\t    \t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t    \t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\t\n\t    \t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t    \t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t    \t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t    \t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tslerp: function ( qb, t ) {\n\t\n\t    \t\tif ( t === 0 ) return this;\n\t    \t\tif ( t === 1 ) return this.copy( qb );\n\t\n\t    \t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\t\n\t    \t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\t\n\t    \t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\t\n\t    \t\tif ( cosHalfTheta < 0 ) {\n\t\n\t    \t\t\tthis._w = - qb._w;\n\t    \t\t\tthis._x = - qb._x;\n\t    \t\t\tthis._y = - qb._y;\n\t    \t\t\tthis._z = - qb._z;\n\t\n\t    \t\t\tcosHalfTheta = - cosHalfTheta;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.copy( qb );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( cosHalfTheta >= 1.0 ) {\n\t\n\t    \t\t\tthis._w = w;\n\t    \t\t\tthis._x = x;\n\t    \t\t\tthis._y = y;\n\t    \t\t\tthis._z = z;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\t\n\t    \t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\t\n\t    \t\t\tthis._w = 0.5 * ( w + this._w );\n\t    \t\t\tthis._x = 0.5 * ( x + this._x );\n\t    \t\t\tthis._y = 0.5 * ( y + this._y );\n\t    \t\t\tthis._z = 0.5 * ( z + this._z );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t    \t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t    \t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\t\n\t    \t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t    \t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t    \t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t    \t\tthis._z = ( z * ratioA + this._z * ratioB );\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( quaternion ) {\n\t\n\t    \t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis._x = array[ offset ];\n\t    \t\tthis._y = array[ offset + 1 ];\n\t    \t\tthis._z = array[ offset + 2 ];\n\t    \t\tthis._w = array[ offset + 3 ];\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this._x;\n\t    \t\tarray[ offset + 1 ] = this._y;\n\t    \t\tarray[ offset + 2 ] = this._z;\n\t    \t\tarray[ offset + 3 ] = this._w;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tonChange: function ( callback ) {\n\t\n\t    \t\tthis.onChangeCallback = callback;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tonChangeCallback: function () {}\n\t\n\t    };\n\t\n\t    Object.assign( Quaternion, {\n\t\n\t    \tslerp: function( qa, qb, qm, t ) {\n\t\n\t    \t\treturn qm.copy( qa ).slerp( qb, t );\n\t\n\t    \t},\n\t\n\t    \tslerpFlat: function(\n\t    \t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\t\n\t    \t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\n\t    \t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t    \t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t    \t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t    \t\t\tw0 = src0[ srcOffset0 + 3 ],\n\t\n\t    \t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t    \t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t    \t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t    \t\t\tw1 = src1[ srcOffset1 + 3 ];\n\t\n\t    \t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\t\n\t    \t\t\tvar s = 1 - t,\n\t\n\t    \t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\n\t    \t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t    \t\t\t\tsqrSin = 1 - cos * cos;\n\t\n\t    \t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t    \t\t\tif ( sqrSin > Number.EPSILON ) {\n\t\n\t    \t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t    \t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\t\n\t    \t\t\t\ts = Math.sin( s * len ) / sin;\n\t    \t\t\t\tt = Math.sin( t * len ) / sin;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar tDir = t * dir;\n\t\n\t    \t\t\tx0 = x0 * s + x1 * tDir;\n\t    \t\t\ty0 = y0 * s + y1 * tDir;\n\t    \t\t\tz0 = z0 * s + z1 * tDir;\n\t    \t\t\tw0 = w0 * s + w1 * tDir;\n\t\n\t    \t\t\t// Normalize in case we just did a lerp:\n\t    \t\t\tif ( s === 1 - t ) {\n\t\n\t    \t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\t\n\t    \t\t\t\tx0 *= f;\n\t    \t\t\t\ty0 *= f;\n\t    \t\t\t\tz0 *= f;\n\t    \t\t\t\tw0 *= f;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tdst[ dstOffset ] = x0;\n\t    \t\tdst[ dstOffset + 1 ] = y0;\n\t    \t\tdst[ dstOffset + 2 ] = z0;\n\t    \t\tdst[ dstOffset + 3 ] = w0;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author *kile / http://kile.stravaganza.org/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author egraether / http://egraether.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Vector3( x, y, z ) {\n\t\n\t    \tthis.x = x || 0;\n\t    \tthis.y = y || 0;\n\t    \tthis.z = z || 0;\n\t\n\t    }\n\t\n\t    Vector3.prototype = {\n\t\n\t    \tconstructor: Vector3,\n\t\n\t    \tisVector3: true,\n\t\n\t    \tset: function ( x, y, z ) {\n\t\n\t    \t\tthis.x = x;\n\t    \t\tthis.y = y;\n\t    \t\tthis.z = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.x = scalar;\n\t    \t\tthis.y = scalar;\n\t    \t\tthis.z = scalar;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( x ) {\n\t\n\t    \t\tthis.x = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( y ) {\n\t\n\t    \t\tthis.y = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( z ) {\n\t\n\t    \t\tthis.z = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponent: function ( index, value ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: this.x = value; break;\n\t    \t\t\tcase 1: this.y = value; break;\n\t    \t\t\tcase 2: this.z = value; break;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetComponent: function ( index ) {\n\t\n\t    \t\tswitch ( index ) {\n\t\n\t    \t\t\tcase 0: return this.x;\n\t    \t\t\tcase 1: return this.y;\n\t    \t\t\tcase 2: return this.z;\n\t    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.x, this.y, this.z );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( v ) {\n\t\n\t    \t\tthis.x = v.x;\n\t    \t\tthis.y = v.y;\n\t    \t\tthis.z = v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t    \t\t\treturn this.addVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x += v.x;\n\t    \t\tthis.y += v.y;\n\t    \t\tthis.z += v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.x += s;\n\t    \t\tthis.y += s;\n\t    \t\tthis.z += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x + b.x;\n\t    \t\tthis.y = a.y + b.y;\n\t    \t\tthis.z = a.z + b.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScaledVector: function ( v, s ) {\n\t\n\t    \t\tthis.x += v.x * s;\n\t    \t\tthis.y += v.y * s;\n\t    \t\tthis.z += v.z * s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t    \t\t\treturn this.subVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x -= v.x;\n\t    \t\tthis.y -= v.y;\n\t    \t\tthis.z -= v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubScalar: function ( s ) {\n\t\n\t    \t\tthis.x -= s;\n\t    \t\tthis.y -= s;\n\t    \t\tthis.z -= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsubVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x - b.x;\n\t    \t\tthis.y = a.y - b.y;\n\t    \t\tthis.z = a.z - b.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t    \t\t\treturn this.multiplyVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.x *= v.x;\n\t    \t\tthis.y *= v.y;\n\t    \t\tthis.z *= v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( scalar ) {\n\t\n\t    \t\tif ( isFinite( scalar ) ) {\n\t\n\t    \t\t\tthis.x *= scalar;\n\t    \t\t\tthis.y *= scalar;\n\t    \t\t\tthis.z *= scalar;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.x = 0;\n\t    \t\t\tthis.y = 0;\n\t    \t\t\tthis.z = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyVectors: function ( a, b ) {\n\t\n\t    \t\tthis.x = a.x * b.x;\n\t    \t\tthis.y = a.y * b.y;\n\t    \t\tthis.z = a.z * b.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyEuler: function () {\n\t\n\t    \t\tvar quaternion;\n\t\n\t    \t\treturn function applyEuler( euler ) {\n\t\n\t    \t\t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t    \t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\t\n\t    \t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyAxisAngle: function () {\n\t\n\t    \t\tvar quaternion;\n\t\n\t    \t\treturn function applyAxisAngle( axis, angle ) {\n\t\n\t    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\t\n\t    \t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyMatrix3: function ( m ) {\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t    \t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t    \t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( m ) {\n\t\n\t    \t\t// input: THREE.Matrix4 affine matrix\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n\t    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n\t    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyProjection: function ( m ) {\n\t\n\t    \t\t// input: THREE.Matrix4 projection matrix\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t    \t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\t\n\t    \t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n\t    \t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n\t    \t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyQuaternion: function ( q ) {\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\t\n\t    \t\t// calculate quat * vector\n\t\n\t    \t\tvar ix =  qw * x + qy * z - qz * y;\n\t    \t\tvar iy =  qw * y + qz * x - qx * z;\n\t    \t\tvar iz =  qw * z + qx * y - qy * x;\n\t    \t\tvar iw = - qx * x - qy * y - qz * z;\n\t\n\t    \t\t// calculate result * inverse quat\n\t\n\t    \t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t    \t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t    \t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tproject: function () {\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\treturn function project( camera ) {\n\t\n\t    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t    \t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t    \t\t\treturn this.applyProjection( matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tunproject: function () {\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\treturn function unproject( camera ) {\n\t\n\t    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t    \t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t    \t\t\treturn this.applyProjection( matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttransformDirection: function ( m ) {\n\t\n\t    \t\t// input: THREE.Matrix4 affine matrix\n\t    \t\t// vector interpreted as a direction\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t    \t\tvar e = m.elements;\n\t\n\t    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\t\n\t    \t\treturn this.normalize();\n\t\n\t    \t},\n\t\n\t    \tdivide: function ( v ) {\n\t\n\t    \t\tthis.x /= v.x;\n\t    \t\tthis.y /= v.y;\n\t    \t\tthis.z /= v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdivideScalar: function ( scalar ) {\n\t\n\t    \t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t    \t},\n\t\n\t    \tmin: function ( v ) {\n\t\n\t    \t\tthis.x = Math.min( this.x, v.x );\n\t    \t\tthis.y = Math.min( this.y, v.y );\n\t    \t\tthis.z = Math.min( this.z, v.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmax: function ( v ) {\n\t\n\t    \t\tthis.x = Math.max( this.x, v.x );\n\t    \t\tthis.y = Math.max( this.y, v.y );\n\t    \t\tthis.z = Math.max( this.z, v.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclamp: function ( min, max ) {\n\t\n\t    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclampScalar: function () {\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t    \t\t\tif ( min === undefined ) {\n\t\n\t    \t\t\t\tmin = new Vector3();\n\t    \t\t\t\tmax = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmin.set( minVal, minVal, minVal );\n\t    \t\t\tmax.set( maxVal, maxVal, maxVal );\n\t\n\t    \t\t\treturn this.clamp( min, max );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclampLength: function ( min, max ) {\n\t\n\t    \t\tvar length = this.length();\n\t\n\t    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\t\n\t    \t},\n\t\n\t    \tfloor: function () {\n\t\n\t    \t\tthis.x = Math.floor( this.x );\n\t    \t\tthis.y = Math.floor( this.y );\n\t    \t\tthis.z = Math.floor( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tceil: function () {\n\t\n\t    \t\tthis.x = Math.ceil( this.x );\n\t    \t\tthis.y = Math.ceil( this.y );\n\t    \t\tthis.z = Math.ceil( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tround: function () {\n\t\n\t    \t\tthis.x = Math.round( this.x );\n\t    \t\tthis.y = Math.round( this.y );\n\t    \t\tthis.z = Math.round( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \troundToZero: function () {\n\t\n\t    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.x = - this.x;\n\t    \t\tthis.y = - this.y;\n\t    \t\tthis.z = - this.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdot: function ( v ) {\n\t\n\t    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\n\t    \t},\n\t\n\t    \tlengthSq: function () {\n\t\n\t    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\n\t    \t},\n\t\n\t    \tlength: function () {\n\t\n\t    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\t\n\t    \t},\n\t\n\t    \tlengthManhattan: function () {\n\t\n\t    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\treturn this.divideScalar( this.length() );\n\t\n\t    \t},\n\t\n\t    \tsetLength: function ( length ) {\n\t\n\t    \t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( v, alpha ) {\n\t\n\t    \t\tthis.x += ( v.x - this.x ) * alpha;\n\t    \t\tthis.y += ( v.y - this.y ) * alpha;\n\t    \t\tthis.z += ( v.z - this.z ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t    \t},\n\t\n\t    \tcross: function ( v, w ) {\n\t\n\t    \t\tif ( w !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t    \t\t\treturn this.crossVectors( v, w );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar x = this.x, y = this.y, z = this.z;\n\t\n\t    \t\tthis.x = y * v.z - z * v.y;\n\t    \t\tthis.y = z * v.x - x * v.z;\n\t    \t\tthis.z = x * v.y - y * v.x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcrossVectors: function ( a, b ) {\n\t\n\t    \t\tvar ax = a.x, ay = a.y, az = a.z;\n\t    \t\tvar bx = b.x, by = b.y, bz = b.z;\n\t\n\t    \t\tthis.x = ay * bz - az * by;\n\t    \t\tthis.y = az * bx - ax * bz;\n\t    \t\tthis.z = ax * by - ay * bx;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tprojectOnVector: function ( vector ) {\n\t\n\t    \t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\t\n\t    \t\treturn this.copy( vector ).multiplyScalar( scalar );\n\t\n\t    \t},\n\t\n\t    \tprojectOnPlane: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function projectOnPlane( planeNormal ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\t\n\t    \t\t\treturn this.sub( v1 );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \treflect: function () {\n\t\n\t    \t\t// reflect incident vector off plane orthogonal to normal\n\t    \t\t// normal is assumed to have unit length\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function reflect( normal ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tangleTo: function ( v ) {\n\t\n\t    \t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\t\n\t    \t\t// clamp, to handle numerical problems\n\t\n\t    \t\treturn Math.acos( exports.Math.clamp( theta, - 1, 1 ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceTo: function ( v ) {\n\t\n\t    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceToSquared: function ( v ) {\n\t\n\t    \t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\t\n\t    \t\treturn dx * dx + dy * dy + dz * dz;\n\t\n\t    \t},\n\t\n\t    \tdistanceToManhattan: function ( v ) {\n\t\n\t    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\t\n\t    \t},\n\t\n\t    \tsetFromSpherical: function( s ) {\n\t\n\t    \t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\t\n\t    \t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t    \t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t    \t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrixPosition: function ( m ) {\n\t\n\t    \t\treturn this.setFromMatrixColumn( m, 3 );\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrixScale: function ( m ) {\n\t\n\t    \t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t    \t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t    \t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\t\n\t    \t\tthis.x = sx;\n\t    \t\tthis.y = sy;\n\t    \t\tthis.z = sz;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrixColumn: function ( m, index ) {\n\t\n\t    \t\tif ( typeof m === 'number' ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n\t    \t\t\tvar temp = m\n\t    \t\t\tm = index;\n\t    \t\t\tindex = temp;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.fromArray( m.elements, index * 4 );\n\t\n\t    \t},\n\t\n\t    \tequals: function ( v ) {\n\t\n\t    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.x = array[ offset ];\n\t    \t\tthis.y = array[ offset + 1 ];\n\t    \t\tthis.z = array[ offset + 2 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.x;\n\t    \t\tarray[ offset + 1 ] = this.y;\n\t    \t\tarray[ offset + 2 ] = this.z;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tindex = index * attribute.itemSize + offset;\n\t\n\t    \t\tthis.x = attribute.array[ index ];\n\t    \t\tthis.y = attribute.array[ index + 1 ];\n\t    \t\tthis.z = attribute.array[ index + 2 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author supereggbert / http://www.paulbrunt.co.uk/\n\t     * @author philogb / http://blog.thejit.org/\n\t     * @author jordi_ros / http://plattsoft.com\n\t     * @author D1plo1d / http://github.com/D1plo1d\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author timknip / http://www.floorplanner.com/\n\t     * @author bhouston / http://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Matrix4() {\n\t\n\t    \tthis.elements = new Float32Array( [\n\t\n\t    \t\t1, 0, 0, 0,\n\t    \t\t0, 1, 0, 0,\n\t    \t\t0, 0, 1, 0,\n\t    \t\t0, 0, 0, 1\n\t\n\t    \t] );\n\t\n\t    \tif ( arguments.length > 0 ) {\n\t\n\t    \t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Matrix4.prototype = {\n\t\n\t    \tconstructor: Matrix4,\n\t\n\t    \tisMatrix4: true,\n\t\n\t    \tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t    \t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t    \t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t    \t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tidentity: function () {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0, 0, 0,\n\t    \t\t\t0, 1, 0, 0,\n\t    \t\t\t0, 0, 1, 0,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new Matrix4().fromArray( this.elements );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( m ) {\n\t\n\t    \t\tthis.elements.set( m.elements );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyPosition: function ( m ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar me = m.elements;\n\t\n\t    \t\tte[ 12 ] = me[ 12 ];\n\t    \t\tte[ 13 ] = me[ 13 ];\n\t    \t\tte[ 14 ] = me[ 14 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \textractBasis: function ( xAxis, yAxis, zAxis ) {\n\t\n\t    \t\txAxis.setFromMatrixColumn( this, 0 );\n\t    \t\tyAxis.setFromMatrixColumn( this, 1 );\n\t    \t\tzAxis.setFromMatrixColumn( this, 2 );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\t\n\t    \t\tthis.set(\n\t    \t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t    \t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t    \t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t    \t\t\t0,       0,       0,       1\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \textractRotation: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function extractRotation( m ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\n\t    \t\t\tvar te = this.elements;\n\t    \t\t\tvar me = m.elements;\n\t\n\t    \t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t    \t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t    \t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\t\n\t    \t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t    \t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t    \t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\n\t    \t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t    \t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t    \t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\n\t    \t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t    \t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t    \t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmakeRotationFromEuler: function ( euler ) {\n\t\n\t    \t\tif ( (euler && euler.isEuler) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t    \t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t    \t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t    \t\tvar e = Math.cos( z ), f = Math.sin( z );\n\t\n\t    \t\tif ( euler.order === 'XYZ' ) {\n\t\n\t    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = - c * f;\n\t    \t\t\tte[ 8 ] = d;\n\t\n\t    \t\t\tte[ 1 ] = af + be * d;\n\t    \t\t\tte[ 5 ] = ae - bf * d;\n\t    \t\t\tte[ 9 ] = - b * c;\n\t\n\t    \t\t\tte[ 2 ] = bf - ae * d;\n\t    \t\t\tte[ 6 ] = be + af * d;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'YXZ' ) {\n\t\n\t    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\t\n\t    \t\t\tte[ 0 ] = ce + df * b;\n\t    \t\t\tte[ 4 ] = de * b - cf;\n\t    \t\t\tte[ 8 ] = a * d;\n\t\n\t    \t\t\tte[ 1 ] = a * f;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = - b;\n\t\n\t    \t\t\tte[ 2 ] = cf * b - de;\n\t    \t\t\tte[ 6 ] = df + ce * b;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'ZXY' ) {\n\t\n\t    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\t\n\t    \t\t\tte[ 0 ] = ce - df * b;\n\t    \t\t\tte[ 4 ] = - a * f;\n\t    \t\t\tte[ 8 ] = de + cf * b;\n\t\n\t    \t\t\tte[ 1 ] = cf + de * b;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = df - ce * b;\n\t\n\t    \t\t\tte[ 2 ] = - a * d;\n\t    \t\t\tte[ 6 ] = b;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'ZYX' ) {\n\t\n\t    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = be * d - af;\n\t    \t\t\tte[ 8 ] = ae * d + bf;\n\t\n\t    \t\t\tte[ 1 ] = c * f;\n\t    \t\t\tte[ 5 ] = bf * d + ae;\n\t    \t\t\tte[ 9 ] = af * d - be;\n\t\n\t    \t\t\tte[ 2 ] = - d;\n\t    \t\t\tte[ 6 ] = b * c;\n\t    \t\t\tte[ 10 ] = a * c;\n\t\n\t    \t\t} else if ( euler.order === 'YZX' ) {\n\t\n\t    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = bd - ac * f;\n\t    \t\t\tte[ 8 ] = bc * f + ad;\n\t\n\t    \t\t\tte[ 1 ] = f;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = - b * e;\n\t\n\t    \t\t\tte[ 2 ] = - d * e;\n\t    \t\t\tte[ 6 ] = ad * f + bc;\n\t    \t\t\tte[ 10 ] = ac - bd * f;\n\t\n\t    \t\t} else if ( euler.order === 'XZY' ) {\n\t\n\t    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\t\n\t    \t\t\tte[ 0 ] = c * e;\n\t    \t\t\tte[ 4 ] = - f;\n\t    \t\t\tte[ 8 ] = d * e;\n\t\n\t    \t\t\tte[ 1 ] = ac * f + bd;\n\t    \t\t\tte[ 5 ] = a * e;\n\t    \t\t\tte[ 9 ] = ad * f - bc;\n\t\n\t    \t\t\tte[ 2 ] = bc * f - ad;\n\t    \t\t\tte[ 6 ] = b * e;\n\t    \t\t\tte[ 10 ] = bd * f + ac;\n\t\n\t    \t\t}\n\t\n\t    \t\t// last column\n\t    \t\tte[ 3 ] = 0;\n\t    \t\tte[ 7 ] = 0;\n\t    \t\tte[ 11 ] = 0;\n\t\n\t    \t\t// bottom row\n\t    \t\tte[ 12 ] = 0;\n\t    \t\tte[ 13 ] = 0;\n\t    \t\tte[ 14 ] = 0;\n\t    \t\tte[ 15 ] = 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationFromQuaternion: function ( q ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n\t    \t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t    \t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t    \t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t    \t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\t\n\t    \t\tte[ 0 ] = 1 - ( yy + zz );\n\t    \t\tte[ 4 ] = xy - wz;\n\t    \t\tte[ 8 ] = xz + wy;\n\t\n\t    \t\tte[ 1 ] = xy + wz;\n\t    \t\tte[ 5 ] = 1 - ( xx + zz );\n\t    \t\tte[ 9 ] = yz - wx;\n\t\n\t    \t\tte[ 2 ] = xz - wy;\n\t    \t\tte[ 6 ] = yz + wx;\n\t    \t\tte[ 10 ] = 1 - ( xx + yy );\n\t\n\t    \t\t// last column\n\t    \t\tte[ 3 ] = 0;\n\t    \t\tte[ 7 ] = 0;\n\t    \t\tte[ 11 ] = 0;\n\t\n\t    \t\t// bottom row\n\t    \t\tte[ 12 ] = 0;\n\t    \t\tte[ 13 ] = 0;\n\t    \t\tte[ 14 ] = 0;\n\t    \t\tte[ 15 ] = 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\tvar x, y, z;\n\t\n\t    \t\treturn function lookAt( eye, target, up ) {\n\t\n\t    \t\t\tif ( x === undefined ) {\n\t\n\t    \t\t\t\tx = new Vector3();\n\t    \t\t\t\ty = new Vector3();\n\t    \t\t\t\tz = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar te = this.elements;\n\t\n\t    \t\t\tz.subVectors( eye, target ).normalize();\n\t\n\t    \t\t\tif ( z.lengthSq() === 0 ) {\n\t\n\t    \t\t\t\tz.z = 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tx.crossVectors( up, z ).normalize();\n\t\n\t    \t\t\tif ( x.lengthSq() === 0 ) {\n\t\n\t    \t\t\t\tz.z += 0.0001;\n\t    \t\t\t\tx.crossVectors( up, z ).normalize();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ty.crossVectors( z, x );\n\t\n\t\n\t    \t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t    \t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t    \t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmultiply: function ( m, n ) {\n\t\n\t    \t\tif ( n !== undefined ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t    \t\t\treturn this.multiplyMatrices( m, n );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.multiplyMatrices( this, m );\n\t\n\t    \t},\n\t\n\t    \tpremultiply: function ( m ) {\n\t\n\t    \t\treturn this.multiplyMatrices( m, this );\n\t\n\t    \t},\n\t\n\t    \tmultiplyMatrices: function ( a, b ) {\n\t\n\t    \t\tvar ae = a.elements;\n\t    \t\tvar be = b.elements;\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t    \t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t    \t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t    \t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\t\n\t    \t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t    \t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t    \t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t    \t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\t\n\t    \t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t    \t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t    \t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t    \t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\n\t    \t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t    \t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t    \t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t    \t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\n\t    \t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t    \t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t    \t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t    \t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\n\t    \t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t    \t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t    \t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t    \t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyToArray: function ( a, b, r ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tthis.multiplyMatrices( a, b );\n\t\n\t    \t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n\t    \t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n\t    \t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n\t    \t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( s ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t    \t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t    \t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t    \t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyToVector3Array: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToVector3Array( array, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = array.length;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\t\n\t    \t\t\t\tv1.fromArray( array, j );\n\t    \t\t\t\tv1.applyMatrix4( this );\n\t    \t\t\t\tv1.toArray( array, j );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn array;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyToBuffer: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\t\n\t    \t\t\t\tv1.x = buffer.getX( j );\n\t    \t\t\t\tv1.y = buffer.getY( j );\n\t    \t\t\t\tv1.z = buffer.getZ( j );\n\t\n\t    \t\t\t\tv1.applyMatrix4( this );\n\t\n\t    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn buffer;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tdeterminant: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t    \t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t    \t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t    \t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\t\n\t    \t\t//TODO: make this more efficient\n\t    \t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\t\n\t    \t\treturn (\n\t    \t\t\tn41 * (\n\t    \t\t\t\t+ n14 * n23 * n32\n\t    \t\t\t\t - n13 * n24 * n32\n\t    \t\t\t\t - n14 * n22 * n33\n\t    \t\t\t\t + n12 * n24 * n33\n\t    \t\t\t\t + n13 * n22 * n34\n\t    \t\t\t\t - n12 * n23 * n34\n\t    \t\t\t) +\n\t    \t\t\tn42 * (\n\t    \t\t\t\t+ n11 * n23 * n34\n\t    \t\t\t\t - n11 * n24 * n33\n\t    \t\t\t\t + n14 * n21 * n33\n\t    \t\t\t\t - n13 * n21 * n34\n\t    \t\t\t\t + n13 * n24 * n31\n\t    \t\t\t\t - n14 * n23 * n31\n\t    \t\t\t) +\n\t    \t\t\tn43 * (\n\t    \t\t\t\t+ n11 * n24 * n32\n\t    \t\t\t\t - n11 * n22 * n34\n\t    \t\t\t\t - n14 * n21 * n32\n\t    \t\t\t\t + n12 * n21 * n34\n\t    \t\t\t\t + n14 * n22 * n31\n\t    \t\t\t\t - n12 * n24 * n31\n\t    \t\t\t) +\n\t    \t\t\tn44 * (\n\t    \t\t\t\t- n13 * n22 * n31\n\t    \t\t\t\t - n11 * n23 * n32\n\t    \t\t\t\t + n11 * n22 * n33\n\t    \t\t\t\t + n13 * n21 * n32\n\t    \t\t\t\t - n12 * n21 * n33\n\t    \t\t\t\t + n12 * n23 * n31\n\t    \t\t\t)\n\t\n\t    \t\t);\n\t\n\t    \t},\n\t\n\t    \ttranspose: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar tmp;\n\t\n\t    \t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t    \t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t    \t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\t\n\t    \t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t    \t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t    \t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tflattenToArrayOffset: function ( array, offset ) {\n\t\n\t    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t    \t\t\t\t\"- just use .toArray instead.\" );\n\t\n\t    \t\treturn this.toArray( array, offset );\n\t\n\t    \t},\n\t\n\t    \tgetPosition: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function getPosition() {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\n\t    \t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetPosition: function ( v ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 12 ] = v.x;\n\t    \t\tte[ 13 ] = v.y;\n\t    \t\tte[ 14 ] = v.z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetInverse: function ( m, throwOnDegenerate ) {\n\t\n\t    \t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t    \t\tvar te = this.elements,\n\t    \t\t\tme = m.elements,\n\t\n\t    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t    \t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t    \t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t    \t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\t\n\t    \t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t    \t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t    \t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t    \t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\n\t    \t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\n\t    \t\tif ( det === 0 ) {\n\t\n\t    \t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\t\n\t    \t\t\tif ( throwOnDegenerate === true ) {\n\t\n\t    \t\t\t\tthrow new Error( msg );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tconsole.warn( msg );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this.identity();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar detInv = 1 / det;\n\t\n\t    \t\tte[ 0 ] = t11 * detInv;\n\t    \t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t    \t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t    \t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\t\n\t    \t\tte[ 4 ] = t12 * detInv;\n\t    \t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t    \t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t    \t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\t\n\t    \t\tte[ 8 ] = t13 * detInv;\n\t    \t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t    \t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t    \t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\t\n\t    \t\tte[ 12 ] = t14 * detInv;\n\t    \t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t    \t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t    \t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tscale: function ( v ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar x = v.x, y = v.y, z = v.z;\n\t\n\t    \t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t    \t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t    \t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t    \t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetMaxScaleOnAxis: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t    \t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t    \t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\t\n\t    \t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\t\n\t    \t},\n\t\n\t    \tmakeTranslation: function ( x, y, z ) {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0, 0, x,\n\t    \t\t\t0, 1, 0, y,\n\t    \t\t\t0, 0, 1, z,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationX: function ( theta ) {\n\t\n\t    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0,  0, 0,\n\t    \t\t\t0, c, - s, 0,\n\t    \t\t\t0, s,  c, 0,\n\t    \t\t\t0, 0,  0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationY: function ( theta ) {\n\t\n\t    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t c, 0, s, 0,\n\t    \t\t\t 0, 1, 0, 0,\n\t    \t\t\t- s, 0, c, 0,\n\t    \t\t\t 0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationZ: function ( theta ) {\n\t\n\t    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tc, - s, 0, 0,\n\t    \t\t\ts,  c, 0, 0,\n\t    \t\t\t0,  0, 1, 0,\n\t    \t\t\t0,  0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeRotationAxis: function ( axis, angle ) {\n\t\n\t    \t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\n\t    \t\tvar c = Math.cos( angle );\n\t    \t\tvar s = Math.sin( angle );\n\t    \t\tvar t = 1 - c;\n\t    \t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t    \t\tvar tx = t * x, ty = t * y;\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t    \t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t    \t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\t return this;\n\t\n\t    \t},\n\t\n\t    \tmakeScale: function ( x, y, z ) {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tx, 0, 0, 0,\n\t    \t\t\t0, y, 0, 0,\n\t    \t\t\t0, 0, z, 0,\n\t    \t\t\t0, 0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcompose: function ( position, quaternion, scale ) {\n\t\n\t    \t\tthis.makeRotationFromQuaternion( quaternion );\n\t    \t\tthis.scale( scale );\n\t    \t\tthis.setPosition( position );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdecompose: function () {\n\t\n\t    \t\tvar vector, matrix;\n\t\n\t    \t\treturn function decompose( position, quaternion, scale ) {\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tvector = new Vector3();\n\t    \t\t\t\tmatrix = new Matrix4();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar te = this.elements;\n\t\n\t    \t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t    \t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t    \t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\t\n\t    \t\t\t// if determine is negative, we need to invert one scale\n\t    \t\t\tvar det = this.determinant();\n\t    \t\t\tif ( det < 0 ) {\n\t\n\t    \t\t\t\tsx = - sx;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tposition.x = te[ 12 ];\n\t    \t\t\tposition.y = te[ 13 ];\n\t    \t\t\tposition.z = te[ 14 ];\n\t\n\t    \t\t\t// scale the rotation part\n\t\n\t    \t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\t\n\t    \t\t\tvar invSX = 1 / sx;\n\t    \t\t\tvar invSY = 1 / sy;\n\t    \t\t\tvar invSZ = 1 / sz;\n\t\n\t    \t\t\tmatrix.elements[ 0 ] *= invSX;\n\t    \t\t\tmatrix.elements[ 1 ] *= invSX;\n\t    \t\t\tmatrix.elements[ 2 ] *= invSX;\n\t\n\t    \t\t\tmatrix.elements[ 4 ] *= invSY;\n\t    \t\t\tmatrix.elements[ 5 ] *= invSY;\n\t    \t\t\tmatrix.elements[ 6 ] *= invSY;\n\t\n\t    \t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t    \t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t    \t\t\tmatrix.elements[ 10 ] *= invSZ;\n\t\n\t    \t\t\tquaternion.setFromRotationMatrix( matrix );\n\t\n\t    \t\t\tscale.x = sx;\n\t    \t\t\tscale.y = sy;\n\t    \t\t\tscale.z = sz;\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar x = 2 * near / ( right - left );\n\t    \t\tvar y = 2 * near / ( top - bottom );\n\t\n\t    \t\tvar a = ( right + left ) / ( right - left );\n\t    \t\tvar b = ( top + bottom ) / ( top - bottom );\n\t    \t\tvar c = - ( far + near ) / ( far - near );\n\t    \t\tvar d = - 2 * far * near / ( far - near );\n\t\n\t    \t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t    \t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakePerspective: function ( fov, aspect, near, far ) {\n\t\n\t    \t\tvar ymax = near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 );\n\t    \t\tvar ymin = - ymax;\n\t    \t\tvar xmin = ymin * aspect;\n\t    \t\tvar xmax = ymax * aspect;\n\t\n\t    \t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\t\n\t    \t},\n\t\n\t    \tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar w = 1.0 / ( right - left );\n\t    \t\tvar h = 1.0 / ( top - bottom );\n\t    \t\tvar p = 1.0 / ( far - near );\n\t\n\t    \t\tvar x = ( right + left ) * w;\n\t    \t\tvar y = ( top + bottom ) * h;\n\t    \t\tvar z = ( far + near ) * p;\n\t\n\t    \t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t    \t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( matrix ) {\n\t\n\t    \t\tvar te = this.elements;\n\t    \t\tvar me = matrix.elements;\n\t\n\t    \t\tfor ( var i = 0; i < 16; i ++ ) {\n\t\n\t    \t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tfor( var i = 0; i < 16; i ++ ) {\n\t\n\t    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tarray[ offset ] = te[ 0 ];\n\t    \t\tarray[ offset + 1 ] = te[ 1 ];\n\t    \t\tarray[ offset + 2 ] = te[ 2 ];\n\t    \t\tarray[ offset + 3 ] = te[ 3 ];\n\t\n\t    \t\tarray[ offset + 4 ] = te[ 4 ];\n\t    \t\tarray[ offset + 5 ] = te[ 5 ];\n\t    \t\tarray[ offset + 6 ] = te[ 6 ];\n\t    \t\tarray[ offset + 7 ] = te[ 7 ];\n\t\n\t    \t\tarray[ offset + 8 ]  = te[ 8 ];\n\t    \t\tarray[ offset + 9 ]  = te[ 9 ];\n\t    \t\tarray[ offset + 10 ] = te[ 10 ];\n\t    \t\tarray[ offset + 11 ] = te[ 11 ];\n\t\n\t    \t\tarray[ offset + 12 ] = te[ 12 ];\n\t    \t\tarray[ offset + 13 ] = te[ 13 ];\n\t    \t\tarray[ offset + 14 ] = te[ 14 ];\n\t    \t\tarray[ offset + 15 ] = te[ 15 ];\n\t\n\t    \t\treturn array;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\t\n\t    \timages = images !== undefined ? images : [];\n\t    \tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\n\t    \tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t    \tthis.flipY = false;\n\t\n\t    }\n\t\n\t    CubeTexture.prototype = Object.create( Texture.prototype );\n\t    CubeTexture.prototype.constructor = CubeTexture;\n\t\n\t    CubeTexture.prototype.isCubeTexture = true;\n\t\n\t    Object.defineProperty( CubeTexture.prototype, 'images', {\n\t\n\t    \tget: function () {\n\t\n\t    \t\treturn this.image;\n\t\n\t    \t},\n\t\n\t    \tset: function ( value ) {\n\t\n\t    \t\tthis.image = value;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var emptyTexture = new Texture();\n\t    var emptyCubeTexture = new CubeTexture();\n\t\n\t    // --- Base for inner nodes (including the root) ---\n\t\n\t    function UniformContainer() {\n\t\n\t    \tthis.seq = [];\n\t    \tthis.map = {};\n\t\n\t    }\n\t\n\t    // --- Utilities ---\n\t\n\t    // Array Caches (provide typed arrays for temporary by size)\n\t\n\t    var arrayCacheF32 = [];\n\t    var arrayCacheI32 = [];\n\t\n\t    // Flattening for arrays of vectors and matrices\n\t\n\t    function flatten( array, nBlocks, blockSize ) {\n\t\n\t    \tvar firstElem = array[ 0 ];\n\t\n\t    \tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t    \t// unoptimized: ! isNaN( firstElem )\n\t    \t// see http://jacksondunstan.com/articles/983\n\t\n\t    \tvar n = nBlocks * blockSize,\n\t    \t\tr = arrayCacheF32[ n ];\n\t\n\t    \tif ( r === undefined ) {\n\t\n\t    \t\tr = new Float32Array( n );\n\t    \t\tarrayCacheF32[ n ] = r;\n\t\n\t    \t}\n\t\n\t    \tif ( nBlocks !== 0 ) {\n\t\n\t    \t\tfirstElem.toArray( r, 0 );\n\t\n\t    \t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\t\n\t    \t\t\toffset += blockSize;\n\t    \t\t\tarray[ i ].toArray( r, offset );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn r;\n\t\n\t    }\n\t\n\t    // Texture unit allocation\n\t\n\t    function allocTexUnits( renderer, n ) {\n\t\n\t    \tvar r = arrayCacheI32[ n ];\n\t\n\t    \tif ( r === undefined ) {\n\t\n\t    \t\tr = new Int32Array( n );\n\t    \t\tarrayCacheI32[ n ] = r;\n\t\n\t    \t}\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i )\n\t    \t\tr[ i ] = renderer.allocTextureUnit();\n\t\n\t    \treturn r;\n\t\n\t    }\n\t\n\t    // --- Setters ---\n\t\n\t    // Note: Defining these methods externally, because they come in a bunch\n\t    // and this way their names minify.\n\t\n\t    // Single scalar\n\t\n\t    function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }\n\t    function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }\n\t\n\t    // Single float vector (from flat array or THREE.VectorN)\n\t\n\t    function setValue2fv( gl, v ) {\n\t\n\t    \tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n\t    \telse gl.uniform2f( this.addr, v.x, v.y );\n\t\n\t    }\n\t\n\t    function setValue3fv( gl, v ) {\n\t\n\t    \tif ( v.x !== undefined )\n\t    \t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\t    \telse if ( v.r !== undefined )\n\t    \t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\t    \telse\n\t    \t\tgl.uniform3fv( this.addr, v );\n\t\n\t    }\n\t\n\t    function setValue4fv( gl, v ) {\n\t\n\t    \tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n\t    \telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\t\n\t    }\n\t\n\t    // Single matrix (from flat array or MatrixN)\n\t\n\t    function setValue2fm( gl, v ) {\n\t\n\t    \tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\t\n\t    }\n\t\n\t    function setValue3fm( gl, v ) {\n\t\n\t    \tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\t\n\t    }\n\t\n\t    function setValue4fm( gl, v ) {\n\t\n\t    \tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\t\n\t    }\n\t\n\t    // Single texture (2D / Cube)\n\t\n\t    function setValueT1( gl, v, renderer ) {\n\t\n\t    \tvar unit = renderer.allocTextureUnit();\n\t    \tgl.uniform1i( this.addr, unit );\n\t    \trenderer.setTexture2D( v || emptyTexture, unit );\n\t\n\t    }\n\t\n\t    function setValueT6( gl, v, renderer ) {\n\t\n\t    \tvar unit = renderer.allocTextureUnit();\n\t    \tgl.uniform1i( this.addr, unit );\n\t    \trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\t\n\t    }\n\t\n\t    // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\t\n\t    function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }\n\t    function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }\n\t    function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }\n\t\n\t    // Helper to pick the right setter for the singular case\n\t\n\t    function getSingularSetter( type ) {\n\t\n\t    \tswitch ( type ) {\n\t\n\t    \t\tcase 0x1406: return setValue1f; // FLOAT\n\t    \t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t    \t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t    \t\tcase 0x8b52: return setValue4fv; // _VEC4\n\t\n\t    \t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t    \t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t    \t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\t\n\t    \t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n\t    \t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\t\n\t    \t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // Array of scalars\n\t\n\t    function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }\n\t    function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }\n\t\n\t    // Array of vectors (flat or from THREE classes)\n\t\n\t    function setValueV2a( gl, v ) {\n\t\n\t    \tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\t\n\t    }\n\t\n\t    function setValueV3a( gl, v ) {\n\t\n\t    \tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\t\n\t    }\n\t\n\t    function setValueV4a( gl, v ) {\n\t\n\t    \tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\t\n\t    }\n\t\n\t    // Array of matrices (flat or from THREE clases)\n\t\n\t    function setValueM2a( gl, v ) {\n\t\n\t    \tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\t\n\t    }\n\t\n\t    function setValueM3a( gl, v ) {\n\t\n\t    \tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\t\n\t    }\n\t\n\t    function setValueM4a( gl, v ) {\n\t\n\t    \tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\t\n\t    }\n\t\n\t    // Array of textures (2D / Cube)\n\t\n\t    function setValueT1a( gl, v, renderer ) {\n\t\n\t    \tvar n = v.length,\n\t    \t\tunits = allocTexUnits( renderer, n );\n\t\n\t    \tgl.uniform1iv( this.addr, units );\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    function setValueT6a( gl, v, renderer ) {\n\t\n\t    \tvar n = v.length,\n\t    \t\tunits = allocTexUnits( renderer, n );\n\t\n\t    \tgl.uniform1iv( this.addr, units );\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // Helper to pick the right setter for a pure (bottom-level) array\n\t\n\t    function getPureArraySetter( type ) {\n\t\n\t    \tswitch ( type ) {\n\t\n\t    \t\tcase 0x1406: return setValue1fv; // FLOAT\n\t    \t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t    \t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t    \t\tcase 0x8b52: return setValueV4a; // _VEC4\n\t\n\t    \t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t    \t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t    \t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\t\n\t    \t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t    \t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\t\n\t    \t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // --- Uniform Classes ---\n\t\n\t    function SingleUniform( id, activeInfo, addr ) {\n\t\n\t    \tthis.id = id;\n\t    \tthis.addr = addr;\n\t    \tthis.setValue = getSingularSetter( activeInfo.type );\n\t\n\t    \t// this.path = activeInfo.name; // DEBUG\n\t\n\t    }\n\t\n\t    function PureArrayUniform( id, activeInfo, addr ) {\n\t\n\t    \tthis.id = id;\n\t    \tthis.addr = addr;\n\t    \tthis.size = activeInfo.size;\n\t    \tthis.setValue = getPureArraySetter( activeInfo.type );\n\t\n\t    \t// this.path = activeInfo.name; // DEBUG\n\t\n\t    }\n\t\n\t    function StructuredUniform( id ) {\n\t\n\t    \tthis.id = id;\n\t\n\t    \tUniformContainer.call( this ); // mix-in\n\t\n\t    }\n\t\n\t    StructuredUniform.prototype.setValue = function( gl, value ) {\n\t\n\t    \t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t    \t// are not allowed in structured uniforms.\n\t\n\t    \tvar seq = this.seq;\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ];\n\t    \t\tu.setValue( gl, value[ u.id ] );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    // --- Top-level ---\n\t\n\t    // Parser - builds up the property tree from the path strings\n\t\n\t    var RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\t\n\t    // extracts\n\t    // \t- the identifier (member name or array index)\n\t    //  - followed by an optional right bracket (found when array index)\n\t    //  - followed by an optional left bracket or dot (type of subscript)\n\t    //\n\t    // Note: These portions can be read in a non-overlapping fashion and\n\t    // allow straightforward parsing of the hierarchy that WebGL encodes\n\t    // in the uniform names.\n\t\n\t    function addUniform( container, uniformObject ) {\n\t\n\t    \tcontainer.seq.push( uniformObject );\n\t    \tcontainer.map[ uniformObject.id ] = uniformObject;\n\t\n\t    }\n\t\n\t    function parseUniform( activeInfo, addr, container ) {\n\t\n\t    \tvar path = activeInfo.name,\n\t    \t\tpathLength = path.length;\n\t\n\t    \t// reset RegExp object, because of the early exit of a previous run\n\t    \tRePathPart.lastIndex = 0;\n\t\n\t    \tfor (; ;) {\n\t\n\t    \t\tvar match = RePathPart.exec( path ),\n\t    \t\t\tmatchEnd = RePathPart.lastIndex,\n\t\n\t    \t\t\tid = match[ 1 ],\n\t    \t\t\tidIsIndex = match[ 2 ] === ']',\n\t    \t\t\tsubscript = match[ 3 ];\n\t\n\t    \t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\t\n\t    \t\tif ( subscript === undefined ||\n\t    \t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n\t    \t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\n\t    \t\t\taddUniform( container, subscript === undefined ?\n\t    \t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t    \t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\t\n\t    \t\t\tbreak;\n\t\n\t    \t\t} else {\n\t    \t\t\t// step into inner node / create it in case it doesn't exist\n\t\n\t    \t\t\tvar map = container.map,\n\t    \t\t\t\tnext = map[ id ];\n\t\n\t    \t\t\tif ( next === undefined ) {\n\t\n\t    \t\t\t\tnext = new StructuredUniform( id );\n\t    \t\t\t\taddUniform( container, next );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcontainer = next;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    // Root Container\n\t\n\t    function WebGLUniforms( gl, program, renderer ) {\n\t\n\t    \tUniformContainer.call( this );\n\t\n\t    \tthis.renderer = renderer;\n\t\n\t    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\tvar info = gl.getActiveUniform( program, i ),\n\t    \t\t\tpath = info.name,\n\t    \t\t\taddr = gl.getUniformLocation( program, path );\n\t\n\t    \t\tparseUniform( info, addr, this );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    WebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\t\n\t    \tvar u = this.map[ name ];\n\t\n\t    \tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\t\n\t    };\n\t\n\t    WebGLUniforms.prototype.set = function( gl, object, name ) {\n\t\n\t    \tvar u = this.map[ name ];\n\t\n\t    \tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\t\n\t    };\n\t\n\t    WebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\t\n\t    \tvar v = object[ name ];\n\t\n\t    \tif ( v !== undefined ) this.setValue( gl, name, v );\n\t\n\t    };\n\t\n\t\n\t    // Static interface\n\t\n\t    WebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ],\n\t    \t\t\tv = values[ u.id ];\n\t\n\t    \t\tif ( v.needsUpdate !== false ) {\n\t    \t\t\t// note: always updating when .needsUpdate is undefined\n\t\n\t    \t\t\tu.setValue( gl, v.value, renderer );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    WebGLUniforms.seqWithValue = function( seq, values ) {\n\t\n\t    \tvar r = [];\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ];\n\t    \t\tif ( u.id in values ) r.push( u );\n\t\n\t    \t}\n\t\n\t    \treturn r;\n\t\n\t    };\n\t\n\t    WebGLUniforms.splitDynamic = function( seq, values ) {\n\t\n\t    \tvar r = null,\n\t    \t\tn = seq.length,\n\t    \t\tw = 0;\n\t\n\t    \tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t    \t\tvar u = seq[ i ],\n\t    \t\t\tv = values[ u.id ];\n\t\n\t    \t\tif ( v && v.dynamic === true ) {\n\t\n\t    \t\t\tif ( r === null ) r = [];\n\t    \t\t\tr.push( u );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// in-place compact 'seq', removing the matches\n\t    \t\t\tif ( w < i ) seq[ w ] = u;\n\t    \t\t\t++ w;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tif ( w < n ) seq.length = w;\n\t\n\t    \treturn r;\n\t\n\t    };\n\t\n\t    WebGLUniforms.evalDynamic = function( seq, values, object, material, camera ) {\n\t\n\t    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t    \t\tvar v = values[ seq[ i ].id ],\n\t    \t\t\tf = v.onUpdateCallback;\n\t\n\t    \t\tif ( f !== undefined ) f.call( v, object, material, camera );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * Uniform Utilities\n\t     */\n\t\n\t    exports.UniformsUtils = {\n\t\n\t    \tmerge: function ( uniforms ) {\n\t\n\t    \t\tvar merged = {};\n\t\n\t    \t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\t\n\t    \t\t\tvar tmp = this.clone( uniforms[ u ] );\n\t\n\t    \t\t\tfor ( var p in tmp ) {\n\t\n\t    \t\t\t\tmerged[ p ] = tmp[ p ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn merged;\n\t\n\t    \t},\n\t\n\t    \tclone: function ( uniforms_src ) {\n\t\n\t    \t\tvar uniforms_dst = {};\n\t\n\t    \t\tfor ( var u in uniforms_src ) {\n\t\n\t    \t\t\tuniforms_dst[ u ] = {};\n\t\n\t    \t\t\tfor ( var p in uniforms_src[ u ] ) {\n\t\n\t    \t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\t\n\t    \t\t\t\tif ( (parameter_src && parameter_src.isColor) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isVector2) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isVector3) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isVector4) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isMatrix3) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isMatrix4) ||\n\t    \t\t\t\t\t (parameter_src && parameter_src.isTexture) ) {\n\t\n\t    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\t\n\t    \t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\t\n\t    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn uniforms_dst;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    var alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\t\n\t    var alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\t\n\t    var alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\t\n\t    var aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\t\n\t    var begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\t\n\t    var beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\t\n\t    var bsdfs = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\t\n\t    var bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\t\n\t    var clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n#endif\\n\";\n\t\n\t    var clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\t\n\t    var clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\t\n\t    var clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\t\n\t    var color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\t\n\t    var color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\t\n\t    var color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\t\n\t    var color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\t\n\t    var common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\t\n\t    var cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\t\n\t    var defaultnormal_vertex = \"#ifdef FLIP_SIDED\\n\\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\t\n\t    var displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\t\n\t    var displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\t\n\t    var emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\t\n\t    var emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\t\n\t    var encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\t\n\t    var encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\t\n\t    var envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\t#else\\n\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\t#endif\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\t\n\t    var fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\t\n\t    var lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\t\n\t    var lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\t\n\t    var lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\t\n\t    var lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\\t\\t\\tdirectLight.color = pointLight.color;\\n\\t\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\t#include <normal_flip>\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\t#include <normal_flip>\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\t\n\t    var lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\t\n\t    var lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\t\n\t    var lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\t\n\t    var lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\t\n\t    var lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t \\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\t\\t\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\t\n\t    var logdepthbuf_fragment = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\t\n\t    var logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\t\n\t    var logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\t\n\t    var map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\t\n\t    var map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\t\n\t    var map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\t\n\t    var metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\t\n\t    var metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\t\n\t    var morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\t\n\t    var morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\t\n\t    var morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var normal_flip = \"#ifdef DOUBLE_SIDED\\n\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\t\n\t    var normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\t\n\t    var normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\t\n\t    var packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\t\n\t    var premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\t\n\t    var project_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\t\n\t    var roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\t\n\t    var roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\t\n\t    var shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\t\n\t    var shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\t\n\t    var skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\t\n\t    var skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureWidth;\\n\\t\\tuniform int boneTextureHeight;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureWidth ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureWidth );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\t\n\t    var skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\t\n\t    var specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\t\n\t    var specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\t\n\t    var tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\t\n\t    var tonemapping_pars_fragment = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\t\n\t    var uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\t\n\t    var uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\t\n\t    var uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\t\n\t    var uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\t\n\t    var uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\t\n\t    var uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\t\n\t    var worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\t#ifdef USE_SKINNING\\n\\t\\tvec4 worldPosition = modelMatrix * skinned;\\n\\t#else\\n\\t\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\t#endif\\n#endif\\n\";\n\t\n\t    var cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\t\n\t    var cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\t\n\t    var depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\t\n\t    var depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t    var distanceRGBA_frag = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\t\n\t    var distanceRGBA_vert = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\n\t\n\t    var equirect_frag = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\t\n\t    var equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\t\n\t    var linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t    var meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight;\\n\\treflectedLight.directDiffuse = vec3( 0.0 );\\n\\treflectedLight.directSpecular = vec3( 0.0 );\\n\\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n}\\n\";\n\t\n\t    var meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var normal_frag = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\n\t\n\t    var normal_vert = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvNormal = normalize( normalMatrix * normal );\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t    var points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\t\n\t    var points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var shadow_frag = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\t\n\t    var shadow_vert = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t    var ShaderChunk = {\n\t    \talphamap_fragment: alphamap_fragment,\n\t    \talphamap_pars_fragment: alphamap_pars_fragment,\n\t    \talphatest_fragment: alphatest_fragment,\n\t    \taomap_fragment: aomap_fragment,\n\t    \taomap_pars_fragment: aomap_pars_fragment,\n\t    \tbegin_vertex: begin_vertex,\n\t    \tbeginnormal_vertex: beginnormal_vertex,\n\t    \tbsdfs: bsdfs,\n\t    \tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t    \tclipping_planes_fragment: clipping_planes_fragment,\n\t    \tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t    \tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t    \tclipping_planes_vertex: clipping_planes_vertex,\n\t    \tcolor_fragment: color_fragment,\n\t    \tcolor_pars_fragment: color_pars_fragment,\n\t    \tcolor_pars_vertex: color_pars_vertex,\n\t    \tcolor_vertex: color_vertex,\n\t    \tcommon: common,\n\t    \tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t    \tdefaultnormal_vertex: defaultnormal_vertex,\n\t    \tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t    \tdisplacementmap_vertex: displacementmap_vertex,\n\t    \temissivemap_fragment: emissivemap_fragment,\n\t    \temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t    \tencodings_fragment: encodings_fragment,\n\t    \tencodings_pars_fragment: encodings_pars_fragment,\n\t    \tenvmap_fragment: envmap_fragment,\n\t    \tenvmap_pars_fragment: envmap_pars_fragment,\n\t    \tenvmap_pars_vertex: envmap_pars_vertex,\n\t    \tenvmap_vertex: envmap_vertex,\n\t    \tfog_fragment: fog_fragment,\n\t    \tfog_pars_fragment: fog_pars_fragment,\n\t    \tlightmap_fragment: lightmap_fragment,\n\t    \tlightmap_pars_fragment: lightmap_pars_fragment,\n\t    \tlights_lambert_vertex: lights_lambert_vertex,\n\t    \tlights_pars: lights_pars,\n\t    \tlights_phong_fragment: lights_phong_fragment,\n\t    \tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t    \tlights_physical_fragment: lights_physical_fragment,\n\t    \tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t    \tlights_template: lights_template,\n\t    \tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t    \tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t    \tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t    \tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t    \tmap_fragment: map_fragment,\n\t    \tmap_pars_fragment: map_pars_fragment,\n\t    \tmap_particle_fragment: map_particle_fragment,\n\t    \tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t    \tmetalnessmap_fragment: metalnessmap_fragment,\n\t    \tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t    \tmorphnormal_vertex: morphnormal_vertex,\n\t    \tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t    \tmorphtarget_vertex: morphtarget_vertex,\n\t    \tnormal_flip: normal_flip,\n\t    \tnormal_fragment: normal_fragment,\n\t    \tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t    \tpacking: packing,\n\t    \tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t    \tproject_vertex: project_vertex,\n\t    \troughnessmap_fragment: roughnessmap_fragment,\n\t    \troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t    \tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t    \tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t    \tshadowmap_vertex: shadowmap_vertex,\n\t    \tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t    \tskinbase_vertex: skinbase_vertex,\n\t    \tskinning_pars_vertex: skinning_pars_vertex,\n\t    \tskinning_vertex: skinning_vertex,\n\t    \tskinnormal_vertex: skinnormal_vertex,\n\t    \tspecularmap_fragment: specularmap_fragment,\n\t    \tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t    \ttonemapping_fragment: tonemapping_fragment,\n\t    \ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t    \tuv_pars_fragment: uv_pars_fragment,\n\t    \tuv_pars_vertex: uv_pars_vertex,\n\t    \tuv_vertex: uv_vertex,\n\t    \tuv2_pars_fragment: uv2_pars_fragment,\n\t    \tuv2_pars_vertex: uv2_pars_vertex,\n\t    \tuv2_vertex: uv2_vertex,\n\t    \tworldpos_vertex: worldpos_vertex,\n\t\n\t    \tcube_frag: cube_frag,\n\t    \tcube_vert: cube_vert,\n\t    \tdepth_frag: depth_frag,\n\t    \tdepth_vert: depth_vert,\n\t    \tdistanceRGBA_frag: distanceRGBA_frag,\n\t    \tdistanceRGBA_vert: distanceRGBA_vert,\n\t    \tequirect_frag: equirect_frag,\n\t    \tequirect_vert: equirect_vert,\n\t    \tlinedashed_frag: linedashed_frag,\n\t    \tlinedashed_vert: linedashed_vert,\n\t    \tmeshbasic_frag: meshbasic_frag,\n\t    \tmeshbasic_vert: meshbasic_vert,\n\t    \tmeshlambert_frag: meshlambert_frag,\n\t    \tmeshlambert_vert: meshlambert_vert,\n\t    \tmeshphong_frag: meshphong_frag,\n\t    \tmeshphong_vert: meshphong_vert,\n\t    \tmeshphysical_frag: meshphysical_frag,\n\t    \tmeshphysical_vert: meshphysical_vert,\n\t    \tnormal_frag: normal_frag,\n\t    \tnormal_vert: normal_vert,\n\t    \tpoints_frag: points_frag,\n\t    \tpoints_vert: points_vert,\n\t    \tshadow_frag: shadow_frag,\n\t    \tshadow_vert: shadow_vert\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Color( r, g, b ) {\n\t\n\t    \tif ( g === undefined && b === undefined ) {\n\t\n\t    \t\t// r is THREE.Color, hex or string\n\t    \t\treturn this.set( r );\n\t\n\t    \t}\n\t\n\t    \treturn this.setRGB( r, g, b );\n\t\n\t    }\n\t\n\t    Color.prototype = {\n\t\n\t    \tconstructor: Color,\n\t\n\t    \tisColor: true,\n\t\n\t    \tr: 1, g: 1, b: 1,\n\t\n\t    \tset: function ( value ) {\n\t\n\t    \t\tif ( (value && value.isColor) ) {\n\t\n\t    \t\t\tthis.copy( value );\n\t\n\t    \t\t} else if ( typeof value === 'number' ) {\n\t\n\t    \t\t\tthis.setHex( value );\n\t\n\t    \t\t} else if ( typeof value === 'string' ) {\n\t\n\t    \t\t\tthis.setStyle( value );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetScalar: function ( scalar ) {\n\t\n\t    \t\tthis.r = scalar;\n\t    \t\tthis.g = scalar;\n\t    \t\tthis.b = scalar;\n\t\n\t    \t},\n\t\n\t    \tsetHex: function ( hex ) {\n\t\n\t    \t\thex = Math.floor( hex );\n\t\n\t    \t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t    \t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t    \t\tthis.b = ( hex & 255 ) / 255;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetRGB: function ( r, g, b ) {\n\t\n\t    \t\tthis.r = r;\n\t    \t\tthis.g = g;\n\t    \t\tthis.b = b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetHSL: function () {\n\t\n\t    \t\tfunction hue2rgb( p, q, t ) {\n\t\n\t    \t\t\tif ( t < 0 ) t += 1;\n\t    \t\t\tif ( t > 1 ) t -= 1;\n\t    \t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t    \t\t\tif ( t < 1 / 2 ) return q;\n\t    \t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t    \t\t\treturn p;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function setHSL( h, s, l ) {\n\t\n\t    \t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t    \t\t\th = exports.Math.euclideanModulo( h, 1 );\n\t    \t\t\ts = exports.Math.clamp( s, 0, 1 );\n\t    \t\t\tl = exports.Math.clamp( l, 0, 1 );\n\t\n\t    \t\t\tif ( s === 0 ) {\n\t\n\t    \t\t\t\tthis.r = this.g = this.b = l;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t    \t\t\t\tvar q = ( 2 * l ) - p;\n\t\n\t    \t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t    \t\t\t\tthis.g = hue2rgb( q, p, h );\n\t    \t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetStyle: function ( style ) {\n\t\n\t    \t\tfunction handleAlpha( string ) {\n\t\n\t    \t\t\tif ( string === undefined ) return;\n\t\n\t    \t\t\tif ( parseFloat( string ) < 1 ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\tvar m;\n\t\n\t    \t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\t\n\t    \t\t\t// rgb / hsl\n\t\n\t    \t\t\tvar color;\n\t    \t\t\tvar name = m[ 1 ];\n\t    \t\t\tvar components = m[ 2 ];\n\t\n\t    \t\t\tswitch ( name ) {\n\t\n\t    \t\t\t\tcase 'rgb':\n\t    \t\t\t\tcase 'rgba':\n\t\n\t    \t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t    \t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t    \t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t    \t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t    \t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\t\n\t    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t    \t\t\t\t\t\treturn this;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t    \t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t    \t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t    \t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t    \t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\t\n\t    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t    \t\t\t\t\t\treturn this;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'hsl':\n\t    \t\t\t\tcase 'hsla':\n\t\n\t    \t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t    \t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t    \t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t    \t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t    \t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\t\n\t    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t    \t\t\t\t\t\treturn this.setHSL( h, s, l );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\t\n\t    \t\t\t// hex color\n\t\n\t    \t\t\tvar hex = m[ 1 ];\n\t    \t\t\tvar size = hex.length;\n\t\n\t    \t\t\tif ( size === 3 ) {\n\t\n\t    \t\t\t\t// #ff0\n\t    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t    \t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t    \t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\t\n\t    \t\t\t\treturn this;\n\t\n\t    \t\t\t} else if ( size === 6 ) {\n\t\n\t    \t\t\t\t// #ff0000\n\t    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t    \t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t    \t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\t\n\t    \t\t\t\treturn this;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( style && style.length > 0 ) {\n\t\n\t    \t\t\t// color keywords\n\t    \t\t\tvar hex = exports.ColorKeywords[ style ];\n\t\n\t    \t\t\tif ( hex !== undefined ) {\n\t\n\t    \t\t\t\t// red\n\t    \t\t\t\tthis.setHex( hex );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// unknown color\n\t    \t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.r, this.g, this.b );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( color ) {\n\t\n\t    \t\tthis.r = color.r;\n\t    \t\tthis.g = color.g;\n\t    \t\tthis.b = color.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyGammaToLinear: function ( color, gammaFactor ) {\n\t\n\t    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\t\n\t    \t\tthis.r = Math.pow( color.r, gammaFactor );\n\t    \t\tthis.g = Math.pow( color.g, gammaFactor );\n\t    \t\tthis.b = Math.pow( color.b, gammaFactor );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyLinearToGamma: function ( color, gammaFactor ) {\n\t\n\t    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\t\n\t    \t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\t\n\t    \t\tthis.r = Math.pow( color.r, safeInverse );\n\t    \t\tthis.g = Math.pow( color.g, safeInverse );\n\t    \t\tthis.b = Math.pow( color.b, safeInverse );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tconvertGammaToLinear: function () {\n\t\n\t    \t\tvar r = this.r, g = this.g, b = this.b;\n\t\n\t    \t\tthis.r = r * r;\n\t    \t\tthis.g = g * g;\n\t    \t\tthis.b = b * b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tconvertLinearToGamma: function () {\n\t\n\t    \t\tthis.r = Math.sqrt( this.r );\n\t    \t\tthis.g = Math.sqrt( this.g );\n\t    \t\tthis.b = Math.sqrt( this.b );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetHex: function () {\n\t\n\t    \t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\t\n\t    \t},\n\t\n\t    \tgetHexString: function () {\n\t\n\t    \t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\t\n\t    \t},\n\t\n\t    \tgetHSL: function ( optionalTarget ) {\n\t\n\t    \t\t// h,s,l ranges are in 0.0 - 1.0\n\t\n\t    \t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\t\n\t    \t\tvar r = this.r, g = this.g, b = this.b;\n\t\n\t    \t\tvar max = Math.max( r, g, b );\n\t    \t\tvar min = Math.min( r, g, b );\n\t\n\t    \t\tvar hue, saturation;\n\t    \t\tvar lightness = ( min + max ) / 2.0;\n\t\n\t    \t\tif ( min === max ) {\n\t\n\t    \t\t\thue = 0;\n\t    \t\t\tsaturation = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar delta = max - min;\n\t\n\t    \t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\t\n\t    \t\t\tswitch ( max ) {\n\t\n\t    \t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t    \t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t    \t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\thue /= 6;\n\t\n\t    \t\t}\n\t\n\t    \t\thsl.h = hue;\n\t    \t\thsl.s = saturation;\n\t    \t\thsl.l = lightness;\n\t\n\t    \t\treturn hsl;\n\t\n\t    \t},\n\t\n\t    \tgetStyle: function () {\n\t\n\t    \t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\t\n\t    \t},\n\t\n\t    \toffsetHSL: function ( h, s, l ) {\n\t\n\t    \t\tvar hsl = this.getHSL();\n\t\n\t    \t\thsl.h += h; hsl.s += s; hsl.l += l;\n\t\n\t    \t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( color ) {\n\t\n\t    \t\tthis.r += color.r;\n\t    \t\tthis.g += color.g;\n\t    \t\tthis.b += color.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddColors: function ( color1, color2 ) {\n\t\n\t    \t\tthis.r = color1.r + color2.r;\n\t    \t\tthis.g = color1.g + color2.g;\n\t    \t\tthis.b = color1.b + color2.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddScalar: function ( s ) {\n\t\n\t    \t\tthis.r += s;\n\t    \t\tthis.g += s;\n\t    \t\tthis.b += s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsub: function( color ) {\n\t\n\t    \t\tthis.r = Math.max( 0, this.r - color.r );\n\t    \t\tthis.g = Math.max( 0, this.g - color.g );\n\t    \t\tthis.b = Math.max( 0, this.b - color.b );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiply: function ( color ) {\n\t\n\t    \t\tthis.r *= color.r;\n\t    \t\tthis.g *= color.g;\n\t    \t\tthis.b *= color.b;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmultiplyScalar: function ( s ) {\n\t\n\t    \t\tthis.r *= s;\n\t    \t\tthis.g *= s;\n\t    \t\tthis.b *= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tlerp: function ( color, alpha ) {\n\t\n\t    \t\tthis.r += ( color.r - this.r ) * alpha;\n\t    \t\tthis.g += ( color.g - this.g ) * alpha;\n\t    \t\tthis.b += ( color.b - this.b ) * alpha;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( c ) {\n\t\n\t    \t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.r = array[ offset ];\n\t    \t\tthis.g = array[ offset + 1 ];\n\t    \t\tthis.b = array[ offset + 2 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this.r;\n\t    \t\tarray[ offset + 1 ] = this.g;\n\t    \t\tarray[ offset + 2 ] = this.b;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\treturn this.getHex();\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    exports.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t    'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t    'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t    'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t    'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t    'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t    'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t    'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t    'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t    'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t    'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t    'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t    'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t    'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t    'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t    'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t    'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t    'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t    'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t    'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t    'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t    'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t    'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t    'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\t\n\t    /**\n\t     * Uniforms library for shared webgl shaders\n\t     */\n\t\n\t    var UniformsLib = {\n\t\n\t    \tcommon: {\n\t\n\t    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t    \t\topacity: { value: 1.0 },\n\t\n\t    \t\tmap: { value: null },\n\t    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },\n\t\n\t    \t\tspecularMap: { value: null },\n\t    \t\talphaMap: { value: null },\n\t\n\t    \t\tenvMap: { value: null },\n\t    \t\tflipEnvMap: { value: - 1 },\n\t    \t\treflectivity: { value: 1.0 },\n\t    \t\trefractionRatio: { value: 0.98 }\n\t\n\t    \t},\n\t\n\t    \taomap: {\n\t\n\t    \t\taoMap: { value: null },\n\t    \t\taoMapIntensity: { value: 1 }\n\t\n\t    \t},\n\t\n\t    \tlightmap: {\n\t\n\t    \t\tlightMap: { value: null },\n\t    \t\tlightMapIntensity: { value: 1 }\n\t\n\t    \t},\n\t\n\t    \temissivemap: {\n\t\n\t    \t\temissiveMap: { value: null }\n\t\n\t    \t},\n\t\n\t    \tbumpmap: {\n\t\n\t    \t\tbumpMap: { value: null },\n\t    \t\tbumpScale: { value: 1 }\n\t\n\t    \t},\n\t\n\t    \tnormalmap: {\n\t\n\t    \t\tnormalMap: { value: null },\n\t    \t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\t\n\t    \t},\n\t\n\t    \tdisplacementmap: {\n\t\n\t    \t\tdisplacementMap: { value: null },\n\t    \t\tdisplacementScale: { value: 1 },\n\t    \t\tdisplacementBias: { value: 0 }\n\t\n\t    \t},\n\t\n\t    \troughnessmap: {\n\t\n\t    \t\troughnessMap: { value: null }\n\t\n\t    \t},\n\t\n\t    \tmetalnessmap: {\n\t\n\t    \t\tmetalnessMap: { value: null }\n\t\n\t    \t},\n\t\n\t    \tfog: {\n\t\n\t    \t\tfogDensity: { value: 0.00025 },\n\t    \t\tfogNear: { value: 1 },\n\t    \t\tfogFar: { value: 2000 },\n\t    \t\tfogColor: { value: new Color( 0xffffff ) }\n\t\n\t    \t},\n\t\n\t    \tlights: {\n\t\n\t    \t\tambientLightColor: { value: [] },\n\t\n\t    \t\tdirectionalLights: { value: [], properties: {\n\t    \t\t\tdirection: {},\n\t    \t\t\tcolor: {},\n\t\n\t    \t\t\tshadow: {},\n\t    \t\t\tshadowBias: {},\n\t    \t\t\tshadowRadius: {},\n\t    \t\t\tshadowMapSize: {}\n\t    \t\t} },\n\t\n\t    \t\tdirectionalShadowMap: { value: [] },\n\t    \t\tdirectionalShadowMatrix: { value: [] },\n\t\n\t    \t\tspotLights: { value: [], properties: {\n\t    \t\t\tcolor: {},\n\t    \t\t\tposition: {},\n\t    \t\t\tdirection: {},\n\t    \t\t\tdistance: {},\n\t    \t\t\tconeCos: {},\n\t    \t\t\tpenumbraCos: {},\n\t    \t\t\tdecay: {},\n\t\n\t    \t\t\tshadow: {},\n\t    \t\t\tshadowBias: {},\n\t    \t\t\tshadowRadius: {},\n\t    \t\t\tshadowMapSize: {}\n\t    \t\t} },\n\t\n\t    \t\tspotShadowMap: { value: [] },\n\t    \t\tspotShadowMatrix: { value: [] },\n\t\n\t    \t\tpointLights: { value: [], properties: {\n\t    \t\t\tcolor: {},\n\t    \t\t\tposition: {},\n\t    \t\t\tdecay: {},\n\t    \t\t\tdistance: {},\n\t\n\t    \t\t\tshadow: {},\n\t    \t\t\tshadowBias: {},\n\t    \t\t\tshadowRadius: {},\n\t    \t\t\tshadowMapSize: {}\n\t    \t\t} },\n\t\n\t    \t\tpointShadowMap: { value: [] },\n\t    \t\tpointShadowMatrix: { value: [] },\n\t\n\t    \t\themisphereLights: { value: [], properties: {\n\t    \t\t\tdirection: {},\n\t    \t\t\tskyColor: {},\n\t    \t\t\tgroundColor: {}\n\t    \t\t} }\n\t\n\t    \t},\n\t\n\t    \tpoints: {\n\t\n\t    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t    \t\topacity: { value: 1.0 },\n\t    \t\tsize: { value: 1.0 },\n\t    \t\tscale: { value: 1.0 },\n\t    \t\tmap: { value: null },\n\t    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     */\n\t\n\t    var ShaderLib = {\n\t\n\t    \tbasic: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.fog\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\n\t    \t},\n\t\n\t    \tlambert: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.lightmap,\n\t    \t\t\tUniformsLib.emissivemap,\n\t    \t\t\tUniformsLib.fog,\n\t    \t\t\tUniformsLib.lights,\n\t\n\t    \t\t\t{\n\t    \t\t\t\temissive : { value: new Color( 0x000000 ) }\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\n\t    \t},\n\t\n\t    \tphong: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.lightmap,\n\t    \t\t\tUniformsLib.emissivemap,\n\t    \t\t\tUniformsLib.bumpmap,\n\t    \t\t\tUniformsLib.normalmap,\n\t    \t\t\tUniformsLib.displacementmap,\n\t    \t\t\tUniformsLib.fog,\n\t    \t\t\tUniformsLib.lights,\n\t\n\t    \t\t\t{\n\t    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n\t    \t\t\t\tspecular : { value: new Color( 0x111111 ) },\n\t    \t\t\t\tshininess: { value: 30 }\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshphong_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\n\t    \t},\n\t\n\t    \tstandard: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.aomap,\n\t    \t\t\tUniformsLib.lightmap,\n\t    \t\t\tUniformsLib.emissivemap,\n\t    \t\t\tUniformsLib.bumpmap,\n\t    \t\t\tUniformsLib.normalmap,\n\t    \t\t\tUniformsLib.displacementmap,\n\t    \t\t\tUniformsLib.roughnessmap,\n\t    \t\t\tUniformsLib.metalnessmap,\n\t    \t\t\tUniformsLib.fog,\n\t    \t\t\tUniformsLib.lights,\n\t\n\t    \t\t\t{\n\t    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n\t    \t\t\t\troughness: { value: 0.5 },\n\t    \t\t\t\tmetalness: { value: 0 },\n\t    \t\t\t\tenvMapIntensity : { value: 1 }, // temporary\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t    \t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\n\t    \t},\n\t\n\t    \tpoints: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.points,\n\t    \t\t\tUniformsLib.fog\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.points_vert,\n\t    \t\tfragmentShader: ShaderChunk.points_frag\n\t\n\t    \t},\n\t\n\t    \tdashed: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.fog,\n\t\n\t    \t\t\t{\n\t    \t\t\t\tscale    : { value: 1 },\n\t    \t\t\t\tdashSize : { value: 1 },\n\t    \t\t\t\ttotalSize: { value: 2 }\n\t    \t\t\t}\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.linedashed_vert,\n\t    \t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\n\t    \t},\n\t\n\t    \tdepth: {\n\t\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\t\tUniformsLib.common,\n\t    \t\t\tUniformsLib.displacementmap\n\t\n\t    \t\t] ),\n\t\n\t    \t\tvertexShader: ShaderChunk.depth_vert,\n\t    \t\tfragmentShader: ShaderChunk.depth_frag\n\t\n\t    \t},\n\t\n\t    \tnormal: {\n\t\n\t    \t\tuniforms: {\n\t\n\t    \t\t\topacity : { value: 1.0 }\n\t\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.normal_vert,\n\t    \t\tfragmentShader: ShaderChunk.normal_frag\n\t\n\t    \t},\n\t\n\t    \t/* -------------------------------------------------------------------------\n\t    \t//\tCube map shader\n\t    \t ------------------------------------------------------------------------- */\n\t\n\t    \tcube: {\n\t\n\t    \t\tuniforms: {\n\t    \t\t\ttCube: { value: null },\n\t    \t\t\ttFlip: { value: - 1 },\n\t    \t\t\topacity: { value: 1.0 }\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.cube_vert,\n\t    \t\tfragmentShader: ShaderChunk.cube_frag\n\t\n\t    \t},\n\t\n\t    \t/* -------------------------------------------------------------------------\n\t    \t//\tCube map shader\n\t    \t ------------------------------------------------------------------------- */\n\t\n\t    \tequirect: {\n\t\n\t    \t\tuniforms: {\n\t    \t\t\ttEquirect: { value: null },\n\t    \t\t\ttFlip: { value: - 1 }\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.equirect_vert,\n\t    \t\tfragmentShader: ShaderChunk.equirect_frag\n\t\n\t    \t},\n\t\n\t    \tdistanceRGBA: {\n\t\n\t    \t\tuniforms: {\n\t\n\t    \t\t\tlightPos: { value: new Vector3() }\n\t\n\t    \t\t},\n\t\n\t    \t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t    \t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    ShaderLib.physical = {\n\t\n\t    \tuniforms: exports.UniformsUtils.merge( [\n\t\n\t    \t\tShaderLib.standard.uniforms,\n\t\n\t    \t\t{\n\t    \t\t\tclearCoat: { value: 0 },\n\t    \t\t\tclearCoatRoughness: { value: 0 }\n\t    \t\t}\n\t\n\t    \t] ),\n\t\n\t    \tvertexShader: ShaderChunk.meshphysical_vert,\n\t    \tfragmentShader: ShaderChunk.meshphysical_frag\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Box2( min, max ) {\n\t\n\t    \tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t    \tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\t\n\t    }\n\t\n\t    Box2.prototype = {\n\t\n\t    \tconstructor: Box2,\n\t\n\t    \tset: function ( min, max ) {\n\t\n\t    \t\tthis.min.copy( min );\n\t    \t\tthis.max.copy( max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromPoints: function ( points ) {\n\t\n\t    \t\tthis.makeEmpty();\n\t\n\t    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.expandByPoint( points[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromCenterAndSize: function () {\n\t\n\t    \t\tvar v1 = new Vector2();\n\t\n\t    \t\treturn function setFromCenterAndSize( center, size ) {\n\t\n\t    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t    \t\t\tthis.min.copy( center ).sub( halfSize );\n\t    \t\t\tthis.max.copy( center ).add( halfSize );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( box ) {\n\t\n\t    \t\tthis.min.copy( box.min );\n\t    \t\tthis.max.copy( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeEmpty: function () {\n\t\n\t    \t\tthis.min.x = this.min.y = + Infinity;\n\t    \t\tthis.max.x = this.max.y = - Infinity;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tisEmpty: function () {\n\t\n\t    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\n\t    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\t\n\t    \t},\n\t\n\t    \tgetCenter: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\t\n\t    \t},\n\t\n\t    \tgetSize: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\t\n\t    \t},\n\t\n\t    \texpandByPoint: function ( point ) {\n\t\n\t    \t\tthis.min.min( point );\n\t    \t\tthis.max.max( point );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByVector: function ( vector ) {\n\t\n\t    \t\tthis.min.sub( vector );\n\t    \t\tthis.max.add( vector );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByScalar: function ( scalar ) {\n\t\n\t    \t\tthis.min.addScalar( - scalar );\n\t    \t\tthis.max.addScalar( scalar );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t    \t\t     point.y < this.min.y || point.y > this.max.y ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tcontainsBox: function ( box ) {\n\t\n\t    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t    \t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tgetParameter: function ( point, optionalTarget ) {\n\t\n\t    \t\t// This can potentially have a divide by zero if the box\n\t    \t\t// has a size dimension of 0.\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t\n\t    \t\treturn result.set(\n\t    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t    \t\t);\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\t// using 6 splitting planes to rule out intersections.\n\t\n\t    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t    \t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tclampPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector2();\n\t    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function () {\n\t\n\t    \t\tvar v1 = new Vector2();\n\t\n\t    \t\treturn function distanceToPoint( point ) {\n\t\n\t    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t    \t\t\treturn clampedPoint.sub( point ).length();\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersect: function ( box ) {\n\t\n\t    \t\tthis.min.max( box.min );\n\t    \t\tthis.max.min( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tunion: function ( box ) {\n\t\n\t    \t\tthis.min.min( box.min );\n\t    \t\tthis.max.max( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.min.add( offset );\n\t    \t\tthis.max.add( offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( box ) {\n\t\n\t    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function LensFlarePlugin( renderer, flares ) {\n\t\n\t    \tvar gl = renderer.context;\n\t    \tvar state = renderer.state;\n\t\n\t    \tvar vertexBuffer, elementBuffer;\n\t    \tvar shader, program, attributes, uniforms;\n\t\n\t    \tvar tempTexture, occlusionTexture;\n\t\n\t    \tfunction init() {\n\t\n\t    \t\tvar vertices = new Float32Array( [\n\t    \t\t\t- 1, - 1,  0, 0,\n\t    \t\t\t 1, - 1,  1, 0,\n\t    \t\t\t 1,  1,  1, 1,\n\t    \t\t\t- 1,  1,  0, 1\n\t    \t\t] );\n\t\n\t    \t\tvar faces = new Uint16Array( [\n\t    \t\t\t0, 1, 2,\n\t    \t\t\t0, 2, 3\n\t    \t\t] );\n\t\n\t    \t\t// buffers\n\t\n\t    \t\tvertexBuffer     = gl.createBuffer();\n\t    \t\telementBuffer    = gl.createBuffer();\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\t\n\t    \t\t// textures\n\t\n\t    \t\ttempTexture      = gl.createTexture();\n\t    \t\tocclusionTexture = gl.createTexture();\n\t\n\t    \t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\n\t    \t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\n\t    \t\tshader = {\n\t\n\t    \t\t\tvertexShader: [\n\t\n\t    \t\t\t\t\"uniform lowp int renderType;\",\n\t\n\t    \t\t\t\t\"uniform vec3 screenPosition;\",\n\t    \t\t\t\t\"uniform vec2 scale;\",\n\t    \t\t\t\t\"uniform float rotation;\",\n\t\n\t    \t\t\t\t\"uniform sampler2D occlusionMap;\",\n\t\n\t    \t\t\t\t\"attribute vec2 position;\",\n\t    \t\t\t\t\"attribute vec2 uv;\",\n\t\n\t    \t\t\t\t\"varying vec2 vUV;\",\n\t    \t\t\t\t\"varying float vVisibility;\",\n\t\n\t    \t\t\t\t\"void main() {\",\n\t\n\t    \t\t\t\t\t\"vUV = uv;\",\n\t\n\t    \t\t\t\t\t\"vec2 pos = position;\",\n\t\n\t    \t\t\t\t\t\"if ( renderType == 2 ) {\",\n\t\n\t    \t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\t\n\t    \t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t    \t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\t\n\t    \t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t    \t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\t\n\t    \t\t\t\t\t\"}\",\n\t\n\t    \t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\t\n\t    \t\t\t\t\"}\"\n\t\n\t    \t\t\t].join( \"\\n\" ),\n\t\n\t    \t\t\tfragmentShader: [\n\t\n\t    \t\t\t\t\"uniform lowp int renderType;\",\n\t\n\t    \t\t\t\t\"uniform sampler2D map;\",\n\t    \t\t\t\t\"uniform float opacity;\",\n\t    \t\t\t\t\"uniform vec3 color;\",\n\t\n\t    \t\t\t\t\"varying vec2 vUV;\",\n\t    \t\t\t\t\"varying float vVisibility;\",\n\t\n\t    \t\t\t\t\"void main() {\",\n\t\n\t    \t\t\t\t\t// pink square\n\t\n\t    \t\t\t\t\t\"if ( renderType == 0 ) {\",\n\t\n\t    \t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\t\n\t    \t\t\t\t\t// restore\n\t\n\t    \t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\t\n\t    \t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\t\n\t    \t\t\t\t\t// flare\n\t\n\t    \t\t\t\t\t\"} else {\",\n\t\n\t    \t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t    \t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t    \t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t    \t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\t\n\t    \t\t\t\t\t\"}\",\n\t\n\t    \t\t\t\t\"}\"\n\t\n\t    \t\t\t].join( \"\\n\" )\n\t\n\t    \t\t};\n\t\n\t    \t\tprogram = createProgram( shader );\n\t\n\t    \t\tattributes = {\n\t    \t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t    \t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t    \t\t};\n\t\n\t    \t\tuniforms = {\n\t    \t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t    \t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t    \t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t    \t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t    \t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t    \t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t    \t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t    \t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \t/*\n\t    \t * Render lens flares\n\t    \t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t    \t *         reads these back and calculates occlusion.\n\t    \t */\n\t\n\t    \tthis.render = function ( scene, camera, viewport ) {\n\t\n\t    \t\tif ( flares.length === 0 ) return;\n\t\n\t    \t\tvar tempPosition = new Vector3();\n\t\n\t    \t\tvar invAspect = viewport.w / viewport.z,\n\t    \t\t\thalfViewportWidth = viewport.z * 0.5,\n\t    \t\t\thalfViewportHeight = viewport.w * 0.5;\n\t\n\t    \t\tvar size = 16 / viewport.w,\n\t    \t\t\tscale = new Vector2( size * invAspect, size );\n\t\n\t    \t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n\t    \t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\t\n\t    \t\tvar validArea = new Box2();\n\t\n\t    \t\tvalidArea.min.set( 0, 0 );\n\t    \t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\tinit();\n\t\n\t    \t\t}\n\t\n\t    \t\tgl.useProgram( program );\n\t\n\t    \t\tstate.initAttributes();\n\t    \t\tstate.enableAttribute( attributes.vertex );\n\t    \t\tstate.enableAttribute( attributes.uv );\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t\t// loop through all lens flares to update their occlusion and positions\n\t    \t\t// setup gl and common used attribs/uniforms\n\t\n\t    \t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t    \t\tgl.uniform1i( uniforms.map, 1 );\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\n\t    \t\tstate.disable( gl.CULL_FACE );\n\t    \t\tstate.setDepthWrite( false );\n\t\n\t    \t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\t\n\t    \t\t\tsize = 16 / viewport.w;\n\t    \t\t\tscale.set( size * invAspect, size );\n\t\n\t    \t\t\t// calc object screen position\n\t\n\t    \t\t\tvar flare = flares[ i ];\n\t\n\t    \t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\t\n\t    \t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t    \t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\t\n\t    \t\t\t// setup arrays for gl programs\n\t\n\t    \t\t\tscreenPosition.copy( tempPosition );\n\t\n\t    \t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\t\n\t    \t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t    \t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\t\n\t    \t\t\t// screen cull\n\t\n\t    \t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\t\n\t    \t\t\t\t// save current RGB to temp texture\n\t\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\t\n\t\n\t    \t\t\t\t// render pink quad\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t    \t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t    \t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\n\t    \t\t\t\tstate.disable( gl.BLEND );\n\t    \t\t\t\tstate.enable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\n\t    \t\t\t\t// copy result to occlusionMap\n\t\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\t\n\t\n\t    \t\t\t\t// restore graphics\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t    \t\t\t\tstate.disable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\n\t    \t\t\t\t// update object positions\n\t\n\t    \t\t\t\tflare.positionScreen.copy( screenPosition );\n\t\n\t    \t\t\t\tif ( flare.customUpdateCallback ) {\n\t\n\t    \t\t\t\t\tflare.customUpdateCallback( flare );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tflare.updateLensFlares();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// render flares\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t    \t\t\t\tstate.enable( gl.BLEND );\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\t\n\t    \t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\t\n\t    \t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t    \t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t    \t\t\t\t\t\tscreenPosition.z = sprite.z;\n\t\n\t    \t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\t\n\t    \t\t\t\t\t\tscale.x = size * invAspect;\n\t    \t\t\t\t\t\tscale.y = size;\n\t\n\t    \t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t    \t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t    \t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\t\n\t    \t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t    \t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\t\n\t    \t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t    \t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\t\n\t    \t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// restore gl\n\t\n\t    \t\tstate.enable( gl.CULL_FACE );\n\t    \t\tstate.enable( gl.DEPTH_TEST );\n\t    \t\tstate.setDepthWrite( true );\n\t\n\t    \t\trenderer.resetGLState();\n\t\n\t    \t};\n\t\n\t    \tfunction createProgram( shader ) {\n\t\n\t    \t\tvar program = gl.createProgram();\n\t\n\t    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\n\t    \t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\t\n\t    \t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t    \t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\t\n\t    \t\tgl.compileShader( fragmentShader );\n\t    \t\tgl.compileShader( vertexShader );\n\t\n\t    \t\tgl.attachShader( program, fragmentShader );\n\t    \t\tgl.attachShader( program, vertexShader );\n\t\n\t    \t\tgl.linkProgram( program );\n\t\n\t    \t\treturn program;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function SpritePlugin( renderer, sprites ) {\n\t\n\t    \tvar gl = renderer.context;\n\t    \tvar state = renderer.state;\n\t\n\t    \tvar vertexBuffer, elementBuffer;\n\t    \tvar program, attributes, uniforms;\n\t\n\t    \tvar texture;\n\t\n\t    \t// decompose matrixWorld\n\t\n\t    \tvar spritePosition = new Vector3();\n\t    \tvar spriteRotation = new Quaternion();\n\t    \tvar spriteScale = new Vector3();\n\t\n\t    \tfunction init() {\n\t\n\t    \t\tvar vertices = new Float32Array( [\n\t    \t\t\t- 0.5, - 0.5,  0, 0,\n\t    \t\t\t  0.5, - 0.5,  1, 0,\n\t    \t\t\t  0.5,   0.5,  1, 1,\n\t    \t\t\t- 0.5,   0.5,  0, 1\n\t    \t\t] );\n\t\n\t    \t\tvar faces = new Uint16Array( [\n\t    \t\t\t0, 1, 2,\n\t    \t\t\t0, 2, 3\n\t    \t\t] );\n\t\n\t    \t\tvertexBuffer  = gl.createBuffer();\n\t    \t\telementBuffer = gl.createBuffer();\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\t\n\t    \t\tprogram = createProgram();\n\t\n\t    \t\tattributes = {\n\t    \t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t    \t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t    \t\t};\n\t\n\t    \t\tuniforms = {\n\t    \t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t    \t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\t\n\t    \t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t    \t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\t\n\t    \t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t    \t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t    \t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\t\n\t    \t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t    \t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\t\n\t    \t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t    \t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t    \t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t    \t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t    \t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\t\n\t    \t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t    \t\t};\n\t\n\t    \t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\tcanvas.width = 8;\n\t    \t\tcanvas.height = 8;\n\t\n\t    \t\tvar context = canvas.getContext( '2d' );\n\t    \t\tcontext.fillStyle = 'white';\n\t    \t\tcontext.fillRect( 0, 0, 8, 8 );\n\t\n\t    \t\ttexture = new Texture( canvas );\n\t    \t\ttexture.needsUpdate = true;\n\t\n\t    \t}\n\t\n\t    \tthis.render = function ( scene, camera ) {\n\t\n\t    \t\tif ( sprites.length === 0 ) return;\n\t\n\t    \t\t// setup gl\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\tinit();\n\t\n\t    \t\t}\n\t\n\t    \t\tgl.useProgram( program );\n\t\n\t    \t\tstate.initAttributes();\n\t    \t\tstate.enableAttribute( attributes.position );\n\t    \t\tstate.enableAttribute( attributes.uv );\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t\tstate.disable( gl.CULL_FACE );\n\t    \t\tstate.enable( gl.BLEND );\n\t\n\t    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t    \t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\t\n\t    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\n\t    \t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\t\n\t    \t\tstate.activeTexture( gl.TEXTURE0 );\n\t    \t\tgl.uniform1i( uniforms.map, 0 );\n\t\n\t    \t\tvar oldFogType = 0;\n\t    \t\tvar sceneFogType = 0;\n\t    \t\tvar fog = scene.fog;\n\t\n\t    \t\tif ( fog ) {\n\t\n\t    \t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\t\n\t    \t\t\tif ( (fog && fog.isFog) ) {\n\t\n\t    \t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t    \t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t    \t\t\t\toldFogType = 1;\n\t    \t\t\t\tsceneFogType = 1;\n\t\n\t    \t\t\t} else if ( (fog && fog.isFogExp2) ) {\n\t\n\t    \t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t    \t\t\t\toldFogType = 2;\n\t    \t\t\t\tsceneFogType = 2;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t    \t\t\toldFogType = 0;\n\t    \t\t\tsceneFogType = 0;\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\t// update positions and sort\n\t\n\t    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar sprite = sprites[ i ];\n\t\n\t    \t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t    \t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\t\n\t    \t\t}\n\t\n\t    \t\tsprites.sort( painterSortStable );\n\t\n\t    \t\t// render all sprites\n\t\n\t    \t\tvar scale = [];\n\t\n\t    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar sprite = sprites[ i ];\n\t    \t\t\tvar material = sprite.material;\n\t\n\t    \t\t\tif ( material.visible === false ) continue;\n\t\n\t    \t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t    \t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\t\n\t    \t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\t\n\t    \t\t\tscale[ 0 ] = spriteScale.x;\n\t    \t\t\tscale[ 1 ] = spriteScale.y;\n\t\n\t    \t\t\tvar fogType = 0;\n\t\n\t    \t\t\tif ( scene.fog && material.fog ) {\n\t\n\t    \t\t\t\tfogType = sceneFogType;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( oldFogType !== fogType ) {\n\t\n\t    \t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t    \t\t\t\toldFogType = fogType;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( material.map !== null ) {\n\t\n\t    \t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t    \t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t    \t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t    \t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\t\n\t    \t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t    \t\t\tgl.uniform2fv( uniforms.scale, scale );\n\t\n\t    \t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t    \t\t\tstate.setDepthTest( material.depthTest );\n\t    \t\t\tstate.setDepthWrite( material.depthWrite );\n\t\n\t    \t\t\tif ( material.map ) {\n\t\n\t    \t\t\t\trenderer.setTexture2D( material.map, 0 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\trenderer.setTexture2D( texture, 0 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\t// restore gl\n\t\n\t    \t\tstate.enable( gl.CULL_FACE );\n\t\n\t    \t\trenderer.resetGLState();\n\t\n\t    \t};\n\t\n\t    \tfunction createProgram() {\n\t\n\t    \t\tvar program = gl.createProgram();\n\t\n\t    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\n\t    \t\tgl.shaderSource( vertexShader, [\n\t\n\t    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\t\n\t    \t\t\t'uniform mat4 modelViewMatrix;',\n\t    \t\t\t'uniform mat4 projectionMatrix;',\n\t    \t\t\t'uniform float rotation;',\n\t    \t\t\t'uniform vec2 scale;',\n\t    \t\t\t'uniform vec2 uvOffset;',\n\t    \t\t\t'uniform vec2 uvScale;',\n\t\n\t    \t\t\t'attribute vec2 position;',\n\t    \t\t\t'attribute vec2 uv;',\n\t\n\t    \t\t\t'varying vec2 vUV;',\n\t\n\t    \t\t\t'void main() {',\n\t\n\t    \t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\t\n\t    \t\t\t\t'vec2 alignedPosition = position * scale;',\n\t\n\t    \t\t\t\t'vec2 rotatedPosition;',\n\t    \t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t    \t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\t\n\t    \t\t\t\t'vec4 finalPosition;',\n\t\n\t    \t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t    \t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t    \t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\t\n\t    \t\t\t\t'gl_Position = finalPosition;',\n\t\n\t    \t\t\t'}'\n\t\n\t    \t\t].join( '\\n' ) );\n\t\n\t    \t\tgl.shaderSource( fragmentShader, [\n\t\n\t    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\t\n\t    \t\t\t'uniform vec3 color;',\n\t    \t\t\t'uniform sampler2D map;',\n\t    \t\t\t'uniform float opacity;',\n\t\n\t    \t\t\t'uniform int fogType;',\n\t    \t\t\t'uniform vec3 fogColor;',\n\t    \t\t\t'uniform float fogDensity;',\n\t    \t\t\t'uniform float fogNear;',\n\t    \t\t\t'uniform float fogFar;',\n\t    \t\t\t'uniform float alphaTest;',\n\t\n\t    \t\t\t'varying vec2 vUV;',\n\t\n\t    \t\t\t'void main() {',\n\t\n\t    \t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\t\n\t    \t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\t\n\t    \t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\t\n\t    \t\t\t\t'if ( fogType > 0 ) {',\n\t\n\t    \t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t    \t\t\t\t\t'float fogFactor = 0.0;',\n\t\n\t    \t\t\t\t\t'if ( fogType == 1 ) {',\n\t\n\t    \t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\t\n\t    \t\t\t\t\t'} else {',\n\t\n\t    \t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t    \t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t    \t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\t\n\t    \t\t\t\t\t'}',\n\t\n\t    \t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\t\n\t    \t\t\t\t'}',\n\t\n\t    \t\t\t'}'\n\t\n\t    \t\t].join( '\\n' ) );\n\t\n\t    \t\tgl.compileShader( vertexShader );\n\t    \t\tgl.compileShader( fragmentShader );\n\t\n\t    \t\tgl.attachShader( program, vertexShader );\n\t    \t\tgl.attachShader( program, fragmentShader );\n\t\n\t    \t\tgl.linkProgram( program );\n\t\n\t    \t\treturn program;\n\t\n\t    \t}\n\t\n\t    \tfunction painterSortStable( a, b ) {\n\t\n\t    \t\tif ( a.renderOrder !== b.renderOrder ) {\n\t\n\t    \t\t\treturn a.renderOrder - b.renderOrder;\n\t\n\t    \t\t} else if ( a.z !== b.z ) {\n\t\n\t    \t\t\treturn b.z - a.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn b.id - a.id;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Material() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: MaterialIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'Material';\n\t\n\t    \tthis.fog = true;\n\t    \tthis.lights = true;\n\t\n\t    \tthis.blending = NormalBlending;\n\t    \tthis.side = FrontSide;\n\t    \tthis.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\t    \tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\t\n\t    \tthis.opacity = 1;\n\t    \tthis.transparent = false;\n\t\n\t    \tthis.blendSrc = SrcAlphaFactor;\n\t    \tthis.blendDst = OneMinusSrcAlphaFactor;\n\t    \tthis.blendEquation = AddEquation;\n\t    \tthis.blendSrcAlpha = null;\n\t    \tthis.blendDstAlpha = null;\n\t    \tthis.blendEquationAlpha = null;\n\t\n\t    \tthis.depthFunc = LessEqualDepth;\n\t    \tthis.depthTest = true;\n\t    \tthis.depthWrite = true;\n\t\n\t    \tthis.clippingPlanes = null;\n\t    \tthis.clipShadows = false;\n\t\n\t    \tthis.colorWrite = true;\n\t\n\t    \tthis.precision = null; // override the renderer's default precision for this material\n\t\n\t    \tthis.polygonOffset = false;\n\t    \tthis.polygonOffsetFactor = 0;\n\t    \tthis.polygonOffsetUnits = 0;\n\t\n\t    \tthis.alphaTest = 0;\n\t    \tthis.premultipliedAlpha = false;\n\t\n\t    \tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\t\n\t    \tthis.visible = true;\n\t\n\t    \tthis._needsUpdate = true;\n\t\n\t    }\n\t\n\t    Material.prototype = {\n\t\n\t    \tconstructor: Material,\n\t\n\t    \tisMaterial: true,\n\t\n\t    \tget needsUpdate() {\n\t\n\t    \t\treturn this._needsUpdate;\n\t\n\t    \t},\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.update();\n\t    \t\tthis._needsUpdate = value;\n\t\n\t    \t},\n\t\n\t    \tsetValues: function ( values ) {\n\t\n\t    \t\tif ( values === undefined ) return;\n\t\n\t    \t\tfor ( var key in values ) {\n\t\n\t    \t\t\tvar newValue = values[ key ];\n\t\n\t    \t\t\tif ( newValue === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar currentValue = this[ key ];\n\t\n\t    \t\t\tif ( currentValue === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( (currentValue && currentValue.isColor) ) {\n\t\n\t    \t\t\t\tcurrentValue.set( newValue );\n\t\n\t    \t\t\t} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {\n\t\n\t    \t\t\t\tcurrentValue.copy( newValue );\n\t\n\t    \t\t\t} else if ( key === 'overdraw' ) {\n\t\n\t    \t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t    \t\t\t\tthis[ key ] = Number( newValue );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis[ key ] = newValue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar isRoot = meta === undefined;\n\t\n\t    \t\tif ( isRoot ) {\n\t\n\t    \t\t\tmeta = {\n\t    \t\t\t\ttextures: {},\n\t    \t\t\t\timages: {}\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tvar data = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Material',\n\t    \t\t\t\tgenerator: 'Material.toJSON'\n\t    \t\t\t}\n\t    \t\t};\n\t\n\t    \t\t// standard Material serialization\n\t    \t\tdata.uuid = this.uuid;\n\t    \t\tdata.type = this.type;\n\t\n\t    \t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t    \t\tif ( (this.color && this.color.isColor) ) data.color = this.color.getHex();\n\t\n\t    \t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t    \t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\t\n\t    \t\tif ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();\n\t    \t\tif ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();\n\t    \t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\n\t    \t\tif ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;\n\t    \t\tif ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.bumpMap && this.bumpMap.isTexture) ) {\n\t\n\t    \t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.bumpScale = this.bumpScale;\n\t\n\t    \t\t}\n\t    \t\tif ( (this.normalMap && this.normalMap.isTexture) ) {\n\t\n\t    \t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.normalScale = this.normalScale.toArray();\n\t\n\t    \t\t}\n\t    \t\tif ( (this.displacementMap && this.displacementMap.isTexture) ) {\n\t\n\t    \t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.displacementScale = this.displacementScale;\n\t    \t\t\tdata.displacementBias = this.displacementBias;\n\t\n\t    \t\t}\n\t    \t\tif ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\t\n\t    \t\tif ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t    \t\tif ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\n\t    \t\tif ( (this.envMap && this.envMap.isTexture) ) {\n\t\n\t    \t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t    \t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.size !== undefined ) data.size = this.size;\n\t    \t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\t\n\t    \t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t    \t\tif ( this.shading !== SmoothShading ) data.shading = this.shading;\n\t    \t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t    \t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\t\n\t    \t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t    \t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\t\n\t    \t\tdata.depthFunc = this.depthFunc;\n\t    \t\tdata.depthTest = this.depthTest;\n\t    \t\tdata.depthWrite = this.depthWrite;\n\t\n\t    \t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t    \t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t    \t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t    \t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t    \t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t    \t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\t\n\t    \t\tdata.skinning = this.skinning;\n\t    \t\tdata.morphTargets = this.morphTargets;\n\t\n\t    \t\t// TODO: Copied from Object3D.toJSON\n\t\n\t    \t\tfunction extractFromCache( cache ) {\n\t\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\tfor ( var key in cache ) {\n\t\n\t    \t\t\t\tvar data = cache[ key ];\n\t    \t\t\t\tdelete data.metadata;\n\t    \t\t\t\tvalues.push( data );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn values;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( isRoot ) {\n\t\n\t    \t\t\tvar textures = extractFromCache( meta.textures );\n\t    \t\t\tvar images = extractFromCache( meta.images );\n\t\n\t    \t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t    \t\t\tif ( images.length > 0 ) data.images = images;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn data;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.name = source.name;\n\t\n\t    \t\tthis.fog = source.fog;\n\t    \t\tthis.lights = source.lights;\n\t\n\t    \t\tthis.blending = source.blending;\n\t    \t\tthis.side = source.side;\n\t    \t\tthis.shading = source.shading;\n\t    \t\tthis.vertexColors = source.vertexColors;\n\t\n\t    \t\tthis.opacity = source.opacity;\n\t    \t\tthis.transparent = source.transparent;\n\t\n\t    \t\tthis.blendSrc = source.blendSrc;\n\t    \t\tthis.blendDst = source.blendDst;\n\t    \t\tthis.blendEquation = source.blendEquation;\n\t    \t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t    \t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t    \t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\n\t    \t\tthis.depthFunc = source.depthFunc;\n\t    \t\tthis.depthTest = source.depthTest;\n\t    \t\tthis.depthWrite = source.depthWrite;\n\t\n\t    \t\tthis.colorWrite = source.colorWrite;\n\t\n\t    \t\tthis.precision = source.precision;\n\t\n\t    \t\tthis.polygonOffset = source.polygonOffset;\n\t    \t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t    \t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\n\t    \t\tthis.alphaTest = source.alphaTest;\n\t\n\t    \t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\n\t    \t\tthis.overdraw = source.overdraw;\n\t\n\t    \t\tthis.visible = source.visible;\n\t    \t\tthis.clipShadows = source.clipShadows;\n\t\n\t    \t\tvar srcPlanes = source.clippingPlanes,\n\t    \t\t\tdstPlanes = null;\n\t\n\t    \t\tif ( srcPlanes !== null ) {\n\t\n\t    \t\t\tvar n = srcPlanes.length;\n\t    \t\t\tdstPlanes = new Array( n );\n\t\n\t    \t\t\tfor ( var i = 0; i !== n; ++ i )\n\t    \t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.clippingPlanes = dstPlanes;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tupdate: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'update' } );\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( Material.prototype, EventDispatcher.prototype );\n\t\n\t    var count$1 = 0;\n\t    function MaterialIdCount() { return count$1++; };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  defines: { \"label\" : \"value\" },\n\t     *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t     *\n\t     *  fragmentShader: <string>,\n\t     *  vertexShader: <string>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  lights: <bool>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function ShaderMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'ShaderMaterial';\n\t\n\t    \tthis.defines = {};\n\t    \tthis.uniforms = {};\n\t\n\t    \tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\t    \tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\t\n\t    \tthis.linewidth = 1;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t\n\t    \tthis.fog = false; // set to use scene fog\n\t    \tthis.lights = false; // set to use scene lights\n\t    \tthis.clipping = false; // set to use user-defined clipping planes\n\t\n\t    \tthis.skinning = false; // set to use skinning attribute streams\n\t    \tthis.morphTargets = false; // set to use morph targets\n\t    \tthis.morphNormals = false; // set to use morph normals\n\t\n\t    \tthis.extensions = {\n\t    \t\tderivatives: false, // set to use derivatives\n\t    \t\tfragDepth: false, // set to use fragment depth values\n\t    \t\tdrawBuffers: false, // set to use draw buffers\n\t    \t\tshaderTextureLOD: false // set to use shader texture LOD\n\t    \t};\n\t\n\t    \t// When rendered geometry doesn't include these attributes but the material does,\n\t    \t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t    \tthis.defaultAttributeValues = {\n\t    \t\t'color': [ 1, 1, 1 ],\n\t    \t\t'uv': [ 0, 0 ],\n\t    \t\t'uv2': [ 0, 0 ]\n\t    \t};\n\t\n\t    \tthis.index0AttributeName = undefined;\n\t\n\t    \tif ( parameters !== undefined ) {\n\t\n\t    \t\tif ( parameters.attributes !== undefined ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.setValues( parameters );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    ShaderMaterial.prototype = Object.create( Material.prototype );\n\t    ShaderMaterial.prototype.constructor = ShaderMaterial;\n\t\n\t    ShaderMaterial.prototype.isShaderMaterial = true;\n\t\n\t    ShaderMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.fragmentShader = source.fragmentShader;\n\t    \tthis.vertexShader = source.vertexShader;\n\t\n\t    \tthis.uniforms = exports.UniformsUtils.clone( source.uniforms );\n\t\n\t    \tthis.defines = source.defines;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t    \tthis.lights = source.lights;\n\t    \tthis.clipping = source.clipping;\n\t\n\t    \tthis.skinning = source.skinning;\n\t\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \tthis.extensions = source.extensions;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    ShaderMaterial.prototype.toJSON = function ( meta ) {\n\t\n\t    \tvar data = Material.prototype.toJSON.call( this, meta );\n\t\n\t    \tdata.uniforms = this.uniforms;\n\t    \tdata.vertexShader = this.vertexShader;\n\t    \tdata.fragmentShader = this.fragmentShader;\n\t\n\t    \treturn data;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author bhouston / https://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * parameters = {\n\t     *\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  displacementMap: new THREE.Texture( <Image> ),\n\t     *  displacementScale: <float>,\n\t     *  displacementBias: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>\n\t     * }\n\t     */\n\t\n\t    function MeshDepthMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshDepthMaterial';\n\t\n\t    \tthis.depthPacking = BasicDepthPacking;\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.displacementMap = null;\n\t    \tthis.displacementScale = 1;\n\t    \tthis.displacementBias = 0;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t\n\t    \tthis.fog = false;\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshDepthMaterial.prototype = Object.create( Material.prototype );\n\t    MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\t\n\t    MeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\t\n\t    MeshDepthMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.depthPacking = source.depthPacking;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.displacementMap = source.displacementMap;\n\t    \tthis.displacementScale = source.displacementScale;\n\t    \tthis.displacementBias = source.displacementBias;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function Box3( min, max ) {\n\t\n\t    \tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t    \tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\t\n\t    }\n\t\n\t    Box3.prototype = {\n\t\n\t    \tconstructor: Box3,\n\t\n\t    \tisBox3: true,\n\t\n\t    \tset: function ( min, max ) {\n\t\n\t    \t\tthis.min.copy( min );\n\t    \t\tthis.max.copy( max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromArray: function ( array ) {\n\t\n\t    \t\tvar minX = + Infinity;\n\t    \t\tvar minY = + Infinity;\n\t    \t\tvar minZ = + Infinity;\n\t\n\t    \t\tvar maxX = - Infinity;\n\t    \t\tvar maxY = - Infinity;\n\t    \t\tvar maxZ = - Infinity;\n\t\n\t    \t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\t\n\t    \t\t\tvar x = array[ i ];\n\t    \t\t\tvar y = array[ i + 1 ];\n\t    \t\t\tvar z = array[ i + 2 ];\n\t\n\t    \t\t\tif ( x < minX ) minX = x;\n\t    \t\t\tif ( y < minY ) minY = y;\n\t    \t\t\tif ( z < minZ ) minZ = z;\n\t\n\t    \t\t\tif ( x > maxX ) maxX = x;\n\t    \t\t\tif ( y > maxY ) maxY = y;\n\t    \t\t\tif ( z > maxZ ) maxZ = z;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.min.set( minX, minY, minZ );\n\t    \t\tthis.max.set( maxX, maxY, maxZ );\n\t\n\t    \t},\n\t\n\t    \tsetFromPoints: function ( points ) {\n\t\n\t    \t\tthis.makeEmpty();\n\t\n\t    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.expandByPoint( points[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromCenterAndSize: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function setFromCenterAndSize( center, size ) {\n\t\n\t    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\n\t    \t\t\tthis.min.copy( center ).sub( halfSize );\n\t    \t\t\tthis.max.copy( center ).add( halfSize );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetFromObject: function () {\n\t\n\t    \t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t    \t\t// accounting for both the object's, and children's, world transforms\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function setFromObject( object ) {\n\t\n\t    \t\t\tvar scope = this;\n\t\n\t    \t\t\tobject.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.makeEmpty();\n\t\n\t    \t\t\tobject.traverse( function ( node ) {\n\t\n\t    \t\t\t\tvar geometry = node.geometry;\n\t\n\t    \t\t\t\tif ( geometry !== undefined ) {\n\t\n\t    \t\t\t\t\tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\n\t    \t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t    \t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\t\n\t    \t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\t\n\t    \t\t\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\t\t\t\tvar array, offset, stride;\n\t\n\t    \t\t\t\t\t\t\tif ( (attribute && attribute.isInterleavedBufferAttribute) ) {\n\t\n\t    \t\t\t\t\t\t\t\tarray = attribute.data.array;\n\t    \t\t\t\t\t\t\t\toffset = attribute.offset;\n\t    \t\t\t\t\t\t\t\tstride = attribute.data.stride;\n\t\n\t    \t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\tarray = attribute.array;\n\t    \t\t\t\t\t\t\t\toffset = 0;\n\t    \t\t\t\t\t\t\t\tstride = 3;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tfor ( var i = offset, il = array.length; i < il; i += stride ) {\n\t\n\t    \t\t\t\t\t\t\t\tv1.fromArray( array, i );\n\t    \t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\t\n\t    \t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( box ) {\n\t\n\t    \t\tthis.min.copy( box.min );\n\t    \t\tthis.max.copy( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tmakeEmpty: function () {\n\t\n\t    \t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t    \t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tisEmpty: function () {\n\t\n\t    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\n\t    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\t\n\t    \t},\n\t\n\t    \tgetCenter: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\t\n\t    \t},\n\t\n\t    \tgetSize: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\t\n\t    \t},\n\t\n\t    \texpandByPoint: function ( point ) {\n\t\n\t    \t\tthis.min.min( point );\n\t    \t\tthis.max.max( point );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByVector: function ( vector ) {\n\t\n\t    \t\tthis.min.sub( vector );\n\t    \t\tthis.max.add( vector );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \texpandByScalar: function ( scalar ) {\n\t\n\t    \t\tthis.min.addScalar( - scalar );\n\t    \t\tthis.max.addScalar( scalar );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t    \t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n\t    \t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tcontainsBox: function ( box ) {\n\t\n\t    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t    \t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n\t    \t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tgetParameter: function ( point, optionalTarget ) {\n\t\n\t    \t\t// This can potentially have a divide by zero if the box\n\t    \t\t// has a size dimension of 0.\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn result.set(\n\t    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t    \t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t    \t\t);\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\t// using 6 splitting planes to rule out intersections.\n\t\n\t    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t    \t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n\t    \t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\t\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tintersectsSphere: ( function () {\n\t\n\t    \t\tvar closestPoint;\n\t\n\t    \t\treturn function intersectsSphere( sphere ) {\n\t\n\t    \t\t\tif ( closestPoint === undefined ) closestPoint = new Vector3();\n\t\n\t    \t\t\t// Find the point on the AABB closest to the sphere center.\n\t    \t\t\tthis.clampPoint( sphere.center, closestPoint );\n\t\n\t    \t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t    \t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \tintersectsPlane: function ( plane ) {\n\t\n\t    \t\t// We compute the minimum and maximum dot product values. If those values\n\t    \t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\n\t    \t\tvar min, max;\n\t\n\t    \t\tif ( plane.normal.x > 0 ) {\n\t\n\t    \t\t\tmin = plane.normal.x * this.min.x;\n\t    \t\t\tmax = plane.normal.x * this.max.x;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmin = plane.normal.x * this.max.x;\n\t    \t\t\tmax = plane.normal.x * this.min.x;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( plane.normal.y > 0 ) {\n\t\n\t    \t\t\tmin += plane.normal.y * this.min.y;\n\t    \t\t\tmax += plane.normal.y * this.max.y;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmin += plane.normal.y * this.max.y;\n\t    \t\t\tmax += plane.normal.y * this.min.y;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( plane.normal.z > 0 ) {\n\t\n\t    \t\t\tmin += plane.normal.z * this.min.z;\n\t    \t\t\tmax += plane.normal.z * this.max.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmin += plane.normal.z * this.max.z;\n\t    \t\t\tmax += plane.normal.z * this.min.z;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn ( min <= plane.constant && max >= plane.constant );\n\t\n\t    \t},\n\t\n\t    \tclampPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function distanceToPoint( point ) {\n\t\n\t    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t    \t\t\treturn clampedPoint.sub( point ).length();\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetBoundingSphere: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function getBoundingSphere( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Sphere();\n\t\n\t    \t\t\tthis.getCenter( result.center );\n\t\n\t    \t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersect: function ( box ) {\n\t\n\t    \t\tthis.min.max( box.min );\n\t    \t\tthis.max.min( box.max );\n\t\n\t    \t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t    \t\tif( this.isEmpty() ) this.makeEmpty();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tunion: function ( box ) {\n\t\n\t    \t\tthis.min.min( box.min );\n\t    \t\tthis.max.max( box.max );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function () {\n\t\n\t    \t\tvar points = [\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3(),\n\t    \t\t\tnew Vector3()\n\t    \t\t];\n\t\n\t    \t\treturn function applyMatrix4( matrix ) {\n\t\n\t    \t\t\t// transform of empty box is an empty box.\n\t    \t\t\tif( this.isEmpty() ) return this;\n\t\n\t    \t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t    \t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t    \t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t    \t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t    \t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t    \t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t    \t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t    \t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t    \t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\t\n\t    \t\t\tthis.setFromPoints( points );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.min.add( offset );\n\t    \t\tthis.max.add( offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( box ) {\n\t\n\t    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Sphere( center, radius ) {\n\t\n\t    \tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t    \tthis.radius = ( radius !== undefined ) ? radius : 0;\n\t\n\t    }\n\t\n\t    Sphere.prototype = {\n\t\n\t    \tconstructor: Sphere,\n\t\n\t    \tset: function ( center, radius ) {\n\t\n\t    \t\tthis.center.copy( center );\n\t    \t\tthis.radius = radius;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromPoints: function () {\n\t\n\t    \t\tvar box = new Box3();\n\t\n\t    \t\treturn function setFromPoints( points, optionalCenter ) {\n\t\n\t    \t\t\tvar center = this.center;\n\t\n\t    \t\t\tif ( optionalCenter !== undefined ) {\n\t\n\t    \t\t\t\tcenter.copy( optionalCenter );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar maxRadiusSq = 0;\n\t\n\t    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( sphere ) {\n\t\n\t    \t\tthis.center.copy( sphere.center );\n\t    \t\tthis.radius = sphere.radius;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tempty: function () {\n\t\n\t    \t\treturn ( this.radius <= 0 );\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function ( point ) {\n\t\n\t    \t\treturn ( point.distanceTo( this.center ) - this.radius );\n\t\n\t    \t},\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\tvar radiusSum = this.radius + sphere.radius;\n\t\n\t    \t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\treturn box.intersectsSphere( this );\n\t\n\t    \t},\n\t\n\t    \tintersectsPlane: function ( plane ) {\n\t\n\t    \t\t// We use the following equation to compute the signed distance from\n\t    \t\t// the center of the sphere to the plane.\n\t    \t\t//\n\t    \t\t// distance = q * n - d\n\t    \t\t//\n\t    \t\t// If this distance is greater than the radius of the sphere,\n\t    \t\t// then there is no intersection.\n\t\n\t    \t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\t\n\t    \t},\n\t\n\t    \tclampPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tresult.copy( point );\n\t\n\t    \t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\t\n\t    \t\t\tresult.sub( this.center ).normalize();\n\t    \t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \tgetBoundingBox: function ( optionalTarget ) {\n\t\n\t    \t\tvar box = optionalTarget || new Box3();\n\t\n\t    \t\tbox.set( this.center, this.center );\n\t    \t\tbox.expandByScalar( this.radius );\n\t\n\t    \t\treturn box;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( matrix ) {\n\t\n\t    \t\tthis.center.applyMatrix4( matrix );\n\t    \t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.center.add( offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( sphere ) {\n\t\n\t    \t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author bhouston / http://clara.io\n\t     * @author tschw\n\t     */\n\t\n\t    function Matrix3() {\n\t\n\t    \tthis.elements = new Float32Array( [\n\t\n\t    \t\t1, 0, 0,\n\t    \t\t0, 1, 0,\n\t    \t\t0, 0, 1\n\t\n\t    \t] );\n\t\n\t    \tif ( arguments.length > 0 ) {\n\t\n\t    \t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Matrix3.prototype = {\n\t\n\t    \tconstructor: Matrix3,\n\t\n\t    \tisMatrix3: true,\n\t\n\t    \tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t    \t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t    \t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tidentity: function () {\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\t1, 0, 0,\n\t    \t\t\t0, 1, 0,\n\t    \t\t\t0, 0, 1\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().fromArray( this.elements );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( m ) {\n\t\n\t    \t\tvar me = m.elements;\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n\t    \t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n\t    \t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrix4: function( m ) {\n\t\n\t    \t\tvar me = m.elements;\n\t\n\t    \t\tthis.set(\n\t\n\t    \t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n\t    \t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n\t    \t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\t\n\t    \t\t);\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tapplyToVector3Array: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToVector3Array( array, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = array.length;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\t\n\t    \t\t\t\tv1.fromArray( array, j );\n\t    \t\t\t\tv1.applyMatrix3( this );\n\t    \t\t\t\tv1.toArray( array, j );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn array;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyToBuffer: function () {\n\t\n\t    \t\tvar v1;\n\t\n\t    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\t\n\t    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t    \t\t\tif ( offset === undefined ) offset = 0;\n\t    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\t\n\t    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\t\n\t    \t\t\t\tv1.x = buffer.getX( j );\n\t    \t\t\t\tv1.y = buffer.getY( j );\n\t    \t\t\t\tv1.z = buffer.getZ( j );\n\t\n\t    \t\t\t\tv1.applyMatrix3( this );\n\t\n\t    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn buffer;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmultiplyScalar: function ( s ) {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t    \t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t    \t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdeterminant: function () {\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t    \t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t    \t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\t\n\t    \t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\n\t    \t},\n\t\n\t    \tgetInverse: function ( matrix, throwOnDegenerate ) {\n\t\n\t    \t\tif ( (matrix && matrix.isMatrix4) ) {\n\t\n\t    \t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar me = matrix.elements,\n\t    \t\t\tte = this.elements,\n\t\n\t    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t    \t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t    \t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\t\n\t    \t\t\tt11 = n33 * n22 - n32 * n23,\n\t    \t\t\tt12 = n32 * n13 - n33 * n12,\n\t    \t\t\tt13 = n23 * n12 - n22 * n13,\n\t\n\t    \t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\n\t    \t\tif ( det === 0 ) {\n\t\n\t    \t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\t\n\t    \t\t\tif ( throwOnDegenerate === true ) {\n\t\n\t    \t\t\t\tthrow new Error( msg );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tconsole.warn( msg );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this.identity();\n\t    \t\t}\n\t\n\t    \t\tvar detInv = 1 / det;\n\t\n\t    \t\tte[ 0 ] = t11 * detInv;\n\t    \t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t    \t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\t\n\t    \t\tte[ 3 ] = t12 * detInv;\n\t    \t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t    \t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\t\n\t    \t\tte[ 6 ] = t13 * detInv;\n\t    \t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t    \t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttranspose: function () {\n\t\n\t    \t\tvar tmp, m = this.elements;\n\t\n\t    \t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t    \t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t    \t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tflattenToArrayOffset: function ( array, offset ) {\n\t\n\t    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t    \t\t\t\t\"- just use .toArray instead.\" );\n\t\n\t    \t\treturn this.toArray( array, offset );\n\t\n\t    \t},\n\t\n\t    \tgetNormalMatrix: function ( matrix4 ) {\n\t\n\t    \t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\t\n\t    \t},\n\t\n\t    \ttransposeIntoArray: function ( r ) {\n\t\n\t    \t\tvar m = this.elements;\n\t\n\t    \t\tr[ 0 ] = m[ 0 ];\n\t    \t\tr[ 1 ] = m[ 3 ];\n\t    \t\tr[ 2 ] = m[ 6 ];\n\t    \t\tr[ 3 ] = m[ 1 ];\n\t    \t\tr[ 4 ] = m[ 4 ];\n\t    \t\tr[ 5 ] = m[ 7 ];\n\t    \t\tr[ 6 ] = m[ 2 ];\n\t    \t\tr[ 7 ] = m[ 5 ];\n\t    \t\tr[ 8 ] = m[ 8 ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tfor( var i = 0; i < 9; i ++ ) {\n\t\n\t    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tvar te = this.elements;\n\t\n\t    \t\tarray[ offset ] = te[ 0 ];\n\t    \t\tarray[ offset + 1 ] = te[ 1 ];\n\t    \t\tarray[ offset + 2 ] = te[ 2 ];\n\t\n\t    \t\tarray[ offset + 3 ] = te[ 3 ];\n\t    \t\tarray[ offset + 4 ] = te[ 4 ];\n\t    \t\tarray[ offset + 5 ] = te[ 5 ];\n\t\n\t    \t\tarray[ offset + 6 ] = te[ 6 ];\n\t    \t\tarray[ offset + 7 ] = te[ 7 ];\n\t    \t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\n\t    \t\treturn array;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Plane( normal, constant ) {\n\t\n\t    \tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t    \tthis.constant = ( constant !== undefined ) ? constant : 0;\n\t\n\t    }\n\t\n\t    Plane.prototype = {\n\t\n\t    \tconstructor: Plane,\n\t\n\t    \tset: function ( normal, constant ) {\n\t\n\t    \t\tthis.normal.copy( normal );\n\t    \t\tthis.constant = constant;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetComponents: function ( x, y, z, w ) {\n\t\n\t    \t\tthis.normal.set( x, y, z );\n\t    \t\tthis.constant = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\t\n\t    \t\tthis.normal.copy( normal );\n\t    \t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromCoplanarPoints: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t    \t\tvar v2 = new Vector3();\n\t\n\t    \t\treturn function setFromCoplanarPoints( a, b, c ) {\n\t\n\t    \t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\t\n\t    \t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\t\n\t    \t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( plane ) {\n\t\n\t    \t\tthis.normal.copy( plane.normal );\n\t    \t\tthis.constant = plane.constant;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\n\t    \t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t    \t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t    \t\tthis.constant *= inverseNormalLength;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnegate: function () {\n\t\n\t    \t\tthis.constant *= - 1;\n\t    \t\tthis.normal.negate();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function ( point ) {\n\t\n\t    \t\treturn this.normal.dot( point ) + this.constant;\n\t\n\t    \t},\n\t\n\t    \tdistanceToSphere: function ( sphere ) {\n\t\n\t    \t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\t\n\t    \t},\n\t\n\t    \tprojectPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\t\n\t    \t},\n\t\n\t    \torthoPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\t\n\t    \t},\n\t\n\t    \tintersectLine: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function intersectLine( line, optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t\tvar direction = line.delta( v1 );\n\t\n\t    \t\t\tvar denominator = this.normal.dot( direction );\n\t\n\t    \t\t\tif ( denominator === 0 ) {\n\t\n\t    \t\t\t\t// line is coplanar, return origin\n\t    \t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\t\n\t    \t\t\t\t\treturn result.copy( line.start );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// Unsure if this is the correct method to handle this case.\n\t    \t\t\t\treturn undefined;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\t\n\t    \t\t\tif ( t < 0 || t > 1 ) {\n\t\n\t    \t\t\t\treturn undefined;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsLine: function ( line ) {\n\t\n\t    \t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\n\t    \t\tvar startSign = this.distanceToPoint( line.start );\n\t    \t\tvar endSign = this.distanceToPoint( line.end );\n\t\n\t    \t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function ( box ) {\n\t\n\t    \t\treturn box.intersectsPlane( this );\n\t\n\t    \t},\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\treturn sphere.intersectsPlane( this );\n\t\n\t    \t},\n\t\n\t    \tcoplanarPoint: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t    \t\tvar m1 = new Matrix3();\n\t\n\t    \t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\t\n\t    \t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\t\n\t    \t\t\t// transform normal based on theory here:\n\t    \t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t    \t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t    \t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t    \t\t\tthis.constant = - referencePoint.dot( normal );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function ( offset ) {\n\t\n\t    \t\tthis.constant = this.constant - offset.dot( this.normal );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( plane ) {\n\t\n\t    \t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Frustum( p0, p1, p2, p3, p4, p5 ) {\n\t\n\t    \tthis.planes = [\n\t\n\t    \t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t    \t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t    \t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t    \t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t    \t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t    \t\t( p5 !== undefined ) ? p5 : new Plane()\n\t\n\t    \t];\n\t\n\t    }\n\t\n\t    Frustum.prototype = {\n\t\n\t    \tconstructor: Frustum,\n\t\n\t    \tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t\n\t    \t\tplanes[ 0 ].copy( p0 );\n\t    \t\tplanes[ 1 ].copy( p1 );\n\t    \t\tplanes[ 2 ].copy( p2 );\n\t    \t\tplanes[ 3 ].copy( p3 );\n\t    \t\tplanes[ 4 ].copy( p4 );\n\t    \t\tplanes[ 5 ].copy( p5 );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( frustum ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t\n\t    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromMatrix: function ( m ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t    \t\tvar me = m.elements;\n\t    \t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t    \t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t    \t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t    \t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\t\n\t    \t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t    \t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t    \t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t    \t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t    \t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t    \t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tintersectsObject: function () {\n\t\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function intersectsObject( object ) {\n\t\n\t    \t\t\tvar geometry = object.geometry;\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null )\n\t    \t\t\t\tgeometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere )\n\t    \t\t\t\t.applyMatrix4( object.matrixWorld );\n\t\n\t    \t\t\treturn this.intersectsSphere( sphere );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsSprite: function () {\n\t\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function intersectsSprite( sprite ) {\n\t\n\t    \t\t\tsphere.center.set( 0, 0, 0 );\n\t    \t\t\tsphere.radius = 0.7071067811865476;\n\t    \t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\t\n\t    \t\t\treturn this.intersectsSphere( sphere );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t    \t\tvar center = sphere.center;\n\t    \t\tvar negRadius = - sphere.radius;\n\t\n\t    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\t\n\t    \t\t\tif ( distance < negRadius ) {\n\t\n\t    \t\t\t\treturn false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: function () {\n\t\n\t    \t\tvar p1 = new Vector3(),\n\t    \t\t\tp2 = new Vector3();\n\t\n\t    \t\treturn function intersectsBox( box ) {\n\t\n\t    \t\t\tvar planes = this.planes;\n\t\n\t    \t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\t\n\t    \t\t\t\tvar plane = planes[ i ];\n\t\n\t    \t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t    \t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t    \t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t    \t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t    \t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t    \t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\t\n\t    \t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t    \t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\t\n\t    \t\t\t\t// if both outside plane, no intersection\n\t\n\t    \t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\t\n\t    \t\t\t\t\treturn false;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\tvar planes = this.planes;\n\t\n\t    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\t\n\t    \t\t\t\treturn false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn true;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {\n\t\n\t    \tvar _gl = _renderer.context,\n\t    \t_state = _renderer.state,\n\t    \t_frustum = new Frustum(),\n\t    \t_projScreenMatrix = new Matrix4(),\n\t\n\t    \t_lightShadows = _lights.shadows,\n\t\n\t    \t_shadowMapSize = new Vector2(),\n\t    \t_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\t\n\t    \t_lookTarget = new Vector3(),\n\t    \t_lightPositionWorld = new Vector3(),\n\t\n\t    \t_renderList = [],\n\t\n\t    \t_MorphingFlag = 1,\n\t    \t_SkinningFlag = 2,\n\t\n\t    \t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\t\n\t    \t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t    \t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\t\n\t    \t_materialCache = {};\n\t\n\t    \tvar cubeDirections = [\n\t    \t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t    \t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t    \t];\n\t\n\t    \tvar cubeUps = [\n\t    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t    \t];\n\t\n\t    \tvar cube2DViewPorts = [\n\t    \t\tnew Vector4(), new Vector4(), new Vector4(),\n\t    \t\tnew Vector4(), new Vector4(), new Vector4()\n\t    \t];\n\t\n\t    \t// init\n\t\n\t    \tvar depthMaterialTemplate = new MeshDepthMaterial();\n\t    \tdepthMaterialTemplate.depthPacking = RGBADepthPacking;\n\t    \tdepthMaterialTemplate.clipping = true;\n\t\n\t    \tvar distanceShader = ShaderLib[ \"distanceRGBA\" ];\n\t    \tvar distanceUniforms = exports.UniformsUtils.clone( distanceShader.uniforms );\n\t\n\t    \tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\t\n\t    \t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t    \t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\t\n\t    \t\tvar depthMaterial = depthMaterialTemplate.clone();\n\t    \t\tdepthMaterial.morphTargets = useMorphing;\n\t    \t\tdepthMaterial.skinning = useSkinning;\n\t\n\t    \t\t_depthMaterials[ i ] = depthMaterial;\n\t\n\t    \t\tvar distanceMaterial = new ShaderMaterial( {\n\t    \t\t\tdefines: {\n\t    \t\t\t\t'USE_SHADOWMAP': ''\n\t    \t\t\t},\n\t    \t\t\tuniforms: distanceUniforms,\n\t    \t\t\tvertexShader: distanceShader.vertexShader,\n\t    \t\t\tfragmentShader: distanceShader.fragmentShader,\n\t    \t\t\tmorphTargets: useMorphing,\n\t    \t\t\tskinning: useSkinning,\n\t    \t\t\tclipping: true\n\t    \t\t} );\n\t\n\t    \t\t_distanceMaterials[ i ] = distanceMaterial;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar scope = this;\n\t\n\t    \tthis.enabled = false;\n\t\n\t    \tthis.autoUpdate = true;\n\t    \tthis.needsUpdate = false;\n\t\n\t    \tthis.type = PCFShadowMap;\n\t\n\t    \tthis.renderReverseSided = true;\n\t    \tthis.renderSingleSided = true;\n\t\n\t    \tthis.render = function ( scene, camera ) {\n\t\n\t    \t\tif ( scope.enabled === false ) return;\n\t    \t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\t\n\t    \t\tif ( _lightShadows.length === 0 ) return;\n\t\n\t    \t\t// Set GL state for depth map.\n\t    \t\t_state.clearColor( 1, 1, 1, 1 );\n\t    \t\t_state.disable( _gl.BLEND );\n\t    \t\t_state.setDepthTest( true );\n\t    \t\t_state.setScissorTest( false );\n\t\n\t    \t\t// render depth map\n\t\n\t    \t\tvar faceCount, isPointLight;\n\t\n\t    \t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar light = _lightShadows[ i ];\n\t    \t\t\tvar shadow = light.shadow;\n\t\n\t    \t\t\tif ( shadow === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar shadowCamera = shadow.camera;\n\t\n\t    \t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t    \t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\t\n\t    \t\t\tif ( (light && light.isPointLight) ) {\n\t\n\t    \t\t\t\tfaceCount = 6;\n\t    \t\t\t\tisPointLight = true;\n\t\n\t    \t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t    \t\t\t\tvar vpHeight = _shadowMapSize.y;\n\t\n\t    \t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t    \t\t\t\t// following orientation:\n\t    \t\t\t\t//\n\t    \t\t\t\t//  xzXZ\n\t    \t\t\t\t//   y Y\n\t    \t\t\t\t//\n\t    \t\t\t\t// X - Positive x direction\n\t    \t\t\t\t// x - Negative x direction\n\t    \t\t\t\t// Y - Positive y direction\n\t    \t\t\t\t// y - Negative y direction\n\t    \t\t\t\t// Z - Positive z direction\n\t    \t\t\t\t// z - Negative z direction\n\t\n\t    \t\t\t\t// positive X\n\t    \t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// negative X\n\t    \t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// positive Z\n\t    \t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// negative Z\n\t    \t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t    \t\t\t\t// positive Y\n\t    \t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t    \t\t\t\t// negative Y\n\t    \t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\t\n\t    \t\t\t\t_shadowMapSize.x *= 4.0;\n\t    \t\t\t\t_shadowMapSize.y *= 2.0;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tfaceCount = 1;\n\t    \t\t\t\tisPointLight = false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( shadow.map === null ) {\n\t\n\t    \t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\t\n\t    \t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\n\t    \t\t\t\tshadowCamera.updateProjectionMatrix();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( (shadow && shadow.isSpotLightShadow) ) {\n\t\n\t    \t\t\t\tshadow.update( light );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar shadowMap = shadow.map;\n\t    \t\t\tvar shadowMatrix = shadow.matrix;\n\t\n\t    \t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\t\n\t    \t\t\t_renderer.setRenderTarget( shadowMap );\n\t    \t\t\t_renderer.clear();\n\t\n\t    \t\t\t// render shadow map for each cube face (if omni-directional) or\n\t    \t\t\t// run a single pass if not\n\t\n\t    \t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\t\n\t    \t\t\t\tif ( isPointLight ) {\n\t\n\t    \t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t    \t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t    \t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\n\t    \t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t    \t\t\t\t\t_state.viewport( vpDimensions );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tshadowCamera.updateMatrixWorld();\n\t    \t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\t\n\t    \t\t\t\t// compute shadow matrix\n\t\n\t    \t\t\t\tshadowMatrix.set(\n\t    \t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t    \t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t    \t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t    \t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t    \t\t\t\t);\n\t\n\t    \t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t    \t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\t\n\t    \t\t\t\t// update camera matrices and frustum\n\t\n\t    \t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t    \t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\t\n\t    \t\t\t\t// set object matrices & frustum culling\n\t\n\t    \t\t\t\t_renderList.length = 0;\n\t\n\t    \t\t\t\tprojectObject( scene, camera, shadowCamera );\n\t\n\t    \t\t\t\t// render shadow map\n\t    \t\t\t\t// render regular objects\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\tvar object = _renderList[ j ];\n\t    \t\t\t\t\tvar geometry = _objects.update( object );\n\t    \t\t\t\t\tvar material = object.material;\n\t\n\t    \t\t\t\t\tif ( (material && material.isMultiMaterial) ) {\n\t\n\t    \t\t\t\t\t\tvar groups = geometry.groups;\n\t    \t\t\t\t\t\tvar materials = material.materials;\n\t\n\t    \t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\t\n\t    \t\t\t\t\t\t\tvar group = groups[ k ];\n\t    \t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\t\n\t    \t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\t\n\t    \t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t    \t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t    \t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Restore GL state.\n\t    \t\tvar clearColor = _renderer.getClearColor(),\n\t    \t\tclearAlpha = _renderer.getClearAlpha();\n\t    \t\t_renderer.setClearColor( clearColor, clearAlpha );\n\t\n\t    \t\tscope.needsUpdate = false;\n\t\n\t    \t};\n\t\n\t    \tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tvar result = null;\n\t\n\t    \t\tvar materialVariants = _depthMaterials;\n\t    \t\tvar customMaterial = object.customDepthMaterial;\n\t\n\t    \t\tif ( isPointLight ) {\n\t\n\t    \t\t\tmaterialVariants = _distanceMaterials;\n\t    \t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ! customMaterial ) {\n\t\n\t    \t\t\tvar useMorphing = false;\n\t\n\t    \t\t\tif ( material.morphTargets ) {\n\t\n\t    \t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\n\t    \t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\t\n\t    \t\t\tvar variantIndex = 0;\n\t\n\t    \t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t    \t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\t\n\t    \t\t\tresult = materialVariants[ variantIndex ];\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tresult = customMaterial;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( _renderer.localClippingEnabled &&\n\t    \t\t\t material.clipShadows === true &&\n\t    \t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\t\n\t    \t\t\t// in this case we need a unique material instance reflecting the\n\t    \t\t\t// appropriate state\n\t\n\t    \t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\t\n\t    \t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\t\n\t    \t\t\tif ( materialsForVariant === undefined ) {\n\t\n\t    \t\t\t\tmaterialsForVariant = {};\n\t    \t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\t\n\t    \t\t\tif ( cachedMaterial === undefined ) {\n\t\n\t    \t\t\t\tcachedMaterial = result.clone();\n\t    \t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tresult = cachedMaterial;\n\t\n\t    \t\t}\n\t\n\t    \t\tresult.visible = material.visible;\n\t    \t\tresult.wireframe = material.wireframe;\n\t\n\t    \t\tvar side = material.side;\n\t\n\t    \t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\t\n\t    \t\t\tside = FrontSide;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( scope.renderReverseSided ) {\n\t\n\t    \t\t\tif ( side === FrontSide ) side = BackSide;\n\t    \t\t\telse if ( side === BackSide ) side = FrontSide;\n\t\n\t    \t\t}\n\t\n\t    \t\tresult.side = side;\n\t\n\t    \t\tresult.clipShadows = material.clipShadows;\n\t    \t\tresult.clippingPlanes = material.clippingPlanes;\n\t\n\t    \t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t    \t\tresult.linewidth = material.linewidth;\n\t\n\t    \t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\t\n\t    \t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    \tfunction projectObject( object, camera, shadowCamera ) {\n\t\n\t    \t\tif ( object.visible === false ) return;\n\t\n\t    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\t\n\t    \t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\t\n\t    \t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\t\n\t    \t\t\t\tvar material = object.material;\n\t\n\t    \t\t\t\tif ( material.visible === true ) {\n\t\n\t    \t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\t    \t\t\t\t\t_renderList.push( object );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar children = object.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Ray( origin, direction ) {\n\t\n\t    \tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t    \tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\t\n\t    }\n\t\n\t    Ray.prototype = {\n\t\n\t    \tconstructor: Ray,\n\t\n\t    \tset: function ( origin, direction ) {\n\t\n\t    \t\tthis.origin.copy( origin );\n\t    \t\tthis.direction.copy( direction );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( ray ) {\n\t\n\t    \t\tthis.origin.copy( ray.origin );\n\t    \t\tthis.direction.copy( ray.direction );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tat: function ( t, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\t\n\t    \t},\n\t\n\t    \tlookAt: function ( v ) {\n\t\n\t    \t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trecast: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function recast( t ) {\n\t\n\t    \t\t\tthis.origin.copy( this.at( t, v1 ) );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclosestPointToPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\tresult.subVectors( point, this.origin );\n\t    \t\tvar directionDistance = result.dot( this.direction );\n\t\n\t    \t\tif ( directionDistance < 0 ) {\n\t\n\t    \t\t\treturn result.copy( this.origin );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\t\n\t    \t},\n\t\n\t    \tdistanceToPoint: function ( point ) {\n\t\n\t    \t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\t\n\t    \t},\n\t\n\t    \tdistanceSqToPoint: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function distanceSqToPoint( point ) {\n\t\n\t    \t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\t\n\t    \t\t\t// point behind the ray\n\t\n\t    \t\t\tif ( directionDistance < 0 ) {\n\t\n\t    \t\t\t\treturn this.origin.distanceToSquared( point );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\t\n\t    \t\t\treturn v1.distanceToSquared( point );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tdistanceSqToSegment: function () {\n\t\n\t    \t\tvar segCenter = new Vector3();\n\t    \t\tvar segDir = new Vector3();\n\t    \t\tvar diff = new Vector3();\n\t\n\t    \t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\t\n\t    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t    \t\t\t// It returns the min distance between the ray and the segment\n\t    \t\t\t// defined by v0 and v1\n\t    \t\t\t// It can also set two optional targets :\n\t    \t\t\t// - The closest point on the ray\n\t    \t\t\t// - The closest point on the segment\n\t\n\t    \t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t    \t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t    \t\t\tdiff.copy( this.origin ).sub( segCenter );\n\t\n\t    \t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t    \t\t\tvar a01 = - this.direction.dot( segDir );\n\t    \t\t\tvar b0 = diff.dot( this.direction );\n\t    \t\t\tvar b1 = - diff.dot( segDir );\n\t    \t\t\tvar c = diff.lengthSq();\n\t    \t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t    \t\t\tvar s0, s1, sqrDist, extDet;\n\t\n\t    \t\t\tif ( det > 0 ) {\n\t\n\t    \t\t\t\t// The ray and segment are not parallel.\n\t\n\t    \t\t\t\ts0 = a01 * b1 - b0;\n\t    \t\t\t\ts1 = a01 * b0 - b1;\n\t    \t\t\t\textDet = segExtent * det;\n\t\n\t    \t\t\t\tif ( s0 >= 0 ) {\n\t\n\t    \t\t\t\t\tif ( s1 >= - extDet ) {\n\t\n\t    \t\t\t\t\t\tif ( s1 <= extDet ) {\n\t\n\t    \t\t\t\t\t\t\t// region 0\n\t    \t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\n\t    \t\t\t\t\t\t\tvar invDet = 1 / det;\n\t    \t\t\t\t\t\t\ts0 *= invDet;\n\t    \t\t\t\t\t\t\ts1 *= invDet;\n\t    \t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t// region 1\n\t\n\t    \t\t\t\t\t\t\ts1 = segExtent;\n\t    \t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t    \t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t// region 5\n\t\n\t    \t\t\t\t\t\ts1 = - segExtent;\n\t    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( s1 <= - extDet ) {\n\t\n\t    \t\t\t\t\t\t// region 4\n\t\n\t    \t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t} else if ( s1 <= extDet ) {\n\t\n\t    \t\t\t\t\t\t// region 3\n\t\n\t    \t\t\t\t\t\ts0 = 0;\n\t    \t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t    \t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t// region 2\n\t\n\t    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// Ray and segment are parallel.\n\t\n\t    \t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t    \t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t    \t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( optionalPointOnRay ) {\n\t\n\t    \t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( optionalPointOnSegment ) {\n\t\n\t    \t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn sqrDist;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectSphere: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function intersectSphere( sphere, optionalTarget ) {\n\t\n\t    \t\t\tv1.subVectors( sphere.center, this.origin );\n\t    \t\t\tvar tca = v1.dot( this.direction );\n\t    \t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t    \t\t\tvar radius2 = sphere.radius * sphere.radius;\n\t\n\t    \t\t\tif ( d2 > radius2 ) return null;\n\t\n\t    \t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\t\n\t    \t\t\t// t0 = first intersect point - entrance on front of sphere\n\t    \t\t\tvar t0 = tca - thc;\n\t\n\t    \t\t\t// t1 = second intersect point - exit point on back of sphere\n\t    \t\t\tvar t1 = tca + thc;\n\t\n\t    \t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t    \t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\t\n\t    \t\t\t// test to see if t0 is behind the ray:\n\t    \t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t    \t\t\t// in order to always return an intersect point that is in front of the ray.\n\t    \t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\t\n\t    \t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t    \t\t\treturn this.at( t0, optionalTarget );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tintersectsSphere: function ( sphere ) {\n\t\n\t    \t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\t\n\t    \t},\n\t\n\t    \tdistanceToPlane: function ( plane ) {\n\t\n\t    \t\tvar denominator = plane.normal.dot( this.direction );\n\t\n\t    \t\tif ( denominator === 0 ) {\n\t\n\t    \t\t\t// line is coplanar, return origin\n\t    \t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\t\n\t    \t\t\t\treturn 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\t\n\t    \t\t// Return if the ray never intersects the plane\n\t\n\t    \t\treturn t >= 0 ? t :  null;\n\t\n\t    \t},\n\t\n\t    \tintersectPlane: function ( plane, optionalTarget ) {\n\t\n\t    \t\tvar t = this.distanceToPlane( plane );\n\t\n\t    \t\tif ( t === null ) {\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.at( t, optionalTarget );\n\t\n\t    \t},\n\t\n\t\n\t\n\t    \tintersectsPlane: function ( plane ) {\n\t\n\t    \t\t// check if the ray lies on the plane first\n\t\n\t    \t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\t\n\t    \t\tif ( distToPoint === 0 ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar denominator = plane.normal.dot( this.direction );\n\t\n\t    \t\tif ( denominator * distToPoint < 0 ) {\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// ray origin is behind the plane (and is pointing behind it)\n\t\n\t    \t\treturn false;\n\t\n\t    \t},\n\t\n\t    \tintersectBox: function ( box, optionalTarget ) {\n\t\n\t    \t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\n\t    \t\tvar invdirx = 1 / this.direction.x,\n\t    \t\t\tinvdiry = 1 / this.direction.y,\n\t    \t\t\tinvdirz = 1 / this.direction.z;\n\t\n\t    \t\tvar origin = this.origin;\n\t\n\t    \t\tif ( invdirx >= 0 ) {\n\t\n\t    \t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t    \t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t    \t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( invdiry >= 0 ) {\n\t\n\t    \t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t    \t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t    \t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\t\n\t    \t\t// These lines also handle the case where tmin or tmax is NaN\n\t    \t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\t\n\t    \t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\t\n\t    \t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\t\n\t    \t\tif ( invdirz >= 0 ) {\n\t\n\t    \t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t    \t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t    \t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\t\n\t    \t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\t\n\t    \t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\t\n\t    \t\t//return point closest to the ray (positive side)\n\t\n\t    \t\tif ( tmax < 0 ) return null;\n\t\n\t    \t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\t\n\t    \t},\n\t\n\t    \tintersectsBox: ( function () {\n\t\n\t    \t\tvar v = new Vector3();\n\t\n\t    \t\treturn function intersectsBox( box ) {\n\t\n\t    \t\t\treturn this.intersectBox( box, v ) !== null;\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \tintersectTriangle: function () {\n\t\n\t    \t\t// Compute the offset origin, edges, and normal.\n\t    \t\tvar diff = new Vector3();\n\t    \t\tvar edge1 = new Vector3();\n\t    \t\tvar edge2 = new Vector3();\n\t    \t\tvar normal = new Vector3();\n\t\n\t    \t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\t\n\t    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\n\t    \t\t\tedge1.subVectors( b, a );\n\t    \t\t\tedge2.subVectors( c, a );\n\t    \t\t\tnormal.crossVectors( edge1, edge2 );\n\t\n\t    \t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t    \t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t    \t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t    \t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t    \t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t    \t\t\tvar DdN = this.direction.dot( normal );\n\t    \t\t\tvar sign;\n\t\n\t    \t\t\tif ( DdN > 0 ) {\n\t\n\t    \t\t\t\tif ( backfaceCulling ) return null;\n\t    \t\t\t\tsign = 1;\n\t\n\t    \t\t\t} else if ( DdN < 0 ) {\n\t\n\t    \t\t\t\tsign = - 1;\n\t    \t\t\t\tDdN = - DdN;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tdiff.subVectors( this.origin, a );\n\t    \t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\t\n\t    \t\t\t// b1 < 0, no intersection\n\t    \t\t\tif ( DdQxE2 < 0 ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\t\n\t    \t\t\t// b2 < 0, no intersection\n\t    \t\t\tif ( DdE1xQ < 0 ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// b1+b2 > 1, no intersection\n\t    \t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Line intersects triangle, check if ray does.\n\t    \t\t\tvar QdN = - sign * diff.dot( normal );\n\t\n\t    \t\t\t// t < 0, no intersection\n\t    \t\t\tif ( QdN < 0 ) {\n\t\n\t    \t\t\t\treturn null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Ray intersects triangle.\n\t    \t\t\treturn this.at( QdN / DdN, optionalTarget );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tapplyMatrix4: function ( matrix4 ) {\n\t\n\t    \t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n\t    \t\tthis.origin.applyMatrix4( matrix4 );\n\t    \t\tthis.direction.sub( this.origin );\n\t    \t\tthis.direction.normalize();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( ray ) {\n\t\n\t    \t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Euler( x, y, z, order ) {\n\t\n\t    \tthis._x = x || 0;\n\t    \tthis._y = y || 0;\n\t    \tthis._z = z || 0;\n\t    \tthis._order = order || Euler.DefaultOrder;\n\t\n\t    }\n\t\n\t    Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\t\n\t    Euler.DefaultOrder = 'XYZ';\n\t\n\t    Euler.prototype = {\n\t\n\t    \tconstructor: Euler,\n\t\n\t    \tisEuler: true,\n\t\n\t    \tget x () {\n\t\n\t    \t\treturn this._x;\n\t\n\t    \t},\n\t\n\t    \tset x ( value ) {\n\t\n\t    \t\tthis._x = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget y () {\n\t\n\t    \t\treturn this._y;\n\t\n\t    \t},\n\t\n\t    \tset y ( value ) {\n\t\n\t    \t\tthis._y = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget z () {\n\t\n\t    \t\treturn this._z;\n\t\n\t    \t},\n\t\n\t    \tset z ( value ) {\n\t\n\t    \t\tthis._z = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tget order () {\n\t\n\t    \t\treturn this._order;\n\t\n\t    \t},\n\t\n\t    \tset order ( value ) {\n\t\n\t    \t\tthis._order = value;\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t},\n\t\n\t    \tset: function ( x, y, z, order ) {\n\t\n\t    \t\tthis._x = x;\n\t    \t\tthis._y = y;\n\t    \t\tthis._z = z;\n\t    \t\tthis._order = order || this._order;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( euler ) {\n\t\n\t    \t\tthis._x = euler._x;\n\t    \t\tthis._y = euler._y;\n\t    \t\tthis._z = euler._z;\n\t    \t\tthis._order = euler._order;\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromRotationMatrix: function ( m, order, update ) {\n\t\n\t    \t\tvar clamp = exports.Math.clamp;\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tvar te = m.elements;\n\t    \t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t    \t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t    \t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\t\n\t    \t\torder = order || this._order;\n\t\n\t    \t\tif ( order === 'XYZ' ) {\n\t\n\t    \t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t    \t\t\t\tthis._z = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'YXZ' ) {\n\t\n\t    \t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( m21, m22 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t    \t\t\t\tthis._z = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'ZXY' ) {\n\t\n\t    \t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._y = 0;\n\t    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'ZYX' ) {\n\t\n\t    \t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = 0;\n\t    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'YZX' ) {\n\t\n\t    \t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = 0;\n\t    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( order === 'XZY' ) {\n\t\n\t    \t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\t\n\t    \t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t    \t\t\t\tthis._y = Math.atan2( m13, m11 );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t    \t\t\t\tthis._y = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._order = order;\n\t\n\t    \t\tif ( update !== false ) this.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromQuaternion: function () {\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\treturn function setFromQuaternion( q, order, update ) {\n\t\n\t    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\t\n\t    \t\t\tmatrix.makeRotationFromQuaternion( q );\n\t\n\t    \t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tsetFromVector3: function ( v, order ) {\n\t\n\t    \t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\t\n\t    \t},\n\t\n\t    \treorder: function () {\n\t\n\t    \t\t// WARNING: this discards revolution information -bhouston\n\t\n\t    \t\tvar q = new Quaternion();\n\t\n\t    \t\treturn function reorder( newOrder ) {\n\t\n\t    \t\t\tq.setFromEuler( this );\n\t\n\t    \t\t\treturn this.setFromQuaternion( q, newOrder );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tequals: function ( euler ) {\n\t\n\t    \t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\t\n\t    \t},\n\t\n\t    \tfromArray: function ( array ) {\n\t\n\t    \t\tthis._x = array[ 0 ];\n\t    \t\tthis._y = array[ 1 ];\n\t    \t\tthis._z = array[ 2 ];\n\t    \t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\t\n\t    \t\tthis.onChangeCallback();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoArray: function ( array, offset ) {\n\t\n\t    \t\tif ( array === undefined ) array = [];\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tarray[ offset ] = this._x;\n\t    \t\tarray[ offset + 1 ] = this._y;\n\t    \t\tarray[ offset + 2 ] = this._z;\n\t    \t\tarray[ offset + 3 ] = this._order;\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \ttoVector3: function ( optionalResult ) {\n\t\n\t    \t\tif ( optionalResult ) {\n\t\n\t    \t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn new Vector3( this._x, this._y, this._z );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tonChange: function ( callback ) {\n\t\n\t    \t\tthis.onChangeCallback = callback;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tonChangeCallback: function () {}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Layers() {\n\t\n\t    \tthis.mask = 1;\n\t\n\t    }\n\t\n\t    Layers.prototype = {\n\t\n\t    \tconstructor: Layers,\n\t\n\t    \tset: function ( channel ) {\n\t\n\t    \t\tthis.mask = 1 << channel;\n\t\n\t    \t},\n\t\n\t    \tenable: function ( channel ) {\n\t\n\t    \t\tthis.mask |= 1 << channel;\n\t\n\t    \t},\n\t\n\t    \ttoggle: function ( channel ) {\n\t\n\t    \t\tthis.mask ^= 1 << channel;\n\t\n\t    \t},\n\t\n\t    \tdisable: function ( channel ) {\n\t\n\t    \t\tthis.mask &= ~ ( 1 << channel );\n\t\n\t    \t},\n\t\n\t    \ttest: function ( layers ) {\n\t\n\t    \t\treturn ( this.mask & layers.mask ) !== 0;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     * @author elephantatwork / www.elephantatwork.ch\n\t     */\n\t\n\t    function Object3D() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: Object3DIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'Object3D';\n\t\n\t    \tthis.parent = null;\n\t    \tthis.children = [];\n\t\n\t    \tthis.up = Object3D.DefaultUp.clone();\n\t\n\t    \tvar position = new Vector3();\n\t    \tvar rotation = new Euler();\n\t    \tvar quaternion = new Quaternion();\n\t    \tvar scale = new Vector3( 1, 1, 1 );\n\t\n\t    \tfunction onRotationChange() {\n\t\n\t    \t\tquaternion.setFromEuler( rotation, false );\n\t\n\t    \t}\n\t\n\t    \tfunction onQuaternionChange() {\n\t\n\t    \t\trotation.setFromQuaternion( quaternion, undefined, false );\n\t\n\t    \t}\n\t\n\t    \trotation.onChange( onRotationChange );\n\t    \tquaternion.onChange( onQuaternionChange );\n\t\n\t    \tObject.defineProperties( this, {\n\t    \t\tposition: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: position\n\t    \t\t},\n\t    \t\trotation: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: rotation\n\t    \t\t},\n\t    \t\tquaternion: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: quaternion\n\t    \t\t},\n\t    \t\tscale: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: scale\n\t    \t\t},\n\t    \t\tmodelViewMatrix: {\n\t    \t\t\tvalue: new Matrix4()\n\t    \t\t},\n\t    \t\tnormalMatrix: {\n\t    \t\t\tvalue: new Matrix3()\n\t    \t\t}\n\t    \t} );\n\t\n\t    \tthis.matrix = new Matrix4();\n\t    \tthis.matrixWorld = new Matrix4();\n\t\n\t    \tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t    \tthis.matrixWorldNeedsUpdate = false;\n\t\n\t    \tthis.layers = new Layers();\n\t    \tthis.visible = true;\n\t\n\t    \tthis.castShadow = false;\n\t    \tthis.receiveShadow = false;\n\t\n\t    \tthis.frustumCulled = true;\n\t    \tthis.renderOrder = 0;\n\t\n\t    \tthis.userData = {};\n\t\n\t    \tthis.onBeforeRender = null;\n\t\n\t    }\n\t\n\t    Object3D.DefaultUp = new Vector3( 0, 1, 0 );\n\t    Object3D.DefaultMatrixAutoUpdate = true;\n\t\n\t    Object.assign( Object3D.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisObject3D: true,\n\t\n\t    \tapplyMatrix: function ( matrix ) {\n\t\n\t    \t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\t\n\t    \t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromAxisAngle: function ( axis, angle ) {\n\t\n\t    \t\t// assumes axis is normalized\n\t\n\t    \t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromEuler: function ( euler ) {\n\t\n\t    \t\tthis.quaternion.setFromEuler( euler, true );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromMatrix: function ( m ) {\n\t\n\t    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t    \t\tthis.quaternion.setFromRotationMatrix( m );\n\t\n\t    \t},\n\t\n\t    \tsetRotationFromQuaternion: function ( q ) {\n\t\n\t    \t\t// assumes q is normalized\n\t\n\t    \t\tthis.quaternion.copy( q );\n\t\n\t    \t},\n\t\n\t    \trotateOnAxis: function () {\n\t\n\t    \t\t// rotate object on axis in object space\n\t    \t\t// axis is assumed to be normalized\n\t\n\t    \t\tvar q1 = new Quaternion();\n\t\n\t    \t\treturn function rotateOnAxis( axis, angle ) {\n\t\n\t    \t\t\tq1.setFromAxisAngle( axis, angle );\n\t\n\t    \t\t\tthis.quaternion.multiply( q1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateX: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\t\n\t    \t\treturn function rotateX( angle ) {\n\t\n\t    \t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateY: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\t\n\t    \t\treturn function rotateY( angle ) {\n\t\n\t    \t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateZ: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\t\n\t    \t\treturn function rotateZ( angle ) {\n\t\n\t    \t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateOnAxis: function () {\n\t\n\t    \t\t// translate object by distance along axis in object space\n\t    \t\t// axis is assumed to be normalized\n\t\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function translateOnAxis( axis, distance ) {\n\t\n\t    \t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\t\n\t    \t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateX: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\t\n\t    \t\treturn function translateX( distance ) {\n\t\n\t    \t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateY: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\t\n\t    \t\treturn function translateY( distance ) {\n\t\n\t    \t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslateZ: function () {\n\t\n\t    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\t\n\t    \t\treturn function translateZ( distance ) {\n\t\n\t    \t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlocalToWorld: function ( vector ) {\n\t\n\t    \t\treturn vector.applyMatrix4( this.matrixWorld );\n\t\n\t    \t},\n\t\n\t    \tworldToLocal: function () {\n\t\n\t    \t\tvar m1 = new Matrix4();\n\t\n\t    \t\treturn function worldToLocal( vector ) {\n\t\n\t    \t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\t// This routine does not support objects with rotated and/or translated parent(s)\n\t\n\t    \t\tvar m1 = new Matrix4();\n\t\n\t    \t\treturn function lookAt( vector ) {\n\t\n\t    \t\t\tm1.lookAt( vector, this.position, this.up );\n\t\n\t    \t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tadd: function ( object ) {\n\t\n\t    \t\tif ( arguments.length > 1 ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\t\n\t    \t\t\t\tthis.add( arguments[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object === this ) {\n\t\n\t    \t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( (object && object.isObject3D) ) {\n\t\n\t    \t\t\tif ( object.parent !== null ) {\n\t\n\t    \t\t\t\tobject.parent.remove( object );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.parent = this;\n\t    \t\t\tobject.dispatchEvent( { type: 'added' } );\n\t\n\t    \t\t\tthis.children.push( object );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tremove: function ( object ) {\n\t\n\t    \t\tif ( arguments.length > 1 ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\t\n\t    \t\t\t\tthis.remove( arguments[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar index = this.children.indexOf( object );\n\t\n\t    \t\tif ( index !== - 1 ) {\n\t\n\t    \t\t\tobject.parent = null;\n\t\n\t    \t\t\tobject.dispatchEvent( { type: 'removed' } );\n\t\n\t    \t\t\tthis.children.splice( index, 1 );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetObjectById: function ( id ) {\n\t\n\t    \t\treturn this.getObjectByProperty( 'id', id );\n\t\n\t    \t},\n\t\n\t    \tgetObjectByName: function ( name ) {\n\t\n\t    \t\treturn this.getObjectByProperty( 'name', name );\n\t\n\t    \t},\n\t\n\t    \tgetObjectByProperty: function ( name, value ) {\n\t\n\t    \t\tif ( this[ name ] === value ) return this;\n\t\n\t    \t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar child = this.children[ i ];\n\t    \t\t\tvar object = child.getObjectByProperty( name, value );\n\t\n\t    \t\t\tif ( object !== undefined ) {\n\t\n\t    \t\t\t\treturn object;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn undefined;\n\t\n\t    \t},\n\t\n\t    \tgetWorldPosition: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t},\n\t\n\t    \tgetWorldQuaternion: function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t    \t\tvar scale = new Vector3();\n\t\n\t    \t\treturn function getWorldQuaternion( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Quaternion();\n\t\n\t    \t\t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.matrixWorld.decompose( position, result, scale );\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetWorldRotation: function () {\n\t\n\t    \t\tvar quaternion = new Quaternion();\n\t\n\t    \t\treturn function getWorldRotation( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Euler();\n\t\n\t    \t\t\tthis.getWorldQuaternion( quaternion );\n\t\n\t    \t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetWorldScale: function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t    \t\tvar quaternion = new Quaternion();\n\t\n\t    \t\treturn function getWorldScale( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tgetWorldDirection: function () {\n\t\n\t    \t\tvar quaternion = new Quaternion();\n\t\n\t    \t\treturn function getWorldDirection( optionalTarget ) {\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t\tthis.getWorldQuaternion( quaternion );\n\t\n\t    \t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \traycast: function () {},\n\t\n\t    \ttraverse: function ( callback ) {\n\t\n\t    \t\tcallback( this );\n\t\n\t    \t\tvar children = this.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tchildren[ i ].traverse( callback );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttraverseVisible: function ( callback ) {\n\t\n\t    \t\tif ( this.visible === false ) return;\n\t\n\t    \t\tcallback( this );\n\t\n\t    \t\tvar children = this.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tchildren[ i ].traverseVisible( callback );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttraverseAncestors: function ( callback ) {\n\t\n\t    \t\tvar parent = this.parent;\n\t\n\t    \t\tif ( parent !== null ) {\n\t\n\t    \t\t\tcallback( parent );\n\t\n\t    \t\t\tparent.traverseAncestors( callback );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tupdateMatrix: function () {\n\t\n\t    \t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\t\n\t    \t\tthis.matrixWorldNeedsUpdate = true;\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: function ( force ) {\n\t\n\t    \t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\t\n\t    \t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\t\n\t    \t\t\tif ( this.parent === null ) {\n\t\n\t    \t\t\t\tthis.matrixWorld.copy( this.matrix );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\n\t    \t\t\tforce = true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// update children\n\t\n\t    \t\tvar children = this.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tchildren[ i ].updateMatrixWorld( force );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\t// meta is '' when called from JSON.stringify\n\t    \t\tvar isRootObject = ( meta === undefined || meta === '' );\n\t\n\t    \t\tvar output = {};\n\t\n\t    \t\t// meta is a hash used to collect geometries, materials.\n\t    \t\t// not providing it implies that this is the root object\n\t    \t\t// being serialized.\n\t    \t\tif ( isRootObject ) {\n\t\n\t    \t\t\t// initialize meta obj\n\t    \t\t\tmeta = {\n\t    \t\t\t\tgeometries: {},\n\t    \t\t\t\tmaterials: {},\n\t    \t\t\t\ttextures: {},\n\t    \t\t\t\timages: {}\n\t    \t\t\t};\n\t\n\t    \t\t\toutput.metadata = {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Object',\n\t    \t\t\t\tgenerator: 'Object3D.toJSON'\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\t// standard Object3D serialization\n\t\n\t    \t\tvar object = {};\n\t\n\t    \t\tobject.uuid = this.uuid;\n\t    \t\tobject.type = this.type;\n\t\n\t    \t\tif ( this.name !== '' ) object.name = this.name;\n\t    \t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t    \t\tif ( this.castShadow === true ) object.castShadow = true;\n\t    \t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t    \t\tif ( this.visible === false ) object.visible = false;\n\t\n\t    \t\tobject.matrix = this.matrix.toArray();\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( this.geometry !== undefined ) {\n\t\n\t    \t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\t\n\t    \t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.geometry = this.geometry.uuid;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.material !== undefined ) {\n\t\n\t    \t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\t\n\t    \t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.material = this.material.uuid;\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( this.children.length > 0 ) {\n\t\n\t    \t\t\tobject.children = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\t\n\t    \t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( isRootObject ) {\n\t\n\t    \t\t\tvar geometries = extractFromCache( meta.geometries );\n\t    \t\t\tvar materials = extractFromCache( meta.materials );\n\t    \t\t\tvar textures = extractFromCache( meta.textures );\n\t    \t\t\tvar images = extractFromCache( meta.images );\n\t\n\t    \t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t    \t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t    \t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t    \t\t\tif ( images.length > 0 ) output.images = images;\n\t\n\t    \t\t}\n\t\n\t    \t\toutput.object = object;\n\t\n\t    \t\treturn output;\n\t\n\t    \t\t// extract data from the cache hash\n\t    \t\t// remove metadata on each item\n\t    \t\t// and return as array\n\t    \t\tfunction extractFromCache( cache ) {\n\t\n\t    \t\t\tvar values = [];\n\t    \t\t\tfor ( var key in cache ) {\n\t\n\t    \t\t\t\tvar data = cache[ key ];\n\t    \t\t\t\tdelete data.metadata;\n\t    \t\t\t\tvalues.push( data );\n\t\n\t    \t\t\t}\n\t    \t\t\treturn values;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function ( recursive ) {\n\t\n\t    \t\treturn new this.constructor().copy( this, recursive );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source, recursive ) {\n\t\n\t    \t\tif ( recursive === undefined ) recursive = true;\n\t\n\t    \t\tthis.name = source.name;\n\t\n\t    \t\tthis.up.copy( source.up );\n\t\n\t    \t\tthis.position.copy( source.position );\n\t    \t\tthis.quaternion.copy( source.quaternion );\n\t    \t\tthis.scale.copy( source.scale );\n\t\n\t    \t\tthis.matrix.copy( source.matrix );\n\t    \t\tthis.matrixWorld.copy( source.matrixWorld );\n\t\n\t    \t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t    \t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\n\t    \t\tthis.visible = source.visible;\n\t\n\t    \t\tthis.castShadow = source.castShadow;\n\t    \t\tthis.receiveShadow = source.receiveShadow;\n\t\n\t    \t\tthis.frustumCulled = source.frustumCulled;\n\t    \t\tthis.renderOrder = source.renderOrder;\n\t\n\t    \t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\t\n\t    \t\tif ( recursive === true ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\t\n\t    \t\t\t\tvar child = source.children[ i ];\n\t    \t\t\t\tthis.add( child.clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var count$2 = 0;\n\t    function Object3DIdCount() { return count$2++; };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Line3( start, end ) {\n\t\n\t    \tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t    \tthis.end = ( end !== undefined ) ? end : new Vector3();\n\t\n\t    }\n\t\n\t    Line3.prototype = {\n\t\n\t    \tconstructor: Line3,\n\t\n\t    \tset: function ( start, end ) {\n\t\n\t    \t\tthis.start.copy( start );\n\t    \t\tthis.end.copy( end );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( line ) {\n\t\n\t    \t\tthis.start.copy( line.start );\n\t    \t\tthis.end.copy( line.end );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetCenter: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\t\n\t    \t},\n\t\n\t    \tdelta: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.subVectors( this.end, this.start );\n\t\n\t    \t},\n\t\n\t    \tdistanceSq: function () {\n\t\n\t    \t\treturn this.start.distanceToSquared( this.end );\n\t\n\t    \t},\n\t\n\t    \tdistance: function () {\n\t\n\t    \t\treturn this.start.distanceTo( this.end );\n\t\n\t    \t},\n\t\n\t    \tat: function ( t, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\t\n\t    \t},\n\t\n\t    \tclosestPointToPointParameter: function () {\n\t\n\t    \t\tvar startP = new Vector3();\n\t    \t\tvar startEnd = new Vector3();\n\t\n\t    \t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\t\n\t    \t\t\tstartP.subVectors( point, this.start );\n\t    \t\t\tstartEnd.subVectors( this.end, this.start );\n\t\n\t    \t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t    \t\t\tvar startEnd_startP = startEnd.dot( startP );\n\t\n\t    \t\t\tvar t = startEnd_startP / startEnd2;\n\t\n\t    \t\t\tif ( clampToLine ) {\n\t\n\t    \t\t\t\tt = exports.Math.clamp( t, 0, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn t;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\t\n\t    \t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix4: function ( matrix ) {\n\t\n\t    \t\tthis.start.applyMatrix4( matrix );\n\t    \t\tthis.end.applyMatrix4( matrix );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tequals: function ( line ) {\n\t\n\t    \t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Triangle( a, b, c ) {\n\t\n\t    \tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t    \tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t    \tthis.c = ( c !== undefined ) ? c : new Vector3();\n\t\n\t    }\n\t\n\t    Triangle.normal = function () {\n\t\n\t    \tvar v0 = new Vector3();\n\t\n\t    \treturn function normal( a, b, c, optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tresult.subVectors( c, b );\n\t    \t\tv0.subVectors( a, b );\n\t    \t\tresult.cross( v0 );\n\t\n\t    \t\tvar resultLengthSq = result.lengthSq();\n\t    \t\tif ( resultLengthSq > 0 ) {\n\t\n\t    \t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result.set( 0, 0, 0 );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    // static/instance method to calculate barycentric coordinates\n\t    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t    Triangle.barycoordFromPoint = function () {\n\t\n\t    \tvar v0 = new Vector3();\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t\n\t    \treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\t\n\t    \t\tv0.subVectors( c, a );\n\t    \t\tv1.subVectors( b, a );\n\t    \t\tv2.subVectors( point, a );\n\t\n\t    \t\tvar dot00 = v0.dot( v0 );\n\t    \t\tvar dot01 = v0.dot( v1 );\n\t    \t\tvar dot02 = v0.dot( v2 );\n\t    \t\tvar dot11 = v1.dot( v1 );\n\t    \t\tvar dot12 = v1.dot( v2 );\n\t\n\t    \t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\t// collinear or singular triangle\n\t    \t\tif ( denom === 0 ) {\n\t\n\t    \t\t\t// arbitrary location outside of triangle?\n\t    \t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t    \t\t\treturn result.set( - 2, - 1, - 1 );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar invDenom = 1 / denom;\n\t    \t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t    \t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\t\n\t    \t\t// barycentric coordinates must always sum to 1\n\t    \t\treturn result.set( 1 - u - v, v, u );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Triangle.containsPoint = function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t\n\t    \treturn function containsPoint( point, a, b, c ) {\n\t\n\t    \t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\t\n\t    \t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Triangle.prototype = {\n\t\n\t    \tconstructor: Triangle,\n\t\n\t    \tset: function ( a, b, c ) {\n\t\n\t    \t\tthis.a.copy( a );\n\t    \t\tthis.b.copy( b );\n\t    \t\tthis.c.copy( c );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\t\n\t    \t\tthis.a.copy( points[ i0 ] );\n\t    \t\tthis.b.copy( points[ i1 ] );\n\t    \t\tthis.c.copy( points[ i2 ] );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( triangle ) {\n\t\n\t    \t\tthis.a.copy( triangle.a );\n\t    \t\tthis.b.copy( triangle.b );\n\t    \t\tthis.c.copy( triangle.c );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tarea: function () {\n\t\n\t    \t\tvar v0 = new Vector3();\n\t    \t\tvar v1 = new Vector3();\n\t\n\t    \t\treturn function area() {\n\t\n\t    \t\t\tv0.subVectors( this.c, this.b );\n\t    \t\t\tv1.subVectors( this.a, this.b );\n\t\n\t    \t\t\treturn v0.cross( v1 ).length() * 0.5;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tmidpoint: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t    \t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\t\n\t    \t},\n\t\n\t    \tnormal: function ( optionalTarget ) {\n\t\n\t    \t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\t\n\t    \t},\n\t\n\t    \tplane: function ( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Plane();\n\t\n\t    \t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\n\t    \t},\n\t\n\t    \tbarycoordFromPoint: function ( point, optionalTarget ) {\n\t\n\t    \t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\t\n\t    \t},\n\t\n\t    \tcontainsPoint: function ( point ) {\n\t\n\t    \t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\t\n\t    \t},\n\t\n\t    \tclosestPointToPoint: function () {\n\t\n\t    \t\tvar plane, edgeList, projectedPoint, closestPoint;\n\t\n\t    \t\treturn function closestPointToPoint( point, optionalTarget ) {\n\t\n\t    \t\t\tif ( plane === undefined ) {\n\t\n\t    \t\t\t\tplane = new Plane();\n\t    \t\t\t\tedgeList = [ new Line3(), new Line3(), new Line3() ];\n\t    \t\t\t\tprojectedPoint = new Vector3();\n\t    \t\t\t\tclosestPoint = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar result = optionalTarget || new Vector3();\n\t    \t\t\tvar minDistance = Infinity;\n\t\n\t    \t\t\t// project the point onto the plane of the triangle\n\t\n\t    \t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t    \t\t\tplane.projectPoint( point, projectedPoint );\n\t\n\t    \t\t\t// check if the projection lies within the triangle\n\t\n\t    \t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\t\n\t    \t\t\t\t// if so, this is the closest point\n\t\n\t    \t\t\t\tresult.copy( projectedPoint );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\t\n\t    \t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t    \t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t    \t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\t\n\t    \t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\t\n\t    \t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\t\n\t    \t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\t\n\t    \t\t\t\t\tif( distance < minDistance ) {\n\t\n\t    \t\t\t\t\t\tminDistance = distance;\n\t\n\t    \t\t\t\t\t\tresult.copy( closestPoint );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn result;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tequals: function ( triangle ) {\n\t\n\t    \t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Face3( a, b, c, normal, color, materialIndex ) {\n\t\n\t    \tthis.a = a;\n\t    \tthis.b = b;\n\t    \tthis.c = c;\n\t\n\t    \tthis.normal = (normal && normal.isVector3) ? normal : new Vector3();\n\t    \tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\t\n\t    \tthis.color = (color && color.isColor) ? color : new Color();\n\t    \tthis.vertexColors = Array.isArray( color ) ? color : [];\n\t\n\t    \tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\t\n\t    }\n\t\n\t    Face3.prototype = {\n\t\n\t    \tconstructor: Face3,\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.a = source.a;\n\t    \t\tthis.b = source.b;\n\t    \t\tthis.c = source.c;\n\t\n\t    \t\tthis.normal.copy( source.normal );\n\t    \t\tthis.color.copy( source.color );\n\t\n\t    \t\tthis.materialIndex = source.materialIndex;\n\t\n\t    \t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  specularMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t     *  combine: THREE.Multiply,\n\t     *  reflectivity: <float>,\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  shading: THREE.SmoothShading,\n\t     *  depthTest: <bool>,\n\t     *  depthWrite: <bool>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshBasicMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshBasicMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // emissive\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.specularMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.combine = MultiplyOperation;\n\t    \tthis.reflectivity = 1;\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshBasicMaterial.prototype = Object.create( Material.prototype );\n\t    MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\t\n\t    MeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\t\n\t    MeshBasicMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.specularMap = source.specularMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.combine = source.combine;\n\t    \tthis.reflectivity = source.reflectivity;\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BufferAttribute( array, itemSize, normalized ) {\n\t\n\t    \tif ( Array.isArray( array ) ) {\n\t\n\t    \t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\t\n\t    \t}\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.array = array;\n\t    \tthis.itemSize = itemSize;\n\t    \tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t    \tthis.normalized = normalized === true;\n\t\n\t    \tthis.dynamic = false;\n\t    \tthis.updateRange = { offset: 0, count: - 1 };\n\t\n\t    \tthis.version = 0;\n\t\n\t    }\n\t\n\t    BufferAttribute.prototype = {\n\t\n\t    \tconstructor: BufferAttribute,\n\t\n\t    \tisBufferAttribute: true,\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.version ++;\n\t\n\t    \t},\n\t\n\t    \tsetDynamic: function ( value ) {\n\t\n\t    \t\tthis.dynamic = value;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.array = new source.array.constructor( source.array );\n\t    \t\tthis.itemSize = source.itemSize;\n\t    \t\tthis.count = source.count;\n\t    \t\tthis.normalized = source.normalized;\n\t\n\t    \t\tthis.dynamic = source.dynamic;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyAt: function ( index1, attribute, index2 ) {\n\t\n\t    \t\tindex1 *= this.itemSize;\n\t    \t\tindex2 *= attribute.itemSize;\n\t\n\t    \t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyArray: function ( array ) {\n\t\n\t    \t\tthis.array.set( array );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyColorsArray: function ( colors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar color = colors[ i ];\n\t\n\t    \t\t\tif ( color === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t    \t\t\t\tcolor = new Color();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = color.r;\n\t    \t\t\tarray[ offset ++ ] = color.g;\n\t    \t\t\tarray[ offset ++ ] = color.b;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyIndicesArray: function ( indices ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar index = indices[ i ];\n\t\n\t    \t\t\tarray[ offset ++ ] = index.a;\n\t    \t\t\tarray[ offset ++ ] = index.b;\n\t    \t\t\tarray[ offset ++ ] = index.c;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyVector2sArray: function ( vectors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar vector = vectors[ i ];\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t    \t\t\t\tvector = new Vector2();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = vector.x;\n\t    \t\t\tarray[ offset ++ ] = vector.y;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyVector3sArray: function ( vectors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar vector = vectors[ i ];\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t    \t\t\t\tvector = new Vector3();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = vector.x;\n\t    \t\t\tarray[ offset ++ ] = vector.y;\n\t    \t\t\tarray[ offset ++ ] = vector.z;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyVector4sArray: function ( vectors ) {\n\t\n\t    \t\tvar array = this.array, offset = 0;\n\t\n\t    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar vector = vectors[ i ];\n\t\n\t    \t\t\tif ( vector === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t    \t\t\t\tvector = new Vector4();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tarray[ offset ++ ] = vector.x;\n\t    \t\t\tarray[ offset ++ ] = vector.y;\n\t    \t\t\tarray[ offset ++ ] = vector.z;\n\t    \t\t\tarray[ offset ++ ] = vector.w;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tset: function ( value, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.array.set( value, offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetX: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize ];\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( index, x ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize ] = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetY: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize + 1 ];\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( index, y ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetZ: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize + 2 ];\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( index, z ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetW: function ( index ) {\n\t\n\t    \t\treturn this.array[ index * this.itemSize + 3 ];\n\t\n\t    \t},\n\t\n\t    \tsetW: function ( index, w ) {\n\t\n\t    \t\tthis.array[ index * this.itemSize + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXY: function ( index, x, y ) {\n\t\n\t    \t\tindex *= this.itemSize;\n\t\n\t    \t\tthis.array[ index + 0 ] = x;\n\t    \t\tthis.array[ index + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZ: function ( index, x, y, z ) {\n\t\n\t    \t\tindex *= this.itemSize;\n\t\n\t    \t\tthis.array[ index + 0 ] = x;\n\t    \t\tthis.array[ index + 1 ] = y;\n\t    \t\tthis.array[ index + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZW: function ( index, x, y, z, w ) {\n\t\n\t    \t\tindex *= this.itemSize;\n\t\n\t    \t\tthis.array[ index + 0 ] = x;\n\t    \t\tthis.array[ index + 1 ] = y;\n\t    \t\tthis.array[ index + 2 ] = z;\n\t    \t\tthis.array[ index + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    //\n\t\n\t    function Int8Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Int8Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint8Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint8Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint8ClampedAttribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Int16Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Int16Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint16Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint16Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Int32Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Int32Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Uint32Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Uint32Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Float32Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Float32Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    function Float64Attribute( array, itemSize ) {\n\t\n\t    \treturn new BufferAttribute( new Float64Array( array ), itemSize );\n\t\n\t    }\n\t\n\t    // Deprecated\n\t\n\t    function DynamicBufferAttribute( array, itemSize ) {\n\t\n\t    \tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t    \treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author kile / http://kile.stravaganza.org/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    function Geometry() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'Geometry';\n\t\n\t    \tthis.vertices = [];\n\t    \tthis.colors = [];\n\t    \tthis.faces = [];\n\t    \tthis.faceVertexUvs = [ [] ];\n\t\n\t    \tthis.morphTargets = [];\n\t    \tthis.morphNormals = [];\n\t\n\t    \tthis.skinWeights = [];\n\t    \tthis.skinIndices = [];\n\t\n\t    \tthis.lineDistances = [];\n\t\n\t    \tthis.boundingBox = null;\n\t    \tthis.boundingSphere = null;\n\t\n\t    \t// update flags\n\t\n\t    \tthis.elementsNeedUpdate = false;\n\t    \tthis.verticesNeedUpdate = false;\n\t    \tthis.uvsNeedUpdate = false;\n\t    \tthis.normalsNeedUpdate = false;\n\t    \tthis.colorsNeedUpdate = false;\n\t    \tthis.lineDistancesNeedUpdate = false;\n\t    \tthis.groupsNeedUpdate = false;\n\t\n\t    }\n\t\n\t    Object.assign( Geometry.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisGeometry: true,\n\t\n\t    \tapplyMatrix: function ( matrix ) {\n\t\n\t    \t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t    \t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar vertex = this.vertices[ i ];\n\t    \t\t\tvertex.applyMatrix4( matrix );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar face = this.faces[ i ];\n\t    \t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingBox();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingSphere();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.verticesNeedUpdate = true;\n\t    \t\tthis.normalsNeedUpdate = true;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trotateX: function () {\n\t\n\t    \t\t// rotate geometry around world x-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateX( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationX( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateY: function () {\n\t\n\t    \t\t// rotate geometry around world y-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateY( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationY( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateZ: function () {\n\t\n\t    \t\t// rotate geometry around world z-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateZ( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationZ( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function () {\n\t\n\t    \t\t// translate geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function translate( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeTranslation( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tscale: function () {\n\t\n\t    \t\t// scale geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function scale( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeScale( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\tvar obj;\n\t\n\t    \t\treturn function lookAt( vector ) {\n\t\n\t    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\t\n\t    \t\t\tobj.lookAt( vector );\n\t\n\t    \t\t\tobj.updateMatrix();\n\t\n\t    \t\t\tthis.applyMatrix( obj.matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tfromBufferGeometry: function ( geometry ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t    \t\tvar attributes = geometry.attributes;\n\t\n\t    \t\tvar positions = attributes.position.array;\n\t    \t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t    \t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t    \t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t    \t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\t\n\t    \t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\t\n\t    \t\tvar tempNormals = [];\n\t    \t\tvar tempUVs = [];\n\t    \t\tvar tempUVs2 = [];\n\t\n\t    \t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\t\n\t    \t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\t\n\t    \t\t\tif ( normals !== undefined ) {\n\t\n\t    \t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( colors !== undefined ) {\n\t\n\t    \t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( uvs !== undefined ) {\n\t\n\t    \t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( uvs2 !== undefined ) {\n\t\n\t    \t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction addFace( a, b, c, materialIndex ) {\n\t\n\t    \t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t    \t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\t\n\t    \t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\t\n\t    \t\t\tscope.faces.push( face );\n\t\n\t    \t\t\tif ( uvs !== undefined ) {\n\t\n\t    \t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( uvs2 !== undefined ) {\n\t\n\t    \t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( indices !== undefined ) {\n\t\n\t    \t\t\tvar groups = geometry.groups;\n\t\n\t    \t\t\tif ( groups.length > 0 ) {\n\t\n\t    \t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\t\n\t    \t\t\t\t\tvar group = groups[ i ];\n\t\n\t    \t\t\t\t\tvar start = group.start;\n\t    \t\t\t\t\tvar count = group.count;\n\t\n\t    \t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\t\n\t    \t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\t\n\t    \t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\t\n\t    \t\t\t\taddFace( i, i + 1, i + 2 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.computeFaceNormals();\n\t\n\t    \t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcenter: function () {\n\t\n\t    \t\tthis.computeBoundingBox();\n\t\n\t    \t\tvar offset = this.boundingBox.getCenter().negate();\n\t\n\t    \t\tthis.translate( offset.x, offset.y, offset.z );\n\t\n\t    \t\treturn offset;\n\t\n\t    \t},\n\t\n\t    \tnormalize: function () {\n\t\n\t    \t\tthis.computeBoundingSphere();\n\t\n\t    \t\tvar center = this.boundingSphere.center;\n\t    \t\tvar radius = this.boundingSphere.radius;\n\t\n\t    \t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\t\n\t    \t\tvar matrix = new Matrix4();\n\t    \t\tmatrix.set(\n\t    \t\t\ts, 0, 0, - s * center.x,\n\t    \t\t\t0, s, 0, - s * center.y,\n\t    \t\t\t0, 0, s, - s * center.z,\n\t    \t\t\t0, 0, 0, 1\n\t    \t\t);\n\t\n\t    \t\tthis.applyMatrix( matrix );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcomputeFaceNormals: function () {\n\t\n\t    \t\tvar cb = new Vector3(), ab = new Vector3();\n\t\n\t    \t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tvar face = this.faces[ f ];\n\t\n\t    \t\t\tvar vA = this.vertices[ face.a ];\n\t    \t\t\tvar vB = this.vertices[ face.b ];\n\t    \t\t\tvar vC = this.vertices[ face.c ];\n\t\n\t    \t\t\tcb.subVectors( vC, vB );\n\t    \t\t\tab.subVectors( vA, vB );\n\t    \t\t\tcb.cross( ab );\n\t\n\t    \t\t\tcb.normalize();\n\t\n\t    \t\t\tface.normal.copy( cb );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeVertexNormals: function ( areaWeighted ) {\n\t\n\t    \t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\t\n\t    \t\tvar v, vl, f, fl, face, vertices;\n\t\n\t    \t\tvertices = new Array( this.vertices.length );\n\t\n\t    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\t\n\t    \t\t\tvertices[ v ] = new Vector3();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( areaWeighted ) {\n\t\n\t    \t\t\t// vertex normals weighted by triangle areas\n\t    \t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\t\n\t    \t\t\tvar vA, vB, vC;\n\t    \t\t\tvar cb = new Vector3(), ab = new Vector3();\n\t\n\t    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\t\tvA = this.vertices[ face.a ];\n\t    \t\t\t\tvB = this.vertices[ face.b ];\n\t    \t\t\t\tvC = this.vertices[ face.c ];\n\t\n\t    \t\t\t\tcb.subVectors( vC, vB );\n\t    \t\t\t\tab.subVectors( vA, vB );\n\t    \t\t\t\tcb.cross( ab );\n\t\n\t    \t\t\t\tvertices[ face.a ].add( cb );\n\t    \t\t\t\tvertices[ face.b ].add( cb );\n\t    \t\t\t\tvertices[ face.c ].add( cb );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\t\tvertices[ face.a ].add( face.normal );\n\t    \t\t\t\tvertices[ face.b ].add( face.normal );\n\t    \t\t\t\tvertices[ face.c ].add( face.normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\t\n\t    \t\t\tvertices[ v ].normalize();\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t    \t\t\tif ( vertexNormals.length === 3 ) {\n\t\n\t    \t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t    \t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t    \t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t    \t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t    \t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.faces.length > 0 ) {\n\t\n\t    \t\t\tthis.normalsNeedUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeMorphNormals: function () {\n\t\n\t    \t\tvar i, il, f, fl, face;\n\t\n\t    \t\t// save original normals\n\t    \t\t// - create temp variables on first access\n\t    \t\t//   otherwise just copy (for faster repeated calls)\n\t\n\t    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\tif ( ! face.__originalFaceNormal ) {\n\t\n\t    \t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\t\n\t    \t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\t\n\t    \t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// use temp geometry to compute face and vertex normals for each morph\n\t\n\t    \t\tvar tmpGeo = new Geometry();\n\t    \t\ttmpGeo.faces = this.faces;\n\t\n\t    \t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\t\n\t    \t\t\t// create on first access\n\t\n\t    \t\t\tif ( ! this.morphNormals[ i ] ) {\n\t\n\t    \t\t\t\tthis.morphNormals[ i ] = {};\n\t    \t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t    \t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\t\n\t    \t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t    \t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\t\n\t    \t\t\t\tvar faceNormal, vertexNormals;\n\t\n\t    \t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\t\tfaceNormal = new Vector3();\n\t    \t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\t\n\t    \t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t    \t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar morphNormals = this.morphNormals[ i ];\n\t\n\t    \t\t\t// set vertices to morph target\n\t\n\t    \t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\t\n\t    \t\t\t// compute morph normals\n\t\n\t    \t\t\ttmpGeo.computeFaceNormals();\n\t    \t\t\ttmpGeo.computeVertexNormals();\n\t\n\t    \t\t\t// store morph normals\n\t\n\t    \t\t\tvar faceNormal, vertexNormals;\n\t\n\t    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t    \t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\t\n\t    \t\t\t\tfaceNormal.copy( face.normal );\n\t\n\t    \t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t    \t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t    \t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// restore original normals\n\t\n\t    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\tface = this.faces[ f ];\n\t\n\t    \t\t\tface.normal = face.__originalFaceNormal;\n\t    \t\t\tface.vertexNormals = face.__originalVertexNormals;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeTangents: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\t\n\t    \t},\n\t\n\t    \tcomputeLineDistances: function () {\n\t\n\t    \t\tvar d = 0;\n\t    \t\tvar vertices = this.vertices;\n\t\n\t    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tif ( i > 0 ) {\n\t\n\t    \t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.lineDistances[ i ] = d;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingBox: function () {\n\t\n\t    \t\tif ( this.boundingBox === null ) {\n\t\n\t    \t\t\tthis.boundingBox = new Box3();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.boundingBox.setFromPoints( this.vertices );\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingSphere: function () {\n\t\n\t    \t\tif ( this.boundingSphere === null ) {\n\t\n\t    \t\t\tthis.boundingSphere = new Sphere();\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.boundingSphere.setFromPoints( this.vertices );\n\t\n\t    \t},\n\t\n\t    \tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\t\n\t    \t\tif ( (geometry && geometry.isGeometry) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar normalMatrix,\n\t    \t\tvertexOffset = this.vertices.length,\n\t    \t\tvertices1 = this.vertices,\n\t    \t\tvertices2 = geometry.vertices,\n\t    \t\tfaces1 = this.faces,\n\t    \t\tfaces2 = geometry.faces,\n\t    \t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t    \t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n\t    \t\tcolors1 = this.colors,\n\t    \t\tcolors2 = geometry.colors;\n\t\n\t    \t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\t\n\t    \t\tif ( matrix !== undefined ) {\n\t\n\t    \t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t    \t\t}\n\t\n\t    \t\t// vertices\n\t\n\t    \t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar vertex = vertices2[ i ];\n\t\n\t    \t\t\tvar vertexCopy = vertex.clone();\n\t\n\t    \t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\t\n\t    \t\t\tvertices1.push( vertexCopy );\n\t\n\t    \t\t}\n\t\n\t    \t\t// colors\n\t\n\t    \t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tcolors1.push( colors2[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\t// faces\n\t\n\t    \t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t    \t\t\tfaceVertexNormals = face.vertexNormals,\n\t    \t\t\tfaceVertexColors = face.vertexColors;\n\t\n\t    \t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t    \t\t\tfaceCopy.normal.copy( face.normal );\n\t\n\t    \t\t\tif ( normalMatrix !== undefined ) {\n\t\n\t    \t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\t\n\t    \t\t\t\tif ( normalMatrix !== undefined ) {\n\t\n\t    \t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfaceCopy.vertexNormals.push( normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfaceCopy.color.copy( face.color );\n\t\n\t    \t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tcolor = faceVertexColors[ j ];\n\t    \t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\t\n\t    \t\t\tfaces1.push( faceCopy );\n\t\n\t    \t\t}\n\t\n\t    \t\t// uvs\n\t\n\t    \t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\t\n\t    \t\t\tif ( uv === undefined ) {\n\t\n\t    \t\t\t\tcontinue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tuvCopy.push( uv[ j ].clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tuvs1.push( uvCopy );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tmergeMesh: function ( mesh ) {\n\t\n\t    \t\tif ( (mesh && mesh.isMesh) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\t\n\t    \t\tthis.merge( mesh.geometry, mesh.matrix );\n\t\n\t    \t},\n\t\n\t    \t/*\n\t    \t * Checks for duplicate vertices with hashmap.\n\t    \t * Duplicated vertices are removed\n\t    \t * and faces' vertices are updated.\n\t    \t */\n\t\n\t    \tmergeVertices: function () {\n\t\n\t    \t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t    \t\tvar unique = [], changes = [];\n\t\n\t    \t\tvar v, key;\n\t    \t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t    \t\tvar precision = Math.pow( 10, precisionPoints );\n\t    \t\tvar i, il, face;\n\t    \t\tvar indices, j, jl;\n\t\n\t    \t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tv = this.vertices[ i ];\n\t    \t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\t\n\t    \t\t\tif ( verticesMap[ key ] === undefined ) {\n\t\n\t    \t\t\t\tverticesMap[ key ] = i;\n\t    \t\t\t\tunique.push( this.vertices[ i ] );\n\t    \t\t\t\tchanges[ i ] = unique.length - 1;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t    \t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\t// if faces are completely degenerate after merging vertices, we\n\t    \t\t// have to remove them from the geometry.\n\t    \t\tvar faceIndicesToRemove = [];\n\t\n\t    \t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\t\n\t    \t\t\tface = this.faces[ i ];\n\t\n\t    \t\t\tface.a = changes[ face.a ];\n\t    \t\t\tface.b = changes[ face.b ];\n\t    \t\t\tface.c = changes[ face.c ];\n\t\n\t    \t\t\tindices = [ face.a, face.b, face.c ];\n\t\n\t    \t\t\tvar dupIndex = - 1;\n\t\n\t    \t\t\t// if any duplicate vertices are found in a Face3\n\t    \t\t\t// we have to remove the face as nothing can be saved\n\t    \t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\t\n\t    \t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\t\n\t    \t\t\t\t\tdupIndex = n;\n\t    \t\t\t\t\tfaceIndicesToRemove.push( i );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\t\n\t    \t\t\tvar idx = faceIndicesToRemove[ i ];\n\t\n\t    \t\t\tthis.faces.splice( idx, 1 );\n\t\n\t    \t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Use unique set of vertices\n\t\n\t    \t\tvar diff = this.vertices.length - unique.length;\n\t    \t\tthis.vertices = unique;\n\t    \t\treturn diff;\n\t\n\t    \t},\n\t\n\t    \tsortFacesByMaterialIndex: function () {\n\t\n\t    \t\tvar faces = this.faces;\n\t    \t\tvar length = faces.length;\n\t\n\t    \t\t// tag faces\n\t\n\t    \t\tfor ( var i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\tfaces[ i ]._id = i;\n\t\n\t    \t\t}\n\t\n\t    \t\t// sort faces\n\t\n\t    \t\tfunction materialIndexSort( a, b ) {\n\t\n\t    \t\t\treturn a.materialIndex - b.materialIndex;\n\t\n\t    \t\t}\n\t\n\t    \t\tfaces.sort( materialIndexSort );\n\t\n\t    \t\t// sort uvs\n\t\n\t    \t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t    \t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\t\n\t    \t\tvar newUvs1, newUvs2;\n\t\n\t    \t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t    \t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\t\n\t    \t\tfor ( var i = 0; i < length; i ++ ) {\n\t\n\t    \t\t\tvar id = faces[ i ]._id;\n\t\n\t    \t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t    \t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t    \t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\tvar data = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'Geometry',\n\t    \t\t\t\tgenerator: 'Geometry.toJSON'\n\t    \t\t\t}\n\t    \t\t};\n\t\n\t    \t\t// standard Geometry serialization\n\t\n\t    \t\tdata.uuid = this.uuid;\n\t    \t\tdata.type = this.type;\n\t    \t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t    \t\tif ( this.parameters !== undefined ) {\n\t\n\t    \t\t\tvar parameters = this.parameters;\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn data;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar vertices = [];\n\t\n\t    \t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\t\n\t    \t\t\tvar vertex = this.vertices[ i ];\n\t    \t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar faces = [];\n\t    \t\tvar normals = [];\n\t    \t\tvar normalsHash = {};\n\t    \t\tvar colors = [];\n\t    \t\tvar colorsHash = {};\n\t    \t\tvar uvs = [];\n\t    \t\tvar uvsHash = {};\n\t\n\t    \t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\t\n\t    \t\t\tvar face = this.faces[ i ];\n\t\n\t    \t\t\tvar hasMaterial = true;\n\t    \t\t\tvar hasFaceUv = false; // deprecated\n\t    \t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t    \t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t    \t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t    \t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t    \t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\t\n\t    \t\t\tvar faceType = 0;\n\t\n\t    \t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t    \t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t    \t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t    \t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t    \t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t    \t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t    \t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t    \t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\t\n\t    \t\t\tfaces.push( faceType );\n\t    \t\t\tfaces.push( face.a, face.b, face.c );\n\t    \t\t\tfaces.push( face.materialIndex );\n\t\n\t    \t\t\tif ( hasFaceVertexUv ) {\n\t\n\t    \t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\t\n\t    \t\t\t\tfaces.push(\n\t    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t    \t\t\t\t);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceNormal ) {\n\t\n\t    \t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t    \t\t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t    \t\t\t\tfaces.push(\n\t    \t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t    \t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t    \t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t    \t\t\t\t);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceColor ) {\n\t\n\t    \t\t\t\tfaces.push( getColorIndex( face.color ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexColor ) {\n\t\n\t    \t\t\t\tvar vertexColors = face.vertexColors;\n\t\n\t    \t\t\t\tfaces.push(\n\t    \t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t    \t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t    \t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t    \t\t\t\t);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction setBit( value, position, enabled ) {\n\t\n\t    \t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getNormalIndex( normal ) {\n\t\n\t    \t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\t\n\t    \t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\t\n\t    \t\t\t\treturn normalsHash[ hash ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t    \t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\n\t    \t\t\treturn normalsHash[ hash ];\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getColorIndex( color ) {\n\t\n\t    \t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\t\n\t    \t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\t\n\t    \t\t\t\treturn colorsHash[ hash ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcolorsHash[ hash ] = colors.length;\n\t    \t\t\tcolors.push( color.getHex() );\n\t\n\t    \t\t\treturn colorsHash[ hash ];\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction getUvIndex( uv ) {\n\t\n\t    \t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\t\n\t    \t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\t\n\t    \t\t\t\treturn uvsHash[ hash ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t    \t\t\tuvs.push( uv.x, uv.y );\n\t\n\t    \t\t\treturn uvsHash[ hash ];\n\t\n\t    \t\t}\n\t\n\t    \t\tdata.data = {};\n\t\n\t    \t\tdata.data.vertices = vertices;\n\t    \t\tdata.data.normals = normals;\n\t    \t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t    \t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t    \t\tdata.data.faces = faces;\n\t\n\t    \t\treturn data;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\t/*\n\t    \t\t// Handle primitives\n\t\n\t    \t\tvar parameters = this.parameters;\n\t\n\t    \t\tif ( parameters !== undefined ) {\n\t\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tvalues.push( parameters[ key ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t    \t\t\tthis.constructor.apply( geometry, values );\n\t    \t\t\treturn geometry;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t    \t\t*/\n\t\n\t    \t\treturn new Geometry().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.vertices = [];\n\t    \t\tthis.faces = [];\n\t    \t\tthis.faceVertexUvs = [ [] ];\n\t    \t\tthis.colors = [];\n\t\n\t    \t\tvar vertices = source.vertices;\n\t\n\t    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.vertices.push( vertices[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar colors = source.colors;\n\t\n\t    \t\tfor ( var i = 0, il = colors.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.colors.push( colors[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar faces = source.faces;\n\t\n\t    \t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\t\n\t    \t\t\tthis.faces.push( faces[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\t\n\t    \t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\t\n\t    \t\t\t\tthis.faceVertexUvs[ i ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\t\n\t    \t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\t\n\t    \t\t\t\t\tvar uv = uvs[ k ];\n\t\n\t    \t\t\t\t\tuvsCopy.push( uv.clone() );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var count$3 = 0;\n\t    function GeometryIdCount() { return count$3++; };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function DirectGeometry() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'DirectGeometry';\n\t\n\t    \tthis.indices = [];\n\t    \tthis.vertices = [];\n\t    \tthis.normals = [];\n\t    \tthis.colors = [];\n\t    \tthis.uvs = [];\n\t    \tthis.uvs2 = [];\n\t\n\t    \tthis.groups = [];\n\t\n\t    \tthis.morphTargets = {};\n\t\n\t    \tthis.skinWeights = [];\n\t    \tthis.skinIndices = [];\n\t\n\t    \t// this.lineDistances = [];\n\t\n\t    \tthis.boundingBox = null;\n\t    \tthis.boundingSphere = null;\n\t\n\t    \t// update flags\n\t\n\t    \tthis.verticesNeedUpdate = false;\n\t    \tthis.normalsNeedUpdate = false;\n\t    \tthis.colorsNeedUpdate = false;\n\t    \tthis.uvsNeedUpdate = false;\n\t    \tthis.groupsNeedUpdate = false;\n\t\n\t    }\n\t\n\t    Object.assign( DirectGeometry.prototype, EventDispatcher.prototype, {\n\t\n\t    \tcomputeBoundingBox: Geometry.prototype.computeBoundingBox,\n\t    \tcomputeBoundingSphere: Geometry.prototype.computeBoundingSphere,\n\t\n\t    \tcomputeFaceNormals: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\t\n\t    \t},\n\t\n\t    \tcomputeVertexNormals: function () {\n\t\n\t    \t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\t\n\t    \t},\n\t\n\t    \tcomputeGroups: function ( geometry ) {\n\t\n\t    \t\tvar group;\n\t    \t\tvar groups = [];\n\t    \t\tvar materialIndex;\n\t\n\t    \t\tvar faces = geometry.faces;\n\t\n\t    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\t// materials\n\t\n\t    \t\t\tif ( face.materialIndex !== materialIndex ) {\n\t\n\t    \t\t\t\tmaterialIndex = face.materialIndex;\n\t\n\t    \t\t\t\tif ( group !== undefined ) {\n\t\n\t    \t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t    \t\t\t\t\tgroups.push( group );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tgroup = {\n\t    \t\t\t\t\tstart: i * 3,\n\t    \t\t\t\t\tmaterialIndex: materialIndex\n\t    \t\t\t\t};\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( group !== undefined ) {\n\t\n\t    \t\t\tgroup.count = ( i * 3 ) - group.start;\n\t    \t\t\tgroups.push( group );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.groups = groups;\n\t\n\t    \t},\n\t\n\t    \tfromGeometry: function ( geometry ) {\n\t\n\t    \t\tvar faces = geometry.faces;\n\t    \t\tvar vertices = geometry.vertices;\n\t    \t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\t\n\t    \t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t    \t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\t\n\t    \t\t// morphs\n\t\n\t    \t\tvar morphTargets = geometry.morphTargets;\n\t    \t\tvar morphTargetsLength = morphTargets.length;\n\t\n\t    \t\tvar morphTargetsPosition;\n\t\n\t    \t\tif ( morphTargetsLength > 0 ) {\n\t\n\t    \t\t\tmorphTargetsPosition = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\t\n\t    \t\t\t\tmorphTargetsPosition[ i ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.morphTargets.position = morphTargetsPosition;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar morphNormals = geometry.morphNormals;\n\t    \t\tvar morphNormalsLength = morphNormals.length;\n\t\n\t    \t\tvar morphTargetsNormal;\n\t\n\t    \t\tif ( morphNormalsLength > 0 ) {\n\t\n\t    \t\t\tmorphTargetsNormal = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\t\n\t    \t\t\t\tmorphTargetsNormal[ i ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\t\n\t    \t\t}\n\t\n\t    \t\t// skins\n\t\n\t    \t\tvar skinIndices = geometry.skinIndices;\n\t    \t\tvar skinWeights = geometry.skinWeights;\n\t\n\t    \t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t    \t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\t\n\t    \t\t//\n\t\n\t    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\t\n\t    \t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t    \t\t\tif ( vertexNormals.length === 3 ) {\n\t\n\t    \t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar normal = face.normal;\n\t\n\t    \t\t\t\tthis.normals.push( normal, normal, normal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar vertexColors = face.vertexColors;\n\t\n\t    \t\t\tif ( vertexColors.length === 3 ) {\n\t\n\t    \t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar color = face.color;\n\t\n\t    \t\t\t\tthis.colors.push( color, color, color );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexUv === true ) {\n\t\n\t    \t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\t\n\t    \t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t    \t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\t\n\t    \t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasFaceVertexUv2 === true ) {\n\t\n\t    \t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\t\n\t    \t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t    \t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\t\n\t    \t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// morphs\n\t\n\t    \t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\t\n\t    \t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\t\n\t    \t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\t\n\t    \t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\t\n\t    \t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// skins\n\t\n\t    \t\t\tif ( hasSkinIndices ) {\n\t\n\t    \t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( hasSkinWeights ) {\n\t\n\t    \t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.computeGroups( geometry );\n\t\n\t    \t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t    \t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t    \t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t    \t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t    \t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BufferGeometry() {\n\t\n\t    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.name = '';\n\t    \tthis.type = 'BufferGeometry';\n\t\n\t    \tthis.index = null;\n\t    \tthis.attributes = {};\n\t\n\t    \tthis.morphAttributes = {};\n\t\n\t    \tthis.groups = [];\n\t\n\t    \tthis.boundingBox = null;\n\t    \tthis.boundingSphere = null;\n\t\n\t    \tthis.drawRange = { start: 0, count: Infinity };\n\t\n\t    }\n\t\n\t    Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {\n\t\n\t    \tisBufferGeometry: true,\n\t\n\t    \tgetIndex: function () {\n\t\n\t    \t\treturn this.index;\n\t\n\t    \t},\n\t\n\t    \tsetIndex: function ( index ) {\n\t\n\t    \t\tthis.index = index;\n\t\n\t    \t},\n\t\n\t    \taddAttribute: function ( name, attribute ) {\n\t\n\t    \t\tif ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\t\n\t    \t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\t\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( name === 'index' ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t    \t\t\tthis.setIndex( attribute );\n\t\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.attributes[ name ] = attribute;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetAttribute: function ( name ) {\n\t\n\t    \t\treturn this.attributes[ name ];\n\t\n\t    \t},\n\t\n\t    \tremoveAttribute: function ( name ) {\n\t\n\t    \t\tdelete this.attributes[ name ];\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddGroup: function ( start, count, materialIndex ) {\n\t\n\t    \t\tthis.groups.push( {\n\t\n\t    \t\t\tstart: start,\n\t    \t\t\tcount: count,\n\t    \t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\t\n\t    \t\t} );\n\t\n\t    \t},\n\t\n\t    \tclearGroups: function () {\n\t\n\t    \t\tthis.groups = [];\n\t\n\t    \t},\n\t\n\t    \tsetDrawRange: function ( start, count ) {\n\t\n\t    \t\tthis.drawRange.start = start;\n\t    \t\tthis.drawRange.count = count;\n\t\n\t    \t},\n\t\n\t    \tapplyMatrix: function ( matrix ) {\n\t\n\t    \t\tvar position = this.attributes.position;\n\t\n\t    \t\tif ( position !== undefined ) {\n\t\n\t    \t\t\tmatrix.applyToVector3Array( position.array );\n\t    \t\t\tposition.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar normal = this.attributes.normal;\n\t\n\t    \t\tif ( normal !== undefined ) {\n\t\n\t    \t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\t\n\t    \t\t\tnormalMatrix.applyToVector3Array( normal.array );\n\t    \t\t\tnormal.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingBox();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.computeBoundingSphere();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \trotateX: function () {\n\t\n\t    \t\t// rotate geometry around world x-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateX( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationX( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateY: function () {\n\t\n\t    \t\t// rotate geometry around world y-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateY( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationY( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \trotateZ: function () {\n\t\n\t    \t\t// rotate geometry around world z-axis\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function rotateZ( angle ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeRotationZ( angle );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttranslate: function () {\n\t\n\t    \t\t// translate geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function translate( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeTranslation( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tscale: function () {\n\t\n\t    \t\t// scale geometry\n\t\n\t    \t\tvar m1;\n\t\n\t    \t\treturn function scale( x, y, z ) {\n\t\n\t    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\t\n\t    \t\t\tm1.makeScale( x, y, z );\n\t\n\t    \t\t\tthis.applyMatrix( m1 );\n\t\n\t    \t\t\treturn this;\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tlookAt: function () {\n\t\n\t    \t\tvar obj;\n\t\n\t    \t\treturn function lookAt( vector ) {\n\t\n\t    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\t\n\t    \t\t\tobj.lookAt( vector );\n\t\n\t    \t\t\tobj.updateMatrix();\n\t\n\t    \t\t\tthis.applyMatrix( obj.matrix );\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tcenter: function () {\n\t\n\t    \t\tthis.computeBoundingBox();\n\t\n\t    \t\tvar offset = this.boundingBox.getCenter().negate();\n\t\n\t    \t\tthis.translate( offset.x, offset.y, offset.z );\n\t\n\t    \t\treturn offset;\n\t\n\t    \t},\n\t\n\t    \tsetFromObject: function ( object ) {\n\t\n\t    \t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tif ( (object && object.isPoints) || (object && object.isLine) ) {\n\t\n\t    \t\t\tvar positions = new Float32Attribute( geometry.vertices.length * 3, 3 );\n\t    \t\t\tvar colors = new Float32Attribute( geometry.colors.length * 3, 3 );\n\t\n\t    \t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t    \t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\t\n\t    \t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\t\n\t    \t\t\t\tvar lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );\n\t\n\t    \t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t    \t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (object && object.isMesh) ) {\n\t\n\t    \t\t\tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\tthis.fromGeometry( geometry );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tupdateFromObject: function ( object ) {\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tif ( (object && object.isMesh) ) {\n\t\n\t    \t\t\tvar direct = geometry.__directGeometry;\n\t\n\t    \t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\t\n\t    \t\t\t\tdirect = undefined;\n\t    \t\t\t\tgeometry.elementsNeedUpdate = false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( direct === undefined ) {\n\t\n\t    \t\t\t\treturn this.fromGeometry( geometry );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t    \t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t    \t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t    \t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t    \t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\t\n\t    \t\t\tgeometry.verticesNeedUpdate = false;\n\t    \t\t\tgeometry.normalsNeedUpdate = false;\n\t    \t\t\tgeometry.colorsNeedUpdate = false;\n\t    \t\t\tgeometry.uvsNeedUpdate = false;\n\t    \t\t\tgeometry.groupsNeedUpdate = false;\n\t\n\t    \t\t\tgeometry = direct;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attribute;\n\t\n\t    \t\tif ( geometry.verticesNeedUpdate === true ) {\n\t\n\t    \t\t\tattribute = this.attributes.position;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.verticesNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.normalsNeedUpdate === true ) {\n\t\n\t    \t\t\tattribute = this.attributes.normal;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.normalsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.colorsNeedUpdate === true ) {\n\t\n\t    \t\t\tattribute = this.attributes.color;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.colorsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.uvsNeedUpdate ) {\n\t\n\t    \t\t\tattribute = this.attributes.uv;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.uvsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.lineDistancesNeedUpdate ) {\n\t\n\t    \t\t\tattribute = this.attributes.lineDistance;\n\t\n\t    \t\t\tif ( attribute !== undefined ) {\n\t\n\t    \t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t    \t\t\t\tattribute.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.lineDistancesNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.groupsNeedUpdate ) {\n\t\n\t    \t\t\tgeometry.computeGroups( object.geometry );\n\t    \t\t\tthis.groups = geometry.groups;\n\t\n\t    \t\t\tgeometry.groupsNeedUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tfromGeometry: function ( geometry ) {\n\t\n\t    \t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\t\n\t    \t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\t\n\t    \t},\n\t\n\t    \tfromDirectGeometry: function ( geometry ) {\n\t\n\t    \t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t    \t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\t\n\t    \t\tif ( geometry.normals.length > 0 ) {\n\t\n\t    \t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t    \t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.colors.length > 0 ) {\n\t\n\t    \t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t    \t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.uvs.length > 0 ) {\n\t\n\t    \t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t    \t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.uvs2.length > 0 ) {\n\t\n\t    \t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t    \t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.indices.length > 0 ) {\n\t\n\t    \t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n\t    \t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t    \t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\t\n\t    \t\t}\n\t\n\t    \t\t// groups\n\t\n\t    \t\tthis.groups = geometry.groups;\n\t\n\t    \t\t// morphs\n\t\n\t    \t\tfor ( var name in geometry.morphTargets ) {\n\t\n\t    \t\t\tvar array = [];\n\t    \t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\t\n\t    \t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\n\t    \t\t\t\tvar attribute = new Float32Attribute( morphTarget.length * 3, 3 );\n\t\n\t    \t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.morphAttributes[ name ] = array;\n\t\n\t    \t\t}\n\t\n\t    \t\t// skinning\n\t\n\t    \t\tif ( geometry.skinIndices.length > 0 ) {\n\t\n\t    \t\t\tvar skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );\n\t    \t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.skinWeights.length > 0 ) {\n\t\n\t    \t\t\tvar skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );\n\t    \t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingBox: function () {\n\t\n\t    \t\tif ( this.boundingBox === null ) {\n\t\n\t    \t\t\tthis.boundingBox = new Box3();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar positions = this.attributes.position.array;\n\t\n\t    \t\tif ( positions !== undefined ) {\n\t\n\t    \t\t\tthis.boundingBox.setFromArray( positions );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.boundingBox.makeEmpty();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tcomputeBoundingSphere: function () {\n\t\n\t    \t\tvar box = new Box3();\n\t    \t\tvar vector = new Vector3();\n\t\n\t    \t\treturn function computeBoundingSphere() {\n\t\n\t    \t\t\tif ( this.boundingSphere === null ) {\n\t\n\t    \t\t\t\tthis.boundingSphere = new Sphere();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar positions = this.attributes.position;\n\t\n\t    \t\t\tif ( positions ) {\n\t\n\t    \t\t\t\tvar array = positions.array;\n\t    \t\t\t\tvar center = this.boundingSphere.center;\n\t\n\t    \t\t\t\tbox.setFromArray( array );\n\t    \t\t\t\tbox.getCenter( center );\n\t\n\t    \t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t    \t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\t\n\t    \t\t\t\tvar maxRadiusSq = 0;\n\t\n\t    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\t\n\t    \t\t\t\t\tvector.fromArray( array, i );\n\t    \t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\t\n\t    \t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \tcomputeFaceNormals: function () {\n\t\n\t    \t\t// backwards compatibility\n\t\n\t    \t},\n\t\n\t    \tcomputeVertexNormals: function () {\n\t\n\t    \t\tvar index = this.index;\n\t    \t\tvar attributes = this.attributes;\n\t    \t\tvar groups = this.groups;\n\t\n\t    \t\tif ( attributes.position ) {\n\t\n\t    \t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\tif ( attributes.normal === undefined ) {\n\t\n\t    \t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// reset existing normals to zero\n\t\n\t    \t\t\t\tvar array = attributes.normal.array;\n\t\n\t    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\tarray[ i ] = 0;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar normals = attributes.normal.array;\n\t\n\t    \t\t\tvar vA, vB, vC,\n\t\n\t    \t\t\tpA = new Vector3(),\n\t    \t\t\tpB = new Vector3(),\n\t    \t\t\tpC = new Vector3(),\n\t\n\t    \t\t\tcb = new Vector3(),\n\t    \t\t\tab = new Vector3();\n\t\n\t    \t\t\t// indexed elements\n\t\n\t    \t\t\tif ( index ) {\n\t\n\t    \t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\tif ( groups.length === 0 ) {\n\t\n\t    \t\t\t\t\tthis.addGroup( 0, indices.length );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\t\n\t    \t\t\t\t\tvar group = groups[ j ];\n\t\n\t    \t\t\t\t\tvar start = group.start;\n\t    \t\t\t\t\tvar count = group.count;\n\t\n\t    \t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\t\n\t    \t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t    \t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t    \t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\t\n\t    \t\t\t\t\t\tpA.fromArray( positions, vA );\n\t    \t\t\t\t\t\tpB.fromArray( positions, vB );\n\t    \t\t\t\t\t\tpC.fromArray( positions, vC );\n\t\n\t    \t\t\t\t\t\tcb.subVectors( pC, pB );\n\t    \t\t\t\t\t\tab.subVectors( pA, pB );\n\t    \t\t\t\t\t\tcb.cross( ab );\n\t\n\t    \t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t    \t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t    \t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\t\n\t    \t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t    \t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t    \t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\t\n\t    \t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t    \t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t    \t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\n\t    \t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\t\n\t    \t\t\t\t\tpA.fromArray( positions, i );\n\t    \t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t    \t\t\t\t\tpC.fromArray( positions, i + 6 );\n\t\n\t    \t\t\t\t\tcb.subVectors( pC, pB );\n\t    \t\t\t\t\tab.subVectors( pA, pB );\n\t    \t\t\t\t\tcb.cross( ab );\n\t\n\t    \t\t\t\t\tnormals[ i ] = cb.x;\n\t    \t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t    \t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\t\n\t    \t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t    \t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t    \t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\t\n\t    \t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t    \t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t    \t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.normalizeNormals();\n\t\n\t    \t\t\tattributes.normal.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tmerge: function ( geometry, offset ) {\n\t\n\t    \t\tif ( (geometry && geometry.isBufferGeometry) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tvar attributes = this.attributes;\n\t\n\t    \t\tfor ( var key in attributes ) {\n\t\n\t    \t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\t\n\t    \t\t\tvar attribute1 = attributes[ key ];\n\t    \t\t\tvar attributeArray1 = attribute1.array;\n\t\n\t    \t\t\tvar attribute2 = geometry.attributes[ key ];\n\t    \t\t\tvar attributeArray2 = attribute2.array;\n\t\n\t    \t\t\tvar attributeSize = attribute2.itemSize;\n\t\n\t    \t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\t\n\t    \t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tnormalizeNormals: function () {\n\t\n\t    \t\tvar normals = this.attributes.normal.array;\n\t\n\t    \t\tvar x, y, z, n;\n\t\n\t    \t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\t\n\t    \t\t\tx = normals[ i ];\n\t    \t\t\ty = normals[ i + 1 ];\n\t    \t\t\tz = normals[ i + 2 ];\n\t\n\t    \t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\t\n\t    \t\t\tnormals[ i ] *= n;\n\t    \t\t\tnormals[ i + 1 ] *= n;\n\t    \t\t\tnormals[ i + 2 ] *= n;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoNonIndexed: function () {\n\t\n\t    \t\tif ( this.index === null ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t    \t\t\treturn this;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar geometry2 = new BufferGeometry();\n\t\n\t    \t\tvar indices = this.index.array;\n\t    \t\tvar attributes = this.attributes;\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ name ];\n\t\n\t    \t\t\tvar array = attribute.array;\n\t    \t\t\tvar itemSize = attribute.itemSize;\n\t\n\t    \t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\t\n\t    \t\t\tvar index = 0, index2 = 0;\n\t\n\t    \t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tindex = indices[ i ] * itemSize;\n\t\n\t    \t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\t\n\t    \t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry2;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\tvar data = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.4,\n\t    \t\t\t\ttype: 'BufferGeometry',\n\t    \t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t    \t\t\t}\n\t    \t\t};\n\t\n\t    \t\t// standard BufferGeometry serialization\n\t\n\t    \t\tdata.uuid = this.uuid;\n\t    \t\tdata.type = this.type;\n\t    \t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t    \t\tif ( this.parameters !== undefined ) {\n\t\n\t    \t\t\tvar parameters = this.parameters;\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn data;\n\t\n\t    \t\t}\n\t\n\t    \t\tdata.data = { attributes: {} };\n\t\n\t    \t\tvar index = this.index;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tvar array = Array.prototype.slice.call( index.array );\n\t\n\t    \t\t\tdata.data.index = {\n\t    \t\t\t\ttype: index.array.constructor.name,\n\t    \t\t\t\tarray: array\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = this.attributes;\n\t\n\t    \t\tfor ( var key in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ key ];\n\t\n\t    \t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\t\n\t    \t\t\tdata.data.attributes[ key ] = {\n\t    \t\t\t\titemSize: attribute.itemSize,\n\t    \t\t\t\ttype: attribute.array.constructor.name,\n\t    \t\t\t\tarray: array,\n\t    \t\t\t\tnormalized: attribute.normalized\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tvar groups = this.groups;\n\t\n\t    \t\tif ( groups.length > 0 ) {\n\t\n\t    \t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar boundingSphere = this.boundingSphere;\n\t\n\t    \t\tif ( boundingSphere !== null ) {\n\t\n\t    \t\t\tdata.data.boundingSphere = {\n\t    \t\t\t\tcenter: boundingSphere.center.toArray(),\n\t    \t\t\t\tradius: boundingSphere.radius\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\treturn data;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\t/*\n\t    \t\t// Handle primitives\n\t\n\t    \t\tvar parameters = this.parameters;\n\t\n\t    \t\tif ( parameters !== undefined ) {\n\t\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\tfor ( var key in parameters ) {\n\t\n\t    \t\t\t\tvalues.push( parameters[ key ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t    \t\t\tthis.constructor.apply( geometry, values );\n\t    \t\t\treturn geometry;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t    \t\t*/\n\t\n\t    \t\treturn new BufferGeometry().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tvar index = source.index;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tthis.setIndex( index.clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = source.attributes;\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ name ];\n\t    \t\t\tthis.addAttribute( name, attribute.clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar groups = source.groups;\n\t\n\t    \t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar group = groups[ i ];\n\t    \t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdispose: function () {\n\t\n\t    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    BufferGeometry.MaxIndex = 65535;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author jonobr1 / http://jonobr1.com/\n\t     */\n\t\n\t    function Mesh( geometry, material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Mesh';\n\t\n\t    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t    \tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t    \tthis.drawMode = TrianglesDrawMode;\n\t\n\t    \tthis.updateMorphTargets();\n\t\n\t    }\n\t\n\t    Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Mesh,\n\t\n\t    \tisMesh: true,\n\t\n\t    \tsetDrawMode: function ( value ) {\n\t\n\t    \t\tthis.drawMode = value;\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.drawMode = source.drawMode;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tupdateMorphTargets: function () {\n\t\n\t    \t\tvar morphTargets = this.geometry.morphTargets;\n\t\n\t    \t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\t\n\t    \t\t\tthis.morphTargetInfluences = [];\n\t    \t\t\tthis.morphTargetDictionary = {};\n\t\n\t    \t\t\tfor ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\t\n\t    \t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t    \t\t\t\tthis.morphTargetDictionary[ morphTargets[ m ].name ] = m;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar inverseMatrix = new Matrix4();\n\t    \t\tvar ray = new Ray();\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\tvar vA = new Vector3();\n\t    \t\tvar vB = new Vector3();\n\t    \t\tvar vC = new Vector3();\n\t\n\t    \t\tvar tempA = new Vector3();\n\t    \t\tvar tempB = new Vector3();\n\t    \t\tvar tempC = new Vector3();\n\t\n\t    \t\tvar uvA = new Vector2();\n\t    \t\tvar uvB = new Vector2();\n\t    \t\tvar uvC = new Vector2();\n\t\n\t    \t\tvar barycoord = new Vector3();\n\t\n\t    \t\tvar intersectionPoint = new Vector3();\n\t    \t\tvar intersectionPointWorld = new Vector3();\n\t\n\t    \t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\t\n\t    \t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\t\n\t    \t\t\tuv1.multiplyScalar( barycoord.x );\n\t    \t\t\tuv2.multiplyScalar( barycoord.y );\n\t    \t\t\tuv3.multiplyScalar( barycoord.z );\n\t\n\t    \t\t\tuv1.add( uv2 ).add( uv3 );\n\t\n\t    \t\t\treturn uv1.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\t\n\t    \t\t\tvar intersect;\n\t    \t\t\tvar material = object.material;\n\t\n\t    \t\t\tif ( material.side === BackSide ) {\n\t\n\t    \t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( intersect === null ) return null;\n\t\n\t    \t\t\tintersectionPointWorld.copy( point );\n\t    \t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\t\n\t    \t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\t\n\t    \t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\t\n\t    \t\t\treturn {\n\t    \t\t\t\tdistance: distance,\n\t    \t\t\t\tpoint: intersectionPointWorld.clone(),\n\t    \t\t\t\tobject: object\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\t\n\t    \t\t\tvA.fromArray( positions, a * 3 );\n\t    \t\t\tvB.fromArray( positions, b * 3 );\n\t    \t\t\tvC.fromArray( positions, c * 3 );\n\t\n\t    \t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\t\n\t    \t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\tif ( uvs ) {\n\t\n\t    \t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n\t    \t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n\t    \t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\t\n\t    \t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n\t    \t\t\t\tintersection.faceIndex = a;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn intersection;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tvar geometry = this.geometry;\n\t    \t\t\tvar material = this.material;\n\t    \t\t\tvar matrixWorld = this.matrixWorld;\n\t\n\t    \t\t\tif ( material === undefined ) return;\n\t\n\t    \t\t\t// Checking boundingSphere distance to ray\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere );\n\t    \t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tinverseMatrix.getInverse( matrixWorld );\n\t    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t    \t\t\t// Check boundingBox before continuing\n\t\n\t    \t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t    \t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar uvs, intersection;\n\t\n\t    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\tvar a, b, c;\n\t    \t\t\t\tvar index = geometry.index;\n\t    \t\t\t\tvar attributes = geometry.attributes;\n\t    \t\t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\t\tif ( attributes.uv !== undefined ) {\n\t\n\t    \t\t\t\t\tuvs = attributes.uv.array;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\t\n\t    \t\t\t\t\t\ta = indices[ i ];\n\t    \t\t\t\t\t\tb = indices[ i + 1 ];\n\t    \t\t\t\t\t\tc = indices[ i + 2 ];\n\t\n\t    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\t\n\t    \t\t\t\t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t    \t\t\t\t\t\t\tintersects.push( intersection );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\t\n\t    \t\t\t\t\t\ta = i / 3;\n\t    \t\t\t\t\t\tb = a + 1;\n\t    \t\t\t\t\t\tc = a + 2;\n\t\n\t    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\t\n\t    \t\t\t\t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t    \t\t\t\t\t\t\tintersects.push( intersection );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\tvar fvA, fvB, fvC;\n\t    \t\t\t\tvar isFaceMaterial = (material && material.isMultiMaterial);\n\t    \t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\t\n\t    \t\t\t\tvar vertices = geometry.vertices;\n\t    \t\t\t\tvar faces = geometry.faces;\n\t    \t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t    \t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\t\n\t    \t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\t\n\t    \t\t\t\t\tvar face = faces[ f ];\n\t    \t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\t\n\t    \t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\t\n\t    \t\t\t\t\tfvA = vertices[ face.a ];\n\t    \t\t\t\t\tfvB = vertices[ face.b ];\n\t    \t\t\t\t\tfvC = vertices[ face.c ];\n\t\n\t    \t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\t\n\t    \t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t    \t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\t\n\t    \t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t    \t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t    \t\t\t\t\t\tvC.set( 0, 0, 0 );\n\t\n\t    \t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\t\n\t    \t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\t\n\t    \t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\t\n\t    \t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\t\n\t    \t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t    \t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t    \t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\tvA.add( fvA );\n\t    \t\t\t\t\t\tvB.add( fvB );\n\t    \t\t\t\t\t\tvC.add( fvC );\n\t\n\t    \t\t\t\t\t\tfvA = vA;\n\t    \t\t\t\t\t\tfvB = vB;\n\t    \t\t\t\t\t\tfvC = vC;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\t\n\t    \t\t\t\t\tif ( intersection ) {\n\t\n\t    \t\t\t\t\t\tif ( uvs ) {\n\t\n\t    \t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t    \t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t    \t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t    \t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\t\n\t    \t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\tintersection.face = face;\n\t    \t\t\t\t\t\tintersection.faceIndex = f;\n\t    \t\t\t\t\t\tintersects.push( intersection );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'BoxBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\tdepth: depth,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tdepthSegments: depthSegments\n\t    \t};\n\t\n\t    \tvar scope = this;\n\t\n\t    \t// segments\n\t    \twidthSegments = Math.floor( widthSegments ) || 1;\n\t    \theightSegments = Math.floor( heightSegments ) || 1;\n\t    \tdepthSegments = Math.floor( depthSegments ) || 1;\n\t\n\t    \t// these are used to calculate buffer length\n\t    \tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n\t    \tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\t\n\t    \t// buffers\n\t    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t    \tvar vertices = new Float32Array( vertexCount * 3 );\n\t    \tvar normals = new Float32Array( vertexCount * 3 );\n\t    \tvar uvs = new Float32Array( vertexCount * 2 );\n\t\n\t    \t// offset variables\n\t    \tvar vertexBufferOffset = 0;\n\t    \tvar uvBufferOffset = 0;\n\t    \tvar indexBufferOffset = 0;\n\t    \tvar numberOfVertices = 0;\n\t\n\t    \t// group variables\n\t    \tvar groupStart = 0;\n\t\n\t    \t// build each side of the box geometry\n\t    \tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n\t    \tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n\t    \tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n\t    \tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n\t    \tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n\t    \tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\t\n\t    \t// build geometry\n\t    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    \t// helper functions\n\t\n\t    \tfunction calculateVertexCount( w, h, d ) {\n\t\n\t    \t\tvar vertices = 0;\n\t\n\t    \t\t// calculate the amount of vertices for each side (plane)\n\t    \t\tvertices += (w + 1) * (h + 1) * 2; // xy\n\t    \t\tvertices += (w + 1) * (d + 1) * 2; // xz\n\t    \t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\t\n\t    \t\treturn vertices;\n\t\n\t    \t}\n\t\n\t    \tfunction calculateIndexCount( w, h, d ) {\n\t\n\t    \t\tvar index = 0;\n\t\n\t    \t\t// calculate the amount of squares for each side\n\t    \t\tindex += w * h * 2; // xy\n\t    \t\tindex += w * d * 2; // xz\n\t    \t\tindex += d * h * 2; // zy\n\t\n\t    \t\treturn index * 6; // two triangles per square => six vertices per square\n\t\n\t    \t}\n\t\n\t    \tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\t\n\t    \t\tvar segmentWidth\t= width / gridX;\n\t    \t\tvar segmentHeight = height / gridY;\n\t\n\t    \t\tvar widthHalf = width / 2;\n\t    \t\tvar heightHalf = height / 2;\n\t    \t\tvar depthHalf = depth / 2;\n\t\n\t    \t\tvar gridX1 = gridX + 1;\n\t    \t\tvar gridY1 = gridY + 1;\n\t\n\t    \t\tvar vertexCounter = 0;\n\t    \t\tvar groupCount = 0;\n\t\n\t    \t\tvar vector = new Vector3();\n\t\n\t    \t\t// generate vertices, normals and uvs\n\t\n\t    \t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\t\n\t    \t\t\tvar y = iy * segmentHeight - heightHalf;\n\t\n\t    \t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\t\n\t    \t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\t\n\t    \t\t\t\t// set values to correct vector component\n\t    \t\t\t\tvector[ u ] = x * udir;\n\t    \t\t\t\tvector[ v ] = y * vdir;\n\t    \t\t\t\tvector[ w ] = depthHalf;\n\t\n\t    \t\t\t\t// now apply vector to vertex buffer\n\t    \t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n\t    \t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n\t    \t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\t\n\t    \t\t\t\t// set values to correct vector component\n\t    \t\t\t\tvector[ u ] = 0;\n\t    \t\t\t\tvector[ v ] = 0;\n\t    \t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\t\n\t    \t\t\t\t// now apply vector to normal buffer\n\t    \t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n\t    \t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n\t    \t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\t\n\t    \t\t\t\t// uvs\n\t    \t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n\t    \t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\t\n\t    \t\t\t\t// update offsets and counters\n\t    \t\t\t\tvertexBufferOffset += 3;\n\t    \t\t\t\tuvBufferOffset += 2;\n\t    \t\t\t\tvertexCounter += 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// 1. you need three indices to draw a single face\n\t    \t\t// 2. a single segment consists of two faces\n\t    \t\t// 3. so we need to generate six (2*3) indices per segment\n\t\n\t    \t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\t\n\t    \t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\t\n\t    \t\t\t\t// indices\n\t    \t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t    \t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t    \t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t    \t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\t\n\t    \t\t\t\t// face one\n\t    \t\t\t\tindices[ indexBufferOffset ] = a;\n\t    \t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t    \t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\t\n\t    \t\t\t\t// face two\n\t    \t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t    \t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t    \t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\t\n\t    \t\t\t\t// update offsets and counters\n\t    \t\t\t\tindexBufferOffset += 6;\n\t    \t\t\t\tgroupCount += 6;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// add a group to the geometry. this will ensure multi material support\n\t    \t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\t\n\t    \t\t// calculate new start value for groups\n\t    \t\tgroupStart += groupCount;\n\t\n\t    \t\t// update total number of vertices\n\t    \t\tnumberOfVertices += vertexCounter;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t     */\n\t\n\t    function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'PlaneBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments\n\t    \t};\n\t\n\t    \tvar width_half = width / 2;\n\t    \tvar height_half = height / 2;\n\t\n\t    \tvar gridX = Math.floor( widthSegments ) || 1;\n\t    \tvar gridY = Math.floor( heightSegments ) || 1;\n\t\n\t    \tvar gridX1 = gridX + 1;\n\t    \tvar gridY1 = gridY + 1;\n\t\n\t    \tvar segment_width = width / gridX;\n\t    \tvar segment_height = height / gridY;\n\t\n\t    \tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n\t    \tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n\t    \tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\t\n\t    \tvar offset = 0;\n\t    \tvar offset2 = 0;\n\t\n\t    \tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\t\n\t    \t\tvar y = iy * segment_height - height_half;\n\t\n\t    \t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\t\n\t    \t\t\tvar x = ix * segment_width - width_half;\n\t\n\t    \t\t\tvertices[ offset ] = x;\n\t    \t\t\tvertices[ offset + 1 ] = - y;\n\t\n\t    \t\t\tnormals[ offset + 2 ] = 1;\n\t\n\t    \t\t\tuvs[ offset2 ] = ix / gridX;\n\t    \t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\t\n\t    \t\t\toffset += 3;\n\t    \t\t\toffset2 += 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \toffset = 0;\n\t\n\t    \tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\t\n\t    \tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\t\n\t    \t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\t\n\t    \t\t\tvar a = ix + gridX1 * iy;\n\t    \t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t    \t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t    \t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\t\n\t    \t\t\tindices[ offset ] = a;\n\t    \t\t\tindices[ offset + 1 ] = b;\n\t    \t\t\tindices[ offset + 2 ] = d;\n\t\n\t    \t\t\tindices[ offset + 3 ] = b;\n\t    \t\t\tindices[ offset + 4 ] = c;\n\t    \t\t\tindices[ offset + 5 ] = d;\n\t\n\t    \t\t\toffset += 6;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    }\n\t\n\t    PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function Camera() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Camera';\n\t\n\t    \tthis.matrixWorldInverse = new Matrix4();\n\t    \tthis.projectionMatrix = new Matrix4();\n\t\n\t    }\n\t\n\t    Camera.prototype = Object.create( Object3D.prototype );\n\t    Camera.prototype.constructor = Camera;\n\t\n\t    Camera.prototype.isCamera = true;\n\t\n\t    Camera.prototype.getWorldDirection = function () {\n\t\n\t    \tvar quaternion = new Quaternion();\n\t\n\t    \treturn function getWorldDirection( optionalTarget ) {\n\t\n\t    \t\tvar result = optionalTarget || new Vector3();\n\t\n\t    \t\tthis.getWorldQuaternion( quaternion );\n\t\n\t    \t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Camera.prototype.lookAt = function () {\n\t\n\t    \t// This routine does not support cameras with rotated and/or translated parent(s)\n\t\n\t    \tvar m1 = new Matrix4();\n\t\n\t    \treturn function lookAt( vector ) {\n\t\n\t    \t\tm1.lookAt( this.position, vector, this.up );\n\t\n\t    \t\tthis.quaternion.setFromRotationMatrix( m1 );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    Camera.prototype.clone = function () {\n\t\n\t    \treturn new this.constructor().copy( this );\n\t\n\t    };\n\t\n\t    Camera.prototype.copy = function ( source ) {\n\t\n\t    \tObject3D.prototype.copy.call( this, source );\n\t\n\t    \tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\t    \tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author greggman / http://games.greggman.com/\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author tschw\n\t     */\n\t\n\t    function PerspectiveCamera( fov, aspect, near, far ) {\n\t\n\t    \tCamera.call( this );\n\t\n\t    \tthis.type = 'PerspectiveCamera';\n\t\n\t    \tthis.fov = fov !== undefined ? fov : 50;\n\t    \tthis.zoom = 1;\n\t\n\t    \tthis.near = near !== undefined ? near : 0.1;\n\t    \tthis.far = far !== undefined ? far : 2000;\n\t    \tthis.focus = 10;\n\t\n\t    \tthis.aspect = aspect !== undefined ? aspect : 1;\n\t    \tthis.view = null;\n\t\n\t    \tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t    \tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\t\n\t    \tthis.updateProjectionMatrix();\n\t\n\t    }\n\t\n\t    PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\t\n\t    \tconstructor: PerspectiveCamera,\n\t\n\t    \tisPerspectiveCamera: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tCamera.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.fov = source.fov;\n\t    \t\tthis.zoom = source.zoom;\n\t\n\t    \t\tthis.near = source.near;\n\t    \t\tthis.far = source.far;\n\t    \t\tthis.focus = source.focus;\n\t\n\t    \t\tthis.aspect = source.aspect;\n\t    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\t\n\t    \t\tthis.filmGauge = source.filmGauge;\n\t    \t\tthis.filmOffset = source.filmOffset;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t/**\n\t    \t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t    \t *\n\t    \t * The default film gauge is 35, so that the focal length can be specified for\n\t    \t * a 35mm (full frame) camera.\n\t    \t *\n\t    \t * Values for focal length and film gauge must have the same unit.\n\t    \t */\n\t    \tsetFocalLength: function ( focalLength ) {\n\t\n\t    \t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t    \t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\n\t    \t\tthis.fov = exports.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \t/**\n\t    \t * Calculates the focal length from the current .fov and .filmGauge.\n\t    \t */\n\t    \tgetFocalLength: function () {\n\t\n\t    \t\tvar vExtentSlope = Math.tan( exports.Math.DEG2RAD * 0.5 * this.fov );\n\t\n\t    \t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\n\t    \t},\n\t\n\t    \tgetEffectiveFOV: function () {\n\t\n\t    \t\treturn exports.Math.RAD2DEG * 2 * Math.atan(\n\t    \t\t\t\tMath.tan( exports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\t\n\t    \t},\n\t\n\t    \tgetFilmWidth: function () {\n\t\n\t    \t\t// film not completely covered in portrait format (aspect < 1)\n\t    \t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\t\n\t    \t},\n\t\n\t    \tgetFilmHeight: function () {\n\t\n\t    \t\t// film not completely covered in landscape format (aspect > 1)\n\t    \t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\t\n\t    \t},\n\t\n\t    \t/**\n\t    \t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t    \t * multi-monitor/multi-machine setups.\n\t    \t *\n\t    \t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t    \t * the monitors are in grid like this\n\t    \t *\n\t    \t *   +---+---+---+\n\t    \t *   | A | B | C |\n\t    \t *   +---+---+---+\n\t    \t *   | D | E | F |\n\t    \t *   +---+---+---+\n\t    \t *\n\t    \t * then for each monitor you would call it like this\n\t    \t *\n\t    \t *   var w = 1920;\n\t    \t *   var h = 1080;\n\t    \t *   var fullWidth = w * 3;\n\t    \t *   var fullHeight = h * 2;\n\t    \t *\n\t    \t *   --A--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t    \t *   --B--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t    \t *   --C--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t    \t *   --D--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t    \t *   --E--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t    \t *   --F--\n\t    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t    \t *\n\t    \t *   Note there is no reason monitors have to be the same size or in a grid.\n\t    \t */\n\t    \tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\t\n\t    \t\tthis.aspect = fullWidth / fullHeight;\n\t\n\t    \t\tthis.view = {\n\t    \t\t\tfullWidth: fullWidth,\n\t    \t\t\tfullHeight: fullHeight,\n\t    \t\t\toffsetX: x,\n\t    \t\t\toffsetY: y,\n\t    \t\t\twidth: width,\n\t    \t\t\theight: height\n\t    \t\t};\n\t\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tclearViewOffset: function() {\n\t\n\t    \t\tthis.view = null;\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tupdateProjectionMatrix: function () {\n\t\n\t    \t\tvar near = this.near,\n\t    \t\t\ttop = near * Math.tan(\n\t    \t\t\t\t\texports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t    \t\t\theight = 2 * top,\n\t    \t\t\twidth = this.aspect * height,\n\t    \t\t\tleft = - 0.5 * width,\n\t    \t\t\tview = this.view;\n\t\n\t    \t\tif ( view !== null ) {\n\t\n\t    \t\t\tvar fullWidth = view.fullWidth,\n\t    \t\t\t\tfullHeight = view.fullHeight;\n\t\n\t    \t\t\tleft += view.offsetX * width / fullWidth;\n\t    \t\t\ttop -= view.offsetY * height / fullHeight;\n\t    \t\t\twidth *= view.width / fullWidth;\n\t    \t\t\theight *= view.height / fullHeight;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar skew = this.filmOffset;\n\t    \t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\t\n\t    \t\tthis.projectionMatrix.makeFrustum(\n\t    \t\t\t\tleft, left + width, top - height, top, near, this.far );\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.fov = this.fov;\n\t    \t\tdata.object.zoom = this.zoom;\n\t\n\t    \t\tdata.object.near = this.near;\n\t    \t\tdata.object.far = this.far;\n\t    \t\tdata.object.focus = this.focus;\n\t\n\t    \t\tdata.object.aspect = this.aspect;\n\t\n\t    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\t\n\t    \t\tdata.object.filmGauge = this.filmGauge;\n\t    \t\tdata.object.filmOffset = this.filmOffset;\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author arose / http://github.com/arose\n\t     */\n\t\n\t    function OrthographicCamera( left, right, top, bottom, near, far ) {\n\t\n\t    \tCamera.call( this );\n\t\n\t    \tthis.type = 'OrthographicCamera';\n\t\n\t    \tthis.zoom = 1;\n\t    \tthis.view = null;\n\t\n\t    \tthis.left = left;\n\t    \tthis.right = right;\n\t    \tthis.top = top;\n\t    \tthis.bottom = bottom;\n\t\n\t    \tthis.near = ( near !== undefined ) ? near : 0.1;\n\t    \tthis.far = ( far !== undefined ) ? far : 2000;\n\t\n\t    \tthis.updateProjectionMatrix();\n\t\n\t    }\n\t\n\t    OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\t\n\t    \tconstructor: OrthographicCamera,\n\t\n\t    \tisOrthographicCamera: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tCamera.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.left = source.left;\n\t    \t\tthis.right = source.right;\n\t    \t\tthis.top = source.top;\n\t    \t\tthis.bottom = source.bottom;\n\t    \t\tthis.near = source.near;\n\t    \t\tthis.far = source.far;\n\t\n\t    \t\tthis.zoom = source.zoom;\n\t    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\t\n\t    \t\tthis.view = {\n\t    \t\t\tfullWidth: fullWidth,\n\t    \t\t\tfullHeight: fullHeight,\n\t    \t\t\toffsetX: x,\n\t    \t\t\toffsetY: y,\n\t    \t\t\twidth: width,\n\t    \t\t\theight: height\n\t    \t\t};\n\t\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tclearViewOffset: function() {\n\t\n\t    \t\tthis.view = null;\n\t    \t\tthis.updateProjectionMatrix();\n\t\n\t    \t},\n\t\n\t    \tupdateProjectionMatrix: function () {\n\t\n\t    \t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t    \t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t    \t\tvar cx = ( this.right + this.left ) / 2;\n\t    \t\tvar cy = ( this.top + this.bottom ) / 2;\n\t\n\t    \t\tvar left = cx - dx;\n\t    \t\tvar right = cx + dx;\n\t    \t\tvar top = cy + dy;\n\t    \t\tvar bottom = cy - dy;\n\t\n\t    \t\tif ( this.view !== null ) {\n\t\n\t    \t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t    \t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t    \t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t    \t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\t\n\t    \t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t    \t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t    \t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t    \t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.zoom = this.zoom;\n\t    \t\tdata.object.left = this.left;\n\t    \t\tdata.object.right = this.right;\n\t    \t\tdata.object.top = this.top;\n\t    \t\tdata.object.bottom = this.bottom;\n\t    \t\tdata.object.near = this.near;\n\t    \t\tdata.object.far = this.far;\n\t\n\t    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\t\n\t    \tvar mode;\n\t\n\t    \tfunction setMode( value ) {\n\t\n\t    \t\tmode = value;\n\t\n\t    \t}\n\t\n\t    \tvar type, size;\n\t\n\t    \tfunction setIndex( index ) {\n\t\n\t    \t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\t\n\t    \t\t\ttype = gl.UNSIGNED_INT;\n\t    \t\t\tsize = 4;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttype = gl.UNSIGNED_SHORT;\n\t    \t\t\tsize = 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction render( start, count ) {\n\t\n\t    \t\tgl.drawElements( mode, count, type, start * size );\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\t\n\t    \t}\n\t\n\t    \tfunction renderInstances( geometry, start, count ) {\n\t\n\t    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\tif ( extension === null ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tsetMode: setMode,\n\t    \t\tsetIndex: setIndex,\n\t    \t\trender: render,\n\t    \t\trenderInstances: renderInstances\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLBufferRenderer( gl, extensions, infoRender ) {\n\t\n\t    \tvar mode;\n\t\n\t    \tfunction setMode( value ) {\n\t\n\t    \t\tmode = value;\n\t\n\t    \t}\n\t\n\t    \tfunction render( start, count ) {\n\t\n\t    \t\tgl.drawArrays( mode, start, count );\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\t\n\t    \t}\n\t\n\t    \tfunction renderInstances( geometry ) {\n\t\n\t    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\tif ( extension === null ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar position = geometry.attributes.position;\n\t\n\t    \t\tvar count = 0;\n\t\n\t    \t\tif ( (position && position.isInterleavedBufferAttribute) ) {\n\t\n\t    \t\t\tcount = position.data.count;\n\t\n\t    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tcount = position.count;\n\t\n\t    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\t\n\t    \t\t}\n\t\n\t    \t\tinfoRender.calls ++;\n\t    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\t\n\t    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t    \t\tsetMode: setMode,\n\t    \t\trender: render,\n\t    \t\trenderInstances: renderInstances\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLLights() {\n\t\n\t    \tvar lights = {};\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( light ) {\n\t\n\t    \t\t\tif ( lights[ light.id ] !== undefined ) {\n\t\n\t    \t\t\t\treturn lights[ light.id ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar uniforms;\n\t\n\t    \t\t\tswitch ( light.type ) {\n\t\n\t    \t\t\t\tcase 'DirectionalLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tdirection: new Vector3(),\n\t    \t\t\t\t\t\tcolor: new Color(),\n\t\n\t    \t\t\t\t\t\tshadow: false,\n\t    \t\t\t\t\t\tshadowBias: 0,\n\t    \t\t\t\t\t\tshadowRadius: 1,\n\t    \t\t\t\t\t\tshadowMapSize: new Vector2()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'SpotLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tposition: new Vector3(),\n\t    \t\t\t\t\t\tdirection: new Vector3(),\n\t    \t\t\t\t\t\tcolor: new Color(),\n\t    \t\t\t\t\t\tdistance: 0,\n\t    \t\t\t\t\t\tconeCos: 0,\n\t    \t\t\t\t\t\tpenumbraCos: 0,\n\t    \t\t\t\t\t\tdecay: 0,\n\t\n\t    \t\t\t\t\t\tshadow: false,\n\t    \t\t\t\t\t\tshadowBias: 0,\n\t    \t\t\t\t\t\tshadowRadius: 1,\n\t    \t\t\t\t\t\tshadowMapSize: new Vector2()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PointLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tposition: new Vector3(),\n\t    \t\t\t\t\t\tcolor: new Color(),\n\t    \t\t\t\t\t\tdistance: 0,\n\t    \t\t\t\t\t\tdecay: 0,\n\t\n\t    \t\t\t\t\t\tshadow: false,\n\t    \t\t\t\t\t\tshadowBias: 0,\n\t    \t\t\t\t\t\tshadowRadius: 1,\n\t    \t\t\t\t\t\tshadowMapSize: new Vector2()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'HemisphereLight':\n\t    \t\t\t\t\tuniforms = {\n\t    \t\t\t\t\t\tdirection: new Vector3(),\n\t    \t\t\t\t\t\tskyColor: new Color(),\n\t    \t\t\t\t\t\tgroundColor: new Color()\n\t    \t\t\t\t\t};\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tlights[ light.id ] = uniforms;\n\t\n\t    \t\t\treturn uniforms;\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function addLineNumbers( string ) {\n\t\n\t    \tvar lines = string.split( '\\n' );\n\t\n\t    \tfor ( var i = 0; i < lines.length; i ++ ) {\n\t\n\t    \t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\t\n\t    \t}\n\t\n\t    \treturn lines.join( '\\n' );\n\t\n\t    }\n\t\n\t    function WebGLShader( gl, type, string ) {\n\t\n\t    \tvar shader = gl.createShader( type );\n\t\n\t    \tgl.shaderSource( shader, string );\n\t    \tgl.compileShader( shader );\n\t\n\t    \tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\t\n\t    \t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\t\n\t    \t}\n\t\n\t    \tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\t\n\t    \t}\n\t\n\t    \t// --enable-privileged-webgl-extension\n\t    \t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\t\n\t    \treturn shader;\n\t\n\t    }\n\t\n\t    var programIdCount = 0;\n\t\n\t    function getEncodingComponents( encoding ) {\n\t\n\t    \tswitch ( encoding ) {\n\t\n\t    \t\tcase LinearEncoding:\n\t    \t\t\treturn [ 'Linear','( value )' ];\n\t    \t\tcase sRGBEncoding:\n\t    \t\t\treturn [ 'sRGB','( value )' ];\n\t    \t\tcase RGBEEncoding:\n\t    \t\t\treturn [ 'RGBE','( value )' ];\n\t    \t\tcase RGBM7Encoding:\n\t    \t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n\t    \t\tcase RGBM16Encoding:\n\t    \t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n\t    \t\tcase RGBDEncoding:\n\t    \t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n\t    \t\tcase GammaEncoding:\n\t    \t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n\t    \t\tdefault:\n\t    \t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    function getTexelDecodingFunction( functionName, encoding ) {\n\t\n\t    \tvar components = getEncodingComponents( encoding );\n\t    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\t\n\t    }\n\t\n\t    function getTexelEncodingFunction( functionName, encoding ) {\n\t\n\t    \tvar components = getEncodingComponents( encoding );\n\t    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\t\n\t    }\n\t\n\t    function getToneMappingFunction( functionName, toneMapping ) {\n\t\n\t    \tvar toneMappingName;\n\t\n\t    \tswitch ( toneMapping ) {\n\t\n\t    \t\tcase LinearToneMapping:\n\t    \t\t\ttoneMappingName = \"Linear\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tcase ReinhardToneMapping:\n\t    \t\t\ttoneMappingName = \"Reinhard\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tcase Uncharted2ToneMapping:\n\t    \t\t\ttoneMappingName = \"Uncharted2\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tcase CineonToneMapping:\n\t    \t\t\ttoneMappingName = \"OptimizedCineon\";\n\t    \t\t\tbreak;\n\t\n\t    \t\tdefault:\n\t    \t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\t\n\t    \t}\n\t\n\t    \treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\t\n\t    }\n\t\n\t    function generateExtensions( extensions, parameters, rendererExtensions ) {\n\t\n\t    \textensions = extensions || {};\n\t\n\t    \tvar chunks = [\n\t    \t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t    \t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t    \t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t    \t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n\t    \t];\n\t\n\t    \treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    }\n\t\n\t    function generateDefines( defines ) {\n\t\n\t    \tvar chunks = [];\n\t\n\t    \tfor ( var name in defines ) {\n\t\n\t    \t\tvar value = defines[ name ];\n\t\n\t    \t\tif ( value === false ) continue;\n\t\n\t    \t\tchunks.push( '#define ' + name + ' ' + value );\n\t\n\t    \t}\n\t\n\t    \treturn chunks.join( '\\n' );\n\t\n\t    }\n\t\n\t    function fetchAttributeLocations( gl, program, identifiers ) {\n\t\n\t    \tvar attributes = {};\n\t\n\t    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\t\n\t    \tfor ( var i = 0; i < n; i ++ ) {\n\t\n\t    \t\tvar info = gl.getActiveAttrib( program, i );\n\t    \t\tvar name = info.name;\n\t\n\t    \t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\t\n\t    \t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\t\n\t    \t}\n\t\n\t    \treturn attributes;\n\t\n\t    }\n\t\n\t    function filterEmptyLine( string ) {\n\t\n\t    \treturn string !== '';\n\t\n\t    }\n\t\n\t    function replaceLightNums( string, parameters ) {\n\t\n\t    \treturn string\n\t    \t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t    \t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t    \t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t    \t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\t\n\t    }\n\t\n\t    function parseIncludes( string ) {\n\t\n\t    \tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\t\n\t    \tfunction replace( match, include ) {\n\t\n\t    \t\tvar replace = ShaderChunk[ include ];\n\t\n\t    \t\tif ( replace === undefined ) {\n\t\n\t    \t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn parseIncludes( replace );\n\t\n\t    \t}\n\t\n\t    \treturn string.replace( pattern, replace );\n\t\n\t    }\n\t\n\t    function unrollLoops( string ) {\n\t\n\t    \tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\t\n\t    \tfunction replace( match, start, end, snippet ) {\n\t\n\t    \t\tvar unroll = '';\n\t\n\t    \t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\t\n\t    \t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn unroll;\n\t\n\t    \t}\n\t\n\t    \treturn string.replace( pattern, replace );\n\t\n\t    }\n\t\n\t    function WebGLProgram( renderer, code, material, parameters ) {\n\t\n\t    \tvar gl = renderer.context;\n\t\n\t    \tvar extensions = material.extensions;\n\t    \tvar defines = material.defines;\n\t\n\t    \tvar vertexShader = material.__webglShader.vertexShader;\n\t    \tvar fragmentShader = material.__webglShader.fragmentShader;\n\t\n\t    \tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\t\n\t    \tif ( parameters.shadowMapType === PCFShadowMap ) {\n\t\n\t    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\n\t    \t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\t\n\t    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\n\t    \t}\n\t\n\t    \tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t    \tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t    \tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\n\t    \tif ( parameters.envMap ) {\n\t\n\t    \t\tswitch ( material.envMap.mapping ) {\n\t\n\t    \t\t\tcase CubeReflectionMapping:\n\t    \t\t\tcase CubeRefractionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase CubeUVReflectionMapping:\n\t    \t\t\tcase CubeUVRefractionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase EquirectangularReflectionMapping:\n\t    \t\t\tcase EquirectangularRefractionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase SphericalReflectionMapping:\n\t    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t\tswitch ( material.envMap.mapping ) {\n\t\n\t    \t\t\tcase CubeRefractionMapping:\n\t    \t\t\tcase EquirectangularRefractionMapping:\n\t    \t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t\tswitch ( material.combine ) {\n\t\n\t    \t\t\tcase MultiplyOperation:\n\t    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase MixOperation:\n\t    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase AddOperation:\n\t    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\t\n\t    \t// console.log( 'building new program ' );\n\t\n\t    \t//\n\t\n\t    \tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\t\n\t    \tvar customDefines = generateDefines( defines );\n\t\n\t    \t//\n\t\n\t    \tvar program = gl.createProgram();\n\t\n\t    \tvar prefixVertex, prefixFragment;\n\t\n\t    \tif ( material.isRawShaderMaterial ) {\n\t\n\t    \t\tprefixVertex = [\n\t\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t\tprefixFragment = [\n\t\n\t    \t\t\tcustomExtensions,\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t} else {\n\t\n\t    \t\tprefixVertex = [\n\t\n\t    \t\t\t'precision ' + parameters.precision + ' float;',\n\t    \t\t\t'precision ' + parameters.precision + ' int;',\n\t\n\t    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\t\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\t\n\t    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\t\n\t    \t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\n\t    \t\t\tparameters.map ? '#define USE_MAP' : '',\n\t    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t    \t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\n\t    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\t\n\t    \t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t    \t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\t\n\t    \t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t    \t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\t\n\t    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\n\t    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\t\n\t    \t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\t\n\t    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\t\n\t    \t\t\t'uniform mat4 modelMatrix;',\n\t    \t\t\t'uniform mat4 modelViewMatrix;',\n\t    \t\t\t'uniform mat4 projectionMatrix;',\n\t    \t\t\t'uniform mat4 viewMatrix;',\n\t    \t\t\t'uniform mat3 normalMatrix;',\n\t    \t\t\t'uniform vec3 cameraPosition;',\n\t\n\t    \t\t\t'attribute vec3 position;',\n\t    \t\t\t'attribute vec3 normal;',\n\t    \t\t\t'attribute vec2 uv;',\n\t\n\t    \t\t\t'#ifdef USE_COLOR',\n\t\n\t    \t\t\t'\tattribute vec3 color;',\n\t\n\t    \t\t\t'#endif',\n\t\n\t    \t\t\t'#ifdef USE_MORPHTARGETS',\n\t\n\t    \t\t\t'\tattribute vec3 morphTarget0;',\n\t    \t\t\t'\tattribute vec3 morphTarget1;',\n\t    \t\t\t'\tattribute vec3 morphTarget2;',\n\t    \t\t\t'\tattribute vec3 morphTarget3;',\n\t\n\t    \t\t\t'\t#ifdef USE_MORPHNORMALS',\n\t\n\t    \t\t\t'\t\tattribute vec3 morphNormal0;',\n\t    \t\t\t'\t\tattribute vec3 morphNormal1;',\n\t    \t\t\t'\t\tattribute vec3 morphNormal2;',\n\t    \t\t\t'\t\tattribute vec3 morphNormal3;',\n\t\n\t    \t\t\t'\t#else',\n\t\n\t    \t\t\t'\t\tattribute vec3 morphTarget4;',\n\t    \t\t\t'\t\tattribute vec3 morphTarget5;',\n\t    \t\t\t'\t\tattribute vec3 morphTarget6;',\n\t    \t\t\t'\t\tattribute vec3 morphTarget7;',\n\t\n\t    \t\t\t'\t#endif',\n\t\n\t    \t\t\t'#endif',\n\t\n\t    \t\t\t'#ifdef USE_SKINNING',\n\t\n\t    \t\t\t'\tattribute vec4 skinIndex;',\n\t    \t\t\t'\tattribute vec4 skinWeight;',\n\t\n\t    \t\t\t'#endif',\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t\tprefixFragment = [\n\t\n\t    \t\t\tcustomExtensions,\n\t\n\t    \t\t\t'precision ' + parameters.precision + ' float;',\n\t    \t\t\t'precision ' + parameters.precision + ' int;',\n\t\n\t    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\t\n\t    \t\t\tcustomDefines,\n\t\n\t    \t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\t\n\t    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\t\n\t    \t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t    \t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\t\n\t    \t\t\tparameters.map ? '#define USE_MAP' : '',\n\t    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t    \t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\n\t    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\t\n\t    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\t\n\t    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\n\t    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\t\n\t    \t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\t\n\t    \t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\t\n\t    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\t\n\t    \t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\t\n\t    \t\t\t'uniform mat4 viewMatrix;',\n\t    \t\t\t'uniform vec3 cameraPosition;',\n\t\n\t    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n\t    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\t\n\t    \t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t    \t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t    \t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t    \t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t    \t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\t\n\t    \t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\t\n\t    \t\t\t'\\n'\n\t\n\t    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t    \t}\n\t\n\t    \tvertexShader = parseIncludes( vertexShader, parameters );\n\t    \tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\n\t    \tfragmentShader = parseIncludes( fragmentShader, parameters );\n\t    \tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\n\t    \tif ( ! material.isShaderMaterial ) {\n\t\n\t    \t\tvertexShader = unrollLoops( vertexShader );\n\t    \t\tfragmentShader = unrollLoops( fragmentShader );\n\t\n\t    \t}\n\t\n\t    \tvar vertexGlsl = prefixVertex + vertexShader;\n\t    \tvar fragmentGlsl = prefixFragment + fragmentShader;\n\t\n\t    \t// console.log( '*VERTEX*', vertexGlsl );\n\t    \t// console.log( '*FRAGMENT*', fragmentGlsl );\n\t\n\t    \tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t    \tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\t\n\t    \tgl.attachShader( program, glVertexShader );\n\t    \tgl.attachShader( program, glFragmentShader );\n\t\n\t    \t// Force a particular attribute to index 0.\n\t\n\t    \tif ( material.index0AttributeName !== undefined ) {\n\t\n\t    \t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\t\n\t    \t} else if ( parameters.morphTargets === true ) {\n\t\n\t    \t\t// programs with morphTargets displace position out of attribute 0\n\t    \t\tgl.bindAttribLocation( program, 0, 'position' );\n\t\n\t    \t}\n\t\n\t    \tgl.linkProgram( program );\n\t\n\t    \tvar programLog = gl.getProgramInfoLog( program );\n\t    \tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t    \tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\t\n\t    \tvar runnable = true;\n\t    \tvar haveDiagnostics = true;\n\t\n\t    \t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t    \t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\t\n\t    \tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\t\n\t    \t\trunnable = false;\n\t\n\t    \t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\t\n\t    \t} else if ( programLog !== '' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\t\n\t    \t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\t\n\t    \t\thaveDiagnostics = false;\n\t\n\t    \t}\n\t\n\t    \tif ( haveDiagnostics ) {\n\t\n\t    \t\tthis.diagnostics = {\n\t\n\t    \t\t\trunnable: runnable,\n\t    \t\t\tmaterial: material,\n\t\n\t    \t\t\tprogramLog: programLog,\n\t\n\t    \t\t\tvertexShader: {\n\t\n\t    \t\t\t\tlog: vertexLog,\n\t    \t\t\t\tprefix: prefixVertex\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfragmentShader: {\n\t\n\t    \t\t\t\tlog: fragmentLog,\n\t    \t\t\t\tprefix: prefixFragment\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \t// clean up\n\t\n\t    \tgl.deleteShader( glVertexShader );\n\t    \tgl.deleteShader( glFragmentShader );\n\t\n\t    \t// set up caching for uniform locations\n\t\n\t    \tvar cachedUniforms;\n\t\n\t    \tthis.getUniforms = function() {\n\t\n\t    \t\tif ( cachedUniforms === undefined ) {\n\t\n\t    \t\t\tcachedUniforms =\n\t    \t\t\t\t\tnew WebGLUniforms( gl, program, renderer );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn cachedUniforms;\n\t\n\t    \t};\n\t\n\t    \t// set up caching for attribute locations\n\t\n\t    \tvar cachedAttributes;\n\t\n\t    \tthis.getAttributes = function() {\n\t\n\t    \t\tif ( cachedAttributes === undefined ) {\n\t\n\t    \t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn cachedAttributes;\n\t\n\t    \t};\n\t\n\t    \t// free resource\n\t\n\t    \tthis.destroy = function() {\n\t\n\t    \t\tgl.deleteProgram( program );\n\t    \t\tthis.program = undefined;\n\t\n\t    \t};\n\t\n\t    \t// DEPRECATED\n\t\n\t    \tObject.defineProperties( this, {\n\t\n\t    \t\tuniforms: {\n\t    \t\t\tget: function() {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t    \t\t\t\treturn this.getUniforms();\n\t\n\t    \t\t\t}\n\t    \t\t},\n\t\n\t    \t\tattributes: {\n\t    \t\t\tget: function() {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t    \t\t\t\treturn this.getAttributes();\n\t\n\t    \t\t\t}\n\t    \t\t}\n\t\n\t    \t} );\n\t\n\t\n\t    \t//\n\t\n\t    \tthis.id = programIdCount ++;\n\t    \tthis.code = code;\n\t    \tthis.usedTimes = 1;\n\t    \tthis.program = program;\n\t    \tthis.vertexShader = glVertexShader;\n\t    \tthis.fragmentShader = glFragmentShader;\n\t\n\t    \treturn this;\n\t\n\t    }\n\t\n\t    function WebGLPrograms( renderer, capabilities ) {\n\t\n\t    \tvar programs = [];\n\t\n\t    \tvar shaderIDs = {\n\t    \t\tMeshDepthMaterial: 'depth',\n\t    \t\tMeshNormalMaterial: 'normal',\n\t    \t\tMeshBasicMaterial: 'basic',\n\t    \t\tMeshLambertMaterial: 'lambert',\n\t    \t\tMeshPhongMaterial: 'phong',\n\t    \t\tMeshStandardMaterial: 'physical',\n\t    \t\tMeshPhysicalMaterial: 'physical',\n\t    \t\tLineBasicMaterial: 'basic',\n\t    \t\tLineDashedMaterial: 'dashed',\n\t    \t\tPointsMaterial: 'points'\n\t    \t};\n\t\n\t    \tvar parameterNames = [\n\t    \t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t    \t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t    \t\t\"roughnessMap\", \"metalnessMap\",\n\t    \t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t    \t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t    \t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t    \t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t    \t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n\t    \t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t    \t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n\t    \t];\n\t\n\t\n\t    \tfunction allocateBones( object ) {\n\t\n\t    \t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\t\n\t    \t\t\treturn 1024;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// default for when object is not specified\n\t    \t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t    \t\t\t//\n\t    \t\t\t//  - leave some extra space for other uniforms\n\t    \t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t    \t\t\t//    (up to 54 should be safe)\n\t\n\t    \t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t    \t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\t\n\t    \t\t\tvar maxBones = nVertexMatrices;\n\t\n\t    \t\t\tif ( object !== undefined && (object && object.isSkinnedMesh) ) {\n\t\n\t    \t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\t\n\t    \t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn maxBones;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\t\n\t    \t\tvar encoding;\n\t\n\t    \t\tif ( ! map ) {\n\t\n\t    \t\t\tencoding = LinearEncoding;\n\t\n\t    \t\t} else if ( (map && map.isTexture) ) {\n\t\n\t    \t\t\tencoding = map.encoding;\n\t\n\t    \t\t} else if ( (map && map.isWebGLRenderTarget) ) {\n\t\n\t    \t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t    \t\t\tencoding = map.texture.encoding;\n\t\n\t    \t\t}\n\t\n\t    \t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t    \t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\t\n\t    \t\t\tencoding = GammaEncoding;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn encoding;\n\t\n\t    \t}\n\t\n\t    \tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\t\n\t    \t\tvar shaderID = shaderIDs[ material.type ];\n\t\n\t    \t\t// heuristics to create shader parameters according to lights in the scene\n\t    \t\t// (not to blow over maxLights budget)\n\t\n\t    \t\tvar maxBones = allocateBones( object );\n\t    \t\tvar precision = renderer.getPrecision();\n\t\n\t    \t\tif ( material.precision !== null ) {\n\t\n\t    \t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\t\n\t    \t\t\tif ( precision !== material.precision ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\t\n\t    \t\tvar parameters = {\n\t\n\t    \t\t\tshaderID: shaderID,\n\t\n\t    \t\t\tprecision: precision,\n\t    \t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t    \t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t    \t\t\tmap: !! material.map,\n\t    \t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t    \t\t\tenvMap: !! material.envMap,\n\t    \t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t    \t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t    \t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t    \t\t\tlightMap: !! material.lightMap,\n\t    \t\t\taoMap: !! material.aoMap,\n\t    \t\t\temissiveMap: !! material.emissiveMap,\n\t    \t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t    \t\t\tbumpMap: !! material.bumpMap,\n\t    \t\t\tnormalMap: !! material.normalMap,\n\t    \t\t\tdisplacementMap: !! material.displacementMap,\n\t    \t\t\troughnessMap: !! material.roughnessMap,\n\t    \t\t\tmetalnessMap: !! material.metalnessMap,\n\t    \t\t\tspecularMap: !! material.specularMap,\n\t    \t\t\talphaMap: !! material.alphaMap,\n\t\n\t    \t\t\tcombine: material.combine,\n\t\n\t    \t\t\tvertexColors: material.vertexColors,\n\t\n\t    \t\t\tfog: !! fog,\n\t    \t\t\tuseFog: material.fog,\n\t    \t\t\tfogExp: (fog && fog.isFogExp2),\n\t\n\t    \t\t\tflatShading: material.shading === FlatShading,\n\t\n\t    \t\t\tsizeAttenuation: material.sizeAttenuation,\n\t    \t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\t\n\t    \t\t\tskinning: material.skinning,\n\t    \t\t\tmaxBones: maxBones,\n\t    \t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\t\n\t    \t\t\tmorphTargets: material.morphTargets,\n\t    \t\t\tmorphNormals: material.morphNormals,\n\t    \t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t    \t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\t\n\t    \t\t\tnumDirLights: lights.directional.length,\n\t    \t\t\tnumPointLights: lights.point.length,\n\t    \t\t\tnumSpotLights: lights.spot.length,\n\t    \t\t\tnumHemiLights: lights.hemi.length,\n\t\n\t    \t\t\tnumClippingPlanes: nClipPlanes,\n\t\n\t    \t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n\t    \t\t\tshadowMapType: renderer.shadowMap.type,\n\t\n\t    \t\t\ttoneMapping: renderer.toneMapping,\n\t    \t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\n\t    \t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\n\t    \t\t\talphaTest: material.alphaTest,\n\t    \t\t\tdoubleSided: material.side === DoubleSide,\n\t    \t\t\tflipSided: material.side === BackSide,\n\t\n\t    \t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\t\n\t    \t\t};\n\t\n\t    \t\treturn parameters;\n\t\n\t    \t};\n\t\n\t    \tthis.getProgramCode = function ( material, parameters ) {\n\t\n\t    \t\tvar array = [];\n\t\n\t    \t\tif ( parameters.shaderID ) {\n\t\n\t    \t\t\tarray.push( parameters.shaderID );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tarray.push( material.fragmentShader );\n\t    \t\t\tarray.push( material.vertexShader );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.defines !== undefined ) {\n\t\n\t    \t\t\tfor ( var name in material.defines ) {\n\t\n\t    \t\t\t\tarray.push( name );\n\t    \t\t\t\tarray.push( material.defines[ name ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\t\n\t    \t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn array.join();\n\t\n\t    \t};\n\t\n\t    \tthis.acquireProgram = function ( material, parameters, code ) {\n\t\n\t    \t\tvar program;\n\t\n\t    \t\t// Check if code has been already compiled\n\t    \t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\t\n\t    \t\t\tvar programInfo = programs[ p ];\n\t\n\t    \t\t\tif ( programInfo.code === code ) {\n\t\n\t    \t\t\t\tprogram = programInfo;\n\t    \t\t\t\t++ program.usedTimes;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\tprogram = new WebGLProgram( renderer, code, material, parameters );\n\t    \t\t\tprograms.push( program );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn program;\n\t\n\t    \t};\n\t\n\t    \tthis.releaseProgram = function( program ) {\n\t\n\t    \t\tif ( -- program.usedTimes === 0 ) {\n\t\n\t    \t\t\t// Remove from unordered set\n\t    \t\t\tvar i = programs.indexOf( program );\n\t    \t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t    \t\t\tprograms.pop();\n\t\n\t    \t\t\t// Free WebGL resources\n\t    \t\t\tprogram.destroy();\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \t// Exposed for resource monitoring & error feedback via renderer.info:\n\t    \tthis.programs = programs;\n\t\n\t    }\n\t\n\t    function WebGLGeometries( gl, properties, info ) {\n\t\n\t    \tvar geometries = {};\n\t\n\t    \tfunction onGeometryDispose( event ) {\n\t\n\t    \t\tvar geometry = event.target;\n\t    \t\tvar buffergeometry = geometries[ geometry.id ];\n\t\n\t    \t\tif ( buffergeometry.index !== null ) {\n\t\n\t    \t\t\tdeleteAttribute( buffergeometry.index );\n\t\n\t    \t\t}\n\t\n\t    \t\tdeleteAttributes( buffergeometry.attributes );\n\t\n\t    \t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\t\n\t    \t\tdelete geometries[ geometry.id ];\n\t\n\t    \t\t// TODO\n\t\n\t    \t\tvar property = properties.get( geometry );\n\t\n\t    \t\tif ( property.wireframe ) {\n\t\n\t    \t\t\tdeleteAttribute( property.wireframe );\n\t\n\t    \t\t}\n\t\n\t    \t\tproperties.delete( geometry );\n\t\n\t    \t\tvar bufferproperty = properties.get( buffergeometry );\n\t\n\t    \t\tif ( bufferproperty.wireframe ) {\n\t\n\t    \t\t\tdeleteAttribute( bufferproperty.wireframe );\n\t\n\t    \t\t}\n\t\n\t    \t\tproperties.delete( buffergeometry );\n\t\n\t    \t\t//\n\t\n\t    \t\tinfo.memory.geometries --;\n\t\n\t    \t}\n\t\n\t    \tfunction getAttributeBuffer( attribute ) {\n\t\n\t    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn properties.get( attribute ).__webglBuffer;\n\t\n\t    \t}\n\t\n\t    \tfunction deleteAttribute( attribute ) {\n\t\n\t    \t\tvar buffer = getAttributeBuffer( attribute );\n\t\n\t    \t\tif ( buffer !== undefined ) {\n\t\n\t    \t\t\tgl.deleteBuffer( buffer );\n\t    \t\t\tremoveAttributeBuffer( attribute );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction deleteAttributes( attributes ) {\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tdeleteAttribute( attributes[ name ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction removeAttributeBuffer( attribute ) {\n\t\n\t    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\tproperties.delete( attribute.data );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tproperties.delete( attribute );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( object ) {\n\t\n\t    \t\t\tvar geometry = object.geometry;\n\t\n\t    \t\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\t\n\t    \t\t\t\treturn geometries[ geometry.id ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\t\n\t    \t\t\tvar buffergeometry;\n\t\n\t    \t\t\tif ( geometry.isBufferGeometry ) {\n\t\n\t    \t\t\t\tbuffergeometry = geometry;\n\t\n\t    \t\t\t} else if ( geometry.isGeometry ) {\n\t\n\t    \t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\t\n\t    \t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometries[ geometry.id ] = buffergeometry;\n\t\n\t    \t\t\tinfo.memory.geometries ++;\n\t\n\t    \t\t\treturn buffergeometry;\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLObjects( gl, properties, info ) {\n\t\n\t    \tvar geometries = new WebGLGeometries( gl, properties, info );\n\t\n\t    \t//\n\t\n\t    \tfunction update( object ) {\n\t\n\t    \t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\t\n\t    \t\tvar geometry = geometries.get( object );\n\t\n\t    \t\tif ( object.geometry.isGeometry ) {\n\t\n\t    \t\t\tgeometry.updateFromObject( object );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar index = geometry.index;\n\t    \t\tvar attributes = geometry.attributes;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var name in attributes ) {\n\t\n\t    \t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\t\n\t    \t\t}\n\t\n\t    \t\t// morph targets\n\t\n\t    \t\tvar morphAttributes = geometry.morphAttributes;\n\t\n\t    \t\tfor ( var name in morphAttributes ) {\n\t\n\t    \t\t\tvar array = morphAttributes[ name ];\n\t\n\t    \t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry;\n\t\n\t    \t}\n\t\n\t    \tfunction updateAttribute( attribute, bufferType ) {\n\t\n\t    \t\tvar data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;\n\t\n\t    \t\tvar attributeProperties = properties.get( data );\n\t\n\t    \t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\t\n\t    \t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\t\n\t    \t\t} else if ( attributeProperties.version !== data.version ) {\n\t\n\t    \t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction createBuffer( attributeProperties, data, bufferType ) {\n\t\n\t    \t\tattributeProperties.__webglBuffer = gl.createBuffer();\n\t    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\t\n\t    \t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\t\n\t    \t\tgl.bufferData( bufferType, data.array, usage );\n\t\n\t    \t\tattributeProperties.version = data.version;\n\t\n\t    \t}\n\t\n\t    \tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\t\n\t    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\t\n\t    \t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\t\n\t    \t\t\t// Not using update ranges\n\t\n\t    \t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\t\n\t    \t\t} else if ( data.updateRange.count === 0 ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n\t    \t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\t\n\t    \t\t\tdata.updateRange.count = 0; // reset range\n\t\n\t    \t\t}\n\t\n\t    \t\tattributeProperties.version = data.version;\n\t\n\t    \t}\n\t\n\t    \tfunction getAttributeBuffer( attribute ) {\n\t\n\t    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn properties.get( attribute ).__webglBuffer;\n\t\n\t    \t}\n\t\n\t    \tfunction getWireframeAttribute( geometry ) {\n\t\n\t    \t\tvar property = properties.get( geometry );\n\t\n\t    \t\tif ( property.wireframe !== undefined ) {\n\t\n\t    \t\t\treturn property.wireframe;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar indices = [];\n\t\n\t    \t\tvar index = geometry.index;\n\t    \t\tvar attributes = geometry.attributes;\n\t    \t\tvar position = attributes.position;\n\t\n\t    \t\t// console.time( 'wireframe' );\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tvar edges = {};\n\t    \t\t\tvar array = index.array;\n\t\n\t    \t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\t\n\t    \t\t\t\tvar a = array[ i + 0 ];\n\t    \t\t\t\tvar b = array[ i + 1 ];\n\t    \t\t\t\tvar c = array[ i + 2 ];\n\t\n\t    \t\t\t\tindices.push( a, b, b, c, c, a );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar array = attributes.position.array;\n\t\n\t    \t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\t\n\t    \t\t\t\tvar a = i + 0;\n\t    \t\t\t\tvar b = i + 1;\n\t    \t\t\t\tvar c = i + 2;\n\t\n\t    \t\t\t\tindices.push( a, b, b, c, c, a );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// console.timeEnd( 'wireframe' );\n\t\n\t    \t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n\t    \t\tvar attribute = new BufferAttribute( new TypeArray( indices ), 1 );\n\t\n\t    \t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\t\n\t    \t\tproperty.wireframe = attribute;\n\t\n\t    \t\treturn attribute;\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tgetAttributeBuffer: getAttributeBuffer,\n\t    \t\tgetWireframeAttribute: getWireframeAttribute,\n\t\n\t    \t\tupdate: update\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\t\n\t    \tvar _infoMemory = info.memory;\n\t    \tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\t\n\t    \t//\n\t\n\t    \tfunction clampToMaxSize( image, maxSize ) {\n\t\n\t    \t\tif ( image.width > maxSize || image.height > maxSize ) {\n\t\n\t    \t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t    \t\t\t// premultiplied alpha.\n\t\n\t    \t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\t\n\t    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\t\tcanvas.width = Math.floor( image.width * scale );\n\t    \t\t\tcanvas.height = Math.floor( image.height * scale );\n\t\n\t    \t\t\tvar context = canvas.getContext( '2d' );\n\t    \t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\t\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\t\n\t    \t\t\treturn canvas;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn image;\n\t\n\t    \t}\n\t\n\t    \tfunction isPowerOfTwo( image ) {\n\t\n\t    \t\treturn exports.Math.isPowerOfTwo( image.width ) && exports.Math.isPowerOfTwo( image.height );\n\t\n\t    \t}\n\t\n\t    \tfunction makePowerOfTwo( image ) {\n\t\n\t    \t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\t\n\t    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \t\t\tcanvas.width = exports.Math.nearestPowerOfTwo( image.width );\n\t    \t\t\tcanvas.height = exports.Math.nearestPowerOfTwo( image.height );\n\t\n\t    \t\t\tvar context = canvas.getContext( '2d' );\n\t    \t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\t\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\t\n\t    \t\t\treturn canvas;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn image;\n\t\n\t    \t}\n\t\n\t    \tfunction textureNeedsPowerOfTwo( texture ) {\n\t\n\t    \t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;\n\t    \t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;\n\t\n\t    \t\treturn false;\n\t\n\t    \t}\n\t\n\t    \t// Fallback filters for non-power-of-2 textures\n\t\n\t    \tfunction filterFallback( f ) {\n\t\n\t    \t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\t\n\t    \t\t\treturn _gl.NEAREST;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn _gl.LINEAR;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction onTextureDispose( event ) {\n\t\n\t    \t\tvar texture = event.target;\n\t\n\t    \t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\t\n\t    \t\tdeallocateTexture( texture );\n\t\n\t    \t\t_infoMemory.textures --;\n\t\n\t\n\t    \t}\n\t\n\t    \tfunction onRenderTargetDispose( event ) {\n\t\n\t    \t\tvar renderTarget = event.target;\n\t\n\t    \t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\t\n\t    \t\tdeallocateRenderTarget( renderTarget );\n\t\n\t    \t\t_infoMemory.textures --;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction deallocateTexture( texture ) {\n\t\n\t    \t\tvar textureProperties = properties.get( texture );\n\t\n\t    \t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\t\n\t    \t\t\t// cube texture\n\t\n\t    \t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// 2D texture\n\t\n\t    \t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\t\n\t    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\t\n\t    \t\t}\n\t\n\t    \t\t// remove all webgl properties\n\t    \t\tproperties.delete( texture );\n\t\n\t    \t}\n\t\n\t    \tfunction deallocateRenderTarget( renderTarget ) {\n\t\n\t    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\t    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\n\t    \t\tif ( ! renderTarget ) return;\n\t\n\t    \t\tif ( textureProperties.__webglTexture !== undefined ) {\n\t\n\t    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( renderTarget.depthTexture ) {\n\t\n\t    \t\t\trenderTarget.depthTexture.dispose();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t    \t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t    \t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\n\t    \t\t}\n\t\n\t    \t\tproperties.delete( renderTarget.texture );\n\t    \t\tproperties.delete( renderTarget );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t\n\t\n\t    \tfunction setTexture2D( texture, slot ) {\n\t\n\t    \t\tvar textureProperties = properties.get( texture );\n\t\n\t    \t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\t\n\t    \t\t\tvar image = texture.image;\n\t\n\t    \t\t\tif ( image === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\t\n\t    \t\t\t} else if ( image.complete === false ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t    \t\t\t\treturn;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\n\t    \t}\n\t\n\t    \tfunction setTextureCube( texture, slot ) {\n\t\n\t    \t\tvar textureProperties = properties.get( texture );\n\t\n\t    \t\tif ( texture.image.length === 6 ) {\n\t\n\t    \t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\t\n\t    \t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\t\n\t    \t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\t\n\t    \t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\t\n\t    \t\t\t\t\t_infoMemory.textures ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\t\n\t    \t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\n\t    \t\t\t\tvar isCompressed = (texture && texture.isCompressedTexture);\n\t    \t\t\t\tvar isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);\n\t\n\t    \t\t\t\tvar cubeImage = [];\n\t\n\t    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\t\n\t    \t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar image = cubeImage[ 0 ],\n\t    \t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t    \t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t    \t\t\t\tglType = paramThreeToGL( texture.type );\n\t\n\t    \t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\t\n\t    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( ! isCompressed ) {\n\t\n\t    \t\t\t\t\t\tif ( isDataTexture ) {\n\t\n\t    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\t\n\t    \t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\t\n\t    \t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\t\n\t    \t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\t\n\t    \t\t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\t\n\t    \t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttextureProperties.__version = texture.version;\n\t\n\t    \t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction setTextureCubeDynamic( texture, slot ) {\n\t\n\t    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\t\n\t    \t}\n\t\n\t    \tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\t\n\t    \t\tvar extension;\n\t\n\t    \t\tif ( isPowerOfTwoImage ) {\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\t\n\t    \t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\t\n\t    \t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\n\t    \t\tif ( extension ) {\n\t\n\t    \t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t    \t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\t\n\t    \t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\t\n\t    \t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t    \t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction uploadTexture( textureProperties, texture, slot ) {\n\t\n\t    \t\tif ( textureProperties.__webglInit === undefined ) {\n\t\n\t    \t\t\ttextureProperties.__webglInit = true;\n\t\n\t    \t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\t\n\t    \t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\n\t    \t\t\t_infoMemory.textures ++;\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\n\t    \t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t    \t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t    \t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\n\t    \t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\t\n\t    \t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\t\n\t    \t\t\timage = makePowerOfTwo( image );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t    \t\tglFormat = paramThreeToGL( texture.format ),\n\t    \t\tglType = paramThreeToGL( texture.type );\n\t\n\t    \t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\t\n\t    \t\tvar mipmap, mipmaps = texture.mipmaps;\n\t\n\t    \t\tif ( (texture && texture.isDepthTexture) ) {\n\t\n\t    \t\t\t// populate depth texture with dummy data\n\t\n\t    \t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\t\n\t    \t\t\tif ( texture.type === FloatType ) {\n\t\n\t    \t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n\t    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\n\t    \t\t\t} else if ( _isWebGL2 ) {\n\t\n\t    \t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t    \t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t    \t\t\tif ( texture.format === DepthStencilFormat ) {\n\t\n\t    \t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\t\n\t    \t\t} else if ( (texture && texture.isDataTexture) ) {\n\t\n\t    \t\t\t// use manually created mipmaps if available\n\t    \t\t\t// if there are no manual mipmaps\n\t    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\n\t    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\tmipmap = mipmaps[ i ];\n\t    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture.generateMipmaps = false;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (texture && texture.isCompressedTexture) ) {\n\t\n\t    \t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tmipmap = mipmaps[ i ];\n\t\n\t    \t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\t\n\t    \t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\t\n\t    \t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// regular Texture (image, video, canvas)\n\t\n\t    \t\t\t// use manually created mipmaps if available\n\t    \t\t\t// if there are no manual mipmaps\n\t    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\n\t    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\tmipmap = mipmaps[ i ];\n\t    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture.generateMipmaps = false;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\n\t    \t\ttextureProperties.__version = texture.version;\n\t\n\t    \t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t    \t}\n\t\n\t    \t// Render targets\n\t\n\t    \t// Setup storage for target texture and bind it to correct framebuffer\n\t    \tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\t\n\t    \t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n\t    \t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n\t    \t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t    \t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\n\t    \t}\n\t\n\t    \t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t    \tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\t\n\t    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\t\n\t    \t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\t\n\t    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\t\n\t    \t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\t\n\t    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// FIXME: We don't support !depth !stencil\n\t    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\t\n\t    \t\t}\n\t\n\t    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\t\n\t    \t}\n\t\n\t    \t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t    \tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\t\n\t    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t    \t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\t\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\n\t    \t\tif ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {\n\t\n\t    \t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\n\t    \t\t}\n\t\n\t    \t\t// upload an empty depth texture with framebuffer size\n\t    \t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t    \t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t    \t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\t    \t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t    \t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t    \t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t    \t\t}\n\t\n\t    \t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\t\n\t    \t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\n\t    \t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\t\n\t    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\t\n\t    \t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\t\n\t    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthrow new Error('Unknown depthTexture format')\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Setup GL resources for a non-texture depth buffer\n\t    \tfunction setupDepthRenderbuffer( renderTarget ) {\n\t\n\t    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\n\t    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t\n\t    \t\tif ( renderTarget.depthTexture ) {\n\t\n\t    \t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\n\t    \t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tif ( isCube ) {\n\t\n\t    \t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\t\n\t    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t    \t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t    \t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t    \t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t    \t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\n\t    \t}\n\t\n\t    \t// Set up GL resources for the render target\n\t    \tfunction setupRenderTarget( renderTarget ) {\n\t\n\t    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\t    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\n\t    \t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\t\n\t    \t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\n\t    \t\t_infoMemory.textures ++;\n\t\n\t    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\t    \t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\t\n\t    \t\t// Setup framebuffer\n\t\n\t    \t\tif ( isCube ) {\n\t\n\t    \t\t\trenderTargetProperties.__webglFramebuffer = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\t\n\t    \t\t}\n\t\n\t    \t\t// Setup color buffer\n\t\n\t    \t\tif ( isCube ) {\n\t\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t    \t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\t\n\t    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t    \t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t    \t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t    \t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\t\n\t    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\t\n\t    \t\t}\n\t\n\t    \t\t// Setup depth and stencil buffers\n\t\n\t    \t\tif ( renderTarget.depthBuffer ) {\n\t\n\t    \t\t\tsetupDepthRenderbuffer( renderTarget );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction updateRenderTargetMipmap( renderTarget ) {\n\t\n\t    \t\tvar texture = renderTarget.texture;\n\t\n\t    \t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n\t    \t\t\t\ttexture.minFilter !== NearestFilter &&\n\t    \t\t\t\ttexture.minFilter !== LinearFilter ) {\n\t\n\t    \t\t\tvar target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t    \t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\t\n\t    \t\t\tstate.bindTexture( target, webglTexture );\n\t    \t\t\t_gl.generateMipmap( target );\n\t    \t\t\tstate.bindTexture( target, null );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.setTexture2D = setTexture2D;\n\t    \tthis.setTextureCube = setTextureCube;\n\t    \tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t    \tthis.setupRenderTarget = setupRenderTarget;\n\t    \tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\n\t    }\n\t\n\t    /**\n\t     * @author fordacious / fordacious.github.io\n\t     */\n\t\n\t    function WebGLProperties() {\n\t\n\t    \tvar properties = {};\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( object ) {\n\t\n\t    \t\t\tvar uuid = object.uuid;\n\t    \t\t\tvar map = properties[ uuid ];\n\t\n\t    \t\t\tif ( map === undefined ) {\n\t\n\t    \t\t\t\tmap = {};\n\t    \t\t\t\tproperties[ uuid ] = map;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn map;\n\t\n\t    \t\t},\n\t\n\t    \t\tdelete: function ( object ) {\n\t\n\t    \t\t\tdelete properties[ object.uuid ];\n\t\n\t    \t\t},\n\t\n\t    \t\tclear: function () {\n\t\n\t    \t\t\tproperties = {};\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLState( gl, extensions, paramThreeToGL ) {\n\t\n\t    \tfunction ColorBuffer() {\n\t\n\t    \t\tvar locked = false;\n\t\n\t    \t\tvar color = new Vector4();\n\t    \t\tvar currentColorMask = null;\n\t    \t\tvar currentColorClear = new Vector4();\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tsetMask: function ( colorMask ) {\n\t\n\t    \t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\t\n\t    \t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t    \t\t\t\t\tcurrentColorMask = colorMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetLocked: function ( lock ) {\n\t\n\t    \t\t\t\tlocked = lock;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetClear: function ( r, g, b, a ) {\n\t\n\t    \t\t\t\tcolor.set( r, g, b, a );\n\t\n\t    \t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\t\n\t    \t\t\t\t\tgl.clearColor( r, g, b, a );\n\t    \t\t\t\t\tcurrentColorClear.copy( color );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\treset: function () {\n\t\n\t    \t\t\t\tlocked = false;\n\t\n\t    \t\t\t\tcurrentColorMask = null;\n\t    \t\t\t\tcurrentColorClear.set( 0, 0, 0, 1 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \tfunction DepthBuffer() {\n\t\n\t    \t\tvar locked = false;\n\t\n\t    \t\tvar currentDepthMask = null;\n\t    \t\tvar currentDepthFunc = null;\n\t    \t\tvar currentDepthClear = null;\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tsetTest: function ( depthTest ) {\n\t\n\t    \t\t\t\tif ( depthTest ) {\n\t\n\t    \t\t\t\t\tenable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tdisable( gl.DEPTH_TEST );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetMask: function ( depthMask ) {\n\t\n\t    \t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\t\n\t    \t\t\t\t\tgl.depthMask( depthMask );\n\t    \t\t\t\t\tcurrentDepthMask = depthMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetFunc: function ( depthFunc ) {\n\t\n\t    \t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\t\n\t    \t\t\t\t\tif ( depthFunc ) {\n\t\n\t    \t\t\t\t\t\tswitch ( depthFunc ) {\n\t\n\t    \t\t\t\t\t\t\tcase NeverDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase AlwaysDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase LessDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase LessEqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase EqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase GreaterDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase NotEqualDepth:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tdefault:\n\t\n\t    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetLocked: function ( lock ) {\n\t\n\t    \t\t\t\tlocked = lock;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetClear: function ( depth ) {\n\t\n\t    \t\t\t\tif ( currentDepthClear !== depth ) {\n\t\n\t    \t\t\t\t\tgl.clearDepth( depth );\n\t    \t\t\t\t\tcurrentDepthClear = depth;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\treset: function () {\n\t\n\t    \t\t\t\tlocked = false;\n\t\n\t    \t\t\t\tcurrentDepthMask = null;\n\t    \t\t\t\tcurrentDepthFunc = null;\n\t    \t\t\t\tcurrentDepthClear = null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \tfunction StencilBuffer() {\n\t\n\t    \t\tvar locked = false;\n\t\n\t    \t\tvar currentStencilMask = null;\n\t    \t\tvar currentStencilFunc = null;\n\t    \t\tvar currentStencilRef = null;\n\t    \t\tvar currentStencilFuncMask = null;\n\t    \t\tvar currentStencilFail  = null;\n\t    \t\tvar currentStencilZFail = null;\n\t    \t\tvar currentStencilZPass = null;\n\t    \t\tvar currentStencilClear = null;\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tsetTest: function ( stencilTest ) {\n\t\n\t    \t\t\t\tif ( stencilTest ) {\n\t\n\t    \t\t\t\t\tenable( gl.STENCIL_TEST );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tdisable( gl.STENCIL_TEST );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetMask: function ( stencilMask ) {\n\t\n\t    \t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\t\n\t    \t\t\t\t\tgl.stencilMask( stencilMask );\n\t    \t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\t\n\t    \t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t    \t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t    \t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\t\n\t    \t\t\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\t\n\t    \t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t    \t\t\t\t\tcurrentStencilRef  = stencilRef;\n\t    \t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\t\n\t    \t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t    \t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t    \t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\t\n\t    \t\t\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\t\n\t    \t\t\t\t\tcurrentStencilFail  = stencilFail;\n\t    \t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t    \t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetLocked: function ( lock ) {\n\t\n\t    \t\t\t\tlocked = lock;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tsetClear: function ( stencil ) {\n\t\n\t    \t\t\t\tif ( currentStencilClear !== stencil ) {\n\t\n\t    \t\t\t\t\tgl.clearStencil( stencil );\n\t    \t\t\t\t\tcurrentStencilClear = stencil;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\treset: function () {\n\t\n\t    \t\t\t\tlocked = false;\n\t\n\t    \t\t\t\tcurrentStencilMask = null;\n\t    \t\t\t\tcurrentStencilFunc = null;\n\t    \t\t\t\tcurrentStencilRef = null;\n\t    \t\t\t\tcurrentStencilFuncMask = null;\n\t    \t\t\t\tcurrentStencilFail = null;\n\t    \t\t\t\tcurrentStencilZFail = null;\n\t    \t\t\t\tcurrentStencilZPass = null;\n\t    \t\t\t\tcurrentStencilClear = null;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar colorBuffer = new ColorBuffer();\n\t    \tvar depthBuffer = new DepthBuffer();\n\t    \tvar stencilBuffer = new StencilBuffer();\n\t\n\t    \tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t    \tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t    \tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t    \tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\t\n\t    \tvar capabilities = {};\n\t\n\t    \tvar compressedTextureFormats = null;\n\t\n\t    \tvar currentBlending = null;\n\t    \tvar currentBlendEquation = null;\n\t    \tvar currentBlendSrc = null;\n\t    \tvar currentBlendDst = null;\n\t    \tvar currentBlendEquationAlpha = null;\n\t    \tvar currentBlendSrcAlpha = null;\n\t    \tvar currentBlendDstAlpha = null;\n\t    \tvar currentPremultipledAlpha = false;\n\t\n\t    \tvar currentFlipSided = null;\n\t    \tvar currentCullFace = null;\n\t\n\t    \tvar currentLineWidth = null;\n\t\n\t    \tvar currentPolygonOffsetFactor = null;\n\t    \tvar currentPolygonOffsetUnits = null;\n\t\n\t    \tvar currentScissorTest = null;\n\t\n\t    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\n\t    \tvar currentTextureSlot = null;\n\t    \tvar currentBoundTextures = {};\n\t\n\t    \tvar currentScissor = new Vector4();\n\t    \tvar currentViewport = new Vector4();\n\t\n\t    \tfunction createTexture( type, target, count ) {\n\t\n\t    \t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t    \t\tvar texture = gl.createTexture();\n\t\n\t    \t\tgl.bindTexture( type, texture );\n\t    \t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t    \t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\n\t    \t\tfor ( var i = 0; i < count; i ++ ) {\n\t\n\t    \t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn texture;\n\t\n\t    \t}\n\t\n\t    \tvar emptyTextures = {};\n\t    \temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\t    \temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\t\n\t    \t//\n\t\n\t    \tfunction init() {\n\t\n\t    \t\tclearColor( 0, 0, 0, 1 );\n\t    \t\tclearDepth( 1 );\n\t    \t\tclearStencil( 0 );\n\t\n\t    \t\tenable( gl.DEPTH_TEST );\n\t    \t\tsetDepthFunc( LessEqualDepth );\n\t\n\t    \t\tsetFlipSided( false );\n\t    \t\tsetCullFace( CullFaceBack );\n\t    \t\tenable( gl.CULL_FACE );\n\t\n\t    \t\tenable( gl.BLEND );\n\t    \t\tsetBlending( NormalBlending );\n\t\n\t    \t}\n\t\n\t    \tfunction initAttributes() {\n\t\n\t    \t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\t\n\t    \t\t\tnewAttributes[ i ] = 0;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction enableAttribute( attribute ) {\n\t\n\t    \t\tnewAttributes[ attribute ] = 1;\n\t\n\t    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\t\n\t    \t\t\tgl.enableVertexAttribArray( attribute );\n\t    \t\t\tenabledAttributes[ attribute ] = 1;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\t\n\t    \t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t    \t\t\tattributeDivisors[ attribute ] = 0;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {\n\t\n\t    \t\tnewAttributes[ attribute ] = 1;\n\t\n\t    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\t\n\t    \t\t\tgl.enableVertexAttribArray( attribute );\n\t    \t\t\tenabledAttributes[ attribute ] = 1;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\t\n\t    \t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t    \t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction disableUnusedAttributes() {\n\t\n\t    \t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\t\n\t    \t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\t\n\t    \t\t\t\tgl.disableVertexAttribArray( i );\n\t    \t\t\t\tenabledAttributes[ i ] = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction enable( id ) {\n\t\n\t    \t\tif ( capabilities[ id ] !== true ) {\n\t\n\t    \t\t\tgl.enable( id );\n\t    \t\t\tcapabilities[ id ] = true;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction disable( id ) {\n\t\n\t    \t\tif ( capabilities[ id ] !== false ) {\n\t\n\t    \t\t\tgl.disable( id );\n\t    \t\t\tcapabilities[ id ] = false;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction getCompressedTextureFormats() {\n\t\n\t    \t\tif ( compressedTextureFormats === null ) {\n\t\n\t    \t\t\tcompressedTextureFormats = [];\n\t\n\t    \t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t    \t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t    \t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\t\n\t    \t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\t\n\t    \t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\t\n\t    \t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn compressedTextureFormats;\n\t\n\t    \t}\n\t\n\t    \tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\t\n\t    \t\tif ( blending !== NoBlending ) {\n\t\n\t    \t\t\tenable( gl.BLEND );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.BLEND );\n\t    \t\t\tcurrentBlending = blending; // no blending, that is\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\t\n\t    \t\t\tif ( blending === AdditiveBlending ) {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( blending === SubtractiveBlending ) {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( blending === MultiplyBlending ) {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t    \t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcurrentBlending = blending;\n\t    \t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( blending === CustomBlending ) {\n\t\n\t    \t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t    \t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t    \t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\t\n\t    \t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\t\n\t    \t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\t\n\t    \t\t\t\tcurrentBlendEquation = blendEquation;\n\t    \t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\t\n\t    \t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\t\n\t    \t\t\t\tcurrentBlendSrc = blendSrc;\n\t    \t\t\t\tcurrentBlendDst = blendDst;\n\t    \t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t    \t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tcurrentBlendEquation = null;\n\t    \t\t\tcurrentBlendSrc = null;\n\t    \t\t\tcurrentBlendDst = null;\n\t    \t\t\tcurrentBlendEquationAlpha = null;\n\t    \t\t\tcurrentBlendSrcAlpha = null;\n\t    \t\t\tcurrentBlendDstAlpha = null;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// TODO Deprecate\n\t\n\t    \tfunction setColorWrite( colorWrite ) {\n\t\n\t    \t\tcolorBuffer.setMask( colorWrite );\n\t\n\t    \t}\n\t\n\t    \tfunction setDepthTest( depthTest ) {\n\t\n\t    \t\tdepthBuffer.setTest( depthTest );\n\t\n\t    \t}\n\t\n\t    \tfunction setDepthWrite( depthWrite ) {\n\t\n\t    \t\tdepthBuffer.setMask( depthWrite );\n\t\n\t    \t}\n\t\n\t    \tfunction setDepthFunc( depthFunc ) {\n\t\n\t    \t\tdepthBuffer.setFunc( depthFunc );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilTest( stencilTest ) {\n\t\n\t    \t\tstencilBuffer.setTest( stencilTest );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilWrite( stencilWrite ) {\n\t\n\t    \t\tstencilBuffer.setMask( stencilWrite );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilFunc( stencilFunc, stencilRef, stencilMask ) {\n\t\n\t    \t\tstencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );\n\t\n\t    \t}\n\t\n\t    \tfunction setStencilOp( stencilFail, stencilZFail, stencilZPass ) {\n\t\n\t    \t\tstencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction setFlipSided( flipSided ) {\n\t\n\t    \t\tif ( currentFlipSided !== flipSided ) {\n\t\n\t    \t\t\tif ( flipSided ) {\n\t\n\t    \t\t\t\tgl.frontFace( gl.CW );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tgl.frontFace( gl.CCW );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcurrentFlipSided = flipSided;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction setCullFace( cullFace ) {\n\t\n\t    \t\tif ( cullFace !== CullFaceNone ) {\n\t\n\t    \t\t\tenable( gl.CULL_FACE );\n\t\n\t    \t\t\tif ( cullFace !== currentCullFace ) {\n\t\n\t    \t\t\t\tif ( cullFace === CullFaceBack ) {\n\t\n\t    \t\t\t\t\tgl.cullFace( gl.BACK );\n\t\n\t    \t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\t\n\t    \t\t\t\t\tgl.cullFace( gl.FRONT );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.CULL_FACE );\n\t\n\t    \t\t}\n\t\n\t    \t\tcurrentCullFace = cullFace;\n\t\n\t    \t}\n\t\n\t    \tfunction setLineWidth( width ) {\n\t\n\t    \t\tif ( width !== currentLineWidth ) {\n\t\n\t    \t\t\tgl.lineWidth( width );\n\t\n\t    \t\t\tcurrentLineWidth = width;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\t\n\t    \t\tif ( polygonOffset ) {\n\t\n\t    \t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\t\n\t    \t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\t\n\t    \t\t\t\tgl.polygonOffset( factor, units );\n\t\n\t    \t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t    \t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction getScissorTest() {\n\t\n\t    \t\treturn currentScissorTest;\n\t\n\t    \t}\n\t\n\t    \tfunction setScissorTest( scissorTest ) {\n\t\n\t    \t\tcurrentScissorTest = scissorTest;\n\t\n\t    \t\tif ( scissorTest ) {\n\t\n\t    \t\t\tenable( gl.SCISSOR_TEST );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdisable( gl.SCISSOR_TEST );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// texture\n\t\n\t    \tfunction activeTexture( webglSlot ) {\n\t\n\t    \t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\t\n\t    \t\tif ( currentTextureSlot !== webglSlot ) {\n\t\n\t    \t\t\tgl.activeTexture( webglSlot );\n\t    \t\t\tcurrentTextureSlot = webglSlot;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction bindTexture( webglType, webglTexture ) {\n\t\n\t    \t\tif ( currentTextureSlot === null ) {\n\t\n\t    \t\t\tactiveTexture();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\t\n\t    \t\tif ( boundTexture === undefined ) {\n\t\n\t    \t\t\tboundTexture = { type: undefined, texture: undefined };\n\t    \t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\t\n\t    \t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\t\n\t    \t\t\tboundTexture.type = webglType;\n\t    \t\t\tboundTexture.texture = webglTexture;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction compressedTexImage2D() {\n\t\n\t    \t\ttry {\n\t\n\t    \t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\t\n\t    \t\t} catch ( error ) {\n\t\n\t    \t\t\tconsole.error( error );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction texImage2D() {\n\t\n\t    \t\ttry {\n\t\n\t    \t\t\tgl.texImage2D.apply( gl, arguments );\n\t\n\t    \t\t} catch ( error ) {\n\t\n\t    \t\t\tconsole.error( error );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// TODO Deprecate\n\t\n\t    \tfunction clearColor( r, g, b, a ) {\n\t\n\t    \t\tcolorBuffer.setClear( r, g, b, a );\n\t\n\t    \t}\n\t\n\t    \tfunction clearDepth( depth ) {\n\t\n\t    \t\tdepthBuffer.setClear( depth );\n\t\n\t    \t}\n\t\n\t    \tfunction clearStencil( stencil ) {\n\t\n\t    \t\tstencilBuffer.setClear( stencil );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction scissor( scissor ) {\n\t\n\t    \t\tif ( currentScissor.equals( scissor ) === false ) {\n\t\n\t    \t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t    \t\t\tcurrentScissor.copy( scissor );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction viewport( viewport ) {\n\t\n\t    \t\tif ( currentViewport.equals( viewport ) === false ) {\n\t\n\t    \t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t    \t\t\tcurrentViewport.copy( viewport );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tfunction reset() {\n\t\n\t    \t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\t\n\t    \t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\t\n\t    \t\t\t\tgl.disableVertexAttribArray( i );\n\t    \t\t\t\tenabledAttributes[ i ] = 0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tcapabilities = {};\n\t\n\t    \t\tcompressedTextureFormats = null;\n\t\n\t    \t\tcurrentTextureSlot = null;\n\t    \t\tcurrentBoundTextures = {};\n\t\n\t    \t\tcurrentBlending = null;\n\t\n\t    \t\tcurrentFlipSided = null;\n\t    \t\tcurrentCullFace = null;\n\t\n\t    \t\tcolorBuffer.reset();\n\t    \t\tdepthBuffer.reset();\n\t    \t\tstencilBuffer.reset();\n\t\n\t    \t}\n\t\n\t    \treturn {\n\t\n\t    \t\tbuffers: {\n\t    \t\t\tcolor: colorBuffer,\n\t    \t\t\tdepth: depthBuffer,\n\t    \t\t\tstencil: stencilBuffer\n\t    \t\t},\n\t\n\t    \t\tinit: init,\n\t    \t\tinitAttributes: initAttributes,\n\t    \t\tenableAttribute: enableAttribute,\n\t    \t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t    \t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t    \t\tenable: enable,\n\t    \t\tdisable: disable,\n\t    \t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\t\n\t    \t\tsetBlending: setBlending,\n\t\n\t    \t\tsetColorWrite: setColorWrite,\n\t    \t\tsetDepthTest: setDepthTest,\n\t    \t\tsetDepthWrite: setDepthWrite,\n\t    \t\tsetDepthFunc: setDepthFunc,\n\t    \t\tsetStencilTest: setStencilTest,\n\t    \t\tsetStencilWrite: setStencilWrite,\n\t    \t\tsetStencilFunc: setStencilFunc,\n\t    \t\tsetStencilOp: setStencilOp,\n\t\n\t    \t\tsetFlipSided: setFlipSided,\n\t    \t\tsetCullFace: setCullFace,\n\t\n\t    \t\tsetLineWidth: setLineWidth,\n\t    \t\tsetPolygonOffset: setPolygonOffset,\n\t\n\t    \t\tgetScissorTest: getScissorTest,\n\t    \t\tsetScissorTest: setScissorTest,\n\t\n\t    \t\tactiveTexture: activeTexture,\n\t    \t\tbindTexture: bindTexture,\n\t    \t\tcompressedTexImage2D: compressedTexImage2D,\n\t    \t\ttexImage2D: texImage2D,\n\t\n\t    \t\tclearColor: clearColor,\n\t    \t\tclearDepth: clearDepth,\n\t    \t\tclearStencil: clearStencil,\n\t\n\t    \t\tscissor: scissor,\n\t    \t\tviewport: viewport,\n\t\n\t    \t\treset: reset\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLCapabilities( gl, extensions, parameters ) {\n\t\n\t    \tvar maxAnisotropy;\n\t\n\t    \tfunction getMaxAnisotropy() {\n\t\n\t    \t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\t\n\t    \t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tmaxAnisotropy = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn maxAnisotropy;\n\t\n\t    \t}\n\t\n\t    \tfunction getMaxPrecision( precision ) {\n\t\n\t    \t\tif ( precision === 'highp' ) {\n\t\n\t    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\t\n\t    \t\t\t\treturn 'highp';\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tprecision = 'mediump';\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( precision === 'mediump' ) {\n\t\n\t    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\t\n\t    \t\t\t\treturn 'mediump';\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn 'lowp';\n\t\n\t    \t}\n\t\n\t    \tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t    \tvar maxPrecision = getMaxPrecision( precision );\n\t\n\t    \tif ( maxPrecision !== precision ) {\n\t\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t    \t\tprecision = maxPrecision;\n\t\n\t    \t}\n\t\n\t    \tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );\n\t\n\t    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t    \tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\t    \tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\t    \tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\t\n\t    \tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t    \tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\t    \tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\t    \tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\t\n\t    \tvar vertexTextures = maxVertexTextures > 0;\n\t    \tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\t    \tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\n\t    \treturn {\n\t\n\t    \t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t    \t\tgetMaxPrecision: getMaxPrecision,\n\t\n\t    \t\tprecision: precision,\n\t    \t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\n\t    \t\tmaxTextures: maxTextures,\n\t    \t\tmaxVertexTextures: maxVertexTextures,\n\t    \t\tmaxTextureSize: maxTextureSize,\n\t    \t\tmaxCubemapSize: maxCubemapSize,\n\t\n\t    \t\tmaxAttributes: maxAttributes,\n\t    \t\tmaxVertexUniforms: maxVertexUniforms,\n\t    \t\tmaxVaryings: maxVaryings,\n\t    \t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\n\t    \t\tvertexTextures: vertexTextures,\n\t    \t\tfloatFragmentTextures: floatFragmentTextures,\n\t    \t\tfloatVertexTextures: floatVertexTextures\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WebGLExtensions( gl ) {\n\t\n\t    \tvar extensions = {};\n\t\n\t    \treturn {\n\t\n\t    \t\tget: function ( name ) {\n\t\n\t    \t\t\tif ( extensions[ name ] !== undefined ) {\n\t\n\t    \t\t\t\treturn extensions[ name ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar extension;\n\t\n\t    \t\t\tswitch ( name ) {\n\t\n\t    \t\t\t\tcase 'WEBGL_depth_texture':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t    \t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault:\n\t    \t\t\t\t\textension = gl.getExtension( name );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( extension === null ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\textensions[ name ] = extension;\n\t\n\t    \t\t\treturn extension;\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    function WebGLClipping() {\n\t\n\t    \tvar scope = this,\n\t\n\t    \t\tglobalState = null,\n\t    \t\tnumGlobalPlanes = 0,\n\t    \t\tlocalClippingEnabled = false,\n\t    \t\trenderingShadows = false,\n\t\n\t    \t\tplane = new Plane(),\n\t    \t\tviewNormalMatrix = new Matrix3(),\n\t\n\t    \t\tuniform = { value: null, needsUpdate: false };\n\t\n\t    \tthis.uniform = uniform;\n\t    \tthis.numPlanes = 0;\n\t\n\t    \tthis.init = function( planes, enableLocalClipping, camera ) {\n\t\n\t    \t\tvar enabled =\n\t    \t\t\tplanes.length !== 0 ||\n\t    \t\t\tenableLocalClipping ||\n\t    \t\t\t// enable state of previous frame - the clipping code has to\n\t    \t\t\t// run another frame in order to reset the state:\n\t    \t\t\tnumGlobalPlanes !== 0 ||\n\t    \t\t\tlocalClippingEnabled;\n\t\n\t    \t\tlocalClippingEnabled = enableLocalClipping;\n\t\n\t    \t\tglobalState = projectPlanes( planes, camera, 0 );\n\t    \t\tnumGlobalPlanes = planes.length;\n\t\n\t    \t\treturn enabled;\n\t\n\t    \t};\n\t\n\t    \tthis.beginShadows = function() {\n\t\n\t    \t\trenderingShadows = true;\n\t    \t\tprojectPlanes( null );\n\t\n\t    \t};\n\t\n\t    \tthis.endShadows = function() {\n\t\n\t    \t\trenderingShadows = false;\n\t    \t\tresetGlobalState();\n\t\n\t    \t};\n\t\n\t    \tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\t\n\t    \t\tif ( ! localClippingEnabled ||\n\t    \t\t\t\tplanes === null || planes.length === 0 ||\n\t    \t\t\t\trenderingShadows && ! clipShadows ) {\n\t    \t\t\t// there's no local clipping\n\t\n\t    \t\t\tif ( renderingShadows ) {\n\t    \t\t\t\t// there's no global clipping\n\t\n\t    \t\t\t\tprojectPlanes( null );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tresetGlobalState();\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t    \t\t\t\tlGlobal = nGlobal * 4,\n\t\n\t    \t\t\t\tdstArray = cache.clippingState || null;\n\t\n\t    \t\t\tuniform.value = dstArray; // ensure unique state\n\t\n\t    \t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\t\n\t    \t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\t\n\t    \t\t\t\tdstArray[ i ] = globalState[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcache.clippingState = dstArray;\n\t    \t\t\tthis.numPlanes += nGlobal;\n\t\n\t    \t\t}\n\t\n\t\n\t    \t};\n\t\n\t    \tfunction resetGlobalState() {\n\t\n\t    \t\tif ( uniform.value !== globalState ) {\n\t\n\t    \t\t\tuniform.value = globalState;\n\t    \t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\n\t    \t\t}\n\t\n\t    \t\tscope.numPlanes = numGlobalPlanes;\n\t\n\t    \t}\n\t\n\t    \tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\t\n\t    \t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t    \t\t\tdstArray = null;\n\t\n\t    \t\tif ( nPlanes !== 0 ) {\n\t\n\t    \t\t\tdstArray = uniform.value;\n\t\n\t    \t\t\tif ( skipTransform !== true || dstArray === null ) {\n\t\n\t    \t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t    \t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\n\t    \t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\t\n\t    \t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\t\n\t    \t\t\t\t\tdstArray = new Float32Array( flatSize );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( var i = 0, i4 = dstOffset;\n\t    \t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\t\n\t    \t\t\t\t\tplane.copy( planes[ i ] ).\n\t    \t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\t\n\t    \t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t    \t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tuniform.value = dstArray;\n\t    \t\t\tuniform.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tscope.numPlanes = nPlanes;\n\t    \t\treturn dstArray;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author supereggbert / http://www.paulbrunt.co.uk/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author szimek / https://github.com/szimek/\n\t     * @author tschw\n\t     */\n\t\n\t    function WebGLRenderer( parameters ) {\n\t\n\t    \tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\t\n\t    \tparameters = parameters || {};\n\t\n\t    \tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t    \t_context = parameters.context !== undefined ? parameters.context : null,\n\t\n\t    \t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t    \t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t    \t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t    \t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t    \t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t    \t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\t\n\t    \tvar lights = [];\n\t\n\t    \tvar opaqueObjects = [];\n\t    \tvar opaqueObjectsLastIndex = - 1;\n\t    \tvar transparentObjects = [];\n\t    \tvar transparentObjectsLastIndex = - 1;\n\t\n\t    \tvar morphInfluences = new Float32Array( 8 );\n\t\n\t    \tvar sprites = [];\n\t    \tvar lensFlares = [];\n\t\n\t    \t// public properties\n\t\n\t    \tthis.domElement = _canvas;\n\t    \tthis.context = null;\n\t\n\t    \t// clearing\n\t\n\t    \tthis.autoClear = true;\n\t    \tthis.autoClearColor = true;\n\t    \tthis.autoClearDepth = true;\n\t    \tthis.autoClearStencil = true;\n\t\n\t    \t// scene graph\n\t\n\t    \tthis.sortObjects = true;\n\t\n\t    \t// user-defined clipping\n\t\n\t    \tthis.clippingPlanes = [];\n\t    \tthis.localClippingEnabled = false;\n\t\n\t    \t// physically based shading\n\t\n\t    \tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t    \tthis.gammaInput = false;\n\t    \tthis.gammaOutput = false;\n\t\n\t    \t// physical lights\n\t\n\t    \tthis.physicallyCorrectLights = false;\n\t\n\t    \t// tone mapping\n\t\n\t    \tthis.toneMapping = LinearToneMapping;\n\t    \tthis.toneMappingExposure = 1.0;\n\t    \tthis.toneMappingWhitePoint = 1.0;\n\t\n\t    \t// morphs\n\t\n\t    \tthis.maxMorphTargets = 8;\n\t    \tthis.maxMorphNormals = 4;\n\t\n\t    \t// internal properties\n\t\n\t    \tvar _this = this,\n\t\n\t    \t// internal state cache\n\t\n\t    \t_currentProgram = null,\n\t    \t_currentRenderTarget = null,\n\t    \t_currentFramebuffer = null,\n\t    \t_currentMaterialId = - 1,\n\t    \t_currentGeometryProgram = '',\n\t    \t_currentCamera = null,\n\t\n\t    \t_currentScissor = new Vector4(),\n\t    \t_currentScissorTest = null,\n\t\n\t    \t_currentViewport = new Vector4(),\n\t\n\t    \t//\n\t\n\t    \t_usedTextureUnits = 0,\n\t\n\t    \t//\n\t\n\t    \t_clearColor = new Color( 0x000000 ),\n\t    \t_clearAlpha = 0,\n\t\n\t    \t_width = _canvas.width,\n\t    \t_height = _canvas.height,\n\t\n\t    \t_pixelRatio = 1,\n\t\n\t    \t_scissor = new Vector4( 0, 0, _width, _height ),\n\t    \t_scissorTest = false,\n\t\n\t    \t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\n\t    \t// frustum\n\t\n\t    \t_frustum = new Frustum(),\n\t\n\t    \t// clipping\n\t\n\t    \t_clipping = new WebGLClipping(),\n\t    \t_clippingEnabled = false,\n\t    \t_localClippingEnabled = false,\n\t\n\t    \t_sphere = new Sphere(),\n\t\n\t    \t// camera matrices cache\n\t\n\t    \t_projScreenMatrix = new Matrix4(),\n\t\n\t    \t_vector3 = new Vector3(),\n\t\n\t    \t// light arrays cache\n\t\n\t    \t_lights = {\n\t\n\t    \t\thash: '',\n\t\n\t    \t\tambient: [ 0, 0, 0 ],\n\t    \t\tdirectional: [],\n\t    \t\tdirectionalShadowMap: [],\n\t    \t\tdirectionalShadowMatrix: [],\n\t    \t\tspot: [],\n\t    \t\tspotShadowMap: [],\n\t    \t\tspotShadowMatrix: [],\n\t    \t\tpoint: [],\n\t    \t\tpointShadowMap: [],\n\t    \t\tpointShadowMatrix: [],\n\t    \t\themi: [],\n\t\n\t    \t\tshadows: []\n\t\n\t    \t},\n\t\n\t    \t// info\n\t\n\t    \t_infoRender = {\n\t\n\t    \t\tcalls: 0,\n\t    \t\tvertices: 0,\n\t    \t\tfaces: 0,\n\t    \t\tpoints: 0\n\t\n\t    \t};\n\t\n\t    \tthis.info = {\n\t\n\t    \t\trender: _infoRender,\n\t    \t\tmemory: {\n\t\n\t    \t\t\tgeometries: 0,\n\t    \t\t\ttextures: 0\n\t\n\t    \t\t},\n\t    \t\tprograms: null\n\t\n\t    \t};\n\t\n\t\n\t    \t// initialize\n\t\n\t    \tvar _gl;\n\t\n\t    \ttry {\n\t\n\t    \t\tvar attributes = {\n\t    \t\t\talpha: _alpha,\n\t    \t\t\tdepth: _depth,\n\t    \t\t\tstencil: _stencil,\n\t    \t\t\tantialias: _antialias,\n\t    \t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t    \t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t    \t\t};\n\t\n\t    \t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\t\n\t    \t\tif ( _gl === null ) {\n\t\n\t    \t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\t\n\t    \t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthrow 'Error creating WebGL context.';\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\t\n\t    \t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\t\n\t    \t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\n\t    \t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\t\n\t    \t\t\t};\n\t\n\t    \t\t}\n\t\n\t    \t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\n\t    \t} catch ( error ) {\n\t\n\t    \t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\t\n\t    \t}\n\t\n\t    \tvar extensions = new WebGLExtensions( _gl );\n\t\n\t    \textensions.get( 'WEBGL_depth_texture' );\n\t    \textensions.get( 'OES_texture_float' );\n\t    \textensions.get( 'OES_texture_float_linear' );\n\t    \textensions.get( 'OES_texture_half_float' );\n\t    \textensions.get( 'OES_texture_half_float_linear' );\n\t    \textensions.get( 'OES_standard_derivatives' );\n\t    \textensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\t\n\t    \t\tBufferGeometry.MaxIndex = 4294967296;\n\t\n\t    \t}\n\t\n\t    \tvar capabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\t\n\t    \tvar state = new WebGLState( _gl, extensions, paramThreeToGL );\n\t    \tvar properties = new WebGLProperties();\n\t    \tvar textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n\t    \tvar objects = new WebGLObjects( _gl, properties, this.info );\n\t    \tvar programCache = new WebGLPrograms( this, capabilities );\n\t    \tvar lightCache = new WebGLLights();\n\t\n\t    \tthis.info.programs = programCache.programs;\n\t\n\t    \tvar bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n\t    \tvar indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\t\n\t    \t//\n\t\n\t    \tvar backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t    \tvar backgroundCamera2 = new PerspectiveCamera();\n\t    \tvar backgroundPlaneMesh = new Mesh(\n\t    \t\tnew PlaneBufferGeometry( 2, 2 ),\n\t    \t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t    \t);\n\t    \tvar backgroundBoxShader = ShaderLib[ 'cube' ];\n\t    \tvar backgroundBoxMesh = new Mesh(\n\t    \t\tnew BoxBufferGeometry( 5, 5, 5 ),\n\t    \t\tnew ShaderMaterial( {\n\t    \t\t\tuniforms: backgroundBoxShader.uniforms,\n\t    \t\t\tvertexShader: backgroundBoxShader.vertexShader,\n\t    \t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n\t    \t\t\tside: BackSide,\n\t    \t\t\tdepthTest: false,\n\t    \t\t\tdepthWrite: false,\n\t    \t\t\tfog: false\n\t    \t\t} )\n\t    \t);\n\t\n\t    \t//\n\t\n\t    \tfunction getTargetPixelRatio() {\n\t\n\t    \t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\n\t    \t}\n\t\n\t    \tfunction glClearColor( r, g, b, a ) {\n\t\n\t    \t\tif ( _premultipliedAlpha === true ) {\n\t\n\t    \t\t\tr *= a; g *= a; b *= a;\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.clearColor( r, g, b, a );\n\t\n\t    \t}\n\t\n\t    \tfunction setDefaultGLState() {\n\t\n\t    \t\tstate.init();\n\t\n\t    \t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t    \t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\t\n\t    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t}\n\t\n\t    \tfunction resetGLState() {\n\t\n\t    \t\t_currentProgram = null;\n\t    \t\t_currentCamera = null;\n\t\n\t    \t\t_currentGeometryProgram = '';\n\t    \t\t_currentMaterialId = - 1;\n\t\n\t    \t\tstate.reset();\n\t\n\t    \t}\n\t\n\t    \tsetDefaultGLState();\n\t\n\t    \tthis.context = _gl;\n\t    \tthis.capabilities = capabilities;\n\t    \tthis.extensions = extensions;\n\t    \tthis.properties = properties;\n\t    \tthis.state = state;\n\t\n\t    \t// shadow map\n\t\n\t    \tvar shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );\n\t\n\t    \tthis.shadowMap = shadowMap;\n\t\n\t\n\t    \t// Plugins\n\t\n\t    \tvar spritePlugin = new SpritePlugin( this, sprites );\n\t    \tvar lensFlarePlugin = new LensFlarePlugin( this, lensFlares );\n\t\n\t    \t// API\n\t\n\t    \tthis.getContext = function () {\n\t\n\t    \t\treturn _gl;\n\t\n\t    \t};\n\t\n\t    \tthis.getContextAttributes = function () {\n\t\n\t    \t\treturn _gl.getContextAttributes();\n\t\n\t    \t};\n\t\n\t    \tthis.forceContextLoss = function () {\n\t\n\t    \t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\t\n\t    \t};\n\t\n\t    \tthis.getMaxAnisotropy = function () {\n\t\n\t    \t\treturn capabilities.getMaxAnisotropy();\n\t\n\t    \t};\n\t\n\t    \tthis.getPrecision = function () {\n\t\n\t    \t\treturn capabilities.precision;\n\t\n\t    \t};\n\t\n\t    \tthis.getPixelRatio = function () {\n\t\n\t    \t\treturn _pixelRatio;\n\t\n\t    \t};\n\t\n\t    \tthis.setPixelRatio = function ( value ) {\n\t\n\t    \t\tif ( value === undefined ) return;\n\t\n\t    \t\t_pixelRatio = value;\n\t\n\t    \t\tthis.setSize( _viewport.z, _viewport.w, false );\n\t\n\t    \t};\n\t\n\t    \tthis.getSize = function () {\n\t\n\t    \t\treturn {\n\t    \t\t\twidth: _width,\n\t    \t\t\theight: _height\n\t    \t\t};\n\t\n\t    \t};\n\t\n\t    \tthis.setSize = function ( width, height, updateStyle ) {\n\t\n\t    \t\t_width = width;\n\t    \t\t_height = height;\n\t\n\t    \t\t_canvas.width = width * _pixelRatio;\n\t    \t\t_canvas.height = height * _pixelRatio;\n\t\n\t    \t\tif ( updateStyle !== false ) {\n\t\n\t    \t\t\t_canvas.style.width = width + 'px';\n\t    \t\t\t_canvas.style.height = height + 'px';\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.setViewport( 0, 0, width, height );\n\t\n\t    \t};\n\t\n\t    \tthis.setViewport = function ( x, y, width, height ) {\n\t\n\t    \t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\t\n\t    \t};\n\t\n\t    \tthis.setScissor = function ( x, y, width, height ) {\n\t\n\t    \t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\t\n\t    \t};\n\t\n\t    \tthis.setScissorTest = function ( boolean ) {\n\t\n\t    \t\tstate.setScissorTest( _scissorTest = boolean );\n\t\n\t    \t};\n\t\n\t    \t// Clearing\n\t\n\t    \tthis.getClearColor = function () {\n\t\n\t    \t\treturn _clearColor;\n\t\n\t    \t};\n\t\n\t    \tthis.setClearColor = function ( color, alpha ) {\n\t\n\t    \t\t_clearColor.set( color );\n\t\n\t    \t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\t\n\t    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t};\n\t\n\t    \tthis.getClearAlpha = function () {\n\t\n\t    \t\treturn _clearAlpha;\n\t\n\t    \t};\n\t\n\t    \tthis.setClearAlpha = function ( alpha ) {\n\t\n\t    \t\t_clearAlpha = alpha;\n\t\n\t    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t};\n\t\n\t    \tthis.clear = function ( color, depth, stencil ) {\n\t\n\t    \t\tvar bits = 0;\n\t\n\t    \t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t    \t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t    \t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\t\n\t    \t\t_gl.clear( bits );\n\t\n\t    \t};\n\t\n\t    \tthis.clearColor = function () {\n\t\n\t    \t\tthis.clear( true, false, false );\n\t\n\t    \t};\n\t\n\t    \tthis.clearDepth = function () {\n\t\n\t    \t\tthis.clear( false, true, false );\n\t\n\t    \t};\n\t\n\t    \tthis.clearStencil = function () {\n\t\n\t    \t\tthis.clear( false, false, true );\n\t\n\t    \t};\n\t\n\t    \tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\t\n\t    \t\tthis.setRenderTarget( renderTarget );\n\t    \t\tthis.clear( color, depth, stencil );\n\t\n\t    \t};\n\t\n\t    \t// Reset\n\t\n\t    \tthis.resetGLState = resetGLState;\n\t\n\t    \tthis.dispose = function() {\n\t\n\t    \t\ttransparentObjects = [];\n\t    \t\ttransparentObjectsLastIndex = -1;\n\t    \t\topaqueObjects = [];\n\t    \t\topaqueObjectsLastIndex = -1;\n\t\n\t    \t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\n\t    \t};\n\t\n\t    \t// Events\n\t\n\t    \tfunction onContextLost( event ) {\n\t\n\t    \t\tevent.preventDefault();\n\t\n\t    \t\tresetGLState();\n\t    \t\tsetDefaultGLState();\n\t\n\t    \t\tproperties.clear();\n\t\n\t    \t}\n\t\n\t    \tfunction onMaterialDispose( event ) {\n\t\n\t    \t\tvar material = event.target;\n\t\n\t    \t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\t\n\t    \t\tdeallocateMaterial( material );\n\t\n\t    \t}\n\t\n\t    \t// Buffer deallocation\n\t\n\t    \tfunction deallocateMaterial( material ) {\n\t\n\t    \t\treleaseMaterialProgramReference( material );\n\t\n\t    \t\tproperties.delete( material );\n\t\n\t    \t}\n\t\n\t\n\t    \tfunction releaseMaterialProgramReference( material ) {\n\t\n\t    \t\tvar programInfo = properties.get( material ).program;\n\t\n\t    \t\tmaterial.program = undefined;\n\t\n\t    \t\tif ( programInfo !== undefined ) {\n\t\n\t    \t\t\tprogramCache.releaseProgram( programInfo );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Buffer rendering\n\t\n\t    \tthis.renderBufferImmediate = function ( object, program, material ) {\n\t\n\t    \t\tstate.initAttributes();\n\t\n\t    \t\tvar buffers = properties.get( object );\n\t\n\t    \t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t    \t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t    \t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t    \t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\t\n\t    \t\tvar attributes = program.getAttributes();\n\t\n\t    \t\tif ( object.hasPositions ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.position );\n\t    \t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object.hasNormals ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\t\n\t    \t\t\tif ( ! material.isMeshPhongMaterial &&\n\t    \t\t\t     ! material.isMeshStandardMaterial &&\n\t    \t\t\t       material.shading === FlatShading ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\t\n\t    \t\t\t\t\tvar array = object.normalArray;\n\t\n\t    \t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t    \t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t    \t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\t\n\t    \t\t\t\t\tarray[ i + 0 ] = nx;\n\t    \t\t\t\t\tarray[ i + 1 ] = ny;\n\t    \t\t\t\t\tarray[ i + 2 ] = nz;\n\t\n\t    \t\t\t\t\tarray[ i + 3 ] = nx;\n\t    \t\t\t\t\tarray[ i + 4 ] = ny;\n\t    \t\t\t\t\tarray[ i + 5 ] = nz;\n\t\n\t    \t\t\t\t\tarray[ i + 6 ] = nx;\n\t    \t\t\t\t\tarray[ i + 7 ] = ny;\n\t    \t\t\t\t\tarray[ i + 8 ] = nz;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.normal );\n\t\n\t    \t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object.hasUvs && material.map ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.uv );\n\t\n\t    \t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\t\n\t    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\t\n\t    \t\t\tstate.enableAttribute( attributes.color );\n\t\n\t    \t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\t\n\t    \t\tobject.count = 0;\n\t\n\t    \t};\n\t\n\t    \tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\t\n\t    \t\tsetMaterial( material );\n\t\n\t    \t\tvar program = setProgram( camera, fog, material, object );\n\t\n\t    \t\tvar updateBuffers = false;\n\t    \t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\t\n\t    \t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\t\n\t    \t\t\t_currentGeometryProgram = geometryProgram;\n\t    \t\t\tupdateBuffers = true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// morph targets\n\t\n\t    \t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\t\n\t    \t\tif ( morphTargetInfluences !== undefined ) {\n\t\n\t    \t\t\tvar activeInfluences = [];\n\t\n\t    \t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t    \t\t\t\tactiveInfluences.push( [ influence, i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tactiveInfluences.sort( absNumericalSort );\n\t\n\t    \t\t\tif ( activeInfluences.length > 8 ) {\n\t\n\t    \t\t\t\tactiveInfluences.length = 8;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\n\t    \t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar influence = activeInfluences[ i ];\n\t    \t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\t\n\t    \t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\t\n\t    \t\t\t\t\tvar index = influence[ 1 ];\n\t\n\t    \t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t    \t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t    \t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tmorphInfluences[ i ] = 0.0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tprogram.getUniforms().setValue(\n\t    \t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\t\n\t    \t\t\tupdateBuffers = true;\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tvar index = geometry.index;\n\t    \t\tvar position = geometry.attributes.position;\n\t    \t\tvar rangeFactor = 1;\n\t\n\t    \t\tif ( material.wireframe === true ) {\n\t\n\t    \t\t\tindex = objects.getWireframeAttribute( geometry );\n\t    \t\t\trangeFactor = 2;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar renderer;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\trenderer = indexedBufferRenderer;\n\t    \t\t\trenderer.setIndex( index );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderer = bufferRenderer;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( updateBuffers ) {\n\t\n\t    \t\t\tsetupVertexAttributes( material, program, geometry );\n\t\n\t    \t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tvar dataCount = 0;\n\t\n\t    \t\tif ( index !== null ) {\n\t\n\t    \t\t\tdataCount = index.count;\n\t\n\t    \t\t} else if ( position !== undefined ) {\n\t\n\t    \t\t\tdataCount = position.count;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t    \t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\t\n\t    \t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t    \t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\n\t    \t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t    \t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\t\n\t    \t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\t\n\t    \t\tif ( drawCount === 0 ) return;\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( object.isMesh ) {\n\t\n\t    \t\t\tif ( material.wireframe === true ) {\n\t\n\t    \t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t    \t\t\t\trenderer.setMode( _gl.LINES );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tswitch ( object.drawMode ) {\n\t\n\t    \t\t\t\t\tcase TrianglesDrawMode:\n\t    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase TriangleStripDrawMode:\n\t    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase TriangleFanDrawMode:\n\t    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t\n\t    \t\t} else if ( object.isLine ) {\n\t\n\t    \t\t\tvar lineWidth = material.linewidth;\n\t\n\t    \t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\t\n\t    \t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\t\n\t    \t\t\tif ( object.isLineSegments ) {\n\t\n\t    \t\t\t\trenderer.setMode( _gl.LINES );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( object.isPoints ) {\n\t\n\t    \t\t\trenderer.setMode( _gl.POINTS );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\t\n\t    \t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\t\n\t    \t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderer.render( drawStart, drawCount );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\t\n\t    \t\tvar extension;\n\t\n\t    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\t\n\t    \t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t    \t\t\tif ( extension === null ) {\n\t\n\t    \t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t    \t\t\t\treturn;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( startIndex === undefined ) startIndex = 0;\n\t\n\t    \t\tstate.initAttributes();\n\t\n\t    \t\tvar geometryAttributes = geometry.attributes;\n\t\n\t    \t\tvar programAttributes = program.getAttributes();\n\t\n\t    \t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\t\n\t    \t\tfor ( var name in programAttributes ) {\n\t\n\t    \t\t\tvar programAttribute = programAttributes[ name ];\n\t\n\t    \t\t\tif ( programAttribute >= 0 ) {\n\t\n\t    \t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\t\n\t    \t\t\t\tif ( geometryAttribute !== undefined ) {\n\t\n\t    \t\t\t\t\tvar type = _gl.FLOAT;\n\t    \t\t\t\t\tvar array = geometryAttribute.array;\n\t    \t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\n\t    \t\t\t\t\tif ( array instanceof Float32Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.FLOAT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\t\n\t    \t\t\t\t\t\tconsole.warn( \"Unsupported data buffer format: Float64Array\" );\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.SHORT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.INT;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.BYTE;\n\t\n\t    \t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\t\n\t    \t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t    \t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\t\n\t    \t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInterleavedBufferAttribute ) {\n\t\n\t    \t\t\t\t\t\tvar data = geometryAttribute.data;\n\t    \t\t\t\t\t\tvar stride = data.stride;\n\t    \t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\t\n\t    \t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\t\n\t    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInstancedBufferAttribute ) {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\t\n\t    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\t\n\t    \t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\t\n\t    \t\t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\t\tswitch ( value.length ) {\n\t\n\t    \t\t\t\t\t\t\tcase 2:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase 3:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tcase 4:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t    \t\t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t\tdefault:\n\t    \t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.disableUnusedAttributes();\n\t\n\t    \t}\n\t\n\t    \t// Sorting\n\t\n\t    \tfunction absNumericalSort( a, b ) {\n\t\n\t    \t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\t\n\t    \t}\n\t\n\t    \tfunction painterSortStable( a, b ) {\n\t\n\t    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\t\n\t    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\t\n\t    \t\t} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {\n\t\n\t    \t\t\treturn a.material.program.id - b.material.program.id;\n\t\n\t    \t\t} else if ( a.material.id !== b.material.id ) {\n\t\n\t    \t\t\treturn a.material.id - b.material.id;\n\t\n\t    \t\t} else if ( a.z !== b.z ) {\n\t\n\t    \t\t\treturn a.z - b.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn a.id - b.id;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction reversePainterSortStable( a, b ) {\n\t\n\t    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\t\n\t    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\t\n\t    \t\t} if ( a.z !== b.z ) {\n\t\n\t    \t\t\treturn b.z - a.z;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn a.id - b.id;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Rendering\n\t\n\t    \tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\t\n\t    \t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar fog = scene.fog;\n\t\n\t    \t\t// reset caching for this frame\n\t\n\t    \t\t_currentGeometryProgram = '';\n\t    \t\t_currentMaterialId = - 1;\n\t    \t\t_currentCamera = null;\n\t\n\t    \t\t// update scene graph\n\t\n\t    \t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\n\t    \t\t// update camera matrices and frustum\n\t\n\t    \t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\t\n\t    \t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\t\n\t    \t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t    \t\t_frustum.setFromMatrix( _projScreenMatrix );\n\t\n\t    \t\tlights.length = 0;\n\t\n\t    \t\topaqueObjectsLastIndex = - 1;\n\t    \t\ttransparentObjectsLastIndex = - 1;\n\t\n\t    \t\tsprites.length = 0;\n\t    \t\tlensFlares.length = 0;\n\t\n\t    \t\t_localClippingEnabled = this.localClippingEnabled;\n\t    \t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\t\n\t    \t\tprojectObject( scene, camera );\n\t\n\t    \t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n\t    \t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\t\n\t    \t\tif ( _this.sortObjects === true ) {\n\t\n\t    \t\t\topaqueObjects.sort( painterSortStable );\n\t    \t\t\ttransparentObjects.sort( reversePainterSortStable );\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\t\n\t    \t\tsetupShadows( lights );\n\t\n\t    \t\tshadowMap.render( scene, camera );\n\t\n\t    \t\tsetupLights( lights, camera );\n\t\n\t    \t\tif ( _clippingEnabled ) _clipping.endShadows();\n\t\n\t    \t\t//\n\t\n\t    \t\t_infoRender.calls = 0;\n\t    \t\t_infoRender.vertices = 0;\n\t    \t\t_infoRender.faces = 0;\n\t    \t\t_infoRender.points = 0;\n\t\n\t    \t\tif ( renderTarget === undefined ) {\n\t\n\t    \t\t\trenderTarget = null;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.setRenderTarget( renderTarget );\n\t\n\t    \t\t//\n\t\n\t    \t\tvar background = scene.background;\n\t\n\t    \t\tif ( background === null ) {\n\t\n\t    \t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t    \t\t} else if ( background && background.isColor ) {\n\t\n\t    \t\t\tglClearColor( background.r, background.g, background.b, 1 );\n\t    \t\t\tforceClear = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.autoClear || forceClear ) {\n\t\n\t    \t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( background && background.isCubeTexture ) {\n\t\n\t    \t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\t\n\t    \t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n\t    \t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\t\n\t    \t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n\t    \t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\t\n\t    \t\t\tobjects.update( backgroundBoxMesh );\n\t\n\t    \t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\t\n\t    \t\t} else if ( background && background.isTexture ) {\n\t\n\t    \t\t\tbackgroundPlaneMesh.material.map = background;\n\t\n\t    \t\t\tobjects.update( backgroundPlaneMesh );\n\t\n\t    \t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( scene.overrideMaterial ) {\n\t\n\t    \t\t\tvar overrideMaterial = scene.overrideMaterial;\n\t\n\t    \t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n\t    \t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// opaque pass (front-to-back order)\n\t\n\t    \t\t\tstate.setBlending( NoBlending );\n\t    \t\t\trenderObjects( opaqueObjects, camera, fog );\n\t\n\t    \t\t\t// transparent pass (back-to-front order)\n\t\n\t    \t\t\trenderObjects( transparentObjects, camera, fog );\n\t\n\t    \t\t}\n\t\n\t    \t\t// custom render plugins (post pass)\n\t\n\t    \t\tspritePlugin.render( scene, camera );\n\t    \t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\t\n\t    \t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\n\t    \t\tif ( renderTarget ) {\n\t\n\t    \t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\t\n\t    \t\t}\n\t\n\t    \t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\t\n\t    \t\tstate.setDepthTest( true );\n\t    \t\tstate.setDepthWrite( true );\n\t    \t\tstate.setColorWrite( true );\n\t\n\t    \t\t// _gl.finish();\n\t\n\t    \t};\n\t\n\t    \tfunction pushRenderItem( object, geometry, material, z, group ) {\n\t\n\t    \t\tvar array, index;\n\t\n\t    \t\t// allocate the next position in the appropriate array\n\t\n\t    \t\tif ( material.transparent ) {\n\t\n\t    \t\t\tarray = transparentObjects;\n\t    \t\t\tindex = ++ transparentObjectsLastIndex;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tarray = opaqueObjects;\n\t    \t\t\tindex = ++ opaqueObjectsLastIndex;\n\t\n\t    \t\t}\n\t\n\t    \t\t// recycle existing render item or grow the array\n\t\n\t    \t\tvar renderItem = array[ index ];\n\t\n\t    \t\tif ( renderItem !== undefined ) {\n\t\n\t    \t\t\trenderItem.id = object.id;\n\t    \t\t\trenderItem.object = object;\n\t    \t\t\trenderItem.geometry = geometry;\n\t    \t\t\trenderItem.material = material;\n\t    \t\t\trenderItem.z = _vector3.z;\n\t    \t\t\trenderItem.group = group;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\trenderItem = {\n\t    \t\t\t\tid: object.id,\n\t    \t\t\t\tobject: object,\n\t    \t\t\t\tgeometry: geometry,\n\t    \t\t\t\tmaterial: material,\n\t    \t\t\t\tz: _vector3.z,\n\t    \t\t\t\tgroup: group\n\t    \t\t\t};\n\t\n\t    \t\t\t// assert( index === array.length );\n\t    \t\t\tarray.push( renderItem );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// TODO Duplicated code (Frustum)\n\t\n\t    \tfunction isObjectViewable( object ) {\n\t\n\t    \t\tvar geometry = object.geometry;\n\t\n\t    \t\tif ( geometry.boundingSphere === null )\n\t    \t\t\tgeometry.computeBoundingSphere();\n\t\n\t    \t\t_sphere.copy( geometry.boundingSphere ).\n\t    \t\t\tapplyMatrix4( object.matrixWorld );\n\t\n\t    \t\treturn isSphereViewable( _sphere );\n\t\n\t    \t}\n\t\n\t    \tfunction isSpriteViewable( sprite ) {\n\t\n\t    \t\t_sphere.center.set( 0, 0, 0 );\n\t    \t\t_sphere.radius = 0.7071067811865476;\n\t    \t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\t\n\t    \t\treturn isSphereViewable( _sphere );\n\t\n\t    \t}\n\t\n\t    \tfunction isSphereViewable( sphere ) {\n\t\n\t    \t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\t\n\t    \t\tvar numPlanes = _clipping.numPlanes;\n\t\n\t    \t\tif ( numPlanes === 0 ) return true;\n\t\n\t    \t\tvar planes = _this.clippingPlanes,\n\t\n\t    \t\t\tcenter = sphere.center,\n\t    \t\t\tnegRad = - sphere.radius,\n\t    \t\t\ti = 0;\n\t\n\t    \t\tdo {\n\t\n\t    \t\t\t// out when deeper than radius in the negative halfspace\n\t    \t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\t\n\t    \t\t} while ( ++ i !== numPlanes );\n\t\n\t    \t\treturn true;\n\t\n\t    \t}\n\t\n\t    \tfunction projectObject( object, camera ) {\n\t\n\t    \t\tif ( object.visible === false ) return;\n\t\n\t    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\t\n\t    \t\tif ( visible ) {\n\t\n\t    \t\t\tif ( object.isLight ) {\n\t\n\t    \t\t\t\tlights.push( object );\n\t\n\t    \t\t\t} else if ( object.isSprite ) {\n\t\n\t    \t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\t\n\t    \t\t\t\t\tsprites.push( object );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( object.isLensFlare ) {\n\t\n\t    \t\t\t\tlensFlares.push( object );\n\t\n\t    \t\t\t} else if ( object.isImmediateRenderObject ) {\n\t\n\t    \t\t\t\tif ( _this.sortObjects === true ) {\n\t\n\t    \t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t    \t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\t\n\t    \t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\t\n\t    \t\t\t\tif ( object.isSkinnedMesh ) {\n\t\n\t    \t\t\t\t\tobject.skeleton.update();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\t\n\t    \t\t\t\t\tvar material = object.material;\n\t\n\t    \t\t\t\t\tif ( material.visible === true ) {\n\t\n\t    \t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\t\n\t    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t    \t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\tvar geometry = objects.update( object );\n\t\n\t    \t\t\t\t\t\tif ( material.isMultiMaterial ) {\n\t\n\t    \t\t\t\t\t\t\tvar groups = geometry.groups;\n\t    \t\t\t\t\t\t\tvar materials = material.materials;\n\t\n\t    \t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t    \t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\t\n\t    \t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar children = object.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tprojectObject( children[ i ], camera );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\t\n\t    \t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar renderItem = renderList[ i ];\n\t\n\t    \t\t\tvar object = renderItem.object;\n\t    \t\t\tvar geometry = renderItem.geometry;\n\t    \t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t    \t\t\tvar group = renderItem.group;\n\t\n\t    \t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t    \t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\t\n\t    \t\t\tif ( object.isImmediateRenderObject ) {\n\t\n\t    \t\t\t\tsetMaterial( material );\n\t\n\t    \t\t\t\tvar program = setProgram( camera, fog, material, object );\n\t\n\t    \t\t\t\t_currentGeometryProgram = '';\n\t\n\t    \t\t\t\tobject.render( function ( object ) {\n\t\n\t    \t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\t\n\t    \t\t\t\t} );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( object.onBeforeRender !== null ) object.onBeforeRender();\n\t\n\t    \t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction initMaterial( material, fog, object ) {\n\t\n\t    \t\tvar materialProperties = properties.get( material );\n\t\n\t    \t\tvar parameters = programCache.getParameters(\n\t    \t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\t\n\t    \t\tvar code = programCache.getProgramCode( material, parameters );\n\t\n\t    \t\tvar program = materialProperties.program;\n\t    \t\tvar programChange = true;\n\t\n\t    \t\tif ( program === undefined ) {\n\t\n\t    \t\t\t// new material\n\t    \t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\t\n\t    \t\t} else if ( program.code !== code ) {\n\t\n\t    \t\t\t// changed glsl or parameters\n\t    \t\t\treleaseMaterialProgramReference( material );\n\t\n\t    \t\t} else if ( parameters.shaderID !== undefined ) {\n\t\n\t    \t\t\t// same glsl and uniform list\n\t    \t\t\treturn;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// only rebuild uniform list\n\t    \t\t\tprogramChange = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( programChange ) {\n\t\n\t    \t\t\tif ( parameters.shaderID ) {\n\t\n\t    \t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\t\n\t    \t\t\t\tmaterialProperties.__webglShader = {\n\t    \t\t\t\t\tname: material.type,\n\t    \t\t\t\t\tuniforms: exports.UniformsUtils.clone( shader.uniforms ),\n\t    \t\t\t\t\tvertexShader: shader.vertexShader,\n\t    \t\t\t\t\tfragmentShader: shader.fragmentShader\n\t    \t\t\t\t};\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tmaterialProperties.__webglShader = {\n\t    \t\t\t\t\tname: material.type,\n\t    \t\t\t\t\tuniforms: material.uniforms,\n\t    \t\t\t\t\tvertexShader: material.vertexShader,\n\t    \t\t\t\t\tfragmentShader: material.fragmentShader\n\t    \t\t\t\t};\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\t\n\t    \t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\t\n\t    \t\t\tmaterialProperties.program = program;\n\t    \t\t\tmaterial.program = program;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = program.getAttributes();\n\t\n\t    \t\tif ( material.morphTargets ) {\n\t\n\t    \t\t\tmaterial.numSupportedMorphTargets = 0;\n\t\n\t    \t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\t\n\t    \t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\t\n\t    \t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.morphNormals ) {\n\t\n\t    \t\t\tmaterial.numSupportedMorphNormals = 0;\n\t\n\t    \t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\t\n\t    \t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\t\n\t    \t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\t\n\t    \t\tif ( ! material.isShaderMaterial &&\n\t    \t\t     ! material.isRawShaderMaterial ||\n\t    \t\t       material.clipping === true ) {\n\t\n\t    \t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t    \t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\t\n\t    \t\t}\n\t\n\t    \t\tmaterialProperties.fog = fog;\n\t\n\t    \t\t// store the light setup it was created for\n\t\n\t    \t\tmaterialProperties.lightsHash = _lights.hash;\n\t\n\t    \t\tif ( material.lights ) {\n\t\n\t    \t\t\t// wire up the material to this renderer's lighting state\n\t\n\t    \t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n\t    \t\t\tuniforms.directionalLights.value = _lights.directional;\n\t    \t\t\tuniforms.spotLights.value = _lights.spot;\n\t    \t\t\tuniforms.pointLights.value = _lights.point;\n\t    \t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\t\n\t    \t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n\t    \t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n\t    \t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n\t    \t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n\t    \t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n\t    \t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t    \t\t\tuniformsList =\n\t    \t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\t\n\t    \t\tmaterialProperties.uniformsList = uniformsList;\n\t    \t\tmaterialProperties.dynamicUniforms =\n\t    \t\t\t\tWebGLUniforms.splitDynamic( uniformsList, uniforms );\n\t\n\t    \t}\n\t\n\t    \tfunction setMaterial( material ) {\n\t\n\t    \t\tmaterial.side === DoubleSide\n\t    \t\t\t? state.disable( _gl.CULL_FACE )\n\t    \t\t\t: state.enable( _gl.CULL_FACE );\n\t\n\t    \t\tstate.setFlipSided( material.side === BackSide );\n\t\n\t    \t\tmaterial.transparent === true\n\t    \t\t\t? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n\t    \t\t\t: state.setBlending( NoBlending );\n\t\n\t    \t\tstate.setDepthFunc( material.depthFunc );\n\t    \t\tstate.setDepthTest( material.depthTest );\n\t    \t\tstate.setDepthWrite( material.depthWrite );\n\t    \t\tstate.setColorWrite( material.colorWrite );\n\t    \t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\t\n\t    \t}\n\t\n\t    \tfunction setProgram( camera, fog, material, object ) {\n\t\n\t    \t\t_usedTextureUnits = 0;\n\t\n\t    \t\tvar materialProperties = properties.get( material );\n\t\n\t    \t\tif ( _clippingEnabled ) {\n\t\n\t    \t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\t\n\t    \t\t\t\tvar useCache =\n\t    \t\t\t\t\t\tcamera === _currentCamera &&\n\t    \t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\t\n\t    \t\t\t\t// we might want to call this function with some ClippingGroup\n\t    \t\t\t\t// object instead of the material, once it becomes feasible\n\t    \t\t\t\t// (#8465, #8379)\n\t    \t\t\t\t_clipping.setState(\n\t    \t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n\t    \t\t\t\t\t\tcamera, materialProperties, useCache );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.needsUpdate === false ) {\n\t\n\t    \t\t\tif ( materialProperties.program === undefined ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t    \t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\t\n\t    \t\t\t\tmaterial.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.needsUpdate ) {\n\t\n\t    \t\t\tinitMaterial( material, fog, object );\n\t    \t\t\tmaterial.needsUpdate = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar refreshProgram = false;\n\t    \t\tvar refreshMaterial = false;\n\t    \t\tvar refreshLights = false;\n\t\n\t    \t\tvar program = materialProperties.program,\n\t    \t\t\tp_uniforms = program.getUniforms(),\n\t    \t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\t\n\t    \t\tif ( program.id !== _currentProgram ) {\n\t\n\t    \t\t\t_gl.useProgram( program.program );\n\t    \t\t\t_currentProgram = program.id;\n\t\n\t    \t\t\trefreshProgram = true;\n\t    \t\t\trefreshMaterial = true;\n\t    \t\t\trefreshLights = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.id !== _currentMaterialId ) {\n\t\n\t    \t\t\t_currentMaterialId = material.id;\n\t\n\t    \t\t\trefreshMaterial = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( refreshProgram || camera !== _currentCamera ) {\n\t\n\t    \t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\t\n\t    \t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\t\n\t    \t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t    \t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\t\n\t    \t\t\t}\n\t\n\t\n\t    \t\t\tif ( camera !== _currentCamera ) {\n\t\n\t    \t\t\t\t_currentCamera = camera;\n\t\n\t    \t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t    \t\t\t\t// now, in case this material supports lights - or later, when\n\t    \t\t\t\t// the next material that does gets activated:\n\t\n\t    \t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t    \t\t\t\trefreshLights = true;\t\t// remains set until update done\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// load material specific uniforms\n\t    \t\t\t// (shader material also gets them for the sake of genericity)\n\t\n\t    \t\t\tif ( material.isShaderMaterial ||\n\t    \t\t\t     material.isMeshPhongMaterial ||\n\t    \t\t\t     material.isMeshStandardMaterial ||\n\t    \t\t\t     material.envMap ) {\n\t\n\t    \t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\t\n\t    \t\t\t\tif ( uCamPos !== undefined ) {\n\t\n\t    \t\t\t\t\tuCamPos.setValue( _gl,\n\t    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( material.isMeshPhongMaterial ||\n\t    \t\t\t     material.isMeshLambertMaterial ||\n\t    \t\t\t     material.isMeshBasicMaterial ||\n\t    \t\t\t     material.isMeshStandardMaterial ||\n\t    \t\t\t     material.isShaderMaterial ||\n\t    \t\t\t     material.skinning ) {\n\t\n\t    \t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n\t    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\t\n\t    \t\t}\n\t\n\t    \t\t// skinning uniforms must be set even if material didn't change\n\t    \t\t// auto-setting of texture unit for bone texture must go before other textures\n\t    \t\t// not sure why, but otherwise weird things happen\n\t\n\t    \t\tif ( material.skinning ) {\n\t\n\t    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\t\n\t    \t\t\tvar skeleton = object.skeleton;\n\t\n\t    \t\t\tif ( skeleton ) {\n\t\n\t    \t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\t\n\t    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n\t    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n\t    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( refreshMaterial ) {\n\t\n\t    \t\t\tif ( material.lights ) {\n\t\n\t    \t\t\t\t// the current material requires lighting info\n\t\n\t    \t\t\t\t// note: all lighting uniforms are always set correctly\n\t    \t\t\t\t// they simply reference the renderer's state for their\n\t    \t\t\t\t// values\n\t    \t\t\t\t//\n\t    \t\t\t\t// use the current material's .needsUpdate flags to set\n\t    \t\t\t\t// the GL state when required\n\t\n\t    \t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// refresh uniforms common to several materials\n\t\n\t    \t\t\tif ( fog && material.fog ) {\n\t\n\t    \t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( material.isMeshBasicMaterial ||\n\t    \t\t\t     material.isMeshLambertMaterial ||\n\t    \t\t\t     material.isMeshPhongMaterial ||\n\t    \t\t\t     material.isMeshStandardMaterial ||\n\t    \t\t\t     material.isMeshDepthMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// refresh single material specific uniforms\n\t\n\t    \t\t\tif ( material.isLineBasicMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isLineDashedMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t    \t\t\t\trefreshUniformsDash( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isPointsMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshLambertMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshPhongMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshPhysicalMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshStandardMaterial ) {\n\t\n\t    \t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\t\n\t    \t\t\t} else if ( material.isMeshDepthMaterial ) {\n\t\n\t    \t\t\t\tif ( material.displacementMap ) {\n\t\n\t    \t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n\t    \t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n\t    \t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( material.isMeshNormalMaterial ) {\n\t\n\t    \t\t\t\tm_uniforms.opacity.value = material.opacity;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tWebGLUniforms.upload(\n\t    \t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\t// common matrices\n\t\n\t    \t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n\t    \t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n\t    \t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\t\n\t\n\t    \t\t// dynamic uniforms\n\t\n\t    \t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\t\n\t    \t\tif ( dynUniforms !== null ) {\n\t\n\t    \t\t\tWebGLUniforms.evalDynamic( dynUniforms, m_uniforms, object, material, camera );\n\t    \t\t\tWebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn program;\n\t\n\t    \t}\n\t\n\t    \t// Uniforms (refresh uniforms objects)\n\t\n\t    \tfunction refreshUniformsCommon( uniforms, material ) {\n\t\n\t    \t\tuniforms.opacity.value = material.opacity;\n\t\n\t    \t\tuniforms.diffuse.value = material.color;\n\t\n\t    \t\tif ( material.emissive ) {\n\t\n\t    \t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\t\n\t    \t\t}\n\t\n\t    \t\tuniforms.map.value = material.map;\n\t    \t\tuniforms.specularMap.value = material.specularMap;\n\t    \t\tuniforms.alphaMap.value = material.alphaMap;\n\t\n\t    \t\tif ( material.aoMap ) {\n\t\n\t    \t\t\tuniforms.aoMap.value = material.aoMap;\n\t    \t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\t// uv repeat and offset setting priorities\n\t    \t\t// 1. color map\n\t    \t\t// 2. specular map\n\t    \t\t// 3. normal map\n\t    \t\t// 4. bump map\n\t    \t\t// 5. alpha map\n\t    \t\t// 6. emissive map\n\t\n\t    \t\tvar uvScaleMap;\n\t\n\t    \t\tif ( material.map ) {\n\t\n\t    \t\t\tuvScaleMap = material.map;\n\t\n\t    \t\t} else if ( material.specularMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.specularMap;\n\t\n\t    \t\t} else if ( material.displacementMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.displacementMap;\n\t\n\t    \t\t} else if ( material.normalMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.normalMap;\n\t\n\t    \t\t} else if ( material.bumpMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.bumpMap;\n\t\n\t    \t\t} else if ( material.roughnessMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.roughnessMap;\n\t\n\t    \t\t} else if ( material.metalnessMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.metalnessMap;\n\t\n\t    \t\t} else if ( material.alphaMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.alphaMap;\n\t\n\t    \t\t} else if ( material.emissiveMap ) {\n\t\n\t    \t\t\tuvScaleMap = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( uvScaleMap !== undefined ) {\n\t\n\t    \t\t\t// backwards compatibility\n\t    \t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\t\n\t    \t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar offset = uvScaleMap.offset;\n\t    \t\t\tvar repeat = uvScaleMap.repeat;\n\t\n\t    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\t\n\t    \t\t}\n\t\n\t    \t\tuniforms.envMap.value = material.envMap;\n\t\n\t    \t\t// don't flip CubeTexture envMaps, flip everything else:\n\t    \t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t    \t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t    \t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t    \t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\t\n\t    \t\tuniforms.reflectivity.value = material.reflectivity;\n\t    \t\tuniforms.refractionRatio.value = material.refractionRatio;\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsLine( uniforms, material ) {\n\t\n\t    \t\tuniforms.diffuse.value = material.color;\n\t    \t\tuniforms.opacity.value = material.opacity;\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsDash( uniforms, material ) {\n\t\n\t    \t\tuniforms.dashSize.value = material.dashSize;\n\t    \t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t    \t\tuniforms.scale.value = material.scale;\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsPoints( uniforms, material ) {\n\t\n\t    \t\tuniforms.diffuse.value = material.color;\n\t    \t\tuniforms.opacity.value = material.opacity;\n\t    \t\tuniforms.size.value = material.size * _pixelRatio;\n\t    \t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\t\n\t    \t\tuniforms.map.value = material.map;\n\t\n\t    \t\tif ( material.map !== null ) {\n\t\n\t    \t\t\tvar offset = material.map.offset;\n\t    \t\t\tvar repeat = material.map.repeat;\n\t\n\t    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsFog( uniforms, fog ) {\n\t\n\t    \t\tuniforms.fogColor.value = fog.color;\n\t\n\t    \t\tif ( fog.isFog ) {\n\t\n\t    \t\t\tuniforms.fogNear.value = fog.near;\n\t    \t\t\tuniforms.fogFar.value = fog.far;\n\t\n\t    \t\t} else if ( fog.isFogExp2 ) {\n\t\n\t    \t\t\tuniforms.fogDensity.value = fog.density;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsLambert( uniforms, material ) {\n\t\n\t    \t\tif ( material.lightMap ) {\n\t\n\t    \t\t\tuniforms.lightMap.value = material.lightMap;\n\t    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.emissiveMap ) {\n\t\n\t    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsPhong( uniforms, material ) {\n\t\n\t    \t\tuniforms.specular.value = material.specular;\n\t    \t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\t\n\t    \t\tif ( material.lightMap ) {\n\t\n\t    \t\t\tuniforms.lightMap.value = material.lightMap;\n\t    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.emissiveMap ) {\n\t\n\t    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.bumpMap ) {\n\t\n\t    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.normalMap ) {\n\t\n\t    \t\t\tuniforms.normalMap.value = material.normalMap;\n\t    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.displacementMap ) {\n\t\n\t    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsStandard( uniforms, material ) {\n\t\n\t    \t\tuniforms.roughness.value = material.roughness;\n\t    \t\tuniforms.metalness.value = material.metalness;\n\t\n\t    \t\tif ( material.roughnessMap ) {\n\t\n\t    \t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.metalnessMap ) {\n\t\n\t    \t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.lightMap ) {\n\t\n\t    \t\t\tuniforms.lightMap.value = material.lightMap;\n\t    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.emissiveMap ) {\n\t\n\t    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.bumpMap ) {\n\t\n\t    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.normalMap ) {\n\t\n\t    \t\t\tuniforms.normalMap.value = material.normalMap;\n\t    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.displacementMap ) {\n\t\n\t    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( material.envMap ) {\n\t\n\t    \t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t    \t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction refreshUniformsPhysical( uniforms, material ) {\n\t\n\t    \t\tuniforms.clearCoat.value = material.clearCoat;\n\t    \t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\t\n\t    \t\trefreshUniformsStandard( uniforms, material );\n\t\n\t    \t}\n\t\n\t    \t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\t\n\t    \tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\t\n\t    \t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\n\t    \t\tuniforms.directionalLights.needsUpdate = value;\n\t    \t\tuniforms.pointLights.needsUpdate = value;\n\t    \t\tuniforms.spotLights.needsUpdate = value;\n\t    \t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\n\t    \t}\n\t\n\t    \t// Lighting\n\t\n\t    \tfunction setupShadows( lights ) {\n\t\n\t    \t\tvar lightShadowsLength = 0;\n\t\n\t    \t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar light = lights[ i ];\n\t\n\t    \t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t_lights.shadows.length = lightShadowsLength;\n\t\n\t    \t}\n\t\n\t    \tfunction setupLights( lights, camera ) {\n\t\n\t    \t\tvar l, ll, light,\n\t    \t\tr = 0, g = 0, b = 0,\n\t    \t\tcolor,\n\t    \t\tintensity,\n\t    \t\tdistance,\n\t    \t\tshadowMap,\n\t\n\t    \t\tviewMatrix = camera.matrixWorldInverse,\n\t\n\t    \t\tdirectionalLength = 0,\n\t    \t\tpointLength = 0,\n\t    \t\tspotLength = 0,\n\t    \t\themiLength = 0;\n\t\n\t    \t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\t\n\t    \t\t\tlight = lights[ l ];\n\t\n\t    \t\t\tcolor = light.color;\n\t    \t\t\tintensity = light.intensity;\n\t    \t\t\tdistance = light.distance;\n\t\n\t    \t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\t\n\t    \t\t\tif ( light.isAmbientLight ) {\n\t\n\t    \t\t\t\tr += color.r * intensity;\n\t    \t\t\t\tg += color.g * intensity;\n\t    \t\t\t\tb += color.b * intensity;\n\t\n\t    \t\t\t} else if ( light.isDirectionalLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t    \t\t\t\tuniforms.direction.sub( _vector3 );\n\t    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t    \t\t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n\t    \t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t    \t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\t\n\t    \t\t\t} else if ( light.isSpotLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t    \t\t\t\tuniforms.distance = distance;\n\t\n\t    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t    \t\t\t\tuniforms.direction.sub( _vector3 );\n\t    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t    \t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\t\n\t    \t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t    \t\t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n\t    \t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t    \t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\t\n\t    \t\t\t} else if ( light.isPointLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\t\n\t    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t    \t\t\t\tuniforms.distance = light.distance;\n\t    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\t\n\t    \t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t    \t\t\t\tif ( light.castShadow ) {\n\t\n\t    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\t\n\t    \t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\t\n\t    \t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new Matrix4();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t    \t\t\t\t// equal to inverse of the light's position\n\t    \t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n\t    \t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\t\n\t    \t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\t\n\t    \t\t\t} else if ( light.isHemisphereLight ) {\n\t\n\t    \t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t    \t\t\t\tuniforms.direction.normalize();\n\t\n\t    \t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t    \t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\t\n\t    \t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t_lights.ambient[ 0 ] = r;\n\t    \t\t_lights.ambient[ 1 ] = g;\n\t    \t\t_lights.ambient[ 2 ] = b;\n\t\n\t    \t\t_lights.directional.length = directionalLength;\n\t    \t\t_lights.spot.length = spotLength;\n\t    \t\t_lights.point.length = pointLength;\n\t    \t\t_lights.hemi.length = hemiLength;\n\t\n\t    \t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\t\n\t    \t}\n\t\n\t    \t// GL state setting\n\t\n\t    \tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\t\n\t    \t\tstate.setCullFace( cullFace );\n\t    \t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\t\n\t    \t};\n\t\n\t    \t// Textures\n\t\n\t    \tfunction allocTextureUnit() {\n\t\n\t    \t\tvar textureUnit = _usedTextureUnits;\n\t\n\t    \t\tif ( textureUnit >= capabilities.maxTextures ) {\n\t\n\t    \t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\t\n\t    \t\t}\n\t\n\t    \t\t_usedTextureUnits += 1;\n\t\n\t    \t\treturn textureUnit;\n\t\n\t    \t}\n\t\n\t    \tthis.allocTextureUnit = allocTextureUnit;\n\t\n\t    \t// this.setTexture2D = setTexture2D;\n\t    \tthis.setTexture2D = ( function() {\n\t\n\t    \t\tvar warned = false;\n\t\n\t    \t\t// backwards compatibility: peel texture.texture\n\t    \t\treturn function setTexture2D( texture, slot ) {\n\t\n\t    \t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\t\n\t    \t\t\t\tif ( ! warned ) {\n\t\n\t    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t    \t\t\t\t\twarned = true;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture = texture.texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttextures.setTexture2D( texture, slot );\n\t\n\t    \t\t};\n\t\n\t    \t}() );\n\t\n\t    \tthis.setTexture = ( function() {\n\t\n\t    \t\tvar warned = false;\n\t\n\t    \t\treturn function setTexture( texture, slot ) {\n\t\n\t    \t\t\tif ( ! warned ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t    \t\t\t\twarned = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttextures.setTexture2D( texture, slot );\n\t\n\t    \t\t};\n\t\n\t    \t}() );\n\t\n\t    \tthis.setTextureCube = ( function() {\n\t\n\t    \t\tvar warned = false;\n\t\n\t    \t\treturn function setTextureCube( texture, slot ) {\n\t\n\t    \t\t\t// backwards compatibility: peel texture.texture\n\t    \t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\t\n\t    \t\t\t\tif ( ! warned ) {\n\t\n\t    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t    \t\t\t\t\twarned = true;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture = texture.texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t    \t\t\t// TODO: unify these code paths\n\t    \t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t    \t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\t\n\t    \t\t\t\t// CompressedTexture can have Array in image :/\n\t\n\t    \t\t\t\t// this function alone should take care of cube textures\n\t    \t\t\t\ttextures.setTextureCube( texture, slot );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\t\n\t    \t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() );\n\t\n\t    \tthis.getCurrentRenderTarget = function() {\n\t\n\t    \t\treturn _currentRenderTarget;\n\t\n\t    \t};\n\t\n\t    \tthis.setRenderTarget = function ( renderTarget ) {\n\t\n\t    \t\t_currentRenderTarget = renderTarget;\n\t\n\t    \t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\t\n\t    \t\t\ttextures.setupRenderTarget( renderTarget );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t    \t\tvar framebuffer;\n\t\n\t    \t\tif ( renderTarget ) {\n\t\n\t    \t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\n\t    \t\t\tif ( isCube ) {\n\t\n\t    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t_currentScissor.copy( renderTarget.scissor );\n\t    \t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\n\t    \t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tframebuffer = null;\n\t\n\t    \t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t    \t\t\t_currentScissorTest = _scissorTest;\n\t\n\t    \t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( _currentFramebuffer !== framebuffer ) {\n\t\n\t    \t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t    \t\t\t_currentFramebuffer = framebuffer;\n\t\n\t    \t\t}\n\t\n\t    \t\tstate.scissor( _currentScissor );\n\t    \t\tstate.setScissorTest( _currentScissorTest );\n\t\n\t    \t\tstate.viewport( _currentViewport );\n\t\n\t    \t\tif ( isCube ) {\n\t\n\t    \t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\t\n\t    \t\tif ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {\n\t\n\t    \t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\t\n\t    \t\tif ( framebuffer ) {\n\t\n\t    \t\t\tvar restore = false;\n\t\n\t    \t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\t\n\t    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\n\t    \t\t\t\trestore = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttry {\n\t\n\t    \t\t\t\tvar texture = renderTarget.texture;\n\t    \t\t\t\tvar textureFormat = texture.format;\n\t    \t\t\t\tvar textureType = texture.type;\n\t\n\t    \t\t\t\tif ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t    \t\t\t\t     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t    \t\t\t\t     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\t\n\t    \t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\n\t    \t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\t\n\t    \t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} finally {\n\t\n\t    \t\t\t\tif ( restore ) {\n\t\n\t    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \t// Map three.js constants to WebGL constants\n\t\n\t    \tfunction paramThreeToGL( p ) {\n\t\n\t    \t\tvar extension;\n\t\n\t    \t\tif ( p === RepeatWrapping ) return _gl.REPEAT;\n\t    \t\tif ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t    \t\tif ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\t\n\t    \t\tif ( p === NearestFilter ) return _gl.NEAREST;\n\t    \t\tif ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t    \t\tif ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\t\n\t    \t\tif ( p === LinearFilter ) return _gl.LINEAR;\n\t    \t\tif ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t    \t\tif ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\t\n\t    \t\tif ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t    \t\tif ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t    \t\tif ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t    \t\tif ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\t\n\t    \t\tif ( p === ByteType ) return _gl.BYTE;\n\t    \t\tif ( p === ShortType ) return _gl.SHORT;\n\t    \t\tif ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t    \t\tif ( p === IntType ) return _gl.INT;\n\t    \t\tif ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t    \t\tif ( p === FloatType ) return _gl.FLOAT;\n\t\n\t    \t\textension = extensions.get( 'OES_texture_half_float' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === HalfFloatType ) return extension.HALF_FLOAT_OES;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( p === AlphaFormat ) return _gl.ALPHA;\n\t    \t\tif ( p === RGBFormat ) return _gl.RGB;\n\t    \t\tif ( p === RGBAFormat ) return _gl.RGBA;\n\t    \t\tif ( p === LuminanceFormat ) return _gl.LUMINANCE;\n\t    \t\tif ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\t    \t\tif ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;\n\t    \t\tif ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;\n\t\n\t    \t\tif ( p === AddEquation ) return _gl.FUNC_ADD;\n\t    \t\tif ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t    \t\tif ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\t\n\t    \t\tif ( p === ZeroFactor ) return _gl.ZERO;\n\t    \t\tif ( p === OneFactor ) return _gl.ONE;\n\t    \t\tif ( p === SrcColorFactor ) return _gl.SRC_COLOR;\n\t    \t\tif ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t    \t\tif ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t    \t\tif ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t    \t\tif ( p === DstAlphaFactor ) return _gl.DST_ALPHA;\n\t    \t\tif ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\t\n\t    \t\tif ( p === DstColorFactor ) return _gl.DST_COLOR;\n\t    \t\tif ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t    \t\tif ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\t\n\t    \t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t    \t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t    \t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t    \t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t    \t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t    \t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t    \t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'EXT_blend_minmax' );\n\t\n\t    \t\tif ( extension !== null ) {\n\t\n\t    \t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t    \t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\t\n\t    \t\t}\n\t\n\t    \t\textension = extensions.get( 'WEBGL_depth_texture' );\n\t\n\t    \t\tif ( extension !== null ){\n\t\n\t    \t\t\tif ( p === UnsignedInt248Type ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn 0;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function FogExp2 ( color, density ) {\n\t\n\t    \tthis.name = '';\n\t\n\t    \tthis.color = new Color( color );\n\t    \tthis.density = ( density !== undefined ) ? density : 0.00025;\n\t\n\t    }\n\t\n\t    FogExp2.prototype.isFogExp2 = true;\n\t\n\t    FogExp2.prototype.clone = function () {\n\t\n\t    \treturn new FogExp2( this.color.getHex(), this.density );\n\t\n\t    };\n\t\n\t    FogExp2.prototype.toJSON = function ( meta ) {\n\t\n\t    \treturn {\n\t    \t\ttype: 'FogExp2',\n\t    \t\tcolor: this.color.getHex(),\n\t    \t\tdensity: this.density\n\t    \t};\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Fog ( color, near, far ) {\n\t\n\t    \tthis.name = '';\n\t\n\t    \tthis.color = new Color( color );\n\t\n\t    \tthis.near = ( near !== undefined ) ? near : 1;\n\t    \tthis.far = ( far !== undefined ) ? far : 1000;\n\t\n\t    }\n\t\n\t    Fog.prototype.isFog = true;\n\t\n\t    Fog.prototype.clone = function () {\n\t\n\t    \treturn new Fog( this.color.getHex(), this.near, this.far );\n\t\n\t    };\n\t\n\t    Fog.prototype.toJSON = function ( meta ) {\n\t\n\t    \treturn {\n\t    \t\ttype: 'Fog',\n\t    \t\tcolor: this.color.getHex(),\n\t    \t\tnear: this.near,\n\t    \t\tfar: this.far\n\t    \t};\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Scene () {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Scene';\n\t\n\t    \tthis.background = null;\n\t    \tthis.fog = null;\n\t    \tthis.overrideMaterial = null;\n\t\n\t    \tthis.autoUpdate = true; // checked by the renderer\n\t\n\t    }\n\t\n\t    Scene.prototype = Object.create( Object3D.prototype );\n\t\n\t    Scene.prototype.constructor = Scene;\n\t\n\t    Scene.prototype.copy = function ( source, recursive ) {\n\t\n\t    \tObject3D.prototype.copy.call( this, source, recursive );\n\t\n\t    \tif ( source.background !== null ) this.background = source.background.clone();\n\t    \tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t    \tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\t\n\t    \tthis.autoUpdate = source.autoUpdate;\n\t    \tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    Scene.prototype.toJSON = function ( meta ) {\n\t\n\t    \tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t    \tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\t\n\t    \treturn data;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function LensFlare( texture, size, distance, blending, color ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.lensFlares = [];\n\t\n\t    \tthis.positionScreen = new Vector3();\n\t    \tthis.customUpdateCallback = undefined;\n\t\n\t    \tif ( texture !== undefined ) {\n\t\n\t    \t\tthis.add( texture, size, distance, blending, color );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: LensFlare,\n\t\n\t    \tisLensFlare: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.positionScreen.copy( source.positionScreen );\n\t    \t\tthis.customUpdateCallback = source.customUpdateCallback;\n\t\n\t    \t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tadd: function ( texture, size, distance, blending, color, opacity ) {\n\t\n\t    \t\tif ( size === undefined ) size = - 1;\n\t    \t\tif ( distance === undefined ) distance = 0;\n\t    \t\tif ( opacity === undefined ) opacity = 1;\n\t    \t\tif ( color === undefined ) color = new Color( 0xffffff );\n\t    \t\tif ( blending === undefined ) blending = NormalBlending;\n\t\n\t    \t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\t\n\t    \t\tthis.lensFlares.push( {\n\t    \t\t\ttexture: texture,\t// THREE.Texture\n\t    \t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t    \t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t    \t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t    \t\t\tscale: 1, \t\t// scale\n\t    \t\t\trotation: 0, \t\t// rotation\n\t    \t\t\topacity: opacity,\t// opacity\n\t    \t\t\tcolor: color,\t\t// color\n\t    \t\t\tblending: blending\t// blending\n\t    \t\t} );\n\t\n\t    \t},\n\t\n\t    \t/*\n\t    \t * Update lens flares update positions on all flares based on the screen position\n\t    \t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t    \t */\n\t\n\t    \tupdateLensFlares: function () {\n\t\n\t    \t\tvar f, fl = this.lensFlares.length;\n\t    \t\tvar flare;\n\t    \t\tvar vecX = - this.positionScreen.x * 2;\n\t    \t\tvar vecY = - this.positionScreen.y * 2;\n\t\n\t    \t\tfor ( f = 0; f < fl; f ++ ) {\n\t\n\t    \t\t\tflare = this.lensFlares[ f ];\n\t\n\t    \t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t    \t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\t\n\t    \t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t    \t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *\tuvOffset: new THREE.Vector2(),\n\t     *\tuvScale: new THREE.Vector2()\n\t     * }\n\t     */\n\t\n\t    function SpriteMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'SpriteMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t    \tthis.map = null;\n\t\n\t    \tthis.rotation = 0;\n\t\n\t    \tthis.fog = false;\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    SpriteMaterial.prototype = Object.create( Material.prototype );\n\t    SpriteMaterial.prototype.constructor = SpriteMaterial;\n\t\n\t    SpriteMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.rotation = source.rotation;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Sprite( material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Sprite';\n\t\n\t    \tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\t\n\t    }\n\t\n\t    Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Sprite,\n\t\n\t    \tisSprite: true,\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar matrixPosition = new Vector3();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n\t    \t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\t\n\t    \t\t\tif ( distanceSq > guessSizeSq ) {\n\t\n\t    \t\t\t\treturn;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tintersects.push( {\n\t\n\t    \t\t\t\tdistance: Math.sqrt( distanceSq ),\n\t    \t\t\t\tpoint: this.position,\n\t    \t\t\t\tface: null,\n\t    \t\t\t\tobject: this\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LOD() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'LOD';\n\t\n\t    \tObject.defineProperties( this, {\n\t    \t\tlevels: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tvalue: []\n\t    \t\t}\n\t    \t} );\n\t\n\t    }\n\t\n\t\n\t    LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: LOD,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source, false );\n\t\n\t    \t\tvar levels = source.levels;\n\t\n\t    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar level = levels[ i ];\n\t\n\t    \t\t\tthis.addLevel( level.object.clone(), level.distance );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \taddLevel: function ( object, distance ) {\n\t\n\t    \t\tif ( distance === undefined ) distance = 0;\n\t\n\t    \t\tdistance = Math.abs( distance );\n\t\n\t    \t\tvar levels = this.levels;\n\t\n\t    \t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\t\n\t    \t\t\tif ( distance < levels[ l ].distance ) {\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\t\n\t    \t\tthis.add( object );\n\t\n\t    \t},\n\t\n\t    \tgetObjectForDistance: function ( distance ) {\n\t\n\t    \t\tvar levels = this.levels;\n\t\n\t    \t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\tif ( distance < levels[ i ].distance ) {\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn levels[ i - 1 ].object;\n\t\n\t    \t},\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar matrixPosition = new Vector3();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\t\n\t    \t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tupdate: function () {\n\t\n\t    \t\tvar v1 = new Vector3();\n\t    \t\tvar v2 = new Vector3();\n\t\n\t    \t\treturn function update( camera ) {\n\t\n\t    \t\t\tvar levels = this.levels;\n\t\n\t    \t\t\tif ( levels.length > 1 ) {\n\t\n\t    \t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t    \t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\t\tvar distance = v1.distanceTo( v2 );\n\t\n\t    \t\t\t\tlevels[ 0 ].object.visible = true;\n\t\n\t    \t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\t\n\t    \t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t    \t\t\t\t\t\tlevels[ i ].object.visible = true;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( ; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tlevels[ i ].object.visible = false;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}(),\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.levels = [];\n\t\n\t    \t\tvar levels = this.levels;\n\t\n\t    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar level = levels[ i ];\n\t\n\t    \t\t\tdata.object.levels.push( {\n\t    \t\t\t\tobject: level.object.uuid,\n\t    \t\t\t\tdistance: level.distance\n\t    \t\t\t} );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\t\n\t    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t    \tthis.image = { data: data, width: width, height: height };\n\t\n\t    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\n\t    \tthis.flipY = false;\n\t    \tthis.generateMipmaps  = false;\n\t\n\t    }\n\t\n\t    DataTexture.prototype = Object.create( Texture.prototype );\n\t    DataTexture.prototype.constructor = DataTexture;\n\t\n\t    DataTexture.prototype.isDataTexture = true;\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author michael guerrero / http://realitymeltdown.com\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function Skeleton( bones, boneInverses, useVertexTexture ) {\n\t\n\t    \tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\t\n\t    \tthis.identityMatrix = new Matrix4();\n\t\n\t    \t// copy the bone array\n\t\n\t    \tbones = bones || [];\n\t\n\t    \tthis.bones = bones.slice( 0 );\n\t\n\t    \t// create a bone texture or an array of floats\n\t\n\t    \tif ( this.useVertexTexture ) {\n\t\n\t    \t\t// layout (1 matrix = 4 pixels)\n\t    \t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t    \t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t    \t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t    \t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t    \t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\n\t\n\t    \t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t    \t\tsize = exports.Math.nextPowerOfTwo( Math.ceil( size ) );\n\t    \t\tsize = Math.max( size, 4 );\n\t\n\t    \t\tthis.boneTextureWidth = size;\n\t    \t\tthis.boneTextureHeight = size;\n\t\n\t    \t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n\t    \t\tthis.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );\n\t\n\t    \t} else {\n\t\n\t    \t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\t\n\t    \t}\n\t\n\t    \t// use the supplied bone inverses or calculate the inverses\n\t\n\t    \tif ( boneInverses === undefined ) {\n\t\n\t    \t\tthis.calculateInverses();\n\t\n\t    \t} else {\n\t\n\t    \t\tif ( this.bones.length === boneInverses.length ) {\n\t\n\t    \t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\t\n\t    \t\t\tthis.boneInverses = [];\n\t\n\t    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\t\tthis.boneInverses.push( new Matrix4() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Object.assign( Skeleton.prototype, {\n\t\n\t    \tcalculateInverses: function () {\n\t\n\t    \t\tthis.boneInverses = [];\n\t\n\t    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\tvar inverse = new Matrix4();\n\t\n\t    \t\t\tif ( this.bones[ b ] ) {\n\t\n\t    \t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.boneInverses.push( inverse );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tpose: function () {\n\t\n\t    \t\tvar bone;\n\t\n\t    \t\t// recover the bind-time world matrices\n\t\n\t    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\tbone = this.bones[ b ];\n\t\n\t    \t\t\tif ( bone ) {\n\t\n\t    \t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// compute the local matrices, positions, rotations and scales\n\t\n\t    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\tbone = this.bones[ b ];\n\t\n\t    \t\t\tif ( bone ) {\n\t\n\t    \t\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t    \t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t    \t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tupdate: ( function () {\n\t\n\t    \t\tvar offsetMatrix = new Matrix4();\n\t\n\t    \t\treturn function update() {\n\t\n\t    \t\t\t// flatten bone matrices to array\n\t\n\t    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t    \t\t\t\t// compute the offset between the current and the original transform\n\t\n\t    \t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\t\n\t    \t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n\t    \t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( this.useVertexTexture ) {\n\t\n\t    \t\t\t\tthis.boneTexture.needsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function Bone( skin ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Bone';\n\t\n\t    \tthis.skin = skin;\n\t\n\t    }\n\t\n\t    Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Bone,\n\t\n\t    \tisBone: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.skin = source.skin;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mikael emtinger / http://gomo.se/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function SkinnedMesh( geometry, material, useVertexTexture ) {\n\t\n\t    \tMesh.call( this, geometry, material );\n\t\n\t    \tthis.type = 'SkinnedMesh';\n\t\n\t    \tthis.bindMode = \"attached\";\n\t    \tthis.bindMatrix = new Matrix4();\n\t    \tthis.bindMatrixInverse = new Matrix4();\n\t\n\t    \t// init bones\n\t\n\t    \t// TODO: remove bone creation as there is no reason (other than\n\t    \t// convenience) for THREE.SkinnedMesh to do this.\n\t\n\t    \tvar bones = [];\n\t\n\t    \tif ( this.geometry && this.geometry.bones !== undefined ) {\n\t\n\t    \t\tvar bone, gbone;\n\t\n\t    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\t\n\t    \t\t\tgbone = this.geometry.bones[ b ];\n\t\n\t    \t\t\tbone = new Bone( this );\n\t    \t\t\tbones.push( bone );\n\t\n\t    \t\t\tbone.name = gbone.name;\n\t    \t\t\tbone.position.fromArray( gbone.pos );\n\t    \t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t    \t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\t\n\t    \t\t\tgbone = this.geometry.bones[ b ];\n\t\n\t    \t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n\t    \t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\t\n\t    \t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tthis.add( bones[ b ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.normalizeSkinWeights();\n\t\n\t    \tthis.updateMatrixWorld( true );\n\t    \tthis.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\t\n\t    }\n\t\n\t\n\t    SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\t\n\t    \tconstructor: SkinnedMesh,\n\t\n\t    \tisSkinnedMesh: true,\n\t\n\t    \tbind: function( skeleton, bindMatrix ) {\n\t\n\t    \t\tthis.skeleton = skeleton;\n\t\n\t    \t\tif ( bindMatrix === undefined ) {\n\t\n\t    \t\t\tthis.updateMatrixWorld( true );\n\t\n\t    \t\t\tthis.skeleton.calculateInverses();\n\t\n\t    \t\t\tbindMatrix = this.matrixWorld;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.bindMatrix.copy( bindMatrix );\n\t    \t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\t\n\t    \t},\n\t\n\t    \tpose: function () {\n\t\n\t    \t\tthis.skeleton.pose();\n\t\n\t    \t},\n\t\n\t    \tnormalizeSkinWeights: function () {\n\t\n\t    \t\tif ( (this.geometry && this.geometry.isGeometry) ) {\n\t\n\t    \t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\t\n\t    \t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\t\n\t    \t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\t\n\t    \t\t\t\tif ( scale !== Infinity ) {\n\t\n\t    \t\t\t\t\tsw.multiplyScalar( scale );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\tvar vec = new Vector4();\n\t\n\t    \t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\t\n\t    \t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\t\n\t    \t\t\t\tvec.x = skinWeight.getX( i );\n\t    \t\t\t\tvec.y = skinWeight.getY( i );\n\t    \t\t\t\tvec.z = skinWeight.getZ( i );\n\t    \t\t\t\tvec.w = skinWeight.getW( i );\n\t\n\t    \t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\t\n\t    \t\t\t\tif ( scale !== Infinity ) {\n\t\n\t    \t\t\t\t\tvec.multiplyScalar( scale );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: function( force ) {\n\t\n\t    \t\tMesh.prototype.updateMatrixWorld.call( this, true );\n\t\n\t    \t\tif ( this.bindMode === \"attached\" ) {\n\t\n\t    \t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\t\n\t    \t\t} else if ( this.bindMode === \"detached\" ) {\n\t\n\t    \t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tclone: function() {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  linewidth: <float>,\n\t     *  linecap: \"round\",\n\t     *  linejoin: \"round\"\n\t     * }\n\t     */\n\t\n\t    function LineBasicMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'LineBasicMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t\n\t    \tthis.linewidth = 1;\n\t    \tthis.linecap = 'round';\n\t    \tthis.linejoin = 'round';\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    LineBasicMaterial.prototype = Object.create( Material.prototype );\n\t    LineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\t\n\t    LineBasicMaterial.prototype.isLineBasicMaterial = true;\n\t\n\t    LineBasicMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.linewidth = source.linewidth;\n\t    \tthis.linecap = source.linecap;\n\t    \tthis.linejoin = source.linejoin;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Line( geometry, material, mode ) {\n\t\n\t    \tif ( mode === 1 ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t    \t\treturn new LineSegments( geometry, material );\n\t\n\t    \t}\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Line';\n\t\n\t    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t    \tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t    }\n\t\n\t    Line.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Line,\n\t\n\t    \tisLine: true,\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar inverseMatrix = new Matrix4();\n\t    \t\tvar ray = new Ray();\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tvar precision = raycaster.linePrecision;\n\t    \t\t\tvar precisionSq = precision * precision;\n\t\n\t    \t\t\tvar geometry = this.geometry;\n\t    \t\t\tvar matrixWorld = this.matrixWorld;\n\t\n\t    \t\t\t// Checking boundingSphere distance to ray\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere );\n\t    \t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tinverseMatrix.getInverse( matrixWorld );\n\t    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t    \t\t\tvar vStart = new Vector3();\n\t    \t\t\tvar vEnd = new Vector3();\n\t    \t\t\tvar interSegment = new Vector3();\n\t    \t\t\tvar interRay = new Vector3();\n\t    \t\t\tvar step = (this && this.isLineSegments) ? 2 : 1;\n\t\n\t    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\tvar index = geometry.index;\n\t    \t\t\t\tvar attributes = geometry.attributes;\n\t    \t\t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\t\n\t    \t\t\t\t\t\tvar a = indices[ i ];\n\t    \t\t\t\t\t\tvar b = indices[ i + 1 ];\n\t\n\t    \t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t    \t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\t\n\t    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\t\n\t    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t    \t\t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t    \t\t\t\t\t\t\tindex: i,\n\t    \t\t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\t\tfaceIndex: null,\n\t    \t\t\t\t\t\t\tobject: this\n\t\n\t    \t\t\t\t\t\t} );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\t\n\t    \t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t    \t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\t\n\t    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\t\n\t    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t    \t\t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t    \t\t\t\t\t\t\tindex: i,\n\t    \t\t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\t\tfaceIndex: null,\n\t    \t\t\t\t\t\t\tobject: this\n\t\n\t    \t\t\t\t\t\t} );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\t\t\tvar vertices = geometry.vertices;\n\t    \t\t\t\tvar nbVertices = vertices.length;\n\t\n\t    \t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\t\n\t    \t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\t\n\t    \t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t    \t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t    \t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t    \t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t    \t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t    \t\t\t\t\t\tindex: i,\n\t    \t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\tfaceIndex: null,\n\t    \t\t\t\t\t\tobject: this\n\t\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LineSegments( geometry, material ) {\n\t\n\t    \tLine.call( this, geometry, material );\n\t\n\t    \tthis.type = 'LineSegments';\n\t\n\t    }\n\t\n\t    LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\t\n\t    \tconstructor: LineSegments,\n\t\n\t    \tisLineSegments: true\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  size: <float>,\n\t     *  sizeAttenuation: <bool>\n\t     * }\n\t     */\n\t\n\t    function PointsMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'PointsMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.size = 1;\n\t    \tthis.sizeAttenuation = true;\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    PointsMaterial.prototype = Object.create( Material.prototype );\n\t    PointsMaterial.prototype.constructor = PointsMaterial;\n\t\n\t    PointsMaterial.prototype.isPointsMaterial = true;\n\t\n\t    PointsMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.size = source.size;\n\t    \tthis.sizeAttenuation = source.sizeAttenuation;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Points( geometry, material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Points';\n\t\n\t    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t    \tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t    }\n\t\n\t    Points.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Points,\n\t\n\t    \tisPoints: true,\n\t\n\t    \traycast: ( function () {\n\t\n\t    \t\tvar inverseMatrix = new Matrix4();\n\t    \t\tvar ray = new Ray();\n\t    \t\tvar sphere = new Sphere();\n\t\n\t    \t\treturn function raycast( raycaster, intersects ) {\n\t\n\t    \t\t\tvar object = this;\n\t    \t\t\tvar geometry = this.geometry;\n\t    \t\t\tvar matrixWorld = this.matrixWorld;\n\t    \t\t\tvar threshold = raycaster.params.Points.threshold;\n\t\n\t    \t\t\t// Checking boundingSphere distance to ray\n\t\n\t    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t    \t\t\tsphere.copy( geometry.boundingSphere );\n\t    \t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tinverseMatrix.getInverse( matrixWorld );\n\t    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t    \t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t    \t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t    \t\t\tvar position = new Vector3();\n\t\n\t    \t\t\tfunction testPoint( point, index ) {\n\t\n\t    \t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\t\n\t    \t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\t\n\t    \t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t    \t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\t\n\t    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\t\n\t    \t\t\t\t\tintersects.push( {\n\t\n\t    \t\t\t\t\t\tdistance: distance,\n\t    \t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t    \t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t    \t\t\t\t\t\tindex: index,\n\t    \t\t\t\t\t\tface: null,\n\t    \t\t\t\t\t\tobject: object\n\t\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\t\t\tvar index = geometry.index;\n\t    \t\t\t\tvar attributes = geometry.attributes;\n\t    \t\t\t\tvar positions = attributes.position.array;\n\t\n\t    \t\t\t\tif ( index !== null ) {\n\t\n\t    \t\t\t\t\tvar indices = index.array;\n\t\n\t    \t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\t\t\tvar a = indices[ i ];\n\t\n\t    \t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\t\n\t    \t\t\t\t\t\ttestPoint( position, a );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\t\n\t    \t\t\t\t\t\ttestPoint( position, i );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tvar vertices = geometry.vertices;\n\t\n\t    \t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\ttestPoint( vertices[ i ], i );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t}() ),\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Group() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Group';\n\t\n\t    }\n\t\n\t    Group.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Group\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\t\n\t    \tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t    \tthis.generateMipmaps = false;\n\t\n\t    \tvar scope = this;\n\t\n\t    \tfunction update() {\n\t\n\t    \t\trequestAnimationFrame( update );\n\t\n\t    \t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\t\n\t    \t\t\tscope.needsUpdate = true;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tupdate();\n\t\n\t    }\n\t\n\t    VideoTexture.prototype = Object.create( Texture.prototype );\n\t    VideoTexture.prototype.constructor = VideoTexture;\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\t\n\t    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t    \tthis.image = { width: width, height: height };\n\t    \tthis.mipmaps = mipmaps;\n\t\n\t    \t// no flipping for cube textures\n\t    \t// (also flipping doesn't work for compressed textures )\n\t\n\t    \tthis.flipY = false;\n\t\n\t    \t// can't generate mipmaps for compressed textures\n\t    \t// mips must be embedded in DDS files\n\t\n\t    \tthis.generateMipmaps = false;\n\t\n\t    }\n\t\n\t    CompressedTexture.prototype = Object.create( Texture.prototype );\n\t    CompressedTexture.prototype.constructor = CompressedTexture;\n\t\n\t    CompressedTexture.prototype.isCompressedTexture = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\t\n\t    \tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t    \tthis.needsUpdate = true;\n\t\n\t    }\n\t\n\t    CanvasTexture.prototype = Object.create( Texture.prototype );\n\t    CanvasTexture.prototype.constructor = CanvasTexture;\n\t\n\t    /**\n\t     * @author Matt DesLauriers / @mattdesl\n\t     * @author atix / arthursilber.de\n\t     */\n\t\n\t    function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\t\n\t    \tformat = format !== undefined ? format : DepthFormat;\n\t\n\t    \tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\t\n\t    \t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )\n\t\n\t    \t}\n\t\n\t    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t    \tthis.image = { width: width, height: height };\n\t\n\t    \tthis.type = type !== undefined ? type : UnsignedShortType;\n\t\n\t    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\n\t    \tthis.flipY = false;\n\t    \tthis.generateMipmaps\t= false;\n\t\n\t    }\n\t\n\t    DepthTexture.prototype = Object.create( Texture.prototype );\n\t    DepthTexture.prototype.constructor = DepthTexture;\n\t    DepthTexture.prototype.isDepthTexture = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function WireframeGeometry( geometry ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tvar edge = [ 0, 0 ], hash = {};\n\t\n\t    \tfunction sortFunction( a, b ) {\n\t\n\t    \t\treturn a - b;\n\t\n\t    \t}\n\t\n\t    \tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t    \tif ( (geometry && geometry.isGeometry) ) {\n\t\n\t    \t\tvar vertices = geometry.vertices;\n\t    \t\tvar faces = geometry.faces;\n\t    \t\tvar numEdges = 0;\n\t\n\t    \t\t// allocate maximal size\n\t    \t\tvar edges = new Uint32Array( 6 * faces.length );\n\t\n\t    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t    \t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t    \t\t\t\tedge.sort( sortFunction );\n\t\n\t    \t\t\t\tvar key = edge.toString();\n\t\n\t    \t\t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t    \t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t    \t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t    \t\t\t\t\thash[ key ] = true;\n\t    \t\t\t\t\tnumEdges ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t    \t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\t\n\t    \t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\t\n\t    \t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\t\n\t    \t\t\t\tvar index = 6 * i + 3 * j;\n\t    \t\t\t\tcoords[ index + 0 ] = vertex.x;\n\t    \t\t\t\tcoords[ index + 1 ] = vertex.y;\n\t    \t\t\t\tcoords[ index + 2 ] = vertex.z;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t    \t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\tif ( geometry.index !== null ) {\n\t\n\t    \t\t\t// Indexed BufferGeometry\n\t\n\t    \t\t\tvar indices = geometry.index.array;\n\t    \t\t\tvar vertices = geometry.attributes.position;\n\t    \t\t\tvar groups = geometry.groups;\n\t    \t\t\tvar numEdges = 0;\n\t\n\t    \t\t\tif ( groups.length === 0 ) {\n\t\n\t    \t\t\t\tgeometry.addGroup( 0, indices.length );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// allocate maximal size\n\t    \t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\t\n\t    \t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\t\n\t    \t\t\t\tvar group = groups[ o ];\n\t\n\t    \t\t\t\tvar start = group.start;\n\t    \t\t\t\tvar count = group.count;\n\t\n\t    \t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\t\n\t    \t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n\t    \t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n\t    \t\t\t\t\t\tedge.sort( sortFunction );\n\t\n\t    \t\t\t\t\t\tvar key = edge.toString();\n\t\n\t    \t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t    \t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t    \t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t    \t\t\t\t\t\t\thash[ key ] = true;\n\t    \t\t\t\t\t\t\tnumEdges ++;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t    \t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\t\n\t    \t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\t\n\t    \t\t\t\t\tvar index = 6 * i + 3 * j;\n\t    \t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\t\n\t    \t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n\t    \t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n\t    \t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// non-indexed BufferGeometry\n\t\n\t    \t\t\tvar vertices = geometry.attributes.position.array;\n\t    \t\t\tvar numEdges = vertices.length / 3;\n\t    \t\t\tvar numTris = numEdges / 3;\n\t\n\t    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t    \t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\t\n\t    \t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\t\tvar index = 18 * i + 6 * j;\n\t\n\t    \t\t\t\t\tvar index1 = 9 * i + 3 * j;\n\t    \t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n\t    \t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n\t    \t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\t\n\t    \t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n\t    \t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n\t    \t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n\t    \t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    WireframeGeometry.prototype.constructor = WireframeGeometry;\n\t\n\t    /**\n\t     * @author zz85 / https://github.com/zz85\n\t     * Parametric Surfaces Geometry\n\t     * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t     *\n\t     * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n\t     *\n\t     */\n\t\n\t    function ParametricGeometry( func, slices, stacks ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'ParametricGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tfunc: func,\n\t    \t\tslices: slices,\n\t    \t\tstacks: stacks\n\t    \t};\n\t\n\t    \tvar verts = this.vertices;\n\t    \tvar faces = this.faces;\n\t    \tvar uvs = this.faceVertexUvs[ 0 ];\n\t\n\t    \tvar i, j, p;\n\t    \tvar u, v;\n\t\n\t    \tvar sliceCount = slices + 1;\n\t\n\t    \tfor ( i = 0; i <= stacks; i ++ ) {\n\t\n\t    \t\tv = i / stacks;\n\t\n\t    \t\tfor ( j = 0; j <= slices; j ++ ) {\n\t\n\t    \t\t\tu = j / slices;\n\t\n\t    \t\t\tp = func( u, v );\n\t    \t\t\tverts.push( p );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar a, b, c, d;\n\t    \tvar uva, uvb, uvc, uvd;\n\t\n\t    \tfor ( i = 0; i < stacks; i ++ ) {\n\t\n\t    \t\tfor ( j = 0; j < slices; j ++ ) {\n\t\n\t    \t\t\ta = i * sliceCount + j;\n\t    \t\t\tb = i * sliceCount + j + 1;\n\t    \t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n\t    \t\t\td = ( i + 1 ) * sliceCount + j;\n\t\n\t    \t\t\tuva = new Vector2( j / slices, i / stacks );\n\t    \t\t\tuvb = new Vector2( ( j + 1 ) / slices, i / stacks );\n\t    \t\t\tuvc = new Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n\t    \t\t\tuvd = new Vector2( j / slices, ( i + 1 ) / stacks );\n\t\n\t    \t\t\tfaces.push( new Face3( a, b, d ) );\n\t    \t\t\tuvs.push( [ uva, uvb, uvd ] );\n\t\n\t    \t\t\tfaces.push( new Face3( b, c, d ) );\n\t    \t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// console.log(this);\n\t\n\t    \t// magic bullet\n\t    \t// var diff = this.mergeVertices();\n\t    \t// console.log('removed ', diff, ' vertices by merging');\n\t\n\t    \tthis.computeFaceNormals();\n\t    \tthis.computeVertexNormals();\n\t\n\t    }\n\t\n\t    ParametricGeometry.prototype = Object.create( Geometry.prototype );\n\t    ParametricGeometry.prototype.constructor = ParametricGeometry;\n\t\n\t    /**\n\t     * @author clockworkgeek / https://github.com/clockworkgeek\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function PolyhedronGeometry( vertices, indices, radius, detail ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'PolyhedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tvertices: vertices,\n\t    \t\tindices: indices,\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    \tradius = radius || 1;\n\t    \tdetail = detail || 0;\n\t\n\t    \tvar that = this;\n\t\n\t    \tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\t\n\t    \t\tprepare( new Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\t\n\t    \t}\n\t\n\t    \tvar p = this.vertices;\n\t\n\t    \tvar faces = [];\n\t\n\t    \tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\t\n\t    \t\tvar v1 = p[ indices[ i ] ];\n\t    \t\tvar v2 = p[ indices[ i + 1 ] ];\n\t    \t\tvar v3 = p[ indices[ i + 2 ] ];\n\t\n\t    \t\tfaces[ j ] = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t\n\t    \t}\n\t\n\t    \tvar centroid = new Vector3();\n\t\n\t    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\tsubdivide( faces[ i ], detail );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Handle case when face straddles the seam\n\t\n\t    \tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\t\n\t    \t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\t\n\t    \t\tvar x0 = uvs[ 0 ].x;\n\t    \t\tvar x1 = uvs[ 1 ].x;\n\t    \t\tvar x2 = uvs[ 2 ].x;\n\t\n\t    \t\tvar max = Math.max( x0, x1, x2 );\n\t    \t\tvar min = Math.min( x0, x1, x2 );\n\t\n\t    \t\tif ( max > 0.9 && min < 0.1 ) {\n\t\n\t    \t\t\t// 0.9 is somewhat arbitrary\n\t\n\t    \t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n\t    \t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n\t    \t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// Apply radius\n\t\n\t    \tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\t\n\t    \t\tthis.vertices[ i ].multiplyScalar( radius );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Merge vertices\n\t\n\t    \tthis.mergeVertices();\n\t\n\t    \tthis.computeFaceNormals();\n\t\n\t    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t\n\t    \t// Project vector onto sphere's surface\n\t\n\t    \tfunction prepare( vector ) {\n\t\n\t    \t\tvar vertex = vector.normalize().clone();\n\t    \t\tvertex.index = that.vertices.push( vertex ) - 1;\n\t\n\t    \t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\t\n\t    \t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n\t    \t\tvar v = inclination( vector ) / Math.PI + 0.5;\n\t    \t\tvertex.uv = new Vector2( u, 1 - v );\n\t\n\t    \t\treturn vertex;\n\t\n\t    \t}\n\t\n\t\n\t    \t// Approximate a curved face with recursively sub-divided triangles.\n\t\n\t    \tfunction make( v1, v2, v3 ) {\n\t\n\t    \t\tvar face = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t    \t\tthat.faces.push( face );\n\t\n\t    \t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\t\n\t    \t\tvar azi = azimuth( centroid );\n\t\n\t    \t\tthat.faceVertexUvs[ 0 ].push( [\n\t    \t\t\tcorrectUV( v1.uv, v1, azi ),\n\t    \t\t\tcorrectUV( v2.uv, v2, azi ),\n\t    \t\t\tcorrectUV( v3.uv, v3, azi )\n\t    \t\t] );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Analytically subdivide a face to the required detail level.\n\t\n\t    \tfunction subdivide( face, detail ) {\n\t\n\t    \t\tvar cols = Math.pow( 2, detail );\n\t    \t\tvar a = prepare( that.vertices[ face.a ] );\n\t    \t\tvar b = prepare( that.vertices[ face.b ] );\n\t    \t\tvar c = prepare( that.vertices[ face.c ] );\n\t    \t\tvar v = [];\n\t\n\t    \t\t// Construct all of the vertices for this subdivision.\n\t\n\t    \t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\t\n\t    \t\t\tv[ i ] = [];\n\t\n\t    \t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n\t    \t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n\t    \t\t\tvar rows = cols - i;\n\t\n\t    \t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\t\n\t    \t\t\t\tif ( j === 0 && i === cols ) {\n\t\n\t    \t\t\t\t\tv[ i ][ j ] = aj;\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// Construct all of the faces.\n\t\n\t    \t\tfor ( var i = 0; i < cols ; i ++ ) {\n\t\n\t    \t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\t\n\t    \t\t\t\tvar k = Math.floor( j / 2 );\n\t\n\t    \t\t\t\tif ( j % 2 === 0 ) {\n\t\n\t    \t\t\t\t\tmake(\n\t    \t\t\t\t\t\tv[ i ][ k + 1 ],\n\t    \t\t\t\t\t\tv[ i + 1 ][ k ],\n\t    \t\t\t\t\t\tv[ i ][ k ]\n\t    \t\t\t\t\t);\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tmake(\n\t    \t\t\t\t\t\tv[ i ][ k + 1 ],\n\t    \t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n\t    \t\t\t\t\t\tv[ i + 1 ][ k ]\n\t    \t\t\t\t\t);\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// Angle around the Y axis, counter-clockwise when looking from above.\n\t\n\t    \tfunction azimuth( vector ) {\n\t\n\t    \t\treturn Math.atan2( vector.z, - vector.x );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Angle above the XZ plane.\n\t\n\t    \tfunction inclination( vector ) {\n\t\n\t    \t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Texture fixing helper. Spheres have some odd behaviours.\n\t\n\t    \tfunction correctUV( uv, vector, azimuth ) {\n\t\n\t    \t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new Vector2( uv.x - 1, uv.y );\n\t    \t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n\t    \t\treturn uv.clone();\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    PolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\t    PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\t\n\t    /**\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     */\n\t\n\t    function TetrahedronGeometry( radius, detail ) {\n\t\n\t    \tvar vertices = [\n\t    \t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'TetrahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    TetrahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\t\n\t    /**\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     */\n\t\n\t    function OctahedronGeometry( radius, detail ) {\n\t\n\t    \tvar vertices = [\n\t    \t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'OctahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    OctahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    OctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\t\n\t    /**\n\t     * @author timothypratley / https://github.com/timothypratley\n\t     */\n\t\n\t    function IcosahedronGeometry( radius, detail ) {\n\t\n\t    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\n\t    \tvar vertices = [\n\t    \t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t    \t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t    \t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t    \t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t    \t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t    \t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'IcosahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    IcosahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\t\n\t    /**\n\t     * @author Abe Pazos / https://hamoid.com\n\t     */\n\t\n\t    function DodecahedronGeometry( radius, detail ) {\n\t\n\t    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t    \tvar r = 1 / t;\n\t\n\t    \tvar vertices = [\n\t\n\t    \t\t// (±1, ±1, ±1)\n\t    \t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t    \t\t- 1,  1, - 1,    - 1,  1,  1,\n\t    \t\t 1, - 1, - 1,     1, - 1,  1,\n\t    \t\t 1,  1, - 1,     1,  1,  1,\n\t\n\t    \t\t// (0, ±1/φ, ±φ)\n\t    \t\t 0, - r, - t,     0, - r,  t,\n\t    \t\t 0,  r, - t,     0,  r,  t,\n\t\n\t    \t\t// (±1/φ, ±φ, 0)\n\t    \t\t- r, - t,  0,    - r,  t,  0,\n\t    \t\t r, - t,  0,     r,  t,  0,\n\t\n\t    \t\t// (±φ, 0, ±1/φ)\n\t    \t\t- t,  0, - r,     t,  0, - r,\n\t    \t\t- t,  0,  r,     t,  0,  r\n\t    \t];\n\t\n\t    \tvar indices = [\n\t    \t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t    \t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t    \t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t    \t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t    \t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t    \t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t    \t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t    \t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t    \t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t    \t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t    \t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t    \t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t    \t];\n\t\n\t    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t    \tthis.type = 'DodecahedronGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tdetail: detail\n\t    \t};\n\t\n\t    }\n\t\n\t    DodecahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n\t    DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\t\n\t    /**\n\t     * @author WestLangley / https://github.com/WestLangley\n\t     * @author zz85 / https://github.com/zz85\n\t     * @author miningold / https://github.com/miningold\n\t     * @author jonobr1 / https://github.com/jonobr1\n\t     *\n\t     * Modified from the TorusKnotGeometry by @oosmoxiecode\n\t     *\n\t     * Creates a tube which extrudes along a 3d spline\n\t     *\n\t     * Uses parallel transport frames as described in\n\t     * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t     */\n\t\n\t    function TubeGeometry( path, segments, radius, radialSegments, closed, taper ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'TubeGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tpath: path,\n\t    \t\tsegments: segments,\n\t    \t\tradius: radius,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\tclosed: closed,\n\t    \t\ttaper: taper\n\t    \t};\n\t\n\t    \tsegments = segments || 64;\n\t    \tradius = radius || 1;\n\t    \tradialSegments = radialSegments || 8;\n\t    \tclosed = closed || false;\n\t    \ttaper = taper || TubeGeometry.NoTaper;\n\t\n\t    \tvar grid = [];\n\t\n\t    \tvar scope = this,\n\t\n\t    \t\ttangent,\n\t    \t\tnormal,\n\t    \t\tbinormal,\n\t\n\t    \t\tnumpoints = segments + 1,\n\t\n\t    \t\tu, v, r,\n\t\n\t    \t\tcx, cy,\n\t    \t\tpos, pos2 = new Vector3(),\n\t    \t\ti, j,\n\t    \t\tip, jp,\n\t    \t\ta, b, c, d,\n\t    \t\tuva, uvb, uvc, uvd;\n\t\n\t    \tvar frames = new TubeGeometry.FrenetFrames( path, segments, closed ),\n\t    \t\ttangents = frames.tangents,\n\t    \t\tnormals = frames.normals,\n\t    \t\tbinormals = frames.binormals;\n\t\n\t    \t// proxy internals\n\t    \tthis.tangents = tangents;\n\t    \tthis.normals = normals;\n\t    \tthis.binormals = binormals;\n\t\n\t    \tfunction vert( x, y, z ) {\n\t\n\t    \t\treturn scope.vertices.push( new Vector3( x, y, z ) ) - 1;\n\t\n\t    \t}\n\t\n\t    \t// construct the grid\n\t\n\t    \tfor ( i = 0; i < numpoints; i ++ ) {\n\t\n\t    \t\tgrid[ i ] = [];\n\t\n\t    \t\tu = i / ( numpoints - 1 );\n\t\n\t    \t\tpos = path.getPointAt( u );\n\t\n\t    \t\ttangent = tangents[ i ];\n\t    \t\tnormal = normals[ i ];\n\t    \t\tbinormal = binormals[ i ];\n\t\n\t    \t\tr = radius * taper( u );\n\t\n\t    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\t\n\t    \t\t\tv = j / radialSegments * 2 * Math.PI;\n\t\n\t    \t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t    \t\t\tcy = r * Math.sin( v );\n\t\n\t    \t\t\tpos2.copy( pos );\n\t    \t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n\t    \t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n\t    \t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\t\n\t    \t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// construct the mesh\n\t\n\t    \tfor ( i = 0; i < segments; i ++ ) {\n\t\n\t    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\t\n\t    \t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n\t    \t\t\tjp = ( j + 1 ) % radialSegments;\n\t\n\t    \t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n\t    \t\t\tb = grid[ ip ][ j ];\n\t    \t\t\tc = grid[ ip ][ jp ];\n\t    \t\t\td = grid[ i ][ jp ];\n\t\n\t    \t\t\tuva = new Vector2( i / segments, j / radialSegments );\n\t    \t\t\tuvb = new Vector2( ( i + 1 ) / segments, j / radialSegments );\n\t    \t\t\tuvc = new Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n\t    \t\t\tuvd = new Vector2( i / segments, ( j + 1 ) / radialSegments );\n\t\n\t    \t\t\tthis.faces.push( new Face3( a, b, d ) );\n\t    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\t\n\t    \t\t\tthis.faces.push( new Face3( b, c, d ) );\n\t    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.computeFaceNormals();\n\t    \tthis.computeVertexNormals();\n\t\n\t    }\n\t\n\t    TubeGeometry.prototype = Object.create( Geometry.prototype );\n\t    TubeGeometry.prototype.constructor = TubeGeometry;\n\t\n\t    TubeGeometry.NoTaper = function ( u ) {\n\t\n\t    \treturn 1;\n\t\n\t    };\n\t\n\t    TubeGeometry.SinusoidalTaper = function ( u ) {\n\t\n\t    \treturn Math.sin( Math.PI * u );\n\t\n\t    };\n\t\n\t    // For computing of Frenet frames, exposing the tangents, normals and binormals the spline\n\t    TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\t\n\t    \tvar\tnormal = new Vector3(),\n\t\n\t    \t\ttangents = [],\n\t    \t\tnormals = [],\n\t    \t\tbinormals = [],\n\t\n\t    \t\tvec = new Vector3(),\n\t    \t\tmat = new Matrix4(),\n\t\n\t    \t\tnumpoints = segments + 1,\n\t    \t\ttheta,\n\t    \t\tsmallest,\n\t\n\t    \t\ttx, ty, tz,\n\t    \t\ti, u;\n\t\n\t\n\t    \t// expose internals\n\t    \tthis.tangents = tangents;\n\t    \tthis.normals = normals;\n\t    \tthis.binormals = binormals;\n\t\n\t    \t// compute the tangent vectors for each segment on the path\n\t\n\t    \tfor ( i = 0; i < numpoints; i ++ ) {\n\t\n\t    \t\tu = i / ( numpoints - 1 );\n\t\n\t    \t\ttangents[ i ] = path.getTangentAt( u );\n\t    \t\ttangents[ i ].normalize();\n\t\n\t    \t}\n\t\n\t    \tinitialNormal3();\n\t\n\t    \t/*\n\t    \tfunction initialNormal1(lastBinormal) {\n\t    \t\t// fixed start binormal. Has dangers of 0 vectors\n\t    \t\tnormals[ 0 ] = new THREE.Vector3();\n\t    \t\tbinormals[ 0 ] = new THREE.Vector3();\n\t    \t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n\t    \t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n\t    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t    \t}\n\t\n\t    \tfunction initialNormal2() {\n\t\n\t    \t\t// This uses the Frenet-Serret formula for deriving binormal\n\t    \t\tvar t2 = path.getTangentAt( epsilon );\n\t\n\t    \t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n\t    \t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\t\n\t    \t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n\t    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t\n\t    \t}\n\t    \t*/\n\t\n\t    \tfunction initialNormal3() {\n\t\n\t    \t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t    \t\t// and in the direction of the smallest tangent xyz component\n\t\n\t    \t\tnormals[ 0 ] = new Vector3();\n\t    \t\tbinormals[ 0 ] = new Vector3();\n\t    \t\tsmallest = Number.MAX_VALUE;\n\t    \t\ttx = Math.abs( tangents[ 0 ].x );\n\t    \t\tty = Math.abs( tangents[ 0 ].y );\n\t    \t\ttz = Math.abs( tangents[ 0 ].z );\n\t\n\t    \t\tif ( tx <= smallest ) {\n\t\n\t    \t\t\tsmallest = tx;\n\t    \t\t\tnormal.set( 1, 0, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( ty <= smallest ) {\n\t\n\t    \t\t\tsmallest = ty;\n\t    \t\t\tnormal.set( 0, 1, 0 );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( tz <= smallest ) {\n\t\n\t    \t\t\tnormal.set( 0, 0, 1 );\n\t\n\t    \t\t}\n\t\n\t    \t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\t\n\t    \t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\t\n\t    \t}\n\t\n\t\n\t    \t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\t\n\t    \tfor ( i = 1; i < numpoints; i ++ ) {\n\t\n\t    \t\tnormals[ i ] = normals[ i - 1 ].clone();\n\t\n\t    \t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\t\n\t    \t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\t\n\t    \t\tif ( vec.length() > Number.EPSILON ) {\n\t\n\t    \t\t\tvec.normalize();\n\t\n\t    \t\t\ttheta = Math.acos( exports.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\t\n\t    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\t\n\t    \t}\n\t\n\t\n\t    \t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\t\n\t    \tif ( closed ) {\n\t\n\t    \t\ttheta = Math.acos( exports.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n\t    \t\ttheta /= ( numpoints - 1 );\n\t\n\t    \t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\t\n\t    \t\t\ttheta = - theta;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( i = 1; i < numpoints; i ++ ) {\n\t\n\t    \t\t\t// twist a little...\n\t    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t    \t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     *\n\t     * see: http://www.blackpawn.com/texts/pqtorus/\n\t     */\n\t    function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusKnotBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\tp: p,\n\t    \t\tq: q\n\t    \t};\n\t\n\t    \tradius = radius || 100;\n\t    \ttube = tube || 40;\n\t    \ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t    \tradialSegments = Math.floor( radialSegments ) || 8;\n\t    \tp = p || 2;\n\t    \tq = q || 3;\n\t\n\t    \t// used to calculate buffer length\n\t    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// helper variables\n\t    \tvar i, j, index = 0, indexOffset = 0;\n\t\n\t    \tvar vertex = new Vector3();\n\t    \tvar normal = new Vector3();\n\t    \tvar uv = new Vector2();\n\t\n\t    \tvar P1 = new Vector3();\n\t    \tvar P2 = new Vector3();\n\t\n\t    \tvar B = new Vector3();\n\t    \tvar T = new Vector3();\n\t    \tvar N = new Vector3();\n\t\n\t    \t// generate vertices, normals and uvs\n\t\n\t    \tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\t\n\t    \t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\n\t    \t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\t\n\t    \t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t    \t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\t\n\t    \t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t    \t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\t\n\t    \t\t// calculate orthonormal basis\n\t\n\t    \t\tT.subVectors( P2, P1 );\n\t    \t\tN.addVectors( P2, P1 );\n\t    \t\tB.crossVectors( T, N );\n\t    \t\tN.crossVectors( B, T );\n\t\n\t    \t\t// normalize B, N. T can be ignored, we don't use it\n\t\n\t    \t\tB.normalize();\n\t    \t\tN.normalize();\n\t\n\t    \t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\t\n\t    \t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t    \t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\n\t    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t    \t\t\tvar cx = - tube * Math.cos( v );\n\t    \t\t\tvar cy = tube * Math.sin( v );\n\t\n\t    \t\t\t// now calculate the final vertex position.\n\t    \t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\t\n\t    \t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t    \t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t    \t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\t    \t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\t    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = i / tubularSegments;\n\t    \t\t\tuv.y = j / radialSegments;\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t    \t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t    \t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t    \t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \t// this function calculates the current position on the torus curve\n\t\n\t    \tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\t\n\t    \t\tvar cu = Math.cos( u );\n\t    \t\tvar su = Math.sin( u );\n\t    \t\tvar quOverP = q / p * u;\n\t    \t\tvar cs = Math.cos( quOverP );\n\t\n\t    \t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t    \t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t    \t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\t\n\t    /**\n\t     * @author oosmoxiecode\n\t     */\n\t\n\t    function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusKnotGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\tp: p,\n\t    \t\tq: q\n\t    \t};\n\t\n\t    \tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\t\n\t    \tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    TorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\t    TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tarc: arc\n\t    \t};\n\t\n\t    \tradius = radius || 100;\n\t    \ttube = tube || 40;\n\t    \tradialSegments = Math.floor( radialSegments ) || 8;\n\t    \ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t    \tarc = arc || Math.PI * 2;\n\t\n\t    \t// used to calculate buffer length\n\t    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t    \tvar vertices = new Float32Array( vertexCount * 3 );\n\t    \tvar normals = new Float32Array( vertexCount * 3 );\n\t    \tvar uvs = new Float32Array( vertexCount * 2 );\n\t\n\t    \t// offset variables\n\t    \tvar vertexBufferOffset = 0;\n\t    \tvar uvBufferOffset = 0;\n\t    \tvar indexBufferOffset = 0;\n\t\n\t    \t// helper variables\n\t    \tvar center = new Vector3();\n\t    \tvar vertex = new Vector3();\n\t    \tvar normal = new Vector3();\n\t\n\t    \tvar j, i;\n\t\n\t    \t// generate vertices, normals and uvs\n\t\n\t    \tfor ( j = 0; j <= radialSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\t\n\t    \t\t\tvar u = i / tubularSegments * arc;\n\t    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t    \t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t    \t\t\tvertex.z = tube * Math.sin( v );\n\t\n\t    \t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n\t    \t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n\t    \t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\t\n\t    \t\t\t// this vector is used to calculate the normal\n\t    \t\t\tcenter.x = radius * Math.cos( u );\n\t    \t\t\tcenter.y = radius * Math.sin( u );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormal.subVectors( vertex, center ).normalize();\n\t\n\t    \t\t\tnormals[ vertexBufferOffset ] = normal.x;\n\t    \t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n\t    \t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n\t    \t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\t\n\t    \t\t\t// update offsets\n\t    \t\t\tvertexBufferOffset += 3;\n\t    \t\t\tuvBufferOffset += 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( j = 1; j <= radialSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t    \t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t    \t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t    \t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices[ indexBufferOffset ] = a;\n\t    \t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t    \t\t\tindices[ indexBufferOffset + 2 ] = d;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t    \t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t    \t\t\tindices[ indexBufferOffset + 5 ] = d;\n\t\n\t    \t\t\t// update offset\n\t    \t\t\tindexBufferOffset += 6;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    }\n\t\n\t    TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\t\n\t    /**\n\t     * @author oosmoxiecode\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n\t     */\n\t\n\t    function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'TorusGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\ttube: tube,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\ttubularSegments: tubularSegments,\n\t    \t\tarc: arc\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\n\t    }\n\t\n\t    TorusGeometry.prototype = Object.create( Geometry.prototype );\n\t    TorusGeometry.prototype.constructor = TorusGeometry;\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     */\n\t\n\t    exports.ShapeUtils = {\n\t\n\t    \t// calculate area of the contour polygon\n\t\n\t    \tarea: function ( contour ) {\n\t\n\t    \t\tvar n = contour.length;\n\t    \t\tvar a = 0.0;\n\t\n\t    \t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\t\n\t    \t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn a * 0.5;\n\t\n\t    \t},\n\t\n\t    \ttriangulate: ( function () {\n\t\n\t    \t\t/**\n\t    \t\t * This code is a quick port of code written in C++ which was submitted to\n\t    \t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t    \t\t * See original code and more information here:\n\t    \t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t    \t\t *\n\t    \t\t * ported to actionscript by Zevan Rosser\n\t    \t\t * www.actionsnippet.com\n\t    \t\t *\n\t    \t\t * ported to javascript by Joshua Koo\n\t    \t\t * http://www.lab4games.net/zz85/blog\n\t    \t\t *\n\t    \t\t */\n\t\n\t    \t\tfunction snip( contour, u, v, w, n, verts ) {\n\t\n\t    \t\t\tvar p;\n\t    \t\t\tvar ax, ay, bx, by;\n\t    \t\t\tvar cx, cy, px, py;\n\t\n\t    \t\t\tax = contour[ verts[ u ] ].x;\n\t    \t\t\tay = contour[ verts[ u ] ].y;\n\t\n\t    \t\t\tbx = contour[ verts[ v ] ].x;\n\t    \t\t\tby = contour[ verts[ v ] ].y;\n\t\n\t    \t\t\tcx = contour[ verts[ w ] ].x;\n\t    \t\t\tcy = contour[ verts[ w ] ].y;\n\t\n\t    \t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\t\n\t    \t\t\tvar aX, aY, bX, bY, cX, cY;\n\t    \t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t    \t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\t\n\t    \t\t\taX = cx - bx;  aY = cy - by;\n\t    \t\t\tbX = ax - cx;  bY = ay - cy;\n\t    \t\t\tcX = bx - ax;  cY = by - ay;\n\t\n\t    \t\t\tfor ( p = 0; p < n; p ++ ) {\n\t\n\t    \t\t\t\tpx = contour[ verts[ p ] ].x;\n\t    \t\t\t\tpy = contour[ verts[ p ] ].y;\n\t\n\t    \t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t    \t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t    \t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\t\n\t    \t\t\t\tapx = px - ax;  apy = py - ay;\n\t    \t\t\t\tbpx = px - bx;  bpy = py - by;\n\t    \t\t\t\tcpx = px - cx;  cpy = py - cy;\n\t\n\t    \t\t\t\t// see if p is inside triangle abc\n\t\n\t    \t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t    \t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t    \t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\t\n\t    \t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn true;\n\t\n\t    \t\t}\n\t\n\t    \t\t// takes in an contour array and returns\n\t\n\t    \t\treturn function triangulate( contour, indices ) {\n\t\n\t    \t\t\tvar n = contour.length;\n\t\n\t    \t\t\tif ( n < 3 ) return null;\n\t\n\t    \t\t\tvar result = [],\n\t    \t\t\t\tverts = [],\n\t    \t\t\t\tvertIndices = [];\n\t\n\t    \t\t\t/* we want a counter-clockwise polygon in verts */\n\t\n\t    \t\t\tvar u, v, w;\n\t\n\t    \t\t\tif ( exports.ShapeUtils.area( contour ) > 0.0 ) {\n\t\n\t    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar nv = n;\n\t\n\t    \t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\t\n\t    \t\t\tvar count = 2 * nv;   /* error detection */\n\t\n\t    \t\t\tfor ( v = nv - 1; nv > 2; ) {\n\t\n\t    \t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\t\n\t    \t\t\t\tif ( ( count -- ) <= 0 ) {\n\t\n\t    \t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\t\n\t    \t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t    \t\t\t\t\t//return null;\n\t    \t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t    \t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\t\n\t    \t\t\t\t\tif ( indices ) return vertIndices;\n\t    \t\t\t\t\treturn result;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\t\n\t    \t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t    \t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t    \t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\t\n\t    \t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\t\n\t    \t\t\t\t\tvar a, b, c, s, t;\n\t\n\t    \t\t\t\t\t/* true names of the vertices */\n\t\n\t    \t\t\t\t\ta = verts[ u ];\n\t    \t\t\t\t\tb = verts[ v ];\n\t    \t\t\t\t\tc = verts[ w ];\n\t\n\t    \t\t\t\t\t/* output Triangle */\n\t\n\t    \t\t\t\t\tresult.push( [ contour[ a ],\n\t    \t\t\t\t\t\tcontour[ b ],\n\t    \t\t\t\t\t\tcontour[ c ] ] );\n\t\n\t\n\t    \t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\t\n\t    \t\t\t\t\t/* remove v from the remaining polygon */\n\t\n\t    \t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\t\n\t    \t\t\t\t\t\tverts[ s ] = verts[ t ];\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tnv --;\n\t\n\t    \t\t\t\t\t/* reset error detection counter */\n\t\n\t    \t\t\t\t\tcount = 2 * nv;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( indices ) return vertIndices;\n\t    \t\t\treturn result;\n\t\n\t    \t\t}\n\t\n\t    \t} )(),\n\t\n\t    \ttriangulateShape: function ( contour, holes ) {\n\t\n\t    \t\tfunction removeDupEndPts(points) {\n\t\n\t    \t\t\tvar l = points.length;\n\t\n\t    \t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\t\n\t    \t\t\t\tpoints.pop();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tremoveDupEndPts( contour );\n\t    \t\tholes.forEach( removeDupEndPts );\n\t\n\t    \t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\t\n\t    \t\t\t// inOtherPt needs to be collinear to the inSegment\n\t    \t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\t\n\t    \t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\t\n\t    \t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t    \t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\t\n\t    \t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t    \t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\t\n\t    \t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t    \t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\t\n\t    \t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\t\n\t    \t\t\t\t// not parallel\n\t\n\t    \t\t\t\tvar perpSeg2;\n\t    \t\t\t\tif ( limit > 0 ) {\n\t\n\t    \t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t    \t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t    \t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// i.e. to reduce rounding errors\n\t    \t\t\t\t// intersection at endpoint of segment#1?\n\t    \t\t\t\tif ( perpSeg2 === 0 ) {\n\t\n\t    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\tif ( perpSeg2 === limit ) {\n\t\n\t    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t    \t\t\t\t\treturn [ inSeg1Pt2 ];\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\t// intersection at endpoint of segment#2?\n\t    \t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t    \t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\t\n\t    \t\t\t\t// return real intersection point\n\t    \t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t    \t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t    \t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// parallel or collinear\n\t    \t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t    \t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\t\n\t    \t\t\t\t// they are collinear or degenerate\n\t    \t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t    \t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t    \t\t\t\t// both segments are points\n\t    \t\t\t\tif ( seg1Pt && seg2Pt ) {\n\t\n\t    \t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t    \t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t    \t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\t// segment#1  is a single point\n\t    \t\t\t\tif ( seg1Pt ) {\n\t\n\t    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\t// segment#2  is a single point\n\t    \t\t\t\tif ( seg2Pt ) {\n\t\n\t    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t    \t\t\t\t\treturn [ inSeg2Pt1 ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// they are collinear segments, which might overlap\n\t    \t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t    \t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t    \t\t\t\tif ( seg1dx !== 0 ) {\n\t\n\t    \t\t\t\t\t// the segments are NOT on a vertical line\n\t    \t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// the segments are on a vertical line\n\t    \t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\t\n\t    \t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t    \t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\t\n\t    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t    \t\t\t\t\t\treturn [ seg2min ];\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t    \t\t\t\t\treturn\t[ seg2min, seg2max ];\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t    \t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\t\n\t    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t    \t\t\t\t\t\treturn [ seg1min ];\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t    \t\t\t\t\treturn\t[ seg1min, seg2max ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\t\n\t    \t\t\t// The order of legs is important\n\t\n\t    \t\t\t// translation of all points, so that Vertex is at (0,0)\n\t    \t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t    \t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t    \t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\t\n\t    \t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t    \t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t    \t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\t\n\t    \t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\t\n\t    \t\t\t\t// angle != 180 deg.\n\t\n\t    \t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t    \t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\t\n\t    \t\t\t\tif ( from2toAngle > 0 ) {\n\t\n\t    \t\t\t\t\t// main angle < 180 deg.\n\t    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// main angle > 180 deg.\n\t    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// angle == 180 deg.\n\t    \t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t    \t\t\t\treturn\t( from2otherAngle > 0 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\tfunction removeHoles( contour, holes ) {\n\t\n\t    \t\t\tvar shape = contour.concat(); // work on this shape\n\t    \t\t\tvar hole;\n\t\n\t    \t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\t\n\t    \t\t\t\t// Check if hole point lies within angle around shape point\n\t    \t\t\t\tvar lastShapeIdx = shape.length - 1;\n\t\n\t    \t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t    \t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\t\n\t    \t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t    \t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\t\n\t    \t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t    \t\t\t\tif ( ! insideAngle ) {\n\t\n\t    \t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t    \t\t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// Check if shape point lies within angle around hole point\n\t    \t\t\t\tvar lastHoleIdx = hole.length - 1;\n\t\n\t    \t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t    \t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\t\n\t    \t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t    \t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\t\n\t    \t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t    \t\t\t\tif ( ! insideAngle ) {\n\t\n\t    \t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t    \t\t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn\ttrue;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\t\n\t    \t\t\t\t// checks for intersections with shape edges\n\t    \t\t\t\tvar sIdx, nextIdx, intersection;\n\t    \t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\t\n\t    \t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t    \t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t    \t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar indepHoles = [];\n\t\n\t    \t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\t\n\t    \t\t\t\t// checks for intersections with hole edges\n\t    \t\t\t\tvar ihIdx, chkHole,\n\t    \t\t\t\t\thIdx, nextIdx, intersection;\n\t    \t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\t\n\t    \t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t    \t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\t\n\t    \t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t    \t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t    \t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t    \t\t\t\treturn\tfalse;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar holeIndex, shapeIndex,\n\t    \t\t\t\tshapePt, holePt,\n\t    \t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t    \t\t\t\ttmpShape1, tmpShape2,\n\t    \t\t\t\ttmpHole1, tmpHole2;\n\t\n\t    \t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\t\tindepHoles.push( h );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar minShapeIndex = 0;\n\t    \t\t\tvar counter = indepHoles.length * 2;\n\t    \t\t\twhile ( indepHoles.length > 0 ) {\n\t\n\t    \t\t\t\tcounter --;\n\t    \t\t\t\tif ( counter < 0 ) {\n\t\n\t    \t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// search for shape-vertex and hole-vertex,\n\t    \t\t\t\t// which can be connected without intersections\n\t    \t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\t\n\t    \t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t    \t\t\t\t\tholeIndex\t= - 1;\n\t\n\t    \t\t\t\t\t// search for hole which can be reached without intersections\n\t    \t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\t\n\t    \t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\t\n\t    \t\t\t\t\t\t// prevent multiple checks\n\t    \t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t    \t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\t\n\t    \t\t\t\t\t\thole = holes[ holeIdx ];\n\t    \t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\t\n\t    \t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t    \t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t    \t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t    \t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\t\n\t    \t\t\t\t\t\t\tholeIndex = h2;\n\t    \t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\t\n\t    \t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t    \t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t    \t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t    \t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\t\n\t    \t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\t\n\t    \t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\t\n\t    \t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t    \t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t}\n\t    \t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\t\n\t    \t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn shape; \t\t\t/* shape with no holes */\n\t\n\t    \t\t}\n\t\n\t\n\t    \t\tvar i, il, f, face,\n\t    \t\t\tkey, index,\n\t    \t\t\tallPointsMap = {};\n\t\n\t    \t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\t\n\t    \t\tvar allpoints = contour.concat();\n\t\n\t    \t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\t\n\t    \t\t}\n\t\n\t    \t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\t\n\t    \t\t// prepare all points map\n\t\n\t    \t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\t\n\t    \t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\t\n\t    \t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tallPointsMap[ key ] = i;\n\t\n\t    \t\t}\n\t\n\t    \t\t// remove holes by cutting paths to holes and adding them to the shape\n\t    \t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\t\n\t    \t\tvar triangles = exports.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t    \t\t//console.log( \"triangles\",triangles, triangles.length );\n\t\n\t    \t\t// check all face vertices against all points map\n\t\n\t    \t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\t\n\t    \t\t\tface = triangles[ i ];\n\t\n\t    \t\t\tfor ( f = 0; f < 3; f ++ ) {\n\t\n\t    \t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\t\n\t    \t\t\t\tindex = allPointsMap[ key ];\n\t\n\t    \t\t\t\tif ( index !== undefined ) {\n\t\n\t    \t\t\t\t\tface[ f ] = index;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn triangles.concat();\n\t\n\t    \t},\n\t\n\t    \tisClockWise: function ( pts ) {\n\t\n\t    \t\treturn exports.ShapeUtils.area( pts ) < 0;\n\t\n\t    \t},\n\t\n\t    \t// Bezier Curves formulas obtained from\n\t    \t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\t\n\t    \t// Quad Bezier Functions\n\t\n\t    \tb2: ( function () {\n\t\n\t    \t\tfunction b2p0( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn k * k * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b2p1( t, p ) {\n\t\n\t    \t\t\treturn 2 * ( 1 - t ) * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b2p2( t, p ) {\n\t\n\t    \t\t\treturn t * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function b2( t, p0, p1, p2 ) {\n\t\n\t    \t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\t\n\t    \t\t};\n\t\n\t    \t} )(),\n\t\n\t    \t// Cubic Bezier Functions\n\t\n\t    \tb3: ( function () {\n\t\n\t    \t\tfunction b3p0( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn k * k * k * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b3p1( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn 3 * k * k * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b3p2( t, p ) {\n\t\n\t    \t\t\tvar k = 1 - t;\n\t    \t\t\treturn 3 * k * t * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction b3p3( t, p ) {\n\t\n\t    \t\t\treturn t * t * t * p;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn function b3( t, p0, p1, p2, p3 ) {\n\t\n\t    \t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     *\n\t     * Creates extruded geometry from a path shape.\n\t     *\n\t     * parameters = {\n\t     *\n\t     *  curveSegments: <int>, // number of points on the curves\n\t     *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t     *  amount: <int>, // Depth to extrude the shape\n\t     *\n\t     *  bevelEnabled: <bool>, // turn on bevel\n\t     *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t     *  bevelSize: <float>, // how far from shape outline is bevel\n\t     *  bevelSegments: <int>, // number of bevel layers\n\t     *\n\t     *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n\t     *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n\t     *\n\t     *  uvGenerator: <Object> // object that provides UV generator functions\n\t     *\n\t     * }\n\t     **/\n\t\n\t    function ExtrudeGeometry( shapes, options ) {\n\t\n\t    \tif ( typeof( shapes ) === \"undefined\" ) {\n\t\n\t    \t\tshapes = [];\n\t    \t\treturn;\n\t\n\t    \t}\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'ExtrudeGeometry';\n\t\n\t    \tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\t\n\t    \tthis.addShapeList( shapes, options );\n\t\n\t    \tthis.computeFaceNormals();\n\t\n\t    \t// can't really use automatic vertex normals\n\t    \t// as then front and back sides get smoothed too\n\t    \t// should do separate smoothing just for sides\n\t\n\t    \t//this.computeVertexNormals();\n\t\n\t    \t//console.log( \"took\", ( Date.now() - startTime ) );\n\t\n\t    }\n\t\n\t    ExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\t    ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\t\n\t    ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\t\n\t    \tvar sl = shapes.length;\n\t\n\t    \tfor ( var s = 0; s < sl; s ++ ) {\n\t\n\t    \t\tvar shape = shapes[ s ];\n\t    \t\tthis.addShape( shape, options );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\t\n\t    \tvar amount = options.amount !== undefined ? options.amount : 100;\n\t\n\t    \tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\t    \tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\t    \tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\n\t    \tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\t\n\t    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\n\t    \tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\n\t    \tvar extrudePath = options.extrudePath;\n\t    \tvar extrudePts, extrudeByPath = false;\n\t\n\t    \t// Use default WorldUVGenerator if no UV generators are specified.\n\t    \tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\t\n\t    \tvar splineTube, binormal, normal, position2;\n\t    \tif ( extrudePath ) {\n\t\n\t    \t\textrudePts = extrudePath.getSpacedPoints( steps );\n\t\n\t    \t\textrudeByPath = true;\n\t    \t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\n\t    \t\t// SETUP TNB variables\n\t\n\t    \t\t// Reuse TNB from TubeGeomtry for now.\n\t    \t\t// TODO1 - have a .isClosed in spline?\n\t\n\t    \t\tsplineTube = options.frames !== undefined ? options.frames : new TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\t\n\t    \t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\t\n\t    \t\tbinormal = new Vector3();\n\t    \t\tnormal = new Vector3();\n\t    \t\tposition2 = new Vector3();\n\t\n\t    \t}\n\t\n\t    \t// Safeguards if bevels are not enabled\n\t\n\t    \tif ( ! bevelEnabled ) {\n\t\n\t    \t\tbevelSegments = 0;\n\t    \t\tbevelThickness = 0;\n\t    \t\tbevelSize = 0;\n\t\n\t    \t}\n\t\n\t    \t// Variables initialization\n\t\n\t    \tvar ahole, h, hl; // looping of holes\n\t    \tvar scope = this;\n\t\n\t    \tvar shapesOffset = this.vertices.length;\n\t\n\t    \tvar shapePoints = shape.extractPoints( curveSegments );\n\t\n\t    \tvar vertices = shapePoints.shape;\n\t    \tvar holes = shapePoints.holes;\n\t\n\t    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\t\n\t    \tif ( reverse ) {\n\t\n\t    \t\tvertices = vertices.reverse();\n\t\n\t    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t\n\t    \t\t\tif ( exports.ShapeUtils.isClockWise( ahole ) ) {\n\t\n\t    \t\t\t\tholes[ h ] = ahole.reverse();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\t\n\t    \t}\n\t\n\t\n\t    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\t\n\t    \t/* Vertices */\n\t\n\t    \tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\t\n\t    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\tahole = holes[ h ];\n\t\n\t    \t\tvertices = vertices.concat( ahole );\n\t\n\t    \t}\n\t\n\t\n\t    \tfunction scalePt2( pt, vec, size ) {\n\t\n\t    \t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\t\n\t    \t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\t\n\t    \t}\n\t\n\t    \tvar b, bs, t, z,\n\t    \t\tvert, vlen = vertices.length,\n\t    \t\tface, flen = faces.length;\n\t\n\t\n\t    \t// Find directions for point movement\n\t\n\t\n\t    \tfunction getBevelVec( inPt, inPrev, inNext ) {\n\t\n\t    \t\t// computes for inPt the corresponding point inPt' on a new contour\n\t    \t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t    \t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t    \t\t//\n\t    \t\t// inPt' is the intersection of the two lines parallel to the two\n\t    \t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\t\n\t    \t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\t\n\t    \t\t// good reading for geometry algorithms (here: line-line intersection)\n\t    \t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\t\n\t    \t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n\t    \t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\t\n\t    \t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\t\n\t    \t\t// check for collinear edges\n\t    \t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\t\n\t    \t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\t\n\t    \t\t\t// not collinear\n\t\n\t    \t\t\t// length of vectors for normalizing\n\t\n\t    \t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t    \t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\t\n\t    \t\t\t// shift adjacent points by unit vectors to the left\n\t\n\t    \t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t    \t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\t\n\t    \t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t    \t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\t\n\t    \t\t\t// scaling factor for v_prev to intersection point\n\t\n\t    \t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t    \t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n\t    \t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\t\n\t    \t\t\t// vector from inPt to intersection point\n\t\n\t    \t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t    \t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\t\n\t    \t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t    \t\t\t//  but prevent crazy spikes\n\t    \t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t    \t\t\tif ( v_trans_lensq <= 2 ) {\n\t\n\t    \t\t\t\treturn\tnew Vector2( v_trans_x, v_trans_y );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// handle special case of collinear edges\n\t\n\t    \t\t\tvar direction_eq = false;\t\t// assumes: opposite\n\t    \t\t\tif ( v_prev_x > Number.EPSILON ) {\n\t\n\t    \t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\t\n\t    \t\t\t\t\tdirection_eq = true;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\t\n\t    \t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\t\n\t    \t\t\t\t\t\tdirection_eq = true;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\t\n\t    \t\t\t\t\t\tdirection_eq = true;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( direction_eq ) {\n\t\n\t    \t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t    \t\t\t\tv_trans_x = - v_prev_y;\n\t    \t\t\t\tv_trans_y =  v_prev_x;\n\t    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t    \t\t\t\tv_trans_x = v_prev_x;\n\t    \t\t\t\tv_trans_y = v_prev_y;\n\t    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn\tnew Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\t\n\t    \t}\n\t\n\t\n\t    \tvar contourMovements = [];\n\t\n\t    \tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\t\n\t    \t\tif ( j === il ) j = 0;\n\t    \t\tif ( k === il ) k = 0;\n\t\n\t    \t\t//  (j)---(i)---(k)\n\t    \t\t// console.log('i,j,k', i, j , k)\n\t\n\t    \t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\t\n\t    \t}\n\t\n\t    \tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\t\n\t    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\tahole = holes[ h ];\n\t\n\t    \t\toneHoleMovements = [];\n\t\n\t    \t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\t\n\t    \t\t\tif ( j === il ) j = 0;\n\t    \t\t\tif ( k === il ) k = 0;\n\t\n\t    \t\t\t//  (j)---(i)---(k)\n\t    \t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\t\n\t    \t\t}\n\t\n\t    \t\tholesMovements.push( oneHoleMovements );\n\t    \t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\t\n\t    \t}\n\t\n\t\n\t    \t// Loop bevelSegments, 1 for the front, 1 for the back\n\t\n\t    \tfor ( b = 0; b < bevelSegments; b ++ ) {\n\t\n\t    \t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\n\t    \t\tt = b / bevelSegments;\n\t    \t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\t\n\t    \t\t// contract shape\n\t\n\t    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\n\t    \t\t\tv( vert.x, vert.y,  - z );\n\t\n\t    \t\t}\n\t\n\t    \t\t// expand holes\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t    \t\t\toneHoleMovements = holesMovements[ h ];\n\t\n\t    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\t\n\t    \t\t\t\tv( vert.x, vert.y,  - z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tbs = bevelSize;\n\t\n\t    \t// Back facing vertices\n\t\n\t    \tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t    \t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\t\n\t    \t\tif ( ! extrudeByPath ) {\n\t\n\t    \t\t\tv( vert.x, vert.y, 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\n\t    \t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t    \t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\t\n\t    \t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\t\n\t    \t\t\tv( position2.x, position2.y, position2.z );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Add stepped vertices...\n\t    \t// Including front facing vertices\n\t\n\t    \tvar s;\n\t\n\t    \tfor ( s = 1; s <= steps; s ++ ) {\n\t\n\t    \t\tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t    \t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\t\n\t    \t\t\tif ( ! extrudeByPath ) {\n\t\n\t    \t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\n\t    \t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t    \t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\t\n\t    \t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\t\n\t    \t\t\t\tv( position2.x, position2.y, position2.z );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \t// Add bevel segments planes\n\t\n\t    \t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t    \tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\t\n\t    \t\tt = b / bevelSegments;\n\t    \t\tz = bevelThickness * Math.cos ( t * Math.PI / 2 );\n\t    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\t\n\t    \t\t// contract shape\n\t\n\t    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t    \t\t\tv( vert.x, vert.y,  amount + z );\n\t\n\t    \t\t}\n\t\n\t    \t\t// expand holes\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t    \t\t\toneHoleMovements = holesMovements[ h ];\n\t\n\t    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\t\n\t    \t\t\t\tif ( ! extrudeByPath ) {\n\t\n\t    \t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t/* Faces */\n\t\n\t    \t// Top and bottom faces\n\t\n\t    \tbuildLidFaces();\n\t\n\t    \t// Sides faces\n\t\n\t    \tbuildSideFaces();\n\t\n\t\n\t    \t/////  Internal functions\n\t\n\t    \tfunction buildLidFaces() {\n\t\n\t    \t\tif ( bevelEnabled ) {\n\t\n\t    \t\t\tvar layer = 0; // steps + 1\n\t    \t\t\tvar offset = vlen * layer;\n\t\n\t    \t\t\t// Bottom faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tlayer = steps + bevelSegments * 2;\n\t    \t\t\toffset = vlen * layer;\n\t\n\t    \t\t\t// Top faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// Bottom faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// Top faces\n\t\n\t    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\t\t\tface = faces[ i ];\n\t    \t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// Create faces for the z-sides of the shape\n\t\n\t    \tfunction buildSideFaces() {\n\t\n\t    \t\tvar layeroffset = 0;\n\t    \t\tsidewalls( contour, layeroffset );\n\t    \t\tlayeroffset += contour.length;\n\t\n\t    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t    \t\t\tahole = holes[ h ];\n\t    \t\t\tsidewalls( ahole, layeroffset );\n\t\n\t    \t\t\t//, true\n\t    \t\t\tlayeroffset += ahole.length;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tfunction sidewalls( contour, layeroffset ) {\n\t\n\t    \t\tvar j, k;\n\t    \t\ti = contour.length;\n\t\n\t    \t\twhile ( -- i >= 0 ) {\n\t\n\t    \t\t\tj = i;\n\t    \t\t\tk = i - 1;\n\t    \t\t\tif ( k < 0 ) k = contour.length - 1;\n\t\n\t    \t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\t\n\t    \t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\t\n\t    \t\t\tfor ( s = 0; s < sl; s ++ ) {\n\t\n\t    \t\t\t\tvar slen1 = vlen * s;\n\t    \t\t\t\tvar slen2 = vlen * ( s + 1 );\n\t\n\t    \t\t\t\tvar a = layeroffset + j + slen1,\n\t    \t\t\t\t\tb = layeroffset + k + slen1,\n\t    \t\t\t\t\tc = layeroffset + k + slen2,\n\t    \t\t\t\t\td = layeroffset + j + slen2;\n\t\n\t    \t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t\n\t    \tfunction v( x, y, z ) {\n\t\n\t    \t\tscope.vertices.push( new Vector3( x, y, z ) );\n\t\n\t    \t}\n\t\n\t    \tfunction f3( a, b, c ) {\n\t\n\t    \t\ta += shapesOffset;\n\t    \t\tb += shapesOffset;\n\t    \t\tc += shapesOffset;\n\t\n\t    \t\tscope.faces.push( new Face3( a, b, c, null, null, 0 ) );\n\t\n\t    \t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\t\n\t    \t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\t\n\t    \t}\n\t\n\t    \tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\t\n\t    \t\ta += shapesOffset;\n\t    \t\tb += shapesOffset;\n\t    \t\tc += shapesOffset;\n\t    \t\td += shapesOffset;\n\t\n\t    \t\tscope.faces.push( new Face3( a, b, d, null, null, 1 ) );\n\t    \t\tscope.faces.push( new Face3( b, c, d, null, null, 1 ) );\n\t\n\t    \t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\t\n\t    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n\t    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    ExtrudeGeometry.WorldUVGenerator = {\n\t\n\t    \tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\t\n\t    \t\tvar vertices = geometry.vertices;\n\t\n\t    \t\tvar a = vertices[ indexA ];\n\t    \t\tvar b = vertices[ indexB ];\n\t    \t\tvar c = vertices[ indexC ];\n\t\n\t    \t\treturn [\n\t    \t\t\tnew Vector2( a.x, a.y ),\n\t    \t\t\tnew Vector2( b.x, b.y ),\n\t    \t\t\tnew Vector2( c.x, c.y )\n\t    \t\t];\n\t\n\t    \t},\n\t\n\t    \tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\t\n\t    \t\tvar vertices = geometry.vertices;\n\t\n\t    \t\tvar a = vertices[ indexA ];\n\t    \t\tvar b = vertices[ indexB ];\n\t    \t\tvar c = vertices[ indexC ];\n\t    \t\tvar d = vertices[ indexD ];\n\t\n\t    \t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\t\n\t    \t\t\treturn [\n\t    \t\t\t\tnew Vector2( a.x, 1 - a.z ),\n\t    \t\t\t\tnew Vector2( b.x, 1 - b.z ),\n\t    \t\t\t\tnew Vector2( c.x, 1 - c.z ),\n\t    \t\t\t\tnew Vector2( d.x, 1 - d.z )\n\t    \t\t\t];\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\treturn [\n\t    \t\t\t\tnew Vector2( a.y, 1 - a.z ),\n\t    \t\t\t\tnew Vector2( b.y, 1 - b.z ),\n\t    \t\t\t\tnew Vector2( c.y, 1 - c.z ),\n\t    \t\t\t\tnew Vector2( d.y, 1 - d.z )\n\t    \t\t\t];\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * Text = 3D Text\n\t     *\n\t     * parameters = {\n\t     *  font: <THREE.Font>, // font\n\t     *\n\t     *  size: <float>, // size of the text\n\t     *  height: <float>, // thickness to extrude text\n\t     *  curveSegments: <int>, // number of points on the curves\n\t     *\n\t     *  bevelEnabled: <bool>, // turn on bevel\n\t     *  bevelThickness: <float>, // how deep into text bevel goes\n\t     *  bevelSize: <float> // how far from text outline is bevel\n\t     * }\n\t     */\n\t\n\t    function TextGeometry( text, parameters ) {\n\t\n\t    \tparameters = parameters || {};\n\t\n\t    \tvar font = parameters.font;\n\t\n\t    \tif ( (font && font.isFont) === false ) {\n\t\n\t    \t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t    \t\treturn new Geometry();\n\t\n\t    \t}\n\t\n\t    \tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\t\n\t    \t// translate parameters to ExtrudeGeometry API\n\t\n\t    \tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\t\n\t    \t// defaults\n\t\n\t    \tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t    \tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t    \tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\t\n\t    \tExtrudeGeometry.call( this, shapes, parameters );\n\t\n\t    \tthis.type = 'TextGeometry';\n\t\n\t    }\n\t\n\t    TextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );\n\t    TextGeometry.prototype.constructor = TextGeometry;\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     * based on THREE.SphereGeometry\n\t     */\n\t\n\t    function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'SphereBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tradius = radius || 50;\n\t\n\t    \twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t    \theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\t\n\t    \tphiStart = phiStart !== undefined ? phiStart : 0;\n\t    \tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\t\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\t\n\t    \tvar thetaEnd = thetaStart + thetaLength;\n\t\n\t    \tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\t\n\t    \tvar positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \tvar index = 0, vertices = [], normal = new Vector3();\n\t\n\t    \tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\t\n\t    \t\tvar verticesRow = [];\n\t\n\t    \t\tvar v = y / heightSegments;\n\t\n\t    \t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\t\n\t    \t\t\tvar u = x / widthSegments;\n\t\n\t    \t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t    \t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n\t    \t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\n\t    \t\t\tnormal.set( px, py, pz ).normalize();\n\t\n\t    \t\t\tpositions.setXYZ( index, px, py, pz );\n\t    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t    \t\t\tuvs.setXY( index, u, 1 - v );\n\t\n\t    \t\t\tverticesRow.push( index );\n\t\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t\tvertices.push( verticesRow );\n\t\n\t    \t}\n\t\n\t    \tvar indices = [];\n\t\n\t    \tfor ( var y = 0; y < heightSegments; y ++ ) {\n\t\n\t    \t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\t\n\t    \t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t    \t\t\tvar v2 = vertices[ y ][ x ];\n\t    \t\t\tvar v3 = vertices[ y + 1 ][ x ];\n\t    \t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\t\n\t    \t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n\t    \t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n\t    \tthis.addAttribute( 'position', positions );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t    }\n\t\n\t    SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'SphereGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\n\t    }\n\t\n\t    SphereGeometry.prototype = Object.create( Geometry.prototype );\n\t    SphereGeometry.prototype.constructor = SphereGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'RingBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tinnerRadius: innerRadius,\n\t    \t\touterRadius: outerRadius,\n\t    \t\tthetaSegments: thetaSegments,\n\t    \t\tphiSegments: phiSegments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tinnerRadius = innerRadius || 20;\n\t    \touterRadius = outerRadius || 50;\n\t\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\t\n\t    \tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t    \tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\t\n\t    \t// these are used to calculate buffer length\n\t    \tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n\t    \tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// some helper variables\n\t    \tvar index = 0, indexOffset = 0, segment;\n\t    \tvar radius = innerRadius;\n\t    \tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t    \tvar vertex = new Vector3();\n\t    \tvar uv = new Vector2();\n\t    \tvar j, i;\n\t\n\t    \t// generate vertices, normals and uvs\n\t\n\t    \t// values are generate from the inside of the ring to the outside\n\t\n\t    \tfor ( j = 0; j <= phiSegments; j ++ ) {\n\t\n\t    \t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\t\n\t    \t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = radius * Math.cos( segment );\n\t    \t\t\tvertex.y = radius * Math.sin( segment );\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t    \t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex++;\n\t\n\t    \t\t}\n\t\n\t    \t\t// increase the radius for next row of vertices\n\t    \t\tradius += radiusStep;\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( j = 0; j < phiSegments; j ++ ) {\n\t\n\t    \t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\t\n\t    \t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\t\n\t    \t\t\tsegment = i + thetaSegmentLevel;\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = segment;\n\t    \t\t\tvar b = segment + thetaSegments + 1;\n\t    \t\t\tvar c = segment + thetaSegments + 2;\n\t    \t\t\tvar d = segment + 1;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    }\n\t\n\t    RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    RingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\t\n\t    /**\n\t     * @author Kaleb Murphy\n\t     */\n\t\n\t    function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'RingGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tinnerRadius: innerRadius,\n\t    \t\touterRadius: outerRadius,\n\t    \t\tthetaSegments: thetaSegments,\n\t    \t\tphiSegments: phiSegments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\n\t    }\n\t\n\t    RingGeometry.prototype = Object.create( Geometry.prototype );\n\t    RingGeometry.prototype.constructor = RingGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t     */\n\t\n\t    function PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'PlaneGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\n\t    }\n\t\n\t    PlaneGeometry.prototype = Object.create( Geometry.prototype );\n\t    PlaneGeometry.prototype.constructor = PlaneGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t     // points - to create a closed torus, one must use a set of points\n\t     //    like so: [ a, b, c, d, a ], see first is the same as last.\n\t     // segments - the number of circumference segments to create\n\t     // phiStart - the starting radian\n\t     // phiLength - the radian (0 to 2PI) range of the lathed section\n\t     //    2PI is a closed lathe, less than 2PI is a portion.\n\t\n\t    function LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'LatheBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tpoints: points,\n\t    \t\tsegments: segments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength\n\t    \t};\n\t\n\t    \tsegments = Math.floor( segments ) || 12;\n\t    \tphiStart = phiStart || 0;\n\t    \tphiLength = phiLength || Math.PI * 2;\n\t\n\t    \t// clamp phiLength so it's in range of [ 0, 2PI ]\n\t    \tphiLength = exports.Math.clamp( phiLength, 0, Math.PI * 2 );\n\t\n\t    \t// these are used to calculate buffer length\n\t    \tvar vertexCount = ( segments + 1 ) * points.length;\n\t    \tvar indexCount = segments * points.length * 2 * 3;\n\t\n\t    \t// buffers\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// helper variables\n\t    \tvar index = 0, indexOffset = 0, base;\n\t    \tvar inverseSegments = 1.0 / segments;\n\t    \tvar vertex = new Vector3();\n\t    \tvar uv = new Vector2();\n\t    \tvar i, j;\n\t\n\t    \t// generate vertices and uvs\n\t\n\t    \tfor ( i = 0; i <= segments; i ++ ) {\n\t\n\t    \t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\t\n\t    \t\tvar sin = Math.sin( phi );\n\t    \t\tvar cos = Math.cos( phi );\n\t\n\t    \t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = points[ j ].x * sin;\n\t    \t\t\tvertex.y = points[ j ].y;\n\t    \t\t\tvertex.z = points[ j ].x * cos;\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = i / segments;\n\t    \t\t\tuv.y = j / ( points.length - 1 );\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// generate indices\n\t\n\t    \tfor ( i = 0; i < segments; i ++ ) {\n\t\n\t    \t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\t\n\t    \t\t\tbase = j + i * points.length;\n\t\n\t    \t\t\t// indices\n\t    \t\t\tvar a = base;\n\t    \t\t\tvar b = base + points.length;\n\t    \t\t\tvar c = base + points.length + 1;\n\t    \t\t\tvar d = base + 1;\n\t\n\t    \t\t\t// face one\n\t    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t\t// face two\n\t    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \t// generate normals\n\t\n\t    \tthis.computeVertexNormals();\n\t\n\t    \t// if the geometry is closed, we need to average the normals along the seam.\n\t    \t// because the corresponding vertices are identical (but still have different UVs).\n\t\n\t    \tif( phiLength === Math.PI * 2 ) {\n\t\n\t    \t\tvar normals = this.attributes.normal.array;\n\t    \t\tvar n1 = new Vector3();\n\t    \t\tvar n2 = new Vector3();\n\t    \t\tvar n = new Vector3();\n\t\n\t    \t\t// this is the buffer offset for the last line of vertices\n\t    \t\tbase = segments * points.length * 3;\n\t\n\t    \t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\t\n\t    \t\t\t// select the normal of the vertex in the first line\n\t    \t\t\tn1.x = normals[ j + 0 ];\n\t    \t\t\tn1.y = normals[ j + 1 ];\n\t    \t\t\tn1.z = normals[ j + 2 ];\n\t\n\t    \t\t\t// select the normal of the vertex in the last line\n\t    \t\t\tn2.x = normals[ base + j + 0 ];\n\t    \t\t\tn2.y = normals[ base + j + 1 ];\n\t    \t\t\tn2.z = normals[ base + j + 2 ];\n\t\n\t    \t\t\t// average normals\n\t    \t\t\tn.addVectors( n1, n2 ).normalize();\n\t\n\t    \t\t\t// assign the new values to both normals\n\t    \t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t    \t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t    \t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\t\n\t    \t\t} // next row\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\t\n\t    /**\n\t     * @author astrodud / http://astrodud.isgreat.org/\n\t     * @author zz85 / https://github.com/zz85\n\t     * @author bhouston / http://clara.io\n\t     */\n\t\n\t    // points - to create a closed torus, one must use a set of points\n\t    //    like so: [ a, b, c, d, a ], see first is the same as last.\n\t    // segments - the number of circumference segments to create\n\t    // phiStart - the starting radian\n\t    // phiLength - the radian (0 to 2PI) range of the lathed section\n\t    //    2PI is a closed lathe, less than 2PI is a portion.\n\t\n\t    function LatheGeometry( points, segments, phiStart, phiLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'LatheGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tpoints: points,\n\t    \t\tsegments: segments,\n\t    \t\tphiStart: phiStart,\n\t    \t\tphiLength: phiLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    LatheGeometry.prototype = Object.create( Geometry.prototype );\n\t    LatheGeometry.prototype.constructor = LatheGeometry;\n\t\n\t    /**\n\t     * @author jonobr1 / http://jonobr1.com\n\t     *\n\t     * Creates a one-sided polygonal geometry from a path shape. Similar to\n\t     * ExtrudeGeometry.\n\t     *\n\t     * parameters = {\n\t     *\n\t     *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n\t     *\n\t     *\tmaterial: <int> // material index for front and back faces\n\t     *\tuvGenerator: <Object> // object that provides UV generator functions\n\t     *\n\t     * }\n\t     **/\n\t\n\t    function ShapeGeometry( shapes, options ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'ShapeGeometry';\n\t\n\t    \tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\t\n\t    \tthis.addShapeList( shapes, options );\n\t\n\t    \tthis.computeFaceNormals();\n\t\n\t    }\n\t\n\t    ShapeGeometry.prototype = Object.create( Geometry.prototype );\n\t    ShapeGeometry.prototype.constructor = ShapeGeometry;\n\t\n\t    /**\n\t     * Add an array of shapes to THREE.ShapeGeometry.\n\t     */\n\t    ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\t\n\t    \tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\t\n\t    \t\tthis.addShape( shapes[ i ], options );\n\t\n\t    \t}\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n\t     */\n\t    ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\t\n\t    \tif ( options === undefined ) options = {};\n\t    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\n\t    \tvar material = options.material;\n\t    \tvar uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\t\n\t    \t//\n\t\n\t    \tvar i, l, hole;\n\t\n\t    \tvar shapesOffset = this.vertices.length;\n\t    \tvar shapePoints = shape.extractPoints( curveSegments );\n\t\n\t    \tvar vertices = shapePoints.shape;\n\t    \tvar holes = shapePoints.holes;\n\t\n\t    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\t\n\t    \tif ( reverse ) {\n\t\n\t    \t\tvertices = vertices.reverse();\n\t\n\t    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\t\n\t    \t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\t\n\t    \t\t\thole = holes[ i ];\n\t\n\t    \t\t\tif ( exports.ShapeUtils.isClockWise( hole ) ) {\n\t\n\t    \t\t\t\tholes[ i ] = hole.reverse();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treverse = false;\n\t\n\t    \t}\n\t\n\t    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\t\n\t    \t// Vertices\n\t\n\t    \tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\t\n\t    \t\thole = holes[ i ];\n\t    \t\tvertices = vertices.concat( hole );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar vert, vlen = vertices.length;\n\t    \tvar face, flen = faces.length;\n\t\n\t    \tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t    \t\tvert = vertices[ i ];\n\t\n\t    \t\tthis.vertices.push( new Vector3( vert.x, vert.y, 0 ) );\n\t\n\t    \t}\n\t\n\t    \tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t    \t\tface = faces[ i ];\n\t\n\t    \t\tvar a = face[ 0 ] + shapesOffset;\n\t    \t\tvar b = face[ 1 ] + shapesOffset;\n\t    \t\tvar c = face[ 2 ] + shapesOffset;\n\t\n\t    \t\tthis.faces.push( new Face3( a, b, c, null, null, material ) );\n\t    \t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function EdgesGeometry( geometry, thresholdAngle ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\t\n\t    \tvar thresholdDot = Math.cos( exports.Math.DEG2RAD * thresholdAngle );\n\t\n\t    \tvar edge = [ 0, 0 ], hash = {};\n\t\n\t    \tfunction sortFunction( a, b ) {\n\t\n\t    \t\treturn a - b;\n\t\n\t    \t}\n\t\n\t    \tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t    \tvar geometry2;\n\t\n\t    \tif ( (geometry && geometry.isBufferGeometry) ) {\n\t\n\t    \t\tgeometry2 = new Geometry();\n\t    \t\tgeometry2.fromBufferGeometry( geometry );\n\t\n\t    \t} else {\n\t\n\t    \t\tgeometry2 = geometry.clone();\n\t\n\t    \t}\n\t\n\t    \tgeometry2.mergeVertices();\n\t    \tgeometry2.computeFaceNormals();\n\t\n\t    \tvar vertices = geometry2.vertices;\n\t    \tvar faces = geometry2.faces;\n\t\n\t    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\tvar face = faces[ i ];\n\t\n\t    \t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t    \t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t    \t\t\tedge.sort( sortFunction );\n\t\n\t    \t\t\tvar key = edge.toString();\n\t\n\t    \t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t    \t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\thash[ key ].face2 = i;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar coords = [];\n\t\n\t    \tfor ( var key in hash ) {\n\t\n\t    \t\tvar h = hash[ key ];\n\t\n\t    \t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\t\n\t    \t\t\tvar vertex = vertices[ h.vert1 ];\n\t    \t\t\tcoords.push( vertex.x );\n\t    \t\t\tcoords.push( vertex.y );\n\t    \t\t\tcoords.push( vertex.z );\n\t\n\t    \t\t\tvertex = vertices[ h.vert2 ];\n\t    \t\t\tcoords.push( vertex.x );\n\t    \t\t\tcoords.push( vertex.y );\n\t    \t\t\tcoords.push( vertex.z );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tthis.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );\n\t\n\t    }\n\t\n\t    EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    EdgesGeometry.prototype.constructor = EdgesGeometry;\n\t\n\t    /**\n\t     * @author Mugen87 / https://github.com/Mugen87\n\t     */\n\t\n\t    function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'CylinderBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradiusTop: radiusTop,\n\t    \t\tradiusBottom: radiusBottom,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\topenEnded: openEnded,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tvar scope = this;\n\t\n\t    \tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\t    \tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\t    \theight = height !== undefined ? height : 100;\n\t\n\t    \tradialSegments = Math.floor( radialSegments ) || 8;\n\t    \theightSegments = Math.floor( heightSegments ) || 1;\n\t\n\t    \topenEnded = openEnded !== undefined ? openEnded : false;\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\t\n\t    \t// used to calculate buffer length\n\t\n\t    \tvar nbCap = 0;\n\t\n\t    \tif ( openEnded === false ) {\n\t\n\t    \t\tif ( radiusTop > 0 ) nbCap ++;\n\t    \t\tif ( radiusBottom > 0 ) nbCap ++;\n\t\n\t    \t}\n\t\n\t    \tvar vertexCount = calculateVertexCount();\n\t    \tvar indexCount = calculateIndexCount();\n\t\n\t    \t// buffers\n\t\n\t    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n\t    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t    \t// helper variables\n\t\n\t    \tvar index = 0,\n\t    \t    indexOffset = 0,\n\t    \t    indexArray = [],\n\t    \t    halfHeight = height / 2;\n\t\n\t    \t// group variables\n\t    \tvar groupStart = 0;\n\t\n\t    \t// generate geometry\n\t\n\t    \tgenerateTorso();\n\t\n\t    \tif ( openEnded === false ) {\n\t\n\t    \t\tif ( radiusTop > 0 ) generateCap( true );\n\t    \t\tif ( radiusBottom > 0 ) generateCap( false );\n\t\n\t    \t}\n\t\n\t    \t// build geometry\n\t\n\t    \tthis.setIndex( indices );\n\t    \tthis.addAttribute( 'position', vertices );\n\t    \tthis.addAttribute( 'normal', normals );\n\t    \tthis.addAttribute( 'uv', uvs );\n\t\n\t    \t// helper functions\n\t\n\t    \tfunction calculateVertexCount() {\n\t\n\t    \t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\t\n\t    \t\tif ( openEnded === false ) {\n\t\n\t    \t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn count;\n\t\n\t    \t}\n\t\n\t    \tfunction calculateIndexCount() {\n\t\n\t    \t\tvar count = radialSegments * heightSegments * 2 * 3;\n\t\n\t    \t\tif ( openEnded === false ) {\n\t\n\t    \t\t\tcount += radialSegments * nbCap * 3;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn count;\n\t\n\t    \t}\n\t\n\t    \tfunction generateTorso() {\n\t\n\t    \t\tvar x, y;\n\t    \t\tvar normal = new Vector3();\n\t    \t\tvar vertex = new Vector3();\n\t\n\t    \t\tvar groupCount = 0;\n\t\n\t    \t\t// this will be used to calculate the normal\n\t    \t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\t\n\t    \t\t// generate vertices, normals and uvs\n\t\n\t    \t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\t\n\t    \t\t\tvar indexRow = [];\n\t\n\t    \t\t\tvar v = y / heightSegments;\n\t\n\t    \t\t\t// calculate the radius of the current row\n\t    \t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\t\n\t    \t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\t\n\t    \t\t\t\tvar u = x / radialSegments;\n\t\n\t    \t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\n\t    \t\t\t\tvar sinTheta = Math.sin( theta );\n\t    \t\t\t\tvar cosTheta = Math.cos( theta );\n\t\n\t    \t\t\t\t// vertex\n\t    \t\t\t\tvertex.x = radius * sinTheta;\n\t    \t\t\t\tvertex.y = - v * height + halfHeight;\n\t    \t\t\t\tvertex.z = radius * cosTheta;\n\t    \t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t\t// normal\n\t    \t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t    \t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\n\t    \t\t\t\t// uv\n\t    \t\t\t\tuvs.setXY( index, u, 1 - v );\n\t\n\t    \t\t\t\t// save index of vertex in respective row\n\t    \t\t\t\tindexRow.push( index );\n\t\n\t    \t\t\t\t// increase index\n\t    \t\t\t\tindex ++;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// now save vertices of the row in our index array\n\t    \t\t\tindexArray.push( indexRow );\n\t\n\t    \t\t}\n\t\n\t    \t\t// generate indices\n\t\n\t    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\t\n\t    \t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\t\n\t    \t\t\t\t// we use the index array to access the correct indices\n\t    \t\t\t\tvar i1 = indexArray[ y ][ x ];\n\t    \t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n\t    \t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n\t    \t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\t\n\t    \t\t\t\t// face one\n\t    \t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\t\n\t    \t\t\t\t// face two\n\t    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\t\n\t    \t\t\t\t// update counters\n\t    \t\t\t\tgroupCount += 6;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// add a group to the geometry. this will ensure multi material support\n\t    \t\tscope.addGroup( groupStart, groupCount, 0 );\n\t\n\t    \t\t// calculate new start value for groups\n\t    \t\tgroupStart += groupCount;\n\t\n\t    \t}\n\t\n\t    \tfunction generateCap( top ) {\n\t\n\t    \t\tvar x, centerIndexStart, centerIndexEnd;\n\t\n\t    \t\tvar uv = new Vector2();\n\t    \t\tvar vertex = new Vector3();\n\t\n\t    \t\tvar groupCount = 0;\n\t\n\t    \t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t    \t\tvar sign = ( top === true ) ? 1 : - 1;\n\t\n\t    \t\t// save the index of the first center vertex\n\t    \t\tcenterIndexStart = index;\n\t\n\t    \t\t// first we generate the center vertex data of the cap.\n\t    \t\t// because the geometry needs one set of uvs per face,\n\t    \t\t// we must generate a center vertex per face/segment\n\t\n\t    \t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = 0.5;\n\t    \t\t\tuv.y = 0.5;\n\t\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t\t// save the index of the last center vertex\n\t    \t\tcenterIndexEnd = index;\n\t\n\t    \t\t// now we generate the surrounding vertices, normals and uvs\n\t\n\t    \t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\t\n\t    \t\t\tvar u = x / radialSegments;\n\t    \t\t\tvar theta = u * thetaLength + thetaStart;\n\t\n\t    \t\t\tvar cosTheta = Math.cos( theta );\n\t    \t\t\tvar sinTheta = Math.sin( theta );\n\t\n\t    \t\t\t// vertex\n\t    \t\t\tvertex.x = radius * sinTheta;\n\t    \t\t\tvertex.y = halfHeight * sign;\n\t    \t\t\tvertex.z = radius * cosTheta;\n\t    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t    \t\t\t// normal\n\t    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\t\n\t    \t\t\t// uv\n\t    \t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t    \t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t    \t\t\t// increase index\n\t    \t\t\tindex ++;\n\t\n\t    \t\t}\n\t\n\t    \t\t// generate indices\n\t\n\t    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\t\n\t    \t\t\tvar c = centerIndexStart + x;\n\t    \t\t\tvar i = centerIndexEnd + x;\n\t\n\t    \t\t\tif ( top === true ) {\n\t\n\t    \t\t\t\t// face top\n\t    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// face bottom\n\t    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// update counters\n\t    \t\t\tgroupCount += 3;\n\t\n\t    \t\t}\n\t\n\t    \t\t// add a group to the geometry. this will ensure multi material support\n\t    \t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\t\n\t    \t\t// calculate new start value for groups\n\t    \t\tgroupStart += groupCount;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'CylinderGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradiusTop: radiusTop,\n\t    \t\tradiusBottom: radiusBottom,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\topenEnded: openEnded,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    CylinderGeometry.prototype = Object.create( Geometry.prototype );\n\t    CylinderGeometry.prototype.constructor = CylinderGeometry;\n\t\n\t    /**\n\t     * @author abelnation / http://github.com/abelnation\n\t     */\n\t\n\t    function ConeGeometry(\n\t    \tradius, height,\n\t    \tradialSegments, heightSegments,\n\t    \topenEnded, thetaStart, thetaLength ) {\n\t\n\t    \tCylinderGeometry.call( this,\n\t    \t\t0, radius, height,\n\t    \t\tradialSegments, heightSegments,\n\t    \t\topenEnded, thetaStart, thetaLength );\n\t\n\t    \tthis.type = 'ConeGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\topenEnded: openEnded,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    }\n\t\n\t    ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\t    ConeGeometry.prototype.constructor = ConeGeometry;\n\t\n\t    /*\n\t     * @author: abelnation / http://github.com/abelnation\n\t     */\n\t\n\t    function ConeBufferGeometry(\n\t    \tradius, height,\n\t    \tradialSegments, heightSegments,\n\t    \topenEnded, thetaStart, thetaLength ) {\n\t\n\t    \tCylinderBufferGeometry.call( this,\n\t    \t\t0, radius, height,\n\t    \t\tradialSegments, heightSegments,\n\t    \t\topenEnded, thetaStart, thetaLength );\n\t\n\t    \tthis.type = 'ConeBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\theight: height,\n\t    \t\tradialSegments: radialSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    }\n\t\n\t    ConeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'CircleBufferGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tsegments: segments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tradius = radius || 50;\n\t    \tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\t\n\t    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\t\n\t    \tvar vertices = segments + 2;\n\t\n\t    \tvar positions = new Float32Array( vertices * 3 );\n\t    \tvar normals = new Float32Array( vertices * 3 );\n\t    \tvar uvs = new Float32Array( vertices * 2 );\n\t\n\t    \t// center data is already zero, but need to set a few extras\n\t    \tnormals[ 2 ] = 1.0;\n\t    \tuvs[ 0 ] = 0.5;\n\t    \tuvs[ 1 ] = 0.5;\n\t\n\t    \tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\t\n\t    \t\tvar segment = thetaStart + s / segments * thetaLength;\n\t\n\t    \t\tpositions[ i ] = radius * Math.cos( segment );\n\t    \t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\t\n\t    \t\tnormals[ i + 2 ] = 1; // normal z\n\t\n\t    \t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n\t    \t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\t\n\t    \t}\n\t\n\t    \tvar indices = [];\n\t\n\t    \tfor ( var i = 1; i <= segments; i ++ ) {\n\t\n\t    \t\tindices.push( i, i + 1, 0 );\n\t\n\t    \t}\n\t\n\t    \tthis.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );\n\t    \tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\t    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\t\n\t    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\t\n\t    }\n\t\n\t    CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\t\n\t    /**\n\t     * @author hughes\n\t     */\n\t\n\t    function CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'CircleGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\tradius: radius,\n\t    \t\tsegments: segments,\n\t    \t\tthetaStart: thetaStart,\n\t    \t\tthetaLength: thetaLength\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\n\t    }\n\t\n\t    CircleGeometry.prototype = Object.create( Geometry.prototype );\n\t    CircleGeometry.prototype.constructor = CircleGeometry;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n\t     */\n\t\n\t    function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\t\n\t    \tGeometry.call( this );\n\t\n\t    \tthis.type = 'BoxGeometry';\n\t\n\t    \tthis.parameters = {\n\t    \t\twidth: width,\n\t    \t\theight: height,\n\t    \t\tdepth: depth,\n\t    \t\twidthSegments: widthSegments,\n\t    \t\theightSegments: heightSegments,\n\t    \t\tdepthSegments: depthSegments\n\t    \t};\n\t\n\t    \tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t    \tthis.mergeVertices();\n\t\n\t    }\n\t\n\t    BoxGeometry.prototype = Object.create( Geometry.prototype );\n\t    BoxGeometry.prototype.constructor = BoxGeometry;\n\t\n\t\n\t\n\t    var Geometries = Object.freeze({\n\t    \tWireframeGeometry: WireframeGeometry,\n\t    \tParametricGeometry: ParametricGeometry,\n\t    \tTetrahedronGeometry: TetrahedronGeometry,\n\t    \tOctahedronGeometry: OctahedronGeometry,\n\t    \tIcosahedronGeometry: IcosahedronGeometry,\n\t    \tDodecahedronGeometry: DodecahedronGeometry,\n\t    \tPolyhedronGeometry: PolyhedronGeometry,\n\t    \tTubeGeometry: TubeGeometry,\n\t    \tTorusKnotGeometry: TorusKnotGeometry,\n\t    \tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t    \tTorusGeometry: TorusGeometry,\n\t    \tTorusBufferGeometry: TorusBufferGeometry,\n\t    \tTextGeometry: TextGeometry,\n\t    \tSphereBufferGeometry: SphereBufferGeometry,\n\t    \tSphereGeometry: SphereGeometry,\n\t    \tRingGeometry: RingGeometry,\n\t    \tRingBufferGeometry: RingBufferGeometry,\n\t    \tPlaneBufferGeometry: PlaneBufferGeometry,\n\t    \tPlaneGeometry: PlaneGeometry,\n\t    \tLatheGeometry: LatheGeometry,\n\t    \tLatheBufferGeometry: LatheBufferGeometry,\n\t    \tShapeGeometry: ShapeGeometry,\n\t    \tExtrudeGeometry: ExtrudeGeometry,\n\t    \tEdgesGeometry: EdgesGeometry,\n\t    \tConeGeometry: ConeGeometry,\n\t    \tConeBufferGeometry: ConeBufferGeometry,\n\t    \tCylinderGeometry: CylinderGeometry,\n\t    \tCylinderBufferGeometry: CylinderBufferGeometry,\n\t    \tCircleBufferGeometry: CircleBufferGeometry,\n\t    \tCircleGeometry: CircleGeometry,\n\t    \tBoxBufferGeometry: BoxBufferGeometry,\n\t    \tBoxGeometry: BoxGeometry\n\t    });\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function ShadowMaterial() {\n\t\n\t    \tShaderMaterial.call( this, {\n\t    \t\tuniforms: exports.UniformsUtils.merge( [\n\t    \t\t\tUniformsLib[ \"lights\" ],\n\t    \t\t\t{\n\t    \t\t\t\topacity: { value: 1.0 }\n\t    \t\t\t}\n\t    \t\t] ),\n\t    \t\tvertexShader: ShaderChunk[ 'shadow_vert' ],\n\t    \t\tfragmentShader: ShaderChunk[ 'shadow_frag' ]\n\t    \t} );\n\t\n\t    \tthis.lights = true;\n\t    \tthis.transparent = true;\n\t\n\t    \tObject.defineProperties( this, {\n\t    \t\topacity: {\n\t    \t\t\tenumerable: true,\n\t    \t\t\tget: function () {\n\t    \t\t\t\treturn this.uniforms.opacity.value;\n\t    \t\t\t},\n\t    \t\t\tset: function ( value ) {\n\t    \t\t\t\tthis.uniforms.opacity.value = value;\n\t    \t\t\t}\n\t    \t\t}\n\t    \t} );\n\t\n\t    }\n\t\n\t    ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\t    ShadowMaterial.prototype.constructor = ShadowMaterial;\n\t\n\t    ShadowMaterial.prototype.isShadowMaterial = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function RawShaderMaterial( parameters ) {\n\t\n\t    \tShaderMaterial.call( this, parameters );\n\t\n\t    \tthis.type = 'RawShaderMaterial';\n\t\n\t    }\n\t\n\t    RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\t    RawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\t\n\t    RawShaderMaterial.prototype.isRawShaderMaterial = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function MultiMaterial( materials ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.type = 'MultiMaterial';\n\t\n\t    \tthis.materials = materials instanceof Array ? materials : [];\n\t\n\t    \tthis.visible = true;\n\t\n\t    }\n\t\n\t    MultiMaterial.prototype = {\n\t\n\t    \tconstructor: MultiMaterial,\n\t\n\t    \tisMultiMaterial: true,\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar output = {\n\t    \t\t\tmetadata: {\n\t    \t\t\t\tversion: 4.2,\n\t    \t\t\t\ttype: 'material',\n\t    \t\t\t\tgenerator: 'MaterialExporter'\n\t    \t\t\t},\n\t    \t\t\tuuid: this.uuid,\n\t    \t\t\ttype: this.type,\n\t    \t\t\tmaterials: []\n\t    \t\t};\n\t\n\t    \t\tvar materials = this.materials;\n\t\n\t    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar material = materials[ i ].toJSON( meta );\n\t    \t\t\tdelete material.metadata;\n\t\n\t    \t\t\toutput.materials.push( material );\n\t\n\t    \t\t}\n\t\n\t    \t\toutput.visible = this.visible;\n\t\n\t    \t\treturn output;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\tvar material = new this.constructor();\n\t\n\t    \t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\t\n\t    \t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tmaterial.visible = this.visible;\n\t\n\t    \t\treturn material;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  roughness: <float>,\n\t     *  metalness: <float>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  lightMap: new THREE.Texture( <Image> ),\n\t     *  lightMapIntensity: <float>\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  emissive: <hex>,\n\t     *  emissiveIntensity: <float>\n\t     *  emissiveMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  bumpMap: new THREE.Texture( <Image> ),\n\t     *  bumpScale: <float>,\n\t     *\n\t     *  normalMap: new THREE.Texture( <Image> ),\n\t     *  normalScale: <Vector2>,\n\t     *\n\t     *  displacementMap: new THREE.Texture( <Image> ),\n\t     *  displacementScale: <float>,\n\t     *  displacementBias: <float>,\n\t     *\n\t     *  roughnessMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  metalnessMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t     *  envMapIntensity: <float>\n\t     *\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshStandardMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.defines = { 'STANDARD': '' };\n\t\n\t    \tthis.type = 'MeshStandardMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // diffuse\n\t    \tthis.roughness = 0.5;\n\t    \tthis.metalness = 0.5;\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.lightMap = null;\n\t    \tthis.lightMapIntensity = 1.0;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.emissive = new Color( 0x000000 );\n\t    \tthis.emissiveIntensity = 1.0;\n\t    \tthis.emissiveMap = null;\n\t\n\t    \tthis.bumpMap = null;\n\t    \tthis.bumpScale = 1;\n\t\n\t    \tthis.normalMap = null;\n\t    \tthis.normalScale = new Vector2( 1, 1 );\n\t\n\t    \tthis.displacementMap = null;\n\t    \tthis.displacementScale = 1;\n\t    \tthis.displacementBias = 0;\n\t\n\t    \tthis.roughnessMap = null;\n\t\n\t    \tthis.metalnessMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.envMapIntensity = 1.0;\n\t\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t    \tthis.morphNormals = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshStandardMaterial.prototype = Object.create( Material.prototype );\n\t    MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\t\n\t    MeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\t\n\t    MeshStandardMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.defines = { 'STANDARD': '' };\n\t\n\t    \tthis.color.copy( source.color );\n\t    \tthis.roughness = source.roughness;\n\t    \tthis.metalness = source.metalness;\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.lightMap = source.lightMap;\n\t    \tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.emissive.copy( source.emissive );\n\t    \tthis.emissiveMap = source.emissiveMap;\n\t    \tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t    \tthis.bumpMap = source.bumpMap;\n\t    \tthis.bumpScale = source.bumpScale;\n\t\n\t    \tthis.normalMap = source.normalMap;\n\t    \tthis.normalScale.copy( source.normalScale );\n\t\n\t    \tthis.displacementMap = source.displacementMap;\n\t    \tthis.displacementScale = source.displacementScale;\n\t    \tthis.displacementBias = source.displacementBias;\n\t\n\t    \tthis.roughnessMap = source.roughnessMap;\n\t\n\t    \tthis.metalnessMap = source.metalnessMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.envMapIntensity = source.envMapIntensity;\n\t\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * parameters = {\n\t     *  reflectivity: <float>\n\t     * }\n\t     */\n\t\n\t    function MeshPhysicalMaterial( parameters ) {\n\t\n\t    \tMeshStandardMaterial.call( this );\n\t\n\t    \tthis.defines = { 'PHYSICAL': '' };\n\t\n\t    \tthis.type = 'MeshPhysicalMaterial';\n\t\n\t    \tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\t\n\t    \tthis.clearCoat = 0.0;\n\t    \tthis.clearCoatRoughness = 0.0;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\t    MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\t\n\t    MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\t\n\t    MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMeshStandardMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.defines = { 'PHYSICAL': '' };\n\t\n\t    \tthis.reflectivity = source.reflectivity;\n\t\n\t    \tthis.clearCoat = source.clearCoat;\n\t    \tthis.clearCoatRoughness = source.clearCoatRoughness;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  specular: <hex>,\n\t     *  shininess: <float>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  lightMap: new THREE.Texture( <Image> ),\n\t     *  lightMapIntensity: <float>\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  emissive: <hex>,\n\t     *  emissiveIntensity: <float>\n\t     *  emissiveMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  bumpMap: new THREE.Texture( <Image> ),\n\t     *  bumpScale: <float>,\n\t     *\n\t     *  normalMap: new THREE.Texture( <Image> ),\n\t     *  normalScale: <Vector2>,\n\t     *\n\t     *  displacementMap: new THREE.Texture( <Image> ),\n\t     *  displacementScale: <float>,\n\t     *  displacementBias: <float>,\n\t     *\n\t     *  specularMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t     *  combine: THREE.Multiply,\n\t     *  reflectivity: <float>,\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshPhongMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshPhongMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // diffuse\n\t    \tthis.specular = new Color( 0x111111 );\n\t    \tthis.shininess = 30;\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.lightMap = null;\n\t    \tthis.lightMapIntensity = 1.0;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.emissive = new Color( 0x000000 );\n\t    \tthis.emissiveIntensity = 1.0;\n\t    \tthis.emissiveMap = null;\n\t\n\t    \tthis.bumpMap = null;\n\t    \tthis.bumpScale = 1;\n\t\n\t    \tthis.normalMap = null;\n\t    \tthis.normalScale = new Vector2( 1, 1 );\n\t\n\t    \tthis.displacementMap = null;\n\t    \tthis.displacementScale = 1;\n\t    \tthis.displacementBias = 0;\n\t\n\t    \tthis.specularMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.combine = MultiplyOperation;\n\t    \tthis.reflectivity = 1;\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t    \tthis.morphNormals = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshPhongMaterial.prototype = Object.create( Material.prototype );\n\t    MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\t\n\t    MeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\t\n\t    MeshPhongMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t    \tthis.specular.copy( source.specular );\n\t    \tthis.shininess = source.shininess;\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.lightMap = source.lightMap;\n\t    \tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.emissive.copy( source.emissive );\n\t    \tthis.emissiveMap = source.emissiveMap;\n\t    \tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t    \tthis.bumpMap = source.bumpMap;\n\t    \tthis.bumpScale = source.bumpScale;\n\t\n\t    \tthis.normalMap = source.normalMap;\n\t    \tthis.normalScale.copy( source.normalScale );\n\t\n\t    \tthis.displacementMap = source.displacementMap;\n\t    \tthis.displacementScale = source.displacementScale;\n\t    \tthis.displacementBias = source.displacementBias;\n\t\n\t    \tthis.specularMap = source.specularMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.combine = source.combine;\n\t    \tthis.reflectivity = source.reflectivity;\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     *\n\t     * parameters = {\n\t     *  opacity: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>\n\t     * }\n\t     */\n\t\n\t    function MeshNormalMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this, parameters );\n\t\n\t    \tthis.type = 'MeshNormalMaterial';\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t\n\t    \tthis.fog = false;\n\t    \tthis.lights = false;\n\t    \tthis.morphTargets = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshNormalMaterial.prototype = Object.create( Material.prototype );\n\t    MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\t\n\t    MeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\t\n\t    MeshNormalMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  map: new THREE.Texture( <Image> ),\n\t     *\n\t     *  lightMap: new THREE.Texture( <Image> ),\n\t     *  lightMapIntensity: <float>\n\t     *\n\t     *  aoMap: new THREE.Texture( <Image> ),\n\t     *  aoMapIntensity: <float>\n\t     *\n\t     *  emissive: <hex>,\n\t     *  emissiveIntensity: <float>\n\t     *  emissiveMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  specularMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  alphaMap: new THREE.Texture( <Image> ),\n\t     *\n\t     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t     *  combine: THREE.Multiply,\n\t     *  reflectivity: <float>,\n\t     *  refractionRatio: <float>,\n\t     *\n\t     *  wireframe: <boolean>,\n\t     *  wireframeLinewidth: <float>,\n\t     *\n\t     *  skinning: <bool>,\n\t     *  morphTargets: <bool>,\n\t     *  morphNormals: <bool>\n\t     * }\n\t     */\n\t\n\t    function MeshLambertMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'MeshLambertMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff ); // diffuse\n\t\n\t    \tthis.map = null;\n\t\n\t    \tthis.lightMap = null;\n\t    \tthis.lightMapIntensity = 1.0;\n\t\n\t    \tthis.aoMap = null;\n\t    \tthis.aoMapIntensity = 1.0;\n\t\n\t    \tthis.emissive = new Color( 0x000000 );\n\t    \tthis.emissiveIntensity = 1.0;\n\t    \tthis.emissiveMap = null;\n\t\n\t    \tthis.specularMap = null;\n\t\n\t    \tthis.alphaMap = null;\n\t\n\t    \tthis.envMap = null;\n\t    \tthis.combine = MultiplyOperation;\n\t    \tthis.reflectivity = 1;\n\t    \tthis.refractionRatio = 0.98;\n\t\n\t    \tthis.wireframe = false;\n\t    \tthis.wireframeLinewidth = 1;\n\t    \tthis.wireframeLinecap = 'round';\n\t    \tthis.wireframeLinejoin = 'round';\n\t\n\t    \tthis.skinning = false;\n\t    \tthis.morphTargets = false;\n\t    \tthis.morphNormals = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    MeshLambertMaterial.prototype = Object.create( Material.prototype );\n\t    MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\t\n\t    MeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\t\n\t    MeshLambertMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.map = source.map;\n\t\n\t    \tthis.lightMap = source.lightMap;\n\t    \tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t    \tthis.aoMap = source.aoMap;\n\t    \tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t    \tthis.emissive.copy( source.emissive );\n\t    \tthis.emissiveMap = source.emissiveMap;\n\t    \tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t    \tthis.specularMap = source.specularMap;\n\t\n\t    \tthis.alphaMap = source.alphaMap;\n\t\n\t    \tthis.envMap = source.envMap;\n\t    \tthis.combine = source.combine;\n\t    \tthis.reflectivity = source.reflectivity;\n\t    \tthis.refractionRatio = source.refractionRatio;\n\t\n\t    \tthis.wireframe = source.wireframe;\n\t    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t    \tthis.wireframeLinecap = source.wireframeLinecap;\n\t    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t    \tthis.skinning = source.skinning;\n\t    \tthis.morphTargets = source.morphTargets;\n\t    \tthis.morphNormals = source.morphNormals;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     * parameters = {\n\t     *  color: <hex>,\n\t     *  opacity: <float>,\n\t     *\n\t     *  linewidth: <float>,\n\t     *\n\t     *  scale: <float>,\n\t     *  dashSize: <float>,\n\t     *  gapSize: <float>\n\t     * }\n\t     */\n\t\n\t    function LineDashedMaterial( parameters ) {\n\t\n\t    \tMaterial.call( this );\n\t\n\t    \tthis.type = 'LineDashedMaterial';\n\t\n\t    \tthis.color = new Color( 0xffffff );\n\t\n\t    \tthis.linewidth = 1;\n\t\n\t    \tthis.scale = 1;\n\t    \tthis.dashSize = 3;\n\t    \tthis.gapSize = 1;\n\t\n\t    \tthis.lights = false;\n\t\n\t    \tthis.setValues( parameters );\n\t\n\t    }\n\t\n\t    LineDashedMaterial.prototype = Object.create( Material.prototype );\n\t    LineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\t\n\t    LineDashedMaterial.prototype.isLineDashedMaterial = true;\n\t\n\t    LineDashedMaterial.prototype.copy = function ( source ) {\n\t\n\t    \tMaterial.prototype.copy.call( this, source );\n\t\n\t    \tthis.color.copy( source.color );\n\t\n\t    \tthis.linewidth = source.linewidth;\n\t\n\t    \tthis.scale = source.scale;\n\t    \tthis.dashSize = source.dashSize;\n\t    \tthis.gapSize = source.gapSize;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t\n\t\n\t    var Materials = Object.freeze({\n\t    \tShadowMaterial: ShadowMaterial,\n\t    \tSpriteMaterial: SpriteMaterial,\n\t    \tRawShaderMaterial: RawShaderMaterial,\n\t    \tShaderMaterial: ShaderMaterial,\n\t    \tPointsMaterial: PointsMaterial,\n\t    \tMultiMaterial: MultiMaterial,\n\t    \tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t    \tMeshStandardMaterial: MeshStandardMaterial,\n\t    \tMeshPhongMaterial: MeshPhongMaterial,\n\t    \tMeshNormalMaterial: MeshNormalMaterial,\n\t    \tMeshLambertMaterial: MeshLambertMaterial,\n\t    \tMeshDepthMaterial: MeshDepthMaterial,\n\t    \tMeshBasicMaterial: MeshBasicMaterial,\n\t    \tLineDashedMaterial: LineDashedMaterial,\n\t    \tLineBasicMaterial: LineBasicMaterial,\n\t    \tMaterial: Material\n\t    });\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    exports.Cache = {\n\t\n\t    \tenabled: false,\n\t\n\t    \tfiles: {},\n\t\n\t    \tadd: function ( key, file ) {\n\t\n\t    \t\tif ( this.enabled === false ) return;\n\t\n\t    \t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\t\n\t    \t\tthis.files[ key ] = file;\n\t\n\t    \t},\n\t\n\t    \tget: function ( key ) {\n\t\n\t    \t\tif ( this.enabled === false ) return;\n\t\n\t    \t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\t\n\t    \t\treturn this.files[ key ];\n\t\n\t    \t},\n\t\n\t    \tremove: function ( key ) {\n\t\n\t    \t\tdelete this.files[ key ];\n\t\n\t    \t},\n\t\n\t    \tclear: function () {\n\t\n\t    \t\tthis.files = {};\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LoadingManager( onLoad, onProgress, onError ) {\n\t\n\t    \tvar scope = this;\n\t\n\t    \tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\t\n\t    \tthis.onStart = undefined;\n\t    \tthis.onLoad = onLoad;\n\t    \tthis.onProgress = onProgress;\n\t    \tthis.onError = onError;\n\t\n\t    \tthis.itemStart = function ( url ) {\n\t\n\t    \t\titemsTotal ++;\n\t\n\t    \t\tif ( isLoading === false ) {\n\t\n\t    \t\t\tif ( scope.onStart !== undefined ) {\n\t\n\t    \t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tisLoading = true;\n\t\n\t    \t};\n\t\n\t    \tthis.itemEnd = function ( url ) {\n\t\n\t    \t\titemsLoaded ++;\n\t\n\t    \t\tif ( scope.onProgress !== undefined ) {\n\t\n\t    \t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( itemsLoaded === itemsTotal ) {\n\t\n\t    \t\t\tisLoading = false;\n\t\n\t    \t\t\tif ( scope.onLoad !== undefined ) {\n\t\n\t    \t\t\t\tscope.onLoad();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tthis.itemError = function ( url ) {\n\t\n\t    \t\tif ( scope.onError !== undefined ) {\n\t\n\t    \t\t\tscope.onError( url );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    exports.DefaultLoadingManager = new LoadingManager();\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function XHRLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( XHRLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tif ( this.path !== undefined ) url = this.path + url;\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar cached = exports.Cache.get( url );\n\t\n\t    \t\tif ( cached !== undefined ) {\n\t\n\t    \t\t\tscope.manager.itemStart( url );\n\t\n\t    \t\t\tsetTimeout( function () {\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( cached );\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t}, 0 );\n\t\n\t    \t\t\treturn cached;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar request = new XMLHttpRequest();\n\t    \t\trequest.open( 'GET', url, true );\n\t\n\t    \t\trequest.addEventListener( 'load', function ( event ) {\n\t\n\t    \t\t\tvar response = event.target.response;\n\t\n\t    \t\t\texports.Cache.add( url, response );\n\t\n\t    \t\t\tif ( this.status === 200 ) {\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( response );\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t} else if ( this.status === 0 ) {\n\t\n\t    \t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t    \t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( response );\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( onError ) onError( event );\n\t\n\t    \t\t\t\tscope.manager.itemError( url );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}, false );\n\t\n\t    \t\tif ( onProgress !== undefined ) {\n\t\n\t    \t\t\trequest.addEventListener( 'progress', function ( event ) {\n\t\n\t    \t\t\t\tonProgress( event );\n\t\n\t    \t\t\t}, false );\n\t\n\t    \t\t}\n\t\n\t    \t\trequest.addEventListener( 'error', function ( event ) {\n\t\n\t    \t\t\tif ( onError ) onError( event );\n\t\n\t    \t\t\tscope.manager.itemError( url );\n\t\n\t    \t\t}, false );\n\t\n\t    \t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t    \t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\t\n\t    \t\tif ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );\n\t\n\t    \t\trequest.send( null );\n\t\n\t    \t\tscope.manager.itemStart( url );\n\t\n\t    \t\treturn request;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetResponseType: function ( value ) {\n\t\n\t    \t\tthis.responseType = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetWithCredentials: function ( value ) {\n\t\n\t    \t\tthis.withCredentials = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     *\n\t     * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t     */\n\t\n\t    function CompressedTextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    \t// override in sub classes\n\t    \tthis._parser = null;\n\t\n\t    }\n\t\n\t    Object.assign( CompressedTextureLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar images = [];\n\t\n\t    \t\tvar texture = new CompressedTexture();\n\t    \t\ttexture.image = images;\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setPath( this.path );\n\t    \t\tloader.setResponseType( 'arraybuffer' );\n\t\n\t    \t\tfunction loadTexture( i ) {\n\t\n\t    \t\t\tloader.load( url[ i ], function ( buffer ) {\n\t\n\t    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\t\n\t    \t\t\t\timages[ i ] = {\n\t    \t\t\t\t\twidth: texDatas.width,\n\t    \t\t\t\t\theight: texDatas.height,\n\t    \t\t\t\t\tformat: texDatas.format,\n\t    \t\t\t\t\tmipmaps: texDatas.mipmaps\n\t    \t\t\t\t};\n\t\n\t    \t\t\t\tloaded += 1;\n\t\n\t    \t\t\t\tif ( loaded === 6 ) {\n\t\n\t    \t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t    \t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t    \t\t\t\t\ttexture.format = texDatas.format;\n\t    \t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}, onProgress, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( Array.isArray( url ) ) {\n\t\n\t    \t\t\tvar loaded = 0;\n\t\n\t    \t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\t\n\t    \t\t\t\tloadTexture( i );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// compressed cubemap texture stored in a single DDS file\n\t\n\t    \t\t\tloader.load( url, function ( buffer ) {\n\t\n\t    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\t\n\t    \t\t\t\tif ( texDatas.isCubemap ) {\n\t\n\t    \t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\t\n\t    \t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\t\n\t    \t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\t\n\t    \t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t    \t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t    \t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t    \t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\ttexture.image.width = texDatas.width;\n\t    \t\t\t\t\ttexture.image.height = texDatas.height;\n\t    \t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\t\n\t    \t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttexture.format = texDatas.format;\n\t    \t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t    \t\t\t}, onProgress, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author Nikos M. / https://github.com/foo123/\n\t     *\n\t     * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t     */\n\t\n\t    var DataTextureLoader = BinaryTextureLoader;\n\t    function BinaryTextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    \t// override in sub classes\n\t    \tthis._parser = null;\n\t\n\t    }\n\t\n\t    Object.assign( BinaryTextureLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar texture = new DataTexture();\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setResponseType( 'arraybuffer' );\n\t\n\t    \t\tloader.load( url, function ( buffer ) {\n\t\n\t    \t\t\tvar texData = scope._parser( buffer );\n\t\n\t    \t\t\tif ( ! texData ) return;\n\t\n\t    \t\t\tif ( undefined !== texData.image ) {\n\t\n\t    \t\t\t\ttexture.image = texData.image;\n\t\n\t    \t\t\t} else if ( undefined !== texData.data ) {\n\t\n\t    \t\t\t\ttexture.image.width = texData.width;\n\t    \t\t\t\ttexture.image.height = texData.height;\n\t    \t\t\t\ttexture.image.data = texData.data;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n\t    \t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\t\n\t    \t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n\t    \t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\t\n\t    \t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\t\n\t    \t\t\tif ( undefined !== texData.format ) {\n\t\n\t    \t\t\t\ttexture.format = texData.format;\n\t\n\t    \t\t\t}\n\t    \t\t\tif ( undefined !== texData.type ) {\n\t\n\t    \t\t\t\ttexture.type = texData.type;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( undefined !== texData.mipmaps ) {\n\t\n\t    \t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( 1 === texData.mipmapCount ) {\n\t\n\t    \t\t\t\ttexture.minFilter = LinearFilter;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\tif ( onLoad ) onLoad( texture, texData );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t\n\t    \t\treturn texture;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function ImageLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( ImageLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\t    \t\timage.onload = function () {\n\t\n\t    \t\t\timage.onload = null;\n\t\n\t    \t\t\tURL.revokeObjectURL( image.src );\n\t\n\t    \t\t\tif ( onLoad ) onLoad( image );\n\t\n\t    \t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t};\n\t\n\t    \t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\t\n\t    \t\t\timage.src = url;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar loader = new XHRLoader();\n\t    \t\t\tloader.setPath( this.path );\n\t    \t\t\tloader.setResponseType( 'blob' );\n\t    \t\t\tloader.setWithCredentials( this.withCredentials );\n\t    \t\t\tloader.load( url, function ( blob ) {\n\t\n\t    \t\t\t\timage.src = URL.createObjectURL( blob );\n\t\n\t    \t\t\t}, onProgress, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\tscope.manager.itemStart( url );\n\t\n\t    \t\treturn image;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetWithCredentials: function ( value ) {\n\t\n\t    \t\tthis.withCredentials = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function CubeTextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( CubeTextureLoader.prototype, {\n\t\n\t    \tload: function ( urls, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar texture = new CubeTexture();\n\t\n\t    \t\tvar loader = new ImageLoader( this.manager );\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t    \t\tloader.setPath( this.path );\n\t\n\t    \t\tvar loaded = 0;\n\t\n\t    \t\tfunction loadTexture( i ) {\n\t\n\t    \t\t\tloader.load( urls[ i ], function ( image ) {\n\t\n\t    \t\t\t\ttexture.images[ i ] = image;\n\t\n\t    \t\t\t\tloaded ++;\n\t\n\t    \t\t\t\tif ( loaded === 6 ) {\n\t\n\t    \t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}, undefined, onError );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\t\n\t    \t\t\tloadTexture( i );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function TextureLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( TextureLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar texture = new Texture();\n\t\n\t    \t\tvar loader = new ImageLoader( this.manager );\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t    \t\tloader.setWithCredentials( this.withCredentials );\n\t    \t\tloader.setPath( this.path );\n\t    \t\tloader.load( url, function ( image ) {\n\t\n\t    \t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t    \t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\t\n\t    \t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t    \t\t\ttexture.image = image;\n\t    \t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\tif ( onLoad !== undefined ) {\n\t\n\t    \t\t\t\tonLoad( texture );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetWithCredentials: function ( value ) {\n\t\n\t    \t\tthis.withCredentials = value;\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetPath: function ( value ) {\n\t\n\t    \t\tthis.path = value;\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Light( color, intensity ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Light';\n\t\n\t    \tthis.color = new Color( color );\n\t    \tthis.intensity = intensity !== undefined ? intensity : 1;\n\t\n\t    \tthis.receiveShadow = undefined;\n\t\n\t    }\n\t\n\t    Light.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Light,\n\t\n\t    \tisLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tObject3D.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.color.copy( source.color );\n\t    \t\tthis.intensity = source.intensity;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function ( meta ) {\n\t\n\t    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\t\n\t    \t\tdata.object.color = this.color.getHex();\n\t    \t\tdata.object.intensity = this.intensity;\n\t\n\t    \t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\t\n\t    \t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t    \t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t    \t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t    \t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\t\n\t    \t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\t\n\t    \t\treturn data;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function HemisphereLight( skyColor, groundColor, intensity ) {\n\t\n\t    \tLight.call( this, skyColor, intensity );\n\t\n\t    \tthis.type = 'HemisphereLight';\n\t\n\t    \tthis.castShadow = undefined;\n\t\n\t    \tthis.position.copy( Object3D.DefaultUp );\n\t    \tthis.updateMatrix();\n\t\n\t    \tthis.groundColor = new Color( groundColor );\n\t\n\t    }\n\t\n\t    HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: HemisphereLight,\n\t\n\t    \tisHemisphereLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.groundColor.copy( source.groundColor );\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function LightShadow( camera ) {\n\t\n\t    \tthis.camera = camera;\n\t\n\t    \tthis.bias = 0;\n\t    \tthis.radius = 1;\n\t\n\t    \tthis.mapSize = new Vector2( 512, 512 );\n\t\n\t    \tthis.map = null;\n\t    \tthis.matrix = new Matrix4();\n\t\n\t    }\n\t\n\t    Object.assign( LightShadow.prototype, {\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.camera = source.camera.clone();\n\t\n\t    \t\tthis.bias = source.bias;\n\t    \t\tthis.radius = source.radius;\n\t\n\t    \t\tthis.mapSize.copy( source.mapSize );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function () {\n\t\n\t    \t\tvar object = {};\n\t\n\t    \t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t    \t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t    \t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\t\n\t    \t\tobject.camera = this.camera.toJSON( false ).object;\n\t    \t\tdelete object.camera.matrix;\n\t\n\t    \t\treturn object;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function SpotLightShadow() {\n\t\n\t    \tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\t\n\t    }\n\t\n\t    SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\t\n\t    \tconstructor: SpotLightShadow,\n\t\n\t    \tisSpotLightShadow: true,\n\t\n\t    \tupdate: function ( light ) {\n\t\n\t    \t\tvar fov = exports.Math.RAD2DEG * 2 * light.angle;\n\t    \t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t    \t\tvar far = light.distance || 500;\n\t\n\t    \t\tvar camera = this.camera;\n\t\n\t    \t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\t\n\t    \t\t\tcamera.fov = fov;\n\t    \t\t\tcamera.aspect = aspect;\n\t    \t\t\tcamera.far = far;\n\t    \t\t\tcamera.updateProjectionMatrix();\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'SpotLight';\n\t\n\t    \tthis.position.copy( Object3D.DefaultUp );\n\t    \tthis.updateMatrix();\n\t\n\t    \tthis.target = new Object3D();\n\t\n\t    \tObject.defineProperty( this, 'power', {\n\t    \t\tget: function () {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\treturn this.intensity * Math.PI;\n\t    \t\t},\n\t    \t\tset: function ( power ) {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\tthis.intensity = power / Math.PI;\n\t    \t\t}\n\t    \t} );\n\t\n\t    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t    \tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t    \tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\t\n\t    \tthis.shadow = new SpotLightShadow();\n\t\n\t    }\n\t\n\t    SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: SpotLight,\n\t\n\t    \tisSpotLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.distance = source.distance;\n\t    \t\tthis.angle = source.angle;\n\t    \t\tthis.penumbra = source.penumbra;\n\t    \t\tthis.decay = source.decay;\n\t\n\t    \t\tthis.target = source.target.clone();\n\t\n\t    \t\tthis.shadow = source.shadow.clone();\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t\n\t    function PointLight( color, intensity, distance, decay ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'PointLight';\n\t\n\t    \tObject.defineProperty( this, 'power', {\n\t    \t\tget: function () {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\treturn this.intensity * 4 * Math.PI;\n\t\n\t    \t\t},\n\t    \t\tset: function ( power ) {\n\t    \t\t\t// intensity = power per solid angle.\n\t    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t    \t\t\tthis.intensity = power / ( 4 * Math.PI );\n\t    \t\t}\n\t    \t} );\n\t\n\t    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\t\n\t    \tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\t\n\t    }\n\t\n\t    PointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: PointLight,\n\t\n\t    \tisPointLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.distance = source.distance;\n\t    \t\tthis.decay = source.decay;\n\t\n\t    \t\tthis.shadow = source.shadow.clone();\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function DirectionalLightShadow( light ) {\n\t\n\t    \tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\t\n\t    }\n\t\n\t    DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\t\n\t    \tconstructor: DirectionalLightShadow\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function DirectionalLight( color, intensity ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'DirectionalLight';\n\t\n\t    \tthis.position.copy( Object3D.DefaultUp );\n\t    \tthis.updateMatrix();\n\t\n\t    \tthis.target = new Object3D();\n\t\n\t    \tthis.shadow = new DirectionalLightShadow();\n\t\n\t    }\n\t\n\t    DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: DirectionalLight,\n\t\n\t    \tisDirectionalLight: true,\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tLight.prototype.copy.call( this, source );\n\t\n\t    \t\tthis.target = source.target.clone();\n\t\n\t    \t\tthis.shadow = source.shadow.clone();\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function AmbientLight( color, intensity ) {\n\t\n\t    \tLight.call( this, color, intensity );\n\t\n\t    \tthis.type = 'AmbientLight';\n\t\n\t    \tthis.castShadow = undefined;\n\t\n\t    }\n\t\n\t    AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\t\n\t    \tconstructor: AmbientLight,\n\t\n\t    \tisAmbientLight: true,\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author tschw\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     */\n\t\n\t    exports.AnimationUtils = {\n\t\n\t    \t// same as Array.prototype.slice, but also works on typed arrays\n\t    \tarraySlice: function( array, from, to ) {\n\t\n\t    \t\tif ( exports.AnimationUtils.isTypedArray( array ) ) {\n\t\n\t    \t\t\treturn new array.constructor( array.subarray( from, to ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn array.slice( from, to );\n\t\n\t    \t},\n\t\n\t    \t// converts an array to a specific type\n\t    \tconvertArray: function( array, type, forceClone ) {\n\t\n\t    \t\tif ( ! array || // let 'undefined' and 'null' pass\n\t    \t\t\t\t! forceClone && array.constructor === type ) return array;\n\t\n\t    \t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\t\n\t    \t\t\treturn new type( array ); // create typed array\n\t\n\t    \t\t}\n\t\n\t    \t\treturn Array.prototype.slice.call( array ); // create Array\n\t\n\t    \t},\n\t\n\t    \tisTypedArray: function( object ) {\n\t\n\t    \t\treturn ArrayBuffer.isView( object ) &&\n\t    \t\t\t\t! ( object instanceof DataView );\n\t\n\t    \t},\n\t\n\t    \t// returns an array by which times and values can be sorted\n\t    \tgetKeyframeOrder: function( times ) {\n\t\n\t    \t\tfunction compareTime( i, j ) {\n\t\n\t    \t\t\treturn times[ i ] - times[ j ];\n\t\n\t    \t\t}\n\t\n\t    \t\tvar n = times.length;\n\t    \t\tvar result = new Array( n );\n\t    \t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\t\n\t    \t\tresult.sort( compareTime );\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t    \tsortedArray: function( values, stride, order ) {\n\t\n\t    \t\tvar nValues = values.length;\n\t    \t\tvar result = new values.constructor( nValues );\n\t\n\t    \t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\t\n\t    \t\t\tvar srcOffset = order[ i ] * stride;\n\t\n\t    \t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\t\n\t    \t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \t// function for parsing AOS keyframe formats\n\t    \tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\t\n\t    \t\tvar i = 1, key = jsonKeys[ 0 ];\n\t\n\t    \t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\t\n\t    \t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( key === undefined ) return; // no data\n\t\n\t    \t\tvar value = key[ valuePropertyName ];\n\t    \t\tif ( value === undefined ) return; // no data\n\t\n\t    \t\tif ( Array.isArray( value ) ) {\n\t\n\t    \t\t\tdo {\n\t\n\t    \t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t    \t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\ttimes.push( key.time );\n\t    \t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t\t} while ( key !== undefined );\n\t\n\t    \t\t} else if ( value.toArray !== undefined ) {\n\t    \t\t\t// ...assume THREE.Math-ish\n\t\n\t    \t\t\tdo {\n\t\n\t    \t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t    \t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\ttimes.push( key.time );\n\t    \t\t\t\t\tvalue.toArray( values, values.length );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t\t} while ( key !== undefined );\n\t\n\t    \t\t} else {\n\t    \t\t\t// otherwise push as-is\n\t\n\t    \t\t\tdo {\n\t\n\t    \t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t    \t\t\t\tif ( value !== undefined ) {\n\t\n\t    \t\t\t\t\ttimes.push( key.time );\n\t    \t\t\t\t\tvalues.push( value );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t    \t\t\t} while ( key !== undefined );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * Abstract base class of interpolants over parametric samples.\n\t     *\n\t     * The parameter domain is one dimensional, typically the time or a path\n\t     * along a curve defined by the data.\n\t     *\n\t     * The sample values can have any dimensionality and derived classes may\n\t     * apply special interpretations to the data.\n\t     *\n\t     * This class provides the interval seek in a Template Method, deferring\n\t     * the actual interpolation to derived classes.\n\t     *\n\t     * Time complexity is O(1) for linear access crossing at most two points\n\t     * and O(log N) for random access, where N is the number of positions.\n\t     *\n\t     * References:\n\t     *\n\t     * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function Interpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tthis.parameterPositions = parameterPositions;\n\t    \tthis._cachedIndex = 0;\n\t\n\t    \tthis.resultBuffer = resultBuffer !== undefined ?\n\t    \t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t    \tthis.sampleValues = sampleValues;\n\t    \tthis.valueSize = sampleSize;\n\t\n\t    }\n\t\n\t    Interpolant.prototype = {\n\t\n\t    \tconstructor: Interpolant,\n\t\n\t    \tevaluate: function( t ) {\n\t\n\t    \t\tvar pp = this.parameterPositions,\n\t    \t\t\ti1 = this._cachedIndex,\n\t\n\t    \t\t\tt1 = pp[   i1   ],\n\t    \t\t\tt0 = pp[ i1 - 1 ];\n\t\n\t    \t\tvalidate_interval: {\n\t\n\t    \t\t\tseek: {\n\t\n\t    \t\t\t\tvar right;\n\t\n\t    \t\t\t\tlinear_scan: {\n\t    //- See http://jsperf.com/comparison-to-undefined/3\n\t    //- slower code:\n\t    //-\n\t    //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t    \t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\t\n\t    \t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\t\n\t    \t\t\t\t\t\t\tif ( t1 === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\t\n\t    \t\t\t\t\t\t\t\t// after end\n\t\n\t    \t\t\t\t\t\t\t\ti1 = pp.length;\n\t    \t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t    \t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\t\n\t    \t\t\t\t\t\t\tt0 = t1;\n\t    \t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( t < t1 ) {\n\t\n\t    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t    \t\t\t\t\t\t\t\tbreak seek;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t// prepare binary search on the right side of the index\n\t    \t\t\t\t\t\tright = pp.length;\n\t    \t\t\t\t\t\tbreak linear_scan;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    //- slower code:\n\t    //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t    \t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\t\n\t    \t\t\t\t\t\t// looping?\n\t\n\t    \t\t\t\t\t\tvar t1global = pp[ 1 ];\n\t\n\t    \t\t\t\t\t\tif ( t < t1global ) {\n\t\n\t    \t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t    \t\t\t\t\t\t\tt0 = t1global;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t// linear reverse scan\n\t\n\t    \t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\t\n\t    \t\t\t\t\t\t\tif ( t0 === undefined ) {\n\t\n\t    \t\t\t\t\t\t\t\t// before start\n\t\n\t    \t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t    \t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\t\n\t    \t\t\t\t\t\t\tt1 = t0;\n\t    \t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( t >= t0 ) {\n\t\n\t    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t    \t\t\t\t\t\t\t\tbreak seek;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t// prepare binary search on the left side of the index\n\t    \t\t\t\t\t\tright = i1;\n\t    \t\t\t\t\t\ti1 = 0;\n\t    \t\t\t\t\t\tbreak linear_scan;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// the interval is valid\n\t\n\t    \t\t\t\t\tbreak validate_interval;\n\t\n\t    \t\t\t\t} // linear scan\n\t\n\t    \t\t\t\t// binary search\n\t\n\t    \t\t\t\twhile ( i1 < right ) {\n\t\n\t    \t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\t\n\t    \t\t\t\t\tif ( t < pp[ mid ] ) {\n\t\n\t    \t\t\t\t\t\tright = mid;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\ti1 = mid + 1;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tt1 = pp[   i1   ];\n\t    \t\t\t\tt0 = pp[ i1 - 1 ];\n\t\n\t    \t\t\t\t// check boundary cases, again\n\t\n\t    \t\t\t\tif ( t0 === undefined ) {\n\t\n\t    \t\t\t\t\tthis._cachedIndex = 0;\n\t    \t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( t1 === undefined ) {\n\t\n\t    \t\t\t\t\ti1 = pp.length;\n\t    \t\t\t\t\tthis._cachedIndex = i1;\n\t    \t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} // seek\n\t\n\t    \t\t\tthis._cachedIndex = i1;\n\t\n\t    \t\t\tthis.intervalChanged_( i1, t0, t1 );\n\t\n\t    \t\t} // validate_interval\n\t\n\t    \t\treturn this.interpolate_( i1, t0, t, t1 );\n\t\n\t    \t},\n\t\n\t    \tsettings: null, // optional, subclass-specific settings structure\n\t    \t// Note: The indirection allows central control of many interpolants.\n\t\n\t    \t// --- Protected interface\n\t\n\t    \tDefaultSettings_: {},\n\t\n\t    \tgetSettings_: function() {\n\t\n\t    \t\treturn this.settings || this.DefaultSettings_;\n\t\n\t    \t},\n\t\n\t    \tcopySampleValue_: function( index ) {\n\t\n\t    \t\t// copies a sample value to the result buffer\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t    \t\t\toffset = index * stride;\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tresult[ i ] = values[ offset + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t},\n\t\n\t    \t// Template methods for derived classes:\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tthrow new Error( \"call to abstract method\" );\n\t    \t\t// implementations shall return this.resultBuffer\n\t\n\t    \t},\n\t\n\t    \tintervalChanged_: function( i1, t0, t1 ) {\n\t\n\t    \t\t// empty\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( Interpolant.prototype, {\n\t\n\t    \tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n\t    \t\tInterpolant.prototype.copySampleValue_,\n\t\n\t    \tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n\t    \t\tInterpolant.prototype.copySampleValue_\n\t\n\t    } );\n\t\n\t    /**\n\t     * Fast and simple cubic spline interpolant.\n\t     *\n\t     * It was derived from a Hermitian construction setting the first derivative\n\t     * at each sample position to the linear slope between neighboring positions\n\t     * over their parameter interval.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function CubicInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    \tthis._weightPrev = -0;\n\t    \tthis._offsetPrev = -0;\n\t    \tthis._weightNext = -0;\n\t    \tthis._offsetNext = -0;\n\t\n\t    }\n\t\n\t    CubicInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: CubicInterpolant,\n\t\n\t    \tDefaultSettings_: {\n\t\n\t    \t\tendingStart: \tZeroCurvatureEnding,\n\t    \t\tendingEnd:\t\tZeroCurvatureEnding\n\t\n\t    \t},\n\t\n\t    \tintervalChanged_: function( i1, t0, t1 ) {\n\t\n\t    \t\tvar pp = this.parameterPositions,\n\t    \t\t\tiPrev = i1 - 2,\n\t    \t\t\tiNext = i1 + 1,\n\t\n\t    \t\t\ttPrev = pp[ iPrev ],\n\t    \t\t\ttNext = pp[ iNext ];\n\t\n\t    \t\tif ( tPrev === undefined ) {\n\t\n\t    \t\t\tswitch ( this.getSettings_().endingStart ) {\n\t\n\t    \t\t\t\tcase ZeroSlopeEnding:\n\t\n\t    \t\t\t\t\t// f'(t0) = 0\n\t    \t\t\t\t\tiPrev = i1;\n\t    \t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase WrapAroundEnding:\n\t\n\t    \t\t\t\t\t// use the other end of the curve\n\t    \t\t\t\t\tiPrev = pp.length - 2;\n\t    \t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault: // ZeroCurvatureEnding\n\t\n\t    \t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t    \t\t\t\t\tiPrev = i1;\n\t    \t\t\t\t\ttPrev = t1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( tNext === undefined ) {\n\t\n\t    \t\t\tswitch ( this.getSettings_().endingEnd ) {\n\t\n\t    \t\t\t\tcase ZeroSlopeEnding:\n\t\n\t    \t\t\t\t\t// f'(tN) = 0\n\t    \t\t\t\t\tiNext = i1;\n\t    \t\t\t\t\ttNext = 2 * t1 - t0;\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase WrapAroundEnding:\n\t\n\t    \t\t\t\t\t// use the other end of the curve\n\t    \t\t\t\t\tiNext = 1;\n\t    \t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault: // ZeroCurvatureEnding\n\t\n\t    \t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t    \t\t\t\t\tiNext = i1 - 1;\n\t    \t\t\t\t\ttNext = t0;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t    \t\t\tstride = this.valueSize;\n\t\n\t    \t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t    \t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t    \t\tthis._offsetPrev = iPrev * stride;\n\t    \t\tthis._offsetNext = iNext * stride;\n\t\n\t    \t},\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t    \t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t    \t\t\twP = this._weightPrev,\twN = this._weightNext,\n\t\n\t    \t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t    \t\t\tpp = p * p,\n\t    \t\t\tppp = pp * p;\n\t\n\t    \t\t// evaluate polynomials\n\t\n\t    \t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n\t    \t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n\t    \t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n\t    \t\tvar sN =       wN   * ppp   -           wN      * pp;\n\t\n\t    \t\t// combine data linearly\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tresult[ i ] =\n\t    \t\t\t\t\tsP * values[ oP + i ] +\n\t    \t\t\t\t\ts0 * values[ o0 + i ] +\n\t    \t\t\t\t\ts1 * values[ o1 + i ] +\n\t    \t\t\t\t\tsN * values[ oN + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author tschw\n\t     */\n\t\n\t    function LinearInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    }\n\t\n\t    LinearInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: LinearInterpolant,\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\toffset1 = i1 * stride,\n\t    \t\t\toffset0 = offset1 - stride,\n\t\n\t    \t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t    \t\t\tweight0 = 1 - weight1;\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tresult[ i ] =\n\t    \t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t    \t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * Interpolant that evaluates to the sample value at the position preceeding\n\t     * the parameter.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function DiscreteInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    }\n\t\n\t    DiscreteInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: DiscreteInterpolant,\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\treturn this.copySampleValue_( i1 - 1 );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var KeyframeTrackPrototype;\n\t\n\t    KeyframeTrackPrototype = {\n\t\n\t    \tTimeBufferType: Float32Array,\n\t    \tValueBufferType: Float32Array,\n\t\n\t    \tDefaultInterpolation: InterpolateLinear,\n\t\n\t    \tInterpolantFactoryMethodDiscrete: function( result ) {\n\t\n\t    \t\treturn new DiscreteInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tInterpolantFactoryMethodLinear: function( result ) {\n\t\n\t    \t\treturn new LinearInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tInterpolantFactoryMethodSmooth: function( result ) {\n\t\n\t    \t\treturn new CubicInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tsetInterpolation: function( interpolation ) {\n\t\n\t    \t\tvar factoryMethod;\n\t\n\t    \t\tswitch ( interpolation ) {\n\t\n\t    \t\t\tcase InterpolateDiscrete:\n\t\n\t    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase InterpolateLinear:\n\t\n\t    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\tcase InterpolateSmooth:\n\t\n\t    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( factoryMethod === undefined ) {\n\t\n\t    \t\t\tvar message = \"unsupported interpolation for \" +\n\t    \t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\t\n\t    \t\t\tif ( this.createInterpolant === undefined ) {\n\t\n\t    \t\t\t\t// fall back to default, unless the default itself is messed up\n\t    \t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\t\n\t    \t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tconsole.warn( message );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.createInterpolant = factoryMethod;\n\t\n\t    \t},\n\t\n\t    \tgetInterpolation: function() {\n\t\n\t    \t\tswitch ( this.createInterpolant ) {\n\t\n\t    \t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\n\t    \t\t\t\treturn InterpolateDiscrete;\n\t\n\t    \t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\n\t    \t\t\t\treturn InterpolateLinear;\n\t\n\t    \t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\n\t    \t\t\t\treturn InterpolateSmooth;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetValueSize: function() {\n\t\n\t    \t\treturn this.values.length / this.times.length;\n\t\n\t    \t},\n\t\n\t    \t// move all keyframes either forwards or backwards in time\n\t    \tshift: function( timeOffset ) {\n\t\n\t    \t\tif( timeOffset !== 0.0 ) {\n\t\n\t    \t\t\tvar times = this.times;\n\t\n\t    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\ttimes[ i ] += timeOffset;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t    \tscale: function( timeScale ) {\n\t\n\t    \t\tif( timeScale !== 1.0 ) {\n\t\n\t    \t\t\tvar times = this.times;\n\t\n\t    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\ttimes[ i ] *= timeScale;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t    \t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t    \ttrim: function( startTime, endTime ) {\n\t\n\t    \t\tvar times = this.times,\n\t    \t\t\tnKeys = times.length,\n\t    \t\t\tfrom = 0,\n\t    \t\t\tto = nKeys - 1;\n\t\n\t    \t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t    \t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\t\n\t    \t\t++ to; // inclusive -> exclusive bound\n\t\n\t    \t\tif( from !== 0 || to !== nKeys ) {\n\t\n\t    \t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t    \t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\t\n\t    \t\t\tvar stride = this.getValueSize();\n\t    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, from, to );\n\t    \t\t\tthis.values = exports.AnimationUtils.\n\t    \t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t    \tvalidate: function() {\n\t\n\t    \t\tvar valid = true;\n\t\n\t    \t\tvar valueSize = this.getValueSize();\n\t    \t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\t\n\t    \t\t\tconsole.error( \"invalid value size in track\", this );\n\t    \t\t\tvalid = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar times = this.times,\n\t    \t\t\tvalues = this.values,\n\t\n\t    \t\t\tnKeys = times.length;\n\t\n\t    \t\tif( nKeys === 0 ) {\n\t\n\t    \t\t\tconsole.error( \"track is empty\", this );\n\t    \t\t\tvalid = false;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar prevTime = null;\n\t\n\t    \t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\t\n\t    \t\t\tvar currTime = times[ i ];\n\t\n\t    \t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\t\n\t    \t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n\t    \t\t\t\tvalid = false;\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif( prevTime !== null && prevTime > currTime ) {\n\t\n\t    \t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n\t    \t\t\t\tvalid = false;\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tprevTime = currTime;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( values !== undefined ) {\n\t\n\t    \t\t\tif ( exports.AnimationUtils.isTypedArray( values ) ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tvar value = values[ i ];\n\t\n\t    \t\t\t\t\tif ( isNaN( value ) ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n\t    \t\t\t\t\t\tvalid = false;\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn valid;\n\t\n\t    \t},\n\t\n\t    \t// removes equivalent sequential keys as common in morph target sequences\n\t    \t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t    \toptimize: function() {\n\t\n\t    \t\tvar times = this.times,\n\t    \t\t\tvalues = this.values,\n\t    \t\t\tstride = this.getValueSize(),\n\t\n\t    \t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\n\t    \t\t\twriteIndex = 1,\n\t    \t\t\tlastIndex = times.length - 1;\n\t\n\t    \t\tfor( var i = 1; i < lastIndex; ++ i ) {\n\t\n\t    \t\t\tvar keep = false;\n\t\n\t    \t\t\tvar time = times[ i ];\n\t    \t\t\tvar timeNext = times[ i + 1 ];\n\t\n\t    \t\t\t// remove adjacent keyframes scheduled at the same time\n\t\n\t    \t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\t\n\t    \t\t\t\tif ( ! smoothInterpolation ) {\n\t\n\t    \t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\n\t    \t\t\t\t\tvar offset = i * stride,\n\t    \t\t\t\t\t\toffsetP = offset - stride,\n\t    \t\t\t\t\t\toffsetN = offset + stride;\n\t\n\t    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\t\n\t    \t\t\t\t\t\tvar value = values[ offset + j ];\n\t\n\t    \t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t    \t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\t\n\t    \t\t\t\t\t\t\tkeep = true;\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else keep = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// in-place compaction\n\t\n\t    \t\t\tif ( keep ) {\n\t\n\t    \t\t\t\tif ( i !== writeIndex ) {\n\t\n\t    \t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\t\n\t    \t\t\t\t\tvar readOffset = i * stride,\n\t    \t\t\t\t\t\twriteOffset = writeIndex * stride;\n\t\n\t    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j )\n\t\n\t    \t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t++ writeIndex;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// flush last keyframe (compaction looks ahead)\n\t\n\t    \t\tif ( lastIndex > 0 ) {\n\t\n\t    \t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\t\n\t    \t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )\n\t\n\t    \t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\t\n\t    \t\t\t++ writeIndex;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( writeIndex !== times.length ) {\n\t\n\t    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, 0, writeIndex );\n\t    \t\t\tthis.values = exports.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    function KeyframeTrackConstructor( name, times, values, interpolation ) {\n\t\n\t    \tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\t\n\t    \tif( times === undefined || times.length === 0 ) {\n\t\n\t    \t\tthrow new Error( \"no keyframes in track named \" + name );\n\t\n\t    \t}\n\t\n\t    \tthis.name = name;\n\t\n\t    \tthis.times = exports.AnimationUtils.convertArray( times, this.TimeBufferType );\n\t    \tthis.values = exports.AnimationUtils.convertArray( values, this.ValueBufferType );\n\t\n\t    \tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\t\n\t    \tthis.validate();\n\t    \tthis.optimize();\n\t\n\t    }\n\t\n\t    /**\n\t     *\n\t     * A Track of vectored keyframe values.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function VectorKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    VectorKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: VectorKeyframeTrack,\n\t\n\t    \tValueTypeName: 'vector'\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \t// DefaultInterpolation is inherited\n\t\n\t    } );\n\t\n\t    /**\n\t     * Spherical linear unit quaternion interpolant.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function QuaternionLinearInterpolant(\n\t    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t    \tInterpolant.call(\n\t    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t    }\n\t\n\t    QuaternionLinearInterpolant.prototype =\n\t    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\t\n\t    \tconstructor: QuaternionLinearInterpolant,\n\t\n\t    \tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t    \t\tvar result = this.resultBuffer,\n\t    \t\t\tvalues = this.sampleValues,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\toffset = i1 * stride,\n\t\n\t    \t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\t\n\t    \t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\t\n\t    \t\t\tQuaternion.slerpFlat( result, 0,\n\t    \t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn result;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of quaternion keyframe values.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    QuaternionKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: QuaternionKeyframeTrack,\n\t\n\t    \tValueTypeName: 'quaternion',\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \tDefaultInterpolation: InterpolateLinear,\n\t\n\t    \tInterpolantFactoryMethodLinear: function( result ) {\n\t\n\t    \t\treturn new QuaternionLinearInterpolant(\n\t    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t    \t},\n\t\n\t    \tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of numeric keyframe values.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function NumberKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    NumberKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: NumberKeyframeTrack,\n\t\n\t    \tValueTypeName: 'number',\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \t// DefaultInterpolation is inherited\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track that interpolates Strings\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function StringKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    StringKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: StringKeyframeTrack,\n\t\n\t    \tValueTypeName: 'string',\n\t    \tValueBufferType: Array,\n\t\n\t    \tDefaultInterpolation: InterpolateDiscrete,\n\t\n\t    \tInterpolantFactoryMethodLinear: undefined,\n\t\n\t    \tInterpolantFactoryMethodSmooth: undefined\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of Boolean keyframe values.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function BooleanKeyframeTrack( name, times, values ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values );\n\t\n\t    }\n\t\n\t    BooleanKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: BooleanKeyframeTrack,\n\t\n\t    \tValueTypeName: 'bool',\n\t    \tValueBufferType: Array,\n\t\n\t    \tDefaultInterpolation: InterpolateDiscrete,\n\t\n\t    \tInterpolantFactoryMethodLinear: undefined,\n\t    \tInterpolantFactoryMethodSmooth: undefined\n\t\n\t    \t// Note: Actually this track could have a optimized / compressed\n\t    \t// representation of a single value and a custom interpolant that\n\t    \t// computes \"firstValue ^ isOdd( index )\".\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A Track of keyframe values that represent color.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function ColorKeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\t\n\t    }\n\t\n\t    ColorKeyframeTrack.prototype =\n\t    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\t\n\t    \tconstructor: ColorKeyframeTrack,\n\t\n\t    \tValueTypeName: 'color'\n\t\n\t    \t// ValueBufferType is inherited\n\t\n\t    \t// DefaultInterpolation is inherited\n\t\n\t\n\t    \t// Note: Very basic implementation and nothing special yet.\n\t    \t// However, this is the place for color space parameterization.\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * A timed sequence of keyframes for a specific property.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function KeyframeTrack( name, times, values, interpolation ) {\n\t\n\t    \tKeyframeTrackConstructor.apply( this, arguments );\n\t\n\t    }\n\t\n\t    KeyframeTrack.prototype = KeyframeTrackPrototype;\n\t    KeyframeTrackPrototype.constructor = KeyframeTrack;\n\t\n\t    // Static methods:\n\t\n\t    Object.assign( KeyframeTrack, {\n\t\n\t    \t// Serialization (in static context, because of constructor invocation\n\t    \t// and automatic invocation of .toJSON):\n\t\n\t    \tparse: function( json ) {\n\t\n\t    \t\tif( json.type === undefined ) {\n\t\n\t    \t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\t\n\t    \t\tif ( json.times === undefined ) {\n\t\n\t    \t\t\tvar times = [], values = [];\n\t\n\t    \t\t\texports.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\t\n\t    \t\t\tjson.times = times;\n\t    \t\t\tjson.values = values;\n\t\n\t    \t\t}\n\t\n\t    \t\t// derived classes can define a static parse method\n\t    \t\tif ( trackType.parse !== undefined ) {\n\t\n\t    \t\t\treturn trackType.parse( json );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// by default, we asssume a constructor compatible with the base\n\t    \t\t\treturn new trackType(\n\t    \t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \ttoJSON: function( track ) {\n\t\n\t    \t\tvar trackType = track.constructor;\n\t\n\t    \t\tvar json;\n\t\n\t    \t\t// derived classes can define a static toJSON method\n\t    \t\tif ( trackType.toJSON !== undefined ) {\n\t\n\t    \t\t\tjson = trackType.toJSON( track );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// by default, we assume the data can be serialized as-is\n\t    \t\t\tjson = {\n\t\n\t    \t\t\t\t'name': track.name,\n\t    \t\t\t\t'times': exports.AnimationUtils.convertArray( track.times, Array ),\n\t    \t\t\t\t'values': exports.AnimationUtils.convertArray( track.values, Array )\n\t\n\t    \t\t\t};\n\t\n\t    \t\t\tvar interpolation = track.getInterpolation();\n\t\n\t    \t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\t\n\t    \t\t\t\tjson.interpolation = interpolation;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tjson.type = track.ValueTypeName; // mandatory\n\t\n\t    \t\treturn json;\n\t\n\t    \t},\n\t\n\t    \t_getTrackTypeForValueTypeName: function( typeName ) {\n\t\n\t    \t\tswitch( typeName.toLowerCase() ) {\n\t\n\t    \t\t\tcase \"scalar\":\n\t    \t\t\tcase \"double\":\n\t    \t\t\tcase \"float\":\n\t    \t\t\tcase \"number\":\n\t    \t\t\tcase \"integer\":\n\t\n\t    \t\t\t\treturn NumberKeyframeTrack;\n\t\n\t    \t\t\tcase \"vector\":\n\t    \t\t\tcase \"vector2\":\n\t    \t\t\tcase \"vector3\":\n\t    \t\t\tcase \"vector4\":\n\t\n\t    \t\t\t\treturn VectorKeyframeTrack;\n\t\n\t    \t\t\tcase \"color\":\n\t\n\t    \t\t\t\treturn ColorKeyframeTrack;\n\t\n\t    \t\t\tcase \"quaternion\":\n\t\n\t    \t\t\t\treturn QuaternionKeyframeTrack;\n\t\n\t    \t\t\tcase \"bool\":\n\t    \t\t\tcase \"boolean\":\n\t\n\t    \t\t\t\treturn BooleanKeyframeTrack;\n\t\n\t    \t\t\tcase \"string\":\n\t\n\t    \t\t\t\treturn StringKeyframeTrack;\n\t\n\t    \t\t}\n\t\n\t    \t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * Reusable set of Tracks that represent an animation.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     */\n\t\n\t    function AnimationClip( name, duration, tracks ) {\n\t\n\t    \tthis.name = name;\n\t    \tthis.tracks = tracks;\n\t    \tthis.duration = ( duration !== undefined ) ? duration : -1;\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \t// this means it should figure out its duration by scanning the tracks\n\t    \tif ( this.duration < 0 ) {\n\t\n\t    \t\tthis.resetDuration();\n\t\n\t    \t}\n\t\n\t    \tthis.optimize();\n\t\n\t    }\n\t\n\t    AnimationClip.prototype = {\n\t\n\t    \tconstructor: AnimationClip,\n\t\n\t    \tresetDuration: function() {\n\t\n\t    \t\tvar tracks = this.tracks,\n\t    \t\t\tduration = 0;\n\t\n\t    \t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar track = this.tracks[ i ];\n\t\n\t    \t\t\tduration = Math.max(\n\t    \t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.duration = duration;\n\t\n\t    \t},\n\t\n\t    \ttrim: function() {\n\t\n\t    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\t\n\t    \t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \toptimize: function() {\n\t\n\t    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\t\n\t    \t\t\tthis.tracks[ i ].optimize();\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    // Static methods:\n\t\n\t    Object.assign( AnimationClip, {\n\t\n\t    \tparse: function( json ) {\n\t\n\t    \t\tvar tracks = [],\n\t    \t\t\tjsonTracks = json.tracks,\n\t    \t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\t\n\t    \t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\t\n\t    \t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn new AnimationClip( json.name, json.duration, tracks );\n\t\n\t    \t},\n\t\n\t\n\t    \ttoJSON: function( clip ) {\n\t\n\t    \t\tvar tracks = [],\n\t    \t\t\tclipTracks = clip.tracks;\n\t\n\t    \t\tvar json = {\n\t\n\t    \t\t\t'name': clip.name,\n\t    \t\t\t'duration': clip.duration,\n\t    \t\t\t'tracks': tracks\n\t\n\t    \t\t};\n\t\n\t    \t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\t\n\t    \t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn json;\n\t\n\t    \t},\n\t\n\t\n\t    \tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\t\n\t    \t\tvar numMorphTargets = morphTargetSequence.length;\n\t    \t\tvar tracks = [];\n\t\n\t    \t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\t\n\t    \t\t\tvar times = [];\n\t    \t\t\tvar values = [];\n\t\n\t    \t\t\ttimes.push(\n\t    \t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t    \t\t\t\t\ti,\n\t    \t\t\t\t\t( i + 1 ) % numMorphTargets );\n\t\n\t    \t\t\tvalues.push( 0, 1, 0 );\n\t\n\t    \t\t\tvar order = exports.AnimationUtils.getKeyframeOrder( times );\n\t    \t\t\ttimes = exports.AnimationUtils.sortedArray( times, 1, order );\n\t    \t\t\tvalues = exports.AnimationUtils.sortedArray( values, 1, order );\n\t\n\t    \t\t\t// if there is a key at the first frame, duplicate it as the\n\t    \t\t\t// last frame as well for perfect loop.\n\t    \t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\t\n\t    \t\t\t\ttimes.push( numMorphTargets );\n\t    \t\t\t\tvalues.push( values[ 0 ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ttracks.push(\n\t    \t\t\t\t\tnew NumberKeyframeTrack(\n\t    \t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t    \t\t\t\t\t\ttimes, values\n\t    \t\t\t\t\t).scale( 1.0 / fps ) );\n\t    \t\t}\n\t\n\t    \t\treturn new AnimationClip( name, -1, tracks );\n\t\n\t    \t},\n\t\n\t    \tfindByName: function( objectOrClipArray, name ) {\n\t\n\t    \t\tvar clipArray = objectOrClipArray;\n\t\n\t    \t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\t\n\t    \t\t\tvar o = objectOrClipArray;\n\t    \t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\t\n\t    \t\t\tif ( clipArray[ i ].name === name ) {\n\t\n\t    \t\t\t\treturn clipArray[ i ];\n\t\n\t    \t\t\t}\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t},\n\t\n\t    \tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\t\n\t    \t\tvar animationToMorphTargets = {};\n\t\n\t    \t\t// tested with https://regex101.com/ on trick sequences\n\t    \t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t    \t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\t\n\t    \t\t// sort morph target names into animation groups based\n\t    \t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t    \t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\t\n\t    \t\t\tvar morphTarget = morphTargets[ i ];\n\t    \t\t\tvar parts = morphTarget.name.match( pattern );\n\t\n\t    \t\t\tif ( parts && parts.length > 1 ) {\n\t\n\t    \t\t\t\tvar name = parts[ 1 ];\n\t\n\t    \t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t    \t\t\t\tif ( ! animationMorphTargets ) {\n\t\n\t    \t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tanimationMorphTargets.push( morphTarget );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar clips = [];\n\t\n\t    \t\tfor ( var name in animationToMorphTargets ) {\n\t\n\t    \t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn clips;\n\t\n\t    \t},\n\t\n\t    \t// parse the animation.hierarchy format\n\t    \tparseAnimation: function( animation, bones ) {\n\t\n\t    \t\tif ( ! animation ) {\n\t\n\t    \t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar addNonemptyTrack = function(\n\t    \t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\t\n\t    \t\t\t// only return track if there are actually keys.\n\t    \t\t\tif ( animationKeys.length !== 0 ) {\n\t\n\t    \t\t\t\tvar times = [];\n\t    \t\t\t\tvar values = [];\n\t\n\t    \t\t\t\texports.AnimationUtils.flattenJSON(\n\t    \t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\t\n\t    \t\t\t\t// empty keys are filtered out, so check again\n\t    \t\t\t\tif ( times.length !== 0 ) {\n\t\n\t    \t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t\tvar tracks = [];\n\t\n\t    \t\tvar clipName = animation.name || 'default';\n\t    \t\t// automatic length determination in AnimationClip.\n\t    \t\tvar duration = animation.length || -1;\n\t    \t\tvar fps = animation.fps || 30;\n\t\n\t    \t\tvar hierarchyTracks = animation.hierarchy || [];\n\t\n\t    \t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\t\n\t    \t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\t\n\t    \t\t\t// skip empty tracks\n\t    \t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\t\n\t    \t\t\t// process morph targets in a way exactly compatible\n\t    \t\t\t// with AnimationHandler.init( animation )\n\t    \t\t\tif ( animationKeys[0].morphTargets ) {\n\t\n\t    \t\t\t\t// figure out all morph targets used in this track\n\t    \t\t\t\tvar morphTargetNames = {};\n\t    \t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\t\n\t    \t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\t\n\t    \t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\t\n\t    \t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\t// create a track for each morph target with all zero\n\t    \t\t\t\t// morphTargetInfluences except for the keys in which\n\t    \t\t\t\t// the morphTarget is named.\n\t    \t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\t\n\t    \t\t\t\t\tvar times = [];\n\t    \t\t\t\t\tvar values = [];\n\t\n\t    \t\t\t\t\tfor ( var m = 0;\n\t    \t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\t\n\t    \t\t\t\t\t\tvar animationKey = animationKeys[k];\n\t\n\t    \t\t\t\t\t\ttimes.push( animationKey.time );\n\t    \t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\ttracks.push( new NumberKeyframeTrack(\n\t    \t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\t\n\t    \t\t\t} else {\n\t    \t\t\t\t// ...assume skeletal animation\n\t\n\t    \t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\t\n\t    \t\t\t\taddNonemptyTrack(\n\t    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t    \t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\t\n\t    \t\t\t\taddNonemptyTrack(\n\t    \t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t    \t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\t\n\t    \t\t\t\taddNonemptyTrack(\n\t    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t    \t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( tracks.length === 0 ) {\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\t\n\t    \t\treturn clip;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function MaterialLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t    \tthis.textures = {};\n\t\n\t    }\n\t\n\t    Object.assign( MaterialLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( scope.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tsetTextures: function ( value ) {\n\t\n\t    \t\tthis.textures = value;\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json ) {\n\t\n\t    \t\tvar textures = this.textures;\n\t\n\t    \t\tfunction getTexture( name ) {\n\t\n\t    \t\t\tif ( textures[ name ] === undefined ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn textures[ name ];\n\t\n\t    \t\t}\n\t\n\t    \t\tvar material = new Materials[ json.type ]();\n\t\n\t    \t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t    \t\tif ( json.name !== undefined ) material.name = json.name;\n\t    \t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t    \t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t    \t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t    \t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t    \t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t    \t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t    \t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t    \t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t    \t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t    \t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t    \t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t    \t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t    \t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t    \t\tif ( json.side !== undefined ) material.side = json.side;\n\t    \t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t    \t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t    \t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t    \t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t    \t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t    \t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t    \t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t    \t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t    \t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t    \t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\t    \t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t    \t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\t\n\t    \t\t// for PointsMaterial\n\t\n\t    \t\tif ( json.size !== undefined ) material.size = json.size;\n\t    \t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\t\n\t    \t\t// maps\n\t\n\t    \t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\n\t    \t\tif ( json.alphaMap !== undefined ) {\n\t\n\t    \t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t    \t\t\tmaterial.transparent = true;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t    \t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\t\n\t    \t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t    \t\tif ( json.normalScale !== undefined ) {\n\t\n\t    \t\t\tvar normalScale = json.normalScale;\n\t\n\t    \t\t\tif ( Array.isArray( normalScale ) === false ) {\n\t\n\t    \t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\n\t    \t\t\t\tnormalScale = [ normalScale, normalScale ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t    \t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t    \t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\t\n\t    \t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t    \t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\t\n\t    \t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t    \t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\t\n\t    \t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\n\t    \t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\n\t    \t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\n\t    \t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t    \t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\t\n\t    \t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t    \t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\t\n\t    \t\t// MultiMaterial\n\t\n\t    \t\tif ( json.materials !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn material;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BufferGeometryLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( BufferGeometryLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( scope.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json ) {\n\t\n\t    \t\tvar geometry = new BufferGeometry();\n\t\n\t    \t\tvar index = json.data.index;\n\t\n\t    \t\tvar TYPED_ARRAYS = {\n\t    \t\t\t'Int8Array': Int8Array,\n\t    \t\t\t'Uint8Array': Uint8Array,\n\t    \t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n\t    \t\t\t'Int16Array': Int16Array,\n\t    \t\t\t'Uint16Array': Uint16Array,\n\t    \t\t\t'Int32Array': Int32Array,\n\t    \t\t\t'Uint32Array': Uint32Array,\n\t    \t\t\t'Float32Array': Float32Array,\n\t    \t\t\t'Float64Array': Float64Array\n\t    \t\t};\n\t\n\t    \t\tif ( index !== undefined ) {\n\t\n\t    \t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t    \t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar attributes = json.data.attributes;\n\t\n\t    \t\tfor ( var key in attributes ) {\n\t\n\t    \t\t\tvar attribute = attributes[ key ];\n\t    \t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\n\t    \t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\t\n\t    \t\tif ( groups !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar group = groups[ i ];\n\t\n\t    \t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar boundingSphere = json.data.boundingSphere;\n\t\n\t    \t\tif ( boundingSphere !== undefined ) {\n\t\n\t    \t\t\tvar center = new Vector3();\n\t\n\t    \t\t\tif ( boundingSphere.center !== undefined ) {\n\t\n\t    \t\t\t\tcenter.fromArray( boundingSphere.center );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Loader() {\n\t\n\t    \tthis.onLoadStart = function () {};\n\t    \tthis.onLoadProgress = function () {};\n\t    \tthis.onLoadComplete = function () {};\n\t\n\t    }\n\t\n\t    Loader.prototype = {\n\t\n\t    \tconstructor: Loader,\n\t\n\t    \tcrossOrigin: undefined,\n\t\n\t    \textractUrlBase: function ( url ) {\n\t\n\t    \t\tvar parts = url.split( '/' );\n\t\n\t    \t\tif ( parts.length === 1 ) return './';\n\t\n\t    \t\tparts.pop();\n\t\n\t    \t\treturn parts.join( '/' ) + '/';\n\t\n\t    \t},\n\t\n\t    \tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\t\n\t    \t\tvar array = [];\n\t\n\t    \t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\t\n\t    \t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn array;\n\t\n\t    \t},\n\t\n\t    \tcreateMaterial: ( function () {\n\t\n\t    \t\tvar color, textureLoader, materialLoader;\n\t\n\t    \t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\t\n\t    \t\t\tif ( color === undefined ) color = new Color();\n\t    \t\t\tif ( textureLoader === undefined ) textureLoader = new TextureLoader();\n\t    \t\t\tif ( materialLoader === undefined ) materialLoader = new MaterialLoader();\n\t\n\t    \t\t\t// convert from old material format\n\t\n\t    \t\t\tvar textures = {};\n\t\n\t    \t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\t\n\t    \t\t\t\tvar fullPath = texturePath + path;\n\t    \t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\t\n\t    \t\t\t\tvar texture;\n\t\n\t    \t\t\t\tif ( loader !== null ) {\n\t\n\t    \t\t\t\t\ttexture = loader.load( fullPath );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t    \t\t\t\t\ttexture = textureLoader.load( fullPath );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( repeat !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.repeat.fromArray( repeat );\n\t\n\t    \t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t    \t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( offset !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.offset.fromArray( offset );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( wrap !== undefined ) {\n\t\n\t    \t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t    \t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\t\n\t    \t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t    \t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( anisotropy !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.anisotropy = anisotropy;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar uuid = exports.Math.generateUUID();\n\t\n\t    \t\t\t\ttextures[ uuid ] = texture;\n\t\n\t    \t\t\t\treturn uuid;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t//\n\t\n\t    \t\t\tvar json = {\n\t    \t\t\t\tuuid: exports.Math.generateUUID(),\n\t    \t\t\t\ttype: 'MeshLambertMaterial'\n\t    \t\t\t};\n\t\n\t    \t\t\tfor ( var name in m ) {\n\t\n\t    \t\t\t\tvar value = m[ name ];\n\t\n\t    \t\t\t\tswitch ( name ) {\n\t    \t\t\t\t\tcase 'DbgColor':\n\t    \t\t\t\t\tcase 'DbgIndex':\n\t    \t\t\t\t\tcase 'opticalDensity':\n\t    \t\t\t\t\tcase 'illumination':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'DbgName':\n\t    \t\t\t\t\t\tjson.name = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'blending':\n\t    \t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorAmbient':\n\t    \t\t\t\t\tcase 'mapAmbient':\n\t    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorDiffuse':\n\t    \t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorSpecular':\n\t    \t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'colorEmissive':\n\t    \t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'specularCoef':\n\t    \t\t\t\t\t\tjson.shininess = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'shading':\n\t    \t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t    \t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t    \t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapDiffuse':\n\t    \t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapDiffuseRepeat':\n\t    \t\t\t\t\tcase 'mapDiffuseOffset':\n\t    \t\t\t\t\tcase 'mapDiffuseWrap':\n\t    \t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapEmissive':\n\t    \t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapEmissiveRepeat':\n\t    \t\t\t\t\tcase 'mapEmissiveOffset':\n\t    \t\t\t\t\tcase 'mapEmissiveWrap':\n\t    \t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapLight':\n\t    \t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapLightRepeat':\n\t    \t\t\t\t\tcase 'mapLightOffset':\n\t    \t\t\t\t\tcase 'mapLightWrap':\n\t    \t\t\t\t\tcase 'mapLightAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAO':\n\t    \t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAORepeat':\n\t    \t\t\t\t\tcase 'mapAOOffset':\n\t    \t\t\t\t\tcase 'mapAOWrap':\n\t    \t\t\t\t\tcase 'mapAOAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapBump':\n\t    \t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapBumpScale':\n\t    \t\t\t\t\t\tjson.bumpScale = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapBumpRepeat':\n\t    \t\t\t\t\tcase 'mapBumpOffset':\n\t    \t\t\t\t\tcase 'mapBumpWrap':\n\t    \t\t\t\t\tcase 'mapBumpAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapNormal':\n\t    \t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapNormalFactor':\n\t    \t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapNormalRepeat':\n\t    \t\t\t\t\tcase 'mapNormalOffset':\n\t    \t\t\t\t\tcase 'mapNormalWrap':\n\t    \t\t\t\t\tcase 'mapNormalAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapSpecular':\n\t    \t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapSpecularRepeat':\n\t    \t\t\t\t\tcase 'mapSpecularOffset':\n\t    \t\t\t\t\tcase 'mapSpecularWrap':\n\t    \t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapMetalness':\n\t    \t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapMetalnessRepeat':\n\t    \t\t\t\t\tcase 'mapMetalnessOffset':\n\t    \t\t\t\t\tcase 'mapMetalnessWrap':\n\t    \t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapRoughness':\n\t    \t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapRoughnessRepeat':\n\t    \t\t\t\t\tcase 'mapRoughnessOffset':\n\t    \t\t\t\t\tcase 'mapRoughnessWrap':\n\t    \t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAlpha':\n\t    \t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'mapAlphaRepeat':\n\t    \t\t\t\t\tcase 'mapAlphaOffset':\n\t    \t\t\t\t\tcase 'mapAlphaWrap':\n\t    \t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'flipSided':\n\t    \t\t\t\t\t\tjson.side = BackSide;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'doubleSided':\n\t    \t\t\t\t\t\tjson.side = DoubleSide;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'transparency':\n\t    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t    \t\t\t\t\t\tjson.opacity = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'depthTest':\n\t    \t\t\t\t\tcase 'depthWrite':\n\t    \t\t\t\t\tcase 'colorWrite':\n\t    \t\t\t\t\tcase 'opacity':\n\t    \t\t\t\t\tcase 'reflectivity':\n\t    \t\t\t\t\tcase 'transparent':\n\t    \t\t\t\t\tcase 'visible':\n\t    \t\t\t\t\tcase 'wireframe':\n\t    \t\t\t\t\t\tjson[ name ] = value;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tcase 'vertexColors':\n\t    \t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t    \t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t\tdefault:\n\t    \t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t    \t\t\t\t\t\tbreak;\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t    \t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\t\n\t    \t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\t\n\t    \t\t\tmaterialLoader.setTextures( textures );\n\t\n\t    \t\t\treturn materialLoader.parse( json );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    };\n\t\n\t    Loader.Handlers = {\n\t\n\t    \thandlers: [],\n\t\n\t    \tadd: function ( regex, loader ) {\n\t\n\t    \t\tthis.handlers.push( regex, loader );\n\t\n\t    \t},\n\t\n\t    \tget: function ( file ) {\n\t\n\t    \t\tvar handlers = this.handlers;\n\t\n\t    \t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\t\n\t    \t\t\tvar regex = handlers[ i ];\n\t    \t\t\tvar loader  = handlers[ i + 1 ];\n\t\n\t    \t\t\tif ( regex.test( file ) ) {\n\t\n\t    \t\t\t\treturn loader;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function JSONLoader( manager ) {\n\t\n\t    \tif ( typeof manager === 'boolean' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t    \t\tmanager = undefined;\n\t\n\t    \t}\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    \tthis.withCredentials = false;\n\t\n\t    }\n\t\n\t    Object.assign( JSONLoader.prototype, {\n\t\n\t    \tload: function( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setWithCredentials( this.withCredentials );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tvar json = JSON.parse( text );\n\t    \t\t\tvar metadata = json.metadata;\n\t\n\t    \t\t\tif ( metadata !== undefined ) {\n\t\n\t    \t\t\t\tvar type = metadata.type;\n\t\n\t    \t\t\t\tif ( type !== undefined ) {\n\t\n\t    \t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar object = scope.parse( json, texturePath );\n\t    \t\t\tonLoad( object.geometry, object.materials );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tsetTexturePath: function ( value ) {\n\t\n\t    \t\tthis.texturePath = value;\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json, texturePath ) {\n\t\n\t    \t\tvar geometry = new Geometry(),\n\t    \t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\t\n\t    \t\tparseModel( scale );\n\t\n\t    \t\tparseSkin();\n\t    \t\tparseMorphing( scale );\n\t    \t\tparseAnimations();\n\t\n\t    \t\tgeometry.computeFaceNormals();\n\t    \t\tgeometry.computeBoundingSphere();\n\t\n\t    \t\tfunction parseModel( scale ) {\n\t\n\t    \t\t\tfunction isBitSet( value, position ) {\n\t\n\t    \t\t\t\treturn value & ( 1 << position );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar i, j, fi,\n\t\n\t    \t\t\toffset, zLength,\n\t\n\t    \t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\t\n\t    \t\t\ttype,\n\t    \t\t\tisQuad,\n\t    \t\t\thasMaterial,\n\t    \t\t\thasFaceVertexUv,\n\t    \t\t\thasFaceNormal, hasFaceVertexNormal,\n\t    \t\t\thasFaceColor, hasFaceVertexColor,\n\t\n\t    \t\tvertex, face, faceA, faceB, hex, normal,\n\t\n\t    \t\t\tuvLayer, uv, u, v,\n\t\n\t    \t\t\tfaces = json.faces,\n\t    \t\t\tvertices = json.vertices,\n\t    \t\t\tnormals = json.normals,\n\t    \t\t\tcolors = json.colors,\n\t\n\t    \t\t\tnUvLayers = 0;\n\t\n\t    \t\t\tif ( json.uvs !== undefined ) {\n\t\n\t    \t\t\t\t// disregard empty arrays\n\t\n\t    \t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t    \t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\toffset = 0;\n\t    \t\t\tzLength = vertices.length;\n\t\n\t    \t\t\twhile ( offset < zLength ) {\n\t\n\t    \t\t\t\tvertex = new Vector3();\n\t\n\t    \t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t    \t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t    \t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\t\n\t    \t\t\t\tgeometry.vertices.push( vertex );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\toffset = 0;\n\t    \t\t\tzLength = faces.length;\n\t\n\t    \t\t\twhile ( offset < zLength ) {\n\t\n\t    \t\t\t\ttype = faces[ offset ++ ];\n\t\n\t\n\t    \t\t\t\tisQuad              = isBitSet( type, 0 );\n\t    \t\t\t\thasMaterial         = isBitSet( type, 1 );\n\t    \t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t    \t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t    \t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t    \t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t    \t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\t\n\t    \t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\t\n\t    \t\t\t\tif ( isQuad ) {\n\t\n\t    \t\t\t\t\tfaceA = new Face3();\n\t    \t\t\t\t\tfaceA.a = faces[ offset ];\n\t    \t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t    \t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\t\n\t    \t\t\t\t\tfaceB = new Face3();\n\t    \t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t    \t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t    \t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\t\n\t    \t\t\t\t\toffset += 4;\n\t\n\t    \t\t\t\t\tif ( hasMaterial ) {\n\t\n\t    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t    \t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// to get face <=> uv index correspondence\n\t\n\t    \t\t\t\t\tfi = geometry.faces.length;\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\t\n\t    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\t\n\t    \t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\t\n\t    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\t\n\t    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\t\n\t    \t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t    \t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceNormal ) {\n\t\n\t    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\tfaceA.normal.set(\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\t\tnormal = new Vector3(\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t\t);\n\t\n\t\n\t    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceColor ) {\n\t\n\t    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\thex = colors[ colorIndex ];\n\t\n\t    \t\t\t\t\t\tfaceA.color.setHex( hex );\n\t    \t\t\t\t\t\tfaceB.color.setHex( hex );\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\t\thex = colors[ colorIndex ];\n\t\n\t    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tgeometry.faces.push( faceA );\n\t    \t\t\t\t\tgeometry.faces.push( faceB );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tface = new Face3();\n\t    \t\t\t\t\tface.a = faces[ offset ++ ];\n\t    \t\t\t\t\tface.b = faces[ offset ++ ];\n\t    \t\t\t\t\tface.c = faces[ offset ++ ];\n\t\n\t    \t\t\t\t\tif ( hasMaterial ) {\n\t\n\t    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\tface.materialIndex = materialIndex;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// to get face <=> uv index correspondence\n\t\n\t    \t\t\t\t\tfi = geometry.faces.length;\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\t\n\t    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\n\t    \t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\t\n\t    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\t\n\t    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\t\n\t    \t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceNormal ) {\n\t\n\t    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\tface.normal.set(\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t    \t\t\t\t\t\t\tnormal = new Vector3(\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t    \t\t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceColor ) {\n\t\n\t    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\t\n\t    \t\t\t\t\t}\n\t\n\t\n\t    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\t\n\t    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\t\n\t    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t    \t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tgeometry.faces.push( face );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction parseSkin() {\n\t\n\t    \t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\t\n\t    \t\t\tif ( json.skinWeights ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\t\n\t    \t\t\t\t\tvar x =                               json.skinWeights[ i ];\n\t    \t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t    \t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t    \t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\t\n\t    \t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.skinIndices ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\t\n\t    \t\t\t\t\tvar a =                               json.skinIndices[ i ];\n\t    \t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t    \t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t    \t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\t\n\t    \t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tgeometry.bones = json.bones;\n\t\n\t    \t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\t\n\t    \t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t    \t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction parseMorphing( scale ) {\n\t\n\t    \t\t\tif ( json.morphTargets !== undefined ) {\n\t\n\t    \t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t    \t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t    \t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\t\n\t    \t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t    \t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\t\n\t    \t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\t\n\t    \t\t\t\t\t\tvar vertex = new Vector3();\n\t    \t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t    \t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t    \t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\t\n\t    \t\t\t\t\t\tdstVertices.push( vertex );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\t\n\t    \t\t\t\tvar faces = geometry.faces;\n\t    \t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\t\n\t    \t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction parseAnimations() {\n\t\n\t    \t\t\tvar outputAnimations = [];\n\t\n\t    \t\t\t// parse old style Bone/Hierarchy animations\n\t    \t\t\tvar animations = [];\n\t\n\t    \t\t\tif ( json.animation !== undefined ) {\n\t\n\t    \t\t\t\tanimations.push( json.animation );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( json.animations !== undefined ) {\n\t\n\t    \t\t\t\tif ( json.animations.length ) {\n\t\n\t    \t\t\t\t\tanimations = animations.concat( json.animations );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\tanimations.push( json.animations );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\t\n\t    \t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t    \t\t\t\tif ( clip ) outputAnimations.push( clip );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// parse implicit morph animations\n\t    \t\t\tif ( geometry.morphTargets ) {\n\t\n\t    \t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t    \t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t    \t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\t\n\t    \t\t\treturn { geometry: geometry };\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\t\n\t    \t\t\treturn { geometry: geometry, materials: materials };\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function ObjectLoader ( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t    \tthis.texturePath = '';\n\t\n\t    }\n\t\n\t    Object.assign( ObjectLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tif ( this.texturePath === '' ) {\n\t\n\t    \t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\t\n\t    \t\t}\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( scope.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tscope.parse( JSON.parse( text ), onLoad );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tsetTexturePath: function ( value ) {\n\t\n\t    \t\tthis.texturePath = value;\n\t\n\t    \t},\n\t\n\t    \tsetCrossOrigin: function ( value ) {\n\t\n\t    \t\tthis.crossOrigin = value;\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json, onLoad ) {\n\t\n\t    \t\tvar geometries = this.parseGeometries( json.geometries );\n\t\n\t    \t\tvar images = this.parseImages( json.images, function () {\n\t\n\t    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\t\n\t    \t\t} );\n\t\n\t    \t\tvar textures  = this.parseTextures( json.textures, images );\n\t    \t\tvar materials = this.parseMaterials( json.materials, textures );\n\t\n\t    \t\tvar object = this.parseObject( json.object, geometries, materials );\n\t\n\t    \t\tif ( json.animations ) {\n\t\n\t    \t\t\tobject.animations = this.parseAnimations( json.animations );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json.images === undefined || json.images.length === 0 ) {\n\t\n\t    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn object;\n\t\n\t    \t},\n\t\n\t    \tparseGeometries: function ( json ) {\n\t\n\t    \t\tvar geometries = {};\n\t\n\t    \t\tif ( json !== undefined ) {\n\t\n\t    \t\t\tvar geometryLoader = new JSONLoader();\n\t    \t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar geometry;\n\t    \t\t\t\tvar data = json[ i ];\n\t\n\t    \t\t\t\tswitch ( data.type ) {\n\t\n\t    \t\t\t\t\tcase 'PlaneGeometry':\n\t    \t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.width,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.widthSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'BoxGeometry':\n\t    \t\t\t\t\tcase 'BoxBufferGeometry':\n\t    \t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.width,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.depth,\n\t    \t\t\t\t\t\t\tdata.widthSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.depthSegments\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'CircleGeometry':\n\t    \t\t\t\t\tcase 'CircleBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.segments,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'CylinderGeometry':\n\t    \t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radiusTop,\n\t    \t\t\t\t\t\t\tdata.radiusBottom,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.openEnded,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'ConeGeometry':\n\t    \t\t\t\t\tcase 'ConeBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.height,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.openEnded,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'SphereGeometry':\n\t    \t\t\t\t\tcase 'SphereBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.widthSegments,\n\t    \t\t\t\t\t\t\tdata.heightSegments,\n\t    \t\t\t\t\t\t\tdata.phiStart,\n\t    \t\t\t\t\t\t\tdata.phiLength,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'DodecahedronGeometry':\n\t    \t\t\t\t\tcase 'IcosahedronGeometry':\n\t    \t\t\t\t\tcase 'OctahedronGeometry':\n\t    \t\t\t\t\tcase 'TetrahedronGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.detail\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'RingGeometry':\n\t    \t\t\t\t\tcase 'RingBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.innerRadius,\n\t    \t\t\t\t\t\t\tdata.outerRadius,\n\t    \t\t\t\t\t\t\tdata.thetaSegments,\n\t    \t\t\t\t\t\t\tdata.phiSegments,\n\t    \t\t\t\t\t\t\tdata.thetaStart,\n\t    \t\t\t\t\t\t\tdata.thetaLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'TorusGeometry':\n\t    \t\t\t\t\tcase 'TorusBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.tube,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.tubularSegments,\n\t    \t\t\t\t\t\t\tdata.arc\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'TorusKnotGeometry':\n\t    \t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.radius,\n\t    \t\t\t\t\t\t\tdata.tube,\n\t    \t\t\t\t\t\t\tdata.tubularSegments,\n\t    \t\t\t\t\t\t\tdata.radialSegments,\n\t    \t\t\t\t\t\t\tdata.p,\n\t    \t\t\t\t\t\t\tdata.q\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'LatheGeometry':\n\t    \t\t\t\t\tcase 'LatheBufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t    \t\t\t\t\t\t\tdata.points,\n\t    \t\t\t\t\t\t\tdata.segments,\n\t    \t\t\t\t\t\t\tdata.phiStart,\n\t    \t\t\t\t\t\t\tdata.phiLength\n\t    \t\t\t\t\t\t);\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'BufferGeometry':\n\t\n\t    \t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tcase 'Geometry':\n\t\n\t    \t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\t\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\tdefault:\n\t\n\t    \t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\t\n\t    \t\t\t\t\t\tcontinue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tgeometry.uuid = data.uuid;\n\t\n\t    \t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\n\t    \t\t\t\tgeometries[ data.uuid ] = geometry;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometries;\n\t\n\t    \t},\n\t\n\t    \tparseMaterials: function ( json, textures ) {\n\t\n\t    \t\tvar materials = {};\n\t\n\t    \t\tif ( json !== undefined ) {\n\t\n\t    \t\t\tvar loader = new MaterialLoader();\n\t    \t\t\tloader.setTextures( textures );\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar material = loader.parse( json[ i ] );\n\t    \t\t\t\tmaterials[ material.uuid ] = material;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn materials;\n\t\n\t    \t},\n\t\n\t    \tparseAnimations: function ( json ) {\n\t\n\t    \t\tvar animations = [];\n\t\n\t    \t\tfor ( var i = 0; i < json.length; i ++ ) {\n\t\n\t    \t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\t\n\t    \t\t\tanimations.push( clip );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn animations;\n\t\n\t    \t},\n\t\n\t    \tparseImages: function ( json, onLoad ) {\n\t\n\t    \t\tvar scope = this;\n\t    \t\tvar images = {};\n\t\n\t    \t\tfunction loadImage( url ) {\n\t\n\t    \t\t\tscope.manager.itemStart( url );\n\t\n\t    \t\t\treturn loader.load( url, function () {\n\t\n\t    \t\t\t\tscope.manager.itemEnd( url );\n\t\n\t    \t\t\t}, undefined, function () {\n\t\n\t    \t\t\t\tscope.manager.itemError( url );\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( json !== undefined && json.length > 0 ) {\n\t\n\t    \t\t\tvar manager = new LoadingManager( onLoad );\n\t\n\t    \t\t\tvar loader = new ImageLoader( manager );\n\t    \t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar image = json[ i ];\n\t    \t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\t\n\t    \t\t\t\timages[ image.uuid ] = loadImage( path );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn images;\n\t\n\t    \t},\n\t\n\t    \tparseTextures: function ( json, images ) {\n\t\n\t    \t\tfunction parseConstant( value, type ) {\n\t\n\t    \t\t\tif ( typeof( value ) === 'number' ) return value;\n\t\n\t    \t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\t\n\t    \t\t\treturn type[ value ];\n\t\n\t    \t\t}\n\t\n\t    \t\tvar textures = {};\n\t\n\t    \t\tif ( json !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar data = json[ i ];\n\t\n\t    \t\t\t\tif ( data.image === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( images[ data.image ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar texture = new Texture( images[ data.image ] );\n\t    \t\t\t\ttexture.needsUpdate = true;\n\t\n\t    \t\t\t\ttexture.uuid = data.uuid;\n\t\n\t    \t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\t\n\t    \t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );\n\t\n\t    \t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t    \t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t    \t\t\t\tif ( data.wrap !== undefined ) {\n\t\n\t    \t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );\n\t    \t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );\n\t    \t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );\n\t    \t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\t\n\t    \t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\t\n\t    \t\t\t\ttextures[ data.uuid ] = texture;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\treturn textures;\n\t\n\t    \t},\n\t\n\t    \tparseObject: function () {\n\t\n\t    \t\tvar matrix = new Matrix4();\n\t\n\t    \t\treturn function parseObject( data, geometries, materials ) {\n\t\n\t    \t\t\tvar object;\n\t\n\t    \t\t\tfunction getGeometry( name ) {\n\t\n\t    \t\t\t\tif ( geometries[ name ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn geometries[ name ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfunction getMaterial( name ) {\n\t\n\t    \t\t\t\tif ( name === undefined ) return undefined;\n\t\n\t    \t\t\t\tif ( materials[ name ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\treturn materials[ name ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tswitch ( data.type ) {\n\t\n\t    \t\t\t\tcase 'Scene':\n\t\n\t    \t\t\t\t\tobject = new Scene();\n\t\n\t    \t\t\t\t\tif ( data.background !== undefined ) {\n\t\n\t    \t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\t\n\t    \t\t\t\t\t\t\tobject.background = new Color( data.background );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( data.fog !== undefined ) {\n\t\n\t    \t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\t\n\t    \t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\t\n\t    \t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\t\n\t    \t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PerspectiveCamera':\n\t\n\t    \t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\t\n\t    \t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t    \t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t    \t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t    \t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t    \t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'OrthographicCamera':\n\t\n\t    \t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'AmbientLight':\n\t\n\t    \t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'DirectionalLight':\n\t\n\t    \t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PointLight':\n\t\n\t    \t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'SpotLight':\n\t\n\t    \t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'HemisphereLight':\n\t\n\t    \t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Mesh':\n\t\n\t    \t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t    \t\t\t\t\tvar material = getMaterial( data.material );\n\t\n\t    \t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\t\n\t    \t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tobject = new Mesh( geometry, material );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'LOD':\n\t\n\t    \t\t\t\t\tobject = new LOD();\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Line':\n\t\n\t    \t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'LineSegments':\n\t\n\t    \t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'PointCloud':\n\t    \t\t\t\tcase 'Points':\n\t\n\t    \t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Sprite':\n\t\n\t    \t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'Group':\n\t\n\t    \t\t\t\t\tobject = new Group();\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault:\n\t\n\t    \t\t\t\t\tobject = new Object3D();\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tobject.uuid = data.uuid;\n\t\n\t    \t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t    \t\t\tif ( data.matrix !== undefined ) {\n\t\n\t    \t\t\t\tmatrix.fromArray( data.matrix );\n\t    \t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t    \t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t    \t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t    \t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t    \t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\t\n\t    \t\t\tif ( data.shadow ) {\n\t\n\t    \t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t    \t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t    \t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t    \t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t    \t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\n\t    \t\t\tif ( data.children !== undefined ) {\n\t\n\t    \t\t\t\tfor ( var child in data.children ) {\n\t\n\t    \t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( data.type === 'LOD' ) {\n\t\n\t    \t\t\t\tvar levels = data.levels;\n\t\n\t    \t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\t\n\t    \t\t\t\t\tvar level = levels[ l ];\n\t    \t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\t\n\t    \t\t\t\t\tif ( child !== undefined ) {\n\t\n\t    \t\t\t\t\t\tobject.addLevel( child, level.distance );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn object;\n\t\n\t    \t\t};\n\t\n\t    \t}()\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * Extensible curve object\n\t     *\n\t     * Some common of Curve methods\n\t     * .getPoint(t), getTangent(t)\n\t     * .getPointAt(u), getTangentAt(u)\n\t     * .getPoints(), .getSpacedPoints()\n\t     * .getLength()\n\t     * .updateArcLengths()\n\t     *\n\t     * This following classes subclasses THREE.Curve:\n\t     *\n\t     * -- 2d classes --\n\t     * THREE.LineCurve\n\t     * THREE.QuadraticBezierCurve\n\t     * THREE.CubicBezierCurve\n\t     * THREE.SplineCurve\n\t     * THREE.ArcCurve\n\t     * THREE.EllipseCurve\n\t     *\n\t     * -- 3d classes --\n\t     * THREE.LineCurve3\n\t     * THREE.QuadraticBezierCurve3\n\t     * THREE.CubicBezierCurve3\n\t     * THREE.SplineCurve3\n\t     *\n\t     * A series of curves can be represented as a THREE.CurvePath\n\t     *\n\t     **/\n\t\n\t    /**************************************************************\n\t     *\tAbstract Curve base class\n\t     **************************************************************/\n\t\n\t    function Curve() {}\n\t\n\t    Curve.prototype = {\n\t\n\t    \tconstructor: Curve,\n\t\n\t    \t// Virtual base class method to overwrite and implement in subclasses\n\t    \t//\t- t [0 .. 1]\n\t\n\t    \tgetPoint: function ( t ) {\n\t\n\t    \t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n\t    \t\treturn null;\n\t\n\t    \t},\n\t\n\t    \t// Get point at relative position in curve according to arc length\n\t    \t// - u [0 .. 1]\n\t\n\t    \tgetPointAt: function ( u ) {\n\t\n\t    \t\tvar t = this.getUtoTmapping( u );\n\t    \t\treturn this.getPoint( t );\n\t\n\t    \t},\n\t\n\t    \t// Get sequence of points using getPoint( t )\n\t\n\t    \tgetPoints: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = 5;\n\t\n\t    \t\tvar points = [];\n\t\n\t    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\t\n\t    \t\t\tpoints.push( this.getPoint( d / divisions ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \t// Get sequence of points using getPointAt( u )\n\t\n\t    \tgetSpacedPoints: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = 5;\n\t\n\t    \t\tvar points = [];\n\t\n\t    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\t\n\t    \t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \t// Get total curve arc length\n\t\n\t    \tgetLength: function () {\n\t\n\t    \t\tvar lengths = this.getLengths();\n\t    \t\treturn lengths[ lengths.length - 1 ];\n\t\n\t    \t},\n\t\n\t    \t// Get list of cumulative segment lengths\n\t\n\t    \tgetLengths: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\t\n\t    \t\tif ( this.cacheArcLengths\n\t    \t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n\t    \t\t\t&& ! this.needsUpdate ) {\n\t\n\t    \t\t\t//console.log( \"cached\", this.cacheArcLengths );\n\t    \t\t\treturn this.cacheArcLengths;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.needsUpdate = false;\n\t\n\t    \t\tvar cache = [];\n\t    \t\tvar current, last = this.getPoint( 0 );\n\t    \t\tvar p, sum = 0;\n\t\n\t    \t\tcache.push( 0 );\n\t\n\t    \t\tfor ( p = 1; p <= divisions; p ++ ) {\n\t\n\t    \t\t\tcurrent = this.getPoint ( p / divisions );\n\t    \t\t\tsum += current.distanceTo( last );\n\t    \t\t\tcache.push( sum );\n\t    \t\t\tlast = current;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cacheArcLengths = cache;\n\t\n\t    \t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\t\n\t    \t},\n\t\n\t    \tupdateArcLengths: function() {\n\t\n\t    \t\tthis.needsUpdate = true;\n\t    \t\tthis.getLengths();\n\t\n\t    \t},\n\t\n\t    \t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\t\n\t    \tgetUtoTmapping: function ( u, distance ) {\n\t\n\t    \t\tvar arcLengths = this.getLengths();\n\t\n\t    \t\tvar i = 0, il = arcLengths.length;\n\t\n\t    \t\tvar targetArcLength; // The targeted u distance value to get\n\t\n\t    \t\tif ( distance ) {\n\t\n\t    \t\t\ttargetArcLength = distance;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\t\n\t    \t\t}\n\t\n\t    \t\t//var time = Date.now();\n\t\n\t    \t\t// binary search for the index with largest value smaller than target u distance\n\t\n\t    \t\tvar low = 0, high = il - 1, comparison;\n\t\n\t    \t\twhile ( low <= high ) {\n\t\n\t    \t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\t\n\t    \t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\t\n\t    \t\t\tif ( comparison < 0 ) {\n\t\n\t    \t\t\t\tlow = i + 1;\n\t\n\t    \t\t\t} else if ( comparison > 0 ) {\n\t\n\t    \t\t\t\thigh = i - 1;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\thigh = i;\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t\t// DONE\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\ti = high;\n\t\n\t    \t\t//console.log('b' , i, low, high, Date.now()- time);\n\t\n\t    \t\tif ( arcLengths[ i ] === targetArcLength ) {\n\t\n\t    \t\t\tvar t = i / ( il - 1 );\n\t    \t\t\treturn t;\n\t\n\t    \t\t}\n\t\n\t    \t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\t\n\t    \t\tvar lengthBefore = arcLengths[ i ];\n\t    \t\tvar lengthAfter = arcLengths[ i + 1 ];\n\t\n\t    \t\tvar segmentLength = lengthAfter - lengthBefore;\n\t\n\t    \t\t// determine where we are between the 'before' and 'after' points\n\t\n\t    \t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\t\n\t    \t\t// add that fractional amount to t\n\t\n\t    \t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\t\n\t    \t\treturn t;\n\t\n\t    \t},\n\t\n\t    \t// Returns a unit vector tangent at t\n\t    \t// In case any sub curve does not implement its tangent derivation,\n\t    \t// 2 points a small delta apart will be used to find its gradient\n\t    \t// which seems to give a reasonable approximation\n\t\n\t    \tgetTangent: function( t ) {\n\t\n\t    \t\tvar delta = 0.0001;\n\t    \t\tvar t1 = t - delta;\n\t    \t\tvar t2 = t + delta;\n\t\n\t    \t\t// Capping in case of danger\n\t\n\t    \t\tif ( t1 < 0 ) t1 = 0;\n\t    \t\tif ( t2 > 1 ) t2 = 1;\n\t\n\t    \t\tvar pt1 = this.getPoint( t1 );\n\t    \t\tvar pt2 = this.getPoint( t2 );\n\t\n\t    \t\tvar vec = pt2.clone().sub( pt1 );\n\t    \t\treturn vec.normalize();\n\t\n\t    \t},\n\t\n\t    \tgetTangentAt: function ( u ) {\n\t\n\t    \t\tvar t = this.getUtoTmapping( u );\n\t    \t\treturn this.getTangent( t );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    // TODO: Transformation for Curves?\n\t\n\t    /**************************************************************\n\t     *\t3D Curves\n\t     **************************************************************/\n\t\n\t    // A Factory method for creating new curve subclasses\n\t\n\t    Curve.create = function ( constructor, getPointFunc ) {\n\t\n\t    \tconstructor.prototype = Object.create( Curve.prototype );\n\t    \tconstructor.prototype.constructor = constructor;\n\t    \tconstructor.prototype.getPoint = getPointFunc;\n\t\n\t    \treturn constructor;\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tLine\n\t     **************************************************************/\n\t\n\t    function LineCurve( v1, v2 ) {\n\t\n\t    \tthis.v1 = v1;\n\t    \tthis.v2 = v2;\n\t\n\t    }\n\t\n\t    LineCurve.prototype = Object.create( Curve.prototype );\n\t    LineCurve.prototype.constructor = LineCurve;\n\t\n\t    LineCurve.prototype.isLineCurve = true;\n\t\n\t    LineCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tif ( t === 1 ) {\n\t\n\t    \t\treturn this.v2.clone();\n\t\n\t    \t}\n\t\n\t    \tvar point = this.v2.clone().sub( this.v1 );\n\t    \tpoint.multiplyScalar( t ).add( this.v1 );\n\t\n\t    \treturn point;\n\t\n\t    };\n\t\n\t    // Line curve is linear, so we can overwrite default getPointAt\n\t\n\t    LineCurve.prototype.getPointAt = function ( u ) {\n\t\n\t    \treturn this.getPoint( u );\n\t\n\t    };\n\t\n\t    LineCurve.prototype.getTangent = function( t ) {\n\t\n\t    \tvar tangent = this.v2.clone().sub( this.v1 );\n\t\n\t    \treturn tangent.normalize();\n\t\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     *\n\t     **/\n\t\n\t    /**************************************************************\n\t     *\tCurved Path - a curve path is simply a array of connected\n\t     *  curves, but retains the api of a curve\n\t     **************************************************************/\n\t\n\t    function CurvePath() {\n\t\n\t    \tthis.curves = [];\n\t\n\t    \tthis.autoClose = false; // Automatically closes the path\n\t\n\t    }\n\t\n\t    CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\t\n\t    \tconstructor: CurvePath,\n\t\n\t    \tadd: function ( curve ) {\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t},\n\t\n\t    \tclosePath: function () {\n\t\n\t    \t\t// Add a line curve if start and end of lines are not connected\n\t    \t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t    \t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\t\n\t    \t\tif ( ! startPoint.equals( endPoint ) ) {\n\t\n\t    \t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// To get accurate point with reference to\n\t    \t// entire path distance at time t,\n\t    \t// following has to be done:\n\t\n\t    \t// 1. Length of each sub path have to be known\n\t    \t// 2. Locate and identify type of curve\n\t    \t// 3. Get t for the curve\n\t    \t// 4. Return curve.getPointAt(t')\n\t\n\t    \tgetPoint: function ( t ) {\n\t\n\t    \t\tvar d = t * this.getLength();\n\t    \t\tvar curveLengths = this.getCurveLengths();\n\t    \t\tvar i = 0;\n\t\n\t    \t\t// To think about boundaries points.\n\t\n\t    \t\twhile ( i < curveLengths.length ) {\n\t\n\t    \t\t\tif ( curveLengths[ i ] >= d ) {\n\t\n\t    \t\t\t\tvar diff = curveLengths[ i ] - d;\n\t    \t\t\t\tvar curve = this.curves[ i ];\n\t\n\t    \t\t\t\tvar segmentLength = curve.getLength();\n\t    \t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\n\t    \t\t\t\treturn curve.getPointAt( u );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\ti ++;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t\t// loop where sum != 0, sum > d , sum+1 <d\n\t\n\t    \t},\n\t\n\t    \t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t    \t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t    \t// getPoint() depends on getLength\n\t\n\t    \tgetLength: function () {\n\t\n\t    \t\tvar lens = this.getCurveLengths();\n\t    \t\treturn lens[ lens.length - 1 ];\n\t\n\t    \t},\n\t\n\t    \t// cacheLengths must be recalculated.\n\t    \tupdateArcLengths: function () {\n\t\n\t    \t\tthis.needsUpdate = true;\n\t    \t\tthis.cacheLengths = null;\n\t    \t\tthis.getLengths();\n\t\n\t    \t},\n\t\n\t    \t// Compute lengths and cache them\n\t    \t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\n\t    \tgetCurveLengths: function () {\n\t\n\t    \t\t// We use cache values if curves and cache array are same length\n\t\n\t    \t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\t\n\t    \t\t\treturn this.cacheLengths;\n\t\n\t    \t\t}\n\t\n\t    \t\t// Get length of sub-curve\n\t    \t\t// Push sums into cached array\n\t\n\t    \t\tvar lengths = [], sums = 0;\n\t\n\t    \t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\t\n\t    \t\t\tsums += this.curves[ i ].getLength();\n\t    \t\t\tlengths.push( sums );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cacheLengths = lengths;\n\t\n\t    \t\treturn lengths;\n\t\n\t    \t},\n\t\n\t    \tgetSpacedPoints: function ( divisions ) {\n\t\n\t    \t\tif ( ! divisions ) divisions = 40;\n\t\n\t    \t\tvar points = [];\n\t\n\t    \t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\t\n\t    \t\t\tpoints.push( this.getPoint( i / divisions ) );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.autoClose ) {\n\t\n\t    \t\t\tpoints.push( points[ 0 ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \tgetPoints: function ( divisions ) {\n\t\n\t    \t\tdivisions = divisions || 12;\n\t\n\t    \t\tvar points = [], last;\n\t\n\t    \t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\t\n\t    \t\t\tvar curve = curves[ i ];\n\t    \t\t\tvar resolution = (curve && curve.isEllipseCurve) ? divisions * 2\n\t    \t\t\t\t: (curve && curve.isLineCurve) ? 1\n\t    \t\t\t\t: (curve && curve.isSplineCurve) ? divisions * curve.points.length\n\t    \t\t\t\t: divisions;\n\t\n\t    \t\t\tvar pts = curve.getPoints( resolution );\n\t\n\t    \t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\t\n\t    \t\t\t\tvar point = pts[ j ];\n\t\n\t    \t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\t\n\t    \t\t\t\tpoints.push( point );\n\t    \t\t\t\tlast = point;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\t\n\t    \t\t\tpoints.push( points[ 0 ] );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn points;\n\t\n\t    \t},\n\t\n\t    \t/**************************************************************\n\t    \t *\tCreate Geometries Helpers\n\t    \t **************************************************************/\n\t\n\t    \t/// Generate geometry from path points (for Line or Points objects)\n\t\n\t    \tcreatePointsGeometry: function ( divisions ) {\n\t\n\t    \t\tvar pts = this.getPoints( divisions );\n\t    \t\treturn this.createGeometry( pts );\n\t\n\t    \t},\n\t\n\t    \t// Generate geometry from equidistant sampling along the path\n\t\n\t    \tcreateSpacedPointsGeometry: function ( divisions ) {\n\t\n\t    \t\tvar pts = this.getSpacedPoints( divisions );\n\t    \t\treturn this.createGeometry( pts );\n\t\n\t    \t},\n\t\n\t    \tcreateGeometry: function ( points ) {\n\t\n\t    \t\tvar geometry = new Geometry();\n\t\n\t    \t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar point = points[ i ];\n\t    \t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn geometry;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**************************************************************\n\t     *\tEllipse curve\n\t     **************************************************************/\n\t\n\t    function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t    \tthis.aX = aX;\n\t    \tthis.aY = aY;\n\t\n\t    \tthis.xRadius = xRadius;\n\t    \tthis.yRadius = yRadius;\n\t\n\t    \tthis.aStartAngle = aStartAngle;\n\t    \tthis.aEndAngle = aEndAngle;\n\t\n\t    \tthis.aClockwise = aClockwise;\n\t\n\t    \tthis.aRotation = aRotation || 0;\n\t\n\t    }\n\t\n\t    EllipseCurve.prototype = Object.create( Curve.prototype );\n\t    EllipseCurve.prototype.constructor = EllipseCurve;\n\t\n\t    EllipseCurve.prototype.isEllipseCurve = true;\n\t\n\t    EllipseCurve.prototype.getPoint = function( t ) {\n\t\n\t    \tvar twoPi = Math.PI * 2;\n\t    \tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t    \tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\t\n\t    \t// ensures that deltaAngle is 0 .. 2 PI\n\t    \twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t    \twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\t\n\t    \tif ( deltaAngle < Number.EPSILON ) {\n\t\n\t    \t\tif ( samePoints ) {\n\t\n\t    \t\t\tdeltaAngle = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdeltaAngle = twoPi;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tif ( this.aClockwise === true && ! samePoints ) {\n\t\n\t    \t\tif ( deltaAngle === twoPi ) {\n\t\n\t    \t\t\tdeltaAngle = - twoPi;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tvar angle = this.aStartAngle + t * deltaAngle;\n\t    \tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t    \tvar y = this.aY + this.yRadius * Math.sin( angle );\n\t\n\t    \tif ( this.aRotation !== 0 ) {\n\t\n\t    \t\tvar cos = Math.cos( this.aRotation );\n\t    \t\tvar sin = Math.sin( this.aRotation );\n\t\n\t    \t\tvar tx = x - this.aX;\n\t    \t\tvar ty = y - this.aY;\n\t\n\t    \t\t// Rotate the point about the center of the ellipse.\n\t    \t\tx = tx * cos - ty * sin + this.aX;\n\t    \t\ty = tx * sin + ty * cos + this.aY;\n\t\n\t    \t}\n\t\n\t    \treturn new Vector2( x, y );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     */\n\t\n\t    exports.CurveUtils = {\n\t\n\t    \ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\t\n\t    \t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\t\n\t    \t},\n\t\n\t    \t// Puay Bing, thanks for helping with this derivative!\n\t\n\t    \ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\t\n\t    \t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n\t    \t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n\t    \t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n\t    \t\t\t3 * t * t * p3;\n\t\n\t    \t},\n\t\n\t    \ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\t\n\t    \t\t// To check if my formulas are correct\n\t\n\t    \t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n\t    \t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\t    \t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n\t    \t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\t\n\t    \t\treturn h00 + h10 + h01 + h11;\n\t\n\t    \t},\n\t\n\t    \t// Catmull-Rom\n\t\n\t    \tinterpolate: function( p0, p1, p2, p3, t ) {\n\t\n\t    \t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t    \t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t    \t\tvar t2 = t * t;\n\t    \t\tvar t3 = t * t2;\n\t    \t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tSpline curve\n\t     **************************************************************/\n\t\n\t    function SplineCurve( points /* array of Vector2 */ ) {\n\t\n\t    \tthis.points = ( points === undefined ) ? [] : points;\n\t\n\t    }\n\t\n\t    SplineCurve.prototype = Object.create( Curve.prototype );\n\t    SplineCurve.prototype.constructor = SplineCurve;\n\t\n\t    SplineCurve.prototype.isSplineCurve = true;\n\t\n\t    SplineCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tvar points = this.points;\n\t    \tvar point = ( points.length - 1 ) * t;\n\t\n\t    \tvar intPoint = Math.floor( point );\n\t    \tvar weight = point - intPoint;\n\t\n\t    \tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t    \tvar point1 = points[ intPoint ];\n\t    \tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t    \tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\t\n\t    \tvar interpolate = exports.CurveUtils.interpolate;\n\t\n\t    \treturn new Vector2(\n\t    \t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t    \t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n\t    \t);\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tCubic Bezier curve\n\t     **************************************************************/\n\t\n\t    function CubicBezierCurve( v0, v1, v2, v3 ) {\n\t\n\t    \tthis.v0 = v0;\n\t    \tthis.v1 = v1;\n\t    \tthis.v2 = v2;\n\t    \tthis.v3 = v3;\n\t\n\t    }\n\t\n\t    CubicBezierCurve.prototype = Object.create( Curve.prototype );\n\t    CubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\t\n\t    CubicBezierCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tvar b3 = exports.ShapeUtils.b3;\n\t\n\t    \treturn new Vector2(\n\t    \t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t    \t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t    \t);\n\t\n\t    };\n\t\n\t    CubicBezierCurve.prototype.getTangent = function( t ) {\n\t\n\t    \tvar tangentCubicBezier = exports.CurveUtils.tangentCubicBezier;\n\t\n\t    \treturn new Vector2(\n\t    \t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t    \t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t    \t).normalize();\n\t\n\t    };\n\t\n\t    /**************************************************************\n\t     *\tQuadratic Bezier curve\n\t     **************************************************************/\n\t\n\t\n\t    function QuadraticBezierCurve( v0, v1, v2 ) {\n\t\n\t    \tthis.v0 = v0;\n\t    \tthis.v1 = v1;\n\t    \tthis.v2 = v2;\n\t\n\t    }\n\t\n\t    QuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\t    QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\t\n\t\n\t    QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\t\n\t    \tvar b2 = exports.ShapeUtils.b2;\n\t\n\t    \treturn new Vector2(\n\t    \t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t    \t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n\t    \t);\n\t\n\t    };\n\t\n\t\n\t    QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\t\n\t    \tvar tangentQuadraticBezier = exports.CurveUtils.tangentQuadraticBezier;\n\t\n\t    \treturn new Vector2(\n\t    \t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n\t    \t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n\t    \t).normalize();\n\t\n\t    };\n\t\n\t    var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {\n\t\n\t    \tfromPoints: function ( vectors ) {\n\t\n\t    \t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\t\n\t    \t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tmoveTo: function ( x, y ) {\n\t\n\t    \t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\t\n\t    \t},\n\t\n\t    \tlineTo: function ( x, y ) {\n\t\n\t    \t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.set( x, y );\n\t\n\t    \t},\n\t\n\t    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t\n\t    \t\tvar curve = new QuadraticBezierCurve(\n\t    \t\t\tthis.currentPoint.clone(),\n\t    \t\t\tnew Vector2( aCPx, aCPy ),\n\t    \t\t\tnew Vector2( aX, aY )\n\t    \t\t);\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.set( aX, aY );\n\t\n\t    \t},\n\t\n\t    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t\n\t    \t\tvar curve = new CubicBezierCurve(\n\t    \t\t\tthis.currentPoint.clone(),\n\t    \t\t\tnew Vector2( aCP1x, aCP1y ),\n\t    \t\t\tnew Vector2( aCP2x, aCP2y ),\n\t    \t\t\tnew Vector2( aX, aY )\n\t    \t\t);\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.set( aX, aY );\n\t\n\t    \t},\n\t\n\t    \tsplineThru: function ( pts /*Array of Vector*/ ) {\n\t\n\t    \t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\t\n\t    \t\tvar curve = new SplineCurve( npts );\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\t\n\t    \t},\n\t\n\t    \tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t    \t\tvar x0 = this.currentPoint.x;\n\t    \t\tvar y0 = this.currentPoint.y;\n\t\n\t    \t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t    \t\t\taStartAngle, aEndAngle, aClockwise );\n\t\n\t    \t},\n\t\n\t    \tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t    \t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\t\n\t    \t},\n\t\n\t    \tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t    \t\tvar x0 = this.currentPoint.x;\n\t    \t\tvar y0 = this.currentPoint.y;\n\t\n\t    \t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\n\t    \t},\n\t\n\t    \tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t    \t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\n\t    \t\tif ( this.curves.length > 0 ) {\n\t\n\t    \t\t\t// if a previous curve is present, attempt to join\n\t    \t\t\tvar firstPoint = curve.getPoint( 0 );\n\t\n\t    \t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\t\n\t    \t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.curves.push( curve );\n\t\n\t    \t\tvar lastPoint = curve.getPoint( 1 );\n\t    \t\tthis.currentPoint.copy( lastPoint );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * Defines a 2d shape plane using paths.\n\t     **/\n\t\n\t    // STEP 1 Create a path.\n\t    // STEP 2 Turn path into shape.\n\t    // STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t    // STEP 3a - Extract points from each shape, turn to vertices\n\t    // STEP 3b - Triangulate each shape, add faces.\n\t\n\t    function Shape() {\n\t\n\t    \tPath.apply( this, arguments );\n\t\n\t    \tthis.holes = [];\n\t\n\t    }\n\t\n\t    Shape.prototype = Object.assign( Object.create( PathPrototype ), {\n\t\n\t    \tconstructor: Shape,\n\t\n\t    \tgetPointsHoles: function ( divisions ) {\n\t\n\t    \t\tvar holesPts = [];\n\t\n\t    \t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\t\n\t    \t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn holesPts;\n\t\n\t    \t},\n\t\n\t    \t// Get points of shape and holes (keypoints based on segments parameter)\n\t\n\t    \textractAllPoints: function ( divisions ) {\n\t\n\t    \t\treturn {\n\t\n\t    \t\t\tshape: this.getPoints( divisions ),\n\t    \t\t\tholes: this.getPointsHoles( divisions )\n\t\n\t    \t\t};\n\t\n\t    \t},\n\t\n\t    \textractPoints: function ( divisions ) {\n\t\n\t    \t\treturn this.extractAllPoints( divisions );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * Creates free form 2d path using series of points, lines or curves.\n\t     *\n\t     **/\n\t\n\t    function Path( points ) {\n\t\n\t    \tCurvePath.call( this );\n\t    \tthis.currentPoint = new Vector2();\n\t\n\t    \tif ( points ) {\n\t\n\t    \t\tthis.fromPoints( points );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    Path.prototype = PathPrototype;\n\t    PathPrototype.constructor = Path;\n\t\n\t\n\t    // minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t    function ShapePath() {\n\t    \tthis.subPaths = [];\n\t    \tthis.currentPath = null;\n\t    }\n\t\n\t    ShapePath.prototype = {\n\t    \tmoveTo: function ( x, y ) {\n\t    \t\tthis.currentPath = new Path();\n\t    \t\tthis.subPaths.push(this.currentPath);\n\t    \t\tthis.currentPath.moveTo( x, y );\n\t    \t},\n\t    \tlineTo: function ( x, y ) {\n\t    \t\tthis.currentPath.lineTo( x, y );\n\t    \t},\n\t    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t    \t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\t    \t},\n\t    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t    \t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\t    \t},\n\t    \tsplineThru: function ( pts ) {\n\t    \t\tthis.currentPath.splineThru( pts );\n\t    \t},\n\t\n\t    \ttoShapes: function ( isCCW, noHoles ) {\n\t\n\t    \t\tfunction toShapesNoHoles( inSubpaths ) {\n\t\n\t    \t\t\tvar shapes = [];\n\t\n\t    \t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar tmpPath = inSubpaths[ i ];\n\t\n\t    \t\t\t\tvar tmpShape = new Shape();\n\t    \t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\n\t    \t\t\t\tshapes.push( tmpShape );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn shapes;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\t\n\t    \t\t\tvar polyLen = inPolygon.length;\n\t\n\t    \t\t\t// inPt on polygon contour => immediate success    or\n\t    \t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t    \t\t\t//  with the horizontal line through inPt, left of inPt\n\t    \t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t    \t\t\tvar inside = false;\n\t    \t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\t\n\t    \t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t    \t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\t\n\t    \t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t    \t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\t\n\t    \t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\t\n\t    \t\t\t\t\t// not parallel\n\t    \t\t\t\t\tif ( edgeDy < 0 ) {\n\t\n\t    \t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t    \t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\t\n\t    \t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\t\n\t    \t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t    \t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t    \t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t    \t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t    \t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// parallel or collinear\n\t    \t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t    \t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t    \t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t    \t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t    \t\t\t\t\t// continue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn\tinside;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar isClockWise = exports.ShapeUtils.isClockWise;\n\t\n\t    \t\tvar subPaths = this.subPaths;\n\t    \t\tif ( subPaths.length === 0 ) return [];\n\t\n\t    \t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\t\n\t\n\t    \t\tvar solid, tmpPath, tmpShape, shapes = [];\n\t\n\t    \t\tif ( subPaths.length === 1 ) {\n\t\n\t    \t\t\ttmpPath = subPaths[ 0 ];\n\t    \t\t\ttmpShape = new Shape();\n\t    \t\t\ttmpShape.curves = tmpPath.curves;\n\t    \t\t\tshapes.push( tmpShape );\n\t    \t\t\treturn shapes;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t    \t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\t\n\t    \t\t// console.log(\"Holes first\", holesFirst);\n\t\n\t    \t\tvar betterShapeHoles = [];\n\t    \t\tvar newShapes = [];\n\t    \t\tvar newShapeHoles = [];\n\t    \t\tvar mainIdx = 0;\n\t    \t\tvar tmpPoints;\n\t\n\t    \t\tnewShapes[ mainIdx ] = undefined;\n\t    \t\tnewShapeHoles[ mainIdx ] = [];\n\t\n\t    \t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\t\n\t    \t\t\ttmpPath = subPaths[ i ];\n\t    \t\t\ttmpPoints = tmpPath.getPoints();\n\t    \t\t\tsolid = isClockWise( tmpPoints );\n\t    \t\t\tsolid = isCCW ? ! solid : solid;\n\t\n\t    \t\t\tif ( solid ) {\n\t\n\t    \t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\t\n\t    \t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t    \t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\t\n\t    \t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t    \t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\t\n\t    \t\t\t\t//console.log('cw', i);\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\t\n\t    \t\t\t\t//console.log('ccw', i);\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// only Holes? -> probably all Shapes with wrong orientation\n\t    \t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\t\n\t\n\t    \t\tif ( newShapes.length > 1 ) {\n\t\n\t    \t\t\tvar ambiguous = false;\n\t    \t\t\tvar toChange = [];\n\t\n\t    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\t\n\t    \t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\t\n\t    \t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\t\n\t    \t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\t\n\t    \t\t\t\t\tvar ho = sho[ hIdx ];\n\t    \t\t\t\t\tvar hole_unassigned = true;\n\t\n\t    \t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\t\n\t    \t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\t\n\t    \t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t    \t\t\t\t\t\t\tif ( hole_unassigned ) {\n\t\n\t    \t\t\t\t\t\t\t\thole_unassigned = false;\n\t    \t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\t\n\t    \t\t\t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t\t\tambiguous = true;\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t    \t\t\t\t\tif ( hole_unassigned ) {\n\t\n\t    \t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t    \t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t    \t\t\tif ( toChange.length > 0 ) {\n\t\n\t    \t\t\t\t// console.log(\"to change: \", toChange);\n\t    \t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar tmpHoles;\n\t\n\t    \t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\t\n\t    \t\t\ttmpShape = newShapes[ i ].s;\n\t    \t\t\tshapes.push( tmpShape );\n\t    \t\t\ttmpHoles = newShapeHoles[ i ];\n\t\n\t    \t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t//console.log(\"shape\", shapes);\n\t\n\t    \t\treturn shapes;\n\t\n\t    \t}\n\t    }\n\t\n\t    /**\n\t     * @author zz85 / http://www.lab4games.net/zz85/blog\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Font( data ) {\n\t\n\t    \tthis.data = data;\n\t\n\t    }\n\t\n\t    Object.assign( Font.prototype, {\n\t\n\t    \tisFont: true,\n\t\n\t    \tgenerateShapes: function ( text, size, divisions ) {\n\t\n\t    \t\tfunction createPaths( text ) {\n\t\n\t    \t\t\tvar chars = String( text ).split( '' );\n\t    \t\t\tvar scale = size / data.resolution;\n\t    \t\t\tvar offset = 0;\n\t\n\t    \t\t\tvar paths = [];\n\t\n\t    \t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\t\n\t    \t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n\t    \t\t\t\toffset += ret.offset;\n\t\n\t    \t\t\t\tpaths.push( ret.path );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn paths;\n\t\n\t    \t\t}\n\t\n\t    \t\tfunction createPath( c, scale, offset ) {\n\t\n\t    \t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\t\n\t    \t\t\tif ( ! glyph ) return;\n\t\n\t    \t\t\tvar path = new ShapePath();\n\t\n\t    \t\t\tvar pts = [], b2 = exports.ShapeUtils.b2, b3 = exports.ShapeUtils.b3;\n\t    \t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\t\n\t    \t\t\tif ( glyph.o ) {\n\t\n\t    \t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\t\n\t    \t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\t\n\t    \t\t\t\t\tvar action = outline[ i ++ ];\n\t\n\t    \t\t\t\t\tswitch ( action ) {\n\t\n\t    \t\t\t\t\t\tcase 'm': // moveTo\n\t\n\t    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.moveTo( x, y );\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\tcase 'l': // lineTo\n\t\n\t    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.lineTo( x, y );\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\t\n\t    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\t\n\t    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( laste ) {\n\t\n\t    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\t\n\t    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t    \t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n\t    \t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\tcase 'b': // bezierCurveTo\n\t\n\t    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t    \t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n\t    \t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\t\n\t    \t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\t\n\t    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\t\n\t    \t\t\t\t\t\t\tif ( laste ) {\n\t\n\t    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\t\n\t    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\t\n\t    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t    \t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n\t    \t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\t\n\t    \t\t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn { offset: glyph.ha * scale, path: path };\n\t\n\t    \t\t}\n\t\n\t    \t\t//\n\t\n\t    \t\tif ( size === undefined ) size = 100;\n\t    \t\tif ( divisions === undefined ) divisions = 4;\n\t\n\t    \t\tvar data = this.data;\n\t\n\t    \t\tvar paths = createPaths( text );\n\t    \t\tvar shapes = [];\n\t\n\t    \t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\t\n\t    \t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn shapes;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function FontLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( FontLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.load( url, function ( text ) {\n\t\n\t    \t\t\tvar json;\n\t\n\t    \t\t\ttry {\n\t\n\t    \t\t\t\tjson = JSON.parse( text );\n\t\n\t    \t\t\t} catch ( e ) {\n\t\n\t    \t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t    \t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar font = scope.parse( json );\n\t\n\t    \t\t\tif ( onLoad ) onLoad( font );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t},\n\t\n\t    \tparse: function ( json ) {\n\t\n\t    \t\treturn new Font( json );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    var context;\n\t\n\t    function getAudioContext() {\n\t\n\t    \tif ( context === undefined ) {\n\t\n\t    \t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\t\n\t    \t}\n\t\n\t    \treturn context;\n\t\n\t    }\n\t\n\t    /**\n\t     * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t     */\n\t\n\t    function AudioLoader( manager ) {\n\t\n\t    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\t\n\t    }\n\t\n\t    Object.assign( AudioLoader.prototype, {\n\t\n\t    \tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t    \t\tvar loader = new XHRLoader( this.manager );\n\t    \t\tloader.setResponseType( 'arraybuffer' );\n\t    \t\tloader.load( url, function ( buffer ) {\n\t\n\t    \t\t\tvar context = getAudioContext();\n\t\n\t    \t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\t\n\t    \t\t\t\tonLoad( audioBuffer );\n\t\n\t    \t\t\t} );\n\t\n\t    \t\t}, onProgress, onError );\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function StereoCamera() {\n\t\n\t    \tthis.type = 'StereoCamera';\n\t\n\t    \tthis.aspect = 1;\n\t\n\t    \tthis.eyeSep = 0.064;\n\t\n\t    \tthis.cameraL = new PerspectiveCamera();\n\t    \tthis.cameraL.layers.enable( 1 );\n\t    \tthis.cameraL.matrixAutoUpdate = false;\n\t\n\t    \tthis.cameraR = new PerspectiveCamera();\n\t    \tthis.cameraR.layers.enable( 2 );\n\t    \tthis.cameraR.matrixAutoUpdate = false;\n\t\n\t    }\n\t\n\t    Object.assign( StereoCamera.prototype, {\n\t\n\t    \tupdate: ( function () {\n\t\n\t    \t\tvar instance, focus, fov, aspect, near, far, zoom;\n\t\n\t    \t\tvar eyeRight = new Matrix4();\n\t    \t\tvar eyeLeft = new Matrix4();\n\t\n\t    \t\treturn function update( camera ) {\n\t\n\t    \t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n\t    \t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t    \t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom;\n\t\n\t    \t\t\tif ( needsUpdate ) {\n\t\n\t    \t\t\t\tinstance = this;\n\t    \t\t\t\tfocus = camera.focus;\n\t    \t\t\t\tfov = camera.fov;\n\t    \t\t\t\taspect = camera.aspect * this.aspect;\n\t    \t\t\t\tnear = camera.near;\n\t    \t\t\t\tfar = camera.far;\n\t    \t\t\t\tzoom = camera.zoom;\n\t\n\t    \t\t\t\t// Off-axis stereoscopic effect based on\n\t    \t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\t\n\t    \t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t    \t\t\t\tvar eyeSep = this.eyeSep / 2;\n\t    \t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t    \t\t\t\tvar ymax = ( near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n\t    \t\t\t\tvar xmin, xmax;\n\t\n\t    \t\t\t\t// translate xOffset\n\t\n\t    \t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t    \t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\t\n\t    \t\t\t\t// for left eye\n\t\n\t    \t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t    \t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\t\n\t    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\t\n\t    \t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\t\n\t    \t\t\t\t// for right eye\n\t\n\t    \t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t    \t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\t\n\t    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\t\n\t    \t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t    \t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    } );\n\t\n\t    /**\n\t     * Camera for rendering cube maps\n\t     *\t- renders scene into axis-aligned cube\n\t     *\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function CubeCamera( near, far, cubeResolution ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'CubeCamera';\n\t\n\t    \tvar fov = 90, aspect = 1;\n\t\n\t    \tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraPX.up.set( 0, - 1, 0 );\n\t    \tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t    \tthis.add( cameraPX );\n\t\n\t    \tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraNX.up.set( 0, - 1, 0 );\n\t    \tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t    \tthis.add( cameraNX );\n\t\n\t    \tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraPY.up.set( 0, 0, 1 );\n\t    \tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t    \tthis.add( cameraPY );\n\t\n\t    \tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraNY.up.set( 0, 0, - 1 );\n\t    \tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t    \tthis.add( cameraNY );\n\t\n\t    \tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraPZ.up.set( 0, - 1, 0 );\n\t    \tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t    \tthis.add( cameraPZ );\n\t\n\t    \tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t    \tcameraNZ.up.set( 0, - 1, 0 );\n\t    \tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t    \tthis.add( cameraNZ );\n\t\n\t    \tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\t\n\t    \tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\t\n\t    \tthis.updateCubeMap = function ( renderer, scene ) {\n\t\n\t    \t\tif ( this.parent === null ) this.updateMatrixWorld();\n\t\n\t    \t\tvar renderTarget = this.renderTarget;\n\t    \t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\n\t    \t\trenderTarget.texture.generateMipmaps = false;\n\t\n\t    \t\trenderTarget.activeCubeFace = 0;\n\t    \t\trenderer.render( scene, cameraPX, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 1;\n\t    \t\trenderer.render( scene, cameraNX, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 2;\n\t    \t\trenderer.render( scene, cameraPY, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 3;\n\t    \t\trenderer.render( scene, cameraNY, renderTarget );\n\t\n\t    \t\trenderTarget.activeCubeFace = 4;\n\t    \t\trenderer.render( scene, cameraPZ, renderTarget );\n\t\n\t    \t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\n\t    \t\trenderTarget.activeCubeFace = 5;\n\t    \t\trenderer.render( scene, cameraNZ, renderTarget );\n\t\n\t    \t\trenderer.setRenderTarget( null );\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    CubeCamera.prototype = Object.create( Object3D.prototype );\n\t    CubeCamera.prototype.constructor = CubeCamera;\n\t\n\t    function AudioListener() {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'AudioListener';\n\t\n\t    \tthis.context = getAudioContext();\n\t\n\t    \tthis.gain = this.context.createGain();\n\t    \tthis.gain.connect( this.context.destination );\n\t\n\t    \tthis.filter = null;\n\t\n\t    }\n\t\n\t    AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: AudioListener,\n\t\n\t    \tgetInput: function () {\n\t\n\t    \t\treturn this.gain;\n\t\n\t    \t},\n\t\n\t    \tremoveFilter: function ( ) {\n\t\n\t    \t\tif ( this.filter !== null ) {\n\t\n\t    \t\t\tthis.gain.disconnect( this.filter );\n\t    \t\t\tthis.filter.disconnect( this.context.destination );\n\t    \t\t\tthis.gain.connect( this.context.destination );\n\t    \t\t\tthis.filter = null;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tgetFilter: function () {\n\t\n\t    \t\treturn this.filter;\n\t\n\t    \t},\n\t\n\t    \tsetFilter: function ( value ) {\n\t\n\t    \t\tif ( this.filter !== null ) {\n\t\n\t    \t\t\tthis.gain.disconnect( this.filter );\n\t    \t\t\tthis.filter.disconnect( this.context.destination );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.gain.disconnect( this.context.destination );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.filter = value;\n\t    \t\tthis.gain.connect( this.filter );\n\t    \t\tthis.filter.connect( this.context.destination );\n\t\n\t    \t},\n\t\n\t    \tgetMasterVolume: function () {\n\t\n\t    \t\treturn this.gain.gain.value;\n\t\n\t    \t},\n\t\n\t    \tsetMasterVolume: function ( value ) {\n\t\n\t    \t\tthis.gain.gain.value = value;\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: ( function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t    \t\tvar quaternion = new Quaternion();\n\t    \t\tvar scale = new Vector3();\n\t\n\t    \t\tvar orientation = new Vector3();\n\t\n\t    \t\treturn function updateMatrixWorld( force ) {\n\t\n\t    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t    \t\t\tvar listener = this.context.listener;\n\t    \t\t\tvar up = this.up;\n\t\n\t    \t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\t\n\t    \t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\t\n\t    \t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t    \t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t    } );\n\t\n\t    function Audio( listener ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.type = 'Audio';\n\t\n\t    \tthis.context = listener.context;\n\t    \tthis.source = this.context.createBufferSource();\n\t    \tthis.source.onended = this.onEnded.bind( this );\n\t\n\t    \tthis.gain = this.context.createGain();\n\t    \tthis.gain.connect( listener.getInput() );\n\t\n\t    \tthis.autoplay = false;\n\t\n\t    \tthis.startTime = 0;\n\t    \tthis.playbackRate = 1;\n\t    \tthis.isPlaying = false;\n\t    \tthis.hasPlaybackControl = true;\n\t    \tthis.sourceType = 'empty';\n\t\n\t    \tthis.filters = [];\n\t\n\t    }\n\t\n\t    Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\t\n\t    \tconstructor: Audio,\n\t\n\t    \tgetOutput: function () {\n\t\n\t    \t\treturn this.gain;\n\t\n\t    \t},\n\t\n\t    \tsetNodeSource: function ( audioNode ) {\n\t\n\t    \t\tthis.hasPlaybackControl = false;\n\t    \t\tthis.sourceType = 'audioNode';\n\t    \t\tthis.source = audioNode;\n\t    \t\tthis.connect();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetBuffer: function ( audioBuffer ) {\n\t\n\t    \t\tthis.source.buffer = audioBuffer;\n\t    \t\tthis.sourceType = 'buffer';\n\t\n\t    \t\tif ( this.autoplay ) this.play();\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tplay: function () {\n\t\n\t    \t\tif ( this.isPlaying === true ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar source = this.context.createBufferSource();\n\t\n\t    \t\tsource.buffer = this.source.buffer;\n\t    \t\tsource.loop = this.source.loop;\n\t    \t\tsource.onended = this.source.onended;\n\t    \t\tsource.start( 0, this.startTime );\n\t    \t\tsource.playbackRate.value = this.playbackRate;\n\t\n\t    \t\tthis.isPlaying = true;\n\t\n\t    \t\tthis.source = source;\n\t\n\t    \t\treturn this.connect();\n\t\n\t    \t},\n\t\n\t    \tpause: function () {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.source.stop();\n\t    \t\tthis.startTime = this.context.currentTime;\n\t    \t\tthis.isPlaying = false;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tstop: function () {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.source.stop();\n\t    \t\tthis.startTime = 0;\n\t    \t\tthis.isPlaying = false;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tconnect: function () {\n\t\n\t    \t\tif ( this.filters.length > 0 ) {\n\t\n\t    \t\t\tthis.source.connect( this.filters[ 0 ] );\n\t\n\t    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.source.connect( this.getOutput() );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tdisconnect: function () {\n\t\n\t    \t\tif ( this.filters.length > 0 ) {\n\t\n\t    \t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\t\n\t    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.source.disconnect( this.getOutput() );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetFilters: function () {\n\t\n\t    \t\treturn this.filters;\n\t\n\t    \t},\n\t\n\t    \tsetFilters: function ( value ) {\n\t\n\t    \t\tif ( ! value ) value = [];\n\t\n\t    \t\tif ( this.isPlaying === true ) {\n\t\n\t    \t\t\tthis.disconnect();\n\t    \t\t\tthis.filters = value;\n\t    \t\t\tthis.connect();\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.filters = value;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetFilter: function () {\n\t\n\t    \t\treturn this.getFilters()[ 0 ];\n\t\n\t    \t},\n\t\n\t    \tsetFilter: function ( filter ) {\n\t\n\t    \t\treturn this.setFilters( filter ? [ filter ] : [] );\n\t\n\t    \t},\n\t\n\t    \tsetPlaybackRate: function ( value ) {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.playbackRate = value;\n\t\n\t    \t\tif ( this.isPlaying === true ) {\n\t\n\t    \t\t\tthis.source.playbackRate.value = this.playbackRate;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetPlaybackRate: function () {\n\t\n\t    \t\treturn this.playbackRate;\n\t\n\t    \t},\n\t\n\t    \tonEnded: function () {\n\t\n\t    \t\tthis.isPlaying = false;\n\t\n\t    \t},\n\t\n\t    \tgetLoop: function () {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn false;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this.source.loop;\n\t\n\t    \t},\n\t\n\t    \tsetLoop: function ( value ) {\n\t\n\t    \t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.source.loop = value;\n\t\n\t    \t},\n\t\n\t    \tgetVolume: function () {\n\t\n\t    \t\treturn this.gain.gain.value;\n\t\n\t    \t},\n\t\n\t\n\t    \tsetVolume: function ( value ) {\n\t\n\t    \t\tthis.gain.gain.value = value;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    function PositionalAudio( listener ) {\n\t\n\t    \tAudio.call( this, listener );\n\t\n\t    \tthis.panner = this.context.createPanner();\n\t    \tthis.panner.connect( this.gain );\n\t\n\t    }\n\t\n\t    PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\t\n\t    \tconstructor: PositionalAudio,\n\t\n\t    \tgetOutput: function () {\n\t\n\t    \t\treturn this.panner;\n\t\n\t    \t},\n\t\n\t    \tgetRefDistance: function () {\n\t\n\t    \t\treturn this.panner.refDistance;\n\t\n\t    \t},\n\t\n\t    \tsetRefDistance: function ( value ) {\n\t\n\t    \t\tthis.panner.refDistance = value;\n\t\n\t    \t},\n\t\n\t    \tgetRolloffFactor: function () {\n\t\n\t    \t\treturn this.panner.rolloffFactor;\n\t\n\t    \t},\n\t\n\t    \tsetRolloffFactor: function ( value ) {\n\t\n\t    \t\tthis.panner.rolloffFactor = value;\n\t\n\t    \t},\n\t\n\t    \tgetDistanceModel: function () {\n\t\n\t    \t\treturn this.panner.distanceModel;\n\t\n\t    \t},\n\t\n\t    \tsetDistanceModel: function ( value ) {\n\t\n\t    \t\tthis.panner.distanceModel = value;\n\t\n\t    \t},\n\t\n\t    \tgetMaxDistance: function () {\n\t\n\t    \t\treturn this.panner.maxDistance;\n\t\n\t    \t},\n\t\n\t    \tsetMaxDistance: function ( value ) {\n\t\n\t    \t\tthis.panner.maxDistance = value;\n\t\n\t    \t},\n\t\n\t    \tupdateMatrixWorld: ( function () {\n\t\n\t    \t\tvar position = new Vector3();\n\t\n\t    \t\treturn function updateMatrixWorld( force ) {\n\t\n\t    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t    \t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t    \t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\t\n\t    \t\t};\n\t\n\t    \t} )()\n\t\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function AudioAnalyser( audio, fftSize ) {\n\t\n\t    \tthis.analyser = audio.context.createAnalyser();\n\t    \tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\t\n\t    \tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\t\n\t    \taudio.getOutput().connect( this.analyser );\n\t\n\t    }\n\t\n\t    Object.assign( AudioAnalyser.prototype, {\n\t\n\t    \tgetFrequencyData: function () {\n\t\n\t    \t\tthis.analyser.getByteFrequencyData( this.data );\n\t\n\t    \t\treturn this.data;\n\t\n\t    \t},\n\t\n\t    \tgetAverageFrequency: function () {\n\t\n\t    \t\tvar value = 0, data = this.getFrequencyData();\n\t\n\t    \t\tfor ( var i = 0; i < data.length; i ++ ) {\n\t\n\t    \t\t\tvalue += data[ i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn value / data.length;\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    /**\n\t     *\n\t     * Buffered scene graph property that allows weighted accumulation.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function PropertyMixer( binding, typeName, valueSize ) {\n\t\n\t    \tthis.binding = binding;\n\t    \tthis.valueSize = valueSize;\n\t\n\t    \tvar bufferType = Float64Array,\n\t    \t\tmixFunction;\n\t\n\t    \tswitch ( typeName ) {\n\t\n\t    \t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\t\n\t    \t\tcase 'string':\n\t    \t\tcase 'bool':\n\t\n\t    \t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\t\n\t    \t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\t\n\t    \t}\n\t\n\t    \tthis.buffer = new bufferType( valueSize * 4 );\n\t    \t// layout: [ incoming | accu0 | accu1 | orig ]\n\t    \t//\n\t    \t// interpolators can use .buffer as their .result\n\t    \t// the data then goes to 'incoming'\n\t    \t//\n\t    \t// 'accu0' and 'accu1' are used frame-interleaved for\n\t    \t// the cumulative result and are compared to detect\n\t    \t// changes\n\t    \t//\n\t    \t// 'orig' stores the original state of the property\n\t\n\t    \tthis._mixBufferRegion = mixFunction;\n\t\n\t    \tthis.cumulativeWeight = 0;\n\t\n\t    \tthis.useCount = 0;\n\t    \tthis.referenceCount = 0;\n\t\n\t    }\n\t\n\t    PropertyMixer.prototype = {\n\t\n\t    \tconstructor: PropertyMixer,\n\t\n\t    \t// accumulate data in the 'incoming' region into 'accu<i>'\n\t    \taccumulate: function( accuIndex, weight ) {\n\t\n\t    \t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t    \t\t// the weight and shouldn't have made the call in the first place\n\t\n\t    \t\tvar buffer = this.buffer,\n\t    \t\t\tstride = this.valueSize,\n\t    \t\t\toffset = accuIndex * stride + stride,\n\t\n\t    \t\t\tcurrentWeight = this.cumulativeWeight;\n\t\n\t    \t\tif ( currentWeight === 0 ) {\n\t\n\t    \t\t\t// accuN := incoming * weight\n\t\n\t    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tcurrentWeight = weight;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// accuN := accuN + incoming * weight\n\t\n\t    \t\t\tcurrentWeight += weight;\n\t    \t\t\tvar mix = weight / currentWeight;\n\t    \t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cumulativeWeight = currentWeight;\n\t\n\t    \t},\n\t\n\t    \t// apply the state of 'accu<i>' to the binding when accus differ\n\t    \tapply: function( accuIndex ) {\n\t\n\t    \t\tvar stride = this.valueSize,\n\t    \t\t\tbuffer = this.buffer,\n\t    \t\t\toffset = accuIndex * stride + stride,\n\t\n\t    \t\t\tweight = this.cumulativeWeight,\n\t\n\t    \t\t\tbinding = this.binding;\n\t\n\t    \t\tthis.cumulativeWeight = 0;\n\t\n\t    \t\tif ( weight < 1 ) {\n\t\n\t    \t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\n\t    \t\t\tvar originalValueOffset = stride * 3;\n\t\n\t    \t\t\tthis._mixBufferRegion(\n\t    \t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\t\n\t    \t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\t\n\t    \t\t\t\t// value has changed -> update scene graph\n\t\n\t    \t\t\t\tbinding.setValue( buffer, offset );\n\t    \t\t\t\tbreak;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// remember the state of the bound property and copy it to both accus\n\t    \tsaveOriginalState: function() {\n\t\n\t    \t\tvar binding = this.binding;\n\t\n\t    \t\tvar buffer = this.buffer,\n\t    \t\t\tstride = this.valueSize,\n\t\n\t    \t\t\toriginalValueOffset = stride * 3;\n\t\n\t    \t\tbinding.getValue( buffer, originalValueOffset );\n\t\n\t    \t\t// accu[0..1] := orig -- initially detect changes against the original\n\t    \t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\t\n\t    \t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.cumulativeWeight = 0;\n\t\n\t    \t},\n\t\n\t    \t// apply the state previously taken via 'saveOriginalState' to the binding\n\t    \trestoreOriginalState: function() {\n\t\n\t    \t\tvar originalValueOffset = this.valueSize * 3;\n\t    \t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\t\n\t    \t},\n\t\n\t\n\t    \t// mix functions\n\t\n\t    \t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t    \t\tif ( t >= 0.5 ) {\n\t\n\t    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t    \t\tQuaternion.slerpFlat( buffer, dstOffset,\n\t    \t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\t\n\t    \t},\n\t\n\t    \t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t    \t\tvar s = 1 - t;\n\t\n\t    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t    \t\t\tvar j = dstOffset + i;\n\t\n\t    \t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * A reference to a real property in the scene graph.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function PropertyBinding( rootNode, path, parsedPath ) {\n\t\n\t    \tthis.path = path;\n\t    \tthis.parsedPath = parsedPath ||\n\t    \t\t\tPropertyBinding.parseTrackName( path );\n\t\n\t    \tthis.node = PropertyBinding.findNode(\n\t    \t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\t\n\t    \tthis.rootNode = rootNode;\n\t\n\t    }\n\t\n\t    PropertyBinding.prototype = {\n\t\n\t    \tconstructor: PropertyBinding,\n\t\n\t    \tgetValue: function getValue_unbound( targetArray, offset ) {\n\t\n\t    \t\tthis.bind();\n\t    \t\tthis.getValue( targetArray, offset );\n\t\n\t    \t\t// Note: This class uses a State pattern on a per-method basis:\n\t    \t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t    \t\t// prototype version of these methods with one that represents\n\t    \t\t// the bound state. When the property is not found, the methods\n\t    \t\t// become no-ops.\n\t\n\t    \t},\n\t\n\t    \tsetValue: function getValue_unbound( sourceArray, offset ) {\n\t\n\t    \t\tthis.bind();\n\t    \t\tthis.setValue( sourceArray, offset );\n\t\n\t    \t},\n\t\n\t    \t// create getter / setter pair for a property in the scene graph\n\t    \tbind: function() {\n\t\n\t    \t\tvar targetObject = this.node,\n\t    \t\t\tparsedPath = this.parsedPath,\n\t\n\t    \t\t\tobjectName = parsedPath.objectName,\n\t    \t\t\tpropertyName = parsedPath.propertyName,\n\t    \t\t\tpropertyIndex = parsedPath.propertyIndex;\n\t\n\t    \t\tif ( ! targetObject ) {\n\t\n\t    \t\t\ttargetObject = PropertyBinding.findNode(\n\t    \t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\t\n\t    \t\t\tthis.node = targetObject;\n\t\n\t    \t\t}\n\t\n\t    \t\t// set fail state so we can just 'return' on error\n\t    \t\tthis.getValue = this._getValue_unavailable;\n\t    \t\tthis.setValue = this._setValue_unavailable;\n\t\n\t     \t\t// ensure there is a value node\n\t    \t\tif ( ! targetObject ) {\n\t\n\t    \t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( objectName ) {\n\t\n\t    \t\t\tvar objectIndex = parsedPath.objectIndex;\n\t\n\t    \t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t    \t\t\tswitch ( objectName ) {\n\t\n\t    \t\t\t\tcase 'materials':\n\t\n\t    \t\t\t\t\tif ( ! targetObject.material ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tif ( ! targetObject.material.materials ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tcase 'bones':\n\t\n\t    \t\t\t\t\tif ( ! targetObject.skeleton ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t    \t\t\t\t\t// and convert the integer string to a true integer.\n\t\n\t    \t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\t\n\t    \t\t\t\t\t// support resolving morphTarget names into indices.\n\t    \t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\t\n\t    \t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\t\n\t    \t\t\t\t\t\t\tobjectIndex = i;\n\t    \t\t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t\t}\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbreak;\n\t\n\t    \t\t\t\tdefault:\n\t\n\t    \t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\t\n\t    \t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n\t    \t\t\t\t\t\treturn;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\ttargetObject = targetObject[ objectName ];\n\t\n\t    \t\t\t}\n\t\n\t\n\t    \t\t\tif ( objectIndex !== undefined ) {\n\t\n\t    \t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\t\n\t    \t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\ttargetObject = targetObject[ objectIndex ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// resolve property\n\t    \t\tvar nodeProperty = targetObject[ propertyName ];\n\t\n\t    \t\tif ( nodeProperty === undefined ) {\n\t\n\t    \t\t\tvar nodeName = parsedPath.nodeName;\n\t\n\t    \t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n\t    \t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n\t    \t\t\treturn;\n\t\n\t    \t\t}\n\t\n\t    \t\t// determine versioning scheme\n\t    \t\tvar versioning = this.Versioning.None;\n\t\n\t    \t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\t\n\t    \t\t\tversioning = this.Versioning.NeedsUpdate;\n\t    \t\t\tthis.targetObject = targetObject;\n\t\n\t    \t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\t\n\t    \t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t    \t\t\tthis.targetObject = targetObject;\n\t\n\t    \t\t}\n\t\n\t    \t\t// determine how the property gets bound\n\t    \t\tvar bindingType = this.BindingType.Direct;\n\t\n\t    \t\tif ( propertyIndex !== undefined ) {\n\t    \t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\n\t    \t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\t    \t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\n\t    \t\t\t\t// support resolving morphTarget names into indices.\n\t    \t\t\t\tif ( ! targetObject.geometry ) {\n\t\n\t    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\t\n\t    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n\t    \t\t\t\t\treturn;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\t\n\t    \t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\t\n\t    \t\t\t\t\t\tpropertyIndex = i;\n\t    \t\t\t\t\t\tbreak;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tbindingType = this.BindingType.ArrayElement;\n\t\n\t    \t\t\tthis.resolvedProperty = nodeProperty;\n\t    \t\t\tthis.propertyIndex = propertyIndex;\n\t\n\t    \t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\t    \t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\n\t    \t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\n\t    \t\t\tthis.resolvedProperty = nodeProperty;\n\t\n\t    \t\t} else if ( nodeProperty.length !== undefined ) {\n\t\n\t    \t\t\tbindingType = this.BindingType.EntireArray;\n\t\n\t    \t\t\tthis.resolvedProperty = nodeProperty;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.propertyName = propertyName;\n\t\n\t    \t\t}\n\t\n\t    \t\t// select getter / setter\n\t    \t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t    \t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\t\n\t    \t},\n\t\n\t    \tunbind: function() {\n\t\n\t    \t\tthis.node = null;\n\t\n\t    \t\t// back to the prototype version of getValue / setValue\n\t    \t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t    \t\tthis.getValue = this._getValue_unbound;\n\t    \t\tthis.setValue = this._setValue_unbound;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    Object.assign( PropertyBinding.prototype, { // prototype, continued\n\t\n\t    \t// these are used to \"bind\" a nonexistent property\n\t    \t_getValue_unavailable: function() {},\n\t    \t_setValue_unavailable: function() {},\n\t\n\t    \t// initial state of these methods that calls 'bind'\n\t    \t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t    \t_setValue_unbound: PropertyBinding.prototype.setValue,\n\t\n\t    \tBindingType: {\n\t    \t\tDirect: 0,\n\t    \t\tEntireArray: 1,\n\t    \t\tArrayElement: 2,\n\t    \t\tHasFromToArray: 3\n\t    \t},\n\t\n\t    \tVersioning: {\n\t    \t\tNone: 0,\n\t    \t\tNeedsUpdate: 1,\n\t    \t\tMatrixWorldNeedsUpdate: 2\n\t    \t},\n\t\n\t    \tGetterByBindingType: [\n\t\n\t    \t\tfunction getValue_direct( buffer, offset ) {\n\t\n\t    \t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction getValue_array( buffer, offset ) {\n\t\n\t    \t\t\tvar source = this.resolvedProperty;\n\t\n\t    \t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\t\n\t    \t\t\t}\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction getValue_arrayElement( buffer, offset ) {\n\t\n\t    \t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction getValue_toArray( buffer, offset ) {\n\t\n\t    \t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\t\n\t    \t\t}\n\t\n\t    \t],\n\t\n\t    \tSetterByBindingTypeAndVersioning: [\n\t\n\t    \t\t[\n\t    \t\t\t// Direct\n\t\n\t    \t\t\tfunction setValue_direct( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t], [\n\t\n\t    \t\t\t// EntireArray\n\t\n\t    \t\t\tfunction setValue_array( buffer, offset ) {\n\t\n\t    \t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t], [\n\t\n\t    \t\t\t// ArrayElement\n\t\n\t    \t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t], [\n\t\n\t    \t\t\t// HasToFromArray\n\t\n\t    \t\t\tfunction setValue_fromArray( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t    \t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t    \t\t\t},\n\t\n\t    \t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t]\n\t\n\t    \t]\n\t\n\t    } );\n\t\n\t    PropertyBinding.Composite =\n\t    \t\tfunction( targetGroup, path, optionalParsedPath ) {\n\t\n\t    \tvar parsedPath = optionalParsedPath ||\n\t    \t\t\tPropertyBinding.parseTrackName( path );\n\t\n\t    \tthis._targetGroup = targetGroup;\n\t    \tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\t\n\t    };\n\t\n\t    PropertyBinding.Composite.prototype = {\n\t\n\t    \tconstructor: PropertyBinding.Composite,\n\t\n\t    \tgetValue: function( array, offset ) {\n\t\n\t    \t\tthis.bind(); // bind all binding\n\t\n\t    \t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t    \t\t\tbinding = this._bindings[ firstValidIndex ];\n\t\n\t    \t\t// and only call .getValue on the first\n\t    \t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\t\n\t    \t},\n\t\n\t    \tsetValue: function( array, offset ) {\n\t\n\t    \t\tvar bindings = this._bindings;\n\t\n\t    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].setValue( array, offset );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tbind: function() {\n\t\n\t    \t\tvar bindings = this._bindings;\n\t\n\t    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].bind();\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tunbind: function() {\n\t\n\t    \t\tvar bindings = this._bindings;\n\t\n\t    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].unbind();\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    PropertyBinding.create = function( root, path, parsedPath ) {\n\t\n\t    \tif ( ! ( (root && root.isAnimationObjectGroup) ) ) {\n\t\n\t    \t\treturn new PropertyBinding( root, path, parsedPath );\n\t\n\t    \t} else {\n\t\n\t    \t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    PropertyBinding.parseTrackName = function( trackName ) {\n\t\n\t    \t// matches strings in the form of:\n\t    \t//    nodeName.property\n\t    \t//    nodeName.property[accessor]\n\t    \t//    nodeName.material.property[accessor]\n\t    \t//    uuid.property[accessor]\n\t    \t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t    \t//    parentName/nodeName.property\n\t    \t//    parentName/parentName/nodeName.property[index]\n\t    \t//    .bone[Armature.DEF_cog].position\n\t    \t//    scene:helium_balloon_model:helium_balloon_model.position\n\t    \t// created and tested via https://regex101.com/#javascript\n\t\n\t    \tvar re = /^((?:\\w+[\\/:])*)(\\w+)?(?:\\.(\\w+)(?:\\[(.+)\\])?)?\\.(\\w+)(?:\\[(.+)\\])?$/;\n\t    \tvar matches = re.exec( trackName );\n\t\n\t    \tif ( ! matches ) {\n\t\n\t    \t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\t\n\t    \t}\n\t\n\t    \tvar results = {\n\t    \t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t    \t\tnodeName: matches[ 2 ], \t// allowed to be null, specified root node.\n\t    \t\tobjectName: matches[ 3 ],\n\t    \t\tobjectIndex: matches[ 4 ],\n\t    \t\tpropertyName: matches[ 5 ],\n\t    \t\tpropertyIndex: matches[ 6 ]\t// allowed to be null, specifies that the whole property is set.\n\t    \t};\n\t\n\t    \tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\t\n\t    \t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\t\n\t    \t}\n\t\n\t    \treturn results;\n\t\n\t    };\n\t\n\t    PropertyBinding.findNode = function( root, nodeName ) {\n\t\n\t    \tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\t\n\t    \t\treturn root;\n\t\n\t    \t}\n\t\n\t    \t// search into skeleton bones.\n\t    \tif ( root.skeleton ) {\n\t\n\t    \t\tvar searchSkeleton = function( skeleton ) {\n\t\n\t    \t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\t\n\t    \t\t\t\tvar bone = skeleton.bones[ i ];\n\t\n\t    \t\t\t\tif ( bone.name === nodeName ) {\n\t\n\t    \t\t\t\t\treturn bone;\n\t\n\t    \t\t\t\t}\n\t    \t\t\t}\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t};\n\t\n\t    \t\tvar bone = searchSkeleton( root.skeleton );\n\t\n\t    \t\tif ( bone ) {\n\t\n\t    \t\t\treturn bone;\n\t\n\t    \t\t}\n\t    \t}\n\t\n\t    \t// search into node subtree.\n\t    \tif ( root.children ) {\n\t\n\t    \t\tvar searchNodeSubtree = function( children ) {\n\t\n\t    \t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\t\n\t    \t\t\t\tvar childNode = children[ i ];\n\t\n\t    \t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\t\n\t    \t\t\t\t\treturn childNode;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\t\n\t    \t\t\t\tif ( result ) return result;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\treturn null;\n\t\n\t    \t\t};\n\t\n\t    \t\tvar subTreeNode = searchNodeSubtree( root.children );\n\t\n\t    \t\tif ( subTreeNode ) {\n\t\n\t    \t\t\treturn subTreeNode;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn null;\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * A group of objects that receives a shared animation state.\n\t     *\n\t     * Usage:\n\t     *\n\t     * \t-\tAdd objects you would otherwise pass as 'root' to the\n\t     * \t\tconstructor or the .clipAction method of AnimationMixer.\n\t     *\n\t     * \t-\tInstead pass this object as 'root'.\n\t     *\n\t     * \t-\tYou can also add and remove objects later when the mixer\n\t     * \t\tis running.\n\t     *\n\t     * Note:\n\t     *\n\t     *  \tObjects of this class appear as one object to the mixer,\n\t     *  \tso cache control of the individual objects must be done\n\t     *  \ton the group.\n\t     *\n\t     * Limitation:\n\t     *\n\t     * \t- \tThe animated properties must be compatible among the\n\t     * \t\tall objects in the group.\n\t     *\n\t     *  -\tA single property can either be controlled through a\n\t     *  \ttarget group or directly, but not both.\n\t     *\n\t     * @author tschw\n\t     */\n\t\n\t    function AnimationObjectGroup( var_args ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \t// cached objects followed by the active ones\n\t    \tthis._objects = Array.prototype.slice.call( arguments );\n\t\n\t    \tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t    \t// note: read by PropertyBinding.Composite\n\t\n\t    \tvar indices = {};\n\t    \tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\t\n\t    \tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\tindices[ arguments[ i ].uuid ] = i;\n\t\n\t    \t}\n\t\n\t    \tthis._paths = [];\t\t\t\t\t// inside: string\n\t    \tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\t    \tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\t    \tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\t\n\t    \tvar scope = this;\n\t\n\t    \tthis.stats = {\n\t\n\t    \t\tobjects: {\n\t    \t\t\tget total() { return scope._objects.length; },\n\t    \t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n\t    \t\t},\n\t\n\t    \t\tget bindingsPerObject() { return scope._bindings.length; }\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    AnimationObjectGroup.prototype = {\n\t\n\t    \tconstructor: AnimationObjectGroup,\n\t\n\t    \tisAnimationObjectGroup: true,\n\t\n\t    \tadd: function( var_args ) {\n\t\n\t    \t\tvar objects = this._objects,\n\t    \t\t\tnObjects = objects.length,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tindicesByUUID = this._indicesByUUID,\n\t    \t\t\tpaths = this._paths,\n\t    \t\t\tparsedPaths = this._parsedPaths,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = bindings.length;\n\t\n\t    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = arguments[ i ],\n\t    \t\t\t\tuuid = object.uuid,\n\t    \t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t    \t\t\tif ( index === undefined ) {\n\t\n\t    \t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\n\t    \t\t\t\tindex = nObjects ++;\n\t    \t\t\t\tindicesByUUID[ uuid ] = index;\n\t    \t\t\t\tobjects.push( object );\n\t\n\t    \t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\tbindings[ j ].push(\n\t    \t\t\t\t\t\t\tnew PropertyBinding(\n\t    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( index < nCachedObjects ) {\n\t\n\t    \t\t\t\tvar knownObject = objects[ index ];\n\t\n\t    \t\t\t\t// move existing object to the ACTIVE region\n\t\n\t    \t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t    \t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\t\n\t    \t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t    \t\t\t\tobjects[ index ] = lastCachedObject;\n\t\n\t    \t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t    \t\t\t\tobjects[ firstActiveIndex ] = object;\n\t\n\t    \t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t    \t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\t\n\t    \t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\n\t    \t\t\t\t\tif ( binding === undefined ) {\n\t\n\t    \t\t\t\t\t\t// since we do not bother to create new bindings\n\t    \t\t\t\t\t\t// for objects that are cached, the binding may\n\t    \t\t\t\t\t\t// or may not exist\n\t\n\t    \t\t\t\t\t\tbinding = new PropertyBinding(\n\t    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t} else if ( objects[ index ] !== knownObject) {\n\t\n\t    \t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n\t    \t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n\t    \t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\t\n\t    \t\t\t} // else the object is already where we want it to be\n\t\n\t    \t\t} // for arguments\n\t\n\t    \t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t    \t},\n\t\n\t    \tremove: function( var_args ) {\n\t\n\t    \t\tvar objects = this._objects,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tindicesByUUID = this._indicesByUUID,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = bindings.length;\n\t\n\t    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = arguments[ i ],\n\t    \t\t\t\tuuid = object.uuid,\n\t    \t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t    \t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\t\n\t    \t\t\t\t// move existing object into the CACHED region\n\t\n\t    \t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t    \t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\t\n\t    \t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t    \t\t\t\tobjects[ index ] = firstActiveObject;\n\t\n\t    \t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t    \t\t\t\tobjects[ lastCachedIndex ] = object;\n\t\n\t    \t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t    \t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\t\n\t    \t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t    \t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} // for arguments\n\t\n\t    \t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t    \t},\n\t\n\t    \t// remove & forget\n\t    \tuncache: function( var_args ) {\n\t\n\t    \t\tvar objects = this._objects,\n\t    \t\t\tnObjects = objects.length,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tindicesByUUID = this._indicesByUUID,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = bindings.length;\n\t\n\t    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = arguments[ i ],\n\t    \t\t\t\tuuid = object.uuid,\n\t    \t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t    \t\t\tif ( index !== undefined ) {\n\t\n\t    \t\t\t\tdelete indicesByUUID[ uuid ];\n\t\n\t    \t\t\t\tif ( index < nCachedObjects ) {\n\t\n\t    \t\t\t\t\t// object is cached, shrink the CACHED region\n\t\n\t    \t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t    \t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t    \t\t\t\t\t\tlastIndex = -- nObjects,\n\t    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\t\n\t    \t\t\t\t\t// last cached object takes this object's place\n\t    \t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t    \t\t\t\t\tobjects[ index ] = lastCachedObject;\n\t\n\t    \t\t\t\t\t// last object goes to the activated slot and pop\n\t    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t    \t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t    \t\t\t\t\tobjects.pop();\n\t\n\t    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t    \t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t    \t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\t\n\t    \t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t    \t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t    \t\t\t\t\t\tbindingsForPath.pop();\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// object is active, just swap with the last and pop\n\t\n\t    \t\t\t\t\tvar lastIndex = -- nObjects,\n\t    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\t\n\t    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t    \t\t\t\t\tobjects[ index ] = lastObject;\n\t    \t\t\t\t\tobjects.pop();\n\t\n\t    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\t\n\t    \t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t    \t\t\t\t\t\tbindingsForPath.pop();\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t} // cached or active\n\t\n\t    \t\t\t} // if object is known\n\t\n\t    \t\t} // for arguments\n\t\n\t    \t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t    \t},\n\t\n\t    \t// Internal interface used by befriended PropertyBinding.Composite:\n\t\n\t    \tsubscribe_: function( path, parsedPath ) {\n\t    \t\t// returns an array of bindings for the given path that is changed\n\t    \t\t// according to the contained objects in the group\n\t\n\t    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t    \t\t\tindex = indicesByPath[ path ],\n\t    \t\t\tbindings = this._bindings;\n\t\n\t    \t\tif ( index !== undefined ) return bindings[ index ];\n\t\n\t    \t\tvar paths = this._paths,\n\t    \t\t\tparsedPaths = this._parsedPaths,\n\t    \t\t\tobjects = this._objects,\n\t    \t\t\tnObjects = objects.length,\n\t    \t\t\tnCachedObjects = this.nCachedObjects_,\n\t    \t\t\tbindingsForPath = new Array( nObjects );\n\t\n\t    \t\tindex = bindings.length;\n\t\n\t    \t\tindicesByPath[ path ] = index;\n\t\n\t    \t\tpaths.push( path );\n\t    \t\tparsedPaths.push( parsedPath );\n\t    \t\tbindings.push( bindingsForPath );\n\t\n\t    \t\tfor ( var i = nCachedObjects,\n\t    \t\t\t\tn = objects.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar object = objects[ i ];\n\t\n\t    \t\t\tbindingsForPath[ i ] =\n\t    \t\t\t\t\tnew PropertyBinding( object, path, parsedPath );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn bindingsForPath;\n\t\n\t    \t},\n\t\n\t    \tunsubscribe_: function( path ) {\n\t    \t\t// tells the group to forget about a property path and no longer\n\t    \t\t// update the array previously obtained with 'subscribe_'\n\t\n\t    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t    \t\t\tindex = indicesByPath[ path ];\n\t\n\t    \t\tif ( index !== undefined ) {\n\t\n\t    \t\t\tvar paths = this._paths,\n\t    \t\t\t\tparsedPaths = this._parsedPaths,\n\t    \t\t\t\tbindings = this._bindings,\n\t    \t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t    \t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t    \t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\t\n\t    \t\t\tindicesByPath[ lastBindingsPath ] = index;\n\t\n\t    \t\t\tbindings[ index ] = lastBindings;\n\t    \t\t\tbindings.pop();\n\t\n\t    \t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t    \t\t\tparsedPaths.pop();\n\t\n\t    \t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t    \t\t\tpaths.pop();\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * Action provided by AnimationMixer for scheduling clip playback on specific\n\t     * objects.\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     *\n\t     */\n\t\n\t    function AnimationAction( mixer, clip, localRoot ) {\n\t\n\t    \tthis._mixer = mixer;\n\t    \tthis._clip = clip;\n\t    \tthis._localRoot = localRoot || null;\n\t\n\t    \tvar tracks = clip.tracks,\n\t    \t\tnTracks = tracks.length,\n\t    \t\tinterpolants = new Array( nTracks );\n\t\n\t    \tvar interpolantSettings = {\n\t    \t\t\tendingStart: \tZeroCurvatureEnding,\n\t    \t\t\tendingEnd:\t\tZeroCurvatureEnding\n\t    \t};\n\t\n\t    \tfor ( var i = 0; i !== nTracks; ++ i ) {\n\t\n\t    \t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t    \t\tinterpolants[ i ] = interpolant;\n\t    \t\tinterpolant.settings = interpolantSettings;\n\t\n\t    \t}\n\t\n\t    \tthis._interpolantSettings = interpolantSettings;\n\t\n\t    \tthis._interpolants = interpolants;\t// bound by the mixer\n\t\n\t    \t// inside: PropertyMixer (managed by the mixer)\n\t    \tthis._propertyBindings = new Array( nTracks );\n\t\n\t    \tthis._cacheIndex = null;\t\t\t// for the memory manager\n\t    \tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\t\n\t    \tthis._timeScaleInterpolant = null;\n\t    \tthis._weightInterpolant = null;\n\t\n\t    \tthis.loop = LoopRepeat;\n\t    \tthis._loopCount = -1;\n\t\n\t    \t// global mixer time when the action is to be started\n\t    \t// it's set back to 'null' upon start of the action\n\t    \tthis._startTime = null;\n\t\n\t    \t// scaled local time of the action\n\t    \t// gets clamped or wrapped to 0..clip.duration according to loop\n\t    \tthis.time = 0;\n\t\n\t    \tthis.timeScale = 1;\n\t    \tthis._effectiveTimeScale = 1;\n\t\n\t    \tthis.weight = 1;\n\t    \tthis._effectiveWeight = 1;\n\t\n\t    \tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\t\n\t    \tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n\t    \tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\t\n\t    \tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\t\n\t    \tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\t    \tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\t\n\t    };\n\t\n\t    AnimationAction.prototype = {\n\t\n\t    \tconstructor: AnimationAction,\n\t\n\t    \t// State & Scheduling\n\t\n\t    \tplay: function() {\n\t\n\t    \t\tthis._mixer._activateAction( this );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tstop: function() {\n\t\n\t    \t\tthis._mixer._deactivateAction( this );\n\t\n\t    \t\treturn this.reset();\n\t\n\t    \t},\n\t\n\t    \treset: function() {\n\t\n\t    \t\tthis.paused = false;\n\t    \t\tthis.enabled = true;\n\t\n\t    \t\tthis.time = 0;\t\t\t// restart clip\n\t    \t\tthis._loopCount = -1;\t// forget previous loops\n\t    \t\tthis._startTime = null;\t// forget scheduling\n\t\n\t    \t\treturn this.stopFading().stopWarping();\n\t\n\t    \t},\n\t\n\t    \tisRunning: function() {\n\t\n\t    \t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t    \t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\t\n\t    \t},\n\t\n\t    \t// return true when play has been called\n\t    \tisScheduled: function() {\n\t\n\t    \t\treturn this._mixer._isActiveAction( this );\n\t\n\t    \t},\n\t\n\t    \tstartAt: function( time ) {\n\t\n\t    \t\tthis._startTime = time;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetLoop: function( mode, repetitions ) {\n\t\n\t    \t\tthis.loop = mode;\n\t    \t\tthis.repetitions = repetitions;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// Weight\n\t\n\t    \t// set the weight stopping any scheduled fading\n\t    \t// although .enabled = false yields an effective weight of zero, this\n\t    \t// method does *not* change .enabled, because it would be confusing\n\t    \tsetEffectiveWeight: function( weight ) {\n\t\n\t    \t\tthis.weight = weight;\n\t\n\t    \t\t// note: same logic as when updated at runtime\n\t    \t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\n\t    \t\treturn this.stopFading();\n\t\n\t    \t},\n\t\n\t    \t// return the weight considering fading and .enabled\n\t    \tgetEffectiveWeight: function() {\n\t\n\t    \t\treturn this._effectiveWeight;\n\t\n\t    \t},\n\t\n\t    \tfadeIn: function( duration ) {\n\t\n\t    \t\treturn this._scheduleFading( duration, 0, 1 );\n\t\n\t    \t},\n\t\n\t    \tfadeOut: function( duration ) {\n\t\n\t    \t\treturn this._scheduleFading( duration, 1, 0 );\n\t\n\t    \t},\n\t\n\t    \tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\t\n\t    \t\tfadeOutAction.fadeOut( duration );\n\t    \t\tthis.fadeIn( duration );\n\t\n\t    \t\tif( warp ) {\n\t\n\t    \t\t\tvar fadeInDuration = this._clip.duration,\n\t    \t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\n\t    \t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t    \t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\n\t    \t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t    \t\t\tthis.warp( endStartRatio, 1.0, duration );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\t\n\t    \t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\t\n\t    \t},\n\t\n\t    \tstopFading: function() {\n\t\n\t    \t\tvar weightInterpolant = this._weightInterpolant;\n\t\n\t    \t\tif ( weightInterpolant !== null ) {\n\t\n\t    \t\t\tthis._weightInterpolant = null;\n\t    \t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// Time Scale Control\n\t\n\t    \t// set the weight stopping any scheduled warping\n\t    \t// although .paused = true yields an effective time scale of zero, this\n\t    \t// method does *not* change .paused, because it would be confusing\n\t    \tsetEffectiveTimeScale: function( timeScale ) {\n\t\n\t    \t\tthis.timeScale = timeScale;\n\t    \t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\t\n\t    \t\treturn this.stopWarping();\n\t\n\t    \t},\n\t\n\t    \t// return the time scale considering warping and .paused\n\t    \tgetEffectiveTimeScale: function() {\n\t\n\t    \t\treturn this._effectiveTimeScale;\n\t\n\t    \t},\n\t\n\t    \tsetDuration: function( duration ) {\n\t\n\t    \t\tthis.timeScale = this._clip.duration / duration;\n\t\n\t    \t\treturn this.stopWarping();\n\t\n\t    \t},\n\t\n\t    \tsyncWith: function( action ) {\n\t\n\t    \t\tthis.time = action.time;\n\t    \t\tthis.timeScale = action.timeScale;\n\t\n\t    \t\treturn this.stopWarping();\n\t\n\t    \t},\n\t\n\t    \thalt: function( duration ) {\n\t\n\t    \t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\t\n\t    \t},\n\t\n\t    \twarp: function( startTimeScale, endTimeScale, duration ) {\n\t\n\t    \t\tvar mixer = this._mixer, now = mixer.time,\n\t    \t\t\tinterpolant = this._timeScaleInterpolant,\n\t\n\t    \t\t\ttimeScale = this.timeScale;\n\t\n\t    \t\tif ( interpolant === null ) {\n\t\n\t    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t    \t\t\tthis._timeScaleInterpolant = interpolant;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar times = interpolant.parameterPositions,\n\t    \t\t\tvalues = interpolant.sampleValues;\n\t\n\t    \t\ttimes[ 0 ] = now;\n\t    \t\ttimes[ 1 ] = now + duration;\n\t\n\t    \t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t    \t\tvalues[ 1 ] = endTimeScale / timeScale;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tstopWarping: function() {\n\t\n\t    \t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\t\n\t    \t\tif ( timeScaleInterpolant !== null ) {\n\t\n\t    \t\t\tthis._timeScaleInterpolant = null;\n\t    \t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// Object Accessors\n\t\n\t    \tgetMixer: function() {\n\t\n\t    \t\treturn this._mixer;\n\t\n\t    \t},\n\t\n\t    \tgetClip: function() {\n\t\n\t    \t\treturn this._clip;\n\t\n\t    \t},\n\t\n\t    \tgetRoot: function() {\n\t\n\t    \t\treturn this._localRoot || this._mixer._root;\n\t\n\t    \t},\n\t\n\t    \t// Interna\n\t\n\t    \t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n\t    \t\t// called by the mixer\n\t\n\t    \t\tvar startTime = this._startTime;\n\t\n\t    \t\tif ( startTime !== null ) {\n\t\n\t    \t\t\t// check for scheduled start of action\n\t\n\t    \t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t    \t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\t\n\t    \t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// start\n\t\n\t    \t\t\tthis._startTime = null; // unschedule\n\t    \t\t\tdeltaTime = timeDirection * timeRunning;\n\t\n\t    \t\t}\n\t\n\t    \t\t// apply time scale and advance time\n\t\n\t    \t\tdeltaTime *= this._updateTimeScale( time );\n\t    \t\tvar clipTime = this._updateTime( deltaTime );\n\t\n\t    \t\t// note: _updateTime may disable the action resulting in\n\t    \t\t// an effective weight of 0\n\t\n\t    \t\tvar weight = this._updateWeight( time );\n\t\n\t    \t\tif ( weight > 0 ) {\n\t\n\t    \t\t\tvar interpolants = this._interpolants;\n\t    \t\t\tvar propertyMixers = this._propertyBindings;\n\t\n\t    \t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\t\n\t    \t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t    \t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_updateWeight: function( time ) {\n\t\n\t    \t\tvar weight = 0;\n\t\n\t    \t\tif ( this.enabled ) {\n\t\n\t    \t\t\tweight = this.weight;\n\t    \t\t\tvar interpolant = this._weightInterpolant;\n\t\n\t    \t\t\tif ( interpolant !== null ) {\n\t\n\t    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\t\n\t    \t\t\t\tweight *= interpolantValue;\n\t\n\t    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\t\n\t    \t\t\t\t\tthis.stopFading();\n\t\n\t    \t\t\t\t\tif ( interpolantValue === 0 ) {\n\t\n\t    \t\t\t\t\t\t// faded out, disable\n\t    \t\t\t\t\t\tthis.enabled = false;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._effectiveWeight = weight;\n\t    \t\treturn weight;\n\t\n\t    \t},\n\t\n\t    \t_updateTimeScale: function( time ) {\n\t\n\t    \t\tvar timeScale = 0;\n\t\n\t    \t\tif ( ! this.paused ) {\n\t\n\t    \t\t\ttimeScale = this.timeScale;\n\t\n\t    \t\t\tvar interpolant = this._timeScaleInterpolant;\n\t\n\t    \t\t\tif ( interpolant !== null ) {\n\t\n\t    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\t\n\t    \t\t\t\ttimeScale *= interpolantValue;\n\t\n\t    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\t\n\t    \t\t\t\t\tthis.stopWarping();\n\t\n\t    \t\t\t\t\tif ( timeScale === 0 ) {\n\t\n\t    \t\t\t\t\t\t// motion has halted, pause\n\t    \t\t\t\t\t\tthis.paused = true;\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\t// warp done - apply final time scale\n\t    \t\t\t\t\t\tthis.timeScale = timeScale;\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._effectiveTimeScale = timeScale;\n\t    \t\treturn timeScale;\n\t\n\t    \t},\n\t\n\t    \t_updateTime: function( deltaTime ) {\n\t\n\t    \t\tvar time = this.time + deltaTime;\n\t\n\t    \t\tif ( deltaTime === 0 ) return time;\n\t\n\t    \t\tvar duration = this._clip.duration,\n\t\n\t    \t\t\tloop = this.loop,\n\t    \t\t\tloopCount = this._loopCount;\n\t\n\t    \t\tif ( loop === LoopOnce ) {\n\t\n\t    \t\t\tif ( loopCount === -1 ) {\n\t    \t\t\t\t// just started\n\t\n\t    \t\t\t\tthis.loopCount = 0;\n\t    \t\t\t\tthis._setEndings( true, true, false );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\thandle_stop: {\n\t\n\t    \t\t\t\tif ( time >= duration ) {\n\t\n\t    \t\t\t\t\ttime = duration;\n\t\n\t    \t\t\t\t} else if ( time < 0 ) {\n\t\n\t    \t\t\t\t\ttime = 0;\n\t\n\t    \t\t\t\t} else break handle_stop;\n\t\n\t    \t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t    \t\t\t\telse this.enabled = false;\n\t\n\t    \t\t\t\tthis._mixer.dispatchEvent( {\n\t    \t\t\t\t\ttype: 'finished', action: this,\n\t    \t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t    \t\t\t\t} );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else { // repetitive Repeat or PingPong\n\t\n\t    \t\t\tvar pingPong = ( loop === LoopPingPong );\n\t\n\t    \t\t\tif ( loopCount === -1 ) {\n\t    \t\t\t\t// just started\n\t\n\t    \t\t\t\tif ( deltaTime >= 0 ) {\n\t\n\t    \t\t\t\t\tloopCount = 0;\n\t\n\t    \t\t\t\t\tthis._setEndings(\n\t    \t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\t\n\t    \t\t\t\t} else {\n\t\n\t    \t\t\t\t\t// when looping in reverse direction, the initial\n\t    \t\t\t\t\t// transition through zero counts as a repetition,\n\t    \t\t\t\t\t// so leave loopCount at -1\n\t\n\t    \t\t\t\t\tthis._setEndings(\n\t    \t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( time >= duration || time < 0 ) {\n\t    \t\t\t\t// wrap around\n\t\n\t    \t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t    \t\t\t\ttime -= duration * loopDelta;\n\t\n\t    \t\t\t\tloopCount += Math.abs( loopDelta );\n\t\n\t    \t\t\t\tvar pending = this.repetitions - loopCount;\n\t\n\t    \t\t\t\tif ( pending < 0 ) {\n\t    \t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\n\t    \t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t    \t\t\t\t\telse this.enabled = false;\n\t\n\t    \t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\n\t    \t\t\t\t\tthis._mixer.dispatchEvent( {\n\t    \t\t\t\t\t\ttype: 'finished', action: this,\n\t    \t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t} else {\n\t    \t\t\t\t\t// keep running\n\t\n\t    \t\t\t\t\tif ( pending === 0 ) {\n\t    \t\t\t\t\t\t// entering the last round\n\t\n\t    \t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t    \t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\t\n\t    \t\t\t\t\t} else {\n\t\n\t    \t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tthis._loopCount = loopCount;\n\t\n\t    \t\t\t\t\tthis._mixer.dispatchEvent( {\n\t    \t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t    \t\t\t\t\t} );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\t    \t\t\t\t// invert time for the \"pong round\"\n\t\n\t    \t\t\t\tthis.time = time;\n\t    \t\t\t\treturn duration - time;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.time = time;\n\t    \t\treturn time;\n\t\n\t    \t},\n\t\n\t    \t_setEndings: function( atStart, atEnd, pingPong ) {\n\t\n\t    \t\tvar settings = this._interpolantSettings;\n\t\n\t    \t\tif ( pingPong ) {\n\t\n\t    \t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n\t    \t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\n\t    \t\t\tif ( atStart ) {\n\t\n\t    \t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n\t    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( atEnd ) {\n\t\n\t    \t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n\t    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_scheduleFading: function( duration, weightNow, weightThen ) {\n\t\n\t    \t\tvar mixer = this._mixer, now = mixer.time,\n\t    \t\t\tinterpolant = this._weightInterpolant;\n\t\n\t    \t\tif ( interpolant === null ) {\n\t\n\t    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t    \t\t\tthis._weightInterpolant = interpolant;\n\t\n\t    \t\t}\n\t\n\t    \t\tvar times = interpolant.parameterPositions,\n\t    \t\t\tvalues = interpolant.sampleValues;\n\t\n\t    \t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t    \t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     *\n\t     * Player for AnimationClips.\n\t     *\n\t     *\n\t     * @author Ben Houston / http://clara.io/\n\t     * @author David Sarno / http://lighthaus.us/\n\t     * @author tschw\n\t     */\n\t\n\t    function AnimationMixer( root ) {\n\t\n\t    \tthis._root = root;\n\t    \tthis._initMemoryManager();\n\t    \tthis._accuIndex = 0;\n\t\n\t    \tthis.time = 0;\n\t\n\t    \tthis.timeScale = 1.0;\n\t\n\t    }\n\t\n\t    Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {\n\t\n\t    \t// return an action for a clip optionally using a custom root target\n\t    \t// object (this method allocates a lot of dynamic memory in case a\n\t    \t// previously unknown clip/root combination is specified)\n\t    \tclipAction: function( clip, optionalRoot ) {\n\t\n\t    \t\tvar root = optionalRoot || this._root,\n\t    \t\t\trootUuid = root.uuid,\n\t\n\t    \t\t\tclipObject = typeof clip === 'string' ?\n\t    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\t\n\t    \t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\t\n\t    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t    \t\t\tprototypeAction = null;\n\t\n\t    \t\tif ( actionsForClip !== undefined ) {\n\t\n\t    \t\t\tvar existingAction =\n\t    \t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\t\n\t    \t\t\tif ( existingAction !== undefined ) {\n\t\n\t    \t\t\t\treturn existingAction;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\t// we know the clip, so we don't have to parse all\n\t    \t\t\t// the bindings again but can just copy\n\t    \t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\t\n\t    \t\t\t// also, take the clip from the prototype action\n\t    \t\t\tif ( clipObject === null )\n\t    \t\t\t\tclipObject = prototypeAction._clip;\n\t\n\t    \t\t}\n\t\n\t    \t\t// clip must be known when specified via string\n\t    \t\tif ( clipObject === null ) return null;\n\t\n\t    \t\t// allocate all resources required to run it\n\t    \t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\t\n\t    \t\tthis._bindAction( newAction, prototypeAction );\n\t\n\t    \t\t// and make the action known to the memory manager\n\t    \t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\t\n\t    \t\treturn newAction;\n\t\n\t    \t},\n\t\n\t    \t// get an existing action\n\t    \texistingAction: function( clip, optionalRoot ) {\n\t\n\t    \t\tvar root = optionalRoot || this._root,\n\t    \t\t\trootUuid = root.uuid,\n\t\n\t    \t\t\tclipObject = typeof clip === 'string' ?\n\t    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\t\n\t    \t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\n\t    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\t\n\t    \t\tif ( actionsForClip !== undefined ) {\n\t\n\t    \t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn null;\n\t\n\t    \t},\n\t\n\t    \t// deactivates all previously scheduled actions\n\t    \tstopAllAction: function() {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tnActions = this._nActiveActions,\n\t    \t\t\tbindings = this._bindings,\n\t    \t\t\tnBindings = this._nActiveBindings;\n\t\n\t    \t\tthis._nActiveActions = 0;\n\t    \t\tthis._nActiveBindings = 0;\n\t\n\t    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\t\n\t    \t\t\tactions[ i ].reset();\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].useCount = 0;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// advance the time and update apply the animation\n\t    \tupdate: function( deltaTime ) {\n\t\n\t    \t\tdeltaTime *= this.timeScale;\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tnActions = this._nActiveActions,\n\t\n\t    \t\t\ttime = this.time += deltaTime,\n\t    \t\t\ttimeDirection = Math.sign( deltaTime ),\n\t\n\t    \t\t\taccuIndex = this._accuIndex ^= 1;\n\t\n\t    \t\t// run active actions\n\t\n\t    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\t\n\t    \t\t\tvar action = actions[ i ];\n\t\n\t    \t\t\tif ( action.enabled ) {\n\t\n\t    \t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// update scene graph\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tnBindings = this._nActiveBindings;\n\t\n\t    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\t\n\t    \t\t\tbindings[ i ].apply( accuIndex );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// return this mixer's root target object\n\t    \tgetRoot: function() {\n\t\n\t    \t\treturn this._root;\n\t\n\t    \t},\n\t\n\t    \t// free all resources specific to a particular clip\n\t    \tuncacheClip: function( clip ) {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tclipUuid = clip.uuid,\n\t    \t\t\tactionsByClip = this._actionsByClip,\n\t    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\t\n\t    \t\tif ( actionsForClip !== undefined ) {\n\t\n\t    \t\t\t// note: just calling _removeInactiveAction would mess up the\n\t    \t\t\t// iteration state and also require updating the state we can\n\t    \t\t\t// just throw away\n\t\n\t    \t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\t\n\t    \t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar action = actionsToRemove[ i ];\n\t\n\t    \t\t\t\tthis._deactivateAction( action );\n\t\n\t    \t\t\t\tvar cacheIndex = action._cacheIndex,\n\t    \t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\t\n\t    \t\t\t\taction._cacheIndex = null;\n\t    \t\t\t\taction._byClipCacheIndex = null;\n\t\n\t    \t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t    \t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t    \t\t\t\tactions.pop();\n\t\n\t    \t\t\t\tthis._removeInactiveBindingsForAction( action );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tdelete actionsByClip[ clipUuid ];\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// free all resources specific to a particular root target object\n\t    \tuncacheRoot: function( root ) {\n\t\n\t    \t\tvar rootUuid = root.uuid,\n\t    \t\t\tactionsByClip = this._actionsByClip;\n\t\n\t    \t\tfor ( var clipUuid in actionsByClip ) {\n\t\n\t    \t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t    \t\t\t\taction = actionByRoot[ rootUuid ];\n\t\n\t    \t\t\tif ( action !== undefined ) {\n\t\n\t    \t\t\t\tthis._deactivateAction( action );\n\t    \t\t\t\tthis._removeInactiveAction( action );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\t\n\t    \t\tif ( bindingByName !== undefined ) {\n\t\n\t    \t\t\tfor ( var trackName in bindingByName ) {\n\t\n\t    \t\t\t\tvar binding = bindingByName[ trackName ];\n\t    \t\t\t\tbinding.restoreOriginalState();\n\t    \t\t\t\tthis._removeInactiveBinding( binding );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// remove a targeted clip from the cache\n\t    \tuncacheAction: function( clip, optionalRoot ) {\n\t\n\t    \t\tvar action = this.existingAction( clip, optionalRoot );\n\t\n\t    \t\tif ( action !== null ) {\n\t\n\t    \t\t\tthis._deactivateAction( action );\n\t    \t\t\tthis._removeInactiveAction( action );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    } );\n\t\n\t    // Implementation details:\n\t\n\t    Object.assign( AnimationMixer.prototype, {\n\t\n\t    \t_bindAction: function( action, prototypeAction ) {\n\t\n\t    \t\tvar root = action._localRoot || this._root,\n\t    \t\t\ttracks = action._clip.tracks,\n\t    \t\t\tnTracks = tracks.length,\n\t    \t\t\tbindings = action._propertyBindings,\n\t    \t\t\tinterpolants = action._interpolants,\n\t    \t\t\trootUuid = root.uuid,\n\t    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\t\n\t    \t\tif ( bindingsByName === undefined ) {\n\t\n\t    \t\t\tbindingsByName = {};\n\t    \t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\t\n\t    \t\t\tvar track = tracks[ i ],\n\t    \t\t\t\ttrackName = track.name,\n\t    \t\t\t\tbinding = bindingsByName[ trackName ];\n\t\n\t    \t\t\tif ( binding !== undefined ) {\n\t\n\t    \t\t\t\tbindings[ i ] = binding;\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\tbinding = bindings[ i ];\n\t\n\t    \t\t\t\tif ( binding !== undefined ) {\n\t\n\t    \t\t\t\t\t// existing binding, make sure the cache knows\n\t\n\t    \t\t\t\t\tif ( binding._cacheIndex === null ) {\n\t\n\t    \t\t\t\t\t\t++ binding.referenceCount;\n\t    \t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\t\n\t    \t\t\t\t\t}\n\t\n\t    \t\t\t\t\tcontinue;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t\tvar path = prototypeAction && prototypeAction.\n\t    \t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\t\n\t    \t\t\t\tbinding = new PropertyMixer(\n\t    \t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t    \t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\t\n\t    \t\t\t\t++ binding.referenceCount;\n\t    \t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\t\n\t    \t\t\t\tbindings[ i ] = binding;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_activateAction: function( action ) {\n\t\n\t    \t\tif ( ! this._isActiveAction( action ) ) {\n\t\n\t    \t\t\tif ( action._cacheIndex === null ) {\n\t\n\t    \t\t\t\t// this action has been forgotten by the cache, but the user\n\t    \t\t\t\t// appears to be still using it -> rebind\n\t\n\t    \t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t    \t\t\t\t\tclipUuid = action._clip.uuid,\n\t    \t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\t\n\t    \t\t\t\tthis._bindAction( action,\n\t    \t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\t\n\t    \t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar bindings = action._propertyBindings;\n\t\n\t    \t\t\t// increment reference counts / sort out state\n\t    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar binding = bindings[ i ];\n\t\n\t    \t\t\t\tif ( binding.useCount ++ === 0 ) {\n\t\n\t    \t\t\t\t\tthis._lendBinding( binding );\n\t    \t\t\t\t\tbinding.saveOriginalState();\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis._lendAction( action );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_deactivateAction: function( action ) {\n\t\n\t    \t\tif ( this._isActiveAction( action ) ) {\n\t\n\t    \t\t\tvar bindings = action._propertyBindings;\n\t\n\t    \t\t\t// decrement reference counts / sort out state\n\t    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\t\tvar binding = bindings[ i ];\n\t\n\t    \t\t\t\tif ( -- binding.useCount === 0 ) {\n\t\n\t    \t\t\t\t\tbinding.restoreOriginalState();\n\t    \t\t\t\t\tthis._takeBackBinding( binding );\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tthis._takeBackAction( action );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t// Memory manager\n\t\n\t    \t_initMemoryManager: function() {\n\t\n\t    \t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t    \t\tthis._nActiveActions = 0;\n\t\n\t    \t\tthis._actionsByClip = {};\n\t    \t\t// inside:\n\t    \t\t// {\n\t    \t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n\t    \t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n\t    \t\t// }\n\t\n\t\n\t    \t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t    \t\tthis._nActiveBindings = 0;\n\t\n\t    \t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\t\n\t\n\t    \t\tthis._controlInterpolants = []; // same game as above\n\t    \t\tthis._nActiveControlInterpolants = 0;\n\t\n\t    \t\tvar scope = this;\n\t\n\t    \t\tthis.stats = {\n\t\n\t    \t\t\tactions: {\n\t    \t\t\t\tget total() { return scope._actions.length; },\n\t    \t\t\t\tget inUse() { return scope._nActiveActions; }\n\t    \t\t\t},\n\t    \t\t\tbindings: {\n\t    \t\t\t\tget total() { return scope._bindings.length; },\n\t    \t\t\t\tget inUse() { return scope._nActiveBindings; }\n\t    \t\t\t},\n\t    \t\t\tcontrolInterpolants: {\n\t    \t\t\t\tget total() { return scope._controlInterpolants.length; },\n\t    \t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n\t    \t\t\t}\n\t\n\t    \t\t};\n\t\n\t    \t},\n\t\n\t    \t// Memory management for AnimationAction objects\n\t\n\t    \t_isActiveAction: function( action ) {\n\t\n\t    \t\tvar index = action._cacheIndex;\n\t    \t\treturn index !== null && index < this._nActiveActions;\n\t\n\t    \t},\n\t\n\t    \t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tactionsByClip = this._actionsByClip,\n\t    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\t\n\t    \t\tif ( actionsForClip === undefined ) {\n\t\n\t    \t\t\tactionsForClip = {\n\t\n\t    \t\t\t\tknownActions: [ action ],\n\t    \t\t\t\tactionByRoot: {}\n\t\n\t    \t\t\t};\n\t\n\t    \t\t\taction._byClipCacheIndex = 0;\n\t\n\t    \t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tvar knownActions = actionsForClip.knownActions;\n\t\n\t    \t\t\taction._byClipCacheIndex = knownActions.length;\n\t    \t\t\tknownActions.push( action );\n\t\n\t    \t\t}\n\t\n\t    \t\taction._cacheIndex = actions.length;\n\t    \t\tactions.push( action );\n\t\n\t    \t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\t\n\t    \t},\n\t\n\t    \t_removeInactiveAction: function( action ) {\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t    \t\t\tcacheIndex = action._cacheIndex;\n\t\n\t    \t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t    \t\tactions[ cacheIndex ] = lastInactiveAction;\n\t    \t\tactions.pop();\n\t\n\t    \t\taction._cacheIndex = null;\n\t\n\t\n\t    \t\tvar clipUuid = action._clip.uuid,\n\t    \t\t\tactionsByClip = this._actionsByClip,\n\t    \t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t    \t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\n\t    \t\t\tlastKnownAction =\n\t    \t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\t\n\t    \t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\n\t    \t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t    \t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t    \t\tknownActionsForClip.pop();\n\t\n\t    \t\taction._byClipCacheIndex = null;\n\t\n\t\n\t    \t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t    \t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\t\n\t    \t\tdelete actionByRoot[ rootUuid ];\n\t\n\t    \t\tif ( knownActionsForClip.length === 0 ) {\n\t\n\t    \t\t\tdelete actionsByClip[ clipUuid ];\n\t\n\t    \t\t}\n\t\n\t    \t\tthis._removeInactiveBindingsForAction( action );\n\t\n\t    \t},\n\t\n\t    \t_removeInactiveBindingsForAction: function( action ) {\n\t\n\t    \t\tvar bindings = action._propertyBindings;\n\t    \t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t    \t\t\tvar binding = bindings[ i ];\n\t\n\t    \t\t\tif ( -- binding.referenceCount === 0 ) {\n\t\n\t    \t\t\t\tthis._removeInactiveBinding( binding );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_lendAction: function( action ) {\n\t\n\t    \t\t// [ active actions |  inactive actions  ]\n\t    \t\t// [  active actions >| inactive actions ]\n\t    \t\t//                 s        a\n\t    \t\t//                  <-swap->\n\t    \t\t//                 a        s\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tprevIndex = action._cacheIndex,\n\t\n\t    \t\t\tlastActiveIndex = this._nActiveActions ++,\n\t\n\t    \t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\t\n\t    \t\taction._cacheIndex = lastActiveIndex;\n\t    \t\tactions[ lastActiveIndex ] = action;\n\t\n\t    \t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t    \t\tactions[ prevIndex ] = firstInactiveAction;\n\t\n\t    \t},\n\t\n\t    \t_takeBackAction: function( action ) {\n\t\n\t    \t\t// [  active actions  | inactive actions ]\n\t    \t\t// [ active actions |< inactive actions  ]\n\t    \t\t//        a        s\n\t    \t\t//         <-swap->\n\t    \t\t//        s        a\n\t\n\t    \t\tvar actions = this._actions,\n\t    \t\t\tprevIndex = action._cacheIndex,\n\t\n\t    \t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\t\n\t    \t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\t\n\t    \t\taction._cacheIndex = firstInactiveIndex;\n\t    \t\tactions[ firstInactiveIndex ] = action;\n\t\n\t    \t\tlastActiveAction._cacheIndex = prevIndex;\n\t    \t\tactions[ prevIndex ] = lastActiveAction;\n\t\n\t    \t},\n\t\n\t    \t// Memory management for PropertyMixer objects\n\t\n\t    \t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\t\n\t    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\t\n\t    \t\t\tbindings = this._bindings;\n\t\n\t    \t\tif ( bindingByName === undefined ) {\n\t\n\t    \t\t\tbindingByName = {};\n\t    \t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\t\n\t    \t\t}\n\t\n\t    \t\tbindingByName[ trackName ] = binding;\n\t\n\t    \t\tbinding._cacheIndex = bindings.length;\n\t    \t\tbindings.push( binding );\n\t\n\t    \t},\n\t\n\t    \t_removeInactiveBinding: function( binding ) {\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tpropBinding = binding.binding,\n\t    \t\t\trootUuid = propBinding.rootNode.uuid,\n\t    \t\t\ttrackName = propBinding.path,\n\t    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\t\n\t    \t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t    \t\t\tcacheIndex = binding._cacheIndex;\n\t\n\t    \t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t    \t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t    \t\tbindings.pop();\n\t\n\t    \t\tdelete bindingByName[ trackName ];\n\t\n\t    \t\tremove_empty_map: {\n\t\n\t    \t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\t\n\t    \t\t\tdelete bindingsByRoot[ rootUuid ];\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \t_lendBinding: function( binding ) {\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tprevIndex = binding._cacheIndex,\n\t\n\t    \t\t\tlastActiveIndex = this._nActiveBindings ++,\n\t\n\t    \t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\t\n\t    \t\tbinding._cacheIndex = lastActiveIndex;\n\t    \t\tbindings[ lastActiveIndex ] = binding;\n\t\n\t    \t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t    \t\tbindings[ prevIndex ] = firstInactiveBinding;\n\t\n\t    \t},\n\t\n\t    \t_takeBackBinding: function( binding ) {\n\t\n\t    \t\tvar bindings = this._bindings,\n\t    \t\t\tprevIndex = binding._cacheIndex,\n\t\n\t    \t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\t\n\t    \t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\t\n\t    \t\tbinding._cacheIndex = firstInactiveIndex;\n\t    \t\tbindings[ firstInactiveIndex ] = binding;\n\t\n\t    \t\tlastActiveBinding._cacheIndex = prevIndex;\n\t    \t\tbindings[ prevIndex ] = lastActiveBinding;\n\t\n\t    \t},\n\t\n\t\n\t    \t// Memory management of Interpolants for weight and time scale\n\t\n\t    \t_lendControlInterpolant: function() {\n\t\n\t    \t\tvar interpolants = this._controlInterpolants,\n\t    \t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t    \t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\t\n\t    \t\tif ( interpolant === undefined ) {\n\t\n\t    \t\t\tinterpolant = new LinearInterpolant(\n\t    \t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t    \t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\t\n\t    \t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t    \t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn interpolant;\n\t\n\t    \t},\n\t\n\t    \t_takeBackControlInterpolant: function( interpolant ) {\n\t\n\t    \t\tvar interpolants = this._controlInterpolants,\n\t    \t\t\tprevIndex = interpolant.__cacheIndex,\n\t\n\t    \t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\t\n\t    \t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\t\n\t    \t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t    \t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\t\n\t    \t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t    \t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\t\n\t    \t},\n\t\n\t    \t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\t\n\t    } );\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function Uniform( value ) {\n\t\n\t    \tif ( typeof value === 'string' ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t    \t\tvalue = arguments[ 1 ];\n\t\n\t    \t}\n\t\n\t    \tthis.value = value;\n\t\n\t    \tthis.dynamic = false;\n\t\n\t    }\n\t\n\t    Uniform.prototype = {\n\t\n\t    \tconstructor: Uniform,\n\t\n\t    \tonUpdate: function ( callback ) {\n\t\n\t    \t\tthis.dynamic = true;\n\t    \t\tthis.onUpdateCallback = callback;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InstancedBufferGeometry() {\n\t\n\t    \tBufferGeometry.call( this );\n\t\n\t    \tthis.type = 'InstancedBufferGeometry';\n\t    \tthis.maxInstancedCount = undefined;\n\t\n\t    }\n\t\n\t    InstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t    InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;\n\t\n\t    InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\t\n\t    InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\t\n\t    \tthis.groups.push( {\n\t\n\t    \t\tstart: start,\n\t    \t\tcount: count,\n\t    \t\tinstances: instances\n\t\n\t    \t} );\n\t\n\t    };\n\t\n\t    InstancedBufferGeometry.prototype.copy = function ( source ) {\n\t\n\t    \tvar index = source.index;\n\t\n\t    \tif ( index !== null ) {\n\t\n\t    \t\tthis.setIndex( index.clone() );\n\t\n\t    \t}\n\t\n\t    \tvar attributes = source.attributes;\n\t\n\t    \tfor ( var name in attributes ) {\n\t\n\t    \t\tvar attribute = attributes[ name ];\n\t    \t\tthis.addAttribute( name, attribute.clone() );\n\t\n\t    \t}\n\t\n\t    \tvar groups = source.groups;\n\t\n\t    \tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t    \t\tvar group = groups[ i ];\n\t    \t\tthis.addGroup( group.start, group.count, group.instances );\n\t\n\t    \t}\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.data = interleavedBuffer;\n\t    \tthis.itemSize = itemSize;\n\t    \tthis.offset = offset;\n\t\n\t    \tthis.normalized = normalized === true;\n\t\n\t    }\n\t\n\t\n\t    InterleavedBufferAttribute.prototype = {\n\t\n\t    \tconstructor: InterleavedBufferAttribute,\n\t\n\t    \tisInterleavedBufferAttribute: true,\n\t\n\t    \tget count() {\n\t\n\t    \t\treturn this.data.count;\n\t\n\t    \t},\n\t\n\t    \tget array() {\n\t\n\t    \t\treturn this.data.array;\n\t\n\t    \t},\n\t\n\t    \tsetX: function ( index, x ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetY: function ( index, y ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetZ: function ( index, z ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetW: function ( index, w ) {\n\t\n\t    \t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tgetX: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\t\n\t    \t},\n\t\n\t    \tgetY: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\t\n\t    \t},\n\t\n\t    \tgetZ: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\t\n\t    \t},\n\t\n\t    \tgetW: function ( index ) {\n\t\n\t    \t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\t\n\t    \t},\n\t\n\t    \tsetXY: function ( index, x, y ) {\n\t\n\t    \t\tindex = index * this.data.stride + this.offset;\n\t\n\t    \t\tthis.data.array[ index + 0 ] = x;\n\t    \t\tthis.data.array[ index + 1 ] = y;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZ: function ( index, x, y, z ) {\n\t\n\t    \t\tindex = index * this.data.stride + this.offset;\n\t\n\t    \t\tthis.data.array[ index + 0 ] = x;\n\t    \t\tthis.data.array[ index + 1 ] = y;\n\t    \t\tthis.data.array[ index + 2 ] = z;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetXYZW: function ( index, x, y, z, w ) {\n\t\n\t    \t\tindex = index * this.data.stride + this.offset;\n\t\n\t    \t\tthis.data.array[ index + 0 ] = x;\n\t    \t\tthis.data.array[ index + 1 ] = y;\n\t    \t\tthis.data.array[ index + 2 ] = z;\n\t    \t\tthis.data.array[ index + 3 ] = w;\n\t\n\t    \t\treturn this;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InterleavedBuffer( array, stride ) {\n\t\n\t    \tthis.uuid = exports.Math.generateUUID();\n\t\n\t    \tthis.array = array;\n\t    \tthis.stride = stride;\n\t    \tthis.count = array !== undefined ? array.length / stride : 0;\n\t\n\t    \tthis.dynamic = false;\n\t    \tthis.updateRange = { offset: 0, count: - 1 };\n\t\n\t    \tthis.version = 0;\n\t\n\t    }\n\t\n\t    InterleavedBuffer.prototype = {\n\t\n\t    \tconstructor: InterleavedBuffer,\n\t\n\t    \tisInterleavedBuffer: true,\n\t\n\t    \tset needsUpdate( value ) {\n\t\n\t    \t\tif ( value === true ) this.version ++;\n\t\n\t    \t},\n\t\n\t    \tsetDynamic: function ( value ) {\n\t\n\t    \t\tthis.dynamic = value;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( source ) {\n\t\n\t    \t\tthis.array = new source.array.constructor( source.array );\n\t    \t\tthis.count = source.count;\n\t    \t\tthis.stride = source.stride;\n\t    \t\tthis.dynamic = source.dynamic;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tcopyAt: function ( index1, attribute, index2 ) {\n\t\n\t    \t\tindex1 *= this.stride;\n\t    \t\tindex2 *= attribute.stride;\n\t\n\t    \t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\t\n\t    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tset: function ( value, offset ) {\n\t\n\t    \t\tif ( offset === undefined ) offset = 0;\n\t\n\t    \t\tthis.array.set( value, offset );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\t\n\t    \tInterleavedBuffer.call( this, array, stride );\n\t\n\t    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\n\t    }\n\t\n\t    InstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );\n\t    InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;\n\t\n\t    InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\t\n\t    InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\t\n\t    \tInterleavedBuffer.prototype.copy.call( this, source );\n\t\n\t    \tthis.meshPerAttribute = source.meshPerAttribute;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author benaadams / https://twitter.com/ben_a_adams\n\t     */\n\t\n\t    function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\t\n\t    \tBufferAttribute.call( this, array, itemSize );\n\t\n\t    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\n\t    }\n\t\n\t    InstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\t    InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;\n\t\n\t    InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\t\n\t    InstancedBufferAttribute.prototype.copy = function ( source ) {\n\t\n\t    \tBufferAttribute.prototype.copy.call( this, source );\n\t\n\t    \tthis.meshPerAttribute = source.meshPerAttribute;\n\t\n\t    \treturn this;\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author bhouston / http://clara.io/\n\t     * @author stephomi / http://stephaneginier.com/\n\t     */\n\t\n\t    function Raycaster( origin, direction, near, far ) {\n\t\n\t    \tthis.ray = new Ray( origin, direction );\n\t    \t// direction is assumed to be normalized (for accurate distance calculations)\n\t\n\t    \tthis.near = near || 0;\n\t    \tthis.far = far || Infinity;\n\t\n\t    \tthis.params = {\n\t    \t\tMesh: {},\n\t    \t\tLine: {},\n\t    \t\tLOD: {},\n\t    \t\tPoints: { threshold: 1 },\n\t    \t\tSprite: {}\n\t    \t};\n\t\n\t    \tObject.defineProperties( this.params, {\n\t    \t\tPointCloud: {\n\t    \t\t\tget: function () {\n\t    \t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t    \t\t\t\treturn this.Points;\n\t    \t\t\t}\n\t    \t\t}\n\t    \t} );\n\t\n\t    }\n\t\n\t    function ascSort( a, b ) {\n\t\n\t    \treturn a.distance - b.distance;\n\t\n\t    }\n\t\n\t    function intersectObject( object, raycaster, intersects, recursive ) {\n\t\n\t    \tif ( object.visible === false ) return;\n\t\n\t    \tobject.raycast( raycaster, intersects );\n\t\n\t    \tif ( recursive === true ) {\n\t\n\t    \t\tvar children = object.children;\n\t\n\t    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t    \t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    //\n\t\n\t    Raycaster.prototype = {\n\t\n\t    \tconstructor: Raycaster,\n\t\n\t    \tlinePrecision: 1,\n\t\n\t    \tset: function ( origin, direction ) {\n\t\n\t    \t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\n\t    \t\tthis.ray.set( origin, direction );\n\t\n\t    \t},\n\t\n\t    \tsetFromCamera: function ( coords, camera ) {\n\t\n\t    \t\tif ( (camera && camera.isPerspectiveCamera) ) {\n\t\n\t    \t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t    \t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\n\t    \t\t} else if ( (camera && camera.isOrthographicCamera) ) {\n\t\n\t    \t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t    \t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\t\n\t    \t\t}\n\t\n\t    \t},\n\t\n\t    \tintersectObject: function ( object, recursive ) {\n\t\n\t    \t\tvar intersects = [];\n\t\n\t    \t\tintersectObject( object, this, intersects, recursive );\n\t\n\t    \t\tintersects.sort( ascSort );\n\t\n\t    \t\treturn intersects;\n\t\n\t    \t},\n\t\n\t    \tintersectObjects: function ( objects, recursive ) {\n\t\n\t    \t\tvar intersects = [];\n\t\n\t    \t\tif ( Array.isArray( objects ) === false ) {\n\t\n\t    \t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t    \t\t\treturn intersects;\n\t\n\t    \t\t}\n\t\n\t    \t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\t\n\t    \t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\t\n\t    \t\t}\n\t\n\t    \t\tintersects.sort( ascSort );\n\t\n\t    \t\treturn intersects;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Clock( autoStart ) {\n\t\n\t    \tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\t\n\t    \tthis.startTime = 0;\n\t    \tthis.oldTime = 0;\n\t    \tthis.elapsedTime = 0;\n\t\n\t    \tthis.running = false;\n\t\n\t    }\n\t\n\t    Clock.prototype = {\n\t\n\t    \tconstructor: Clock,\n\t\n\t    \tstart: function () {\n\t\n\t    \t\tthis.startTime = ( performance || Date ).now();\n\t\n\t    \t\tthis.oldTime = this.startTime;\n\t    \t\tthis.running = true;\n\t\n\t    \t},\n\t\n\t    \tstop: function () {\n\t\n\t    \t\tthis.getElapsedTime();\n\t    \t\tthis.running = false;\n\t\n\t    \t},\n\t\n\t    \tgetElapsedTime: function () {\n\t\n\t    \t\tthis.getDelta();\n\t    \t\treturn this.elapsedTime;\n\t\n\t    \t},\n\t\n\t    \tgetDelta: function () {\n\t\n\t    \t\tvar diff = 0;\n\t\n\t    \t\tif ( this.autoStart && ! this.running ) {\n\t\n\t    \t\t\tthis.start();\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( this.running ) {\n\t\n\t    \t\t\tvar newTime = ( performance || Date ).now();\n\t\n\t    \t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t    \t\t\tthis.oldTime = newTime;\n\t\n\t    \t\t\tthis.elapsedTime += diff;\n\t\n\t    \t\t}\n\t\n\t    \t\treturn diff;\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    /**\n\t     * Spline from Tween.js, slightly optimized (and trashed)\n\t     * http://sole.github.com/tween.js/examples/05_spline.html\n\t     *\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function Spline( points ) {\n\t\n\t    \tthis.points = points;\n\t\n\t    \tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n\t    \tpoint, intPoint, weight, w2, w3,\n\t    \tpa, pb, pc, pd;\n\t\n\t    \tthis.initFromArray = function ( a ) {\n\t\n\t    \t\tthis.points = [];\n\t\n\t    \t\tfor ( var i = 0; i < a.length; i ++ ) {\n\t\n\t    \t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    \tthis.getPoint = function ( k ) {\n\t\n\t    \t\tpoint = ( this.points.length - 1 ) * k;\n\t    \t\tintPoint = Math.floor( point );\n\t    \t\tweight = point - intPoint;\n\t\n\t    \t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t    \t\tc[ 1 ] = intPoint;\n\t    \t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n\t    \t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\t\n\t    \t\tpa = this.points[ c[ 0 ] ];\n\t    \t\tpb = this.points[ c[ 1 ] ];\n\t    \t\tpc = this.points[ c[ 2 ] ];\n\t    \t\tpd = this.points[ c[ 3 ] ];\n\t\n\t    \t\tw2 = weight * weight;\n\t    \t\tw3 = weight * w2;\n\t\n\t    \t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n\t    \t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n\t    \t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\t\n\t    \t\treturn v3;\n\t\n\t    \t};\n\t\n\t    \tthis.getControlPointsArray = function () {\n\t\n\t    \t\tvar i, p, l = this.points.length,\n\t    \t\t\tcoords = [];\n\t\n\t    \t\tfor ( i = 0; i < l; i ++ ) {\n\t\n\t    \t\t\tp = this.points[ i ];\n\t    \t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\t\n\t    \t\t}\n\t\n\t    \t\treturn coords;\n\t\n\t    \t};\n\t\n\t    \t// approximate length by summing linear segments\n\t\n\t    \tthis.getLength = function ( nSubDivisions ) {\n\t\n\t    \t\tvar i, index, nSamples, position,\n\t    \t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n\t    \t\t\toldPosition = new Vector3(),\n\t    \t\t\ttmpVec = new Vector3(),\n\t    \t\t\tchunkLengths = [],\n\t    \t\t\ttotalLength = 0;\n\t\n\t    \t\t// first point has 0 length\n\t\n\t    \t\tchunkLengths[ 0 ] = 0;\n\t\n\t    \t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\t\n\t    \t\tnSamples = this.points.length * nSubDivisions;\n\t\n\t    \t\toldPosition.copy( this.points[ 0 ] );\n\t\n\t    \t\tfor ( i = 1; i < nSamples; i ++ ) {\n\t\n\t    \t\t\tindex = i / nSamples;\n\t\n\t    \t\t\tposition = this.getPoint( index );\n\t    \t\t\ttmpVec.copy( position );\n\t\n\t    \t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\t\n\t    \t\t\toldPosition.copy( position );\n\t\n\t    \t\t\tpoint = ( this.points.length - 1 ) * index;\n\t    \t\t\tintPoint = Math.floor( point );\n\t\n\t    \t\t\tif ( intPoint !== oldIntPoint ) {\n\t\n\t    \t\t\t\tchunkLengths[ intPoint ] = totalLength;\n\t    \t\t\t\toldIntPoint = intPoint;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\t// last point ends with total length\n\t\n\t    \t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\t\n\t    \t\treturn { chunks: chunkLengths, total: totalLength };\n\t\n\t    \t};\n\t\n\t    \tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\t\n\t    \t\tvar i, j,\n\t    \t\t\tindex, indexCurrent, indexNext,\n\t    \t\t\trealDistance,\n\t    \t\t\tsampling, position,\n\t    \t\t\tnewpoints = [],\n\t    \t\t\ttmpVec = new Vector3(),\n\t    \t\t\tsl = this.getLength();\n\t\n\t    \t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\t\n\t    \t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\t\n\t    \t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n\t    \t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\t\n\t    \t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\t\n\t    \t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\t\n\t    \t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n\t    \t\t\tindexNext = i / ( this.points.length - 1 );\n\t\n\t    \t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\t\n\t    \t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\t\n\t    \t\t\t\tposition = this.getPoint( index );\n\t    \t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\t\n\t    \t\t}\n\t\n\t    \t\tthis.points = newpoints;\n\t\n\t    \t};\n\t\n\t    \t// Catmull-Rom\n\t\n\t    \tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\t\n\t    \t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t    \t\t\tv1 = ( p3 - p1 ) * 0.5;\n\t\n\t    \t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    /**\n\t     * @author bhouston / http://clara.io\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     *\n\t     * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t     *\n\t     * The poles (phi) are at the positive and negative y axis.\n\t     * The equator starts at positive z.\n\t     */\n\t\n\t    function Spherical( radius, phi, theta ) {\n\t\n\t    \tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t    \tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\t    \tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\t\n\t    \treturn this;\n\t\n\t    }\n\t\n\t    Spherical.prototype = {\n\t\n\t    \tconstructor: Spherical,\n\t\n\t    \tset: function ( radius, phi, theta ) {\n\t\n\t    \t\tthis.radius = radius;\n\t    \t\tthis.phi = phi;\n\t    \t\tthis.theta = theta;\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tclone: function () {\n\t\n\t    \t\treturn new this.constructor().copy( this );\n\t\n\t    \t},\n\t\n\t    \tcopy: function ( other ) {\n\t\n\t    \t\tthis.radius.copy( other.radius );\n\t    \t\tthis.phi.copy( other.phi );\n\t    \t\tthis.theta.copy( other.theta );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \t// restrict phi to be betwee EPS and PI-EPS\n\t    \tmakeSafe: function() {\n\t\n\t    \t\tvar EPS = 0.000001;\n\t    \t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    \tsetFromVector3: function( vec3 ) {\n\t\n\t    \t\tthis.radius = vec3.length();\n\t\n\t    \t\tif ( this.radius === 0 ) {\n\t\n\t    \t\t\tthis.theta = 0;\n\t    \t\t\tthis.phi = 0;\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t    \t\t\tthis.phi = Math.acos( exports.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\t\n\t    \t\t}\n\t\n\t    \t\treturn this;\n\t\n\t    \t},\n\t\n\t    };\n\t\n\t    /**\r\n\t     * @author alteredq / http://alteredqualia.com/\r\n\t     */\r\n\t\r\n\t    function MorphBlendMesh( geometry, material ) {\n\t\r\n\t    \tMesh.call( this, geometry, material );\r\n\t\r\n\t    \tthis.animationsMap = {};\r\n\t    \tthis.animationsList = [];\r\n\t\r\n\t    \t// prepare default animation\r\n\t    \t// (all frames played together in 1 second)\r\n\t\r\n\t    \tvar numFrames = this.geometry.morphTargets.length;\r\n\t\r\n\t    \tvar name = \"__default\";\r\n\t\r\n\t    \tvar startFrame = 0;\r\n\t    \tvar endFrame = numFrames - 1;\r\n\t\r\n\t    \tvar fps = numFrames / 1;\r\n\t\r\n\t    \tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\t    \tthis.setAnimationWeight( name, 1 );\r\n\t\r\n\t    }\r\n\t\r\n\t    MorphBlendMesh.prototype = Object.create( Mesh.prototype );\r\n\t    MorphBlendMesh.prototype.constructor = MorphBlendMesh;\r\n\t\r\n\t    MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\t\r\n\t    \tvar animation = {\r\n\t\r\n\t    \t\tstart: start,\r\n\t    \t\tend: end,\r\n\t\r\n\t    \t\tlength: end - start + 1,\r\n\t\r\n\t    \t\tfps: fps,\r\n\t    \t\tduration: ( end - start ) / fps,\r\n\t\r\n\t    \t\tlastFrame: 0,\r\n\t    \t\tcurrentFrame: 0,\r\n\t\r\n\t    \t\tactive: false,\r\n\t\r\n\t    \t\ttime: 0,\r\n\t    \t\tdirection: 1,\r\n\t    \t\tweight: 1,\r\n\t\r\n\t    \t\tdirectionBackwards: false,\r\n\t    \t\tmirroredLoop: false\r\n\t\r\n\t    \t};\r\n\t\r\n\t    \tthis.animationsMap[ name ] = animation;\r\n\t    \tthis.animationsList.push( animation );\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\t\r\n\t    \tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\t\r\n\t    \tvar firstAnimation, frameRanges = {};\r\n\t\r\n\t    \tvar geometry = this.geometry;\r\n\t\r\n\t    \tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\t\r\n\t    \t\tvar morph = geometry.morphTargets[ i ];\r\n\t    \t\tvar chunks = morph.name.match( pattern );\r\n\t\r\n\t    \t\tif ( chunks && chunks.length > 1 ) {\r\n\t\r\n\t    \t\t\tvar name = chunks[ 1 ];\r\n\t\r\n\t    \t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\t\r\n\t    \t\t\tvar range = frameRanges[ name ];\r\n\t\r\n\t    \t\t\tif ( i < range.start ) range.start = i;\r\n\t    \t\t\tif ( i > range.end ) range.end = i;\r\n\t\r\n\t    \t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \tfor ( var name in frameRanges ) {\r\n\t\r\n\t    \t\tvar range = frameRanges[ name ];\r\n\t    \t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \tthis.firstAnimation = firstAnimation;\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.direction = 1;\r\n\t    \t\tanimation.directionBackwards = false;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.direction = - 1;\r\n\t    \t\tanimation.directionBackwards = true;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.fps = fps;\r\n\t    \t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.duration = duration;\r\n\t    \t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.weight = weight;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.time = time;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\t\r\n\t    \tvar time = 0;\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\ttime = animation.time;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \treturn time;\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\t\r\n\t    \tvar duration = - 1;\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tduration = animation.duration;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    \treturn duration;\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.time = 0;\r\n\t    \t\tanimation.active = true;\r\n\t\r\n\t    \t} else {\r\n\t\r\n\t    \t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\t\r\n\t    \tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t    \tif ( animation ) {\r\n\t\r\n\t    \t\tanimation.active = false;\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\r\n\t\r\n\t    MorphBlendMesh.prototype.update = function ( delta ) {\r\n\t\r\n\t    \tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\t\r\n\t    \t\tvar animation = this.animationsList[ i ];\r\n\t\r\n\t    \t\tif ( ! animation.active ) continue;\r\n\t\r\n\t    \t\tvar frameTime = animation.duration / animation.length;\r\n\t\r\n\t    \t\tanimation.time += animation.direction * delta;\r\n\t\r\n\t    \t\tif ( animation.mirroredLoop ) {\r\n\t\r\n\t    \t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\t\r\n\t    \t\t\t\tanimation.direction *= - 1;\r\n\t\r\n\t    \t\t\t\tif ( animation.time > animation.duration ) {\r\n\t\r\n\t    \t\t\t\t\tanimation.time = animation.duration;\r\n\t    \t\t\t\t\tanimation.directionBackwards = true;\r\n\t\r\n\t    \t\t\t\t}\r\n\t\r\n\t    \t\t\t\tif ( animation.time < 0 ) {\r\n\t\r\n\t    \t\t\t\t\tanimation.time = 0;\r\n\t    \t\t\t\t\tanimation.directionBackwards = false;\r\n\t\r\n\t    \t\t\t\t}\r\n\t\r\n\t    \t\t\t}\r\n\t\r\n\t    \t\t} else {\r\n\t\r\n\t    \t\t\tanimation.time = animation.time % animation.duration;\r\n\t\r\n\t    \t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t\tvar keyframe = animation.start + exports.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t    \t\tvar weight = animation.weight;\r\n\t\r\n\t    \t\tif ( keyframe !== animation.currentFrame ) {\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\t\r\n\t    \t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t    \t\t\tanimation.currentFrame = keyframe;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\t\r\n\t    \t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\t\r\n\t    \t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\t\r\n\t    \t\t} else {\r\n\t\r\n\t    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\t\r\n\t    \t\t}\r\n\t\r\n\t    \t}\r\n\t\r\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    function ImmediateRenderObject( material ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.material = material;\n\t    \tthis.render = function ( renderCallback ) {};\n\t\n\t    }\n\t\n\t    ImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\t    ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\t\n\t    ImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function VertexNormalsHelper( object, size, hex, linewidth ) {\n\t\n\t    \tthis.object = object;\n\t\n\t    \tthis.size = ( size !== undefined ) ? size : 1;\n\t\n\t    \tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\t\n\t    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\t\n\t    \t//\n\t\n\t    \tvar nNormals = 0;\n\t\n\t    \tvar objGeometry = this.object.geometry;\n\t\n\t    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t    \t\tnNormals = objGeometry.faces.length * 3;\n\t\n\t    \t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\t\n\t    \t\tnNormals = objGeometry.attributes.normal.count;\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t\n\t    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\t\n\t    \tgeometry.addAttribute( 'position', positions );\n\t\n\t    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\t\n\t    \t//\n\t\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\t    VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\t\n\t    VertexNormalsHelper.prototype.update = ( function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t    \tvar normalMatrix = new Matrix3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t    \t\tthis.object.updateMatrixWorld( true );\n\t\n\t    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\t\n\t    \t\tvar matrixWorld = this.object.matrixWorld;\n\t\n\t    \t\tvar position = this.geometry.attributes.position;\n\t\n\t    \t\t//\n\t\n\t    \t\tvar objGeometry = this.object.geometry;\n\t\n\t    \t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t    \t\t\tvar vertices = objGeometry.vertices;\n\t\n\t    \t\t\tvar faces = objGeometry.faces;\n\t\n\t    \t\t\tvar idx = 0;\n\t\n\t    \t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\t\n\t    \t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\t\n\t    \t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\t\n\t    \t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\t\n\t    \t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t    \t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t    \t\t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t\t}\n\t\n\t    \t\t\t}\n\t\n\t    \t\t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\t\n\t    \t\t\tvar objPos = objGeometry.attributes.position;\n\t\n\t    \t\t\tvar objNorm = objGeometry.attributes.normal;\n\t\n\t    \t\t\tvar idx = 0;\n\t\n\t    \t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\t\n\t    \t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\t\n\t    \t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\t\n\t    \t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\t\n\t    \t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t    \t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t    \t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t    \t\t\t\tidx = idx + 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t\tposition.needsUpdate = true;\n\t\n\t    \t\treturn this;\n\t\n\t    \t};\n\t\n\t    }() );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function SpotLightHelper( light ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tthis.matrix = light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t\n\t    \tvar positions = [\n\t    \t\t0, 0, 0,   0,   0,   1,\n\t    \t\t0, 0, 0,   1,   0,   1,\n\t    \t\t0, 0, 0, - 1,   0,   1,\n\t    \t\t0, 0, 0,   0,   1,   1,\n\t    \t\t0, 0, 0,   0, - 1,   1\n\t    \t];\n\t\n\t    \tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\t\n\t    \t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t    \t\tvar p2 = ( j / l ) * Math.PI * 2;\n\t\n\t    \t\tpositions.push(\n\t    \t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t    \t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { fog: false } );\n\t\n\t    \tthis.cone = new LineSegments( geometry, material );\n\t    \tthis.add( this.cone );\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    SpotLightHelper.prototype = Object.create( Object3D.prototype );\n\t    SpotLightHelper.prototype.constructor = SpotLightHelper;\n\t\n\t    SpotLightHelper.prototype.dispose = function () {\n\t\n\t    \tthis.cone.geometry.dispose();\n\t    \tthis.cone.material.dispose();\n\t\n\t    };\n\t\n\t    SpotLightHelper.prototype.update = function () {\n\t\n\t    \tvar vector = new Vector3();\n\t    \tvar vector2 = new Vector3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t    \t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\t\n\t    \t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\t\n\t    \t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t    \t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\n\t    \t\tthis.cone.lookAt( vector2.sub( vector ) );\n\t\n\t    \t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author Sean Griffin / http://twitter.com/sgrif\n\t     * @author Michael Guerrero / http://realitymeltdown.com\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author ikerr / http://verold.com\n\t     */\n\t\n\t    function SkeletonHelper( object ) {\n\t\n\t    \tthis.bones = this.getBoneList( object );\n\t\n\t    \tvar geometry = new Geometry();\n\t\n\t    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\t\n\t    \t\tvar bone = this.bones[ i ];\n\t\n\t    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t    \t\t\tgeometry.vertices.push( new Vector3() );\n\t    \t\t\tgeometry.vertices.push( new Vector3() );\n\t    \t\t\tgeometry.colors.push( new Color( 0, 0, 1 ) );\n\t    \t\t\tgeometry.colors.push( new Color( 0, 1, 0 ) );\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tgeometry.dynamic = true;\n\t\n\t    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    \tthis.root = object;\n\t\n\t    \tthis.matrix = object.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t\n\t    SkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\t    SkeletonHelper.prototype.constructor = SkeletonHelper;\n\t\n\t    SkeletonHelper.prototype.getBoneList = function( object ) {\n\t\n\t    \tvar boneList = [];\n\t\n\t    \tif ( (object && object.isBone) ) {\n\t\n\t    \t\tboneList.push( object );\n\t\n\t    \t}\n\t\n\t    \tfor ( var i = 0; i < object.children.length; i ++ ) {\n\t\n\t    \t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\t\n\t    \t}\n\t\n\t    \treturn boneList;\n\t\n\t    };\n\t\n\t    SkeletonHelper.prototype.update = function () {\n\t\n\t    \tvar geometry = this.geometry;\n\t\n\t    \tvar matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );\n\t\n\t    \tvar boneMatrix = new Matrix4();\n\t\n\t    \tvar j = 0;\n\t\n\t    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\t\n\t    \t\tvar bone = this.bones[ i ];\n\t\n\t    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\t\n\t    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t    \t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\t\n\t    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t    \t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\t\n\t    \t\t\tj += 2;\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \tgeometry.verticesNeedUpdate = true;\n\t\n\t    \tgeometry.computeBoundingSphere();\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function PointLightHelper( light, sphereSize ) {\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t    \tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t    \tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \tMesh.call( this, geometry, material );\n\t\n\t    \tthis.matrix = this.light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \t/*\n\t    \tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\t    \tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\n\t    \tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t    \tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\n\t    \tvar d = light.distance;\n\t\n\t    \tif ( d === 0.0 ) {\n\t\n\t    \t\tthis.lightDistance.visible = false;\n\t\n\t    \t} else {\n\t\n\t    \t\tthis.lightDistance.scale.set( d, d, d );\n\t\n\t    \t}\n\t\n\t    \tthis.add( this.lightDistance );\n\t    \t*/\n\t\n\t    }\n\t\n\t    PointLightHelper.prototype = Object.create( Mesh.prototype );\n\t    PointLightHelper.prototype.constructor = PointLightHelper;\n\t\n\t    PointLightHelper.prototype.dispose = function () {\n\t\n\t    \tthis.geometry.dispose();\n\t    \tthis.material.dispose();\n\t\n\t    };\n\t\n\t    PointLightHelper.prototype.update = function () {\n\t\n\t    \tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \t/*\n\t    \tvar d = this.light.distance;\n\t\n\t    \tif ( d === 0.0 ) {\n\t\n\t    \t\tthis.lightDistance.visible = false;\n\t\n\t    \t} else {\n\t\n\t    \t\tthis.lightDistance.visible = true;\n\t    \t\tthis.lightDistance.scale.set( d, d, d );\n\t\n\t    \t}\n\t    \t*/\n\t\n\t    };\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function HemisphereLightHelper( light, sphereSize ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tthis.matrix = light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.colors = [ new Color(), new Color() ];\n\t\n\t    \tvar geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t    \tgeometry.rotateX( - Math.PI / 2 );\n\t\n\t    \tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\t\n\t    \t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\t\n\t    \t}\n\t\n\t    \tvar material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );\n\t\n\t    \tthis.lightSphere = new Mesh( geometry, material );\n\t    \tthis.add( this.lightSphere );\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    HemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\t    HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\t\n\t    HemisphereLightHelper.prototype.dispose = function () {\n\t\n\t    \tthis.lightSphere.geometry.dispose();\n\t    \tthis.lightSphere.material.dispose();\n\t\n\t    };\n\t\n\t    HemisphereLightHelper.prototype.update = function () {\n\t\n\t    \tvar vector = new Vector3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t    \t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\t\n\t    \t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\t    \t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function GridHelper( size, divisions, color1, color2 ) {\n\t\n\t    \tdivisions = divisions || 1;\n\t    \tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t    \tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\t\n\t    \tvar center = divisions / 2;\n\t    \tvar step = ( size * 2 ) / divisions;\n\t    \tvar vertices = [], colors = [];\n\t\n\t    \tfor ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {\n\t\n\t    \t\tvertices.push( - size, 0, k, size, 0, k );\n\t    \t\tvertices.push( k, 0, - size, k, 0, size );\n\t\n\t    \t\tvar color = i === center ? color1 : color2;\n\t\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t    \t\tcolor.toArray( colors, j ); j += 3;\n\t\n\t    \t}\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );\n\t    \tgeometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    }\n\t\n\t    GridHelper.prototype = Object.create( LineSegments.prototype );\n\t    GridHelper.prototype.constructor = GridHelper;\n\t\n\t    GridHelper.prototype.setColors = function () {\n\t\n\t    \tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t    */\n\t\n\t    function FaceNormalsHelper( object, size, hex, linewidth ) {\n\t\n\t    \t// FaceNormalsHelper only supports THREE.Geometry\n\t\n\t    \tthis.object = object;\n\t\n\t    \tthis.size = ( size !== undefined ) ? size : 1;\n\t\n\t    \tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\t\n\t    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\t\n\t    \t//\n\t\n\t    \tvar nNormals = 0;\n\t\n\t    \tvar objGeometry = this.object.geometry;\n\t\n\t    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\t\n\t    \t\tnNormals = objGeometry.faces.length;\n\t\n\t    \t} else {\n\t\n\t    \t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\t\n\t    \t}\n\t\n\t    \t//\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t\n\t    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\t\n\t    \tgeometry.addAttribute( 'position', positions );\n\t\n\t    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\t\n\t    \t//\n\t\n\t    \tthis.matrixAutoUpdate = false;\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\t    FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\t\n\t    FaceNormalsHelper.prototype.update = ( function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t    \tvar normalMatrix = new Matrix3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tthis.object.updateMatrixWorld( true );\n\t\n\t    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\t\n\t    \t\tvar matrixWorld = this.object.matrixWorld;\n\t\n\t    \t\tvar position = this.geometry.attributes.position;\n\t\n\t    \t\t//\n\t\n\t    \t\tvar objGeometry = this.object.geometry;\n\t\n\t    \t\tvar vertices = objGeometry.vertices;\n\t\n\t    \t\tvar faces = objGeometry.faces;\n\t\n\t    \t\tvar idx = 0;\n\t\n\t    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t    \t\t\tvar face = faces[ i ];\n\t\n\t    \t\t\tvar normal = face.normal;\n\t\n\t    \t\t\tv1.copy( vertices[ face.a ] )\n\t    \t\t\t\t.add( vertices[ face.b ] )\n\t    \t\t\t\t.add( vertices[ face.c ] )\n\t    \t\t\t\t.divideScalar( 3 )\n\t    \t\t\t\t.applyMatrix4( matrixWorld );\n\t\n\t    \t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t    \t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t    \t\t\tidx = idx + 1;\n\t\n\t    \t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t    \t\t\tidx = idx + 1;\n\t\n\t    \t\t}\n\t\n\t    \t\tposition.needsUpdate = true;\n\t\n\t    \t\treturn this;\n\t\n\t    \t};\n\t\n\t    }() );\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    function DirectionalLightHelper( light, size ) {\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tthis.light = light;\n\t    \tthis.light.updateMatrixWorld();\n\t\n\t    \tthis.matrix = light.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tif ( size === undefined ) size = 1;\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( [\n\t    \t\t- size,   size, 0,\n\t    \t\t  size,   size, 0,\n\t    \t\t  size, - size, 0,\n\t    \t\t- size, - size, 0,\n\t    \t\t- size,   size, 0\n\t    \t], 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { fog: false } );\n\t\n\t    \tthis.add( new Line( geometry, material ) );\n\t\n\t    \tgeometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\t\n\t    \tthis.add( new Line( geometry, material ));\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    DirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\t    DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\t\n\t    DirectionalLightHelper.prototype.dispose = function () {\n\t\n\t    \tvar lightPlane = this.children[ 0 ];\n\t    \tvar targetLine = this.children[ 1 ];\n\t\n\t    \tlightPlane.geometry.dispose();\n\t    \tlightPlane.material.dispose();\n\t    \ttargetLine.geometry.dispose();\n\t    \ttargetLine.material.dispose();\n\t\n\t    };\n\t\n\t    DirectionalLightHelper.prototype.update = function () {\n\t\n\t    \tvar v1 = new Vector3();\n\t    \tvar v2 = new Vector3();\n\t    \tvar v3 = new Vector3();\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t    \t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t    \t\tv3.subVectors( v2, v1 );\n\t\n\t    \t\tvar lightPlane = this.children[ 0 ];\n\t    \t\tvar targetLine = this.children[ 1 ];\n\t\n\t    \t\tlightPlane.lookAt( v3 );\n\t    \t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t    \t\ttargetLine.lookAt( v3 );\n\t    \t\ttargetLine.scale.z = v3.length();\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     *\n\t     *\t- shows frustum, line of sight and up of the camera\n\t     *\t- suitable for fast updates\n\t     * \t- based on frustum visualization in lightgl.js shadowmap example\n\t     *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t     */\n\t\n\t    function CameraHelper( camera ) {\n\t\n\t    \tvar geometry = new Geometry();\n\t    \tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\t\n\t    \tvar pointMap = {};\n\t\n\t    \t// colors\n\t\n\t    \tvar hexFrustum = 0xffaa00;\n\t    \tvar hexCone = 0xff0000;\n\t    \tvar hexUp = 0x00aaff;\n\t    \tvar hexTarget = 0xffffff;\n\t    \tvar hexCross = 0x333333;\n\t\n\t    \t// near\n\t\n\t    \taddLine( \"n1\", \"n2\", hexFrustum );\n\t    \taddLine( \"n2\", \"n4\", hexFrustum );\n\t    \taddLine( \"n4\", \"n3\", hexFrustum );\n\t    \taddLine( \"n3\", \"n1\", hexFrustum );\n\t\n\t    \t// far\n\t\n\t    \taddLine( \"f1\", \"f2\", hexFrustum );\n\t    \taddLine( \"f2\", \"f4\", hexFrustum );\n\t    \taddLine( \"f4\", \"f3\", hexFrustum );\n\t    \taddLine( \"f3\", \"f1\", hexFrustum );\n\t\n\t    \t// sides\n\t\n\t    \taddLine( \"n1\", \"f1\", hexFrustum );\n\t    \taddLine( \"n2\", \"f2\", hexFrustum );\n\t    \taddLine( \"n3\", \"f3\", hexFrustum );\n\t    \taddLine( \"n4\", \"f4\", hexFrustum );\n\t\n\t    \t// cone\n\t\n\t    \taddLine( \"p\", \"n1\", hexCone );\n\t    \taddLine( \"p\", \"n2\", hexCone );\n\t    \taddLine( \"p\", \"n3\", hexCone );\n\t    \taddLine( \"p\", \"n4\", hexCone );\n\t\n\t    \t// up\n\t\n\t    \taddLine( \"u1\", \"u2\", hexUp );\n\t    \taddLine( \"u2\", \"u3\", hexUp );\n\t    \taddLine( \"u3\", \"u1\", hexUp );\n\t\n\t    \t// target\n\t\n\t    \taddLine( \"c\", \"t\", hexTarget );\n\t    \taddLine( \"p\", \"c\", hexCross );\n\t\n\t    \t// cross\n\t\n\t    \taddLine( \"cn1\", \"cn2\", hexCross );\n\t    \taddLine( \"cn3\", \"cn4\", hexCross );\n\t\n\t    \taddLine( \"cf1\", \"cf2\", hexCross );\n\t    \taddLine( \"cf3\", \"cf4\", hexCross );\n\t\n\t    \tfunction addLine( a, b, hex ) {\n\t\n\t    \t\taddPoint( a, hex );\n\t    \t\taddPoint( b, hex );\n\t\n\t    \t}\n\t\n\t    \tfunction addPoint( id, hex ) {\n\t\n\t    \t\tgeometry.vertices.push( new Vector3() );\n\t    \t\tgeometry.colors.push( new Color( hex ) );\n\t\n\t    \t\tif ( pointMap[ id ] === undefined ) {\n\t\n\t    \t\t\tpointMap[ id ] = [];\n\t\n\t    \t\t}\n\t\n\t    \t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\t\n\t    \t}\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    \tthis.camera = camera;\n\t    \tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\t\n\t    \tthis.matrix = camera.matrixWorld;\n\t    \tthis.matrixAutoUpdate = false;\n\t\n\t    \tthis.pointMap = pointMap;\n\t\n\t    \tthis.update();\n\t\n\t    }\n\t\n\t    CameraHelper.prototype = Object.create( LineSegments.prototype );\n\t    CameraHelper.prototype.constructor = CameraHelper;\n\t\n\t    CameraHelper.prototype.update = function () {\n\t\n\t    \tvar geometry, pointMap;\n\t\n\t    \tvar vector = new Vector3();\n\t    \tvar camera = new Camera();\n\t\n\t    \tfunction setPoint( point, x, y, z ) {\n\t\n\t    \t\tvector.set( x, y, z ).unproject( camera );\n\t\n\t    \t\tvar points = pointMap[ point ];\n\t\n\t    \t\tif ( points !== undefined ) {\n\t\n\t    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t    \t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t}\n\t\n\t    \t}\n\t\n\t    \treturn function update() {\n\t\n\t    \t\tgeometry = this.geometry;\n\t    \t\tpointMap = this.pointMap;\n\t\n\t    \t\tvar w = 1, h = 1;\n\t\n\t    \t\t// we need just camera projection matrix\n\t    \t\t// world matrix must be identity\n\t\n\t    \t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\t\n\t    \t\t// center / target\n\t\n\t    \t\tsetPoint( \"c\", 0, 0, - 1 );\n\t    \t\tsetPoint( \"t\", 0, 0,  1 );\n\t\n\t    \t\t// near\n\t\n\t    \t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t    \t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t    \t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t    \t\tsetPoint( \"n4\",   w,   h, - 1 );\n\t\n\t    \t\t// far\n\t\n\t    \t\tsetPoint( \"f1\", - w, - h, 1 );\n\t    \t\tsetPoint( \"f2\",   w, - h, 1 );\n\t    \t\tsetPoint( \"f3\", - w,   h, 1 );\n\t    \t\tsetPoint( \"f4\",   w,   h, 1 );\n\t\n\t    \t\t// up\n\t\n\t    \t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t    \t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t    \t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\t\n\t    \t\t// cross\n\t\n\t    \t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t    \t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t    \t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t    \t\tsetPoint( \"cf4\",   0,   h, 1 );\n\t\n\t    \t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t    \t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t    \t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t    \t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\t\n\t    \t\tgeometry.verticesNeedUpdate = true;\n\t\n\t    \t};\n\t\n\t    }();\n\t\n\t    /**\n\t     * @author WestLangley / http://github.com/WestLangley\n\t     */\n\t\n\t    // a helper to show the world-axis-aligned bounding box for an object\n\t\n\t    function BoundingBoxHelper( object, hex ) {\n\t\n\t    \tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\t\n\t    \tthis.object = object;\n\t\n\t    \tthis.box = new Box3();\n\t\n\t    \tMesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );\n\t\n\t    }\n\t\n\t    BoundingBoxHelper.prototype = Object.create( Mesh.prototype );\n\t    BoundingBoxHelper.prototype.constructor = BoundingBoxHelper;\n\t\n\t    BoundingBoxHelper.prototype.update = function () {\n\t\n\t    \tthis.box.setFromObject( this.object );\n\t\n\t    \tthis.box.size( this.scale );\n\t\n\t    \tthis.box.getCenter( this.position );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function BoxHelper( object, color ) {\n\t\n\t    \tif ( color === undefined ) color = 0xffff00;\n\t\n\t    \tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t    \tvar positions = new Float32Array( 8 * 3 );\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t    \tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t\n\t    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\t\n\t    \tif ( object !== undefined ) {\n\t\n\t    \t\tthis.update( object );\n\t\n\t    \t}\n\t\n\t    }\n\t\n\t    BoxHelper.prototype = Object.create( LineSegments.prototype );\n\t    BoxHelper.prototype.constructor = BoxHelper;\n\t\n\t    BoxHelper.prototype.update = ( function () {\n\t\n\t    \tvar box = new Box3();\n\t\n\t    \treturn function update( object ) {\n\t\n\t    \t\tif ( (object && object.isBox3) ) {\n\t\n\t    \t\t\tbox.copy( object );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\tbox.setFromObject( object );\n\t\n\t    \t\t}\n\t\n\t    \t\tif ( box.isEmpty() ) return;\n\t\n\t    \t\tvar min = box.min;\n\t    \t\tvar max = box.max;\n\t\n\t    \t\t/*\n\t    \t\t  5____4\n\t    \t\t1/___0/|\n\t    \t\t| 6__|_7\n\t    \t\t2/___3/\n\t\n\t    \t\t0: max.x, max.y, max.z\n\t    \t\t1: min.x, max.y, max.z\n\t    \t\t2: min.x, min.y, max.z\n\t    \t\t3: max.x, min.y, max.z\n\t    \t\t4: max.x, max.y, min.z\n\t    \t\t5: min.x, max.y, min.z\n\t    \t\t6: min.x, min.y, min.z\n\t    \t\t7: max.x, min.y, min.z\n\t    \t\t*/\n\t\n\t    \t\tvar position = this.geometry.attributes.position;\n\t    \t\tvar array = position.array;\n\t\n\t    \t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t    \t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t    \t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t    \t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t    \t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t    \t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t    \t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t    \t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\t\n\t    \t\tposition.needsUpdate = true;\n\t\n\t    \t\tthis.geometry.computeBoundingSphere();\n\t\n\t    \t};\n\t\n\t    } )();\n\t\n\t    var lineGeometry = new BufferGeometry();\n\t    lineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\t\n\t    var coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t    coneGeometry.translate( 0, - 0.5, 0 );\n\t\n\t    function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\t\n\t    \t// dir is assumed to be normalized\n\t\n\t    \tObject3D.call( this );\n\t\n\t    \tif ( color === undefined ) color = 0xffff00;\n\t    \tif ( length === undefined ) length = 1;\n\t    \tif ( headLength === undefined ) headLength = 0.2 * length;\n\t    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\t\n\t    \tthis.position.copy( origin );\n\t\n\t    \tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t    \tthis.line.matrixAutoUpdate = false;\n\t    \tthis.add( this.line );\n\t\n\t    \tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t    \tthis.cone.matrixAutoUpdate = false;\n\t    \tthis.add( this.cone );\n\t\n\t    \tthis.setDirection( dir );\n\t    \tthis.setLength( length, headLength, headWidth );\n\t\n\t    }\n\t\n\t    ArrowHelper.prototype = Object.create( Object3D.prototype );\n\t    ArrowHelper.prototype.constructor = ArrowHelper;\n\t\n\t    ArrowHelper.prototype.setDirection = ( function () {\n\t\n\t    \tvar axis = new Vector3();\n\t    \tvar radians;\n\t\n\t    \treturn function setDirection( dir ) {\n\t\n\t    \t\t// dir is assumed to be normalized\n\t\n\t    \t\tif ( dir.y > 0.99999 ) {\n\t\n\t    \t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\t\n\t    \t\t} else if ( dir.y < - 0.99999 ) {\n\t\n\t    \t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\t\n\t    \t\t} else {\n\t\n\t    \t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\t\n\t    \t\t\tradians = Math.acos( dir.y );\n\t\n\t    \t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\t\n\t    \t\t}\n\t\n\t    \t};\n\t\n\t    }() );\n\t\n\t    ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\t\n\t    \tif ( headLength === undefined ) headLength = 0.2 * length;\n\t    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\t\n\t    \tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\t    \tthis.line.updateMatrix();\n\t\n\t    \tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t    \tthis.cone.position.y = length;\n\t    \tthis.cone.updateMatrix();\n\t\n\t    };\n\t\n\t    ArrowHelper.prototype.setColor = function ( color ) {\n\t\n\t    \tthis.line.material.color.copy( color );\n\t    \tthis.cone.material.color.copy( color );\n\t\n\t    };\n\t\n\t    /**\n\t     * @author sroucheray / http://sroucheray.org/\n\t     * @author mrdoob / http://mrdoob.com/\n\t     */\n\t\n\t    function AxisHelper( size ) {\n\t\n\t    \tsize = size || 1;\n\t\n\t    \tvar vertices = new Float32Array( [\n\t    \t\t0, 0, 0,  size, 0, 0,\n\t    \t\t0, 0, 0,  0, size, 0,\n\t    \t\t0, 0, 0,  0, 0, size\n\t    \t] );\n\t\n\t    \tvar colors = new Float32Array( [\n\t    \t\t1, 0, 0,  1, 0.6, 0,\n\t    \t\t0, 1, 0,  0.6, 1, 0,\n\t    \t\t0, 0, 1,  0, 0.6, 1\n\t    \t] );\n\t\n\t    \tvar geometry = new BufferGeometry();\n\t    \tgeometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t    \tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\t\n\t    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\t\n\t    \tLineSegments.call( this, geometry, material );\n\t\n\t    }\n\t\n\t    AxisHelper.prototype = Object.create( LineSegments.prototype );\n\t    AxisHelper.prototype.constructor = AxisHelper;\n\t\n\t    /**\n\t     * @author zz85 https://github.com/zz85\n\t     *\n\t     * Centripetal CatmullRom Curve - which is useful for avoiding\n\t     * cusps and self-intersections in non-uniform catmull rom curves.\n\t     * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t     *\n\t     * curve.type accepts centripetal(default), chordal and catmullrom\n\t     * curve.tension is used for catmullrom which defaults to 0.5\n\t     */\n\t\n\t    exports.CatmullRomCurve3 = ( function() {\n\t\n\t    \tvar\n\t    \t\ttmp = new Vector3(),\n\t    \t\tpx = new CubicPoly(),\n\t    \t\tpy = new CubicPoly(),\n\t    \t\tpz = new CubicPoly();\n\t\n\t    \t/*\n\t    \tBased on an optimized c++ solution in\n\t    \t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t    \t - http://ideone.com/NoEbVM\n\t\n\t    \tThis CubicPoly class could be used for reusing some variables and calculations,\n\t    \tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\t    \twhich can be placed in CurveUtils.\n\t    \t*/\n\t\n\t    \tfunction CubicPoly() {\n\t\n\t    \t}\n\t\n\t    \t/*\n\t    \t * Compute coefficients for a cubic polynomial\n\t    \t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t    \t * such that\n\t    \t *   p(0) = x0, p(1) = x1\n\t    \t *  and\n\t    \t *   p'(0) = t0, p'(1) = t1.\n\t    \t */\n\t    \tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\t\n\t    \t\tthis.c0 = x0;\n\t    \t\tthis.c1 = t0;\n\t    \t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t    \t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\n\t    \t};\n\t\n\t    \tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\t\n\t    \t\t// compute tangents when parameterized in [t1,t2]\n\t    \t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t    \t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\t\n\t    \t\t// rescale tangents for parametrization in [0,1]\n\t    \t\tt1 *= dt1;\n\t    \t\tt2 *= dt1;\n\t\n\t    \t\t// initCubicPoly\n\t    \t\tthis.init( x1, x2, t1, t2 );\n\t\n\t    \t};\n\t\n\t    \t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\t    \tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\t\n\t    \t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\t\n\t    \t};\n\t\n\t    \tCubicPoly.prototype.calc = function( t ) {\n\t\n\t    \t\tvar t2 = t * t;\n\t    \t\tvar t3 = t2 * t;\n\t    \t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\t\n\t    \t};\n\t\n\t    \t// Subclass Three.js curve\n\t    \treturn Curve.create(\n\t\n\t    \t\tfunction ( p /* array of Vector3 */ ) {\n\t\n\t    \t\t\tthis.points = p || [];\n\t    \t\t\tthis.closed = false;\n\t\n\t    \t\t},\n\t\n\t    \t\tfunction ( t ) {\n\t\n\t    \t\t\tvar points = this.points,\n\t    \t\t\t\tpoint, intPoint, weight, l;\n\t\n\t    \t\t\tl = points.length;\n\t\n\t    \t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\t\n\t    \t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t    \t\t\tintPoint = Math.floor( point );\n\t    \t\t\tweight = point - intPoint;\n\t\n\t    \t\t\tif ( this.closed ) {\n\t\n\t    \t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\t\n\t    \t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\t\n\t    \t\t\t\tintPoint = l - 2;\n\t    \t\t\t\tweight = 1;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar p0, p1, p2, p3; // 4 points\n\t\n\t    \t\t\tif ( this.closed || intPoint > 0 ) {\n\t\n\t    \t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// extrapolate first point\n\t    \t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t    \t\t\t\tp0 = tmp;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tp1 = points[ intPoint % l ];\n\t    \t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\t\n\t    \t\t\tif ( this.closed || intPoint + 2 < l ) {\n\t\n\t    \t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\t\n\t    \t\t\t} else {\n\t\n\t    \t\t\t\t// extrapolate last point\n\t    \t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t    \t\t\t\tp3 = tmp;\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\t\n\t    \t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t    \t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t    \t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t    \t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t    \t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\t\n\t    \t\t\t\t// safety check for repeated points\n\t    \t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t    \t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t    \t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\t\n\t    \t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t    \t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t    \t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\t\n\t    \t\t\t} else if ( this.type === 'catmullrom' ) {\n\t\n\t    \t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t    \t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t    \t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t    \t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\t\n\t    \t\t\t}\n\t\n\t    \t\t\tvar v = new Vector3(\n\t    \t\t\t\tpx.calc( weight ),\n\t    \t\t\t\tpy.calc( weight ),\n\t    \t\t\t\tpz.calc( weight )\n\t    \t\t\t);\n\t\n\t    \t\t\treturn v;\n\t\n\t    \t\t}\n\t\n\t    \t);\n\t\n\t    } )();\n\t\n\t    /**************************************************************\n\t     *\tClosed Spline 3D curve\n\t     **************************************************************/\n\t\n\t\n\t    function ClosedSplineCurve3( points ) {\n\t\n\t    \tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\t\n\t    \texports.CatmullRomCurve3.call( this, points );\n\t    \tthis.type = 'catmullrom';\n\t    \tthis.closed = true;\n\t\n\t    }\n\t\n\t    ClosedSplineCurve3.prototype = Object.create( exports.CatmullRomCurve3.prototype );\n\t\n\t    /**************************************************************\n\t     *\tSpline 3D curve\n\t     **************************************************************/\n\t\n\t\n\t    var SplineCurve3 = Curve.create(\n\t\n\t    \tfunction ( points /* array of Vector3 */ ) {\n\t\n\t    \t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n\t    \t\tthis.points = ( points === undefined ) ? [] : points;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tvar points = this.points;\n\t    \t\tvar point = ( points.length - 1 ) * t;\n\t\n\t    \t\tvar intPoint = Math.floor( point );\n\t    \t\tvar weight = point - intPoint;\n\t\n\t    \t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n\t    \t\tvar point1 = points[ intPoint ];\n\t    \t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t    \t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\t\n\t    \t\tvar interpolate = exports.CurveUtils.interpolate;\n\t\n\t    \t\treturn new Vector3(\n\t    \t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t    \t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n\t    \t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tCubic Bezier 3D curve\n\t     **************************************************************/\n\t\n\t    exports.CubicBezierCurve3 = Curve.create(\n\t\n\t    \tfunction ( v0, v1, v2, v3 ) {\n\t\n\t    \t\tthis.v0 = v0;\n\t    \t\tthis.v1 = v1;\n\t    \t\tthis.v2 = v2;\n\t    \t\tthis.v3 = v3;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tvar b3 = exports.ShapeUtils.b3;\n\t\n\t    \t\treturn new Vector3(\n\t    \t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t    \t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n\t    \t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tQuadratic Bezier 3D curve\n\t     **************************************************************/\n\t\n\t    exports.QuadraticBezierCurve3 = Curve.create(\n\t\n\t    \tfunction ( v0, v1, v2 ) {\n\t\n\t    \t\tthis.v0 = v0;\n\t    \t\tthis.v1 = v1;\n\t    \t\tthis.v2 = v2;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tvar b2 = exports.ShapeUtils.b2;\t\t\n\t\n\t    \t\treturn new Vector3(\n\t    \t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t    \t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n\t    \t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n\t    \t\t);\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tLine3D\n\t     **************************************************************/\n\t\n\t    exports.LineCurve3 = Curve.create(\n\t\n\t    \tfunction ( v1, v2 ) {\n\t\n\t    \t\tthis.v1 = v1;\n\t    \t\tthis.v2 = v2;\n\t\n\t    \t},\n\t\n\t    \tfunction ( t ) {\n\t\n\t    \t\tif ( t === 1 ) {\n\t\n\t    \t\t\treturn this.v2.clone();\n\t\n\t    \t\t}\n\t\n\t    \t\tvar vector = new Vector3();\n\t\n\t    \t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t    \t\tvector.multiplyScalar( t );\n\t    \t\tvector.add( this.v1 );\n\t\n\t    \t\treturn vector;\n\t\n\t    \t}\n\t\n\t    );\n\t\n\t    /**************************************************************\n\t     *\tArc curve\n\t     **************************************************************/\n\t\n\t    function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t    \tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\t\n\t    }\n\t\n\t    ArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\t    ArcCurve.prototype.constructor = ArcCurve;\n\t\n\t    /**\n\t     * @author alteredq / http://alteredqualia.com/\n\t     */\n\t\n\t    exports.SceneUtils = {\n\t\n\t    \tcreateMultiMaterialObject: function ( geometry, materials ) {\n\t\n\t    \t\tvar group = new Group();\n\t\n\t    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\t\n\t    \t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\t\n\t    \t\t}\n\t\n\t    \t\treturn group;\n\t\n\t    \t},\n\t\n\t    \tdetach: function ( child, parent, scene ) {\n\t\n\t    \t\tchild.applyMatrix( parent.matrixWorld );\n\t    \t\tparent.remove( child );\n\t    \t\tscene.add( child );\n\t\n\t    \t},\n\t\n\t    \tattach: function ( child, scene, parent ) {\n\t\n\t    \t\tvar matrixWorldInverse = new Matrix4();\n\t    \t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\t    \t\tchild.applyMatrix( matrixWorldInverse );\n\t\n\t    \t\tscene.remove( child );\n\t    \t\tparent.add( child );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    function Face4 ( a, b, c, d, normal, color, materialIndex ) {\n\t    \tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t    \treturn new Face3( a, b, c, normal, color, materialIndex );\n\t    }\n\t\n\t    var LineStrip = 0;\n\t\n\t    var LinePieces = 1;\n\t\n\t    function PointCloud ( geometry, material ) {\n\t    \tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t    \treturn new Points( geometry, material );\n\t    }\n\t\n\t    function ParticleSystem ( geometry, material ) {\n\t    \tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t    \treturn new Points( geometry, material );\n\t    }\n\t\n\t    function PointCloudMaterial ( parameters ) {\n\t    \tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t    \treturn new PointsMaterial( parameters );\n\t    }\n\t\n\t    function ParticleBasicMaterial ( parameters ) {\n\t    \tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t    \treturn new PointsMaterial( parameters );\n\t    }\n\t\n\t    function ParticleSystemMaterial ( parameters ) {\n\t    \tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t    \treturn new PointsMaterial( parameters );\n\t    }\n\t\n\t    function Vertex ( x, y, z ) {\n\t    \tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t    \treturn new Vector3( x, y, z );\n\t    }\n\t\n\t    //\n\t\n\t    function EdgesHelper( object, hex ) {\n\t    \tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t    \treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\t    }\n\t\n\t    function WireframeHelper( object, hex ) {\n\t    \tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t    \treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\t    }\n\t\n\t    //\n\t\n\t    Object.assign( Box2.prototype, {\n\t    \tcenter: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t    \t\treturn this.getCenter( optionalTarget );\n\t    \t},\n\t    \tempty: function () {\n\t    \t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t    \t\treturn this.isEmpty();\n\t    \t},\n\t    \tisIntersectionBox: function ( box ) {\n\t    \t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t    \t\treturn this.intersectsBox( box );\n\t    \t},\n\t    \tsize: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t    \t\treturn this.getSize( optionalTarget );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Box3.prototype, {\n\t    \tcenter: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t    \t\treturn this.getCenter( optionalTarget );\n\t    \t},\n\t    \tempty: function () {\n\t    \t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t    \t\treturn this.isEmpty();\n\t    \t},\n\t    \tisIntersectionBox: function ( box ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t    \t\treturn this.intersectsBox( box );\n\t    \t},\n\t    \tisIntersectionSphere: function ( sphere ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t    \t\treturn this.intersectsSphere( sphere );\n\t    \t},\n\t    \tsize: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t    \t\treturn this.getSize( optionalTarget );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Line3.prototype, {\n\t    \tcenter: function ( optionalTarget ) {\n\t    \t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t    \t\treturn this.getCenter( optionalTarget );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Matrix3.prototype, {\n\t    \tmultiplyVector3: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t    \t\treturn vector.applyMatrix3( this );\n\t    \t},\n\t    \tmultiplyVector3Array: function ( a ) {\n\t    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t    \t\treturn this.applyToVector3Array( a );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Matrix4.prototype, {\n\t    \textractPosition: function ( m ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t    \t\treturn this.copyPosition( m );\n\t    \t},\n\t    \tsetRotationFromQuaternion: function ( q ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t    \t\treturn this.makeRotationFromQuaternion( q );\n\t    \t},\n\t    \tmultiplyVector3: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n\t    \t\treturn vector.applyProjection( this );\n\t    \t},\n\t    \tmultiplyVector4: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t    \t\treturn vector.applyMatrix4( this );\n\t    \t},\n\t    \tmultiplyVector3Array: function ( a ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t    \t\treturn this.applyToVector3Array( a );\n\t    \t},\n\t    \trotateAxis: function ( v ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t    \t\tv.transformDirection( this );\n\t    \t},\n\t    \tcrossVector: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t    \t\treturn vector.applyMatrix4( this );\n\t    \t},\n\t    \ttranslate: function ( v ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\t    \t},\n\t    \trotateX: function ( angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\t    \t},\n\t    \trotateY: function ( angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\t    \t},\n\t    \trotateZ: function ( angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\t    \t},\n\t    \trotateByAxis: function ( axis, angle ) {\n\t    \t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Plane.prototype, {\n\t    \tisIntersectionLine: function ( line ) {\n\t    \t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t    \t\treturn this.intersectsLine( line );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Quaternion.prototype, {\n\t    \tmultiplyVector3: function ( vector ) {\n\t    \t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t    \t\treturn vector.applyQuaternion( this );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Ray.prototype, {\n\t    \tisIntersectionBox: function ( box ) {\n\t    \t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t    \t\treturn this.intersectsBox( box );\n\t    \t},\n\t    \tisIntersectionPlane: function ( plane ) {\n\t    \t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t    \t\treturn this.intersectsPlane( plane );\n\t    \t},\n\t    \tisIntersectionSphere: function ( sphere ) {\n\t    \t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t    \t\treturn this.intersectsSphere( sphere );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Shape.prototype, {\n\t    \textrude: function ( options ) {\n\t    \t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t    \t\treturn new ExtrudeGeometry( this, options );\n\t    \t},\n\t    \tmakeGeometry: function ( options ) {\n\t    \t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t    \t\treturn new ShapeGeometry( this, options );\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( Vector3.prototype, {\n\t    \tsetEulerFromRotationMatrix: function () {\n\t    \t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\t    \t},\n\t    \tsetEulerFromQuaternion: function () {\n\t    \t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\t    \t},\n\t    \tgetPositionFromMatrix: function ( m ) {\n\t    \t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t    \t\treturn this.setFromMatrixPosition( m );\n\t    \t},\n\t    \tgetScaleFromMatrix: function ( m ) {\n\t    \t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t    \t\treturn this.setFromMatrixScale( m );\n\t    \t},\n\t    \tgetColumnFromMatrix: function ( index, matrix ) {\n\t    \t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t    \t\treturn this.setFromMatrixColumn( matrix, index );\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.assign( Object3D.prototype, {\n\t    \tgetChildByName: function ( name ) {\n\t    \t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t    \t\treturn this.getObjectByName( name );\n\t    \t},\n\t    \trenderDepth: function ( value ) {\n\t    \t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\t    \t},\n\t    \ttranslate: function ( distance, axis ) {\n\t    \t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t    \t\treturn this.translateOnAxis( axis, distance );\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( Object3D.prototype, {\n\t    \teulerOrder: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t    \t\t\treturn this.rotation.order;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t    \t\t\tthis.rotation.order = value;\n\t    \t\t}\n\t    \t},\n\t    \tuseQuaternion: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( LOD.prototype, {\n\t    \tobjects: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t    \t\t\treturn this.levels;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\t\n\t    \tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t    \t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\t\n\t    \tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\t    \tthis.setFocalLength( focalLength );\n\t\n\t    };\n\t\n\t    //\n\t\n\t    Object.defineProperties( Light.prototype, {\n\t    \tonlyShadow: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraFov: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t    \t\t\tthis.shadow.camera.fov = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraLeft: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t    \t\t\tthis.shadow.camera.left = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraRight: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t    \t\t\tthis.shadow.camera.right = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraTop: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t    \t\t\tthis.shadow.camera.top = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraBottom: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t    \t\t\tthis.shadow.camera.bottom = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraNear: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t    \t\t\tthis.shadow.camera.near = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraFar: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t    \t\t\tthis.shadow.camera.far = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowCameraVisible: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\t    \t\t}\n\t    \t},\n\t    \tshadowBias: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t    \t\t\tthis.shadow.bias = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowDarkness: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapWidth: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t    \t\t\tthis.shadow.mapSize.width = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapHeight: {\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t    \t\t\tthis.shadow.mapSize.height = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.defineProperties( BufferAttribute.prototype, {\n\t    \tlength: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t    \t\t\treturn this.array.length;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( BufferGeometry.prototype, {\n\t    \taddIndex: function ( index ) {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t    \t\tthis.setIndex( index );\n\t    \t},\n\t    \taddDrawCall: function ( start, count, indexOffset ) {\n\t    \t\tif ( indexOffset !== undefined ) {\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\t    \t\t}\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t    \t\tthis.addGroup( start, count );\n\t    \t},\n\t    \tclearDrawCalls: function () {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t    \t\tthis.clearGroups();\n\t    \t},\n\t    \tcomputeTangents: function () {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\t    \t},\n\t    \tcomputeOffsets: function () {\n\t    \t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( BufferGeometry.prototype, {\n\t    \tdrawcalls: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t    \t\t\treturn this.groups;\n\t    \t\t}\n\t    \t},\n\t    \toffsets: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t    \t\t\treturn this.groups;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.defineProperties( Material.prototype, {\n\t    \twrapAround: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t    \t\t}\n\t    \t},\n\t    \twrapRGB: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n\t    \t\t\treturn new Color();\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( MeshPhongMaterial.prototype, {\n\t    \tmetal: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t    \t\t\treturn false;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( ShaderMaterial.prototype, {\n\t    \tderivatives: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t    \t\t\treturn this.extensions.derivatives;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t    \t\t\tthis.extensions.derivatives = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    EventDispatcher.prototype = Object.assign( Object.create( {\n\t\n\t    \t// Note: Extra base ensures these properties are not 'assign'ed.\n\t\n\t    \tconstructor: EventDispatcher,\n\t\n\t    \tapply: function ( target ) {\n\t\n\t    \t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n\t    \t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\t\n\t    \t\tObject.assign( target, this );\n\t\n\t    \t}\n\t\n\t    } ), EventDispatcher.prototype );\n\t\n\t    //\n\t\n\t    Object.assign( WebGLRenderer.prototype, {\n\t    \tsupportsFloatTextures: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t    \t\treturn this.extensions.get( 'OES_texture_float' );\n\t    \t},\n\t    \tsupportsHalfFloatTextures: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t    \t\treturn this.extensions.get( 'OES_texture_half_float' );\n\t    \t},\n\t    \tsupportsStandardDerivatives: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t    \t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\t    \t},\n\t    \tsupportsCompressedTextureS3TC: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t    \t},\n\t    \tsupportsCompressedTexturePVRTC: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t    \t},\n\t    \tsupportsBlendMinMax: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t    \t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\t    \t},\n\t    \tsupportsVertexTextures: function () {\n\t    \t\treturn this.capabilities.vertexTextures;\n\t    \t},\n\t    \tsupportsInstancedArrays: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t    \t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\t    \t},\n\t    \tenableScissorTest: function ( boolean ) {\n\t    \t\t// console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t    \t\tthis.setScissorTest( boolean );\n\t    \t},\n\t    \tinitMaterial: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\t    \t},\n\t    \taddPrePlugin: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\t    \t},\n\t    \taddPostPlugin: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\t    \t},\n\t    \tupdateShadowMap: function () {\n\t    \t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( WebGLRenderer.prototype, {\n\t    \tshadowMapEnabled: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.shadowMap.enabled;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t    \t\t\tthis.shadowMap.enabled = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapType: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.shadowMap.type;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t    \t\t\tthis.shadowMap.type = value;\n\t    \t\t}\n\t    \t},\n\t    \tshadowMapCullFace: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.shadowMap.cullFace;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t    \t\t\tthis.shadowMap.cullFace = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    Object.defineProperties( WebGLShadowMap.prototype, {\n\t    \tcullFace: {\n\t    \t\tget: function () {\n\t    \t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n\t    \t\t},\n\t    \t\tset: function ( cullFace ) {\n\t    \t\t\tvar value = ( cullFace !== CullFaceBack );\n\t    \t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t    \t\t\tthis.renderReverseSided = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.defineProperties( WebGLRenderTarget.prototype, {\n\t    \twrapS: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t    \t\t\treturn this.texture.wrapS;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t    \t\t\tthis.texture.wrapS = value;\n\t    \t\t}\n\t    \t},\n\t    \twrapT: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t    \t\t\treturn this.texture.wrapT;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t    \t\t\tthis.texture.wrapT = value;\n\t    \t\t}\n\t    \t},\n\t    \tmagFilter: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t    \t\t\treturn this.texture.magFilter;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t    \t\t\tthis.texture.magFilter = value;\n\t    \t\t}\n\t    \t},\n\t    \tminFilter: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t    \t\t\treturn this.texture.minFilter;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t    \t\t\tthis.texture.minFilter = value;\n\t    \t\t}\n\t    \t},\n\t    \tanisotropy: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t    \t\t\treturn this.texture.anisotropy;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t    \t\t\tthis.texture.anisotropy = value;\n\t    \t\t}\n\t    \t},\n\t    \toffset: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t    \t\t\treturn this.texture.offset;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t    \t\t\tthis.texture.offset = value;\n\t    \t\t}\n\t    \t},\n\t    \trepeat: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t    \t\t\treturn this.texture.repeat;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t    \t\t\tthis.texture.repeat = value;\n\t    \t\t}\n\t    \t},\n\t    \tformat: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t    \t\t\treturn this.texture.format;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t    \t\t\tthis.texture.format = value;\n\t    \t\t}\n\t    \t},\n\t    \ttype: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t    \t\t\treturn this.texture.type;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t    \t\t\tthis.texture.type = value;\n\t    \t\t}\n\t    \t},\n\t    \tgenerateMipmaps: {\n\t    \t\tget: function () {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t    \t\t\treturn this.texture.generateMipmaps;\n\t    \t\t},\n\t    \t\tset: function ( value ) {\n\t    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t    \t\t\tthis.texture.generateMipmaps = value;\n\t    \t\t}\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    Object.assign( Audio.prototype, {\n\t    \tload: function ( file ) {\n\t    \t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n\t    \t\tvar scope = this;\n\t    \t\tvar audioLoader = new AudioLoader();\n\t    \t\taudioLoader.load( file, function ( buffer ) {\n\t    \t\t\tscope.setBuffer( buffer );\n\t    \t\t} );\n\t    \t\treturn this;\n\t    \t}\n\t    } );\n\t\n\t    Object.assign( AudioAnalyser.prototype, {\n\t    \tgetData: function ( file ) {\n\t    \t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t    \t\treturn this.getFrequencyData();\n\t    \t}\n\t    } );\n\t\n\t    //\n\t\n\t    var GeometryUtils = {\n\t\n\t    \tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\t\n\t    \t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\n\t    \t\tvar matrix;\n\t\n\t    \t\tif ( geometry2.isMesh ) {\n\t\n\t    \t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\t\n\t    \t\t\tmatrix = geometry2.matrix;\n\t    \t\t\tgeometry2 = geometry2.geometry;\n\t\n\t    \t\t}\n\t\n\t    \t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\t\n\t    \t},\n\t\n\t    \tcenter: function ( geometry ) {\n\t\n\t    \t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t    \t\treturn geometry.center();\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    var ImageUtils = {\n\t\n\t    \tcrossOrigin: undefined,\n\t\n\t    \tloadTexture: function ( url, mapping, onLoad, onError ) {\n\t\n\t    \t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\t\n\t    \t\tvar loader = new TextureLoader();\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t    \t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\t\n\t    \t\tif ( mapping ) texture.mapping = mapping;\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\t\n\t    \t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\t\n\t    \t\tvar loader = new CubeTextureLoader();\n\t    \t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t    \t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\t\n\t    \t\tif ( mapping ) texture.mapping = mapping;\n\t\n\t    \t\treturn texture;\n\t\n\t    \t},\n\t\n\t    \tloadCompressedTexture: function () {\n\t\n\t    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\t\n\t    \t},\n\t\n\t    \tloadCompressedTextureCube: function () {\n\t\n\t    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\t\n\t    \t}\n\t\n\t    };\n\t\n\t    //\n\t\n\t    function Projector () {\n\t\n\t    \tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\t\n\t    \tthis.projectVector = function ( vector, camera ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t    \t\tvector.project( camera );\n\t\n\t    \t};\n\t\n\t    \tthis.unprojectVector = function ( vector, camera ) {\n\t\n\t    \t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t    \t\tvector.unproject( camera );\n\t\n\t    \t};\n\t\n\t    \tthis.pickingRay = function ( vector, camera ) {\n\t\n\t    \t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\t\n\t    \t};\n\t\n\t    }\n\t\n\t    //\n\t\n\t    function CanvasRenderer () {\n\t\n\t    \tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\t\n\t    \tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t    \tthis.clear = function () {};\n\t    \tthis.render = function () {};\n\t    \tthis.setClearColor = function () {};\n\t    \tthis.setSize = function () {};\n\t\n\t    }\n\t\n\t    Object.defineProperty( exports, 'AudioContext', {\n\t    \tget: function () {\n\t    \t\treturn exports.getAudioContext();\n\t    \t}\n\t    });\n\t\n\t    exports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\t    exports.WebGLRenderTarget = WebGLRenderTarget;\n\t    exports.WebGLRenderer = WebGLRenderer;\n\t    exports.ShaderLib = ShaderLib;\n\t    exports.UniformsLib = UniformsLib;\n\t    exports.ShaderChunk = ShaderChunk;\n\t    exports.FogExp2 = FogExp2;\n\t    exports.Fog = Fog;\n\t    exports.Scene = Scene;\n\t    exports.LensFlare = LensFlare;\n\t    exports.Sprite = Sprite;\n\t    exports.LOD = LOD;\n\t    exports.SkinnedMesh = SkinnedMesh;\n\t    exports.Skeleton = Skeleton;\n\t    exports.Bone = Bone;\n\t    exports.Mesh = Mesh;\n\t    exports.LineSegments = LineSegments;\n\t    exports.Line = Line;\n\t    exports.Points = Points;\n\t    exports.Group = Group;\n\t    exports.VideoTexture = VideoTexture;\n\t    exports.DataTexture = DataTexture;\n\t    exports.CompressedTexture = CompressedTexture;\n\t    exports.CubeTexture = CubeTexture;\n\t    exports.CanvasTexture = CanvasTexture;\n\t    exports.DepthTexture = DepthTexture;\n\t    exports.TextureIdCount = TextureIdCount;\n\t    exports.Texture = Texture;\n\t    exports.MaterialIdCount = MaterialIdCount;\n\t    exports.CompressedTextureLoader = CompressedTextureLoader;\n\t    exports.BinaryTextureLoader = BinaryTextureLoader;\n\t    exports.DataTextureLoader = DataTextureLoader;\n\t    exports.CubeTextureLoader = CubeTextureLoader;\n\t    exports.TextureLoader = TextureLoader;\n\t    exports.ObjectLoader = ObjectLoader;\n\t    exports.MaterialLoader = MaterialLoader;\n\t    exports.BufferGeometryLoader = BufferGeometryLoader;\n\t    exports.LoadingManager = LoadingManager;\n\t    exports.JSONLoader = JSONLoader;\n\t    exports.ImageLoader = ImageLoader;\n\t    exports.FontLoader = FontLoader;\n\t    exports.XHRLoader = XHRLoader;\n\t    exports.Loader = Loader;\n\t    exports.AudioLoader = AudioLoader;\n\t    exports.SpotLightShadow = SpotLightShadow;\n\t    exports.SpotLight = SpotLight;\n\t    exports.PointLight = PointLight;\n\t    exports.HemisphereLight = HemisphereLight;\n\t    exports.DirectionalLightShadow = DirectionalLightShadow;\n\t    exports.DirectionalLight = DirectionalLight;\n\t    exports.AmbientLight = AmbientLight;\n\t    exports.LightShadow = LightShadow;\n\t    exports.Light = Light;\n\t    exports.StereoCamera = StereoCamera;\n\t    exports.PerspectiveCamera = PerspectiveCamera;\n\t    exports.OrthographicCamera = OrthographicCamera;\n\t    exports.CubeCamera = CubeCamera;\n\t    exports.Camera = Camera;\n\t    exports.AudioListener = AudioListener;\n\t    exports.PositionalAudio = PositionalAudio;\n\t    exports.getAudioContext = getAudioContext;\n\t    exports.AudioAnalyser = AudioAnalyser;\n\t    exports.Audio = Audio;\n\t    exports.VectorKeyframeTrack = VectorKeyframeTrack;\n\t    exports.StringKeyframeTrack = StringKeyframeTrack;\n\t    exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\t    exports.NumberKeyframeTrack = NumberKeyframeTrack;\n\t    exports.ColorKeyframeTrack = ColorKeyframeTrack;\n\t    exports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\t    exports.PropertyMixer = PropertyMixer;\n\t    exports.PropertyBinding = PropertyBinding;\n\t    exports.KeyframeTrack = KeyframeTrack;\n\t    exports.AnimationObjectGroup = AnimationObjectGroup;\n\t    exports.AnimationMixer = AnimationMixer;\n\t    exports.AnimationClip = AnimationClip;\n\t    exports.Uniform = Uniform;\n\t    exports.InstancedBufferGeometry = InstancedBufferGeometry;\n\t    exports.BufferGeometry = BufferGeometry;\n\t    exports.GeometryIdCount = GeometryIdCount;\n\t    exports.Geometry = Geometry;\n\t    exports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\t    exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\t    exports.InterleavedBuffer = InterleavedBuffer;\n\t    exports.InstancedBufferAttribute = InstancedBufferAttribute;\n\t    exports.DynamicBufferAttribute = DynamicBufferAttribute;\n\t    exports.Float64Attribute = Float64Attribute;\n\t    exports.Float32Attribute = Float32Attribute;\n\t    exports.Uint32Attribute = Uint32Attribute;\n\t    exports.Int32Attribute = Int32Attribute;\n\t    exports.Uint16Attribute = Uint16Attribute;\n\t    exports.Int16Attribute = Int16Attribute;\n\t    exports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\t    exports.Uint8Attribute = Uint8Attribute;\n\t    exports.Int8Attribute = Int8Attribute;\n\t    exports.BufferAttribute = BufferAttribute;\n\t    exports.Face3 = Face3;\n\t    exports.Object3DIdCount = Object3DIdCount;\n\t    exports.Object3D = Object3D;\n\t    exports.Raycaster = Raycaster;\n\t    exports.Layers = Layers;\n\t    exports.EventDispatcher = EventDispatcher;\n\t    exports.Clock = Clock;\n\t    exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\t    exports.LinearInterpolant = LinearInterpolant;\n\t    exports.DiscreteInterpolant = DiscreteInterpolant;\n\t    exports.CubicInterpolant = CubicInterpolant;\n\t    exports.Interpolant = Interpolant;\n\t    exports.Triangle = Triangle;\n\t    exports.Spline = Spline;\n\t    exports.Spherical = Spherical;\n\t    exports.Plane = Plane;\n\t    exports.Frustum = Frustum;\n\t    exports.Sphere = Sphere;\n\t    exports.Ray = Ray;\n\t    exports.Matrix4 = Matrix4;\n\t    exports.Matrix3 = Matrix3;\n\t    exports.Box3 = Box3;\n\t    exports.Box2 = Box2;\n\t    exports.Line3 = Line3;\n\t    exports.Euler = Euler;\n\t    exports.Vector4 = Vector4;\n\t    exports.Vector3 = Vector3;\n\t    exports.Vector2 = Vector2;\n\t    exports.Quaternion = Quaternion;\n\t    exports.Color = Color;\n\t    exports.MorphBlendMesh = MorphBlendMesh;\n\t    exports.ImmediateRenderObject = ImmediateRenderObject;\n\t    exports.VertexNormalsHelper = VertexNormalsHelper;\n\t    exports.SpotLightHelper = SpotLightHelper;\n\t    exports.SkeletonHelper = SkeletonHelper;\n\t    exports.PointLightHelper = PointLightHelper;\n\t    exports.HemisphereLightHelper = HemisphereLightHelper;\n\t    exports.GridHelper = GridHelper;\n\t    exports.FaceNormalsHelper = FaceNormalsHelper;\n\t    exports.DirectionalLightHelper = DirectionalLightHelper;\n\t    exports.CameraHelper = CameraHelper;\n\t    exports.BoundingBoxHelper = BoundingBoxHelper;\n\t    exports.BoxHelper = BoxHelper;\n\t    exports.ArrowHelper = ArrowHelper;\n\t    exports.AxisHelper = AxisHelper;\n\t    exports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\t    exports.SplineCurve3 = SplineCurve3;\n\t    exports.ArcCurve = ArcCurve;\n\t    exports.EllipseCurve = EllipseCurve;\n\t    exports.SplineCurve = SplineCurve;\n\t    exports.CubicBezierCurve = CubicBezierCurve;\n\t    exports.QuadraticBezierCurve = QuadraticBezierCurve;\n\t    exports.LineCurve = LineCurve;\n\t    exports.Shape = Shape;\n\t    exports.ShapePath = ShapePath;\n\t    exports.Path = Path;\n\t    exports.Font = Font;\n\t    exports.CurvePath = CurvePath;\n\t    exports.Curve = Curve;\n\t    exports.WireframeGeometry = WireframeGeometry;\n\t    exports.ParametricGeometry = ParametricGeometry;\n\t    exports.TetrahedronGeometry = TetrahedronGeometry;\n\t    exports.OctahedronGeometry = OctahedronGeometry;\n\t    exports.IcosahedronGeometry = IcosahedronGeometry;\n\t    exports.DodecahedronGeometry = DodecahedronGeometry;\n\t    exports.PolyhedronGeometry = PolyhedronGeometry;\n\t    exports.TubeGeometry = TubeGeometry;\n\t    exports.TorusKnotGeometry = TorusKnotGeometry;\n\t    exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\t    exports.TorusGeometry = TorusGeometry;\n\t    exports.TorusBufferGeometry = TorusBufferGeometry;\n\t    exports.TextGeometry = TextGeometry;\n\t    exports.SphereBufferGeometry = SphereBufferGeometry;\n\t    exports.SphereGeometry = SphereGeometry;\n\t    exports.RingGeometry = RingGeometry;\n\t    exports.RingBufferGeometry = RingBufferGeometry;\n\t    exports.PlaneBufferGeometry = PlaneBufferGeometry;\n\t    exports.PlaneGeometry = PlaneGeometry;\n\t    exports.LatheGeometry = LatheGeometry;\n\t    exports.LatheBufferGeometry = LatheBufferGeometry;\n\t    exports.ShapeGeometry = ShapeGeometry;\n\t    exports.ExtrudeGeometry = ExtrudeGeometry;\n\t    exports.EdgesGeometry = EdgesGeometry;\n\t    exports.ConeGeometry = ConeGeometry;\n\t    exports.ConeBufferGeometry = ConeBufferGeometry;\n\t    exports.CylinderGeometry = CylinderGeometry;\n\t    exports.CylinderBufferGeometry = CylinderBufferGeometry;\n\t    exports.CircleBufferGeometry = CircleBufferGeometry;\n\t    exports.CircleGeometry = CircleGeometry;\n\t    exports.BoxBufferGeometry = BoxBufferGeometry;\n\t    exports.BoxGeometry = BoxGeometry;\n\t    exports.ShadowMaterial = ShadowMaterial;\n\t    exports.SpriteMaterial = SpriteMaterial;\n\t    exports.RawShaderMaterial = RawShaderMaterial;\n\t    exports.ShaderMaterial = ShaderMaterial;\n\t    exports.PointsMaterial = PointsMaterial;\n\t    exports.MultiMaterial = MultiMaterial;\n\t    exports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\t    exports.MeshStandardMaterial = MeshStandardMaterial;\n\t    exports.MeshPhongMaterial = MeshPhongMaterial;\n\t    exports.MeshNormalMaterial = MeshNormalMaterial;\n\t    exports.MeshLambertMaterial = MeshLambertMaterial;\n\t    exports.MeshDepthMaterial = MeshDepthMaterial;\n\t    exports.MeshBasicMaterial = MeshBasicMaterial;\n\t    exports.LineDashedMaterial = LineDashedMaterial;\n\t    exports.LineBasicMaterial = LineBasicMaterial;\n\t    exports.Material = Material;\n\t    exports.REVISION = REVISION;\n\t    exports.MOUSE = MOUSE;\n\t    exports.CullFaceNone = CullFaceNone;\n\t    exports.CullFaceBack = CullFaceBack;\n\t    exports.CullFaceFront = CullFaceFront;\n\t    exports.CullFaceFrontBack = CullFaceFrontBack;\n\t    exports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\t    exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\t    exports.BasicShadowMap = BasicShadowMap;\n\t    exports.PCFShadowMap = PCFShadowMap;\n\t    exports.PCFSoftShadowMap = PCFSoftShadowMap;\n\t    exports.FrontSide = FrontSide;\n\t    exports.BackSide = BackSide;\n\t    exports.DoubleSide = DoubleSide;\n\t    exports.FlatShading = FlatShading;\n\t    exports.SmoothShading = SmoothShading;\n\t    exports.NoColors = NoColors;\n\t    exports.FaceColors = FaceColors;\n\t    exports.VertexColors = VertexColors;\n\t    exports.NoBlending = NoBlending;\n\t    exports.NormalBlending = NormalBlending;\n\t    exports.AdditiveBlending = AdditiveBlending;\n\t    exports.SubtractiveBlending = SubtractiveBlending;\n\t    exports.MultiplyBlending = MultiplyBlending;\n\t    exports.CustomBlending = CustomBlending;\n\t    exports.BlendingMode = BlendingMode;\n\t    exports.AddEquation = AddEquation;\n\t    exports.SubtractEquation = SubtractEquation;\n\t    exports.ReverseSubtractEquation = ReverseSubtractEquation;\n\t    exports.MinEquation = MinEquation;\n\t    exports.MaxEquation = MaxEquation;\n\t    exports.ZeroFactor = ZeroFactor;\n\t    exports.OneFactor = OneFactor;\n\t    exports.SrcColorFactor = SrcColorFactor;\n\t    exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\t    exports.SrcAlphaFactor = SrcAlphaFactor;\n\t    exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\t    exports.DstAlphaFactor = DstAlphaFactor;\n\t    exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\t    exports.DstColorFactor = DstColorFactor;\n\t    exports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\t    exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\t    exports.NeverDepth = NeverDepth;\n\t    exports.AlwaysDepth = AlwaysDepth;\n\t    exports.LessDepth = LessDepth;\n\t    exports.LessEqualDepth = LessEqualDepth;\n\t    exports.EqualDepth = EqualDepth;\n\t    exports.GreaterEqualDepth = GreaterEqualDepth;\n\t    exports.GreaterDepth = GreaterDepth;\n\t    exports.NotEqualDepth = NotEqualDepth;\n\t    exports.MultiplyOperation = MultiplyOperation;\n\t    exports.MixOperation = MixOperation;\n\t    exports.AddOperation = AddOperation;\n\t    exports.NoToneMapping = NoToneMapping;\n\t    exports.LinearToneMapping = LinearToneMapping;\n\t    exports.ReinhardToneMapping = ReinhardToneMapping;\n\t    exports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\t    exports.CineonToneMapping = CineonToneMapping;\n\t    exports.UVMapping = UVMapping;\n\t    exports.CubeReflectionMapping = CubeReflectionMapping;\n\t    exports.CubeRefractionMapping = CubeRefractionMapping;\n\t    exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\t    exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\t    exports.SphericalReflectionMapping = SphericalReflectionMapping;\n\t    exports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\t    exports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\t    exports.TextureMapping = TextureMapping;\n\t    exports.RepeatWrapping = RepeatWrapping;\n\t    exports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\t    exports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\t    exports.TextureWrapping = TextureWrapping;\n\t    exports.NearestFilter = NearestFilter;\n\t    exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\t    exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\t    exports.LinearFilter = LinearFilter;\n\t    exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\t    exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\t    exports.TextureFilter = TextureFilter;\n\t    exports.UnsignedByteType = UnsignedByteType;\n\t    exports.ByteType = ByteType;\n\t    exports.ShortType = ShortType;\n\t    exports.UnsignedShortType = UnsignedShortType;\n\t    exports.IntType = IntType;\n\t    exports.UnsignedIntType = UnsignedIntType;\n\t    exports.FloatType = FloatType;\n\t    exports.HalfFloatType = HalfFloatType;\n\t    exports.UnsignedShort4444Type = UnsignedShort4444Type;\n\t    exports.UnsignedShort5551Type = UnsignedShort5551Type;\n\t    exports.UnsignedShort565Type = UnsignedShort565Type;\n\t    exports.UnsignedInt248Type = UnsignedInt248Type;\n\t    exports.AlphaFormat = AlphaFormat;\n\t    exports.RGBFormat = RGBFormat;\n\t    exports.RGBAFormat = RGBAFormat;\n\t    exports.LuminanceFormat = LuminanceFormat;\n\t    exports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\t    exports.RGBEFormat = RGBEFormat;\n\t    exports.DepthFormat = DepthFormat;\n\t    exports.DepthStencilFormat = DepthStencilFormat;\n\t    exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\t    exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\t    exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\t    exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\t    exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\t    exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\t    exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\t    exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\t    exports.RGB_ETC1_Format = RGB_ETC1_Format;\n\t    exports.LoopOnce = LoopOnce;\n\t    exports.LoopRepeat = LoopRepeat;\n\t    exports.LoopPingPong = LoopPingPong;\n\t    exports.InterpolateDiscrete = InterpolateDiscrete;\n\t    exports.InterpolateLinear = InterpolateLinear;\n\t    exports.InterpolateSmooth = InterpolateSmooth;\n\t    exports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\t    exports.ZeroSlopeEnding = ZeroSlopeEnding;\n\t    exports.WrapAroundEnding = WrapAroundEnding;\n\t    exports.TrianglesDrawMode = TrianglesDrawMode;\n\t    exports.TriangleStripDrawMode = TriangleStripDrawMode;\n\t    exports.TriangleFanDrawMode = TriangleFanDrawMode;\n\t    exports.LinearEncoding = LinearEncoding;\n\t    exports.sRGBEncoding = sRGBEncoding;\n\t    exports.GammaEncoding = GammaEncoding;\n\t    exports.RGBEEncoding = RGBEEncoding;\n\t    exports.LogLuvEncoding = LogLuvEncoding;\n\t    exports.RGBM7Encoding = RGBM7Encoding;\n\t    exports.RGBM16Encoding = RGBM16Encoding;\n\t    exports.RGBDEncoding = RGBDEncoding;\n\t    exports.BasicDepthPacking = BasicDepthPacking;\n\t    exports.RGBADepthPacking = RGBADepthPacking;\n\t    exports.CubeGeometry = BoxGeometry;\n\t    exports.Face4 = Face4;\n\t    exports.LineStrip = LineStrip;\n\t    exports.LinePieces = LinePieces;\n\t    exports.MeshFaceMaterial = MultiMaterial;\n\t    exports.PointCloud = PointCloud;\n\t    exports.Particle = Sprite;\n\t    exports.ParticleSystem = ParticleSystem;\n\t    exports.PointCloudMaterial = PointCloudMaterial;\n\t    exports.ParticleBasicMaterial = ParticleBasicMaterial;\n\t    exports.ParticleSystemMaterial = ParticleSystemMaterial;\n\t    exports.Vertex = Vertex;\n\t    exports.EdgesHelper = EdgesHelper;\n\t    exports.WireframeHelper = WireframeHelper;\n\t    exports.GeometryUtils = GeometryUtils;\n\t    exports.ImageUtils = ImageUtils;\n\t    exports.Projector = Projector;\n\t    exports.CanvasRenderer = CanvasRenderer;\n\t\n\t    Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t})));\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = new RegExp(\n\t\t'^' +\n\t\n\t\t// protocol identifier\n\t\t'(?:(?:(?:https?):)?//)' +\n\t\n\t\t// user:pass authentication\n\t\t'(?:\\\\S+(?::\\\\S*)?@)?' +\n\t\t'(?:' +\n\t\n\t\t// IP address exclusion\n\t\t// private & local networks\n\t\t'(' +\n\t\t'(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})' +\n\t\t'(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})' +\n\t\t'(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})' +\n\t\n\t\t// IP address dotted notation octets\n\t\t// excludes loopback network 0.0.0.0\n\t\t// excludes reserved space >= 224.0.0.0\n\t\t// excludes network & broacast addresses\n\t\t// (first & last IP address of each class)\n\t\t'(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])' +\n\t\t'(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}' +\n\t\t'(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))' +\n\t\t'|' +\n\t\n\t\t// host name\n\t\t'(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)' +\n\t\n\t\t// domain name\n\t\t'(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*' +\n\t\n\t\t// TLD identifier\n\t\t'(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))?' +\n\t\t')' +\n\t\n\t\t')' +\n\t\n\t\t// port number\n\t\t'(?::(\\\\d{2,5}))?' +\n\t\n\t\t// resource path\n\t\t'(?:/\\\\S*)?' +\n\t\t'$', 'i'\n\t);\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.3 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar arrayEach = __webpack_require__(45),\n\t    baseEach = __webpack_require__(44),\n\t    bindCallback = __webpack_require__(46),\n\t    isArray = __webpack_require__(47);\n\t\n\t/**\n\t * Creates a function for `_.forEach` or `_.forEachRight`.\n\t *\n\t * @private\n\t * @param {Function} arrayFunc The function to iterate over an array.\n\t * @param {Function} eachFunc The function to iterate over a collection.\n\t * @returns {Function} Returns the new each function.\n\t */\n\tfunction createForEach(arrayFunc, eachFunc) {\n\t  return function(collection, iteratee, thisArg) {\n\t    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))\n\t      ? arrayFunc(collection, iteratee)\n\t      : eachFunc(collection, bindCallback(iteratee, thisArg, 3));\n\t  };\n\t}\n\t\n\t/**\n\t * Iterates over elements of `collection` invoking `iteratee` for each element.\n\t * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n\t * (value, index|key, collection). Iteratee functions may exit iteration early\n\t * by explicitly returning `false`.\n\t *\n\t * **Note:** As with other \"Collections\" methods, objects with a \"length\" property\n\t * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\n\t * may be used for object iteration.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @alias each\n\t * @category Collection\n\t * @param {Array|Object|string} collection The collection to iterate over.\n\t * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n\t * @param {*} [thisArg] The `this` binding of `iteratee`.\n\t * @returns {Array|Object|string} Returns `collection`.\n\t * @example\n\t *\n\t * _([1, 2]).forEach(function(n) {\n\t *   console.log(n);\n\t * }).value();\n\t * // => logs each value from left to right and returns the array\n\t *\n\t * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {\n\t *   console.log(n, key);\n\t * });\n\t * // => logs each value-key pair and returns the object (iteration order is not guaranteed)\n\t */\n\tvar forEach = createForEach(arrayEach, baseEach);\n\t\n\tmodule.exports = forEach;\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.2.0 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar baseAssign = __webpack_require__(41),\n\t    createAssigner = __webpack_require__(42),\n\t    keys = __webpack_require__(43);\n\t\n\t/**\n\t * A specialized version of `_.assign` for customizing assigned values without\n\t * support for argument juggling, multiple sources, and `this` binding `customizer`\n\t * functions.\n\t *\n\t * @private\n\t * @param {Object} object The destination object.\n\t * @param {Object} source The source object.\n\t * @param {Function} customizer The function to customize assigned values.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction assignWith(object, source, customizer) {\n\t  var index = -1,\n\t      props = keys(source),\n\t      length = props.length;\n\t\n\t  while (++index < length) {\n\t    var key = props[index],\n\t        value = object[key],\n\t        result = customizer(value, source[key], key, object, source);\n\t\n\t    if ((result === result ? (result !== value) : (value === value)) ||\n\t        (value === undefined && !(key in object))) {\n\t      object[key] = result;\n\t    }\n\t  }\n\t  return object;\n\t}\n\t\n\t/**\n\t * Assigns own enumerable properties of source object(s) to the destination\n\t * object. Subsequent sources overwrite property assignments of previous sources.\n\t * If `customizer` is provided it is invoked to produce the assigned values.\n\t * The `customizer` is bound to `thisArg` and invoked with five arguments:\n\t * (objectValue, sourceValue, key, object, source).\n\t *\n\t * **Note:** This method mutates `object` and is based on\n\t * [`Object.assign`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @alias extend\n\t * @category Object\n\t * @param {Object} object The destination object.\n\t * @param {...Object} [sources] The source objects.\n\t * @param {Function} [customizer] The function to customize assigned values.\n\t * @param {*} [thisArg] The `this` binding of `customizer`.\n\t * @returns {Object} Returns `object`.\n\t * @example\n\t *\n\t * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });\n\t * // => { 'user': 'fred', 'age': 40 }\n\t *\n\t * // using a customizer callback\n\t * var defaults = _.partialRight(_.assign, function(value, other) {\n\t *   return _.isUndefined(value) ? other : value;\n\t * });\n\t *\n\t * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n\t * // => { 'user': 'barney', 'age': 36 }\n\t */\n\tvar assign = createAssigner(function(object, source, customizer) {\n\t  return customizer\n\t    ? assignWith(object, source, customizer)\n\t    : baseAssign(object, source);\n\t});\n\t\n\tmodule.exports = assign;\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.Audio = function ( listener ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'Audio';\n\t\tthis.started = false;\n\t\n\t\tif (listener.context) {\n\t\n\t\t\tthis.context = listener.context;\n\t\t\t// this.source = this.context.createBufferSource();\n\t\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect( listener.input );\n\t\n\t\t\tthis.panner = this.context.createPanner();\n\t\t\tthis.panner.connect( this.gain );\n\t\n\t\t} else {\n\t\n\t\t\tthis.source = new Audio();\n\t\n\t\t}\n\t};\n\t\n\tTHREE.Audio.prototype = Object.create( THREE.Object3D.prototype );\n\t\n\tTHREE.Audio.prototype.load = function ( sources ) {\n\t\t//todo: support multiple sources for different audio formats\n\t\n\t\tvar scope = this;\n\t\tvar file;\n\t\tvar i;\n\t\tvar match;\n\t\tvar element = this.source instanceof window.HTMLAudioElement ? this.source : new Audio();\n\t\n\t\tif (typeof sources === 'string') {\n\t\t\tsources = [sources];\n\t\t}\n\t\n\t\tfor (i = 0; i < sources.length; i++) {\n\t\t\tfile = sources[i];\n\t\t\tmatch = /\\.([a-z0-9]+)$/i.exec(file);\n\t\t\tif (match && element.canPlayType('audio/' + match[1])) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\n\t\tif (this.context) {\n\t\t\tvar request = new XMLHttpRequest();\n\t\t\trequest.open( 'GET', file, true );\n\t\t\trequest.responseType = 'arraybuffer';\n\t\t\trequest.onload = function ( e ) {\n\t\t\t\tconsole.log('audio buffer loaded. decoding...', e );\n\t\t\t\tscope.context.decodeAudioData( this.response, function ( buffer ) {\n\t\n\t\t\t\t\tscope.buffer = buffer;\n\t\t\t\t\tif (scope.started) {\n\t\t\t\t\t\tscope.start();\n\t\t\t\t\t}\n\t\n\t\t\t\t}, function onFailure(e) {\n\t\t\t\t\tconsole.log('Decoding the audio buffer failed', e);\n\t\t\t\t} );\n\t\n\t\t\t};\n\t\n\t\t\trequest.onerror = function ( e ) {\n\t\t\t\tconsole.log('error', e);\n\t\t\t};\n\t\n\t\t\trequest.send();\n\t\n\t\t} else {\n\t\n\t\t\tthis.source.src = file;\n\t\t\tthis.source.play();\n\t\n\t\t}\n\t\n\t\treturn this;\n\t};\n\t\n\tTHREE.Audio.prototype.stop = function ( value ) {\n\t\n\t\tif (this.context) {\n\t\t\tthis.source.stop();\n\t\t\tthis.source.disconnect( this.panner );\n\t\t\tthis.source = null;\n\t\t} else {\n\t\t\tthis.source.pause();\n\t\t\tthis.source.currentTime = 0;\n\t\t}\n\t\tthis.started = false;\n\t};\n\t\n\tTHREE.Audio.prototype.start = function ( value ) {\n\t\n\t\tthis.started = true;\n\t\tif (this.context) {\n\t\t\tif (this.source) {\n\t\t\t\tthis.source.disconnect( this.panner );\n\t\t\t}\n\t\n\t\t\tif (this.buffer) {\n\t\t\t\tthis.source = this.context.createBufferSource();\n\t\t\t\tthis.source.buffer = this.buffer;\n\t\t\t\tthis.source.connect( this.panner );\n\t\t\t\tthis.source.start( 0 );\n\t\t\t}\n\t\t} else {\n\t\t\tthis.source.currentTime = 0;\n\t\t\tthis.source.play();\n\t\t}\n\t\n\t};\n\t\n\tTHREE.Audio.prototype.setLoop = function ( value ) {\n\t\n\t\tthis.source.loop = value;\n\t\n\t};\n\t\n\tTHREE.Audio.prototype.setRefDistance = function ( value ) {\n\t\n\t\tif ( this.panner ) {\n\t\n\t\t\tthis.panner.refDistance = value;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.Audio.prototype.setRolloffFactor = function ( value ) {\n\t\n\t\tif ( this.panner ) {\n\t\n\t\t\tthis.panner.rolloffFactor = value;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.Audio.prototype.volume = function ( volume, time ) {\n\t\n\t\tif ( this.gain ) {\n\t\n\t\t\tif ( volume !== undefined ) {\n\t\t\t\tthis.gain.gain.linearRampToValueAtTime( volume, this.context.currentTime + (time || 0));\n\t\t\t}\n\t\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\t\n\t\tif ( volume !== undefined ) {\n\t\t\tthis.source.volume = volume;\n\t\t}\n\t\n\t\treturn this.source.volume;\n\t};\n\t\n\tTHREE.Audio.prototype.updateMatrixWorld = ( function () {\n\t\n\t\tvar position = new THREE.Vector3();\n\t\n\t\treturn function ( force ) {\n\t\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t\t\tif (this.panner) {\n\t\n\t\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t} )();\n\t\n\t// File:src/extras/audio/AudioListener.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.AudioListener = function () {\n\t\tvar AudioContext = window.AudioContext || window.webkitAudioContext;\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'AudioListener';\n\t\n\t\tif (AudioContext) {\n\t\t\tthis.context = new AudioContext();\n\t\t\tthis.input = this.context.createGain();\n\t\n\t\t\tthis.input.connect( this.context.destination );\n\t\t}\n\t};\n\t\n\tTHREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );\n\t\n\tTHREE.AudioListener.prototype.volume = function (val) {\n\t\tif (this.input) {\n\t\t\tval = val !== undefined && parseFloat(val);\n\t\t\tif (!isNaN(val)) {\n\t\t\t\tthis.input.gain.value = val;\n\t\t\t}\n\t\n\t\t\treturn this.input.gain.value;\n\t\t}\n\t};\n\t\n\tTHREE.AudioListener.prototype.updateMatrixWorld = ( function () {\n\t\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar scale = new THREE.Vector3();\n\t\n\t\tvar orientation = new THREE.Vector3();\n\t\n\t\treturn function ( force ) {\n\t\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t\t\tvar listener;\n\t\n\t\t\tif (this.context) {\n\t\t\t\tlistener = this.context.listener;\n\t\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\t\n\t\t\t\torientation.set( 0, 0, -1 ).applyQuaternion( quaternion );\n\t\n\t            // Error Fixed\n\t            try {\n\t\t\t\t    listener.setPosition( position.x, position.y, position.z );\n\t\t\t\t    listener.setOrientation( orientation.x, orientation.y, orientation.z, this.up.x, this.up.y, this.up.z );\n\t            } catch (e) {}\n\t\n\t\t\t}\n\t\t};\n\t\n\t} ());\n\t\n\t\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar THREE = __webpack_require__(33);\n\t\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t *\n\t * Based on \"A Practical Analytic Model for Daylight\"\n\t * aka The Preetham Model, the de facto standard analytic skydome model\n\t * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\n\t *\n\t * First implemented by Simon Wallner\n\t * http://www.simonwallner.at/projects/atmospheric-scattering\n\t *\n\t * Improved by Martin Upitis\n\t * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n\t *\n\t * Three.js integration by zz85 http://twitter.com/blurspline\n\t*/\n\t\n\tTHREE.ShaderLib[ 'sky' ] = {\n\t\n\t\tuniforms: {\n\t\n\t\t\tluminance: { value: 1 },\n\t\t\tturbidity: { value: 2 },\n\t\t\treileigh: { value: 1 },\n\t\t\tmieCoefficient: { value: 0.005 },\n\t\t\tmieDirectionalG: { value: 0.8 },\n\t\t\tsunPosition: { value: new THREE.Vector3() }\n\t\n\t\t},\n\t\n\t\tvertexShader: [\n\t\n\t\t\t\"varying vec3 vWorldPosition;\",\n\t\n\t\t\t\"void main() {\",\n\t\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n\t\t\t\t\"vWorldPosition = worldPosition.xyz;\",\n\t\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\n\t\t\t\"}\",\n\t\n\t\t].join( \"\\n\" ),\n\t\n\t\tfragmentShader: [\n\t\n\t\t\t\"uniform sampler2D skySampler;\",\n\t\t\t\"uniform vec3 sunPosition;\",\n\t\t\t\"varying vec3 vWorldPosition;\",\n\t\n\t\t\t\"vec3 cameraPos = vec3(0., 0., 0.);\",\n\t\t\t\"// uniform sampler2D sDiffuse;\",\n\t\t\t\"// const float turbidity = 10.0; //\",\n\t\t\t\"// const float reileigh = 2.; //\",\n\t\t\t\"// const float luminance = 1.0; //\",\n\t\t\t\"// const float mieCoefficient = 0.005;\",\n\t\t\t\"// const float mieDirectionalG = 0.8;\",\n\t\n\t\t\t\"uniform float luminance;\",\n\t\t\t\"uniform float turbidity;\",\n\t\t\t\"uniform float reileigh;\",\n\t\t\t\"uniform float mieCoefficient;\",\n\t\t\t\"uniform float mieDirectionalG;\",\n\t\n\t\t\t\"// constants for atmospheric scattering\",\n\t\t\t\"const float e = 2.71828182845904523536028747135266249775724709369995957;\",\n\t\t\t\"const float pi = 3.141592653589793238462643383279502884197169;\",\n\t\n\t\t\t\"const float n = 1.0003; // refractive index of air\",\n\t\t\t\"const float N = 2.545E25; // number of molecules per unit volume for air at\",\n\t\t\t\t\t\t\t\t\t\"// 288.15K and 1013mb (sea level -45 celsius)\",\n\t\t\t\"const float pn = 0.035;\t// depolatization factor for standard air\",\n\t\n\t\t\t\"// wavelength of used primaries, according to preetham\",\n\t\t\t\"const vec3 lambda = vec3(680E-9, 550E-9, 450E-9);\",\n\t\n\t\t\t\"// mie stuff\",\n\t\t\t\"// K coefficient for the primaries\",\n\t\t\t\"const vec3 K = vec3(0.686, 0.678, 0.666);\",\n\t\t\t\"const float v = 4.0;\",\n\t\n\t\t\t\"// optical length at zenith for molecules\",\n\t\t\t\"const float rayleighZenithLength = 8.4E3;\",\n\t\t\t\"const float mieZenithLength = 1.25E3;\",\n\t\t\t\"const vec3 up = vec3(0.0, 1.0, 0.0);\",\n\t\n\t\t\t\"const float EE = 1000.0;\",\n\t\t\t\"const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\",\n\t\t\t\"// 66 arc seconds -> degrees, and the cosine of that\",\n\t\n\t\t\t\"// earth shadow hack\",\n\t\t\t\"const float cutoffAngle = pi/1.95;\",\n\t\t\t\"const float steepness = 1.5;\",\n\t\n\t\n\t\t\t\"vec3 totalRayleigh(vec3 lambda)\",\n\t\t\t\"{\",\n\t\t\t\t\"return (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));\",\n\t\t\t\"}\",\n\t\n\t\t\t// see http://blenderartists.org/forum/showthread.php?321110-Shaders-and-Skybox-madness\n\t\t\t\"// A simplied version of the total Reayleigh scattering to works on browsers that use ANGLE\",\n\t\t\t\"vec3 simplifiedRayleigh()\",\n\t\t\t\"{\",\n\t\t\t\t\"return 0.0005 / vec3(94, 40, 18);\",\n\t\t\t\t// return 0.00054532832366 / (3.0 * 2.545E25 * pow(vec3(680E-9, 550E-9, 450E-9), vec3(4.0)) * 6.245);\n\t\t\t\"}\",\n\t\n\t\t\t\"float rayleighPhase(float cosTheta)\",\n\t\t\t\"{\t \",\n\t\t\t\t\"return (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\t\"//\treturn (1.0 / (3.0*pi)) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\t\"//\treturn (3.0 / 4.0) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\t\"}\",\n\t\n\t\t\t\"vec3 totalMie(vec3 lambda, vec3 K, float T)\",\n\t\t\t\"{\",\n\t\t\t\t\"float c = (0.2 * T ) * 10E-18;\",\n\t\t\t\t\"return 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;\",\n\t\t\t\"}\",\n\t\n\t\t\t\"float hgPhase(float cosTheta, float g)\",\n\t\t\t\"{\",\n\t\t\t\t\"return (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));\",\n\t\t\t\"}\",\n\t\n\t\t\t\"float sunIntensity(float zenithAngleCos)\",\n\t\t\t\"{\",\n\t\t\t// This function originally used `exp(n)`, but it returns an incorrect value\n\t\t\t// on Samsung S6 phones. So it has been replaced with the equivalent `pow(e, n)`.\n\t\t\t// See https://github.com/mrdoob/three.js/issues/8382\n\t\t\t\t\"return EE * max(0.0, 1.0 - pow(e, -((cutoffAngle - acos(zenithAngleCos))/steepness)));\",\n\t\t\t\"}\",\n\t\n\t\t\t\"// float logLuminance(vec3 c)\",\n\t\t\t\"// {\",\n\t\t\t\"// \treturn log(c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722);\",\n\t\t\t\"// }\",\n\t\n\t\t\t\"// Filmic ToneMapping http://filmicgames.com/archives/75\",\n\t\t\t\"float A = 0.15;\",\n\t\t\t\"float B = 0.50;\",\n\t\t\t\"float C = 0.10;\",\n\t\t\t\"float D = 0.20;\",\n\t\t\t\"float E = 0.02;\",\n\t\t\t\"float F = 0.30;\",\n\t\t\t\"float W = 1000.0;\",\n\t\n\t\t\t\"vec3 Uncharted2Tonemap(vec3 x)\",\n\t\t\t\"{\",\n\t\t\t   \"return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\",\n\t\t\t\"}\",\n\t\n\t\n\t\t\t\"void main() \",\n\t\t\t\"{\",\n\t\t\t\t\"float sunfade = 1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);\",\n\t\n\t\t\t\t\"// luminance =  1.0 ;// vWorldPosition.y / 450000. + 0.5; //sunPosition.y / 450000. * 1. + 0.5;\",\n\t\n\t\t\t\t \"// gl_FragColor = vec4(sunfade, sunfade, sunfade, 1.0);\",\n\t\n\t\t\t\t\"float reileighCoefficient = reileigh - (1.0* (1.0-sunfade));\",\n\t\n\t\t\t\t\"vec3 sunDirection = normalize(sunPosition);\",\n\t\n\t\t\t\t\"float sunE = sunIntensity(dot(sunDirection, up));\",\n\t\n\t\t\t\t\"// extinction (absorbtion + out scattering) \",\n\t\t\t\t\"// rayleigh coefficients\",\n\t\n\t\t\t\t// \"vec3 betaR = totalRayleigh(lambda) * reileighCoefficient;\",\n\t\t\t\t\"vec3 betaR = simplifiedRayleigh() * reileighCoefficient;\",\n\t\n\t\t\t\t\"// mie coefficients\",\n\t\t\t\t\"vec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;\",\n\t\n\t\t\t\t\"// optical length\",\n\t\t\t\t\"// cutoff angle at 90 to avoid singularity in next formula.\",\n\t\t\t\t\"float zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPos))));\",\n\t\t\t\t\"float sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\",\n\t\t\t\t\"float sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\",\n\t\n\t\n\t\n\t\t\t\t\"// combined extinction factor\t\",\n\t\t\t\t\"vec3 Fex = exp(-(betaR * sR + betaM * sM));\",\n\t\n\t\t\t\t\"// in scattering\",\n\t\t\t\t\"float cosTheta = dot(normalize(vWorldPosition - cameraPos), sunDirection);\",\n\t\n\t\t\t\t\"float rPhase = rayleighPhase(cosTheta*0.5+0.5);\",\n\t\t\t\t\"vec3 betaRTheta = betaR * rPhase;\",\n\t\n\t\t\t\t\"float mPhase = hgPhase(cosTheta, mieDirectionalG);\",\n\t\t\t\t\"vec3 betaMTheta = betaM * mPhase;\",\n\t\n\t\n\t\t\t\t\"vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));\",\n\t\t\t\t\"Lin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up, sunDirection),5.0),0.0,1.0));\",\n\t\n\t\t\t\t\"//nightsky\",\n\t\t\t\t\"vec3 direction = normalize(vWorldPosition - cameraPos);\",\n\t\t\t\t\"float theta = acos(direction.y); // elevation --> y-axis, [-pi/2, pi/2]\",\n\t\t\t\t\"float phi = atan(direction.z, direction.x); // azimuth --> x-axis [-pi/2, pi/2]\",\n\t\t\t\t\"vec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);\",\n\t\t\t\t\"// vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;\",\n\t\t\t\t\"vec3 L0 = vec3(0.1) * Fex;\",\n\t\n\t\t\t\t\"// composition + solar disc\",\n\t\t\t\t\"//if (cosTheta > sunAngularDiameterCos)\",\n\t\t\t\t\"float sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);\",\n\t\t\t\t\"// if (normalize(vWorldPosition - cameraPos).y>0.0)\",\n\t\t\t\t\"L0 += (sunE * 19000.0 * Fex)*sundisk;\",\n\t\n\t\n\t\t\t\t\"vec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));\",\n\t\n\t\t\t\t\"vec3 texColor = (Lin+L0);   \",\n\t\t\t\t\"texColor *= 0.04 ;\",\n\t\t\t\t\"texColor += vec3(0.0,0.001,0.0025)*0.3;\",\n\t\n\t\t\t\t\"float g_fMaxLuminance = 1.0;\",\n\t\t\t\t\"float fLumScaled = 0.1 / luminance;     \",\n\t\t\t\t\"float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (g_fMaxLuminance * g_fMaxLuminance)))) / (1.0 + fLumScaled); \",\n\t\n\t\t\t\t\"float ExposureBias = fLumCompressed;\",\n\t\n\t\t\t\t\"vec3 curr = Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);\",\n\t\t\t\t\"vec3 color = curr*whiteScale;\",\n\t\n\t\t\t\t\"vec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));\",\n\t\n\t\n\t\t\t\t\"gl_FragColor.rgb = retColor;\",\n\t\n\t\t\t\t\"gl_FragColor.a = 1.0;\",\n\t\t\t\"}\",\n\t\n\t\t].join( \"\\n\" )\n\t\n\t};\n\t\n\tTHREE.Sky = function () {\n\t\n\t\tvar skyShader = THREE.ShaderLib[ \"sky\" ];\n\t\tvar skyUniforms = THREE.UniformsUtils.clone( skyShader.uniforms );\n\t\n\t\tvar skyMat = new THREE.ShaderMaterial( {\n\t\t\tfragmentShader: skyShader.fragmentShader,\n\t\t\tvertexShader: skyShader.vertexShader,\n\t\t\tuniforms: skyUniforms,\n\t\t\tside: THREE.BackSide\n\t\t} );\n\t\n\t\tvar skyGeo = new THREE.SphereBufferGeometry( 450000, 32, 15 );\n\t\tvar skyMesh = new THREE.Mesh( skyGeo, skyMat );\n\t\n\t\n\t\t// Expose variables\n\t\tthis.mesh = skyMesh;\n\t\tthis.uniforms = skyUniforms;\n\t\n\t};\n\t\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar assign        = __webpack_require__(50)\n\t  , normalizeOpts = __webpack_require__(48)\n\t  , isCallable    = __webpack_require__(49)\n\t  , contains      = __webpack_require__(51)\n\t\n\t  , d;\n\t\n\td = module.exports = function (dscr, value/*, options*/) {\n\t\tvar c, e, w, options, desc;\n\t\tif ((arguments.length < 2) || (typeof dscr !== 'string')) {\n\t\t\toptions = value;\n\t\t\tvalue = dscr;\n\t\t\tdscr = null;\n\t\t} else {\n\t\t\toptions = arguments[2];\n\t\t}\n\t\tif (dscr == null) {\n\t\t\tc = w = true;\n\t\t\te = false;\n\t\t} else {\n\t\t\tc = contains.call(dscr, 'c');\n\t\t\te = contains.call(dscr, 'e');\n\t\t\tw = contains.call(dscr, 'w');\n\t\t}\n\t\n\t\tdesc = { value: value, configurable: c, enumerable: e, writable: w };\n\t\treturn !options ? desc : assign(normalizeOpts(options), desc);\n\t};\n\t\n\td.gs = function (dscr, get, set/*, options*/) {\n\t\tvar c, e, options, desc;\n\t\tif (typeof dscr !== 'string') {\n\t\t\toptions = set;\n\t\t\tset = get;\n\t\t\tget = dscr;\n\t\t\tdscr = null;\n\t\t} else {\n\t\t\toptions = arguments[3];\n\t\t}\n\t\tif (get == null) {\n\t\t\tget = undefined;\n\t\t} else if (!isCallable(get)) {\n\t\t\toptions = get;\n\t\t\tget = set = undefined;\n\t\t} else if (set == null) {\n\t\t\tset = undefined;\n\t\t} else if (!isCallable(set)) {\n\t\t\toptions = set;\n\t\t\tset = undefined;\n\t\t}\n\t\tif (dscr == null) {\n\t\t\tc = true;\n\t\t\te = false;\n\t\t} else {\n\t\t\tc = contains.call(dscr, 'c');\n\t\t\te = contains.call(dscr, 'e');\n\t\t}\n\t\n\t\tdesc = { get: get, set: set, configurable: c, enumerable: e };\n\t\treturn !options ? desc : assign(normalizeOpts(options), desc);\n\t};\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = function (fn) {\n\t\tif (typeof fn !== 'function') throw new TypeError(fn + \" is not a function\");\n\t\treturn fn;\n\t};\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.2.0 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar baseCopy = __webpack_require__(56),\n\t    keys = __webpack_require__(43);\n\t\n\t/**\n\t * The base implementation of `_.assign` without support for argument juggling,\n\t * multiple sources, and `customizer` functions.\n\t *\n\t * @private\n\t * @param {Object} object The destination object.\n\t * @param {Object} source The source object.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction baseAssign(object, source) {\n\t  return source == null\n\t    ? object\n\t    : baseCopy(source, keys(source), object);\n\t}\n\t\n\tmodule.exports = baseAssign;\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.1.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar bindCallback = __webpack_require__(57),\n\t    isIterateeCall = __webpack_require__(58),\n\t    restParam = __webpack_require__(59);\n\t\n\t/**\n\t * Creates a function that assigns properties of source object(s) to a given\n\t * destination object.\n\t *\n\t * **Note:** This function is used to create `_.assign`, `_.defaults`, and `_.merge`.\n\t *\n\t * @private\n\t * @param {Function} assigner The function to assign values.\n\t * @returns {Function} Returns the new assigner function.\n\t */\n\tfunction createAssigner(assigner) {\n\t  return restParam(function(object, sources) {\n\t    var index = -1,\n\t        length = object == null ? 0 : sources.length,\n\t        customizer = length > 2 ? sources[length - 2] : undefined,\n\t        guard = length > 2 ? sources[2] : undefined,\n\t        thisArg = length > 1 ? sources[length - 1] : undefined;\n\t\n\t    if (typeof customizer == 'function') {\n\t      customizer = bindCallback(customizer, thisArg, 5);\n\t      length -= 2;\n\t    } else {\n\t      customizer = typeof thisArg == 'function' ? thisArg : undefined;\n\t      length -= (customizer ? 1 : 0);\n\t    }\n\t    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n\t      customizer = length < 3 ? undefined : customizer;\n\t      length = 1;\n\t    }\n\t    while (++index < length) {\n\t      var source = sources[index];\n\t      if (source) {\n\t        assigner(object, source, customizer);\n\t      }\n\t    }\n\t    return object;\n\t  });\n\t}\n\t\n\tmodule.exports = createAssigner;\n\n\n/***/ },\n/* 43 */\n[70, 60, 61, 62],\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar keys = __webpack_require__(63);\n\t\n\t/**\n\t * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n\t * of an array-like value.\n\t */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/**\n\t * The base implementation of `_.forEach` without support for callback\n\t * shorthands and `this` binding.\n\t *\n\t * @private\n\t * @param {Array|Object|string} collection The collection to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Array|Object|string} Returns `collection`.\n\t */\n\tvar baseEach = createBaseEach(baseForOwn);\n\t\n\t/**\n\t * The base implementation of `baseForIn` and `baseForOwn` which iterates\n\t * over `object` properties returned by `keysFunc` invoking `iteratee` for\n\t * each property. Iteratee functions may exit iteration early by explicitly\n\t * returning `false`.\n\t *\n\t * @private\n\t * @param {Object} object The object to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @param {Function} keysFunc The function to get the keys of `object`.\n\t * @returns {Object} Returns `object`.\n\t */\n\tvar baseFor = createBaseFor();\n\t\n\t/**\n\t * The base implementation of `_.forOwn` without support for callback\n\t * shorthands and `this` binding.\n\t *\n\t * @private\n\t * @param {Object} object The object to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction baseForOwn(object, iteratee) {\n\t  return baseFor(object, iteratee, keys);\n\t}\n\t\n\t/**\n\t * The base implementation of `_.property` without support for deep paths.\n\t *\n\t * @private\n\t * @param {string} key The key of the property to get.\n\t * @returns {Function} Returns the new function.\n\t */\n\tfunction baseProperty(key) {\n\t  return function(object) {\n\t    return object == null ? undefined : object[key];\n\t  };\n\t}\n\t\n\t/**\n\t * Creates a `baseEach` or `baseEachRight` function.\n\t *\n\t * @private\n\t * @param {Function} eachFunc The function to iterate over a collection.\n\t * @param {boolean} [fromRight] Specify iterating from right to left.\n\t * @returns {Function} Returns the new base function.\n\t */\n\tfunction createBaseEach(eachFunc, fromRight) {\n\t  return function(collection, iteratee) {\n\t    var length = collection ? getLength(collection) : 0;\n\t    if (!isLength(length)) {\n\t      return eachFunc(collection, iteratee);\n\t    }\n\t    var index = fromRight ? length : -1,\n\t        iterable = toObject(collection);\n\t\n\t    while ((fromRight ? index-- : ++index < length)) {\n\t      if (iteratee(iterable[index], index, iterable) === false) {\n\t        break;\n\t      }\n\t    }\n\t    return collection;\n\t  };\n\t}\n\t\n\t/**\n\t * Creates a base function for `_.forIn` or `_.forInRight`.\n\t *\n\t * @private\n\t * @param {boolean} [fromRight] Specify iterating from right to left.\n\t * @returns {Function} Returns the new base function.\n\t */\n\tfunction createBaseFor(fromRight) {\n\t  return function(object, iteratee, keysFunc) {\n\t    var iterable = toObject(object),\n\t        props = keysFunc(object),\n\t        length = props.length,\n\t        index = fromRight ? length : -1;\n\t\n\t    while ((fromRight ? index-- : ++index < length)) {\n\t      var key = props[index];\n\t      if (iteratee(iterable[key], key, iterable) === false) {\n\t        break;\n\t      }\n\t    }\n\t    return object;\n\t  };\n\t}\n\t\n\t/**\n\t * Gets the \"length\" property value of `object`.\n\t *\n\t * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n\t * that affects Safari on at least iOS 8.1-8.3 ARM64.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {*} Returns the \"length\" value.\n\t */\n\tvar getLength = baseProperty('length');\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * Converts `value` to an object if it's not one.\n\t *\n\t * @private\n\t * @param {*} value The value to process.\n\t * @returns {Object} Returns the object.\n\t */\n\tfunction toObject(value) {\n\t  return isObject(value) ? value : Object(value);\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\tmodule.exports = baseEach;\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.0 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/**\n\t * A specialized version of `_.forEach` for arrays without support for callback\n\t * shorthands or `this` binding.\n\t *\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Array} Returns `array`.\n\t */\n\tfunction arrayEach(array, iteratee) {\n\t  var index = -1,\n\t      length = array.length;\n\t\n\t  while (++index < length) {\n\t    if (iteratee(array[index], index, array) === false) {\n\t      break;\n\t    }\n\t  }\n\t  return array;\n\t}\n\t\n\tmodule.exports = arrayEach;\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/**\n\t * A specialized version of `baseCallback` which only supports `this` binding\n\t * and specifying the number of arguments to provide to `func`.\n\t *\n\t * @private\n\t * @param {Function} func The function to bind.\n\t * @param {*} thisArg The `this` binding of `func`.\n\t * @param {number} [argCount] The number of arguments to provide to `func`.\n\t * @returns {Function} Returns the callback.\n\t */\n\tfunction bindCallback(func, thisArg, argCount) {\n\t  if (typeof func != 'function') {\n\t    return identity;\n\t  }\n\t  if (thisArg === undefined) {\n\t    return func;\n\t  }\n\t  switch (argCount) {\n\t    case 1: return function(value) {\n\t      return func.call(thisArg, value);\n\t    };\n\t    case 3: return function(value, index, collection) {\n\t      return func.call(thisArg, value, index, collection);\n\t    };\n\t    case 4: return function(accumulator, value, index, collection) {\n\t      return func.call(thisArg, accumulator, value, index, collection);\n\t    };\n\t    case 5: return function(value, other, key, object, source) {\n\t      return func.call(thisArg, value, other, key, object, source);\n\t    };\n\t  }\n\t  return function() {\n\t    return func.apply(thisArg, arguments);\n\t  };\n\t}\n\t\n\t/**\n\t * This method returns the first argument provided to it.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Utility\n\t * @param {*} value Any value.\n\t * @returns {*} Returns `value`.\n\t * @example\n\t *\n\t * var object = { 'user': 'fred' };\n\t *\n\t * _.identity(object) === object;\n\t * // => true\n\t */\n\tfunction identity(value) {\n\t  return value;\n\t}\n\t\n\tmodule.exports = bindCallback;\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/** `Object#toString` result references. */\n\tvar arrayTag = '[object Array]',\n\t    funcTag = '[object Function]';\n\t\n\t/** Used to detect host constructors (Safari > 5). */\n\tvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\t\n\t/**\n\t * Checks if `value` is object-like.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\t\n\t/** Used for native method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/** Used to resolve the decompiled source of functions. */\n\tvar fnToString = Function.prototype.toString;\n\t\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t/**\n\t * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objToString = objectProto.toString;\n\t\n\t/** Used to detect if a method is native. */\n\tvar reIsNative = RegExp('^' +\n\t  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n\t  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n\t);\n\t\n\t/* Native method references for those with the same name as other `lodash` methods. */\n\tvar nativeIsArray = getNative(Array, 'isArray');\n\t\n\t/**\n\t * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n\t * of an array-like value.\n\t */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/**\n\t * Gets the native function at `key` of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {string} key The key of the method to get.\n\t * @returns {*} Returns the function if it's native, else `undefined`.\n\t */\n\tfunction getNative(object, key) {\n\t  var value = object == null ? undefined : object[key];\n\t  return isNative(value) ? value : undefined;\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as an `Array` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n\t * @example\n\t *\n\t * _.isArray([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArray(function() { return arguments; }());\n\t * // => false\n\t */\n\tvar isArray = nativeIsArray || function(value) {\n\t  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;\n\t};\n\t\n\t/**\n\t * Checks if `value` is classified as a `Function` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n\t * @example\n\t *\n\t * _.isFunction(_);\n\t * // => true\n\t *\n\t * _.isFunction(/abc/);\n\t * // => false\n\t */\n\tfunction isFunction(value) {\n\t  // The use of `Object#toString` avoids issues with the `typeof` operator\n\t  // in older versions of Chrome and Safari which return 'function' for regexes\n\t  // and Safari 8 equivalents which return 'object' for typed array constructors.\n\t  return isObject(value) && objToString.call(value) == funcTag;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Checks if `value` is a native function.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n\t * @example\n\t *\n\t * _.isNative(Array.prototype.push);\n\t * // => true\n\t *\n\t * _.isNative(_);\n\t * // => false\n\t */\n\tfunction isNative(value) {\n\t  if (value == null) {\n\t    return false;\n\t  }\n\t  if (isFunction(value)) {\n\t    return reIsNative.test(fnToString.call(value));\n\t  }\n\t  return isObjectLike(value) && reIsHostCtor.test(value);\n\t}\n\t\n\tmodule.exports = isArray;\n\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar forEach = Array.prototype.forEach, create = Object.create;\n\t\n\tvar process = function (src, obj) {\n\t\tvar key;\n\t\tfor (key in src) obj[key] = src[key];\n\t};\n\t\n\tmodule.exports = function (options/*, …options*/) {\n\t\tvar result = create(null);\n\t\tforEach.call(arguments, function (options) {\n\t\t\tif (options == null) return;\n\t\t\tprocess(Object(options), result);\n\t\t});\n\t\treturn result;\n\t};\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Deprecated\n\t\n\t'use strict';\n\t\n\tmodule.exports = function (obj) { return typeof obj === 'function'; };\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(52)()\n\t\t? Object.assign\n\t\t: __webpack_require__(53);\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(54)()\n\t\t? String.prototype.contains\n\t\t: __webpack_require__(55);\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = function () {\n\t\tvar assign = Object.assign, obj;\n\t\tif (typeof assign !== 'function') return false;\n\t\tobj = { foo: 'raz' };\n\t\tassign(obj, { bar: 'dwa' }, { trzy: 'trzy' });\n\t\treturn (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';\n\t};\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar keys  = __webpack_require__(65)\n\t  , value = __webpack_require__(64)\n\t\n\t  , max = Math.max;\n\t\n\tmodule.exports = function (dest, src/*, …srcn*/) {\n\t\tvar error, i, l = max(arguments.length, 2), assign;\n\t\tdest = Object(value(dest));\n\t\tassign = function (key) {\n\t\t\ttry { dest[key] = src[key]; } catch (e) {\n\t\t\t\tif (!error) error = e;\n\t\t\t}\n\t\t};\n\t\tfor (i = 1; i < l; ++i) {\n\t\t\tsrc = arguments[i];\n\t\t\tkeys(src).forEach(assign);\n\t\t}\n\t\tif (error !== undefined) throw error;\n\t\treturn dest;\n\t};\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar str = 'razdwatrzy';\n\t\n\tmodule.exports = function () {\n\t\tif (typeof str.contains !== 'function') return false;\n\t\treturn ((str.contains('dwa') === true) && (str.contains('foo') === false));\n\t};\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar indexOf = String.prototype.indexOf;\n\t\n\tmodule.exports = function (searchString/*, position*/) {\n\t\treturn indexOf.call(this, searchString, arguments[1]) > -1;\n\t};\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/**\n\t * Copies properties of `source` to `object`.\n\t *\n\t * @private\n\t * @param {Object} source The object to copy properties from.\n\t * @param {Array} props The property names to copy.\n\t * @param {Object} [object={}] The object to copy properties to.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction baseCopy(source, props, object) {\n\t  object || (object = {});\n\t\n\t  var index = -1,\n\t      length = props.length;\n\t\n\t  while (++index < length) {\n\t    var key = props[index];\n\t    object[key] = source[key];\n\t  }\n\t  return object;\n\t}\n\t\n\tmodule.exports = baseCopy;\n\n\n/***/ },\n/* 57 */\n46,\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.0.9 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/** Used to detect unsigned integer values. */\n\tvar reIsUint = /^\\d+$/;\n\t\n\t/**\n\t * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n\t * of an array-like value.\n\t */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/**\n\t * The base implementation of `_.property` without support for deep paths.\n\t *\n\t * @private\n\t * @param {string} key The key of the property to get.\n\t * @returns {Function} Returns the new function.\n\t */\n\tfunction baseProperty(key) {\n\t  return function(object) {\n\t    return object == null ? undefined : object[key];\n\t  };\n\t}\n\t\n\t/**\n\t * Gets the \"length\" property value of `object`.\n\t *\n\t * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n\t * that affects Safari on at least iOS 8.1-8.3 ARM64.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {*} Returns the \"length\" value.\n\t */\n\tvar getLength = baseProperty('length');\n\t\n\t/**\n\t * Checks if `value` is array-like.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t */\n\tfunction isArrayLike(value) {\n\t  return value != null && isLength(getLength(value));\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like index.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n\t * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n\t */\n\tfunction isIndex(value, length) {\n\t  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n\t  length = length == null ? MAX_SAFE_INTEGER : length;\n\t  return value > -1 && value % 1 == 0 && value < length;\n\t}\n\t\n\t/**\n\t * Checks if the provided arguments are from an iteratee call.\n\t *\n\t * @private\n\t * @param {*} value The potential iteratee value argument.\n\t * @param {*} index The potential iteratee index or key argument.\n\t * @param {*} object The potential iteratee object argument.\n\t * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.\n\t */\n\tfunction isIterateeCall(value, index, object) {\n\t  if (!isObject(object)) {\n\t    return false;\n\t  }\n\t  var type = typeof index;\n\t  if (type == 'number'\n\t      ? (isArrayLike(object) && isIndex(index, object.length))\n\t      : (type == 'string' && index in object)) {\n\t    var other = object[index];\n\t    return value === value ? (value === other) : (other !== other);\n\t  }\n\t  return false;\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\tmodule.exports = isIterateeCall;\n\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.6.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/** Used as the `TypeError` message for \"Functions\" methods. */\n\tvar FUNC_ERROR_TEXT = 'Expected a function';\n\t\n\t/* Native method references for those with the same name as other `lodash` methods. */\n\tvar nativeMax = Math.max;\n\t\n\t/**\n\t * Creates a function that invokes `func` with the `this` binding of the\n\t * created function and arguments from `start` and beyond provided as an array.\n\t *\n\t * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Function\n\t * @param {Function} func The function to apply a rest parameter to.\n\t * @param {number} [start=func.length-1] The start position of the rest parameter.\n\t * @returns {Function} Returns the new function.\n\t * @example\n\t *\n\t * var say = _.restParam(function(what, names) {\n\t *   return what + ' ' + _.initial(names).join(', ') +\n\t *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n\t * });\n\t *\n\t * say('hello', 'fred', 'barney', 'pebbles');\n\t * // => 'hello fred, barney, & pebbles'\n\t */\n\tfunction restParam(func, start) {\n\t  if (typeof func != 'function') {\n\t    throw new TypeError(FUNC_ERROR_TEXT);\n\t  }\n\t  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);\n\t  return function() {\n\t    var args = arguments,\n\t        index = -1,\n\t        length = nativeMax(args.length - start, 0),\n\t        rest = Array(length);\n\t\n\t    while (++index < length) {\n\t      rest[index] = args[start + index];\n\t    }\n\t    switch (start) {\n\t      case 0: return func.call(this, rest);\n\t      case 1: return func.call(this, args[0], rest);\n\t      case 2: return func.call(this, args[0], args[1], rest);\n\t    }\n\t    var otherArgs = Array(start + 1);\n\t    index = -1;\n\t    while (++index < start) {\n\t      otherArgs[index] = args[index];\n\t    }\n\t    otherArgs[start] = rest;\n\t    return func.apply(this, otherArgs);\n\t  };\n\t}\n\t\n\tmodule.exports = restParam;\n\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash 3.9.1 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\t\n\t/** `Object#toString` result references. */\n\tvar funcTag = '[object Function]';\n\t\n\t/** Used to detect host constructors (Safari > 5). */\n\tvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\t\n\t/**\n\t * Checks if `value` is object-like.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\t\n\t/** Used for native method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/** Used to resolve the decompiled source of functions. */\n\tvar fnToString = Function.prototype.toString;\n\t\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t/**\n\t * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objToString = objectProto.toString;\n\t\n\t/** Used to detect if a method is native. */\n\tvar reIsNative = RegExp('^' +\n\t  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n\t  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n\t);\n\t\n\t/**\n\t * Gets the native function at `key` of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @param {string} key The key of the method to get.\n\t * @returns {*} Returns the function if it's native, else `undefined`.\n\t */\n\tfunction getNative(object, key) {\n\t  var value = object == null ? undefined : object[key];\n\t  return isNative(value) ? value : undefined;\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as a `Function` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n\t * @example\n\t *\n\t * _.isFunction(_);\n\t * // => true\n\t *\n\t * _.isFunction(/abc/);\n\t * // => false\n\t */\n\tfunction isFunction(value) {\n\t  // The use of `Object#toString` avoids issues with the `typeof` operator\n\t  // in older versions of Chrome and Safari which return 'function' for regexes\n\t  // and Safari 8 equivalents which return 'object' for typed array constructors.\n\t  return isObject(value) && objToString.call(value) == funcTag;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Checks if `value` is a native function.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n\t * @example\n\t *\n\t * _.isNative(Array.prototype.push);\n\t * // => true\n\t *\n\t * _.isNative(_);\n\t * // => false\n\t */\n\tfunction isNative(value) {\n\t  if (value == null) {\n\t    return false;\n\t  }\n\t  if (isFunction(value)) {\n\t    return reIsNative.test(fnToString.call(value));\n\t  }\n\t  return isObjectLike(value) && reIsHostCtor.test(value);\n\t}\n\t\n\tmodule.exports = getNative;\n\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * lodash (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modularize exports=\"npm\" -o ./`\n\t * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n\t * Released under MIT license <https://lodash.com/license>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t */\n\t\n\t/** Used as references for various `Number` constants. */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/** `Object#toString` result references. */\n\tvar argsTag = '[object Arguments]',\n\t    funcTag = '[object Function]',\n\t    genTag = '[object GeneratorFunction]';\n\t\n\t/** Used for built-in method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t/**\n\t * Used to resolve the\n\t * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objectToString = objectProto.toString;\n\t\n\t/** Built-in value references. */\n\tvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\t\n\t/**\n\t * Checks if `value` is likely an `arguments` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n\t *  else `false`.\n\t * @example\n\t *\n\t * _.isArguments(function() { return arguments; }());\n\t * // => true\n\t *\n\t * _.isArguments([1, 2, 3]);\n\t * // => false\n\t */\n\tfunction isArguments(value) {\n\t  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n\t  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n\t    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n\t}\n\t\n\t/**\n\t * Checks if `value` is array-like. A value is considered array-like if it's\n\t * not a function and has a `value.length` that's an integer greater than or\n\t * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t * @example\n\t *\n\t * _.isArrayLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArrayLike(document.body.children);\n\t * // => true\n\t *\n\t * _.isArrayLike('abc');\n\t * // => true\n\t *\n\t * _.isArrayLike(_.noop);\n\t * // => false\n\t */\n\tfunction isArrayLike(value) {\n\t  return value != null && isLength(value.length) && !isFunction(value);\n\t}\n\t\n\t/**\n\t * This method is like `_.isArrayLike` except that it also checks if `value`\n\t * is an object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an array-like object,\n\t *  else `false`.\n\t * @example\n\t *\n\t * _.isArrayLikeObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArrayLikeObject(document.body.children);\n\t * // => true\n\t *\n\t * _.isArrayLikeObject('abc');\n\t * // => false\n\t *\n\t * _.isArrayLikeObject(_.noop);\n\t * // => false\n\t */\n\tfunction isArrayLikeObject(value) {\n\t  return isObjectLike(value) && isArrayLike(value);\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as a `Function` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n\t * @example\n\t *\n\t * _.isFunction(_);\n\t * // => true\n\t *\n\t * _.isFunction(/abc/);\n\t * // => false\n\t */\n\tfunction isFunction(value) {\n\t  // The use of `Object#toString` avoids issues with the `typeof` operator\n\t  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n\t  var tag = isObject(value) ? objectToString.call(value) : '';\n\t  return tag == funcTag || tag == genTag;\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This method is loosely based on\n\t * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t * @example\n\t *\n\t * _.isLength(3);\n\t * // => true\n\t *\n\t * _.isLength(Number.MIN_VALUE);\n\t * // => false\n\t *\n\t * _.isLength(Infinity);\n\t * // => false\n\t *\n\t * _.isLength('3');\n\t * // => false\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' &&\n\t    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the\n\t * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n\t * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(_.noop);\n\t * // => true\n\t *\n\t * _.isObject(null);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Checks if `value` is object-like. A value is object-like if it's not `null`\n\t * and has a `typeof` result of \"object\".\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t * @example\n\t *\n\t * _.isObjectLike({});\n\t * // => true\n\t *\n\t * _.isObjectLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObjectLike(_.noop);\n\t * // => false\n\t *\n\t * _.isObjectLike(null);\n\t * // => false\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\t\n\tmodule.exports = isArguments;\n\n\n/***/ },\n/* 62 */\n47,\n/* 63 */\n[70, 68, 69, 47],\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = function (value) {\n\t\tif (value == null) throw new TypeError(\"Cannot use null or undefined\");\n\t\treturn value;\n\t};\n\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(66)()\n\t\t? Object.keys\n\t\t: __webpack_require__(67);\n\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = function () {\n\t\ttry {\n\t\t\tObject.keys('primitive');\n\t\t\treturn true;\n\t\t} catch (e) { return false; }\n\t};\n\n\n/***/ },\n/* 67 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar keys = Object.keys;\n\t\n\tmodule.exports = function (object) {\n\t\treturn keys(object == null ? object : Object(object));\n\t};\n\n\n/***/ },\n/* 68 */\n60,\n/* 69 */\n61,\n/* 70 */\n/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {\n\n\t/**\n\t * lodash 3.1.2 (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modern modularize exports=\"npm\" -o ./`\n\t * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t * Available under MIT license <https://lodash.com/license>\n\t */\n\tvar getNative = __webpack_require__(__webpack_module_template_argument_0__),\n\t    isArguments = __webpack_require__(__webpack_module_template_argument_1__),\n\t    isArray = __webpack_require__(__webpack_module_template_argument_2__);\n\t\n\t/** Used to detect unsigned integer values. */\n\tvar reIsUint = /^\\d+$/;\n\t\n\t/** Used for native method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t/* Native method references for those with the same name as other `lodash` methods. */\n\tvar nativeKeys = getNative(Object, 'keys');\n\t\n\t/**\n\t * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n\t * of an array-like value.\n\t */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/**\n\t * The base implementation of `_.property` without support for deep paths.\n\t *\n\t * @private\n\t * @param {string} key The key of the property to get.\n\t * @returns {Function} Returns the new function.\n\t */\n\tfunction baseProperty(key) {\n\t  return function(object) {\n\t    return object == null ? undefined : object[key];\n\t  };\n\t}\n\t\n\t/**\n\t * Gets the \"length\" property value of `object`.\n\t *\n\t * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n\t * that affects Safari on at least iOS 8.1-8.3 ARM64.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {*} Returns the \"length\" value.\n\t */\n\tvar getLength = baseProperty('length');\n\t\n\t/**\n\t * Checks if `value` is array-like.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t */\n\tfunction isArrayLike(value) {\n\t  return value != null && isLength(getLength(value));\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like index.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n\t * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n\t */\n\tfunction isIndex(value, length) {\n\t  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n\t  length = length == null ? MAX_SAFE_INTEGER : length;\n\t  return value > -1 && value % 1 == 0 && value < length;\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * A fallback implementation of `Object.keys` which creates an array of the\n\t * own enumerable property names of `object`.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t */\n\tfunction shimKeys(object) {\n\t  var props = keysIn(object),\n\t      propsLength = props.length,\n\t      length = propsLength && object.length;\n\t\n\t  var allowIndexes = !!length && isLength(length) &&\n\t    (isArray(object) || isArguments(object));\n\t\n\t  var index = -1,\n\t      result = [];\n\t\n\t  while (++index < propsLength) {\n\t    var key = props[index];\n\t    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {\n\t      result.push(key);\n\t    }\n\t  }\n\t  return result;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n\t * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(1);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  // Avoid a V8 JIT bug in Chrome 19-20.\n\t  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Creates an array of the own enumerable property names of `object`.\n\t *\n\t * **Note:** Non-object values are coerced to objects. See the\n\t * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n\t * for more details.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Object\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t * @example\n\t *\n\t * function Foo() {\n\t *   this.a = 1;\n\t *   this.b = 2;\n\t * }\n\t *\n\t * Foo.prototype.c = 3;\n\t *\n\t * _.keys(new Foo);\n\t * // => ['a', 'b'] (iteration order is not guaranteed)\n\t *\n\t * _.keys('hi');\n\t * // => ['0', '1']\n\t */\n\tvar keys = !nativeKeys ? shimKeys : function(object) {\n\t  var Ctor = object == null ? undefined : object.constructor;\n\t  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||\n\t      (typeof object != 'function' && isArrayLike(object))) {\n\t    return shimKeys(object);\n\t  }\n\t  return isObject(object) ? nativeKeys(object) : [];\n\t};\n\t\n\t/**\n\t * Creates an array of the own and inherited enumerable property names of `object`.\n\t *\n\t * **Note:** Non-object values are coerced to objects.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @category Object\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t * @example\n\t *\n\t * function Foo() {\n\t *   this.a = 1;\n\t *   this.b = 2;\n\t * }\n\t *\n\t * Foo.prototype.c = 3;\n\t *\n\t * _.keysIn(new Foo);\n\t * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n\t */\n\tfunction keysIn(object) {\n\t  if (object == null) {\n\t    return [];\n\t  }\n\t  if (!isObject(object)) {\n\t    object = Object(object);\n\t  }\n\t  var length = object.length;\n\t  length = (length && isLength(length) &&\n\t    (isArray(object) || isArguments(object)) && length) || 0;\n\t\n\t  var Ctor = object.constructor,\n\t      index = -1,\n\t      isProto = typeof Ctor == 'function' && Ctor.prototype === object,\n\t      result = Array(length),\n\t      skipIndexes = length > 0;\n\t\n\t  while (++index < length) {\n\t    result[index] = (index + '');\n\t  }\n\t  for (var key in object) {\n\t    if (!(skipIndexes && isIndex(key, length)) &&\n\t        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n\t      result.push(key);\n\t    }\n\t  }\n\t  return result;\n\t}\n\t\n\tmodule.exports = keys;\n\n\n/***/ }\n/******/ ])))\n\n\n/** WEBPACK FOOTER **\n ** vr.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d90f45d9c081d9fe9fc5\n **/","(function () {\n\t'use strict';\n\n\t//global-ish declarations\n\tvar VR,\n\t\tNoSleep = require('nosleep').NoSleep,\n\t\tisMobile = require('ismobilejs');\n\n\tfunction initRequirements() {\n\t\t//load styles\n\t\trequire('!style!css!./css/style.css');\n\n\t\tVR = require('./vr');\n\t}\n\n\tfunction initialize() {\n\t\tinitRequirements();\n\n\t\t//todo: set up button/info elements\n\n//\t\tVR.init();\n\n        VR.noSleep = new NoSleep();\n\t\twindow.addEventListener('resize', VR.resize, false);\n\n\t\tif (!isMobile.any) {\n\t\t\tVR.disableOrientation();\n\t\t}\n\n\t\t/*\n\t\texport global things\n\t\t*/\n\t\twindow.VR = VR;\n\t\twindow.THREE = VR.THREE;\n\t}\n\n\tinitialize();\n//\tVR.start();\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/entry.js\n ** module id = 0\n ** module chunks = 0\n **/","(function () {\n\t'use strict';\n\n\t//constants\n\tvar NEAR = 1,\n\t\tFAR = 1000000,\n\n\t//global-ish declarations\n\t\tTHREE,\n\t\teventEmitter,\n\t\tmaterials = require('./materials'),\n\t\tnop = function () {},\n\t\trequestFullscreen = nop,\n\t\texitFullscreen = (\n\t\t\tdocument.exitFullscreen ||\n\t\t\tdocument.mozCancelFullScreen ||\n\t\t\tdocument.webkitExitFullscreen ||\n\t\t\tdocument.msExitFullscreen ||\n\t\t\tnop\n\t\t).bind(document),\n\t// Const\n\t\tMODE_CSS = 'css3d',\n\t\tMODE_CANVAS = 'canvas',\n\n\t//scene assets\n\t\tcamera,\n\t\tscene,\n\t\tbody,\n\t\trenderer,\n\t\taudioListener,\n\t\tvrControls,\n\t\tvrEffect,\n\t\tmouseControls,\n        autoRotateTimer = null,\n\t\traycaster,\n\t\ttarget,\n\n\t\tbodyWrapper,\n\t\tcameraWrapper,\n\n\t\tfloor,\n\n\t//state\n\t\tgoing = false,\n\t\tvrMode = false,\n\t\torientationEnabled,\n\t\torientationPossible = false,\n\n\t//exported object\n\t\tVR,\n\n\t\tVRObject = require('./vr-object'),\n\t\tobjectMethods = [\n\t\t\t'box',\n\t\t\t'cylinder',\n\t\t\t'torus',\n\t\t\t'sphere',\n\t\t\t'empty',\n\t\t\t'sound',\n\t\t\t'floor',\n\t\t\t'sky',\n\t\t\t'panorama',\n\t\t\t'image',\n\t\t\t'video',\n\t\t\t'text',\n\t\t\t'grid'\n\t\t],\n\n\t\t//todo: use a weak map or set instead\n\t\tvrObjects = [],\n\t\traycastable = [],\n\n\t\tlastTick = 0,\n        waitRenderInative = 0,\n\t\tanimationCallbacks = [];\n\n    var isSupportWebgl = (function () {\n        var canvas = document.createElement('canvas');\n        var gl = null;\n        var experimental = false;\n        try {\n            gl = canvas.getContext('webgl');\n        } catch (x) {\n            gl = null;\n        }\n\n        if (gl === null) {\n            try {\n                gl = canvas.getContext('experimental-webgl');\n                experimental = true;\n            } catch (x) {\n                gl = null;\n            }\n        }\n        return Boolean(gl);\n    })();\n\n    window.isSupportWebgl = isSupportWebgl;\n\n\tfunction isFullscreen() {\n\t\treturn !!(document.fullscreenElement ||\n\t\t\tdocument.mozFullScreenElement ||\n\t\t\tdocument.webkitFullscreenElement ||\n\t\t\tdocument.msFullscreenElement);\n\t}\n\n\tfunction fullScreenError() {\n\t\tvrMode = false;\n\t\tif (vrEffect) {\n\t\t\tvrEffect.exit();\n\t\t}\n\t}\n\n\tfunction pruneObject(object) {\n\t\tvar i = raycastable.indexOf(object);\n\t\tif (i >= 0) {\n\t\t\traycastable.splice(i, 1);\n\t\t}\n\n\t\ti = vrObjects.indexOf(VRObject.findObject(object));\n\t\tif (i >= 0) {\n\t\t\tvrObjects.splice(i, 1);\n\t\t}\n\n\t\tobject.children.forEach(pruneObject);\n\t}\n\n\tfunction raycast() {\n\t\tvar i,\n\t\t\tintersect,\n\t\t\tobject,\n\t\t\tintersects,\n\t\t\tparent,\n\t\t\tprune = [],\n\t\t\tvrObject;\n\n\t\traycaster.ray.origin.setFromMatrixPosition(camera.matrixWorld); // world position\n\t\traycaster.ray.direction.set(0, 0, 0.5).unproject(camera).sub(raycaster.ray.origin).normalize();\n\n\t\tintersects = raycaster.intersectObjects(raycastable, true);\n\t\tfor (i = 0; i < intersects.length; i++) {\n\t\t\tintersect = intersects[i];\n\n\t\t\t// if object has been removed from scene, remove it from raycastable\n\t\t\tparent = intersect.object;\n\t\t\twhile (parent && parent !== scene) {\n\t\t\t\tif (!parent.parent) {\n\t\t\t\t\tprune.push(parent);\n\t\t\t\t}\n\t\t\t\tparent = parent.parent;\n\t\t\t}\n\n\t\t\tif (parent && intersect.object instanceof THREE.Mesh) {\n\t\t\t\tobject = intersect.object;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tprune.forEach(pruneObject);\n\n\t\tif (target !== object) {\n\t\t\tif (target) {\n\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\tvrObject.emit('lookaway');\n\t\t\t\tVR.emit('lookaway', vrObject);\n\t\t\t}\n\t\t\ttarget = object;\n\t\t\tif (target) {\n\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\twhile (!vrObject && target.parent) {\n\t\t\t\t\ttarget = target.parent;\n\t\t\t\t\tvrObject = VRObject.findObject(target);\n\t\t\t\t}\n\t\t\t\tif (vrObject) {\n\t\t\t\t\tvrObject.emit('lookat', intersect);\n\t\t\t\t\tVR.emit('lookat', vrObject, intersect);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction render() {\n       // if (CLOSE_RENDER) {\n       //     return;\n       // }\n        // Will not start render when application has been active.\n        // The case only in taobao client. Very suck!\n        if (Date.now() / 1000 - lastTick > 5) {\n            if (waitRenderInative === 0) {\n                waitRenderInative = Date.now() / 1000;\n            }\n            if (Date.now() / 1000 - waitRenderInative > 1) {\n                lastTick = Date.now();\n            }\n            return;\n        }\n        waitRenderInative = 0;\n\n\t\tvar now = Date.now() / 1000,\n\t\t\tdelta = Math.min(1, now - lastTick);\n\n\t\tvrControls.update();\n\n\t\tanimationCallbacks.forEach(function (cb) {\n\t\t\tcb(delta, now);\n\t\t});\n\n\t\tscene.updateMatrixWorld();\n\n\t\tvrObjects.forEach(function (object) {\n\t\t\tobject.update(now);\n\t\t});\n        if (mouseControls.autoRotate === true) {\n            mouseControls.update();\n        }\n\n\t\traycast();\n\n\t\tvrEffect.render(scene, camera);\n\n\t\tlastTick = now;\n\t}\n\n\tfunction renderLoop() {\n\t\tif (going) {\n\t\t\trender();\n\t\t\trequestAnimationFrame(renderLoop);\n\t\t}\n\t}\n\n\tfunction stop() {\n\t\tgoing = false;\n\t}\n\n\tfunction start() {\n\t\tif (!going) {\n\t\t\tgoing = true;\n\t\t\trenderLoop();\n\t\t}\n\t}\n\n\t/*\n\tMute any sounds when this browser tab is in the background or minimized.\n\t*/\n\tfunction visibilityChange() {\n\t\tif (document.hidden || document.mozHidden || document.msHidden || document.webkitHidden) {\n\t\t\taudioListener.volume(0);\n\t\t} else {\n\t\t\taudioListener.volume(1);\n\t\t}\n\t}\n\n\tfunction resize(width, height) {\n\t\twidth = typeof width === 'number' && width || window.innerWidth;\n\t\theight = typeof height === 'number' && height || window.innerHeight;\n\n\t\tcamera.aspect = width / height;\n\t\tcamera.updateProjectionMatrix();\n\t\trenderer.setSize(width, height);\n\t}\n\n\tfunction initShake() {\n\t\tvar lastTime = 0,\n\t\t\tlastX,\n\t\t\tlastY,\n\t\t\tlastZ,\n\t\t\tthreshold = 15;\n\n\t\twindow.addEventListener('devicemotion', function (evt) {\n\t\t\tvar current = evt.accelerationIncludingGravity,\n\t\t\t\ttime,\n\t\t\t\tdiff,\n\t\t\t\tdeltaX = 0,\n\t\t\t\tdeltaY = 0,\n\t\t\t\tdeltaZ = 0,\n\t\t\t\tdist;\n\n\t\t\tif (lastX !== undefined) {\n\t\t\t\tdeltaX = Math.abs(lastX - current.x);\n\t\t\t\tdeltaY = Math.abs(lastY - current.y);\n\t\t\t\tdeltaZ = Math.abs(lastZ - current.z);\n\n\t\t\t\t// if (deltaX > threshold &&\n\t\t\t\t// \t\t(deltaY > threshold || deltaZ > threshold)\n\t\t\t\t// \t) {\n\t\t\t\tdist = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);\n\t\t\t\tif (dist > threshold) {\n\n\t\t\t\t\ttime = Date.now();\n\t\t\t\t\tdiff = time - lastTime;\n\t\t\t\t\tif (diff > 1000) {\n\t\t\t\t\t\tif (navigator.vibrate) {\n\t\t\t\t\t\t\tnavigator.vibrate(100);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlastTime = Date.now();\n\n\t\t\t\t\t\tVR.emit('shake');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlastX = current.x;\n\t\t\tlastY = current.y;\n\t\t\tlastZ = current.z;\n\n\t\t\torientationPossible = true;\n\t\t}, false);\n\t}\n\n\tfunction initScene(mode) {\n\t\tfunction attachCanvas() {\n\t\t\tdocument.body.insertBefore(renderer.domElement, document.body.firstChild || null);\n\t\t\tresize();\n\t\t}\n\n\t\tif (renderer) {\n\t\t\treturn;\n\t\t}\n\t\tvar renderMode = mode || 'auto';\n        if (renderMode === MODE_CSS) {\n            renderer = new THREE.CSS3DRenderer();\n        } else if (renderMode === MODE_CANVAS) {\n            renderer = new THREE.CanvasRenderer();\n            renderer.setPixelRatio( window.devicePixelRatio );\n        } else {\n            renderer = !isSupportWebgl?new THREE.CanvasRenderer():new THREE.WebGLRenderer({ antialias: false });\n            renderer.setPixelRatio( window.devicePixelRatio );\n        }\n\n\t\t//create renderer and place in document\n        // Antialiasing temporarily disabled to improve performance.\n        renderer.setClearColor(0x000000, 0);\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\t\tif (isSupportWebgl) {\n            renderer.domElement.addEventListener('webglcontextlost', function contextLost(event) {\n                console.log('lost context', event);\n            });\n        }\n\t\t// renderer.shadowMapEnabled = true;\n\t\t// renderer.shadowMapSoft = true;\n\n\t\t//need a scene to put all our objects in\n\t\tscene = new THREE.Scene();\n\n\t\tbodyWrapper = new VRObject(scene, require('./objects/empty'), null, {\n\t\t\tname: 'body'\n\t\t}).moveTo(0, 1.5, 4);\n\t\tbody = bodyWrapper.object;\n\n\t\tcameraWrapper = new VRObject(body, function (parent) {\n        //    camera = new THREE.OrthographicCamera(\n        //            window.innerWidth / - 24, window.innerWidth / 24,window.innerHeight / 24, window.innerHeight / - 24, -310, 100000);\n        //    camera.position.x = 0;\n        //    camera.position.y = 0;\n        //    camera.zoom = 0.4;\n\t\t//\tcamera.position.set(-0.000001, 0.0001, 0.0001);\n\t\t//\tcamera.rotation.set(0, 0, 0);\n\n\t\t\t//need a camera with which to look at stuff\n            // The viewer proportion will be a square not a rect.\n\t\t\tcamera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, NEAR, FAR);\n            camera.setFocalLength(8);\n            // camera.zoom = 0.8;\n\t\t\t// camera.position.set(-0.000001, 1, 0.0001);\n            // camera.autoBackward = true;\n\t\t\tparent.add(camera);\n\t\t\treturn camera;\n\t\t})\n\t\t// set camera position so that OrbitControls works properly.\n\t\t\t.moveTo(0, 0.0001, 0.0001);\n\n\t\taudioListener = new THREE.AudioListener();\n\t\taudioListener.name = 'audio-listener';\n\t\tcamera.add(audioListener);\n\n\t\t//VRControls point the camera wherever we're looking\n\t\tvrControls = new THREE.VRControls(camera);\n\t\tvrControls.freeze = !orientationEnabled;\n\n\t\t//render left and right eye\n\t\tvrEffect = new THREE.VRStereoEffect(renderer);\n\t\tvrEffect.near = NEAR;\n\t\tvrEffect.far = FAR;\n\t\tvrEffect.addEventListener('fullscreenchange', function (evt) {\n\t\t\tvar screen;\n\t\t\tif (isFullscreen()) {\n\t\t\t\tif (vrMode) {\n\t\t\t\t\t//no mouse control\n\t\t\t\t\tmouseControls.enabled = false;\n\n\t\t\t\t\tvrControls.freeze = false;\n\t\t\t\t\tvrControls.reset();\n\n\t\t\t\t\tscreen = window.screen;\n\t\t\t\t\tif (screen.lockOrientation) {\n\t\t\t\t\t\tscreen.lockOrientation('landscape-primary');\n\t\t\t\t\t} else if (screen.mozLockOrientation) {\n\t\t\t\t\t\tscreen.mozLockOrientation('landscape-primary');\n\t\t\t\t\t} else if (screen.orientation && screen.orientation.lock) {\n\t\t\t\t\t\tscreen.orientation.lock('landscape-primary');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tVR.exitVR();\n\t\t\t}\n\n\t\t\tcamera.position.set(0, 0.0001, 0.0001);\n\t\t\tcamera.rotation.set(0, 0, 0);\n\n\t\t\tVR.emit('fullscreenchange', evt);\n\t\t});\n        scene.isWebview = vrEffect.isWebview;\n\n\t\t//report on HMD\n\t\tvrControls.addEventListener('devicechange', function () {\n\t\t\torientationPossible = true;\n\t\t\tif (orientationEnabled === undefined) {\n\t\t\t\torientationEnabled = vrControls.mode() === 'deviceorientation';\n\t\t\t}\n\n\t\t\tvrControls.freeze = !orientationEnabled && !vrMode;\n\n\t\t\tVR.emit('devicechange', vrControls.mode(), vrEffect.hmd());\n\t\t});\n\n\t\t// mouse control in case got no orientation device\n        // Re-start autorotate if user has not been controlled.\n\t\tmouseControls = new THREE.OrbitControls(camera, renderer.domElement);\n\t\tmouseControls.target0.set(0, 0.0001, 0.000);\n\t\tmouseControls.target.copy(mouseControls.target0);\n        mouseControls.enableZoom = true;\n        mouseControls.enablePan = true;\n        mouseControls.autoRotate = false;\n\t\tif (renderMode === MODE_CSS) {\n        \tmouseControls.autoRotateSpeed = 0.5;\n\t\t} else {\n        \tmouseControls.autoRotateSpeed = 1.0;\n\t\t}\n        mouseControls.enableDamping = true;\n        mouseControls.dampingFactor = 0.55;\n        mouseControls.addEventListener('start', function(){\n            if (autoRotateTimer) {\n                clearTimeout(autoRotateTimer);\n            }\n            if (orientationEnabled) {\n                mouseControls.enabled = false;\n                mouseControls.autoRotate = false;\n            } else {\n                mouseControls.enabled = true;\n                mouseControls.autoRotate = false;\n            }\n        });\n        mouseControls.addEventListener('end', function(){\n            autoRotateTimer = setTimeout(function(){\n                if (orientationEnabled) {\n                    mouseControls.enabled = false;\n                    mouseControls.autoRotate = false;\n                } else {\n                    mouseControls.enabled = true;\n                    mouseControls.autoRotate = true;\n                }\n            }, 2000);\n        });\n        mouseControls.enabled = false;\n\t\tmouseControls.update();\n\n\t\t//todo: remove any default lights once other lights are added\n        // Will not use this way because memory\n\t\tvar dLight = new THREE.DirectionalLight(0xffffff, 0.8);\n\t\tdLight.name = 'directional-light';\n\t\tdLight.position.set(20, 100, 100);\n\n\t\tdLight.castShadow = true;\n\t\tdLight.shadowCameraVisible = true;\n\n\t\tdLight.shadowMapWidth = 2048;\n\t\tdLight.shadowMapHeight = 2048;\n\n\t\tdLight.shadowCameraLeft = -10;\n\t\tdLight.shadowCameraRight = 10;\n\t\tdLight.shadowCameraTop = 10;\n\t\tdLight.shadowCameraBottom = -10;\n\n\t\tdLight.shadowCameraFar = 150;\n\t\tdLight.shadowCameraNear = 100;\n\t\tdLight.shadowDarkness = 1;\n\n\t\tscene.add(dLight);\n\n\t\tscene.add(new THREE.AmbientLight(0x444444));\n\n\t\tif (VR) {\n\t\t\tVR.camera = cameraWrapper;\n\t\t\tVR.body = bodyWrapper;\n\t\t\tVR.scene = scene;\n\t\t\tVR.canvas = renderer.domElement;\n\t\t\tVR.renderer = renderer;\n\t\t\tVR.zeroSensor = vrControls.zeroSensor;\n\t\t}\n\n\t\traycaster = new THREE.Raycaster();\n\n\t\tif (document.body) {\n\t\t\tattachCanvas();\n\t\t} else {\n\t\t\twindow.addEventListener('load', attachCanvas, false);\n\t\t}\n\n\t\tVR.canvas.addEventListener('webkitfullscreenerror', fullScreenError, false);\n\t\tVR.canvas.addEventListener('fullscreenerror', fullScreenError, false);\n\t}\n\n\tfunction initRequirements() {\n\t\t//load external requirements\n\t\tTHREE = require('three');\n\t\trequire('imports?THREE=three!DeviceOrientationControls');\n\t\trequire('imports?THREE=three!OrbitControls');\n\n\t\t//if (typeof __DEV__ !== 'undefined' && __DEV__) {\n\t\t\trequire('imports?THREE=three!AugmentedConsole');\n\t\t//}\n\n\t\tTHREE.ImageUtils.crossOrigin = '';\n\n\t\teventEmitter = require('event-emitter');\n\n        //if (!isSupportWebgl) {\n\t\t\t// compatible mode\n\t\t\t// Fixed render in all mobile device\n\t\t\trequire('imports?THREE=three!./lib/CSS3DRenderer.js');\n            require('imports?THREE=three!./lib/CanvasRenderer.js');\n            require('imports?THREE=three!./lib/Projector.js');\n          //  return;\n        //}\n\n\t\t//my VR stuff. todo: move these to a separate repo or two for easy packaging\n\t\trequire('imports?THREE=three!./lib/VRStereoEffect');\n\t\trequire('imports?THREE=three!./lib/VRControls');\n\t}\n\n\n\tfunction initialize(renderMode) {\n\t\t//todo: set up button/info elements\n\n\t\tinitScene(renderMode);\n\n\t\tinitShake();\n\n\t\tresize();\n\n\n\t\tdocument.addEventListener('visibilitychange', visibilityChange);\n\t\tdocument.addEventListener('mozvisibilitychange', visibilityChange);\n\t\tdocument.addEventListener('msvisibilitychange', visibilityChange);\n\t\tdocument.addEventListener('webkitvisibilitychange', visibilityChange);\n\t}\n\n\tinitRequirements();\n\n\tmodule.exports = VR = {\n\t\tinit: initialize,\n\t\trender: render,\n\t\tstart: start,\n\t\tstop: stop,\n\t\tresize: resize,\n        controls: mouseControls,\n        orientationPossible: function () {\n            return orientationPossible;\n        },\n\n\t\tTHREE: THREE,\n\n\t\tmaterials: materials,\n\n\t\tanimate: function (callback) {\n\t\t\tvar i;\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\ti = animationCallbacks.indexOf(callback);\n\t\t\t\tif (i < 0) {\n\t\t\t\t\tanimationCallbacks.push(callback);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tend: function (callback) {\n\t\t\tvar i;\n\n\t\t\tif (!callback) {\n\t\t\t\tanimationCallbacks.length = 0;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\ti = animationCallbacks.indexOf(callback);\n\t\t\t\tif (i >= 0) {\n\t\t\t\t\tanimationCallbacks.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\trequestVR: function () {\n\t\t\t//todo: check if it's possible\n\t\t\tif (vrMode || !vrEffect) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvrMode = true;\n\n\t\t\t//full screen and render two eyes\n\t\t\t//always full screen\n\t\t\tvrEffect.requestFullScreen();\n\t\t\tmouseControls.enabled = false;\n\t\t},\n\n\t\texitVR: function () {\n\t\t\tvrMode = false;\n\t\t\tif (!vrEffect.isWebview() && isFullscreen()) {\n\t\t\t\texitFullscreen();\n\t\t\t\treturn;\n\t\t\t}\n            vrEffect.exit();\n\n\t\t\tvrControls.freeze = !orientationEnabled;\n\t\t\tcamera.rotation.set(0, 0, 0);\n\t\t\tmouseControls.enabled = true;\n\t\t},\n\n\t\tvrMode: function () {\n\t\t\treturn vrMode && isFullscreen();\n\t\t},\n\n\t\torientationEnabled: function () {\n\t\t\treturn !!orientationEnabled;\n\t\t},\n\t\tenableOrientation: function () {\n            // clearTimeout(autoRotateTimer);\n\t\t\torientationEnabled = true;\n\t\t\tif (!vrMode) {\n\t\t\t\tvrControls.freeze = false;\n\t\t\t}\n\t\t\tmouseControls.enabled = false;\n            mouseControls.autoRotate = false;\n\t\t},\n\t\tdisableOrientation: function () {\n            // clearTimeout(autoRotateTimer);\n\t\t\torientationEnabled = false;\n\t\t\tcamera.rotation.set(0, 0, 0);\n\t\t\tvrControls.freeze = !vrMode;\n\t\t\tmouseControls.enabled = true;\n            mouseControls.autoRotate = true;\n\t\t},\n\n\t\tisFullscreen: isFullscreen,\n\t\trequestFullscreen: requestFullscreen,\n\t\texitFullscreen: function () {\n\t\t\tif (isFullscreen()) {\n\t\t\t\texitFullscreen();\n\t\t\t}\n\t\t},\n\n\t\tcontrolMode: function () {\n\t\t\treturn vrControls && vrControls.mode();\n\t\t},\n\n\t\tzeroSensor: nop,\n\n\t\tvibrate: navigator.vibrate ? navigator.vibrate.bind(navigator) : nop,\n\n\t\t// Utility\n\t\ttimes: function (n, callback) {\n\t\t\tvar i;\n\n\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\tcallback(i);\n\t\t\t}\n\t\t},\n\n\t\tcamera: cameraWrapper,\n\t\tbody: bodyWrapper,\n\t\tscene: scene,\n\t\trenderer: renderer || null,\n\t\tcanvas: renderer && renderer.domElement || null,\n        isSupportWebgl: isSupportWebgl\n\t};\n\n\tobjectMethods.forEach(function (method) {\n\t\tvar creator = require('./objects/' + method),\n\t\t\tkey;\n\n\t\tVR[method] = function (options) {\n\t\t\tvar obj = new VRObject(scene, creator, body, options, renderer);\n\t\t\tvrObjects.push(obj);\n\t\t\tif (obj.raycastable) {\n\t\t\t\traycastable.push(obj.object);\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tVRObject.prototype[method] = function (options) {\n\t\t\tvar obj = new VRObject(this.object, creator, body, options, renderer);\n\t\t\tvrObjects.push(obj);\n\t\t\tif (obj.raycastable) {\n\t\t\t\traycastable.push(obj.object);\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tfor (key in creator) {\n\t\t\tif (creator.hasOwnProperty(key) && typeof creator[key] === 'function') {\n\t\t\t\tVR[method][key] = creator[key];\n\t\t\t\tVRObject.prototype[method][key] = creator[key];\n\t\t\t}\n\t\t}\n\t});\n\n\teventEmitter(VR);\n\n\tObject.defineProperty(VR, 'target', {\n\t\tget: function () {\n\t\t\treturn target;\n\t\t}\n\t});\n    // Compatible in android < 5.0\n    // Fix something what VR was undefined.\n    window.VR = VR;\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/vr.js\n ** module id = 1\n ** module chunks = 0\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../node_modules/css-loader/index.js!./style.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../node_modules/css-loader/index.js!./style.css\", function() {\n\t\t\tvar newContent = require(\"!!./../../node_modules/css-loader/index.js!./style.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/style-loader!./~/css-loader!./src/css/style.css\n ** module id = 2\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"body{font-family:Helvetica Neue,Helvetica,Arial,sans-serif;color:#eee;overflow:hidden;background:#282828;height:100%;width:100%;margin:0;padding:0}canvas{width:100%!important;height:100%!important;top:0;left:0}#buttons{position:absolute;bottom:0;left:0;padding:12px;margin:8px;border-radius:8px;background-color:hsla(0,0%,50%,.6)}#buttons>*{margin:0 10px;display:inline-block;width:18px;height:18px;cursor:pointer}#buttons>:first-child{margin-left:0}#buttons>.unsupported,#fs-disable{display:none}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./src/css/style.css\n ** module id = 3\n ** module chunks = 0\n **/","/**\n * isMobile.js v0.3.9\n *\n * A simple library to detect Apple phones and tablets,\n * Android phones and tablets, other mobile devices (like blackberry, mini-opera and windows phone),\n * and any kind of seven inch device, via user agent sniffing.\n *\n * @author: Kai Mallea (kmallea@gmail.com)\n *\n * @license: http://creativecommons.org/publicdomain/zero/1.0/\n */\n(function (global) {\n\n    var apple_phone         = /iPhone/i,\n        apple_ipod          = /iPod/i,\n        apple_tablet        = /iPad/i,\n        android_phone       = /(?=.*\\bAndroid\\b)(?=.*\\bMobile\\b)/i, // Match 'Android' AND 'Mobile'\n        android_tablet      = /Android/i,\n        amazon_phone        = /(?=.*\\bAndroid\\b)(?=.*\\bSD4930UR\\b)/i,\n        amazon_tablet       = /(?=.*\\bAndroid\\b)(?=.*\\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\\b)/i,\n        windows_phone       = /IEMobile/i,\n        windows_tablet      = /(?=.*\\bWindows\\b)(?=.*\\bARM\\b)/i, // Match 'Windows' AND 'ARM'\n        other_blackberry    = /BlackBerry/i,\n        other_blackberry_10 = /BB10/i,\n        other_opera         = /Opera Mini/i,\n        other_chrome        = /(CriOS|Chrome)(?=.*\\bMobile\\b)/i,\n        other_firefox       = /(?=.*\\bFirefox\\b)(?=.*\\bMobile\\b)/i, // Match 'Firefox' AND 'Mobile'\n        seven_inch = new RegExp(\n            '(?:' +         // Non-capturing group\n\n            'Nexus 7' +     // Nexus 7\n\n            '|' +           // OR\n\n            'BNTV250' +     // B&N Nook Tablet 7 inch\n\n            '|' +           // OR\n\n            'Kindle Fire' + // Kindle Fire\n\n            '|' +           // OR\n\n            'Silk' +        // Kindle Fire, Silk Accelerated\n\n            '|' +           // OR\n\n            'GT-P1000' +    // Galaxy Tab 7 inch\n\n            ')',            // End non-capturing group\n\n            'i');           // Case-insensitive matching\n\n    var match = function(regex, userAgent) {\n        return regex.test(userAgent);\n    };\n\n    var IsMobileClass = function(userAgent) {\n        var ua = userAgent || navigator.userAgent;\n        // Facebook mobile app's integrated browser adds a bunch of strings that\n        // match everything. Strip it out if it exists.\n        var tmp = ua.split('[FBAN');\n        if (typeof tmp[1] !== 'undefined') {\n            ua = tmp[0];\n        }\n\n        this.apple = {\n            phone:  match(apple_phone, ua),\n            ipod:   match(apple_ipod, ua),\n            tablet: !match(apple_phone, ua) && match(apple_tablet, ua),\n            device: match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)\n        };\n        this.amazon = {\n            phone:  match(amazon_phone, ua),\n            tablet: !match(amazon_phone, ua) && match(amazon_tablet, ua),\n            device: match(amazon_phone, ua) || match(amazon_tablet, ua)\n        };\n        this.android = {\n            phone:  match(amazon_phone, ua) || match(android_phone, ua),\n            tablet: !match(amazon_phone, ua) && !match(android_phone, ua) && (match(amazon_tablet, ua) || match(android_tablet, ua)),\n            device: match(amazon_phone, ua) || match(amazon_tablet, ua) || match(android_phone, ua) || match(android_tablet, ua)\n        };\n        this.windows = {\n            phone:  match(windows_phone, ua),\n            tablet: match(windows_tablet, ua),\n            device: match(windows_phone, ua) || match(windows_tablet, ua)\n        };\n        this.other = {\n            blackberry:   match(other_blackberry, ua),\n            blackberry10: match(other_blackberry_10, ua),\n            opera:        match(other_opera, ua),\n            firefox:      match(other_firefox, ua),\n            chrome:       match(other_chrome, ua),\n            device:       match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(other_opera, ua) || match(other_firefox, ua) || match(other_chrome, ua)\n        };\n        this.seven_inch = match(seven_inch, ua);\n        this.any = this.apple.device || this.android.device || this.windows.device || this.other.device || this.seven_inch;\n        // excludes 'other' devices and ipods, targeting touchscreen phones\n        this.phone = this.apple.phone || this.android.phone || this.windows.phone;\n        // excludes 7 inch devices, classifying as phone or tablet is left to the user\n        this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet;\n\n        if (typeof window === 'undefined') {\n            return this;\n        }\n    };\n\n    var instantiate = function() {\n        var IM = new IsMobileClass();\n        IM.Class = IsMobileClass;\n        return IM;\n    };\n\n    if (typeof module != 'undefined' && module.exports && typeof window === 'undefined') {\n        //node\n        module.exports = IsMobileClass;\n    } else if (typeof module != 'undefined' && module.exports && typeof window !== 'undefined') {\n        //browserify\n        module.exports = instantiate();\n    } else if (typeof define === 'function' && define.amd) {\n        //AMD\n        define('isMobile', [], global.isMobile = instantiate());\n    } else {\n        global.isMobile = instantiate();\n    }\n\n})(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ismobilejs/isMobile.js\n ** module id = 4\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tlinkElement.rel = \"stylesheet\";\r\n\tinsertStyleElement(options, linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement(options);\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/style-loader/addStyles.js\n ** module id = 5\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar THREE = require('three'),\n\t\tforEach = require('lodash.foreach'),\n\t\tassign = require('lodash.assign'),\n\n\t\tiOS = navigator.userAgent.match(/(iPad|iPhone|iPod)/g),\n\t\tandroid = navigator.userAgent.toLowerCase().match(/android/g),\n\n\t\t// https://gist.github.com/dperini/729294\n\t\t//urlRegex = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/i,\n\t\turlRegex = require('./utils/urlregex'),\n\n\t\tdataUri = /^data:image\\/(?:png|jpe?g|gif);/,\n\t\tassetPath = '//gw.alicdn.com/tps/',\n\n\t\timages = {},\n\n\t\tmaterialTypes = {\n\t\t\tlambert: THREE.MeshLambertMaterial,\n\t\t\tbasic: THREE.MeshBasicMaterial,\n\t\t\tphong: THREE.MeshPhongMaterial,\n\t\t\tnormal: THREE.MeshNormalMaterial,\n\t\t\tdepth: THREE.MeshDepthMaterial\n\t\t},\n\t\ttextureFiles = {\n    // Will use these when you need it.\n\t\t\t'asphalt': {\n                map:'TB1kK63NVXXXXaVaFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 12\n\t\t\t},\n\t\t\t'brick-tiles': {\n                map:'TB1YcUKNVXXXXbpXXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 2\n\t\t\t},\n\t\t\t'bricks': {\n\t\t\t\ttype: 'phong',\n\t\t\t\trepeat: 4,\n                map:'TB1rswLNVXXXXbcXXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\tnormalMap: 'TB1T.7hNVXXXXXlXVXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\tspecularMap: 'TB1WIn.NVXXXXaPapXXXXXXXXXX-512-512.jpg_320x320.jpg'\n\t\t\t},\n\t\t\t'checkerboard': {\n\t\t\t\trepeat: 10,\n\t\t\t\tmap: 'TB17ZseNVXXXXbfaXXXXXXXXXXX-256-256.png_140x140.jpg'\n\t\t\t},\n\t\t\t'grass': {\n                map:'TB17jZqNVXXXXc4XFXXXXXXXXXX-256-256.jpg_140x140.jpg',\n\t\t\t\trepeat: 12\n\t\t\t},\n\t\t\t'metal-floor': {\n\t\t\t\ttype: 'phong',\n\t\t\t\tshininess: 100,\n                map:'TB18JAwNVXXXXbiXFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 2\n\t\t\t},\n\t\t\t'metal': {\n                map:'TB1sEEhNVXXXXbSXVXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\ttype: 'phong',\n\t\t\t\tshininess: 100,\n\t\t\t\tshading: THREE.SmoothShading,\n\t\t\t\trepeat: 2\n\t\t\t},\n\t\t\t'stone': {\n                map:'TB1c37bNVXXXXXwaXXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 8\n\t\t\t},\n\t\t\t'tiles': {\n                map:'TB1BbZCNVXXXXaMXpXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 4\n\t\t\t},\n\t\t\t'weathered-wood': {\n                map:'TB12QIwNVXXXXXGXFXXXXXXXXXX-512-512.jpg_320x320.jpg',\n\t\t\t\trepeat: 8\n\t\t\t},\n\t\t\t'wood': {\n                map:'TB1rpEANVXXXXa8XpXXXXXXXXXX-512-512.jpg_320x320.jpg',\n                repeat: 4\n\t\t\t}\n\t\t},\n\t\ttextures = {},\n\t\tmaterials;\n\n\tfunction imageTexture(src, mapping, callback) {\n\t\tvar image,\n\t\t\tparse,\n\t\t\ttexture,\n\t\t\tisDataUri;\n\n\t\tfunction imageLoaded() {\n\t\t\tvar scale,\n\t\t\t\tcanvas,\n\t\t\t\tctx,\n\t\t\t\tsmallImage;\n\n\t\t\t/*\n\t\t\tiOS doesn't know how to handle large images. Even though the MAX_TEXTURE_SIZE\n\t\t\tmay be 4096, it still breaks on images that large. So we scale them down.\n            Change 2048 to 1024 fix memory is too high in iOS.\n            Modify by KeynesQ\n\t\t\t*/\n\t\t//\tif (iOS && (image.naturalWidth > 2048 || image.naturalHeight > 2048)) {\n\t\t//\t\tscale = 1024 / Math.max( image.naturalWidth, image.naturalHeight );\n\n\t\t//\t\tcanvas = document.createElement('canvas');\n\t\t//\t\tcanvas.width = 1024;\n\t\t//\t\tcanvas.height = 512;\n\n\t\t//\t\tctx = canvas.getContext('2d');\n\t\t//\t\tctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, canvas.width, canvas.height);\n\n\t\t//\t\timage = canvas;\n\t\t//\t}\n                // Reduce momery in mobile device.\n                if ((iOS || android) && (image.naturalWidth > 2048 || image.naturalHeight > 2048)) {\n                // scales the image by (float) scale < 1\n\n                    scale = 1024 / Math.max( image.naturalWidth, image.naturalHeight );\n                    canvas = document.createElement('canvas');\n                    canvas.width = Math.floor(image.naturalWidth * scale);\n                    canvas.height = Math.floor(image.naturalHeight * scale);\n\n                    ctx = canvas.getContext('2d');\n\n                    ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, canvas.width, canvas.height);\n                   // if (iOS) {\n                   //     var dstData = ctx.createImageData(canvas.width, canvas.height),\n                   //         dstBuff = dstData.data,\n                   //         srcBuff = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n                   //     var _worker = new Worker('//h5.m.taobao.com/js/trip/hotel/worker.js');\n                   //     _worker.onmessage = function (e) {\n                   //         var data = e.data[0];\n                   //         // Get new image data\n                   //         ctx.putImageData(data, 0, 0);\n                   //         texture.image = canvas;\n                   //         texture.needsUpdate = true;\n                   //         if (typeof callback === 'function') {\n                   //             setTimeout(callback.bind(null, texture, image), 1);\n                   //         }\n                   //         _worker.terminate();\n                   //     };\n                   //     _worker.postMessage([dstData, srcBuff, canvas.width, canvas.height]);\n                   //     return;\n                   // }\n\n                    image = canvas;\n                }\n\n                texture.image = image;\n                texture.needsUpdate = true;\n                if (typeof callback === 'function') {\n                    setTimeout(callback.bind(null, texture, image), 1);\n                }\n            }\n\n            parse = dataUri.exec(src);\n            isDataUri = !!parse;\n            if (!parse) {\n                parse = urlRegex.exec(src);\n            }\n\n            // if (!parse) {\n            // \tconsole.error('Invalid image URL: ' + src);\n            // \treturn;\n            // }\n\n            if (images[src]) {\n                image = images[src];\n            } else {\n                image = document.createElement('img');\n                if (parse && (parse[1] && parse[1] !== window.location.hostname || parse[2] && parse[2] !== window.location.port)) {\n                    image.crossOrigin = 'anonymous';\n                }\n                image.src = src;\n                images[src] = image;\n            }\n\n            texture = new THREE.Texture(undefined, mapping);\n\n            if (image.naturalWidth || isDataUri) {\n                setTimeout(imageLoaded, 1);\n            } else {\n                image.addEventListener('load', imageLoaded);\n            }\n\n            return texture;\n        }\n\n\n\tfunction material(options) {\n\t\tvar opts,\n\t\t\tMaterial = materialTypes[options.type] || THREE.MeshLambertMaterial;\n\n\t\tfunction threeTexture(fn) {\n\t\t\tif (typeof fn === 'string') {\n\t\t\t\tif (urlRegex.test(fn) || dataUri.test(fn)) {\n\t\t\t\t\treturn imageTexture(fn);\n\t\t\t\t}\n\n\t\t\t\tfn = textures[fn];\n\t\t\t}\n\t\t\tif (typeof fn === 'function') {\n\t\t\t\treturn fn(options);\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\n\t\tif (typeof options === 'string') {\n\t\t\toptions = {\n\t\t\t\tmap: options\n\t\t\t};\n\t\t}\n\n\t\topts = assign({}, options);\n\t\tforEach({\n\t\t\tambient: options.ambient || options.color,\n\t\t\temissive: options.emissive || options.color,\n\t\t\tmap: threeTexture(options.map),\n\t\t\tspecularMap: threeTexture(options.specularMap),\n\t\t\tnormalMap: threeTexture(options.normalMap),\n\t\t\talphaMap: threeTexture(options.alphaMap),\n\t\t\tenvMap: threeTexture(options.envMap),\n\t\t\tlightMap: threeTexture(options.lightMap)\n\t\t}, function (val, key) {\n\t\t\tif (val !== undefined) {\n\t\t\t\topts[key] = val;\n\t\t\t}\n\t\t});\n\n\t\tdelete opts.type;\n\n\t\treturn new Material(opts);\n\t}\n\n\t//figure out if script is loaded relative so we know where to find the images\n//\tassetPath = (function () {\n//\t\tvar url,\n//\t\t\tscripts;\n//\n//\t\tif (document.currentScript) {\n//\t\t\turl = document.currentScript.getAttribute('src');\n//\t\t} else {\n//\t\t\tscripts = document.getElementsByTagName('script');\n//\t\t\turl = scripts[scripts.length - 1].getAttribute('src');\n//\t\t}\n//\n//\t\tif (!urlRegex.test(url)) {\n//\t\t\treturn url.replace(/[a-z\\-\\.]+\\.js$/i, '');\n//\t\t}\n//\n//\t\treturn __ASSET_PATH__;\n//\t}());\n\n\tmaterials = {\n\t\tstandard: function () {\n\t\t\treturn new THREE.MeshLambertMaterial();\n\t\t},\n\t\ttextures: textures,\n\t\timageTexture: imageTexture,\n\t\tmaterial: material,\n\t\tlibrary: ['standard']\n\t};\n\n\tforEach(textureFiles, function (props, key) {\n\t\tfunction textureFactory(file, options) {\n\t\t\tfunction imagePath(url) {\n\t\t\t\tif ((/\\.(png|jpg)$/i).test(url)) {\n\t\t\t\t\treturn assetPath + url;\n\t\t\t\t}\n\n\t\t\t\treturn url;\n\t\t\t}\n\n\t\t\toptions = options || {};\n\n\t\t\treturn function (opts) {\n\t\t\t\tvar texture = imageTexture(imagePath(file));\n\n\t\t\t\topts = assign({}, options, opts);\n\n\t\t\t\tif (opts.repeat) {\n\t\t\t\t\tif (opts.repeat > 0) {\n\t\t\t\t\t\ttexture.repeat.set(opts.repeat, opts.repeat);\n\t\t\t\t\t} else if (opts.repeat instanceof THREE.Vector2) {\n\t\t\t\t\t\ttexture.repeat.copy(opts.repeat);\n\t\t\t\t\t}\n\t\t\t\t\ttexture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t}\n\t\t\t\treturn texture;\n\t\t\t};\n\t\t}\n\n\t\tvar map = textureFactory(props.map || key + '.jpg', props),\n\t\t\tmaterialDef;\n\n\t\tmaterialDef = assign({}, props, {\n\t\t\tmap: map\n\t\t});\n\t\ttextures[key] = map;\n\n\t\tif (props.normalMap) {\n\t\t\tmaterialDef.normalMap = textures[key + '-normal'] = textureFactory(props.normalMap, props);\n\t\t}\n\n\t\tif (props.specularMap) {\n\t\t\tmaterialDef.specularMap = textures[key + '-specular'] = textureFactory(props.specularMap, props);\n\t\t}\n\n\t\tmaterials.library.push(key);\n\t\tmaterials[key] = function (options) {\n\t\t\tvar opts = assign({}, materialDef, options);\n\n\t\t\treturn material(opts);\n\t\t};\n\t});\n\n\treturn materials;\n\n\t//var parse = urlRegex.exec('https://lh5.googleusercontent.com:80/-SNO8rWDqbUM/U085rfOBRuI/AAAAAAAAEdM/nWEWCtNceZ0/w955-h382-no/PANO_20130225_131211.jpg');\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/materials.js\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar\tNEAR_DISTANCE = 3,\n\t\tmaterials = require('./materials'),\n\t\tTHREE = require('three'),\n\t\teventEmitter = require('event-emitter'),\n\n\t\txAxis = new THREE.Vector3(1, 0, 0),\n\t\tyAxis = new THREE.Vector3(0, 1, 0),\n\t\tzAxis = new THREE.Vector3(0, 0, 1),\n\n\t\tscratchVector1 = new THREE.Vector3(),\n\t\tscratchVector2 = new THREE.Vector3(),\n\n\t\tallObjects = window.WeakMap ? new window.WeakMap() : {};\n\n\tfunction distance(object, origin) {\n\t\tvar geometry;\n\n\t\tgeometry = object.geometry;\n\n\t\t//assumes object world matrix has been updated\n\t\tscratchVector1.setFromMatrixPosition(origin.matrixWorld);\n\n\t\tif (!geometry) {\n\t\t\t//first convert to world coordinate\n\t\t\tscratchVector2.setFromMatrixPosition(object.matrixWorld);\n\t\t\treturn scratchVector2.distanceTo(scratchVector1);\n\t\t}\n\n\t\tobject.worldToLocal(scratchVector1);\n\t\treturn object.geometry.boundingBox.distanceToPoint(scratchVector1);\n\t}\n\n\tfunction VRObject(parent, creator, body, options, renderer) {\n\t\tvar material,\n\t\t\tobject,\n\t\t\tself = this,\n\n\t\t\tisNear = false,\n\t\t\tisTarget = false,\n\n\t\t\tcamera = body && (function () {\n\t\t\t\tvar i,\n\t\t\t\t\tc;\n\t\t\t\tfor (i = 0; i < body.children.length; i++) {\n\t\t\t\t\tc = body.children[i];\n\t\t\t\t\tif (c instanceof THREE.PerspectiveCamera) {\n\t\t\t\t\t\treturn c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}()),\n\t\t\tfrustum,\n\t\t\tcameraViewProjectionMatrix,\n\n\t\t\traycaster;\n\n\t\toptions = options || {};\n\n\t\teventEmitter(this);\n\n\t\tif (body) {\n\t\t\t// raycaster = new THREE.Raycaster();\n\n\t\t\tthis.update = function () {\n\t\t\t\tvar wasNear = isNear,\n\t\t\t\t\twasTarget = isTarget,\n\n\t\t\t\t\tintersects, intersect, i;\n\n\t\t\t\tisNear = self.distance < NEAR_DISTANCE;\n\t\t\t\tif (isNear !== wasNear) {\n\t\t\t\t\tif (isNear) {\n\t\t\t\t\t\tself.emit('near', self);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.emit('far', self);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\traycaster.ray.origin.copy(origin);\n\t\t\t\traycaster.ray.direction.set(0, 0, 0.5).unproject(camera).sub(origin).normalize();\n\n\t\t\t\t//todo: consider whether this needs to be recursive. maybe a different event\n\t\t\t\tintersects = raycaster.intersectObject(object);\n\t\t\t\tif (intersects.length) {\n\t\t\t\t\tisTarget = true;\n\t\t\t\t\tif (!wasTarget) {\n\t\t\t\t\t\tself.emit('target-on', intersects[0]);\n\t\t\t\t\t}\n\t\t\t\t} else if (wasTarget) {\n\t\t\t\t\tself.emit('target-off');\n\t\t\t\t}\n\t\t\t\t*/\n\t\t\t};\n\t\t}\n\n\t\t//todo: get material from options\n\t\tthis.object = object = creator.call(this, parent, options, renderer);\n\t\tthis.parent = this.object.parent || parent;\n\n\t\tif (object instanceof THREE.Mesh) {\n\t\t\tif (options.castShadow !== false) {\n\t\t\t\tobject.castShadow = true;\n\t\t\t}\n\t\t\tif (options.receiveShadow !== false) {\n\t\t\t\tobject.receiveShadow = true;\n\t\t\t}\n\n\t\t\tif (object.geometry) {\n\t\t\t\tobject.geometry.computeBoundingBox();\n\t\t\t}\n\t\t}\n\n\t\tif (options.name !== undefined) {\n\t\t\tobject.name = options.name;\n\t\t}\n\t\tself.name = object.name;\n\n\t\tif (allObjects.set) {\n\t\t\tallObjects.set(object, this);\n\t\t} else {\n\t\t\tallObjects[object.id] = this;\n\t\t}\n\n\t\tobject.position.set(\n\t\t\tparseFloat(options.x) || 0,\n\t\t\tparseFloat(options.y) || 0,\n\t\t\tparseFloat(options.z) || 0\n\t\t);\n\n\t\tthis.setMaterial(options.material);\n\n\t\tif (options.color) {\n\t\t\tmaterial = object.material;\n\t\t\tmaterial.color = new THREE.Color(options.color);\n\t\t\tmaterial.ambient = material.color;\n\t\t}\n\n\t\t['position', 'scale', 'rotation', 'quaternion', 'material'].forEach(function (prop) {\n\t\t\tif (prop in object && !self[prop]) {\n\t\t\t\tself[prop] = object[prop];\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'visible', {\n\t\t\tset: function (val) {\n\t\t\t\tself.object.visible = !!val;\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn self.object.visible;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'distance', {\n\t\t\tget: function () {\n\t\t\t\treturn distance(self.object, body || parent);\n\t\t\t}\n\t\t});\n\n\t\tif (camera) {\n\t\t\tfrustum = new THREE.Frustum();\n\t\t\tcameraViewProjectionMatrix = new THREE.Matrix4();\n\t\t\tObject.defineProperty(this, 'inView', {\n\t\t\t\tget: function () {\n\t\t\t\t\tcamera.updateMatrixWorld(); // make sure the camera matrix is updated\n\t\t\t\t\tcamera.matrixWorldInverse.getInverse(camera.matrixWorld);\n\t\t\t\t\tcameraViewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\t\t\t\t\tfrustum.setFromMatrix(cameraViewProjectionMatrix);\n\t\t\t\t\treturn frustum.intersectsObject(self.object);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tVRObject.prototype.hide = function () {\n\t\tthis.object.visible = false;\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.show = function () {\n\t\tthis.object.visible = true;\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.moveTo = function (x, y, z) {\n\t\tvar position = this.object.position;\n\n\t\tx = !isNaN(x) ? x : position.x;\n\t\ty = !isNaN(y) ? y : position.y;\n\t\tz = !isNaN(z) ? z : position.z;\n\n\t\tposition.set(x, y, z);\n\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.moveX = function (distance) {\n\t\tthis.object.translateX(distance);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.moveY = function (distance) {\n\t\tthis.object.translateY(distance);\n\t\treturn this;\n\t};\n\tVRObject.prototype.moveUp = VRObject.prototype.moveY;\n\tVRObject.prototype.moveDown = function (distance) {\n\t\tthis.moveY(-distance);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.moveZ = function (distance) {\n\t\tthis.object.translateZ(distance);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.rotateX = function (angle) {\n\t\tthis.object.rotateOnAxis(xAxis, angle);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.rotateY = function (angle) {\n\t\tthis.object.rotateOnAxis(yAxis, angle);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.rotateZ = function (angle) {\n\t\tthis.object.rotateOnAxis(zAxis, angle);\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.setScale = function (x, y, z) {\n\t\tvar scale = this.object.scale;\n\n\t\tif (x !== undefined && !isNaN(x)) {\n\t\t\tif (y === undefined && z === undefined) {\n\t\t\t\ty = z = x;\n\t\t\t}\n\t\t}\n\n\t\tx = !isNaN(x) ? x : scale.x;\n\t\ty = !isNaN(y) ? y : scale.y;\n\t\tz = !isNaN(z) ? z : scale.z;\n\n\t\tscale.set(x, y, z);\n\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.setMaterial = function (material, options) {\n\t\tif (material && this.object instanceof THREE.Mesh) {\n\t\t\tif (typeof material === 'function') {\n\t\t\t\tmaterial = material();\n\t\t\t} else if (typeof material === 'string' && materials[material]) {\n\t\t\t\tmaterial = materials[material](options);\n\t\t\t} else if (material && !(material instanceof THREE.Material) && typeof material !== 'number') {\n\t\t\t\ttry {\n\t\t\t\t\tmaterial = materials.material(material);\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\tif (material instanceof THREE.Material) {\n\t\t\t\tthis.object.material = material;\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tVRObject.prototype.update = function () {};\n\n\tVRObject.prototype.raycastable = true;\n\n\tVRObject.repeat = function (count, options) {\n\t\tvar i,\n\t\t\tchange = false,\n\t\t\tlastObject = this,\n\t\t\tcurrentPosition = new THREE.Vector3(),\n\t\t\tdeltaPosition = new THREE.Vector3(),\n\t\t\tcurrentQuaternion = new THREE.Quaternion(),\n\t\t\tdeltaQuaternion = new THREE.Quaternion();\n\n\t\tif (!options) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.offset) {}\n\n\t\tfor (i = 0; i < count; i++) {\n\n\t\t}\n\t};\n\n\tVRObject.findObject = function (object) {\n\t\tif (object instanceof VRObject) {\n\t\t\treturn object;\n\t\t}\n\n\t\tif (object && object instanceof THREE.Object3D) {\n\t\t\tif (allObjects.get) {\n\t\t\t\treturn allObjects.get(object);\n\t\t\t}\n\n\t\t\treturn allObjects[object.id];\n\t\t}\n\n\t\t// if (typeof object === 'number') {\n\t\t// \treturn allObjects[object];\n\t\t// }\n\t};\n\n\treturn VRObject;\n\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/vr-object.js\n ** module id = 7\n ** module chunks = 0\n **/","var map = {\n\t\"./box\": 11,\n\t\"./box.js\": 11,\n\t\"./cylinder\": 12,\n\t\"./cylinder.js\": 12,\n\t\"./empty\": 9,\n\t\"./empty.js\": 9,\n\t\"./floor\": 13,\n\t\"./floor.js\": 13,\n\t\"./grid\": 14,\n\t\"./grid.js\": 14,\n\t\"./image\": 15,\n\t\"./image.js\": 15,\n\t\"./panorama\": 16,\n\t\"./panorama.js\": 16,\n\t\"./sky\": 17,\n\t\"./sky.js\": 17,\n\t\"./sound\": 18,\n\t\"./sound.js\": 18,\n\t\"./sphere\": 19,\n\t\"./sphere.js\": 19,\n\t\"./text\": 20,\n\t\"./text.js\": 20,\n\t\"./torus\": 21,\n\t\"./torus.js\": 21,\n\t\"./video\": 22,\n\t\"./video.js\": 22\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 8;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects ^\\.\\/.*$\n ** module id = 8\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\treturn function empty(parent, options) {\n\t\tvar obj = new THREE.Object3D();\n\n\t\tobj.name = 'empty';\n\n\t\tparent.add(obj);\n\n\t\treturn obj;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/empty.js\n ** module id = 9\n ** module chunks = 0\n **/","/**\n * NoSleep.js v0.5.0 - git.io/vfn01\n * Rich Tibbett\n * MIT license\n **/\n(function(root) {\n  // UA matching\n  var ua = {\n    Android: /Android/ig.test(navigator.userAgent),\n    iOS: /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent)\n  };\n\n  var media = {\n    WebM: \"data:video/webm;base64,GkXfo0AgQoaBAUL3gQFC8oEEQvOBCEKCQAR3ZWJtQoeBAkKFgQIYU4BnQI0VSalmQCgq17FAAw9CQE2AQAZ3aGFtbXlXQUAGd2hhbW15RIlACECPQAAAAAAAFlSua0AxrkAu14EBY8WBAZyBACK1nEADdW5khkAFVl9WUDglhohAA1ZQOIOBAeBABrCBCLqBCB9DtnVAIueBAKNAHIEAAIAwAQCdASoIAAgAAUAmJaQAA3AA/vz0AAA=\",\n    MP4: \"data:video/mp4;base64,AAAAHGZ0eXBpc29tAAACAGlzb21pc28ybXA0MQAAAAhmcmVlAAAAG21kYXQAAAGzABAHAAABthADAowdbb9/AAAC6W1vb3YAAABsbXZoZAAAAAB8JbCAfCWwgAAAA+gAAAAAAAEAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIVdHJhawAAAFx0a2hkAAAAD3wlsIB8JbCAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAIAAAACAAAAAABsW1kaWEAAAAgbWRoZAAAAAB8JbCAfCWwgAAAA+gAAAAAVcQAAAAAAC1oZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVmlkZW9IYW5kbGVyAAAAAVxtaW5mAAAAFHZtaGQAAAABAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEAAAAMdXJsIAAAAAEAAAEcc3RibAAAALhzdHNkAAAAAAAAAAEAAACobXA0dgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIAAgASAAAAEgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABj//wAAAFJlc2RzAAAAAANEAAEABDwgEQAAAAADDUAAAAAABS0AAAGwAQAAAbWJEwAAAQAAAAEgAMSNiB9FAEQBFGMAAAGyTGF2YzUyLjg3LjQGAQIAAAAYc3R0cwAAAAAAAAABAAAAAQAAAAAAAAAcc3RzYwAAAAAAAAABAAAAAQAAAAEAAAABAAAAFHN0c3oAAAAAAAAAEwAAAAEAAAAUc3RjbwAAAAAAAAABAAAALAAAAGB1ZHRhAAAAWG1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAAK2lsc3QAAAAjqXRvbwAAABtkYXRhAAAAAQAAAABMYXZmNTIuNzguMw==\"\n  };\n\n  function addSourceToVideo(element, type, dataURI) {\n    var source = document.createElement('source');\n    source.src = dataURI;\n    source.type = \"video/\" + type;\n    element.appendChild(source);\n  }\n\n  // NoSleep instance constructor\n  var NoSleep = function() {\n    if (ua.iOS) {\n      this.noSleepTimer = null;\n    } else if (ua.Android) {\n      // Set up no sleep video element\n      this.noSleepVideo = document.createElement('video');\n      this.noSleepVideo.setAttribute(\"loop\", \"\");\n\n      // Append nosleep video sources\n      addSourceToVideo(this.noSleepVideo, \"webm\", media.WebM);\n      addSourceToVideo(this.noSleepVideo, \"mp4\", media.MP4);\n    }\n\n    return this;\n  };\n\n  // Enable NoSleep instance\n  NoSleep.prototype.enable = function(duration) {\n    if (ua.iOS) {\n      this.disable();\n      this.noSleepTimer = window.setInterval(function() {\n        window.location = window.location;\n        window.setTimeout(window.stop, 0);\n      }, duration || 15000);\n    } else if (ua.Android) {\n      this.noSleepVideo.play();\n    }\n  };\n\n  // Disable NoSleep instance\n  NoSleep.prototype.disable = function() {\n    if (ua.iOS) {\n      if (this.noSleepTimer) {\n        window.clearInterval(this.noSleepTimer);\n        this.noSleepTimer = null;\n      }\n    } else if (ua.Android) {\n      this.noSleepVideo.pause();\n    }\n  };\n\n  // Append NoSleep API to root object\n  root.NoSleep = NoSleep;\n})(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./bower_components/nosleep/NoSleep.js\n ** module id = 10\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three'),\n\t\tgeometry = new THREE.BoxGeometry( 1, 1, 1 );\n\n\treturn function box(parent, options) {\n\t\tvar mesh;\n\n\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\tmesh.name = 'box';\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/box.js\n ** module id = 11\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\tfunction cylinder(parent, options) {\n\t\tvar geometry,\n\t\t\tmesh;\n\n\t\tgeometry = new THREE.CylinderGeometry(\n\t\t\toptions.radiusTop === undefined ? 0.5 : options.radiusTop,\n\t\t\toptions.radiusBottom === undefined ? 0.5 : options.radiusBottom,\n\t\t\toptions.height === undefined ? 1 : options.height,\n\t\t\toptions.radiusSegments === undefined ? 16 : options.radiusSegments,\n\t\t\toptions.heightSegments,\n\t\t\toptions.openEnded\n\t\t);\n\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\tmesh.name = 'cylinder';\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t}\n\n\treturn cylinder;\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/cylinder.js\n ** module id = 12\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\tfunction floor(parent, options) {\n\t\tvar obj,\n\t\t\tgeometry;\n\n\t\tgeometry = new THREE.CircleGeometry( options.radius || 100, options.segments || 16 );\n\t\tgeometry.applyMatrix( new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\n\t\tobj = new THREE.Mesh(\n\t\t\tgeometry,\n\t\t\tmaterials.checkerboard({\n\t\t\t\trepeat: 100\n\t\t\t})\n\t\t);\n\t\tobj.name = 'floor';\n\n\t\tobj.receiveShadow = true;\n\n\t\tparent.add(obj);\n\n\t\treturn obj;\n\t}\n\n\treturn floor;\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/floor.js\n ** module id = 13\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar THREE = require('three');\n\n\treturn function box(parent, options) {\n\t\tvar obj,\n\t\t\tsize = options && options.size || 10,\n\t\t\tstep = options && options.step || 1;\n\n\t\tobj = new THREE.GridHelper(size, step);\n\t\tobj.name = 'grid';\n\t\tif (options) {\n\t\t\tobj.setColors(options.colorCenterLine || obj.color1, options.colorGrid || obj.color2);\n\t\t}\n\t\tobj.geometry.computeBoundingBox();\n\n\t\tparent.add(obj);\n\n\t\treturn obj;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/grid.js\n ** module id = 14\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\treturn function image(parent, options) {\n\t\tvar geometry,\n\t\t\tmaterial,\n\t\t\tmesh,\n\t\t\tsrc,\n\t\t\ttex,\n\t\t\tself = this;\n\n\t\tif (typeof options === 'string') {\n\t\t\tsrc = options;\n\t\t} else if (options) {\n\t\t\tsrc = options.src;\n\t\t}\n\n\t\tif (src) {\n\t\t\ttex = materials.imageTexture(src, THREE.UVMapping, function (t, image) {\n\t\t\t\t//todo: don't do any of this if object has been deleted\n\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(1, image.naturalHeight / image.naturalWidth, 1));\n\t\t\t\tmaterial.map = tex;\n\t\t\t\tmaterial.visible = true;\n\t\t\t\tmesh.visible = true;\n\t\t\t\tparent.add(mesh);\n\n\t\t\t\tself.emit('loaded');\n\t\t\t});\n\t\t}\n\n\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1, 8);\n\n\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\tside: THREE.DoubleSide,\n\t\t\ttransparent: true,\n\t\t\tmap: tex\n\t\t});\n\n\t\tmesh = new THREE.Mesh( geometry, material );\n\n\t\tmesh.visible = false;\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/image.js\n ** module id = 15\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n    var p = {};\n        p.scaleX = p.scaleX || 1;\n        p.scaleY = p.scaleY || 1;\n        p.offsetX = p.offsetX || 0;\n        p.offsetY = p.offsetY || 0;\n        p.phiStart = p.phiStart || 0;\n        p.phiLength = p.phiLength || Math.PI * 2;\n        p.thetaStart = p.thetaStart || 0;\n        p.thetaLength = p.thetaLength || Math.PI;\n    // Reduce ptr.\n    var isSupportWebgl = Boolean(window.isSupportWebgl);\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three'),\n        // geometry = new THREE.BoxGeometry(15, 15, 15, 10, 10, 10);\n            // geometry = new THREE.SphereGeometry(100, 60, 60);\n        // geometry = new THREE.SphereGeometry(60, 100, 100,\n        geometry = new THREE.SphereGeometry(16, 32, 32, p.phiStart, p.phiLength, p.thetaStart, p.thetaLength);\n        geometry.applyMatrix(new THREE.Matrix4().makeScale(-2, 2, 2.3));\n        geometry.applyMatrix(new THREE.Matrix4().makeRotationY(- Math.PI / 3));\n    // Will not render panorama if already contains the key.\n    var mapRender = {};\n    var isListener = false;\n    // Will use css3drenderer if not support webgl.\n    \n    var texturePlaceholder = document.createElement( 'canvas' );\n    texturePlaceholder.width = 64;\n    texturePlaceholder.height = 64;\n    var context = texturePlaceholder.getContext( '2d' );\n    context.fillStyle = 'rgb( 200, 200, 200 )';\n    context.fillRect( 0, 0, texturePlaceholder.width, texturePlaceholder.height );\n\tvar STR_CHILDEN_NAME = 'obj3DElement';\n\n    function loadTexture( path, _parent ) {\n        var texture = new THREE.Texture( texturePlaceholder );\n        var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5 } );\n        var image = new Image();\n        image.onload = function () {\n            texture.image = this;\n            texture.needsUpdate = true;\n            _parent.dispatchEvent({\n                type: 'img-loaded'\n            });\n        };\n        image.src = path;\n        return material;\n    }\n\n\treturn function panorama(parent, options, renderer) {\n        var src,\n            preview,\n            cubeSrc = {};\n\t\tvar self = this;\n\t\tvar material,\n\t\t\tmesh,\n            pretex,\n            mapKey,\n\t\t\ttex;\n\n\t\tif (typeof options === 'string') {\n\t\t\tsrc = options;\n\t\t} else if (options) {\n\t\t\tsrc = options.src;\n            preview = options.preview;\n            if (options.left) {\n                cubeSrc.left = options.left;\n                cubeSrc.right = options.right;\n                cubeSrc.down = options.down;\n                cubeSrc.top = options.top;\n                cubeSrc.front = options.front;\n                cubeSrc.back = options.back;\n            }\n\t\t}\n        mapKey = src;\n        if (!isSupportWebgl) {\n            mapKey = cubeSrc.left;\n        }\n        if (mapRender[mapKey]) {\n            // Remove all mesh object if scene contains them.\n            // Optimezei and Reduce Memory Usage for Panorama Model.\n            for (var key in mapRender) {\n                if(mapRender.hasOwnProperty(key)) {\n                    while (parent.getObjectByName(key)) {\n                        parent.remove(parent.getObjectByName(key));\n                    }\n                }\n            }\n            parent.add(mapRender[mapKey]);\n            parent.dispatchEvent({\n                type: 'img-loaded'\n            });\n            return mapRender[mapKey];\n        }\n\t\tif (renderer instanceof THREE.CSS3DRenderer) {\n            var lastCube = parent.getObjectByName('cube');\n            if (lastCube) {\n                for ( var i = 0; i < 6; i ++ ) {\n                    if (lastCube.getObjectByName(STR_CHILDEN_NAME + i)) {\n                        lastCube.remove(lastCube.getObjectByName(STR_CHILDEN_NAME + i));\n                    }\n                }\n                //\n                parent.remove(lastCube);\n            }\n\t\t\tvar cube = new THREE.Object3D();\n\t\t\tvar sides = [\n                {\n                    url: cubeSrc.right,\n                    position: [ -512, 0, 0 ],\n                    rotation: [ 0, Math.PI / 2, 0 ]\n                },\n                {\n                    url: cubeSrc.left,\n                    position: [ 512, 0, 0 ],\n                    rotation: [ 0, -Math.PI / 2, 0 ]\n                },\n                {\n                    url: cubeSrc.top,\n                    position: [ 0,  512, 0 ],\n                    rotation: [ Math.PI / 2, 0, Math.PI ]\n                },\n                {\n                    url: cubeSrc.down,\n                    position: [ 0, -512, 0 ],\n                    rotation: [ - Math.PI / 2, 0, Math.PI ]\n                },\n                {\n                    url: cubeSrc.front,\n                    position: [ 0, 0,  512 ],\n                    rotation: [ 0, Math.PI, 0 ]\n                },\n                {\n                    url: cubeSrc.back,\n                    position: [ 0, 0, -512 ],\n                    rotation: [ 0, 0, 0 ]\n                }\n            ];\n            // Remove children from cube;\n            parent.add(cube);\n            var callbackOnload = function () {\n                // Notify outside to do something when image has been loaded.\n                parent.dispatchEvent({\n                    type: 'img-loaded'\n                });\n            };\n            for ( var i = 0; i < sides.length; i ++ ) {\n                var side = sides[ i ];\n                var element = document.createElement( 'img' );\n                element.width = 1026; // 2 pixels extra to close the gap.\n                element.src = side.url;\n                element.onload = callbackOnload;\n                var object = new THREE.CSS3DObject( element );\n                object.name = STR_CHILDEN_NAME + i;\n                object.position.fromArray( side.position );\n                object.rotation.fromArray( side.rotation );\n                cube.add( object );\n            }\n\t\t\tcube.name = 'cube';\n            return cube;\n\n\t\t}\n        if (!isSupportWebgl) {\n            var arrMaterial = [\n                loadTexture( cubeSrc.right, parent ), // right\n                loadTexture( cubeSrc.left, parent ), // left\n                loadTexture( cubeSrc.top, parent ), // top\n                loadTexture( cubeSrc.down, parent ), // bottom\n                loadTexture( cubeSrc.front, parent ), // front\n                loadTexture( cubeSrc.back, parent ) // back\n            ];\n\n            mesh = new THREE.Mesh( new THREE.BoxGeometry( 60, 60, 60, 20, 20, 20 ), new THREE.MultiMaterial( arrMaterial ) );\n            mesh.scale.x = - 1;\n            // The primy name use one of array.\n            mesh.name = mapKey;\n            // Fisheye\n            // for ( var i = 0, l = mesh.geometry.vertices.length; i < l; i ++ ) {\n            //     var vertex = mesh.geometry.vertices[ i ];\n            //     vertex.normalize();\n            //     vertex.multiplyScalar( 550 );\n            // }\n            mapRender[mapKey] = mesh;\n            parent.add( mesh );\n            return mesh;\n        }\n\n\t\tif (preview) {\n\t\t\tpretex = materials.imageTexture(preview, THREE.UVMapping, function () {\n\t\t\t});\n\t\t}\n\n\t\tif (src) {\n            if (!isListener) {\n                parent.addEventListener('loaded', function (event) {\n                    var data = event.data;\n                    while (parent.getObjectByName('preview')) {\n                        parent.remove(parent.getObjectByName('preview'));\n                    }\n\n                    material = new THREE.MeshBasicMaterial({\n                        map: data.tex\n                    });\n                    mesh = new THREE.Mesh(geometry, material);\n                    mapRender[data.src] = mesh;\n\n                    mesh.name = src;\n\n                    parent.add(mesh);\n                    parent.dispatchEvent({\n                        type: 'img-loaded'\n                    });\n                });\n                isListener = true;\n            }\n\t\t\ttex = materials.imageTexture(src, THREE.UVMapping, function () {\n                parent.dispatchEvent({\n                    type: 'loaded',\n                    data: {\n                        src: src,\n                        tex: tex\n                    }\n                });\n\t\t\t\tself.emit('loaded');\n\t\t\t});\n\t\t}\n\n\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t// transparent: true,\n\t\t\t// envMap: tex,\n\t\t\tmap: pretex\n            // side: THREE.DoubleSide,\n            // debug\n            // wireframe: true,\n            // depthWrite: false\n            // envMap:cubemap\n\t\t});\n\n\t\tmesh = new THREE.Mesh(geometry, material);\n\n\t\tif (options && options.stereo) {\n\t\t\tif (options.stereo === 'vertical') {\n\t\t\t\ttex.repeat.y = 0.5;\n\t\t\t} else {\n\t\t\t\ttex.repeat.x = 0.5;\n\t\t\t}\n\t\t\tmesh.userData.stereo = options.stereo;\n\t\t}\n\n        mesh.name = 'preview';\n\n        parent.add(mesh);\n\n\t\tthis.raycastable = false;\n\n\t\treturn mesh;\n\t};\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/panorama.js\n ** module id = 16\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three'),\n\t\tTAU = Math.PI * 2,\n\t\tHALF_PI = Math.PI / 2,\n\n\t\tdistance = 400000,\n\t\tscratchVector = new THREE.Vector3(),\n\n\t\tparams = [\n\t\t\t'luminance',\n\t\t\t'turbidity',\n\t\t\t'reileigh',\n\t\t\t'mieCoefficient',\n\t\t\t'mieDirectionalG'\n\t\t];\n\n\trequire('imports?THREE=three!SkyShader');\n\n\treturn function sky(parent, options) {\n\t\tvar obj = new THREE.Sky(),\n\t\t\tself = this,\n\t\t\tscene = parent,\n\t\t\tlight,\n\t\t\tsunPosition,\n\t\t\tazimuth = Math.PI / 6,\n\t\t\taltitude = Math.PI / 6;\n\n\t\tfunction mod(x, y) {\n\t\t\treturn x - y * Math.floor(x / y);\n\t\t}\n\n\t\tfunction update() {\n\t\t\tvar sinTheta,\n\t\t\t\tcosTheta,\n\t\t\t\tphi,\n\t\t\t\tsinPhi,\n\t\t\t\tcosPhi;\n\n\t\t\tsinTheta = Math.sin(altitude);\n\t\t\tcosTheta = Math.cos(altitude);\n\t\t\tphi = -HALF_PI - azimuth;\n\t\t\tsinPhi = Math.sin(phi);\n\t\t\tcosPhi = Math.cos(phi);\n\n\t\t\tsunPosition.set(\n\t\t\t\tdistance * cosPhi * cosTheta,\n\t\t\t\tdistance * sinTheta,\n\t\t\t\tdistance * sinPhi * cosTheta\n\t\t\t);\n\n\t\t\tif (light) {\n\t\t\t\tlight.intensity = 1.5 * Math.max(0.0, 1.0 - Math.exp(-((Math.PI / 1.95 - Math.abs(HALF_PI - altitude)) / 1.5)));\n\t\t\t\tlight.position.copy(sunPosition).normalize().multiplyScalar(100);\n\t\t\t}\n\t\t}\n\n\t\tobj.mesh.name = 'sky';\n\n\t\tparent.add(obj.mesh);\n\n\t\twhile (!(scene instanceof THREE.Scene) && scene.parent) {\n\t\t\tscene = scene.parent;\n\t\t}\n\t\tlight = scene.getObjectByName('directional-light');\n\n\t\tthis.setOptions = function (options) {\n\t\t\tvar needUpdate = false,\n\t\t\t\taltitude,\n\t\t\t\tazimuth;\n\n\t\t\tif (options) {\n\t\t\t\tparams.forEach(function (param) {\n\t\t\t\t\tvar val = options[param];\n\t\t\t\t\tif (val !== undefined) {\n\t\t\t\t\t\tval = parseFloat(val);\n\t\t\t\t\t\tif (!isNaN(val)) {\n\t\t\t\t\t\t\tobj.uniforms[param].value = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (options.sunPosition instanceof THREE.Vector3) {\n\t\t\t\t\tobj.uniforms.sunPosition.value.copy(options.sunPosition);\n\t\t\t\t} else if (Array.isArray(options.sunPosition)) {\n\t\t\t\t\tobj.uniforms.sunPosition.value.set(obj.uniforms.sunPosition.value, options.sunPosition);\n\t\t\t\t} else {\n\t\t\t\t\tself.altitude = options.altitude;\n\t\t\t\t\tself.azimuth = options.azimuth;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tObject.defineProperty(this, 'azimuth', {\n\t\t\tset: function (val) {\n\t\t\t\tval = mod(parseFloat(val), TAU);\n\t\t\t\tif (!isNaN(val) && val !== azimuth) {\n\t\t\t\t\tazimuth = val;\n\t\t\t\t\tupdate();\n\t\t\t\t}\n\t\t\t},\n\t\t\tget: function () {\n\t\t\t\treturn azimuth;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'altitude', {\n\t\t\tset: function (val) {\n\t\t\t\tval = mod(parseFloat(val), TAU);\n\t\t\t\tif (!isNaN(val) && val !== altitude) {\n\t\t\t\t\taltitude = val;\n\t\t\t\t\tupdate();\n\t\t\t\t}\n\t\t\t},\n\t\t\tget: function() {\n\t\t\t\treturn altitude;\n\t\t\t}\n\t\t});\n\n\t\tthis.setAltitude = function (val) {\n\t\t\tself.altitude = val;\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.setAzimuth = function (val) {\n\t\t\tself.azimuth = val;\n\t\t\treturn this;\n\t\t};\n\n\t\tsunPosition = obj.uniforms.sunPosition.value;\n\t\tupdate();\n\n\t\tthis.setOptions(options);\n\n\t\tthis.raycastable = false;\n\n\t\treturn obj.mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/sky.js\n ** module id = 17\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\trequire('imports?THREE=three!../lib/ThreeAudio');\n\n\treturn function sound(parent, options) {\n\t\tvar obj,\n\t\t\tsrc,\n\t\t\tlistener,\n\t\t\tscene = parent;\n\n\t\tif (typeof options === 'string' || Array.isArray(options)) {\n\t\t\tsrc = options;\n\t\t} else if (options) {\n\t\t\tsrc = options.src;\n\t\t}\n\n\t\twhile (!(scene instanceof THREE.Scene) && scene.parent) {\n\t\t\tscene = scene.parent;\n\t\t}\n\n\t\tlistener = scene.getObjectByName('audio-listener');\n\t\tobj = new THREE.Audio(listener);\n\t\t// obj.setLoop(true);\n\t\tobj.load(src);\n\n\t\tthis.start = obj.start.bind(obj);\n\t\tthis.volume = obj.volume.bind(obj);\n\n\t\tparent.add(obj);\n\n\t\treturn obj;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/sound.js\n ** module id = 18\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\treturn function box(parent, options) {\n\t\tvar geometry,\n\t\t\tmesh;\n\n\t\tgeometry = new THREE.SphereGeometry(\n\t\t\toptions.radius === undefined ? 0.5 : options.radius,\n\t\t\toptions.widthSegments === undefined ? 16 : options.widthSegments,\n\t\t\toptions.heightSegments === undefined ? 12 : options.heightSegments,\n\t\t\toptions.phiStart,\n\t\t\toptions.phiLength,\n\t\t\toptions.thetaStart,\n\t\t\toptions.thetaLength\n\t\t);\n\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\tmesh.name = 'sphere';\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/sphere.js\n ** module id = 19\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar THREE = require('three'),\n\t\tfontSizeRegex = /(\\d+)px/i,\n\t\tnewLineRegex = /[\\n\\r]/,\n\t\tspaceRegex = /[\\t ]/,\n\t\tlog2 = Math.log(2),\n\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1);\n\n\treturn function text(parent, options) {\n\t\tvar self = this,\n\t\t\tmaterial,\n\t\t\tcanvas,\n\t\t\tctx,\n\t\t\tmesh,\n\t\t\tcontainer,\n\t\t\tsrc,\n\t\t\ttextWidth = 0,\n\t\t\ttextHeight = 0,\n\t\t\tprops = {\n\t\t\t\ttext: '',\n\t\t\t\tfont: '80px sans-serif',\n\t\t\t\ttextAlign: 'center',\n\t\t\t\ttextBaseline: '',\n\t\t\t\tdirection: '',\n\t\t\t\tfillStyle: 'white',\n\t\t\t\tresolution: 256, //pixels per meter\n\t\t\t\twrap: 5 //in meters\n\t\t\t},\n\t\t\ttex;\n\n\t\tfunction nextPowerOfTwo(n) {\n\t\t\treturn Math.pow(2, Math.ceil(Math.log(n) / log2));\n\t\t}\n\n\t\tfunction Line(word) {\n\t\t\tthis.spaceWidth = ctx.measureText(' ').width;\n\t\t\tthis.totalWidth = 0;\n\t\t\tthis.wordsWidth = 0;\n\t\t\tthis.words = [];\n\t\t\tthis.wrap = false;\n\t\t\tif (word) {\n\t\t\t\tthis.add(word);\n\t\t\t}\n\t\t}\n\n\t\tLine.prototype.text = function () {\n\t\t\treturn this.words.join(' ');\n\t\t};\n\n\t\tLine.prototype.add = function(word) {\n\t\t\tvar wordWidth;\n\t\t\tif (this.words.length) {\n\t\t\t\tthis.totalWidth += this.spaceWidth;\n\t\t\t}\n\t\t\tthis.words.push(word);\n\t\t\twordWidth = Line.measure(word);\n\t\t\tthis.totalWidth += wordWidth;\n\t\t\tthis.wordsWidth += wordWidth;\n\t\t};\n\n\t\tLine.prototype.measure = function(word) {\n\t\t\tvar width = this.totalWidth;\n\t\t\tif (word) {\n\t\t\t\twidth += Line.measure(word);\n\t\t\t\tif (this.words.length) {\n\t\t\t\t\twidth += this.spaceWidth;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn width;\n\t\t};\n\n\t\tLine.measure = function(word) {\n\t\t\treturn ctx.measureText(word).width;\n\t\t};\n\n\t\tfunction update() {\n\t\t\t//text stuffs\n\t\t\tvar text,\n\t\t\t\tword = '',\n\t\t\t\tletter,\n\t\t\t\tisSpace,\n\t\t\t\tline,\n\t\t\t\tlines = [],\n\t\t\t\tparse,\n\n\t\t\t\t//layout\n\t\t\t\tdirection = getComputedStyle(document.body).direction,\n\t\t\t\tinherit,\n\t\t\t\tresolution = parseFloat(props.resolution) || 256,\n\t\t\t\twrap,\n\t\t\t\twrapped = false,\n\t\t\t\tfontSize,\n\t\t\t\tpadding,\n\n\t\t\t\t//measurements\n\t\t\t\tlineHeight,\n\t\t\t\ti, start, y, measure,\n\t\t\t\twidth,\n\t\t\t\theight = 0;\n\n\t\t\twrap = parseFloat(props.wrap);\n\t\t\tif (isNaN(wrap) || wrap < 0) {\n\t\t\t\twrap = 5;\n\t\t\t}\n\t\t\twidth = resolution * wrap;\n\n\t\t\tctx.font = props.font;\n\t\t\tparse = fontSizeRegex.exec(ctx.font);\n\t\t\tfontSize = parseFloat(parse && parse[1]) || 50;\n\n\t\t\tlineHeight = fontSize * 1.5;\n\n\t\t\tline = new Line();\n\n\t\t\ttext = props.text === 0 ? '0' : String(props.text || '');\n\t\t\tif (wrap) {\n\t\t\t\ttext = text.trim() + ' ';\n\t\t\t\tfor (i = 0; i < text.length; i++) {\n\t\t\t\t\tletter = text.charAt(i);\n\t\t\t\t\tif (newLineRegex.test(letter)) {\n\t\t\t\t\t\tline.add(word);\n\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t\tword = '';\n\t\t\t\t\t\tline = new Line();\n\t\t\t\t\t} else if (spaceRegex.test(letter)) {\n\t\t\t\t\t\tmeasure = line.measure(word);\n\t\t\t\t\t\tif (measure < width) {\n\t\t\t\t\t\t\tif (line) {\n\t\t\t\t\t\t\t\tline.add(word);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tline = new Line(word);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (!line && Line.measure(word) >= width) {\n\t\t\t\t\t\t\t//one very long word\n\t\t\t\t\t\t\tlines.push(new Line(word));\n\t\t\t\t\t\t\tword = '';\n\t\t\t\t\t\t\tline = new Line();\n\t\t\t\t\t\t\twrapped = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tline.wrap = true;\n\t\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t\t\tline = new Line(word);\n\t\t\t\t\t\t\twrapped = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tword = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tword += letter;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (line) {\n\t\t\t\t\tlines.push(line);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlines.push(new Line(text));\n\t\t\t}\n\n\t\t\tif (!width || !wrapped) {\n\t\t\t\twidth = lines.reduce(function (previous, line) {\n\t\t\t\t\treturn Math.max(previous, line.totalWidth);\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t\twidth = Math.min(width, 2048);\n\n\t\t\theight = lines.length * lineHeight;\n\n\t\t\tif (options && options.mipmap === false) {\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\t\t\t} else {\n\t\t\t\tcanvas.width = nextPowerOfTwo(width);\n\t\t\t\tcanvas.height = nextPowerOfTwo(height);\n\t\t\t}\n\n\t\t\tmesh.scale.set(canvas.width / resolution, canvas.height / resolution, 1);\n\n\t\t\t//debug\n\t\t\t// ctx.fillStyle = 'rgba(100, 100, 100, 0.5)';\n\t\t\t// ctx.fillRect(0, 0, canvas.width, canvas.height);\n\t\t\t// document.body.appendChild(canvas);\n\t\t\t// canvas.style.cssText = 'position: absolute; width: auto !important; height: auto !important; max-width: 80%';\n\n\t\t\t/*\n\t\t\tset all these properties again because they get reset\n\t\t\twhen you resize the canvas\n\t\t\t*/\n\t\t\tctx.font = props.font;\n\t\t\tctx.textAlign = props.textAlign;\n\t\t\tctx.textBaseline = props.textBaseline;\n\t\t\tctx.direction = props.direction;\n\t\t\tctx.fillStyle = props.fillStyle;\n\t\t\t//todo: add maxWidth?\n\n\t\t\tpadding = (canvas.width - width) / 2;\n\t\t\ty = (canvas.height - height) / 2 + lineHeight / 2;\n\n\t\t\tinherit = (ctx.direction === '' || ctx.direction === 'inherit');\n\t\t\tif (ctx.textAlign === 'center') {\n\t\t\t\tstart = canvas.width / 2;\n\t\t\t} else if (ctx.textAlign === 'right' ||\n\t\t\t\tctx.textAlign === 'end' && (ctx.direction === 'ltr' || inherit && direction === 'ltr') ||\n\t\t\t\tctx.textAlign === 'start' && (ctx.direction === 'rtl' || inherit && direction === 'rtl')) {\n\n\t\t\t\tstart = canvas.width - padding;\n\t\t\t} else {\n\t\t\t\tstart = padding;\n\t\t\t}\n\n\t\t\tlines.forEach(function (line) {\n\t\t\t\tvar x,\n\t\t\t\t\tspace;\n\t\t\t\tif (props.textAlign === 'justify' && line.wrap && line.words.length > 1) {\n\t\t\t\t\tx = start;\n\t\t\t\t\tspace = (width - line.wordsWidth) / (line.words.length - 1);\n\t\t\t\t\tline.words.forEach(function (word) {\n\t\t\t\t\t\tctx.fillText(word, x, y);\n\t\t\t\t\t\tx += space + Line.measure(word);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tctx.fillText(line.text(), start, y);\n\t\t\t\t}\n\t\t\t\ty += lineHeight;\n\t\t\t});\n\n\t\t\ttextWidth = width / resolution;\n\t\t\ttextHeight = lines.length * lineHeight / resolution;\n\n\t\t\ttex.needsUpdate = true;\n\n\t\t\tmesh.name = text.trim();\n\t\t}\n\n\t\tcanvas = document.createElement('canvas');\n\t\tctx = canvas.getContext('2d');\n\t\ttex = new THREE.Texture(canvas);\n\n\t\tif (canvas.width === nextPowerOfTwo(canvas.width) &&\n\t\t\tcanvas.height === nextPowerOfTwo(canvas.height)) {\n\n\t\t\ttex.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\ttex.generateMipmaps = true;\n\t\t}\n\n\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\tside: THREE.DoubleSide,\n\t\t\ttransparent: true,\n\t\t\tmap: tex\n\t\t});\n\n\t\tmesh = new THREE.Mesh(geometry, material);\n\n\t\tcontainer = new THREE.Object3D();\n\t\tcontainer.name = 'text';\n\t\tcontainer.add(mesh);\n\t\tparent.add(container);\n\n\t\tif (typeof options === 'string') {\n\t\t\tprops.text = options;\n\t\t} else if (options) {\n\t\t\tObject.keys(props).forEach(function (key) {\n\t\t\t\tprops[key] = options[key] || props[key];\n\t\t\t});\n\t\t}\n\t\tupdate();\n\n\t\tObject.keys(props).forEach(function (key) {\n\t\t\tObject.defineProperty(self, key, {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn props[key];\n\t\t\t\t},\n\t\t\t\tset: function (val) {\n\t\t\t\t\tprops[key] = val;\n\t\t\t\t\tupdate();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tObject.defineProperty(self, 'width', {\n\t\t\tget: function () {\n\t\t\t\treturn textWidth;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(self, 'height', {\n\t\t\tget: function () {\n\t\t\t\treturn textHeight;\n\t\t\t}\n\t\t});\n\n\t\tthis.material = material;\n\n\t\treturn container;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/text.js\n ** module id = 20\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar materials = require('../materials'),\n\t\tTHREE = require('three');\n\n\treturn function torus(parent, options) {\n\t\tvar geometry,\n\t\t\tmesh;\n\n\t\tgeometry = new THREE.TorusGeometry(\n\t\t\toptions.radius === undefined ? 0.5 : options.radius,\n\t\t\toptions.tube === undefined ? 0.125 : options.tube,\n\t\t\toptions.radialSegments === undefined ? 12 : options.radialSegments,\n\t\t\toptions.tubularSegments === undefined ? 16 : options.tubularSegments,\n\t\t\toptions.arc\n\t\t);\n\t\tmesh = new THREE.Mesh(geometry, materials.standard());\n\t\tmesh.name = 'torus';\n\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/torus.js\n ** module id = 21\n ** module chunks = 0\n **/","module.exports = (function () {\n\t'use strict';\n\n\tvar THREE = require('three'),\n\t\turlRegex = require('../utils/urlregex'),\n\t\textRegex = /\\.(webm|ogg|ogv|m4v|mp4|mov)/i,\n\t\tvideo;\n\n\tvideo = function (parent, options) {\n\t\tvar geometry,\n\t\t\tmaterial,\n\t\t\tmesh,\n\t\t\tvid,\n\t\t\ttex,\n\t\t\taspectRatio = 1,\n\t\t\tplaying = false,\n\t\t\tself = this;\n\n\t\tfunction isPowerOfTwo(num) {\n\t\t\treturn num > 0 && (num & (num-1)) === 0; // jshint ignore:line\n\t\t}\n\n\t\tfunction loadedMetadata() {\n\t\t\t//todo: don't do any of this if object has been deleted\n\n\t\t\tvar newAspectRatio = vid.videoWidth / vid.videoHeight;\n\t\t\tif (!options || !options.sphere) {\n\t\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(1, aspectRatio / newAspectRatio, 1));\n\t\t\t}\n\t\t\taspectRatio = newAspectRatio;\n\n\t\t\tif (vid.videoWidth === vid.videoHeight &&\n\t\t\t\t\tisPowerOfTwo(vid.videoWidth) && isPowerOfTwo(vid.videoHeight)) {\n\n\t\t\t\ttex.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\t\ttex.generateMipmaps = true;\n\t\t\t} else {\n\t\t\t\ttex.minFilter = THREE.LinearFilter;\n\t\t\t\ttex.generateMipmaps = false;\n\t\t\t}\n\n\t\t\tmaterial.map = tex;\n\t\t\tmaterial.visible = true;\n\n\t\t\tif (playing) {\n\t\t\t\tvid.play();\n\t\t\t}\n\t\t}\n\n\t\tfunction setSource(sources) {\n\t\t\tsources.forEach(function (src) {\n\t\t\t\tvar parse,\n\t\t\t\t\text,\n\t\t\t\t\tsource;\n\n\t\t\t\tif (!src) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tparse = urlRegex.exec(src);\n\t\t\t\tif (parse &&\n\t\t\t\t\t\t(parse[1] && parse[1] !== window.location.hostΩ ||\n\t\t\t\t\t\t\tparse[2] && parse[2] !== window.location.port)) {\n\n\t\t\t\t\tif (vid.crossOrigin !== undefined) {\n\t\t\t\t\t\tvid.crossOrigin = 'anonymous';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('Browser does not support cross-origin video');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsource = document.createElement('source');\n\t\t\t\tsource.src = src;\n\n\t\t\t\text = extRegex.exec(src);\n\t\t\t\tif (!ext || vid.canPlayType('video/' + ext[1])) {\n\t\t\t\t\tvid.appendChild(source);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/*\n\t\tPause the video when this browser tab is in the background or minimized.\n\t\tResume when it comes back in focus, but only if the user didn't pause manually.\n\t\t*/\n\t\tfunction visibilityChange() {\n\t\t\tif (document.hidden || document.mozHidden || document.msHidden || document.webkitHidden) {\n\t\t\t\tvid.pause();\n\t\t\t} else if (playing) {\n\t\t\t\tvid.play();\n\t\t\t}\n\t\t}\n\n\t\tvid = document.createElement('video');\n\t\tvid.loop = true;\n\t\tvid.addEventListener('loadedmetadata', loadedMetadata, false);\n\n\t\tif (Array.isArray(options)) {\n\t\t\tsetSource(options);\n\t\t} if (typeof options === 'string') {\n\t\t\tsetSource([options]);\n\t\t} else if (typeof options.src === 'string') {\n\t\t\tsetSource([options.src]);\n\t\t} else if (Array.isArray(options.src)) {\n\t\t\tsetSource(options.src);\n\t\t}\n\n\t\tvid.load();\n\n\t\ttex = new THREE.VideoTexture(vid, THREE.UVMapping);\n\t\ttex.format = THREE.RGBFormat;\n\n\t\tif (options && options.sphere) {\n\t\t\tgeometry = new THREE.SphereGeometry(\n\t\t\t\t994, //radius\n\t\t\t\t60, //widthSegments\n\t\t\t\t60, //heightSegments\n\t\t\t\t(parseFloat(options.phiStart) || 0) * Math.PI * 2,\n\t\t\t\t(parseFloat(options.phiLength) || 1) * Math.PI * 2,\n\t\t\t\t(parseFloat(options.thetaStart) || 0) * Math.PI,\n\t\t\t\t(parseFloat(options.thetaLength) || 1) * Math.PI\n\t\t\t);\n\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeScale(-1, 1, 1));\n\t\t\tgeometry.applyMatrix(new THREE.Matrix4().makeRotationY(- Math.PI / 2));\n\t\t} else {\n\t\t\tgeometry = new THREE.PlaneBufferGeometry(1, 1, 8);\n\t\t}\n\n\t\tmaterial = new THREE.MeshBasicMaterial({\n\t\t\tside: THREE.DoubleSide,\n\t\t\tmap: tex,\n\t\t\tvisible: false\n\t\t});\n\n\t\tmesh = new THREE.Mesh(geometry, material);\n\n\t\tif (options && options.stereo) {\n\t\t\tif (options.stereo === 'vertical') {\n\t\t\t\ttex.repeat.y = 0.5;\n\t\t\t} else {\n\t\t\t\ttex.repeat.x = 0.5;\n\t\t\t}\n\t\t\tmesh.userData.stereo = options.stereo;\n\t\t}\n\n\t\tif (vid.readyState) {\n\t\t\tloadedMetadata();\n\t\t}\n\n\t\tthis.play = function play() {\n\t\t\tplaying = true;\n\t\t\tvid.play();\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.pause = function pause() {\n\t\t\tplaying = false;\n\t\t\tvid.pause();\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.canPlayType = video.canPlayType;\n\n\t\tObject.defineProperty(this, 'width', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.videoWidth;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'height', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.videoHeight;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'paused', {\n\t\t\tget: function () {\n\t\t\t\treturn !playing;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'volume', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.volume;\n\t\t\t},\n\t\t\tset: function (vol) {\n\t\t\t\tvid.volume = vol;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'muted', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.muted;\n\t\t\t},\n\t\t\tset: function (muted) {\n\t\t\t\tvid.muted = muted;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'duration', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.duration || 0;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'currentTime', {\n\t\t\tget: function () {\n\t\t\t\treturn vid.currentTime;\n\t\t\t},\n\t\t\tset: function (currentTime) {\n\t\t\t\tif (vid.readyState && currentTime < vid.duration && currentTime >= 0) {\n\t\t\t\t\tvid.currentTime = currentTime;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t[\n\t\t\t'loadedmetadata',\n\t\t\t'play',\n\t\t\t'pause',\n\t\t\t'playing',\n\t\t\t'progress'\n\t\t].forEach(function registerMediaEvent(event) {\n\t\t\tvid.addEventListener(event, self.emit.bind(self, event));\n\t\t});\n\n\t\t//sometimes video fails to play because it's too big. remove it and try again\n\t\tvid.addEventListener('error', function (evt) {\n\t\t\tif (vid.error.code === window.MediaError.MEDIA_ERR_DECODE && vid.childNodes.length > 1) {\n\t\t\t\tmaterial.visible = false;\n\t\t\t\tvid.removeChild(vid.firstChild);\n\t\t\t\tvid.load();\n\t\t\t}\n\n\t\t\tself.emit(event, evt);\n\t\t}, true);\n\n\t\tthis.element = vid;\n\n\t\twindow.addEventListener('touchstart', function touchStart() {\n\t\t\tif (playing) {\n\t\t\t\tvid.play();\n\t\t\t} else {\n\t\t\t\tvid.load();\n\t\t\t}\n\t\t\twindow.removeEventListener('touchstart', touchStart, true);\n\t\t}, true);\n\n\t\t//pause when window is hidden\n\t\tdocument.addEventListener('visibilitychange', visibilityChange);\n\t\tdocument.addEventListener('mozvisibilitychange', visibilityChange);\n\t\tdocument.addEventListener('msvisibilitychange', visibilityChange);\n\t\tdocument.addEventListener('webkitvisibilitychange', visibilityChange);\n\n\t\tmesh.name = 'video';\n\t\tthis.raycastable = !(options && options.sphere);\n\t\tparent.add(mesh);\n\n\t\treturn mesh;\n\t};\n\n\tvideo.canPlayType = function canPlayType(type) {\n\t\tvar element = document.createElement('video');\n\t\treturn element.canPlayType(type);\n\t};\n\n\treturn video;\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/objects/video.js\n ** module id = 22\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author richt / http://richt.me\n * @author WestLangley / http://github.com/WestLangley\n *\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n */\n\nTHREE.DeviceOrientationControls = function( object ) {\n\n\tvar scope = this;\n\n\tthis.object = object;\n\tthis.object.rotation.reorder( \"YXZ\" );\n\n\tthis.enabled = true;\n\n\tthis.deviceOrientation = {};\n\tthis.screenOrientation = 0;\n\n\tthis.alpha = 0;\n\tthis.alphaOffsetAngle = 0;\n\n\n\tvar onDeviceOrientationChangeEvent = function( event ) {\n\n\t\tscope.deviceOrientation = event;\n\n\t};\n\n\tvar onScreenOrientationChangeEvent = function() {\n\n\t\tscope.screenOrientation = window.orientation || 0;\n\n\t};\n\n\t// The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\n\tvar setObjectQuaternion = function() {\n\n\t\tvar zee = new THREE.Vector3( 0, 0, 1 );\n\n\t\tvar euler = new THREE.Euler();\n\n\t\tvar q0 = new THREE.Quaternion();\n\n\t\tvar q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\n\n\t\treturn function( quaternion, alpha, beta, gamma, orient ) {\n\n\t\t\teuler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\n\n\t\t\tquaternion.setFromEuler( euler ); // orient the device\n\n\t\t\tquaternion.multiply( q1 ); // camera looks out the back of the device, not the top\n\n\t\t\tquaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\n\n\t\t}\n\n\t}();\n\n\tthis.connect = function() {\n\n\t\tonScreenOrientationChangeEvent(); // run once on load\n\n\t\twindow.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\twindow.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\n\t\tscope.enabled = true;\n\n\t};\n\n\tthis.disconnect = function() {\n\n\t\twindow.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\twindow.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\n\t\tscope.enabled = false;\n\n\t};\n\n\tthis.update = function() {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tvar alpha = scope.deviceOrientation.alpha ? THREE.Math.degToRad( scope.deviceOrientation.alpha ) + this.alphaOffsetAngle : 0; // Z\n\t\tvar beta = scope.deviceOrientation.beta ? THREE.Math.degToRad( scope.deviceOrientation.beta ) : 0; // X'\n\t\tvar gamma = scope.deviceOrientation.gamma ? THREE.Math.degToRad( scope.deviceOrientation.gamma ) : 0; // Y''\n\t\tvar orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\n\n\t\tsetObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\n\t\tthis.alpha = alpha;\n\n\t};\n\n\tthis.updateAlphaOffsetAngle = function( angle ) {\n\n\t\tthis.alphaOffsetAngle = angle;\n\t\tthis.update();\n\n\t};\n\n\tthis.dispose = function() {\n\n\t\tthis.disconnect();\n\n\t};\n\n\tthis.connect();\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./bower_components/DeviceOrientationControls/index.js\n ** module id = 23\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tthis.object = object;\n\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.25;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function() {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\treturn function update () {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\t\t\tscope.target.add( panOffset );\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function() {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function() {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function() {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function() {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan ( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\t//console.log( 'handleMouseDownPan' );\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t// rotating across whole screen goes 360 degrees around\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\t//console.log( 'handleMouseMovePan' );\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( event ) {\n\n\t\t//console.log( 'handleMouseUp' );\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\t//console.log( 'handleMouseWheel' );\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\t//console.log( 'handleKeyDown' );\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\t//console.log( 'handleTouchStartDolly' );\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\t//console.log( 'handleTouchStartPan' );\n\n\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t// rotating across whole screen goes 360 degrees around\n\t\trotateLeft( -2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\trotateUp( -2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\t//console.log( 'handleTouchMoveDolly' );\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\t//console.log( 'handleTouchMovePan' );\n\n\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchEnd( event ) {\n\n\t\t//console.log( 'handleTouchEnd' );\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\n\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\thandleMouseDownRotate( event );\n\n\t\t\tstate = STATE.ROTATE;\n\n\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\n\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\thandleMouseDownDolly( event );\n\n\t\t\tstate = STATE.DOLLY;\n\n\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\n\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\thandleMouseDownPan( event );\n\n\t\t\tstate = STATE.PAN;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\thandleMouseMoveRotate( event );\n\n\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\thandleMouseMoveDolly( event );\n\n\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\thandleMouseMovePan( event );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleTouchStartDolly( event );\n\n\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\n\n\t\t\t\thandleTouchMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\nObject.defineProperties( THREE.OrbitControls.prototype, {\n\n\tcenter: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\treturn this.target;\n\n\t\t}\n\n\t},\n\n\t// backward compatibility\n\n\tnoZoom: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\treturn ! this.enableZoom;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\tthis.enableZoom = ! value;\n\n\t\t}\n\n\t},\n\n\tnoRotate: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\treturn ! this.enableRotate;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\tthis.enableRotate = ! value;\n\n\t\t}\n\n\t},\n\n\tnoPan: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\treturn ! this.enablePan;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\tthis.enablePan = ! value;\n\n\t\t}\n\n\t},\n\n\tnoKeys: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\treturn ! this.enableKeys;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\tthis.enableKeys = ! value;\n\n\t\t}\n\n\t},\n\n\tstaticMoving : {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\treturn ! this.enableDamping;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\tthis.enableDamping = ! value;\n\n\t\t}\n\n\t},\n\n\tdynamicDampingFactor : {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\treturn this.dampingFactor;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\tthis.dampingFactor = value;\n\n\t\t}\n\n\t}\n\n} );\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./bower_components/OrbitControls/index.js\n ** module id = 24\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n( function() {\n\n\tvar _oldConsole = console.log;\n\n\tvar supportedTypes = [];\n\n\tfunction addSupportedType( type, format ) {\n\n\t\tsupportedTypes.push( {\n\t\t\ttype: type,\n\t\t\tformat: format\n\t\t} );\n\n\t}\n\n\taddSupportedType( THREE.Matrix4, function( v ) {\n\n\t\tvar e = v.elements;\n\t\t\t\t\n\t\treturn [\n\t\t\t[ e[ 0 ], e[ 4 ], e[ 8 ], e[ 12 ] ],\n\t\t\t[ e[ 1 ], e[ 5 ], e[ 9 ], e[ 13 ] ],\n\t\t\t[ e[ 2 ], e[ 6 ], e[ 10 ], e[ 14 ] ],\n\t\t\t[ e[ 3 ], e[ 7 ], e[ 11 ], e[ 15 ] ]\n\t\t];\n\n\t} );\n\n\taddSupportedType( THREE.Matrix3, function( v ) {\n\n\t\tvar e = v.elements;\n\t\t\t\t\n\t\treturn [\n\t\t\t[ e[ 0 ], e[ 3 ], e[ 6 ] ],\n\t\t\t[ e[ 1 ], e[ 4 ], e[ 7 ] ],\n\t\t\t[ e[ 2 ], e[ 5 ], e[ 8 ] ]\n\t\t];\n\n\t} );\n\n\taddSupportedType( THREE.Vector2, function( v ) {\n\n\t\treturn {\n\t\t\tVector2: { x: v.x, y: v.y }\n\t\t};\n\n\t} );\n\n\taddSupportedType( THREE.Vector3, function( v ) {\n\n\t\treturn {\n\t\t\tVector3: { x: v.x, y: v.y, z: v.z }\n\t\t};\n\n\t} );\n\n\taddSupportedType( THREE.Vector4, function( v ) {\n\n\t\treturn {\n\t\t\tVector4: { x: v.x, y: v.y, z: v.z, w: v.w }\n\t\t};\n\n\t} );\n\n\taddSupportedType( THREE.Euler, function( v ) {\n\n\t\treturn {\n\t\t\tVector4: { x: v.x, y: v.y, z: v.z, order: v.order }\n\t\t};\n\n\t} );\n\n\taddSupportedType( THREE.Ray, function( v ) {\n\n\t\treturn { \n\t\t\t'Ray origin': { x: v.origin.x, y: v.origin.y, z: v.origin.z },\n\t\t\t'Ray direction': { x: v.direction.x, y: v.direction.y, z: v.direction.z }\n\t\t};\n\n\t} );\n\n\tfunction stacktrace() { \n\t\tvar err = new Error();\n\t\treturn err.stack;\n\t}\n\n\tconsole.log = function() {\n\n\t\t//console.trace ();\n\n\t\tvar special = false;\n\n\t\t[].forEach.call( arguments, function( a ) { \n\t\t\tsupportedTypes.forEach( function( t ) {\n\t\t\t\tif( a instanceof t.type ) special = true;;\n\t\t\t} );\n\t\t} );\n\n\t\tif( special ) {\n\n\t\t\t[].forEach.call( arguments, function( a ) { \n\t\t\t\n\t\t\t\t_oldConsole.apply( console, [ a ] );\n\n\t\t\t\tsupportedTypes.forEach( function( t ) {\n\n\t\t\t\t\tif( a instanceof t.type ) {\n\n\t\t\t\t\t\tconsole.table( t.format( a ) );\n\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\t_oldConsole.apply( console, arguments );\n\n\t\t}\n\n\t}\n\n} )();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./bower_components/AugmentedConsole/index.js\n ** module id = 25\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CSS3DObject = function ( element ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.element = element;\n\tthis.element.style.position = 'absolute';\n\n\tthis.addEventListener( 'removed', function ( event ) {\n\n\t\tif ( this.element.parentNode !== null ) {\n\n\t\t\tthis.element.parentNode.removeChild( this.element );\n\n\t\t}\n\n\t} );\n\n};\n\nTHREE.CSS3DObject.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\n\nTHREE.CSS3DSprite = function ( element ) {\n\n\tTHREE.CSS3DObject.call( this, element );\n\n};\n\nTHREE.CSS3DSprite.prototype = Object.create( THREE.CSS3DObject.prototype );\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\n\n//\n\nTHREE.CSS3DRenderer = function () {\n\n\tconsole.log( 'THREE.CSS3DRenderer', THREE.REVISION );\n\n\tvar _width, _height;\n\tvar _widthHalf, _heightHalf;\n\n\tvar matrix = new THREE.Matrix4();\n\n\tvar cache = {\n\t\tcamera: { fov: 0, style: '' },\n\t\tobjects: {}\n\t};\n\n\tvar domElement = document.createElement( 'div' );\n\tdomElement.style.overflow = 'hidden';\n\n\tdomElement.style.WebkitTransformStyle = 'preserve-3d';\n\tdomElement.style.MozTransformStyle = 'preserve-3d';\n\tdomElement.style.oTransformStyle = 'preserve-3d';\n\tdomElement.style.transformStyle = 'preserve-3d';\n\n\tthis.domElement = domElement;\n\n\tvar cameraElement = document.createElement( 'div' );\n\n\tcameraElement.style.WebkitTransformStyle = 'preserve-3d';\n\tcameraElement.style.MozTransformStyle = 'preserve-3d';\n\tcameraElement.style.oTransformStyle = 'preserve-3d';\n\tcameraElement.style.transformStyle = 'preserve-3d';\n\n\tdomElement.appendChild( cameraElement );\n\n\tthis.setClearColor = function () {};\n\n\tthis.getSize = function() {\n\n\t\treturn {\n\t\t\twidth: _width,\n\t\t\theight: _height\n\t\t};\n\n\t};\n\n\tthis.setSize = function ( width, height ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_widthHalf = _width / 2;\n\t\t_heightHalf = _height / 2;\n\n\t\tdomElement.style.width = width + 'px';\n\t\tdomElement.style.height = height + 'px';\n\n\t\tcameraElement.style.width = width + 'px';\n\t\tcameraElement.style.height = height + 'px';\n\n\t};\n\n\tvar epsilon = function ( value ) {\n\n\t\treturn Math.abs( value ) < 0.000001 ? 0 : value;\n\n\t};\n\n\tvar getCameraCSSMatrix = function ( matrix ) {\n\n\t\tvar elements = matrix.elements;\n\n\t\treturn 'matrix3d(' +\n\t\t\tepsilon( elements[ 0 ] ) + ',' +\n\t\t\tepsilon( - elements[ 1 ] ) + ',' +\n\t\t\tepsilon( elements[ 2 ] ) + ',' +\n\t\t\tepsilon( elements[ 3 ] ) + ',' +\n\t\t\tepsilon( elements[ 4 ] ) + ',' +\n\t\t\tepsilon( - elements[ 5 ] ) + ',' +\n\t\t\tepsilon( elements[ 6 ] ) + ',' +\n\t\t\tepsilon( elements[ 7 ] ) + ',' +\n\t\t\tepsilon( elements[ 8 ] ) + ',' +\n\t\t\tepsilon( - elements[ 9 ] ) + ',' +\n\t\t\tepsilon( elements[ 10 ] ) + ',' +\n\t\t\tepsilon( elements[ 11 ] ) + ',' +\n\t\t\tepsilon( elements[ 12 ] ) + ',' +\n\t\t\tepsilon( - elements[ 13 ] ) + ',' +\n\t\t\tepsilon( elements[ 14 ] ) + ',' +\n\t\t\tepsilon( elements[ 15 ] ) +\n\t\t')';\n\n\t};\n\n\tvar getObjectCSSMatrix = function ( matrix ) {\n\n\t\tvar elements = matrix.elements;\n\n\t\treturn 'translate3d(-50%,-50%,0) matrix3d(' +\n\t\t\tepsilon( elements[ 0 ] ) + ',' +\n\t\t\tepsilon( elements[ 1 ] ) + ',' +\n\t\t\tepsilon( elements[ 2 ] ) + ',' +\n\t\t\tepsilon( elements[ 3 ] ) + ',' +\n\t\t\tepsilon( - elements[ 4 ] ) + ',' +\n\t\t\tepsilon( - elements[ 5 ] ) + ',' +\n\t\t\tepsilon( - elements[ 6 ] ) + ',' +\n\t\t\tepsilon( - elements[ 7 ] ) + ',' +\n\t\t\tepsilon( elements[ 8 ] ) + ',' +\n\t\t\tepsilon( elements[ 9 ] ) + ',' +\n\t\t\tepsilon( elements[ 10 ] ) + ',' +\n\t\t\tepsilon( elements[ 11 ] ) + ',' +\n\t\t\tepsilon( elements[ 12 ] ) + ',' +\n\t\t\tepsilon( elements[ 13 ] ) + ',' +\n\t\t\tepsilon( elements[ 14 ] ) + ',' +\n\t\t\tepsilon( elements[ 15 ] ) +\n\t\t')';\n\n\t};\n\n\tvar renderObject = function ( object, camera ) {\n\n\t\tif ( object instanceof THREE.CSS3DObject ) {\n\n\t\t\tvar style;\n\n\t\t\tif ( object instanceof THREE.CSS3DSprite ) {\n\n\t\t\t\t// http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\n\n\t\t\t\tmatrix.copy( camera.matrixWorldInverse );\n\t\t\t\tmatrix.transpose();\n\t\t\t\tmatrix.copyPosition( object.matrixWorld );\n\t\t\t\tmatrix.scale( object.scale );\n\n\t\t\t\tmatrix.elements[ 3 ] = 0;\n\t\t\t\tmatrix.elements[ 7 ] = 0;\n\t\t\t\tmatrix.elements[ 11 ] = 0;\n\t\t\t\tmatrix.elements[ 15 ] = 1;\n\n\t\t\t\tstyle = getObjectCSSMatrix( matrix );\n\n\t\t\t} else {\n\n\t\t\t\tstyle = getObjectCSSMatrix( object.matrixWorld );\n\n\t\t\t}\n\n\t\t\tvar element = object.element;\n\t\t\tvar cachedStyle = cache.objects[ object.id ];\n\n\t\t\tif ( cachedStyle === undefined || cachedStyle !== style ) {\n\n\t\t\t\telement.style.WebkitTransform = style;\n\t\t\t\telement.style.MozTransform = style;\n\t\t\t\telement.style.oTransform = style;\n\t\t\t\telement.style.transform = style;\n\n\t\t\t\tcache.objects[ object.id ] = style;\n\n\t\t\t}\n\n\t\t\tif ( element.parentNode !== cameraElement ) {\n\n\t\t\t\tcameraElement.appendChild( element );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( object.children[ i ], camera );\n\n\t\t}\n\n\t};\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tvar fov = 0.5 / Math.tan( THREE.Math.degToRad( camera.getEffectiveFOV() * 0.5 ) ) * _height;\n\n\t\tif ( cache.camera.fov !== fov ) {\n\n\t\t\tdomElement.style.WebkitPerspective = fov + \"px\";\n\t\t\tdomElement.style.MozPerspective = fov + \"px\";\n\t\t\tdomElement.style.oPerspective = fov + \"px\";\n\t\t\tdomElement.style.perspective = fov + \"px\";\n\n\t\t\tcache.camera.fov = fov;\n\n\t\t}\n\n\t\tscene.updateMatrixWorld();\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\tvar style = \"translate3d(0,0,\" + fov + \"px)\" + getCameraCSSMatrix( camera.matrixWorldInverse ) +\n\t\t\t\" translate3d(\" + _widthHalf + \"px,\" + _heightHalf + \"px, 0)\";\n\n\t\tif ( cache.camera.style !== style ) {\n\n\t\t\tcameraElement.style.WebkitTransform = style;\n\t\t\tcameraElement.style.MozTransform = style;\n\t\t\tcameraElement.style.oTransform = style;\n\t\t\tcameraElement.style.transform = style;\n\n\t\t\tcache.camera.style = style;\n\n\t\t}\n\n\t\trenderObject( scene, camera );\n\n\t};\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/CSS3DRenderer.js\n ** module id = 26\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SpriteCanvasMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'SpriteCanvasMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\tthis.program = function ( context, color ) {};\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\nTHREE.SpriteCanvasMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.SpriteCanvasMaterial();\n\n\tmaterial.copy( this );\n\tmaterial.color.copy( this.color );\n\tmaterial.program = this.program;\n\n\treturn material;\n\n};\n\n//\n\nTHREE.CanvasRenderer = function ( parameters ) {\n\n\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _this = this,\n\t_renderData, _elements, _lights,\n\t_projector = new THREE.Projector(),\n\n\t_canvas = parameters.canvas !== undefined\n\t\t\t ? parameters.canvas\n\t\t\t : document.createElement( 'canvas' ),\n\n\t_canvasWidth = _canvas.width,\n\t_canvasHeight = _canvas.height,\n\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\n\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\n\n\t_viewportX = 0,\n\t_viewportY = 0,\n\t_viewportWidth = _canvasWidth,\n\t_viewportHeight = _canvasHeight,\n\n\t_pixelRatio = 1,\n\n\t_context = _canvas.getContext( '2d', {\n\t\talpha: parameters.alpha === true\n\t} ),\n\n\t_clearColor = new THREE.Color( 0x000000 ),\n\t_clearAlpha = parameters.alpha === true ? 0 : 1,\n\n\t_contextGlobalAlpha = 1,\n\t_contextGlobalCompositeOperation = 0,\n\t_contextStrokeStyle = null,\n\t_contextFillStyle = null,\n\t_contextLineWidth = null,\n\t_contextLineCap = null,\n\t_contextLineJoin = null,\n\t_contextLineDash = [],\n\n\t_camera,\n\n\t_v1, _v2, _v3, _v4,\n\t_v5 = new THREE.RenderableVertex(),\n\t_v6 = new THREE.RenderableVertex(),\n\n\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\n\t_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\n\n\t_color = new THREE.Color(),\n\t_color1 = new THREE.Color(),\n\t_color2 = new THREE.Color(),\n\t_color3 = new THREE.Color(),\n\t_color4 = new THREE.Color(),\n\n\t_diffuseColor = new THREE.Color(),\n\t_emissiveColor = new THREE.Color(),\n\n\t_lightColor = new THREE.Color(),\n\n\t_patterns = {},\n\n\t_image, _uvs,\n\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\n\n\t_clipBox = new THREE.Box2(),\n\t_clearBox = new THREE.Box2(),\n\t_elemBox = new THREE.Box2(),\n\n\t_ambientLight = new THREE.Color(),\n\t_directionalLights = new THREE.Color(),\n\t_pointLights = new THREE.Color(),\n\n\t_vector3 = new THREE.Vector3(), // Needed for PointLight\n\t_centroid = new THREE.Vector3(),\n\t_normal = new THREE.Vector3(),\n\t_normalViewMatrix = new THREE.Matrix3();\n\n\t/* TODO\n\t_canvas.mozImageSmoothingEnabled = false;\n\t_canvas.webkitImageSmoothingEnabled = false;\n\t_canvas.msImageSmoothingEnabled = false;\n\t_canvas.imageSmoothingEnabled = false;\n\t*/\n\n\t// dash+gap fallbacks for Firefox and everything else\n\n\tif ( _context.setLineDash === undefined ) {\n\n\t\t_context.setLineDash = function () {};\n\n\t}\n\n\tthis.domElement = _canvas;\n\n\tthis.autoClear = true;\n\tthis.sortObjects = true;\n\tthis.sortElements = true;\n\n\tthis.info = {\n\n\t\trender: {\n\n\t\t\tvertices: 0,\n\t\t\tfaces: 0\n\n\t\t}\n\n\t};\n\n\t// WebGLRenderer compatibility\n\n\tthis.supportsVertexTextures = function () {};\n\tthis.setFaceCulling = function () {};\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _context;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _context.getContextAttributes();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value !== undefined ) _pixelRatio = value;\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t_canvasWidth = width * _pixelRatio;\n\t\t_canvasHeight = height * _pixelRatio;\n\n\t\t_canvas.width = _canvasWidth;\n\t\t_canvas.height = _canvasHeight;\n\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\t_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t_contextGlobalAlpha = 1;\n\t\t_contextGlobalCompositeOperation = 0;\n\t\t_contextStrokeStyle = null;\n\t\t_contextFillStyle = null;\n\t\t_contextLineWidth = null;\n\t\t_contextLineCap = null;\n\t\t_contextLineJoin = null;\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t_viewportX = x * _pixelRatio;\n\t\t_viewportY = y * _pixelRatio;\n\n\t\t_viewportWidth = width * _pixelRatio;\n\t\t_viewportHeight = height * _pixelRatio;\n\n\t};\n\n\tthis.setScissor = function () {};\n\tthis.setScissorTest = function () {};\n\n\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t_clearColor.set( color );\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t};\n\n\tthis.setClearColorHex = function ( hex, alpha ) {\n\n\t\tconsole.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n\t\tthis.setClearColor( hex, alpha );\n\n\t};\n\n\tthis.getClearColor = function () {\n\n\t\treturn _clearColor;\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn _clearAlpha;\n\n\t};\n\n\tthis.getMaxAnisotropy = function () {\n\n\t\treturn 0;\n\n\t};\n\n\tthis.clear = function () {\n\n\t\tif ( _clearBox.isEmpty() === false ) {\n\n\t\t\t_clearBox.intersect( _clipBox );\n\t\t\t_clearBox.expandByScalar( 2 );\n\n\t\t\t_clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t\t\t_clearBox.min.y =  - _clearBox.min.y + _canvasHeightHalf;\t\t// higher y value !\n\t\t\t_clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t\t\t_clearBox.max.y =  - _clearBox.max.y + _canvasHeightHalf;\t\t// lower y value !\n\n\t\t\tif ( _clearAlpha < 1 ) {\n\n\t\t\t\t_context.clearRect(\n\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( _clearAlpha > 0 ) {\n\n\t\t\t\tsetBlending( THREE.NormalBlending );\n\t\t\t\tsetOpacity( 1 );\n\n\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\n\n\t\t\t\t_context.fillRect(\n\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t_clearBox.makeEmpty();\n\n\t\t}\n\n\t};\n\n\t// compatibility\n\n\tthis.clearColor = function () {};\n\tthis.clearDepth = function () {};\n\tthis.clearStencil = function () {};\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.autoClear === true ) this.clear();\n\n\t\t_this.info.render.vertices = 0;\n\t\t_this.info.render.faces = 0;\n\n\t\t_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );\n\t\t_context.translate( _canvasWidthHalf, _canvasHeightHalf );\n\n\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t_elements = _renderData.elements;\n\t\t_lights = _renderData.lights;\n\t\t_camera = camera;\n\n\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\n\t\t/* DEBUG\n\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n\t\t*/\n\n\t\tcalculateLights();\n\n\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\n\n\t\t\tvar element = _elements[ e ];\n\n\t\t\tvar material = element.material;\n\n\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\n\t\t\t_elemBox.makeEmpty();\n\n\t\t\tif ( element instanceof THREE.RenderableSprite ) {\n\n\t\t\t\t_v1 = element;\n\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\n\n\t\t\t\trenderSprite( _v1, element, material );\n\n\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderLine( _v1, _v2, element, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\n\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\tif ( material.overdraw > 0 ) {\n\n\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\n\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\n\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\n\n\t\t\t\t}\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t_v3.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* DEBUG\n\t\t\tsetLineWidth( 1 );\n\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n\t\t\t*/\n\n\t\t\t_clearBox.union( _elemBox );\n\n\t\t}\n\n\t\t/* DEBUG\n\t\tsetLineWidth( 1 );\n\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n\t\t*/\n\n\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\n\n\t};\n\n\t//\n\n\tfunction calculateLights() {\n\n\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t_pointLights.setRGB( 0, 0, 0 );\n\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = _lights[ l ];\n\t\t\tvar lightColor = light.color;\n\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\n\t\t\t\t_ambientLight.add( lightColor );\n\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\t// for sprites\n\n\t\t\t\t_directionalLights.add( lightColor );\n\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\t// for sprites\n\n\t\t\t\t_pointLights.add( lightColor );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction calculateLight( position, normal, color ) {\n\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = _lights[ l ];\n\n\t\t\t_lightColor.copy( light.color );\n\n\t\t\tif ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\n\t\t\t\tvar amount = normal.dot( lightPosition );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\n\t\t\t\tif ( amount == 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderSprite( v1, element, material ) {\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\tvar scaleX = element.scale.x * _canvasWidthHalf;\n\t\tvar scaleY = element.scale.y * _canvasHeightHalf;\n\n\t\tvar dist = 0.5 * Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite\n\t\t_elemBox.min.set( v1.x - dist, v1.y - dist );\n\t\t_elemBox.max.set( v1.x + dist, v1.y + dist );\n\n\t\tif ( material instanceof THREE.SpriteMaterial ) {\n\n\t\t\tvar texture = material.map;\n\n\t\t\tif ( texture !== null ) {\n\n\t\t\t\tvar pattern = _patterns[ texture.id ];\n\n\t\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t\t\t\tvar bitmap = texture.image;\n\n\t\t\t\t\tvar ox = bitmap.width * texture.offset.x;\n\t\t\t\t\tvar oy = bitmap.height * texture.offset.y;\n\n\t\t\t\t\tvar sx = bitmap.width * texture.repeat.x;\n\t\t\t\t\tvar sy = bitmap.height * texture.repeat.y;\n\n\t\t\t\t\tvar cx = scaleX / sx;\n\t\t\t\t\tvar cy = scaleY / sy;\n\n\t\t\t\t\t_context.save();\n\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t_context.translate( - scaleX / 2, - scaleY / 2 );\n\t\t\t\t\t_context.scale( cx, cy );\n\t\t\t\t\t_context.translate( - ox, - oy );\n\t\t\t\t\t_context.fillRect( ox, oy, sx, sy );\n\t\t\t\t\t_context.restore();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// no texture\n\n\t\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t\t_context.save();\n\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t_context.scale( scaleX, - scaleY );\n\t\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t\t_context.restore();\n\n\t\t\t}\n\n\t\t} else if ( material instanceof THREE.SpriteCanvasMaterial ) {\n\n\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t_context.save();\n\t\t\t_context.translate( v1.x, v1.y );\n\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t_context.scale( scaleX, scaleY );\n\n\t\t\tmaterial.program( _context );\n\n\t\t\t_context.restore();\n\n\t\t}\n\n\t\t/* DEBUG\n\t\tsetStrokeStyle( 'rgb(255,255,0)' );\n\t\t_context.beginPath();\n\t\t_context.moveTo( v1.x - 10, v1.y );\n\t\t_context.lineTo( v1.x + 10, v1.y );\n\t\t_context.moveTo( v1.x, v1.y - 10 );\n\t\t_context.lineTo( v1.x, v1.y + 10 );\n\t\t_context.stroke();\n\t\t*/\n\n\t}\n\n\tfunction renderLine( v1, v2, element, material ) {\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\t_context.beginPath();\n\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\n\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\n\n\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\n\t\t\tsetLineWidth( material.linewidth );\n\t\t\tsetLineCap( material.linecap );\n\t\t\tsetLineJoin( material.linejoin );\n\n\t\t\tif ( material.vertexColors !== THREE.VertexColors ) {\n\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\n\t\t\t} else {\n\n\t\t\t\tvar colorStyle1 = element.vertexColors[ 0 ].getStyle();\n\t\t\t\tvar colorStyle2 = element.vertexColors[ 1 ].getStyle();\n\n\t\t\t\tif ( colorStyle1 === colorStyle2 ) {\n\n\t\t\t\t\tsetStrokeStyle( colorStyle1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar grad = _context.createLinearGradient(\n\t\t\t\t\t\t\tv1.positionScreen.x,\n\t\t\t\t\t\t\tv1.positionScreen.y,\n\t\t\t\t\t\t\tv2.positionScreen.x,\n\t\t\t\t\t\t\tv2.positionScreen.y\n\t\t\t\t\t\t);\n\t\t\t\t\t\tgrad.addColorStop( 0, colorStyle1 );\n\t\t\t\t\t\tgrad.addColorStop( 1, colorStyle2 );\n\n\t\t\t\t\t} catch ( exception ) {\n\n\t\t\t\t\t\tgrad = colorStyle1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tsetStrokeStyle( grad );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_context.stroke();\n\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\n\t\t\tsetLineWidth( material.linewidth );\n\t\t\tsetLineCap( material.linecap );\n\t\t\tsetLineJoin( material.linejoin );\n\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\tsetLineDash( [ material.dashSize, material.gapSize ] );\n\n\t\t\t_context.stroke();\n\n\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t\tsetLineDash( [] );\n\n\t\t}\n\n\t}\n\n\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\n\n\t\t_this.info.render.vertices += 3;\n\t\t_this.info.render.faces ++;\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\n\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\n\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\n\n\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\n\n\t\tif ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {\n\n\t\t\t_diffuseColor.copy( material.color );\n\t\t\t_emissiveColor.copy( material.emissive );\n\n\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t_diffuseColor.multiply( element.color );\n\n\t\t\t}\n\n\t\t\t_color.copy( _ambientLight );\n\n\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\n\t\t\tcalculateLight( _centroid, element.normalModel, _color );\n\n\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t} else if ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t    material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t    material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tvar mapping = material.map.mapping;\n\n\t\t\t\tif ( mapping === THREE.UVMapping ) {\n\n\t\t\t\t\t_uvs = element.uvs;\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.envMap !== null ) {\n\n\t\t\t\tif ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv1x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv1y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv2x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv2y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv3x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv3y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_color.copy( material.color );\n\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t\t_color.multiply( element.color );\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\n\t\t\t}\n\n\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\n\n\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t} else {\n\n\t\t\t_color.setRGB( 1, 1, 1 );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\n\n\t\t_context.beginPath();\n\t\t_context.moveTo( x0, y0 );\n\t\t_context.lineTo( x1, y1 );\n\t\t_context.lineTo( x2, y2 );\n\t\t_context.closePath();\n\n\t}\n\n\tfunction strokePath( color, linewidth, linecap, linejoin ) {\n\n\t\tsetLineWidth( linewidth );\n\t\tsetLineCap( linecap );\n\t\tsetLineJoin( linejoin );\n\t\tsetStrokeStyle( color.getStyle() );\n\n\t\t_context.stroke();\n\n\t\t_elemBox.expandByScalar( linewidth * 2 );\n\n\t}\n\n\tfunction fillPath( color ) {\n\n\t\tsetFillStyle( color.getStyle() );\n\t\t_context.fill();\n\n\t}\n\n\tfunction textureToPattern( texture ) {\n\n\t\tif ( texture.version === 0 ||\n\t\t\ttexture instanceof THREE.CompressedTexture ||\n\t\t\ttexture instanceof THREE.DataTexture ) {\n\n\t\t\treturn {\n\t\t\t\tcanvas: undefined,\n\t\t\t\tversion: texture.version\n\t\t\t};\n\n\t\t}\n\n\t\tvar image = texture.image;\n\n\t\tif ( image.complete === false ) {\n\n\t\t\treturn {\n\t\t\t\tcanvas: undefined,\n\t\t\t\tversion: 0\n\t\t\t};\n\n\t\t}\n\n\t\tvar canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = image.width;\n\t\tcanvas.height = image.height;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.setTransform( 1, 0, 0, - 1, 0, image.height );\n\t\tcontext.drawImage( image, 0, 0 );\n\n\t\tvar repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t\tvar repeatY = texture.wrapT === THREE.RepeatWrapping;\n\n\t\tvar repeat = 'no-repeat';\n\n\t\tif ( repeatX === true && repeatY === true ) {\n\n\t\t\trepeat = 'repeat';\n\n\t\t} else if ( repeatX === true ) {\n\n\t\t\trepeat = 'repeat-x';\n\n\t\t} else if ( repeatY === true ) {\n\n\t\t\trepeat = 'repeat-y';\n\n\t\t}\n\n\t\tvar pattern = _context.createPattern( canvas, repeat );\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\treturn {\n\t\t\tcanvas: pattern,\n\t\t\tversion: texture.version\n\t\t};\n\n\t}\n\n\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\n\n\t\tvar pattern = _patterns[ texture.id ];\n\n\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\tpattern = textureToPattern( texture );\n\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t}\n\n\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t} else {\n\n\t\t\tsetFillStyle( 'rgba( 0, 0, 0, 1)' );\n\t\t\t_context.fill();\n\t\t\treturn;\n\n\t\t}\n\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\tvar a, b, c, d, e, f, det, idet,\n\t\toffsetX = texture.offset.x / texture.repeat.x,\n\t\toffsetY = texture.offset.y / texture.repeat.y,\n\t\twidth = texture.image.width * texture.repeat.x,\n\t\theight = texture.image.height * texture.repeat.y;\n\n\t\tu0 = ( u0 + offsetX ) * width;\n\t\tv0 = ( v0 + offsetY ) * height;\n\n\t\tu1 = ( u1 + offsetX ) * width;\n\t\tv1 = ( v1 + offsetY ) * height;\n\n\t\tu2 = ( u2 + offsetX ) * width;\n\t\tv2 = ( v2 + offsetY ) * height;\n\n\t\tx1 -= x0; y1 -= y0;\n\t\tx2 -= x0; y2 -= y0;\n\n\t\tu1 -= u0; v1 -= v0;\n\t\tu2 -= u0; v2 -= v0;\n\n\t\tdet = u1 * v2 - u2 * v1;\n\n\t\tif ( det === 0 ) return;\n\n\t\tidet = 1 / det;\n\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\te = x0 - a * u0 - c * v0;\n\t\tf = y0 - b * u0 - d * v0;\n\n\t\t_context.save();\n\t\t_context.transform( a, b, c, d, e, f );\n\t\t_context.fill();\n\t\t_context.restore();\n\n\t}\n\n\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\n\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\tvar a, b, c, d, e, f, det, idet,\n\t\twidth = image.width - 1,\n\t\theight = image.height - 1;\n\n\t\tu0 *= width; v0 *= height;\n\t\tu1 *= width; v1 *= height;\n\t\tu2 *= width; v2 *= height;\n\n\t\tx1 -= x0; y1 -= y0;\n\t\tx2 -= x0; y2 -= y0;\n\n\t\tu1 -= u0; v1 -= v0;\n\t\tu2 -= u0; v2 -= v0;\n\n\t\tdet = u1 * v2 - u2 * v1;\n\n\t\tidet = 1 / det;\n\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\te = x0 - a * u0 - c * v0;\n\t\tf = y0 - b * u0 - d * v0;\n\n\t\t_context.save();\n\t\t_context.transform( a, b, c, d, e, f );\n\t\t_context.clip();\n\t\t_context.drawImage( image, 0, 0 );\n\t\t_context.restore();\n\n\t}\n\n\t// Hide anti-alias gaps\n\n\tfunction expand( v1, v2, pixels ) {\n\n\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\n\t\tdet = x * x + y * y, idet;\n\n\t\tif ( det === 0 ) return;\n\n\t\tidet = pixels / Math.sqrt( det );\n\n\t\tx *= idet; y *= idet;\n\n\t\tv2.x += x; v2.y += y;\n\t\tv1.x -= x; v1.y -= y;\n\n\t}\n\n\t// Context cached methods.\n\n\tfunction setOpacity( value ) {\n\n\t\tif ( _contextGlobalAlpha !== value ) {\n\n\t\t\t_context.globalAlpha = value;\n\t\t\t_contextGlobalAlpha = value;\n\n\t\t}\n\n\t}\n\n\tfunction setBlending( value ) {\n\n\t\tif ( _contextGlobalCompositeOperation !== value ) {\n\n\t\t\tif ( value === THREE.NormalBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'source-over';\n\n\t\t\t} else if ( value === THREE.AdditiveBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'lighter';\n\n\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'darker';\n\n\t\t\t} else if ( value === THREE.MultiplyBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'multiply';\n\n\t\t\t}\n\n\t\t\t_contextGlobalCompositeOperation = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineWidth( value ) {\n\n\t\tif ( _contextLineWidth !== value ) {\n\n\t\t\t_context.lineWidth = value;\n\t\t\t_contextLineWidth = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineCap( value ) {\n\n\t\t// \"butt\", \"round\", \"square\"\n\n\t\tif ( _contextLineCap !== value ) {\n\n\t\t\t_context.lineCap = value;\n\t\t\t_contextLineCap = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineJoin( value ) {\n\n\t\t// \"round\", \"bevel\", \"miter\"\n\n\t\tif ( _contextLineJoin !== value ) {\n\n\t\t\t_context.lineJoin = value;\n\t\t\t_contextLineJoin = value;\n\n\t\t}\n\n\t}\n\n\tfunction setStrokeStyle( value ) {\n\n\t\tif ( _contextStrokeStyle !== value ) {\n\n\t\t\t_context.strokeStyle = value;\n\t\t\t_contextStrokeStyle = value;\n\n\t\t}\n\n\t}\n\n\tfunction setFillStyle( value ) {\n\n\t\tif ( _contextFillStyle !== value ) {\n\n\t\t\t_context.fillStyle = value;\n\t\t\t_contextFillStyle = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineDash( value ) {\n\n\t\tif ( _contextLineDash.length !== value.length ) {\n\n\t\t\t_context.setLineDash( value );\n\t\t\t_contextLineDash = value;\n\n\t\t}\n\n\t}\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/CanvasRenderer.js\n ** module id = 27\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author julianwa / https://github.com/julianwa\n */\n\nTHREE.RenderableObject = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableFace = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\tthis.v3 = new THREE.RenderableVertex();\n\n\tthis.normalModel = new THREE.Vector3();\n\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\tthis.vertexNormalsLength = 0;\n\n\tthis.color = new THREE.Color();\n\tthis.material = null;\n\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableVertex = function () {\n\n\tthis.position = new THREE.Vector3();\n\tthis.positionWorld = new THREE.Vector3();\n\tthis.positionScreen = new THREE.Vector4();\n\n\tthis.visible = true;\n\n};\n\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\n\tthis.positionWorld.copy( vertex.positionWorld );\n\tthis.positionScreen.copy( vertex.positionScreen );\n\n};\n\n//\n\nTHREE.RenderableLine = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\n\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\tthis.material = null;\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableSprite = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\n\tthis.x = 0;\n\tthis.y = 0;\n\tthis.z = 0;\n\n\tthis.rotation = 0;\n\tthis.scale = new THREE.Vector2();\n\n\tthis.material = null;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.Projector = function () {\n\n\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\n\t_renderData = { objects: [], lights: [], elements: [] },\n\n\t_vector3 = new THREE.Vector3(),\n\t_vector4 = new THREE.Vector4(),\n\n\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t_boundingBox = new THREE.Box3(),\n\t_points3 = new Array( 3 ),\n\t_points4 = new Array( 4 ),\n\n\t_viewMatrix = new THREE.Matrix4(),\n\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t_modelMatrix,\n\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\n\t_normalMatrix = new THREE.Matrix3(),\n\n\t_frustum = new THREE.Frustum(),\n\n\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\n\t//\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function ( vector, camera ) {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n\t//\n\n\tvar RenderList = function () {\n\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar object = null;\n\t\tvar material = null;\n\n\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\tfunction setObject( value ) {\n\n\t\t\tobject = value;\n\t\t\tmaterial = object.material;\n\n\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\n\t\t\tnormals.length = 0;\n\t\t\tuvs.length = 0;\n\n\t\t}\n\n\t\tfunction projectVertex( vertex ) {\n\n\t\t\tvar position = vertex.position;\n\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\tvar positionScreen = vertex.positionScreen;\n\n\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n\t\t\tvar invW = 1 / positionScreen.w;\n\n\t\t\tpositionScreen.x *= invW;\n\t\t\tpositionScreen.y *= invW;\n\t\t\tpositionScreen.z *= invW;\n\n\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\n\t\t}\n\n\t\tfunction pushVertex( x, y, z ) {\n\n\t\t\t_vertex = getNextVertexInPool();\n\t\t\t_vertex.position.set( x, y, z );\n\n\t\t\tprojectVertex( _vertex );\n\n\t\t}\n\n\t\tfunction pushNormal( x, y, z ) {\n\n\t\t\tnormals.push( x, y, z );\n\n\t\t}\n\n\t\tfunction pushUv( x, y ) {\n\n\t\t\tuvs.push( x, y );\n\n\t\t}\n\n\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\n\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\n\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t_points3[ 2 ] = v3.positionScreen;\n\n\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\n\t\t}\n\n\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\n\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n\t\t}\n\n\t\tfunction pushLine( a, b ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\n\t\t\t_line = getNextLineInPool();\n\n\t\t\t_line.id = object.id;\n\t\t\t_line.v1.copy( v1 );\n\t\t\t_line.v2.copy( v2 );\n\t\t\t_line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;\n\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t_line.material = object.material;\n\n\t\t\t_renderData.elements.push( _line );\n\n\t\t}\n\n\t\tfunction pushTriangle( a, b, c ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\tvar v3 = _vertexPool[ c ];\n\n\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\n\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\n\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t_face.id = object.id;\n\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t// use first vertex normal as face normal\n\n\t\t\t\t_face.normalModel.fromArray( normals, a * 3 );\n\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\n\t\t\t\t}\n\n\t\t\t\t_face.vertexNormalsLength = 3;\n\n\t\t\t\t_face.material = object.material;\n\n\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetObject: setObject,\n\t\t\tprojectVertex: projectVertex,\n\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\tpushVertex: pushVertex,\n\t\t\tpushNormal: pushNormal,\n\t\t\tpushUv: pushUv,\n\t\t\tpushLine: pushLine,\n\t\t\tpushTriangle: pushTriangle\n\t\t}\n\n\t};\n\n\tvar renderList = new RenderList();\n\n\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n\t\t_faceCount = 0;\n\t\t_lineCount = 0;\n\t\t_spriteCount = 0;\n\n\t\t_renderData.elements.length = 0;\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\n\t\t//\n\n\t\t_objectCount = 0;\n\n\t\t_renderData.objects.length = 0;\n\t\t_renderData.lights.length = 0;\n\n\t\tfunction addObject( object ) {\n\n\t\t\t_object = getNextObjectInPool();\n\t\t\t_object.id = object.id;\n\t\t\t_object.object = object;\n\n\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\n\t\t\t_object.z = _vector3.z;\n\t\t\t_object.renderOrder = object.renderOrder;\n\n\t\t\t_renderData.objects.push( _object );\n\n\t\t}\n\n\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\t_renderData.lights.push( object );\n\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line ) {\n\n\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\n\n\t\t\t\taddObject( object );\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\n\n\t\t\t\taddObject( object );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( sortObjects === true ) {\n\n\t\t\t_renderData.objects.sort( painterSort );\n\n\t\t}\n\n\t\t//\n\n\t\tfor ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\n\n\t\t\tvar object = _renderData.objects[ o ].object;\n\t\t\tvar geometry = object.geometry;\n\n\t\t\trenderList.setObject( object );\n\n\t\t\t_modelMatrix = object.matrixWorld;\n\n\t\t\t_vertexCount = 0;\n\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\n\t\t\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( var o = 0; o < groups.length; o ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\n\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material : null;\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector3.copy( vertex );\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\n\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\n\t\t\t\t\t\tmaterial = isFaceMaterial === true\n\t\t\t\t\t\t\t ? objectMaterials.materials[ face.materialIndex ]\n\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\tvar side = material.side;\n\n\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\n\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\n\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\n\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\n\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t_face.v3.copy( v3 );\n\n\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\n\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t_face.normalModel.negate();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\n\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\n\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\tnormalModel.negate();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\n\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\n\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\n\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\n\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\n\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\n\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\n\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\n\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\n\t\t\t\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\n\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tvar invW = 1 / _vector4.w;\n\n\t\t\t\t_vector4.z *= invW;\n\n\t\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\n\t\t\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t\t\t_sprite.id = object.id;\n\t\t\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t\t\t_sprite.z = _vector4.z;\n\t\t\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t\t\t_sprite.object = object;\n\n\t\t\t\t\t_sprite.rotation = object.rotation;\n\n\t\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\n\t\t\t\t\t_sprite.material = object.material;\n\n\t\t\t\t\t_renderData.elements.push( _sprite );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( sortElements === true ) {\n\n\t\t\t_renderData.elements.sort( painterSort );\n\n\t\t}\n\n\t\treturn _renderData;\n\n\t};\n\n\t// Pools\n\n\tfunction getNextObjectInPool() {\n\n\t\tif ( _objectCount === _objectPoolLength ) {\n\n\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t_objectPool.push( object );\n\t\t\t_objectPoolLength ++;\n\t\t\t_objectCount ++;\n\t\t\treturn object;\n\n\t\t}\n\n\t\treturn _objectPool[ _objectCount ++ ];\n\n\t}\n\n\tfunction getNextVertexInPool() {\n\n\t\tif ( _vertexCount === _vertexPoolLength ) {\n\n\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t_vertexPool.push( vertex );\n\t\t\t_vertexPoolLength ++;\n\t\t\t_vertexCount ++;\n\t\t\treturn vertex;\n\n\t\t}\n\n\t\treturn _vertexPool[ _vertexCount ++ ];\n\n\t}\n\n\tfunction getNextFaceInPool() {\n\n\t\tif ( _faceCount === _facePoolLength ) {\n\n\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t_facePool.push( face );\n\t\t\t_facePoolLength ++;\n\t\t\t_faceCount ++;\n\t\t\treturn face;\n\n\t\t}\n\n\t\treturn _facePool[ _faceCount ++ ];\n\n\n\t}\n\n\tfunction getNextLineInPool() {\n\n\t\tif ( _lineCount === _linePoolLength ) {\n\n\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t_linePool.push( line );\n\t\t\t_linePoolLength ++;\n\t\t\t_lineCount ++;\n\t\t\treturn line;\n\n\t\t}\n\n\t\treturn _linePool[ _lineCount ++ ];\n\n\t}\n\n\tfunction getNextSpriteInPool() {\n\n\t\tif ( _spriteCount === _spritePoolLength ) {\n\n\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t_spritePool.push( sprite );\n\t\t\t_spritePoolLength ++;\n\t\t\t_spriteCount ++;\n\t\t\treturn sprite;\n\n\t\t}\n\n\t\treturn _spritePool[ _spriteCount ++ ];\n\n\t}\n\n\t//\n\n\tfunction painterSort( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else if ( a.id !== b.id ) {\n\n\t\t\treturn a.id - b.id;\n\n\t\t} else {\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t}\n\n\tfunction clipLine( s1, s2 ) {\n\n\t\tvar alpha1 = 0, alpha2 = 1,\n\n\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t// Z = -1 and Z = +1, respectively.\n\t\tbc1near =  s1.z + s1.w,\n\t\tbc2near =  s2.z + s2.w,\n\t\tbc1far =  - s1.z + s1.w,\n\t\tbc2far =  - s2.z + s2.w;\n\n\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\treturn true;\n\n\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\n\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\treturn false;\n\n\t\t} else {\n\n\t\t\t// The line segment spans at least one clip plane.\n\n\t\t\tif ( bc1near < 0 ) {\n\n\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t} else if ( bc2near < 0 ) {\n\n\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t}\n\n\t\t\tif ( bc1far < 0 ) {\n\n\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t} else if ( bc2far < 0 ) {\n\n\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t}\n\n\t\t\tif ( alpha2 < alpha1 ) {\n\n\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/Projector.js\n ** module id = 28\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author bchirls / http://bchirls.com/\n */\n\nTHREE.VRStereoEffect = function ( renderer, fullScreenElement, options ) {\n\n\t// internals\n\tvar self = this;\n\tvar width = 0, height = 0;\n\tvar hmdWidth, hmdHeight;\n\n\tvar hmdDevice;\n\tvar vrMode;\n    var inWebview = false;\n\tvar vrPreview = false;\n\tvar eyeOffsetLeft = new THREE.Vector3();\n\tvar eyeOffsetRight = new THREE.Vector3();\n\n\tvar position = new THREE.Vector3();\n\tvar quaternion = new THREE.Quaternion();\n\tvar scale = new THREE.Vector3();\n\n\tvar cameraLeft = new THREE.PerspectiveCamera();\n\tvar cameraRight = new THREE.PerspectiveCamera();\n\tvar leftRenderRect = {\n\t\tx: 0, y: 0, width: 0, height: 0\n\t};\n\tvar rightRenderRect = {\n\t\tx: 0, y: 0, width: 0, height: 0\n\t};\n\n\tvar near = 2;\n\tvar far = 40000;\n\n\tvar requestFullscreen;\n\tvar fullScreenParam = {\n\t\tvrDisplay: null\n\t};\n\tvar fovScale;\n\n\tvar RADIANS = Math.PI / 180;\n\n\tvar poll = options && options.poll || 1000;\n\tvar pollTimeout;\n\n\tfunction perspectiveMatrixFromVRFieldOfView(fov, zNear, zFar) {\n\t\tvar outMat = new THREE.Matrix4(),\n\t\t\tout = outMat.elements,\n\t\t\tupTan = Math.tan(fov.upDegrees * RADIANS),\n\t\t\tdownTan = Math.tan(fov.downDegrees * RADIANS),\n\t\t\tleftTan = Math.tan(fov.leftDegrees * RADIANS),\n\t\t\trightTan = Math.tan(fov.rightDegrees * RADIANS),\n\n\t\t\txScale = 2 / (leftTan + rightTan),\n\t\t\tyScale = 2 / (upTan + downTan);\n\n\t\tout[0] = xScale;\n\t\tout[4] = 0;\n\t\tout[8] = -((leftTan - rightTan) * xScale * 0.5);\n\t\tout[12] = 0;\n\n\t\tout[1] = 0;\n\t\tout[5] = yScale;\n\t\tout[9] = ((upTan - downTan) * yScale * 0.5);\n\t\tout[13] = 0;\n\n\t\tout[2] = 0;\n\t\tout[6] = 0;\n\t\tout[10] = zFar / (zNear - zFar);\n\t\tout[14] = (zFar * zNear) / (zNear - zFar);\n\n\t\tout[3] = 0;\n\t\tout[7] = 0;\n\t\tout[11] = -1;\n\t\tout[15] = 0;\n\n\t\treturn outMat;\n\t}\n\n\tfunction resize() {\n\t\tvar w, h;\n\n\t\tif (hmdDevice && vrMode) {\n\t\t\tw = hmdWidth;// / Math.pow(window.devicePixelRatio || 1, 2);\n\t\t\th = hmdHeight;// / Math.pow(window.devicePixelRatio || 1, 2);\n\t\t} else {\n\t\t\tw = width || renderer.domElement.offsetWidth || window.innerWidth;\n\t\t\th = height || renderer.domElement.offsetHeight || window.innerHeight;\n\t\t}\n\n\t\trenderer.setSize(w, h);\n\t}\n\n\tfunction updateProjection() {\n\t\tvar fovLeft,\n\t\t\tfovRight,\n\n\t\t\tleftEyeParams,\n\t\t\trightEyeParams,\n\t\t\tleftEyeRect,\n\t\t\trightEyeRect,\n\n\t\t\tleftEyeViewport,\n\t\t\trightEyeViewport;\n\n\t\tif (!hmdDevice) {\n\t\t\tcameraLeft.fov = 80;\n\t\t\tcameraRight.fov = 80;\n\t\t\treturn;\n\t\t}\n\n\t\t// if (amount && hmdDevice.setFieldOfView) {\n\t\t// \tfovScale += amount;\n\t\t// \tfovScale = Math.max(0.1, fovScale);\n\n\t\t// \tfovLeft = hmdDevice.getRecommendedEyeFieldOfView('left');\n\n\t\t// \tfovLeft.upDegrees *= fovScale;\n\t\t// \tfovLeft.downDegrees *= fovScale;\n\t\t// \tfovLeft.leftDegrees *= fovScale;\n\t\t// \tfovLeft.rightDegrees *= fovScale;\n\n\t\t// \tfovRight = hmdDevice.getRecommendedEyeFieldOfView('right');\n\t\t// \tfovRight.upDegrees *= fovScale;\n\t\t// \tfovRight.downDegrees *= fovScale;\n\t\t// \tfovRight.leftDegrees *= fovScale;\n\t\t// \tfovRight.rightDegrees *= fovScale;\n\n\t\t// \thmdDevice.setFieldOfView(fovLeft, fovRight);\n\t\t// }\n\n\t\tif (hmdDevice.getEyeParameters) {\n\t\t\tleftEyeParams = hmdDevice.getEyeParameters('left');\n\t\t\trightEyeParams = hmdDevice.getEyeParameters('right');\n\t\t\tleftEyeRect = leftEyeParams.renderRect;\n\t\t\trightEyeRect = rightEyeParams.renderRect;\n\n\t\t\thmdWidth = rightEyeRect.x + rightEyeRect.width;\n\t\t\thmdHeight = Math.max(leftEyeRect.y + leftEyeRect.height, rightEyeRect.y + rightEyeRect.height);\n\n\t\t\tfovLeft = leftEyeParams.currentFieldOfView;\n\t\t\tfovRight = rightEyeParams.currentFieldOfView;\n\n\t\t\thmdDevice.setFieldOfView(fovLeft, fovRight, near, far);\n\n\t\t\teyeOffsetLeft.copy(leftEyeParams.eyeTranslation);\n\t\t\teyeOffsetRight.copy(rightEyeParams.eyeTranslation);\n\n\t\t\tleftRenderRect = leftEyeParams.renderRect;\n\t\t\trightRenderRect = rightEyeParams.renderRect;\n\t\t} else if (hmdDevice.getRecommendedEyeRenderRect) {\n\t\t\tleftEyeViewport = hmdDevice.getRecommendedEyeRenderRect('left');\n\t\t\trightEyeViewport = hmdDevice.getRecommendedEyeRenderRect('right');\n\n\t\t\thmdWidth = leftEyeViewport.width + rightEyeViewport.width;\n\t\t\thmdHeight = Math.max(leftEyeViewport.height, rightEyeViewport.height);\n\n\t\t\tif (hmdDevice.getCurrentEyeFieldOfView) {\n\t\t\t\tfovLeft = hmdDevice.getCurrentEyeFieldOfView('left');\n\t\t\t\tfovRight = hmdDevice.getCurrentEyeFieldOfView('right');\n\t\t\t} else {\n\t\t\t\tfovLeft = hmdDevice.getRecommendedEyeFieldOfView('left');\n\t\t\t\tfovRight = hmdDevice.getRecommendedEyeFieldOfView('right');\n\t\t\t}\n\n\t\t\teyeOffsetLeft.copy(hmdDevice.getEyeTranslation('left'));\n\t\t\teyeOffsetRight.copy(hmdDevice.getEyeTranslation('right'));\n\n\t\t\tleftRenderRect.x = leftEyeViewport.left;\n\t\t\tleftRenderRect.y = leftEyeViewport.top;\n\t\t\tleftRenderRect.width = leftEyeViewport.width;\n\t\t\tleftRenderRect.height = leftEyeViewport.height;\n\n\t\t\trightRenderRect.x = rightEyeViewport.left;\n\t\t\trightRenderRect.y = rightEyeViewport.top;\n\t\t\trightRenderRect.width = rightEyeViewport.width;\n\t\t\trightRenderRect.height = rightEyeViewport.height;\n\t\t}\n\n\t\tresize();\n\n\t\tcameraLeft.projectionMatrix = perspectiveMatrixFromVRFieldOfView(fovLeft, near, far);\n\t\tcameraRight.projectionMatrix = perspectiveMatrixFromVRFieldOfView(fovRight, near, far);\n\t}\n\n\tfunction gotVRDevices(devices) {\n\t\tvar i,\n\t\t\tdevice;\n\n\t\tfor (i = 0; i < devices.length; i++) {\n\t\t\tdevice = devices[i];\n\t\t\tif ( device instanceof HMDVRDevice ) {\n\n\t\t\t\tif ( hmdDevice && device.hardwareUnitId === hmdDevice.hardwareUnitId ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thmdDevice = device;\n\t\t\t\tconsole.log('Using HMD Device:', hmdDevice.deviceName);\n\n\t\t\t\tif (hmdDevice.setTimewarp) {\n\t\t\t\t\t//hmdDevice.setTimewarp(false);\n\t\t\t\t}\n\n\t\t\t\tupdateProjection();\n\n\t\t\t\tfullScreenParam.vrDisplay = hmdDevice;\n\n\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t} );\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (poll) {\n\t\t\tclearTimeout(pollTimeout);\n\t\t\tsetTimeout(self.scan, poll);\n\t\t}\n\t}\n\n\tfunction onFullscreenChange() {\n\t\tif (!document.webkitFullscreenElement &&\n\t\t\t\t!document.mozFullScreenElement &&\n\t\t\t\t!document.msFullscreenElement) {\n\t\t\tvrMode = false;\n\t\t}\n\n\t\tupdateProjection();\n\n\t\tself.dispatchEvent( {\n\t\t\ttype: \"fullscreenchange\"\n\t\t} );\n\t}\n\n\t// API\n\n\tthis.separation = 0.01;\n\n\t// initialization\n\n\trenderer.autoClear = false;\n\n\tif (!fullScreenElement) {\n\t\tfullScreenElement = renderer.domElement;\n\t}\n\trequestFullscreen = fullScreenElement.webkitRequestFullscreen ||\n\t\tfullScreenElement.mozRequestFullScreen ||\n\t\tfullScreenElement.msRequestFullscreen;\n\tif (requestFullscreen) {\n\t\trequestFullscreen = requestFullscreen.bind(fullScreenElement, fullScreenParam);\n\t}\n\n\tdocument.addEventListener('fullscreenchange', onFullscreenChange, false);\n\tdocument.addEventListener('webkitfullscreenchange', onFullscreenChange, false);\n\tdocument.addEventListener('mozfullscreenchange', onFullscreenChange, false);\n\tdocument.addEventListener('MSFullscreenChange', onFullscreenChange, false);\n\n\t//todo: method for adjusting HMD FOV\n\n\tthis.scan = function () {\n\t\tif (navigator.getVRDevices) {\n\t\t\tnavigator.getVRDevices().then(gotVRDevices);\n\t\t} else if (navigator.mozGetVRDevices) {\n\t\t\tnavigator.mozGetVRDevices(gotVRDevices);\n\t\t}\n\t};\n\n\tthis.requestFullScreen = function () {\n\t\tvrMode = true;\n\t\trequestFullscreen();\n\t};\n\n\tthis.exit = function () {\n\t\tvrMode = false;\n\t\tvrPreview = false;\n\t};\n\n\tthis.setSize = function ( w, h ) {\n\t\twidth = w;\n\t\theight = h;\n\n\t\tresize();\n\t};\n\n\tthis.vrPreview = function (val) {\n\t\tif (val !== undefined) {\n\t\t\tvrPreview = !!val;\n\t\t}\n\t\treturn vrPreview;\n\t};\n\n\tthis.isFullscreen = function () {\n\t\treturn vrMode;\n\t};\n\n    // Add by kuilin.qkl\n    this.isWebview = function (bool) {\n        if (typeof bool === 'undefined') return inWebview;\n        inWebview = bool;\n        return inWebview;\n    };\n\n\tthis.hmd = function () {\n\t\treturn hmdDevice;\n\t};\n\n\tthis.render = function ( leftScene, rightScene, camera, renderTarget, forceClear ) {\n\t\tvar w, h;\n\n\t\tif ( rightScene && rightScene instanceof THREE.Scene ) {\n\t\t\t//rightScene.updateMatrixWorld();\n\t\t} else {\n\t\t\tif ( (!camera || camera instanceof THREE.WebGLRenderTarget) && rightScene instanceof THREE.Camera ) {\n\t\t\t\tforceClear = renderTarget;\n\t\t\t\trenderTarget = camera;\n\t\t\t\tcamera = rightScene;\n\t\t\t}\n\t\t\trightScene = leftScene;\n\t\t}\n\n\t\t//leftScene.updateMatrixWorld();\n\n\t\tif ( camera.parent === undefined ) {\n\t\t\tcamera.updateMatrixWorld();\n\t\t}\n\n\t\tw = width || renderer.domElement.width;\n\t\th = height || renderer.domElement.height;\n        // This code would not be annotated if mobile model.\n\t\tw /= window.devicePixelRatio || 1;\n\t\th /= window.devicePixelRatio || 1;\n\n\t\t/**\n\t\t *  TODO: make this work when CSS VR Rendering is fixed\n\t\t *  http://blog.bitops.com/blog/2014/08/20/updated-firefox-vr-builds/\n         *  Open by kuilin.qkl\n         */\n\t\tif (renderer instanceof THREE.CanvasRenderer || renderer instanceof THREE.CSS3DRenderer) {\n\t\t\trenderer.render( leftScene, camera );\n\t\t\treturn;\n\t\t}\n\n\t\tif (!vrMode && !vrPreview) {\n\t\t\trenderer.enableScissorTest( false );\n\t\t\trenderer.setViewport( 0, 0, w, h );\n\t\t\trenderer.render( leftScene, camera, renderTarget, true );\n\t\t\treturn;\n\t\t}\n\n\t\tcamera.matrixWorld.decompose( position, quaternion, scale );\n\n\t\tif (!hmdDevice) {\n\t\t\t// left\n\t\t\tcameraLeft.fov = camera.fov;\n\t\t\tcameraLeft.aspect = 0.5 * camera.aspect;\n\t\t\tcameraLeft.near = camera.near;\n\t\t\tcameraLeft.far = camera.far;\n\t\t\tcameraLeft.updateProjectionMatrix();\n\n\t\t\t// right\n\n\t\t\tcameraRight.fov = camera.fov;\n\t\t\tcameraRight.aspect = 0.5 * camera.aspect;\n\t\t\tcameraRight.near = camera.near;\n\t\t\tcameraRight.far = camera.far;\n\t\t\tcameraRight.updateProjectionMatrix();\n\t\t}\n\n\t\tcameraLeft.position.copy( position );\n\t\tcameraLeft.quaternion.copy( quaternion );\n\n\t\tcameraRight.position.copy( position );\n\t\tcameraRight.quaternion.copy( quaternion );\n\n\t\tif (hmdDevice) {\n\t\t\tcameraLeft.position.add( eyeOffsetLeft ) ;\n\t\t\tcameraRight.position.add( eyeOffsetRight );\n\t\t} else {\n\t\t\tcameraLeft.translateX( - this.separation );\n\t\t\tcameraRight.translateX( this.separation );\n\t\t}\n\n\t\tcameraLeft.updateMatrixWorld();\n\t\tcameraRight.updateMatrixWorld();\n\n        // Bug fixed if device's Ratio > 1\n        w = renderer.context.drawingBufferWidth / ( 2 * window.devicePixelRatio );\n\n\t\tif (renderTarget) {\n\t\t\trenderer.setRenderTarget(renderTarget);\n\t\t}\n\n\t\trightScene.traverseVisible(function (obj) {\n\t\t\tif (obj.material && obj.material.map) {\n\t\t\t\tif (obj.userData.stereo === 'vertical') {\n\t\t\t\t\tobj.material.map.offset.set(0, 0.5);\n\t\t\t\t} else if (obj.userData.stereo) {\n\t\t\t\t\tobj.material.map.offset.set(0.5, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n        // Modify by kuilin.qkl\n        // Not use Fullscreen\n        if (inWebview) {\n            renderer.setScissor( 0, h >> 1, w * 2, h >> 1 );\n            renderer.setViewport( 0, h >> 1, w * 2, h >> 1 );\n        } else {\n            renderer.setScissor( w, 0, w, h );\n            renderer.setViewport( w, 0, w, h );\n        }\n\t\trenderer.render( rightScene, cameraRight, renderTarget, forceClear );\n\n\t\tleftScene.traverseVisible(function (obj) {\n\t\t\tif (obj.userData.stereo && obj.material && obj.material.map) {\n\t\t\t\tobj.material.map.offset.set(0, 0);\n\t\t\t}\n\t\t});\n        if (inWebview) {\n            renderer.setScissor( 0, 0, w * 2, h >> 1 );\n            renderer.setViewport( 0, 0, w * 2, h >> 1 );\n        } else {\n            renderer.setScissor( 0, 0, w, h );\n            renderer.setViewport( 0, 0, w, h );\n        }\n\t\trenderer.render( leftScene, cameraLeft, renderTarget, forceClear );\n\n\t\t//reset viewport, scissor\n\t\tw *= 2;\n        renderer.setViewport( 0, 0, w, h );\n        renderer.setScissor( 0, 0, w, h );\n\t\trenderer.enableScissorTest( false );\n\t};\n\n\tObject.defineProperty(this, 'near', {\n\t\tget: function () {\n\t\t\treturn near;\n\t\t},\n\t\tset: function (val) {\n\t\t\tval = parseFloat(val);\n\t\t\tif (val && !isNaN(val)) {\n\t\t\t\tnear = Math.max(0, val);\n\t\t\t\tupdateProjection();\n\t\t\t}\n\t\t}\n\t});\n\n\tObject.defineProperty(this, 'far', {\n\t\tget: function () {\n\t\t\treturn far;\n\t\t},\n\t\tset: function (val) {\n\t\t\tval = parseFloat(val);\n\t\t\tif (val && !isNaN(val)) {\n\t\t\t\tfar = Math.max(0, val);\n\t\t\t\tupdateProjection();\n\t\t\t}\n\t\t}\n\t});\n\n\tthis.scan();\n\tresize();\n};\n\nTHREE.VRStereoEffect.prototype = Object.create( THREE.EventDispatcher.prototype );\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/VRStereoEffect.js\n ** module id = 29\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\nTHREE.VRControls = function ( object, options ) {\n\n\tvar self = this;\n\n\t//HMD sensor stuff\n\tvar sensorDevice;\n\tvar vrState;\n\n\t//device orientation stuff\n\tvar deviceControls;\n\tvar zeroAngle = 0;\n\n\tvar mode = '';\n\n\tvar vrBrowser = navigator.getVRDevices || navigator.mozGetVRDevices;\n\n\tvar poll = options && options.poll || 1000;\n\tvar pollTimeout;\n\n\tfunction gotVRDevices( devices ) {\n\t\tvar i,\n\t\t\tdevice;\n\n\t\tfor ( i = 0; i < devices.length; ++i ) {\n\t\t\tdevice = devices[i];\n\t\t\tif ( devices[i] instanceof PositionSensorVRDevice ) {\n\n\t\t\t\tif ( sensorDevice && devices[i].hardwareUnitId === sensorDevice.hardwareUnitId ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tsensorDevice = device;\n\t\t\t\tconsole.log('Using Sensor Device:', sensorDevice.deviceName);\n\n\t\t\t\tif ( sensorDevice.zeroSensor ) {\n\t\t\t\t\tself.zeroSensor = sensorDevice.zeroSensor.bind(sensorDevice);\n\t\t\t\t} else if ( sensorDevice.resetSensor ) {\n\t\t\t\t\tself.zeroSensor = sensorDevice.resetSensor.bind(sensorDevice);\n\t\t\t\t}\n\t\t\t\tself.zeroSensor();\n\n\t\t\t\tmode = 'hmd';\n\n\t\t\t\tself.dispatchEvent( {\n\t\t\t\t\ttype: \"devicechange\"\n\t\t\t\t} );\n\n\t\t\t\tbreak; // We keep the first we encounter\n\t\t\t}\n\t\t}\n\n\t\tif (poll) {\n\t\t\tclearTimeout(pollTimeout);\n\t\t\tsetTimeout(self.scan, poll);\n\t\t}\n\t}\n\n\tfunction deviceOrientationChange( event ) {\n\t\tif ( typeof event.gamma === 'number' ) {\n\t\t\tmode = 'deviceorientation';\n\t\t\twindow.removeEventListener( 'deviceorientation', deviceOrientationChange, false );\n\t\t\tdeviceControls = new THREE.DeviceOrientationControls( object );\n\t\t\tdeviceControls.connect();\n\t\t\tif (!this.freeze) {\n\t\t\t\tdeviceControls.update();\n\t\t\t}\n\n\t\t\tself.dispatchEvent( {\n\t\t\t\ttype: \"devicechange\"\n\t\t\t} );\n\t\t}\n\t}\n\n\tthis.update = function() {\n\t\t// Applies head rotation from sensor data.\n\t\tif (self.freeze) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( sensorDevice ) {\n\t\t\tvrState = sensorDevice.getState();\n\t\t\tif ( vrState ) {\n\t\t\t\tif ( vrState.orientation && vrState.hasOrientation !== false ) {\n\t\t\t\t\tobject.quaternion.copy( vrState.orientation );\n\t\t\t\t}\n\n\t\t\t\tif ( vrState.position && vrState.hasPosition !== false ) {\n\t\t\t\t\t// vrState.position is null if using DK1 or if DK2 camera is not plugged in\n\t\t\t\t\tobject.position.copy( vrState.position );\n\t\t\t\t}\n\n\t\t\t\tobject.updateMatrixWorld();\n\t\t\t}\n\t\t} else if (deviceControls && deviceControls.deviceOrientation.gamma !== undefined) {\n\t\t\tdeviceControls.update();\n\t\t\tobject.rotateY(-zeroAngle);\n\t\t\tobject.updateMatrixWorld();\n\t\t}\n\t};\n\n\t//only useful when frozen\n\tthis.reset = function () {\n\t\tif ( object ) {\n\t\t\tobject.quaternion.set( 0, 0, 0, 1 );\n\t\t\tobject.position.set( 0, 0, 0 );\n\t\t}\n\t};\n\n\t//zeros only rotation on Y axis\n\t//todo: find out if it zeros out position. need a DK2 to test\n\tthis.zeroSensor = function () {\n\t\tif (sensorDevice && sensorDevice.zeroSensor) {\n\t\t\tsensorDevice.zeroSensor();\n\t\t}\n\t\tzeroAngle = object.rotation.y;\n\t\tself.update();\n\t};\n\n\tthis.freeze = false;\n\n\t//method to query which tech we're using\n\tthis.mode = function () {\n\t\treturn mode;\n\t};\n\n\tthis.scan = function () {\n\t\tif ( navigator.getVRDevices ) {\n\t\t\tnavigator.getVRDevices().then( gotVRDevices );\n\t\t} else if ( navigator.mozGetVRDevices ) {\n\t\t\tnavigator.mozGetVRDevices( gotVRDevices );\n\t\t}\n\t};\n\n\t//todo: connect/disconnect methods\n\t//todo: method to query orientation/position without changing object\n\t//todo: work without an object\n\n\tif ( vrBrowser ) {\n\t\tthis.scan();\n\t} else if ( \"DeviceOrientationEvent\" in window && THREE.DeviceOrientationControls) {\n\t\t//device orientation\n\t\twindow.addEventListener( \"deviceorientation\", deviceOrientationChange, false );\n\t}\n};\n\nTHREE.VRControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/VRControls.js\n ** module id = 30\n ** module chunks = 0\n **/","'use strict';\n\nvar d        = require('d')\n  , callable = require('es5-ext/object/valid-callable')\n\n  , apply = Function.prototype.apply, call = Function.prototype.call\n  , create = Object.create, defineProperty = Object.defineProperty\n  , defineProperties = Object.defineProperties\n  , hasOwnProperty = Object.prototype.hasOwnProperty\n  , descriptor = { configurable: true, enumerable: false, writable: true }\n\n  , on, once, off, emit, methods, descriptors, base;\n\non = function (type, listener) {\n\tvar data;\n\n\tcallable(listener);\n\n\tif (!hasOwnProperty.call(this, '__ee__')) {\n\t\tdata = descriptor.value = create(null);\n\t\tdefineProperty(this, '__ee__', descriptor);\n\t\tdescriptor.value = null;\n\t} else {\n\t\tdata = this.__ee__;\n\t}\n\tif (!data[type]) data[type] = listener;\n\telse if (typeof data[type] === 'object') data[type].push(listener);\n\telse data[type] = [data[type], listener];\n\n\treturn this;\n};\n\nonce = function (type, listener) {\n\tvar once, self;\n\n\tcallable(listener);\n\tself = this;\n\ton.call(this, type, once = function () {\n\t\toff.call(self, type, once);\n\t\tapply.call(listener, this, arguments);\n\t});\n\n\tonce.__eeOnceListener__ = listener;\n\treturn this;\n};\n\noff = function (type, listener) {\n\tvar data, listeners, candidate, i;\n\n\tcallable(listener);\n\n\tif (!hasOwnProperty.call(this, '__ee__')) return this;\n\tdata = this.__ee__;\n\tif (!data[type]) return this;\n\tlisteners = data[type];\n\n\tif (typeof listeners === 'object') {\n\t\tfor (i = 0; (candidate = listeners[i]); ++i) {\n\t\t\tif ((candidate === listener) ||\n\t\t\t\t\t(candidate.__eeOnceListener__ === listener)) {\n\t\t\t\tif (listeners.length === 2) data[type] = listeners[i ? 0 : 1];\n\t\t\t\telse listeners.splice(i, 1);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ((listeners === listener) ||\n\t\t\t\t(listeners.__eeOnceListener__ === listener)) {\n\t\t\tdelete data[type];\n\t\t}\n\t}\n\n\treturn this;\n};\n\nemit = function (type) {\n\tvar i, l, listener, listeners, args;\n\n\tif (!hasOwnProperty.call(this, '__ee__')) return;\n\tlisteners = this.__ee__[type];\n\tif (!listeners) return;\n\n\tif (typeof listeners === 'object') {\n\t\tl = arguments.length;\n\t\targs = new Array(l - 1);\n\t\tfor (i = 1; i < l; ++i) args[i - 1] = arguments[i];\n\n\t\tlisteners = listeners.slice();\n\t\tfor (i = 0; (listener = listeners[i]); ++i) {\n\t\t\tapply.call(listener, this, args);\n\t\t}\n\t} else {\n\t\tswitch (arguments.length) {\n\t\tcase 1:\n\t\t\tcall.call(listeners, this);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcall.call(listeners, this, arguments[1]);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcall.call(listeners, this, arguments[1], arguments[2]);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tl = arguments.length;\n\t\t\targs = new Array(l - 1);\n\t\t\tfor (i = 1; i < l; ++i) {\n\t\t\t\targs[i - 1] = arguments[i];\n\t\t\t}\n\t\t\tapply.call(listeners, this, args);\n\t\t}\n\t}\n};\n\nmethods = {\n\ton: on,\n\tonce: once,\n\toff: off,\n\temit: emit\n};\n\ndescriptors = {\n\ton: d(on),\n\tonce: d(once),\n\toff: d(off),\n\temit: d(emit)\n};\n\nbase = defineProperties({}, descriptors);\n\nmodule.exports = exports = function (o) {\n\treturn (o == null) ? create(base) : defineProperties(Object(o), descriptors);\n};\nexports.methods = methods;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/index.js\n ** module id = 31\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader/lib/css-base.js\n ** module id = 32\n ** module chunks = 0\n **/","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (factory((global.THREE = global.THREE || {})));\n}(this, (function (exports) { 'use strict';\n\n    // Polyfills\n\n    if ( Number.EPSILON === undefined ) {\n\n    \tNumber.EPSILON = Math.pow( 2, - 52 );\n\n    }\n\n    //\n\n    if ( Math.sign === undefined ) {\n\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n    \tMath.sign = function ( x ) {\n\n    \t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n    \t};\n\n    }\n\n    if ( Function.prototype.name === undefined ) {\n\n    \t// Missing in IE9-11.\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n    \tObject.defineProperty( Function.prototype, 'name', {\n\n    \t\tget: function () {\n\n    \t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\n    \t\t}\n\n    \t} );\n\n    }\n\n    if ( Object.assign === undefined ) {\n\n    \t// Missing in IE.\n    \t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n    \t( function () {\n\n    \t\tObject.assign = function ( target ) {\n\n    \t\t\t'use strict';\n\n    \t\t\tif ( target === undefined || target === null ) {\n\n    \t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n    \t\t\t}\n\n    \t\t\tvar output = Object( target );\n\n    \t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n    \t\t\t\tvar source = arguments[ index ];\n\n    \t\t\t\tif ( source !== undefined && source !== null ) {\n\n    \t\t\t\t\tfor ( var nextKey in source ) {\n\n    \t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n    \t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn output;\n\n    \t\t};\n\n    \t} )();\n\n    }\n\n    /**\n     * https://github.com/mrdoob/eventdispatcher.js/\n     */\n\n    function EventDispatcher() {}\n\n    Object.assign( EventDispatcher.prototype, {\n\n    \taddEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) this._listeners = {};\n\n    \t\tvar listeners = this._listeners;\n\n    \t\tif ( listeners[ type ] === undefined ) {\n\n    \t\t\tlisteners[ type ] = [];\n\n    \t\t}\n\n    \t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n    \t\t\tlisteners[ type ].push( listener );\n\n    \t\t}\n\n    \t},\n\n    \thasEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) return false;\n\n    \t\tvar listeners = this._listeners;\n\n    \t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tremoveEventListener: function ( type, listener ) {\n\n    \t\tif ( this._listeners === undefined ) return;\n\n    \t\tvar listeners = this._listeners;\n    \t\tvar listenerArray = listeners[ type ];\n\n    \t\tif ( listenerArray !== undefined ) {\n\n    \t\t\tvar index = listenerArray.indexOf( listener );\n\n    \t\t\tif ( index !== - 1 ) {\n\n    \t\t\t\tlistenerArray.splice( index, 1 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tdispatchEvent: function ( event ) {\n\n    \t\tif ( this._listeners === undefined ) return;\n\n    \t\tvar listeners = this._listeners;\n    \t\tvar listenerArray = listeners[ event.type ];\n\n    \t\tif ( listenerArray !== undefined ) {\n\n    \t\t\tevent.target = this;\n\n    \t\t\tvar array = [], i = 0;\n    \t\t\tvar length = listenerArray.length;\n\n    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\n    \t\t\t\tarray[ i ] = listenerArray[ i ];\n\n    \t\t\t}\n\n    \t\t\tfor ( i = 0; i < length; i ++ ) {\n\n    \t\t\t\tarray[ i ].call( this, event );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    var REVISION = '81';\n    var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n    var CullFaceNone = 0;\n    var CullFaceBack = 1;\n    var CullFaceFront = 2;\n    var CullFaceFrontBack = 3;\n    var FrontFaceDirectionCW = 0;\n    var FrontFaceDirectionCCW = 1;\n    var BasicShadowMap = 0;\n    var PCFShadowMap = 1;\n    var PCFSoftShadowMap = 2;\n    var FrontSide = 0;\n    var BackSide = 1;\n    var DoubleSide = 2;\n    var FlatShading = 1;\n    var SmoothShading = 2;\n    var NoColors = 0;\n    var FaceColors = 1;\n    var VertexColors = 2;\n    var NoBlending = 0;\n    var NormalBlending = 1;\n    var AdditiveBlending = 2;\n    var SubtractiveBlending = 3;\n    var MultiplyBlending = 4;\n    var CustomBlending = 5;\n    var BlendingMode = {\n        NoBlending: NoBlending,\n        NormalBlending: NormalBlending,\n        AdditiveBlending: AdditiveBlending,\n        SubtractiveBlending: SubtractiveBlending,\n        MultiplyBlending: MultiplyBlending,\n        CustomBlending: CustomBlending\n    };\n    var AddEquation = 100;\n    var SubtractEquation = 101;\n    var ReverseSubtractEquation = 102;\n    var MinEquation = 103;\n    var MaxEquation = 104;\n    var ZeroFactor = 200;\n    var OneFactor = 201;\n    var SrcColorFactor = 202;\n    var OneMinusSrcColorFactor = 203;\n    var SrcAlphaFactor = 204;\n    var OneMinusSrcAlphaFactor = 205;\n    var DstAlphaFactor = 206;\n    var OneMinusDstAlphaFactor = 207;\n    var DstColorFactor = 208;\n    var OneMinusDstColorFactor = 209;\n    var SrcAlphaSaturateFactor = 210;\n    var NeverDepth = 0;\n    var AlwaysDepth = 1;\n    var LessDepth = 2;\n    var LessEqualDepth = 3;\n    var EqualDepth = 4;\n    var GreaterEqualDepth = 5;\n    var GreaterDepth = 6;\n    var NotEqualDepth = 7;\n    var MultiplyOperation = 0;\n    var MixOperation = 1;\n    var AddOperation = 2;\n    var NoToneMapping = 0;\n    var LinearToneMapping = 1;\n    var ReinhardToneMapping = 2;\n    var Uncharted2ToneMapping = 3;\n    var CineonToneMapping = 4;\n    var UVMapping = 300;\n    var CubeReflectionMapping = 301;\n    var CubeRefractionMapping = 302;\n    var EquirectangularReflectionMapping = 303;\n    var EquirectangularRefractionMapping = 304;\n    var SphericalReflectionMapping = 305;\n    var CubeUVReflectionMapping = 306;\n    var CubeUVRefractionMapping = 307;\n    var TextureMapping = {\n        UVMapping: UVMapping,\n        CubeReflectionMapping: CubeReflectionMapping,\n        CubeRefractionMapping: CubeRefractionMapping,\n        EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n        EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n        SphericalReflectionMapping: SphericalReflectionMapping,\n        CubeUVReflectionMapping: CubeUVReflectionMapping,\n        CubeUVRefractionMapping: CubeUVRefractionMapping\n    };\n    var RepeatWrapping = 1000;\n    var ClampToEdgeWrapping = 1001;\n    var MirroredRepeatWrapping = 1002;\n    var TextureWrapping = {\n        RepeatWrapping: RepeatWrapping,\n        ClampToEdgeWrapping: ClampToEdgeWrapping,\n        MirroredRepeatWrapping: MirroredRepeatWrapping\n    };\n    var NearestFilter = 1003;\n    var NearestMipMapNearestFilter = 1004;\n    var NearestMipMapLinearFilter = 1005;\n    var LinearFilter = 1006;\n    var LinearMipMapNearestFilter = 1007;\n    var LinearMipMapLinearFilter = 1008;\n    var TextureFilter = {\n        NearestFilter: NearestFilter,\n        NearestMipMapNearestFilter: NearestMipMapNearestFilter,\n        NearestMipMapLinearFilter: NearestMipMapLinearFilter,\n        LinearFilter: LinearFilter,\n        LinearMipMapNearestFilter: LinearMipMapNearestFilter,\n        LinearMipMapLinearFilter: LinearMipMapLinearFilter\n    };\n    var UnsignedByteType = 1009;\n    var ByteType = 1010;\n    var ShortType = 1011;\n    var UnsignedShortType = 1012;\n    var IntType = 1013;\n    var UnsignedIntType = 1014;\n    var FloatType = 1015;\n    var HalfFloatType = 1016;\n    var UnsignedShort4444Type = 1017;\n    var UnsignedShort5551Type = 1018;\n    var UnsignedShort565Type = 1019;\n    var UnsignedInt248Type = 1020;\n    var AlphaFormat = 1021;\n    var RGBFormat = 1022;\n    var RGBAFormat = 1023;\n    var LuminanceFormat = 1024;\n    var LuminanceAlphaFormat = 1025;\n    var RGBEFormat = RGBAFormat;\n    var DepthFormat = 1026;\n    var DepthStencilFormat = 1027;\n    var RGB_S3TC_DXT1_Format = 2001;\n    var RGBA_S3TC_DXT1_Format = 2002;\n    var RGBA_S3TC_DXT3_Format = 2003;\n    var RGBA_S3TC_DXT5_Format = 2004;\n    var RGB_PVRTC_4BPPV1_Format = 2100;\n    var RGB_PVRTC_2BPPV1_Format = 2101;\n    var RGBA_PVRTC_4BPPV1_Format = 2102;\n    var RGBA_PVRTC_2BPPV1_Format = 2103;\n    var RGB_ETC1_Format = 2151;\n    var LoopOnce = 2200;\n    var LoopRepeat = 2201;\n    var LoopPingPong = 2202;\n    var InterpolateDiscrete = 2300;\n    var InterpolateLinear = 2301;\n    var InterpolateSmooth = 2302;\n    var ZeroCurvatureEnding = 2400;\n    var ZeroSlopeEnding = 2401;\n    var WrapAroundEnding = 2402;\n    var TrianglesDrawMode = 0;\n    var TriangleStripDrawMode = 1;\n    var TriangleFanDrawMode = 2;\n    var LinearEncoding = 3000;\n    var sRGBEncoding = 3001;\n    var GammaEncoding = 3007;\n    var RGBEEncoding = 3002;\n    var LogLuvEncoding = 3003;\n    var RGBM7Encoding = 3004;\n    var RGBM16Encoding = 3005;\n    var RGBDEncoding = 3006;\n    var BasicDepthPacking = 3200;\n    var RGBADepthPacking = 3201;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    exports.Math = {\n\n    \tDEG2RAD: Math.PI / 180,\n    \tRAD2DEG: 180 / Math.PI,\n\n    \tgenerateUUID: function () {\n\n    \t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n    \t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n    \t\tvar uuid = new Array( 36 );\n    \t\tvar rnd = 0, r;\n\n    \t\treturn function generateUUID() {\n\n    \t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n    \t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n    \t\t\t\t\tuuid[ i ] = '-';\n\n    \t\t\t\t} else if ( i === 14 ) {\n\n    \t\t\t\t\tuuid[ i ] = '4';\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n    \t\t\t\t\tr = rnd & 0xf;\n    \t\t\t\t\trnd = rnd >> 4;\n    \t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn uuid.join( '' );\n\n    \t\t};\n\n    \t}(),\n\n    \tclamp: function ( value, min, max ) {\n\n    \t\treturn Math.max( min, Math.min( max, value ) );\n\n    \t},\n\n    \t// compute euclidian modulo of m % n\n    \t// https://en.wikipedia.org/wiki/Modulo_operation\n\n    \teuclideanModulo: function ( n, m ) {\n\n    \t\treturn ( ( n % m ) + m ) % m;\n\n    \t},\n\n    \t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n    \tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n    \t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n    \t},\n\n    \t// http://en.wikipedia.org/wiki/Smoothstep\n\n    \tsmoothstep: function ( x, min, max ) {\n\n    \t\tif ( x <= min ) return 0;\n    \t\tif ( x >= max ) return 1;\n\n    \t\tx = ( x - min ) / ( max - min );\n\n    \t\treturn x * x * ( 3 - 2 * x );\n\n    \t},\n\n    \tsmootherstep: function ( x, min, max ) {\n\n    \t\tif ( x <= min ) return 0;\n    \t\tif ( x >= max ) return 1;\n\n    \t\tx = ( x - min ) / ( max - min );\n\n    \t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n    \t},\n\n    \trandom16: function () {\n\n    \t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n    \t\treturn Math.random();\n\n    \t},\n\n    \t// Random integer from <low, high> interval\n\n    \trandInt: function ( low, high ) {\n\n    \t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n    \t},\n\n    \t// Random float from <low, high> interval\n\n    \trandFloat: function ( low, high ) {\n\n    \t\treturn low + Math.random() * ( high - low );\n\n    \t},\n\n    \t// Random float from <-range/2, range/2> interval\n\n    \trandFloatSpread: function ( range ) {\n\n    \t\treturn range * ( 0.5 - Math.random() );\n\n    \t},\n\n    \tdegToRad: function ( degrees ) {\n\n    \t\treturn degrees * exports.Math.DEG2RAD;\n\n    \t},\n\n    \tradToDeg: function ( radians ) {\n\n    \t\treturn radians * exports.Math.RAD2DEG;\n\n    \t},\n\n    \tisPowerOfTwo: function ( value ) {\n\n    \t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n    \t},\n\n    \tnearestPowerOfTwo: function ( value ) {\n\n    \t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\n    \t},\n\n    \tnextPowerOfTwo: function ( value ) {\n\n    \t\tvalue --;\n    \t\tvalue |= value >> 1;\n    \t\tvalue |= value >> 2;\n    \t\tvalue |= value >> 4;\n    \t\tvalue |= value >> 8;\n    \t\tvalue |= value >> 16;\n    \t\tvalue ++;\n\n    \t\treturn value;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author philogb / http://blog.thejit.org/\n     * @author egraether / http://egraether.com/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    function Vector2( x, y ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n\n    }\n\n    Vector2.prototype = {\n\n    \tconstructor: Vector2,\n\n    \tisVector2: true,\n\n    \tget width() {\n\n    \t\treturn this.x;\n\n    \t},\n\n    \tset width( value ) {\n\n    \t\tthis.x = value;\n\n    \t},\n\n    \tget height() {\n\n    \t\treturn this.y;\n\n    \t},\n\n    \tset height( value ) {\n\n    \t\tthis.y = value;\n\n    \t},\n\n    \t//\n\n    \tset: function ( x, y ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( v ) {\n\n    \t\tthis.x *= v.x;\n    \t\tthis.y *= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivide: function ( v ) {\n\n    \t\tthis.x /= v.x;\n    \t\tthis.y /= v.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector2();\n    \t\t\t\tmax = new Vector2();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tclampLength: function ( min, max ) {\n\n    \t\tvar length = this.length();\n\n    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n    \t},\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n    \t},\n\n    \tlengthManhattan: function() {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tangle: function () {\n\n    \t\t// computes the angle in radians with respect to the positive x-axis\n\n    \t\tvar angle = Math.atan2( this.y, this.x );\n\n    \t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n    \t\treturn angle;\n\n    \t},\n\n    \tdistanceTo: function ( v ) {\n\n    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n    \t},\n\n    \tdistanceToSquared: function ( v ) {\n\n    \t\tvar dx = this.x - v.x, dy = this.y - v.y;\n    \t\treturn dx * dx + dy * dy;\n\n    \t},\n\n    \tdistanceToManhattan: function ( v ) {\n\n    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateAround: function ( center, angle ) {\n\n    \t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n    \t\tvar x = this.x - center.x;\n    \t\tvar y = this.y - center.y;\n\n    \t\tthis.x = x * c - y * s + center.x;\n    \t\tthis.y = x * s + y * c + center.y;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author szimek / https://github.com/szimek/\n     */\n\n    function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n    \tObject.defineProperty( this, 'id', { value: TextureIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.sourceFile = '';\n\n    \tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n    \tthis.mipmaps = [];\n\n    \tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n    \tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n    \tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n    \tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n    \tthis.format = format !== undefined ? format : RGBAFormat;\n    \tthis.type = type !== undefined ? type : UnsignedByteType;\n\n    \tthis.offset = new Vector2( 0, 0 );\n    \tthis.repeat = new Vector2( 1, 1 );\n\n    \tthis.generateMipmaps = true;\n    \tthis.premultiplyAlpha = false;\n    \tthis.flipY = true;\n    \tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\n    \t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n    \t//\n    \t// Also changing the encoding after already used by a Material will not automatically make the Material\n    \t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n    \tthis.encoding = encoding !== undefined ? encoding :  LinearEncoding;\n\n    \tthis.version = 0;\n    \tthis.onUpdate = null;\n\n    }\n\n    Texture.DEFAULT_IMAGE = undefined;\n    Texture.DEFAULT_MAPPING = UVMapping;\n\n    Texture.prototype = {\n\n    \tconstructor: Texture,\n\n    \tisTexture: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.image = source.image;\n    \t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n    \t\tthis.mapping = source.mapping;\n\n    \t\tthis.wrapS = source.wrapS;\n    \t\tthis.wrapT = source.wrapT;\n\n    \t\tthis.magFilter = source.magFilter;\n    \t\tthis.minFilter = source.minFilter;\n\n    \t\tthis.anisotropy = source.anisotropy;\n\n    \t\tthis.format = source.format;\n    \t\tthis.type = source.type;\n\n    \t\tthis.offset.copy( source.offset );\n    \t\tthis.repeat.copy( source.repeat );\n\n    \t\tthis.generateMipmaps = source.generateMipmaps;\n    \t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n    \t\tthis.flipY = source.flipY;\n    \t\tthis.unpackAlignment = source.unpackAlignment;\n    \t\tthis.encoding = source.encoding;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\n    \t\t\treturn meta.textures[ this.uuid ];\n\n    \t\t}\n\n    \t\tfunction getDataURL( image ) {\n\n    \t\t\tvar canvas;\n\n    \t\t\tif ( image.toDataURL !== undefined ) {\n\n    \t\t\t\tcanvas = image;\n\n    \t\t\t} else {\n\n    \t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\t\tcanvas.width = image.width;\n    \t\t\t\tcanvas.height = image.height;\n\n    \t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\n    \t\t\t}\n\n    \t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n    \t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n    \t\t\t} else {\n\n    \t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar output = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Texture',\n    \t\t\t\tgenerator: 'Texture.toJSON'\n    \t\t\t},\n\n    \t\t\tuuid: this.uuid,\n    \t\t\tname: this.name,\n\n    \t\t\tmapping: this.mapping,\n\n    \t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n    \t\t\toffset: [ this.offset.x, this.offset.y ],\n    \t\t\twrap: [ this.wrapS, this.wrapT ],\n\n    \t\t\tminFilter: this.minFilter,\n    \t\t\tmagFilter: this.magFilter,\n    \t\t\tanisotropy: this.anisotropy,\n\n    \t\t\tflipY: this.flipY\n    \t\t};\n\n    \t\tif ( this.image !== undefined ) {\n\n    \t\t\t// TODO: Move to THREE.Image\n\n    \t\t\tvar image = this.image;\n\n    \t\t\tif ( image.uuid === undefined ) {\n\n    \t\t\t\timage.uuid = exports.Math.generateUUID(); // UGH\n\n    \t\t\t}\n\n    \t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.images[ image.uuid ] = {\n    \t\t\t\t\tuuid: image.uuid,\n    \t\t\t\t\turl: getDataURL( image )\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t\toutput.image = image.uuid;\n\n    \t\t}\n\n    \t\tmeta.textures[ this.uuid ] = output;\n\n    \t\treturn output;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t},\n\n    \ttransformUv: function ( uv ) {\n\n    \t\tif ( this.mapping !== UVMapping )  return;\n\n    \t\tuv.multiply( this.repeat );\n    \t\tuv.add( this.offset );\n\n    \t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n    \t\t\tswitch ( this.wrapS ) {\n\n    \t\t\t\tcase RepeatWrapping:\n\n    \t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase ClampToEdgeWrapping:\n\n    \t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase MirroredRepeatWrapping:\n\n    \t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n    \t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n    \t\t\t\t\t}\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n    \t\t\tswitch ( this.wrapT ) {\n\n    \t\t\t\tcase RepeatWrapping:\n\n    \t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase ClampToEdgeWrapping:\n\n    \t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase MirroredRepeatWrapping:\n\n    \t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n    \t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n    \t\t\t\t\t}\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.flipY ) {\n\n    \t\t\tuv.y = 1 - uv.y;\n\n    \t\t}\n\n    \t}\n\n    };\n\n    Object.assign( Texture.prototype, EventDispatcher.prototype );\n\n    var count = 0;\n    function TextureIdCount() { return count++; };\n\n    /**\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author philogb / http://blog.thejit.org/\n     * @author mikael emtinger / http://gomo.se/\n     * @author egraether / http://egraether.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Vector4( x, y, z, w ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n    \tthis.z = z || 0;\n    \tthis.w = ( w !== undefined ) ? w : 1;\n\n    }\n\n    Vector4.prototype = {\n\n    \tconstructor: Vector4,\n\n    \tisVector4: true,\n\n    \tset: function ( x, y, z, w ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n    \t\tthis.z = z;\n    \t\tthis.w = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n    \t\tthis.z = scalar;\n    \t\tthis.w = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( z ) {\n\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetW: function ( w ) {\n\n    \t\tthis.w = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tcase 2: this.z = value; break;\n    \t\t\tcase 3: this.w = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tcase 2: return this.z;\n    \t\t\tcase 3: return this.w;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n    \t\tthis.z = v.z;\n    \t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n    \t\tthis.z += v.z;\n    \t\tthis.w += v.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n    \t\tthis.z += s;\n    \t\tthis.w += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n    \t\tthis.z = a.z + b.z;\n    \t\tthis.w = a.w + b.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n    \t\tthis.z += v.z * s;\n    \t\tthis.w += v.w * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n    \t\tthis.z -= v.z;\n    \t\tthis.w -= v.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n    \t\tthis.z -= s;\n    \t\tthis.w -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n    \t\tthis.z = a.z - b.z;\n    \t\tthis.w = a.w - b.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n    \t\t\tthis.z *= scalar;\n    \t\t\tthis.w *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n    \t\t\tthis.z = 0;\n    \t\t\tthis.w = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function ( m ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n    \t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tsetAxisAngleFromQuaternion: function ( q ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n    \t\t// q is assumed to be normalized\n\n    \t\tthis.w = 2 * Math.acos( q.w );\n\n    \t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n    \t\tif ( s < 0.0001 ) {\n\n    \t\t\t this.x = 1;\n    \t\t\t this.y = 0;\n    \t\t\t this.z = 0;\n\n    \t\t} else {\n\n    \t\t\t this.x = q.x / s;\n    \t\t\t this.y = q.y / s;\n    \t\t\t this.z = q.z / s;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar angle, x, y, z,\t\t// variables for result\n    \t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n    \t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n    \t\t\tte = m.elements,\n\n    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n    \t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n    \t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n    \t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n    \t\t\t// singularity found\n    \t\t\t// first check for identity matrix which must have +1 for all terms\n    \t\t\t// in leading diagonal and zero in other terms\n\n    \t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n    \t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n    \t\t\t\t// this singularity is identity matrix so angle = 0\n\n    \t\t\t\tthis.set( 1, 0, 0, 0 );\n\n    \t\t\t\treturn this; // zero angle, arbitrary axis\n\n    \t\t\t}\n\n    \t\t\t// otherwise this singularity is angle = 180\n\n    \t\t\tangle = Math.PI;\n\n    \t\t\tvar xx = ( m11 + 1 ) / 2;\n    \t\t\tvar yy = ( m22 + 1 ) / 2;\n    \t\t\tvar zz = ( m33 + 1 ) / 2;\n    \t\t\tvar xy = ( m12 + m21 ) / 4;\n    \t\t\tvar xz = ( m13 + m31 ) / 4;\n    \t\t\tvar yz = ( m23 + m32 ) / 4;\n\n    \t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n    \t\t\t\t// m11 is the largest diagonal term\n\n    \t\t\t\tif ( xx < epsilon ) {\n\n    \t\t\t\t\tx = 0;\n    \t\t\t\t\ty = 0.707106781;\n    \t\t\t\t\tz = 0.707106781;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tx = Math.sqrt( xx );\n    \t\t\t\t\ty = xy / x;\n    \t\t\t\t\tz = xz / x;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( yy > zz ) {\n\n    \t\t\t\t// m22 is the largest diagonal term\n\n    \t\t\t\tif ( yy < epsilon ) {\n\n    \t\t\t\t\tx = 0.707106781;\n    \t\t\t\t\ty = 0;\n    \t\t\t\t\tz = 0.707106781;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ty = Math.sqrt( yy );\n    \t\t\t\t\tx = xy / y;\n    \t\t\t\t\tz = yz / y;\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// m33 is the largest diagonal term so base result on this\n\n    \t\t\t\tif ( zz < epsilon ) {\n\n    \t\t\t\t\tx = 0.707106781;\n    \t\t\t\t\ty = 0.707106781;\n    \t\t\t\t\tz = 0;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tz = Math.sqrt( zz );\n    \t\t\t\t\tx = xz / z;\n    \t\t\t\t\ty = yz / z;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.set( x, y, z, angle );\n\n    \t\t\treturn this; // return 180 deg rotation\n\n    \t\t}\n\n    \t\t// as we have reached here there are no singularities so we can handle normally\n\n    \t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n    \t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n    \t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n    \t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n    \t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n    \t\t// caught by singularity test above, but I've left it in just in case\n\n    \t\tthis.x = ( m32 - m23 ) / s;\n    \t\tthis.y = ( m13 - m31 ) / s;\n    \t\tthis.z = ( m21 - m12 ) / s;\n    \t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n    \t\tthis.z = Math.min( this.z, v.z );\n    \t\tthis.w = Math.min( this.w, v.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n    \t\tthis.z = Math.max( this.z, v.z );\n    \t\tthis.w = Math.max( this.w, v.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n    \t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector4();\n    \t\t\t\tmax = new Vector4();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal, minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n    \t\tthis.z = Math.floor( this.z );\n    \t\tthis.w = Math.floor( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n    \t\tthis.z = Math.ceil( this.z );\n    \t\tthis.w = Math.ceil( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n    \t\tthis.z = Math.round( this.z );\n    \t\tthis.w = Math.round( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n    \t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n    \t\tthis.z = - this.z;\n    \t\tthis.w = - this.w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n    \t},\n\n    \tlengthManhattan: function () {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n    \t\tthis.z += ( v.z - this.z ) * alpha;\n    \t\tthis.w += ( v.w - this.w ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n    \t\tthis.z = array[ offset + 2 ];\n    \t\tthis.w = array[ offset + 3 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n    \t\tarray[ offset + 2 ] = this.z;\n    \t\tarray[ offset + 3 ] = this.w;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n    \t\tthis.z = attribute.array[ index + 2 ];\n    \t\tthis.w = attribute.array[ index + 3 ];\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author szimek / https://github.com/szimek/\n     * @author alteredq / http://alteredqualia.com/\n     * @author Marius Kintel / https://github.com/kintel\n     */\n\n    /*\n     In options, we can specify:\n     * Texture parameters for an auto-generated target texture\n     * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n    */\n    function WebGLRenderTarget( width, height, options ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.width = width;\n    \tthis.height = height;\n\n    \tthis.scissor = new Vector4( 0, 0, width, height );\n    \tthis.scissorTest = false;\n\n    \tthis.viewport = new Vector4( 0, 0, width, height );\n\n    \toptions = options || {};\n\n    \tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\n    \tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n    \tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n    \tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n    \tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n    }\n\n    Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {\n\n    \tisWebGLRenderTarget: true,\n\n    \tsetSize: function ( width, height ) {\n\n    \t\tif ( this.width !== width || this.height !== height ) {\n\n    \t\t\tthis.width = width;\n    \t\t\tthis.height = height;\n\n    \t\t\tthis.dispose();\n\n    \t\t}\n\n    \t\tthis.viewport.set( 0, 0, width, height );\n    \t\tthis.scissor.set( 0, 0, width, height );\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.width = source.width;\n    \t\tthis.height = source.height;\n\n    \t\tthis.viewport.copy( source.viewport );\n\n    \t\tthis.texture = source.texture.clone();\n\n    \t\tthis.depthBuffer = source.depthBuffer;\n    \t\tthis.stencilBuffer = source.stencilBuffer;\n    \t\tthis.depthTexture = source.depthTexture;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com\n     */\n\n    function WebGLRenderTargetCube( width, height, options ) {\n\n    \tWebGLRenderTarget.call( this, width, height, options );\n\n    \tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n    \tthis.activeMipMapLevel = 0;\n\n    }\n\n    WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n    WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\n    WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     */\n\n    function Quaternion( x, y, z, w ) {\n\n    \tthis._x = x || 0;\n    \tthis._y = y || 0;\n    \tthis._z = z || 0;\n    \tthis._w = ( w !== undefined ) ? w : 1;\n\n    }\n\n    Quaternion.prototype = {\n\n    \tconstructor: Quaternion,\n\n    \tget x () {\n\n    \t\treturn this._x;\n\n    \t},\n\n    \tset x ( value ) {\n\n    \t\tthis._x = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget y () {\n\n    \t\treturn this._y;\n\n    \t},\n\n    \tset y ( value ) {\n\n    \t\tthis._y = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget z () {\n\n    \t\treturn this._z;\n\n    \t},\n\n    \tset z ( value ) {\n\n    \t\tthis._z = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget w () {\n\n    \t\treturn this._w;\n\n    \t},\n\n    \tset w ( value ) {\n\n    \t\tthis._w = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tset: function ( x, y, z, w ) {\n\n    \t\tthis._x = x;\n    \t\tthis._y = y;\n    \t\tthis._z = z;\n    \t\tthis._w = w;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n    \t},\n\n    \tcopy: function ( quaternion ) {\n\n    \t\tthis._x = quaternion.x;\n    \t\tthis._y = quaternion.y;\n    \t\tthis._z = quaternion.z;\n    \t\tthis._w = quaternion.w;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromEuler: function ( euler, update ) {\n\n    \t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n    \t\t}\n\n    \t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n    \t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    \t\t//\tcontent/SpinCalc.m\n\n    \t\tvar c1 = Math.cos( euler._x / 2 );\n    \t\tvar c2 = Math.cos( euler._y / 2 );\n    \t\tvar c3 = Math.cos( euler._z / 2 );\n    \t\tvar s1 = Math.sin( euler._x / 2 );\n    \t\tvar s2 = Math.sin( euler._y / 2 );\n    \t\tvar s3 = Math.sin( euler._z / 2 );\n\n    \t\tvar order = euler.order;\n\n    \t\tif ( order === 'XYZ' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'YXZ' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t} else if ( order === 'ZXY' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'ZYX' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t} else if ( order === 'YZX' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    \t\t} else if ( order === 'XZY' ) {\n\n    \t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n    \t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n    \t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n    \t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    \t\t}\n\n    \t\tif ( update !== false ) this.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromAxisAngle: function ( axis, angle ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n    \t\t// assumes axis is normalized\n\n    \t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n    \t\tthis._x = axis.x * s;\n    \t\tthis._y = axis.y * s;\n    \t\tthis._z = axis.z * s;\n    \t\tthis._w = Math.cos( halfAngle );\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromRotationMatrix: function ( m ) {\n\n    \t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar te = m.elements,\n\n    \t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n    \t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n    \t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n    \t\t\ttrace = m11 + m22 + m33,\n    \t\t\ts;\n\n    \t\tif ( trace > 0 ) {\n\n    \t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n    \t\t\tthis._w = 0.25 / s;\n    \t\t\tthis._x = ( m32 - m23 ) * s;\n    \t\t\tthis._y = ( m13 - m31 ) * s;\n    \t\t\tthis._z = ( m21 - m12 ) * s;\n\n    \t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n    \t\t\tthis._w = ( m32 - m23 ) / s;\n    \t\t\tthis._x = 0.25 * s;\n    \t\t\tthis._y = ( m12 + m21 ) / s;\n    \t\t\tthis._z = ( m13 + m31 ) / s;\n\n    \t\t} else if ( m22 > m33 ) {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n    \t\t\tthis._w = ( m13 - m31 ) / s;\n    \t\t\tthis._x = ( m12 + m21 ) / s;\n    \t\t\tthis._y = 0.25 * s;\n    \t\t\tthis._z = ( m23 + m32 ) / s;\n\n    \t\t} else {\n\n    \t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n    \t\t\tthis._w = ( m21 - m12 ) / s;\n    \t\t\tthis._x = ( m13 + m31 ) / s;\n    \t\t\tthis._y = ( m23 + m32 ) / s;\n    \t\t\tthis._z = 0.25 * s;\n\n    \t\t}\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromUnitVectors: function () {\n\n    \t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\n    \t\t// assumes direction vectors vFrom and vTo are normalized\n\n    \t\tvar v1, r;\n\n    \t\tvar EPS = 0.000001;\n\n    \t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tr = vFrom.dot( vTo ) + 1;\n\n    \t\t\tif ( r < EPS ) {\n\n    \t\t\t\tr = 0;\n\n    \t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n    \t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tv1.crossVectors( vFrom, vTo );\n\n    \t\t\t}\n\n    \t\t\tthis._x = v1.x;\n    \t\t\tthis._y = v1.y;\n    \t\t\tthis._z = v1.z;\n    \t\t\tthis._w = r;\n\n    \t\t\treturn this.normalize();\n\n    \t\t};\n\n    \t}(),\n\n    \tinverse: function () {\n\n    \t\treturn this.conjugate().normalize();\n\n    \t},\n\n    \tconjugate: function () {\n\n    \t\tthis._x *= - 1;\n    \t\tthis._y *= - 1;\n    \t\tthis._z *= - 1;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\tvar l = this.length();\n\n    \t\tif ( l === 0 ) {\n\n    \t\t\tthis._x = 0;\n    \t\t\tthis._y = 0;\n    \t\t\tthis._z = 0;\n    \t\t\tthis._w = 1;\n\n    \t\t} else {\n\n    \t\t\tl = 1 / l;\n\n    \t\t\tthis._x = this._x * l;\n    \t\t\tthis._y = this._y * l;\n    \t\t\tthis._z = this._z * l;\n    \t\t\tthis._w = this._w * l;\n\n    \t\t}\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( q, p ) {\n\n    \t\tif ( p !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n    \t\t\treturn this.multiplyQuaternions( q, p );\n\n    \t\t}\n\n    \t\treturn this.multiplyQuaternions( this, q );\n\n    \t},\n\n    \tpremultiply: function ( q ) {\n\n    \t\treturn this.multiplyQuaternions( q, this );\n\n    \t},\n\n    \tmultiplyQuaternions: function ( a, b ) {\n\n    \t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n    \t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n    \t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n    \t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    \t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    \t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    \t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tslerp: function ( qb, t ) {\n\n    \t\tif ( t === 0 ) return this;\n    \t\tif ( t === 1 ) return this.copy( qb );\n\n    \t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n    \t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    \t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n    \t\tif ( cosHalfTheta < 0 ) {\n\n    \t\t\tthis._w = - qb._w;\n    \t\t\tthis._x = - qb._x;\n    \t\t\tthis._y = - qb._y;\n    \t\t\tthis._z = - qb._z;\n\n    \t\t\tcosHalfTheta = - cosHalfTheta;\n\n    \t\t} else {\n\n    \t\t\tthis.copy( qb );\n\n    \t\t}\n\n    \t\tif ( cosHalfTheta >= 1.0 ) {\n\n    \t\t\tthis._w = w;\n    \t\t\tthis._x = x;\n    \t\t\tthis._y = y;\n    \t\t\tthis._z = z;\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n    \t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n    \t\t\tthis._w = 0.5 * ( w + this._w );\n    \t\t\tthis._x = 0.5 * ( x + this._x );\n    \t\t\tthis._y = 0.5 * ( y + this._y );\n    \t\t\tthis._z = 0.5 * ( z + this._z );\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n    \t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n    \t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n    \t\tthis._w = ( w * ratioA + this._w * ratioB );\n    \t\tthis._x = ( x * ratioA + this._x * ratioB );\n    \t\tthis._y = ( y * ratioA + this._y * ratioB );\n    \t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( quaternion ) {\n\n    \t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis._x = array[ offset ];\n    \t\tthis._y = array[ offset + 1 ];\n    \t\tthis._z = array[ offset + 2 ];\n    \t\tthis._w = array[ offset + 3 ];\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this._x;\n    \t\tarray[ offset + 1 ] = this._y;\n    \t\tarray[ offset + 2 ] = this._z;\n    \t\tarray[ offset + 3 ] = this._w;\n\n    \t\treturn array;\n\n    \t},\n\n    \tonChange: function ( callback ) {\n\n    \t\tthis.onChangeCallback = callback;\n\n    \t\treturn this;\n\n    \t},\n\n    \tonChangeCallback: function () {}\n\n    };\n\n    Object.assign( Quaternion, {\n\n    \tslerp: function( qa, qb, qm, t ) {\n\n    \t\treturn qm.copy( qa ).slerp( qb, t );\n\n    \t},\n\n    \tslerpFlat: function(\n    \t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n    \t\t// fuzz-free, array-based Quaternion SLERP operation\n\n    \t\tvar x0 = src0[ srcOffset0 + 0 ],\n    \t\t\ty0 = src0[ srcOffset0 + 1 ],\n    \t\t\tz0 = src0[ srcOffset0 + 2 ],\n    \t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n    \t\t\tx1 = src1[ srcOffset1 + 0 ],\n    \t\t\ty1 = src1[ srcOffset1 + 1 ],\n    \t\t\tz1 = src1[ srcOffset1 + 2 ],\n    \t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n    \t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n    \t\t\tvar s = 1 - t,\n\n    \t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n    \t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n    \t\t\t\tsqrSin = 1 - cos * cos;\n\n    \t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n    \t\t\tif ( sqrSin > Number.EPSILON ) {\n\n    \t\t\t\tvar sin = Math.sqrt( sqrSin ),\n    \t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n    \t\t\t\ts = Math.sin( s * len ) / sin;\n    \t\t\t\tt = Math.sin( t * len ) / sin;\n\n    \t\t\t}\n\n    \t\t\tvar tDir = t * dir;\n\n    \t\t\tx0 = x0 * s + x1 * tDir;\n    \t\t\ty0 = y0 * s + y1 * tDir;\n    \t\t\tz0 = z0 * s + z1 * tDir;\n    \t\t\tw0 = w0 * s + w1 * tDir;\n\n    \t\t\t// Normalize in case we just did a lerp:\n    \t\t\tif ( s === 1 - t ) {\n\n    \t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n    \t\t\t\tx0 *= f;\n    \t\t\t\ty0 *= f;\n    \t\t\t\tz0 *= f;\n    \t\t\t\tw0 *= f;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tdst[ dstOffset ] = x0;\n    \t\tdst[ dstOffset + 1 ] = y0;\n    \t\tdst[ dstOffset + 2 ] = z0;\n    \t\tdst[ dstOffset + 3 ] = w0;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author *kile / http://kile.stravaganza.org/\n     * @author philogb / http://blog.thejit.org/\n     * @author mikael emtinger / http://gomo.se/\n     * @author egraether / http://egraether.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Vector3( x, y, z ) {\n\n    \tthis.x = x || 0;\n    \tthis.y = y || 0;\n    \tthis.z = z || 0;\n\n    }\n\n    Vector3.prototype = {\n\n    \tconstructor: Vector3,\n\n    \tisVector3: true,\n\n    \tset: function ( x, y, z ) {\n\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.x = scalar;\n    \t\tthis.y = scalar;\n    \t\tthis.z = scalar;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetX: function ( x ) {\n\n    \t\tthis.x = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( y ) {\n\n    \t\tthis.y = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( z ) {\n\n    \t\tthis.z = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponent: function ( index, value ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: this.x = value; break;\n    \t\t\tcase 1: this.y = value; break;\n    \t\t\tcase 2: this.z = value; break;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tgetComponent: function ( index ) {\n\n    \t\tswitch ( index ) {\n\n    \t\t\tcase 0: return this.x;\n    \t\t\tcase 1: return this.y;\n    \t\t\tcase 2: return this.z;\n    \t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.x, this.y, this.z );\n\n    \t},\n\n    \tcopy: function ( v ) {\n\n    \t\tthis.x = v.x;\n    \t\tthis.y = v.y;\n    \t\tthis.z = v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n    \t\t\treturn this.addVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x += v.x;\n    \t\tthis.y += v.y;\n    \t\tthis.z += v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.x += s;\n    \t\tthis.y += s;\n    \t\tthis.z += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x + b.x;\n    \t\tthis.y = a.y + b.y;\n    \t\tthis.z = a.z + b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScaledVector: function ( v, s ) {\n\n    \t\tthis.x += v.x * s;\n    \t\tthis.y += v.y * s;\n    \t\tthis.z += v.z * s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n    \t\t\treturn this.subVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x -= v.x;\n    \t\tthis.y -= v.y;\n    \t\tthis.z -= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubScalar: function ( s ) {\n\n    \t\tthis.x -= s;\n    \t\tthis.y -= s;\n    \t\tthis.z -= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsubVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x - b.x;\n    \t\tthis.y = a.y - b.y;\n    \t\tthis.z = a.z - b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n    \t\t\treturn this.multiplyVectors( v, w );\n\n    \t\t}\n\n    \t\tthis.x *= v.x;\n    \t\tthis.y *= v.y;\n    \t\tthis.z *= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( scalar ) {\n\n    \t\tif ( isFinite( scalar ) ) {\n\n    \t\t\tthis.x *= scalar;\n    \t\t\tthis.y *= scalar;\n    \t\t\tthis.z *= scalar;\n\n    \t\t} else {\n\n    \t\t\tthis.x = 0;\n    \t\t\tthis.y = 0;\n    \t\t\tthis.z = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyVectors: function ( a, b ) {\n\n    \t\tthis.x = a.x * b.x;\n    \t\tthis.y = a.y * b.y;\n    \t\tthis.z = a.z * b.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyEuler: function () {\n\n    \t\tvar quaternion;\n\n    \t\treturn function applyEuler( euler ) {\n\n    \t\t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n    \t\t\t}\n\n    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\n    \t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyAxisAngle: function () {\n\n    \t\tvar quaternion;\n\n    \t\treturn function applyAxisAngle( axis, angle ) {\n\n    \t\t\tif ( quaternion === undefined ) quaternion = new Quaternion();\n\n    \t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyMatrix3: function ( m ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n    \t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n    \t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 affine matrix\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyProjection: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 projection matrix\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n    \t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\n    \t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n    \t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n    \t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyQuaternion: function ( q ) {\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n    \t\t// calculate quat * vector\n\n    \t\tvar ix =  qw * x + qy * z - qz * y;\n    \t\tvar iy =  qw * y + qz * x - qx * z;\n    \t\tvar iz =  qw * z + qx * y - qy * x;\n    \t\tvar iw = - qx * x - qy * y - qz * z;\n\n    \t\t// calculate result * inverse quat\n\n    \t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n    \t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n    \t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n    \t\treturn this;\n\n    \t},\n\n    \tproject: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function project( camera ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n    \t\t\treturn this.applyProjection( matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tunproject: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function unproject( camera ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n    \t\t\treturn this.applyProjection( matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \ttransformDirection: function ( m ) {\n\n    \t\t// input: THREE.Matrix4 affine matrix\n    \t\t// vector interpreted as a direction\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n    \t\tvar e = m.elements;\n\n    \t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n    \t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n    \t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n    \t\treturn this.normalize();\n\n    \t},\n\n    \tdivide: function ( v ) {\n\n    \t\tthis.x /= v.x;\n    \t\tthis.y /= v.y;\n    \t\tthis.z /= v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdivideScalar: function ( scalar ) {\n\n    \t\treturn this.multiplyScalar( 1 / scalar );\n\n    \t},\n\n    \tmin: function ( v ) {\n\n    \t\tthis.x = Math.min( this.x, v.x );\n    \t\tthis.y = Math.min( this.y, v.y );\n    \t\tthis.z = Math.min( this.z, v.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmax: function ( v ) {\n\n    \t\tthis.x = Math.max( this.x, v.x );\n    \t\tthis.y = Math.max( this.y, v.y );\n    \t\tthis.z = Math.max( this.z, v.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclamp: function ( min, max ) {\n\n    \t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    \t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n    \t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n    \t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclampScalar: function () {\n\n    \t\tvar min, max;\n\n    \t\treturn function clampScalar( minVal, maxVal ) {\n\n    \t\t\tif ( min === undefined ) {\n\n    \t\t\t\tmin = new Vector3();\n    \t\t\t\tmax = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tmin.set( minVal, minVal, minVal );\n    \t\t\tmax.set( maxVal, maxVal, maxVal );\n\n    \t\t\treturn this.clamp( min, max );\n\n    \t\t};\n\n    \t}(),\n\n    \tclampLength: function ( min, max ) {\n\n    \t\tvar length = this.length();\n\n    \t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n    \t},\n\n    \tfloor: function () {\n\n    \t\tthis.x = Math.floor( this.x );\n    \t\tthis.y = Math.floor( this.y );\n    \t\tthis.z = Math.floor( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tceil: function () {\n\n    \t\tthis.x = Math.ceil( this.x );\n    \t\tthis.y = Math.ceil( this.y );\n    \t\tthis.z = Math.ceil( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tround: function () {\n\n    \t\tthis.x = Math.round( this.x );\n    \t\tthis.y = Math.round( this.y );\n    \t\tthis.z = Math.round( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \troundToZero: function () {\n\n    \t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n    \t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n    \t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.x = - this.x;\n    \t\tthis.y = - this.y;\n    \t\tthis.z = - this.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdot: function ( v ) {\n\n    \t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n    \t},\n\n    \tlengthSq: function () {\n\n    \t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n    \t},\n\n    \tlength: function () {\n\n    \t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n    \t},\n\n    \tlengthManhattan: function () {\n\n    \t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\treturn this.divideScalar( this.length() );\n\n    \t},\n\n    \tsetLength: function ( length ) {\n\n    \t\treturn this.multiplyScalar( length / this.length() );\n\n    \t},\n\n    \tlerp: function ( v, alpha ) {\n\n    \t\tthis.x += ( v.x - this.x ) * alpha;\n    \t\tthis.y += ( v.y - this.y ) * alpha;\n    \t\tthis.z += ( v.z - this.z ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerpVectors: function ( v1, v2, alpha ) {\n\n    \t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n    \t},\n\n    \tcross: function ( v, w ) {\n\n    \t\tif ( w !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n    \t\t\treturn this.crossVectors( v, w );\n\n    \t\t}\n\n    \t\tvar x = this.x, y = this.y, z = this.z;\n\n    \t\tthis.x = y * v.z - z * v.y;\n    \t\tthis.y = z * v.x - x * v.z;\n    \t\tthis.z = x * v.y - y * v.x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcrossVectors: function ( a, b ) {\n\n    \t\tvar ax = a.x, ay = a.y, az = a.z;\n    \t\tvar bx = b.x, by = b.y, bz = b.z;\n\n    \t\tthis.x = ay * bz - az * by;\n    \t\tthis.y = az * bx - ax * bz;\n    \t\tthis.z = ax * by - ay * bx;\n\n    \t\treturn this;\n\n    \t},\n\n    \tprojectOnVector: function ( vector ) {\n\n    \t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n    \t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n    \t},\n\n    \tprojectOnPlane: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function projectOnPlane( planeNormal ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n    \t\t\treturn this.sub( v1 );\n\n    \t\t};\n\n    \t}(),\n\n    \treflect: function () {\n\n    \t\t// reflect incident vector off plane orthogonal to normal\n    \t\t// normal is assumed to have unit length\n\n    \t\tvar v1;\n\n    \t\treturn function reflect( normal ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tangleTo: function ( v ) {\n\n    \t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n    \t\t// clamp, to handle numerical problems\n\n    \t\treturn Math.acos( exports.Math.clamp( theta, - 1, 1 ) );\n\n    \t},\n\n    \tdistanceTo: function ( v ) {\n\n    \t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n    \t},\n\n    \tdistanceToSquared: function ( v ) {\n\n    \t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n    \t\treturn dx * dx + dy * dy + dz * dz;\n\n    \t},\n\n    \tdistanceToManhattan: function ( v ) {\n\n    \t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n    \t},\n\n    \tsetFromSpherical: function( s ) {\n\n    \t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n    \t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n    \t\tthis.y = Math.cos( s.phi ) * s.radius;\n    \t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrixPosition: function ( m ) {\n\n    \t\treturn this.setFromMatrixColumn( m, 3 );\n\n    \t},\n\n    \tsetFromMatrixScale: function ( m ) {\n\n    \t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n    \t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n    \t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n    \t\tthis.x = sx;\n    \t\tthis.y = sy;\n    \t\tthis.z = sz;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrixColumn: function ( m, index ) {\n\n    \t\tif ( typeof m === 'number' ) {\n\n    \t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n    \t\t\tvar temp = m\n    \t\t\tm = index;\n    \t\t\tindex = temp;\n\n    \t\t}\n\n    \t\treturn this.fromArray( m.elements, index * 4 );\n\n    \t},\n\n    \tequals: function ( v ) {\n\n    \t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.x = array[ offset ];\n    \t\tthis.y = array[ offset + 1 ];\n    \t\tthis.z = array[ offset + 2 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.x;\n    \t\tarray[ offset + 1 ] = this.y;\n    \t\tarray[ offset + 2 ] = this.z;\n\n    \t\treturn array;\n\n    \t},\n\n    \tfromAttribute: function ( attribute, index, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tindex = index * attribute.itemSize + offset;\n\n    \t\tthis.x = attribute.array[ index ];\n    \t\tthis.y = attribute.array[ index + 1 ];\n    \t\tthis.z = attribute.array[ index + 2 ];\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author philogb / http://blog.thejit.org/\n     * @author jordi_ros / http://plattsoft.com\n     * @author D1plo1d / http://github.com/D1plo1d\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author timknip / http://www.floorplanner.com/\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Matrix4() {\n\n    \tthis.elements = new Float32Array( [\n\n    \t\t1, 0, 0, 0,\n    \t\t0, 1, 0, 0,\n    \t\t0, 0, 1, 0,\n    \t\t0, 0, 0, 1\n\n    \t] );\n\n    \tif ( arguments.length > 0 ) {\n\n    \t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n    \t}\n\n    }\n\n    Matrix4.prototype = {\n\n    \tconstructor: Matrix4,\n\n    \tisMatrix4: true,\n\n    \tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n    \t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n    \t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n    \t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n    \t\treturn this;\n\n    \t},\n\n    \tidentity: function () {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0, 0,\n    \t\t\t0, 1, 0, 0,\n    \t\t\t0, 0, 1, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new Matrix4().fromArray( this.elements );\n\n    \t},\n\n    \tcopy: function ( m ) {\n\n    \t\tthis.elements.set( m.elements );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyPosition: function ( m ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar me = m.elements;\n\n    \t\tte[ 12 ] = me[ 12 ];\n    \t\tte[ 13 ] = me[ 13 ];\n    \t\tte[ 14 ] = me[ 14 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n    \t\txAxis.setFromMatrixColumn( this, 0 );\n    \t\tyAxis.setFromMatrixColumn( this, 1 );\n    \t\tzAxis.setFromMatrixColumn( this, 2 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n    \t\tthis.set(\n    \t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n    \t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n    \t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n    \t\t\t0,       0,       0,       1\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \textractRotation: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function extractRotation( m ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n    \t\t\tvar te = this.elements;\n    \t\t\tvar me = m.elements;\n\n    \t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n    \t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n    \t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n    \t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n    \t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n    \t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n    \t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n    \t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n    \t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n    \t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n    \t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n    \t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmakeRotationFromEuler: function ( euler ) {\n\n    \t\tif ( (euler && euler.isEuler) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n    \t\t}\n\n    \t\tvar te = this.elements;\n\n    \t\tvar x = euler.x, y = euler.y, z = euler.z;\n    \t\tvar a = Math.cos( x ), b = Math.sin( x );\n    \t\tvar c = Math.cos( y ), d = Math.sin( y );\n    \t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n    \t\tif ( euler.order === 'XYZ' ) {\n\n    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = - c * f;\n    \t\t\tte[ 8 ] = d;\n\n    \t\t\tte[ 1 ] = af + be * d;\n    \t\t\tte[ 5 ] = ae - bf * d;\n    \t\t\tte[ 9 ] = - b * c;\n\n    \t\t\tte[ 2 ] = bf - ae * d;\n    \t\t\tte[ 6 ] = be + af * d;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'YXZ' ) {\n\n    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n    \t\t\tte[ 0 ] = ce + df * b;\n    \t\t\tte[ 4 ] = de * b - cf;\n    \t\t\tte[ 8 ] = a * d;\n\n    \t\t\tte[ 1 ] = a * f;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = - b;\n\n    \t\t\tte[ 2 ] = cf * b - de;\n    \t\t\tte[ 6 ] = df + ce * b;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'ZXY' ) {\n\n    \t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n    \t\t\tte[ 0 ] = ce - df * b;\n    \t\t\tte[ 4 ] = - a * f;\n    \t\t\tte[ 8 ] = de + cf * b;\n\n    \t\t\tte[ 1 ] = cf + de * b;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = df - ce * b;\n\n    \t\t\tte[ 2 ] = - a * d;\n    \t\t\tte[ 6 ] = b;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'ZYX' ) {\n\n    \t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = be * d - af;\n    \t\t\tte[ 8 ] = ae * d + bf;\n\n    \t\t\tte[ 1 ] = c * f;\n    \t\t\tte[ 5 ] = bf * d + ae;\n    \t\t\tte[ 9 ] = af * d - be;\n\n    \t\t\tte[ 2 ] = - d;\n    \t\t\tte[ 6 ] = b * c;\n    \t\t\tte[ 10 ] = a * c;\n\n    \t\t} else if ( euler.order === 'YZX' ) {\n\n    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = bd - ac * f;\n    \t\t\tte[ 8 ] = bc * f + ad;\n\n    \t\t\tte[ 1 ] = f;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = - b * e;\n\n    \t\t\tte[ 2 ] = - d * e;\n    \t\t\tte[ 6 ] = ad * f + bc;\n    \t\t\tte[ 10 ] = ac - bd * f;\n\n    \t\t} else if ( euler.order === 'XZY' ) {\n\n    \t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n    \t\t\tte[ 0 ] = c * e;\n    \t\t\tte[ 4 ] = - f;\n    \t\t\tte[ 8 ] = d * e;\n\n    \t\t\tte[ 1 ] = ac * f + bd;\n    \t\t\tte[ 5 ] = a * e;\n    \t\t\tte[ 9 ] = ad * f - bc;\n\n    \t\t\tte[ 2 ] = bc * f - ad;\n    \t\t\tte[ 6 ] = b * e;\n    \t\t\tte[ 10 ] = bd * f + ac;\n\n    \t\t}\n\n    \t\t// last column\n    \t\tte[ 3 ] = 0;\n    \t\tte[ 7 ] = 0;\n    \t\tte[ 11 ] = 0;\n\n    \t\t// bottom row\n    \t\tte[ 12 ] = 0;\n    \t\tte[ 13 ] = 0;\n    \t\tte[ 14 ] = 0;\n    \t\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationFromQuaternion: function ( q ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n    \t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n    \t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n    \t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n    \t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n    \t\tte[ 0 ] = 1 - ( yy + zz );\n    \t\tte[ 4 ] = xy - wz;\n    \t\tte[ 8 ] = xz + wy;\n\n    \t\tte[ 1 ] = xy + wz;\n    \t\tte[ 5 ] = 1 - ( xx + zz );\n    \t\tte[ 9 ] = yz - wx;\n\n    \t\tte[ 2 ] = xz - wy;\n    \t\tte[ 6 ] = yz + wx;\n    \t\tte[ 10 ] = 1 - ( xx + yy );\n\n    \t\t// last column\n    \t\tte[ 3 ] = 0;\n    \t\tte[ 7 ] = 0;\n    \t\tte[ 11 ] = 0;\n\n    \t\t// bottom row\n    \t\tte[ 12 ] = 0;\n    \t\tte[ 13 ] = 0;\n    \t\tte[ 14 ] = 0;\n    \t\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlookAt: function () {\n\n    \t\tvar x, y, z;\n\n    \t\treturn function lookAt( eye, target, up ) {\n\n    \t\t\tif ( x === undefined ) {\n\n    \t\t\t\tx = new Vector3();\n    \t\t\t\ty = new Vector3();\n    \t\t\t\tz = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tvar te = this.elements;\n\n    \t\t\tz.subVectors( eye, target ).normalize();\n\n    \t\t\tif ( z.lengthSq() === 0 ) {\n\n    \t\t\t\tz.z = 1;\n\n    \t\t\t}\n\n    \t\t\tx.crossVectors( up, z ).normalize();\n\n    \t\t\tif ( x.lengthSq() === 0 ) {\n\n    \t\t\t\tz.z += 0.0001;\n    \t\t\t\tx.crossVectors( up, z ).normalize();\n\n    \t\t\t}\n\n    \t\t\ty.crossVectors( z, x );\n\n\n    \t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n    \t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n    \t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmultiply: function ( m, n ) {\n\n    \t\tif ( n !== undefined ) {\n\n    \t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n    \t\t\treturn this.multiplyMatrices( m, n );\n\n    \t\t}\n\n    \t\treturn this.multiplyMatrices( this, m );\n\n    \t},\n\n    \tpremultiply: function ( m ) {\n\n    \t\treturn this.multiplyMatrices( m, this );\n\n    \t},\n\n    \tmultiplyMatrices: function ( a, b ) {\n\n    \t\tvar ae = a.elements;\n    \t\tvar be = b.elements;\n    \t\tvar te = this.elements;\n\n    \t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n    \t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n    \t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n    \t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n    \t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n    \t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n    \t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n    \t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n    \t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n    \t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n    \t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n    \t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n    \t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n    \t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n    \t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n    \t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n    \t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n    \t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n    \t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n    \t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n    \t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n    \t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n    \t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n    \t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyToArray: function ( a, b, r ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tthis.multiplyMatrices( a, b );\n\n    \t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n    \t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n    \t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n    \t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n    \t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n    \t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n    \t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyToVector3Array: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToVector3Array( array, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = array.length;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n    \t\t\t\tv1.fromArray( array, j );\n    \t\t\t\tv1.applyMatrix4( this );\n    \t\t\t\tv1.toArray( array, j );\n\n    \t\t\t}\n\n    \t\t\treturn array;\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyToBuffer: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n    \t\t\t\tv1.x = buffer.getX( j );\n    \t\t\t\tv1.y = buffer.getY( j );\n    \t\t\t\tv1.z = buffer.getZ( j );\n\n    \t\t\t\tv1.applyMatrix4( this );\n\n    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n    \t\t\t}\n\n    \t\t\treturn buffer;\n\n    \t\t};\n\n    \t}(),\n\n    \tdeterminant: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n    \t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n    \t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n    \t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n    \t\t//TODO: make this more efficient\n    \t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n    \t\treturn (\n    \t\t\tn41 * (\n    \t\t\t\t+ n14 * n23 * n32\n    \t\t\t\t - n13 * n24 * n32\n    \t\t\t\t - n14 * n22 * n33\n    \t\t\t\t + n12 * n24 * n33\n    \t\t\t\t + n13 * n22 * n34\n    \t\t\t\t - n12 * n23 * n34\n    \t\t\t) +\n    \t\t\tn42 * (\n    \t\t\t\t+ n11 * n23 * n34\n    \t\t\t\t - n11 * n24 * n33\n    \t\t\t\t + n14 * n21 * n33\n    \t\t\t\t - n13 * n21 * n34\n    \t\t\t\t + n13 * n24 * n31\n    \t\t\t\t - n14 * n23 * n31\n    \t\t\t) +\n    \t\t\tn43 * (\n    \t\t\t\t+ n11 * n24 * n32\n    \t\t\t\t - n11 * n22 * n34\n    \t\t\t\t - n14 * n21 * n32\n    \t\t\t\t + n12 * n21 * n34\n    \t\t\t\t + n14 * n22 * n31\n    \t\t\t\t - n12 * n24 * n31\n    \t\t\t) +\n    \t\t\tn44 * (\n    \t\t\t\t- n13 * n22 * n31\n    \t\t\t\t - n11 * n23 * n32\n    \t\t\t\t + n11 * n22 * n33\n    \t\t\t\t + n13 * n21 * n32\n    \t\t\t\t - n12 * n21 * n33\n    \t\t\t\t + n12 * n23 * n31\n    \t\t\t)\n\n    \t\t);\n\n    \t},\n\n    \ttranspose: function () {\n\n    \t\tvar te = this.elements;\n    \t\tvar tmp;\n\n    \t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n    \t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n    \t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n    \t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n    \t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n    \t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n    \t\treturn this;\n\n    \t},\n\n    \tflattenToArrayOffset: function ( array, offset ) {\n\n    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n    \t\t\t\t\"- just use .toArray instead.\" );\n\n    \t\treturn this.toArray( array, offset );\n\n    \t},\n\n    \tgetPosition: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function getPosition() {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\n    \t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n    \t\t};\n\n    \t}(),\n\n    \tsetPosition: function ( v ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 12 ] = v.x;\n    \t\tte[ 13 ] = v.y;\n    \t\tte[ 14 ] = v.z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetInverse: function ( m, throwOnDegenerate ) {\n\n    \t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    \t\tvar te = this.elements,\n    \t\t\tme = m.elements,\n\n    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n    \t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n    \t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n    \t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n    \t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n    \t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n    \t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n    \t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n    \t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n    \t\tif ( det === 0 ) {\n\n    \t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n    \t\t\tif ( throwOnDegenerate === true ) {\n\n    \t\t\t\tthrow new Error( msg );\n\n    \t\t\t} else {\n\n    \t\t\t\tconsole.warn( msg );\n\n    \t\t\t}\n\n    \t\t\treturn this.identity();\n\n    \t\t}\n\n    \t\tvar detInv = 1 / det;\n\n    \t\tte[ 0 ] = t11 * detInv;\n    \t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n    \t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n    \t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n    \t\tte[ 4 ] = t12 * detInv;\n    \t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n    \t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n    \t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n    \t\tte[ 8 ] = t13 * detInv;\n    \t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n    \t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n    \t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n    \t\tte[ 12 ] = t14 * detInv;\n    \t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n    \t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n    \t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n    \t\treturn this;\n\n    \t},\n\n    \tscale: function ( v ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar x = v.x, y = v.y, z = v.z;\n\n    \t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n    \t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n    \t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n    \t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetMaxScaleOnAxis: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n    \t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n    \t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n    \t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n    \t},\n\n    \tmakeTranslation: function ( x, y, z ) {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0, x,\n    \t\t\t0, 1, 0, y,\n    \t\t\t0, 0, 1, z,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationX: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\t1, 0,  0, 0,\n    \t\t\t0, c, - s, 0,\n    \t\t\t0, s,  c, 0,\n    \t\t\t0, 0,  0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationY: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\t c, 0, s, 0,\n    \t\t\t 0, 1, 0, 0,\n    \t\t\t- s, 0, c, 0,\n    \t\t\t 0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationZ: function ( theta ) {\n\n    \t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n    \t\tthis.set(\n\n    \t\t\tc, - s, 0, 0,\n    \t\t\ts,  c, 0, 0,\n    \t\t\t0,  0, 1, 0,\n    \t\t\t0,  0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeRotationAxis: function ( axis, angle ) {\n\n    \t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n    \t\tvar c = Math.cos( angle );\n    \t\tvar s = Math.sin( angle );\n    \t\tvar t = 1 - c;\n    \t\tvar x = axis.x, y = axis.y, z = axis.z;\n    \t\tvar tx = t * x, ty = t * y;\n\n    \t\tthis.set(\n\n    \t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n    \t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n    \t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\t return this;\n\n    \t},\n\n    \tmakeScale: function ( x, y, z ) {\n\n    \t\tthis.set(\n\n    \t\t\tx, 0, 0, 0,\n    \t\t\t0, y, 0, 0,\n    \t\t\t0, 0, z, 0,\n    \t\t\t0, 0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tcompose: function ( position, quaternion, scale ) {\n\n    \t\tthis.makeRotationFromQuaternion( quaternion );\n    \t\tthis.scale( scale );\n    \t\tthis.setPosition( position );\n\n    \t\treturn this;\n\n    \t},\n\n    \tdecompose: function () {\n\n    \t\tvar vector, matrix;\n\n    \t\treturn function decompose( position, quaternion, scale ) {\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tvector = new Vector3();\n    \t\t\t\tmatrix = new Matrix4();\n\n    \t\t\t}\n\n    \t\t\tvar te = this.elements;\n\n    \t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n    \t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n    \t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n    \t\t\t// if determine is negative, we need to invert one scale\n    \t\t\tvar det = this.determinant();\n    \t\t\tif ( det < 0 ) {\n\n    \t\t\t\tsx = - sx;\n\n    \t\t\t}\n\n    \t\t\tposition.x = te[ 12 ];\n    \t\t\tposition.y = te[ 13 ];\n    \t\t\tposition.z = te[ 14 ];\n\n    \t\t\t// scale the rotation part\n\n    \t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\n    \t\t\tvar invSX = 1 / sx;\n    \t\t\tvar invSY = 1 / sy;\n    \t\t\tvar invSZ = 1 / sz;\n\n    \t\t\tmatrix.elements[ 0 ] *= invSX;\n    \t\t\tmatrix.elements[ 1 ] *= invSX;\n    \t\t\tmatrix.elements[ 2 ] *= invSX;\n\n    \t\t\tmatrix.elements[ 4 ] *= invSY;\n    \t\t\tmatrix.elements[ 5 ] *= invSY;\n    \t\t\tmatrix.elements[ 6 ] *= invSY;\n\n    \t\t\tmatrix.elements[ 8 ] *= invSZ;\n    \t\t\tmatrix.elements[ 9 ] *= invSZ;\n    \t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n    \t\t\tquaternion.setFromRotationMatrix( matrix );\n\n    \t\t\tscale.x = sx;\n    \t\t\tscale.y = sy;\n    \t\t\tscale.z = sz;\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar x = 2 * near / ( right - left );\n    \t\tvar y = 2 * near / ( top - bottom );\n\n    \t\tvar a = ( right + left ) / ( right - left );\n    \t\tvar b = ( top + bottom ) / ( top - bottom );\n    \t\tvar c = - ( far + near ) / ( far - near );\n    \t\tvar d = - 2 * far * near / ( far - near );\n\n    \t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n    \t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakePerspective: function ( fov, aspect, near, far ) {\n\n    \t\tvar ymax = near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 );\n    \t\tvar ymin = - ymax;\n    \t\tvar xmin = ymin * aspect;\n    \t\tvar xmax = ymax * aspect;\n\n    \t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\n    \t},\n\n    \tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar w = 1.0 / ( right - left );\n    \t\tvar h = 1.0 / ( top - bottom );\n    \t\tvar p = 1.0 / ( far - near );\n\n    \t\tvar x = ( right + left ) * w;\n    \t\tvar y = ( top + bottom ) * h;\n    \t\tvar z = ( far + near ) * p;\n\n    \t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n    \t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n    \t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n    \t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( matrix ) {\n\n    \t\tvar te = this.elements;\n    \t\tvar me = matrix.elements;\n\n    \t\tfor ( var i = 0; i < 16; i ++ ) {\n\n    \t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tfor( var i = 0; i < 16; i ++ ) {\n\n    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar te = this.elements;\n\n    \t\tarray[ offset ] = te[ 0 ];\n    \t\tarray[ offset + 1 ] = te[ 1 ];\n    \t\tarray[ offset + 2 ] = te[ 2 ];\n    \t\tarray[ offset + 3 ] = te[ 3 ];\n\n    \t\tarray[ offset + 4 ] = te[ 4 ];\n    \t\tarray[ offset + 5 ] = te[ 5 ];\n    \t\tarray[ offset + 6 ] = te[ 6 ];\n    \t\tarray[ offset + 7 ] = te[ 7 ];\n\n    \t\tarray[ offset + 8 ]  = te[ 8 ];\n    \t\tarray[ offset + 9 ]  = te[ 9 ];\n    \t\tarray[ offset + 10 ] = te[ 10 ];\n    \t\tarray[ offset + 11 ] = te[ 11 ];\n\n    \t\tarray[ offset + 12 ] = te[ 12 ];\n    \t\tarray[ offset + 13 ] = te[ 13 ];\n    \t\tarray[ offset + 14 ] = te[ 14 ];\n    \t\tarray[ offset + 15 ] = te[ 15 ];\n\n    \t\treturn array;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n    \timages = images !== undefined ? images : [];\n    \tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n    \tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.flipY = false;\n\n    }\n\n    CubeTexture.prototype = Object.create( Texture.prototype );\n    CubeTexture.prototype.constructor = CubeTexture;\n\n    CubeTexture.prototype.isCubeTexture = true;\n\n    Object.defineProperty( CubeTexture.prototype, 'images', {\n\n    \tget: function () {\n\n    \t\treturn this.image;\n\n    \t},\n\n    \tset: function ( value ) {\n\n    \t\tthis.image = value;\n\n    \t}\n\n    } );\n\n    var emptyTexture = new Texture();\n    var emptyCubeTexture = new CubeTexture();\n\n    // --- Base for inner nodes (including the root) ---\n\n    function UniformContainer() {\n\n    \tthis.seq = [];\n    \tthis.map = {};\n\n    }\n\n    // --- Utilities ---\n\n    // Array Caches (provide typed arrays for temporary by size)\n\n    var arrayCacheF32 = [];\n    var arrayCacheI32 = [];\n\n    // Flattening for arrays of vectors and matrices\n\n    function flatten( array, nBlocks, blockSize ) {\n\n    \tvar firstElem = array[ 0 ];\n\n    \tif ( firstElem <= 0 || firstElem > 0 ) return array;\n    \t// unoptimized: ! isNaN( firstElem )\n    \t// see http://jacksondunstan.com/articles/983\n\n    \tvar n = nBlocks * blockSize,\n    \t\tr = arrayCacheF32[ n ];\n\n    \tif ( r === undefined ) {\n\n    \t\tr = new Float32Array( n );\n    \t\tarrayCacheF32[ n ] = r;\n\n    \t}\n\n    \tif ( nBlocks !== 0 ) {\n\n    \t\tfirstElem.toArray( r, 0 );\n\n    \t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n    \t\t\toffset += blockSize;\n    \t\t\tarray[ i ].toArray( r, offset );\n\n    \t\t}\n\n    \t}\n\n    \treturn r;\n\n    }\n\n    // Texture unit allocation\n\n    function allocTexUnits( renderer, n ) {\n\n    \tvar r = arrayCacheI32[ n ];\n\n    \tif ( r === undefined ) {\n\n    \t\tr = new Int32Array( n );\n    \t\tarrayCacheI32[ n ] = r;\n\n    \t}\n\n    \tfor ( var i = 0; i !== n; ++ i )\n    \t\tr[ i ] = renderer.allocTextureUnit();\n\n    \treturn r;\n\n    }\n\n    // --- Setters ---\n\n    // Note: Defining these methods externally, because they come in a bunch\n    // and this way their names minify.\n\n    // Single scalar\n\n    function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }\n    function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }\n\n    // Single float vector (from flat array or THREE.VectorN)\n\n    function setValue2fv( gl, v ) {\n\n    \tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n    \telse gl.uniform2f( this.addr, v.x, v.y );\n\n    }\n\n    function setValue3fv( gl, v ) {\n\n    \tif ( v.x !== undefined )\n    \t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n    \telse if ( v.r !== undefined )\n    \t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n    \telse\n    \t\tgl.uniform3fv( this.addr, v );\n\n    }\n\n    function setValue4fv( gl, v ) {\n\n    \tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n    \telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n    }\n\n    // Single matrix (from flat array or MatrixN)\n\n    function setValue2fm( gl, v ) {\n\n    \tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n    }\n\n    function setValue3fm( gl, v ) {\n\n    \tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\n    }\n\n    function setValue4fm( gl, v ) {\n\n    \tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\n    }\n\n    // Single texture (2D / Cube)\n\n    function setValueT1( gl, v, renderer ) {\n\n    \tvar unit = renderer.allocTextureUnit();\n    \tgl.uniform1i( this.addr, unit );\n    \trenderer.setTexture2D( v || emptyTexture, unit );\n\n    }\n\n    function setValueT6( gl, v, renderer ) {\n\n    \tvar unit = renderer.allocTextureUnit();\n    \tgl.uniform1i( this.addr, unit );\n    \trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n    }\n\n    // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n    function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }\n    function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }\n    function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }\n\n    // Helper to pick the right setter for the singular case\n\n    function getSingularSetter( type ) {\n\n    \tswitch ( type ) {\n\n    \t\tcase 0x1406: return setValue1f; // FLOAT\n    \t\tcase 0x8b50: return setValue2fv; // _VEC2\n    \t\tcase 0x8b51: return setValue3fv; // _VEC3\n    \t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n    \t\tcase 0x8b5a: return setValue2fm; // _MAT2\n    \t\tcase 0x8b5b: return setValue3fm; // _MAT3\n    \t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n    \t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n    \t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n    \t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n    \t}\n\n    }\n\n    // Array of scalars\n\n    function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }\n    function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }\n\n    // Array of vectors (flat or from THREE classes)\n\n    function setValueV2a( gl, v ) {\n\n    \tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n    }\n\n    function setValueV3a( gl, v ) {\n\n    \tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n    }\n\n    function setValueV4a( gl, v ) {\n\n    \tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n    }\n\n    // Array of matrices (flat or from THREE clases)\n\n    function setValueM2a( gl, v ) {\n\n    \tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n    }\n\n    function setValueM3a( gl, v ) {\n\n    \tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n    }\n\n    function setValueM4a( gl, v ) {\n\n    \tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n    }\n\n    // Array of textures (2D / Cube)\n\n    function setValueT1a( gl, v, renderer ) {\n\n    \tvar n = v.length,\n    \t\tunits = allocTexUnits( renderer, n );\n\n    \tgl.uniform1iv( this.addr, units );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n    \t}\n\n    }\n\n    function setValueT6a( gl, v, renderer ) {\n\n    \tvar n = v.length,\n    \t\tunits = allocTexUnits( renderer, n );\n\n    \tgl.uniform1iv( this.addr, units );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n    \t}\n\n    }\n\n    // Helper to pick the right setter for a pure (bottom-level) array\n\n    function getPureArraySetter( type ) {\n\n    \tswitch ( type ) {\n\n    \t\tcase 0x1406: return setValue1fv; // FLOAT\n    \t\tcase 0x8b50: return setValueV2a; // _VEC2\n    \t\tcase 0x8b51: return setValueV3a; // _VEC3\n    \t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n    \t\tcase 0x8b5a: return setValueM2a; // _MAT2\n    \t\tcase 0x8b5b: return setValueM3a; // _MAT3\n    \t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n    \t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n    \t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n    \t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n    \t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n    \t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n    \t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n    \t}\n\n    }\n\n    // --- Uniform Classes ---\n\n    function SingleUniform( id, activeInfo, addr ) {\n\n    \tthis.id = id;\n    \tthis.addr = addr;\n    \tthis.setValue = getSingularSetter( activeInfo.type );\n\n    \t// this.path = activeInfo.name; // DEBUG\n\n    }\n\n    function PureArrayUniform( id, activeInfo, addr ) {\n\n    \tthis.id = id;\n    \tthis.addr = addr;\n    \tthis.size = activeInfo.size;\n    \tthis.setValue = getPureArraySetter( activeInfo.type );\n\n    \t// this.path = activeInfo.name; // DEBUG\n\n    }\n\n    function StructuredUniform( id ) {\n\n    \tthis.id = id;\n\n    \tUniformContainer.call( this ); // mix-in\n\n    }\n\n    StructuredUniform.prototype.setValue = function( gl, value ) {\n\n    \t// Note: Don't need an extra 'renderer' parameter, since samplers\n    \t// are not allowed in structured uniforms.\n\n    \tvar seq = this.seq;\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ];\n    \t\tu.setValue( gl, value[ u.id ] );\n\n    \t}\n\n    };\n\n    // --- Top-level ---\n\n    // Parser - builds up the property tree from the path strings\n\n    var RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n    // extracts\n    // \t- the identifier (member name or array index)\n    //  - followed by an optional right bracket (found when array index)\n    //  - followed by an optional left bracket or dot (type of subscript)\n    //\n    // Note: These portions can be read in a non-overlapping fashion and\n    // allow straightforward parsing of the hierarchy that WebGL encodes\n    // in the uniform names.\n\n    function addUniform( container, uniformObject ) {\n\n    \tcontainer.seq.push( uniformObject );\n    \tcontainer.map[ uniformObject.id ] = uniformObject;\n\n    }\n\n    function parseUniform( activeInfo, addr, container ) {\n\n    \tvar path = activeInfo.name,\n    \t\tpathLength = path.length;\n\n    \t// reset RegExp object, because of the early exit of a previous run\n    \tRePathPart.lastIndex = 0;\n\n    \tfor (; ;) {\n\n    \t\tvar match = RePathPart.exec( path ),\n    \t\t\tmatchEnd = RePathPart.lastIndex,\n\n    \t\t\tid = match[ 1 ],\n    \t\t\tidIsIndex = match[ 2 ] === ']',\n    \t\t\tsubscript = match[ 3 ];\n\n    \t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n    \t\tif ( subscript === undefined ||\n    \t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n    \t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n    \t\t\taddUniform( container, subscript === undefined ?\n    \t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n    \t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n    \t\t\tbreak;\n\n    \t\t} else {\n    \t\t\t// step into inner node / create it in case it doesn't exist\n\n    \t\t\tvar map = container.map,\n    \t\t\t\tnext = map[ id ];\n\n    \t\t\tif ( next === undefined ) {\n\n    \t\t\t\tnext = new StructuredUniform( id );\n    \t\t\t\taddUniform( container, next );\n\n    \t\t\t}\n\n    \t\t\tcontainer = next;\n\n    \t\t}\n\n    \t}\n\n    }\n\n    // Root Container\n\n    function WebGLUniforms( gl, program, renderer ) {\n\n    \tUniformContainer.call( this );\n\n    \tthis.renderer = renderer;\n\n    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\tvar info = gl.getActiveUniform( program, i ),\n    \t\t\tpath = info.name,\n    \t\t\taddr = gl.getUniformLocation( program, path );\n\n    \t\tparseUniform( info, addr, this );\n\n    \t}\n\n    }\n\n    WebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\n    \tvar u = this.map[ name ];\n\n    \tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n    };\n\n    WebGLUniforms.prototype.set = function( gl, object, name ) {\n\n    \tvar u = this.map[ name ];\n\n    \tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\n    };\n\n    WebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\n    \tvar v = object[ name ];\n\n    \tif ( v !== undefined ) this.setValue( gl, name, v );\n\n    };\n\n\n    // Static interface\n\n    WebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ],\n    \t\t\tv = values[ u.id ];\n\n    \t\tif ( v.needsUpdate !== false ) {\n    \t\t\t// note: always updating when .needsUpdate is undefined\n\n    \t\t\tu.setValue( gl, v.value, renderer );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    WebGLUniforms.seqWithValue = function( seq, values ) {\n\n    \tvar r = [];\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ];\n    \t\tif ( u.id in values ) r.push( u );\n\n    \t}\n\n    \treturn r;\n\n    };\n\n    WebGLUniforms.splitDynamic = function( seq, values ) {\n\n    \tvar r = null,\n    \t\tn = seq.length,\n    \t\tw = 0;\n\n    \tfor ( var i = 0; i !== n; ++ i ) {\n\n    \t\tvar u = seq[ i ],\n    \t\t\tv = values[ u.id ];\n\n    \t\tif ( v && v.dynamic === true ) {\n\n    \t\t\tif ( r === null ) r = [];\n    \t\t\tr.push( u );\n\n    \t\t} else {\n\n    \t\t\t// in-place compact 'seq', removing the matches\n    \t\t\tif ( w < i ) seq[ w ] = u;\n    \t\t\t++ w;\n\n    \t\t}\n\n    \t}\n\n    \tif ( w < n ) seq.length = w;\n\n    \treturn r;\n\n    };\n\n    WebGLUniforms.evalDynamic = function( seq, values, object, material, camera ) {\n\n    \tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n    \t\tvar v = values[ seq[ i ].id ],\n    \t\t\tf = v.onUpdateCallback;\n\n    \t\tif ( f !== undefined ) f.call( v, object, material, camera );\n\n    \t}\n\n    };\n\n    /**\n     * Uniform Utilities\n     */\n\n    exports.UniformsUtils = {\n\n    \tmerge: function ( uniforms ) {\n\n    \t\tvar merged = {};\n\n    \t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n    \t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n    \t\t\tfor ( var p in tmp ) {\n\n    \t\t\t\tmerged[ p ] = tmp[ p ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn merged;\n\n    \t},\n\n    \tclone: function ( uniforms_src ) {\n\n    \t\tvar uniforms_dst = {};\n\n    \t\tfor ( var u in uniforms_src ) {\n\n    \t\t\tuniforms_dst[ u ] = {};\n\n    \t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n    \t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n    \t\t\t\tif ( (parameter_src && parameter_src.isColor) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector2) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector3) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isVector4) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isMatrix3) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isMatrix4) ||\n    \t\t\t\t\t (parameter_src && parameter_src.isTexture) ) {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n    \t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn uniforms_dst;\n\n    \t}\n\n    };\n\n    var alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n    var alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n    var alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n    var aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\n    var aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n    var begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\n    var beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n    var bsdfs = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n    var bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\n    var clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n#endif\\n\";\n\n    var clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n    var clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n    var clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n    var color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n    var color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\n    var color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n    var color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n    var common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\n    var cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n    var defaultnormal_vertex = \"#ifdef FLIP_SIDED\\n\\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\n    var displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\n    var displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n    var emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n    var emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n    var encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n    var encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n    var envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\n    var envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\n    var fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\t#else\\n\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\t#endif\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n    var fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n    var lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n    var lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n    var lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n    var lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\\t\\t\\tdirectLight.color = pointLight.color;\\n\\t\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\t#include <normal_flip>\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\t#include <normal_flip>\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\n    var lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n    var lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\n    var lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n    var lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n    var lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t \\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\t\\t\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n    var logdepthbuf_fragment = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\n    var logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\n    var logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\n    var logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\n    var map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n    var map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n    var map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n    var map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n    var metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\n    var metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n    var morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n    var morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n    var morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\n    var normal_flip = \"#ifdef DOUBLE_SIDED\\n\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\n    var normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n    var normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\n    var packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n    var premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n    var project_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n    var roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\n    var roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n    var shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n    var shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\n    var shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\n    var shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\n    var skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n    var skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureWidth;\\n\\t\\tuniform int boneTextureHeight;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureWidth ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureWidth );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\n    var skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\n    var skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n    var specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n    var specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n    var tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n    var tonemapping_pars_fragment = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n    var uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n    var uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\n    var uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\n    var uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n    var uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n    var uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\n    var worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\t#ifdef USE_SKINNING\\n\\t\\tvec4 worldPosition = modelMatrix * skinned;\\n\\t#else\\n\\t\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\t#endif\\n#endif\\n\";\n\n    var cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\n    var cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n    var depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\n    var depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var distanceRGBA_frag = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\n    var distanceRGBA_vert = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\n\n    var equirect_frag = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\n    var equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n    var linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight;\\n\\treflectedLight.directDiffuse = vec3( 0.0 );\\n\\treflectedLight.directSpecular = vec3( 0.0 );\\n\\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n}\\n\";\n\n    var meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var normal_frag = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n    var normal_vert = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvNormal = normalize( normalMatrix * normal );\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n    var points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n    var points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var shadow_frag = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\n    var shadow_vert = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n    var ShaderChunk = {\n    \talphamap_fragment: alphamap_fragment,\n    \talphamap_pars_fragment: alphamap_pars_fragment,\n    \talphatest_fragment: alphatest_fragment,\n    \taomap_fragment: aomap_fragment,\n    \taomap_pars_fragment: aomap_pars_fragment,\n    \tbegin_vertex: begin_vertex,\n    \tbeginnormal_vertex: beginnormal_vertex,\n    \tbsdfs: bsdfs,\n    \tbumpmap_pars_fragment: bumpmap_pars_fragment,\n    \tclipping_planes_fragment: clipping_planes_fragment,\n    \tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n    \tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n    \tclipping_planes_vertex: clipping_planes_vertex,\n    \tcolor_fragment: color_fragment,\n    \tcolor_pars_fragment: color_pars_fragment,\n    \tcolor_pars_vertex: color_pars_vertex,\n    \tcolor_vertex: color_vertex,\n    \tcommon: common,\n    \tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n    \tdefaultnormal_vertex: defaultnormal_vertex,\n    \tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n    \tdisplacementmap_vertex: displacementmap_vertex,\n    \temissivemap_fragment: emissivemap_fragment,\n    \temissivemap_pars_fragment: emissivemap_pars_fragment,\n    \tencodings_fragment: encodings_fragment,\n    \tencodings_pars_fragment: encodings_pars_fragment,\n    \tenvmap_fragment: envmap_fragment,\n    \tenvmap_pars_fragment: envmap_pars_fragment,\n    \tenvmap_pars_vertex: envmap_pars_vertex,\n    \tenvmap_vertex: envmap_vertex,\n    \tfog_fragment: fog_fragment,\n    \tfog_pars_fragment: fog_pars_fragment,\n    \tlightmap_fragment: lightmap_fragment,\n    \tlightmap_pars_fragment: lightmap_pars_fragment,\n    \tlights_lambert_vertex: lights_lambert_vertex,\n    \tlights_pars: lights_pars,\n    \tlights_phong_fragment: lights_phong_fragment,\n    \tlights_phong_pars_fragment: lights_phong_pars_fragment,\n    \tlights_physical_fragment: lights_physical_fragment,\n    \tlights_physical_pars_fragment: lights_physical_pars_fragment,\n    \tlights_template: lights_template,\n    \tlogdepthbuf_fragment: logdepthbuf_fragment,\n    \tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n    \tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n    \tlogdepthbuf_vertex: logdepthbuf_vertex,\n    \tmap_fragment: map_fragment,\n    \tmap_pars_fragment: map_pars_fragment,\n    \tmap_particle_fragment: map_particle_fragment,\n    \tmap_particle_pars_fragment: map_particle_pars_fragment,\n    \tmetalnessmap_fragment: metalnessmap_fragment,\n    \tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n    \tmorphnormal_vertex: morphnormal_vertex,\n    \tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n    \tmorphtarget_vertex: morphtarget_vertex,\n    \tnormal_flip: normal_flip,\n    \tnormal_fragment: normal_fragment,\n    \tnormalmap_pars_fragment: normalmap_pars_fragment,\n    \tpacking: packing,\n    \tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n    \tproject_vertex: project_vertex,\n    \troughnessmap_fragment: roughnessmap_fragment,\n    \troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n    \tshadowmap_pars_fragment: shadowmap_pars_fragment,\n    \tshadowmap_pars_vertex: shadowmap_pars_vertex,\n    \tshadowmap_vertex: shadowmap_vertex,\n    \tshadowmask_pars_fragment: shadowmask_pars_fragment,\n    \tskinbase_vertex: skinbase_vertex,\n    \tskinning_pars_vertex: skinning_pars_vertex,\n    \tskinning_vertex: skinning_vertex,\n    \tskinnormal_vertex: skinnormal_vertex,\n    \tspecularmap_fragment: specularmap_fragment,\n    \tspecularmap_pars_fragment: specularmap_pars_fragment,\n    \ttonemapping_fragment: tonemapping_fragment,\n    \ttonemapping_pars_fragment: tonemapping_pars_fragment,\n    \tuv_pars_fragment: uv_pars_fragment,\n    \tuv_pars_vertex: uv_pars_vertex,\n    \tuv_vertex: uv_vertex,\n    \tuv2_pars_fragment: uv2_pars_fragment,\n    \tuv2_pars_vertex: uv2_pars_vertex,\n    \tuv2_vertex: uv2_vertex,\n    \tworldpos_vertex: worldpos_vertex,\n\n    \tcube_frag: cube_frag,\n    \tcube_vert: cube_vert,\n    \tdepth_frag: depth_frag,\n    \tdepth_vert: depth_vert,\n    \tdistanceRGBA_frag: distanceRGBA_frag,\n    \tdistanceRGBA_vert: distanceRGBA_vert,\n    \tequirect_frag: equirect_frag,\n    \tequirect_vert: equirect_vert,\n    \tlinedashed_frag: linedashed_frag,\n    \tlinedashed_vert: linedashed_vert,\n    \tmeshbasic_frag: meshbasic_frag,\n    \tmeshbasic_vert: meshbasic_vert,\n    \tmeshlambert_frag: meshlambert_frag,\n    \tmeshlambert_vert: meshlambert_vert,\n    \tmeshphong_frag: meshphong_frag,\n    \tmeshphong_vert: meshphong_vert,\n    \tmeshphysical_frag: meshphysical_frag,\n    \tmeshphysical_vert: meshphysical_vert,\n    \tnormal_frag: normal_frag,\n    \tnormal_vert: normal_vert,\n    \tpoints_frag: points_frag,\n    \tpoints_vert: points_vert,\n    \tshadow_frag: shadow_frag,\n    \tshadow_vert: shadow_vert\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Color( r, g, b ) {\n\n    \tif ( g === undefined && b === undefined ) {\n\n    \t\t// r is THREE.Color, hex or string\n    \t\treturn this.set( r );\n\n    \t}\n\n    \treturn this.setRGB( r, g, b );\n\n    }\n\n    Color.prototype = {\n\n    \tconstructor: Color,\n\n    \tisColor: true,\n\n    \tr: 1, g: 1, b: 1,\n\n    \tset: function ( value ) {\n\n    \t\tif ( (value && value.isColor) ) {\n\n    \t\t\tthis.copy( value );\n\n    \t\t} else if ( typeof value === 'number' ) {\n\n    \t\t\tthis.setHex( value );\n\n    \t\t} else if ( typeof value === 'string' ) {\n\n    \t\t\tthis.setStyle( value );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetScalar: function ( scalar ) {\n\n    \t\tthis.r = scalar;\n    \t\tthis.g = scalar;\n    \t\tthis.b = scalar;\n\n    \t},\n\n    \tsetHex: function ( hex ) {\n\n    \t\thex = Math.floor( hex );\n\n    \t\tthis.r = ( hex >> 16 & 255 ) / 255;\n    \t\tthis.g = ( hex >> 8 & 255 ) / 255;\n    \t\tthis.b = ( hex & 255 ) / 255;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetRGB: function ( r, g, b ) {\n\n    \t\tthis.r = r;\n    \t\tthis.g = g;\n    \t\tthis.b = b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetHSL: function () {\n\n    \t\tfunction hue2rgb( p, q, t ) {\n\n    \t\t\tif ( t < 0 ) t += 1;\n    \t\t\tif ( t > 1 ) t -= 1;\n    \t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n    \t\t\tif ( t < 1 / 2 ) return q;\n    \t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n    \t\t\treturn p;\n\n    \t\t}\n\n    \t\treturn function setHSL( h, s, l ) {\n\n    \t\t\t// h,s,l ranges are in 0.0 - 1.0\n    \t\t\th = exports.Math.euclideanModulo( h, 1 );\n    \t\t\ts = exports.Math.clamp( s, 0, 1 );\n    \t\t\tl = exports.Math.clamp( l, 0, 1 );\n\n    \t\t\tif ( s === 0 ) {\n\n    \t\t\t\tthis.r = this.g = this.b = l;\n\n    \t\t\t} else {\n\n    \t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n    \t\t\t\tvar q = ( 2 * l ) - p;\n\n    \t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n    \t\t\t\tthis.g = hue2rgb( q, p, h );\n    \t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n    \t\t\t}\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tsetStyle: function ( style ) {\n\n    \t\tfunction handleAlpha( string ) {\n\n    \t\t\tif ( string === undefined ) return;\n\n    \t\t\tif ( parseFloat( string ) < 1 ) {\n\n    \t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\tvar m;\n\n    \t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n    \t\t\t// rgb / hsl\n\n    \t\t\tvar color;\n    \t\t\tvar name = m[ 1 ];\n    \t\t\tvar components = m[ 2 ];\n\n    \t\t\tswitch ( name ) {\n\n    \t\t\t\tcase 'rgb':\n    \t\t\t\tcase 'rgba':\n\n    \t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n    \t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n    \t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n    \t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n    \t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n    \t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n    \t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'hsl':\n    \t\t\t\tcase 'hsla':\n\n    \t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n    \t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n    \t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n    \t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n    \t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n    \t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n    \t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n    \t\t\t// hex color\n\n    \t\t\tvar hex = m[ 1 ];\n    \t\t\tvar size = hex.length;\n\n    \t\t\tif ( size === 3 ) {\n\n    \t\t\t\t// #ff0\n    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n    \t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n    \t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n    \t\t\t\treturn this;\n\n    \t\t\t} else if ( size === 6 ) {\n\n    \t\t\t\t// #ff0000\n    \t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n    \t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n    \t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n    \t\t\t\treturn this;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( style && style.length > 0 ) {\n\n    \t\t\t// color keywords\n    \t\t\tvar hex = exports.ColorKeywords[ style ];\n\n    \t\t\tif ( hex !== undefined ) {\n\n    \t\t\t\t// red\n    \t\t\t\tthis.setHex( hex );\n\n    \t\t\t} else {\n\n    \t\t\t\t// unknown color\n    \t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.r, this.g, this.b );\n\n    \t},\n\n    \tcopy: function ( color ) {\n\n    \t\tthis.r = color.r;\n    \t\tthis.g = color.g;\n    \t\tthis.b = color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n    \t\tthis.r = Math.pow( color.r, gammaFactor );\n    \t\tthis.g = Math.pow( color.g, gammaFactor );\n    \t\tthis.b = Math.pow( color.b, gammaFactor );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n    \t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n    \t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n    \t\tthis.r = Math.pow( color.r, safeInverse );\n    \t\tthis.g = Math.pow( color.g, safeInverse );\n    \t\tthis.b = Math.pow( color.b, safeInverse );\n\n    \t\treturn this;\n\n    \t},\n\n    \tconvertGammaToLinear: function () {\n\n    \t\tvar r = this.r, g = this.g, b = this.b;\n\n    \t\tthis.r = r * r;\n    \t\tthis.g = g * g;\n    \t\tthis.b = b * b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tconvertLinearToGamma: function () {\n\n    \t\tthis.r = Math.sqrt( this.r );\n    \t\tthis.g = Math.sqrt( this.g );\n    \t\tthis.b = Math.sqrt( this.b );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetHex: function () {\n\n    \t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n    \t},\n\n    \tgetHexString: function () {\n\n    \t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n    \t},\n\n    \tgetHSL: function ( optionalTarget ) {\n\n    \t\t// h,s,l ranges are in 0.0 - 1.0\n\n    \t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n    \t\tvar r = this.r, g = this.g, b = this.b;\n\n    \t\tvar max = Math.max( r, g, b );\n    \t\tvar min = Math.min( r, g, b );\n\n    \t\tvar hue, saturation;\n    \t\tvar lightness = ( min + max ) / 2.0;\n\n    \t\tif ( min === max ) {\n\n    \t\t\thue = 0;\n    \t\t\tsaturation = 0;\n\n    \t\t} else {\n\n    \t\t\tvar delta = max - min;\n\n    \t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n    \t\t\tswitch ( max ) {\n\n    \t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n    \t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n    \t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n    \t\t\t}\n\n    \t\t\thue /= 6;\n\n    \t\t}\n\n    \t\thsl.h = hue;\n    \t\thsl.s = saturation;\n    \t\thsl.l = lightness;\n\n    \t\treturn hsl;\n\n    \t},\n\n    \tgetStyle: function () {\n\n    \t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n    \t},\n\n    \toffsetHSL: function ( h, s, l ) {\n\n    \t\tvar hsl = this.getHSL();\n\n    \t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n    \t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( color ) {\n\n    \t\tthis.r += color.r;\n    \t\tthis.g += color.g;\n    \t\tthis.b += color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddColors: function ( color1, color2 ) {\n\n    \t\tthis.r = color1.r + color2.r;\n    \t\tthis.g = color1.g + color2.g;\n    \t\tthis.b = color1.b + color2.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \taddScalar: function ( s ) {\n\n    \t\tthis.r += s;\n    \t\tthis.g += s;\n    \t\tthis.b += s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsub: function( color ) {\n\n    \t\tthis.r = Math.max( 0, this.r - color.r );\n    \t\tthis.g = Math.max( 0, this.g - color.g );\n    \t\tthis.b = Math.max( 0, this.b - color.b );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiply: function ( color ) {\n\n    \t\tthis.r *= color.r;\n    \t\tthis.g *= color.g;\n    \t\tthis.b *= color.b;\n\n    \t\treturn this;\n\n    \t},\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tthis.r *= s;\n    \t\tthis.g *= s;\n    \t\tthis.b *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tlerp: function ( color, alpha ) {\n\n    \t\tthis.r += ( color.r - this.r ) * alpha;\n    \t\tthis.g += ( color.g - this.g ) * alpha;\n    \t\tthis.b += ( color.b - this.b ) * alpha;\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( c ) {\n\n    \t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.r = array[ offset ];\n    \t\tthis.g = array[ offset + 1 ];\n    \t\tthis.b = array[ offset + 2 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this.r;\n    \t\tarray[ offset + 1 ] = this.g;\n    \t\tarray[ offset + 2 ] = this.b;\n\n    \t\treturn array;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\treturn this.getHex();\n\n    \t}\n\n    };\n\n    exports.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n    'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n    'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n    'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n    'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n    'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n    'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n    'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n    'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n    'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n    'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n    'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n    'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n    'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n    'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n    'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n    'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n    'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n    'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n    'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n    'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n    'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n    'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n    'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n    /**\n     * Uniforms library for shared webgl shaders\n     */\n\n    var UniformsLib = {\n\n    \tcommon: {\n\n    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n    \t\topacity: { value: 1.0 },\n\n    \t\tmap: { value: null },\n    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },\n\n    \t\tspecularMap: { value: null },\n    \t\talphaMap: { value: null },\n\n    \t\tenvMap: { value: null },\n    \t\tflipEnvMap: { value: - 1 },\n    \t\treflectivity: { value: 1.0 },\n    \t\trefractionRatio: { value: 0.98 }\n\n    \t},\n\n    \taomap: {\n\n    \t\taoMap: { value: null },\n    \t\taoMapIntensity: { value: 1 }\n\n    \t},\n\n    \tlightmap: {\n\n    \t\tlightMap: { value: null },\n    \t\tlightMapIntensity: { value: 1 }\n\n    \t},\n\n    \temissivemap: {\n\n    \t\temissiveMap: { value: null }\n\n    \t},\n\n    \tbumpmap: {\n\n    \t\tbumpMap: { value: null },\n    \t\tbumpScale: { value: 1 }\n\n    \t},\n\n    \tnormalmap: {\n\n    \t\tnormalMap: { value: null },\n    \t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n    \t},\n\n    \tdisplacementmap: {\n\n    \t\tdisplacementMap: { value: null },\n    \t\tdisplacementScale: { value: 1 },\n    \t\tdisplacementBias: { value: 0 }\n\n    \t},\n\n    \troughnessmap: {\n\n    \t\troughnessMap: { value: null }\n\n    \t},\n\n    \tmetalnessmap: {\n\n    \t\tmetalnessMap: { value: null }\n\n    \t},\n\n    \tfog: {\n\n    \t\tfogDensity: { value: 0.00025 },\n    \t\tfogNear: { value: 1 },\n    \t\tfogFar: { value: 2000 },\n    \t\tfogColor: { value: new Color( 0xffffff ) }\n\n    \t},\n\n    \tlights: {\n\n    \t\tambientLightColor: { value: [] },\n\n    \t\tdirectionalLights: { value: [], properties: {\n    \t\t\tdirection: {},\n    \t\t\tcolor: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tdirectionalShadowMap: { value: [] },\n    \t\tdirectionalShadowMatrix: { value: [] },\n\n    \t\tspotLights: { value: [], properties: {\n    \t\t\tcolor: {},\n    \t\t\tposition: {},\n    \t\t\tdirection: {},\n    \t\t\tdistance: {},\n    \t\t\tconeCos: {},\n    \t\t\tpenumbraCos: {},\n    \t\t\tdecay: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tspotShadowMap: { value: [] },\n    \t\tspotShadowMatrix: { value: [] },\n\n    \t\tpointLights: { value: [], properties: {\n    \t\t\tcolor: {},\n    \t\t\tposition: {},\n    \t\t\tdecay: {},\n    \t\t\tdistance: {},\n\n    \t\t\tshadow: {},\n    \t\t\tshadowBias: {},\n    \t\t\tshadowRadius: {},\n    \t\t\tshadowMapSize: {}\n    \t\t} },\n\n    \t\tpointShadowMap: { value: [] },\n    \t\tpointShadowMatrix: { value: [] },\n\n    \t\themisphereLights: { value: [], properties: {\n    \t\t\tdirection: {},\n    \t\t\tskyColor: {},\n    \t\t\tgroundColor: {}\n    \t\t} }\n\n    \t},\n\n    \tpoints: {\n\n    \t\tdiffuse: { value: new Color( 0xeeeeee ) },\n    \t\topacity: { value: 1.0 },\n    \t\tsize: { value: 1.0 },\n    \t\tscale: { value: 1.0 },\n    \t\tmap: { value: null },\n    \t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     */\n\n    var ShaderLib = {\n\n    \tbasic: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.fog\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshbasic_vert,\n    \t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n    \t},\n\n    \tlambert: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshlambert_vert,\n    \t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n    \t},\n\n    \tphong: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.bumpmap,\n    \t\t\tUniformsLib.normalmap,\n    \t\t\tUniformsLib.displacementmap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n    \t\t\t\tspecular : { value: new Color( 0x111111 ) },\n    \t\t\t\tshininess: { value: 30 }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshphong_vert,\n    \t\tfragmentShader: ShaderChunk.meshphong_frag\n\n    \t},\n\n    \tstandard: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.aomap,\n    \t\t\tUniformsLib.lightmap,\n    \t\t\tUniformsLib.emissivemap,\n    \t\t\tUniformsLib.bumpmap,\n    \t\t\tUniformsLib.normalmap,\n    \t\t\tUniformsLib.displacementmap,\n    \t\t\tUniformsLib.roughnessmap,\n    \t\t\tUniformsLib.metalnessmap,\n    \t\t\tUniformsLib.fog,\n    \t\t\tUniformsLib.lights,\n\n    \t\t\t{\n    \t\t\t\temissive : { value: new Color( 0x000000 ) },\n    \t\t\t\troughness: { value: 0.5 },\n    \t\t\t\tmetalness: { value: 0 },\n    \t\t\t\tenvMapIntensity : { value: 1 }, // temporary\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.meshphysical_vert,\n    \t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n    \t},\n\n    \tpoints: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.points,\n    \t\t\tUniformsLib.fog\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.points_vert,\n    \t\tfragmentShader: ShaderChunk.points_frag\n\n    \t},\n\n    \tdashed: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.fog,\n\n    \t\t\t{\n    \t\t\t\tscale    : { value: 1 },\n    \t\t\t\tdashSize : { value: 1 },\n    \t\t\t\ttotalSize: { value: 2 }\n    \t\t\t}\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.linedashed_vert,\n    \t\tfragmentShader: ShaderChunk.linedashed_frag\n\n    \t},\n\n    \tdepth: {\n\n    \t\tuniforms: exports.UniformsUtils.merge( [\n\n    \t\t\tUniformsLib.common,\n    \t\t\tUniformsLib.displacementmap\n\n    \t\t] ),\n\n    \t\tvertexShader: ShaderChunk.depth_vert,\n    \t\tfragmentShader: ShaderChunk.depth_frag\n\n    \t},\n\n    \tnormal: {\n\n    \t\tuniforms: {\n\n    \t\t\topacity : { value: 1.0 }\n\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.normal_vert,\n    \t\tfragmentShader: ShaderChunk.normal_frag\n\n    \t},\n\n    \t/* -------------------------------------------------------------------------\n    \t//\tCube map shader\n    \t ------------------------------------------------------------------------- */\n\n    \tcube: {\n\n    \t\tuniforms: {\n    \t\t\ttCube: { value: null },\n    \t\t\ttFlip: { value: - 1 },\n    \t\t\topacity: { value: 1.0 }\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.cube_vert,\n    \t\tfragmentShader: ShaderChunk.cube_frag\n\n    \t},\n\n    \t/* -------------------------------------------------------------------------\n    \t//\tCube map shader\n    \t ------------------------------------------------------------------------- */\n\n    \tequirect: {\n\n    \t\tuniforms: {\n    \t\t\ttEquirect: { value: null },\n    \t\t\ttFlip: { value: - 1 }\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.equirect_vert,\n    \t\tfragmentShader: ShaderChunk.equirect_frag\n\n    \t},\n\n    \tdistanceRGBA: {\n\n    \t\tuniforms: {\n\n    \t\t\tlightPos: { value: new Vector3() }\n\n    \t\t},\n\n    \t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n    \t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n    \t}\n\n    };\n\n    ShaderLib.physical = {\n\n    \tuniforms: exports.UniformsUtils.merge( [\n\n    \t\tShaderLib.standard.uniforms,\n\n    \t\t{\n    \t\t\tclearCoat: { value: 0 },\n    \t\t\tclearCoatRoughness: { value: 0 }\n    \t\t}\n\n    \t] ),\n\n    \tvertexShader: ShaderChunk.meshphysical_vert,\n    \tfragmentShader: ShaderChunk.meshphysical_frag\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Box2( min, max ) {\n\n    \tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n    \tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n    }\n\n    Box2.prototype = {\n\n    \tconstructor: Box2,\n\n    \tset: function ( min, max ) {\n\n    \t\tthis.min.copy( min );\n    \t\tthis.max.copy( max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPoints: function ( points ) {\n\n    \t\tthis.makeEmpty();\n\n    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\tthis.expandByPoint( points[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCenterAndSize: function () {\n\n    \t\tvar v1 = new Vector2();\n\n    \t\treturn function setFromCenterAndSize( center, size ) {\n\n    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n    \t\t\tthis.min.copy( center ).sub( halfSize );\n    \t\t\tthis.max.copy( center ).add( halfSize );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( box ) {\n\n    \t\tthis.min.copy( box.min );\n    \t\tthis.max.copy( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeEmpty: function () {\n\n    \t\tthis.min.x = this.min.y = + Infinity;\n    \t\tthis.max.x = this.max.y = - Infinity;\n\n    \t\treturn this;\n\n    \t},\n\n    \tisEmpty: function () {\n\n    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tgetSize: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\n    \t},\n\n    \texpandByPoint: function ( point ) {\n\n    \t\tthis.min.min( point );\n    \t\tthis.max.max( point );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByVector: function ( vector ) {\n\n    \t\tthis.min.sub( vector );\n    \t\tthis.max.add( vector );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByScalar: function ( scalar ) {\n\n    \t\tthis.min.addScalar( - scalar );\n    \t\tthis.max.addScalar( scalar );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n    \t\t     point.y < this.min.y || point.y > this.max.y ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tcontainsBox: function ( box ) {\n\n    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n    \t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tgetParameter: function ( point, optionalTarget ) {\n\n    \t\t// This can potentially have a divide by zero if the box\n    \t\t// has a size dimension of 0.\n\n    \t\tvar result = optionalTarget || new Vector2();\n\n    \t\treturn result.set(\n    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n    \t\t);\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\t// using 6 splitting planes to rule out intersections.\n\n    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n    \t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector2();\n    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\n    \t},\n\n    \tdistanceToPoint: function () {\n\n    \t\tvar v1 = new Vector2();\n\n    \t\treturn function distanceToPoint( point ) {\n\n    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n    \t\t\treturn clampedPoint.sub( point ).length();\n\n    \t\t};\n\n    \t}(),\n\n    \tintersect: function ( box ) {\n\n    \t\tthis.min.max( box.min );\n    \t\tthis.max.min( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tunion: function ( box ) {\n\n    \t\tthis.min.min( box.min );\n    \t\tthis.max.max( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.min.add( offset );\n    \t\tthis.max.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( box ) {\n\n    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n    \t}\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function LensFlarePlugin( renderer, flares ) {\n\n    \tvar gl = renderer.context;\n    \tvar state = renderer.state;\n\n    \tvar vertexBuffer, elementBuffer;\n    \tvar shader, program, attributes, uniforms;\n\n    \tvar tempTexture, occlusionTexture;\n\n    \tfunction init() {\n\n    \t\tvar vertices = new Float32Array( [\n    \t\t\t- 1, - 1,  0, 0,\n    \t\t\t 1, - 1,  1, 0,\n    \t\t\t 1,  1,  1, 1,\n    \t\t\t- 1,  1,  0, 1\n    \t\t] );\n\n    \t\tvar faces = new Uint16Array( [\n    \t\t\t0, 1, 2,\n    \t\t\t0, 2, 3\n    \t\t] );\n\n    \t\t// buffers\n\n    \t\tvertexBuffer     = gl.createBuffer();\n    \t\telementBuffer    = gl.createBuffer();\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n    \t\t// textures\n\n    \t\ttempTexture      = gl.createTexture();\n    \t\tocclusionTexture = gl.createTexture();\n\n    \t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n    \t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n    \t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n    \t\tshader = {\n\n    \t\t\tvertexShader: [\n\n    \t\t\t\t\"uniform lowp int renderType;\",\n\n    \t\t\t\t\"uniform vec3 screenPosition;\",\n    \t\t\t\t\"uniform vec2 scale;\",\n    \t\t\t\t\"uniform float rotation;\",\n\n    \t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n    \t\t\t\t\"attribute vec2 position;\",\n    \t\t\t\t\"attribute vec2 uv;\",\n\n    \t\t\t\t\"varying vec2 vUV;\",\n    \t\t\t\t\"varying float vVisibility;\",\n\n    \t\t\t\t\"void main() {\",\n\n    \t\t\t\t\t\"vUV = uv;\",\n\n    \t\t\t\t\t\"vec2 pos = position;\",\n\n    \t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n    \t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n    \t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n    \t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n    \t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n    \t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n    \t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n    \t\t\t\t\t\"}\",\n\n    \t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n    \t\t\t\t\"}\"\n\n    \t\t\t].join( \"\\n\" ),\n\n    \t\t\tfragmentShader: [\n\n    \t\t\t\t\"uniform lowp int renderType;\",\n\n    \t\t\t\t\"uniform sampler2D map;\",\n    \t\t\t\t\"uniform float opacity;\",\n    \t\t\t\t\"uniform vec3 color;\",\n\n    \t\t\t\t\"varying vec2 vUV;\",\n    \t\t\t\t\"varying float vVisibility;\",\n\n    \t\t\t\t\"void main() {\",\n\n    \t\t\t\t\t// pink square\n\n    \t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n    \t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n    \t\t\t\t\t// restore\n\n    \t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n    \t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n    \t\t\t\t\t// flare\n\n    \t\t\t\t\t\"} else {\",\n\n    \t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n    \t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n    \t\t\t\t\t\t\"gl_FragColor = texture;\",\n    \t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n    \t\t\t\t\t\"}\",\n\n    \t\t\t\t\"}\"\n\n    \t\t\t].join( \"\\n\" )\n\n    \t\t};\n\n    \t\tprogram = createProgram( shader );\n\n    \t\tattributes = {\n    \t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n    \t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n    \t\t};\n\n    \t\tuniforms = {\n    \t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n    \t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n    \t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n    \t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n    \t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n    \t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n    \t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n    \t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n    \t\t};\n\n    \t}\n\n    \t/*\n    \t * Render lens flares\n    \t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n    \t *         reads these back and calculates occlusion.\n    \t */\n\n    \tthis.render = function ( scene, camera, viewport ) {\n\n    \t\tif ( flares.length === 0 ) return;\n\n    \t\tvar tempPosition = new Vector3();\n\n    \t\tvar invAspect = viewport.w / viewport.z,\n    \t\t\thalfViewportWidth = viewport.z * 0.5,\n    \t\t\thalfViewportHeight = viewport.w * 0.5;\n\n    \t\tvar size = 16 / viewport.w,\n    \t\t\tscale = new Vector2( size * invAspect, size );\n\n    \t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n    \t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\n    \t\tvar validArea = new Box2();\n\n    \t\tvalidArea.min.set( 0, 0 );\n    \t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tinit();\n\n    \t\t}\n\n    \t\tgl.useProgram( program );\n\n    \t\tstate.initAttributes();\n    \t\tstate.enableAttribute( attributes.vertex );\n    \t\tstate.enableAttribute( attributes.uv );\n    \t\tstate.disableUnusedAttributes();\n\n    \t\t// loop through all lens flares to update their occlusion and positions\n    \t\t// setup gl and common used attribs/uniforms\n\n    \t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n    \t\tgl.uniform1i( uniforms.map, 1 );\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n    \t\tstate.disable( gl.CULL_FACE );\n    \t\tstate.setDepthWrite( false );\n\n    \t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n    \t\t\tsize = 16 / viewport.w;\n    \t\t\tscale.set( size * invAspect, size );\n\n    \t\t\t// calc object screen position\n\n    \t\t\tvar flare = flares[ i ];\n\n    \t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n    \t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n    \t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\n    \t\t\t// setup arrays for gl programs\n\n    \t\t\tscreenPosition.copy( tempPosition );\n\n    \t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n    \t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n    \t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n    \t\t\t// screen cull\n\n    \t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n    \t\t\t\t// save current RGB to temp texture\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n    \t\t\t\t// render pink quad\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n    \t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n    \t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n    \t\t\t\tstate.disable( gl.BLEND );\n    \t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n    \t\t\t\t// copy result to occlusionMap\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n    \t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n    \t\t\t\t// restore graphics\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n    \t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n    \t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n    \t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n    \t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n    \t\t\t\t// update object positions\n\n    \t\t\t\tflare.positionScreen.copy( screenPosition );\n\n    \t\t\t\tif ( flare.customUpdateCallback ) {\n\n    \t\t\t\t\tflare.customUpdateCallback( flare );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tflare.updateLensFlares();\n\n    \t\t\t\t}\n\n    \t\t\t\t// render flares\n\n    \t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n    \t\t\t\tstate.enable( gl.BLEND );\n\n    \t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n    \t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n    \t\t\t\t\t\tscreenPosition.x = sprite.x;\n    \t\t\t\t\t\tscreenPosition.y = sprite.y;\n    \t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n    \t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n    \t\t\t\t\t\tscale.x = size * invAspect;\n    \t\t\t\t\t\tscale.y = size;\n\n    \t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n    \t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n    \t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n    \t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n    \t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n    \t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n    \t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\n    \t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// restore gl\n\n    \t\tstate.enable( gl.CULL_FACE );\n    \t\tstate.enable( gl.DEPTH_TEST );\n    \t\tstate.setDepthWrite( true );\n\n    \t\trenderer.resetGLState();\n\n    \t};\n\n    \tfunction createProgram( shader ) {\n\n    \t\tvar program = gl.createProgram();\n\n    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n    \t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n    \t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n    \t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n    \t\tgl.compileShader( fragmentShader );\n    \t\tgl.compileShader( vertexShader );\n\n    \t\tgl.attachShader( program, fragmentShader );\n    \t\tgl.attachShader( program, vertexShader );\n\n    \t\tgl.linkProgram( program );\n\n    \t\treturn program;\n\n    \t}\n\n    }\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function SpritePlugin( renderer, sprites ) {\n\n    \tvar gl = renderer.context;\n    \tvar state = renderer.state;\n\n    \tvar vertexBuffer, elementBuffer;\n    \tvar program, attributes, uniforms;\n\n    \tvar texture;\n\n    \t// decompose matrixWorld\n\n    \tvar spritePosition = new Vector3();\n    \tvar spriteRotation = new Quaternion();\n    \tvar spriteScale = new Vector3();\n\n    \tfunction init() {\n\n    \t\tvar vertices = new Float32Array( [\n    \t\t\t- 0.5, - 0.5,  0, 0,\n    \t\t\t  0.5, - 0.5,  1, 0,\n    \t\t\t  0.5,   0.5,  1, 1,\n    \t\t\t- 0.5,   0.5,  0, 1\n    \t\t] );\n\n    \t\tvar faces = new Uint16Array( [\n    \t\t\t0, 1, 2,\n    \t\t\t0, 2, 3\n    \t\t] );\n\n    \t\tvertexBuffer  = gl.createBuffer();\n    \t\telementBuffer = gl.createBuffer();\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n    \t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n    \t\tprogram = createProgram();\n\n    \t\tattributes = {\n    \t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n    \t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n    \t\t};\n\n    \t\tuniforms = {\n    \t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n    \t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n    \t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n    \t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n    \t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n    \t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n    \t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n    \t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n    \t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n    \t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n    \t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n    \t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n    \t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n    \t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n    \t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n    \t\t};\n\n    \t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\tcanvas.width = 8;\n    \t\tcanvas.height = 8;\n\n    \t\tvar context = canvas.getContext( '2d' );\n    \t\tcontext.fillStyle = 'white';\n    \t\tcontext.fillRect( 0, 0, 8, 8 );\n\n    \t\ttexture = new Texture( canvas );\n    \t\ttexture.needsUpdate = true;\n\n    \t}\n\n    \tthis.render = function ( scene, camera ) {\n\n    \t\tif ( sprites.length === 0 ) return;\n\n    \t\t// setup gl\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tinit();\n\n    \t\t}\n\n    \t\tgl.useProgram( program );\n\n    \t\tstate.initAttributes();\n    \t\tstate.enableAttribute( attributes.position );\n    \t\tstate.enableAttribute( attributes.uv );\n    \t\tstate.disableUnusedAttributes();\n\n    \t\tstate.disable( gl.CULL_FACE );\n    \t\tstate.enable( gl.BLEND );\n\n    \t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n    \t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n    \t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n    \t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n    \t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n    \t\tstate.activeTexture( gl.TEXTURE0 );\n    \t\tgl.uniform1i( uniforms.map, 0 );\n\n    \t\tvar oldFogType = 0;\n    \t\tvar sceneFogType = 0;\n    \t\tvar fog = scene.fog;\n\n    \t\tif ( fog ) {\n\n    \t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n    \t\t\tif ( (fog && fog.isFog) ) {\n\n    \t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n    \t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n    \t\t\t\toldFogType = 1;\n    \t\t\t\tsceneFogType = 1;\n\n    \t\t\t} else if ( (fog && fog.isFogExp2) ) {\n\n    \t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n    \t\t\t\toldFogType = 2;\n    \t\t\t\tsceneFogType = 2;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tgl.uniform1i( uniforms.fogType, 0 );\n    \t\t\toldFogType = 0;\n    \t\t\tsceneFogType = 0;\n\n    \t\t}\n\n\n    \t\t// update positions and sort\n\n    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n    \t\t\tvar sprite = sprites[ i ];\n\n    \t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n    \t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n    \t\t}\n\n    \t\tsprites.sort( painterSortStable );\n\n    \t\t// render all sprites\n\n    \t\tvar scale = [];\n\n    \t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n    \t\t\tvar sprite = sprites[ i ];\n    \t\t\tvar material = sprite.material;\n\n    \t\t\tif ( material.visible === false ) continue;\n\n    \t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n    \t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n    \t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n    \t\t\tscale[ 0 ] = spriteScale.x;\n    \t\t\tscale[ 1 ] = spriteScale.y;\n\n    \t\t\tvar fogType = 0;\n\n    \t\t\tif ( scene.fog && material.fog ) {\n\n    \t\t\t\tfogType = sceneFogType;\n\n    \t\t\t}\n\n    \t\t\tif ( oldFogType !== fogType ) {\n\n    \t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n    \t\t\t\toldFogType = fogType;\n\n    \t\t\t}\n\n    \t\t\tif ( material.map !== null ) {\n\n    \t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n    \t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n    \t\t\t} else {\n\n    \t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n    \t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n    \t\t\t}\n\n    \t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n    \t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n    \t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n    \t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n    \t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n    \t\t\tstate.setDepthTest( material.depthTest );\n    \t\t\tstate.setDepthWrite( material.depthWrite );\n\n    \t\t\tif ( material.map ) {\n\n    \t\t\t\trenderer.setTexture2D( material.map, 0 );\n\n    \t\t\t} else {\n\n    \t\t\t\trenderer.setTexture2D( texture, 0 );\n\n    \t\t\t}\n\n    \t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n    \t\t}\n\n    \t\t// restore gl\n\n    \t\tstate.enable( gl.CULL_FACE );\n\n    \t\trenderer.resetGLState();\n\n    \t};\n\n    \tfunction createProgram() {\n\n    \t\tvar program = gl.createProgram();\n\n    \t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n    \t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n    \t\tgl.shaderSource( vertexShader, [\n\n    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n    \t\t\t'uniform mat4 modelViewMatrix;',\n    \t\t\t'uniform mat4 projectionMatrix;',\n    \t\t\t'uniform float rotation;',\n    \t\t\t'uniform vec2 scale;',\n    \t\t\t'uniform vec2 uvOffset;',\n    \t\t\t'uniform vec2 uvScale;',\n\n    \t\t\t'attribute vec2 position;',\n    \t\t\t'attribute vec2 uv;',\n\n    \t\t\t'varying vec2 vUV;',\n\n    \t\t\t'void main() {',\n\n    \t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n    \t\t\t\t'vec2 alignedPosition = position * scale;',\n\n    \t\t\t\t'vec2 rotatedPosition;',\n    \t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n    \t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n    \t\t\t\t'vec4 finalPosition;',\n\n    \t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n    \t\t\t\t'finalPosition.xy += rotatedPosition;',\n    \t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n    \t\t\t\t'gl_Position = finalPosition;',\n\n    \t\t\t'}'\n\n    \t\t].join( '\\n' ) );\n\n    \t\tgl.shaderSource( fragmentShader, [\n\n    \t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n    \t\t\t'uniform vec3 color;',\n    \t\t\t'uniform sampler2D map;',\n    \t\t\t'uniform float opacity;',\n\n    \t\t\t'uniform int fogType;',\n    \t\t\t'uniform vec3 fogColor;',\n    \t\t\t'uniform float fogDensity;',\n    \t\t\t'uniform float fogNear;',\n    \t\t\t'uniform float fogFar;',\n    \t\t\t'uniform float alphaTest;',\n\n    \t\t\t'varying vec2 vUV;',\n\n    \t\t\t'void main() {',\n\n    \t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n    \t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n    \t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n    \t\t\t\t'if ( fogType > 0 ) {',\n\n    \t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n    \t\t\t\t\t'float fogFactor = 0.0;',\n\n    \t\t\t\t\t'if ( fogType == 1 ) {',\n\n    \t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n    \t\t\t\t\t'} else {',\n\n    \t\t\t\t\t\t'const float LOG2 = 1.442695;',\n    \t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n    \t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n    \t\t\t\t\t'}',\n\n    \t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n    \t\t\t\t'}',\n\n    \t\t\t'}'\n\n    \t\t].join( '\\n' ) );\n\n    \t\tgl.compileShader( vertexShader );\n    \t\tgl.compileShader( fragmentShader );\n\n    \t\tgl.attachShader( program, vertexShader );\n    \t\tgl.attachShader( program, fragmentShader );\n\n    \t\tgl.linkProgram( program );\n\n    \t\treturn program;\n\n    \t}\n\n    \tfunction painterSortStable( a, b ) {\n\n    \t\tif ( a.renderOrder !== b.renderOrder ) {\n\n    \t\t\treturn a.renderOrder - b.renderOrder;\n\n    \t\t} else if ( a.z !== b.z ) {\n\n    \t\t\treturn b.z - a.z;\n\n    \t\t} else {\n\n    \t\t\treturn b.id - a.id;\n\n    \t\t}\n\n    \t}\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Material() {\n\n    \tObject.defineProperty( this, 'id', { value: MaterialIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Material';\n\n    \tthis.fog = true;\n    \tthis.lights = true;\n\n    \tthis.blending = NormalBlending;\n    \tthis.side = FrontSide;\n    \tthis.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n    \tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n    \tthis.opacity = 1;\n    \tthis.transparent = false;\n\n    \tthis.blendSrc = SrcAlphaFactor;\n    \tthis.blendDst = OneMinusSrcAlphaFactor;\n    \tthis.blendEquation = AddEquation;\n    \tthis.blendSrcAlpha = null;\n    \tthis.blendDstAlpha = null;\n    \tthis.blendEquationAlpha = null;\n\n    \tthis.depthFunc = LessEqualDepth;\n    \tthis.depthTest = true;\n    \tthis.depthWrite = true;\n\n    \tthis.clippingPlanes = null;\n    \tthis.clipShadows = false;\n\n    \tthis.colorWrite = true;\n\n    \tthis.precision = null; // override the renderer's default precision for this material\n\n    \tthis.polygonOffset = false;\n    \tthis.polygonOffsetFactor = 0;\n    \tthis.polygonOffsetUnits = 0;\n\n    \tthis.alphaTest = 0;\n    \tthis.premultipliedAlpha = false;\n\n    \tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n    \tthis.visible = true;\n\n    \tthis._needsUpdate = true;\n\n    }\n\n    Material.prototype = {\n\n    \tconstructor: Material,\n\n    \tisMaterial: true,\n\n    \tget needsUpdate() {\n\n    \t\treturn this._needsUpdate;\n\n    \t},\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.update();\n    \t\tthis._needsUpdate = value;\n\n    \t},\n\n    \tsetValues: function ( values ) {\n\n    \t\tif ( values === undefined ) return;\n\n    \t\tfor ( var key in values ) {\n\n    \t\t\tvar newValue = values[ key ];\n\n    \t\t\tif ( newValue === undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tvar currentValue = this[ key ];\n\n    \t\t\tif ( currentValue === undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tif ( (currentValue && currentValue.isColor) ) {\n\n    \t\t\t\tcurrentValue.set( newValue );\n\n    \t\t\t} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {\n\n    \t\t\t\tcurrentValue.copy( newValue );\n\n    \t\t\t} else if ( key === 'overdraw' ) {\n\n    \t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n    \t\t\t\tthis[ key ] = Number( newValue );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis[ key ] = newValue;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar isRoot = meta === undefined;\n\n    \t\tif ( isRoot ) {\n\n    \t\t\tmeta = {\n    \t\t\t\ttextures: {},\n    \t\t\t\timages: {}\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Material',\n    \t\t\t\tgenerator: 'Material.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard Material serialization\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( (this.color && this.color.isColor) ) data.color = this.color.getHex();\n\n    \t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n    \t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n    \t\tif ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();\n    \t\tif ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();\n    \t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\n    \t\tif ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;\n    \t\tif ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n    \t\tif ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n    \t\tif ( (this.bumpMap && this.bumpMap.isTexture) ) {\n\n    \t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n    \t\t\tdata.bumpScale = this.bumpScale;\n\n    \t\t}\n    \t\tif ( (this.normalMap && this.normalMap.isTexture) ) {\n\n    \t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n    \t\t\tdata.normalScale = this.normalScale.toArray();\n\n    \t\t}\n    \t\tif ( (this.displacementMap && this.displacementMap.isTexture) ) {\n\n    \t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n    \t\t\tdata.displacementScale = this.displacementScale;\n    \t\t\tdata.displacementBias = this.displacementBias;\n\n    \t\t}\n    \t\tif ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n    \t\tif ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n    \t\tif ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n    \t\tif ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n    \t\tif ( (this.envMap && this.envMap.isTexture) ) {\n\n    \t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n    \t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n    \t\t}\n\n    \t\tif ( this.size !== undefined ) data.size = this.size;\n    \t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n    \t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n    \t\tif ( this.shading !== SmoothShading ) data.shading = this.shading;\n    \t\tif ( this.side !== FrontSide ) data.side = this.side;\n    \t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n    \t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n    \t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n    \t\tdata.depthFunc = this.depthFunc;\n    \t\tdata.depthTest = this.depthTest;\n    \t\tdata.depthWrite = this.depthWrite;\n\n    \t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n    \t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n    \t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n    \t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n    \t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n    \t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n    \t\tdata.skinning = this.skinning;\n    \t\tdata.morphTargets = this.morphTargets;\n\n    \t\t// TODO: Copied from Object3D.toJSON\n\n    \t\tfunction extractFromCache( cache ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in cache ) {\n\n    \t\t\t\tvar data = cache[ key ];\n    \t\t\t\tdelete data.metadata;\n    \t\t\t\tvalues.push( data );\n\n    \t\t\t}\n\n    \t\t\treturn values;\n\n    \t\t}\n\n    \t\tif ( isRoot ) {\n\n    \t\t\tvar textures = extractFromCache( meta.textures );\n    \t\t\tvar images = extractFromCache( meta.images );\n\n    \t\t\tif ( textures.length > 0 ) data.textures = textures;\n    \t\t\tif ( images.length > 0 ) data.images = images;\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.name = source.name;\n\n    \t\tthis.fog = source.fog;\n    \t\tthis.lights = source.lights;\n\n    \t\tthis.blending = source.blending;\n    \t\tthis.side = source.side;\n    \t\tthis.shading = source.shading;\n    \t\tthis.vertexColors = source.vertexColors;\n\n    \t\tthis.opacity = source.opacity;\n    \t\tthis.transparent = source.transparent;\n\n    \t\tthis.blendSrc = source.blendSrc;\n    \t\tthis.blendDst = source.blendDst;\n    \t\tthis.blendEquation = source.blendEquation;\n    \t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n    \t\tthis.blendDstAlpha = source.blendDstAlpha;\n    \t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n    \t\tthis.depthFunc = source.depthFunc;\n    \t\tthis.depthTest = source.depthTest;\n    \t\tthis.depthWrite = source.depthWrite;\n\n    \t\tthis.colorWrite = source.colorWrite;\n\n    \t\tthis.precision = source.precision;\n\n    \t\tthis.polygonOffset = source.polygonOffset;\n    \t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n    \t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n    \t\tthis.alphaTest = source.alphaTest;\n\n    \t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n    \t\tthis.overdraw = source.overdraw;\n\n    \t\tthis.visible = source.visible;\n    \t\tthis.clipShadows = source.clipShadows;\n\n    \t\tvar srcPlanes = source.clippingPlanes,\n    \t\t\tdstPlanes = null;\n\n    \t\tif ( srcPlanes !== null ) {\n\n    \t\t\tvar n = srcPlanes.length;\n    \t\t\tdstPlanes = new Array( n );\n\n    \t\t\tfor ( var i = 0; i !== n; ++ i )\n    \t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n    \t\t}\n\n    \t\tthis.clippingPlanes = dstPlanes;\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdate: function () {\n\n    \t\tthis.dispatchEvent( { type: 'update' } );\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    };\n\n    Object.assign( Material.prototype, EventDispatcher.prototype );\n\n    var count$1 = 0;\n    function MaterialIdCount() { return count$1++; };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  defines: { \"label\" : \"value\" },\n     *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n     *\n     *  fragmentShader: <string>,\n     *  vertexShader: <string>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  lights: <bool>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function ShaderMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'ShaderMaterial';\n\n    \tthis.defines = {};\n    \tthis.uniforms = {};\n\n    \tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n    \tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n    \tthis.linewidth = 1;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false; // set to use scene fog\n    \tthis.lights = false; // set to use scene lights\n    \tthis.clipping = false; // set to use user-defined clipping planes\n\n    \tthis.skinning = false; // set to use skinning attribute streams\n    \tthis.morphTargets = false; // set to use morph targets\n    \tthis.morphNormals = false; // set to use morph normals\n\n    \tthis.extensions = {\n    \t\tderivatives: false, // set to use derivatives\n    \t\tfragDepth: false, // set to use fragment depth values\n    \t\tdrawBuffers: false, // set to use draw buffers\n    \t\tshaderTextureLOD: false // set to use shader texture LOD\n    \t};\n\n    \t// When rendered geometry doesn't include these attributes but the material does,\n    \t// use these default values in WebGL. This avoids errors when buffer data is missing.\n    \tthis.defaultAttributeValues = {\n    \t\t'color': [ 1, 1, 1 ],\n    \t\t'uv': [ 0, 0 ],\n    \t\t'uv2': [ 0, 0 ]\n    \t};\n\n    \tthis.index0AttributeName = undefined;\n\n    \tif ( parameters !== undefined ) {\n\n    \t\tif ( parameters.attributes !== undefined ) {\n\n    \t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n    \t\t}\n\n    \t\tthis.setValues( parameters );\n\n    \t}\n\n    }\n\n    ShaderMaterial.prototype = Object.create( Material.prototype );\n    ShaderMaterial.prototype.constructor = ShaderMaterial;\n\n    ShaderMaterial.prototype.isShaderMaterial = true;\n\n    ShaderMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.fragmentShader = source.fragmentShader;\n    \tthis.vertexShader = source.vertexShader;\n\n    \tthis.uniforms = exports.UniformsUtils.clone( source.uniforms );\n\n    \tthis.defines = source.defines;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \tthis.lights = source.lights;\n    \tthis.clipping = source.clipping;\n\n    \tthis.skinning = source.skinning;\n\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \tthis.extensions = source.extensions;\n\n    \treturn this;\n\n    };\n\n    ShaderMaterial.prototype.toJSON = function ( meta ) {\n\n    \tvar data = Material.prototype.toJSON.call( this, meta );\n\n    \tdata.uniforms = this.uniforms;\n    \tdata.vertexShader = this.vertexShader;\n    \tdata.fragmentShader = this.fragmentShader;\n\n    \treturn data;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author bhouston / https://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>\n     * }\n     */\n\n    function MeshDepthMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshDepthMaterial';\n\n    \tthis.depthPacking = BasicDepthPacking;\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n\n    \tthis.map = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshDepthMaterial.prototype = Object.create( Material.prototype );\n    MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n    MeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n    MeshDepthMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.depthPacking = source.depthPacking;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n\n    \tthis.map = source.map;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function Box3( min, max ) {\n\n    \tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n    \tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n    }\n\n    Box3.prototype = {\n\n    \tconstructor: Box3,\n\n    \tisBox3: true,\n\n    \tset: function ( min, max ) {\n\n    \t\tthis.min.copy( min );\n    \t\tthis.max.copy( max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromArray: function ( array ) {\n\n    \t\tvar minX = + Infinity;\n    \t\tvar minY = + Infinity;\n    \t\tvar minZ = + Infinity;\n\n    \t\tvar maxX = - Infinity;\n    \t\tvar maxY = - Infinity;\n    \t\tvar maxZ = - Infinity;\n\n    \t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n    \t\t\tvar x = array[ i ];\n    \t\t\tvar y = array[ i + 1 ];\n    \t\t\tvar z = array[ i + 2 ];\n\n    \t\t\tif ( x < minX ) minX = x;\n    \t\t\tif ( y < minY ) minY = y;\n    \t\t\tif ( z < minZ ) minZ = z;\n\n    \t\t\tif ( x > maxX ) maxX = x;\n    \t\t\tif ( y > maxY ) maxY = y;\n    \t\t\tif ( z > maxZ ) maxZ = z;\n\n    \t\t}\n\n    \t\tthis.min.set( minX, minY, minZ );\n    \t\tthis.max.set( maxX, maxY, maxZ );\n\n    \t},\n\n    \tsetFromPoints: function ( points ) {\n\n    \t\tthis.makeEmpty();\n\n    \t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\tthis.expandByPoint( points[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCenterAndSize: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function setFromCenterAndSize( center, size ) {\n\n    \t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n    \t\t\tthis.min.copy( center ).sub( halfSize );\n    \t\t\tthis.max.copy( center ).add( halfSize );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tsetFromObject: function () {\n\n    \t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n    \t\t// accounting for both the object's, and children's, world transforms\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function setFromObject( object ) {\n\n    \t\t\tvar scope = this;\n\n    \t\t\tobject.updateMatrixWorld( true );\n\n    \t\t\tthis.makeEmpty();\n\n    \t\t\tobject.traverse( function ( node ) {\n\n    \t\t\t\tvar geometry = node.geometry;\n\n    \t\t\t\tif ( geometry !== undefined ) {\n\n    \t\t\t\t\tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\t\t\tvar vertices = geometry.vertices;\n\n    \t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n    \t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n    \t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n    \t\t\t\t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\t\t\t\tvar array, offset, stride;\n\n    \t\t\t\t\t\t\tif ( (attribute && attribute.isInterleavedBufferAttribute) ) {\n\n    \t\t\t\t\t\t\t\tarray = attribute.data.array;\n    \t\t\t\t\t\t\t\toffset = attribute.offset;\n    \t\t\t\t\t\t\t\tstride = attribute.data.stride;\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tarray = attribute.array;\n    \t\t\t\t\t\t\t\toffset = 0;\n    \t\t\t\t\t\t\t\tstride = 3;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tfor ( var i = offset, il = array.length; i < il; i += stride ) {\n\n    \t\t\t\t\t\t\t\tv1.fromArray( array, i );\n    \t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n    \t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( box ) {\n\n    \t\tthis.min.copy( box.min );\n    \t\tthis.max.copy( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tmakeEmpty: function () {\n\n    \t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n    \t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n    \t\treturn this;\n\n    \t},\n\n    \tisEmpty: function () {\n\n    \t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    \t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tgetSize: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\n    \t},\n\n    \texpandByPoint: function ( point ) {\n\n    \t\tthis.min.min( point );\n    \t\tthis.max.max( point );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByVector: function ( vector ) {\n\n    \t\tthis.min.sub( vector );\n    \t\tthis.max.add( vector );\n\n    \t\treturn this;\n\n    \t},\n\n    \texpandByScalar: function ( scalar ) {\n\n    \t\tthis.min.addScalar( - scalar );\n    \t\tthis.max.addScalar( scalar );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tif ( point.x < this.min.x || point.x > this.max.x ||\n    \t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n    \t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tcontainsBox: function ( box ) {\n\n    \t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n    \t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n    \t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\treturn false;\n\n    \t},\n\n    \tgetParameter: function ( point, optionalTarget ) {\n\n    \t\t// This can potentially have a divide by zero if the box\n    \t\t// has a size dimension of 0.\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn result.set(\n    \t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n    \t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n    \t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n    \t\t);\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\t// using 6 splitting planes to rule out intersections.\n\n    \t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n    \t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n    \t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tintersectsSphere: ( function () {\n\n    \t\tvar closestPoint;\n\n    \t\treturn function intersectsSphere( sphere ) {\n\n    \t\t\tif ( closestPoint === undefined ) closestPoint = new Vector3();\n\n    \t\t\t// Find the point on the AABB closest to the sphere center.\n    \t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n    \t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n    \t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n    \t\t};\n\n    \t} )(),\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// We compute the minimum and maximum dot product values. If those values\n    \t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n    \t\tvar min, max;\n\n    \t\tif ( plane.normal.x > 0 ) {\n\n    \t\t\tmin = plane.normal.x * this.min.x;\n    \t\t\tmax = plane.normal.x * this.max.x;\n\n    \t\t} else {\n\n    \t\t\tmin = plane.normal.x * this.max.x;\n    \t\t\tmax = plane.normal.x * this.min.x;\n\n    \t\t}\n\n    \t\tif ( plane.normal.y > 0 ) {\n\n    \t\t\tmin += plane.normal.y * this.min.y;\n    \t\t\tmax += plane.normal.y * this.max.y;\n\n    \t\t} else {\n\n    \t\t\tmin += plane.normal.y * this.max.y;\n    \t\t\tmax += plane.normal.y * this.min.y;\n\n    \t\t}\n\n    \t\tif ( plane.normal.z > 0 ) {\n\n    \t\t\tmin += plane.normal.z * this.min.z;\n    \t\t\tmax += plane.normal.z * this.max.z;\n\n    \t\t} else {\n\n    \t\t\tmin += plane.normal.z * this.max.z;\n    \t\t\tmax += plane.normal.z * this.min.z;\n\n    \t\t}\n\n    \t\treturn ( min <= plane.constant && max >= plane.constant );\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( point ).clamp( this.min, this.max );\n\n    \t},\n\n    \tdistanceToPoint: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function distanceToPoint( point ) {\n\n    \t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n    \t\t\treturn clampedPoint.sub( point ).length();\n\n    \t\t};\n\n    \t}(),\n\n    \tgetBoundingSphere: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function getBoundingSphere( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Sphere();\n\n    \t\t\tthis.getCenter( result.center );\n\n    \t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tintersect: function ( box ) {\n\n    \t\tthis.min.max( box.min );\n    \t\tthis.max.min( box.max );\n\n    \t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n    \t\tif( this.isEmpty() ) this.makeEmpty();\n\n    \t\treturn this;\n\n    \t},\n\n    \tunion: function ( box ) {\n\n    \t\tthis.min.min( box.min );\n    \t\tthis.max.max( box.max );\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyMatrix4: function () {\n\n    \t\tvar points = [\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3(),\n    \t\t\tnew Vector3()\n    \t\t];\n\n    \t\treturn function applyMatrix4( matrix ) {\n\n    \t\t\t// transform of empty box is an empty box.\n    \t\t\tif( this.isEmpty() ) return this;\n\n    \t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n    \t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n    \t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n    \t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n    \t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n    \t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n    \t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n    \t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n    \t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n    \t\t\tthis.setFromPoints( points );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.min.add( offset );\n    \t\tthis.max.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( box ) {\n\n    \t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Sphere( center, radius ) {\n\n    \tthis.center = ( center !== undefined ) ? center : new Vector3();\n    \tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n    }\n\n    Sphere.prototype = {\n\n    \tconstructor: Sphere,\n\n    \tset: function ( center, radius ) {\n\n    \t\tthis.center.copy( center );\n    \t\tthis.radius = radius;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPoints: function () {\n\n    \t\tvar box = new Box3();\n\n    \t\treturn function setFromPoints( points, optionalCenter ) {\n\n    \t\t\tvar center = this.center;\n\n    \t\t\tif ( optionalCenter !== undefined ) {\n\n    \t\t\t\tcenter.copy( optionalCenter );\n\n    \t\t\t} else {\n\n    \t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\n    \t\t\t}\n\n    \t\t\tvar maxRadiusSq = 0;\n\n    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n    \t\t\t}\n\n    \t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( sphere ) {\n\n    \t\tthis.center.copy( sphere.center );\n    \t\tthis.radius = sphere.radius;\n\n    \t\treturn this;\n\n    \t},\n\n    \tempty: function () {\n\n    \t\treturn ( this.radius <= 0 );\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n    \t},\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\tvar radiusSum = this.radius + sphere.radius;\n\n    \t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\treturn box.intersectsSphere( this );\n\n    \t},\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// We use the following equation to compute the signed distance from\n    \t\t// the center of the sphere to the plane.\n    \t\t//\n    \t\t// distance = q * n - d\n    \t\t//\n    \t\t// If this distance is greater than the radius of the sphere,\n    \t\t// then there is no intersection.\n\n    \t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\n    \t},\n\n    \tclampPoint: function ( point, optionalTarget ) {\n\n    \t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tresult.copy( point );\n\n    \t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n    \t\t\tresult.sub( this.center ).normalize();\n    \t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \tgetBoundingBox: function ( optionalTarget ) {\n\n    \t\tvar box = optionalTarget || new Box3();\n\n    \t\tbox.set( this.center, this.center );\n    \t\tbox.expandByScalar( this.radius );\n\n    \t\treturn box;\n\n    \t},\n\n    \tapplyMatrix4: function ( matrix ) {\n\n    \t\tthis.center.applyMatrix4( matrix );\n    \t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.center.add( offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( sphere ) {\n\n    \t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     * @author tschw\n     */\n\n    function Matrix3() {\n\n    \tthis.elements = new Float32Array( [\n\n    \t\t1, 0, 0,\n    \t\t0, 1, 0,\n    \t\t0, 0, 1\n\n    \t] );\n\n    \tif ( arguments.length > 0 ) {\n\n    \t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n    \t}\n\n    }\n\n    Matrix3.prototype = {\n\n    \tconstructor: Matrix3,\n\n    \tisMatrix3: true,\n\n    \tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n    \t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n    \t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n    \t\treturn this;\n\n    \t},\n\n    \tidentity: function () {\n\n    \t\tthis.set(\n\n    \t\t\t1, 0, 0,\n    \t\t\t0, 1, 0,\n    \t\t\t0, 0, 1\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().fromArray( this.elements );\n\n    \t},\n\n    \tcopy: function ( m ) {\n\n    \t\tvar me = m.elements;\n\n    \t\tthis.set(\n\n    \t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n    \t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n    \t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrix4: function( m ) {\n\n    \t\tvar me = m.elements;\n\n    \t\tthis.set(\n\n    \t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n    \t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n    \t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n    \t\t);\n\n    \t\treturn this;\n\n    \t},\n\n    \tapplyToVector3Array: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToVector3Array( array, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = array.length;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n    \t\t\t\tv1.fromArray( array, j );\n    \t\t\t\tv1.applyMatrix3( this );\n    \t\t\t\tv1.toArray( array, j );\n\n    \t\t\t}\n\n    \t\t\treturn array;\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyToBuffer: function () {\n\n    \t\tvar v1;\n\n    \t\treturn function applyToBuffer( buffer, offset, length ) {\n\n    \t\t\tif ( v1 === undefined ) v1 = new Vector3();\n    \t\t\tif ( offset === undefined ) offset = 0;\n    \t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n    \t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n    \t\t\t\tv1.x = buffer.getX( j );\n    \t\t\t\tv1.y = buffer.getY( j );\n    \t\t\t\tv1.z = buffer.getZ( j );\n\n    \t\t\t\tv1.applyMatrix3( this );\n\n    \t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n    \t\t\t}\n\n    \t\t\treturn buffer;\n\n    \t\t};\n\n    \t}(),\n\n    \tmultiplyScalar: function ( s ) {\n\n    \t\tvar te = this.elements;\n\n    \t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n    \t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n    \t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdeterminant: function () {\n\n    \t\tvar te = this.elements;\n\n    \t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n    \t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n    \t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n    \t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n    \t},\n\n    \tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n    \t\tif ( (matrix && matrix.isMatrix4) ) {\n\n    \t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\n    \t\t}\n\n    \t\tvar me = matrix.elements,\n    \t\t\tte = this.elements,\n\n    \t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n    \t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n    \t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n    \t\t\tt11 = n33 * n22 - n32 * n23,\n    \t\t\tt12 = n32 * n13 - n33 * n12,\n    \t\t\tt13 = n23 * n12 - n22 * n13,\n\n    \t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n    \t\tif ( det === 0 ) {\n\n    \t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n    \t\t\tif ( throwOnDegenerate === true ) {\n\n    \t\t\t\tthrow new Error( msg );\n\n    \t\t\t} else {\n\n    \t\t\t\tconsole.warn( msg );\n\n    \t\t\t}\n\n    \t\t\treturn this.identity();\n    \t\t}\n\n    \t\tvar detInv = 1 / det;\n\n    \t\tte[ 0 ] = t11 * detInv;\n    \t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n    \t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n    \t\tte[ 3 ] = t12 * detInv;\n    \t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n    \t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n    \t\tte[ 6 ] = t13 * detInv;\n    \t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n    \t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttranspose: function () {\n\n    \t\tvar tmp, m = this.elements;\n\n    \t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n    \t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n    \t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n    \t\treturn this;\n\n    \t},\n\n    \tflattenToArrayOffset: function ( array, offset ) {\n\n    \t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n    \t\t\t\t\"- just use .toArray instead.\" );\n\n    \t\treturn this.toArray( array, offset );\n\n    \t},\n\n    \tgetNormalMatrix: function ( matrix4 ) {\n\n    \t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n    \t},\n\n    \ttransposeIntoArray: function ( r ) {\n\n    \t\tvar m = this.elements;\n\n    \t\tr[ 0 ] = m[ 0 ];\n    \t\tr[ 1 ] = m[ 3 ];\n    \t\tr[ 2 ] = m[ 6 ];\n    \t\tr[ 3 ] = m[ 1 ];\n    \t\tr[ 4 ] = m[ 4 ];\n    \t\tr[ 5 ] = m[ 7 ];\n    \t\tr[ 6 ] = m[ 2 ];\n    \t\tr[ 7 ] = m[ 5 ];\n    \t\tr[ 8 ] = m[ 8 ];\n\n    \t\treturn this;\n\n    \t},\n\n    \tfromArray: function ( array, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tfor( var i = 0; i < 9; i ++ ) {\n\n    \t\t\tthis.elements[ i ] = array[ i + offset ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar te = this.elements;\n\n    \t\tarray[ offset ] = te[ 0 ];\n    \t\tarray[ offset + 1 ] = te[ 1 ];\n    \t\tarray[ offset + 2 ] = te[ 2 ];\n\n    \t\tarray[ offset + 3 ] = te[ 3 ];\n    \t\tarray[ offset + 4 ] = te[ 4 ];\n    \t\tarray[ offset + 5 ] = te[ 5 ];\n\n    \t\tarray[ offset + 6 ] = te[ 6 ];\n    \t\tarray[ offset + 7 ] = te[ 7 ];\n    \t\tarray[ offset + 8 ]  = te[ 8 ];\n\n    \t\treturn array;\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Plane( normal, constant ) {\n\n    \tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n    \tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n    }\n\n    Plane.prototype = {\n\n    \tconstructor: Plane,\n\n    \tset: function ( normal, constant ) {\n\n    \t\tthis.normal.copy( normal );\n    \t\tthis.constant = constant;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetComponents: function ( x, y, z, w ) {\n\n    \t\tthis.normal.set( x, y, z );\n    \t\tthis.constant = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n    \t\tthis.normal.copy( normal );\n    \t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromCoplanarPoints: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar v2 = new Vector3();\n\n    \t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n    \t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n    \t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n    \t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( plane ) {\n\n    \t\tthis.normal.copy( plane.normal );\n    \t\tthis.constant = plane.constant;\n\n    \t\treturn this;\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n    \t\tvar inverseNormalLength = 1.0 / this.normal.length();\n    \t\tthis.normal.multiplyScalar( inverseNormalLength );\n    \t\tthis.constant *= inverseNormalLength;\n\n    \t\treturn this;\n\n    \t},\n\n    \tnegate: function () {\n\n    \t\tthis.constant *= - 1;\n    \t\tthis.normal.negate();\n\n    \t\treturn this;\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn this.normal.dot( point ) + this.constant;\n\n    \t},\n\n    \tdistanceToSphere: function ( sphere ) {\n\n    \t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n    \t},\n\n    \tprojectPoint: function ( point, optionalTarget ) {\n\n    \t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n    \t},\n\n    \torthoPoint: function ( point, optionalTarget ) {\n\n    \t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n    \t},\n\n    \tintersectLine: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function intersectLine( line, optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tvar direction = line.delta( v1 );\n\n    \t\t\tvar denominator = this.normal.dot( direction );\n\n    \t\t\tif ( denominator === 0 ) {\n\n    \t\t\t\t// line is coplanar, return origin\n    \t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n    \t\t\t\t\treturn result.copy( line.start );\n\n    \t\t\t\t}\n\n    \t\t\t\t// Unsure if this is the correct method to handle this case.\n    \t\t\t\treturn undefined;\n\n    \t\t\t}\n\n    \t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n    \t\t\tif ( t < 0 || t > 1 ) {\n\n    \t\t\t\treturn undefined;\n\n    \t\t\t}\n\n    \t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsLine: function ( line ) {\n\n    \t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n    \t\tvar startSign = this.distanceToPoint( line.start );\n    \t\tvar endSign = this.distanceToPoint( line.end );\n\n    \t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n    \t},\n\n    \tintersectsBox: function ( box ) {\n\n    \t\treturn box.intersectsPlane( this );\n\n    \t},\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\treturn sphere.intersectsPlane( this );\n\n    \t},\n\n    \tcoplanarPoint: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n    \t},\n\n    \tapplyMatrix4: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar m1 = new Matrix3();\n\n    \t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n    \t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n    \t\t\t// transform normal based on theory here:\n    \t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n    \t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n    \t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n    \t\t\tthis.constant = - referencePoint.dot( normal );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function ( offset ) {\n\n    \t\tthis.constant = this.constant - offset.dot( this.normal );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( plane ) {\n\n    \t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author bhouston / http://clara.io\n     */\n\n    function Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n    \tthis.planes = [\n\n    \t\t( p0 !== undefined ) ? p0 : new Plane(),\n    \t\t( p1 !== undefined ) ? p1 : new Plane(),\n    \t\t( p2 !== undefined ) ? p2 : new Plane(),\n    \t\t( p3 !== undefined ) ? p3 : new Plane(),\n    \t\t( p4 !== undefined ) ? p4 : new Plane(),\n    \t\t( p5 !== undefined ) ? p5 : new Plane()\n\n    \t];\n\n    }\n\n    Frustum.prototype = {\n\n    \tconstructor: Frustum,\n\n    \tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tplanes[ 0 ].copy( p0 );\n    \t\tplanes[ 1 ].copy( p1 );\n    \t\tplanes[ 2 ].copy( p2 );\n    \t\tplanes[ 3 ].copy( p3 );\n    \t\tplanes[ 4 ].copy( p4 );\n    \t\tplanes[ 5 ].copy( p5 );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( frustum ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromMatrix: function ( m ) {\n\n    \t\tvar planes = this.planes;\n    \t\tvar me = m.elements;\n    \t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n    \t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n    \t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n    \t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n    \t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n    \t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n    \t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n    \t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n    \t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n    \t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \tintersectsObject: function () {\n\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function intersectsObject( object ) {\n\n    \t\t\tvar geometry = object.geometry;\n\n    \t\t\tif ( geometry.boundingSphere === null )\n    \t\t\t\tgeometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere )\n    \t\t\t\t.applyMatrix4( object.matrixWorld );\n\n    \t\t\treturn this.intersectsSphere( sphere );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSprite: function () {\n\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function intersectsSprite( sprite ) {\n\n    \t\t\tsphere.center.set( 0, 0, 0 );\n    \t\t\tsphere.radius = 0.7071067811865476;\n    \t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n    \t\t\treturn this.intersectsSphere( sphere );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\tvar planes = this.planes;\n    \t\tvar center = sphere.center;\n    \t\tvar negRadius = - sphere.radius;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n    \t\t\tif ( distance < negRadius ) {\n\n    \t\t\t\treturn false;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t},\n\n    \tintersectsBox: function () {\n\n    \t\tvar p1 = new Vector3(),\n    \t\t\tp2 = new Vector3();\n\n    \t\treturn function intersectsBox( box ) {\n\n    \t\t\tvar planes = this.planes;\n\n    \t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\n    \t\t\t\tvar plane = planes[ i ];\n\n    \t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n    \t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n    \t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n    \t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n    \t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n    \t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n    \t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n    \t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n    \t\t\t\t// if both outside plane, no intersection\n\n    \t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n    \t\t\t\t\treturn false;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn true;\n\n    \t\t};\n\n    \t}(),\n\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\tvar planes = this.planes;\n\n    \t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n    \t\t\t\treturn false;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn true;\n\n    \t}\n\n    };\n\n    function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {\n\n    \tvar _gl = _renderer.context,\n    \t_state = _renderer.state,\n    \t_frustum = new Frustum(),\n    \t_projScreenMatrix = new Matrix4(),\n\n    \t_lightShadows = _lights.shadows,\n\n    \t_shadowMapSize = new Vector2(),\n    \t_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\n    \t_lookTarget = new Vector3(),\n    \t_lightPositionWorld = new Vector3(),\n\n    \t_renderList = [],\n\n    \t_MorphingFlag = 1,\n    \t_SkinningFlag = 2,\n\n    \t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n    \t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n    \t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n    \t_materialCache = {};\n\n    \tvar cubeDirections = [\n    \t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n    \t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n    \t];\n\n    \tvar cubeUps = [\n    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n    \t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n    \t];\n\n    \tvar cube2DViewPorts = [\n    \t\tnew Vector4(), new Vector4(), new Vector4(),\n    \t\tnew Vector4(), new Vector4(), new Vector4()\n    \t];\n\n    \t// init\n\n    \tvar depthMaterialTemplate = new MeshDepthMaterial();\n    \tdepthMaterialTemplate.depthPacking = RGBADepthPacking;\n    \tdepthMaterialTemplate.clipping = true;\n\n    \tvar distanceShader = ShaderLib[ \"distanceRGBA\" ];\n    \tvar distanceUniforms = exports.UniformsUtils.clone( distanceShader.uniforms );\n\n    \tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n    \t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n    \t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n    \t\tvar depthMaterial = depthMaterialTemplate.clone();\n    \t\tdepthMaterial.morphTargets = useMorphing;\n    \t\tdepthMaterial.skinning = useSkinning;\n\n    \t\t_depthMaterials[ i ] = depthMaterial;\n\n    \t\tvar distanceMaterial = new ShaderMaterial( {\n    \t\t\tdefines: {\n    \t\t\t\t'USE_SHADOWMAP': ''\n    \t\t\t},\n    \t\t\tuniforms: distanceUniforms,\n    \t\t\tvertexShader: distanceShader.vertexShader,\n    \t\t\tfragmentShader: distanceShader.fragmentShader,\n    \t\t\tmorphTargets: useMorphing,\n    \t\t\tskinning: useSkinning,\n    \t\t\tclipping: true\n    \t\t} );\n\n    \t\t_distanceMaterials[ i ] = distanceMaterial;\n\n    \t}\n\n    \t//\n\n    \tvar scope = this;\n\n    \tthis.enabled = false;\n\n    \tthis.autoUpdate = true;\n    \tthis.needsUpdate = false;\n\n    \tthis.type = PCFShadowMap;\n\n    \tthis.renderReverseSided = true;\n    \tthis.renderSingleSided = true;\n\n    \tthis.render = function ( scene, camera ) {\n\n    \t\tif ( scope.enabled === false ) return;\n    \t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n    \t\tif ( _lightShadows.length === 0 ) return;\n\n    \t\t// Set GL state for depth map.\n    \t\t_state.clearColor( 1, 1, 1, 1 );\n    \t\t_state.disable( _gl.BLEND );\n    \t\t_state.setDepthTest( true );\n    \t\t_state.setScissorTest( false );\n\n    \t\t// render depth map\n\n    \t\tvar faceCount, isPointLight;\n\n    \t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\n    \t\t\tvar light = _lightShadows[ i ];\n    \t\t\tvar shadow = light.shadow;\n\n    \t\t\tif ( shadow === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tvar shadowCamera = shadow.camera;\n\n    \t\t\t_shadowMapSize.copy( shadow.mapSize );\n    \t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n    \t\t\tif ( (light && light.isPointLight) ) {\n\n    \t\t\t\tfaceCount = 6;\n    \t\t\t\tisPointLight = true;\n\n    \t\t\t\tvar vpWidth = _shadowMapSize.x;\n    \t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n    \t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n    \t\t\t\t// following orientation:\n    \t\t\t\t//\n    \t\t\t\t//  xzXZ\n    \t\t\t\t//   y Y\n    \t\t\t\t//\n    \t\t\t\t// X - Positive x direction\n    \t\t\t\t// x - Negative x direction\n    \t\t\t\t// Y - Positive y direction\n    \t\t\t\t// y - Negative y direction\n    \t\t\t\t// Z - Positive z direction\n    \t\t\t\t// z - Negative z direction\n\n    \t\t\t\t// positive X\n    \t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// negative X\n    \t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// positive Z\n    \t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// negative Z\n    \t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n    \t\t\t\t// positive Y\n    \t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n    \t\t\t\t// negative Y\n    \t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n    \t\t\t\t_shadowMapSize.x *= 4.0;\n    \t\t\t\t_shadowMapSize.y *= 2.0;\n\n    \t\t\t} else {\n\n    \t\t\t\tfaceCount = 1;\n    \t\t\t\tisPointLight = false;\n\n    \t\t\t}\n\n    \t\t\tif ( shadow.map === null ) {\n\n    \t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n    \t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n    \t\t\t\tshadowCamera.updateProjectionMatrix();\n\n    \t\t\t}\n\n    \t\t\tif ( (shadow && shadow.isSpotLightShadow) ) {\n\n    \t\t\t\tshadow.update( light );\n\n    \t\t\t}\n\n    \t\t\tvar shadowMap = shadow.map;\n    \t\t\tvar shadowMatrix = shadow.matrix;\n\n    \t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n    \t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n    \t\t\t_renderer.setRenderTarget( shadowMap );\n    \t\t\t_renderer.clear();\n\n    \t\t\t// render shadow map for each cube face (if omni-directional) or\n    \t\t\t// run a single pass if not\n\n    \t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n    \t\t\t\tif ( isPointLight ) {\n\n    \t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n    \t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n    \t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n    \t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n    \t\t\t\t\t_state.viewport( vpDimensions );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n    \t\t\t\t}\n\n    \t\t\t\tshadowCamera.updateMatrixWorld();\n    \t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\n    \t\t\t\t// compute shadow matrix\n\n    \t\t\t\tshadowMatrix.set(\n    \t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n    \t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n    \t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n    \t\t\t\t\t0.0, 0.0, 0.0, 1.0\n    \t\t\t\t);\n\n    \t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n    \t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n    \t\t\t\t// update camera matrices and frustum\n\n    \t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n    \t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n    \t\t\t\t// set object matrices & frustum culling\n\n    \t\t\t\t_renderList.length = 0;\n\n    \t\t\t\tprojectObject( scene, camera, shadowCamera );\n\n    \t\t\t\t// render shadow map\n    \t\t\t\t// render regular objects\n\n    \t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar object = _renderList[ j ];\n    \t\t\t\t\tvar geometry = _objects.update( object );\n    \t\t\t\t\tvar material = object.material;\n\n    \t\t\t\t\tif ( (material && material.isMultiMaterial) ) {\n\n    \t\t\t\t\t\tvar groups = geometry.groups;\n    \t\t\t\t\t\tvar materials = material.materials;\n\n    \t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n    \t\t\t\t\t\t\tvar group = groups[ k ];\n    \t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n    \t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n    \t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n    \t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n    \t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Restore GL state.\n    \t\tvar clearColor = _renderer.getClearColor(),\n    \t\tclearAlpha = _renderer.getClearAlpha();\n    \t\t_renderer.setClearColor( clearColor, clearAlpha );\n\n    \t\tscope.needsUpdate = false;\n\n    \t};\n\n    \tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tvar result = null;\n\n    \t\tvar materialVariants = _depthMaterials;\n    \t\tvar customMaterial = object.customDepthMaterial;\n\n    \t\tif ( isPointLight ) {\n\n    \t\t\tmaterialVariants = _distanceMaterials;\n    \t\t\tcustomMaterial = object.customDistanceMaterial;\n\n    \t\t}\n\n    \t\tif ( ! customMaterial ) {\n\n    \t\t\tvar useMorphing = false;\n\n    \t\t\tif ( material.morphTargets ) {\n\n    \t\t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n    \t\t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n    \t\t\tvar variantIndex = 0;\n\n    \t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n    \t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n    \t\t\tresult = materialVariants[ variantIndex ];\n\n    \t\t} else {\n\n    \t\t\tresult = customMaterial;\n\n    \t\t}\n\n    \t\tif ( _renderer.localClippingEnabled &&\n    \t\t\t material.clipShadows === true &&\n    \t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n    \t\t\t// in this case we need a unique material instance reflecting the\n    \t\t\t// appropriate state\n\n    \t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n    \t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n    \t\t\tif ( materialsForVariant === undefined ) {\n\n    \t\t\t\tmaterialsForVariant = {};\n    \t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n    \t\t\t}\n\n    \t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n    \t\t\tif ( cachedMaterial === undefined ) {\n\n    \t\t\t\tcachedMaterial = result.clone();\n    \t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n    \t\t\t}\n\n    \t\t\tresult = cachedMaterial;\n\n    \t\t}\n\n    \t\tresult.visible = material.visible;\n    \t\tresult.wireframe = material.wireframe;\n\n    \t\tvar side = material.side;\n\n    \t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\n    \t\t\tside = FrontSide;\n\n    \t\t}\n\n    \t\tif ( scope.renderReverseSided ) {\n\n    \t\t\tif ( side === FrontSide ) side = BackSide;\n    \t\t\telse if ( side === BackSide ) side = FrontSide;\n\n    \t\t}\n\n    \t\tresult.side = side;\n\n    \t\tresult.clipShadows = material.clipShadows;\n    \t\tresult.clippingPlanes = material.clippingPlanes;\n\n    \t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n    \t\tresult.linewidth = material.linewidth;\n\n    \t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\n    \t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    \tfunction projectObject( object, camera, shadowCamera ) {\n\n    \t\tif ( object.visible === false ) return;\n\n    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\n    \t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n    \t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\n    \t\t\t\tvar material = object.material;\n\n    \t\t\t\tif ( material.visible === true ) {\n\n    \t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n    \t\t\t\t\t_renderList.push( object );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Ray( origin, direction ) {\n\n    \tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n    \tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n    }\n\n    Ray.prototype = {\n\n    \tconstructor: Ray,\n\n    \tset: function ( origin, direction ) {\n\n    \t\tthis.origin.copy( origin );\n    \t\tthis.direction.copy( direction );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( ray ) {\n\n    \t\tthis.origin.copy( ray.origin );\n    \t\tthis.direction.copy( ray.direction );\n\n    \t\treturn this;\n\n    \t},\n\n    \tat: function ( t, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n    \t},\n\n    \tlookAt: function ( v ) {\n\n    \t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \trecast: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function recast( t ) {\n\n    \t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tclosestPointToPoint: function ( point, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\tresult.subVectors( point, this.origin );\n    \t\tvar directionDistance = result.dot( this.direction );\n\n    \t\tif ( directionDistance < 0 ) {\n\n    \t\t\treturn result.copy( this.origin );\n\n    \t\t}\n\n    \t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n    \t},\n\n    \tdistanceToPoint: function ( point ) {\n\n    \t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n    \t},\n\n    \tdistanceSqToPoint: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function distanceSqToPoint( point ) {\n\n    \t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n    \t\t\t// point behind the ray\n\n    \t\t\tif ( directionDistance < 0 ) {\n\n    \t\t\t\treturn this.origin.distanceToSquared( point );\n\n    \t\t\t}\n\n    \t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n    \t\t\treturn v1.distanceToSquared( point );\n\n    \t\t};\n\n    \t}(),\n\n    \tdistanceSqToSegment: function () {\n\n    \t\tvar segCenter = new Vector3();\n    \t\tvar segDir = new Vector3();\n    \t\tvar diff = new Vector3();\n\n    \t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n    \t\t\t// It returns the min distance between the ray and the segment\n    \t\t\t// defined by v0 and v1\n    \t\t\t// It can also set two optional targets :\n    \t\t\t// - The closest point on the ray\n    \t\t\t// - The closest point on the segment\n\n    \t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n    \t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n    \t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n    \t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n    \t\t\tvar a01 = - this.direction.dot( segDir );\n    \t\t\tvar b0 = diff.dot( this.direction );\n    \t\t\tvar b1 = - diff.dot( segDir );\n    \t\t\tvar c = diff.lengthSq();\n    \t\t\tvar det = Math.abs( 1 - a01 * a01 );\n    \t\t\tvar s0, s1, sqrDist, extDet;\n\n    \t\t\tif ( det > 0 ) {\n\n    \t\t\t\t// The ray and segment are not parallel.\n\n    \t\t\t\ts0 = a01 * b1 - b0;\n    \t\t\t\ts1 = a01 * b0 - b1;\n    \t\t\t\textDet = segExtent * det;\n\n    \t\t\t\tif ( s0 >= 0 ) {\n\n    \t\t\t\t\tif ( s1 >= - extDet ) {\n\n    \t\t\t\t\t\tif ( s1 <= extDet ) {\n\n    \t\t\t\t\t\t\t// region 0\n    \t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n    \t\t\t\t\t\t\tvar invDet = 1 / det;\n    \t\t\t\t\t\t\ts0 *= invDet;\n    \t\t\t\t\t\t\ts1 *= invDet;\n    \t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t// region 1\n\n    \t\t\t\t\t\t\ts1 = segExtent;\n    \t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// region 5\n\n    \t\t\t\t\t\ts1 = - segExtent;\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( s1 <= - extDet ) {\n\n    \t\t\t\t\t\t// region 4\n\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t} else if ( s1 <= extDet ) {\n\n    \t\t\t\t\t\t// region 3\n\n    \t\t\t\t\t\ts0 = 0;\n    \t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// region 2\n\n    \t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n    \t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n    \t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// Ray and segment are parallel.\n\n    \t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n    \t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n    \t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n    \t\t\t}\n\n    \t\t\tif ( optionalPointOnRay ) {\n\n    \t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n    \t\t\t}\n\n    \t\t\tif ( optionalPointOnSegment ) {\n\n    \t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n    \t\t\t}\n\n    \t\t\treturn sqrDist;\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectSphere: function () {\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n    \t\t\tv1.subVectors( sphere.center, this.origin );\n    \t\t\tvar tca = v1.dot( this.direction );\n    \t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n    \t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n    \t\t\tif ( d2 > radius2 ) return null;\n\n    \t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n    \t\t\t// t0 = first intersect point - entrance on front of sphere\n    \t\t\tvar t0 = tca - thc;\n\n    \t\t\t// t1 = second intersect point - exit point on back of sphere\n    \t\t\tvar t1 = tca + thc;\n\n    \t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n    \t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n    \t\t\t// test to see if t0 is behind the ray:\n    \t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n    \t\t\t// in order to always return an intersect point that is in front of the ray.\n    \t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n    \t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n    \t\t\treturn this.at( t0, optionalTarget );\n\n    \t\t};\n\n    \t}(),\n\n    \tintersectsSphere: function ( sphere ) {\n\n    \t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n    \t},\n\n    \tdistanceToPlane: function ( plane ) {\n\n    \t\tvar denominator = plane.normal.dot( this.direction );\n\n    \t\tif ( denominator === 0 ) {\n\n    \t\t\t// line is coplanar, return origin\n    \t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n    \t\t\t\treturn 0;\n\n    \t\t\t}\n\n    \t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n    \t\t// Return if the ray never intersects the plane\n\n    \t\treturn t >= 0 ? t :  null;\n\n    \t},\n\n    \tintersectPlane: function ( plane, optionalTarget ) {\n\n    \t\tvar t = this.distanceToPlane( plane );\n\n    \t\tif ( t === null ) {\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\treturn this.at( t, optionalTarget );\n\n    \t},\n\n\n\n    \tintersectsPlane: function ( plane ) {\n\n    \t\t// check if the ray lies on the plane first\n\n    \t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n    \t\tif ( distToPoint === 0 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\tvar denominator = plane.normal.dot( this.direction );\n\n    \t\tif ( denominator * distToPoint < 0 ) {\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\t// ray origin is behind the plane (and is pointing behind it)\n\n    \t\treturn false;\n\n    \t},\n\n    \tintersectBox: function ( box, optionalTarget ) {\n\n    \t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n    \t\tvar invdirx = 1 / this.direction.x,\n    \t\t\tinvdiry = 1 / this.direction.y,\n    \t\t\tinvdirz = 1 / this.direction.z;\n\n    \t\tvar origin = this.origin;\n\n    \t\tif ( invdirx >= 0 ) {\n\n    \t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n    \t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n    \t\t} else {\n\n    \t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n    \t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n    \t\t}\n\n    \t\tif ( invdiry >= 0 ) {\n\n    \t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n    \t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n    \t\t} else {\n\n    \t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n    \t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n    \t\t}\n\n    \t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n    \t\t// These lines also handle the case where tmin or tmax is NaN\n    \t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n    \t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n    \t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n    \t\tif ( invdirz >= 0 ) {\n\n    \t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n    \t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n    \t\t} else {\n\n    \t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n    \t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n    \t\t}\n\n    \t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n    \t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n    \t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n    \t\t//return point closest to the ray (positive side)\n\n    \t\tif ( tmax < 0 ) return null;\n\n    \t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n    \t},\n\n    \tintersectsBox: ( function () {\n\n    \t\tvar v = new Vector3();\n\n    \t\treturn function intersectsBox( box ) {\n\n    \t\t\treturn this.intersectBox( box, v ) !== null;\n\n    \t\t};\n\n    \t} )(),\n\n    \tintersectTriangle: function () {\n\n    \t\t// Compute the offset origin, edges, and normal.\n    \t\tvar diff = new Vector3();\n    \t\tvar edge1 = new Vector3();\n    \t\tvar edge2 = new Vector3();\n    \t\tvar normal = new Vector3();\n\n    \t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n    \t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n    \t\t\tedge1.subVectors( b, a );\n    \t\t\tedge2.subVectors( c, a );\n    \t\t\tnormal.crossVectors( edge1, edge2 );\n\n    \t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n    \t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n    \t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n    \t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n    \t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n    \t\t\tvar DdN = this.direction.dot( normal );\n    \t\t\tvar sign;\n\n    \t\t\tif ( DdN > 0 ) {\n\n    \t\t\t\tif ( backfaceCulling ) return null;\n    \t\t\t\tsign = 1;\n\n    \t\t\t} else if ( DdN < 0 ) {\n\n    \t\t\t\tsign = - 1;\n    \t\t\t\tDdN = - DdN;\n\n    \t\t\t} else {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\tdiff.subVectors( this.origin, a );\n    \t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n    \t\t\t// b1 < 0, no intersection\n    \t\t\tif ( DdQxE2 < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n    \t\t\t// b2 < 0, no intersection\n    \t\t\tif ( DdE1xQ < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// b1+b2 > 1, no intersection\n    \t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// Line intersects triangle, check if ray does.\n    \t\t\tvar QdN = - sign * diff.dot( normal );\n\n    \t\t\t// t < 0, no intersection\n    \t\t\tif ( QdN < 0 ) {\n\n    \t\t\t\treturn null;\n\n    \t\t\t}\n\n    \t\t\t// Ray intersects triangle.\n    \t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n    \t\t};\n\n    \t}(),\n\n    \tapplyMatrix4: function ( matrix4 ) {\n\n    \t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n    \t\tthis.origin.applyMatrix4( matrix4 );\n    \t\tthis.direction.sub( this.origin );\n    \t\tthis.direction.normalize();\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( ray ) {\n\n    \t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author bhouston / http://clara.io\n     */\n\n    function Euler( x, y, z, order ) {\n\n    \tthis._x = x || 0;\n    \tthis._y = y || 0;\n    \tthis._z = z || 0;\n    \tthis._order = order || Euler.DefaultOrder;\n\n    }\n\n    Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n    Euler.DefaultOrder = 'XYZ';\n\n    Euler.prototype = {\n\n    \tconstructor: Euler,\n\n    \tisEuler: true,\n\n    \tget x () {\n\n    \t\treturn this._x;\n\n    \t},\n\n    \tset x ( value ) {\n\n    \t\tthis._x = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget y () {\n\n    \t\treturn this._y;\n\n    \t},\n\n    \tset y ( value ) {\n\n    \t\tthis._y = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget z () {\n\n    \t\treturn this._z;\n\n    \t},\n\n    \tset z ( value ) {\n\n    \t\tthis._z = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tget order () {\n\n    \t\treturn this._order;\n\n    \t},\n\n    \tset order ( value ) {\n\n    \t\tthis._order = value;\n    \t\tthis.onChangeCallback();\n\n    \t},\n\n    \tset: function ( x, y, z, order ) {\n\n    \t\tthis._x = x;\n    \t\tthis._y = y;\n    \t\tthis._z = z;\n    \t\tthis._order = order || this._order;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n    \t},\n\n    \tcopy: function ( euler ) {\n\n    \t\tthis._x = euler._x;\n    \t\tthis._y = euler._y;\n    \t\tthis._z = euler._z;\n    \t\tthis._order = euler._order;\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromRotationMatrix: function ( m, order, update ) {\n\n    \t\tvar clamp = exports.Math.clamp;\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tvar te = m.elements;\n    \t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n    \t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n    \t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n    \t\torder = order || this._order;\n\n    \t\tif ( order === 'XYZ' ) {\n\n    \t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n    \t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n    \t\t\t\tthis._z = 0;\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'YXZ' ) {\n\n    \t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n    \t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n    \t\t\t\tthis._z = 0;\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'ZXY' ) {\n\n    \t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n    \t\t\t\tthis._y = Math.atan2( - m31, m33 );\n    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._y = 0;\n    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'ZYX' ) {\n\n    \t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m33 );\n    \t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = 0;\n    \t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'YZX' ) {\n\n    \t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m22 );\n    \t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = 0;\n    \t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n    \t\t\t}\n\n    \t\t} else if ( order === 'XZY' ) {\n\n    \t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n    \t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n    \t\t\t\tthis._x = Math.atan2( m32, m22 );\n    \t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis._x = Math.atan2( - m23, m33 );\n    \t\t\t\tthis._y = 0;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n    \t\t}\n\n    \t\tthis._order = order;\n\n    \t\tif ( update !== false ) this.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromQuaternion: function () {\n\n    \t\tvar matrix;\n\n    \t\treturn function setFromQuaternion( q, order, update ) {\n\n    \t\t\tif ( matrix === undefined ) matrix = new Matrix4();\n\n    \t\t\tmatrix.makeRotationFromQuaternion( q );\n\n    \t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n    \t\t};\n\n    \t}(),\n\n    \tsetFromVector3: function ( v, order ) {\n\n    \t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n    \t},\n\n    \treorder: function () {\n\n    \t\t// WARNING: this discards revolution information -bhouston\n\n    \t\tvar q = new Quaternion();\n\n    \t\treturn function reorder( newOrder ) {\n\n    \t\t\tq.setFromEuler( this );\n\n    \t\t\treturn this.setFromQuaternion( q, newOrder );\n\n    \t\t};\n\n    \t}(),\n\n    \tequals: function ( euler ) {\n\n    \t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n    \t},\n\n    \tfromArray: function ( array ) {\n\n    \t\tthis._x = array[ 0 ];\n    \t\tthis._y = array[ 1 ];\n    \t\tthis._z = array[ 2 ];\n    \t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n    \t\tthis.onChangeCallback();\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoArray: function ( array, offset ) {\n\n    \t\tif ( array === undefined ) array = [];\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tarray[ offset ] = this._x;\n    \t\tarray[ offset + 1 ] = this._y;\n    \t\tarray[ offset + 2 ] = this._z;\n    \t\tarray[ offset + 3 ] = this._order;\n\n    \t\treturn array;\n\n    \t},\n\n    \ttoVector3: function ( optionalResult ) {\n\n    \t\tif ( optionalResult ) {\n\n    \t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n    \t\t} else {\n\n    \t\t\treturn new Vector3( this._x, this._y, this._z );\n\n    \t\t}\n\n    \t},\n\n    \tonChange: function ( callback ) {\n\n    \t\tthis.onChangeCallback = callback;\n\n    \t\treturn this;\n\n    \t},\n\n    \tonChangeCallback: function () {}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Layers() {\n\n    \tthis.mask = 1;\n\n    }\n\n    Layers.prototype = {\n\n    \tconstructor: Layers,\n\n    \tset: function ( channel ) {\n\n    \t\tthis.mask = 1 << channel;\n\n    \t},\n\n    \tenable: function ( channel ) {\n\n    \t\tthis.mask |= 1 << channel;\n\n    \t},\n\n    \ttoggle: function ( channel ) {\n\n    \t\tthis.mask ^= 1 << channel;\n\n    \t},\n\n    \tdisable: function ( channel ) {\n\n    \t\tthis.mask &= ~ ( 1 << channel );\n\n    \t},\n\n    \ttest: function ( layers ) {\n\n    \t\treturn ( this.mask & layers.mask ) !== 0;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author WestLangley / http://github.com/WestLangley\n     * @author elephantatwork / www.elephantatwork.ch\n     */\n\n    function Object3D() {\n\n    \tObject.defineProperty( this, 'id', { value: Object3DIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Object3D';\n\n    \tthis.parent = null;\n    \tthis.children = [];\n\n    \tthis.up = Object3D.DefaultUp.clone();\n\n    \tvar position = new Vector3();\n    \tvar rotation = new Euler();\n    \tvar quaternion = new Quaternion();\n    \tvar scale = new Vector3( 1, 1, 1 );\n\n    \tfunction onRotationChange() {\n\n    \t\tquaternion.setFromEuler( rotation, false );\n\n    \t}\n\n    \tfunction onQuaternionChange() {\n\n    \t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n    \t}\n\n    \trotation.onChange( onRotationChange );\n    \tquaternion.onChange( onQuaternionChange );\n\n    \tObject.defineProperties( this, {\n    \t\tposition: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: position\n    \t\t},\n    \t\trotation: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: rotation\n    \t\t},\n    \t\tquaternion: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: quaternion\n    \t\t},\n    \t\tscale: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: scale\n    \t\t},\n    \t\tmodelViewMatrix: {\n    \t\t\tvalue: new Matrix4()\n    \t\t},\n    \t\tnormalMatrix: {\n    \t\t\tvalue: new Matrix3()\n    \t\t}\n    \t} );\n\n    \tthis.matrix = new Matrix4();\n    \tthis.matrixWorld = new Matrix4();\n\n    \tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n    \tthis.matrixWorldNeedsUpdate = false;\n\n    \tthis.layers = new Layers();\n    \tthis.visible = true;\n\n    \tthis.castShadow = false;\n    \tthis.receiveShadow = false;\n\n    \tthis.frustumCulled = true;\n    \tthis.renderOrder = 0;\n\n    \tthis.userData = {};\n\n    \tthis.onBeforeRender = null;\n\n    }\n\n    Object3D.DefaultUp = new Vector3( 0, 1, 0 );\n    Object3D.DefaultMatrixAutoUpdate = true;\n\n    Object.assign( Object3D.prototype, EventDispatcher.prototype, {\n\n    \tisObject3D: true,\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n    \t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n    \t},\n\n    \tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n    \t\t// assumes axis is normalized\n\n    \t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n    \t},\n\n    \tsetRotationFromEuler: function ( euler ) {\n\n    \t\tthis.quaternion.setFromEuler( euler, true );\n\n    \t},\n\n    \tsetRotationFromMatrix: function ( m ) {\n\n    \t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    \t\tthis.quaternion.setFromRotationMatrix( m );\n\n    \t},\n\n    \tsetRotationFromQuaternion: function ( q ) {\n\n    \t\t// assumes q is normalized\n\n    \t\tthis.quaternion.copy( q );\n\n    \t},\n\n    \trotateOnAxis: function () {\n\n    \t\t// rotate object on axis in object space\n    \t\t// axis is assumed to be normalized\n\n    \t\tvar q1 = new Quaternion();\n\n    \t\treturn function rotateOnAxis( axis, angle ) {\n\n    \t\t\tq1.setFromAxisAngle( axis, angle );\n\n    \t\t\tthis.quaternion.multiply( q1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateX: function () {\n\n    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\treturn this.rotateOnAxis( v1, angle );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateOnAxis: function () {\n\n    \t\t// translate object by distance along axis in object space\n    \t\t// axis is assumed to be normalized\n\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function translateOnAxis( axis, distance ) {\n\n    \t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n    \t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateX: function () {\n\n    \t\tvar v1 = new Vector3( 1, 0, 0 );\n\n    \t\treturn function translateX( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateY: function () {\n\n    \t\tvar v1 = new Vector3( 0, 1, 0 );\n\n    \t\treturn function translateY( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslateZ: function () {\n\n    \t\tvar v1 = new Vector3( 0, 0, 1 );\n\n    \t\treturn function translateZ( distance ) {\n\n    \t\t\treturn this.translateOnAxis( v1, distance );\n\n    \t\t};\n\n    \t}(),\n\n    \tlocalToWorld: function ( vector ) {\n\n    \t\treturn vector.applyMatrix4( this.matrixWorld );\n\n    \t},\n\n    \tworldToLocal: function () {\n\n    \t\tvar m1 = new Matrix4();\n\n    \t\treturn function worldToLocal( vector ) {\n\n    \t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\t// This routine does not support objects with rotated and/or translated parent(s)\n\n    \t\tvar m1 = new Matrix4();\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tm1.lookAt( vector, this.position, this.up );\n\n    \t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n    \t\t};\n\n    \t}(),\n\n    \tadd: function ( object ) {\n\n    \t\tif ( arguments.length > 1 ) {\n\n    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n    \t\t\t\tthis.add( arguments[ i ] );\n\n    \t\t\t}\n\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tif ( object === this ) {\n\n    \t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tif ( (object && object.isObject3D) ) {\n\n    \t\t\tif ( object.parent !== null ) {\n\n    \t\t\t\tobject.parent.remove( object );\n\n    \t\t\t}\n\n    \t\t\tobject.parent = this;\n    \t\t\tobject.dispatchEvent( { type: 'added' } );\n\n    \t\t\tthis.children.push( object );\n\n    \t\t} else {\n\n    \t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tremove: function ( object ) {\n\n    \t\tif ( arguments.length > 1 ) {\n\n    \t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n    \t\t\t\tthis.remove( arguments[ i ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar index = this.children.indexOf( object );\n\n    \t\tif ( index !== - 1 ) {\n\n    \t\t\tobject.parent = null;\n\n    \t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n    \t\t\tthis.children.splice( index, 1 );\n\n    \t\t}\n\n    \t},\n\n    \tgetObjectById: function ( id ) {\n\n    \t\treturn this.getObjectByProperty( 'id', id );\n\n    \t},\n\n    \tgetObjectByName: function ( name ) {\n\n    \t\treturn this.getObjectByProperty( 'name', name );\n\n    \t},\n\n    \tgetObjectByProperty: function ( name, value ) {\n\n    \t\tif ( this[ name ] === value ) return this;\n\n    \t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n    \t\t\tvar child = this.children[ i ];\n    \t\t\tvar object = child.getObjectByProperty( name, value );\n\n    \t\t\tif ( object !== undefined ) {\n\n    \t\t\t\treturn object;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn undefined;\n\n    \t},\n\n    \tgetWorldPosition: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tthis.updateMatrixWorld( true );\n\n    \t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n    \t},\n\n    \tgetWorldQuaternion: function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar scale = new Vector3();\n\n    \t\treturn function getWorldQuaternion( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Quaternion();\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldRotation: function () {\n\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldRotation( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Euler();\n\n    \t\t\tthis.getWorldQuaternion( quaternion );\n\n    \t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldScale: function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldScale( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tgetWorldDirection: function () {\n\n    \t\tvar quaternion = new Quaternion();\n\n    \t\treturn function getWorldDirection( optionalTarget ) {\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n\n    \t\t\tthis.getWorldQuaternion( quaternion );\n\n    \t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n    \t\t};\n\n    \t}(),\n\n    \traycast: function () {},\n\n    \ttraverse: function ( callback ) {\n\n    \t\tcallback( this );\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].traverse( callback );\n\n    \t\t}\n\n    \t},\n\n    \ttraverseVisible: function ( callback ) {\n\n    \t\tif ( this.visible === false ) return;\n\n    \t\tcallback( this );\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].traverseVisible( callback );\n\n    \t\t}\n\n    \t},\n\n    \ttraverseAncestors: function ( callback ) {\n\n    \t\tvar parent = this.parent;\n\n    \t\tif ( parent !== null ) {\n\n    \t\t\tcallback( parent );\n\n    \t\t\tparent.traverseAncestors( callback );\n\n    \t\t}\n\n    \t},\n\n    \tupdateMatrix: function () {\n\n    \t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n    \t\tthis.matrixWorldNeedsUpdate = true;\n\n    \t},\n\n    \tupdateMatrixWorld: function ( force ) {\n\n    \t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\n    \t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\n    \t\t\tif ( this.parent === null ) {\n\n    \t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n    \t\t\t}\n\n    \t\t\tthis.matrixWorldNeedsUpdate = false;\n\n    \t\t\tforce = true;\n\n    \t\t}\n\n    \t\t// update children\n\n    \t\tvar children = this.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tchildren[ i ].updateMatrixWorld( force );\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\t// meta is '' when called from JSON.stringify\n    \t\tvar isRootObject = ( meta === undefined || meta === '' );\n\n    \t\tvar output = {};\n\n    \t\t// meta is a hash used to collect geometries, materials.\n    \t\t// not providing it implies that this is the root object\n    \t\t// being serialized.\n    \t\tif ( isRootObject ) {\n\n    \t\t\t// initialize meta obj\n    \t\t\tmeta = {\n    \t\t\t\tgeometries: {},\n    \t\t\t\tmaterials: {},\n    \t\t\t\ttextures: {},\n    \t\t\t\timages: {}\n    \t\t\t};\n\n    \t\t\toutput.metadata = {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Object',\n    \t\t\t\tgenerator: 'Object3D.toJSON'\n    \t\t\t};\n\n    \t\t}\n\n    \t\t// standard Object3D serialization\n\n    \t\tvar object = {};\n\n    \t\tobject.uuid = this.uuid;\n    \t\tobject.type = this.type;\n\n    \t\tif ( this.name !== '' ) object.name = this.name;\n    \t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n    \t\tif ( this.castShadow === true ) object.castShadow = true;\n    \t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n    \t\tif ( this.visible === false ) object.visible = false;\n\n    \t\tobject.matrix = this.matrix.toArray();\n\n    \t\t//\n\n    \t\tif ( this.geometry !== undefined ) {\n\n    \t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\n    \t\t\t}\n\n    \t\t\tobject.geometry = this.geometry.uuid;\n\n    \t\t}\n\n    \t\tif ( this.material !== undefined ) {\n\n    \t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\n    \t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\n    \t\t\t}\n\n    \t\t\tobject.material = this.material.uuid;\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( this.children.length > 0 ) {\n\n    \t\t\tobject.children = [];\n\n    \t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n    \t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( isRootObject ) {\n\n    \t\t\tvar geometries = extractFromCache( meta.geometries );\n    \t\t\tvar materials = extractFromCache( meta.materials );\n    \t\t\tvar textures = extractFromCache( meta.textures );\n    \t\t\tvar images = extractFromCache( meta.images );\n\n    \t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n    \t\t\tif ( materials.length > 0 ) output.materials = materials;\n    \t\t\tif ( textures.length > 0 ) output.textures = textures;\n    \t\t\tif ( images.length > 0 ) output.images = images;\n\n    \t\t}\n\n    \t\toutput.object = object;\n\n    \t\treturn output;\n\n    \t\t// extract data from the cache hash\n    \t\t// remove metadata on each item\n    \t\t// and return as array\n    \t\tfunction extractFromCache( cache ) {\n\n    \t\t\tvar values = [];\n    \t\t\tfor ( var key in cache ) {\n\n    \t\t\t\tvar data = cache[ key ];\n    \t\t\t\tdelete data.metadata;\n    \t\t\t\tvalues.push( data );\n\n    \t\t\t}\n    \t\t\treturn values;\n\n    \t\t}\n\n    \t},\n\n    \tclone: function ( recursive ) {\n\n    \t\treturn new this.constructor().copy( this, recursive );\n\n    \t},\n\n    \tcopy: function ( source, recursive ) {\n\n    \t\tif ( recursive === undefined ) recursive = true;\n\n    \t\tthis.name = source.name;\n\n    \t\tthis.up.copy( source.up );\n\n    \t\tthis.position.copy( source.position );\n    \t\tthis.quaternion.copy( source.quaternion );\n    \t\tthis.scale.copy( source.scale );\n\n    \t\tthis.matrix.copy( source.matrix );\n    \t\tthis.matrixWorld.copy( source.matrixWorld );\n\n    \t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n    \t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n    \t\tthis.visible = source.visible;\n\n    \t\tthis.castShadow = source.castShadow;\n    \t\tthis.receiveShadow = source.receiveShadow;\n\n    \t\tthis.frustumCulled = source.frustumCulled;\n    \t\tthis.renderOrder = source.renderOrder;\n\n    \t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n    \t\tif ( recursive === true ) {\n\n    \t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n    \t\t\t\tvar child = source.children[ i ];\n    \t\t\t\tthis.add( child.clone() );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    var count$2 = 0;\n    function Object3DIdCount() { return count$2++; };\n\n    /**\n     * @author bhouston / http://clara.io\n     */\n\n    function Line3( start, end ) {\n\n    \tthis.start = ( start !== undefined ) ? start : new Vector3();\n    \tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n    }\n\n    Line3.prototype = {\n\n    \tconstructor: Line3,\n\n    \tset: function ( start, end ) {\n\n    \t\tthis.start.copy( start );\n    \t\tthis.end.copy( end );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( line ) {\n\n    \t\tthis.start.copy( line.start );\n    \t\tthis.end.copy( line.end );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetCenter: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n    \t},\n\n    \tdelta: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.subVectors( this.end, this.start );\n\n    \t},\n\n    \tdistanceSq: function () {\n\n    \t\treturn this.start.distanceToSquared( this.end );\n\n    \t},\n\n    \tdistance: function () {\n\n    \t\treturn this.start.distanceTo( this.end );\n\n    \t},\n\n    \tat: function ( t, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n    \t},\n\n    \tclosestPointToPointParameter: function () {\n\n    \t\tvar startP = new Vector3();\n    \t\tvar startEnd = new Vector3();\n\n    \t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n    \t\t\tstartP.subVectors( point, this.start );\n    \t\t\tstartEnd.subVectors( this.end, this.start );\n\n    \t\t\tvar startEnd2 = startEnd.dot( startEnd );\n    \t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n    \t\t\tvar t = startEnd_startP / startEnd2;\n\n    \t\t\tif ( clampToLine ) {\n\n    \t\t\t\tt = exports.Math.clamp( t, 0, 1 );\n\n    \t\t\t}\n\n    \t\t\treturn t;\n\n    \t\t};\n\n    \t}(),\n\n    \tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n    \t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n    \t},\n\n    \tapplyMatrix4: function ( matrix ) {\n\n    \t\tthis.start.applyMatrix4( matrix );\n    \t\tthis.end.applyMatrix4( matrix );\n\n    \t\treturn this;\n\n    \t},\n\n    \tequals: function ( line ) {\n\n    \t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n    \t}\n\n    };\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Triangle( a, b, c ) {\n\n    \tthis.a = ( a !== undefined ) ? a : new Vector3();\n    \tthis.b = ( b !== undefined ) ? b : new Vector3();\n    \tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n    }\n\n    Triangle.normal = function () {\n\n    \tvar v0 = new Vector3();\n\n    \treturn function normal( a, b, c, optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tresult.subVectors( c, b );\n    \t\tv0.subVectors( a, b );\n    \t\tresult.cross( v0 );\n\n    \t\tvar resultLengthSq = result.lengthSq();\n    \t\tif ( resultLengthSq > 0 ) {\n\n    \t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n    \t\t}\n\n    \t\treturn result.set( 0, 0, 0 );\n\n    \t};\n\n    }();\n\n    // static/instance method to calculate barycentric coordinates\n    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n    Triangle.barycoordFromPoint = function () {\n\n    \tvar v0 = new Vector3();\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n\n    \treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n    \t\tv0.subVectors( c, a );\n    \t\tv1.subVectors( b, a );\n    \t\tv2.subVectors( point, a );\n\n    \t\tvar dot00 = v0.dot( v0 );\n    \t\tvar dot01 = v0.dot( v1 );\n    \t\tvar dot02 = v0.dot( v2 );\n    \t\tvar dot11 = v1.dot( v1 );\n    \t\tvar dot12 = v1.dot( v2 );\n\n    \t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\t// collinear or singular triangle\n    \t\tif ( denom === 0 ) {\n\n    \t\t\t// arbitrary location outside of triangle?\n    \t\t\t// not sure if this is the best idea, maybe should be returning undefined\n    \t\t\treturn result.set( - 2, - 1, - 1 );\n\n    \t\t}\n\n    \t\tvar invDenom = 1 / denom;\n    \t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n    \t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n    \t\t// barycentric coordinates must always sum to 1\n    \t\treturn result.set( 1 - u - v, v, u );\n\n    \t};\n\n    }();\n\n    Triangle.containsPoint = function () {\n\n    \tvar v1 = new Vector3();\n\n    \treturn function containsPoint( point, a, b, c ) {\n\n    \t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n    \t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n    \t};\n\n    }();\n\n    Triangle.prototype = {\n\n    \tconstructor: Triangle,\n\n    \tset: function ( a, b, c ) {\n\n    \t\tthis.a.copy( a );\n    \t\tthis.b.copy( b );\n    \t\tthis.c.copy( c );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n    \t\tthis.a.copy( points[ i0 ] );\n    \t\tthis.b.copy( points[ i1 ] );\n    \t\tthis.c.copy( points[ i2 ] );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( triangle ) {\n\n    \t\tthis.a.copy( triangle.a );\n    \t\tthis.b.copy( triangle.b );\n    \t\tthis.c.copy( triangle.c );\n\n    \t\treturn this;\n\n    \t},\n\n    \tarea: function () {\n\n    \t\tvar v0 = new Vector3();\n    \t\tvar v1 = new Vector3();\n\n    \t\treturn function area() {\n\n    \t\t\tv0.subVectors( this.c, this.b );\n    \t\t\tv1.subVectors( this.a, this.b );\n\n    \t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n    \t\t};\n\n    \t}(),\n\n    \tmidpoint: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n    \t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n    \t},\n\n    \tnormal: function ( optionalTarget ) {\n\n    \t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n    \t},\n\n    \tplane: function ( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Plane();\n\n    \t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n    \t},\n\n    \tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n    \t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n    \t},\n\n    \tcontainsPoint: function ( point ) {\n\n    \t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n    \t},\n\n    \tclosestPointToPoint: function () {\n\n    \t\tvar plane, edgeList, projectedPoint, closestPoint;\n\n    \t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n    \t\t\tif ( plane === undefined ) {\n\n    \t\t\t\tplane = new Plane();\n    \t\t\t\tedgeList = [ new Line3(), new Line3(), new Line3() ];\n    \t\t\t\tprojectedPoint = new Vector3();\n    \t\t\t\tclosestPoint = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tvar result = optionalTarget || new Vector3();\n    \t\t\tvar minDistance = Infinity;\n\n    \t\t\t// project the point onto the plane of the triangle\n\n    \t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n    \t\t\tplane.projectPoint( point, projectedPoint );\n\n    \t\t\t// check if the projection lies within the triangle\n\n    \t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\n    \t\t\t\t// if so, this is the closest point\n\n    \t\t\t\tresult.copy( projectedPoint );\n\n    \t\t\t} else {\n\n    \t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n    \t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n    \t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n    \t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n    \t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\n    \t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n    \t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n    \t\t\t\t\tif( distance < minDistance ) {\n\n    \t\t\t\t\t\tminDistance = distance;\n\n    \t\t\t\t\t\tresult.copy( closestPoint );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn result;\n\n    \t\t};\n\n    \t}(),\n\n    \tequals: function ( triangle ) {\n\n    \t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Face3( a, b, c, normal, color, materialIndex ) {\n\n    \tthis.a = a;\n    \tthis.b = b;\n    \tthis.c = c;\n\n    \tthis.normal = (normal && normal.isVector3) ? normal : new Vector3();\n    \tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n    \tthis.color = (color && color.isColor) ? color : new Color();\n    \tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n    \tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n    }\n\n    Face3.prototype = {\n\n    \tconstructor: Face3,\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.a = source.a;\n    \t\tthis.b = source.b;\n    \t\tthis.c = source.c;\n\n    \t\tthis.normal.copy( source.normal );\n    \t\tthis.color.copy( source.color );\n\n    \t\tthis.materialIndex = source.materialIndex;\n\n    \t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  shading: THREE.SmoothShading,\n     *  depthTest: <bool>,\n     *  depthWrite: <bool>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>\n     * }\n     */\n\n    function MeshBasicMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshBasicMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // emissive\n\n    \tthis.map = null;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshBasicMaterial.prototype = Object.create( Material.prototype );\n    MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n    MeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n    MeshBasicMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferAttribute( array, itemSize, normalized ) {\n\n    \tif ( Array.isArray( array ) ) {\n\n    \t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n    \t}\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.array = array;\n    \tthis.itemSize = itemSize;\n    \tthis.count = array !== undefined ? array.length / itemSize : 0;\n    \tthis.normalized = normalized === true;\n\n    \tthis.dynamic = false;\n    \tthis.updateRange = { offset: 0, count: - 1 };\n\n    \tthis.version = 0;\n\n    }\n\n    BufferAttribute.prototype = {\n\n    \tconstructor: BufferAttribute,\n\n    \tisBufferAttribute: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tsetDynamic: function ( value ) {\n\n    \t\tthis.dynamic = value;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.array = new source.array.constructor( source.array );\n    \t\tthis.itemSize = source.itemSize;\n    \t\tthis.count = source.count;\n    \t\tthis.normalized = source.normalized;\n\n    \t\tthis.dynamic = source.dynamic;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyAt: function ( index1, attribute, index2 ) {\n\n    \t\tindex1 *= this.itemSize;\n    \t\tindex2 *= attribute.itemSize;\n\n    \t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyArray: function ( array ) {\n\n    \t\tthis.array.set( array );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyColorsArray: function ( colors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n    \t\t\tvar color = colors[ i ];\n\n    \t\t\tif ( color === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n    \t\t\t\tcolor = new Color();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = color.r;\n    \t\t\tarray[ offset ++ ] = color.g;\n    \t\t\tarray[ offset ++ ] = color.b;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyIndicesArray: function ( indices ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n    \t\t\tvar index = indices[ i ];\n\n    \t\t\tarray[ offset ++ ] = index.a;\n    \t\t\tarray[ offset ++ ] = index.b;\n    \t\t\tarray[ offset ++ ] = index.c;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector2sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector2();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector3sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector3();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n    \t\t\tarray[ offset ++ ] = vector.z;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyVector4sArray: function ( vectors ) {\n\n    \t\tvar array = this.array, offset = 0;\n\n    \t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tvar vector = vectors[ i ];\n\n    \t\t\tif ( vector === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n    \t\t\t\tvector = new Vector4();\n\n    \t\t\t}\n\n    \t\t\tarray[ offset ++ ] = vector.x;\n    \t\t\tarray[ offset ++ ] = vector.y;\n    \t\t\tarray[ offset ++ ] = vector.z;\n    \t\t\tarray[ offset ++ ] = vector.w;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tset: function ( value, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.array.set( value, offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetX: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize ];\n\n    \t},\n\n    \tsetX: function ( index, x ) {\n\n    \t\tthis.array[ index * this.itemSize ] = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetY: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 1 ];\n\n    \t},\n\n    \tsetY: function ( index, y ) {\n\n    \t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetZ: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 2 ];\n\n    \t},\n\n    \tsetZ: function ( index, z ) {\n\n    \t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetW: function ( index ) {\n\n    \t\treturn this.array[ index * this.itemSize + 3 ];\n\n    \t},\n\n    \tsetW: function ( index, w ) {\n\n    \t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXY: function ( index, x, y ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZ: function ( index, x, y, z ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n    \t\tthis.array[ index + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZW: function ( index, x, y, z, w ) {\n\n    \t\tindex *= this.itemSize;\n\n    \t\tthis.array[ index + 0 ] = x;\n    \t\tthis.array[ index + 1 ] = y;\n    \t\tthis.array[ index + 2 ] = z;\n    \t\tthis.array[ index + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t}\n\n    };\n\n    //\n\n    function Int8Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int8Array( array ), itemSize );\n\n    }\n\n    function Uint8Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint8Array( array ), itemSize );\n\n    }\n\n    function Uint8ClampedAttribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\n    }\n\n    function Int16Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int16Array( array ), itemSize );\n\n    }\n\n    function Uint16Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint16Array( array ), itemSize );\n\n    }\n\n    function Int32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Int32Array( array ), itemSize );\n\n    }\n\n    function Uint32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Uint32Array( array ), itemSize );\n\n    }\n\n    function Float32Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Float32Array( array ), itemSize );\n\n    }\n\n    function Float64Attribute( array, itemSize ) {\n\n    \treturn new BufferAttribute( new Float64Array( array ), itemSize );\n\n    }\n\n    // Deprecated\n\n    function DynamicBufferAttribute( array, itemSize ) {\n\n    \tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n    \treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author kile / http://kile.stravaganza.org/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author bhouston / http://clara.io\n     */\n\n    function Geometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'Geometry';\n\n    \tthis.vertices = [];\n    \tthis.colors = [];\n    \tthis.faces = [];\n    \tthis.faceVertexUvs = [ [] ];\n\n    \tthis.morphTargets = [];\n    \tthis.morphNormals = [];\n\n    \tthis.skinWeights = [];\n    \tthis.skinIndices = [];\n\n    \tthis.lineDistances = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \t// update flags\n\n    \tthis.elementsNeedUpdate = false;\n    \tthis.verticesNeedUpdate = false;\n    \tthis.uvsNeedUpdate = false;\n    \tthis.normalsNeedUpdate = false;\n    \tthis.colorsNeedUpdate = false;\n    \tthis.lineDistancesNeedUpdate = false;\n    \tthis.groupsNeedUpdate = false;\n\n    }\n\n    Object.assign( Geometry.prototype, EventDispatcher.prototype, {\n\n    \tisGeometry: true,\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n    \t\t\tvar vertex = this.vertices[ i ];\n    \t\t\tvertex.applyMatrix4( matrix );\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n    \t\t\tvar face = this.faces[ i ];\n    \t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.boundingBox !== null ) {\n\n    \t\t\tthis.computeBoundingBox();\n\n    \t\t}\n\n    \t\tif ( this.boundingSphere !== null ) {\n\n    \t\t\tthis.computeBoundingSphere();\n\n    \t\t}\n\n    \t\tthis.verticesNeedUpdate = true;\n    \t\tthis.normalsNeedUpdate = true;\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateX: function () {\n\n    \t\t// rotate geometry around world x-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationX( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\t// rotate geometry around world y-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationY( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\t// rotate geometry around world z-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationZ( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function () {\n\n    \t\t// translate geometry\n\n    \t\tvar m1;\n\n    \t\treturn function translate( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeTranslation( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tscale: function () {\n\n    \t\t// scale geometry\n\n    \t\tvar m1;\n\n    \t\treturn function scale( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeScale( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\tvar obj;\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\n    \t\t\tobj.lookAt( vector );\n\n    \t\t\tobj.updateMatrix();\n\n    \t\t\tthis.applyMatrix( obj.matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tfromBufferGeometry: function ( geometry ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n    \t\tvar attributes = geometry.attributes;\n\n    \t\tvar positions = attributes.position.array;\n    \t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n    \t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n    \t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n    \t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n    \t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n    \t\tvar tempNormals = [];\n    \t\tvar tempUVs = [];\n    \t\tvar tempUVs2 = [];\n\n    \t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n    \t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n    \t\t\tif ( normals !== undefined ) {\n\n    \t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( colors !== undefined ) {\n\n    \t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs !== undefined ) {\n\n    \t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs2 !== undefined ) {\n\n    \t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction addFace( a, b, c, materialIndex ) {\n\n    \t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n    \t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n    \t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n    \t\t\tscope.faces.push( face );\n\n    \t\t\tif ( uvs !== undefined ) {\n\n    \t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n    \t\t\t}\n\n    \t\t\tif ( uvs2 !== undefined ) {\n\n    \t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( indices !== undefined ) {\n\n    \t\t\tvar groups = geometry.groups;\n\n    \t\t\tif ( groups.length > 0 ) {\n\n    \t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n    \t\t\t\t\tvar group = groups[ i ];\n\n    \t\t\t\t\tvar start = group.start;\n    \t\t\t\t\tvar count = group.count;\n\n    \t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n    \t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n    \t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n    \t\t\t\taddFace( i, i + 1, i + 2 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.computeFaceNormals();\n\n    \t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t}\n\n    \t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcenter: function () {\n\n    \t\tthis.computeBoundingBox();\n\n    \t\tvar offset = this.boundingBox.getCenter().negate();\n\n    \t\tthis.translate( offset.x, offset.y, offset.z );\n\n    \t\treturn offset;\n\n    \t},\n\n    \tnormalize: function () {\n\n    \t\tthis.computeBoundingSphere();\n\n    \t\tvar center = this.boundingSphere.center;\n    \t\tvar radius = this.boundingSphere.radius;\n\n    \t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n    \t\tvar matrix = new Matrix4();\n    \t\tmatrix.set(\n    \t\t\ts, 0, 0, - s * center.x,\n    \t\t\t0, s, 0, - s * center.y,\n    \t\t\t0, 0, s, - s * center.z,\n    \t\t\t0, 0, 0, 1\n    \t\t);\n\n    \t\tthis.applyMatrix( matrix );\n\n    \t\treturn this;\n\n    \t},\n\n    \tcomputeFaceNormals: function () {\n\n    \t\tvar cb = new Vector3(), ab = new Vector3();\n\n    \t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tvar face = this.faces[ f ];\n\n    \t\t\tvar vA = this.vertices[ face.a ];\n    \t\t\tvar vB = this.vertices[ face.b ];\n    \t\t\tvar vC = this.vertices[ face.c ];\n\n    \t\t\tcb.subVectors( vC, vB );\n    \t\t\tab.subVectors( vA, vB );\n    \t\t\tcb.cross( ab );\n\n    \t\t\tcb.normalize();\n\n    \t\t\tface.normal.copy( cb );\n\n    \t\t}\n\n    \t},\n\n    \tcomputeVertexNormals: function ( areaWeighted ) {\n\n    \t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n    \t\tvar v, vl, f, fl, face, vertices;\n\n    \t\tvertices = new Array( this.vertices.length );\n\n    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n    \t\t\tvertices[ v ] = new Vector3();\n\n    \t\t}\n\n    \t\tif ( areaWeighted ) {\n\n    \t\t\t// vertex normals weighted by triangle areas\n    \t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n    \t\t\tvar vA, vB, vC;\n    \t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tvA = this.vertices[ face.a ];\n    \t\t\t\tvB = this.vertices[ face.b ];\n    \t\t\t\tvC = this.vertices[ face.c ];\n\n    \t\t\t\tcb.subVectors( vC, vB );\n    \t\t\t\tab.subVectors( vA, vB );\n    \t\t\t\tcb.cross( ab );\n\n    \t\t\t\tvertices[ face.a ].add( cb );\n    \t\t\t\tvertices[ face.b ].add( cb );\n    \t\t\t\tvertices[ face.c ].add( cb );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tvertices[ face.a ].add( face.normal );\n    \t\t\t\tvertices[ face.b ].add( face.normal );\n    \t\t\t\tvertices[ face.c ].add( face.normal );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n    \t\t\tvertices[ v ].normalize();\n\n    \t\t}\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\tif ( vertexNormals.length === 3 ) {\n\n    \t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n    \t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n    \t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n    \t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n    \t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.faces.length > 0 ) {\n\n    \t\t\tthis.normalsNeedUpdate = true;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeMorphNormals: function () {\n\n    \t\tvar i, il, f, fl, face;\n\n    \t\t// save original normals\n    \t\t// - create temp variables on first access\n    \t\t//   otherwise just copy (for faster repeated calls)\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tif ( ! face.__originalFaceNormal ) {\n\n    \t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n    \t\t\t} else {\n\n    \t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n    \t\t\t}\n\n    \t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n    \t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n    \t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n    \t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// use temp geometry to compute face and vertex normals for each morph\n\n    \t\tvar tmpGeo = new Geometry();\n    \t\ttmpGeo.faces = this.faces;\n\n    \t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n    \t\t\t// create on first access\n\n    \t\t\tif ( ! this.morphNormals[ i ] ) {\n\n    \t\t\t\tthis.morphNormals[ i ] = {};\n    \t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n    \t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n    \t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n    \t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n    \t\t\t\tvar faceNormal, vertexNormals;\n\n    \t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\t\tfaceNormal = new Vector3();\n    \t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n    \t\t\t\t\tdstNormalsFace.push( faceNormal );\n    \t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar morphNormals = this.morphNormals[ i ];\n\n    \t\t\t// set vertices to morph target\n\n    \t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n    \t\t\t// compute morph normals\n\n    \t\t\ttmpGeo.computeFaceNormals();\n    \t\t\ttmpGeo.computeVertexNormals();\n\n    \t\t\t// store morph normals\n\n    \t\t\tvar faceNormal, vertexNormals;\n\n    \t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\t\tface = this.faces[ f ];\n\n    \t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n    \t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n    \t\t\t\tfaceNormal.copy( face.normal );\n\n    \t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n    \t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n    \t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// restore original normals\n\n    \t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n    \t\t\tface = this.faces[ f ];\n\n    \t\t\tface.normal = face.__originalFaceNormal;\n    \t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeTangents: function () {\n\n    \t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n    \t},\n\n    \tcomputeLineDistances: function () {\n\n    \t\tvar d = 0;\n    \t\tvar vertices = this.vertices;\n\n    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\tif ( i > 0 ) {\n\n    \t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n    \t\t\t}\n\n    \t\t\tthis.lineDistances[ i ] = d;\n\n    \t\t}\n\n    \t},\n\n    \tcomputeBoundingBox: function () {\n\n    \t\tif ( this.boundingBox === null ) {\n\n    \t\t\tthis.boundingBox = new Box3();\n\n    \t\t}\n\n    \t\tthis.boundingBox.setFromPoints( this.vertices );\n\n    \t},\n\n    \tcomputeBoundingSphere: function () {\n\n    \t\tif ( this.boundingSphere === null ) {\n\n    \t\t\tthis.boundingSphere = new Sphere();\n\n    \t\t}\n\n    \t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n    \t},\n\n    \tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n    \t\tif ( (geometry && geometry.isGeometry) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar normalMatrix,\n    \t\tvertexOffset = this.vertices.length,\n    \t\tvertices1 = this.vertices,\n    \t\tvertices2 = geometry.vertices,\n    \t\tfaces1 = this.faces,\n    \t\tfaces2 = geometry.faces,\n    \t\tuvs1 = this.faceVertexUvs[ 0 ],\n    \t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n    \t\tcolors1 = this.colors,\n    \t\tcolors2 = geometry.colors;\n\n    \t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n    \t\tif ( matrix !== undefined ) {\n\n    \t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\t}\n\n    \t\t// vertices\n\n    \t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n    \t\t\tvar vertex = vertices2[ i ];\n\n    \t\t\tvar vertexCopy = vertex.clone();\n\n    \t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n    \t\t\tvertices1.push( vertexCopy );\n\n    \t\t}\n\n    \t\t// colors\n\n    \t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n    \t\t\tcolors1.push( colors2[ i ].clone() );\n\n    \t\t}\n\n    \t\t// faces\n\n    \t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n    \t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n    \t\t\tfaceVertexNormals = face.vertexNormals,\n    \t\t\tfaceVertexColors = face.vertexColors;\n\n    \t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n    \t\t\tfaceCopy.normal.copy( face.normal );\n\n    \t\t\tif ( normalMatrix !== undefined ) {\n\n    \t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n    \t\t\t\tif ( normalMatrix !== undefined ) {\n\n    \t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n    \t\t\t\t}\n\n    \t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n    \t\t\t}\n\n    \t\t\tfaceCopy.color.copy( face.color );\n\n    \t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n    \t\t\t\tcolor = faceVertexColors[ j ];\n    \t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n    \t\t\t}\n\n    \t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n    \t\t\tfaces1.push( faceCopy );\n\n    \t\t}\n\n    \t\t// uvs\n\n    \t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n    \t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n    \t\t\tif ( uv === undefined ) {\n\n    \t\t\t\tcontinue;\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n    \t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n    \t\t\t}\n\n    \t\t\tuvs1.push( uvCopy );\n\n    \t\t}\n\n    \t},\n\n    \tmergeMesh: function ( mesh ) {\n\n    \t\tif ( (mesh && mesh.isMesh) === false ) {\n\n    \t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n    \t\tthis.merge( mesh.geometry, mesh.matrix );\n\n    \t},\n\n    \t/*\n    \t * Checks for duplicate vertices with hashmap.\n    \t * Duplicated vertices are removed\n    \t * and faces' vertices are updated.\n    \t */\n\n    \tmergeVertices: function () {\n\n    \t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n    \t\tvar unique = [], changes = [];\n\n    \t\tvar v, key;\n    \t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n    \t\tvar precision = Math.pow( 10, precisionPoints );\n    \t\tvar i, il, face;\n    \t\tvar indices, j, jl;\n\n    \t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n    \t\t\tv = this.vertices[ i ];\n    \t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n    \t\t\tif ( verticesMap[ key ] === undefined ) {\n\n    \t\t\t\tverticesMap[ key ] = i;\n    \t\t\t\tunique.push( this.vertices[ i ] );\n    \t\t\t\tchanges[ i ] = unique.length - 1;\n\n    \t\t\t} else {\n\n    \t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n    \t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\t// if faces are completely degenerate after merging vertices, we\n    \t\t// have to remove them from the geometry.\n    \t\tvar faceIndicesToRemove = [];\n\n    \t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n    \t\t\tface = this.faces[ i ];\n\n    \t\t\tface.a = changes[ face.a ];\n    \t\t\tface.b = changes[ face.b ];\n    \t\t\tface.c = changes[ face.c ];\n\n    \t\t\tindices = [ face.a, face.b, face.c ];\n\n    \t\t\tvar dupIndex = - 1;\n\n    \t\t\t// if any duplicate vertices are found in a Face3\n    \t\t\t// we have to remove the face as nothing can be saved\n    \t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n    \t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n    \t\t\t\t\tdupIndex = n;\n    \t\t\t\t\tfaceIndicesToRemove.push( i );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n    \t\t\tvar idx = faceIndicesToRemove[ i ];\n\n    \t\t\tthis.faces.splice( idx, 1 );\n\n    \t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n    \t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Use unique set of vertices\n\n    \t\tvar diff = this.vertices.length - unique.length;\n    \t\tthis.vertices = unique;\n    \t\treturn diff;\n\n    \t},\n\n    \tsortFacesByMaterialIndex: function () {\n\n    \t\tvar faces = this.faces;\n    \t\tvar length = faces.length;\n\n    \t\t// tag faces\n\n    \t\tfor ( var i = 0; i < length; i ++ ) {\n\n    \t\t\tfaces[ i ]._id = i;\n\n    \t\t}\n\n    \t\t// sort faces\n\n    \t\tfunction materialIndexSort( a, b ) {\n\n    \t\t\treturn a.materialIndex - b.materialIndex;\n\n    \t\t}\n\n    \t\tfaces.sort( materialIndexSort );\n\n    \t\t// sort uvs\n\n    \t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n    \t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n    \t\tvar newUvs1, newUvs2;\n\n    \t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n    \t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n    \t\tfor ( var i = 0; i < length; i ++ ) {\n\n    \t\t\tvar id = faces[ i ]._id;\n\n    \t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n    \t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n    \t\t}\n\n    \t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n    \t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'Geometry',\n    \t\t\t\tgenerator: 'Geometry.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard Geometry serialization\n\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( this.parameters !== undefined ) {\n\n    \t\t\tvar parameters = this.parameters;\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n    \t\t\t}\n\n    \t\t\treturn data;\n\n    \t\t}\n\n    \t\tvar vertices = [];\n\n    \t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n    \t\t\tvar vertex = this.vertices[ i ];\n    \t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n    \t\t}\n\n    \t\tvar faces = [];\n    \t\tvar normals = [];\n    \t\tvar normalsHash = {};\n    \t\tvar colors = [];\n    \t\tvar colorsHash = {};\n    \t\tvar uvs = [];\n    \t\tvar uvsHash = {};\n\n    \t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n    \t\t\tvar face = this.faces[ i ];\n\n    \t\t\tvar hasMaterial = true;\n    \t\t\tvar hasFaceUv = false; // deprecated\n    \t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n    \t\t\tvar hasFaceNormal = face.normal.length() > 0;\n    \t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n    \t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n    \t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n    \t\t\tvar faceType = 0;\n\n    \t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n    \t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n    \t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n    \t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n    \t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n    \t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n    \t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n    \t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n    \t\t\tfaces.push( faceType );\n    \t\t\tfaces.push( face.a, face.b, face.c );\n    \t\t\tfaces.push( face.materialIndex );\n\n    \t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n    \t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n    \t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\tvar vertexColors = face.vertexColors;\n\n    \t\t\t\tfaces.push(\n    \t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n    \t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n    \t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n    \t\t\t\t);\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction setBit( value, position, enabled ) {\n\n    \t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n    \t\t}\n\n    \t\tfunction getNormalIndex( normal ) {\n\n    \t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n    \t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn normalsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tnormalsHash[ hash ] = normals.length / 3;\n    \t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n    \t\t\treturn normalsHash[ hash ];\n\n    \t\t}\n\n    \t\tfunction getColorIndex( color ) {\n\n    \t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n    \t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn colorsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tcolorsHash[ hash ] = colors.length;\n    \t\t\tcolors.push( color.getHex() );\n\n    \t\t\treturn colorsHash[ hash ];\n\n    \t\t}\n\n    \t\tfunction getUvIndex( uv ) {\n\n    \t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n    \t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n    \t\t\t\treturn uvsHash[ hash ];\n\n    \t\t\t}\n\n    \t\t\tuvsHash[ hash ] = uvs.length / 2;\n    \t\t\tuvs.push( uv.x, uv.y );\n\n    \t\t\treturn uvsHash[ hash ];\n\n    \t\t}\n\n    \t\tdata.data = {};\n\n    \t\tdata.data.vertices = vertices;\n    \t\tdata.data.normals = normals;\n    \t\tif ( colors.length > 0 ) data.data.colors = colors;\n    \t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n    \t\tdata.data.faces = faces;\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\t/*\n    \t\t// Handle primitives\n\n    \t\tvar parameters = this.parameters;\n\n    \t\tif ( parameters !== undefined ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tvalues.push( parameters[ key ] );\n\n    \t\t\t}\n\n    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n    \t\t\tthis.constructor.apply( geometry, values );\n    \t\t\treturn geometry;\n\n    \t\t}\n\n    \t\treturn new this.constructor().copy( this );\n    \t\t*/\n\n    \t\treturn new Geometry().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.vertices = [];\n    \t\tthis.faces = [];\n    \t\tthis.faceVertexUvs = [ [] ];\n    \t\tthis.colors = [];\n\n    \t\tvar vertices = source.vertices;\n\n    \t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n    \t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n    \t\t}\n\n    \t\tvar colors = source.colors;\n\n    \t\tfor ( var i = 0, il = colors.length; i < il; i ++ ) {\n\n    \t\t\tthis.colors.push( colors[ i ].clone() );\n\n    \t\t}\n\n    \t\tvar faces = source.faces;\n\n    \t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\n    \t\t\tthis.faces.push( faces[ i ].clone() );\n\n    \t\t}\n\n    \t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n    \t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n    \t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n    \t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n    \t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n    \t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n    \t\t\t\t\tvar uv = uvs[ k ];\n\n    \t\t\t\t\tuvsCopy.push( uv.clone() );\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    var count$3 = 0;\n    function GeometryIdCount() { return count$3++; };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function DirectGeometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'DirectGeometry';\n\n    \tthis.indices = [];\n    \tthis.vertices = [];\n    \tthis.normals = [];\n    \tthis.colors = [];\n    \tthis.uvs = [];\n    \tthis.uvs2 = [];\n\n    \tthis.groups = [];\n\n    \tthis.morphTargets = {};\n\n    \tthis.skinWeights = [];\n    \tthis.skinIndices = [];\n\n    \t// this.lineDistances = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \t// update flags\n\n    \tthis.verticesNeedUpdate = false;\n    \tthis.normalsNeedUpdate = false;\n    \tthis.colorsNeedUpdate = false;\n    \tthis.uvsNeedUpdate = false;\n    \tthis.groupsNeedUpdate = false;\n\n    }\n\n    Object.assign( DirectGeometry.prototype, EventDispatcher.prototype, {\n\n    \tcomputeBoundingBox: Geometry.prototype.computeBoundingBox,\n    \tcomputeBoundingSphere: Geometry.prototype.computeBoundingSphere,\n\n    \tcomputeFaceNormals: function () {\n\n    \t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\n    \t},\n\n    \tcomputeVertexNormals: function () {\n\n    \t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\n    \t},\n\n    \tcomputeGroups: function ( geometry ) {\n\n    \t\tvar group;\n    \t\tvar groups = [];\n    \t\tvar materialIndex;\n\n    \t\tvar faces = geometry.faces;\n\n    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\t// materials\n\n    \t\t\tif ( face.materialIndex !== materialIndex ) {\n\n    \t\t\t\tmaterialIndex = face.materialIndex;\n\n    \t\t\t\tif ( group !== undefined ) {\n\n    \t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n    \t\t\t\t\tgroups.push( group );\n\n    \t\t\t\t}\n\n    \t\t\t\tgroup = {\n    \t\t\t\t\tstart: i * 3,\n    \t\t\t\t\tmaterialIndex: materialIndex\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( group !== undefined ) {\n\n    \t\t\tgroup.count = ( i * 3 ) - group.start;\n    \t\t\tgroups.push( group );\n\n    \t\t}\n\n    \t\tthis.groups = groups;\n\n    \t},\n\n    \tfromGeometry: function ( geometry ) {\n\n    \t\tvar faces = geometry.faces;\n    \t\tvar vertices = geometry.vertices;\n    \t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n    \t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n    \t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n    \t\t// morphs\n\n    \t\tvar morphTargets = geometry.morphTargets;\n    \t\tvar morphTargetsLength = morphTargets.length;\n\n    \t\tvar morphTargetsPosition;\n\n    \t\tif ( morphTargetsLength > 0 ) {\n\n    \t\t\tmorphTargetsPosition = [];\n\n    \t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n    \t\t\t\tmorphTargetsPosition[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n    \t\t}\n\n    \t\tvar morphNormals = geometry.morphNormals;\n    \t\tvar morphNormalsLength = morphNormals.length;\n\n    \t\tvar morphTargetsNormal;\n\n    \t\tif ( morphNormalsLength > 0 ) {\n\n    \t\t\tmorphTargetsNormal = [];\n\n    \t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n    \t\t\t\tmorphTargetsNormal[ i ] = [];\n\n    \t\t\t}\n\n    \t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n    \t\t}\n\n    \t\t// skins\n\n    \t\tvar skinIndices = geometry.skinIndices;\n    \t\tvar skinWeights = geometry.skinWeights;\n\n    \t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n    \t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n    \t\t//\n\n    \t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n    \t\t\tvar vertexNormals = face.vertexNormals;\n\n    \t\t\tif ( vertexNormals.length === 3 ) {\n\n    \t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvar normal = face.normal;\n\n    \t\t\t\tthis.normals.push( normal, normal, normal );\n\n    \t\t\t}\n\n    \t\t\tvar vertexColors = face.vertexColors;\n\n    \t\t\tif ( vertexColors.length === 3 ) {\n\n    \t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tvar color = face.color;\n\n    \t\t\t\tthis.colors.push( color, color, color );\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexUv === true ) {\n\n    \t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n    \t\t\t\tif ( vertexUvs !== undefined ) {\n\n    \t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n    \t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( hasFaceVertexUv2 === true ) {\n\n    \t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n    \t\t\t\tif ( vertexUvs !== undefined ) {\n\n    \t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n    \t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\t// morphs\n\n    \t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n    \t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n    \t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n    \t\t\t}\n\n    \t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n    \t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n    \t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n    \t\t\t}\n\n    \t\t\t// skins\n\n    \t\t\tif ( hasSkinIndices ) {\n\n    \t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n    \t\t\t}\n\n    \t\t\tif ( hasSkinWeights ) {\n\n    \t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.computeGroups( geometry );\n\n    \t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    \t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    \t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    \t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    \t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferGeometry() {\n\n    \tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.name = '';\n    \tthis.type = 'BufferGeometry';\n\n    \tthis.index = null;\n    \tthis.attributes = {};\n\n    \tthis.morphAttributes = {};\n\n    \tthis.groups = [];\n\n    \tthis.boundingBox = null;\n    \tthis.boundingSphere = null;\n\n    \tthis.drawRange = { start: 0, count: Infinity };\n\n    }\n\n    Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {\n\n    \tisBufferGeometry: true,\n\n    \tgetIndex: function () {\n\n    \t\treturn this.index;\n\n    \t},\n\n    \tsetIndex: function ( index ) {\n\n    \t\tthis.index = index;\n\n    \t},\n\n    \taddAttribute: function ( name, attribute ) {\n\n    \t\tif ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n    \t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( name === 'index' ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n    \t\t\tthis.setIndex( attribute );\n\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.attributes[ name ] = attribute;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetAttribute: function ( name ) {\n\n    \t\treturn this.attributes[ name ];\n\n    \t},\n\n    \tremoveAttribute: function ( name ) {\n\n    \t\tdelete this.attributes[ name ];\n\n    \t\treturn this;\n\n    \t},\n\n    \taddGroup: function ( start, count, materialIndex ) {\n\n    \t\tthis.groups.push( {\n\n    \t\t\tstart: start,\n    \t\t\tcount: count,\n    \t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n    \t\t} );\n\n    \t},\n\n    \tclearGroups: function () {\n\n    \t\tthis.groups = [];\n\n    \t},\n\n    \tsetDrawRange: function ( start, count ) {\n\n    \t\tthis.drawRange.start = start;\n    \t\tthis.drawRange.count = count;\n\n    \t},\n\n    \tapplyMatrix: function ( matrix ) {\n\n    \t\tvar position = this.attributes.position;\n\n    \t\tif ( position !== undefined ) {\n\n    \t\t\tmatrix.applyToVector3Array( position.array );\n    \t\t\tposition.needsUpdate = true;\n\n    \t\t}\n\n    \t\tvar normal = this.attributes.normal;\n\n    \t\tif ( normal !== undefined ) {\n\n    \t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n    \t\t\tnormalMatrix.applyToVector3Array( normal.array );\n    \t\t\tnormal.needsUpdate = true;\n\n    \t\t}\n\n    \t\tif ( this.boundingBox !== null ) {\n\n    \t\t\tthis.computeBoundingBox();\n\n    \t\t}\n\n    \t\tif ( this.boundingSphere !== null ) {\n\n    \t\t\tthis.computeBoundingSphere();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \trotateX: function () {\n\n    \t\t// rotate geometry around world x-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateX( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationX( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateY: function () {\n\n    \t\t// rotate geometry around world y-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateY( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationY( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \trotateZ: function () {\n\n    \t\t// rotate geometry around world z-axis\n\n    \t\tvar m1;\n\n    \t\treturn function rotateZ( angle ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeRotationZ( angle );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \ttranslate: function () {\n\n    \t\t// translate geometry\n\n    \t\tvar m1;\n\n    \t\treturn function translate( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeTranslation( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tscale: function () {\n\n    \t\t// scale geometry\n\n    \t\tvar m1;\n\n    \t\treturn function scale( x, y, z ) {\n\n    \t\t\tif ( m1 === undefined ) m1 = new Matrix4();\n\n    \t\t\tm1.makeScale( x, y, z );\n\n    \t\t\tthis.applyMatrix( m1 );\n\n    \t\t\treturn this;\n\n    \t\t};\n\n    \t}(),\n\n    \tlookAt: function () {\n\n    \t\tvar obj;\n\n    \t\treturn function lookAt( vector ) {\n\n    \t\t\tif ( obj === undefined ) obj = new Object3D();\n\n    \t\t\tobj.lookAt( vector );\n\n    \t\t\tobj.updateMatrix();\n\n    \t\t\tthis.applyMatrix( obj.matrix );\n\n    \t\t};\n\n    \t}(),\n\n    \tcenter: function () {\n\n    \t\tthis.computeBoundingBox();\n\n    \t\tvar offset = this.boundingBox.getCenter().negate();\n\n    \t\tthis.translate( offset.x, offset.y, offset.z );\n\n    \t\treturn offset;\n\n    \t},\n\n    \tsetFromObject: function ( object ) {\n\n    \t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( (object && object.isPoints) || (object && object.isLine) ) {\n\n    \t\t\tvar positions = new Float32Attribute( geometry.vertices.length * 3, 3 );\n    \t\t\tvar colors = new Float32Attribute( geometry.colors.length * 3, 3 );\n\n    \t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n    \t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n    \t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n    \t\t\t\tvar lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );\n\n    \t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n    \t\t\t}\n\n    \t\t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t\t}\n\n    \t\t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t\t}\n\n    \t\t} else if ( (object && object.isMesh) ) {\n\n    \t\t\tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tthis.fromGeometry( geometry );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdateFromObject: function ( object ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( (object && object.isMesh) ) {\n\n    \t\t\tvar direct = geometry.__directGeometry;\n\n    \t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n    \t\t\t\tdirect = undefined;\n    \t\t\t\tgeometry.elementsNeedUpdate = false;\n\n    \t\t\t}\n\n    \t\t\tif ( direct === undefined ) {\n\n    \t\t\t\treturn this.fromGeometry( geometry );\n\n    \t\t\t}\n\n    \t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    \t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    \t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    \t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    \t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n    \t\t\tgeometry.verticesNeedUpdate = false;\n    \t\t\tgeometry.normalsNeedUpdate = false;\n    \t\t\tgeometry.colorsNeedUpdate = false;\n    \t\t\tgeometry.uvsNeedUpdate = false;\n    \t\t\tgeometry.groupsNeedUpdate = false;\n\n    \t\t\tgeometry = direct;\n\n    \t\t}\n\n    \t\tvar attribute;\n\n    \t\tif ( geometry.verticesNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.position;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.verticesNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.normalsNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.normal;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector3sArray( geometry.normals );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.normalsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.colorsNeedUpdate === true ) {\n\n    \t\t\tattribute = this.attributes.color;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyColorsArray( geometry.colors );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.colorsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.uvsNeedUpdate ) {\n\n    \t\t\tattribute = this.attributes.uv;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.uvsNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n    \t\t\tattribute = this.attributes.lineDistance;\n\n    \t\t\tif ( attribute !== undefined ) {\n\n    \t\t\t\tattribute.copyArray( geometry.lineDistances );\n    \t\t\t\tattribute.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n    \t\t}\n\n    \t\tif ( geometry.groupsNeedUpdate ) {\n\n    \t\t\tgeometry.computeGroups( object.geometry );\n    \t\t\tthis.groups = geometry.groups;\n\n    \t\t\tgeometry.groupsNeedUpdate = false;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tfromGeometry: function ( geometry ) {\n\n    \t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n    \t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n    \t},\n\n    \tfromDirectGeometry: function ( geometry ) {\n\n    \t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n    \t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n    \t\tif ( geometry.normals.length > 0 ) {\n\n    \t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n    \t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n    \t\t}\n\n    \t\tif ( geometry.colors.length > 0 ) {\n\n    \t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n    \t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n    \t\t}\n\n    \t\tif ( geometry.uvs.length > 0 ) {\n\n    \t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n    \t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n    \t\t}\n\n    \t\tif ( geometry.uvs2.length > 0 ) {\n\n    \t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n    \t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n    \t\t}\n\n    \t\tif ( geometry.indices.length > 0 ) {\n\n    \t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n    \t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n    \t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n    \t\t}\n\n    \t\t// groups\n\n    \t\tthis.groups = geometry.groups;\n\n    \t\t// morphs\n\n    \t\tfor ( var name in geometry.morphTargets ) {\n\n    \t\t\tvar array = [];\n    \t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n    \t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n    \t\t\t\tvar morphTarget = morphTargets[ i ];\n\n    \t\t\t\tvar attribute = new Float32Attribute( morphTarget.length * 3, 3 );\n\n    \t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n    \t\t\t}\n\n    \t\t\tthis.morphAttributes[ name ] = array;\n\n    \t\t}\n\n    \t\t// skinning\n\n    \t\tif ( geometry.skinIndices.length > 0 ) {\n\n    \t\t\tvar skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );\n    \t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n    \t\t}\n\n    \t\tif ( geometry.skinWeights.length > 0 ) {\n\n    \t\t\tvar skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );\n    \t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( geometry.boundingSphere !== null ) {\n\n    \t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n    \t\t}\n\n    \t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcomputeBoundingBox: function () {\n\n    \t\tif ( this.boundingBox === null ) {\n\n    \t\t\tthis.boundingBox = new Box3();\n\n    \t\t}\n\n    \t\tvar positions = this.attributes.position.array;\n\n    \t\tif ( positions !== undefined ) {\n\n    \t\t\tthis.boundingBox.setFromArray( positions );\n\n    \t\t} else {\n\n    \t\t\tthis.boundingBox.makeEmpty();\n\n    \t\t}\n\n    \t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n    \t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n    \t\t}\n\n    \t},\n\n    \tcomputeBoundingSphere: function () {\n\n    \t\tvar box = new Box3();\n    \t\tvar vector = new Vector3();\n\n    \t\treturn function computeBoundingSphere() {\n\n    \t\t\tif ( this.boundingSphere === null ) {\n\n    \t\t\t\tthis.boundingSphere = new Sphere();\n\n    \t\t\t}\n\n    \t\t\tvar positions = this.attributes.position;\n\n    \t\t\tif ( positions ) {\n\n    \t\t\t\tvar array = positions.array;\n    \t\t\t\tvar center = this.boundingSphere.center;\n\n    \t\t\t\tbox.setFromArray( array );\n    \t\t\t\tbox.getCenter( center );\n\n    \t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n    \t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n    \t\t\t\tvar maxRadiusSq = 0;\n\n    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\n    \t\t\t\t\tvector.fromArray( array, i );\n    \t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n    \t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}(),\n\n    \tcomputeFaceNormals: function () {\n\n    \t\t// backwards compatibility\n\n    \t},\n\n    \tcomputeVertexNormals: function () {\n\n    \t\tvar index = this.index;\n    \t\tvar attributes = this.attributes;\n    \t\tvar groups = this.groups;\n\n    \t\tif ( attributes.position ) {\n\n    \t\t\tvar positions = attributes.position.array;\n\n    \t\t\tif ( attributes.normal === undefined ) {\n\n    \t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n    \t\t\t} else {\n\n    \t\t\t\t// reset existing normals to zero\n\n    \t\t\t\tvar array = attributes.normal.array;\n\n    \t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n    \t\t\t\t\tarray[ i ] = 0;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar normals = attributes.normal.array;\n\n    \t\t\tvar vA, vB, vC,\n\n    \t\t\tpA = new Vector3(),\n    \t\t\tpB = new Vector3(),\n    \t\t\tpC = new Vector3(),\n\n    \t\t\tcb = new Vector3(),\n    \t\t\tab = new Vector3();\n\n    \t\t\t// indexed elements\n\n    \t\t\tif ( index ) {\n\n    \t\t\t\tvar indices = index.array;\n\n    \t\t\t\tif ( groups.length === 0 ) {\n\n    \t\t\t\t\tthis.addGroup( 0, indices.length );\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n    \t\t\t\t\tvar group = groups[ j ];\n\n    \t\t\t\t\tvar start = group.start;\n    \t\t\t\t\tvar count = group.count;\n\n    \t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n    \t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n    \t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n    \t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n    \t\t\t\t\t\tpA.fromArray( positions, vA );\n    \t\t\t\t\t\tpB.fromArray( positions, vB );\n    \t\t\t\t\t\tpC.fromArray( positions, vC );\n\n    \t\t\t\t\t\tcb.subVectors( pC, pB );\n    \t\t\t\t\t\tab.subVectors( pA, pB );\n    \t\t\t\t\t\tcb.cross( ab );\n\n    \t\t\t\t\t\tnormals[ vA ] += cb.x;\n    \t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n    \t\t\t\t\t\tnormals[ vB ] += cb.x;\n    \t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n    \t\t\t\t\t\tnormals[ vC ] += cb.x;\n    \t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n    \t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n    \t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n    \t\t\t\t\tpA.fromArray( positions, i );\n    \t\t\t\t\tpB.fromArray( positions, i + 3 );\n    \t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n    \t\t\t\t\tcb.subVectors( pC, pB );\n    \t\t\t\t\tab.subVectors( pA, pB );\n    \t\t\t\t\tcb.cross( ab );\n\n    \t\t\t\t\tnormals[ i ] = cb.x;\n    \t\t\t\t\tnormals[ i + 1 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n    \t\t\t\t\tnormals[ i + 3 ] = cb.x;\n    \t\t\t\t\tnormals[ i + 4 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n    \t\t\t\t\tnormals[ i + 6 ] = cb.x;\n    \t\t\t\t\tnormals[ i + 7 ] = cb.y;\n    \t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.normalizeNormals();\n\n    \t\t\tattributes.normal.needsUpdate = true;\n\n    \t\t}\n\n    \t},\n\n    \tmerge: function ( geometry, offset ) {\n\n    \t\tif ( (geometry && geometry.isBufferGeometry) === false ) {\n\n    \t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n    \t\t\tvar attribute1 = attributes[ key ];\n    \t\t\tvar attributeArray1 = attribute1.array;\n\n    \t\t\tvar attribute2 = geometry.attributes[ key ];\n    \t\t\tvar attributeArray2 = attribute2.array;\n\n    \t\t\tvar attributeSize = attribute2.itemSize;\n\n    \t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n    \t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tnormalizeNormals: function () {\n\n    \t\tvar normals = this.attributes.normal.array;\n\n    \t\tvar x, y, z, n;\n\n    \t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\n    \t\t\tx = normals[ i ];\n    \t\t\ty = normals[ i + 1 ];\n    \t\t\tz = normals[ i + 2 ];\n\n    \t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n    \t\t\tnormals[ i ] *= n;\n    \t\t\tnormals[ i + 1 ] *= n;\n    \t\t\tnormals[ i + 2 ] *= n;\n\n    \t\t}\n\n    \t},\n\n    \ttoNonIndexed: function () {\n\n    \t\tif ( this.index === null ) {\n\n    \t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n    \t\t\treturn this;\n\n    \t\t}\n\n    \t\tvar geometry2 = new BufferGeometry();\n\n    \t\tvar indices = this.index.array;\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tvar attribute = attributes[ name ];\n\n    \t\t\tvar array = attribute.array;\n    \t\t\tvar itemSize = attribute.itemSize;\n\n    \t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n    \t\t\tvar index = 0, index2 = 0;\n\n    \t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n    \t\t\t\tindex = indices[ i ] * itemSize;\n\n    \t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n    \t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\n    \t\t}\n\n    \t\treturn geometry2;\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar data = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.4,\n    \t\t\t\ttype: 'BufferGeometry',\n    \t\t\t\tgenerator: 'BufferGeometry.toJSON'\n    \t\t\t}\n    \t\t};\n\n    \t\t// standard BufferGeometry serialization\n\n    \t\tdata.uuid = this.uuid;\n    \t\tdata.type = this.type;\n    \t\tif ( this.name !== '' ) data.name = this.name;\n\n    \t\tif ( this.parameters !== undefined ) {\n\n    \t\t\tvar parameters = this.parameters;\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n    \t\t\t}\n\n    \t\t\treturn data;\n\n    \t\t}\n\n    \t\tdata.data = { attributes: {} };\n\n    \t\tvar index = this.index;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tvar array = Array.prototype.slice.call( index.array );\n\n    \t\t\tdata.data.index = {\n    \t\t\t\ttype: index.array.constructor.name,\n    \t\t\t\tarray: array\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar attributes = this.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tvar attribute = attributes[ key ];\n\n    \t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n    \t\t\tdata.data.attributes[ key ] = {\n    \t\t\t\titemSize: attribute.itemSize,\n    \t\t\t\ttype: attribute.array.constructor.name,\n    \t\t\t\tarray: array,\n    \t\t\t\tnormalized: attribute.normalized\n    \t\t\t};\n\n    \t\t}\n\n    \t\tvar groups = this.groups;\n\n    \t\tif ( groups.length > 0 ) {\n\n    \t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n    \t\t}\n\n    \t\tvar boundingSphere = this.boundingSphere;\n\n    \t\tif ( boundingSphere !== null ) {\n\n    \t\t\tdata.data.boundingSphere = {\n    \t\t\t\tcenter: boundingSphere.center.toArray(),\n    \t\t\t\tradius: boundingSphere.radius\n    \t\t\t};\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\t/*\n    \t\t// Handle primitives\n\n    \t\tvar parameters = this.parameters;\n\n    \t\tif ( parameters !== undefined ) {\n\n    \t\t\tvar values = [];\n\n    \t\t\tfor ( var key in parameters ) {\n\n    \t\t\t\tvalues.push( parameters[ key ] );\n\n    \t\t\t}\n\n    \t\t\tvar geometry = Object.create( this.constructor.prototype );\n    \t\t\tthis.constructor.apply( geometry, values );\n    \t\t\treturn geometry;\n\n    \t\t}\n\n    \t\treturn new this.constructor().copy( this );\n    \t\t*/\n\n    \t\treturn new BufferGeometry().copy( this );\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tvar index = source.index;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tthis.setIndex( index.clone() );\n\n    \t\t}\n\n    \t\tvar attributes = source.attributes;\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tvar attribute = attributes[ name ];\n    \t\t\tthis.addAttribute( name, attribute.clone() );\n\n    \t\t}\n\n    \t\tvar groups = source.groups;\n\n    \t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\t\tvar group = groups[ i ];\n    \t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdispose: function () {\n\n    \t\tthis.dispatchEvent( { type: 'dispose' } );\n\n    \t}\n\n    } );\n\n    BufferGeometry.MaxIndex = 65535;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author jonobr1 / http://jonobr1.com/\n     */\n\n    function Mesh( geometry, material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Mesh';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n    \tthis.drawMode = TrianglesDrawMode;\n\n    \tthis.updateMorphTargets();\n\n    }\n\n    Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Mesh,\n\n    \tisMesh: true,\n\n    \tsetDrawMode: function ( value ) {\n\n    \t\tthis.drawMode = value;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.drawMode = source.drawMode;\n\n    \t\treturn this;\n\n    \t},\n\n    \tupdateMorphTargets: function () {\n\n    \t\tvar morphTargets = this.geometry.morphTargets;\n\n    \t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n    \t\t\tthis.morphTargetInfluences = [];\n    \t\t\tthis.morphTargetDictionary = {};\n\n    \t\t\tfor ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\n    \t\t\t\tthis.morphTargetInfluences.push( 0 );\n    \t\t\t\tthis.morphTargetDictionary[ morphTargets[ m ].name ] = m;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\tvar vA = new Vector3();\n    \t\tvar vB = new Vector3();\n    \t\tvar vC = new Vector3();\n\n    \t\tvar tempA = new Vector3();\n    \t\tvar tempB = new Vector3();\n    \t\tvar tempC = new Vector3();\n\n    \t\tvar uvA = new Vector2();\n    \t\tvar uvB = new Vector2();\n    \t\tvar uvC = new Vector2();\n\n    \t\tvar barycoord = new Vector3();\n\n    \t\tvar intersectionPoint = new Vector3();\n    \t\tvar intersectionPointWorld = new Vector3();\n\n    \t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n    \t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n    \t\t\tuv1.multiplyScalar( barycoord.x );\n    \t\t\tuv2.multiplyScalar( barycoord.y );\n    \t\t\tuv3.multiplyScalar( barycoord.z );\n\n    \t\t\tuv1.add( uv2 ).add( uv3 );\n\n    \t\t\treturn uv1.clone();\n\n    \t\t}\n\n    \t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\n    \t\t\tvar intersect;\n    \t\t\tvar material = object.material;\n\n    \t\t\tif ( material.side === BackSide ) {\n\n    \t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n    \t\t\t} else {\n\n    \t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n    \t\t\t}\n\n    \t\t\tif ( intersect === null ) return null;\n\n    \t\t\tintersectionPointWorld.copy( point );\n    \t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n    \t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n    \t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n    \t\t\treturn {\n    \t\t\t\tdistance: distance,\n    \t\t\t\tpoint: intersectionPointWorld.clone(),\n    \t\t\t\tobject: object\n    \t\t\t};\n\n    \t\t}\n\n    \t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\n    \t\t\tvA.fromArray( positions, a * 3 );\n    \t\t\tvB.fromArray( positions, b * 3 );\n    \t\t\tvC.fromArray( positions, c * 3 );\n\n    \t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n    \t\t\tif ( intersection ) {\n\n    \t\t\t\tif ( uvs ) {\n\n    \t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n    \t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n    \t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\n    \t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\n    \t\t\t\t}\n\n    \t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n    \t\t\t\tintersection.faceIndex = a;\n\n    \t\t\t}\n\n    \t\t\treturn intersection;\n\n    \t\t}\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar material = this.material;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n\n    \t\t\tif ( material === undefined ) return;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\t// Check boundingBox before continuing\n\n    \t\t\tif ( geometry.boundingBox !== null ) {\n\n    \t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n    \t\t\t}\n\n    \t\t\tvar uvs, intersection;\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar a, b, c;\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( attributes.uv !== undefined ) {\n\n    \t\t\t\t\tuvs = attributes.uv.array;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n    \t\t\t\t\t\ta = indices[ i ];\n    \t\t\t\t\t\tb = indices[ i + 1 ];\n    \t\t\t\t\t\tc = indices[ i + 2 ];\n\n    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n    \t\t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n    \t\t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\n    \t\t\t\t\t\ta = i / 3;\n    \t\t\t\t\t\tb = a + 1;\n    \t\t\t\t\t\tc = a + 2;\n\n    \t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n    \t\t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n    \t\t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tvar fvA, fvB, fvC;\n    \t\t\t\tvar isFaceMaterial = (material && material.isMultiMaterial);\n    \t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\n    \t\t\t\tvar vertices = geometry.vertices;\n    \t\t\t\tvar faces = geometry.faces;\n    \t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n    \t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n    \t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n    \t\t\t\t\tvar face = faces[ f ];\n    \t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\n    \t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n    \t\t\t\t\tfvA = vertices[ face.a ];\n    \t\t\t\t\tfvB = vertices[ face.b ];\n    \t\t\t\t\tfvC = vertices[ face.c ];\n\n    \t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n    \t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n    \t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n    \t\t\t\t\t\tvA.set( 0, 0, 0 );\n    \t\t\t\t\t\tvB.set( 0, 0, 0 );\n    \t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n    \t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n    \t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n    \t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n    \t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n    \t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n    \t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n    \t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tvA.add( fvA );\n    \t\t\t\t\t\tvB.add( fvB );\n    \t\t\t\t\t\tvC.add( fvC );\n\n    \t\t\t\t\t\tfvA = vA;\n    \t\t\t\t\t\tfvB = vB;\n    \t\t\t\t\t\tfvC = vC;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n    \t\t\t\t\tif ( intersection ) {\n\n    \t\t\t\t\t\tif ( uvs ) {\n\n    \t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n    \t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n    \t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n    \t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n    \t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tintersection.face = face;\n    \t\t\t\t\t\tintersection.faceIndex = f;\n    \t\t\t\t\t\tintersects.push( intersection );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'BoxBufferGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\tdepth: depth,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tdepthSegments: depthSegments\n    \t};\n\n    \tvar scope = this;\n\n    \t// segments\n    \twidthSegments = Math.floor( widthSegments ) || 1;\n    \theightSegments = Math.floor( heightSegments ) || 1;\n    \tdepthSegments = Math.floor( depthSegments ) || 1;\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n    \tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\n    \t// buffers\n    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n    \tvar vertices = new Float32Array( vertexCount * 3 );\n    \tvar normals = new Float32Array( vertexCount * 3 );\n    \tvar uvs = new Float32Array( vertexCount * 2 );\n\n    \t// offset variables\n    \tvar vertexBufferOffset = 0;\n    \tvar uvBufferOffset = 0;\n    \tvar indexBufferOffset = 0;\n    \tvar numberOfVertices = 0;\n\n    \t// group variables\n    \tvar groupStart = 0;\n\n    \t// build each side of the box geometry\n    \tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n    \tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n    \tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n    \tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n    \tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n    \tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\n    \t// build geometry\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    \t// helper functions\n\n    \tfunction calculateVertexCount( w, h, d ) {\n\n    \t\tvar vertices = 0;\n\n    \t\t// calculate the amount of vertices for each side (plane)\n    \t\tvertices += (w + 1) * (h + 1) * 2; // xy\n    \t\tvertices += (w + 1) * (d + 1) * 2; // xz\n    \t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\n    \t\treturn vertices;\n\n    \t}\n\n    \tfunction calculateIndexCount( w, h, d ) {\n\n    \t\tvar index = 0;\n\n    \t\t// calculate the amount of squares for each side\n    \t\tindex += w * h * 2; // xy\n    \t\tindex += w * d * 2; // xz\n    \t\tindex += d * h * 2; // zy\n\n    \t\treturn index * 6; // two triangles per square => six vertices per square\n\n    \t}\n\n    \tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n    \t\tvar segmentWidth\t= width / gridX;\n    \t\tvar segmentHeight = height / gridY;\n\n    \t\tvar widthHalf = width / 2;\n    \t\tvar heightHalf = height / 2;\n    \t\tvar depthHalf = depth / 2;\n\n    \t\tvar gridX1 = gridX + 1;\n    \t\tvar gridY1 = gridY + 1;\n\n    \t\tvar vertexCounter = 0;\n    \t\tvar groupCount = 0;\n\n    \t\tvar vector = new Vector3();\n\n    \t\t// generate vertices, normals and uvs\n\n    \t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n    \t\t\tvar y = iy * segmentHeight - heightHalf;\n\n    \t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n    \t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n    \t\t\t\t// set values to correct vector component\n    \t\t\t\tvector[ u ] = x * udir;\n    \t\t\t\tvector[ v ] = y * vdir;\n    \t\t\t\tvector[ w ] = depthHalf;\n\n    \t\t\t\t// now apply vector to vertex buffer\n    \t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n    \t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n    \t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\n    \t\t\t\t// set values to correct vector component\n    \t\t\t\tvector[ u ] = 0;\n    \t\t\t\tvector[ v ] = 0;\n    \t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n    \t\t\t\t// now apply vector to normal buffer\n    \t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n    \t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n    \t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\n    \t\t\t\t// uvs\n    \t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n    \t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\n    \t\t\t\t// update offsets and counters\n    \t\t\t\tvertexBufferOffset += 3;\n    \t\t\t\tuvBufferOffset += 2;\n    \t\t\t\tvertexCounter += 1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// 1. you need three indices to draw a single face\n    \t\t// 2. a single segment consists of two faces\n    \t\t// 3. so we need to generate six (2*3) indices per segment\n\n    \t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n    \t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n    \t\t\t\t// indices\n    \t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n    \t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n    \t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n    \t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n    \t\t\t\t// face one\n    \t\t\t\tindices[ indexBufferOffset ] = a;\n    \t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n    \t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n    \t\t\t\t// face two\n    \t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n    \t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n    \t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n    \t\t\t\t// update offsets and counters\n    \t\t\t\tindexBufferOffset += 6;\n    \t\t\t\tgroupCount += 6;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t\t// update total number of vertices\n    \t\tnumberOfVertices += vertexCounter;\n\n    \t}\n\n    }\n\n    BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n     */\n\n    function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'PlaneBufferGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments\n    \t};\n\n    \tvar width_half = width / 2;\n    \tvar height_half = height / 2;\n\n    \tvar gridX = Math.floor( widthSegments ) || 1;\n    \tvar gridY = Math.floor( heightSegments ) || 1;\n\n    \tvar gridX1 = gridX + 1;\n    \tvar gridY1 = gridY + 1;\n\n    \tvar segment_width = width / gridX;\n    \tvar segment_height = height / gridY;\n\n    \tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n    \tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n    \tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\n    \tvar offset = 0;\n    \tvar offset2 = 0;\n\n    \tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n    \t\tvar y = iy * segment_height - height_half;\n\n    \t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n    \t\t\tvar x = ix * segment_width - width_half;\n\n    \t\t\tvertices[ offset ] = x;\n    \t\t\tvertices[ offset + 1 ] = - y;\n\n    \t\t\tnormals[ offset + 2 ] = 1;\n\n    \t\t\tuvs[ offset2 ] = ix / gridX;\n    \t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\n    \t\t\toffset += 3;\n    \t\t\toffset2 += 2;\n\n    \t\t}\n\n    \t}\n\n    \toffset = 0;\n\n    \tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\n    \tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\n    \t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\n    \t\t\tvar a = ix + gridX1 * iy;\n    \t\t\tvar b = ix + gridX1 * ( iy + 1 );\n    \t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n    \t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n    \t\t\tindices[ offset ] = a;\n    \t\t\tindices[ offset + 1 ] = b;\n    \t\t\tindices[ offset + 2 ] = d;\n\n    \t\t\tindices[ offset + 3 ] = b;\n    \t\t\tindices[ offset + 4 ] = c;\n    \t\t\tindices[ offset + 5 ] = d;\n\n    \t\t\toffset += 6;\n\n    \t\t}\n\n    \t}\n\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    }\n\n    PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author mikael emtinger / http://gomo.se/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function Camera() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Camera';\n\n    \tthis.matrixWorldInverse = new Matrix4();\n    \tthis.projectionMatrix = new Matrix4();\n\n    }\n\n    Camera.prototype = Object.create( Object3D.prototype );\n    Camera.prototype.constructor = Camera;\n\n    Camera.prototype.isCamera = true;\n\n    Camera.prototype.getWorldDirection = function () {\n\n    \tvar quaternion = new Quaternion();\n\n    \treturn function getWorldDirection( optionalTarget ) {\n\n    \t\tvar result = optionalTarget || new Vector3();\n\n    \t\tthis.getWorldQuaternion( quaternion );\n\n    \t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n    \t};\n\n    }();\n\n    Camera.prototype.lookAt = function () {\n\n    \t// This routine does not support cameras with rotated and/or translated parent(s)\n\n    \tvar m1 = new Matrix4();\n\n    \treturn function lookAt( vector ) {\n\n    \t\tm1.lookAt( this.position, vector, this.up );\n\n    \t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n    \t};\n\n    }();\n\n    Camera.prototype.clone = function () {\n\n    \treturn new this.constructor().copy( this );\n\n    };\n\n    Camera.prototype.copy = function ( source ) {\n\n    \tObject3D.prototype.copy.call( this, source );\n\n    \tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n    \tthis.projectionMatrix.copy( source.projectionMatrix );\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author greggman / http://games.greggman.com/\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author tschw\n     */\n\n    function PerspectiveCamera( fov, aspect, near, far ) {\n\n    \tCamera.call( this );\n\n    \tthis.type = 'PerspectiveCamera';\n\n    \tthis.fov = fov !== undefined ? fov : 50;\n    \tthis.zoom = 1;\n\n    \tthis.near = near !== undefined ? near : 0.1;\n    \tthis.far = far !== undefined ? far : 2000;\n    \tthis.focus = 10;\n\n    \tthis.aspect = aspect !== undefined ? aspect : 1;\n    \tthis.view = null;\n\n    \tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n    \tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n    \tthis.updateProjectionMatrix();\n\n    }\n\n    PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n    \tconstructor: PerspectiveCamera,\n\n    \tisPerspectiveCamera: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tCamera.prototype.copy.call( this, source );\n\n    \t\tthis.fov = source.fov;\n    \t\tthis.zoom = source.zoom;\n\n    \t\tthis.near = source.near;\n    \t\tthis.far = source.far;\n    \t\tthis.focus = source.focus;\n\n    \t\tthis.aspect = source.aspect;\n    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n    \t\tthis.filmGauge = source.filmGauge;\n    \t\tthis.filmOffset = source.filmOffset;\n\n    \t\treturn this;\n\n    \t},\n\n    \t/**\n    \t * Sets the FOV by focal length in respect to the current .filmGauge.\n    \t *\n    \t * The default film gauge is 35, so that the focal length can be specified for\n    \t * a 35mm (full frame) camera.\n    \t *\n    \t * Values for focal length and film gauge must have the same unit.\n    \t */\n    \tsetFocalLength: function ( focalLength ) {\n\n    \t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n    \t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n    \t\tthis.fov = exports.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \t/**\n    \t * Calculates the focal length from the current .fov and .filmGauge.\n    \t */\n    \tgetFocalLength: function () {\n\n    \t\tvar vExtentSlope = Math.tan( exports.Math.DEG2RAD * 0.5 * this.fov );\n\n    \t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n    \t},\n\n    \tgetEffectiveFOV: function () {\n\n    \t\treturn exports.Math.RAD2DEG * 2 * Math.atan(\n    \t\t\t\tMath.tan( exports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n    \t},\n\n    \tgetFilmWidth: function () {\n\n    \t\t// film not completely covered in portrait format (aspect < 1)\n    \t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n    \t},\n\n    \tgetFilmHeight: function () {\n\n    \t\t// film not completely covered in landscape format (aspect > 1)\n    \t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n    \t},\n\n    \t/**\n    \t * Sets an offset in a larger frustum. This is useful for multi-window or\n    \t * multi-monitor/multi-machine setups.\n    \t *\n    \t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n    \t * the monitors are in grid like this\n    \t *\n    \t *   +---+---+---+\n    \t *   | A | B | C |\n    \t *   +---+---+---+\n    \t *   | D | E | F |\n    \t *   +---+---+---+\n    \t *\n    \t * then for each monitor you would call it like this\n    \t *\n    \t *   var w = 1920;\n    \t *   var h = 1080;\n    \t *   var fullWidth = w * 3;\n    \t *   var fullHeight = h * 2;\n    \t *\n    \t *   --A--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n    \t *   --B--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n    \t *   --C--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n    \t *   --D--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n    \t *   --E--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n    \t *   --F--\n    \t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n    \t *\n    \t *   Note there is no reason monitors have to be the same size or in a grid.\n    \t */\n    \tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n    \t\tthis.aspect = fullWidth / fullHeight;\n\n    \t\tthis.view = {\n    \t\t\tfullWidth: fullWidth,\n    \t\t\tfullHeight: fullHeight,\n    \t\t\toffsetX: x,\n    \t\t\toffsetY: y,\n    \t\t\twidth: width,\n    \t\t\theight: height\n    \t\t};\n\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tclearViewOffset: function() {\n\n    \t\tthis.view = null;\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tupdateProjectionMatrix: function () {\n\n    \t\tvar near = this.near,\n    \t\t\ttop = near * Math.tan(\n    \t\t\t\t\texports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n    \t\t\theight = 2 * top,\n    \t\t\twidth = this.aspect * height,\n    \t\t\tleft = - 0.5 * width,\n    \t\t\tview = this.view;\n\n    \t\tif ( view !== null ) {\n\n    \t\t\tvar fullWidth = view.fullWidth,\n    \t\t\t\tfullHeight = view.fullHeight;\n\n    \t\t\tleft += view.offsetX * width / fullWidth;\n    \t\t\ttop -= view.offsetY * height / fullHeight;\n    \t\t\twidth *= view.width / fullWidth;\n    \t\t\theight *= view.height / fullHeight;\n\n    \t\t}\n\n    \t\tvar skew = this.filmOffset;\n    \t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n    \t\tthis.projectionMatrix.makeFrustum(\n    \t\t\t\tleft, left + width, top - height, top, near, this.far );\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.fov = this.fov;\n    \t\tdata.object.zoom = this.zoom;\n\n    \t\tdata.object.near = this.near;\n    \t\tdata.object.far = this.far;\n    \t\tdata.object.focus = this.focus;\n\n    \t\tdata.object.aspect = this.aspect;\n\n    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n    \t\tdata.object.filmGauge = this.filmGauge;\n    \t\tdata.object.filmOffset = this.filmOffset;\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author arose / http://github.com/arose\n     */\n\n    function OrthographicCamera( left, right, top, bottom, near, far ) {\n\n    \tCamera.call( this );\n\n    \tthis.type = 'OrthographicCamera';\n\n    \tthis.zoom = 1;\n    \tthis.view = null;\n\n    \tthis.left = left;\n    \tthis.right = right;\n    \tthis.top = top;\n    \tthis.bottom = bottom;\n\n    \tthis.near = ( near !== undefined ) ? near : 0.1;\n    \tthis.far = ( far !== undefined ) ? far : 2000;\n\n    \tthis.updateProjectionMatrix();\n\n    }\n\n    OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n    \tconstructor: OrthographicCamera,\n\n    \tisOrthographicCamera: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tCamera.prototype.copy.call( this, source );\n\n    \t\tthis.left = source.left;\n    \t\tthis.right = source.right;\n    \t\tthis.top = source.top;\n    \t\tthis.bottom = source.bottom;\n    \t\tthis.near = source.near;\n    \t\tthis.far = source.far;\n\n    \t\tthis.zoom = source.zoom;\n    \t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\n    \t\tthis.view = {\n    \t\t\tfullWidth: fullWidth,\n    \t\t\tfullHeight: fullHeight,\n    \t\t\toffsetX: x,\n    \t\t\toffsetY: y,\n    \t\t\twidth: width,\n    \t\t\theight: height\n    \t\t};\n\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tclearViewOffset: function() {\n\n    \t\tthis.view = null;\n    \t\tthis.updateProjectionMatrix();\n\n    \t},\n\n    \tupdateProjectionMatrix: function () {\n\n    \t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n    \t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n    \t\tvar cx = ( this.right + this.left ) / 2;\n    \t\tvar cy = ( this.top + this.bottom ) / 2;\n\n    \t\tvar left = cx - dx;\n    \t\tvar right = cx + dx;\n    \t\tvar top = cy + dy;\n    \t\tvar bottom = cy - dy;\n\n    \t\tif ( this.view !== null ) {\n\n    \t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n    \t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n    \t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n    \t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n    \t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n    \t\t\tright = left + scaleW * ( this.view.width / zoomW );\n    \t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n    \t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n    \t\t}\n\n    \t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.zoom = this.zoom;\n    \t\tdata.object.left = this.left;\n    \t\tdata.object.right = this.right;\n    \t\tdata.object.top = this.top;\n    \t\tdata.object.bottom = this.bottom;\n    \t\tdata.object.near = this.near;\n    \t\tdata.object.far = this.far;\n\n    \t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\n    \tvar mode;\n\n    \tfunction setMode( value ) {\n\n    \t\tmode = value;\n\n    \t}\n\n    \tvar type, size;\n\n    \tfunction setIndex( index ) {\n\n    \t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\n    \t\t\ttype = gl.UNSIGNED_INT;\n    \t\t\tsize = 4;\n\n    \t\t} else {\n\n    \t\t\ttype = gl.UNSIGNED_SHORT;\n    \t\t\tsize = 2;\n\n    \t\t}\n\n    \t}\n\n    \tfunction render( start, count ) {\n\n    \t\tgl.drawElements( mode, count, type, start * size );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n    \t}\n\n    \tfunction renderInstances( geometry, start, count ) {\n\n    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\tif ( extension === null ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n    \t}\n\n    \treturn {\n\n    \t\tsetMode: setMode,\n    \t\tsetIndex: setIndex,\n    \t\trender: render,\n    \t\trenderInstances: renderInstances\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLBufferRenderer( gl, extensions, infoRender ) {\n\n    \tvar mode;\n\n    \tfunction setMode( value ) {\n\n    \t\tmode = value;\n\n    \t}\n\n    \tfunction render( start, count ) {\n\n    \t\tgl.drawArrays( mode, start, count );\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n    \t}\n\n    \tfunction renderInstances( geometry ) {\n\n    \t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\tif ( extension === null ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar position = geometry.attributes.position;\n\n    \t\tvar count = 0;\n\n    \t\tif ( (position && position.isInterleavedBufferAttribute) ) {\n\n    \t\t\tcount = position.data.count;\n\n    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n    \t\t} else {\n\n    \t\t\tcount = position.count;\n\n    \t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n    \t\t}\n\n    \t\tinfoRender.calls ++;\n    \t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n    \t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n    \t}\n\n    \treturn {\n    \t\tsetMode: setMode,\n    \t\trender: render,\n    \t\trenderInstances: renderInstances\n    \t};\n\n    }\n\n    function WebGLLights() {\n\n    \tvar lights = {};\n\n    \treturn {\n\n    \t\tget: function ( light ) {\n\n    \t\t\tif ( lights[ light.id ] !== undefined ) {\n\n    \t\t\t\treturn lights[ light.id ];\n\n    \t\t\t}\n\n    \t\t\tvar uniforms;\n\n    \t\t\tswitch ( light.type ) {\n\n    \t\t\t\tcase 'DirectionalLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'SpotLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tposition: new Vector3(),\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n    \t\t\t\t\t\tdistance: 0,\n    \t\t\t\t\t\tconeCos: 0,\n    \t\t\t\t\t\tpenumbraCos: 0,\n    \t\t\t\t\t\tdecay: 0,\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tposition: new Vector3(),\n    \t\t\t\t\t\tcolor: new Color(),\n    \t\t\t\t\t\tdistance: 0,\n    \t\t\t\t\t\tdecay: 0,\n\n    \t\t\t\t\t\tshadow: false,\n    \t\t\t\t\t\tshadowBias: 0,\n    \t\t\t\t\t\tshadowRadius: 1,\n    \t\t\t\t\t\tshadowMapSize: new Vector2()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'HemisphereLight':\n    \t\t\t\t\tuniforms = {\n    \t\t\t\t\t\tdirection: new Vector3(),\n    \t\t\t\t\t\tskyColor: new Color(),\n    \t\t\t\t\t\tgroundColor: new Color()\n    \t\t\t\t\t};\n    \t\t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tlights[ light.id ] = uniforms;\n\n    \t\t\treturn uniforms;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function addLineNumbers( string ) {\n\n    \tvar lines = string.split( '\\n' );\n\n    \tfor ( var i = 0; i < lines.length; i ++ ) {\n\n    \t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n    \t}\n\n    \treturn lines.join( '\\n' );\n\n    }\n\n    function WebGLShader( gl, type, string ) {\n\n    \tvar shader = gl.createShader( type );\n\n    \tgl.shaderSource( shader, string );\n    \tgl.compileShader( shader );\n\n    \tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n    \t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n    \t}\n\n    \tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n    \t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n    \t}\n\n    \t// --enable-privileged-webgl-extension\n    \t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n    \treturn shader;\n\n    }\n\n    var programIdCount = 0;\n\n    function getEncodingComponents( encoding ) {\n\n    \tswitch ( encoding ) {\n\n    \t\tcase LinearEncoding:\n    \t\t\treturn [ 'Linear','( value )' ];\n    \t\tcase sRGBEncoding:\n    \t\t\treturn [ 'sRGB','( value )' ];\n    \t\tcase RGBEEncoding:\n    \t\t\treturn [ 'RGBE','( value )' ];\n    \t\tcase RGBM7Encoding:\n    \t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n    \t\tcase RGBM16Encoding:\n    \t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n    \t\tcase RGBDEncoding:\n    \t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n    \t\tcase GammaEncoding:\n    \t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n    \t\tdefault:\n    \t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n    \t}\n\n    }\n\n    function getTexelDecodingFunction( functionName, encoding ) {\n\n    \tvar components = getEncodingComponents( encoding );\n    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\n    }\n\n    function getTexelEncodingFunction( functionName, encoding ) {\n\n    \tvar components = getEncodingComponents( encoding );\n    \treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\n    }\n\n    function getToneMappingFunction( functionName, toneMapping ) {\n\n    \tvar toneMappingName;\n\n    \tswitch ( toneMapping ) {\n\n    \t\tcase LinearToneMapping:\n    \t\t\ttoneMappingName = \"Linear\";\n    \t\t\tbreak;\n\n    \t\tcase ReinhardToneMapping:\n    \t\t\ttoneMappingName = \"Reinhard\";\n    \t\t\tbreak;\n\n    \t\tcase Uncharted2ToneMapping:\n    \t\t\ttoneMappingName = \"Uncharted2\";\n    \t\t\tbreak;\n\n    \t\tcase CineonToneMapping:\n    \t\t\ttoneMappingName = \"OptimizedCineon\";\n    \t\t\tbreak;\n\n    \t\tdefault:\n    \t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n    \t}\n\n    \treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\n    }\n\n    function generateExtensions( extensions, parameters, rendererExtensions ) {\n\n    \textensions = extensions || {};\n\n    \tvar chunks = [\n    \t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n    \t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n    \t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n    \t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n    \t];\n\n    \treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n    }\n\n    function generateDefines( defines ) {\n\n    \tvar chunks = [];\n\n    \tfor ( var name in defines ) {\n\n    \t\tvar value = defines[ name ];\n\n    \t\tif ( value === false ) continue;\n\n    \t\tchunks.push( '#define ' + name + ' ' + value );\n\n    \t}\n\n    \treturn chunks.join( '\\n' );\n\n    }\n\n    function fetchAttributeLocations( gl, program, identifiers ) {\n\n    \tvar attributes = {};\n\n    \tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n    \tfor ( var i = 0; i < n; i ++ ) {\n\n    \t\tvar info = gl.getActiveAttrib( program, i );\n    \t\tvar name = info.name;\n\n    \t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n    \t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n    \t}\n\n    \treturn attributes;\n\n    }\n\n    function filterEmptyLine( string ) {\n\n    \treturn string !== '';\n\n    }\n\n    function replaceLightNums( string, parameters ) {\n\n    \treturn string\n    \t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n    \t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n    \t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n    \t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n    }\n\n    function parseIncludes( string ) {\n\n    \tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\n    \tfunction replace( match, include ) {\n\n    \t\tvar replace = ShaderChunk[ include ];\n\n    \t\tif ( replace === undefined ) {\n\n    \t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n    \t\t}\n\n    \t\treturn parseIncludes( replace );\n\n    \t}\n\n    \treturn string.replace( pattern, replace );\n\n    }\n\n    function unrollLoops( string ) {\n\n    \tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n    \tfunction replace( match, start, end, snippet ) {\n\n    \t\tvar unroll = '';\n\n    \t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n    \t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n    \t\t}\n\n    \t\treturn unroll;\n\n    \t}\n\n    \treturn string.replace( pattern, replace );\n\n    }\n\n    function WebGLProgram( renderer, code, material, parameters ) {\n\n    \tvar gl = renderer.context;\n\n    \tvar extensions = material.extensions;\n    \tvar defines = material.defines;\n\n    \tvar vertexShader = material.__webglShader.vertexShader;\n    \tvar fragmentShader = material.__webglShader.fragmentShader;\n\n    \tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n    \tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n    \t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n    \t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n    \t}\n\n    \tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n    \tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n    \tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n    \tif ( parameters.envMap ) {\n\n    \t\tswitch ( material.envMap.mapping ) {\n\n    \t\t\tcase CubeReflectionMapping:\n    \t\t\tcase CubeRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n    \t\t\t\tbreak;\n\n    \t\t\tcase CubeUVReflectionMapping:\n    \t\t\tcase CubeUVRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n    \t\t\t\tbreak;\n\n    \t\t\tcase EquirectangularReflectionMapping:\n    \t\t\tcase EquirectangularRefractionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n    \t\t\t\tbreak;\n\n    \t\t\tcase SphericalReflectionMapping:\n    \t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tswitch ( material.envMap.mapping ) {\n\n    \t\t\tcase CubeRefractionMapping:\n    \t\t\tcase EquirectangularRefractionMapping:\n    \t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tswitch ( material.combine ) {\n\n    \t\t\tcase MultiplyOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n    \t\t\t\tbreak;\n\n    \t\t\tcase MixOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n    \t\t\t\tbreak;\n\n    \t\t\tcase AddOperation:\n    \t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t}\n\n    \tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n    \t// console.log( 'building new program ' );\n\n    \t//\n\n    \tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\n    \tvar customDefines = generateDefines( defines );\n\n    \t//\n\n    \tvar program = gl.createProgram();\n\n    \tvar prefixVertex, prefixFragment;\n\n    \tif ( material.isRawShaderMaterial ) {\n\n    \t\tprefixVertex = [\n\n    \t\t\tcustomDefines,\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t\tprefixFragment = [\n\n    \t\t\tcustomExtensions,\n    \t\t\tcustomDefines,\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t} else {\n\n    \t\tprefixVertex = [\n\n    \t\t\t'precision ' + parameters.precision + ' float;',\n    \t\t\t'precision ' + parameters.precision + ' int;',\n\n    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n    \t\t\tcustomDefines,\n\n    \t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n    \t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\n    \t\t\tparameters.map ? '#define USE_MAP' : '',\n    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n    \t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n    \t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n    \t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n    \t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n    \t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n    \t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n    \t\t\t'uniform mat4 modelMatrix;',\n    \t\t\t'uniform mat4 modelViewMatrix;',\n    \t\t\t'uniform mat4 projectionMatrix;',\n    \t\t\t'uniform mat4 viewMatrix;',\n    \t\t\t'uniform mat3 normalMatrix;',\n    \t\t\t'uniform vec3 cameraPosition;',\n\n    \t\t\t'attribute vec3 position;',\n    \t\t\t'attribute vec3 normal;',\n    \t\t\t'attribute vec2 uv;',\n\n    \t\t\t'#ifdef USE_COLOR',\n\n    \t\t\t'\tattribute vec3 color;',\n\n    \t\t\t'#endif',\n\n    \t\t\t'#ifdef USE_MORPHTARGETS',\n\n    \t\t\t'\tattribute vec3 morphTarget0;',\n    \t\t\t'\tattribute vec3 morphTarget1;',\n    \t\t\t'\tattribute vec3 morphTarget2;',\n    \t\t\t'\tattribute vec3 morphTarget3;',\n\n    \t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n    \t\t\t'\t\tattribute vec3 morphNormal0;',\n    \t\t\t'\t\tattribute vec3 morphNormal1;',\n    \t\t\t'\t\tattribute vec3 morphNormal2;',\n    \t\t\t'\t\tattribute vec3 morphNormal3;',\n\n    \t\t\t'\t#else',\n\n    \t\t\t'\t\tattribute vec3 morphTarget4;',\n    \t\t\t'\t\tattribute vec3 morphTarget5;',\n    \t\t\t'\t\tattribute vec3 morphTarget6;',\n    \t\t\t'\t\tattribute vec3 morphTarget7;',\n\n    \t\t\t'\t#endif',\n\n    \t\t\t'#endif',\n\n    \t\t\t'#ifdef USE_SKINNING',\n\n    \t\t\t'\tattribute vec4 skinIndex;',\n    \t\t\t'\tattribute vec4 skinWeight;',\n\n    \t\t\t'#endif',\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t\tprefixFragment = [\n\n    \t\t\tcustomExtensions,\n\n    \t\t\t'precision ' + parameters.precision + ' float;',\n    \t\t\t'precision ' + parameters.precision + ' int;',\n\n    \t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n    \t\t\tcustomDefines,\n\n    \t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n    \t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n    \t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n    \t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n    \t\t\tparameters.map ? '#define USE_MAP' : '',\n    \t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n    \t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n    \t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n    \t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n    \t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n    \t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n    \t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n    \t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n    \t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n    \t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n    \t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n    \t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n    \t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n    \t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n    \t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n    \t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n    \t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n    \t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n    \t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n    \t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n    \t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n    \t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n    \t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n    \t\t\t'uniform mat4 viewMatrix;',\n    \t\t\t'uniform vec3 cameraPosition;',\n\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n    \t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\n    \t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n    \t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n    \t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n    \t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n    \t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\n    \t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n    \t\t\t'\\n'\n\n    \t\t].filter( filterEmptyLine ).join( '\\n' );\n\n    \t}\n\n    \tvertexShader = parseIncludes( vertexShader, parameters );\n    \tvertexShader = replaceLightNums( vertexShader, parameters );\n\n    \tfragmentShader = parseIncludes( fragmentShader, parameters );\n    \tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n    \tif ( ! material.isShaderMaterial ) {\n\n    \t\tvertexShader = unrollLoops( vertexShader );\n    \t\tfragmentShader = unrollLoops( fragmentShader );\n\n    \t}\n\n    \tvar vertexGlsl = prefixVertex + vertexShader;\n    \tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n    \t// console.log( '*VERTEX*', vertexGlsl );\n    \t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n    \tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n    \tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n    \tgl.attachShader( program, glVertexShader );\n    \tgl.attachShader( program, glFragmentShader );\n\n    \t// Force a particular attribute to index 0.\n\n    \tif ( material.index0AttributeName !== undefined ) {\n\n    \t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n    \t} else if ( parameters.morphTargets === true ) {\n\n    \t\t// programs with morphTargets displace position out of attribute 0\n    \t\tgl.bindAttribLocation( program, 0, 'position' );\n\n    \t}\n\n    \tgl.linkProgram( program );\n\n    \tvar programLog = gl.getProgramInfoLog( program );\n    \tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n    \tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n    \tvar runnable = true;\n    \tvar haveDiagnostics = true;\n\n    \t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n    \t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n    \tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n    \t\trunnable = false;\n\n    \t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n    \t} else if ( programLog !== '' ) {\n\n    \t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n    \t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n    \t\thaveDiagnostics = false;\n\n    \t}\n\n    \tif ( haveDiagnostics ) {\n\n    \t\tthis.diagnostics = {\n\n    \t\t\trunnable: runnable,\n    \t\t\tmaterial: material,\n\n    \t\t\tprogramLog: programLog,\n\n    \t\t\tvertexShader: {\n\n    \t\t\t\tlog: vertexLog,\n    \t\t\t\tprefix: prefixVertex\n\n    \t\t\t},\n\n    \t\t\tfragmentShader: {\n\n    \t\t\t\tlog: fragmentLog,\n    \t\t\t\tprefix: prefixFragment\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \t// clean up\n\n    \tgl.deleteShader( glVertexShader );\n    \tgl.deleteShader( glFragmentShader );\n\n    \t// set up caching for uniform locations\n\n    \tvar cachedUniforms;\n\n    \tthis.getUniforms = function() {\n\n    \t\tif ( cachedUniforms === undefined ) {\n\n    \t\t\tcachedUniforms =\n    \t\t\t\t\tnew WebGLUniforms( gl, program, renderer );\n\n    \t\t}\n\n    \t\treturn cachedUniforms;\n\n    \t};\n\n    \t// set up caching for attribute locations\n\n    \tvar cachedAttributes;\n\n    \tthis.getAttributes = function() {\n\n    \t\tif ( cachedAttributes === undefined ) {\n\n    \t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n    \t\t}\n\n    \t\treturn cachedAttributes;\n\n    \t};\n\n    \t// free resource\n\n    \tthis.destroy = function() {\n\n    \t\tgl.deleteProgram( program );\n    \t\tthis.program = undefined;\n\n    \t};\n\n    \t// DEPRECATED\n\n    \tObject.defineProperties( this, {\n\n    \t\tuniforms: {\n    \t\t\tget: function() {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n    \t\t\t\treturn this.getUniforms();\n\n    \t\t\t}\n    \t\t},\n\n    \t\tattributes: {\n    \t\t\tget: function() {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n    \t\t\t\treturn this.getAttributes();\n\n    \t\t\t}\n    \t\t}\n\n    \t} );\n\n\n    \t//\n\n    \tthis.id = programIdCount ++;\n    \tthis.code = code;\n    \tthis.usedTimes = 1;\n    \tthis.program = program;\n    \tthis.vertexShader = glVertexShader;\n    \tthis.fragmentShader = glFragmentShader;\n\n    \treturn this;\n\n    }\n\n    function WebGLPrograms( renderer, capabilities ) {\n\n    \tvar programs = [];\n\n    \tvar shaderIDs = {\n    \t\tMeshDepthMaterial: 'depth',\n    \t\tMeshNormalMaterial: 'normal',\n    \t\tMeshBasicMaterial: 'basic',\n    \t\tMeshLambertMaterial: 'lambert',\n    \t\tMeshPhongMaterial: 'phong',\n    \t\tMeshStandardMaterial: 'physical',\n    \t\tMeshPhysicalMaterial: 'physical',\n    \t\tLineBasicMaterial: 'basic',\n    \t\tLineDashedMaterial: 'dashed',\n    \t\tPointsMaterial: 'points'\n    \t};\n\n    \tvar parameterNames = [\n    \t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n    \t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n    \t\t\"roughnessMap\", \"metalnessMap\",\n    \t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n    \t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n    \t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n    \t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n    \t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n    \t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n    \t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n    \t];\n\n\n    \tfunction allocateBones( object ) {\n\n    \t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\n    \t\t\treturn 1024;\n\n    \t\t} else {\n\n    \t\t\t// default for when object is not specified\n    \t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n    \t\t\t//\n    \t\t\t//  - leave some extra space for other uniforms\n    \t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n    \t\t\t//    (up to 54 should be safe)\n\n    \t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n    \t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n    \t\t\tvar maxBones = nVertexMatrices;\n\n    \t\t\tif ( object !== undefined && (object && object.isSkinnedMesh) ) {\n\n    \t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\n    \t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\n    \t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn maxBones;\n\n    \t\t}\n\n    \t}\n\n    \tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n    \t\tvar encoding;\n\n    \t\tif ( ! map ) {\n\n    \t\t\tencoding = LinearEncoding;\n\n    \t\t} else if ( (map && map.isTexture) ) {\n\n    \t\t\tencoding = map.encoding;\n\n    \t\t} else if ( (map && map.isWebGLRenderTarget) ) {\n\n    \t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n    \t\t\tencoding = map.texture.encoding;\n\n    \t\t}\n\n    \t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n    \t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n    \t\t\tencoding = GammaEncoding;\n\n    \t\t}\n\n    \t\treturn encoding;\n\n    \t}\n\n    \tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\n    \t\tvar shaderID = shaderIDs[ material.type ];\n\n    \t\t// heuristics to create shader parameters according to lights in the scene\n    \t\t// (not to blow over maxLights budget)\n\n    \t\tvar maxBones = allocateBones( object );\n    \t\tvar precision = renderer.getPrecision();\n\n    \t\tif ( material.precision !== null ) {\n\n    \t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n    \t\t\tif ( precision !== material.precision ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\n    \t\tvar parameters = {\n\n    \t\t\tshaderID: shaderID,\n\n    \t\t\tprecision: precision,\n    \t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n    \t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n    \t\t\tmap: !! material.map,\n    \t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n    \t\t\tenvMap: !! material.envMap,\n    \t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n    \t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n    \t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n    \t\t\tlightMap: !! material.lightMap,\n    \t\t\taoMap: !! material.aoMap,\n    \t\t\temissiveMap: !! material.emissiveMap,\n    \t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n    \t\t\tbumpMap: !! material.bumpMap,\n    \t\t\tnormalMap: !! material.normalMap,\n    \t\t\tdisplacementMap: !! material.displacementMap,\n    \t\t\troughnessMap: !! material.roughnessMap,\n    \t\t\tmetalnessMap: !! material.metalnessMap,\n    \t\t\tspecularMap: !! material.specularMap,\n    \t\t\talphaMap: !! material.alphaMap,\n\n    \t\t\tcombine: material.combine,\n\n    \t\t\tvertexColors: material.vertexColors,\n\n    \t\t\tfog: !! fog,\n    \t\t\tuseFog: material.fog,\n    \t\t\tfogExp: (fog && fog.isFogExp2),\n\n    \t\t\tflatShading: material.shading === FlatShading,\n\n    \t\t\tsizeAttenuation: material.sizeAttenuation,\n    \t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n    \t\t\tskinning: material.skinning,\n    \t\t\tmaxBones: maxBones,\n    \t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\n    \t\t\tmorphTargets: material.morphTargets,\n    \t\t\tmorphNormals: material.morphNormals,\n    \t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n    \t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n    \t\t\tnumDirLights: lights.directional.length,\n    \t\t\tnumPointLights: lights.point.length,\n    \t\t\tnumSpotLights: lights.spot.length,\n    \t\t\tnumHemiLights: lights.hemi.length,\n\n    \t\t\tnumClippingPlanes: nClipPlanes,\n\n    \t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n    \t\t\tshadowMapType: renderer.shadowMap.type,\n\n    \t\t\ttoneMapping: renderer.toneMapping,\n    \t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n    \t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n    \t\t\talphaTest: material.alphaTest,\n    \t\t\tdoubleSided: material.side === DoubleSide,\n    \t\t\tflipSided: material.side === BackSide,\n\n    \t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n    \t\t};\n\n    \t\treturn parameters;\n\n    \t};\n\n    \tthis.getProgramCode = function ( material, parameters ) {\n\n    \t\tvar array = [];\n\n    \t\tif ( parameters.shaderID ) {\n\n    \t\t\tarray.push( parameters.shaderID );\n\n    \t\t} else {\n\n    \t\t\tarray.push( material.fragmentShader );\n    \t\t\tarray.push( material.vertexShader );\n\n    \t\t}\n\n    \t\tif ( material.defines !== undefined ) {\n\n    \t\t\tfor ( var name in material.defines ) {\n\n    \t\t\t\tarray.push( name );\n    \t\t\t\tarray.push( material.defines[ name ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n    \t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n    \t\t}\n\n    \t\treturn array.join();\n\n    \t};\n\n    \tthis.acquireProgram = function ( material, parameters, code ) {\n\n    \t\tvar program;\n\n    \t\t// Check if code has been already compiled\n    \t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n    \t\t\tvar programInfo = programs[ p ];\n\n    \t\t\tif ( programInfo.code === code ) {\n\n    \t\t\t\tprogram = programInfo;\n    \t\t\t\t++ program.usedTimes;\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\tprogram = new WebGLProgram( renderer, code, material, parameters );\n    \t\t\tprograms.push( program );\n\n    \t\t}\n\n    \t\treturn program;\n\n    \t};\n\n    \tthis.releaseProgram = function( program ) {\n\n    \t\tif ( -- program.usedTimes === 0 ) {\n\n    \t\t\t// Remove from unordered set\n    \t\t\tvar i = programs.indexOf( program );\n    \t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n    \t\t\tprograms.pop();\n\n    \t\t\t// Free WebGL resources\n    \t\t\tprogram.destroy();\n\n    \t\t}\n\n    \t};\n\n    \t// Exposed for resource monitoring & error feedback via renderer.info:\n    \tthis.programs = programs;\n\n    }\n\n    function WebGLGeometries( gl, properties, info ) {\n\n    \tvar geometries = {};\n\n    \tfunction onGeometryDispose( event ) {\n\n    \t\tvar geometry = event.target;\n    \t\tvar buffergeometry = geometries[ geometry.id ];\n\n    \t\tif ( buffergeometry.index !== null ) {\n\n    \t\t\tdeleteAttribute( buffergeometry.index );\n\n    \t\t}\n\n    \t\tdeleteAttributes( buffergeometry.attributes );\n\n    \t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n    \t\tdelete geometries[ geometry.id ];\n\n    \t\t// TODO\n\n    \t\tvar property = properties.get( geometry );\n\n    \t\tif ( property.wireframe ) {\n\n    \t\t\tdeleteAttribute( property.wireframe );\n\n    \t\t}\n\n    \t\tproperties.delete( geometry );\n\n    \t\tvar bufferproperty = properties.get( buffergeometry );\n\n    \t\tif ( bufferproperty.wireframe ) {\n\n    \t\t\tdeleteAttribute( bufferproperty.wireframe );\n\n    \t\t}\n\n    \t\tproperties.delete( buffergeometry );\n\n    \t\t//\n\n    \t\tinfo.memory.geometries --;\n\n    \t}\n\n    \tfunction getAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n    \t\t}\n\n    \t\treturn properties.get( attribute ).__webglBuffer;\n\n    \t}\n\n    \tfunction deleteAttribute( attribute ) {\n\n    \t\tvar buffer = getAttributeBuffer( attribute );\n\n    \t\tif ( buffer !== undefined ) {\n\n    \t\t\tgl.deleteBuffer( buffer );\n    \t\t\tremoveAttributeBuffer( attribute );\n\n    \t\t}\n\n    \t}\n\n    \tfunction deleteAttributes( attributes ) {\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tdeleteAttribute( attributes[ name ] );\n\n    \t\t}\n\n    \t}\n\n    \tfunction removeAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\tproperties.delete( attribute.data );\n\n    \t\t} else {\n\n    \t\t\tproperties.delete( attribute );\n\n    \t\t}\n\n    \t}\n\n    \treturn {\n\n    \t\tget: function ( object ) {\n\n    \t\t\tvar geometry = object.geometry;\n\n    \t\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\n    \t\t\t\treturn geometries[ geometry.id ];\n\n    \t\t\t}\n\n    \t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n    \t\t\tvar buffergeometry;\n\n    \t\t\tif ( geometry.isBufferGeometry ) {\n\n    \t\t\t\tbuffergeometry = geometry;\n\n    \t\t\t} else if ( geometry.isGeometry ) {\n\n    \t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n    \t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n    \t\t\t\t}\n\n    \t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n    \t\t\t}\n\n    \t\t\tgeometries[ geometry.id ] = buffergeometry;\n\n    \t\t\tinfo.memory.geometries ++;\n\n    \t\t\treturn buffergeometry;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLObjects( gl, properties, info ) {\n\n    \tvar geometries = new WebGLGeometries( gl, properties, info );\n\n    \t//\n\n    \tfunction update( object ) {\n\n    \t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\n    \t\tvar geometry = geometries.get( object );\n\n    \t\tif ( object.geometry.isGeometry ) {\n\n    \t\t\tgeometry.updateFromObject( object );\n\n    \t\t}\n\n    \t\tvar index = geometry.index;\n    \t\tvar attributes = geometry.attributes;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\n    \t\t}\n\n    \t\tfor ( var name in attributes ) {\n\n    \t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\n    \t\t}\n\n    \t\t// morph targets\n\n    \t\tvar morphAttributes = geometry.morphAttributes;\n\n    \t\tfor ( var name in morphAttributes ) {\n\n    \t\t\tvar array = morphAttributes[ name ];\n\n    \t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n    \t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    \tfunction updateAttribute( attribute, bufferType ) {\n\n    \t\tvar data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;\n\n    \t\tvar attributeProperties = properties.get( data );\n\n    \t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\n    \t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\n    \t\t} else if ( attributeProperties.version !== data.version ) {\n\n    \t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\n    \t\t}\n\n    \t}\n\n    \tfunction createBuffer( attributeProperties, data, bufferType ) {\n\n    \t\tattributeProperties.__webglBuffer = gl.createBuffer();\n    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n    \t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n    \t\tgl.bufferData( bufferType, data.array, usage );\n\n    \t\tattributeProperties.version = data.version;\n\n    \t}\n\n    \tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\n    \t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n    \t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\n    \t\t\t// Not using update ranges\n\n    \t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\n    \t\t} else if ( data.updateRange.count === 0 ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n    \t\t} else {\n\n    \t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n    \t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\n    \t\t\tdata.updateRange.count = 0; // reset range\n\n    \t\t}\n\n    \t\tattributeProperties.version = data.version;\n\n    \t}\n\n    \tfunction getAttributeBuffer( attribute ) {\n\n    \t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n    \t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n    \t\t}\n\n    \t\treturn properties.get( attribute ).__webglBuffer;\n\n    \t}\n\n    \tfunction getWireframeAttribute( geometry ) {\n\n    \t\tvar property = properties.get( geometry );\n\n    \t\tif ( property.wireframe !== undefined ) {\n\n    \t\t\treturn property.wireframe;\n\n    \t\t}\n\n    \t\tvar indices = [];\n\n    \t\tvar index = geometry.index;\n    \t\tvar attributes = geometry.attributes;\n    \t\tvar position = attributes.position;\n\n    \t\t// console.time( 'wireframe' );\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tvar edges = {};\n    \t\t\tvar array = index.array;\n\n    \t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n    \t\t\t\tvar a = array[ i + 0 ];\n    \t\t\t\tvar b = array[ i + 1 ];\n    \t\t\t\tvar c = array[ i + 2 ];\n\n    \t\t\t\tindices.push( a, b, b, c, c, a );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tvar array = attributes.position.array;\n\n    \t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n    \t\t\t\tvar a = i + 0;\n    \t\t\t\tvar b = i + 1;\n    \t\t\t\tvar c = i + 2;\n\n    \t\t\t\tindices.push( a, b, b, c, c, a );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// console.timeEnd( 'wireframe' );\n\n    \t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n    \t\tvar attribute = new BufferAttribute( new TypeArray( indices ), 1 );\n\n    \t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n    \t\tproperty.wireframe = attribute;\n\n    \t\treturn attribute;\n\n    \t}\n\n    \treturn {\n\n    \t\tgetAttributeBuffer: getAttributeBuffer,\n    \t\tgetWireframeAttribute: getWireframeAttribute,\n\n    \t\tupdate: update\n\n    \t};\n\n    }\n\n    function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\n    \tvar _infoMemory = info.memory;\n    \tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\n    \t//\n\n    \tfunction clampToMaxSize( image, maxSize ) {\n\n    \t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n    \t\t\t// Warning: Scaling through the canvas will only work with images that use\n    \t\t\t// premultiplied alpha.\n\n    \t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\tcanvas.width = Math.floor( image.width * scale );\n    \t\t\tcanvas.height = Math.floor( image.height * scale );\n\n    \t\t\tvar context = canvas.getContext( '2d' );\n    \t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n    \t\t\treturn canvas;\n\n    \t\t}\n\n    \t\treturn image;\n\n    \t}\n\n    \tfunction isPowerOfTwo( image ) {\n\n    \t\treturn exports.Math.isPowerOfTwo( image.width ) && exports.Math.isPowerOfTwo( image.height );\n\n    \t}\n\n    \tfunction makePowerOfTwo( image ) {\n\n    \t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\n    \t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \t\t\tcanvas.width = exports.Math.nearestPowerOfTwo( image.width );\n    \t\t\tcanvas.height = exports.Math.nearestPowerOfTwo( image.height );\n\n    \t\t\tvar context = canvas.getContext( '2d' );\n    \t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n    \t\t\treturn canvas;\n\n    \t\t}\n\n    \t\treturn image;\n\n    \t}\n\n    \tfunction textureNeedsPowerOfTwo( texture ) {\n\n    \t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;\n    \t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;\n\n    \t\treturn false;\n\n    \t}\n\n    \t// Fallback filters for non-power-of-2 textures\n\n    \tfunction filterFallback( f ) {\n\n    \t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\n    \t\t\treturn _gl.NEAREST;\n\n    \t\t}\n\n    \t\treturn _gl.LINEAR;\n\n    \t}\n\n    \t//\n\n    \tfunction onTextureDispose( event ) {\n\n    \t\tvar texture = event.target;\n\n    \t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n    \t\tdeallocateTexture( texture );\n\n    \t\t_infoMemory.textures --;\n\n\n    \t}\n\n    \tfunction onRenderTargetDispose( event ) {\n\n    \t\tvar renderTarget = event.target;\n\n    \t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n    \t\tdeallocateRenderTarget( renderTarget );\n\n    \t\t_infoMemory.textures --;\n\n    \t}\n\n    \t//\n\n    \tfunction deallocateTexture( texture ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n    \t\t\t// cube texture\n\n    \t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n    \t\t} else {\n\n    \t\t\t// 2D texture\n\n    \t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n    \t\t}\n\n    \t\t// remove all webgl properties\n    \t\tproperties.delete( texture );\n\n    \t}\n\n    \tfunction deallocateRenderTarget( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\n    \t\tif ( ! renderTarget ) return;\n\n    \t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n    \t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n    \t\t}\n\n    \t\tif ( renderTarget.depthTexture ) {\n\n    \t\t\trenderTarget.depthTexture.dispose();\n\n    \t\t}\n\n    \t\tif ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n    \t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n    \t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n    \t\t}\n\n    \t\tproperties.delete( renderTarget.texture );\n    \t\tproperties.delete( renderTarget );\n\n    \t}\n\n    \t//\n\n\n\n    \tfunction setTexture2D( texture, slot ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n    \t\t\tvar image = texture.image;\n\n    \t\t\tif ( image === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n    \t\t\t} else if ( image.complete === false ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n    \t\t\t} else {\n\n    \t\t\t\tuploadTexture( textureProperties, texture, slot );\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n    \t}\n\n    \tfunction setTextureCube( texture, slot ) {\n\n    \t\tvar textureProperties = properties.get( texture );\n\n    \t\tif ( texture.image.length === 6 ) {\n\n    \t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n    \t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n    \t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n    \t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n    \t\t\t\t\t_infoMemory.textures ++;\n\n    \t\t\t\t}\n\n    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n    \t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n    \t\t\t\tvar isCompressed = (texture && texture.isCompressedTexture);\n    \t\t\t\tvar isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);\n\n    \t\t\t\tvar cubeImage = [];\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n    \t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tvar image = cubeImage[ 0 ],\n    \t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n    \t\t\t\tglFormat = paramThreeToGL( texture.format ),\n    \t\t\t\tglType = paramThreeToGL( texture.type );\n\n    \t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\tif ( ! isCompressed ) {\n\n    \t\t\t\t\t\tif ( isDataTexture ) {\n\n    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n    \t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n    \t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n    \t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n    \t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n    \t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n    \t\t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\n    \t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n    \t\t\t\t}\n\n    \t\t\t\ttextureProperties.__version = texture.version;\n\n    \t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction setTextureCubeDynamic( texture, slot ) {\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n    \t}\n\n    \tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\n    \t\tvar extension;\n\n    \t\tif ( isPowerOfTwoImage ) {\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n    \t\t} else {\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n    \t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n    \t\t\t}\n\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n    \t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n    \t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n    \t\tif ( extension ) {\n\n    \t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n    \t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n    \t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n    \t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n    \t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction uploadTexture( textureProperties, texture, slot ) {\n\n    \t\tif ( textureProperties.__webglInit === undefined ) {\n\n    \t\t\ttextureProperties.__webglInit = true;\n\n    \t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n    \t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n    \t\t\t_infoMemory.textures ++;\n\n    \t\t}\n\n    \t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n    \t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n    \t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n    \t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n    \t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n    \t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n    \t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n    \t\t\timage = makePowerOfTwo( image );\n\n    \t\t}\n\n    \t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n    \t\tglFormat = paramThreeToGL( texture.format ),\n    \t\tglType = paramThreeToGL( texture.type );\n\n    \t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n    \t\tvar mipmap, mipmaps = texture.mipmaps;\n\n    \t\tif ( (texture && texture.isDepthTexture) ) {\n\n    \t\t\t// populate depth texture with dummy data\n\n    \t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n    \t\t\tif ( texture.type === FloatType ) {\n\n    \t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n    \t\t\t} else if ( _isWebGL2 ) {\n\n    \t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n    \t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n    \t\t\t}\n\n    \t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n    \t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n    \t\t\tif ( texture.format === DepthStencilFormat ) {\n\n    \t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\n    \t\t\t}\n\n    \t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n    \t\t} else if ( (texture && texture.isDataTexture) ) {\n\n    \t\t\t// use manually created mipmaps if available\n    \t\t\t// if there are no manual mipmaps\n    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\t\tmipmap = mipmaps[ i ];\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.generateMipmaps = false;\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n    \t\t\t}\n\n    \t\t} else if ( (texture && texture.isCompressedTexture) ) {\n\n    \t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\tmipmap = mipmaps[ i ];\n\n    \t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n    \t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n    \t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// regular Texture (image, video, canvas)\n\n    \t\t\t// use manually created mipmaps if available\n    \t\t\t// if there are no manual mipmaps\n    \t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n    \t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n    \t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n    \t\t\t\t\tmipmap = mipmaps[ i ];\n    \t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.generateMipmaps = false;\n\n    \t\t\t} else {\n\n    \t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n    \t\ttextureProperties.__version = texture.version;\n\n    \t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n    \t}\n\n    \t// Render targets\n\n    \t// Setup storage for target texture and bind it to correct framebuffer\n    \tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n    \t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n    \t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n    \t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n    \t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n    \t}\n\n    \t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n    \tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\n    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n    \t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n    \t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n    \t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n    \t\t} else {\n\n    \t\t\t// FIXME: We don't support !depth !stencil\n    \t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n    \t\t}\n\n    \t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n    \t}\n\n    \t// Setup resources for a Depth Texture for a FBO (needs an extension)\n    \tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n    \t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n    \t\tif ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {\n\n    \t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\n    \t\t}\n\n    \t\t// upload an empty depth texture with framebuffer size\n    \t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n    \t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n    \t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n    \t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n    \t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n    \t\t\trenderTarget.depthTexture.needsUpdate = true;\n    \t\t}\n\n    \t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n    \t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n    \t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n    \t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n    \t\t} else {\n\n    \t\t\tthrow new Error('Unknown depthTexture format')\n\n    \t\t}\n\n    \t}\n\n    \t// Setup GL resources for a non-texture depth buffer\n    \tfunction setupDepthRenderbuffer( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n\n    \t\tif ( renderTarget.depthTexture ) {\n\n    \t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\n    \t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n    \t\t} else {\n\n    \t\t\tif ( isCube ) {\n\n    \t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n    \t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n    \t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n    \t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n    \t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n    \t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n    \t}\n\n    \t// Set up GL resources for the render target\n    \tfunction setupRenderTarget( renderTarget ) {\n\n    \t\tvar renderTargetProperties = properties.get( renderTarget );\n    \t\tvar textureProperties = properties.get( renderTarget.texture );\n\n    \t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n    \t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n    \t\t_infoMemory.textures ++;\n\n    \t\tvar isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );\n    \t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n    \t\t// Setup framebuffer\n\n    \t\tif ( isCube ) {\n\n    \t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n    \t\t}\n\n    \t\t// Setup color buffer\n\n    \t\tif ( isCube ) {\n\n    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n    \t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n    \t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n    \t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n    \t\t\t}\n\n    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n    \t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n    \t\t} else {\n\n    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n    \t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n    \t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n    \t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n    \t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n    \t\t}\n\n    \t\t// Setup depth and stencil buffers\n\n    \t\tif ( renderTarget.depthBuffer ) {\n\n    \t\t\tsetupDepthRenderbuffer( renderTarget );\n\n    \t\t}\n\n    \t}\n\n    \tfunction updateRenderTargetMipmap( renderTarget ) {\n\n    \t\tvar texture = renderTarget.texture;\n\n    \t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n    \t\t\t\ttexture.minFilter !== NearestFilter &&\n    \t\t\t\ttexture.minFilter !== LinearFilter ) {\n\n    \t\t\tvar target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n    \t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n    \t\t\tstate.bindTexture( target, webglTexture );\n    \t\t\t_gl.generateMipmap( target );\n    \t\t\tstate.bindTexture( target, null );\n\n    \t\t}\n\n    \t}\n\n    \tthis.setTexture2D = setTexture2D;\n    \tthis.setTextureCube = setTextureCube;\n    \tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n    \tthis.setupRenderTarget = setupRenderTarget;\n    \tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n    }\n\n    /**\n     * @author fordacious / fordacious.github.io\n     */\n\n    function WebGLProperties() {\n\n    \tvar properties = {};\n\n    \treturn {\n\n    \t\tget: function ( object ) {\n\n    \t\t\tvar uuid = object.uuid;\n    \t\t\tvar map = properties[ uuid ];\n\n    \t\t\tif ( map === undefined ) {\n\n    \t\t\t\tmap = {};\n    \t\t\t\tproperties[ uuid ] = map;\n\n    \t\t\t}\n\n    \t\t\treturn map;\n\n    \t\t},\n\n    \t\tdelete: function ( object ) {\n\n    \t\t\tdelete properties[ object.uuid ];\n\n    \t\t},\n\n    \t\tclear: function () {\n\n    \t\t\tproperties = {};\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLState( gl, extensions, paramThreeToGL ) {\n\n    \tfunction ColorBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar color = new Vector4();\n    \t\tvar currentColorMask = null;\n    \t\tvar currentColorClear = new Vector4();\n\n    \t\treturn {\n\n    \t\t\tsetMask: function ( colorMask ) {\n\n    \t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n    \t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n    \t\t\t\t\tcurrentColorMask = colorMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( r, g, b, a ) {\n\n    \t\t\t\tcolor.set( r, g, b, a );\n\n    \t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n    \t\t\t\t\tgl.clearColor( r, g, b, a );\n    \t\t\t\t\tcurrentColorClear.copy( color );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentColorMask = null;\n    \t\t\t\tcurrentColorClear.set( 0, 0, 0, 1 );\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \tfunction DepthBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar currentDepthMask = null;\n    \t\tvar currentDepthFunc = null;\n    \t\tvar currentDepthClear = null;\n\n    \t\treturn {\n\n    \t\t\tsetTest: function ( depthTest ) {\n\n    \t\t\t\tif ( depthTest ) {\n\n    \t\t\t\t\tenable( gl.DEPTH_TEST );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetMask: function ( depthMask ) {\n\n    \t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n    \t\t\t\t\tgl.depthMask( depthMask );\n    \t\t\t\t\tcurrentDepthMask = depthMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetFunc: function ( depthFunc ) {\n\n    \t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n    \t\t\t\t\tif ( depthFunc ) {\n\n    \t\t\t\t\t\tswitch ( depthFunc ) {\n\n    \t\t\t\t\t\t\tcase NeverDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase AlwaysDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase LessDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase LessEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase EqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase GreaterDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase NotEqualDepth:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tdefault:\n\n    \t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( depth ) {\n\n    \t\t\t\tif ( currentDepthClear !== depth ) {\n\n    \t\t\t\t\tgl.clearDepth( depth );\n    \t\t\t\t\tcurrentDepthClear = depth;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentDepthMask = null;\n    \t\t\t\tcurrentDepthFunc = null;\n    \t\t\t\tcurrentDepthClear = null;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \tfunction StencilBuffer() {\n\n    \t\tvar locked = false;\n\n    \t\tvar currentStencilMask = null;\n    \t\tvar currentStencilFunc = null;\n    \t\tvar currentStencilRef = null;\n    \t\tvar currentStencilFuncMask = null;\n    \t\tvar currentStencilFail  = null;\n    \t\tvar currentStencilZFail = null;\n    \t\tvar currentStencilZPass = null;\n    \t\tvar currentStencilClear = null;\n\n    \t\treturn {\n\n    \t\t\tsetTest: function ( stencilTest ) {\n\n    \t\t\t\tif ( stencilTest ) {\n\n    \t\t\t\t\tenable( gl.STENCIL_TEST );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetMask: function ( stencilMask ) {\n\n    \t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n    \t\t\t\t\tgl.stencilMask( stencilMask );\n    \t\t\t\t\tcurrentStencilMask = stencilMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n    \t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n    \t\t\t\t     currentStencilRef \t!== stencilRef \t||\n    \t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n    \t\t\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\n    \t\t\t\t\tcurrentStencilFunc = stencilFunc;\n    \t\t\t\t\tcurrentStencilRef  = stencilRef;\n    \t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n    \t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n    \t\t\t\t     currentStencilZFail !== stencilZFail ||\n    \t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n    \t\t\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\n    \t\t\t\t\tcurrentStencilFail  = stencilFail;\n    \t\t\t\t\tcurrentStencilZFail = stencilZFail;\n    \t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tsetLocked: function ( lock ) {\n\n    \t\t\t\tlocked = lock;\n\n    \t\t\t},\n\n    \t\t\tsetClear: function ( stencil ) {\n\n    \t\t\t\tif ( currentStencilClear !== stencil ) {\n\n    \t\t\t\t\tgl.clearStencil( stencil );\n    \t\t\t\t\tcurrentStencilClear = stencil;\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\treset: function () {\n\n    \t\t\t\tlocked = false;\n\n    \t\t\t\tcurrentStencilMask = null;\n    \t\t\t\tcurrentStencilFunc = null;\n    \t\t\t\tcurrentStencilRef = null;\n    \t\t\t\tcurrentStencilFuncMask = null;\n    \t\t\t\tcurrentStencilFail = null;\n    \t\t\t\tcurrentStencilZFail = null;\n    \t\t\t\tcurrentStencilZPass = null;\n    \t\t\t\tcurrentStencilClear = null;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}\n\n    \t//\n\n    \tvar colorBuffer = new ColorBuffer();\n    \tvar depthBuffer = new DepthBuffer();\n    \tvar stencilBuffer = new StencilBuffer();\n\n    \tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    \tvar newAttributes = new Uint8Array( maxVertexAttributes );\n    \tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n    \tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n    \tvar capabilities = {};\n\n    \tvar compressedTextureFormats = null;\n\n    \tvar currentBlending = null;\n    \tvar currentBlendEquation = null;\n    \tvar currentBlendSrc = null;\n    \tvar currentBlendDst = null;\n    \tvar currentBlendEquationAlpha = null;\n    \tvar currentBlendSrcAlpha = null;\n    \tvar currentBlendDstAlpha = null;\n    \tvar currentPremultipledAlpha = false;\n\n    \tvar currentFlipSided = null;\n    \tvar currentCullFace = null;\n\n    \tvar currentLineWidth = null;\n\n    \tvar currentPolygonOffsetFactor = null;\n    \tvar currentPolygonOffsetUnits = null;\n\n    \tvar currentScissorTest = null;\n\n    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\n    \tvar currentTextureSlot = null;\n    \tvar currentBoundTextures = {};\n\n    \tvar currentScissor = new Vector4();\n    \tvar currentViewport = new Vector4();\n\n    \tfunction createTexture( type, target, count ) {\n\n    \t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n    \t\tvar texture = gl.createTexture();\n\n    \t\tgl.bindTexture( type, texture );\n    \t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n    \t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n    \t\tfor ( var i = 0; i < count; i ++ ) {\n\n    \t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t}\n\n    \tvar emptyTextures = {};\n    \temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n    \temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n    \t//\n\n    \tfunction init() {\n\n    \t\tclearColor( 0, 0, 0, 1 );\n    \t\tclearDepth( 1 );\n    \t\tclearStencil( 0 );\n\n    \t\tenable( gl.DEPTH_TEST );\n    \t\tsetDepthFunc( LessEqualDepth );\n\n    \t\tsetFlipSided( false );\n    \t\tsetCullFace( CullFaceBack );\n    \t\tenable( gl.CULL_FACE );\n\n    \t\tenable( gl.BLEND );\n    \t\tsetBlending( NormalBlending );\n\n    \t}\n\n    \tfunction initAttributes() {\n\n    \t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n    \t\t\tnewAttributes[ i ] = 0;\n\n    \t\t}\n\n    \t}\n\n    \tfunction enableAttribute( attribute ) {\n\n    \t\tnewAttributes[ attribute ] = 1;\n\n    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n    \t\t\tgl.enableVertexAttribArray( attribute );\n    \t\t\tenabledAttributes[ attribute ] = 1;\n\n    \t\t}\n\n    \t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n    \t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n    \t\t\tattributeDivisors[ attribute ] = 0;\n\n    \t\t}\n\n    \t}\n\n    \tfunction enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {\n\n    \t\tnewAttributes[ attribute ] = 1;\n\n    \t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n    \t\t\tgl.enableVertexAttribArray( attribute );\n    \t\t\tenabledAttributes[ attribute ] = 1;\n\n    \t\t}\n\n    \t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n    \t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n    \t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n    \t\t}\n\n    \t}\n\n    \tfunction disableUnusedAttributes() {\n\n    \t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n    \t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n    \t\t\t\tgl.disableVertexAttribArray( i );\n    \t\t\t\tenabledAttributes[ i ] = 0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction enable( id ) {\n\n    \t\tif ( capabilities[ id ] !== true ) {\n\n    \t\t\tgl.enable( id );\n    \t\t\tcapabilities[ id ] = true;\n\n    \t\t}\n\n    \t}\n\n    \tfunction disable( id ) {\n\n    \t\tif ( capabilities[ id ] !== false ) {\n\n    \t\t\tgl.disable( id );\n    \t\t\tcapabilities[ id ] = false;\n\n    \t\t}\n\n    \t}\n\n    \tfunction getCompressedTextureFormats() {\n\n    \t\tif ( compressedTextureFormats === null ) {\n\n    \t\t\tcompressedTextureFormats = [];\n\n    \t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n    \t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n    \t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n    \t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n    \t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n    \t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn compressedTextureFormats;\n\n    \t}\n\n    \tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n    \t\tif ( blending !== NoBlending ) {\n\n    \t\t\tenable( gl.BLEND );\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.BLEND );\n    \t\t\tcurrentBlending = blending; // no blending, that is\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n    \t\t\tif ( blending === AdditiveBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( blending === SubtractiveBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( blending === MultiplyBlending ) {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( premultipliedAlpha ) {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n    \t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tcurrentBlending = blending;\n    \t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n    \t\t}\n\n    \t\tif ( blending === CustomBlending ) {\n\n    \t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n    \t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n    \t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n    \t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n    \t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\n    \t\t\t\tcurrentBlendEquation = blendEquation;\n    \t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n    \t\t\t}\n\n    \t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n    \t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\n    \t\t\t\tcurrentBlendSrc = blendSrc;\n    \t\t\t\tcurrentBlendDst = blendDst;\n    \t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n    \t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tcurrentBlendEquation = null;\n    \t\t\tcurrentBlendSrc = null;\n    \t\t\tcurrentBlendDst = null;\n    \t\t\tcurrentBlendEquationAlpha = null;\n    \t\t\tcurrentBlendSrcAlpha = null;\n    \t\t\tcurrentBlendDstAlpha = null;\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Deprecate\n\n    \tfunction setColorWrite( colorWrite ) {\n\n    \t\tcolorBuffer.setMask( colorWrite );\n\n    \t}\n\n    \tfunction setDepthTest( depthTest ) {\n\n    \t\tdepthBuffer.setTest( depthTest );\n\n    \t}\n\n    \tfunction setDepthWrite( depthWrite ) {\n\n    \t\tdepthBuffer.setMask( depthWrite );\n\n    \t}\n\n    \tfunction setDepthFunc( depthFunc ) {\n\n    \t\tdepthBuffer.setFunc( depthFunc );\n\n    \t}\n\n    \tfunction setStencilTest( stencilTest ) {\n\n    \t\tstencilBuffer.setTest( stencilTest );\n\n    \t}\n\n    \tfunction setStencilWrite( stencilWrite ) {\n\n    \t\tstencilBuffer.setMask( stencilWrite );\n\n    \t}\n\n    \tfunction setStencilFunc( stencilFunc, stencilRef, stencilMask ) {\n\n    \t\tstencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );\n\n    \t}\n\n    \tfunction setStencilOp( stencilFail, stencilZFail, stencilZPass ) {\n\n    \t\tstencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );\n\n    \t}\n\n    \t//\n\n    \tfunction setFlipSided( flipSided ) {\n\n    \t\tif ( currentFlipSided !== flipSided ) {\n\n    \t\t\tif ( flipSided ) {\n\n    \t\t\t\tgl.frontFace( gl.CW );\n\n    \t\t\t} else {\n\n    \t\t\t\tgl.frontFace( gl.CCW );\n\n    \t\t\t}\n\n    \t\t\tcurrentFlipSided = flipSided;\n\n    \t\t}\n\n    \t}\n\n    \tfunction setCullFace( cullFace ) {\n\n    \t\tif ( cullFace !== CullFaceNone ) {\n\n    \t\t\tenable( gl.CULL_FACE );\n\n    \t\t\tif ( cullFace !== currentCullFace ) {\n\n    \t\t\t\tif ( cullFace === CullFaceBack ) {\n\n    \t\t\t\t\tgl.cullFace( gl.BACK );\n\n    \t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n    \t\t\t\t\tgl.cullFace( gl.FRONT );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.CULL_FACE );\n\n    \t\t}\n\n    \t\tcurrentCullFace = cullFace;\n\n    \t}\n\n    \tfunction setLineWidth( width ) {\n\n    \t\tif ( width !== currentLineWidth ) {\n\n    \t\t\tgl.lineWidth( width );\n\n    \t\t\tcurrentLineWidth = width;\n\n    \t\t}\n\n    \t}\n\n    \tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n    \t\tif ( polygonOffset ) {\n\n    \t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n    \t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n    \t\t\t\tgl.polygonOffset( factor, units );\n\n    \t\t\t\tcurrentPolygonOffsetFactor = factor;\n    \t\t\t\tcurrentPolygonOffsetUnits = units;\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n    \t\t}\n\n    \t}\n\n    \tfunction getScissorTest() {\n\n    \t\treturn currentScissorTest;\n\n    \t}\n\n    \tfunction setScissorTest( scissorTest ) {\n\n    \t\tcurrentScissorTest = scissorTest;\n\n    \t\tif ( scissorTest ) {\n\n    \t\t\tenable( gl.SCISSOR_TEST );\n\n    \t\t} else {\n\n    \t\t\tdisable( gl.SCISSOR_TEST );\n\n    \t\t}\n\n    \t}\n\n    \t// texture\n\n    \tfunction activeTexture( webglSlot ) {\n\n    \t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n    \t\tif ( currentTextureSlot !== webglSlot ) {\n\n    \t\t\tgl.activeTexture( webglSlot );\n    \t\t\tcurrentTextureSlot = webglSlot;\n\n    \t\t}\n\n    \t}\n\n    \tfunction bindTexture( webglType, webglTexture ) {\n\n    \t\tif ( currentTextureSlot === null ) {\n\n    \t\t\tactiveTexture();\n\n    \t\t}\n\n    \t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n    \t\tif ( boundTexture === undefined ) {\n\n    \t\t\tboundTexture = { type: undefined, texture: undefined };\n    \t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n    \t\t}\n\n    \t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n    \t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n    \t\t\tboundTexture.type = webglType;\n    \t\t\tboundTexture.texture = webglTexture;\n\n    \t\t}\n\n    \t}\n\n    \tfunction compressedTexImage2D() {\n\n    \t\ttry {\n\n    \t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n    \t\t} catch ( error ) {\n\n    \t\t\tconsole.error( error );\n\n    \t\t}\n\n    \t}\n\n    \tfunction texImage2D() {\n\n    \t\ttry {\n\n    \t\t\tgl.texImage2D.apply( gl, arguments );\n\n    \t\t} catch ( error ) {\n\n    \t\t\tconsole.error( error );\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Deprecate\n\n    \tfunction clearColor( r, g, b, a ) {\n\n    \t\tcolorBuffer.setClear( r, g, b, a );\n\n    \t}\n\n    \tfunction clearDepth( depth ) {\n\n    \t\tdepthBuffer.setClear( depth );\n\n    \t}\n\n    \tfunction clearStencil( stencil ) {\n\n    \t\tstencilBuffer.setClear( stencil );\n\n    \t}\n\n    \t//\n\n    \tfunction scissor( scissor ) {\n\n    \t\tif ( currentScissor.equals( scissor ) === false ) {\n\n    \t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n    \t\t\tcurrentScissor.copy( scissor );\n\n    \t\t}\n\n    \t}\n\n    \tfunction viewport( viewport ) {\n\n    \t\tif ( currentViewport.equals( viewport ) === false ) {\n\n    \t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n    \t\t\tcurrentViewport.copy( viewport );\n\n    \t\t}\n\n    \t}\n\n    \t//\n\n    \tfunction reset() {\n\n    \t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n    \t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n    \t\t\t\tgl.disableVertexAttribArray( i );\n    \t\t\t\tenabledAttributes[ i ] = 0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tcapabilities = {};\n\n    \t\tcompressedTextureFormats = null;\n\n    \t\tcurrentTextureSlot = null;\n    \t\tcurrentBoundTextures = {};\n\n    \t\tcurrentBlending = null;\n\n    \t\tcurrentFlipSided = null;\n    \t\tcurrentCullFace = null;\n\n    \t\tcolorBuffer.reset();\n    \t\tdepthBuffer.reset();\n    \t\tstencilBuffer.reset();\n\n    \t}\n\n    \treturn {\n\n    \t\tbuffers: {\n    \t\t\tcolor: colorBuffer,\n    \t\t\tdepth: depthBuffer,\n    \t\t\tstencil: stencilBuffer\n    \t\t},\n\n    \t\tinit: init,\n    \t\tinitAttributes: initAttributes,\n    \t\tenableAttribute: enableAttribute,\n    \t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n    \t\tdisableUnusedAttributes: disableUnusedAttributes,\n    \t\tenable: enable,\n    \t\tdisable: disable,\n    \t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n    \t\tsetBlending: setBlending,\n\n    \t\tsetColorWrite: setColorWrite,\n    \t\tsetDepthTest: setDepthTest,\n    \t\tsetDepthWrite: setDepthWrite,\n    \t\tsetDepthFunc: setDepthFunc,\n    \t\tsetStencilTest: setStencilTest,\n    \t\tsetStencilWrite: setStencilWrite,\n    \t\tsetStencilFunc: setStencilFunc,\n    \t\tsetStencilOp: setStencilOp,\n\n    \t\tsetFlipSided: setFlipSided,\n    \t\tsetCullFace: setCullFace,\n\n    \t\tsetLineWidth: setLineWidth,\n    \t\tsetPolygonOffset: setPolygonOffset,\n\n    \t\tgetScissorTest: getScissorTest,\n    \t\tsetScissorTest: setScissorTest,\n\n    \t\tactiveTexture: activeTexture,\n    \t\tbindTexture: bindTexture,\n    \t\tcompressedTexImage2D: compressedTexImage2D,\n    \t\ttexImage2D: texImage2D,\n\n    \t\tclearColor: clearColor,\n    \t\tclearDepth: clearDepth,\n    \t\tclearStencil: clearStencil,\n\n    \t\tscissor: scissor,\n    \t\tviewport: viewport,\n\n    \t\treset: reset\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLCapabilities( gl, extensions, parameters ) {\n\n    \tvar maxAnisotropy;\n\n    \tfunction getMaxAnisotropy() {\n\n    \t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n    \t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n    \t\t} else {\n\n    \t\t\tmaxAnisotropy = 0;\n\n    \t\t}\n\n    \t\treturn maxAnisotropy;\n\n    \t}\n\n    \tfunction getMaxPrecision( precision ) {\n\n    \t\tif ( precision === 'highp' ) {\n\n    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n    \t\t\t\treturn 'highp';\n\n    \t\t\t}\n\n    \t\t\tprecision = 'mediump';\n\n    \t\t}\n\n    \t\tif ( precision === 'mediump' ) {\n\n    \t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n    \t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n    \t\t\t\treturn 'mediump';\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn 'lowp';\n\n    \t}\n\n    \tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    \tvar maxPrecision = getMaxPrecision( precision );\n\n    \tif ( maxPrecision !== precision ) {\n\n    \t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n    \t\tprecision = maxPrecision;\n\n    \t}\n\n    \tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );\n\n    \tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n    \tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n    \tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n    \tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n    \tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    \tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n    \tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n    \tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n    \tvar vertexTextures = maxVertexTextures > 0;\n    \tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n    \tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n    \treturn {\n\n    \t\tgetMaxAnisotropy: getMaxAnisotropy,\n    \t\tgetMaxPrecision: getMaxPrecision,\n\n    \t\tprecision: precision,\n    \t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n    \t\tmaxTextures: maxTextures,\n    \t\tmaxVertexTextures: maxVertexTextures,\n    \t\tmaxTextureSize: maxTextureSize,\n    \t\tmaxCubemapSize: maxCubemapSize,\n\n    \t\tmaxAttributes: maxAttributes,\n    \t\tmaxVertexUniforms: maxVertexUniforms,\n    \t\tmaxVaryings: maxVaryings,\n    \t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n    \t\tvertexTextures: vertexTextures,\n    \t\tfloatFragmentTextures: floatFragmentTextures,\n    \t\tfloatVertexTextures: floatVertexTextures\n\n    \t};\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WebGLExtensions( gl ) {\n\n    \tvar extensions = {};\n\n    \treturn {\n\n    \t\tget: function ( name ) {\n\n    \t\t\tif ( extensions[ name ] !== undefined ) {\n\n    \t\t\t\treturn extensions[ name ];\n\n    \t\t\t}\n\n    \t\t\tvar extension;\n\n    \t\t\tswitch ( name ) {\n\n    \t\t\t\tcase 'WEBGL_depth_texture':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'EXT_texture_filter_anisotropic':\n    \t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n    \t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n    \t\t\t\t\textension = gl.getExtension( name );\n\n    \t\t\t}\n\n    \t\t\tif ( extension === null ) {\n\n    \t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n    \t\t\t}\n\n    \t\t\textensions[ name ] = extension;\n\n    \t\t\treturn extension;\n\n    \t\t}\n\n    \t};\n\n    }\n\n    function WebGLClipping() {\n\n    \tvar scope = this,\n\n    \t\tglobalState = null,\n    \t\tnumGlobalPlanes = 0,\n    \t\tlocalClippingEnabled = false,\n    \t\trenderingShadows = false,\n\n    \t\tplane = new Plane(),\n    \t\tviewNormalMatrix = new Matrix3(),\n\n    \t\tuniform = { value: null, needsUpdate: false };\n\n    \tthis.uniform = uniform;\n    \tthis.numPlanes = 0;\n\n    \tthis.init = function( planes, enableLocalClipping, camera ) {\n\n    \t\tvar enabled =\n    \t\t\tplanes.length !== 0 ||\n    \t\t\tenableLocalClipping ||\n    \t\t\t// enable state of previous frame - the clipping code has to\n    \t\t\t// run another frame in order to reset the state:\n    \t\t\tnumGlobalPlanes !== 0 ||\n    \t\t\tlocalClippingEnabled;\n\n    \t\tlocalClippingEnabled = enableLocalClipping;\n\n    \t\tglobalState = projectPlanes( planes, camera, 0 );\n    \t\tnumGlobalPlanes = planes.length;\n\n    \t\treturn enabled;\n\n    \t};\n\n    \tthis.beginShadows = function() {\n\n    \t\trenderingShadows = true;\n    \t\tprojectPlanes( null );\n\n    \t};\n\n    \tthis.endShadows = function() {\n\n    \t\trenderingShadows = false;\n    \t\tresetGlobalState();\n\n    \t};\n\n    \tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\n    \t\tif ( ! localClippingEnabled ||\n    \t\t\t\tplanes === null || planes.length === 0 ||\n    \t\t\t\trenderingShadows && ! clipShadows ) {\n    \t\t\t// there's no local clipping\n\n    \t\t\tif ( renderingShadows ) {\n    \t\t\t\t// there's no global clipping\n\n    \t\t\t\tprojectPlanes( null );\n\n    \t\t\t} else {\n\n    \t\t\t\tresetGlobalState();\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n    \t\t\t\tlGlobal = nGlobal * 4,\n\n    \t\t\t\tdstArray = cache.clippingState || null;\n\n    \t\t\tuniform.value = dstArray; // ensure unique state\n\n    \t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n    \t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n    \t\t\t\tdstArray[ i ] = globalState[ i ];\n\n    \t\t\t}\n\n    \t\t\tcache.clippingState = dstArray;\n    \t\t\tthis.numPlanes += nGlobal;\n\n    \t\t}\n\n\n    \t};\n\n    \tfunction resetGlobalState() {\n\n    \t\tif ( uniform.value !== globalState ) {\n\n    \t\t\tuniform.value = globalState;\n    \t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n    \t\t}\n\n    \t\tscope.numPlanes = numGlobalPlanes;\n\n    \t}\n\n    \tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n    \t\tvar nPlanes = planes !== null ? planes.length : 0,\n    \t\t\tdstArray = null;\n\n    \t\tif ( nPlanes !== 0 ) {\n\n    \t\t\tdstArray = uniform.value;\n\n    \t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n    \t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n    \t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n    \t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n    \t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n    \t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var i = 0, i4 = dstOffset;\n    \t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\n    \t\t\t\t\tplane.copy( planes[ i ] ).\n    \t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\n    \t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n    \t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tuniform.value = dstArray;\n    \t\t\tuniform.needsUpdate = true;\n\n    \t\t}\n\n    \t\tscope.numPlanes = nPlanes;\n    \t\treturn dstArray;\n\n    \t}\n\n    }\n\n    /**\n     * @author supereggbert / http://www.paulbrunt.co.uk/\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     * @author szimek / https://github.com/szimek/\n     * @author tschw\n     */\n\n    function WebGLRenderer( parameters ) {\n\n    \tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\n    \tparameters = parameters || {};\n\n    \tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n    \t_context = parameters.context !== undefined ? parameters.context : null,\n\n    \t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n    \t_depth = parameters.depth !== undefined ? parameters.depth : true,\n    \t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n    \t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n    \t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n    \t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n    \tvar lights = [];\n\n    \tvar opaqueObjects = [];\n    \tvar opaqueObjectsLastIndex = - 1;\n    \tvar transparentObjects = [];\n    \tvar transparentObjectsLastIndex = - 1;\n\n    \tvar morphInfluences = new Float32Array( 8 );\n\n    \tvar sprites = [];\n    \tvar lensFlares = [];\n\n    \t// public properties\n\n    \tthis.domElement = _canvas;\n    \tthis.context = null;\n\n    \t// clearing\n\n    \tthis.autoClear = true;\n    \tthis.autoClearColor = true;\n    \tthis.autoClearDepth = true;\n    \tthis.autoClearStencil = true;\n\n    \t// scene graph\n\n    \tthis.sortObjects = true;\n\n    \t// user-defined clipping\n\n    \tthis.clippingPlanes = [];\n    \tthis.localClippingEnabled = false;\n\n    \t// physically based shading\n\n    \tthis.gammaFactor = 2.0;\t// for backwards compatibility\n    \tthis.gammaInput = false;\n    \tthis.gammaOutput = false;\n\n    \t// physical lights\n\n    \tthis.physicallyCorrectLights = false;\n\n    \t// tone mapping\n\n    \tthis.toneMapping = LinearToneMapping;\n    \tthis.toneMappingExposure = 1.0;\n    \tthis.toneMappingWhitePoint = 1.0;\n\n    \t// morphs\n\n    \tthis.maxMorphTargets = 8;\n    \tthis.maxMorphNormals = 4;\n\n    \t// internal properties\n\n    \tvar _this = this,\n\n    \t// internal state cache\n\n    \t_currentProgram = null,\n    \t_currentRenderTarget = null,\n    \t_currentFramebuffer = null,\n    \t_currentMaterialId = - 1,\n    \t_currentGeometryProgram = '',\n    \t_currentCamera = null,\n\n    \t_currentScissor = new Vector4(),\n    \t_currentScissorTest = null,\n\n    \t_currentViewport = new Vector4(),\n\n    \t//\n\n    \t_usedTextureUnits = 0,\n\n    \t//\n\n    \t_clearColor = new Color( 0x000000 ),\n    \t_clearAlpha = 0,\n\n    \t_width = _canvas.width,\n    \t_height = _canvas.height,\n\n    \t_pixelRatio = 1,\n\n    \t_scissor = new Vector4( 0, 0, _width, _height ),\n    \t_scissorTest = false,\n\n    \t_viewport = new Vector4( 0, 0, _width, _height ),\n\n    \t// frustum\n\n    \t_frustum = new Frustum(),\n\n    \t// clipping\n\n    \t_clipping = new WebGLClipping(),\n    \t_clippingEnabled = false,\n    \t_localClippingEnabled = false,\n\n    \t_sphere = new Sphere(),\n\n    \t// camera matrices cache\n\n    \t_projScreenMatrix = new Matrix4(),\n\n    \t_vector3 = new Vector3(),\n\n    \t// light arrays cache\n\n    \t_lights = {\n\n    \t\thash: '',\n\n    \t\tambient: [ 0, 0, 0 ],\n    \t\tdirectional: [],\n    \t\tdirectionalShadowMap: [],\n    \t\tdirectionalShadowMatrix: [],\n    \t\tspot: [],\n    \t\tspotShadowMap: [],\n    \t\tspotShadowMatrix: [],\n    \t\tpoint: [],\n    \t\tpointShadowMap: [],\n    \t\tpointShadowMatrix: [],\n    \t\themi: [],\n\n    \t\tshadows: []\n\n    \t},\n\n    \t// info\n\n    \t_infoRender = {\n\n    \t\tcalls: 0,\n    \t\tvertices: 0,\n    \t\tfaces: 0,\n    \t\tpoints: 0\n\n    \t};\n\n    \tthis.info = {\n\n    \t\trender: _infoRender,\n    \t\tmemory: {\n\n    \t\t\tgeometries: 0,\n    \t\t\ttextures: 0\n\n    \t\t},\n    \t\tprograms: null\n\n    \t};\n\n\n    \t// initialize\n\n    \tvar _gl;\n\n    \ttry {\n\n    \t\tvar attributes = {\n    \t\t\talpha: _alpha,\n    \t\t\tdepth: _depth,\n    \t\t\tstencil: _stencil,\n    \t\t\tantialias: _antialias,\n    \t\t\tpremultipliedAlpha: _premultipliedAlpha,\n    \t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n    \t\t};\n\n    \t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\n    \t\tif ( _gl === null ) {\n\n    \t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n    \t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n    \t\t\t} else {\n\n    \t\t\t\tthrow 'Error creating WebGL context.';\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n    \t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n    \t\t\t_gl.getShaderPrecisionFormat = function () {\n\n    \t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n    \t\t\t};\n\n    \t\t}\n\n    \t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\n    \t} catch ( error ) {\n\n    \t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n    \t}\n\n    \tvar extensions = new WebGLExtensions( _gl );\n\n    \textensions.get( 'WEBGL_depth_texture' );\n    \textensions.get( 'OES_texture_float' );\n    \textensions.get( 'OES_texture_float_linear' );\n    \textensions.get( 'OES_texture_half_float' );\n    \textensions.get( 'OES_texture_half_float_linear' );\n    \textensions.get( 'OES_standard_derivatives' );\n    \textensions.get( 'ANGLE_instanced_arrays' );\n\n    \tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\n    \t\tBufferGeometry.MaxIndex = 4294967296;\n\n    \t}\n\n    \tvar capabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n    \tvar state = new WebGLState( _gl, extensions, paramThreeToGL );\n    \tvar properties = new WebGLProperties();\n    \tvar textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n    \tvar objects = new WebGLObjects( _gl, properties, this.info );\n    \tvar programCache = new WebGLPrograms( this, capabilities );\n    \tvar lightCache = new WebGLLights();\n\n    \tthis.info.programs = programCache.programs;\n\n    \tvar bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n    \tvar indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n    \t//\n\n    \tvar backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n    \tvar backgroundCamera2 = new PerspectiveCamera();\n    \tvar backgroundPlaneMesh = new Mesh(\n    \t\tnew PlaneBufferGeometry( 2, 2 ),\n    \t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n    \t);\n    \tvar backgroundBoxShader = ShaderLib[ 'cube' ];\n    \tvar backgroundBoxMesh = new Mesh(\n    \t\tnew BoxBufferGeometry( 5, 5, 5 ),\n    \t\tnew ShaderMaterial( {\n    \t\t\tuniforms: backgroundBoxShader.uniforms,\n    \t\t\tvertexShader: backgroundBoxShader.vertexShader,\n    \t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n    \t\t\tside: BackSide,\n    \t\t\tdepthTest: false,\n    \t\t\tdepthWrite: false,\n    \t\t\tfog: false\n    \t\t} )\n    \t);\n\n    \t//\n\n    \tfunction getTargetPixelRatio() {\n\n    \t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n    \t}\n\n    \tfunction glClearColor( r, g, b, a ) {\n\n    \t\tif ( _premultipliedAlpha === true ) {\n\n    \t\t\tr *= a; g *= a; b *= a;\n\n    \t\t}\n\n    \t\tstate.clearColor( r, g, b, a );\n\n    \t}\n\n    \tfunction setDefaultGLState() {\n\n    \t\tstate.init();\n\n    \t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n    \t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t}\n\n    \tfunction resetGLState() {\n\n    \t\t_currentProgram = null;\n    \t\t_currentCamera = null;\n\n    \t\t_currentGeometryProgram = '';\n    \t\t_currentMaterialId = - 1;\n\n    \t\tstate.reset();\n\n    \t}\n\n    \tsetDefaultGLState();\n\n    \tthis.context = _gl;\n    \tthis.capabilities = capabilities;\n    \tthis.extensions = extensions;\n    \tthis.properties = properties;\n    \tthis.state = state;\n\n    \t// shadow map\n\n    \tvar shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );\n\n    \tthis.shadowMap = shadowMap;\n\n\n    \t// Plugins\n\n    \tvar spritePlugin = new SpritePlugin( this, sprites );\n    \tvar lensFlarePlugin = new LensFlarePlugin( this, lensFlares );\n\n    \t// API\n\n    \tthis.getContext = function () {\n\n    \t\treturn _gl;\n\n    \t};\n\n    \tthis.getContextAttributes = function () {\n\n    \t\treturn _gl.getContextAttributes();\n\n    \t};\n\n    \tthis.forceContextLoss = function () {\n\n    \t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\n    \t};\n\n    \tthis.getMaxAnisotropy = function () {\n\n    \t\treturn capabilities.getMaxAnisotropy();\n\n    \t};\n\n    \tthis.getPrecision = function () {\n\n    \t\treturn capabilities.precision;\n\n    \t};\n\n    \tthis.getPixelRatio = function () {\n\n    \t\treturn _pixelRatio;\n\n    \t};\n\n    \tthis.setPixelRatio = function ( value ) {\n\n    \t\tif ( value === undefined ) return;\n\n    \t\t_pixelRatio = value;\n\n    \t\tthis.setSize( _viewport.z, _viewport.w, false );\n\n    \t};\n\n    \tthis.getSize = function () {\n\n    \t\treturn {\n    \t\t\twidth: _width,\n    \t\t\theight: _height\n    \t\t};\n\n    \t};\n\n    \tthis.setSize = function ( width, height, updateStyle ) {\n\n    \t\t_width = width;\n    \t\t_height = height;\n\n    \t\t_canvas.width = width * _pixelRatio;\n    \t\t_canvas.height = height * _pixelRatio;\n\n    \t\tif ( updateStyle !== false ) {\n\n    \t\t\t_canvas.style.width = width + 'px';\n    \t\t\t_canvas.style.height = height + 'px';\n\n    \t\t}\n\n    \t\tthis.setViewport( 0, 0, width, height );\n\n    \t};\n\n    \tthis.setViewport = function ( x, y, width, height ) {\n\n    \t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\n    \t};\n\n    \tthis.setScissor = function ( x, y, width, height ) {\n\n    \t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\n    \t};\n\n    \tthis.setScissorTest = function ( boolean ) {\n\n    \t\tstate.setScissorTest( _scissorTest = boolean );\n\n    \t};\n\n    \t// Clearing\n\n    \tthis.getClearColor = function () {\n\n    \t\treturn _clearColor;\n\n    \t};\n\n    \tthis.setClearColor = function ( color, alpha ) {\n\n    \t\t_clearColor.set( color );\n\n    \t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t};\n\n    \tthis.getClearAlpha = function () {\n\n    \t\treturn _clearAlpha;\n\n    \t};\n\n    \tthis.setClearAlpha = function ( alpha ) {\n\n    \t\t_clearAlpha = alpha;\n\n    \t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t};\n\n    \tthis.clear = function ( color, depth, stencil ) {\n\n    \t\tvar bits = 0;\n\n    \t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n    \t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n    \t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n    \t\t_gl.clear( bits );\n\n    \t};\n\n    \tthis.clearColor = function () {\n\n    \t\tthis.clear( true, false, false );\n\n    \t};\n\n    \tthis.clearDepth = function () {\n\n    \t\tthis.clear( false, true, false );\n\n    \t};\n\n    \tthis.clearStencil = function () {\n\n    \t\tthis.clear( false, false, true );\n\n    \t};\n\n    \tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n    \t\tthis.setRenderTarget( renderTarget );\n    \t\tthis.clear( color, depth, stencil );\n\n    \t};\n\n    \t// Reset\n\n    \tthis.resetGLState = resetGLState;\n\n    \tthis.dispose = function() {\n\n    \t\ttransparentObjects = [];\n    \t\ttransparentObjectsLastIndex = -1;\n    \t\topaqueObjects = [];\n    \t\topaqueObjectsLastIndex = -1;\n\n    \t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\n    \t};\n\n    \t// Events\n\n    \tfunction onContextLost( event ) {\n\n    \t\tevent.preventDefault();\n\n    \t\tresetGLState();\n    \t\tsetDefaultGLState();\n\n    \t\tproperties.clear();\n\n    \t}\n\n    \tfunction onMaterialDispose( event ) {\n\n    \t\tvar material = event.target;\n\n    \t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n    \t\tdeallocateMaterial( material );\n\n    \t}\n\n    \t// Buffer deallocation\n\n    \tfunction deallocateMaterial( material ) {\n\n    \t\treleaseMaterialProgramReference( material );\n\n    \t\tproperties.delete( material );\n\n    \t}\n\n\n    \tfunction releaseMaterialProgramReference( material ) {\n\n    \t\tvar programInfo = properties.get( material ).program;\n\n    \t\tmaterial.program = undefined;\n\n    \t\tif ( programInfo !== undefined ) {\n\n    \t\t\tprogramCache.releaseProgram( programInfo );\n\n    \t\t}\n\n    \t}\n\n    \t// Buffer rendering\n\n    \tthis.renderBufferImmediate = function ( object, program, material ) {\n\n    \t\tstate.initAttributes();\n\n    \t\tvar buffers = properties.get( object );\n\n    \t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n    \t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n    \t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n    \t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n    \t\tvar attributes = program.getAttributes();\n\n    \t\tif ( object.hasPositions ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.position );\n    \t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasNormals ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n    \t\t\tif ( ! material.isMeshPhongMaterial &&\n    \t\t\t     ! material.isMeshStandardMaterial &&\n    \t\t\t       material.shading === FlatShading ) {\n\n    \t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n    \t\t\t\t\tvar array = object.normalArray;\n\n    \t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n    \t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n    \t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n    \t\t\t\t\tarray[ i + 0 ] = nx;\n    \t\t\t\t\tarray[ i + 1 ] = ny;\n    \t\t\t\t\tarray[ i + 2 ] = nz;\n\n    \t\t\t\t\tarray[ i + 3 ] = nx;\n    \t\t\t\t\tarray[ i + 4 ] = ny;\n    \t\t\t\t\tarray[ i + 5 ] = nz;\n\n    \t\t\t\t\tarray[ i + 6 ] = nx;\n    \t\t\t\t\tarray[ i + 7 ] = ny;\n    \t\t\t\t\tarray[ i + 8 ] = nz;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.normal );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasUvs && material.map ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.uv );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\n    \t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n    \t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n    \t\t\tstate.enableAttribute( attributes.color );\n\n    \t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n    \t\t}\n\n    \t\tstate.disableUnusedAttributes();\n\n    \t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n    \t\tobject.count = 0;\n\n    \t};\n\n    \tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n    \t\tsetMaterial( material );\n\n    \t\tvar program = setProgram( camera, fog, material, object );\n\n    \t\tvar updateBuffers = false;\n    \t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\n    \t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n    \t\t\t_currentGeometryProgram = geometryProgram;\n    \t\t\tupdateBuffers = true;\n\n    \t\t}\n\n    \t\t// morph targets\n\n    \t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\n    \t\tif ( morphTargetInfluences !== undefined ) {\n\n    \t\t\tvar activeInfluences = [];\n\n    \t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\n    \t\t\t\tvar influence = morphTargetInfluences[ i ];\n    \t\t\t\tactiveInfluences.push( [ influence, i ] );\n\n    \t\t\t}\n\n    \t\t\tactiveInfluences.sort( absNumericalSort );\n\n    \t\t\tif ( activeInfluences.length > 8 ) {\n\n    \t\t\t\tactiveInfluences.length = 8;\n\n    \t\t\t}\n\n    \t\t\tvar morphAttributes = geometry.morphAttributes;\n\n    \t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\n    \t\t\t\tvar influence = activeInfluences[ i ];\n    \t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\n    \t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\n    \t\t\t\t\tvar index = influence[ 1 ];\n\n    \t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n    \t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n    \t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tfor ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {\n\n    \t\t\t\tmorphInfluences[ i ] = 0.0;\n\n    \t\t\t}\n\n    \t\t\tprogram.getUniforms().setValue(\n    \t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\n    \t\t\tupdateBuffers = true;\n\n    \t\t}\n\n    \t\t//\n\n    \t\tvar index = geometry.index;\n    \t\tvar position = geometry.attributes.position;\n    \t\tvar rangeFactor = 1;\n\n    \t\tif ( material.wireframe === true ) {\n\n    \t\t\tindex = objects.getWireframeAttribute( geometry );\n    \t\t\trangeFactor = 2;\n\n    \t\t}\n\n    \t\tvar renderer;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\trenderer = indexedBufferRenderer;\n    \t\t\trenderer.setIndex( index );\n\n    \t\t} else {\n\n    \t\t\trenderer = bufferRenderer;\n\n    \t\t}\n\n    \t\tif ( updateBuffers ) {\n\n    \t\t\tsetupVertexAttributes( material, program, geometry );\n\n    \t\t\tif ( index !== null ) {\n\n    \t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t//\n\n    \t\tvar dataCount = 0;\n\n    \t\tif ( index !== null ) {\n\n    \t\t\tdataCount = index.count;\n\n    \t\t} else if ( position !== undefined ) {\n\n    \t\t\tdataCount = position.count;\n\n    \t\t}\n\n    \t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n    \t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n    \t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n    \t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n    \t\tvar drawStart = Math.max( rangeStart, groupStart );\n    \t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n    \t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n    \t\tif ( drawCount === 0 ) return;\n\n    \t\t//\n\n    \t\tif ( object.isMesh ) {\n\n    \t\t\tif ( material.wireframe === true ) {\n\n    \t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n    \t\t\t\trenderer.setMode( _gl.LINES );\n\n    \t\t\t} else {\n\n    \t\t\t\tswitch ( object.drawMode ) {\n\n    \t\t\t\t\tcase TrianglesDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase TriangleStripDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase TriangleFanDrawMode:\n    \t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n\n    \t\t} else if ( object.isLine ) {\n\n    \t\t\tvar lineWidth = material.linewidth;\n\n    \t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n    \t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n    \t\t\tif ( object.isLineSegments ) {\n\n    \t\t\t\trenderer.setMode( _gl.LINES );\n\n    \t\t\t} else {\n\n    \t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n    \t\t\t}\n\n    \t\t} else if ( object.isPoints ) {\n\n    \t\t\trenderer.setMode( _gl.POINTS );\n\n    \t\t}\n\n    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n    \t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n    \t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\trenderer.render( drawStart, drawCount );\n\n    \t\t}\n\n    \t};\n\n    \tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n    \t\tvar extension;\n\n    \t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n    \t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\n    \t\t\tif ( extension === null ) {\n\n    \t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( startIndex === undefined ) startIndex = 0;\n\n    \t\tstate.initAttributes();\n\n    \t\tvar geometryAttributes = geometry.attributes;\n\n    \t\tvar programAttributes = program.getAttributes();\n\n    \t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n    \t\tfor ( var name in programAttributes ) {\n\n    \t\t\tvar programAttribute = programAttributes[ name ];\n\n    \t\t\tif ( programAttribute >= 0 ) {\n\n    \t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n    \t\t\t\tif ( geometryAttribute !== undefined ) {\n\n    \t\t\t\t\tvar type = _gl.FLOAT;\n    \t\t\t\t\tvar array = geometryAttribute.array;\n    \t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\n    \t\t\t\t\tif ( array instanceof Float32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.FLOAT;\n\n    \t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\n    \t\t\t\t\t\tconsole.warn( \"Unsupported data buffer format: Float64Array\" );\n\n    \t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\n    \t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\n    \t\t\t\t\t\ttype = _gl.SHORT;\n\n    \t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\n    \t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\n    \t\t\t\t\t\ttype = _gl.INT;\n\n    \t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\n    \t\t\t\t\t\ttype = _gl.BYTE;\n\n    \t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\n    \t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tvar size = geometryAttribute.itemSize;\n    \t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\n    \t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInterleavedBufferAttribute ) {\n\n    \t\t\t\t\t\tvar data = geometryAttribute.data;\n    \t\t\t\t\t\tvar stride = data.stride;\n    \t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n    \t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\n    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tif ( geometryAttribute && geometryAttribute.isInstancedBufferAttribute ) {\n\n    \t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\n    \t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n    \t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n    \t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n    \t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n    \t\t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\t\tswitch ( value.length ) {\n\n    \t\t\t\t\t\t\tcase 2:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase 3:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase 4:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n    \t\t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tdefault:\n    \t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tstate.disableUnusedAttributes();\n\n    \t}\n\n    \t// Sorting\n\n    \tfunction absNumericalSort( a, b ) {\n\n    \t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\n    \t}\n\n    \tfunction painterSortStable( a, b ) {\n\n    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n    \t\t} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {\n\n    \t\t\treturn a.material.program.id - b.material.program.id;\n\n    \t\t} else if ( a.material.id !== b.material.id ) {\n\n    \t\t\treturn a.material.id - b.material.id;\n\n    \t\t} else if ( a.z !== b.z ) {\n\n    \t\t\treturn a.z - b.z;\n\n    \t\t} else {\n\n    \t\t\treturn a.id - b.id;\n\n    \t\t}\n\n    \t}\n\n    \tfunction reversePainterSortStable( a, b ) {\n\n    \t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n    \t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n    \t\t} if ( a.z !== b.z ) {\n\n    \t\t\treturn b.z - a.z;\n\n    \t\t} else {\n\n    \t\t\treturn a.id - b.id;\n\n    \t\t}\n\n    \t}\n\n    \t// Rendering\n\n    \tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n    \t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar fog = scene.fog;\n\n    \t\t// reset caching for this frame\n\n    \t\t_currentGeometryProgram = '';\n    \t\t_currentMaterialId = - 1;\n    \t\t_currentCamera = null;\n\n    \t\t// update scene graph\n\n    \t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n    \t\t// update camera matrices and frustum\n\n    \t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n    \t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n    \t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n    \t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n    \t\tlights.length = 0;\n\n    \t\topaqueObjectsLastIndex = - 1;\n    \t\ttransparentObjectsLastIndex = - 1;\n\n    \t\tsprites.length = 0;\n    \t\tlensFlares.length = 0;\n\n    \t\t_localClippingEnabled = this.localClippingEnabled;\n    \t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n    \t\tprojectObject( scene, camera );\n\n    \t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n    \t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\n    \t\tif ( _this.sortObjects === true ) {\n\n    \t\t\topaqueObjects.sort( painterSortStable );\n    \t\t\ttransparentObjects.sort( reversePainterSortStable );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n    \t\tsetupShadows( lights );\n\n    \t\tshadowMap.render( scene, camera );\n\n    \t\tsetupLights( lights, camera );\n\n    \t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n    \t\t//\n\n    \t\t_infoRender.calls = 0;\n    \t\t_infoRender.vertices = 0;\n    \t\t_infoRender.faces = 0;\n    \t\t_infoRender.points = 0;\n\n    \t\tif ( renderTarget === undefined ) {\n\n    \t\t\trenderTarget = null;\n\n    \t\t}\n\n    \t\tthis.setRenderTarget( renderTarget );\n\n    \t\t//\n\n    \t\tvar background = scene.background;\n\n    \t\tif ( background === null ) {\n\n    \t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    \t\t} else if ( background && background.isColor ) {\n\n    \t\t\tglClearColor( background.r, background.g, background.b, 1 );\n    \t\t\tforceClear = true;\n\n    \t\t}\n\n    \t\tif ( this.autoClear || forceClear ) {\n\n    \t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\n    \t\t}\n\n    \t\tif ( background && background.isCubeTexture ) {\n\n    \t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\n    \t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n    \t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\n    \t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n    \t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\n    \t\t\tobjects.update( backgroundBoxMesh );\n\n    \t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\n    \t\t} else if ( background && background.isTexture ) {\n\n    \t\t\tbackgroundPlaneMesh.material.map = background;\n\n    \t\t\tobjects.update( backgroundPlaneMesh );\n\n    \t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( scene.overrideMaterial ) {\n\n    \t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n    \t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n    \t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\n    \t\t} else {\n\n    \t\t\t// opaque pass (front-to-back order)\n\n    \t\t\tstate.setBlending( NoBlending );\n    \t\t\trenderObjects( opaqueObjects, camera, fog );\n\n    \t\t\t// transparent pass (back-to-front order)\n\n    \t\t\trenderObjects( transparentObjects, camera, fog );\n\n    \t\t}\n\n    \t\t// custom render plugins (post pass)\n\n    \t\tspritePlugin.render( scene, camera );\n    \t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\n    \t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n    \t\tif ( renderTarget ) {\n\n    \t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n    \t\t}\n\n    \t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n    \t\tstate.setDepthTest( true );\n    \t\tstate.setDepthWrite( true );\n    \t\tstate.setColorWrite( true );\n\n    \t\t// _gl.finish();\n\n    \t};\n\n    \tfunction pushRenderItem( object, geometry, material, z, group ) {\n\n    \t\tvar array, index;\n\n    \t\t// allocate the next position in the appropriate array\n\n    \t\tif ( material.transparent ) {\n\n    \t\t\tarray = transparentObjects;\n    \t\t\tindex = ++ transparentObjectsLastIndex;\n\n    \t\t} else {\n\n    \t\t\tarray = opaqueObjects;\n    \t\t\tindex = ++ opaqueObjectsLastIndex;\n\n    \t\t}\n\n    \t\t// recycle existing render item or grow the array\n\n    \t\tvar renderItem = array[ index ];\n\n    \t\tif ( renderItem !== undefined ) {\n\n    \t\t\trenderItem.id = object.id;\n    \t\t\trenderItem.object = object;\n    \t\t\trenderItem.geometry = geometry;\n    \t\t\trenderItem.material = material;\n    \t\t\trenderItem.z = _vector3.z;\n    \t\t\trenderItem.group = group;\n\n    \t\t} else {\n\n    \t\t\trenderItem = {\n    \t\t\t\tid: object.id,\n    \t\t\t\tobject: object,\n    \t\t\t\tgeometry: geometry,\n    \t\t\t\tmaterial: material,\n    \t\t\t\tz: _vector3.z,\n    \t\t\t\tgroup: group\n    \t\t\t};\n\n    \t\t\t// assert( index === array.length );\n    \t\t\tarray.push( renderItem );\n\n    \t\t}\n\n    \t}\n\n    \t// TODO Duplicated code (Frustum)\n\n    \tfunction isObjectViewable( object ) {\n\n    \t\tvar geometry = object.geometry;\n\n    \t\tif ( geometry.boundingSphere === null )\n    \t\t\tgeometry.computeBoundingSphere();\n\n    \t\t_sphere.copy( geometry.boundingSphere ).\n    \t\t\tapplyMatrix4( object.matrixWorld );\n\n    \t\treturn isSphereViewable( _sphere );\n\n    \t}\n\n    \tfunction isSpriteViewable( sprite ) {\n\n    \t\t_sphere.center.set( 0, 0, 0 );\n    \t\t_sphere.radius = 0.7071067811865476;\n    \t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n    \t\treturn isSphereViewable( _sphere );\n\n    \t}\n\n    \tfunction isSphereViewable( sphere ) {\n\n    \t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n    \t\tvar numPlanes = _clipping.numPlanes;\n\n    \t\tif ( numPlanes === 0 ) return true;\n\n    \t\tvar planes = _this.clippingPlanes,\n\n    \t\t\tcenter = sphere.center,\n    \t\t\tnegRad = - sphere.radius,\n    \t\t\ti = 0;\n\n    \t\tdo {\n\n    \t\t\t// out when deeper than radius in the negative halfspace\n    \t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n    \t\t} while ( ++ i !== numPlanes );\n\n    \t\treturn true;\n\n    \t}\n\n    \tfunction projectObject( object, camera ) {\n\n    \t\tif ( object.visible === false ) return;\n\n    \t\tvar visible = ( object.layers.mask & camera.layers.mask ) !== 0;\n\n    \t\tif ( visible ) {\n\n    \t\t\tif ( object.isLight ) {\n\n    \t\t\t\tlights.push( object );\n\n    \t\t\t} else if ( object.isSprite ) {\n\n    \t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\n    \t\t\t\t\tsprites.push( object );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( object.isLensFlare ) {\n\n    \t\t\t\tlensFlares.push( object );\n\n    \t\t\t} else if ( object.isImmediateRenderObject ) {\n\n    \t\t\t\tif ( _this.sortObjects === true ) {\n\n    \t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n    \t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n    \t\t\t\t}\n\n    \t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\n    \t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n    \t\t\t\tif ( object.isSkinnedMesh ) {\n\n    \t\t\t\t\tobject.skeleton.update();\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\n    \t\t\t\t\tvar material = object.material;\n\n    \t\t\t\t\tif ( material.visible === true ) {\n\n    \t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n    \t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\tvar geometry = objects.update( object );\n\n    \t\t\t\t\t\tif ( material.isMultiMaterial ) {\n\n    \t\t\t\t\t\t\tvar groups = geometry.groups;\n    \t\t\t\t\t\t\tvar materials = material.materials;\n\n    \t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\t\t\t\t\t\t\tvar group = groups[ i ];\n    \t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n    \t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n    \t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tprojectObject( children[ i ], camera );\n\n    \t\t}\n\n    \t}\n\n    \tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\n    \t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n    \t\t\tvar renderItem = renderList[ i ];\n\n    \t\t\tvar object = renderItem.object;\n    \t\t\tvar geometry = renderItem.geometry;\n    \t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n    \t\t\tvar group = renderItem.group;\n\n    \t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n    \t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n    \t\t\tif ( object.isImmediateRenderObject ) {\n\n    \t\t\t\tsetMaterial( material );\n\n    \t\t\t\tvar program = setProgram( camera, fog, material, object );\n\n    \t\t\t\t_currentGeometryProgram = '';\n\n    \t\t\t\tobject.render( function ( object ) {\n\n    \t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n    \t\t\t\t} );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( object.onBeforeRender !== null ) object.onBeforeRender();\n\n    \t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tfunction initMaterial( material, fog, object ) {\n\n    \t\tvar materialProperties = properties.get( material );\n\n    \t\tvar parameters = programCache.getParameters(\n    \t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\n    \t\tvar code = programCache.getProgramCode( material, parameters );\n\n    \t\tvar program = materialProperties.program;\n    \t\tvar programChange = true;\n\n    \t\tif ( program === undefined ) {\n\n    \t\t\t// new material\n    \t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n    \t\t} else if ( program.code !== code ) {\n\n    \t\t\t// changed glsl or parameters\n    \t\t\treleaseMaterialProgramReference( material );\n\n    \t\t} else if ( parameters.shaderID !== undefined ) {\n\n    \t\t\t// same glsl and uniform list\n    \t\t\treturn;\n\n    \t\t} else {\n\n    \t\t\t// only rebuild uniform list\n    \t\t\tprogramChange = false;\n\n    \t\t}\n\n    \t\tif ( programChange ) {\n\n    \t\t\tif ( parameters.shaderID ) {\n\n    \t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n    \t\t\t\tmaterialProperties.__webglShader = {\n    \t\t\t\t\tname: material.type,\n    \t\t\t\t\tuniforms: exports.UniformsUtils.clone( shader.uniforms ),\n    \t\t\t\t\tvertexShader: shader.vertexShader,\n    \t\t\t\t\tfragmentShader: shader.fragmentShader\n    \t\t\t\t};\n\n    \t\t\t} else {\n\n    \t\t\t\tmaterialProperties.__webglShader = {\n    \t\t\t\t\tname: material.type,\n    \t\t\t\t\tuniforms: material.uniforms,\n    \t\t\t\t\tvertexShader: material.vertexShader,\n    \t\t\t\t\tfragmentShader: material.fragmentShader\n    \t\t\t\t};\n\n    \t\t\t}\n\n    \t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\n    \t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\n    \t\t\tmaterialProperties.program = program;\n    \t\t\tmaterial.program = program;\n\n    \t\t}\n\n    \t\tvar attributes = program.getAttributes();\n\n    \t\tif ( material.morphTargets ) {\n\n    \t\t\tmaterial.numSupportedMorphTargets = 0;\n\n    \t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n    \t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\n    \t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.morphNormals ) {\n\n    \t\t\tmaterial.numSupportedMorphNormals = 0;\n\n    \t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n    \t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\n    \t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\n    \t\tif ( ! material.isShaderMaterial &&\n    \t\t     ! material.isRawShaderMaterial ||\n    \t\t       material.clipping === true ) {\n\n    \t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n    \t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n    \t\t}\n\n    \t\tmaterialProperties.fog = fog;\n\n    \t\t// store the light setup it was created for\n\n    \t\tmaterialProperties.lightsHash = _lights.hash;\n\n    \t\tif ( material.lights ) {\n\n    \t\t\t// wire up the material to this renderer's lighting state\n\n    \t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n    \t\t\tuniforms.directionalLights.value = _lights.directional;\n    \t\t\tuniforms.spotLights.value = _lights.spot;\n    \t\t\tuniforms.pointLights.value = _lights.point;\n    \t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\n    \t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n    \t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n    \t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n    \t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n    \t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n    \t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\n    \t\t}\n\n    \t\tvar progUniforms = materialProperties.program.getUniforms(),\n    \t\t\tuniformsList =\n    \t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n    \t\tmaterialProperties.uniformsList = uniformsList;\n    \t\tmaterialProperties.dynamicUniforms =\n    \t\t\t\tWebGLUniforms.splitDynamic( uniformsList, uniforms );\n\n    \t}\n\n    \tfunction setMaterial( material ) {\n\n    \t\tmaterial.side === DoubleSide\n    \t\t\t? state.disable( _gl.CULL_FACE )\n    \t\t\t: state.enable( _gl.CULL_FACE );\n\n    \t\tstate.setFlipSided( material.side === BackSide );\n\n    \t\tmaterial.transparent === true\n    \t\t\t? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n    \t\t\t: state.setBlending( NoBlending );\n\n    \t\tstate.setDepthFunc( material.depthFunc );\n    \t\tstate.setDepthTest( material.depthTest );\n    \t\tstate.setDepthWrite( material.depthWrite );\n    \t\tstate.setColorWrite( material.colorWrite );\n    \t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n    \t}\n\n    \tfunction setProgram( camera, fog, material, object ) {\n\n    \t\t_usedTextureUnits = 0;\n\n    \t\tvar materialProperties = properties.get( material );\n\n    \t\tif ( _clippingEnabled ) {\n\n    \t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n    \t\t\t\tvar useCache =\n    \t\t\t\t\t\tcamera === _currentCamera &&\n    \t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n    \t\t\t\t// we might want to call this function with some ClippingGroup\n    \t\t\t\t// object instead of the material, once it becomes feasible\n    \t\t\t\t// (#8465, #8379)\n    \t\t\t\t_clipping.setState(\n    \t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n    \t\t\t\t\t\tcamera, materialProperties, useCache );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.needsUpdate === false ) {\n\n    \t\t\tif ( materialProperties.program === undefined ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n    \t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\n    \t\t\t\tmaterial.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( material.needsUpdate ) {\n\n    \t\t\tinitMaterial( material, fog, object );\n    \t\t\tmaterial.needsUpdate = false;\n\n    \t\t}\n\n    \t\tvar refreshProgram = false;\n    \t\tvar refreshMaterial = false;\n    \t\tvar refreshLights = false;\n\n    \t\tvar program = materialProperties.program,\n    \t\t\tp_uniforms = program.getUniforms(),\n    \t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\n    \t\tif ( program.id !== _currentProgram ) {\n\n    \t\t\t_gl.useProgram( program.program );\n    \t\t\t_currentProgram = program.id;\n\n    \t\t\trefreshProgram = true;\n    \t\t\trefreshMaterial = true;\n    \t\t\trefreshLights = true;\n\n    \t\t}\n\n    \t\tif ( material.id !== _currentMaterialId ) {\n\n    \t\t\t_currentMaterialId = material.id;\n\n    \t\t\trefreshMaterial = true;\n\n    \t\t}\n\n    \t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n    \t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\n    \t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n    \t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n    \t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n    \t\t\t}\n\n\n    \t\t\tif ( camera !== _currentCamera ) {\n\n    \t\t\t\t_currentCamera = camera;\n\n    \t\t\t\t// lighting uniforms depend on the camera so enforce an update\n    \t\t\t\t// now, in case this material supports lights - or later, when\n    \t\t\t\t// the next material that does gets activated:\n\n    \t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n    \t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n    \t\t\t}\n\n    \t\t\t// load material specific uniforms\n    \t\t\t// (shader material also gets them for the sake of genericity)\n\n    \t\t\tif ( material.isShaderMaterial ||\n    \t\t\t     material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.envMap ) {\n\n    \t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n    \t\t\t\tif ( uCamPos !== undefined ) {\n\n    \t\t\t\t\tuCamPos.setValue( _gl,\n    \t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshLambertMaterial ||\n    \t\t\t     material.isMeshBasicMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.isShaderMaterial ||\n    \t\t\t     material.skinning ) {\n\n    \t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n    \t\t\t}\n\n    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n    \t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\n    \t\t}\n\n    \t\t// skinning uniforms must be set even if material didn't change\n    \t\t// auto-setting of texture unit for bone texture must go before other textures\n    \t\t// not sure why, but otherwise weird things happen\n\n    \t\tif ( material.skinning ) {\n\n    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n    \t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n    \t\t\tvar skeleton = object.skeleton;\n\n    \t\t\tif ( skeleton ) {\n\n    \t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n    \t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( refreshMaterial ) {\n\n    \t\t\tif ( material.lights ) {\n\n    \t\t\t\t// the current material requires lighting info\n\n    \t\t\t\t// note: all lighting uniforms are always set correctly\n    \t\t\t\t// they simply reference the renderer's state for their\n    \t\t\t\t// values\n    \t\t\t\t//\n    \t\t\t\t// use the current material's .needsUpdate flags to set\n    \t\t\t\t// the GL state when required\n\n    \t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n    \t\t\t}\n\n    \t\t\t// refresh uniforms common to several materials\n\n    \t\t\tif ( fog && material.fog ) {\n\n    \t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n    \t\t\t}\n\n    \t\t\tif ( material.isMeshBasicMaterial ||\n    \t\t\t     material.isMeshLambertMaterial ||\n    \t\t\t     material.isMeshPhongMaterial ||\n    \t\t\t     material.isMeshStandardMaterial ||\n    \t\t\t     material.isMeshDepthMaterial ) {\n\n    \t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n    \t\t\t}\n\n    \t\t\t// refresh single material specific uniforms\n\n    \t\t\tif ( material.isLineBasicMaterial ) {\n\n    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n    \t\t\t} else if ( material.isLineDashedMaterial ) {\n\n    \t\t\t\trefreshUniformsLine( m_uniforms, material );\n    \t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n    \t\t\t} else if ( material.isPointsMaterial ) {\n\n    \t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n    \t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n    \t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshPhysicalMaterial ) {\n\n    \t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n    \t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n    \t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n    \t\t\t\tif ( material.displacementMap ) {\n\n    \t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n    \t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n    \t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n    \t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n    \t\t\t}\n\n    \t\t\tWebGLUniforms.upload(\n    \t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n    \t\t}\n\n\n    \t\t// common matrices\n\n    \t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n    \t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n    \t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\n    \t\t// dynamic uniforms\n\n    \t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\n    \t\tif ( dynUniforms !== null ) {\n\n    \t\t\tWebGLUniforms.evalDynamic( dynUniforms, m_uniforms, object, material, camera );\n    \t\t\tWebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\n    \t\t}\n\n    \t\treturn program;\n\n    \t}\n\n    \t// Uniforms (refresh uniforms objects)\n\n    \tfunction refreshUniformsCommon( uniforms, material ) {\n\n    \t\tuniforms.opacity.value = material.opacity;\n\n    \t\tuniforms.diffuse.value = material.color;\n\n    \t\tif ( material.emissive ) {\n\n    \t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n    \t\t}\n\n    \t\tuniforms.map.value = material.map;\n    \t\tuniforms.specularMap.value = material.specularMap;\n    \t\tuniforms.alphaMap.value = material.alphaMap;\n\n    \t\tif ( material.aoMap ) {\n\n    \t\t\tuniforms.aoMap.value = material.aoMap;\n    \t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n    \t\t}\n\n    \t\t// uv repeat and offset setting priorities\n    \t\t// 1. color map\n    \t\t// 2. specular map\n    \t\t// 3. normal map\n    \t\t// 4. bump map\n    \t\t// 5. alpha map\n    \t\t// 6. emissive map\n\n    \t\tvar uvScaleMap;\n\n    \t\tif ( material.map ) {\n\n    \t\t\tuvScaleMap = material.map;\n\n    \t\t} else if ( material.specularMap ) {\n\n    \t\t\tuvScaleMap = material.specularMap;\n\n    \t\t} else if ( material.displacementMap ) {\n\n    \t\t\tuvScaleMap = material.displacementMap;\n\n    \t\t} else if ( material.normalMap ) {\n\n    \t\t\tuvScaleMap = material.normalMap;\n\n    \t\t} else if ( material.bumpMap ) {\n\n    \t\t\tuvScaleMap = material.bumpMap;\n\n    \t\t} else if ( material.roughnessMap ) {\n\n    \t\t\tuvScaleMap = material.roughnessMap;\n\n    \t\t} else if ( material.metalnessMap ) {\n\n    \t\t\tuvScaleMap = material.metalnessMap;\n\n    \t\t} else if ( material.alphaMap ) {\n\n    \t\t\tuvScaleMap = material.alphaMap;\n\n    \t\t} else if ( material.emissiveMap ) {\n\n    \t\t\tuvScaleMap = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( uvScaleMap !== undefined ) {\n\n    \t\t\t// backwards compatibility\n    \t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n    \t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n    \t\t\t}\n\n    \t\t\tvar offset = uvScaleMap.offset;\n    \t\t\tvar repeat = uvScaleMap.repeat;\n\n    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n    \t\t}\n\n    \t\tuniforms.envMap.value = material.envMap;\n\n    \t\t// don't flip CubeTexture envMaps, flip everything else:\n    \t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n    \t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n    \t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n    \t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\n    \t\tuniforms.reflectivity.value = material.reflectivity;\n    \t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n    \t}\n\n    \tfunction refreshUniformsLine( uniforms, material ) {\n\n    \t\tuniforms.diffuse.value = material.color;\n    \t\tuniforms.opacity.value = material.opacity;\n\n    \t}\n\n    \tfunction refreshUniformsDash( uniforms, material ) {\n\n    \t\tuniforms.dashSize.value = material.dashSize;\n    \t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n    \t\tuniforms.scale.value = material.scale;\n\n    \t}\n\n    \tfunction refreshUniformsPoints( uniforms, material ) {\n\n    \t\tuniforms.diffuse.value = material.color;\n    \t\tuniforms.opacity.value = material.opacity;\n    \t\tuniforms.size.value = material.size * _pixelRatio;\n    \t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\n    \t\tuniforms.map.value = material.map;\n\n    \t\tif ( material.map !== null ) {\n\n    \t\t\tvar offset = material.map.offset;\n    \t\t\tvar repeat = material.map.repeat;\n\n    \t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsFog( uniforms, fog ) {\n\n    \t\tuniforms.fogColor.value = fog.color;\n\n    \t\tif ( fog.isFog ) {\n\n    \t\t\tuniforms.fogNear.value = fog.near;\n    \t\t\tuniforms.fogFar.value = fog.far;\n\n    \t\t} else if ( fog.isFogExp2 ) {\n\n    \t\t\tuniforms.fogDensity.value = fog.density;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsLambert( uniforms, material ) {\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsPhong( uniforms, material ) {\n\n    \t\tuniforms.specular.value = material.specular;\n    \t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( material.bumpMap ) {\n\n    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n    \t\t}\n\n    \t\tif ( material.normalMap ) {\n\n    \t\t\tuniforms.normalMap.value = material.normalMap;\n    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n    \t\t}\n\n    \t\tif ( material.displacementMap ) {\n\n    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsStandard( uniforms, material ) {\n\n    \t\tuniforms.roughness.value = material.roughness;\n    \t\tuniforms.metalness.value = material.metalness;\n\n    \t\tif ( material.roughnessMap ) {\n\n    \t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n    \t\t}\n\n    \t\tif ( material.metalnessMap ) {\n\n    \t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n    \t\t}\n\n    \t\tif ( material.lightMap ) {\n\n    \t\t\tuniforms.lightMap.value = material.lightMap;\n    \t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n    \t\t}\n\n    \t\tif ( material.emissiveMap ) {\n\n    \t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n    \t\t}\n\n    \t\tif ( material.bumpMap ) {\n\n    \t\t\tuniforms.bumpMap.value = material.bumpMap;\n    \t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n    \t\t}\n\n    \t\tif ( material.normalMap ) {\n\n    \t\t\tuniforms.normalMap.value = material.normalMap;\n    \t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n    \t\t}\n\n    \t\tif ( material.displacementMap ) {\n\n    \t\t\tuniforms.displacementMap.value = material.displacementMap;\n    \t\t\tuniforms.displacementScale.value = material.displacementScale;\n    \t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n    \t\t}\n\n    \t\tif ( material.envMap ) {\n\n    \t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n    \t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n    \t\t}\n\n    \t}\n\n    \tfunction refreshUniformsPhysical( uniforms, material ) {\n\n    \t\tuniforms.clearCoat.value = material.clearCoat;\n    \t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n    \t\trefreshUniformsStandard( uniforms, material );\n\n    \t}\n\n    \t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n    \tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n    \t\tuniforms.ambientLightColor.needsUpdate = value;\n\n    \t\tuniforms.directionalLights.needsUpdate = value;\n    \t\tuniforms.pointLights.needsUpdate = value;\n    \t\tuniforms.spotLights.needsUpdate = value;\n    \t\tuniforms.hemisphereLights.needsUpdate = value;\n\n    \t}\n\n    \t// Lighting\n\n    \tfunction setupShadows( lights ) {\n\n    \t\tvar lightShadowsLength = 0;\n\n    \t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n    \t\t\tvar light = lights[ i ];\n\n    \t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_lights.shadows.length = lightShadowsLength;\n\n    \t}\n\n    \tfunction setupLights( lights, camera ) {\n\n    \t\tvar l, ll, light,\n    \t\tr = 0, g = 0, b = 0,\n    \t\tcolor,\n    \t\tintensity,\n    \t\tdistance,\n    \t\tshadowMap,\n\n    \t\tviewMatrix = camera.matrixWorldInverse,\n\n    \t\tdirectionalLength = 0,\n    \t\tpointLength = 0,\n    \t\tspotLength = 0,\n    \t\themiLength = 0;\n\n    \t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n    \t\t\tlight = lights[ l ];\n\n    \t\t\tcolor = light.color;\n    \t\t\tintensity = light.intensity;\n    \t\t\tdistance = light.distance;\n\n    \t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n    \t\t\tif ( light.isAmbientLight ) {\n\n    \t\t\t\tr += color.r * intensity;\n    \t\t\t\tg += color.g * intensity;\n    \t\t\t\tb += color.b * intensity;\n\n    \t\t\t} else if ( light.isDirectionalLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\tuniforms.direction.sub( _vector3 );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n    \t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n    \t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isSpotLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n    \t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n    \t\t\t\tuniforms.distance = distance;\n\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n    \t\t\t\tuniforms.direction.sub( _vector3 );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n    \t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n    \t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n    \t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n    \t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isPointLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n    \t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n    \t\t\t\tuniforms.distance = light.distance;\n    \t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n    \t\t\t\tuniforms.shadow = light.castShadow;\n\n    \t\t\t\tif ( light.castShadow ) {\n\n    \t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n    \t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n    \t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n    \t\t\t\t}\n\n    \t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\n    \t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\n    \t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new Matrix4();\n\n    \t\t\t\t}\n\n    \t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n    \t\t\t\t// equal to inverse of the light's position\n    \t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n    \t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\n    \t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\n    \t\t\t} else if ( light.isHemisphereLight ) {\n\n    \t\t\t\tvar uniforms = lightCache.get( light );\n\n    \t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n    \t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n    \t\t\t\tuniforms.direction.normalize();\n\n    \t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n    \t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n    \t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t_lights.ambient[ 0 ] = r;\n    \t\t_lights.ambient[ 1 ] = g;\n    \t\t_lights.ambient[ 2 ] = b;\n\n    \t\t_lights.directional.length = directionalLength;\n    \t\t_lights.spot.length = spotLength;\n    \t\t_lights.point.length = pointLength;\n    \t\t_lights.hemi.length = hemiLength;\n\n    \t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\n    \t}\n\n    \t// GL state setting\n\n    \tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n    \t\tstate.setCullFace( cullFace );\n    \t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\n    \t};\n\n    \t// Textures\n\n    \tfunction allocTextureUnit() {\n\n    \t\tvar textureUnit = _usedTextureUnits;\n\n    \t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n    \t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n    \t\t}\n\n    \t\t_usedTextureUnits += 1;\n\n    \t\treturn textureUnit;\n\n    \t}\n\n    \tthis.allocTextureUnit = allocTextureUnit;\n\n    \t// this.setTexture2D = setTexture2D;\n    \tthis.setTexture2D = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\t// backwards compatibility: peel texture.texture\n    \t\treturn function setTexture2D( texture, slot ) {\n\n    \t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n    \t\t\t\tif ( ! warned ) {\n\n    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n    \t\t\t\t\twarned = true;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture = texture.texture;\n\n    \t\t\t}\n\n    \t\t\ttextures.setTexture2D( texture, slot );\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.setTexture = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\treturn function setTexture( texture, slot ) {\n\n    \t\t\tif ( ! warned ) {\n\n    \t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n    \t\t\t\twarned = true;\n\n    \t\t\t}\n\n    \t\t\ttextures.setTexture2D( texture, slot );\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.setTextureCube = ( function() {\n\n    \t\tvar warned = false;\n\n    \t\treturn function setTextureCube( texture, slot ) {\n\n    \t\t\t// backwards compatibility: peel texture.texture\n    \t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n    \t\t\t\tif ( ! warned ) {\n\n    \t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n    \t\t\t\t\twarned = true;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture = texture.texture;\n\n    \t\t\t}\n\n    \t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n    \t\t\t// TODO: unify these code paths\n    \t\t\tif ( ( texture && texture.isCubeTexture ) ||\n    \t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n    \t\t\t\t// CompressedTexture can have Array in image :/\n\n    \t\t\t\t// this function alone should take care of cube textures\n    \t\t\t\ttextures.setTextureCube( texture, slot );\n\n    \t\t\t} else {\n\n    \t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n    \t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() );\n\n    \tthis.getCurrentRenderTarget = function() {\n\n    \t\treturn _currentRenderTarget;\n\n    \t};\n\n    \tthis.setRenderTarget = function ( renderTarget ) {\n\n    \t\t_currentRenderTarget = renderTarget;\n\n    \t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n    \t\t\ttextures.setupRenderTarget( renderTarget );\n\n    \t\t}\n\n    \t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n    \t\tvar framebuffer;\n\n    \t\tif ( renderTarget ) {\n\n    \t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n    \t\t\tif ( isCube ) {\n\n    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n    \t\t\t} else {\n\n    \t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\n    \t\t\t}\n\n    \t\t\t_currentScissor.copy( renderTarget.scissor );\n    \t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n    \t\t\t_currentViewport.copy( renderTarget.viewport );\n\n    \t\t} else {\n\n    \t\t\tframebuffer = null;\n\n    \t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n    \t\t\t_currentScissorTest = _scissorTest;\n\n    \t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\n    \t\t}\n\n    \t\tif ( _currentFramebuffer !== framebuffer ) {\n\n    \t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n    \t\t\t_currentFramebuffer = framebuffer;\n\n    \t\t}\n\n    \t\tstate.scissor( _currentScissor );\n    \t\tstate.setScissorTest( _currentScissorTest );\n\n    \t\tstate.viewport( _currentViewport );\n\n    \t\tif ( isCube ) {\n\n    \t\t\tvar textureProperties = properties.get( renderTarget.texture );\n    \t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n    \t\t}\n\n    \t};\n\n    \tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n    \t\tif ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {\n\n    \t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n    \t\tif ( framebuffer ) {\n\n    \t\t\tvar restore = false;\n\n    \t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n    \t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n    \t\t\t\trestore = true;\n\n    \t\t\t}\n\n    \t\t\ttry {\n\n    \t\t\t\tvar texture = renderTarget.texture;\n    \t\t\t\tvar textureFormat = texture.format;\n    \t\t\t\tvar textureType = texture.type;\n\n    \t\t\t\tif ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n    \t\t\t\t     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n    \t\t\t\t     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n    \t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n    \t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n    \t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n    \t\t\t\t}\n\n    \t\t\t} finally {\n\n    \t\t\t\tif ( restore ) {\n\n    \t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t};\n\n    \t// Map three.js constants to WebGL constants\n\n    \tfunction paramThreeToGL( p ) {\n\n    \t\tvar extension;\n\n    \t\tif ( p === RepeatWrapping ) return _gl.REPEAT;\n    \t\tif ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n    \t\tif ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n    \t\tif ( p === NearestFilter ) return _gl.NEAREST;\n    \t\tif ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n    \t\tif ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n    \t\tif ( p === LinearFilter ) return _gl.LINEAR;\n    \t\tif ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n    \t\tif ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n    \t\tif ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n    \t\tif ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n    \t\tif ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n    \t\tif ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n    \t\tif ( p === ByteType ) return _gl.BYTE;\n    \t\tif ( p === ShortType ) return _gl.SHORT;\n    \t\tif ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n    \t\tif ( p === IntType ) return _gl.INT;\n    \t\tif ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;\n    \t\tif ( p === FloatType ) return _gl.FLOAT;\n\n    \t\textension = extensions.get( 'OES_texture_half_float' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === HalfFloatType ) return extension.HALF_FLOAT_OES;\n\n    \t\t}\n\n    \t\tif ( p === AlphaFormat ) return _gl.ALPHA;\n    \t\tif ( p === RGBFormat ) return _gl.RGB;\n    \t\tif ( p === RGBAFormat ) return _gl.RGBA;\n    \t\tif ( p === LuminanceFormat ) return _gl.LUMINANCE;\n    \t\tif ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n    \t\tif ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;\n    \t\tif ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;\n\n    \t\tif ( p === AddEquation ) return _gl.FUNC_ADD;\n    \t\tif ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;\n    \t\tif ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n    \t\tif ( p === ZeroFactor ) return _gl.ZERO;\n    \t\tif ( p === OneFactor ) return _gl.ONE;\n    \t\tif ( p === SrcColorFactor ) return _gl.SRC_COLOR;\n    \t\tif ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n    \t\tif ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;\n    \t\tif ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n    \t\tif ( p === DstAlphaFactor ) return _gl.DST_ALPHA;\n    \t\tif ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n    \t\tif ( p === DstColorFactor ) return _gl.DST_COLOR;\n    \t\tif ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n    \t\tif ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n    \t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n    \t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n    \t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n    \t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'EXT_blend_minmax' );\n\n    \t\tif ( extension !== null ) {\n\n    \t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n    \t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n    \t\t}\n\n    \t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n    \t\tif ( extension !== null ){\n\n    \t\t\tif ( p === UnsignedInt248Type ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n    \t\t}\n\n    \t\treturn 0;\n\n    \t}\n\n    }\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function FogExp2 ( color, density ) {\n\n    \tthis.name = '';\n\n    \tthis.color = new Color( color );\n    \tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n    }\n\n    FogExp2.prototype.isFogExp2 = true;\n\n    FogExp2.prototype.clone = function () {\n\n    \treturn new FogExp2( this.color.getHex(), this.density );\n\n    };\n\n    FogExp2.prototype.toJSON = function ( meta ) {\n\n    \treturn {\n    \t\ttype: 'FogExp2',\n    \t\tcolor: this.color.getHex(),\n    \t\tdensity: this.density\n    \t};\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Fog ( color, near, far ) {\n\n    \tthis.name = '';\n\n    \tthis.color = new Color( color );\n\n    \tthis.near = ( near !== undefined ) ? near : 1;\n    \tthis.far = ( far !== undefined ) ? far : 1000;\n\n    }\n\n    Fog.prototype.isFog = true;\n\n    Fog.prototype.clone = function () {\n\n    \treturn new Fog( this.color.getHex(), this.near, this.far );\n\n    };\n\n    Fog.prototype.toJSON = function ( meta ) {\n\n    \treturn {\n    \t\ttype: 'Fog',\n    \t\tcolor: this.color.getHex(),\n    \t\tnear: this.near,\n    \t\tfar: this.far\n    \t};\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Scene () {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Scene';\n\n    \tthis.background = null;\n    \tthis.fog = null;\n    \tthis.overrideMaterial = null;\n\n    \tthis.autoUpdate = true; // checked by the renderer\n\n    }\n\n    Scene.prototype = Object.create( Object3D.prototype );\n\n    Scene.prototype.constructor = Scene;\n\n    Scene.prototype.copy = function ( source, recursive ) {\n\n    \tObject3D.prototype.copy.call( this, source, recursive );\n\n    \tif ( source.background !== null ) this.background = source.background.clone();\n    \tif ( source.fog !== null ) this.fog = source.fog.clone();\n    \tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n    \tthis.autoUpdate = source.autoUpdate;\n    \tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n    \treturn this;\n\n    };\n\n    Scene.prototype.toJSON = function ( meta ) {\n\n    \tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n    \tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n    \treturn data;\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function LensFlare( texture, size, distance, blending, color ) {\n\n    \tObject3D.call( this );\n\n    \tthis.lensFlares = [];\n\n    \tthis.positionScreen = new Vector3();\n    \tthis.customUpdateCallback = undefined;\n\n    \tif ( texture !== undefined ) {\n\n    \t\tthis.add( texture, size, distance, blending, color );\n\n    \t}\n\n    }\n\n    LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: LensFlare,\n\n    \tisLensFlare: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.positionScreen.copy( source.positionScreen );\n    \t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n    \t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n    \t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n    \t\tif ( size === undefined ) size = - 1;\n    \t\tif ( distance === undefined ) distance = 0;\n    \t\tif ( opacity === undefined ) opacity = 1;\n    \t\tif ( color === undefined ) color = new Color( 0xffffff );\n    \t\tif ( blending === undefined ) blending = NormalBlending;\n\n    \t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n    \t\tthis.lensFlares.push( {\n    \t\t\ttexture: texture,\t// THREE.Texture\n    \t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n    \t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n    \t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n    \t\t\tscale: 1, \t\t// scale\n    \t\t\trotation: 0, \t\t// rotation\n    \t\t\topacity: opacity,\t// opacity\n    \t\t\tcolor: color,\t\t// color\n    \t\t\tblending: blending\t// blending\n    \t\t} );\n\n    \t},\n\n    \t/*\n    \t * Update lens flares update positions on all flares based on the screen position\n    \t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n    \t */\n\n    \tupdateLensFlares: function () {\n\n    \t\tvar f, fl = this.lensFlares.length;\n    \t\tvar flare;\n    \t\tvar vecX = - this.positionScreen.x * 2;\n    \t\tvar vecY = - this.positionScreen.y * 2;\n\n    \t\tfor ( f = 0; f < fl; f ++ ) {\n\n    \t\t\tflare = this.lensFlares[ f ];\n\n    \t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n    \t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n    \t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n    \t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *\tuvOffset: new THREE.Vector2(),\n     *\tuvScale: new THREE.Vector2()\n     * }\n     */\n\n    function SpriteMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'SpriteMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n    \tthis.map = null;\n\n    \tthis.rotation = 0;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    SpriteMaterial.prototype = Object.create( Material.prototype );\n    SpriteMaterial.prototype.constructor = SpriteMaterial;\n\n    SpriteMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n    \tthis.map = source.map;\n\n    \tthis.rotation = source.rotation;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Sprite( material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Sprite';\n\n    \tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n    }\n\n    Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Sprite,\n\n    \tisSprite: true,\n\n    \traycast: ( function () {\n\n    \t\tvar matrixPosition = new Vector3();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n    \t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\n    \t\t\tif ( distanceSq > guessSizeSq ) {\n\n    \t\t\t\treturn;\n\n    \t\t\t}\n\n    \t\t\tintersects.push( {\n\n    \t\t\t\tdistance: Math.sqrt( distanceSq ),\n    \t\t\t\tpoint: this.position,\n    \t\t\t\tface: null,\n    \t\t\t\tobject: this\n\n    \t\t\t} );\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LOD() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'LOD';\n\n    \tObject.defineProperties( this, {\n    \t\tlevels: {\n    \t\t\tenumerable: true,\n    \t\t\tvalue: []\n    \t\t}\n    \t} );\n\n    }\n\n\n    LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: LOD,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source, false );\n\n    \t\tvar levels = source.levels;\n\n    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tvar level = levels[ i ];\n\n    \t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \taddLevel: function ( object, distance ) {\n\n    \t\tif ( distance === undefined ) distance = 0;\n\n    \t\tdistance = Math.abs( distance );\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n    \t\t\tif ( distance < levels[ l ].distance ) {\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n    \t\tthis.add( object );\n\n    \t},\n\n    \tgetObjectForDistance: function ( distance ) {\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tif ( distance < levels[ i ].distance ) {\n\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn levels[ i - 1 ].object;\n\n    \t},\n\n    \traycast: ( function () {\n\n    \t\tvar matrixPosition = new Vector3();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n    \t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n    \t\t};\n\n    \t}() ),\n\n    \tupdate: function () {\n\n    \t\tvar v1 = new Vector3();\n    \t\tvar v2 = new Vector3();\n\n    \t\treturn function update( camera ) {\n\n    \t\t\tvar levels = this.levels;\n\n    \t\t\tif ( levels.length > 1 ) {\n\n    \t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n    \t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\t\tvar distance = v1.distanceTo( v2 );\n\n    \t\t\t\tlevels[ 0 ].object.visible = true;\n\n    \t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n    \t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n    \t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n    \t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( ; i < l; i ++ ) {\n\n    \t\t\t\t\tlevels[ i ].object.visible = false;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}(),\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.levels = [];\n\n    \t\tvar levels = this.levels;\n\n    \t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n    \t\t\tvar level = levels[ i ];\n\n    \t\t\tdata.object.levels.push( {\n    \t\t\t\tobject: level.object.uuid,\n    \t\t\t\tdistance: level.distance\n    \t\t\t} );\n\n    \t\t}\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.image = { data: data, width: width, height: height };\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n    \tthis.flipY = false;\n    \tthis.generateMipmaps  = false;\n\n    }\n\n    DataTexture.prototype = Object.create( Texture.prototype );\n    DataTexture.prototype.constructor = DataTexture;\n\n    DataTexture.prototype.isDataTexture = true;\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author michael guerrero / http://realitymeltdown.com\n     * @author ikerr / http://verold.com\n     */\n\n    function Skeleton( bones, boneInverses, useVertexTexture ) {\n\n    \tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\n    \tthis.identityMatrix = new Matrix4();\n\n    \t// copy the bone array\n\n    \tbones = bones || [];\n\n    \tthis.bones = bones.slice( 0 );\n\n    \t// create a bone texture or an array of floats\n\n    \tif ( this.useVertexTexture ) {\n\n    \t\t// layout (1 matrix = 4 pixels)\n    \t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n    \t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n    \t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n    \t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n    \t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n    \t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n    \t\tsize = exports.Math.nextPowerOfTwo( Math.ceil( size ) );\n    \t\tsize = Math.max( size, 4 );\n\n    \t\tthis.boneTextureWidth = size;\n    \t\tthis.boneTextureHeight = size;\n\n    \t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n    \t\tthis.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );\n\n    \t} else {\n\n    \t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\n    \t}\n\n    \t// use the supplied bone inverses or calculate the inverses\n\n    \tif ( boneInverses === undefined ) {\n\n    \t\tthis.calculateInverses();\n\n    \t} else {\n\n    \t\tif ( this.bones.length === boneInverses.length ) {\n\n    \t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\n    \t\t\tthis.boneInverses = [];\n\n    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    }\n\n    Object.assign( Skeleton.prototype, {\n\n    \tcalculateInverses: function () {\n\n    \t\tthis.boneInverses = [];\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tvar inverse = new Matrix4();\n\n    \t\t\tif ( this.bones[ b ] ) {\n\n    \t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\n    \t\t\t}\n\n    \t\t\tthis.boneInverses.push( inverse );\n\n    \t\t}\n\n    \t},\n\n    \tpose: function () {\n\n    \t\tvar bone;\n\n    \t\t// recover the bind-time world matrices\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tbone = this.bones[ b ];\n\n    \t\t\tif ( bone ) {\n\n    \t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// compute the local matrices, positions, rotations and scales\n\n    \t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\tbone = this.bones[ b ];\n\n    \t\t\tif ( bone ) {\n\n    \t\t\t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n    \t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n    \t\t\t\t}\n\n    \t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tupdate: ( function () {\n\n    \t\tvar offsetMatrix = new Matrix4();\n\n    \t\treturn function update() {\n\n    \t\t\t// flatten bone matrices to array\n\n    \t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n    \t\t\t\t// compute the offset between the current and the original transform\n\n    \t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\n    \t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n    \t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\n    \t\t\t}\n\n    \t\t\tif ( this.useVertexTexture ) {\n\n    \t\t\t\tthis.boneTexture.needsUpdate = true;\n\n    \t\t\t}\n\n    \t\t};\n\n    \t} )(),\n\n    \tclone: function () {\n\n    \t\treturn new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function Bone( skin ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Bone';\n\n    \tthis.skin = skin;\n\n    }\n\n    Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Bone,\n\n    \tisBone: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.skin = source.skin;\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mikael emtinger / http://gomo.se/\n     * @author alteredq / http://alteredqualia.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function SkinnedMesh( geometry, material, useVertexTexture ) {\n\n    \tMesh.call( this, geometry, material );\n\n    \tthis.type = 'SkinnedMesh';\n\n    \tthis.bindMode = \"attached\";\n    \tthis.bindMatrix = new Matrix4();\n    \tthis.bindMatrixInverse = new Matrix4();\n\n    \t// init bones\n\n    \t// TODO: remove bone creation as there is no reason (other than\n    \t// convenience) for THREE.SkinnedMesh to do this.\n\n    \tvar bones = [];\n\n    \tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n    \t\tvar bone, gbone;\n\n    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n    \t\t\tgbone = this.geometry.bones[ b ];\n\n    \t\t\tbone = new Bone( this );\n    \t\t\tbones.push( bone );\n\n    \t\t\tbone.name = gbone.name;\n    \t\t\tbone.position.fromArray( gbone.pos );\n    \t\t\tbone.quaternion.fromArray( gbone.rotq );\n    \t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n    \t\t}\n\n    \t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n    \t\t\tgbone = this.geometry.bones[ b ];\n\n    \t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n    \t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\n    \t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\n    \t\t\t} else {\n\n    \t\t\t\tthis.add( bones[ b ] );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tthis.normalizeSkinWeights();\n\n    \tthis.updateMatrixWorld( true );\n    \tthis.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\n    }\n\n\n    SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n    \tconstructor: SkinnedMesh,\n\n    \tisSkinnedMesh: true,\n\n    \tbind: function( skeleton, bindMatrix ) {\n\n    \t\tthis.skeleton = skeleton;\n\n    \t\tif ( bindMatrix === undefined ) {\n\n    \t\t\tthis.updateMatrixWorld( true );\n\n    \t\t\tthis.skeleton.calculateInverses();\n\n    \t\t\tbindMatrix = this.matrixWorld;\n\n    \t\t}\n\n    \t\tthis.bindMatrix.copy( bindMatrix );\n    \t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n    \t},\n\n    \tpose: function () {\n\n    \t\tthis.skeleton.pose();\n\n    \t},\n\n    \tnormalizeSkinWeights: function () {\n\n    \t\tif ( (this.geometry && this.geometry.isGeometry) ) {\n\n    \t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n    \t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n    \t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\n    \t\t\t\tif ( scale !== Infinity ) {\n\n    \t\t\t\t\tsw.multiplyScalar( scale );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {\n\n    \t\t\tvar vec = new Vector4();\n\n    \t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n    \t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\n    \t\t\t\tvec.x = skinWeight.getX( i );\n    \t\t\t\tvec.y = skinWeight.getY( i );\n    \t\t\t\tvec.z = skinWeight.getZ( i );\n    \t\t\t\tvec.w = skinWeight.getW( i );\n\n    \t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\n    \t\t\t\tif ( scale !== Infinity ) {\n\n    \t\t\t\t\tvec.multiplyScalar( scale );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n    \t\t\t\t}\n\n    \t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \tupdateMatrixWorld: function( force ) {\n\n    \t\tMesh.prototype.updateMatrixWorld.call( this, true );\n\n    \t\tif ( this.bindMode === \"attached\" ) {\n\n    \t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n    \t\t} else if ( this.bindMode === \"detached\" ) {\n\n    \t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n    \t\t} else {\n\n    \t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\n    \t\t}\n\n    \t},\n\n    \tclone: function() {\n\n    \t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  linewidth: <float>,\n     *  linecap: \"round\",\n     *  linejoin: \"round\"\n     * }\n     */\n\n    function LineBasicMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'LineBasicMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.linewidth = 1;\n    \tthis.linecap = 'round';\n    \tthis.linejoin = 'round';\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    LineBasicMaterial.prototype = Object.create( Material.prototype );\n    LineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n    LineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n    LineBasicMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.linewidth = source.linewidth;\n    \tthis.linecap = source.linecap;\n    \tthis.linejoin = source.linejoin;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Line( geometry, material, mode ) {\n\n    \tif ( mode === 1 ) {\n\n    \t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n    \t\treturn new LineSegments( geometry, material );\n\n    \t}\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Line';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n    }\n\n    Line.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Line,\n\n    \tisLine: true,\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar precision = raycaster.linePrecision;\n    \t\t\tvar precisionSq = precision * precision;\n\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\tvar vStart = new Vector3();\n    \t\t\tvar vEnd = new Vector3();\n    \t\t\tvar interSegment = new Vector3();\n    \t\t\tvar interRay = new Vector3();\n    \t\t\tvar step = (this && this.isLineSegments) ? 2 : 1;\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n    \t\t\t\t\t\tvar a = indices[ i ];\n    \t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n    \t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n    \t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\t\tface: null,\n    \t\t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t\t} );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n    \t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n    \t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n    \t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n    \t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\t\tface: null,\n    \t\t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t\t} );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( (geometry && geometry.isGeometry) ) {\n\n    \t\t\t\tvar vertices = geometry.vertices;\n    \t\t\t\tvar nbVertices = vertices.length;\n\n    \t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n    \t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n    \t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n    \t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n    \t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n    \t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n    \t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n    \t\t\t\t\t\tindex: i,\n    \t\t\t\t\t\tface: null,\n    \t\t\t\t\t\tfaceIndex: null,\n    \t\t\t\t\t\tobject: this\n\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LineSegments( geometry, material ) {\n\n    \tLine.call( this, geometry, material );\n\n    \tthis.type = 'LineSegments';\n\n    }\n\n    LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n    \tconstructor: LineSegments,\n\n    \tisLineSegments: true\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  size: <float>,\n     *  sizeAttenuation: <bool>\n     * }\n     */\n\n    function PointsMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'PointsMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.map = null;\n\n    \tthis.size = 1;\n    \tthis.sizeAttenuation = true;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    PointsMaterial.prototype = Object.create( Material.prototype );\n    PointsMaterial.prototype.constructor = PointsMaterial;\n\n    PointsMaterial.prototype.isPointsMaterial = true;\n\n    PointsMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.size = source.size;\n    \tthis.sizeAttenuation = source.sizeAttenuation;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Points( geometry, material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Points';\n\n    \tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    \tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n    }\n\n    Points.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Points,\n\n    \tisPoints: true,\n\n    \traycast: ( function () {\n\n    \t\tvar inverseMatrix = new Matrix4();\n    \t\tvar ray = new Ray();\n    \t\tvar sphere = new Sphere();\n\n    \t\treturn function raycast( raycaster, intersects ) {\n\n    \t\t\tvar object = this;\n    \t\t\tvar geometry = this.geometry;\n    \t\t\tvar matrixWorld = this.matrixWorld;\n    \t\t\tvar threshold = raycaster.params.Points.threshold;\n\n    \t\t\t// Checking boundingSphere distance to ray\n\n    \t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n    \t\t\tsphere.copy( geometry.boundingSphere );\n    \t\t\tsphere.applyMatrix4( matrixWorld );\n\n    \t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n    \t\t\t//\n\n    \t\t\tinverseMatrix.getInverse( matrixWorld );\n    \t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n    \t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n    \t\t\tvar localThresholdSq = localThreshold * localThreshold;\n    \t\t\tvar position = new Vector3();\n\n    \t\t\tfunction testPoint( point, index ) {\n\n    \t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n    \t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n    \t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n    \t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n    \t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n    \t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n    \t\t\t\t\tintersects.push( {\n\n    \t\t\t\t\t\tdistance: distance,\n    \t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n    \t\t\t\t\t\tpoint: intersectPoint.clone(),\n    \t\t\t\t\t\tindex: index,\n    \t\t\t\t\t\tface: null,\n    \t\t\t\t\t\tobject: object\n\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\t\t\tvar index = geometry.index;\n    \t\t\t\tvar attributes = geometry.attributes;\n    \t\t\t\tvar positions = attributes.position.array;\n\n    \t\t\t\tif ( index !== null ) {\n\n    \t\t\t\t\tvar indices = index.array;\n\n    \t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n    \t\t\t\t\t\tvar a = indices[ i ];\n\n    \t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n    \t\t\t\t\t\ttestPoint( position, a );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n    \t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n    \t\t\t\t\t\ttestPoint( position, i );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tvar vertices = geometry.vertices;\n\n    \t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n    \t\t\t\t\ttestPoint( vertices[ i ], i );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t}() ),\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Group() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Group';\n\n    }\n\n    Group.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Group\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n    \tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.generateMipmaps = false;\n\n    \tvar scope = this;\n\n    \tfunction update() {\n\n    \t\trequestAnimationFrame( update );\n\n    \t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n    \t\t\tscope.needsUpdate = true;\n\n    \t\t}\n\n    \t}\n\n    \tupdate();\n\n    }\n\n    VideoTexture.prototype = Object.create( Texture.prototype );\n    VideoTexture.prototype.constructor = VideoTexture;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n    \tthis.image = { width: width, height: height };\n    \tthis.mipmaps = mipmaps;\n\n    \t// no flipping for cube textures\n    \t// (also flipping doesn't work for compressed textures )\n\n    \tthis.flipY = false;\n\n    \t// can't generate mipmaps for compressed textures\n    \t// mips must be embedded in DDS files\n\n    \tthis.generateMipmaps = false;\n\n    }\n\n    CompressedTexture.prototype = Object.create( Texture.prototype );\n    CompressedTexture.prototype.constructor = CompressedTexture;\n\n    CompressedTexture.prototype.isCompressedTexture = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n    \tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.needsUpdate = true;\n\n    }\n\n    CanvasTexture.prototype = Object.create( Texture.prototype );\n    CanvasTexture.prototype.constructor = CanvasTexture;\n\n    /**\n     * @author Matt DesLauriers / @mattdesl\n     * @author atix / arthursilber.de\n     */\n\n    function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n    \tformat = format !== undefined ? format : DepthFormat;\n\n    \tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n    \t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )\n\n    \t}\n\n    \tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    \tthis.image = { width: width, height: height };\n\n    \tthis.type = type !== undefined ? type : UnsignedShortType;\n\n    \tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n    \tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n    \tthis.flipY = false;\n    \tthis.generateMipmaps\t= false;\n\n    }\n\n    DepthTexture.prototype = Object.create( Texture.prototype );\n    DepthTexture.prototype.constructor = DepthTexture;\n    DepthTexture.prototype.isDepthTexture = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function WireframeGeometry( geometry ) {\n\n    \tBufferGeometry.call( this );\n\n    \tvar edge = [ 0, 0 ], hash = {};\n\n    \tfunction sortFunction( a, b ) {\n\n    \t\treturn a - b;\n\n    \t}\n\n    \tvar keys = [ 'a', 'b', 'c' ];\n\n    \tif ( (geometry && geometry.isGeometry) ) {\n\n    \t\tvar vertices = geometry.vertices;\n    \t\tvar faces = geometry.faces;\n    \t\tvar numEdges = 0;\n\n    \t\t// allocate maximal size\n    \t\tvar edges = new Uint32Array( 6 * faces.length );\n\n    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n    \t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n    \t\t\t\tedge.sort( sortFunction );\n\n    \t\t\t\tvar key = edge.toString();\n\n    \t\t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n    \t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n    \t\t\t\t\thash[ key ] = true;\n    \t\t\t\t\tnumEdges ++;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n    \t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n    \t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\n    \t\t\t\tvar index = 6 * i + 3 * j;\n    \t\t\t\tcoords[ index + 0 ] = vertex.x;\n    \t\t\t\tcoords[ index + 1 ] = vertex.y;\n    \t\t\t\tcoords[ index + 2 ] = vertex.z;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t} else if ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\tif ( geometry.index !== null ) {\n\n    \t\t\t// Indexed BufferGeometry\n\n    \t\t\tvar indices = geometry.index.array;\n    \t\t\tvar vertices = geometry.attributes.position;\n    \t\t\tvar groups = geometry.groups;\n    \t\t\tvar numEdges = 0;\n\n    \t\t\tif ( groups.length === 0 ) {\n\n    \t\t\t\tgeometry.addGroup( 0, indices.length );\n\n    \t\t\t}\n\n    \t\t\t// allocate maximal size\n    \t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\n    \t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\n    \t\t\t\tvar group = groups[ o ];\n\n    \t\t\t\tvar start = group.start;\n    \t\t\t\tvar count = group.count;\n\n    \t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n    \t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n    \t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n    \t\t\t\t\t\tedge.sort( sortFunction );\n\n    \t\t\t\t\t\tvar key = edge.toString();\n\n    \t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n    \t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n    \t\t\t\t\t\t\thash[ key ] = true;\n    \t\t\t\t\t\t\tnumEdges ++;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n    \t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n    \t\t\t\t\tvar index = 6 * i + 3 * j;\n    \t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\n    \t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n    \t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n    \t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t\t} else {\n\n    \t\t\t// non-indexed BufferGeometry\n\n    \t\t\tvar vertices = geometry.attributes.position.array;\n    \t\t\tvar numEdges = vertices.length / 3;\n    \t\t\tvar numTris = numEdges / 3;\n\n    \t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n    \t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\n    \t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\tvar index = 18 * i + 6 * j;\n\n    \t\t\t\t\tvar index1 = 9 * i + 3 * j;\n    \t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n    \t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n    \t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\n    \t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n    \t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n    \t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n    \t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis.addAttribute( 'position', new BufferAttribute( coords, 3 ) );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n    WireframeGeometry.prototype.constructor = WireframeGeometry;\n\n    /**\n     * @author zz85 / https://github.com/zz85\n     * Parametric Surfaces Geometry\n     * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n     *\n     * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n     *\n     */\n\n    function ParametricGeometry( func, slices, stacks ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ParametricGeometry';\n\n    \tthis.parameters = {\n    \t\tfunc: func,\n    \t\tslices: slices,\n    \t\tstacks: stacks\n    \t};\n\n    \tvar verts = this.vertices;\n    \tvar faces = this.faces;\n    \tvar uvs = this.faceVertexUvs[ 0 ];\n\n    \tvar i, j, p;\n    \tvar u, v;\n\n    \tvar sliceCount = slices + 1;\n\n    \tfor ( i = 0; i <= stacks; i ++ ) {\n\n    \t\tv = i / stacks;\n\n    \t\tfor ( j = 0; j <= slices; j ++ ) {\n\n    \t\t\tu = j / slices;\n\n    \t\t\tp = func( u, v );\n    \t\t\tverts.push( p );\n\n    \t\t}\n\n    \t}\n\n    \tvar a, b, c, d;\n    \tvar uva, uvb, uvc, uvd;\n\n    \tfor ( i = 0; i < stacks; i ++ ) {\n\n    \t\tfor ( j = 0; j < slices; j ++ ) {\n\n    \t\t\ta = i * sliceCount + j;\n    \t\t\tb = i * sliceCount + j + 1;\n    \t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n    \t\t\td = ( i + 1 ) * sliceCount + j;\n\n    \t\t\tuva = new Vector2( j / slices, i / stacks );\n    \t\t\tuvb = new Vector2( ( j + 1 ) / slices, i / stacks );\n    \t\t\tuvc = new Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n    \t\t\tuvd = new Vector2( j / slices, ( i + 1 ) / stacks );\n\n    \t\t\tfaces.push( new Face3( a, b, d ) );\n    \t\t\tuvs.push( [ uva, uvb, uvd ] );\n\n    \t\t\tfaces.push( new Face3( b, c, d ) );\n    \t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n    \t\t}\n\n    \t}\n\n    \t// console.log(this);\n\n    \t// magic bullet\n    \t// var diff = this.mergeVertices();\n    \t// console.log('removed ', diff, ' vertices by merging');\n\n    \tthis.computeFaceNormals();\n    \tthis.computeVertexNormals();\n\n    }\n\n    ParametricGeometry.prototype = Object.create( Geometry.prototype );\n    ParametricGeometry.prototype.constructor = ParametricGeometry;\n\n    /**\n     * @author clockworkgeek / https://github.com/clockworkgeek\n     * @author timothypratley / https://github.com/timothypratley\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'PolyhedronGeometry';\n\n    \tthis.parameters = {\n    \t\tvertices: vertices,\n    \t\tindices: indices,\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    \tradius = radius || 1;\n    \tdetail = detail || 0;\n\n    \tvar that = this;\n\n    \tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\n    \t\tprepare( new Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\n    \t}\n\n    \tvar p = this.vertices;\n\n    \tvar faces = [];\n\n    \tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\n    \t\tvar v1 = p[ indices[ i ] ];\n    \t\tvar v2 = p[ indices[ i + 1 ] ];\n    \t\tvar v3 = p[ indices[ i + 2 ] ];\n\n    \t\tfaces[ j ] = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\n    \t}\n\n    \tvar centroid = new Vector3();\n\n    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\tsubdivide( faces[ i ], detail );\n\n    \t}\n\n\n    \t// Handle case when face straddles the seam\n\n    \tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\n    \t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\n    \t\tvar x0 = uvs[ 0 ].x;\n    \t\tvar x1 = uvs[ 1 ].x;\n    \t\tvar x2 = uvs[ 2 ].x;\n\n    \t\tvar max = Math.max( x0, x1, x2 );\n    \t\tvar min = Math.min( x0, x1, x2 );\n\n    \t\tif ( max > 0.9 && min < 0.1 ) {\n\n    \t\t\t// 0.9 is somewhat arbitrary\n\n    \t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n    \t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n    \t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\n    \t\t}\n\n    \t}\n\n\n    \t// Apply radius\n\n    \tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n    \t\tthis.vertices[ i ].multiplyScalar( radius );\n\n    \t}\n\n\n    \t// Merge vertices\n\n    \tthis.mergeVertices();\n\n    \tthis.computeFaceNormals();\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n\n    \t// Project vector onto sphere's surface\n\n    \tfunction prepare( vector ) {\n\n    \t\tvar vertex = vector.normalize().clone();\n    \t\tvertex.index = that.vertices.push( vertex ) - 1;\n\n    \t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n    \t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n    \t\tvar v = inclination( vector ) / Math.PI + 0.5;\n    \t\tvertex.uv = new Vector2( u, 1 - v );\n\n    \t\treturn vertex;\n\n    \t}\n\n\n    \t// Approximate a curved face with recursively sub-divided triangles.\n\n    \tfunction make( v1, v2, v3 ) {\n\n    \t\tvar face = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n    \t\tthat.faces.push( face );\n\n    \t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\n    \t\tvar azi = azimuth( centroid );\n\n    \t\tthat.faceVertexUvs[ 0 ].push( [\n    \t\t\tcorrectUV( v1.uv, v1, azi ),\n    \t\t\tcorrectUV( v2.uv, v2, azi ),\n    \t\t\tcorrectUV( v3.uv, v3, azi )\n    \t\t] );\n\n    \t}\n\n\n    \t// Analytically subdivide a face to the required detail level.\n\n    \tfunction subdivide( face, detail ) {\n\n    \t\tvar cols = Math.pow( 2, detail );\n    \t\tvar a = prepare( that.vertices[ face.a ] );\n    \t\tvar b = prepare( that.vertices[ face.b ] );\n    \t\tvar c = prepare( that.vertices[ face.c ] );\n    \t\tvar v = [];\n\n    \t\t// Construct all of the vertices for this subdivision.\n\n    \t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\n    \t\t\tv[ i ] = [];\n\n    \t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n    \t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n    \t\t\tvar rows = cols - i;\n\n    \t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\n    \t\t\t\tif ( j === 0 && i === cols ) {\n\n    \t\t\t\t\tv[ i ][ j ] = aj;\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// Construct all of the faces.\n\n    \t\tfor ( var i = 0; i < cols ; i ++ ) {\n\n    \t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n    \t\t\t\tvar k = Math.floor( j / 2 );\n\n    \t\t\t\tif ( j % 2 === 0 ) {\n\n    \t\t\t\t\tmake(\n    \t\t\t\t\t\tv[ i ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k ],\n    \t\t\t\t\t\tv[ i ][ k ]\n    \t\t\t\t\t);\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tmake(\n    \t\t\t\t\t\tv[ i ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n    \t\t\t\t\t\tv[ i + 1 ][ k ]\n    \t\t\t\t\t);\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \t// Angle around the Y axis, counter-clockwise when looking from above.\n\n    \tfunction azimuth( vector ) {\n\n    \t\treturn Math.atan2( vector.z, - vector.x );\n\n    \t}\n\n\n    \t// Angle above the XZ plane.\n\n    \tfunction inclination( vector ) {\n\n    \t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n    \t}\n\n\n    \t// Texture fixing helper. Spheres have some odd behaviours.\n\n    \tfunction correctUV( uv, vector, azimuth ) {\n\n    \t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new Vector2( uv.x - 1, uv.y );\n    \t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n    \t\treturn uv.clone();\n\n    \t}\n\n    }\n\n    PolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n    PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function TetrahedronGeometry( radius, detail ) {\n\n    \tvar vertices = [\n    \t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n    \t];\n\n    \tvar indices = [\n    \t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'TetrahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    TetrahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function OctahedronGeometry( radius, detail ) {\n\n    \tvar vertices = [\n    \t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n    \t];\n\n    \tvar indices = [\n    \t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'OctahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    OctahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    OctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n    /**\n     * @author timothypratley / https://github.com/timothypratley\n     */\n\n    function IcosahedronGeometry( radius, detail ) {\n\n    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n    \tvar vertices = [\n    \t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n    \t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n    \t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n    \t];\n\n    \tvar indices = [\n    \t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n    \t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n    \t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n    \t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'IcosahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    IcosahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n    /**\n     * @author Abe Pazos / https://hamoid.com\n     */\n\n    function DodecahedronGeometry( radius, detail ) {\n\n    \tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n    \tvar r = 1 / t;\n\n    \tvar vertices = [\n\n    \t\t// (±1, ±1, ±1)\n    \t\t- 1, - 1, - 1,    - 1, - 1,  1,\n    \t\t- 1,  1, - 1,    - 1,  1,  1,\n    \t\t 1, - 1, - 1,     1, - 1,  1,\n    \t\t 1,  1, - 1,     1,  1,  1,\n\n    \t\t// (0, ±1/φ, ±φ)\n    \t\t 0, - r, - t,     0, - r,  t,\n    \t\t 0,  r, - t,     0,  r,  t,\n\n    \t\t// (±1/φ, ±φ, 0)\n    \t\t- r, - t,  0,    - r,  t,  0,\n    \t\t r, - t,  0,     r,  t,  0,\n\n    \t\t// (±φ, 0, ±1/φ)\n    \t\t- t,  0, - r,     t,  0, - r,\n    \t\t- t,  0,  r,     t,  0,  r\n    \t];\n\n    \tvar indices = [\n    \t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n    \t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n    \t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n    \t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n    \t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n    \t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n    \t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n    \t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n    \t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n    \t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n    \t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n    \t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n    \t];\n\n    \tPolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n    \tthis.type = 'DodecahedronGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tdetail: detail\n    \t};\n\n    }\n\n    DodecahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );\n    DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n    /**\n     * @author WestLangley / https://github.com/WestLangley\n     * @author zz85 / https://github.com/zz85\n     * @author miningold / https://github.com/miningold\n     * @author jonobr1 / https://github.com/jonobr1\n     *\n     * Modified from the TorusKnotGeometry by @oosmoxiecode\n     *\n     * Creates a tube which extrudes along a 3d spline\n     *\n     * Uses parallel transport frames as described in\n     * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n     */\n\n    function TubeGeometry( path, segments, radius, radialSegments, closed, taper ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TubeGeometry';\n\n    \tthis.parameters = {\n    \t\tpath: path,\n    \t\tsegments: segments,\n    \t\tradius: radius,\n    \t\tradialSegments: radialSegments,\n    \t\tclosed: closed,\n    \t\ttaper: taper\n    \t};\n\n    \tsegments = segments || 64;\n    \tradius = radius || 1;\n    \tradialSegments = radialSegments || 8;\n    \tclosed = closed || false;\n    \ttaper = taper || TubeGeometry.NoTaper;\n\n    \tvar grid = [];\n\n    \tvar scope = this,\n\n    \t\ttangent,\n    \t\tnormal,\n    \t\tbinormal,\n\n    \t\tnumpoints = segments + 1,\n\n    \t\tu, v, r,\n\n    \t\tcx, cy,\n    \t\tpos, pos2 = new Vector3(),\n    \t\ti, j,\n    \t\tip, jp,\n    \t\ta, b, c, d,\n    \t\tuva, uvb, uvc, uvd;\n\n    \tvar frames = new TubeGeometry.FrenetFrames( path, segments, closed ),\n    \t\ttangents = frames.tangents,\n    \t\tnormals = frames.normals,\n    \t\tbinormals = frames.binormals;\n\n    \t// proxy internals\n    \tthis.tangents = tangents;\n    \tthis.normals = normals;\n    \tthis.binormals = binormals;\n\n    \tfunction vert( x, y, z ) {\n\n    \t\treturn scope.vertices.push( new Vector3( x, y, z ) ) - 1;\n\n    \t}\n\n    \t// construct the grid\n\n    \tfor ( i = 0; i < numpoints; i ++ ) {\n\n    \t\tgrid[ i ] = [];\n\n    \t\tu = i / ( numpoints - 1 );\n\n    \t\tpos = path.getPointAt( u );\n\n    \t\ttangent = tangents[ i ];\n    \t\tnormal = normals[ i ];\n    \t\tbinormal = binormals[ i ];\n\n    \t\tr = radius * taper( u );\n\n    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n    \t\t\tv = j / radialSegments * 2 * Math.PI;\n\n    \t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n    \t\t\tcy = r * Math.sin( v );\n\n    \t\t\tpos2.copy( pos );\n    \t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n    \t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n    \t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\n    \t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\n    \t\t}\n\n    \t}\n\n\n    \t// construct the mesh\n\n    \tfor ( i = 0; i < segments; i ++ ) {\n\n    \t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n    \t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n    \t\t\tjp = ( j + 1 ) % radialSegments;\n\n    \t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n    \t\t\tb = grid[ ip ][ j ];\n    \t\t\tc = grid[ ip ][ jp ];\n    \t\t\td = grid[ i ][ jp ];\n\n    \t\t\tuva = new Vector2( i / segments, j / radialSegments );\n    \t\t\tuvb = new Vector2( ( i + 1 ) / segments, j / radialSegments );\n    \t\t\tuvc = new Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n    \t\t\tuvd = new Vector2( i / segments, ( j + 1 ) / radialSegments );\n\n    \t\t\tthis.faces.push( new Face3( a, b, d ) );\n    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n    \t\t\tthis.faces.push( new Face3( b, c, d ) );\n    \t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n    \t\t}\n\n    \t}\n\n    \tthis.computeFaceNormals();\n    \tthis.computeVertexNormals();\n\n    }\n\n    TubeGeometry.prototype = Object.create( Geometry.prototype );\n    TubeGeometry.prototype.constructor = TubeGeometry;\n\n    TubeGeometry.NoTaper = function ( u ) {\n\n    \treturn 1;\n\n    };\n\n    TubeGeometry.SinusoidalTaper = function ( u ) {\n\n    \treturn Math.sin( Math.PI * u );\n\n    };\n\n    // For computing of Frenet frames, exposing the tangents, normals and binormals the spline\n    TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\n    \tvar\tnormal = new Vector3(),\n\n    \t\ttangents = [],\n    \t\tnormals = [],\n    \t\tbinormals = [],\n\n    \t\tvec = new Vector3(),\n    \t\tmat = new Matrix4(),\n\n    \t\tnumpoints = segments + 1,\n    \t\ttheta,\n    \t\tsmallest,\n\n    \t\ttx, ty, tz,\n    \t\ti, u;\n\n\n    \t// expose internals\n    \tthis.tangents = tangents;\n    \tthis.normals = normals;\n    \tthis.binormals = binormals;\n\n    \t// compute the tangent vectors for each segment on the path\n\n    \tfor ( i = 0; i < numpoints; i ++ ) {\n\n    \t\tu = i / ( numpoints - 1 );\n\n    \t\ttangents[ i ] = path.getTangentAt( u );\n    \t\ttangents[ i ].normalize();\n\n    \t}\n\n    \tinitialNormal3();\n\n    \t/*\n    \tfunction initialNormal1(lastBinormal) {\n    \t\t// fixed start binormal. Has dangers of 0 vectors\n    \t\tnormals[ 0 ] = new THREE.Vector3();\n    \t\tbinormals[ 0 ] = new THREE.Vector3();\n    \t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n    \t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n    \t}\n\n    \tfunction initialNormal2() {\n\n    \t\t// This uses the Frenet-Serret formula for deriving binormal\n    \t\tvar t2 = path.getTangentAt( epsilon );\n\n    \t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n    \t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n    \t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\n    \t}\n    \t*/\n\n    \tfunction initialNormal3() {\n\n    \t\t// select an initial normal vector perpendicular to the first tangent vector,\n    \t\t// and in the direction of the smallest tangent xyz component\n\n    \t\tnormals[ 0 ] = new Vector3();\n    \t\tbinormals[ 0 ] = new Vector3();\n    \t\tsmallest = Number.MAX_VALUE;\n    \t\ttx = Math.abs( tangents[ 0 ].x );\n    \t\tty = Math.abs( tangents[ 0 ].y );\n    \t\ttz = Math.abs( tangents[ 0 ].z );\n\n    \t\tif ( tx <= smallest ) {\n\n    \t\t\tsmallest = tx;\n    \t\t\tnormal.set( 1, 0, 0 );\n\n    \t\t}\n\n    \t\tif ( ty <= smallest ) {\n\n    \t\t\tsmallest = ty;\n    \t\t\tnormal.set( 0, 1, 0 );\n\n    \t\t}\n\n    \t\tif ( tz <= smallest ) {\n\n    \t\t\tnormal.set( 0, 0, 1 );\n\n    \t\t}\n\n    \t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n    \t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n    \t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n    \t}\n\n\n    \t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\n    \tfor ( i = 1; i < numpoints; i ++ ) {\n\n    \t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n    \t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n    \t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n    \t\tif ( vec.length() > Number.EPSILON ) {\n\n    \t\t\tvec.normalize();\n\n    \t\t\ttheta = Math.acos( exports.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n    \t\t}\n\n    \t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n    \t}\n\n\n    \t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n    \tif ( closed ) {\n\n    \t\ttheta = Math.acos( exports.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n    \t\ttheta /= ( numpoints - 1 );\n\n    \t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\n    \t\t\ttheta = - theta;\n\n    \t\t}\n\n    \t\tfor ( i = 1; i < numpoints; i ++ ) {\n\n    \t\t\t// twist a little...\n    \t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n    \t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     *\n     * see: http://www.blackpawn.com/texts/pqtorus/\n     */\n    function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'TorusKnotBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\ttubularSegments: tubularSegments,\n    \t\tradialSegments: radialSegments,\n    \t\tp: p,\n    \t\tq: q\n    \t};\n\n    \tradius = radius || 100;\n    \ttube = tube || 40;\n    \ttubularSegments = Math.floor( tubularSegments ) || 64;\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \tp = p || 2;\n    \tq = q || 3;\n\n    \t// used to calculate buffer length\n    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n    \tvar i, j, index = 0, indexOffset = 0;\n\n    \tvar vertex = new Vector3();\n    \tvar normal = new Vector3();\n    \tvar uv = new Vector2();\n\n    \tvar P1 = new Vector3();\n    \tvar P2 = new Vector3();\n\n    \tvar B = new Vector3();\n    \tvar T = new Vector3();\n    \tvar N = new Vector3();\n\n    \t// generate vertices, normals and uvs\n\n    \tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n    \t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n    \t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n    \t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n    \t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n    \t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n    \t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n    \t\t// calculate orthonormal basis\n\n    \t\tT.subVectors( P2, P1 );\n    \t\tN.addVectors( P2, P1 );\n    \t\tB.crossVectors( T, N );\n    \t\tN.crossVectors( B, T );\n\n    \t\t// normalize B, N. T can be ignored, we don't use it\n\n    \t\tB.normalize();\n    \t\tN.normalize();\n\n    \t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n    \t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n    \t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n    \t\t\tvar cx = - tube * Math.cos( v );\n    \t\t\tvar cy = tube * Math.sin( v );\n\n    \t\t\t// now calculate the final vertex position.\n    \t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n    \t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n    \t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n    \t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n    \t\t\t// vertex\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n    \t\t\tnormal.subVectors( vertex, P1 ).normalize();\n    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n    \t\t\t// uv\n    \t\t\tuv.x = i / tubularSegments;\n    \t\t\tuv.y = j / radialSegments;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n    \t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n    \t\t\t// indices\n    \t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n    \t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n    \t\t\tvar c = ( radialSegments + 1 ) * j + i;\n    \t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// this function calculates the current position on the torus curve\n\n    \tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n    \t\tvar cu = Math.cos( u );\n    \t\tvar su = Math.sin( u );\n    \t\tvar quOverP = q / p * u;\n    \t\tvar cs = Math.cos( quOverP );\n\n    \t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n    \t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n    \t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n    \t}\n\n    }\n\n    TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n    /**\n     * @author oosmoxiecode\n     */\n\n    function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TorusKnotGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\ttubularSegments: tubularSegments,\n    \t\tradialSegments: radialSegments,\n    \t\tp: p,\n    \t\tq: q\n    \t};\n\n    \tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n    \tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n    \tthis.mergeVertices();\n\n    }\n\n    TorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n    TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'TorusBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\tradialSegments: radialSegments,\n    \t\ttubularSegments: tubularSegments,\n    \t\tarc: arc\n    \t};\n\n    \tradius = radius || 100;\n    \ttube = tube || 40;\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \ttubularSegments = Math.floor( tubularSegments ) || 6;\n    \tarc = arc || Math.PI * 2;\n\n    \t// used to calculate buffer length\n    \tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n    \tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n    \tvar vertices = new Float32Array( vertexCount * 3 );\n    \tvar normals = new Float32Array( vertexCount * 3 );\n    \tvar uvs = new Float32Array( vertexCount * 2 );\n\n    \t// offset variables\n    \tvar vertexBufferOffset = 0;\n    \tvar uvBufferOffset = 0;\n    \tvar indexBufferOffset = 0;\n\n    \t// helper variables\n    \tvar center = new Vector3();\n    \tvar vertex = new Vector3();\n    \tvar normal = new Vector3();\n\n    \tvar j, i;\n\n    \t// generate vertices, normals and uvs\n\n    \tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n    \t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n    \t\t\tvar u = i / tubularSegments * arc;\n    \t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n    \t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n    \t\t\tvertex.z = tube * Math.sin( v );\n\n    \t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n    \t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n    \t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\n    \t\t\t// this vector is used to calculate the normal\n    \t\t\tcenter.x = radius * Math.cos( u );\n    \t\t\tcenter.y = radius * Math.sin( u );\n\n    \t\t\t// normal\n    \t\t\tnormal.subVectors( vertex, center ).normalize();\n\n    \t\t\tnormals[ vertexBufferOffset ] = normal.x;\n    \t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n    \t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\n    \t\t\t// uv\n    \t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n    \t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\n    \t\t\t// update offsets\n    \t\t\tvertexBufferOffset += 3;\n    \t\t\tuvBufferOffset += 2;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n    \t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n    \t\t\t// indices\n    \t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n    \t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n    \t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n    \t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n    \t\t\t// face one\n    \t\t\tindices[ indexBufferOffset ] = a;\n    \t\t\tindices[ indexBufferOffset + 1 ] = b;\n    \t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n    \t\t\t// face two\n    \t\t\tindices[ indexBufferOffset + 3 ] = b;\n    \t\t\tindices[ indexBufferOffset + 4 ] = c;\n    \t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n    \t\t\t// update offset\n    \t\t\tindexBufferOffset += 6;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n    \tthis.setIndex( new BufferAttribute( indices, 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    }\n\n    TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n    /**\n     * @author oosmoxiecode\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n     */\n\n    function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'TorusGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\ttube: tube,\n    \t\tradialSegments: radialSegments,\n    \t\ttubularSegments: tubularSegments,\n    \t\tarc: arc\n    \t};\n\n    \tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\n    }\n\n    TorusGeometry.prototype = Object.create( Geometry.prototype );\n    TorusGeometry.prototype.constructor = TorusGeometry;\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    exports.ShapeUtils = {\n\n    \t// calculate area of the contour polygon\n\n    \tarea: function ( contour ) {\n\n    \t\tvar n = contour.length;\n    \t\tvar a = 0.0;\n\n    \t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n    \t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n    \t\t}\n\n    \t\treturn a * 0.5;\n\n    \t},\n\n    \ttriangulate: ( function () {\n\n    \t\t/**\n    \t\t * This code is a quick port of code written in C++ which was submitted to\n    \t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n    \t\t * See original code and more information here:\n    \t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n    \t\t *\n    \t\t * ported to actionscript by Zevan Rosser\n    \t\t * www.actionsnippet.com\n    \t\t *\n    \t\t * ported to javascript by Joshua Koo\n    \t\t * http://www.lab4games.net/zz85/blog\n    \t\t *\n    \t\t */\n\n    \t\tfunction snip( contour, u, v, w, n, verts ) {\n\n    \t\t\tvar p;\n    \t\t\tvar ax, ay, bx, by;\n    \t\t\tvar cx, cy, px, py;\n\n    \t\t\tax = contour[ verts[ u ] ].x;\n    \t\t\tay = contour[ verts[ u ] ].y;\n\n    \t\t\tbx = contour[ verts[ v ] ].x;\n    \t\t\tby = contour[ verts[ v ] ].y;\n\n    \t\t\tcx = contour[ verts[ w ] ].x;\n    \t\t\tcy = contour[ verts[ w ] ].y;\n\n    \t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\n    \t\t\tvar aX, aY, bX, bY, cX, cY;\n    \t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n    \t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n    \t\t\taX = cx - bx;  aY = cy - by;\n    \t\t\tbX = ax - cx;  bY = ay - cy;\n    \t\t\tcX = bx - ax;  cY = by - ay;\n\n    \t\t\tfor ( p = 0; p < n; p ++ ) {\n\n    \t\t\t\tpx = contour[ verts[ p ] ].x;\n    \t\t\t\tpy = contour[ verts[ p ] ].y;\n\n    \t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n    \t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n    \t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n    \t\t\t\tapx = px - ax;  apy = py - ay;\n    \t\t\t\tbpx = px - bx;  bpy = py - by;\n    \t\t\t\tcpx = px - cx;  cpy = py - cy;\n\n    \t\t\t\t// see if p is inside triangle abc\n\n    \t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n    \t\t\t\tcCROSSap = cX * apy - cY * apx;\n    \t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n    \t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n    \t\t\t}\n\n    \t\t\treturn true;\n\n    \t\t}\n\n    \t\t// takes in an contour array and returns\n\n    \t\treturn function triangulate( contour, indices ) {\n\n    \t\t\tvar n = contour.length;\n\n    \t\t\tif ( n < 3 ) return null;\n\n    \t\t\tvar result = [],\n    \t\t\t\tverts = [],\n    \t\t\t\tvertIndices = [];\n\n    \t\t\t/* we want a counter-clockwise polygon in verts */\n\n    \t\t\tvar u, v, w;\n\n    \t\t\tif ( exports.ShapeUtils.area( contour ) > 0.0 ) {\n\n    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n    \t\t\t} else {\n\n    \t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n    \t\t\t}\n\n    \t\t\tvar nv = n;\n\n    \t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n    \t\t\tvar count = 2 * nv;   /* error detection */\n\n    \t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n    \t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n    \t\t\t\tif ( ( count -- ) <= 0 ) {\n\n    \t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n    \t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n    \t\t\t\t\t//return null;\n    \t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n    \t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n    \t\t\t\t\tif ( indices ) return vertIndices;\n    \t\t\t\t\treturn result;\n\n    \t\t\t\t}\n\n    \t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n    \t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n    \t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n    \t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n    \t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n    \t\t\t\t\tvar a, b, c, s, t;\n\n    \t\t\t\t\t/* true names of the vertices */\n\n    \t\t\t\t\ta = verts[ u ];\n    \t\t\t\t\tb = verts[ v ];\n    \t\t\t\t\tc = verts[ w ];\n\n    \t\t\t\t\t/* output Triangle */\n\n    \t\t\t\t\tresult.push( [ contour[ a ],\n    \t\t\t\t\t\tcontour[ b ],\n    \t\t\t\t\t\tcontour[ c ] ] );\n\n\n    \t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n    \t\t\t\t\t/* remove v from the remaining polygon */\n\n    \t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n    \t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tnv --;\n\n    \t\t\t\t\t/* reset error detection counter */\n\n    \t\t\t\t\tcount = 2 * nv;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( indices ) return vertIndices;\n    \t\t\treturn result;\n\n    \t\t}\n\n    \t} )(),\n\n    \ttriangulateShape: function ( contour, holes ) {\n\n    \t\tfunction removeDupEndPts(points) {\n\n    \t\t\tvar l = points.length;\n\n    \t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n    \t\t\t\tpoints.pop();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tremoveDupEndPts( contour );\n    \t\tholes.forEach( removeDupEndPts );\n\n    \t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n    \t\t\t// inOtherPt needs to be collinear to the inSegment\n    \t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n    \t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n    \t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n    \t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n    \t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n    \t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n    \t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n    \t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n    \t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n    \t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n    \t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n    \t\t\t\t// not parallel\n\n    \t\t\t\tvar perpSeg2;\n    \t\t\t\tif ( limit > 0 ) {\n\n    \t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n    \t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n    \t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n    \t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n    \t\t\t\t}\n\n    \t\t\t\t// i.e. to reduce rounding errors\n    \t\t\t\t// intersection at endpoint of segment#1?\n    \t\t\t\tif ( perpSeg2 === 0 ) {\n\n    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\n    \t\t\t\t}\n    \t\t\t\tif ( perpSeg2 === limit ) {\n\n    \t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n    \t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n    \t\t\t\t\treturn [ inSeg1Pt2 ];\n\n    \t\t\t\t}\n    \t\t\t\t// intersection at endpoint of segment#2?\n    \t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n    \t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n    \t\t\t\t// return real intersection point\n    \t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n    \t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n    \t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// parallel or collinear\n    \t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n    \t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n    \t\t\t\t// they are collinear or degenerate\n    \t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n    \t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n    \t\t\t\t// both segments are points\n    \t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n    \t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n    \t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n    \t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\n    \t\t\t\t}\n    \t\t\t\t// segment#1  is a single point\n    \t\t\t\tif ( seg1Pt ) {\n\n    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n    \t\t\t\t\treturn [ inSeg1Pt1 ];\n\n    \t\t\t\t}\n    \t\t\t\t// segment#2  is a single point\n    \t\t\t\tif ( seg2Pt ) {\n\n    \t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n    \t\t\t\t\treturn [ inSeg2Pt1 ];\n\n    \t\t\t\t}\n\n    \t\t\t\t// they are collinear segments, which might overlap\n    \t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n    \t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n    \t\t\t\tif ( seg1dx !== 0 ) {\n\n    \t\t\t\t\t// the segments are NOT on a vertical line\n    \t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// the segments are on a vertical line\n    \t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n    \t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n    \t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n    \t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n    \t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n    \t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n    \t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n    \t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n    \t\t\t\t\t\treturn [ seg2min ];\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n    \t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n    \t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n    \t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n    \t\t\t\t\t\treturn [ seg1min ];\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n    \t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n    \t\t\t// The order of legs is important\n\n    \t\t\t// translation of all points, so that Vertex is at (0,0)\n    \t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n    \t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n    \t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n    \t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n    \t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n    \t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n    \t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n    \t\t\t\t// angle != 180 deg.\n\n    \t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n    \t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n    \t\t\t\tif ( from2toAngle > 0 ) {\n\n    \t\t\t\t\t// main angle < 180 deg.\n    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// main angle > 180 deg.\n    \t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\t// angle == 180 deg.\n    \t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n    \t\t\t\treturn\t( from2otherAngle > 0 );\n\n    \t\t\t}\n\n    \t\t}\n\n\n    \t\tfunction removeHoles( contour, holes ) {\n\n    \t\t\tvar shape = contour.concat(); // work on this shape\n    \t\t\tvar hole;\n\n    \t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n    \t\t\t\t// Check if hole point lies within angle around shape point\n    \t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n    \t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n    \t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n    \t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n    \t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n    \t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n    \t\t\t\tif ( ! insideAngle ) {\n\n    \t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n    \t\t\t\t\treturn\tfalse;\n\n    \t\t\t\t}\n\n    \t\t\t\t// Check if shape point lies within angle around hole point\n    \t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n    \t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n    \t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n    \t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n    \t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n    \t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n    \t\t\t\tif ( ! insideAngle ) {\n\n    \t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n    \t\t\t\t\treturn\tfalse;\n\n    \t\t\t\t}\n\n    \t\t\t\treturn\ttrue;\n\n    \t\t\t}\n\n    \t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n    \t\t\t\t// checks for intersections with shape edges\n    \t\t\t\tvar sIdx, nextIdx, intersection;\n    \t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n    \t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n    \t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n    \t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n    \t\t\t\t}\n\n    \t\t\t\treturn\tfalse;\n\n    \t\t\t}\n\n    \t\t\tvar indepHoles = [];\n\n    \t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n    \t\t\t\t// checks for intersections with hole edges\n    \t\t\t\tvar ihIdx, chkHole,\n    \t\t\t\t\thIdx, nextIdx, intersection;\n    \t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n    \t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n    \t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n    \t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n    \t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n    \t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n    \t\t\t\treturn\tfalse;\n\n    \t\t\t}\n\n    \t\t\tvar holeIndex, shapeIndex,\n    \t\t\t\tshapePt, holePt,\n    \t\t\t\tholeIdx, cutKey, failedCuts = [],\n    \t\t\t\ttmpShape1, tmpShape2,\n    \t\t\t\ttmpHole1, tmpHole2;\n\n    \t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\t\tindepHoles.push( h );\n\n    \t\t\t}\n\n    \t\t\tvar minShapeIndex = 0;\n    \t\t\tvar counter = indepHoles.length * 2;\n    \t\t\twhile ( indepHoles.length > 0 ) {\n\n    \t\t\t\tcounter --;\n    \t\t\t\tif ( counter < 0 ) {\n\n    \t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n    \t\t\t\t\tbreak;\n\n    \t\t\t\t}\n\n    \t\t\t\t// search for shape-vertex and hole-vertex,\n    \t\t\t\t// which can be connected without intersections\n    \t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n    \t\t\t\t\tshapePt = shape[ shapeIndex ];\n    \t\t\t\t\tholeIndex\t= - 1;\n\n    \t\t\t\t\t// search for hole which can be reached without intersections\n    \t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n    \t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n    \t\t\t\t\t\t// prevent multiple checks\n    \t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n    \t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n    \t\t\t\t\t\thole = holes[ holeIdx ];\n    \t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n    \t\t\t\t\t\t\tholePt = hole[ h2 ];\n    \t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n    \t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n    \t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n    \t\t\t\t\t\t\tholeIndex = h2;\n    \t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n    \t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n    \t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n    \t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n    \t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n    \t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n    \t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n    \t\t\t\t\t\t\t// Debug only, to show the selected cuts\n    \t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n    \t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n    \t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn shape; \t\t\t/* shape with no holes */\n\n    \t\t}\n\n\n    \t\tvar i, il, f, face,\n    \t\t\tkey, index,\n    \t\t\tallPointsMap = {};\n\n    \t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n    \t\tvar allpoints = contour.concat();\n\n    \t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n    \t\t}\n\n    \t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n    \t\t// prepare all points map\n\n    \t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n    \t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n    \t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n    \t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\n    \t\t\t}\n\n    \t\t\tallPointsMap[ key ] = i;\n\n    \t\t}\n\n    \t\t// remove holes by cutting paths to holes and adding them to the shape\n    \t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n    \t\tvar triangles = exports.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n    \t\t//console.log( \"triangles\",triangles, triangles.length );\n\n    \t\t// check all face vertices against all points map\n\n    \t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n    \t\t\tface = triangles[ i ];\n\n    \t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n    \t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n    \t\t\t\tindex = allPointsMap[ key ];\n\n    \t\t\t\tif ( index !== undefined ) {\n\n    \t\t\t\t\tface[ f ] = index;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn triangles.concat();\n\n    \t},\n\n    \tisClockWise: function ( pts ) {\n\n    \t\treturn exports.ShapeUtils.area( pts ) < 0;\n\n    \t},\n\n    \t// Bezier Curves formulas obtained from\n    \t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n    \t// Quad Bezier Functions\n\n    \tb2: ( function () {\n\n    \t\tfunction b2p0( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn k * k * p;\n\n    \t\t}\n\n    \t\tfunction b2p1( t, p ) {\n\n    \t\t\treturn 2 * ( 1 - t ) * t * p;\n\n    \t\t}\n\n    \t\tfunction b2p2( t, p ) {\n\n    \t\t\treturn t * t * p;\n\n    \t\t}\n\n    \t\treturn function b2( t, p0, p1, p2 ) {\n\n    \t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\n    \t\t};\n\n    \t} )(),\n\n    \t// Cubic Bezier Functions\n\n    \tb3: ( function () {\n\n    \t\tfunction b3p0( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn k * k * k * p;\n\n    \t\t}\n\n    \t\tfunction b3p1( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn 3 * k * k * t * p;\n\n    \t\t}\n\n    \t\tfunction b3p2( t, p ) {\n\n    \t\t\tvar k = 1 - t;\n    \t\t\treturn 3 * k * t * t * p;\n\n    \t\t}\n\n    \t\tfunction b3p3( t, p ) {\n\n    \t\t\treturn t * t * t * p;\n\n    \t\t}\n\n    \t\treturn function b3( t, p0, p1, p2, p3 ) {\n\n    \t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\n    \t\t};\n\n    \t} )()\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     *\n     * Creates extruded geometry from a path shape.\n     *\n     * parameters = {\n     *\n     *  curveSegments: <int>, // number of points on the curves\n     *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n     *  amount: <int>, // Depth to extrude the shape\n     *\n     *  bevelEnabled: <bool>, // turn on bevel\n     *  bevelThickness: <float>, // how deep into the original shape bevel goes\n     *  bevelSize: <float>, // how far from shape outline is bevel\n     *  bevelSegments: <int>, // number of bevel layers\n     *\n     *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n     *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n     *\n     *  uvGenerator: <Object> // object that provides UV generator functions\n     *\n     * }\n     **/\n\n    function ExtrudeGeometry( shapes, options ) {\n\n    \tif ( typeof( shapes ) === \"undefined\" ) {\n\n    \t\tshapes = [];\n    \t\treturn;\n\n    \t}\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ExtrudeGeometry';\n\n    \tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n    \tthis.addShapeList( shapes, options );\n\n    \tthis.computeFaceNormals();\n\n    \t// can't really use automatic vertex normals\n    \t// as then front and back sides get smoothed too\n    \t// should do separate smoothing just for sides\n\n    \t//this.computeVertexNormals();\n\n    \t//console.log( \"took\", ( Date.now() - startTime ) );\n\n    }\n\n    ExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n    ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n    ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n    \tvar sl = shapes.length;\n\n    \tfor ( var s = 0; s < sl; s ++ ) {\n\n    \t\tvar shape = shapes[ s ];\n    \t\tthis.addShape( shape, options );\n\n    \t}\n\n    };\n\n    ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\n    \tvar amount = options.amount !== undefined ? options.amount : 100;\n\n    \tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n    \tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n    \tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n    \tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n    \tvar steps = options.steps !== undefined ? options.steps : 1;\n\n    \tvar extrudePath = options.extrudePath;\n    \tvar extrudePts, extrudeByPath = false;\n\n    \t// Use default WorldUVGenerator if no UV generators are specified.\n    \tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\n    \tvar splineTube, binormal, normal, position2;\n    \tif ( extrudePath ) {\n\n    \t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n    \t\textrudeByPath = true;\n    \t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n    \t\t// SETUP TNB variables\n\n    \t\t// Reuse TNB from TubeGeomtry for now.\n    \t\t// TODO1 - have a .isClosed in spline?\n\n    \t\tsplineTube = options.frames !== undefined ? options.frames : new TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\n    \t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n    \t\tbinormal = new Vector3();\n    \t\tnormal = new Vector3();\n    \t\tposition2 = new Vector3();\n\n    \t}\n\n    \t// Safeguards if bevels are not enabled\n\n    \tif ( ! bevelEnabled ) {\n\n    \t\tbevelSegments = 0;\n    \t\tbevelThickness = 0;\n    \t\tbevelSize = 0;\n\n    \t}\n\n    \t// Variables initialization\n\n    \tvar ahole, h, hl; // looping of holes\n    \tvar scope = this;\n\n    \tvar shapesOffset = this.vertices.length;\n\n    \tvar shapePoints = shape.extractPoints( curveSegments );\n\n    \tvar vertices = shapePoints.shape;\n    \tvar holes = shapePoints.holes;\n\n    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\n    \tif ( reverse ) {\n\n    \t\tvertices = vertices.reverse();\n\n    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n\n    \t\t\tif ( exports.ShapeUtils.isClockWise( ahole ) ) {\n\n    \t\t\t\tholes[ h ] = ahole.reverse();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\n    \t}\n\n\n    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\n    \t/* Vertices */\n\n    \tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\tahole = holes[ h ];\n\n    \t\tvertices = vertices.concat( ahole );\n\n    \t}\n\n\n    \tfunction scalePt2( pt, vec, size ) {\n\n    \t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n    \t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n    \t}\n\n    \tvar b, bs, t, z,\n    \t\tvert, vlen = vertices.length,\n    \t\tface, flen = faces.length;\n\n\n    \t// Find directions for point movement\n\n\n    \tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n    \t\t// computes for inPt the corresponding point inPt' on a new contour\n    \t\t//   shifted by 1 unit (length of normalized vector) to the left\n    \t\t// if we walk along contour clockwise, this new contour is outside the old one\n    \t\t//\n    \t\t// inPt' is the intersection of the two lines parallel to the two\n    \t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n    \t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\n    \t\t// good reading for geometry algorithms (here: line-line intersection)\n    \t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n    \t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n    \t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\n    \t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n    \t\t// check for collinear edges\n    \t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n    \t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n    \t\t\t// not collinear\n\n    \t\t\t// length of vectors for normalizing\n\n    \t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n    \t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n    \t\t\t// shift adjacent points by unit vectors to the left\n\n    \t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n    \t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n    \t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n    \t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n    \t\t\t// scaling factor for v_prev to intersection point\n\n    \t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n    \t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n    \t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n    \t\t\t// vector from inPt to intersection point\n\n    \t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n    \t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n    \t\t\t// Don't normalize!, otherwise sharp corners become ugly\n    \t\t\t//  but prevent crazy spikes\n    \t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n    \t\t\tif ( v_trans_lensq <= 2 ) {\n\n    \t\t\t\treturn\tnew Vector2( v_trans_x, v_trans_y );\n\n    \t\t\t} else {\n\n    \t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// handle special case of collinear edges\n\n    \t\t\tvar direction_eq = false;\t\t// assumes: opposite\n    \t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n    \t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n    \t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t}\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n    \t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n    \t\t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n    \t\t\t\t\t\tdirection_eq = true;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( direction_eq ) {\n\n    \t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n    \t\t\t\tv_trans_x = - v_prev_y;\n    \t\t\t\tv_trans_y =  v_prev_x;\n    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n    \t\t\t} else {\n\n    \t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n    \t\t\t\tv_trans_x = v_prev_x;\n    \t\t\t\tv_trans_y = v_prev_y;\n    \t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn\tnew Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n    \t}\n\n\n    \tvar contourMovements = [];\n\n    \tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n    \t\tif ( j === il ) j = 0;\n    \t\tif ( k === il ) k = 0;\n\n    \t\t//  (j)---(i)---(k)\n    \t\t// console.log('i,j,k', i, j , k)\n\n    \t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n    \t}\n\n    \tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\n    \tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\tahole = holes[ h ];\n\n    \t\toneHoleMovements = [];\n\n    \t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n    \t\t\tif ( j === il ) j = 0;\n    \t\t\tif ( k === il ) k = 0;\n\n    \t\t\t//  (j)---(i)---(k)\n    \t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n    \t\t}\n\n    \t\tholesMovements.push( oneHoleMovements );\n    \t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n    \t}\n\n\n    \t// Loop bevelSegments, 1 for the front, 1 for the back\n\n    \tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n    \t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n    \t\tt = b / bevelSegments;\n    \t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n    \t\t// contract shape\n\n    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n    \t\t\tv( vert.x, vert.y,  - z );\n\n    \t\t}\n\n    \t\t// expand holes\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\toneHoleMovements = holesMovements[ h ];\n\n    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n    \t\t\t\tv( vert.x, vert.y,  - z );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tbs = bevelSize;\n\n    \t// Back facing vertices\n\n    \tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n    \t\tif ( ! extrudeByPath ) {\n\n    \t\t\tv( vert.x, vert.y, 0 );\n\n    \t\t} else {\n\n    \t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n    \t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n    \t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n    \t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n    \t\t\tv( position2.x, position2.y, position2.z );\n\n    \t\t}\n\n    \t}\n\n    \t// Add stepped vertices...\n    \t// Including front facing vertices\n\n    \tvar s;\n\n    \tfor ( s = 1; s <= steps; s ++ ) {\n\n    \t\tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n    \t\t\tif ( ! extrudeByPath ) {\n\n    \t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n    \t\t\t} else {\n\n    \t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n    \t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n    \t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n    \t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n    \t\t\t\tv( position2.x, position2.y, position2.z );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \t// Add bevel segments planes\n\n    \t//for ( b = 1; b <= bevelSegments; b ++ ) {\n    \tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n    \t\tt = b / bevelSegments;\n    \t\tz = bevelThickness * Math.cos ( t * Math.PI / 2 );\n    \t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n    \t\t// contract shape\n\n    \t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n    \t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n    \t\t\tv( vert.x, vert.y,  amount + z );\n\n    \t\t}\n\n    \t\t// expand holes\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\toneHoleMovements = holesMovements[ h ];\n\n    \t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n    \t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n    \t\t\t\tif ( ! extrudeByPath ) {\n\n    \t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \t/* Faces */\n\n    \t// Top and bottom faces\n\n    \tbuildLidFaces();\n\n    \t// Sides faces\n\n    \tbuildSideFaces();\n\n\n    \t/////  Internal functions\n\n    \tfunction buildLidFaces() {\n\n    \t\tif ( bevelEnabled ) {\n\n    \t\t\tvar layer = 0; // steps + 1\n    \t\t\tvar offset = vlen * layer;\n\n    \t\t\t// Bottom faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n    \t\t\t}\n\n    \t\t\tlayer = steps + bevelSegments * 2;\n    \t\t\toffset = vlen * layer;\n\n    \t\t\t// Top faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// Bottom faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n    \t\t\t}\n\n    \t\t\t// Top faces\n\n    \t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\t\t\tface = faces[ i ];\n    \t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \t// Create faces for the z-sides of the shape\n\n    \tfunction buildSideFaces() {\n\n    \t\tvar layeroffset = 0;\n    \t\tsidewalls( contour, layeroffset );\n    \t\tlayeroffset += contour.length;\n\n    \t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n    \t\t\tahole = holes[ h ];\n    \t\t\tsidewalls( ahole, layeroffset );\n\n    \t\t\t//, true\n    \t\t\tlayeroffset += ahole.length;\n\n    \t\t}\n\n    \t}\n\n    \tfunction sidewalls( contour, layeroffset ) {\n\n    \t\tvar j, k;\n    \t\ti = contour.length;\n\n    \t\twhile ( -- i >= 0 ) {\n\n    \t\t\tj = i;\n    \t\t\tk = i - 1;\n    \t\t\tif ( k < 0 ) k = contour.length - 1;\n\n    \t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n    \t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\n    \t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n    \t\t\t\tvar slen1 = vlen * s;\n    \t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n    \t\t\t\tvar a = layeroffset + j + slen1,\n    \t\t\t\t\tb = layeroffset + k + slen1,\n    \t\t\t\t\tc = layeroffset + k + slen2,\n    \t\t\t\t\td = layeroffset + j + slen2;\n\n    \t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n\n    \tfunction v( x, y, z ) {\n\n    \t\tscope.vertices.push( new Vector3( x, y, z ) );\n\n    \t}\n\n    \tfunction f3( a, b, c ) {\n\n    \t\ta += shapesOffset;\n    \t\tb += shapesOffset;\n    \t\tc += shapesOffset;\n\n    \t\tscope.faces.push( new Face3( a, b, c, null, null, 0 ) );\n\n    \t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\n    \t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\n    \t}\n\n    \tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n    \t\ta += shapesOffset;\n    \t\tb += shapesOffset;\n    \t\tc += shapesOffset;\n    \t\td += shapesOffset;\n\n    \t\tscope.faces.push( new Face3( a, b, d, null, null, 1 ) );\n    \t\tscope.faces.push( new Face3( b, c, d, null, null, 1 ) );\n\n    \t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\n    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n    \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\n    \t}\n\n    };\n\n    ExtrudeGeometry.WorldUVGenerator = {\n\n    \tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\n    \t\tvar vertices = geometry.vertices;\n\n    \t\tvar a = vertices[ indexA ];\n    \t\tvar b = vertices[ indexB ];\n    \t\tvar c = vertices[ indexC ];\n\n    \t\treturn [\n    \t\t\tnew Vector2( a.x, a.y ),\n    \t\t\tnew Vector2( b.x, b.y ),\n    \t\t\tnew Vector2( c.x, c.y )\n    \t\t];\n\n    \t},\n\n    \tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\n    \t\tvar vertices = geometry.vertices;\n\n    \t\tvar a = vertices[ indexA ];\n    \t\tvar b = vertices[ indexB ];\n    \t\tvar c = vertices[ indexC ];\n    \t\tvar d = vertices[ indexD ];\n\n    \t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\n    \t\t\treturn [\n    \t\t\t\tnew Vector2( a.x, 1 - a.z ),\n    \t\t\t\tnew Vector2( b.x, 1 - b.z ),\n    \t\t\t\tnew Vector2( c.x, 1 - c.z ),\n    \t\t\t\tnew Vector2( d.x, 1 - d.z )\n    \t\t\t];\n\n    \t\t} else {\n\n    \t\t\treturn [\n    \t\t\t\tnew Vector2( a.y, 1 - a.z ),\n    \t\t\t\tnew Vector2( b.y, 1 - b.z ),\n    \t\t\t\tnew Vector2( c.y, 1 - c.z ),\n    \t\t\t\tnew Vector2( d.y, 1 - d.z )\n    \t\t\t];\n\n    \t\t}\n\n    \t}\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * Text = 3D Text\n     *\n     * parameters = {\n     *  font: <THREE.Font>, // font\n     *\n     *  size: <float>, // size of the text\n     *  height: <float>, // thickness to extrude text\n     *  curveSegments: <int>, // number of points on the curves\n     *\n     *  bevelEnabled: <bool>, // turn on bevel\n     *  bevelThickness: <float>, // how deep into text bevel goes\n     *  bevelSize: <float> // how far from text outline is bevel\n     * }\n     */\n\n    function TextGeometry( text, parameters ) {\n\n    \tparameters = parameters || {};\n\n    \tvar font = parameters.font;\n\n    \tif ( (font && font.isFont) === false ) {\n\n    \t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n    \t\treturn new Geometry();\n\n    \t}\n\n    \tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n    \t// translate parameters to ExtrudeGeometry API\n\n    \tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n    \t// defaults\n\n    \tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n    \tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n    \tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n    \tExtrudeGeometry.call( this, shapes, parameters );\n\n    \tthis.type = 'TextGeometry';\n\n    }\n\n    TextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );\n    TextGeometry.prototype.constructor = TextGeometry;\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     * based on THREE.SphereGeometry\n     */\n\n    function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'SphereBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tradius = radius || 50;\n\n    \twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n    \theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n    \tphiStart = phiStart !== undefined ? phiStart : 0;\n    \tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n    \tvar thetaEnd = thetaStart + thetaLength;\n\n    \tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\n    \tvar positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \tvar index = 0, vertices = [], normal = new Vector3();\n\n    \tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n    \t\tvar verticesRow = [];\n\n    \t\tvar v = y / heightSegments;\n\n    \t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\n    \t\t\tvar u = x / widthSegments;\n\n    \t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n    \t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n    \t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n    \t\t\tnormal.set( px, py, pz ).normalize();\n\n    \t\t\tpositions.setXYZ( index, px, py, pz );\n    \t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n    \t\t\tuvs.setXY( index, u, 1 - v );\n\n    \t\t\tverticesRow.push( index );\n\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\tvertices.push( verticesRow );\n\n    \t}\n\n    \tvar indices = [];\n\n    \tfor ( var y = 0; y < heightSegments; y ++ ) {\n\n    \t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\n    \t\t\tvar v1 = vertices[ y ][ x + 1 ];\n    \t\t\tvar v2 = vertices[ y ][ x ];\n    \t\t\tvar v3 = vertices[ y + 1 ][ x ];\n    \t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\n    \t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n    \t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\n    \t\t}\n\n    \t}\n\n    \tthis.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );\n    \tthis.addAttribute( 'position', positions );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n    }\n\n    SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'SphereGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\n    }\n\n    SphereGeometry.prototype = Object.create( Geometry.prototype );\n    SphereGeometry.prototype.constructor = SphereGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'RingBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tinnerRadius: innerRadius,\n    \t\touterRadius: outerRadius,\n    \t\tthetaSegments: thetaSegments,\n    \t\tphiSegments: phiSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tinnerRadius = innerRadius || 20;\n    \touterRadius = outerRadius || 50;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    \tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n    \tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n    \tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// some helper variables\n    \tvar index = 0, indexOffset = 0, segment;\n    \tvar radius = innerRadius;\n    \tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n    \tvar vertex = new Vector3();\n    \tvar uv = new Vector2();\n    \tvar j, i;\n\n    \t// generate vertices, normals and uvs\n\n    \t// values are generate from the inside of the ring to the outside\n\n    \tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n    \t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n    \t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = radius * Math.cos( segment );\n    \t\t\tvertex.y = radius * Math.sin( segment );\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n    \t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex++;\n\n    \t\t}\n\n    \t\t// increase the radius for next row of vertices\n    \t\tradius += radiusStep;\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( j = 0; j < phiSegments; j ++ ) {\n\n    \t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n    \t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n    \t\t\tsegment = i + thetaSegmentLevel;\n\n    \t\t\t// indices\n    \t\t\tvar a = segment;\n    \t\t\tvar b = segment + thetaSegments + 1;\n    \t\t\tvar c = segment + thetaSegments + 2;\n    \t\t\tvar d = segment + 1;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    }\n\n    RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    RingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n    /**\n     * @author Kaleb Murphy\n     */\n\n    function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'RingGeometry';\n\n    \tthis.parameters = {\n    \t\tinnerRadius: innerRadius,\n    \t\touterRadius: outerRadius,\n    \t\tthetaSegments: thetaSegments,\n    \t\tphiSegments: phiSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\n    }\n\n    RingGeometry.prototype = Object.create( Geometry.prototype );\n    RingGeometry.prototype.constructor = RingGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n     */\n\n    function PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'PlaneGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments\n    \t};\n\n    \tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\n    }\n\n    PlaneGeometry.prototype = Object.create( Geometry.prototype );\n    PlaneGeometry.prototype.constructor = PlaneGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n     // points - to create a closed torus, one must use a set of points\n     //    like so: [ a, b, c, d, a ], see first is the same as last.\n     // segments - the number of circumference segments to create\n     // phiStart - the starting radian\n     // phiLength - the radian (0 to 2PI) range of the lathed section\n     //    2PI is a closed lathe, less than 2PI is a portion.\n\n    function LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'LatheBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tpoints: points,\n    \t\tsegments: segments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength\n    \t};\n\n    \tsegments = Math.floor( segments ) || 12;\n    \tphiStart = phiStart || 0;\n    \tphiLength = phiLength || Math.PI * 2;\n\n    \t// clamp phiLength so it's in range of [ 0, 2PI ]\n    \tphiLength = exports.Math.clamp( phiLength, 0, Math.PI * 2 );\n\n    \t// these are used to calculate buffer length\n    \tvar vertexCount = ( segments + 1 ) * points.length;\n    \tvar indexCount = segments * points.length * 2 * 3;\n\n    \t// buffers\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n    \tvar index = 0, indexOffset = 0, base;\n    \tvar inverseSegments = 1.0 / segments;\n    \tvar vertex = new Vector3();\n    \tvar uv = new Vector2();\n    \tvar i, j;\n\n    \t// generate vertices and uvs\n\n    \tfor ( i = 0; i <= segments; i ++ ) {\n\n    \t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n    \t\tvar sin = Math.sin( phi );\n    \t\tvar cos = Math.cos( phi );\n\n    \t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = points[ j ].x * sin;\n    \t\t\tvertex.y = points[ j ].y;\n    \t\t\tvertex.z = points[ j ].x * cos;\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// uv\n    \t\t\tuv.x = i / segments;\n    \t\t\tuv.y = j / ( points.length - 1 );\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t}\n\n    \t// generate indices\n\n    \tfor ( i = 0; i < segments; i ++ ) {\n\n    \t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n    \t\t\tbase = j + i * points.length;\n\n    \t\t\t// indices\n    \t\t\tvar a = base;\n    \t\t\tvar b = base + points.length;\n    \t\t\tvar c = base + points.length + 1;\n    \t\t\tvar d = base + 1;\n\n    \t\t\t// face one\n    \t\t\tindices.setX( indexOffset, a ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t\t// face two\n    \t\t\tindices.setX( indexOffset, b ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, c ); indexOffset++;\n    \t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n    \t\t}\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// generate normals\n\n    \tthis.computeVertexNormals();\n\n    \t// if the geometry is closed, we need to average the normals along the seam.\n    \t// because the corresponding vertices are identical (but still have different UVs).\n\n    \tif( phiLength === Math.PI * 2 ) {\n\n    \t\tvar normals = this.attributes.normal.array;\n    \t\tvar n1 = new Vector3();\n    \t\tvar n2 = new Vector3();\n    \t\tvar n = new Vector3();\n\n    \t\t// this is the buffer offset for the last line of vertices\n    \t\tbase = segments * points.length * 3;\n\n    \t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n    \t\t\t// select the normal of the vertex in the first line\n    \t\t\tn1.x = normals[ j + 0 ];\n    \t\t\tn1.y = normals[ j + 1 ];\n    \t\t\tn1.z = normals[ j + 2 ];\n\n    \t\t\t// select the normal of the vertex in the last line\n    \t\t\tn2.x = normals[ base + j + 0 ];\n    \t\t\tn2.y = normals[ base + j + 1 ];\n    \t\t\tn2.z = normals[ base + j + 2 ];\n\n    \t\t\t// average normals\n    \t\t\tn.addVectors( n1, n2 ).normalize();\n\n    \t\t\t// assign the new values to both normals\n    \t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n    \t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n    \t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n    \t\t} // next row\n\n    \t}\n\n    }\n\n    LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n    /**\n     * @author astrodud / http://astrodud.isgreat.org/\n     * @author zz85 / https://github.com/zz85\n     * @author bhouston / http://clara.io\n     */\n\n    // points - to create a closed torus, one must use a set of points\n    //    like so: [ a, b, c, d, a ], see first is the same as last.\n    // segments - the number of circumference segments to create\n    // phiStart - the starting radian\n    // phiLength - the radian (0 to 2PI) range of the lathed section\n    //    2PI is a closed lathe, less than 2PI is a portion.\n\n    function LatheGeometry( points, segments, phiStart, phiLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'LatheGeometry';\n\n    \tthis.parameters = {\n    \t\tpoints: points,\n    \t\tsegments: segments,\n    \t\tphiStart: phiStart,\n    \t\tphiLength: phiLength\n    \t};\n\n    \tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n    \tthis.mergeVertices();\n\n    }\n\n    LatheGeometry.prototype = Object.create( Geometry.prototype );\n    LatheGeometry.prototype.constructor = LatheGeometry;\n\n    /**\n     * @author jonobr1 / http://jonobr1.com\n     *\n     * Creates a one-sided polygonal geometry from a path shape. Similar to\n     * ExtrudeGeometry.\n     *\n     * parameters = {\n     *\n     *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n     *\n     *\tmaterial: <int> // material index for front and back faces\n     *\tuvGenerator: <Object> // object that provides UV generator functions\n     *\n     * }\n     **/\n\n    function ShapeGeometry( shapes, options ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'ShapeGeometry';\n\n    \tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\n    \tthis.addShapeList( shapes, options );\n\n    \tthis.computeFaceNormals();\n\n    }\n\n    ShapeGeometry.prototype = Object.create( Geometry.prototype );\n    ShapeGeometry.prototype.constructor = ShapeGeometry;\n\n    /**\n     * Add an array of shapes to THREE.ShapeGeometry.\n     */\n    ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n    \tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n    \t\tthis.addShape( shapes[ i ], options );\n\n    \t}\n\n    \treturn this;\n\n    };\n\n    /**\n     * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n     */\n    ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\n    \tif ( options === undefined ) options = {};\n    \tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n    \tvar material = options.material;\n    \tvar uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\n    \t//\n\n    \tvar i, l, hole;\n\n    \tvar shapesOffset = this.vertices.length;\n    \tvar shapePoints = shape.extractPoints( curveSegments );\n\n    \tvar vertices = shapePoints.shape;\n    \tvar holes = shapePoints.holes;\n\n    \tvar reverse = ! exports.ShapeUtils.isClockWise( vertices );\n\n    \tif ( reverse ) {\n\n    \t\tvertices = vertices.reverse();\n\n    \t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n    \t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n    \t\t\thole = holes[ i ];\n\n    \t\t\tif ( exports.ShapeUtils.isClockWise( hole ) ) {\n\n    \t\t\t\tholes[ i ] = hole.reverse();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treverse = false;\n\n    \t}\n\n    \tvar faces = exports.ShapeUtils.triangulateShape( vertices, holes );\n\n    \t// Vertices\n\n    \tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n    \t\thole = holes[ i ];\n    \t\tvertices = vertices.concat( hole );\n\n    \t}\n\n    \t//\n\n    \tvar vert, vlen = vertices.length;\n    \tvar face, flen = faces.length;\n\n    \tfor ( i = 0; i < vlen; i ++ ) {\n\n    \t\tvert = vertices[ i ];\n\n    \t\tthis.vertices.push( new Vector3( vert.x, vert.y, 0 ) );\n\n    \t}\n\n    \tfor ( i = 0; i < flen; i ++ ) {\n\n    \t\tface = faces[ i ];\n\n    \t\tvar a = face[ 0 ] + shapesOffset;\n    \t\tvar b = face[ 1 ] + shapesOffset;\n    \t\tvar c = face[ 2 ] + shapesOffset;\n\n    \t\tthis.faces.push( new Face3( a, b, c, null, null, material ) );\n    \t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\n    \t}\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function EdgesGeometry( geometry, thresholdAngle ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n    \tvar thresholdDot = Math.cos( exports.Math.DEG2RAD * thresholdAngle );\n\n    \tvar edge = [ 0, 0 ], hash = {};\n\n    \tfunction sortFunction( a, b ) {\n\n    \t\treturn a - b;\n\n    \t}\n\n    \tvar keys = [ 'a', 'b', 'c' ];\n\n    \tvar geometry2;\n\n    \tif ( (geometry && geometry.isBufferGeometry) ) {\n\n    \t\tgeometry2 = new Geometry();\n    \t\tgeometry2.fromBufferGeometry( geometry );\n\n    \t} else {\n\n    \t\tgeometry2 = geometry.clone();\n\n    \t}\n\n    \tgeometry2.mergeVertices();\n    \tgeometry2.computeFaceNormals();\n\n    \tvar vertices = geometry2.vertices;\n    \tvar faces = geometry2.faces;\n\n    \tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\tvar face = faces[ i ];\n\n    \t\tfor ( var j = 0; j < 3; j ++ ) {\n\n    \t\t\tedge[ 0 ] = face[ keys[ j ] ];\n    \t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n    \t\t\tedge.sort( sortFunction );\n\n    \t\t\tvar key = edge.toString();\n\n    \t\t\tif ( hash[ key ] === undefined ) {\n\n    \t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\n    \t\t\t} else {\n\n    \t\t\t\thash[ key ].face2 = i;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \tvar coords = [];\n\n    \tfor ( var key in hash ) {\n\n    \t\tvar h = hash[ key ];\n\n    \t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\n    \t\t\tvar vertex = vertices[ h.vert1 ];\n    \t\t\tcoords.push( vertex.x );\n    \t\t\tcoords.push( vertex.y );\n    \t\t\tcoords.push( vertex.z );\n\n    \t\t\tvertex = vertices[ h.vert2 ];\n    \t\t\tcoords.push( vertex.x );\n    \t\t\tcoords.push( vertex.y );\n    \t\t\tcoords.push( vertex.z );\n\n    \t\t}\n\n    \t}\n\n    \tthis.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );\n\n    }\n\n    EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n    EdgesGeometry.prototype.constructor = EdgesGeometry;\n\n    /**\n     * @author Mugen87 / https://github.com/Mugen87\n     */\n\n    function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'CylinderBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradiusTop: radiusTop,\n    \t\tradiusBottom: radiusBottom,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tvar scope = this;\n\n    \tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n    \tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n    \theight = height !== undefined ? height : 100;\n\n    \tradialSegments = Math.floor( radialSegments ) || 8;\n    \theightSegments = Math.floor( heightSegments ) || 1;\n\n    \topenEnded = openEnded !== undefined ? openEnded : false;\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\n    \t// used to calculate buffer length\n\n    \tvar nbCap = 0;\n\n    \tif ( openEnded === false ) {\n\n    \t\tif ( radiusTop > 0 ) nbCap ++;\n    \t\tif ( radiusBottom > 0 ) nbCap ++;\n\n    \t}\n\n    \tvar vertexCount = calculateVertexCount();\n    \tvar indexCount = calculateIndexCount();\n\n    \t// buffers\n\n    \tvar indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n    \tvar vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n    \tvar uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n    \t// helper variables\n\n    \tvar index = 0,\n    \t    indexOffset = 0,\n    \t    indexArray = [],\n    \t    halfHeight = height / 2;\n\n    \t// group variables\n    \tvar groupStart = 0;\n\n    \t// generate geometry\n\n    \tgenerateTorso();\n\n    \tif ( openEnded === false ) {\n\n    \t\tif ( radiusTop > 0 ) generateCap( true );\n    \t\tif ( radiusBottom > 0 ) generateCap( false );\n\n    \t}\n\n    \t// build geometry\n\n    \tthis.setIndex( indices );\n    \tthis.addAttribute( 'position', vertices );\n    \tthis.addAttribute( 'normal', normals );\n    \tthis.addAttribute( 'uv', uvs );\n\n    \t// helper functions\n\n    \tfunction calculateVertexCount() {\n\n    \t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\n    \t\tif ( openEnded === false ) {\n\n    \t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\n    \t\t}\n\n    \t\treturn count;\n\n    \t}\n\n    \tfunction calculateIndexCount() {\n\n    \t\tvar count = radialSegments * heightSegments * 2 * 3;\n\n    \t\tif ( openEnded === false ) {\n\n    \t\t\tcount += radialSegments * nbCap * 3;\n\n    \t\t}\n\n    \t\treturn count;\n\n    \t}\n\n    \tfunction generateTorso() {\n\n    \t\tvar x, y;\n    \t\tvar normal = new Vector3();\n    \t\tvar vertex = new Vector3();\n\n    \t\tvar groupCount = 0;\n\n    \t\t// this will be used to calculate the normal\n    \t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n    \t\t// generate vertices, normals and uvs\n\n    \t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n    \t\t\tvar indexRow = [];\n\n    \t\t\tvar v = y / heightSegments;\n\n    \t\t\t// calculate the radius of the current row\n    \t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n    \t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n    \t\t\t\tvar u = x / radialSegments;\n\n    \t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n    \t\t\t\tvar sinTheta = Math.sin( theta );\n    \t\t\t\tvar cosTheta = Math.cos( theta );\n\n    \t\t\t\t// vertex\n    \t\t\t\tvertex.x = radius * sinTheta;\n    \t\t\t\tvertex.y = - v * height + halfHeight;\n    \t\t\t\tvertex.z = radius * cosTheta;\n    \t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t\t// normal\n    \t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n    \t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n    \t\t\t\t// uv\n    \t\t\t\tuvs.setXY( index, u, 1 - v );\n\n    \t\t\t\t// save index of vertex in respective row\n    \t\t\t\tindexRow.push( index );\n\n    \t\t\t\t// increase index\n    \t\t\t\tindex ++;\n\n    \t\t\t}\n\n    \t\t\t// now save vertices of the row in our index array\n    \t\t\tindexArray.push( indexRow );\n\n    \t\t}\n\n    \t\t// generate indices\n\n    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n    \t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n    \t\t\t\t// we use the index array to access the correct indices\n    \t\t\t\tvar i1 = indexArray[ y ][ x ];\n    \t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n    \t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n    \t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\n    \t\t\t\t// face one\n    \t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n    \t\t\t\t// face two\n    \t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n    \t\t\t\t// update counters\n    \t\t\t\tgroupCount += 6;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, 0 );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t}\n\n    \tfunction generateCap( top ) {\n\n    \t\tvar x, centerIndexStart, centerIndexEnd;\n\n    \t\tvar uv = new Vector2();\n    \t\tvar vertex = new Vector3();\n\n    \t\tvar groupCount = 0;\n\n    \t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n    \t\tvar sign = ( top === true ) ? 1 : - 1;\n\n    \t\t// save the index of the first center vertex\n    \t\tcenterIndexStart = index;\n\n    \t\t// first we generate the center vertex data of the cap.\n    \t\t// because the geometry needs one set of uvs per face,\n    \t\t// we must generate a center vertex per face/segment\n\n    \t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n    \t\t\t// vertex\n    \t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = 0.5;\n    \t\t\tuv.y = 0.5;\n\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\t// save the index of the last center vertex\n    \t\tcenterIndexEnd = index;\n\n    \t\t// now we generate the surrounding vertices, normals and uvs\n\n    \t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n    \t\t\tvar u = x / radialSegments;\n    \t\t\tvar theta = u * thetaLength + thetaStart;\n\n    \t\t\tvar cosTheta = Math.cos( theta );\n    \t\t\tvar sinTheta = Math.sin( theta );\n\n    \t\t\t// vertex\n    \t\t\tvertex.x = radius * sinTheta;\n    \t\t\tvertex.y = halfHeight * sign;\n    \t\t\tvertex.z = radius * cosTheta;\n    \t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n    \t\t\t// normal\n    \t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n    \t\t\t// uv\n    \t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n    \t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n    \t\t\tuvs.setXY( index, uv.x, uv.y );\n\n    \t\t\t// increase index\n    \t\t\tindex ++;\n\n    \t\t}\n\n    \t\t// generate indices\n\n    \t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n    \t\t\tvar c = centerIndexStart + x;\n    \t\t\tvar i = centerIndexEnd + x;\n\n    \t\t\tif ( top === true ) {\n\n    \t\t\t\t// face top\n    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n    \t\t\t} else {\n\n    \t\t\t\t// face bottom\n    \t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n    \t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n    \t\t\t}\n\n    \t\t\t// update counters\n    \t\t\tgroupCount += 3;\n\n    \t\t}\n\n    \t\t// add a group to the geometry. this will ensure multi material support\n    \t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n    \t\t// calculate new start value for groups\n    \t\tgroupStart += groupCount;\n\n    \t}\n\n    }\n\n    CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'CylinderGeometry';\n\n    \tthis.parameters = {\n    \t\tradiusTop: radiusTop,\n    \t\tradiusBottom: radiusBottom,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n    \tthis.mergeVertices();\n\n    }\n\n    CylinderGeometry.prototype = Object.create( Geometry.prototype );\n    CylinderGeometry.prototype.constructor = CylinderGeometry;\n\n    /**\n     * @author abelnation / http://github.com/abelnation\n     */\n\n    function ConeGeometry(\n    \tradius, height,\n    \tradialSegments, heightSegments,\n    \topenEnded, thetaStart, thetaLength ) {\n\n    \tCylinderGeometry.call( this,\n    \t\t0, radius, height,\n    \t\tradialSegments, heightSegments,\n    \t\topenEnded, thetaStart, thetaLength );\n\n    \tthis.type = 'ConeGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\topenEnded: openEnded,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    }\n\n    ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n    ConeGeometry.prototype.constructor = ConeGeometry;\n\n    /*\n     * @author: abelnation / http://github.com/abelnation\n     */\n\n    function ConeBufferGeometry(\n    \tradius, height,\n    \tradialSegments, heightSegments,\n    \topenEnded, thetaStart, thetaLength ) {\n\n    \tCylinderBufferGeometry.call( this,\n    \t\t0, radius, height,\n    \t\tradialSegments, heightSegments,\n    \t\topenEnded, thetaStart, thetaLength );\n\n    \tthis.type = 'ConeBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\theight: height,\n    \t\tradialSegments: radialSegments,\n    \t\theightSegments: heightSegments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    }\n\n    ConeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'CircleBufferGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tsegments: segments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tradius = radius || 50;\n    \tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n    \tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n    \tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    \tvar vertices = segments + 2;\n\n    \tvar positions = new Float32Array( vertices * 3 );\n    \tvar normals = new Float32Array( vertices * 3 );\n    \tvar uvs = new Float32Array( vertices * 2 );\n\n    \t// center data is already zero, but need to set a few extras\n    \tnormals[ 2 ] = 1.0;\n    \tuvs[ 0 ] = 0.5;\n    \tuvs[ 1 ] = 0.5;\n\n    \tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\n    \t\tvar segment = thetaStart + s / segments * thetaLength;\n\n    \t\tpositions[ i ] = radius * Math.cos( segment );\n    \t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\n    \t\tnormals[ i + 2 ] = 1; // normal z\n\n    \t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n    \t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\n    \t}\n\n    \tvar indices = [];\n\n    \tfor ( var i = 1; i <= segments; i ++ ) {\n\n    \t\tindices.push( i, i + 1, 0 );\n\n    \t}\n\n    \tthis.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );\n    \tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n    \tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n    \tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );\n\n    \tthis.boundingSphere = new Sphere( new Vector3(), radius );\n\n    }\n\n    CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n    /**\n     * @author hughes\n     */\n\n    function CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'CircleGeometry';\n\n    \tthis.parameters = {\n    \t\tradius: radius,\n    \t\tsegments: segments,\n    \t\tthetaStart: thetaStart,\n    \t\tthetaLength: thetaLength\n    \t};\n\n    \tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\n    }\n\n    CircleGeometry.prototype = Object.create( Geometry.prototype );\n    CircleGeometry.prototype.constructor = CircleGeometry;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n     */\n\n    function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n    \tGeometry.call( this );\n\n    \tthis.type = 'BoxGeometry';\n\n    \tthis.parameters = {\n    \t\twidth: width,\n    \t\theight: height,\n    \t\tdepth: depth,\n    \t\twidthSegments: widthSegments,\n    \t\theightSegments: heightSegments,\n    \t\tdepthSegments: depthSegments\n    \t};\n\n    \tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n    \tthis.mergeVertices();\n\n    }\n\n    BoxGeometry.prototype = Object.create( Geometry.prototype );\n    BoxGeometry.prototype.constructor = BoxGeometry;\n\n\n\n    var Geometries = Object.freeze({\n    \tWireframeGeometry: WireframeGeometry,\n    \tParametricGeometry: ParametricGeometry,\n    \tTetrahedronGeometry: TetrahedronGeometry,\n    \tOctahedronGeometry: OctahedronGeometry,\n    \tIcosahedronGeometry: IcosahedronGeometry,\n    \tDodecahedronGeometry: DodecahedronGeometry,\n    \tPolyhedronGeometry: PolyhedronGeometry,\n    \tTubeGeometry: TubeGeometry,\n    \tTorusKnotGeometry: TorusKnotGeometry,\n    \tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n    \tTorusGeometry: TorusGeometry,\n    \tTorusBufferGeometry: TorusBufferGeometry,\n    \tTextGeometry: TextGeometry,\n    \tSphereBufferGeometry: SphereBufferGeometry,\n    \tSphereGeometry: SphereGeometry,\n    \tRingGeometry: RingGeometry,\n    \tRingBufferGeometry: RingBufferGeometry,\n    \tPlaneBufferGeometry: PlaneBufferGeometry,\n    \tPlaneGeometry: PlaneGeometry,\n    \tLatheGeometry: LatheGeometry,\n    \tLatheBufferGeometry: LatheBufferGeometry,\n    \tShapeGeometry: ShapeGeometry,\n    \tExtrudeGeometry: ExtrudeGeometry,\n    \tEdgesGeometry: EdgesGeometry,\n    \tConeGeometry: ConeGeometry,\n    \tConeBufferGeometry: ConeBufferGeometry,\n    \tCylinderGeometry: CylinderGeometry,\n    \tCylinderBufferGeometry: CylinderBufferGeometry,\n    \tCircleBufferGeometry: CircleBufferGeometry,\n    \tCircleGeometry: CircleGeometry,\n    \tBoxBufferGeometry: BoxBufferGeometry,\n    \tBoxGeometry: BoxGeometry\n    });\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ShadowMaterial() {\n\n    \tShaderMaterial.call( this, {\n    \t\tuniforms: exports.UniformsUtils.merge( [\n    \t\t\tUniformsLib[ \"lights\" ],\n    \t\t\t{\n    \t\t\t\topacity: { value: 1.0 }\n    \t\t\t}\n    \t\t] ),\n    \t\tvertexShader: ShaderChunk[ 'shadow_vert' ],\n    \t\tfragmentShader: ShaderChunk[ 'shadow_frag' ]\n    \t} );\n\n    \tthis.lights = true;\n    \tthis.transparent = true;\n\n    \tObject.defineProperties( this, {\n    \t\topacity: {\n    \t\t\tenumerable: true,\n    \t\t\tget: function () {\n    \t\t\t\treturn this.uniforms.opacity.value;\n    \t\t\t},\n    \t\t\tset: function ( value ) {\n    \t\t\t\tthis.uniforms.opacity.value = value;\n    \t\t\t}\n    \t\t}\n    \t} );\n\n    }\n\n    ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );\n    ShadowMaterial.prototype.constructor = ShadowMaterial;\n\n    ShadowMaterial.prototype.isShadowMaterial = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function RawShaderMaterial( parameters ) {\n\n    \tShaderMaterial.call( this, parameters );\n\n    \tthis.type = 'RawShaderMaterial';\n\n    }\n\n    RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n    RawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n    RawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function MultiMaterial( materials ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.type = 'MultiMaterial';\n\n    \tthis.materials = materials instanceof Array ? materials : [];\n\n    \tthis.visible = true;\n\n    }\n\n    MultiMaterial.prototype = {\n\n    \tconstructor: MultiMaterial,\n\n    \tisMultiMaterial: true,\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar output = {\n    \t\t\tmetadata: {\n    \t\t\t\tversion: 4.2,\n    \t\t\t\ttype: 'material',\n    \t\t\t\tgenerator: 'MaterialExporter'\n    \t\t\t},\n    \t\t\tuuid: this.uuid,\n    \t\t\ttype: this.type,\n    \t\t\tmaterials: []\n    \t\t};\n\n    \t\tvar materials = this.materials;\n\n    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n    \t\t\tvar material = materials[ i ].toJSON( meta );\n    \t\t\tdelete material.metadata;\n\n    \t\t\toutput.materials.push( material );\n\n    \t\t}\n\n    \t\toutput.visible = this.visible;\n\n    \t\treturn output;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\tvar material = new this.constructor();\n\n    \t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\n    \t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\n    \t\t}\n\n    \t\tmaterial.visible = this.visible;\n\n    \t\treturn material;\n\n    \t}\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  roughness: <float>,\n     *  metalness: <float>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  bumpMap: new THREE.Texture( <Image> ),\n     *  bumpScale: <float>,\n     *\n     *  normalMap: new THREE.Texture( <Image> ),\n     *  normalScale: <Vector2>,\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  roughnessMap: new THREE.Texture( <Image> ),\n     *\n     *  metalnessMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n     *  envMapIntensity: <float>\n     *\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshStandardMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.defines = { 'STANDARD': '' };\n\n    \tthis.type = 'MeshStandardMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n    \tthis.roughness = 0.5;\n    \tthis.metalness = 0.5;\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.bumpMap = null;\n    \tthis.bumpScale = 1;\n\n    \tthis.normalMap = null;\n    \tthis.normalScale = new Vector2( 1, 1 );\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.roughnessMap = null;\n\n    \tthis.metalnessMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.envMapIntensity = 1.0;\n\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshStandardMaterial.prototype = Object.create( Material.prototype );\n    MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n    MeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n    MeshStandardMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.defines = { 'STANDARD': '' };\n\n    \tthis.color.copy( source.color );\n    \tthis.roughness = source.roughness;\n    \tthis.metalness = source.metalness;\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.bumpMap = source.bumpMap;\n    \tthis.bumpScale = source.bumpScale;\n\n    \tthis.normalMap = source.normalMap;\n    \tthis.normalScale.copy( source.normalScale );\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.roughnessMap = source.roughnessMap;\n\n    \tthis.metalnessMap = source.metalnessMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.envMapIntensity = source.envMapIntensity;\n\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * parameters = {\n     *  reflectivity: <float>\n     * }\n     */\n\n    function MeshPhysicalMaterial( parameters ) {\n\n    \tMeshStandardMaterial.call( this );\n\n    \tthis.defines = { 'PHYSICAL': '' };\n\n    \tthis.type = 'MeshPhysicalMaterial';\n\n    \tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n    \tthis.clearCoat = 0.0;\n    \tthis.clearCoatRoughness = 0.0;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n    MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n    MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n    MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n    \tMeshStandardMaterial.prototype.copy.call( this, source );\n\n    \tthis.defines = { 'PHYSICAL': '' };\n\n    \tthis.reflectivity = source.reflectivity;\n\n    \tthis.clearCoat = source.clearCoat;\n    \tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  specular: <hex>,\n     *  shininess: <float>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  bumpMap: new THREE.Texture( <Image> ),\n     *  bumpScale: <float>,\n     *\n     *  normalMap: new THREE.Texture( <Image> ),\n     *  normalScale: <Vector2>,\n     *\n     *  displacementMap: new THREE.Texture( <Image> ),\n     *  displacementScale: <float>,\n     *  displacementBias: <float>,\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshPhongMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshPhongMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n    \tthis.specular = new Color( 0x111111 );\n    \tthis.shininess = 30;\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.bumpMap = null;\n    \tthis.bumpScale = 1;\n\n    \tthis.normalMap = null;\n    \tthis.normalScale = new Vector2( 1, 1 );\n\n    \tthis.displacementMap = null;\n    \tthis.displacementScale = 1;\n    \tthis.displacementBias = 0;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshPhongMaterial.prototype = Object.create( Material.prototype );\n    MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n    MeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n    MeshPhongMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n    \tthis.specular.copy( source.specular );\n    \tthis.shininess = source.shininess;\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.bumpMap = source.bumpMap;\n    \tthis.bumpScale = source.bumpScale;\n\n    \tthis.normalMap = source.normalMap;\n    \tthis.normalScale.copy( source.normalScale );\n\n    \tthis.displacementMap = source.displacementMap;\n    \tthis.displacementScale = source.displacementScale;\n    \tthis.displacementBias = source.displacementBias;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     *\n     * parameters = {\n     *  opacity: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>\n     * }\n     */\n\n    function MeshNormalMaterial( parameters ) {\n\n    \tMaterial.call( this, parameters );\n\n    \tthis.type = 'MeshNormalMaterial';\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n\n    \tthis.fog = false;\n    \tthis.lights = false;\n    \tthis.morphTargets = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshNormalMaterial.prototype = Object.create( Material.prototype );\n    MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n    MeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n    MeshNormalMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  map: new THREE.Texture( <Image> ),\n     *\n     *  lightMap: new THREE.Texture( <Image> ),\n     *  lightMapIntensity: <float>\n     *\n     *  aoMap: new THREE.Texture( <Image> ),\n     *  aoMapIntensity: <float>\n     *\n     *  emissive: <hex>,\n     *  emissiveIntensity: <float>\n     *  emissiveMap: new THREE.Texture( <Image> ),\n     *\n     *  specularMap: new THREE.Texture( <Image> ),\n     *\n     *  alphaMap: new THREE.Texture( <Image> ),\n     *\n     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n     *  combine: THREE.Multiply,\n     *  reflectivity: <float>,\n     *  refractionRatio: <float>,\n     *\n     *  wireframe: <boolean>,\n     *  wireframeLinewidth: <float>,\n     *\n     *  skinning: <bool>,\n     *  morphTargets: <bool>,\n     *  morphNormals: <bool>\n     * }\n     */\n\n    function MeshLambertMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'MeshLambertMaterial';\n\n    \tthis.color = new Color( 0xffffff ); // diffuse\n\n    \tthis.map = null;\n\n    \tthis.lightMap = null;\n    \tthis.lightMapIntensity = 1.0;\n\n    \tthis.aoMap = null;\n    \tthis.aoMapIntensity = 1.0;\n\n    \tthis.emissive = new Color( 0x000000 );\n    \tthis.emissiveIntensity = 1.0;\n    \tthis.emissiveMap = null;\n\n    \tthis.specularMap = null;\n\n    \tthis.alphaMap = null;\n\n    \tthis.envMap = null;\n    \tthis.combine = MultiplyOperation;\n    \tthis.reflectivity = 1;\n    \tthis.refractionRatio = 0.98;\n\n    \tthis.wireframe = false;\n    \tthis.wireframeLinewidth = 1;\n    \tthis.wireframeLinecap = 'round';\n    \tthis.wireframeLinejoin = 'round';\n\n    \tthis.skinning = false;\n    \tthis.morphTargets = false;\n    \tthis.morphNormals = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    MeshLambertMaterial.prototype = Object.create( Material.prototype );\n    MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n    MeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n    MeshLambertMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.map = source.map;\n\n    \tthis.lightMap = source.lightMap;\n    \tthis.lightMapIntensity = source.lightMapIntensity;\n\n    \tthis.aoMap = source.aoMap;\n    \tthis.aoMapIntensity = source.aoMapIntensity;\n\n    \tthis.emissive.copy( source.emissive );\n    \tthis.emissiveMap = source.emissiveMap;\n    \tthis.emissiveIntensity = source.emissiveIntensity;\n\n    \tthis.specularMap = source.specularMap;\n\n    \tthis.alphaMap = source.alphaMap;\n\n    \tthis.envMap = source.envMap;\n    \tthis.combine = source.combine;\n    \tthis.reflectivity = source.reflectivity;\n    \tthis.refractionRatio = source.refractionRatio;\n\n    \tthis.wireframe = source.wireframe;\n    \tthis.wireframeLinewidth = source.wireframeLinewidth;\n    \tthis.wireframeLinecap = source.wireframeLinecap;\n    \tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n    \tthis.skinning = source.skinning;\n    \tthis.morphTargets = source.morphTargets;\n    \tthis.morphNormals = source.morphNormals;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     * parameters = {\n     *  color: <hex>,\n     *  opacity: <float>,\n     *\n     *  linewidth: <float>,\n     *\n     *  scale: <float>,\n     *  dashSize: <float>,\n     *  gapSize: <float>\n     * }\n     */\n\n    function LineDashedMaterial( parameters ) {\n\n    \tMaterial.call( this );\n\n    \tthis.type = 'LineDashedMaterial';\n\n    \tthis.color = new Color( 0xffffff );\n\n    \tthis.linewidth = 1;\n\n    \tthis.scale = 1;\n    \tthis.dashSize = 3;\n    \tthis.gapSize = 1;\n\n    \tthis.lights = false;\n\n    \tthis.setValues( parameters );\n\n    }\n\n    LineDashedMaterial.prototype = Object.create( Material.prototype );\n    LineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n    LineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n    LineDashedMaterial.prototype.copy = function ( source ) {\n\n    \tMaterial.prototype.copy.call( this, source );\n\n    \tthis.color.copy( source.color );\n\n    \tthis.linewidth = source.linewidth;\n\n    \tthis.scale = source.scale;\n    \tthis.dashSize = source.dashSize;\n    \tthis.gapSize = source.gapSize;\n\n    \treturn this;\n\n    };\n\n\n\n    var Materials = Object.freeze({\n    \tShadowMaterial: ShadowMaterial,\n    \tSpriteMaterial: SpriteMaterial,\n    \tRawShaderMaterial: RawShaderMaterial,\n    \tShaderMaterial: ShaderMaterial,\n    \tPointsMaterial: PointsMaterial,\n    \tMultiMaterial: MultiMaterial,\n    \tMeshPhysicalMaterial: MeshPhysicalMaterial,\n    \tMeshStandardMaterial: MeshStandardMaterial,\n    \tMeshPhongMaterial: MeshPhongMaterial,\n    \tMeshNormalMaterial: MeshNormalMaterial,\n    \tMeshLambertMaterial: MeshLambertMaterial,\n    \tMeshDepthMaterial: MeshDepthMaterial,\n    \tMeshBasicMaterial: MeshBasicMaterial,\n    \tLineDashedMaterial: LineDashedMaterial,\n    \tLineBasicMaterial: LineBasicMaterial,\n    \tMaterial: Material\n    });\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    exports.Cache = {\n\n    \tenabled: false,\n\n    \tfiles: {},\n\n    \tadd: function ( key, file ) {\n\n    \t\tif ( this.enabled === false ) return;\n\n    \t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n    \t\tthis.files[ key ] = file;\n\n    \t},\n\n    \tget: function ( key ) {\n\n    \t\tif ( this.enabled === false ) return;\n\n    \t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n    \t\treturn this.files[ key ];\n\n    \t},\n\n    \tremove: function ( key ) {\n\n    \t\tdelete this.files[ key ];\n\n    \t},\n\n    \tclear: function () {\n\n    \t\tthis.files = {};\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LoadingManager( onLoad, onProgress, onError ) {\n\n    \tvar scope = this;\n\n    \tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\n    \tthis.onStart = undefined;\n    \tthis.onLoad = onLoad;\n    \tthis.onProgress = onProgress;\n    \tthis.onError = onError;\n\n    \tthis.itemStart = function ( url ) {\n\n    \t\titemsTotal ++;\n\n    \t\tif ( isLoading === false ) {\n\n    \t\t\tif ( scope.onStart !== undefined ) {\n\n    \t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tisLoading = true;\n\n    \t};\n\n    \tthis.itemEnd = function ( url ) {\n\n    \t\titemsLoaded ++;\n\n    \t\tif ( scope.onProgress !== undefined ) {\n\n    \t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n    \t\t}\n\n    \t\tif ( itemsLoaded === itemsTotal ) {\n\n    \t\t\tisLoading = false;\n\n    \t\t\tif ( scope.onLoad !== undefined ) {\n\n    \t\t\t\tscope.onLoad();\n\n    \t\t\t}\n\n    \t\t}\n\n    \t};\n\n    \tthis.itemError = function ( url ) {\n\n    \t\tif ( scope.onError !== undefined ) {\n\n    \t\t\tscope.onError( url );\n\n    \t\t}\n\n    \t};\n\n    }\n\n    exports.DefaultLoadingManager = new LoadingManager();\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function XHRLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( XHRLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tif ( this.path !== undefined ) url = this.path + url;\n\n    \t\tvar scope = this;\n\n    \t\tvar cached = exports.Cache.get( url );\n\n    \t\tif ( cached !== undefined ) {\n\n    \t\t\tscope.manager.itemStart( url );\n\n    \t\t\tsetTimeout( function () {\n\n    \t\t\t\tif ( onLoad ) onLoad( cached );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t}, 0 );\n\n    \t\t\treturn cached;\n\n    \t\t}\n\n    \t\tvar request = new XMLHttpRequest();\n    \t\trequest.open( 'GET', url, true );\n\n    \t\trequest.addEventListener( 'load', function ( event ) {\n\n    \t\t\tvar response = event.target.response;\n\n    \t\t\texports.Cache.add( url, response );\n\n    \t\t\tif ( this.status === 200 ) {\n\n    \t\t\t\tif ( onLoad ) onLoad( response );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t} else if ( this.status === 0 ) {\n\n    \t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n    \t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n    \t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\n    \t\t\t\tif ( onLoad ) onLoad( response );\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( onError ) onError( event );\n\n    \t\t\t\tscope.manager.itemError( url );\n\n    \t\t\t}\n\n    \t\t}, false );\n\n    \t\tif ( onProgress !== undefined ) {\n\n    \t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n    \t\t\t\tonProgress( event );\n\n    \t\t\t}, false );\n\n    \t\t}\n\n    \t\trequest.addEventListener( 'error', function ( event ) {\n\n    \t\t\tif ( onError ) onError( event );\n\n    \t\t\tscope.manager.itemError( url );\n\n    \t\t}, false );\n\n    \t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n    \t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n    \t\tif ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );\n\n    \t\trequest.send( null );\n\n    \t\tscope.manager.itemStart( url );\n\n    \t\treturn request;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetResponseType: function ( value ) {\n\n    \t\tthis.responseType = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     *\n     * Abstract Base class to block based textures loader (dds, pvr, ...)\n     */\n\n    function CompressedTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \t// override in sub classes\n    \tthis._parser = null;\n\n    }\n\n    Object.assign( CompressedTextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar images = [];\n\n    \t\tvar texture = new CompressedTexture();\n    \t\ttexture.image = images;\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setPath( this.path );\n    \t\tloader.setResponseType( 'arraybuffer' );\n\n    \t\tfunction loadTexture( i ) {\n\n    \t\t\tloader.load( url[ i ], function ( buffer ) {\n\n    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n    \t\t\t\timages[ i ] = {\n    \t\t\t\t\twidth: texDatas.width,\n    \t\t\t\t\theight: texDatas.height,\n    \t\t\t\t\tformat: texDatas.format,\n    \t\t\t\t\tmipmaps: texDatas.mipmaps\n    \t\t\t\t};\n\n    \t\t\t\tloaded += 1;\n\n    \t\t\t\tif ( loaded === 6 ) {\n\n    \t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n    \t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t\t\ttexture.format = texDatas.format;\n    \t\t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t\t}\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\tif ( Array.isArray( url ) ) {\n\n    \t\t\tvar loaded = 0;\n\n    \t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n    \t\t\t\tloadTexture( i );\n\n    \t\t\t}\n\n    \t\t} else {\n\n    \t\t\t// compressed cubemap texture stored in a single DDS file\n\n    \t\t\tloader.load( url, function ( buffer ) {\n\n    \t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n    \t\t\t\tif ( texDatas.isCubemap ) {\n\n    \t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n    \t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n    \t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n    \t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n    \t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n    \t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n    \t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n    \t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ttexture.image.width = texDatas.width;\n    \t\t\t\t\ttexture.image.height = texDatas.height;\n    \t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n    \t\t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t\t}\n\n    \t\t\t\ttexture.format = texDatas.format;\n    \t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author Nikos M. / https://github.com/foo123/\n     *\n     * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n     */\n\n    var DataTextureLoader = BinaryTextureLoader;\n    function BinaryTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \t// override in sub classes\n    \tthis._parser = null;\n\n    }\n\n    Object.assign( BinaryTextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar texture = new DataTexture();\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setResponseType( 'arraybuffer' );\n\n    \t\tloader.load( url, function ( buffer ) {\n\n    \t\t\tvar texData = scope._parser( buffer );\n\n    \t\t\tif ( ! texData ) return;\n\n    \t\t\tif ( undefined !== texData.image ) {\n\n    \t\t\t\ttexture.image = texData.image;\n\n    \t\t\t} else if ( undefined !== texData.data ) {\n\n    \t\t\t\ttexture.image.width = texData.width;\n    \t\t\t\ttexture.image.height = texData.height;\n    \t\t\t\ttexture.image.data = texData.data;\n\n    \t\t\t}\n\n    \t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n    \t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n    \t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n    \t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\n    \t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n    \t\t\tif ( undefined !== texData.format ) {\n\n    \t\t\t\ttexture.format = texData.format;\n\n    \t\t\t}\n    \t\t\tif ( undefined !== texData.type ) {\n\n    \t\t\t\ttexture.type = texData.type;\n\n    \t\t\t}\n\n    \t\t\tif ( undefined !== texData.mipmaps ) {\n\n    \t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n    \t\t\t}\n\n    \t\t\tif ( 1 === texData.mipmapCount ) {\n\n    \t\t\t\ttexture.minFilter = LinearFilter;\n\n    \t\t\t}\n\n    \t\t\ttexture.needsUpdate = true;\n\n    \t\t\tif ( onLoad ) onLoad( texture, texData );\n\n    \t\t}, onProgress, onError );\n\n\n    \t\treturn texture;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ImageLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( ImageLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n    \t\timage.onload = function () {\n\n    \t\t\timage.onload = null;\n\n    \t\t\tURL.revokeObjectURL( image.src );\n\n    \t\t\tif ( onLoad ) onLoad( image );\n\n    \t\t\tscope.manager.itemEnd( url );\n\n    \t\t};\n\n    \t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\n    \t\t\timage.src = url;\n\n    \t\t} else {\n\n    \t\t\tvar loader = new XHRLoader();\n    \t\t\tloader.setPath( this.path );\n    \t\t\tloader.setResponseType( 'blob' );\n    \t\t\tloader.setWithCredentials( this.withCredentials );\n    \t\t\tloader.load( url, function ( blob ) {\n\n    \t\t\t\timage.src = URL.createObjectURL( blob );\n\n    \t\t\t}, onProgress, onError );\n\n    \t\t}\n\n    \t\tscope.manager.itemStart( url );\n\n    \t\treturn image;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function CubeTextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( CubeTextureLoader.prototype, {\n\n    \tload: function ( urls, onLoad, onProgress, onError ) {\n\n    \t\tvar texture = new CubeTexture();\n\n    \t\tvar loader = new ImageLoader( this.manager );\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n    \t\tloader.setPath( this.path );\n\n    \t\tvar loaded = 0;\n\n    \t\tfunction loadTexture( i ) {\n\n    \t\t\tloader.load( urls[ i ], function ( image ) {\n\n    \t\t\t\ttexture.images[ i ] = image;\n\n    \t\t\t\tloaded ++;\n\n    \t\t\t\tif ( loaded === 6 ) {\n\n    \t\t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n    \t\t\t\t}\n\n    \t\t\t}, undefined, onError );\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n    \t\t\tloadTexture( i );\n\n    \t\t}\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function TextureLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( TextureLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar texture = new Texture();\n\n    \t\tvar loader = new ImageLoader( this.manager );\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n    \t\tloader.setWithCredentials( this.withCredentials );\n    \t\tloader.setPath( this.path );\n    \t\tloader.load( url, function ( image ) {\n\n    \t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n    \t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n    \t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n    \t\t\ttexture.image = image;\n    \t\t\ttexture.needsUpdate = true;\n\n    \t\t\tif ( onLoad !== undefined ) {\n\n    \t\t\t\tonLoad( texture );\n\n    \t\t\t}\n\n    \t\t}, onProgress, onError );\n\n    \t\treturn texture;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetWithCredentials: function ( value ) {\n\n    \t\tthis.withCredentials = value;\n    \t\treturn this;\n\n    \t},\n\n    \tsetPath: function ( value ) {\n\n    \t\tthis.path = value;\n    \t\treturn this;\n\n    \t}\n\n\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Light( color, intensity ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Light';\n\n    \tthis.color = new Color( color );\n    \tthis.intensity = intensity !== undefined ? intensity : 1;\n\n    \tthis.receiveShadow = undefined;\n\n    }\n\n    Light.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Light,\n\n    \tisLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tObject3D.prototype.copy.call( this, source );\n\n    \t\tthis.color.copy( source.color );\n    \t\tthis.intensity = source.intensity;\n\n    \t\treturn this;\n\n    \t},\n\n    \ttoJSON: function ( meta ) {\n\n    \t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n    \t\tdata.object.color = this.color.getHex();\n    \t\tdata.object.intensity = this.intensity;\n\n    \t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n    \t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n    \t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n    \t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n    \t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n    \t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n    \t\treturn data;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function HemisphereLight( skyColor, groundColor, intensity ) {\n\n    \tLight.call( this, skyColor, intensity );\n\n    \tthis.type = 'HemisphereLight';\n\n    \tthis.castShadow = undefined;\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.groundColor = new Color( groundColor );\n\n    }\n\n    HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: HemisphereLight,\n\n    \tisHemisphereLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.groundColor.copy( source.groundColor );\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function LightShadow( camera ) {\n\n    \tthis.camera = camera;\n\n    \tthis.bias = 0;\n    \tthis.radius = 1;\n\n    \tthis.mapSize = new Vector2( 512, 512 );\n\n    \tthis.map = null;\n    \tthis.matrix = new Matrix4();\n\n    }\n\n    Object.assign( LightShadow.prototype, {\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.camera = source.camera.clone();\n\n    \t\tthis.bias = source.bias;\n    \t\tthis.radius = source.radius;\n\n    \t\tthis.mapSize.copy( source.mapSize );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \ttoJSON: function () {\n\n    \t\tvar object = {};\n\n    \t\tif ( this.bias !== 0 ) object.bias = this.bias;\n    \t\tif ( this.radius !== 1 ) object.radius = this.radius;\n    \t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n    \t\tobject.camera = this.camera.toJSON( false ).object;\n    \t\tdelete object.camera.matrix;\n\n    \t\treturn object;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function SpotLightShadow() {\n\n    \tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n    }\n\n    SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n    \tconstructor: SpotLightShadow,\n\n    \tisSpotLightShadow: true,\n\n    \tupdate: function ( light ) {\n\n    \t\tvar fov = exports.Math.RAD2DEG * 2 * light.angle;\n    \t\tvar aspect = this.mapSize.width / this.mapSize.height;\n    \t\tvar far = light.distance || 500;\n\n    \t\tvar camera = this.camera;\n\n    \t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n    \t\t\tcamera.fov = fov;\n    \t\t\tcamera.aspect = aspect;\n    \t\t\tcamera.far = far;\n    \t\t\tcamera.updateProjectionMatrix();\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'SpotLight';\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.target = new Object3D();\n\n    \tObject.defineProperty( this, 'power', {\n    \t\tget: function () {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\treturn this.intensity * Math.PI;\n    \t\t},\n    \t\tset: function ( power ) {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\tthis.intensity = power / Math.PI;\n    \t\t}\n    \t} );\n\n    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n    \tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n    \tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n    \tthis.shadow = new SpotLightShadow();\n\n    }\n\n    SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: SpotLight,\n\n    \tisSpotLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.distance = source.distance;\n    \t\tthis.angle = source.angle;\n    \t\tthis.penumbra = source.penumbra;\n    \t\tthis.decay = source.decay;\n\n    \t\tthis.target = source.target.clone();\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n\n    function PointLight( color, intensity, distance, decay ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'PointLight';\n\n    \tObject.defineProperty( this, 'power', {\n    \t\tget: function () {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\treturn this.intensity * 4 * Math.PI;\n\n    \t\t},\n    \t\tset: function ( power ) {\n    \t\t\t// intensity = power per solid angle.\n    \t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n    \t\t\tthis.intensity = power / ( 4 * Math.PI );\n    \t\t}\n    \t} );\n\n    \tthis.distance = ( distance !== undefined ) ? distance : 0;\n    \tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n    \tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n    }\n\n    PointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: PointLight,\n\n    \tisPointLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.distance = source.distance;\n    \t\tthis.decay = source.decay;\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function DirectionalLightShadow( light ) {\n\n    \tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n    }\n\n    DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n    \tconstructor: DirectionalLightShadow\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function DirectionalLight( color, intensity ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'DirectionalLight';\n\n    \tthis.position.copy( Object3D.DefaultUp );\n    \tthis.updateMatrix();\n\n    \tthis.target = new Object3D();\n\n    \tthis.shadow = new DirectionalLightShadow();\n\n    }\n\n    DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: DirectionalLight,\n\n    \tisDirectionalLight: true,\n\n    \tcopy: function ( source ) {\n\n    \t\tLight.prototype.copy.call( this, source );\n\n    \t\tthis.target = source.target.clone();\n\n    \t\tthis.shadow = source.shadow.clone();\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AmbientLight( color, intensity ) {\n\n    \tLight.call( this, color, intensity );\n\n    \tthis.type = 'AmbientLight';\n\n    \tthis.castShadow = undefined;\n\n    }\n\n    AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n    \tconstructor: AmbientLight,\n\n    \tisAmbientLight: true,\n\n    } );\n\n    /**\n     * @author tschw\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     */\n\n    exports.AnimationUtils = {\n\n    \t// same as Array.prototype.slice, but also works on typed arrays\n    \tarraySlice: function( array, from, to ) {\n\n    \t\tif ( exports.AnimationUtils.isTypedArray( array ) ) {\n\n    \t\t\treturn new array.constructor( array.subarray( from, to ) );\n\n    \t\t}\n\n    \t\treturn array.slice( from, to );\n\n    \t},\n\n    \t// converts an array to a specific type\n    \tconvertArray: function( array, type, forceClone ) {\n\n    \t\tif ( ! array || // let 'undefined' and 'null' pass\n    \t\t\t\t! forceClone && array.constructor === type ) return array;\n\n    \t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n    \t\t\treturn new type( array ); // create typed array\n\n    \t\t}\n\n    \t\treturn Array.prototype.slice.call( array ); // create Array\n\n    \t},\n\n    \tisTypedArray: function( object ) {\n\n    \t\treturn ArrayBuffer.isView( object ) &&\n    \t\t\t\t! ( object instanceof DataView );\n\n    \t},\n\n    \t// returns an array by which times and values can be sorted\n    \tgetKeyframeOrder: function( times ) {\n\n    \t\tfunction compareTime( i, j ) {\n\n    \t\t\treturn times[ i ] - times[ j ];\n\n    \t\t}\n\n    \t\tvar n = times.length;\n    \t\tvar result = new Array( n );\n    \t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n    \t\tresult.sort( compareTime );\n\n    \t\treturn result;\n\n    \t},\n\n    \t// uses the array previously returned by 'getKeyframeOrder' to sort data\n    \tsortedArray: function( values, stride, order ) {\n\n    \t\tvar nValues = values.length;\n    \t\tvar result = new values.constructor( nValues );\n\n    \t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n    \t\t\tvar srcOffset = order[ i ] * stride;\n\n    \t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n    \t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \t// function for parsing AOS keyframe formats\n    \tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\n    \t\tvar i = 1, key = jsonKeys[ 0 ];\n\n    \t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n    \t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t}\n\n    \t\tif ( key === undefined ) return; // no data\n\n    \t\tvar value = key[ valuePropertyName ];\n    \t\tif ( value === undefined ) return; // no data\n\n    \t\tif ( Array.isArray( value ) ) {\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t} else if ( value.toArray !== undefined ) {\n    \t\t\t// ...assume THREE.Math-ish\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalue.toArray( values, values.length );\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t} else {\n    \t\t\t// otherwise push as-is\n\n    \t\t\tdo {\n\n    \t\t\t\tvalue = key[ valuePropertyName ];\n\n    \t\t\t\tif ( value !== undefined ) {\n\n    \t\t\t\t\ttimes.push( key.time );\n    \t\t\t\t\tvalues.push( value );\n\n    \t\t\t\t}\n\n    \t\t\t\tkey = jsonKeys[ i ++ ];\n\n    \t\t\t} while ( key !== undefined );\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     * Abstract base class of interpolants over parametric samples.\n     *\n     * The parameter domain is one dimensional, typically the time or a path\n     * along a curve defined by the data.\n     *\n     * The sample values can have any dimensionality and derived classes may\n     * apply special interpretations to the data.\n     *\n     * This class provides the interval seek in a Template Method, deferring\n     * the actual interpolation to derived classes.\n     *\n     * Time complexity is O(1) for linear access crossing at most two points\n     * and O(log N) for random access, where N is the number of positions.\n     *\n     * References:\n     *\n     * \t\thttp://www.oodesign.com/template-method-pattern.html\n     *\n     * @author tschw\n     */\n\n    function Interpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tthis.parameterPositions = parameterPositions;\n    \tthis._cachedIndex = 0;\n\n    \tthis.resultBuffer = resultBuffer !== undefined ?\n    \t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n    \tthis.sampleValues = sampleValues;\n    \tthis.valueSize = sampleSize;\n\n    }\n\n    Interpolant.prototype = {\n\n    \tconstructor: Interpolant,\n\n    \tevaluate: function( t ) {\n\n    \t\tvar pp = this.parameterPositions,\n    \t\t\ti1 = this._cachedIndex,\n\n    \t\t\tt1 = pp[   i1   ],\n    \t\t\tt0 = pp[ i1 - 1 ];\n\n    \t\tvalidate_interval: {\n\n    \t\t\tseek: {\n\n    \t\t\t\tvar right;\n\n    \t\t\t\tlinear_scan: {\n    //- See http://jsperf.com/comparison-to-undefined/3\n    //- slower code:\n    //-\n    //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n    \t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n    \t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\n    \t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n    \t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n    \t\t\t\t\t\t\t\t// after end\n\n    \t\t\t\t\t\t\t\ti1 = pp.length;\n    \t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n    \t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n    \t\t\t\t\t\t\tt0 = t1;\n    \t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n    \t\t\t\t\t\t\tif ( t < t1 ) {\n\n    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n    \t\t\t\t\t\t\t\tbreak seek;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// prepare binary search on the right side of the index\n    \t\t\t\t\t\tright = pp.length;\n    \t\t\t\t\t\tbreak linear_scan;\n\n    \t\t\t\t\t}\n\n    //- slower code:\n    //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n    \t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n    \t\t\t\t\t\t// looping?\n\n    \t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n    \t\t\t\t\t\tif ( t < t1global ) {\n\n    \t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n    \t\t\t\t\t\t\tt0 = t1global;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// linear reverse scan\n\n    \t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\n    \t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n    \t\t\t\t\t\t\t\t// before start\n\n    \t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n    \t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n    \t\t\t\t\t\t\tt1 = t0;\n    \t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n    \t\t\t\t\t\t\tif ( t >= t0 ) {\n\n    \t\t\t\t\t\t\t\t// we have arrived at the sought interval\n    \t\t\t\t\t\t\t\tbreak seek;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t\t// prepare binary search on the left side of the index\n    \t\t\t\t\t\tright = i1;\n    \t\t\t\t\t\ti1 = 0;\n    \t\t\t\t\t\tbreak linear_scan;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// the interval is valid\n\n    \t\t\t\t\tbreak validate_interval;\n\n    \t\t\t\t} // linear scan\n\n    \t\t\t\t// binary search\n\n    \t\t\t\twhile ( i1 < right ) {\n\n    \t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n    \t\t\t\t\tif ( t < pp[ mid ] ) {\n\n    \t\t\t\t\t\tright = mid;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\ti1 = mid + 1;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\tt1 = pp[   i1   ];\n    \t\t\t\tt0 = pp[ i1 - 1 ];\n\n    \t\t\t\t// check boundary cases, again\n\n    \t\t\t\tif ( t0 === undefined ) {\n\n    \t\t\t\t\tthis._cachedIndex = 0;\n    \t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( t1 === undefined ) {\n\n    \t\t\t\t\ti1 = pp.length;\n    \t\t\t\t\tthis._cachedIndex = i1;\n    \t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n    \t\t\t\t}\n\n    \t\t\t} // seek\n\n    \t\t\tthis._cachedIndex = i1;\n\n    \t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n    \t\t} // validate_interval\n\n    \t\treturn this.interpolate_( i1, t0, t, t1 );\n\n    \t},\n\n    \tsettings: null, // optional, subclass-specific settings structure\n    \t// Note: The indirection allows central control of many interpolants.\n\n    \t// --- Protected interface\n\n    \tDefaultSettings_: {},\n\n    \tgetSettings_: function() {\n\n    \t\treturn this.settings || this.DefaultSettings_;\n\n    \t},\n\n    \tcopySampleValue_: function( index ) {\n\n    \t\t// copies a sample value to the result buffer\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n    \t\t\toffset = index * stride;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] = values[ offset + i ];\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t},\n\n    \t// Template methods for derived classes:\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tthrow new Error( \"call to abstract method\" );\n    \t\t// implementations shall return this.resultBuffer\n\n    \t},\n\n    \tintervalChanged_: function( i1, t0, t1 ) {\n\n    \t\t// empty\n\n    \t}\n\n    };\n\n    Object.assign( Interpolant.prototype, {\n\n    \tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n    \t\tInterpolant.prototype.copySampleValue_,\n\n    \tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n    \t\tInterpolant.prototype.copySampleValue_\n\n    } );\n\n    /**\n     * Fast and simple cubic spline interpolant.\n     *\n     * It was derived from a Hermitian construction setting the first derivative\n     * at each sample position to the linear slope between neighboring positions\n     * over their parameter interval.\n     *\n     * @author tschw\n     */\n\n    function CubicInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    \tthis._weightPrev = -0;\n    \tthis._offsetPrev = -0;\n    \tthis._weightNext = -0;\n    \tthis._offsetNext = -0;\n\n    }\n\n    CubicInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: CubicInterpolant,\n\n    \tDefaultSettings_: {\n\n    \t\tendingStart: \tZeroCurvatureEnding,\n    \t\tendingEnd:\t\tZeroCurvatureEnding\n\n    \t},\n\n    \tintervalChanged_: function( i1, t0, t1 ) {\n\n    \t\tvar pp = this.parameterPositions,\n    \t\t\tiPrev = i1 - 2,\n    \t\t\tiNext = i1 + 1,\n\n    \t\t\ttPrev = pp[ iPrev ],\n    \t\t\ttNext = pp[ iNext ];\n\n    \t\tif ( tPrev === undefined ) {\n\n    \t\t\tswitch ( this.getSettings_().endingStart ) {\n\n    \t\t\t\tcase ZeroSlopeEnding:\n\n    \t\t\t\t\t// f'(t0) = 0\n    \t\t\t\t\tiPrev = i1;\n    \t\t\t\t\ttPrev = 2 * t0 - t1;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase WrapAroundEnding:\n\n    \t\t\t\t\t// use the other end of the curve\n    \t\t\t\t\tiPrev = pp.length - 2;\n    \t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault: // ZeroCurvatureEnding\n\n    \t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n    \t\t\t\t\tiPrev = i1;\n    \t\t\t\t\ttPrev = t1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( tNext === undefined ) {\n\n    \t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n    \t\t\t\tcase ZeroSlopeEnding:\n\n    \t\t\t\t\t// f'(tN) = 0\n    \t\t\t\t\tiNext = i1;\n    \t\t\t\t\ttNext = 2 * t1 - t0;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase WrapAroundEnding:\n\n    \t\t\t\t\t// use the other end of the curve\n    \t\t\t\t\tiNext = 1;\n    \t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault: // ZeroCurvatureEnding\n\n    \t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n    \t\t\t\t\tiNext = i1 - 1;\n    \t\t\t\t\ttNext = t0;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar halfDt = ( t1 - t0 ) * 0.5,\n    \t\t\tstride = this.valueSize;\n\n    \t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n    \t\tthis._weightNext = halfDt / ( tNext - t1 );\n    \t\tthis._offsetPrev = iPrev * stride;\n    \t\tthis._offsetNext = iNext * stride;\n\n    \t},\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n    \t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n    \t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n    \t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n    \t\t\tpp = p * p,\n    \t\t\tppp = pp * p;\n\n    \t\t// evaluate polynomials\n\n    \t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n    \t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n    \t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n    \t\tvar sN =       wN   * ppp   -           wN      * pp;\n\n    \t\t// combine data linearly\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] =\n    \t\t\t\t\tsP * values[ oP + i ] +\n    \t\t\t\t\ts0 * values[ o0 + i ] +\n    \t\t\t\t\ts1 * values[ o1 + i ] +\n    \t\t\t\t\tsN * values[ oN + i ];\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     * @author tschw\n     */\n\n    function LinearInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    LinearInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: LinearInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toffset1 = i1 * stride,\n    \t\t\toffset0 = offset1 - stride,\n\n    \t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n    \t\t\tweight0 = 1 - weight1;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tresult[ i ] =\n    \t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n    \t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Interpolant that evaluates to the sample value at the position preceeding\n     * the parameter.\n     *\n     * @author tschw\n     */\n\n    function DiscreteInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    DiscreteInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: DiscreteInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\treturn this.copySampleValue_( i1 - 1 );\n\n    \t}\n\n    } );\n\n    var KeyframeTrackPrototype;\n\n    KeyframeTrackPrototype = {\n\n    \tTimeBufferType: Float32Array,\n    \tValueBufferType: Float32Array,\n\n    \tDefaultInterpolation: InterpolateLinear,\n\n    \tInterpolantFactoryMethodDiscrete: function( result ) {\n\n    \t\treturn new DiscreteInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodLinear: function( result ) {\n\n    \t\treturn new LinearInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodSmooth: function( result ) {\n\n    \t\treturn new CubicInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tsetInterpolation: function( interpolation ) {\n\n    \t\tvar factoryMethod;\n\n    \t\tswitch ( interpolation ) {\n\n    \t\t\tcase InterpolateDiscrete:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n    \t\t\t\tbreak;\n\n    \t\t\tcase InterpolateLinear:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n    \t\t\t\tbreak;\n\n    \t\t\tcase InterpolateSmooth:\n\n    \t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n    \t\t\t\tbreak;\n\n    \t\t}\n\n    \t\tif ( factoryMethod === undefined ) {\n\n    \t\t\tvar message = \"unsupported interpolation for \" +\n    \t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n    \t\t\tif ( this.createInterpolant === undefined ) {\n\n    \t\t\t\t// fall back to default, unless the default itself is messed up\n    \t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n    \t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tconsole.warn( message );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.createInterpolant = factoryMethod;\n\n    \t},\n\n    \tgetInterpolation: function() {\n\n    \t\tswitch ( this.createInterpolant ) {\n\n    \t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n    \t\t\t\treturn InterpolateDiscrete;\n\n    \t\t\tcase this.InterpolantFactoryMethodLinear:\n\n    \t\t\t\treturn InterpolateLinear;\n\n    \t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n    \t\t\t\treturn InterpolateSmooth;\n\n    \t\t}\n\n    \t},\n\n    \tgetValueSize: function() {\n\n    \t\treturn this.values.length / this.times.length;\n\n    \t},\n\n    \t// move all keyframes either forwards or backwards in time\n    \tshift: function( timeOffset ) {\n\n    \t\tif( timeOffset !== 0.0 ) {\n\n    \t\t\tvar times = this.times;\n\n    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n    \t\t\t\ttimes[ i ] += timeOffset;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n    \tscale: function( timeScale ) {\n\n    \t\tif( timeScale !== 1.0 ) {\n\n    \t\t\tvar times = this.times;\n\n    \t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n    \t\t\t\ttimes[ i ] *= timeScale;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n    \t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n    \ttrim: function( startTime, endTime ) {\n\n    \t\tvar times = this.times,\n    \t\t\tnKeys = times.length,\n    \t\t\tfrom = 0,\n    \t\t\tto = nKeys - 1;\n\n    \t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n    \t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\n    \t\t++ to; // inclusive -> exclusive bound\n\n    \t\tif( from !== 0 || to !== nKeys ) {\n\n    \t\t\t// empty tracks are forbidden, so keep at least one keyframe\n    \t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\n    \t\t\tvar stride = this.getValueSize();\n    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, from, to );\n    \t\t\tthis.values = exports.AnimationUtils.\n    \t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n    \tvalidate: function() {\n\n    \t\tvar valid = true;\n\n    \t\tvar valueSize = this.getValueSize();\n    \t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n    \t\t\tconsole.error( \"invalid value size in track\", this );\n    \t\t\tvalid = false;\n\n    \t\t}\n\n    \t\tvar times = this.times,\n    \t\t\tvalues = this.values,\n\n    \t\t\tnKeys = times.length;\n\n    \t\tif( nKeys === 0 ) {\n\n    \t\t\tconsole.error( \"track is empty\", this );\n    \t\t\tvalid = false;\n\n    \t\t}\n\n    \t\tvar prevTime = null;\n\n    \t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\n    \t\t\tvar currTime = times[ i ];\n\n    \t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n    \t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n    \t\t\t\tvalid = false;\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tif( prevTime !== null && prevTime > currTime ) {\n\n    \t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n    \t\t\t\tvalid = false;\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t\tprevTime = currTime;\n\n    \t\t}\n\n    \t\tif ( values !== undefined ) {\n\n    \t\t\tif ( exports.AnimationUtils.isTypedArray( values ) ) {\n\n    \t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tvar value = values[ i ];\n\n    \t\t\t\t\tif ( isNaN( value ) ) {\n\n    \t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n    \t\t\t\t\t\tvalid = false;\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn valid;\n\n    \t},\n\n    \t// removes equivalent sequential keys as common in morph target sequences\n    \t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n    \toptimize: function() {\n\n    \t\tvar times = this.times,\n    \t\t\tvalues = this.values,\n    \t\t\tstride = this.getValueSize(),\n\n    \t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n    \t\t\twriteIndex = 1,\n    \t\t\tlastIndex = times.length - 1;\n\n    \t\tfor( var i = 1; i < lastIndex; ++ i ) {\n\n    \t\t\tvar keep = false;\n\n    \t\t\tvar time = times[ i ];\n    \t\t\tvar timeNext = times[ i + 1 ];\n\n    \t\t\t// remove adjacent keyframes scheduled at the same time\n\n    \t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n    \t\t\t\tif ( ! smoothInterpolation ) {\n\n    \t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n    \t\t\t\t\tvar offset = i * stride,\n    \t\t\t\t\t\toffsetP = offset - stride,\n    \t\t\t\t\t\toffsetN = offset + stride;\n\n    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n    \t\t\t\t\t\tvar value = values[ offset + j ];\n\n    \t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n    \t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n    \t\t\t\t\t\t\tkeep = true;\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else keep = true;\n\n    \t\t\t}\n\n    \t\t\t// in-place compaction\n\n    \t\t\tif ( keep ) {\n\n    \t\t\t\tif ( i !== writeIndex ) {\n\n    \t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n    \t\t\t\t\tvar readOffset = i * stride,\n    \t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n    \t\t\t\t\tfor ( var j = 0; j !== stride; ++ j )\n\n    \t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n    \t\t\t\t}\n\n    \t\t\t\t++ writeIndex;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// flush last keyframe (compaction looks ahead)\n\n    \t\tif ( lastIndex > 0 ) {\n\n    \t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n    \t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )\n\n    \t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n    \t\t\t++ writeIndex;\n\n    \t\t}\n\n    \t\tif ( writeIndex !== times.length ) {\n\n    \t\t\tthis.times = exports.AnimationUtils.arraySlice( times, 0, writeIndex );\n    \t\t\tthis.values = exports.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    }\n\n    function KeyframeTrackConstructor( name, times, values, interpolation ) {\n\n    \tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\n    \tif( times === undefined || times.length === 0 ) {\n\n    \t\tthrow new Error( \"no keyframes in track named \" + name );\n\n    \t}\n\n    \tthis.name = name;\n\n    \tthis.times = exports.AnimationUtils.convertArray( times, this.TimeBufferType );\n    \tthis.values = exports.AnimationUtils.convertArray( values, this.ValueBufferType );\n\n    \tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n    \tthis.validate();\n    \tthis.optimize();\n\n    }\n\n    /**\n     *\n     * A Track of vectored keyframe values.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function VectorKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    VectorKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: VectorKeyframeTrack,\n\n    \tValueTypeName: 'vector'\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n    } );\n\n    /**\n     * Spherical linear unit quaternion interpolant.\n     *\n     * @author tschw\n     */\n\n    function QuaternionLinearInterpolant(\n    \t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n    \tInterpolant.call(\n    \t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n    }\n\n    QuaternionLinearInterpolant.prototype =\n    \t\tObject.assign( Object.create( Interpolant.prototype ), {\n\n    \tconstructor: QuaternionLinearInterpolant,\n\n    \tinterpolate_: function( i1, t0, t, t1 ) {\n\n    \t\tvar result = this.resultBuffer,\n    \t\t\tvalues = this.sampleValues,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toffset = i1 * stride,\n\n    \t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n    \t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n    \t\t\tQuaternion.slerpFlat( result, 0,\n    \t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\n    \t\t}\n\n    \t\treturn result;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * A Track of quaternion keyframe values.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    QuaternionKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: QuaternionKeyframeTrack,\n\n    \tValueTypeName: 'quaternion',\n\n    \t// ValueBufferType is inherited\n\n    \tDefaultInterpolation: InterpolateLinear,\n\n    \tInterpolantFactoryMethodLinear: function( result ) {\n\n    \t\treturn new QuaternionLinearInterpolant(\n    \t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n    \t},\n\n    \tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n    } );\n\n    /**\n     *\n     * A Track of numeric keyframe values.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function NumberKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    NumberKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: NumberKeyframeTrack,\n\n    \tValueTypeName: 'number',\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n    } );\n\n    /**\n     *\n     * A Track that interpolates Strings\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function StringKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    StringKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: StringKeyframeTrack,\n\n    \tValueTypeName: 'string',\n    \tValueBufferType: Array,\n\n    \tDefaultInterpolation: InterpolateDiscrete,\n\n    \tInterpolantFactoryMethodLinear: undefined,\n\n    \tInterpolantFactoryMethodSmooth: undefined\n\n    } );\n\n    /**\n     *\n     * A Track of Boolean keyframe values.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function BooleanKeyframeTrack( name, times, values ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values );\n\n    }\n\n    BooleanKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: BooleanKeyframeTrack,\n\n    \tValueTypeName: 'bool',\n    \tValueBufferType: Array,\n\n    \tDefaultInterpolation: InterpolateDiscrete,\n\n    \tInterpolantFactoryMethodLinear: undefined,\n    \tInterpolantFactoryMethodSmooth: undefined\n\n    \t// Note: Actually this track could have a optimized / compressed\n    \t// representation of a single value and a custom interpolant that\n    \t// computes \"firstValue ^ isOdd( index )\".\n\n    } );\n\n    /**\n     *\n     * A Track of keyframe values that represent color.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function ColorKeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n    }\n\n    ColorKeyframeTrack.prototype =\n    \t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n    \tconstructor: ColorKeyframeTrack,\n\n    \tValueTypeName: 'color'\n\n    \t// ValueBufferType is inherited\n\n    \t// DefaultInterpolation is inherited\n\n\n    \t// Note: Very basic implementation and nothing special yet.\n    \t// However, this is the place for color space parameterization.\n\n    } );\n\n    /**\n     *\n     * A timed sequence of keyframes for a specific property.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function KeyframeTrack( name, times, values, interpolation ) {\n\n    \tKeyframeTrackConstructor.apply( this, arguments );\n\n    }\n\n    KeyframeTrack.prototype = KeyframeTrackPrototype;\n    KeyframeTrackPrototype.constructor = KeyframeTrack;\n\n    // Static methods:\n\n    Object.assign( KeyframeTrack, {\n\n    \t// Serialization (in static context, because of constructor invocation\n    \t// and automatic invocation of .toJSON):\n\n    \tparse: function( json ) {\n\n    \t\tif( json.type === undefined ) {\n\n    \t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\n    \t\t}\n\n    \t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n    \t\tif ( json.times === undefined ) {\n\n    \t\t\tvar times = [], values = [];\n\n    \t\t\texports.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n    \t\t\tjson.times = times;\n    \t\t\tjson.values = values;\n\n    \t\t}\n\n    \t\t// derived classes can define a static parse method\n    \t\tif ( trackType.parse !== undefined ) {\n\n    \t\t\treturn trackType.parse( json );\n\n    \t\t} else {\n\n    \t\t\t// by default, we asssume a constructor compatible with the base\n    \t\t\treturn new trackType(\n    \t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\n    \t\t}\n\n    \t},\n\n    \ttoJSON: function( track ) {\n\n    \t\tvar trackType = track.constructor;\n\n    \t\tvar json;\n\n    \t\t// derived classes can define a static toJSON method\n    \t\tif ( trackType.toJSON !== undefined ) {\n\n    \t\t\tjson = trackType.toJSON( track );\n\n    \t\t} else {\n\n    \t\t\t// by default, we assume the data can be serialized as-is\n    \t\t\tjson = {\n\n    \t\t\t\t'name': track.name,\n    \t\t\t\t'times': exports.AnimationUtils.convertArray( track.times, Array ),\n    \t\t\t\t'values': exports.AnimationUtils.convertArray( track.values, Array )\n\n    \t\t\t};\n\n    \t\t\tvar interpolation = track.getInterpolation();\n\n    \t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n    \t\t\t\tjson.interpolation = interpolation;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tjson.type = track.ValueTypeName; // mandatory\n\n    \t\treturn json;\n\n    \t},\n\n    \t_getTrackTypeForValueTypeName: function( typeName ) {\n\n    \t\tswitch( typeName.toLowerCase() ) {\n\n    \t\t\tcase \"scalar\":\n    \t\t\tcase \"double\":\n    \t\t\tcase \"float\":\n    \t\t\tcase \"number\":\n    \t\t\tcase \"integer\":\n\n    \t\t\t\treturn NumberKeyframeTrack;\n\n    \t\t\tcase \"vector\":\n    \t\t\tcase \"vector2\":\n    \t\t\tcase \"vector3\":\n    \t\t\tcase \"vector4\":\n\n    \t\t\t\treturn VectorKeyframeTrack;\n\n    \t\t\tcase \"color\":\n\n    \t\t\t\treturn ColorKeyframeTrack;\n\n    \t\t\tcase \"quaternion\":\n\n    \t\t\t\treturn QuaternionKeyframeTrack;\n\n    \t\t\tcase \"bool\":\n    \t\t\tcase \"boolean\":\n\n    \t\t\t\treturn BooleanKeyframeTrack;\n\n    \t\t\tcase \"string\":\n\n    \t\t\t\treturn StringKeyframeTrack;\n\n    \t\t}\n\n    \t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Reusable set of Tracks that represent an animation.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     */\n\n    function AnimationClip( name, duration, tracks ) {\n\n    \tthis.name = name;\n    \tthis.tracks = tracks;\n    \tthis.duration = ( duration !== undefined ) ? duration : -1;\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \t// this means it should figure out its duration by scanning the tracks\n    \tif ( this.duration < 0 ) {\n\n    \t\tthis.resetDuration();\n\n    \t}\n\n    \tthis.optimize();\n\n    }\n\n    AnimationClip.prototype = {\n\n    \tconstructor: AnimationClip,\n\n    \tresetDuration: function() {\n\n    \t\tvar tracks = this.tracks,\n    \t\t\tduration = 0;\n\n    \t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n    \t\t\tvar track = this.tracks[ i ];\n\n    \t\t\tduration = Math.max(\n    \t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\n    \t\t}\n\n    \t\tthis.duration = duration;\n\n    \t},\n\n    \ttrim: function() {\n\n    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n    \t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \toptimize: function() {\n\n    \t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n    \t\t\tthis.tracks[ i ].optimize();\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    // Static methods:\n\n    Object.assign( AnimationClip, {\n\n    \tparse: function( json ) {\n\n    \t\tvar tracks = [],\n    \t\t\tjsonTracks = json.tracks,\n    \t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n    \t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n    \t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n    \t\t}\n\n    \t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n    \t},\n\n\n    \ttoJSON: function( clip ) {\n\n    \t\tvar tracks = [],\n    \t\t\tclipTracks = clip.tracks;\n\n    \t\tvar json = {\n\n    \t\t\t'name': clip.name,\n    \t\t\t'duration': clip.duration,\n    \t\t\t'tracks': tracks\n\n    \t\t};\n\n    \t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n    \t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n    \t\t}\n\n    \t\treturn json;\n\n    \t},\n\n\n    \tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\n    \t\tvar numMorphTargets = morphTargetSequence.length;\n    \t\tvar tracks = [];\n\n    \t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n    \t\t\tvar times = [];\n    \t\t\tvar values = [];\n\n    \t\t\ttimes.push(\n    \t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n    \t\t\t\t\ti,\n    \t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n    \t\t\tvalues.push( 0, 1, 0 );\n\n    \t\t\tvar order = exports.AnimationUtils.getKeyframeOrder( times );\n    \t\t\ttimes = exports.AnimationUtils.sortedArray( times, 1, order );\n    \t\t\tvalues = exports.AnimationUtils.sortedArray( values, 1, order );\n\n    \t\t\t// if there is a key at the first frame, duplicate it as the\n    \t\t\t// last frame as well for perfect loop.\n    \t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n    \t\t\t\ttimes.push( numMorphTargets );\n    \t\t\t\tvalues.push( values[ 0 ] );\n\n    \t\t\t}\n\n    \t\t\ttracks.push(\n    \t\t\t\t\tnew NumberKeyframeTrack(\n    \t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n    \t\t\t\t\t\ttimes, values\n    \t\t\t\t\t).scale( 1.0 / fps ) );\n    \t\t}\n\n    \t\treturn new AnimationClip( name, -1, tracks );\n\n    \t},\n\n    \tfindByName: function( objectOrClipArray, name ) {\n\n    \t\tvar clipArray = objectOrClipArray;\n\n    \t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n    \t\t\tvar o = objectOrClipArray;\n    \t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n    \t\t\tif ( clipArray[ i ].name === name ) {\n\n    \t\t\t\treturn clipArray[ i ];\n\n    \t\t\t}\n    \t\t}\n\n    \t\treturn null;\n\n    \t},\n\n    \tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\n    \t\tvar animationToMorphTargets = {};\n\n    \t\t// tested with https://regex101.com/ on trick sequences\n    \t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n    \t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n    \t\t// sort morph target names into animation groups based\n    \t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n    \t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n    \t\t\tvar morphTarget = morphTargets[ i ];\n    \t\t\tvar parts = morphTarget.name.match( pattern );\n\n    \t\t\tif ( parts && parts.length > 1 ) {\n\n    \t\t\t\tvar name = parts[ 1 ];\n\n    \t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n    \t\t\t\tif ( ! animationMorphTargets ) {\n\n    \t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n    \t\t\t\t}\n\n    \t\t\t\tanimationMorphTargets.push( morphTarget );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar clips = [];\n\n    \t\tfor ( var name in animationToMorphTargets ) {\n\n    \t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n    \t\t}\n\n    \t\treturn clips;\n\n    \t},\n\n    \t// parse the animation.hierarchy format\n    \tparseAnimation: function( animation, bones ) {\n\n    \t\tif ( ! animation ) {\n\n    \t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar addNonemptyTrack = function(\n    \t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\n    \t\t\t// only return track if there are actually keys.\n    \t\t\tif ( animationKeys.length !== 0 ) {\n\n    \t\t\t\tvar times = [];\n    \t\t\t\tvar values = [];\n\n    \t\t\t\texports.AnimationUtils.flattenJSON(\n    \t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\n    \t\t\t\t// empty keys are filtered out, so check again\n    \t\t\t\tif ( times.length !== 0 ) {\n\n    \t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t};\n\n    \t\tvar tracks = [];\n\n    \t\tvar clipName = animation.name || 'default';\n    \t\t// automatic length determination in AnimationClip.\n    \t\tvar duration = animation.length || -1;\n    \t\tvar fps = animation.fps || 30;\n\n    \t\tvar hierarchyTracks = animation.hierarchy || [];\n\n    \t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n    \t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n    \t\t\t// skip empty tracks\n    \t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n    \t\t\t// process morph targets in a way exactly compatible\n    \t\t\t// with AnimationHandler.init( animation )\n    \t\t\tif ( animationKeys[0].morphTargets ) {\n\n    \t\t\t\t// figure out all morph targets used in this track\n    \t\t\t\tvar morphTargetNames = {};\n    \t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n    \t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\n    \t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\n    \t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t\t// create a track for each morph target with all zero\n    \t\t\t\t// morphTargetInfluences except for the keys in which\n    \t\t\t\t// the morphTarget is named.\n    \t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n    \t\t\t\t\tvar times = [];\n    \t\t\t\t\tvar values = [];\n\n    \t\t\t\t\tfor ( var m = 0;\n    \t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\n    \t\t\t\t\t\tvar animationKey = animationKeys[k];\n\n    \t\t\t\t\t\ttimes.push( animationKey.time );\n    \t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttracks.push( new NumberKeyframeTrack(\n    \t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n    \t\t\t\t}\n\n    \t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n    \t\t\t} else {\n    \t\t\t\t// ...assume skeletal animation\n\n    \t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n    \t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n    \t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n    \t\t\t\taddNonemptyTrack(\n    \t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n    \t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( tracks.length === 0 ) {\n\n    \t\t\treturn null;\n\n    \t\t}\n\n    \t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n    \t\treturn clip;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function MaterialLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n    \tthis.textures = {};\n\n    }\n\n    Object.assign( MaterialLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTextures: function ( value ) {\n\n    \t\tthis.textures = value;\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\tvar textures = this.textures;\n\n    \t\tfunction getTexture( name ) {\n\n    \t\t\tif ( textures[ name ] === undefined ) {\n\n    \t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n    \t\t\t}\n\n    \t\t\treturn textures[ name ];\n\n    \t\t}\n\n    \t\tvar material = new Materials[ json.type ]();\n\n    \t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n    \t\tif ( json.name !== undefined ) material.name = json.name;\n    \t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n    \t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n    \t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n    \t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n    \t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n    \t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n    \t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n    \t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n    \t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n    \t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n    \t\tif ( json.fog !== undefined ) material.fog = json.fog;\n    \t\tif ( json.shading !== undefined ) material.shading = json.shading;\n    \t\tif ( json.blending !== undefined ) material.blending = json.blending;\n    \t\tif ( json.side !== undefined ) material.side = json.side;\n    \t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n    \t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n    \t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n    \t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n    \t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n    \t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n    \t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n    \t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n    \t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n    \t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n    \t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n    \t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\n    \t\t// for PointsMaterial\n\n    \t\tif ( json.size !== undefined ) material.size = json.size;\n    \t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n    \t\t// maps\n\n    \t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\n    \t\tif ( json.alphaMap !== undefined ) {\n\n    \t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n    \t\t\tmaterial.transparent = true;\n\n    \t\t}\n\n    \t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n    \t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n    \t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n    \t\tif ( json.normalScale !== undefined ) {\n\n    \t\t\tvar normalScale = json.normalScale;\n\n    \t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n    \t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n    \t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n    \t\t\t}\n\n    \t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n    \t\t}\n\n    \t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n    \t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n    \t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n    \t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n    \t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n    \t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n    \t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n    \t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n    \t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\n    \t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n    \t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n    \t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n    \t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n    \t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n    \t\t// MultiMaterial\n\n    \t\tif ( json.materials !== undefined ) {\n\n    \t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n    \t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn material;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BufferGeometryLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( BufferGeometryLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\tvar geometry = new BufferGeometry();\n\n    \t\tvar index = json.data.index;\n\n    \t\tvar TYPED_ARRAYS = {\n    \t\t\t'Int8Array': Int8Array,\n    \t\t\t'Uint8Array': Uint8Array,\n    \t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n    \t\t\t'Int16Array': Int16Array,\n    \t\t\t'Uint16Array': Uint16Array,\n    \t\t\t'Int32Array': Int32Array,\n    \t\t\t'Uint32Array': Uint32Array,\n    \t\t\t'Float32Array': Float32Array,\n    \t\t\t'Float64Array': Float64Array\n    \t\t};\n\n    \t\tif ( index !== undefined ) {\n\n    \t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n    \t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n    \t\t}\n\n    \t\tvar attributes = json.data.attributes;\n\n    \t\tfor ( var key in attributes ) {\n\n    \t\t\tvar attribute = attributes[ key ];\n    \t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n    \t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n    \t\t}\n\n    \t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n    \t\tif ( groups !== undefined ) {\n\n    \t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar group = groups[ i ];\n\n    \t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar boundingSphere = json.data.boundingSphere;\n\n    \t\tif ( boundingSphere !== undefined ) {\n\n    \t\t\tvar center = new Vector3();\n\n    \t\t\tif ( boundingSphere.center !== undefined ) {\n\n    \t\t\t\tcenter.fromArray( boundingSphere.center );\n\n    \t\t\t}\n\n    \t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    } );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Loader() {\n\n    \tthis.onLoadStart = function () {};\n    \tthis.onLoadProgress = function () {};\n    \tthis.onLoadComplete = function () {};\n\n    }\n\n    Loader.prototype = {\n\n    \tconstructor: Loader,\n\n    \tcrossOrigin: undefined,\n\n    \textractUrlBase: function ( url ) {\n\n    \t\tvar parts = url.split( '/' );\n\n    \t\tif ( parts.length === 1 ) return './';\n\n    \t\tparts.pop();\n\n    \t\treturn parts.join( '/' ) + '/';\n\n    \t},\n\n    \tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n    \t\tvar array = [];\n\n    \t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n    \t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n    \t\t}\n\n    \t\treturn array;\n\n    \t},\n\n    \tcreateMaterial: ( function () {\n\n    \t\tvar color, textureLoader, materialLoader;\n\n    \t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n    \t\t\tif ( color === undefined ) color = new Color();\n    \t\t\tif ( textureLoader === undefined ) textureLoader = new TextureLoader();\n    \t\t\tif ( materialLoader === undefined ) materialLoader = new MaterialLoader();\n\n    \t\t\t// convert from old material format\n\n    \t\t\tvar textures = {};\n\n    \t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n    \t\t\t\tvar fullPath = texturePath + path;\n    \t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n    \t\t\t\tvar texture;\n\n    \t\t\t\tif ( loader !== null ) {\n\n    \t\t\t\t\ttexture = loader.load( fullPath );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n    \t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( repeat !== undefined ) {\n\n    \t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n    \t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n    \t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( offset !== undefined ) {\n\n    \t\t\t\t\ttexture.offset.fromArray( offset );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( wrap !== undefined ) {\n\n    \t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n    \t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n    \t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n    \t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( anisotropy !== undefined ) {\n\n    \t\t\t\t\ttexture.anisotropy = anisotropy;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar uuid = exports.Math.generateUUID();\n\n    \t\t\t\ttextures[ uuid ] = texture;\n\n    \t\t\t\treturn uuid;\n\n    \t\t\t}\n\n    \t\t\t//\n\n    \t\t\tvar json = {\n    \t\t\t\tuuid: exports.Math.generateUUID(),\n    \t\t\t\ttype: 'MeshLambertMaterial'\n    \t\t\t};\n\n    \t\t\tfor ( var name in m ) {\n\n    \t\t\t\tvar value = m[ name ];\n\n    \t\t\t\tswitch ( name ) {\n    \t\t\t\t\tcase 'DbgColor':\n    \t\t\t\t\tcase 'DbgIndex':\n    \t\t\t\t\tcase 'opticalDensity':\n    \t\t\t\t\tcase 'illumination':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'DbgName':\n    \t\t\t\t\t\tjson.name = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'blending':\n    \t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorAmbient':\n    \t\t\t\t\tcase 'mapAmbient':\n    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorDiffuse':\n    \t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorSpecular':\n    \t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'colorEmissive':\n    \t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'specularCoef':\n    \t\t\t\t\t\tjson.shininess = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'shading':\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n    \t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapDiffuse':\n    \t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapDiffuseRepeat':\n    \t\t\t\t\tcase 'mapDiffuseOffset':\n    \t\t\t\t\tcase 'mapDiffuseWrap':\n    \t\t\t\t\tcase 'mapDiffuseAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapEmissive':\n    \t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapEmissiveRepeat':\n    \t\t\t\t\tcase 'mapEmissiveOffset':\n    \t\t\t\t\tcase 'mapEmissiveWrap':\n    \t\t\t\t\tcase 'mapEmissiveAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapLight':\n    \t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapLightRepeat':\n    \t\t\t\t\tcase 'mapLightOffset':\n    \t\t\t\t\tcase 'mapLightWrap':\n    \t\t\t\t\tcase 'mapLightAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAO':\n    \t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAORepeat':\n    \t\t\t\t\tcase 'mapAOOffset':\n    \t\t\t\t\tcase 'mapAOWrap':\n    \t\t\t\t\tcase 'mapAOAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBump':\n    \t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBumpScale':\n    \t\t\t\t\t\tjson.bumpScale = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapBumpRepeat':\n    \t\t\t\t\tcase 'mapBumpOffset':\n    \t\t\t\t\tcase 'mapBumpWrap':\n    \t\t\t\t\tcase 'mapBumpAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormal':\n    \t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormalFactor':\n    \t\t\t\t\t\tjson.normalScale = [ value, value ];\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapNormalRepeat':\n    \t\t\t\t\tcase 'mapNormalOffset':\n    \t\t\t\t\tcase 'mapNormalWrap':\n    \t\t\t\t\tcase 'mapNormalAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapSpecular':\n    \t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapSpecularRepeat':\n    \t\t\t\t\tcase 'mapSpecularOffset':\n    \t\t\t\t\tcase 'mapSpecularWrap':\n    \t\t\t\t\tcase 'mapSpecularAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapMetalness':\n    \t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapMetalnessRepeat':\n    \t\t\t\t\tcase 'mapMetalnessOffset':\n    \t\t\t\t\tcase 'mapMetalnessWrap':\n    \t\t\t\t\tcase 'mapMetalnessAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapRoughness':\n    \t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapRoughnessRepeat':\n    \t\t\t\t\tcase 'mapRoughnessOffset':\n    \t\t\t\t\tcase 'mapRoughnessWrap':\n    \t\t\t\t\tcase 'mapRoughnessAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAlpha':\n    \t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'mapAlphaRepeat':\n    \t\t\t\t\tcase 'mapAlphaOffset':\n    \t\t\t\t\tcase 'mapAlphaWrap':\n    \t\t\t\t\tcase 'mapAlphaAnisotropy':\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'flipSided':\n    \t\t\t\t\t\tjson.side = BackSide;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'doubleSided':\n    \t\t\t\t\t\tjson.side = DoubleSide;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'transparency':\n    \t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n    \t\t\t\t\t\tjson.opacity = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'depthTest':\n    \t\t\t\t\tcase 'depthWrite':\n    \t\t\t\t\tcase 'colorWrite':\n    \t\t\t\t\tcase 'opacity':\n    \t\t\t\t\tcase 'reflectivity':\n    \t\t\t\t\tcase 'transparent':\n    \t\t\t\t\tcase 'visible':\n    \t\t\t\t\tcase 'wireframe':\n    \t\t\t\t\t\tjson[ name ] = value;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tcase 'vertexColors':\n    \t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n    \t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t\tdefault:\n    \t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n    \t\t\t\t\t\tbreak;\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n    \t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n    \t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n    \t\t\tmaterialLoader.setTextures( textures );\n\n    \t\t\treturn materialLoader.parse( json );\n\n    \t\t};\n\n    \t} )()\n\n    };\n\n    Loader.Handlers = {\n\n    \thandlers: [],\n\n    \tadd: function ( regex, loader ) {\n\n    \t\tthis.handlers.push( regex, loader );\n\n    \t},\n\n    \tget: function ( file ) {\n\n    \t\tvar handlers = this.handlers;\n\n    \t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n    \t\t\tvar regex = handlers[ i ];\n    \t\t\tvar loader  = handlers[ i + 1 ];\n\n    \t\t\tif ( regex.test( file ) ) {\n\n    \t\t\t\treturn loader;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t}\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function JSONLoader( manager ) {\n\n    \tif ( typeof manager === 'boolean' ) {\n\n    \t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n    \t\tmanager = undefined;\n\n    \t}\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    \tthis.withCredentials = false;\n\n    }\n\n    Object.assign( JSONLoader.prototype, {\n\n    \tload: function( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setWithCredentials( this.withCredentials );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tvar json = JSON.parse( text );\n    \t\t\tvar metadata = json.metadata;\n\n    \t\t\tif ( metadata !== undefined ) {\n\n    \t\t\t\tvar type = metadata.type;\n\n    \t\t\t\tif ( type !== undefined ) {\n\n    \t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n    \t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tvar object = scope.parse( json, texturePath );\n    \t\t\tonLoad( object.geometry, object.materials );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTexturePath: function ( value ) {\n\n    \t\tthis.texturePath = value;\n\n    \t},\n\n    \tparse: function ( json, texturePath ) {\n\n    \t\tvar geometry = new Geometry(),\n    \t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n    \t\tparseModel( scale );\n\n    \t\tparseSkin();\n    \t\tparseMorphing( scale );\n    \t\tparseAnimations();\n\n    \t\tgeometry.computeFaceNormals();\n    \t\tgeometry.computeBoundingSphere();\n\n    \t\tfunction parseModel( scale ) {\n\n    \t\t\tfunction isBitSet( value, position ) {\n\n    \t\t\t\treturn value & ( 1 << position );\n\n    \t\t\t}\n\n    \t\t\tvar i, j, fi,\n\n    \t\t\toffset, zLength,\n\n    \t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n    \t\t\ttype,\n    \t\t\tisQuad,\n    \t\t\thasMaterial,\n    \t\t\thasFaceVertexUv,\n    \t\t\thasFaceNormal, hasFaceVertexNormal,\n    \t\t\thasFaceColor, hasFaceVertexColor,\n\n    \t\tvertex, face, faceA, faceB, hex, normal,\n\n    \t\t\tuvLayer, uv, u, v,\n\n    \t\t\tfaces = json.faces,\n    \t\t\tvertices = json.vertices,\n    \t\t\tnormals = json.normals,\n    \t\t\tcolors = json.colors,\n\n    \t\t\tnUvLayers = 0;\n\n    \t\t\tif ( json.uvs !== undefined ) {\n\n    \t\t\t\t// disregard empty arrays\n\n    \t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n    \t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\toffset = 0;\n    \t\t\tzLength = vertices.length;\n\n    \t\t\twhile ( offset < zLength ) {\n\n    \t\t\t\tvertex = new Vector3();\n\n    \t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n    \t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n    \t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n    \t\t\t\tgeometry.vertices.push( vertex );\n\n    \t\t\t}\n\n    \t\t\toffset = 0;\n    \t\t\tzLength = faces.length;\n\n    \t\t\twhile ( offset < zLength ) {\n\n    \t\t\t\ttype = faces[ offset ++ ];\n\n\n    \t\t\t\tisQuad              = isBitSet( type, 0 );\n    \t\t\t\thasMaterial         = isBitSet( type, 1 );\n    \t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n    \t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n    \t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n    \t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n    \t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\n    \t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n    \t\t\t\tif ( isQuad ) {\n\n    \t\t\t\t\tfaceA = new Face3();\n    \t\t\t\t\tfaceA.a = faces[ offset ];\n    \t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n    \t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n    \t\t\t\t\tfaceB = new Face3();\n    \t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n    \t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n    \t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n    \t\t\t\t\toffset += 4;\n\n    \t\t\t\t\tif ( hasMaterial ) {\n\n    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n    \t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// to get face <=> uv index correspondence\n\n    \t\t\t\t\tfi = geometry.faces.length;\n\n    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n    \t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n    \t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n    \t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\tfaceA.normal.set(\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\t\tnormal = new Vector3(\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t\t);\n\n\n    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\thex = colors[ colorIndex ];\n\n    \t\t\t\t\t\tfaceA.color.setHex( hex );\n    \t\t\t\t\t\tfaceB.color.setHex( hex );\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n    \t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n    \t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tgeometry.faces.push( faceA );\n    \t\t\t\t\tgeometry.faces.push( faceB );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tface = new Face3();\n    \t\t\t\t\tface.a = faces[ offset ++ ];\n    \t\t\t\t\tface.b = faces[ offset ++ ];\n    \t\t\t\t\tface.c = faces[ offset ++ ];\n\n    \t\t\t\t\tif ( hasMaterial ) {\n\n    \t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tface.materialIndex = materialIndex;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// to get face <=> uv index correspondence\n\n    \t\t\t\t\tfi = geometry.faces.length;\n\n    \t\t\t\t\tif ( hasFaceVertexUv ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n    \t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n    \t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n    \t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n    \t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n    \t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n    \t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n    \t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n    \t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceNormal ) {\n\n    \t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\tface.normal.set(\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n    \t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n    \t\t\t\t\t\t\tnormal = new Vector3(\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n    \t\t\t\t\t\t\t\tnormals[ normalIndex ]\n    \t\t\t\t\t\t\t);\n\n    \t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceColor ) {\n\n    \t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n    \t\t\t\t\t}\n\n\n    \t\t\t\t\tif ( hasFaceVertexColor ) {\n\n    \t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n    \t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n    \t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tgeometry.faces.push( face );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseSkin() {\n\n    \t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n    \t\t\tif ( json.skinWeights ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n    \t\t\t\t\tvar x =                               json.skinWeights[ i ];\n    \t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n    \t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n    \t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n    \t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.skinIndices ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n    \t\t\t\t\tvar a =                               json.skinIndices[ i ];\n    \t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n    \t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n    \t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n    \t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tgeometry.bones = json.bones;\n\n    \t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n    \t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n    \t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseMorphing( scale ) {\n\n    \t\t\tif ( json.morphTargets !== undefined ) {\n\n    \t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n    \t\t\t\t\tgeometry.morphTargets[ i ] = {};\n    \t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n    \t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n    \t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n    \t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n    \t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n    \t\t\t\t\t\tvar vertex = new Vector3();\n    \t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n    \t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n    \t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n    \t\t\t\t\t\tdstVertices.push( vertex );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n    \t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n    \t\t\t\tvar faces = geometry.faces;\n    \t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n    \t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tfunction parseAnimations() {\n\n    \t\t\tvar outputAnimations = [];\n\n    \t\t\t// parse old style Bone/Hierarchy animations\n    \t\t\tvar animations = [];\n\n    \t\t\tif ( json.animation !== undefined ) {\n\n    \t\t\t\tanimations.push( json.animation );\n\n    \t\t\t}\n\n    \t\t\tif ( json.animations !== undefined ) {\n\n    \t\t\t\tif ( json.animations.length ) {\n\n    \t\t\t\t\tanimations = animations.concat( json.animations );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\tanimations.push( json.animations );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n    \t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n    \t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n    \t\t\t}\n\n    \t\t\t// parse implicit morph animations\n    \t\t\tif ( geometry.morphTargets ) {\n\n    \t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n    \t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n    \t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n    \t\t\t}\n\n    \t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n    \t\t}\n\n    \t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n    \t\t\treturn { geometry: geometry };\n\n    \t\t} else {\n\n    \t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n    \t\t\treturn { geometry: geometry, materials: materials };\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function ObjectLoader ( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n    \tthis.texturePath = '';\n\n    }\n\n    Object.assign( ObjectLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tif ( this.texturePath === '' ) {\n\n    \t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n    \t\t}\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( scope.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tscope.parse( JSON.parse( text ), onLoad );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tsetTexturePath: function ( value ) {\n\n    \t\tthis.texturePath = value;\n\n    \t},\n\n    \tsetCrossOrigin: function ( value ) {\n\n    \t\tthis.crossOrigin = value;\n\n    \t},\n\n    \tparse: function ( json, onLoad ) {\n\n    \t\tvar geometries = this.parseGeometries( json.geometries );\n\n    \t\tvar images = this.parseImages( json.images, function () {\n\n    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n    \t\t} );\n\n    \t\tvar textures  = this.parseTextures( json.textures, images );\n    \t\tvar materials = this.parseMaterials( json.materials, textures );\n\n    \t\tvar object = this.parseObject( json.object, geometries, materials );\n\n    \t\tif ( json.animations ) {\n\n    \t\t\tobject.animations = this.parseAnimations( json.animations );\n\n    \t\t}\n\n    \t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n    \t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n    \t\t}\n\n    \t\treturn object;\n\n    \t},\n\n    \tparseGeometries: function ( json ) {\n\n    \t\tvar geometries = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tvar geometryLoader = new JSONLoader();\n    \t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar geometry;\n    \t\t\t\tvar data = json[ i ];\n\n    \t\t\t\tswitch ( data.type ) {\n\n    \t\t\t\t\tcase 'PlaneGeometry':\n    \t\t\t\t\tcase 'PlaneBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.width,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'BoxGeometry':\n    \t\t\t\t\tcase 'BoxBufferGeometry':\n    \t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.width,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.depth,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.depthSegments\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'CircleGeometry':\n    \t\t\t\t\tcase 'CircleBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.segments,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'CylinderGeometry':\n    \t\t\t\t\tcase 'CylinderBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radiusTop,\n    \t\t\t\t\t\t\tdata.radiusBottom,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.openEnded,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'ConeGeometry':\n    \t\t\t\t\tcase 'ConeBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.height,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.openEnded,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'SphereGeometry':\n    \t\t\t\t\tcase 'SphereBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.widthSegments,\n    \t\t\t\t\t\t\tdata.heightSegments,\n    \t\t\t\t\t\t\tdata.phiStart,\n    \t\t\t\t\t\t\tdata.phiLength,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'DodecahedronGeometry':\n    \t\t\t\t\tcase 'IcosahedronGeometry':\n    \t\t\t\t\tcase 'OctahedronGeometry':\n    \t\t\t\t\tcase 'TetrahedronGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.detail\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'RingGeometry':\n    \t\t\t\t\tcase 'RingBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.innerRadius,\n    \t\t\t\t\t\t\tdata.outerRadius,\n    \t\t\t\t\t\t\tdata.thetaSegments,\n    \t\t\t\t\t\t\tdata.phiSegments,\n    \t\t\t\t\t\t\tdata.thetaStart,\n    \t\t\t\t\t\t\tdata.thetaLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'TorusGeometry':\n    \t\t\t\t\tcase 'TorusBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.tube,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.tubularSegments,\n    \t\t\t\t\t\t\tdata.arc\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'TorusKnotGeometry':\n    \t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.radius,\n    \t\t\t\t\t\t\tdata.tube,\n    \t\t\t\t\t\t\tdata.tubularSegments,\n    \t\t\t\t\t\t\tdata.radialSegments,\n    \t\t\t\t\t\t\tdata.p,\n    \t\t\t\t\t\t\tdata.q\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'LatheGeometry':\n    \t\t\t\t\tcase 'LatheBufferGeometry':\n\n    \t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n    \t\t\t\t\t\t\tdata.points,\n    \t\t\t\t\t\t\tdata.segments,\n    \t\t\t\t\t\t\tdata.phiStart,\n    \t\t\t\t\t\t\tdata.phiLength\n    \t\t\t\t\t\t);\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'BufferGeometry':\n\n    \t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tcase 'Geometry':\n\n    \t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\tdefault:\n\n    \t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n    \t\t\t\t\t\tcontinue;\n\n    \t\t\t\t}\n\n    \t\t\t\tgeometry.uuid = data.uuid;\n\n    \t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n    \t\t\t\tgeometries[ data.uuid ] = geometry;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn geometries;\n\n    \t},\n\n    \tparseMaterials: function ( json, textures ) {\n\n    \t\tvar materials = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tvar loader = new MaterialLoader();\n    \t\t\tloader.setTextures( textures );\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar material = loader.parse( json[ i ] );\n    \t\t\t\tmaterials[ material.uuid ] = material;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn materials;\n\n    \t},\n\n    \tparseAnimations: function ( json ) {\n\n    \t\tvar animations = [];\n\n    \t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n    \t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n    \t\t\tanimations.push( clip );\n\n    \t\t}\n\n    \t\treturn animations;\n\n    \t},\n\n    \tparseImages: function ( json, onLoad ) {\n\n    \t\tvar scope = this;\n    \t\tvar images = {};\n\n    \t\tfunction loadImage( url ) {\n\n    \t\t\tscope.manager.itemStart( url );\n\n    \t\t\treturn loader.load( url, function () {\n\n    \t\t\t\tscope.manager.itemEnd( url );\n\n    \t\t\t}, undefined, function () {\n\n    \t\t\t\tscope.manager.itemError( url );\n\n    \t\t\t} );\n\n    \t\t}\n\n    \t\tif ( json !== undefined && json.length > 0 ) {\n\n    \t\t\tvar manager = new LoadingManager( onLoad );\n\n    \t\t\tvar loader = new ImageLoader( manager );\n    \t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar image = json[ i ];\n    \t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n    \t\t\t\timages[ image.uuid ] = loadImage( path );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn images;\n\n    \t},\n\n    \tparseTextures: function ( json, images ) {\n\n    \t\tfunction parseConstant( value, type ) {\n\n    \t\t\tif ( typeof( value ) === 'number' ) return value;\n\n    \t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n    \t\t\treturn type[ value ];\n\n    \t\t}\n\n    \t\tvar textures = {};\n\n    \t\tif ( json !== undefined ) {\n\n    \t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n    \t\t\t\tvar data = json[ i ];\n\n    \t\t\t\tif ( data.image === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( images[ data.image ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n    \t\t\t\t}\n\n    \t\t\t\tvar texture = new Texture( images[ data.image ] );\n    \t\t\t\ttexture.needsUpdate = true;\n\n    \t\t\t\ttexture.uuid = data.uuid;\n\n    \t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n    \t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );\n\n    \t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n    \t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n    \t\t\t\tif ( data.wrap !== undefined ) {\n\n    \t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );\n    \t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );\n    \t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );\n    \t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n    \t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n    \t\t\t\ttextures[ data.uuid ] = texture;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\treturn textures;\n\n    \t},\n\n    \tparseObject: function () {\n\n    \t\tvar matrix = new Matrix4();\n\n    \t\treturn function parseObject( data, geometries, materials ) {\n\n    \t\t\tvar object;\n\n    \t\t\tfunction getGeometry( name ) {\n\n    \t\t\t\tif ( geometries[ name ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n    \t\t\t\t}\n\n    \t\t\t\treturn geometries[ name ];\n\n    \t\t\t}\n\n    \t\t\tfunction getMaterial( name ) {\n\n    \t\t\t\tif ( name === undefined ) return undefined;\n\n    \t\t\t\tif ( materials[ name ] === undefined ) {\n\n    \t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n    \t\t\t\t}\n\n    \t\t\t\treturn materials[ name ];\n\n    \t\t\t}\n\n    \t\t\tswitch ( data.type ) {\n\n    \t\t\t\tcase 'Scene':\n\n    \t\t\t\t\tobject = new Scene();\n\n    \t\t\t\t\tif ( data.background !== undefined ) {\n\n    \t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n    \t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( data.fog !== undefined ) {\n\n    \t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n    \t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n    \t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n    \t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PerspectiveCamera':\n\n    \t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n    \t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n    \t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n    \t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n    \t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n    \t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'OrthographicCamera':\n\n    \t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'AmbientLight':\n\n    \t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'DirectionalLight':\n\n    \t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointLight':\n\n    \t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'SpotLight':\n\n    \t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'HemisphereLight':\n\n    \t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Mesh':\n\n    \t\t\t\t\tvar geometry = getGeometry( data.geometry );\n    \t\t\t\t\tvar material = getMaterial( data.material );\n\n    \t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n    \t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'LOD':\n\n    \t\t\t\t\tobject = new LOD();\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Line':\n\n    \t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'LineSegments':\n\n    \t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'PointCloud':\n    \t\t\t\tcase 'Points':\n\n    \t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Sprite':\n\n    \t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'Group':\n\n    \t\t\t\t\tobject = new Group();\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n\n    \t\t\t\t\tobject = new Object3D();\n\n    \t\t\t}\n\n    \t\t\tobject.uuid = data.uuid;\n\n    \t\t\tif ( data.name !== undefined ) object.name = data.name;\n    \t\t\tif ( data.matrix !== undefined ) {\n\n    \t\t\t\tmatrix.fromArray( data.matrix );\n    \t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n    \t\t\t} else {\n\n    \t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n    \t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n    \t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n    \t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n    \t\t\t}\n\n    \t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n    \t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n    \t\t\tif ( data.shadow ) {\n\n    \t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n    \t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n    \t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n    \t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n    \t\t\t}\n\n    \t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n    \t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n    \t\t\tif ( data.children !== undefined ) {\n\n    \t\t\t\tfor ( var child in data.children ) {\n\n    \t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( data.type === 'LOD' ) {\n\n    \t\t\t\tvar levels = data.levels;\n\n    \t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n    \t\t\t\t\tvar level = levels[ l ];\n    \t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n    \t\t\t\t\tif ( child !== undefined ) {\n\n    \t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn object;\n\n    \t\t};\n\n    \t}()\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Extensible curve object\n     *\n     * Some common of Curve methods\n     * .getPoint(t), getTangent(t)\n     * .getPointAt(u), getTangentAt(u)\n     * .getPoints(), .getSpacedPoints()\n     * .getLength()\n     * .updateArcLengths()\n     *\n     * This following classes subclasses THREE.Curve:\n     *\n     * -- 2d classes --\n     * THREE.LineCurve\n     * THREE.QuadraticBezierCurve\n     * THREE.CubicBezierCurve\n     * THREE.SplineCurve\n     * THREE.ArcCurve\n     * THREE.EllipseCurve\n     *\n     * -- 3d classes --\n     * THREE.LineCurve3\n     * THREE.QuadraticBezierCurve3\n     * THREE.CubicBezierCurve3\n     * THREE.SplineCurve3\n     *\n     * A series of curves can be represented as a THREE.CurvePath\n     *\n     **/\n\n    /**************************************************************\n     *\tAbstract Curve base class\n     **************************************************************/\n\n    function Curve() {}\n\n    Curve.prototype = {\n\n    \tconstructor: Curve,\n\n    \t// Virtual base class method to overwrite and implement in subclasses\n    \t//\t- t [0 .. 1]\n\n    \tgetPoint: function ( t ) {\n\n    \t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n    \t\treturn null;\n\n    \t},\n\n    \t// Get point at relative position in curve according to arc length\n    \t// - u [0 .. 1]\n\n    \tgetPointAt: function ( u ) {\n\n    \t\tvar t = this.getUtoTmapping( u );\n    \t\treturn this.getPoint( t );\n\n    \t},\n\n    \t// Get sequence of points using getPoint( t )\n\n    \tgetPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 5;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n    \t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t// Get sequence of points using getPointAt( u )\n\n    \tgetSpacedPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 5;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n    \t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t// Get total curve arc length\n\n    \tgetLength: function () {\n\n    \t\tvar lengths = this.getLengths();\n    \t\treturn lengths[ lengths.length - 1 ];\n\n    \t},\n\n    \t// Get list of cumulative segment lengths\n\n    \tgetLengths: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\n    \t\tif ( this.cacheArcLengths\n    \t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n    \t\t\t&& ! this.needsUpdate ) {\n\n    \t\t\t//console.log( \"cached\", this.cacheArcLengths );\n    \t\t\treturn this.cacheArcLengths;\n\n    \t\t}\n\n    \t\tthis.needsUpdate = false;\n\n    \t\tvar cache = [];\n    \t\tvar current, last = this.getPoint( 0 );\n    \t\tvar p, sum = 0;\n\n    \t\tcache.push( 0 );\n\n    \t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n    \t\t\tcurrent = this.getPoint ( p / divisions );\n    \t\t\tsum += current.distanceTo( last );\n    \t\t\tcache.push( sum );\n    \t\t\tlast = current;\n\n    \t\t}\n\n    \t\tthis.cacheArcLengths = cache;\n\n    \t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\n    \t},\n\n    \tupdateArcLengths: function() {\n\n    \t\tthis.needsUpdate = true;\n    \t\tthis.getLengths();\n\n    \t},\n\n    \t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n    \tgetUtoTmapping: function ( u, distance ) {\n\n    \t\tvar arcLengths = this.getLengths();\n\n    \t\tvar i = 0, il = arcLengths.length;\n\n    \t\tvar targetArcLength; // The targeted u distance value to get\n\n    \t\tif ( distance ) {\n\n    \t\t\ttargetArcLength = distance;\n\n    \t\t} else {\n\n    \t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n    \t\t}\n\n    \t\t//var time = Date.now();\n\n    \t\t// binary search for the index with largest value smaller than target u distance\n\n    \t\tvar low = 0, high = il - 1, comparison;\n\n    \t\twhile ( low <= high ) {\n\n    \t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n    \t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n    \t\t\tif ( comparison < 0 ) {\n\n    \t\t\t\tlow = i + 1;\n\n    \t\t\t} else if ( comparison > 0 ) {\n\n    \t\t\t\thigh = i - 1;\n\n    \t\t\t} else {\n\n    \t\t\t\thigh = i;\n    \t\t\t\tbreak;\n\n    \t\t\t\t// DONE\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\ti = high;\n\n    \t\t//console.log('b' , i, low, high, Date.now()- time);\n\n    \t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n    \t\t\tvar t = i / ( il - 1 );\n    \t\t\treturn t;\n\n    \t\t}\n\n    \t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n    \t\tvar lengthBefore = arcLengths[ i ];\n    \t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n    \t\tvar segmentLength = lengthAfter - lengthBefore;\n\n    \t\t// determine where we are between the 'before' and 'after' points\n\n    \t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n    \t\t// add that fractional amount to t\n\n    \t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n    \t\treturn t;\n\n    \t},\n\n    \t// Returns a unit vector tangent at t\n    \t// In case any sub curve does not implement its tangent derivation,\n    \t// 2 points a small delta apart will be used to find its gradient\n    \t// which seems to give a reasonable approximation\n\n    \tgetTangent: function( t ) {\n\n    \t\tvar delta = 0.0001;\n    \t\tvar t1 = t - delta;\n    \t\tvar t2 = t + delta;\n\n    \t\t// Capping in case of danger\n\n    \t\tif ( t1 < 0 ) t1 = 0;\n    \t\tif ( t2 > 1 ) t2 = 1;\n\n    \t\tvar pt1 = this.getPoint( t1 );\n    \t\tvar pt2 = this.getPoint( t2 );\n\n    \t\tvar vec = pt2.clone().sub( pt1 );\n    \t\treturn vec.normalize();\n\n    \t},\n\n    \tgetTangentAt: function ( u ) {\n\n    \t\tvar t = this.getUtoTmapping( u );\n    \t\treturn this.getTangent( t );\n\n    \t}\n\n    };\n\n    // TODO: Transformation for Curves?\n\n    /**************************************************************\n     *\t3D Curves\n     **************************************************************/\n\n    // A Factory method for creating new curve subclasses\n\n    Curve.create = function ( constructor, getPointFunc ) {\n\n    \tconstructor.prototype = Object.create( Curve.prototype );\n    \tconstructor.prototype.constructor = constructor;\n    \tconstructor.prototype.getPoint = getPointFunc;\n\n    \treturn constructor;\n\n    };\n\n    /**************************************************************\n     *\tLine\n     **************************************************************/\n\n    function LineCurve( v1, v2 ) {\n\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n\n    }\n\n    LineCurve.prototype = Object.create( Curve.prototype );\n    LineCurve.prototype.constructor = LineCurve;\n\n    LineCurve.prototype.isLineCurve = true;\n\n    LineCurve.prototype.getPoint = function ( t ) {\n\n    \tif ( t === 1 ) {\n\n    \t\treturn this.v2.clone();\n\n    \t}\n\n    \tvar point = this.v2.clone().sub( this.v1 );\n    \tpoint.multiplyScalar( t ).add( this.v1 );\n\n    \treturn point;\n\n    };\n\n    // Line curve is linear, so we can overwrite default getPointAt\n\n    LineCurve.prototype.getPointAt = function ( u ) {\n\n    \treturn this.getPoint( u );\n\n    };\n\n    LineCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangent = this.v2.clone().sub( this.v1 );\n\n    \treturn tangent.normalize();\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     *\n     **/\n\n    /**************************************************************\n     *\tCurved Path - a curve path is simply a array of connected\n     *  curves, but retains the api of a curve\n     **************************************************************/\n\n    function CurvePath() {\n\n    \tthis.curves = [];\n\n    \tthis.autoClose = false; // Automatically closes the path\n\n    }\n\n    CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n    \tconstructor: CurvePath,\n\n    \tadd: function ( curve ) {\n\n    \t\tthis.curves.push( curve );\n\n    \t},\n\n    \tclosePath: function () {\n\n    \t\t// Add a line curve if start and end of lines are not connected\n    \t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n    \t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n    \t\tif ( ! startPoint.equals( endPoint ) ) {\n\n    \t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n    \t\t}\n\n    \t},\n\n    \t// To get accurate point with reference to\n    \t// entire path distance at time t,\n    \t// following has to be done:\n\n    \t// 1. Length of each sub path have to be known\n    \t// 2. Locate and identify type of curve\n    \t// 3. Get t for the curve\n    \t// 4. Return curve.getPointAt(t')\n\n    \tgetPoint: function ( t ) {\n\n    \t\tvar d = t * this.getLength();\n    \t\tvar curveLengths = this.getCurveLengths();\n    \t\tvar i = 0;\n\n    \t\t// To think about boundaries points.\n\n    \t\twhile ( i < curveLengths.length ) {\n\n    \t\t\tif ( curveLengths[ i ] >= d ) {\n\n    \t\t\t\tvar diff = curveLengths[ i ] - d;\n    \t\t\t\tvar curve = this.curves[ i ];\n\n    \t\t\t\tvar segmentLength = curve.getLength();\n    \t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n    \t\t\t\treturn curve.getPointAt( u );\n\n    \t\t\t}\n\n    \t\t\ti ++;\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t\t// loop where sum != 0, sum > d , sum+1 <d\n\n    \t},\n\n    \t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n    \t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n    \t// getPoint() depends on getLength\n\n    \tgetLength: function () {\n\n    \t\tvar lens = this.getCurveLengths();\n    \t\treturn lens[ lens.length - 1 ];\n\n    \t},\n\n    \t// cacheLengths must be recalculated.\n    \tupdateArcLengths: function () {\n\n    \t\tthis.needsUpdate = true;\n    \t\tthis.cacheLengths = null;\n    \t\tthis.getLengths();\n\n    \t},\n\n    \t// Compute lengths and cache them\n    \t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n    \tgetCurveLengths: function () {\n\n    \t\t// We use cache values if curves and cache array are same length\n\n    \t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n    \t\t\treturn this.cacheLengths;\n\n    \t\t}\n\n    \t\t// Get length of sub-curve\n    \t\t// Push sums into cached array\n\n    \t\tvar lengths = [], sums = 0;\n\n    \t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n    \t\t\tsums += this.curves[ i ].getLength();\n    \t\t\tlengths.push( sums );\n\n    \t\t}\n\n    \t\tthis.cacheLengths = lengths;\n\n    \t\treturn lengths;\n\n    \t},\n\n    \tgetSpacedPoints: function ( divisions ) {\n\n    \t\tif ( ! divisions ) divisions = 40;\n\n    \t\tvar points = [];\n\n    \t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n    \t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n    \t\t}\n\n    \t\tif ( this.autoClose ) {\n\n    \t\t\tpoints.push( points[ 0 ] );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \tgetPoints: function ( divisions ) {\n\n    \t\tdivisions = divisions || 12;\n\n    \t\tvar points = [], last;\n\n    \t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n    \t\t\tvar curve = curves[ i ];\n    \t\t\tvar resolution = (curve && curve.isEllipseCurve) ? divisions * 2\n    \t\t\t\t: (curve && curve.isLineCurve) ? 1\n    \t\t\t\t: (curve && curve.isSplineCurve) ? divisions * curve.points.length\n    \t\t\t\t: divisions;\n\n    \t\t\tvar pts = curve.getPoints( resolution );\n\n    \t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\n    \t\t\t\tvar point = pts[ j ];\n\n    \t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n    \t\t\t\tpoints.push( point );\n    \t\t\t\tlast = point;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n    \t\t\tpoints.push( points[ 0 ] );\n\n    \t\t}\n\n    \t\treturn points;\n\n    \t},\n\n    \t/**************************************************************\n    \t *\tCreate Geometries Helpers\n    \t **************************************************************/\n\n    \t/// Generate geometry from path points (for Line or Points objects)\n\n    \tcreatePointsGeometry: function ( divisions ) {\n\n    \t\tvar pts = this.getPoints( divisions );\n    \t\treturn this.createGeometry( pts );\n\n    \t},\n\n    \t// Generate geometry from equidistant sampling along the path\n\n    \tcreateSpacedPointsGeometry: function ( divisions ) {\n\n    \t\tvar pts = this.getSpacedPoints( divisions );\n    \t\treturn this.createGeometry( pts );\n\n    \t},\n\n    \tcreateGeometry: function ( points ) {\n\n    \t\tvar geometry = new Geometry();\n\n    \t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n    \t\t\tvar point = points[ i ];\n    \t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n    \t\t}\n\n    \t\treturn geometry;\n\n    \t}\n\n    } );\n\n    /**************************************************************\n     *\tEllipse curve\n     **************************************************************/\n\n    function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \tthis.aX = aX;\n    \tthis.aY = aY;\n\n    \tthis.xRadius = xRadius;\n    \tthis.yRadius = yRadius;\n\n    \tthis.aStartAngle = aStartAngle;\n    \tthis.aEndAngle = aEndAngle;\n\n    \tthis.aClockwise = aClockwise;\n\n    \tthis.aRotation = aRotation || 0;\n\n    }\n\n    EllipseCurve.prototype = Object.create( Curve.prototype );\n    EllipseCurve.prototype.constructor = EllipseCurve;\n\n    EllipseCurve.prototype.isEllipseCurve = true;\n\n    EllipseCurve.prototype.getPoint = function( t ) {\n\n    \tvar twoPi = Math.PI * 2;\n    \tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n    \tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n    \t// ensures that deltaAngle is 0 .. 2 PI\n    \twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n    \twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n    \tif ( deltaAngle < Number.EPSILON ) {\n\n    \t\tif ( samePoints ) {\n\n    \t\t\tdeltaAngle = 0;\n\n    \t\t} else {\n\n    \t\t\tdeltaAngle = twoPi;\n\n    \t\t}\n\n    \t}\n\n    \tif ( this.aClockwise === true && ! samePoints ) {\n\n    \t\tif ( deltaAngle === twoPi ) {\n\n    \t\t\tdeltaAngle = - twoPi;\n\n    \t\t} else {\n\n    \t\t\tdeltaAngle = deltaAngle - twoPi;\n\n    \t\t}\n\n    \t}\n\n    \tvar angle = this.aStartAngle + t * deltaAngle;\n    \tvar x = this.aX + this.xRadius * Math.cos( angle );\n    \tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n    \tif ( this.aRotation !== 0 ) {\n\n    \t\tvar cos = Math.cos( this.aRotation );\n    \t\tvar sin = Math.sin( this.aRotation );\n\n    \t\tvar tx = x - this.aX;\n    \t\tvar ty = y - this.aY;\n\n    \t\t// Rotate the point about the center of the ellipse.\n    \t\tx = tx * cos - ty * sin + this.aX;\n    \t\ty = tx * sin + ty * cos + this.aY;\n\n    \t}\n\n    \treturn new Vector2( x, y );\n\n    };\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     */\n\n    exports.CurveUtils = {\n\n    \ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\n    \t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\n    \t},\n\n    \t// Puay Bing, thanks for helping with this derivative!\n\n    \ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\n    \t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n    \t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n    \t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n    \t\t\t3 * t * t * p3;\n\n    \t},\n\n    \ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\n    \t\t// To check if my formulas are correct\n\n    \t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n    \t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n    \t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n    \t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\n    \t\treturn h00 + h10 + h01 + h11;\n\n    \t},\n\n    \t// Catmull-Rom\n\n    \tinterpolate: function( p0, p1, p2, p3, t ) {\n\n    \t\tvar v0 = ( p2 - p0 ) * 0.5;\n    \t\tvar v1 = ( p3 - p1 ) * 0.5;\n    \t\tvar t2 = t * t;\n    \t\tvar t3 = t * t2;\n    \t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n    \t}\n\n    };\n\n    /**************************************************************\n     *\tSpline curve\n     **************************************************************/\n\n    function SplineCurve( points /* array of Vector2 */ ) {\n\n    \tthis.points = ( points === undefined ) ? [] : points;\n\n    }\n\n    SplineCurve.prototype = Object.create( Curve.prototype );\n    SplineCurve.prototype.constructor = SplineCurve;\n\n    SplineCurve.prototype.isSplineCurve = true;\n\n    SplineCurve.prototype.getPoint = function ( t ) {\n\n    \tvar points = this.points;\n    \tvar point = ( points.length - 1 ) * t;\n\n    \tvar intPoint = Math.floor( point );\n    \tvar weight = point - intPoint;\n\n    \tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n    \tvar point1 = points[ intPoint ];\n    \tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n    \tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n    \tvar interpolate = exports.CurveUtils.interpolate;\n\n    \treturn new Vector2(\n    \t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n    \t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n    \t);\n\n    };\n\n    /**************************************************************\n     *\tCubic Bezier curve\n     **************************************************************/\n\n    function CubicBezierCurve( v0, v1, v2, v3 ) {\n\n    \tthis.v0 = v0;\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n    \tthis.v3 = v3;\n\n    }\n\n    CubicBezierCurve.prototype = Object.create( Curve.prototype );\n    CubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n    CubicBezierCurve.prototype.getPoint = function ( t ) {\n\n    \tvar b3 = exports.ShapeUtils.b3;\n\n    \treturn new Vector2(\n    \t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n    \t);\n\n    };\n\n    CubicBezierCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangentCubicBezier = exports.CurveUtils.tangentCubicBezier;\n\n    \treturn new Vector2(\n    \t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n    \t).normalize();\n\n    };\n\n    /**************************************************************\n     *\tQuadratic Bezier curve\n     **************************************************************/\n\n\n    function QuadraticBezierCurve( v0, v1, v2 ) {\n\n    \tthis.v0 = v0;\n    \tthis.v1 = v1;\n    \tthis.v2 = v2;\n\n    }\n\n    QuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n    QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\n    QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n    \tvar b2 = exports.ShapeUtils.b2;\n\n    \treturn new Vector2(\n    \t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n    \t);\n\n    };\n\n\n    QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\n    \tvar tangentQuadraticBezier = exports.CurveUtils.tangentQuadraticBezier;\n\n    \treturn new Vector2(\n    \t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n    \t).normalize();\n\n    };\n\n    var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n    \tfromPoints: function ( vectors ) {\n\n    \t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n    \t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\n    \t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\n    \t\t}\n\n    \t},\n\n    \tmoveTo: function ( x, y ) {\n\n    \t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n    \t},\n\n    \tlineTo: function ( x, y ) {\n\n    \t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( x, y );\n\n    \t},\n\n    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n    \t\tvar curve = new QuadraticBezierCurve(\n    \t\t\tthis.currentPoint.clone(),\n    \t\t\tnew Vector2( aCPx, aCPy ),\n    \t\t\tnew Vector2( aX, aY )\n    \t\t);\n\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( aX, aY );\n\n    \t},\n\n    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n    \t\tvar curve = new CubicBezierCurve(\n    \t\t\tthis.currentPoint.clone(),\n    \t\t\tnew Vector2( aCP1x, aCP1y ),\n    \t\t\tnew Vector2( aCP2x, aCP2y ),\n    \t\t\tnew Vector2( aX, aY )\n    \t\t);\n\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.set( aX, aY );\n\n    \t},\n\n    \tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n    \t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n    \t\tvar curve = new SplineCurve( npts );\n    \t\tthis.curves.push( curve );\n\n    \t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n    \t},\n\n    \tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \t\tvar x0 = this.currentPoint.x;\n    \t\tvar y0 = this.currentPoint.y;\n\n    \t\tthis.absarc( aX + x0, aY + y0, aRadius,\n    \t\t\taStartAngle, aEndAngle, aClockwise );\n\n    \t},\n\n    \tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n    \t},\n\n    \tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \t\tvar x0 = this.currentPoint.x;\n    \t\tvar y0 = this.currentPoint.y;\n\n    \t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n    \t},\n\n    \tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n    \t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n    \t\tif ( this.curves.length > 0 ) {\n\n    \t\t\t// if a previous curve is present, attempt to join\n    \t\t\tvar firstPoint = curve.getPoint( 0 );\n\n    \t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n    \t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.curves.push( curve );\n\n    \t\tvar lastPoint = curve.getPoint( 1 );\n    \t\tthis.currentPoint.copy( lastPoint );\n\n    \t}\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Defines a 2d shape plane using paths.\n     **/\n\n    // STEP 1 Create a path.\n    // STEP 2 Turn path into shape.\n    // STEP 3 ExtrudeGeometry takes in Shape/Shapes\n    // STEP 3a - Extract points from each shape, turn to vertices\n    // STEP 3b - Triangulate each shape, add faces.\n\n    function Shape() {\n\n    \tPath.apply( this, arguments );\n\n    \tthis.holes = [];\n\n    }\n\n    Shape.prototype = Object.assign( Object.create( PathPrototype ), {\n\n    \tconstructor: Shape,\n\n    \tgetPointsHoles: function ( divisions ) {\n\n    \t\tvar holesPts = [];\n\n    \t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n    \t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n    \t\t}\n\n    \t\treturn holesPts;\n\n    \t},\n\n    \t// Get points of shape and holes (keypoints based on segments parameter)\n\n    \textractAllPoints: function ( divisions ) {\n\n    \t\treturn {\n\n    \t\t\tshape: this.getPoints( divisions ),\n    \t\t\tholes: this.getPointsHoles( divisions )\n\n    \t\t};\n\n    \t},\n\n    \textractPoints: function ( divisions ) {\n\n    \t\treturn this.extractAllPoints( divisions );\n\n    \t}\n\n    } );\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Creates free form 2d path using series of points, lines or curves.\n     *\n     **/\n\n    function Path( points ) {\n\n    \tCurvePath.call( this );\n    \tthis.currentPoint = new Vector2();\n\n    \tif ( points ) {\n\n    \t\tthis.fromPoints( points );\n\n    \t}\n\n    }\n\n    Path.prototype = PathPrototype;\n    PathPrototype.constructor = Path;\n\n\n    // minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n    function ShapePath() {\n    \tthis.subPaths = [];\n    \tthis.currentPath = null;\n    }\n\n    ShapePath.prototype = {\n    \tmoveTo: function ( x, y ) {\n    \t\tthis.currentPath = new Path();\n    \t\tthis.subPaths.push(this.currentPath);\n    \t\tthis.currentPath.moveTo( x, y );\n    \t},\n    \tlineTo: function ( x, y ) {\n    \t\tthis.currentPath.lineTo( x, y );\n    \t},\n    \tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n    \t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n    \t},\n    \tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n    \t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n    \t},\n    \tsplineThru: function ( pts ) {\n    \t\tthis.currentPath.splineThru( pts );\n    \t},\n\n    \ttoShapes: function ( isCCW, noHoles ) {\n\n    \t\tfunction toShapesNoHoles( inSubpaths ) {\n\n    \t\t\tvar shapes = [];\n\n    \t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n    \t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n    \t\t\t\tvar tmpShape = new Shape();\n    \t\t\t\ttmpShape.curves = tmpPath.curves;\n\n    \t\t\t\tshapes.push( tmpShape );\n\n    \t\t\t}\n\n    \t\t\treturn shapes;\n\n    \t\t}\n\n    \t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n    \t\t\tvar polyLen = inPolygon.length;\n\n    \t\t\t// inPt on polygon contour => immediate success    or\n    \t\t\t// toggling of inside/outside at every single! intersection point of an edge\n    \t\t\t//  with the horizontal line through inPt, left of inPt\n    \t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n    \t\t\tvar inside = false;\n    \t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n    \t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n    \t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n    \t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n    \t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n    \t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n    \t\t\t\t\t// not parallel\n    \t\t\t\t\tif ( edgeDy < 0 ) {\n\n    \t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n    \t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n    \t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n    \t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n    \t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n    \t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n    \t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n    \t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// parallel or collinear\n    \t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n    \t\t\t\t\t// edge lies on the same horizontal line as inPt\n    \t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n    \t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n    \t\t\t\t\t// continue;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn\tinside;\n\n    \t\t}\n\n    \t\tvar isClockWise = exports.ShapeUtils.isClockWise;\n\n    \t\tvar subPaths = this.subPaths;\n    \t\tif ( subPaths.length === 0 ) return [];\n\n    \t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n    \t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n    \t\tif ( subPaths.length === 1 ) {\n\n    \t\t\ttmpPath = subPaths[ 0 ];\n    \t\t\ttmpShape = new Shape();\n    \t\t\ttmpShape.curves = tmpPath.curves;\n    \t\t\tshapes.push( tmpShape );\n    \t\t\treturn shapes;\n\n    \t\t}\n\n    \t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n    \t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n    \t\t// console.log(\"Holes first\", holesFirst);\n\n    \t\tvar betterShapeHoles = [];\n    \t\tvar newShapes = [];\n    \t\tvar newShapeHoles = [];\n    \t\tvar mainIdx = 0;\n    \t\tvar tmpPoints;\n\n    \t\tnewShapes[ mainIdx ] = undefined;\n    \t\tnewShapeHoles[ mainIdx ] = [];\n\n    \t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n    \t\t\ttmpPath = subPaths[ i ];\n    \t\t\ttmpPoints = tmpPath.getPoints();\n    \t\t\tsolid = isClockWise( tmpPoints );\n    \t\t\tsolid = isCCW ? ! solid : solid;\n\n    \t\t\tif ( solid ) {\n\n    \t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n    \t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n    \t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n    \t\t\t\tif ( holesFirst )\tmainIdx ++;\n    \t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n    \t\t\t\t//console.log('cw', i);\n\n    \t\t\t} else {\n\n    \t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n    \t\t\t\t//console.log('ccw', i);\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// only Holes? -> probably all Shapes with wrong orientation\n    \t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n    \t\tif ( newShapes.length > 1 ) {\n\n    \t\t\tvar ambiguous = false;\n    \t\t\tvar toChange = [];\n\n    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n    \t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n    \t\t\t}\n\n    \t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n    \t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n    \t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n    \t\t\t\t\tvar ho = sho[ hIdx ];\n    \t\t\t\t\tvar hole_unassigned = true;\n\n    \t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n    \t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n    \t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n    \t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n    \t\t\t\t\t\t\t\thole_unassigned = false;\n    \t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n    \t\t\t\t\t\t\t} else {\n\n    \t\t\t\t\t\t\t\tambiguous = true;\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n    \t\t\t\t\tif ( hole_unassigned ) {\n\n    \t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n    \t\t\t// console.log(\"ambiguous: \", ambiguous);\n    \t\t\tif ( toChange.length > 0 ) {\n\n    \t\t\t\t// console.log(\"to change: \", toChange);\n    \t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar tmpHoles;\n\n    \t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n    \t\t\ttmpShape = newShapes[ i ].s;\n    \t\t\tshapes.push( tmpShape );\n    \t\t\ttmpHoles = newShapeHoles[ i ];\n\n    \t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n    \t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t//console.log(\"shape\", shapes);\n\n    \t\treturn shapes;\n\n    \t}\n    }\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Font( data ) {\n\n    \tthis.data = data;\n\n    }\n\n    Object.assign( Font.prototype, {\n\n    \tisFont: true,\n\n    \tgenerateShapes: function ( text, size, divisions ) {\n\n    \t\tfunction createPaths( text ) {\n\n    \t\t\tvar chars = String( text ).split( '' );\n    \t\t\tvar scale = size / data.resolution;\n    \t\t\tvar offset = 0;\n\n    \t\t\tvar paths = [];\n\n    \t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n    \t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n    \t\t\t\toffset += ret.offset;\n\n    \t\t\t\tpaths.push( ret.path );\n\n    \t\t\t}\n\n    \t\t\treturn paths;\n\n    \t\t}\n\n    \t\tfunction createPath( c, scale, offset ) {\n\n    \t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n    \t\t\tif ( ! glyph ) return;\n\n    \t\t\tvar path = new ShapePath();\n\n    \t\t\tvar pts = [], b2 = exports.ShapeUtils.b2, b3 = exports.ShapeUtils.b3;\n    \t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n    \t\t\tif ( glyph.o ) {\n\n    \t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n    \t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n    \t\t\t\t\tvar action = outline[ i ++ ];\n\n    \t\t\t\t\tswitch ( action ) {\n\n    \t\t\t\t\t\tcase 'm': // moveTo\n\n    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.moveTo( x, y );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'l': // lineTo\n\n    \t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.lineTo( x, y );\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n    \t\t\t\t\t\t\tif ( laste ) {\n\n    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n    \t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n    \t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n    \t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n    \t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n    \t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\n    \t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n    \t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n    \t\t\t\t\t\t\tif ( laste ) {\n\n    \t\t\t\t\t\t\t\tcpx0 = laste.x;\n    \t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n    \t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n    \t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n    \t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n    \t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\n    \t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\treturn { offset: glyph.ha * scale, path: path };\n\n    \t\t}\n\n    \t\t//\n\n    \t\tif ( size === undefined ) size = 100;\n    \t\tif ( divisions === undefined ) divisions = 4;\n\n    \t\tvar data = this.data;\n\n    \t\tvar paths = createPaths( text );\n    \t\tvar shapes = [];\n\n    \t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n    \t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n    \t\t}\n\n    \t\treturn shapes;\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function FontLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( FontLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar scope = this;\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.load( url, function ( text ) {\n\n    \t\t\tvar json;\n\n    \t\t\ttry {\n\n    \t\t\t\tjson = JSON.parse( text );\n\n    \t\t\t} catch ( e ) {\n\n    \t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n    \t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n    \t\t\t}\n\n    \t\t\tvar font = scope.parse( json );\n\n    \t\t\tif ( onLoad ) onLoad( font );\n\n    \t\t}, onProgress, onError );\n\n    \t},\n\n    \tparse: function ( json ) {\n\n    \t\treturn new Font( json );\n\n    \t}\n\n    } );\n\n    var context;\n\n    function getAudioContext() {\n\n    \tif ( context === undefined ) {\n\n    \t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n    \t}\n\n    \treturn context;\n\n    }\n\n    /**\n     * @author Reece Aaron Lecrivain / http://reecenotes.com/\n     */\n\n    function AudioLoader( manager ) {\n\n    \tthis.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;\n\n    }\n\n    Object.assign( AudioLoader.prototype, {\n\n    \tload: function ( url, onLoad, onProgress, onError ) {\n\n    \t\tvar loader = new XHRLoader( this.manager );\n    \t\tloader.setResponseType( 'arraybuffer' );\n    \t\tloader.load( url, function ( buffer ) {\n\n    \t\t\tvar context = getAudioContext();\n\n    \t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n    \t\t\t\tonLoad( audioBuffer );\n\n    \t\t\t} );\n\n    \t\t}, onProgress, onError );\n\n    \t}\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function StereoCamera() {\n\n    \tthis.type = 'StereoCamera';\n\n    \tthis.aspect = 1;\n\n    \tthis.eyeSep = 0.064;\n\n    \tthis.cameraL = new PerspectiveCamera();\n    \tthis.cameraL.layers.enable( 1 );\n    \tthis.cameraL.matrixAutoUpdate = false;\n\n    \tthis.cameraR = new PerspectiveCamera();\n    \tthis.cameraR.layers.enable( 2 );\n    \tthis.cameraR.matrixAutoUpdate = false;\n\n    }\n\n    Object.assign( StereoCamera.prototype, {\n\n    \tupdate: ( function () {\n\n    \t\tvar instance, focus, fov, aspect, near, far, zoom;\n\n    \t\tvar eyeRight = new Matrix4();\n    \t\tvar eyeLeft = new Matrix4();\n\n    \t\treturn function update( camera ) {\n\n    \t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n    \t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n    \t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom;\n\n    \t\t\tif ( needsUpdate ) {\n\n    \t\t\t\tinstance = this;\n    \t\t\t\tfocus = camera.focus;\n    \t\t\t\tfov = camera.fov;\n    \t\t\t\taspect = camera.aspect * this.aspect;\n    \t\t\t\tnear = camera.near;\n    \t\t\t\tfar = camera.far;\n    \t\t\t\tzoom = camera.zoom;\n\n    \t\t\t\t// Off-axis stereoscopic effect based on\n    \t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n    \t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n    \t\t\t\tvar eyeSep = this.eyeSep / 2;\n    \t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n    \t\t\t\tvar ymax = ( near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n    \t\t\t\tvar xmin, xmax;\n\n    \t\t\t\t// translate xOffset\n\n    \t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n    \t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n    \t\t\t\t// for left eye\n\n    \t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n    \t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n    \t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n    \t\t\t\t// for right eye\n\n    \t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n    \t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n    \t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n    \t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n    \t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n    \t\t\t}\n\n    \t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n    \t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n    \t\t};\n\n    \t} )()\n\n    } );\n\n    /**\n     * Camera for rendering cube maps\n     *\t- renders scene into axis-aligned cube\n     *\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function CubeCamera( near, far, cubeResolution ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'CubeCamera';\n\n    \tvar fov = 90, aspect = 1;\n\n    \tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPX.up.set( 0, - 1, 0 );\n    \tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n    \tthis.add( cameraPX );\n\n    \tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNX.up.set( 0, - 1, 0 );\n    \tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n    \tthis.add( cameraNX );\n\n    \tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPY.up.set( 0, 0, 1 );\n    \tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n    \tthis.add( cameraPY );\n\n    \tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNY.up.set( 0, 0, - 1 );\n    \tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n    \tthis.add( cameraNY );\n\n    \tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraPZ.up.set( 0, - 1, 0 );\n    \tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n    \tthis.add( cameraPZ );\n\n    \tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n    \tcameraNZ.up.set( 0, - 1, 0 );\n    \tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n    \tthis.add( cameraNZ );\n\n    \tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n    \tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\n    \tthis.updateCubeMap = function ( renderer, scene ) {\n\n    \t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n    \t\tvar renderTarget = this.renderTarget;\n    \t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n    \t\trenderTarget.texture.generateMipmaps = false;\n\n    \t\trenderTarget.activeCubeFace = 0;\n    \t\trenderer.render( scene, cameraPX, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 1;\n    \t\trenderer.render( scene, cameraNX, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 2;\n    \t\trenderer.render( scene, cameraPY, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 3;\n    \t\trenderer.render( scene, cameraNY, renderTarget );\n\n    \t\trenderTarget.activeCubeFace = 4;\n    \t\trenderer.render( scene, cameraPZ, renderTarget );\n\n    \t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n    \t\trenderTarget.activeCubeFace = 5;\n    \t\trenderer.render( scene, cameraNZ, renderTarget );\n\n    \t\trenderer.setRenderTarget( null );\n\n    \t};\n\n    }\n\n    CubeCamera.prototype = Object.create( Object3D.prototype );\n    CubeCamera.prototype.constructor = CubeCamera;\n\n    function AudioListener() {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'AudioListener';\n\n    \tthis.context = getAudioContext();\n\n    \tthis.gain = this.context.createGain();\n    \tthis.gain.connect( this.context.destination );\n\n    \tthis.filter = null;\n\n    }\n\n    AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: AudioListener,\n\n    \tgetInput: function () {\n\n    \t\treturn this.gain;\n\n    \t},\n\n    \tremoveFilter: function ( ) {\n\n    \t\tif ( this.filter !== null ) {\n\n    \t\t\tthis.gain.disconnect( this.filter );\n    \t\t\tthis.filter.disconnect( this.context.destination );\n    \t\t\tthis.gain.connect( this.context.destination );\n    \t\t\tthis.filter = null;\n\n    \t\t}\n\n    \t},\n\n    \tgetFilter: function () {\n\n    \t\treturn this.filter;\n\n    \t},\n\n    \tsetFilter: function ( value ) {\n\n    \t\tif ( this.filter !== null ) {\n\n    \t\t\tthis.gain.disconnect( this.filter );\n    \t\t\tthis.filter.disconnect( this.context.destination );\n\n    \t\t} else {\n\n    \t\t\tthis.gain.disconnect( this.context.destination );\n\n    \t\t}\n\n    \t\tthis.filter = value;\n    \t\tthis.gain.connect( this.filter );\n    \t\tthis.filter.connect( this.context.destination );\n\n    \t},\n\n    \tgetMasterVolume: function () {\n\n    \t\treturn this.gain.gain.value;\n\n    \t},\n\n    \tsetMasterVolume: function ( value ) {\n\n    \t\tthis.gain.gain.value = value;\n\n    \t},\n\n    \tupdateMatrixWorld: ( function () {\n\n    \t\tvar position = new Vector3();\n    \t\tvar quaternion = new Quaternion();\n    \t\tvar scale = new Vector3();\n\n    \t\tvar orientation = new Vector3();\n\n    \t\treturn function updateMatrixWorld( force ) {\n\n    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n    \t\t\tvar listener = this.context.listener;\n    \t\t\tvar up = this.up;\n\n    \t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n    \t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n    \t\t\tlistener.setPosition( position.x, position.y, position.z );\n    \t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n    \t\t};\n\n    \t} )()\n\n    } );\n\n    function Audio( listener ) {\n\n    \tObject3D.call( this );\n\n    \tthis.type = 'Audio';\n\n    \tthis.context = listener.context;\n    \tthis.source = this.context.createBufferSource();\n    \tthis.source.onended = this.onEnded.bind( this );\n\n    \tthis.gain = this.context.createGain();\n    \tthis.gain.connect( listener.getInput() );\n\n    \tthis.autoplay = false;\n\n    \tthis.startTime = 0;\n    \tthis.playbackRate = 1;\n    \tthis.isPlaying = false;\n    \tthis.hasPlaybackControl = true;\n    \tthis.sourceType = 'empty';\n\n    \tthis.filters = [];\n\n    }\n\n    Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n    \tconstructor: Audio,\n\n    \tgetOutput: function () {\n\n    \t\treturn this.gain;\n\n    \t},\n\n    \tsetNodeSource: function ( audioNode ) {\n\n    \t\tthis.hasPlaybackControl = false;\n    \t\tthis.sourceType = 'audioNode';\n    \t\tthis.source = audioNode;\n    \t\tthis.connect();\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetBuffer: function ( audioBuffer ) {\n\n    \t\tthis.source.buffer = audioBuffer;\n    \t\tthis.sourceType = 'buffer';\n\n    \t\tif ( this.autoplay ) this.play();\n\n    \t\treturn this;\n\n    \t},\n\n    \tplay: function () {\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tvar source = this.context.createBufferSource();\n\n    \t\tsource.buffer = this.source.buffer;\n    \t\tsource.loop = this.source.loop;\n    \t\tsource.onended = this.source.onended;\n    \t\tsource.start( 0, this.startTime );\n    \t\tsource.playbackRate.value = this.playbackRate;\n\n    \t\tthis.isPlaying = true;\n\n    \t\tthis.source = source;\n\n    \t\treturn this.connect();\n\n    \t},\n\n    \tpause: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.stop();\n    \t\tthis.startTime = this.context.currentTime;\n    \t\tthis.isPlaying = false;\n\n    \t\treturn this;\n\n    \t},\n\n    \tstop: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.stop();\n    \t\tthis.startTime = 0;\n    \t\tthis.isPlaying = false;\n\n    \t\treturn this;\n\n    \t},\n\n    \tconnect: function () {\n\n    \t\tif ( this.filters.length > 0 ) {\n\n    \t\t\tthis.source.connect( this.filters[ 0 ] );\n\n    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n    \t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n    \t\t\t}\n\n    \t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n    \t\t} else {\n\n    \t\t\tthis.source.connect( this.getOutput() );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tdisconnect: function () {\n\n    \t\tif ( this.filters.length > 0 ) {\n\n    \t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n    \t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n    \t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n    \t\t\t}\n\n    \t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n    \t\t} else {\n\n    \t\t\tthis.source.disconnect( this.getOutput() );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetFilters: function () {\n\n    \t\treturn this.filters;\n\n    \t},\n\n    \tsetFilters: function ( value ) {\n\n    \t\tif ( ! value ) value = [];\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tthis.disconnect();\n    \t\t\tthis.filters = value;\n    \t\t\tthis.connect();\n\n    \t\t} else {\n\n    \t\t\tthis.filters = value;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetFilter: function () {\n\n    \t\treturn this.getFilters()[ 0 ];\n\n    \t},\n\n    \tsetFilter: function ( filter ) {\n\n    \t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n    \t},\n\n    \tsetPlaybackRate: function ( value ) {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.playbackRate = value;\n\n    \t\tif ( this.isPlaying === true ) {\n\n    \t\t\tthis.source.playbackRate.value = this.playbackRate;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetPlaybackRate: function () {\n\n    \t\treturn this.playbackRate;\n\n    \t},\n\n    \tonEnded: function () {\n\n    \t\tthis.isPlaying = false;\n\n    \t},\n\n    \tgetLoop: function () {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn false;\n\n    \t\t}\n\n    \t\treturn this.source.loop;\n\n    \t},\n\n    \tsetLoop: function ( value ) {\n\n    \t\tif ( this.hasPlaybackControl === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tthis.source.loop = value;\n\n    \t},\n\n    \tgetVolume: function () {\n\n    \t\treturn this.gain.gain.value;\n\n    \t},\n\n\n    \tsetVolume: function ( value ) {\n\n    \t\tthis.gain.gain.value = value;\n\n    \t\treturn this;\n\n    \t}\n\n    } );\n\n    function PositionalAudio( listener ) {\n\n    \tAudio.call( this, listener );\n\n    \tthis.panner = this.context.createPanner();\n    \tthis.panner.connect( this.gain );\n\n    }\n\n    PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n    \tconstructor: PositionalAudio,\n\n    \tgetOutput: function () {\n\n    \t\treturn this.panner;\n\n    \t},\n\n    \tgetRefDistance: function () {\n\n    \t\treturn this.panner.refDistance;\n\n    \t},\n\n    \tsetRefDistance: function ( value ) {\n\n    \t\tthis.panner.refDistance = value;\n\n    \t},\n\n    \tgetRolloffFactor: function () {\n\n    \t\treturn this.panner.rolloffFactor;\n\n    \t},\n\n    \tsetRolloffFactor: function ( value ) {\n\n    \t\tthis.panner.rolloffFactor = value;\n\n    \t},\n\n    \tgetDistanceModel: function () {\n\n    \t\treturn this.panner.distanceModel;\n\n    \t},\n\n    \tsetDistanceModel: function ( value ) {\n\n    \t\tthis.panner.distanceModel = value;\n\n    \t},\n\n    \tgetMaxDistance: function () {\n\n    \t\treturn this.panner.maxDistance;\n\n    \t},\n\n    \tsetMaxDistance: function ( value ) {\n\n    \t\tthis.panner.maxDistance = value;\n\n    \t},\n\n    \tupdateMatrixWorld: ( function () {\n\n    \t\tvar position = new Vector3();\n\n    \t\treturn function updateMatrixWorld( force ) {\n\n    \t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n    \t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n    \t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n    \t\t};\n\n    \t} )()\n\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AudioAnalyser( audio, fftSize ) {\n\n    \tthis.analyser = audio.context.createAnalyser();\n    \tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n    \tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n    \taudio.getOutput().connect( this.analyser );\n\n    }\n\n    Object.assign( AudioAnalyser.prototype, {\n\n    \tgetFrequencyData: function () {\n\n    \t\tthis.analyser.getByteFrequencyData( this.data );\n\n    \t\treturn this.data;\n\n    \t},\n\n    \tgetAverageFrequency: function () {\n\n    \t\tvar value = 0, data = this.getFrequencyData();\n\n    \t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n    \t\t\tvalue += data[ i ];\n\n    \t\t}\n\n    \t\treturn value / data.length;\n\n    \t}\n\n    } );\n\n    /**\n     *\n     * Buffered scene graph property that allows weighted accumulation.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function PropertyMixer( binding, typeName, valueSize ) {\n\n    \tthis.binding = binding;\n    \tthis.valueSize = valueSize;\n\n    \tvar bufferType = Float64Array,\n    \t\tmixFunction;\n\n    \tswitch ( typeName ) {\n\n    \t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\n    \t\tcase 'string':\n    \t\tcase 'bool':\n\n    \t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\n    \t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\n    \t}\n\n    \tthis.buffer = new bufferType( valueSize * 4 );\n    \t// layout: [ incoming | accu0 | accu1 | orig ]\n    \t//\n    \t// interpolators can use .buffer as their .result\n    \t// the data then goes to 'incoming'\n    \t//\n    \t// 'accu0' and 'accu1' are used frame-interleaved for\n    \t// the cumulative result and are compared to detect\n    \t// changes\n    \t//\n    \t// 'orig' stores the original state of the property\n\n    \tthis._mixBufferRegion = mixFunction;\n\n    \tthis.cumulativeWeight = 0;\n\n    \tthis.useCount = 0;\n    \tthis.referenceCount = 0;\n\n    }\n\n    PropertyMixer.prototype = {\n\n    \tconstructor: PropertyMixer,\n\n    \t// accumulate data in the 'incoming' region into 'accu<i>'\n    \taccumulate: function( accuIndex, weight ) {\n\n    \t\t// note: happily accumulating nothing when weight = 0, the caller knows\n    \t\t// the weight and shouldn't have made the call in the first place\n\n    \t\tvar buffer = this.buffer,\n    \t\t\tstride = this.valueSize,\n    \t\t\toffset = accuIndex * stride + stride,\n\n    \t\t\tcurrentWeight = this.cumulativeWeight;\n\n    \t\tif ( currentWeight === 0 ) {\n\n    \t\t\t// accuN := incoming * weight\n\n    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n    \t\t\t}\n\n    \t\t\tcurrentWeight = weight;\n\n    \t\t} else {\n\n    \t\t\t// accuN := accuN + incoming * weight\n\n    \t\t\tcurrentWeight += weight;\n    \t\t\tvar mix = weight / currentWeight;\n    \t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n    \t\t}\n\n    \t\tthis.cumulativeWeight = currentWeight;\n\n    \t},\n\n    \t// apply the state of 'accu<i>' to the binding when accus differ\n    \tapply: function( accuIndex ) {\n\n    \t\tvar stride = this.valueSize,\n    \t\t\tbuffer = this.buffer,\n    \t\t\toffset = accuIndex * stride + stride,\n\n    \t\t\tweight = this.cumulativeWeight,\n\n    \t\t\tbinding = this.binding;\n\n    \t\tthis.cumulativeWeight = 0;\n\n    \t\tif ( weight < 1 ) {\n\n    \t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n    \t\t\tvar originalValueOffset = stride * 3;\n\n    \t\t\tthis._mixBufferRegion(\n    \t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n    \t\t}\n\n    \t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n    \t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n    \t\t\t\t// value has changed -> update scene graph\n\n    \t\t\t\tbinding.setValue( buffer, offset );\n    \t\t\t\tbreak;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t// remember the state of the bound property and copy it to both accus\n    \tsaveOriginalState: function() {\n\n    \t\tvar binding = this.binding;\n\n    \t\tvar buffer = this.buffer,\n    \t\t\tstride = this.valueSize,\n\n    \t\t\toriginalValueOffset = stride * 3;\n\n    \t\tbinding.getValue( buffer, originalValueOffset );\n\n    \t\t// accu[0..1] := orig -- initially detect changes against the original\n    \t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n    \t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n    \t\t}\n\n    \t\tthis.cumulativeWeight = 0;\n\n    \t},\n\n    \t// apply the state previously taken via 'saveOriginalState' to the binding\n    \trestoreOriginalState: function() {\n\n    \t\tvar originalValueOffset = this.valueSize * 3;\n    \t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n    \t},\n\n\n    \t// mix functions\n\n    \t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tif ( t >= 0.5 ) {\n\n    \t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tQuaternion.slerpFlat( buffer, dstOffset,\n    \t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\n    \t},\n\n    \t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n    \t\tvar s = 1 - t;\n\n    \t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n    \t\t\tvar j = dstOffset + i;\n\n    \t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     *\n     * A reference to a real property in the scene graph.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function PropertyBinding( rootNode, path, parsedPath ) {\n\n    \tthis.path = path;\n    \tthis.parsedPath = parsedPath ||\n    \t\t\tPropertyBinding.parseTrackName( path );\n\n    \tthis.node = PropertyBinding.findNode(\n    \t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\n    \tthis.rootNode = rootNode;\n\n    }\n\n    PropertyBinding.prototype = {\n\n    \tconstructor: PropertyBinding,\n\n    \tgetValue: function getValue_unbound( targetArray, offset ) {\n\n    \t\tthis.bind();\n    \t\tthis.getValue( targetArray, offset );\n\n    \t\t// Note: This class uses a State pattern on a per-method basis:\n    \t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n    \t\t// prototype version of these methods with one that represents\n    \t\t// the bound state. When the property is not found, the methods\n    \t\t// become no-ops.\n\n    \t},\n\n    \tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n    \t\tthis.bind();\n    \t\tthis.setValue( sourceArray, offset );\n\n    \t},\n\n    \t// create getter / setter pair for a property in the scene graph\n    \tbind: function() {\n\n    \t\tvar targetObject = this.node,\n    \t\t\tparsedPath = this.parsedPath,\n\n    \t\t\tobjectName = parsedPath.objectName,\n    \t\t\tpropertyName = parsedPath.propertyName,\n    \t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n    \t\tif ( ! targetObject ) {\n\n    \t\t\ttargetObject = PropertyBinding.findNode(\n    \t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n    \t\t\tthis.node = targetObject;\n\n    \t\t}\n\n    \t\t// set fail state so we can just 'return' on error\n    \t\tthis.getValue = this._getValue_unavailable;\n    \t\tthis.setValue = this._setValue_unavailable;\n\n     \t\t// ensure there is a value node\n    \t\tif ( ! targetObject ) {\n\n    \t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\tif ( objectName ) {\n\n    \t\t\tvar objectIndex = parsedPath.objectIndex;\n\n    \t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n    \t\t\tswitch ( objectName ) {\n\n    \t\t\t\tcase 'materials':\n\n    \t\t\t\t\tif ( ! targetObject.material ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttargetObject = targetObject.material.materials;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 'bones':\n\n    \t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n    \t\t\t\t\t// and convert the integer string to a true integer.\n\n    \t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n    \t\t\t\t\t// support resolving morphTarget names into indices.\n    \t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n    \t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n    \t\t\t\t\t\t\tobjectIndex = i;\n    \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t}\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tdefault:\n\n    \t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n    \t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n    \t\t\t\t\t\treturn;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n    \t\t\t}\n\n\n    \t\t\tif ( objectIndex !== undefined ) {\n\n    \t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n    \t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// resolve property\n    \t\tvar nodeProperty = targetObject[ propertyName ];\n\n    \t\tif ( nodeProperty === undefined ) {\n\n    \t\t\tvar nodeName = parsedPath.nodeName;\n\n    \t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n    \t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n    \t\t\treturn;\n\n    \t\t}\n\n    \t\t// determine versioning scheme\n    \t\tvar versioning = this.Versioning.None;\n\n    \t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n    \t\t\tversioning = this.Versioning.NeedsUpdate;\n    \t\t\tthis.targetObject = targetObject;\n\n    \t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n    \t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n    \t\t\tthis.targetObject = targetObject;\n\n    \t\t}\n\n    \t\t// determine how the property gets bound\n    \t\tvar bindingType = this.BindingType.Direct;\n\n    \t\tif ( propertyIndex !== undefined ) {\n    \t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n    \t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n    \t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n    \t\t\t\t// support resolving morphTarget names into indices.\n    \t\t\t\tif ( ! targetObject.geometry ) {\n\n    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n    \t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n    \t\t\t\t\treturn;\n\n    \t\t\t\t}\n\n    \t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n    \t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n    \t\t\t\t\t\tpropertyIndex = i;\n    \t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tbindingType = this.BindingType.ArrayElement;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n    \t\t\tthis.propertyIndex = propertyIndex;\n\n    \t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n    \t\t\t// must use copy for Object3D.Euler/Quaternion\n\n    \t\t\tbindingType = this.BindingType.HasFromToArray;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n\n    \t\t} else if ( nodeProperty.length !== undefined ) {\n\n    \t\t\tbindingType = this.BindingType.EntireArray;\n\n    \t\t\tthis.resolvedProperty = nodeProperty;\n\n    \t\t} else {\n\n    \t\t\tthis.propertyName = propertyName;\n\n    \t\t}\n\n    \t\t// select getter / setter\n    \t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n    \t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n    \t},\n\n    \tunbind: function() {\n\n    \t\tthis.node = null;\n\n    \t\t// back to the prototype version of getValue / setValue\n    \t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n    \t\tthis.getValue = this._getValue_unbound;\n    \t\tthis.setValue = this._setValue_unbound;\n\n    \t}\n\n    };\n\n    Object.assign( PropertyBinding.prototype, { // prototype, continued\n\n    \t// these are used to \"bind\" a nonexistent property\n    \t_getValue_unavailable: function() {},\n    \t_setValue_unavailable: function() {},\n\n    \t// initial state of these methods that calls 'bind'\n    \t_getValue_unbound: PropertyBinding.prototype.getValue,\n    \t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n    \tBindingType: {\n    \t\tDirect: 0,\n    \t\tEntireArray: 1,\n    \t\tArrayElement: 2,\n    \t\tHasFromToArray: 3\n    \t},\n\n    \tVersioning: {\n    \t\tNone: 0,\n    \t\tNeedsUpdate: 1,\n    \t\tMatrixWorldNeedsUpdate: 2\n    \t},\n\n    \tGetterByBindingType: [\n\n    \t\tfunction getValue_direct( buffer, offset ) {\n\n    \t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n    \t\t},\n\n    \t\tfunction getValue_array( buffer, offset ) {\n\n    \t\t\tvar source = this.resolvedProperty;\n\n    \t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n    \t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n    \t\t\t}\n\n    \t\t},\n\n    \t\tfunction getValue_arrayElement( buffer, offset ) {\n\n    \t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n    \t\t},\n\n    \t\tfunction getValue_toArray( buffer, offset ) {\n\n    \t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n    \t\t}\n\n    \t],\n\n    \tSetterByBindingTypeAndVersioning: [\n\n    \t\t[\n    \t\t\t// Direct\n\n    \t\t\tfunction setValue_direct( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// EntireArray\n\n    \t\t\tfunction setValue_array( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tvar dest = this.resolvedProperty;\n\n    \t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n    \t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n    \t\t\t\t}\n\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// ArrayElement\n\n    \t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t], [\n\n    \t\t\t// HasToFromArray\n\n    \t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n    \t\t\t\tthis.targetObject.needsUpdate = true;\n\n    \t\t\t},\n\n    \t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n    \t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n    \t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n    \t\t\t}\n\n    \t\t]\n\n    \t]\n\n    } );\n\n    PropertyBinding.Composite =\n    \t\tfunction( targetGroup, path, optionalParsedPath ) {\n\n    \tvar parsedPath = optionalParsedPath ||\n    \t\t\tPropertyBinding.parseTrackName( path );\n\n    \tthis._targetGroup = targetGroup;\n    \tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n    };\n\n    PropertyBinding.Composite.prototype = {\n\n    \tconstructor: PropertyBinding.Composite,\n\n    \tgetValue: function( array, offset ) {\n\n    \t\tthis.bind(); // bind all binding\n\n    \t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n    \t\t\tbinding = this._bindings[ firstValidIndex ];\n\n    \t\t// and only call .getValue on the first\n    \t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n    \t},\n\n    \tsetValue: function( array, offset ) {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].setValue( array, offset );\n\n    \t\t}\n\n    \t},\n\n    \tbind: function() {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].bind();\n\n    \t\t}\n\n    \t},\n\n    \tunbind: function() {\n\n    \t\tvar bindings = this._bindings;\n\n    \t\tfor ( var i = this._targetGroup.nCachedObjects_,\n    \t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tbindings[ i ].unbind();\n\n    \t\t}\n\n    \t}\n\n    };\n\n    PropertyBinding.create = function( root, path, parsedPath ) {\n\n    \tif ( ! ( (root && root.isAnimationObjectGroup) ) ) {\n\n    \t\treturn new PropertyBinding( root, path, parsedPath );\n\n    \t} else {\n\n    \t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n    \t}\n\n    };\n\n    PropertyBinding.parseTrackName = function( trackName ) {\n\n    \t// matches strings in the form of:\n    \t//    nodeName.property\n    \t//    nodeName.property[accessor]\n    \t//    nodeName.material.property[accessor]\n    \t//    uuid.property[accessor]\n    \t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n    \t//    parentName/nodeName.property\n    \t//    parentName/parentName/nodeName.property[index]\n    \t//    .bone[Armature.DEF_cog].position\n    \t//    scene:helium_balloon_model:helium_balloon_model.position\n    \t// created and tested via https://regex101.com/#javascript\n\n    \tvar re = /^((?:\\w+[\\/:])*)(\\w+)?(?:\\.(\\w+)(?:\\[(.+)\\])?)?\\.(\\w+)(?:\\[(.+)\\])?$/;\n    \tvar matches = re.exec( trackName );\n\n    \tif ( ! matches ) {\n\n    \t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\n    \t}\n\n    \tvar results = {\n    \t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n    \t\tnodeName: matches[ 2 ], \t// allowed to be null, specified root node.\n    \t\tobjectName: matches[ 3 ],\n    \t\tobjectIndex: matches[ 4 ],\n    \t\tpropertyName: matches[ 5 ],\n    \t\tpropertyIndex: matches[ 6 ]\t// allowed to be null, specifies that the whole property is set.\n    \t};\n\n    \tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n    \t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\n    \t}\n\n    \treturn results;\n\n    };\n\n    PropertyBinding.findNode = function( root, nodeName ) {\n\n    \tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n    \t\treturn root;\n\n    \t}\n\n    \t// search into skeleton bones.\n    \tif ( root.skeleton ) {\n\n    \t\tvar searchSkeleton = function( skeleton ) {\n\n    \t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n    \t\t\t\tvar bone = skeleton.bones[ i ];\n\n    \t\t\t\tif ( bone.name === nodeName ) {\n\n    \t\t\t\t\treturn bone;\n\n    \t\t\t\t}\n    \t\t\t}\n\n    \t\t\treturn null;\n\n    \t\t};\n\n    \t\tvar bone = searchSkeleton( root.skeleton );\n\n    \t\tif ( bone ) {\n\n    \t\t\treturn bone;\n\n    \t\t}\n    \t}\n\n    \t// search into node subtree.\n    \tif ( root.children ) {\n\n    \t\tvar searchNodeSubtree = function( children ) {\n\n    \t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\n    \t\t\t\tvar childNode = children[ i ];\n\n    \t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n    \t\t\t\t\treturn childNode;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n    \t\t\t\tif ( result ) return result;\n\n    \t\t\t}\n\n    \t\t\treturn null;\n\n    \t\t};\n\n    \t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n    \t\tif ( subTreeNode ) {\n\n    \t\t\treturn subTreeNode;\n\n    \t\t}\n\n    \t}\n\n    \treturn null;\n\n    };\n\n    /**\n     *\n     * A group of objects that receives a shared animation state.\n     *\n     * Usage:\n     *\n     * \t-\tAdd objects you would otherwise pass as 'root' to the\n     * \t\tconstructor or the .clipAction method of AnimationMixer.\n     *\n     * \t-\tInstead pass this object as 'root'.\n     *\n     * \t-\tYou can also add and remove objects later when the mixer\n     * \t\tis running.\n     *\n     * Note:\n     *\n     *  \tObjects of this class appear as one object to the mixer,\n     *  \tso cache control of the individual objects must be done\n     *  \ton the group.\n     *\n     * Limitation:\n     *\n     * \t- \tThe animated properties must be compatible among the\n     * \t\tall objects in the group.\n     *\n     *  -\tA single property can either be controlled through a\n     *  \ttarget group or directly, but not both.\n     *\n     * @author tschw\n     */\n\n    function AnimationObjectGroup( var_args ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \t// cached objects followed by the active ones\n    \tthis._objects = Array.prototype.slice.call( arguments );\n\n    \tthis.nCachedObjects_ = 0;\t\t\t// threshold\n    \t// note: read by PropertyBinding.Composite\n\n    \tvar indices = {};\n    \tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n    \tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\tindices[ arguments[ i ].uuid ] = i;\n\n    \t}\n\n    \tthis._paths = [];\t\t\t\t\t// inside: string\n    \tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n    \tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n    \tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n    \tvar scope = this;\n\n    \tthis.stats = {\n\n    \t\tobjects: {\n    \t\t\tget total() { return scope._objects.length; },\n    \t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n    \t\t},\n\n    \t\tget bindingsPerObject() { return scope._bindings.length; }\n\n    \t};\n\n    }\n\n    AnimationObjectGroup.prototype = {\n\n    \tconstructor: AnimationObjectGroup,\n\n    \tisAnimationObjectGroup: true,\n\n    \tadd: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tpaths = this._paths,\n    \t\t\tparsedPaths = this._parsedPaths,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index === undefined ) {\n\n    \t\t\t\t// unknown object -> add it to the ACTIVE region\n\n    \t\t\t\tindex = nObjects ++;\n    \t\t\t\tindicesByUUID[ uuid ] = index;\n    \t\t\t\tobjects.push( object );\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tbindings[ j ].push(\n    \t\t\t\t\t\t\tnew PropertyBinding(\n    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( index < nCachedObjects ) {\n\n    \t\t\t\tvar knownObject = objects[ index ];\n\n    \t\t\t\t// move existing object to the ACTIVE region\n\n    \t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n    \t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n    \t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n    \t\t\t\tobjects[ index ] = lastCachedObject;\n\n    \t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n    \t\t\t\tobjects[ firstActiveIndex ] = object;\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n    \t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n    \t\t\t\t\tif ( binding === undefined ) {\n\n    \t\t\t\t\t\t// since we do not bother to create new bindings\n    \t\t\t\t\t\t// for objects that are cached, the binding may\n    \t\t\t\t\t\t// or may not exist\n\n    \t\t\t\t\t\tbinding = new PropertyBinding(\n    \t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n    \t\t\t\t}\n\n    \t\t\t} else if ( objects[ index ] !== knownObject) {\n\n    \t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n    \t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n    \t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\n    \t\t\t} // else the object is already where we want it to be\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \tremove: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n    \t\t\t\t// move existing object into the CACHED region\n\n    \t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n    \t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n    \t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n    \t\t\t\tobjects[ index ] = firstActiveObject;\n\n    \t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n    \t\t\t\tobjects[ lastCachedIndex ] = object;\n\n    \t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n    \t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n    \t\t\t\t\tbindingsForPath[ index ] = firstActive;\n    \t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \t// remove & forget\n    \tuncache: function( var_args ) {\n\n    \t\tvar objects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tindicesByUUID = this._indicesByUUID,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = bindings.length;\n\n    \t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = arguments[ i ],\n    \t\t\t\tuuid = object.uuid,\n    \t\t\t\tindex = indicesByUUID[ uuid ];\n\n    \t\t\tif ( index !== undefined ) {\n\n    \t\t\t\tdelete indicesByUUID[ uuid ];\n\n    \t\t\t\tif ( index < nCachedObjects ) {\n\n    \t\t\t\t\t// object is cached, shrink the CACHED region\n\n    \t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n    \t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n    \t\t\t\t\t\tlastIndex = -- nObjects,\n    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n    \t\t\t\t\t// last cached object takes this object's place\n    \t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n    \t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n    \t\t\t\t\t// last object goes to the activated slot and pop\n    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n    \t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n    \t\t\t\t\tobjects.pop();\n\n    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n    \t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n    \t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n    \t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n    \t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n    \t\t\t\t\t\tbindingsForPath.pop();\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// object is active, just swap with the last and pop\n\n    \t\t\t\t\tvar lastIndex = -- nObjects,\n    \t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n    \t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n    \t\t\t\t\tobjects[ index ] = lastObject;\n    \t\t\t\t\tobjects.pop();\n\n    \t\t\t\t\t// accounting is done, now do the same for all bindings\n\n    \t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n    \t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n    \t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n    \t\t\t\t\t\tbindingsForPath.pop();\n\n    \t\t\t\t\t}\n\n    \t\t\t\t} // cached or active\n\n    \t\t\t} // if object is known\n\n    \t\t} // for arguments\n\n    \t\tthis.nCachedObjects_ = nCachedObjects;\n\n    \t},\n\n    \t// Internal interface used by befriended PropertyBinding.Composite:\n\n    \tsubscribe_: function( path, parsedPath ) {\n    \t\t// returns an array of bindings for the given path that is changed\n    \t\t// according to the contained objects in the group\n\n    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n    \t\t\tindex = indicesByPath[ path ],\n    \t\t\tbindings = this._bindings;\n\n    \t\tif ( index !== undefined ) return bindings[ index ];\n\n    \t\tvar paths = this._paths,\n    \t\t\tparsedPaths = this._parsedPaths,\n    \t\t\tobjects = this._objects,\n    \t\t\tnObjects = objects.length,\n    \t\t\tnCachedObjects = this.nCachedObjects_,\n    \t\t\tbindingsForPath = new Array( nObjects );\n\n    \t\tindex = bindings.length;\n\n    \t\tindicesByPath[ path ] = index;\n\n    \t\tpaths.push( path );\n    \t\tparsedPaths.push( parsedPath );\n    \t\tbindings.push( bindingsForPath );\n\n    \t\tfor ( var i = nCachedObjects,\n    \t\t\t\tn = objects.length; i !== n; ++ i ) {\n\n    \t\t\tvar object = objects[ i ];\n\n    \t\t\tbindingsForPath[ i ] =\n    \t\t\t\t\tnew PropertyBinding( object, path, parsedPath );\n\n    \t\t}\n\n    \t\treturn bindingsForPath;\n\n    \t},\n\n    \tunsubscribe_: function( path ) {\n    \t\t// tells the group to forget about a property path and no longer\n    \t\t// update the array previously obtained with 'subscribe_'\n\n    \t\tvar indicesByPath = this._bindingsIndicesByPath,\n    \t\t\tindex = indicesByPath[ path ];\n\n    \t\tif ( index !== undefined ) {\n\n    \t\t\tvar paths = this._paths,\n    \t\t\t\tparsedPaths = this._parsedPaths,\n    \t\t\t\tbindings = this._bindings,\n    \t\t\t\tlastBindingsIndex = bindings.length - 1,\n    \t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n    \t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n    \t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n    \t\t\tbindings[ index ] = lastBindings;\n    \t\t\tbindings.pop();\n\n    \t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n    \t\t\tparsedPaths.pop();\n\n    \t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n    \t\t\tpaths.pop();\n\n    \t\t}\n\n    \t}\n\n    };\n\n    /**\n     *\n     * Action provided by AnimationMixer for scheduling clip playback on specific\n     * objects.\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     *\n     */\n\n    function AnimationAction( mixer, clip, localRoot ) {\n\n    \tthis._mixer = mixer;\n    \tthis._clip = clip;\n    \tthis._localRoot = localRoot || null;\n\n    \tvar tracks = clip.tracks,\n    \t\tnTracks = tracks.length,\n    \t\tinterpolants = new Array( nTracks );\n\n    \tvar interpolantSettings = {\n    \t\t\tendingStart: \tZeroCurvatureEnding,\n    \t\t\tendingEnd:\t\tZeroCurvatureEnding\n    \t};\n\n    \tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n    \t\tvar interpolant = tracks[ i ].createInterpolant( null );\n    \t\tinterpolants[ i ] = interpolant;\n    \t\tinterpolant.settings = interpolantSettings;\n\n    \t}\n\n    \tthis._interpolantSettings = interpolantSettings;\n\n    \tthis._interpolants = interpolants;\t// bound by the mixer\n\n    \t// inside: PropertyMixer (managed by the mixer)\n    \tthis._propertyBindings = new Array( nTracks );\n\n    \tthis._cacheIndex = null;\t\t\t// for the memory manager\n    \tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n    \tthis._timeScaleInterpolant = null;\n    \tthis._weightInterpolant = null;\n\n    \tthis.loop = LoopRepeat;\n    \tthis._loopCount = -1;\n\n    \t// global mixer time when the action is to be started\n    \t// it's set back to 'null' upon start of the action\n    \tthis._startTime = null;\n\n    \t// scaled local time of the action\n    \t// gets clamped or wrapped to 0..clip.duration according to loop\n    \tthis.time = 0;\n\n    \tthis.timeScale = 1;\n    \tthis._effectiveTimeScale = 1;\n\n    \tthis.weight = 1;\n    \tthis._effectiveWeight = 1;\n\n    \tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n    \tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n    \tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\n    \tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n    \tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n    \tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n    };\n\n    AnimationAction.prototype = {\n\n    \tconstructor: AnimationAction,\n\n    \t// State & Scheduling\n\n    \tplay: function() {\n\n    \t\tthis._mixer._activateAction( this );\n\n    \t\treturn this;\n\n    \t},\n\n    \tstop: function() {\n\n    \t\tthis._mixer._deactivateAction( this );\n\n    \t\treturn this.reset();\n\n    \t},\n\n    \treset: function() {\n\n    \t\tthis.paused = false;\n    \t\tthis.enabled = true;\n\n    \t\tthis.time = 0;\t\t\t// restart clip\n    \t\tthis._loopCount = -1;\t// forget previous loops\n    \t\tthis._startTime = null;\t// forget scheduling\n\n    \t\treturn this.stopFading().stopWarping();\n\n    \t},\n\n    \tisRunning: function() {\n\n    \t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n    \t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n    \t},\n\n    \t// return true when play has been called\n    \tisScheduled: function() {\n\n    \t\treturn this._mixer._isActiveAction( this );\n\n    \t},\n\n    \tstartAt: function( time ) {\n\n    \t\tthis._startTime = time;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetLoop: function( mode, repetitions ) {\n\n    \t\tthis.loop = mode;\n    \t\tthis.repetitions = repetitions;\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Weight\n\n    \t// set the weight stopping any scheduled fading\n    \t// although .enabled = false yields an effective weight of zero, this\n    \t// method does *not* change .enabled, because it would be confusing\n    \tsetEffectiveWeight: function( weight ) {\n\n    \t\tthis.weight = weight;\n\n    \t\t// note: same logic as when updated at runtime\n    \t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n    \t\treturn this.stopFading();\n\n    \t},\n\n    \t// return the weight considering fading and .enabled\n    \tgetEffectiveWeight: function() {\n\n    \t\treturn this._effectiveWeight;\n\n    \t},\n\n    \tfadeIn: function( duration ) {\n\n    \t\treturn this._scheduleFading( duration, 0, 1 );\n\n    \t},\n\n    \tfadeOut: function( duration ) {\n\n    \t\treturn this._scheduleFading( duration, 1, 0 );\n\n    \t},\n\n    \tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\n    \t\tfadeOutAction.fadeOut( duration );\n    \t\tthis.fadeIn( duration );\n\n    \t\tif( warp ) {\n\n    \t\t\tvar fadeInDuration = this._clip.duration,\n    \t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n    \t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n    \t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n    \t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n    \t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\n    \t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n    \t},\n\n    \tstopFading: function() {\n\n    \t\tvar weightInterpolant = this._weightInterpolant;\n\n    \t\tif ( weightInterpolant !== null ) {\n\n    \t\t\tthis._weightInterpolant = null;\n    \t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Time Scale Control\n\n    \t// set the weight stopping any scheduled warping\n    \t// although .paused = true yields an effective time scale of zero, this\n    \t// method does *not* change .paused, because it would be confusing\n    \tsetEffectiveTimeScale: function( timeScale ) {\n\n    \t\tthis.timeScale = timeScale;\n    \t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \t// return the time scale considering warping and .paused\n    \tgetEffectiveTimeScale: function() {\n\n    \t\treturn this._effectiveTimeScale;\n\n    \t},\n\n    \tsetDuration: function( duration ) {\n\n    \t\tthis.timeScale = this._clip.duration / duration;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \tsyncWith: function( action ) {\n\n    \t\tthis.time = action.time;\n    \t\tthis.timeScale = action.timeScale;\n\n    \t\treturn this.stopWarping();\n\n    \t},\n\n    \thalt: function( duration ) {\n\n    \t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n    \t},\n\n    \twarp: function( startTimeScale, endTimeScale, duration ) {\n\n    \t\tvar mixer = this._mixer, now = mixer.time,\n    \t\t\tinterpolant = this._timeScaleInterpolant,\n\n    \t\t\ttimeScale = this.timeScale;\n\n    \t\tif ( interpolant === null ) {\n\n    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n    \t\t\tthis._timeScaleInterpolant = interpolant;\n\n    \t\t}\n\n    \t\tvar times = interpolant.parameterPositions,\n    \t\t\tvalues = interpolant.sampleValues;\n\n    \t\ttimes[ 0 ] = now;\n    \t\ttimes[ 1 ] = now + duration;\n\n    \t\tvalues[ 0 ] = startTimeScale / timeScale;\n    \t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n    \t\treturn this;\n\n    \t},\n\n    \tstopWarping: function() {\n\n    \t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n    \t\tif ( timeScaleInterpolant !== null ) {\n\n    \t\t\tthis._timeScaleInterpolant = null;\n    \t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// Object Accessors\n\n    \tgetMixer: function() {\n\n    \t\treturn this._mixer;\n\n    \t},\n\n    \tgetClip: function() {\n\n    \t\treturn this._clip;\n\n    \t},\n\n    \tgetRoot: function() {\n\n    \t\treturn this._localRoot || this._mixer._root;\n\n    \t},\n\n    \t// Interna\n\n    \t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n    \t\t// called by the mixer\n\n    \t\tvar startTime = this._startTime;\n\n    \t\tif ( startTime !== null ) {\n\n    \t\t\t// check for scheduled start of action\n\n    \t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n    \t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n    \t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n    \t\t\t}\n\n    \t\t\t// start\n\n    \t\t\tthis._startTime = null; // unschedule\n    \t\t\tdeltaTime = timeDirection * timeRunning;\n\n    \t\t}\n\n    \t\t// apply time scale and advance time\n\n    \t\tdeltaTime *= this._updateTimeScale( time );\n    \t\tvar clipTime = this._updateTime( deltaTime );\n\n    \t\t// note: _updateTime may disable the action resulting in\n    \t\t// an effective weight of 0\n\n    \t\tvar weight = this._updateWeight( time );\n\n    \t\tif ( weight > 0 ) {\n\n    \t\t\tvar interpolants = this._interpolants;\n    \t\t\tvar propertyMixers = this._propertyBindings;\n\n    \t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n    \t\t\t\tinterpolants[ j ].evaluate( clipTime );\n    \t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_updateWeight: function( time ) {\n\n    \t\tvar weight = 0;\n\n    \t\tif ( this.enabled ) {\n\n    \t\t\tweight = this.weight;\n    \t\t\tvar interpolant = this._weightInterpolant;\n\n    \t\t\tif ( interpolant !== null ) {\n\n    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n    \t\t\t\tweight *= interpolantValue;\n\n    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n    \t\t\t\t\tthis.stopFading();\n\n    \t\t\t\t\tif ( interpolantValue === 0 ) {\n\n    \t\t\t\t\t\t// faded out, disable\n    \t\t\t\t\t\tthis.enabled = false;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis._effectiveWeight = weight;\n    \t\treturn weight;\n\n    \t},\n\n    \t_updateTimeScale: function( time ) {\n\n    \t\tvar timeScale = 0;\n\n    \t\tif ( ! this.paused ) {\n\n    \t\t\ttimeScale = this.timeScale;\n\n    \t\t\tvar interpolant = this._timeScaleInterpolant;\n\n    \t\t\tif ( interpolant !== null ) {\n\n    \t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n    \t\t\t\ttimeScale *= interpolantValue;\n\n    \t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n    \t\t\t\t\tthis.stopWarping();\n\n    \t\t\t\t\tif ( timeScale === 0 ) {\n\n    \t\t\t\t\t\t// motion has halted, pause\n    \t\t\t\t\t\tthis.paused = true;\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\t// warp done - apply final time scale\n    \t\t\t\t\t\tthis.timeScale = timeScale;\n\n    \t\t\t\t\t}\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis._effectiveTimeScale = timeScale;\n    \t\treturn timeScale;\n\n    \t},\n\n    \t_updateTime: function( deltaTime ) {\n\n    \t\tvar time = this.time + deltaTime;\n\n    \t\tif ( deltaTime === 0 ) return time;\n\n    \t\tvar duration = this._clip.duration,\n\n    \t\t\tloop = this.loop,\n    \t\t\tloopCount = this._loopCount;\n\n    \t\tif ( loop === LoopOnce ) {\n\n    \t\t\tif ( loopCount === -1 ) {\n    \t\t\t\t// just started\n\n    \t\t\t\tthis.loopCount = 0;\n    \t\t\t\tthis._setEndings( true, true, false );\n\n    \t\t\t}\n\n    \t\t\thandle_stop: {\n\n    \t\t\t\tif ( time >= duration ) {\n\n    \t\t\t\t\ttime = duration;\n\n    \t\t\t\t} else if ( time < 0 ) {\n\n    \t\t\t\t\ttime = 0;\n\n    \t\t\t\t} else break handle_stop;\n\n    \t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n    \t\t\t\telse this.enabled = false;\n\n    \t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\ttype: 'finished', action: this,\n    \t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n    \t\t\t\t} );\n\n    \t\t\t}\n\n    \t\t} else { // repetitive Repeat or PingPong\n\n    \t\t\tvar pingPong = ( loop === LoopPingPong );\n\n    \t\t\tif ( loopCount === -1 ) {\n    \t\t\t\t// just started\n\n    \t\t\t\tif ( deltaTime >= 0 ) {\n\n    \t\t\t\t\tloopCount = 0;\n\n    \t\t\t\t\tthis._setEndings(\n    \t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\n    \t\t\t\t} else {\n\n    \t\t\t\t\t// when looping in reverse direction, the initial\n    \t\t\t\t\t// transition through zero counts as a repetition,\n    \t\t\t\t\t// so leave loopCount at -1\n\n    \t\t\t\t\tthis._setEndings(\n    \t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( time >= duration || time < 0 ) {\n    \t\t\t\t// wrap around\n\n    \t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n    \t\t\t\ttime -= duration * loopDelta;\n\n    \t\t\t\tloopCount += Math.abs( loopDelta );\n\n    \t\t\t\tvar pending = this.repetitions - loopCount;\n\n    \t\t\t\tif ( pending < 0 ) {\n    \t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n    \t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n    \t\t\t\t\telse this.enabled = false;\n\n    \t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n    \t\t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\t\ttype: 'finished', action: this,\n    \t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n    \t\t\t\t\t} );\n\n    \t\t\t\t} else {\n    \t\t\t\t\t// keep running\n\n    \t\t\t\t\tif ( pending === 0 ) {\n    \t\t\t\t\t\t// entering the last round\n\n    \t\t\t\t\t\tvar atStart = deltaTime < 0;\n    \t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n    \t\t\t\t\t} else {\n\n    \t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tthis._loopCount = loopCount;\n\n    \t\t\t\t\tthis._mixer.dispatchEvent( {\n    \t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n    \t\t\t\t\t} );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n    \t\t\t\t// invert time for the \"pong round\"\n\n    \t\t\t\tthis.time = time;\n    \t\t\t\treturn duration - time;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tthis.time = time;\n    \t\treturn time;\n\n    \t},\n\n    \t_setEndings: function( atStart, atEnd, pingPong ) {\n\n    \t\tvar settings = this._interpolantSettings;\n\n    \t\tif ( pingPong ) {\n\n    \t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n    \t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\n    \t\t} else {\n\n    \t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n    \t\t\tif ( atStart ) {\n\n    \t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n    \t\t\t} else {\n\n    \t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n    \t\t\t}\n\n    \t\t\tif ( atEnd ) {\n\n    \t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n    \t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n    \t\t\t} else {\n\n    \t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_scheduleFading: function( duration, weightNow, weightThen ) {\n\n    \t\tvar mixer = this._mixer, now = mixer.time,\n    \t\t\tinterpolant = this._weightInterpolant;\n\n    \t\tif ( interpolant === null ) {\n\n    \t\t\tinterpolant = mixer._lendControlInterpolant(),\n    \t\t\tthis._weightInterpolant = interpolant;\n\n    \t\t}\n\n    \t\tvar times = interpolant.parameterPositions,\n    \t\t\tvalues = interpolant.sampleValues;\n\n    \t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n    \t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     *\n     * Player for AnimationClips.\n     *\n     *\n     * @author Ben Houston / http://clara.io/\n     * @author David Sarno / http://lighthaus.us/\n     * @author tschw\n     */\n\n    function AnimationMixer( root ) {\n\n    \tthis._root = root;\n    \tthis._initMemoryManager();\n    \tthis._accuIndex = 0;\n\n    \tthis.time = 0;\n\n    \tthis.timeScale = 1.0;\n\n    }\n\n    Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {\n\n    \t// return an action for a clip optionally using a custom root target\n    \t// object (this method allocates a lot of dynamic memory in case a\n    \t// previously unknown clip/root combination is specified)\n    \tclipAction: function( clip, optionalRoot ) {\n\n    \t\tvar root = optionalRoot || this._root,\n    \t\t\trootUuid = root.uuid,\n\n    \t\t\tclipObject = typeof clip === 'string' ?\n    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n    \t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n    \t\t\tprototypeAction = null;\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\tvar existingAction =\n    \t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n    \t\t\tif ( existingAction !== undefined ) {\n\n    \t\t\t\treturn existingAction;\n\n    \t\t\t}\n\n    \t\t\t// we know the clip, so we don't have to parse all\n    \t\t\t// the bindings again but can just copy\n    \t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n    \t\t\t// also, take the clip from the prototype action\n    \t\t\tif ( clipObject === null )\n    \t\t\t\tclipObject = prototypeAction._clip;\n\n    \t\t}\n\n    \t\t// clip must be known when specified via string\n    \t\tif ( clipObject === null ) return null;\n\n    \t\t// allocate all resources required to run it\n    \t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n    \t\tthis._bindAction( newAction, prototypeAction );\n\n    \t\t// and make the action known to the memory manager\n    \t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n    \t\treturn newAction;\n\n    \t},\n\n    \t// get an existing action\n    \texistingAction: function( clip, optionalRoot ) {\n\n    \t\tvar root = optionalRoot || this._root,\n    \t\t\trootUuid = root.uuid,\n\n    \t\t\tclipObject = typeof clip === 'string' ?\n    \t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n    \t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n    \t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n    \t\t}\n\n    \t\treturn null;\n\n    \t},\n\n    \t// deactivates all previously scheduled actions\n    \tstopAllAction: function() {\n\n    \t\tvar actions = this._actions,\n    \t\t\tnActions = this._nActiveActions,\n    \t\t\tbindings = this._bindings,\n    \t\t\tnBindings = this._nActiveBindings;\n\n    \t\tthis._nActiveActions = 0;\n    \t\tthis._nActiveBindings = 0;\n\n    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n    \t\t\tactions[ i ].reset();\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n    \t\t\tbindings[ i ].useCount = 0;\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// advance the time and update apply the animation\n    \tupdate: function( deltaTime ) {\n\n    \t\tdeltaTime *= this.timeScale;\n\n    \t\tvar actions = this._actions,\n    \t\t\tnActions = this._nActiveActions,\n\n    \t\t\ttime = this.time += deltaTime,\n    \t\t\ttimeDirection = Math.sign( deltaTime ),\n\n    \t\t\taccuIndex = this._accuIndex ^= 1;\n\n    \t\t// run active actions\n\n    \t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n    \t\t\tvar action = actions[ i ];\n\n    \t\t\tif ( action.enabled ) {\n\n    \t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// update scene graph\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tnBindings = this._nActiveBindings;\n\n    \t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n    \t\t\tbindings[ i ].apply( accuIndex );\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \t// return this mixer's root target object\n    \tgetRoot: function() {\n\n    \t\treturn this._root;\n\n    \t},\n\n    \t// free all resources specific to a particular clip\n    \tuncacheClip: function( clip ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tclipUuid = clip.uuid,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip !== undefined ) {\n\n    \t\t\t// note: just calling _removeInactiveAction would mess up the\n    \t\t\t// iteration state and also require updating the state we can\n    \t\t\t// just throw away\n\n    \t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n    \t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar action = actionsToRemove[ i ];\n\n    \t\t\t\tthis._deactivateAction( action );\n\n    \t\t\t\tvar cacheIndex = action._cacheIndex,\n    \t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n    \t\t\t\taction._cacheIndex = null;\n    \t\t\t\taction._byClipCacheIndex = null;\n\n    \t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n    \t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n    \t\t\t\tactions.pop();\n\n    \t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n    \t\t\t}\n\n    \t\t\tdelete actionsByClip[ clipUuid ];\n\n    \t\t}\n\n    \t},\n\n    \t// free all resources specific to a particular root target object\n    \tuncacheRoot: function( root ) {\n\n    \t\tvar rootUuid = root.uuid,\n    \t\t\tactionsByClip = this._actionsByClip;\n\n    \t\tfor ( var clipUuid in actionsByClip ) {\n\n    \t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n    \t\t\t\taction = actionByRoot[ rootUuid ];\n\n    \t\t\tif ( action !== undefined ) {\n\n    \t\t\t\tthis._deactivateAction( action );\n    \t\t\t\tthis._removeInactiveAction( action );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n    \t\tif ( bindingByName !== undefined ) {\n\n    \t\t\tfor ( var trackName in bindingByName ) {\n\n    \t\t\t\tvar binding = bindingByName[ trackName ];\n    \t\t\t\tbinding.restoreOriginalState();\n    \t\t\t\tthis._removeInactiveBinding( binding );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t// remove a targeted clip from the cache\n    \tuncacheAction: function( clip, optionalRoot ) {\n\n    \t\tvar action = this.existingAction( clip, optionalRoot );\n\n    \t\tif ( action !== null ) {\n\n    \t\t\tthis._deactivateAction( action );\n    \t\t\tthis._removeInactiveAction( action );\n\n    \t\t}\n\n    \t}\n\n    } );\n\n    // Implementation details:\n\n    Object.assign( AnimationMixer.prototype, {\n\n    \t_bindAction: function( action, prototypeAction ) {\n\n    \t\tvar root = action._localRoot || this._root,\n    \t\t\ttracks = action._clip.tracks,\n    \t\t\tnTracks = tracks.length,\n    \t\t\tbindings = action._propertyBindings,\n    \t\t\tinterpolants = action._interpolants,\n    \t\t\trootUuid = root.uuid,\n    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n    \t\tif ( bindingsByName === undefined ) {\n\n    \t\t\tbindingsByName = {};\n    \t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n    \t\t}\n\n    \t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n    \t\t\tvar track = tracks[ i ],\n    \t\t\t\ttrackName = track.name,\n    \t\t\t\tbinding = bindingsByName[ trackName ];\n\n    \t\t\tif ( binding !== undefined ) {\n\n    \t\t\t\tbindings[ i ] = binding;\n\n    \t\t\t} else {\n\n    \t\t\t\tbinding = bindings[ i ];\n\n    \t\t\t\tif ( binding !== undefined ) {\n\n    \t\t\t\t\t// existing binding, make sure the cache knows\n\n    \t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n    \t\t\t\t\t\t++ binding.referenceCount;\n    \t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n    \t\t\t\t\t}\n\n    \t\t\t\t\tcontinue;\n\n    \t\t\t\t}\n\n    \t\t\t\tvar path = prototypeAction && prototypeAction.\n    \t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n    \t\t\t\tbinding = new PropertyMixer(\n    \t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n    \t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n    \t\t\t\t++ binding.referenceCount;\n    \t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n    \t\t\t\tbindings[ i ] = binding;\n\n    \t\t\t}\n\n    \t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n    \t\t}\n\n    \t},\n\n    \t_activateAction: function( action ) {\n\n    \t\tif ( ! this._isActiveAction( action ) ) {\n\n    \t\t\tif ( action._cacheIndex === null ) {\n\n    \t\t\t\t// this action has been forgotten by the cache, but the user\n    \t\t\t\t// appears to be still using it -> rebind\n\n    \t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n    \t\t\t\t\tclipUuid = action._clip.uuid,\n    \t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n    \t\t\t\tthis._bindAction( action,\n    \t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n    \t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n    \t\t\t}\n\n    \t\t\tvar bindings = action._propertyBindings;\n\n    \t\t\t// increment reference counts / sort out state\n    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar binding = bindings[ i ];\n\n    \t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n    \t\t\t\t\tthis._lendBinding( binding );\n    \t\t\t\t\tbinding.saveOriginalState();\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis._lendAction( action );\n\n    \t\t}\n\n    \t},\n\n    \t_deactivateAction: function( action ) {\n\n    \t\tif ( this._isActiveAction( action ) ) {\n\n    \t\t\tvar bindings = action._propertyBindings;\n\n    \t\t\t// decrement reference counts / sort out state\n    \t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\t\tvar binding = bindings[ i ];\n\n    \t\t\t\tif ( -- binding.useCount === 0 ) {\n\n    \t\t\t\t\tbinding.restoreOriginalState();\n    \t\t\t\t\tthis._takeBackBinding( binding );\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t\tthis._takeBackAction( action );\n\n    \t\t}\n\n    \t},\n\n    \t// Memory manager\n\n    \t_initMemoryManager: function() {\n\n    \t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n    \t\tthis._nActiveActions = 0;\n\n    \t\tthis._actionsByClip = {};\n    \t\t// inside:\n    \t\t// {\n    \t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n    \t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n    \t\t// }\n\n\n    \t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n    \t\tthis._nActiveBindings = 0;\n\n    \t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n    \t\tthis._controlInterpolants = []; // same game as above\n    \t\tthis._nActiveControlInterpolants = 0;\n\n    \t\tvar scope = this;\n\n    \t\tthis.stats = {\n\n    \t\t\tactions: {\n    \t\t\t\tget total() { return scope._actions.length; },\n    \t\t\t\tget inUse() { return scope._nActiveActions; }\n    \t\t\t},\n    \t\t\tbindings: {\n    \t\t\t\tget total() { return scope._bindings.length; },\n    \t\t\t\tget inUse() { return scope._nActiveBindings; }\n    \t\t\t},\n    \t\t\tcontrolInterpolants: {\n    \t\t\t\tget total() { return scope._controlInterpolants.length; },\n    \t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n    \t\t\t}\n\n    \t\t};\n\n    \t},\n\n    \t// Memory management for AnimationAction objects\n\n    \t_isActiveAction: function( action ) {\n\n    \t\tvar index = action._cacheIndex;\n    \t\treturn index !== null && index < this._nActiveActions;\n\n    \t},\n\n    \t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n    \t\tif ( actionsForClip === undefined ) {\n\n    \t\t\tactionsForClip = {\n\n    \t\t\t\tknownActions: [ action ],\n    \t\t\t\tactionByRoot: {}\n\n    \t\t\t};\n\n    \t\t\taction._byClipCacheIndex = 0;\n\n    \t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n    \t\t} else {\n\n    \t\t\tvar knownActions = actionsForClip.knownActions;\n\n    \t\t\taction._byClipCacheIndex = knownActions.length;\n    \t\t\tknownActions.push( action );\n\n    \t\t}\n\n    \t\taction._cacheIndex = actions.length;\n    \t\tactions.push( action );\n\n    \t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n    \t},\n\n    \t_removeInactiveAction: function( action ) {\n\n    \t\tvar actions = this._actions,\n    \t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n    \t\t\tcacheIndex = action._cacheIndex;\n\n    \t\tlastInactiveAction._cacheIndex = cacheIndex;\n    \t\tactions[ cacheIndex ] = lastInactiveAction;\n    \t\tactions.pop();\n\n    \t\taction._cacheIndex = null;\n\n\n    \t\tvar clipUuid = action._clip.uuid,\n    \t\t\tactionsByClip = this._actionsByClip,\n    \t\t\tactionsForClip = actionsByClip[ clipUuid ],\n    \t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n    \t\t\tlastKnownAction =\n    \t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n    \t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n    \t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n    \t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n    \t\tknownActionsForClip.pop();\n\n    \t\taction._byClipCacheIndex = null;\n\n\n    \t\tvar actionByRoot = actionsForClip.actionByRoot,\n    \t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\n    \t\tdelete actionByRoot[ rootUuid ];\n\n    \t\tif ( knownActionsForClip.length === 0 ) {\n\n    \t\t\tdelete actionsByClip[ clipUuid ];\n\n    \t\t}\n\n    \t\tthis._removeInactiveBindingsForAction( action );\n\n    \t},\n\n    \t_removeInactiveBindingsForAction: function( action ) {\n\n    \t\tvar bindings = action._propertyBindings;\n    \t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n    \t\t\tvar binding = bindings[ i ];\n\n    \t\t\tif ( -- binding.referenceCount === 0 ) {\n\n    \t\t\t\tthis._removeInactiveBinding( binding );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t},\n\n    \t_lendAction: function( action ) {\n\n    \t\t// [ active actions |  inactive actions  ]\n    \t\t// [  active actions >| inactive actions ]\n    \t\t//                 s        a\n    \t\t//                  <-swap->\n    \t\t//                 a        s\n\n    \t\tvar actions = this._actions,\n    \t\t\tprevIndex = action._cacheIndex,\n\n    \t\t\tlastActiveIndex = this._nActiveActions ++,\n\n    \t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n    \t\taction._cacheIndex = lastActiveIndex;\n    \t\tactions[ lastActiveIndex ] = action;\n\n    \t\tfirstInactiveAction._cacheIndex = prevIndex;\n    \t\tactions[ prevIndex ] = firstInactiveAction;\n\n    \t},\n\n    \t_takeBackAction: function( action ) {\n\n    \t\t// [  active actions  | inactive actions ]\n    \t\t// [ active actions |< inactive actions  ]\n    \t\t//        a        s\n    \t\t//         <-swap->\n    \t\t//        s        a\n\n    \t\tvar actions = this._actions,\n    \t\t\tprevIndex = action._cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n    \t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n    \t\taction._cacheIndex = firstInactiveIndex;\n    \t\tactions[ firstInactiveIndex ] = action;\n\n    \t\tlastActiveAction._cacheIndex = prevIndex;\n    \t\tactions[ prevIndex ] = lastActiveAction;\n\n    \t},\n\n    \t// Memory management for PropertyMixer objects\n\n    \t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\n    \t\tvar bindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n    \t\t\tbindings = this._bindings;\n\n    \t\tif ( bindingByName === undefined ) {\n\n    \t\t\tbindingByName = {};\n    \t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n    \t\t}\n\n    \t\tbindingByName[ trackName ] = binding;\n\n    \t\tbinding._cacheIndex = bindings.length;\n    \t\tbindings.push( binding );\n\n    \t},\n\n    \t_removeInactiveBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tpropBinding = binding.binding,\n    \t\t\trootUuid = propBinding.rootNode.uuid,\n    \t\t\ttrackName = propBinding.path,\n    \t\t\tbindingsByRoot = this._bindingsByRootAndName,\n    \t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n    \t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n    \t\t\tcacheIndex = binding._cacheIndex;\n\n    \t\tlastInactiveBinding._cacheIndex = cacheIndex;\n    \t\tbindings[ cacheIndex ] = lastInactiveBinding;\n    \t\tbindings.pop();\n\n    \t\tdelete bindingByName[ trackName ];\n\n    \t\tremove_empty_map: {\n\n    \t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\n    \t\t\tdelete bindingsByRoot[ rootUuid ];\n\n    \t\t}\n\n    \t},\n\n    \t_lendBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tprevIndex = binding._cacheIndex,\n\n    \t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n    \t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n    \t\tbinding._cacheIndex = lastActiveIndex;\n    \t\tbindings[ lastActiveIndex ] = binding;\n\n    \t\tfirstInactiveBinding._cacheIndex = prevIndex;\n    \t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n    \t},\n\n    \t_takeBackBinding: function( binding ) {\n\n    \t\tvar bindings = this._bindings,\n    \t\t\tprevIndex = binding._cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n    \t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n    \t\tbinding._cacheIndex = firstInactiveIndex;\n    \t\tbindings[ firstInactiveIndex ] = binding;\n\n    \t\tlastActiveBinding._cacheIndex = prevIndex;\n    \t\tbindings[ prevIndex ] = lastActiveBinding;\n\n    \t},\n\n\n    \t// Memory management of Interpolants for weight and time scale\n\n    \t_lendControlInterpolant: function() {\n\n    \t\tvar interpolants = this._controlInterpolants,\n    \t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n    \t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n    \t\tif ( interpolant === undefined ) {\n\n    \t\t\tinterpolant = new LinearInterpolant(\n    \t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n    \t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n    \t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n    \t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n    \t\t}\n\n    \t\treturn interpolant;\n\n    \t},\n\n    \t_takeBackControlInterpolant: function( interpolant ) {\n\n    \t\tvar interpolants = this._controlInterpolants,\n    \t\t\tprevIndex = interpolant.__cacheIndex,\n\n    \t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n    \t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n    \t\tinterpolant.__cacheIndex = firstInactiveIndex;\n    \t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n    \t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n    \t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n    \t},\n\n    \t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\n    } );\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function Uniform( value ) {\n\n    \tif ( typeof value === 'string' ) {\n\n    \t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n    \t\tvalue = arguments[ 1 ];\n\n    \t}\n\n    \tthis.value = value;\n\n    \tthis.dynamic = false;\n\n    }\n\n    Uniform.prototype = {\n\n    \tconstructor: Uniform,\n\n    \tonUpdate: function ( callback ) {\n\n    \t\tthis.dynamic = true;\n    \t\tthis.onUpdateCallback = callback;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedBufferGeometry() {\n\n    \tBufferGeometry.call( this );\n\n    \tthis.type = 'InstancedBufferGeometry';\n    \tthis.maxInstancedCount = undefined;\n\n    }\n\n    InstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n    InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;\n\n    InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\n    InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\n    \tthis.groups.push( {\n\n    \t\tstart: start,\n    \t\tcount: count,\n    \t\tinstances: instances\n\n    \t} );\n\n    };\n\n    InstancedBufferGeometry.prototype.copy = function ( source ) {\n\n    \tvar index = source.index;\n\n    \tif ( index !== null ) {\n\n    \t\tthis.setIndex( index.clone() );\n\n    \t}\n\n    \tvar attributes = source.attributes;\n\n    \tfor ( var name in attributes ) {\n\n    \t\tvar attribute = attributes[ name ];\n    \t\tthis.addAttribute( name, attribute.clone() );\n\n    \t}\n\n    \tvar groups = source.groups;\n\n    \tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n    \t\tvar group = groups[ i ];\n    \t\tthis.addGroup( group.start, group.count, group.instances );\n\n    \t}\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.data = interleavedBuffer;\n    \tthis.itemSize = itemSize;\n    \tthis.offset = offset;\n\n    \tthis.normalized = normalized === true;\n\n    }\n\n\n    InterleavedBufferAttribute.prototype = {\n\n    \tconstructor: InterleavedBufferAttribute,\n\n    \tisInterleavedBufferAttribute: true,\n\n    \tget count() {\n\n    \t\treturn this.data.count;\n\n    \t},\n\n    \tget array() {\n\n    \t\treturn this.data.array;\n\n    \t},\n\n    \tsetX: function ( index, x ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetY: function ( index, y ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetZ: function ( index, z ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetW: function ( index, w ) {\n\n    \t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n    \t\treturn this;\n\n    \t},\n\n    \tgetX: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n    \t},\n\n    \tgetY: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n    \t},\n\n    \tgetZ: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n    \t},\n\n    \tgetW: function ( index ) {\n\n    \t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n    \t},\n\n    \tsetXY: function ( index, x, y ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZ: function ( index, x, y, z ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n    \t\tthis.data.array[ index + 2 ] = z;\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetXYZW: function ( index, x, y, z, w ) {\n\n    \t\tindex = index * this.data.stride + this.offset;\n\n    \t\tthis.data.array[ index + 0 ] = x;\n    \t\tthis.data.array[ index + 1 ] = y;\n    \t\tthis.data.array[ index + 2 ] = z;\n    \t\tthis.data.array[ index + 3 ] = w;\n\n    \t\treturn this;\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InterleavedBuffer( array, stride ) {\n\n    \tthis.uuid = exports.Math.generateUUID();\n\n    \tthis.array = array;\n    \tthis.stride = stride;\n    \tthis.count = array !== undefined ? array.length / stride : 0;\n\n    \tthis.dynamic = false;\n    \tthis.updateRange = { offset: 0, count: - 1 };\n\n    \tthis.version = 0;\n\n    }\n\n    InterleavedBuffer.prototype = {\n\n    \tconstructor: InterleavedBuffer,\n\n    \tisInterleavedBuffer: true,\n\n    \tset needsUpdate( value ) {\n\n    \t\tif ( value === true ) this.version ++;\n\n    \t},\n\n    \tsetDynamic: function ( value ) {\n\n    \t\tthis.dynamic = value;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopy: function ( source ) {\n\n    \t\tthis.array = new source.array.constructor( source.array );\n    \t\tthis.count = source.count;\n    \t\tthis.stride = source.stride;\n    \t\tthis.dynamic = source.dynamic;\n\n    \t\treturn this;\n\n    \t},\n\n    \tcopyAt: function ( index1, attribute, index2 ) {\n\n    \t\tindex1 *= this.stride;\n    \t\tindex2 *= attribute.stride;\n\n    \t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n    \t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    \tset: function ( value, offset ) {\n\n    \t\tif ( offset === undefined ) offset = 0;\n\n    \t\tthis.array.set( value, offset );\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t}\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n    \tInterleavedBuffer.call( this, array, stride );\n\n    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\n    }\n\n    InstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );\n    InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;\n\n    InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\n    InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\n    \tInterleavedBuffer.prototype.copy.call( this, source );\n\n    \tthis.meshPerAttribute = source.meshPerAttribute;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author benaadams / https://twitter.com/ben_a_adams\n     */\n\n    function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\n    \tBufferAttribute.call( this, array, itemSize );\n\n    \tthis.meshPerAttribute = meshPerAttribute || 1;\n\n    }\n\n    InstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n    InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;\n\n    InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\n    InstancedBufferAttribute.prototype.copy = function ( source ) {\n\n    \tBufferAttribute.prototype.copy.call( this, source );\n\n    \tthis.meshPerAttribute = source.meshPerAttribute;\n\n    \treturn this;\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author bhouston / http://clara.io/\n     * @author stephomi / http://stephaneginier.com/\n     */\n\n    function Raycaster( origin, direction, near, far ) {\n\n    \tthis.ray = new Ray( origin, direction );\n    \t// direction is assumed to be normalized (for accurate distance calculations)\n\n    \tthis.near = near || 0;\n    \tthis.far = far || Infinity;\n\n    \tthis.params = {\n    \t\tMesh: {},\n    \t\tLine: {},\n    \t\tLOD: {},\n    \t\tPoints: { threshold: 1 },\n    \t\tSprite: {}\n    \t};\n\n    \tObject.defineProperties( this.params, {\n    \t\tPointCloud: {\n    \t\t\tget: function () {\n    \t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n    \t\t\t\treturn this.Points;\n    \t\t\t}\n    \t\t}\n    \t} );\n\n    }\n\n    function ascSort( a, b ) {\n\n    \treturn a.distance - b.distance;\n\n    }\n\n    function intersectObject( object, raycaster, intersects, recursive ) {\n\n    \tif ( object.visible === false ) return;\n\n    \tobject.raycast( raycaster, intersects );\n\n    \tif ( recursive === true ) {\n\n    \t\tvar children = object.children;\n\n    \t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n    \t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n    \t\t}\n\n    \t}\n\n    }\n\n    //\n\n    Raycaster.prototype = {\n\n    \tconstructor: Raycaster,\n\n    \tlinePrecision: 1,\n\n    \tset: function ( origin, direction ) {\n\n    \t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n    \t\tthis.ray.set( origin, direction );\n\n    \t},\n\n    \tsetFromCamera: function ( coords, camera ) {\n\n    \t\tif ( (camera && camera.isPerspectiveCamera) ) {\n\n    \t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n    \t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n    \t\t} else if ( (camera && camera.isOrthographicCamera) ) {\n\n    \t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n    \t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n    \t\t} else {\n\n    \t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n    \t\t}\n\n    \t},\n\n    \tintersectObject: function ( object, recursive ) {\n\n    \t\tvar intersects = [];\n\n    \t\tintersectObject( object, this, intersects, recursive );\n\n    \t\tintersects.sort( ascSort );\n\n    \t\treturn intersects;\n\n    \t},\n\n    \tintersectObjects: function ( objects, recursive ) {\n\n    \t\tvar intersects = [];\n\n    \t\tif ( Array.isArray( objects ) === false ) {\n\n    \t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n    \t\t\treturn intersects;\n\n    \t\t}\n\n    \t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n    \t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n    \t\t}\n\n    \t\tintersects.sort( ascSort );\n\n    \t\treturn intersects;\n\n    \t}\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Clock( autoStart ) {\n\n    \tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n    \tthis.startTime = 0;\n    \tthis.oldTime = 0;\n    \tthis.elapsedTime = 0;\n\n    \tthis.running = false;\n\n    }\n\n    Clock.prototype = {\n\n    \tconstructor: Clock,\n\n    \tstart: function () {\n\n    \t\tthis.startTime = ( performance || Date ).now();\n\n    \t\tthis.oldTime = this.startTime;\n    \t\tthis.running = true;\n\n    \t},\n\n    \tstop: function () {\n\n    \t\tthis.getElapsedTime();\n    \t\tthis.running = false;\n\n    \t},\n\n    \tgetElapsedTime: function () {\n\n    \t\tthis.getDelta();\n    \t\treturn this.elapsedTime;\n\n    \t},\n\n    \tgetDelta: function () {\n\n    \t\tvar diff = 0;\n\n    \t\tif ( this.autoStart && ! this.running ) {\n\n    \t\t\tthis.start();\n\n    \t\t}\n\n    \t\tif ( this.running ) {\n\n    \t\t\tvar newTime = ( performance || Date ).now();\n\n    \t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n    \t\t\tthis.oldTime = newTime;\n\n    \t\t\tthis.elapsedTime += diff;\n\n    \t\t}\n\n    \t\treturn diff;\n\n    \t}\n\n    };\n\n    /**\n     * Spline from Tween.js, slightly optimized (and trashed)\n     * http://sole.github.com/tween.js/examples/05_spline.html\n     *\n     * @author mrdoob / http://mrdoob.com/\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function Spline( points ) {\n\n    \tthis.points = points;\n\n    \tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n    \tpoint, intPoint, weight, w2, w3,\n    \tpa, pb, pc, pd;\n\n    \tthis.initFromArray = function ( a ) {\n\n    \t\tthis.points = [];\n\n    \t\tfor ( var i = 0; i < a.length; i ++ ) {\n\n    \t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\n    \t\t}\n\n    \t};\n\n    \tthis.getPoint = function ( k ) {\n\n    \t\tpoint = ( this.points.length - 1 ) * k;\n    \t\tintPoint = Math.floor( point );\n    \t\tweight = point - intPoint;\n\n    \t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n    \t\tc[ 1 ] = intPoint;\n    \t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n    \t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\n    \t\tpa = this.points[ c[ 0 ] ];\n    \t\tpb = this.points[ c[ 1 ] ];\n    \t\tpc = this.points[ c[ 2 ] ];\n    \t\tpd = this.points[ c[ 3 ] ];\n\n    \t\tw2 = weight * weight;\n    \t\tw3 = weight * w2;\n\n    \t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n    \t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n    \t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\n    \t\treturn v3;\n\n    \t};\n\n    \tthis.getControlPointsArray = function () {\n\n    \t\tvar i, p, l = this.points.length,\n    \t\t\tcoords = [];\n\n    \t\tfor ( i = 0; i < l; i ++ ) {\n\n    \t\t\tp = this.points[ i ];\n    \t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\n    \t\t}\n\n    \t\treturn coords;\n\n    \t};\n\n    \t// approximate length by summing linear segments\n\n    \tthis.getLength = function ( nSubDivisions ) {\n\n    \t\tvar i, index, nSamples, position,\n    \t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n    \t\t\toldPosition = new Vector3(),\n    \t\t\ttmpVec = new Vector3(),\n    \t\t\tchunkLengths = [],\n    \t\t\ttotalLength = 0;\n\n    \t\t// first point has 0 length\n\n    \t\tchunkLengths[ 0 ] = 0;\n\n    \t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\n    \t\tnSamples = this.points.length * nSubDivisions;\n\n    \t\toldPosition.copy( this.points[ 0 ] );\n\n    \t\tfor ( i = 1; i < nSamples; i ++ ) {\n\n    \t\t\tindex = i / nSamples;\n\n    \t\t\tposition = this.getPoint( index );\n    \t\t\ttmpVec.copy( position );\n\n    \t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\n    \t\t\toldPosition.copy( position );\n\n    \t\t\tpoint = ( this.points.length - 1 ) * index;\n    \t\t\tintPoint = Math.floor( point );\n\n    \t\t\tif ( intPoint !== oldIntPoint ) {\n\n    \t\t\t\tchunkLengths[ intPoint ] = totalLength;\n    \t\t\t\toldIntPoint = intPoint;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\t// last point ends with total length\n\n    \t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\n    \t\treturn { chunks: chunkLengths, total: totalLength };\n\n    \t};\n\n    \tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\n    \t\tvar i, j,\n    \t\t\tindex, indexCurrent, indexNext,\n    \t\t\trealDistance,\n    \t\t\tsampling, position,\n    \t\t\tnewpoints = [],\n    \t\t\ttmpVec = new Vector3(),\n    \t\t\tsl = this.getLength();\n\n    \t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\n    \t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\n    \t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n    \t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\n    \t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\n    \t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\n    \t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n    \t\t\tindexNext = i / ( this.points.length - 1 );\n\n    \t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\n    \t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\n    \t\t\t\tposition = this.getPoint( index );\n    \t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\n    \t\t\t}\n\n    \t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\n    \t\t}\n\n    \t\tthis.points = newpoints;\n\n    \t};\n\n    \t// Catmull-Rom\n\n    \tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\n    \t\tvar v0 = ( p2 - p0 ) * 0.5,\n    \t\t\tv1 = ( p3 - p1 ) * 0.5;\n\n    \t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n    \t}\n\n    }\n\n    /**\n     * @author bhouston / http://clara.io\n     * @author WestLangley / http://github.com/WestLangley\n     *\n     * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n     *\n     * The poles (phi) are at the positive and negative y axis.\n     * The equator starts at positive z.\n     */\n\n    function Spherical( radius, phi, theta ) {\n\n    \tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n    \tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n    \tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n    \treturn this;\n\n    }\n\n    Spherical.prototype = {\n\n    \tconstructor: Spherical,\n\n    \tset: function ( radius, phi, theta ) {\n\n    \t\tthis.radius = radius;\n    \t\tthis.phi = phi;\n    \t\tthis.theta = theta;\n\n    \t\treturn this;\n\n    \t},\n\n    \tclone: function () {\n\n    \t\treturn new this.constructor().copy( this );\n\n    \t},\n\n    \tcopy: function ( other ) {\n\n    \t\tthis.radius.copy( other.radius );\n    \t\tthis.phi.copy( other.phi );\n    \t\tthis.theta.copy( other.theta );\n\n    \t\treturn this;\n\n    \t},\n\n    \t// restrict phi to be betwee EPS and PI-EPS\n    \tmakeSafe: function() {\n\n    \t\tvar EPS = 0.000001;\n    \t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n    \t\treturn this;\n\n    \t},\n\n    \tsetFromVector3: function( vec3 ) {\n\n    \t\tthis.radius = vec3.length();\n\n    \t\tif ( this.radius === 0 ) {\n\n    \t\t\tthis.theta = 0;\n    \t\t\tthis.phi = 0;\n\n    \t\t} else {\n\n    \t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n    \t\t\tthis.phi = Math.acos( exports.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n    \t\t}\n\n    \t\treturn this;\n\n    \t},\n\n    };\n\n    /**\r\n     * @author alteredq / http://alteredqualia.com/\r\n     */\r\n\r\n    function MorphBlendMesh( geometry, material ) {\n\r\n    \tMesh.call( this, geometry, material );\r\n\r\n    \tthis.animationsMap = {};\r\n    \tthis.animationsList = [];\r\n\r\n    \t// prepare default animation\r\n    \t// (all frames played together in 1 second)\r\n\r\n    \tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n    \tvar name = \"__default\";\r\n\r\n    \tvar startFrame = 0;\r\n    \tvar endFrame = numFrames - 1;\r\n\r\n    \tvar fps = numFrames / 1;\r\n\r\n    \tthis.createAnimation( name, startFrame, endFrame, fps );\r\n    \tthis.setAnimationWeight( name, 1 );\r\n\r\n    }\r\n\r\n    MorphBlendMesh.prototype = Object.create( Mesh.prototype );\r\n    MorphBlendMesh.prototype.constructor = MorphBlendMesh;\r\n\r\n    MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n    \tvar animation = {\r\n\r\n    \t\tstart: start,\r\n    \t\tend: end,\r\n\r\n    \t\tlength: end - start + 1,\r\n\r\n    \t\tfps: fps,\r\n    \t\tduration: ( end - start ) / fps,\r\n\r\n    \t\tlastFrame: 0,\r\n    \t\tcurrentFrame: 0,\r\n\r\n    \t\tactive: false,\r\n\r\n    \t\ttime: 0,\r\n    \t\tdirection: 1,\r\n    \t\tweight: 1,\r\n\r\n    \t\tdirectionBackwards: false,\r\n    \t\tmirroredLoop: false\r\n\r\n    \t};\r\n\r\n    \tthis.animationsMap[ name ] = animation;\r\n    \tthis.animationsList.push( animation );\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n    \tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\r\n    \tvar firstAnimation, frameRanges = {};\r\n\r\n    \tvar geometry = this.geometry;\r\n\r\n    \tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n    \t\tvar morph = geometry.morphTargets[ i ];\r\n    \t\tvar chunks = morph.name.match( pattern );\r\n\r\n    \t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n    \t\t\tvar name = chunks[ 1 ];\r\n\r\n    \t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\r\n    \t\t\tvar range = frameRanges[ name ];\r\n\r\n    \t\t\tif ( i < range.start ) range.start = i;\r\n    \t\t\tif ( i > range.end ) range.end = i;\r\n\r\n    \t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n    \t\t}\r\n\r\n    \t}\r\n\r\n    \tfor ( var name in frameRanges ) {\r\n\r\n    \t\tvar range = frameRanges[ name ];\r\n    \t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n    \t}\r\n\r\n    \tthis.firstAnimation = firstAnimation;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.direction = 1;\r\n    \t\tanimation.directionBackwards = false;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.direction = - 1;\r\n    \t\tanimation.directionBackwards = true;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.fps = fps;\r\n    \t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.duration = duration;\r\n    \t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.weight = weight;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.time = time;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n    \tvar time = 0;\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\ttime = animation.time;\r\n\r\n    \t}\r\n\r\n    \treturn time;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n    \tvar duration = - 1;\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tduration = animation.duration;\r\n\r\n    \t}\r\n\r\n    \treturn duration;\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.time = 0;\r\n    \t\tanimation.active = true;\r\n\r\n    \t} else {\r\n\r\n    \t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n    \tvar animation = this.animationsMap[ name ];\r\n\r\n    \tif ( animation ) {\r\n\r\n    \t\tanimation.active = false;\r\n\r\n    \t}\r\n\r\n    };\r\n\r\n    MorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n    \tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n    \t\tvar animation = this.animationsList[ i ];\r\n\r\n    \t\tif ( ! animation.active ) continue;\r\n\r\n    \t\tvar frameTime = animation.duration / animation.length;\r\n\r\n    \t\tanimation.time += animation.direction * delta;\r\n\r\n    \t\tif ( animation.mirroredLoop ) {\r\n\r\n    \t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n    \t\t\t\tanimation.direction *= - 1;\r\n\r\n    \t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n    \t\t\t\t\tanimation.time = animation.duration;\r\n    \t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n    \t\t\t\t}\r\n\r\n    \t\t\t\tif ( animation.time < 0 ) {\r\n\r\n    \t\t\t\t\tanimation.time = 0;\r\n    \t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n    \t\t\t\t}\r\n\r\n    \t\t\t}\r\n\r\n    \t\t} else {\r\n\r\n    \t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n    \t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n    \t\t}\r\n\r\n    \t\tvar keyframe = animation.start + exports.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n    \t\tvar weight = animation.weight;\r\n\r\n    \t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n    \t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n    \t\t\tanimation.lastFrame = animation.currentFrame;\r\n    \t\t\tanimation.currentFrame = keyframe;\r\n\r\n    \t\t}\r\n\r\n    \t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n    \t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n    \t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n    \t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n    \t\t} else {\r\n\r\n    \t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\r\n    \t\t}\r\n\r\n    \t}\r\n\r\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    function ImmediateRenderObject( material ) {\n\n    \tObject3D.call( this );\n\n    \tthis.material = material;\n    \tthis.render = function ( renderCallback ) {};\n\n    }\n\n    ImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n    ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n    ImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function VertexNormalsHelper( object, size, hex, linewidth ) {\n\n    \tthis.object = object;\n\n    \tthis.size = ( size !== undefined ) ? size : 1;\n\n    \tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n    \t//\n\n    \tvar nNormals = 0;\n\n    \tvar objGeometry = this.object.geometry;\n\n    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\tnNormals = objGeometry.faces.length * 3;\n\n    \t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\n    \t\tnNormals = objGeometry.attributes.normal.count;\n\n    \t}\n\n    \t//\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\n    \tgeometry.addAttribute( 'position', positions );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n    \t//\n\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.update();\n\n    }\n\n    VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n    VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\n    VertexNormalsHelper.prototype.update = ( function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar normalMatrix = new Matrix3();\n\n    \treturn function update() {\n\n    \t\tvar keys = [ 'a', 'b', 'c' ];\n\n    \t\tthis.object.updateMatrixWorld( true );\n\n    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n    \t\tvar matrixWorld = this.object.matrixWorld;\n\n    \t\tvar position = this.geometry.attributes.position;\n\n    \t\t//\n\n    \t\tvar objGeometry = this.object.geometry;\n\n    \t\tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\t\tvar vertices = objGeometry.vertices;\n\n    \t\t\tvar faces = objGeometry.faces;\n\n    \t\t\tvar idx = 0;\n\n    \t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\t\tvar face = faces[ i ];\n\n    \t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n    \t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n    \t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n    \t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n    \t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\t\t\tidx = idx + 1;\n\n    \t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\t\t\tidx = idx + 1;\n\n    \t\t\t\t}\n\n    \t\t\t}\n\n    \t\t} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {\n\n    \t\t\tvar objPos = objGeometry.attributes.position;\n\n    \t\t\tvar objNorm = objGeometry.attributes.normal;\n\n    \t\t\tvar idx = 0;\n\n    \t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n    \t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n    \t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n    \t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n    \t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\t\tidx = idx + 1;\n\n    \t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\t\tidx = idx + 1;\n\n    \t\t\t}\n\n    \t\t}\n\n    \t\tposition.needsUpdate = true;\n\n    \t\treturn this;\n\n    \t};\n\n    }() );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function SpotLightHelper( light ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = [\n    \t\t0, 0, 0,   0,   0,   1,\n    \t\t0, 0, 0,   1,   0,   1,\n    \t\t0, 0, 0, - 1,   0,   1,\n    \t\t0, 0, 0,   0,   1,   1,\n    \t\t0, 0, 0,   0, - 1,   1\n    \t];\n\n    \tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n    \t\tvar p1 = ( i / l ) * Math.PI * 2;\n    \t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n    \t\tpositions.push(\n    \t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n    \t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n    \t\t);\n\n    \t}\n\n    \tgeometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { fog: false } );\n\n    \tthis.cone = new LineSegments( geometry, material );\n    \tthis.add( this.cone );\n\n    \tthis.update();\n\n    }\n\n    SpotLightHelper.prototype = Object.create( Object3D.prototype );\n    SpotLightHelper.prototype.constructor = SpotLightHelper;\n\n    SpotLightHelper.prototype.dispose = function () {\n\n    \tthis.cone.geometry.dispose();\n    \tthis.cone.material.dispose();\n\n    };\n\n    SpotLightHelper.prototype.update = function () {\n\n    \tvar vector = new Vector3();\n    \tvar vector2 = new Vector3();\n\n    \treturn function update() {\n\n    \t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n    \t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n    \t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n    \t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n    \t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n    \t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n    \t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t};\n\n    }();\n\n    /**\n     * @author Sean Griffin / http://twitter.com/sgrif\n     * @author Michael Guerrero / http://realitymeltdown.com\n     * @author mrdoob / http://mrdoob.com/\n     * @author ikerr / http://verold.com\n     */\n\n    function SkeletonHelper( object ) {\n\n    \tthis.bones = this.getBoneList( object );\n\n    \tvar geometry = new Geometry();\n\n    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n    \t\tvar bone = this.bones[ i ];\n\n    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\tgeometry.vertices.push( new Vector3() );\n    \t\t\tgeometry.vertices.push( new Vector3() );\n    \t\t\tgeometry.colors.push( new Color( 0, 0, 1 ) );\n    \t\t\tgeometry.colors.push( new Color( 0, 1, 0 ) );\n\n    \t\t}\n\n    \t}\n\n    \tgeometry.dynamic = true;\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    \tthis.root = object;\n\n    \tthis.matrix = object.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.update();\n\n    }\n\n\n    SkeletonHelper.prototype = Object.create( LineSegments.prototype );\n    SkeletonHelper.prototype.constructor = SkeletonHelper;\n\n    SkeletonHelper.prototype.getBoneList = function( object ) {\n\n    \tvar boneList = [];\n\n    \tif ( (object && object.isBone) ) {\n\n    \t\tboneList.push( object );\n\n    \t}\n\n    \tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n    \t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\n    \t}\n\n    \treturn boneList;\n\n    };\n\n    SkeletonHelper.prototype.update = function () {\n\n    \tvar geometry = this.geometry;\n\n    \tvar matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );\n\n    \tvar boneMatrix = new Matrix4();\n\n    \tvar j = 0;\n\n    \tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n    \t\tvar bone = this.bones[ i ];\n\n    \t\tif ( (bone.parent && bone.parent.isBone) ) {\n\n    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n    \t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\n    \t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n    \t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\n    \t\t\tj += 2;\n\n    \t\t}\n\n    \t}\n\n    \tgeometry.verticesNeedUpdate = true;\n\n    \tgeometry.computeBoundingSphere();\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function PointLightHelper( light, sphereSize ) {\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n    \tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n    \tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \tMesh.call( this, geometry, material );\n\n    \tthis.matrix = this.light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \t/*\n    \tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n    \tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n    \tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n    \tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n    \tvar d = light.distance;\n\n    \tif ( d === 0.0 ) {\n\n    \t\tthis.lightDistance.visible = false;\n\n    \t} else {\n\n    \t\tthis.lightDistance.scale.set( d, d, d );\n\n    \t}\n\n    \tthis.add( this.lightDistance );\n    \t*/\n\n    }\n\n    PointLightHelper.prototype = Object.create( Mesh.prototype );\n    PointLightHelper.prototype.constructor = PointLightHelper;\n\n    PointLightHelper.prototype.dispose = function () {\n\n    \tthis.geometry.dispose();\n    \tthis.material.dispose();\n\n    };\n\n    PointLightHelper.prototype.update = function () {\n\n    \tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t/*\n    \tvar d = this.light.distance;\n\n    \tif ( d === 0.0 ) {\n\n    \t\tthis.lightDistance.visible = false;\n\n    \t} else {\n\n    \t\tthis.lightDistance.visible = true;\n    \t\tthis.lightDistance.scale.set( d, d, d );\n\n    \t}\n    \t*/\n\n    };\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function HemisphereLightHelper( light, sphereSize ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.colors = [ new Color(), new Color() ];\n\n    \tvar geometry = new SphereGeometry( sphereSize, 4, 2 );\n    \tgeometry.rotateX( - Math.PI / 2 );\n\n    \tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\n    \t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\n    \t}\n\n    \tvar material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );\n\n    \tthis.lightSphere = new Mesh( geometry, material );\n    \tthis.add( this.lightSphere );\n\n    \tthis.update();\n\n    }\n\n    HemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n    HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n    HemisphereLightHelper.prototype.dispose = function () {\n\n    \tthis.lightSphere.geometry.dispose();\n    \tthis.lightSphere.material.dispose();\n\n    };\n\n    HemisphereLightHelper.prototype.update = function () {\n\n    \tvar vector = new Vector3();\n\n    \treturn function update() {\n\n    \t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n    \t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\n    \t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n    \t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\n    \t};\n\n    }();\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function GridHelper( size, divisions, color1, color2 ) {\n\n    \tdivisions = divisions || 1;\n    \tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n    \tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n    \tvar center = divisions / 2;\n    \tvar step = ( size * 2 ) / divisions;\n    \tvar vertices = [], colors = [];\n\n    \tfor ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {\n\n    \t\tvertices.push( - size, 0, k, size, 0, k );\n    \t\tvertices.push( k, 0, - size, k, 0, size );\n\n    \t\tvar color = i === center ? color1 : color2;\n\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n    \t\tcolor.toArray( colors, j ); j += 3;\n\n    \t}\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );\n    \tgeometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    }\n\n    GridHelper.prototype = Object.create( LineSegments.prototype );\n    GridHelper.prototype.constructor = GridHelper;\n\n    GridHelper.prototype.setColors = function () {\n\n    \tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n    */\n\n    function FaceNormalsHelper( object, size, hex, linewidth ) {\n\n    \t// FaceNormalsHelper only supports THREE.Geometry\n\n    \tthis.object = object;\n\n    \tthis.size = ( size !== undefined ) ? size : 1;\n\n    \tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n    \tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n    \t//\n\n    \tvar nNormals = 0;\n\n    \tvar objGeometry = this.object.geometry;\n\n    \tif ( (objGeometry && objGeometry.isGeometry) ) {\n\n    \t\tnNormals = objGeometry.faces.length;\n\n    \t} else {\n\n    \t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n    \t}\n\n    \t//\n\n    \tvar geometry = new BufferGeometry();\n\n    \tvar positions = new Float32Attribute( nNormals * 2 * 3, 3 );\n\n    \tgeometry.addAttribute( 'position', positions );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n    \t//\n\n    \tthis.matrixAutoUpdate = false;\n    \tthis.update();\n\n    }\n\n    FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n    FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\n    FaceNormalsHelper.prototype.update = ( function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar normalMatrix = new Matrix3();\n\n    \treturn function update() {\n\n    \t\tthis.object.updateMatrixWorld( true );\n\n    \t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n    \t\tvar matrixWorld = this.object.matrixWorld;\n\n    \t\tvar position = this.geometry.attributes.position;\n\n    \t\t//\n\n    \t\tvar objGeometry = this.object.geometry;\n\n    \t\tvar vertices = objGeometry.vertices;\n\n    \t\tvar faces = objGeometry.faces;\n\n    \t\tvar idx = 0;\n\n    \t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n    \t\t\tvar face = faces[ i ];\n\n    \t\t\tvar normal = face.normal;\n\n    \t\t\tv1.copy( vertices[ face.a ] )\n    \t\t\t\t.add( vertices[ face.b ] )\n    \t\t\t\t.add( vertices[ face.c ] )\n    \t\t\t\t.divideScalar( 3 )\n    \t\t\t\t.applyMatrix4( matrixWorld );\n\n    \t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n    \t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n    \t\t\tidx = idx + 1;\n\n    \t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n    \t\t\tidx = idx + 1;\n\n    \t\t}\n\n    \t\tposition.needsUpdate = true;\n\n    \t\treturn this;\n\n    \t};\n\n    }() );\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     * @author mrdoob / http://mrdoob.com/\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    function DirectionalLightHelper( light, size ) {\n\n    \tObject3D.call( this );\n\n    \tthis.light = light;\n    \tthis.light.updateMatrixWorld();\n\n    \tthis.matrix = light.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tif ( size === undefined ) size = 1;\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( [\n    \t\t- size,   size, 0,\n    \t\t  size,   size, 0,\n    \t\t  size, - size, 0,\n    \t\t- size, - size, 0,\n    \t\t- size,   size, 0\n    \t], 3 ) );\n\n    \tvar material = new LineBasicMaterial( { fog: false } );\n\n    \tthis.add( new Line( geometry, material ) );\n\n    \tgeometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n    \tthis.add( new Line( geometry, material ));\n\n    \tthis.update();\n\n    }\n\n    DirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n    DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n    DirectionalLightHelper.prototype.dispose = function () {\n\n    \tvar lightPlane = this.children[ 0 ];\n    \tvar targetLine = this.children[ 1 ];\n\n    \tlightPlane.geometry.dispose();\n    \tlightPlane.material.dispose();\n    \ttargetLine.geometry.dispose();\n    \ttargetLine.material.dispose();\n\n    };\n\n    DirectionalLightHelper.prototype.update = function () {\n\n    \tvar v1 = new Vector3();\n    \tvar v2 = new Vector3();\n    \tvar v3 = new Vector3();\n\n    \treturn function update() {\n\n    \t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n    \t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n    \t\tv3.subVectors( v2, v1 );\n\n    \t\tvar lightPlane = this.children[ 0 ];\n    \t\tvar targetLine = this.children[ 1 ];\n\n    \t\tlightPlane.lookAt( v3 );\n    \t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    \t\ttargetLine.lookAt( v3 );\n    \t\ttargetLine.scale.z = v3.length();\n\n    \t};\n\n    }();\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     *\n     *\t- shows frustum, line of sight and up of the camera\n     *\t- suitable for fast updates\n     * \t- based on frustum visualization in lightgl.js shadowmap example\n     *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n     */\n\n    function CameraHelper( camera ) {\n\n    \tvar geometry = new Geometry();\n    \tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n    \tvar pointMap = {};\n\n    \t// colors\n\n    \tvar hexFrustum = 0xffaa00;\n    \tvar hexCone = 0xff0000;\n    \tvar hexUp = 0x00aaff;\n    \tvar hexTarget = 0xffffff;\n    \tvar hexCross = 0x333333;\n\n    \t// near\n\n    \taddLine( \"n1\", \"n2\", hexFrustum );\n    \taddLine( \"n2\", \"n4\", hexFrustum );\n    \taddLine( \"n4\", \"n3\", hexFrustum );\n    \taddLine( \"n3\", \"n1\", hexFrustum );\n\n    \t// far\n\n    \taddLine( \"f1\", \"f2\", hexFrustum );\n    \taddLine( \"f2\", \"f4\", hexFrustum );\n    \taddLine( \"f4\", \"f3\", hexFrustum );\n    \taddLine( \"f3\", \"f1\", hexFrustum );\n\n    \t// sides\n\n    \taddLine( \"n1\", \"f1\", hexFrustum );\n    \taddLine( \"n2\", \"f2\", hexFrustum );\n    \taddLine( \"n3\", \"f3\", hexFrustum );\n    \taddLine( \"n4\", \"f4\", hexFrustum );\n\n    \t// cone\n\n    \taddLine( \"p\", \"n1\", hexCone );\n    \taddLine( \"p\", \"n2\", hexCone );\n    \taddLine( \"p\", \"n3\", hexCone );\n    \taddLine( \"p\", \"n4\", hexCone );\n\n    \t// up\n\n    \taddLine( \"u1\", \"u2\", hexUp );\n    \taddLine( \"u2\", \"u3\", hexUp );\n    \taddLine( \"u3\", \"u1\", hexUp );\n\n    \t// target\n\n    \taddLine( \"c\", \"t\", hexTarget );\n    \taddLine( \"p\", \"c\", hexCross );\n\n    \t// cross\n\n    \taddLine( \"cn1\", \"cn2\", hexCross );\n    \taddLine( \"cn3\", \"cn4\", hexCross );\n\n    \taddLine( \"cf1\", \"cf2\", hexCross );\n    \taddLine( \"cf3\", \"cf4\", hexCross );\n\n    \tfunction addLine( a, b, hex ) {\n\n    \t\taddPoint( a, hex );\n    \t\taddPoint( b, hex );\n\n    \t}\n\n    \tfunction addPoint( id, hex ) {\n\n    \t\tgeometry.vertices.push( new Vector3() );\n    \t\tgeometry.colors.push( new Color( hex ) );\n\n    \t\tif ( pointMap[ id ] === undefined ) {\n\n    \t\t\tpointMap[ id ] = [];\n\n    \t\t}\n\n    \t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\n    \t}\n\n    \tLineSegments.call( this, geometry, material );\n\n    \tthis.camera = camera;\n    \tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n    \tthis.matrix = camera.matrixWorld;\n    \tthis.matrixAutoUpdate = false;\n\n    \tthis.pointMap = pointMap;\n\n    \tthis.update();\n\n    }\n\n    CameraHelper.prototype = Object.create( LineSegments.prototype );\n    CameraHelper.prototype.constructor = CameraHelper;\n\n    CameraHelper.prototype.update = function () {\n\n    \tvar geometry, pointMap;\n\n    \tvar vector = new Vector3();\n    \tvar camera = new Camera();\n\n    \tfunction setPoint( point, x, y, z ) {\n\n    \t\tvector.set( x, y, z ).unproject( camera );\n\n    \t\tvar points = pointMap[ point ];\n\n    \t\tif ( points !== undefined ) {\n\n    \t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n    \t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\n    \t\t\t}\n\n    \t\t}\n\n    \t}\n\n    \treturn function update() {\n\n    \t\tgeometry = this.geometry;\n    \t\tpointMap = this.pointMap;\n\n    \t\tvar w = 1, h = 1;\n\n    \t\t// we need just camera projection matrix\n    \t\t// world matrix must be identity\n\n    \t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n    \t\t// center / target\n\n    \t\tsetPoint( \"c\", 0, 0, - 1 );\n    \t\tsetPoint( \"t\", 0, 0,  1 );\n\n    \t\t// near\n\n    \t\tsetPoint( \"n1\", - w, - h, - 1 );\n    \t\tsetPoint( \"n2\",   w, - h, - 1 );\n    \t\tsetPoint( \"n3\", - w,   h, - 1 );\n    \t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n    \t\t// far\n\n    \t\tsetPoint( \"f1\", - w, - h, 1 );\n    \t\tsetPoint( \"f2\",   w, - h, 1 );\n    \t\tsetPoint( \"f3\", - w,   h, 1 );\n    \t\tsetPoint( \"f4\",   w,   h, 1 );\n\n    \t\t// up\n\n    \t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n    \t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n    \t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n    \t\t// cross\n\n    \t\tsetPoint( \"cf1\", - w,   0, 1 );\n    \t\tsetPoint( \"cf2\",   w,   0, 1 );\n    \t\tsetPoint( \"cf3\",   0, - h, 1 );\n    \t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n    \t\tsetPoint( \"cn1\", - w,   0, - 1 );\n    \t\tsetPoint( \"cn2\",   w,   0, - 1 );\n    \t\tsetPoint( \"cn3\",   0, - h, - 1 );\n    \t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n    \t\tgeometry.verticesNeedUpdate = true;\n\n    \t};\n\n    }();\n\n    /**\n     * @author WestLangley / http://github.com/WestLangley\n     */\n\n    // a helper to show the world-axis-aligned bounding box for an object\n\n    function BoundingBoxHelper( object, hex ) {\n\n    \tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\n    \tthis.object = object;\n\n    \tthis.box = new Box3();\n\n    \tMesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );\n\n    }\n\n    BoundingBoxHelper.prototype = Object.create( Mesh.prototype );\n    BoundingBoxHelper.prototype.constructor = BoundingBoxHelper;\n\n    BoundingBoxHelper.prototype.update = function () {\n\n    \tthis.box.setFromObject( this.object );\n\n    \tthis.box.size( this.scale );\n\n    \tthis.box.getCenter( this.position );\n\n    };\n\n    /**\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function BoxHelper( object, color ) {\n\n    \tif ( color === undefined ) color = 0xffff00;\n\n    \tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n    \tvar positions = new Float32Array( 8 * 3 );\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n    \tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n    \tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n    \tif ( object !== undefined ) {\n\n    \t\tthis.update( object );\n\n    \t}\n\n    }\n\n    BoxHelper.prototype = Object.create( LineSegments.prototype );\n    BoxHelper.prototype.constructor = BoxHelper;\n\n    BoxHelper.prototype.update = ( function () {\n\n    \tvar box = new Box3();\n\n    \treturn function update( object ) {\n\n    \t\tif ( (object && object.isBox3) ) {\n\n    \t\t\tbox.copy( object );\n\n    \t\t} else {\n\n    \t\t\tbox.setFromObject( object );\n\n    \t\t}\n\n    \t\tif ( box.isEmpty() ) return;\n\n    \t\tvar min = box.min;\n    \t\tvar max = box.max;\n\n    \t\t/*\n    \t\t  5____4\n    \t\t1/___0/|\n    \t\t| 6__|_7\n    \t\t2/___3/\n\n    \t\t0: max.x, max.y, max.z\n    \t\t1: min.x, max.y, max.z\n    \t\t2: min.x, min.y, max.z\n    \t\t3: max.x, min.y, max.z\n    \t\t4: max.x, max.y, min.z\n    \t\t5: min.x, max.y, min.z\n    \t\t6: min.x, min.y, min.z\n    \t\t7: max.x, min.y, min.z\n    \t\t*/\n\n    \t\tvar position = this.geometry.attributes.position;\n    \t\tvar array = position.array;\n\n    \t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n    \t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n    \t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n    \t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n    \t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n    \t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n    \t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n    \t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n    \t\tposition.needsUpdate = true;\n\n    \t\tthis.geometry.computeBoundingSphere();\n\n    \t};\n\n    } )();\n\n    var lineGeometry = new BufferGeometry();\n    lineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n    var coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n    coneGeometry.translate( 0, - 0.5, 0 );\n\n    function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n    \t// dir is assumed to be normalized\n\n    \tObject3D.call( this );\n\n    \tif ( color === undefined ) color = 0xffff00;\n    \tif ( length === undefined ) length = 1;\n    \tif ( headLength === undefined ) headLength = 0.2 * length;\n    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n    \tthis.position.copy( origin );\n\n    \tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n    \tthis.line.matrixAutoUpdate = false;\n    \tthis.add( this.line );\n\n    \tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n    \tthis.cone.matrixAutoUpdate = false;\n    \tthis.add( this.cone );\n\n    \tthis.setDirection( dir );\n    \tthis.setLength( length, headLength, headWidth );\n\n    }\n\n    ArrowHelper.prototype = Object.create( Object3D.prototype );\n    ArrowHelper.prototype.constructor = ArrowHelper;\n\n    ArrowHelper.prototype.setDirection = ( function () {\n\n    \tvar axis = new Vector3();\n    \tvar radians;\n\n    \treturn function setDirection( dir ) {\n\n    \t\t// dir is assumed to be normalized\n\n    \t\tif ( dir.y > 0.99999 ) {\n\n    \t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n    \t\t} else if ( dir.y < - 0.99999 ) {\n\n    \t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n    \t\t} else {\n\n    \t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n    \t\t\tradians = Math.acos( dir.y );\n\n    \t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n    \t\t}\n\n    \t};\n\n    }() );\n\n    ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n    \tif ( headLength === undefined ) headLength = 0.2 * length;\n    \tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n    \tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n    \tthis.line.updateMatrix();\n\n    \tthis.cone.scale.set( headWidth, headLength, headWidth );\n    \tthis.cone.position.y = length;\n    \tthis.cone.updateMatrix();\n\n    };\n\n    ArrowHelper.prototype.setColor = function ( color ) {\n\n    \tthis.line.material.color.copy( color );\n    \tthis.cone.material.color.copy( color );\n\n    };\n\n    /**\n     * @author sroucheray / http://sroucheray.org/\n     * @author mrdoob / http://mrdoob.com/\n     */\n\n    function AxisHelper( size ) {\n\n    \tsize = size || 1;\n\n    \tvar vertices = new Float32Array( [\n    \t\t0, 0, 0,  size, 0, 0,\n    \t\t0, 0, 0,  0, size, 0,\n    \t\t0, 0, 0,  0, 0, size\n    \t] );\n\n    \tvar colors = new Float32Array( [\n    \t\t1, 0, 0,  1, 0.6, 0,\n    \t\t0, 1, 0,  0.6, 1, 0,\n    \t\t0, 0, 1,  0, 0.6, 1\n    \t] );\n\n    \tvar geometry = new BufferGeometry();\n    \tgeometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    \tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n    \tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n    \tLineSegments.call( this, geometry, material );\n\n    }\n\n    AxisHelper.prototype = Object.create( LineSegments.prototype );\n    AxisHelper.prototype.constructor = AxisHelper;\n\n    /**\n     * @author zz85 https://github.com/zz85\n     *\n     * Centripetal CatmullRom Curve - which is useful for avoiding\n     * cusps and self-intersections in non-uniform catmull rom curves.\n     * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n     *\n     * curve.type accepts centripetal(default), chordal and catmullrom\n     * curve.tension is used for catmullrom which defaults to 0.5\n     */\n\n    exports.CatmullRomCurve3 = ( function() {\n\n    \tvar\n    \t\ttmp = new Vector3(),\n    \t\tpx = new CubicPoly(),\n    \t\tpy = new CubicPoly(),\n    \t\tpz = new CubicPoly();\n\n    \t/*\n    \tBased on an optimized c++ solution in\n    \t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n    \t - http://ideone.com/NoEbVM\n\n    \tThis CubicPoly class could be used for reusing some variables and calculations,\n    \tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n    \twhich can be placed in CurveUtils.\n    \t*/\n\n    \tfunction CubicPoly() {\n\n    \t}\n\n    \t/*\n    \t * Compute coefficients for a cubic polynomial\n    \t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n    \t * such that\n    \t *   p(0) = x0, p(1) = x1\n    \t *  and\n    \t *   p'(0) = t0, p'(1) = t1.\n    \t */\n    \tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\n    \t\tthis.c0 = x0;\n    \t\tthis.c1 = t0;\n    \t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n    \t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n    \t};\n\n    \tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n    \t\t// compute tangents when parameterized in [t1,t2]\n    \t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n    \t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n    \t\t// rescale tangents for parametrization in [0,1]\n    \t\tt1 *= dt1;\n    \t\tt2 *= dt1;\n\n    \t\t// initCubicPoly\n    \t\tthis.init( x1, x2, t1, t2 );\n\n    \t};\n\n    \t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n    \tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\n    \t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n    \t};\n\n    \tCubicPoly.prototype.calc = function( t ) {\n\n    \t\tvar t2 = t * t;\n    \t\tvar t3 = t2 * t;\n    \t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\n    \t};\n\n    \t// Subclass Three.js curve\n    \treturn Curve.create(\n\n    \t\tfunction ( p /* array of Vector3 */ ) {\n\n    \t\t\tthis.points = p || [];\n    \t\t\tthis.closed = false;\n\n    \t\t},\n\n    \t\tfunction ( t ) {\n\n    \t\t\tvar points = this.points,\n    \t\t\t\tpoint, intPoint, weight, l;\n\n    \t\t\tl = points.length;\n\n    \t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\n    \t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n    \t\t\tintPoint = Math.floor( point );\n    \t\t\tweight = point - intPoint;\n\n    \t\t\tif ( this.closed ) {\n\n    \t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n    \t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n    \t\t\t\tintPoint = l - 2;\n    \t\t\t\tweight = 1;\n\n    \t\t\t}\n\n    \t\t\tvar p0, p1, p2, p3; // 4 points\n\n    \t\t\tif ( this.closed || intPoint > 0 ) {\n\n    \t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// extrapolate first point\n    \t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n    \t\t\t\tp0 = tmp;\n\n    \t\t\t}\n\n    \t\t\tp1 = points[ intPoint % l ];\n    \t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n    \t\t\tif ( this.closed || intPoint + 2 < l ) {\n\n    \t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n    \t\t\t} else {\n\n    \t\t\t\t// extrapolate last point\n    \t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n    \t\t\t\tp3 = tmp;\n\n    \t\t\t}\n\n    \t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\n    \t\t\t\t// init Centripetal / Chordal Catmull-Rom\n    \t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n    \t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n    \t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n    \t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n    \t\t\t\t// safety check for repeated points\n    \t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n    \t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n    \t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n    \t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n    \t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n    \t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n    \t\t\t} else if ( this.type === 'catmullrom' ) {\n\n    \t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n    \t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n    \t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n    \t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\n    \t\t\t}\n\n    \t\t\tvar v = new Vector3(\n    \t\t\t\tpx.calc( weight ),\n    \t\t\t\tpy.calc( weight ),\n    \t\t\t\tpz.calc( weight )\n    \t\t\t);\n\n    \t\t\treturn v;\n\n    \t\t}\n\n    \t);\n\n    } )();\n\n    /**************************************************************\n     *\tClosed Spline 3D curve\n     **************************************************************/\n\n\n    function ClosedSplineCurve3( points ) {\n\n    \tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\n    \texports.CatmullRomCurve3.call( this, points );\n    \tthis.type = 'catmullrom';\n    \tthis.closed = true;\n\n    }\n\n    ClosedSplineCurve3.prototype = Object.create( exports.CatmullRomCurve3.prototype );\n\n    /**************************************************************\n     *\tSpline 3D curve\n     **************************************************************/\n\n\n    var SplineCurve3 = Curve.create(\n\n    \tfunction ( points /* array of Vector3 */ ) {\n\n    \t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n    \t\tthis.points = ( points === undefined ) ? [] : points;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar points = this.points;\n    \t\tvar point = ( points.length - 1 ) * t;\n\n    \t\tvar intPoint = Math.floor( point );\n    \t\tvar weight = point - intPoint;\n\n    \t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n    \t\tvar point1 = points[ intPoint ];\n    \t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n    \t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n    \t\tvar interpolate = exports.CurveUtils.interpolate;\n\n    \t\treturn new Vector3(\n    \t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n    \t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n    \t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tCubic Bezier 3D curve\n     **************************************************************/\n\n    exports.CubicBezierCurve3 = Curve.create(\n\n    \tfunction ( v0, v1, v2, v3 ) {\n\n    \t\tthis.v0 = v0;\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n    \t\tthis.v3 = v3;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar b3 = exports.ShapeUtils.b3;\n\n    \t\treturn new Vector3(\n    \t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n    \t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n    \t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tQuadratic Bezier 3D curve\n     **************************************************************/\n\n    exports.QuadraticBezierCurve3 = Curve.create(\n\n    \tfunction ( v0, v1, v2 ) {\n\n    \t\tthis.v0 = v0;\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tvar b2 = exports.ShapeUtils.b2;\t\t\n\n    \t\treturn new Vector3(\n    \t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n    \t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n    \t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n    \t\t);\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tLine3D\n     **************************************************************/\n\n    exports.LineCurve3 = Curve.create(\n\n    \tfunction ( v1, v2 ) {\n\n    \t\tthis.v1 = v1;\n    \t\tthis.v2 = v2;\n\n    \t},\n\n    \tfunction ( t ) {\n\n    \t\tif ( t === 1 ) {\n\n    \t\t\treturn this.v2.clone();\n\n    \t\t}\n\n    \t\tvar vector = new Vector3();\n\n    \t\tvector.subVectors( this.v2, this.v1 ); // diff\n    \t\tvector.multiplyScalar( t );\n    \t\tvector.add( this.v1 );\n\n    \t\treturn vector;\n\n    \t}\n\n    );\n\n    /**************************************************************\n     *\tArc curve\n     **************************************************************/\n\n    function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    \tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n    }\n\n    ArcCurve.prototype = Object.create( EllipseCurve.prototype );\n    ArcCurve.prototype.constructor = ArcCurve;\n\n    /**\n     * @author alteredq / http://alteredqualia.com/\n     */\n\n    exports.SceneUtils = {\n\n    \tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n    \t\tvar group = new Group();\n\n    \t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n    \t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\n    \t\t}\n\n    \t\treturn group;\n\n    \t},\n\n    \tdetach: function ( child, parent, scene ) {\n\n    \t\tchild.applyMatrix( parent.matrixWorld );\n    \t\tparent.remove( child );\n    \t\tscene.add( child );\n\n    \t},\n\n    \tattach: function ( child, scene, parent ) {\n\n    \t\tvar matrixWorldInverse = new Matrix4();\n    \t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n    \t\tchild.applyMatrix( matrixWorldInverse );\n\n    \t\tscene.remove( child );\n    \t\tparent.add( child );\n\n    \t}\n\n    };\n\n    function Face4 ( a, b, c, d, normal, color, materialIndex ) {\n    \tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n    \treturn new Face3( a, b, c, normal, color, materialIndex );\n    }\n\n    var LineStrip = 0;\n\n    var LinePieces = 1;\n\n    function PointCloud ( geometry, material ) {\n    \tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n    \treturn new Points( geometry, material );\n    }\n\n    function ParticleSystem ( geometry, material ) {\n    \tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n    \treturn new Points( geometry, material );\n    }\n\n    function PointCloudMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function ParticleBasicMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function ParticleSystemMaterial ( parameters ) {\n    \tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n    \treturn new PointsMaterial( parameters );\n    }\n\n    function Vertex ( x, y, z ) {\n    \tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n    \treturn new Vector3( x, y, z );\n    }\n\n    //\n\n    function EdgesHelper( object, hex ) {\n    \tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n    \treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n    }\n\n    function WireframeHelper( object, hex ) {\n    \tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n    \treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n    }\n\n    //\n\n    Object.assign( Box2.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t},\n    \tempty: function () {\n    \t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n    \t\treturn this.isEmpty();\n    \t},\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tsize: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n    \t\treturn this.getSize( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Box3.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t},\n    \tempty: function () {\n    \t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n    \t\treturn this.isEmpty();\n    \t},\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tisIntersectionSphere: function ( sphere ) {\n    \t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n    \t\treturn this.intersectsSphere( sphere );\n    \t},\n    \tsize: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n    \t\treturn this.getSize( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Line3.prototype, {\n    \tcenter: function ( optionalTarget ) {\n    \t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n    \t\treturn this.getCenter( optionalTarget );\n    \t}\n    } );\n\n    Object.assign( Matrix3.prototype, {\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n    \t\treturn vector.applyMatrix3( this );\n    \t},\n    \tmultiplyVector3Array: function ( a ) {\n    \t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n    \t\treturn this.applyToVector3Array( a );\n    \t}\n    } );\n\n    Object.assign( Matrix4.prototype, {\n    \textractPosition: function ( m ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n    \t\treturn this.copyPosition( m );\n    \t},\n    \tsetRotationFromQuaternion: function ( q ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n    \t\treturn this.makeRotationFromQuaternion( q );\n    \t},\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n    \t\treturn vector.applyProjection( this );\n    \t},\n    \tmultiplyVector4: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n    \t\treturn vector.applyMatrix4( this );\n    \t},\n    \tmultiplyVector3Array: function ( a ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n    \t\treturn this.applyToVector3Array( a );\n    \t},\n    \trotateAxis: function ( v ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n    \t\tv.transformDirection( this );\n    \t},\n    \tcrossVector: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n    \t\treturn vector.applyMatrix4( this );\n    \t},\n    \ttranslate: function ( v ) {\n    \t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n    \t},\n    \trotateX: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n    \t},\n    \trotateY: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n    \t},\n    \trotateZ: function ( angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n    \t},\n    \trotateByAxis: function ( axis, angle ) {\n    \t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n    \t}\n    } );\n\n    Object.assign( Plane.prototype, {\n    \tisIntersectionLine: function ( line ) {\n    \t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n    \t\treturn this.intersectsLine( line );\n    \t}\n    } );\n\n    Object.assign( Quaternion.prototype, {\n    \tmultiplyVector3: function ( vector ) {\n    \t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n    \t\treturn vector.applyQuaternion( this );\n    \t}\n    } );\n\n    Object.assign( Ray.prototype, {\n    \tisIntersectionBox: function ( box ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n    \t\treturn this.intersectsBox( box );\n    \t},\n    \tisIntersectionPlane: function ( plane ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n    \t\treturn this.intersectsPlane( plane );\n    \t},\n    \tisIntersectionSphere: function ( sphere ) {\n    \t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n    \t\treturn this.intersectsSphere( sphere );\n    \t}\n    } );\n\n    Object.assign( Shape.prototype, {\n    \textrude: function ( options ) {\n    \t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n    \t\treturn new ExtrudeGeometry( this, options );\n    \t},\n    \tmakeGeometry: function ( options ) {\n    \t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n    \t\treturn new ShapeGeometry( this, options );\n    \t}\n    } );\n\n    Object.assign( Vector3.prototype, {\n    \tsetEulerFromRotationMatrix: function () {\n    \t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n    \t},\n    \tsetEulerFromQuaternion: function () {\n    \t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n    \t},\n    \tgetPositionFromMatrix: function ( m ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n    \t\treturn this.setFromMatrixPosition( m );\n    \t},\n    \tgetScaleFromMatrix: function ( m ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n    \t\treturn this.setFromMatrixScale( m );\n    \t},\n    \tgetColumnFromMatrix: function ( index, matrix ) {\n    \t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n    \t\treturn this.setFromMatrixColumn( matrix, index );\n    \t}\n    } );\n\n    //\n\n    Object.assign( Object3D.prototype, {\n    \tgetChildByName: function ( name ) {\n    \t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n    \t\treturn this.getObjectByName( name );\n    \t},\n    \trenderDepth: function ( value ) {\n    \t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n    \t},\n    \ttranslate: function ( distance, axis ) {\n    \t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n    \t\treturn this.translateOnAxis( axis, distance );\n    \t}\n    } );\n\n    Object.defineProperties( Object3D.prototype, {\n    \teulerOrder: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n    \t\t\treturn this.rotation.order;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n    \t\t\tthis.rotation.order = value;\n    \t\t}\n    \t},\n    \tuseQuaternion: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( LOD.prototype, {\n    \tobjects: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n    \t\t\treturn this.levels;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n    \tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n    \t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n    \tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n    \tthis.setFocalLength( focalLength );\n\n    };\n\n    //\n\n    Object.defineProperties( Light.prototype, {\n    \tonlyShadow: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n    \t\t}\n    \t},\n    \tshadowCameraFov: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n    \t\t\tthis.shadow.camera.fov = value;\n    \t\t}\n    \t},\n    \tshadowCameraLeft: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n    \t\t\tthis.shadow.camera.left = value;\n    \t\t}\n    \t},\n    \tshadowCameraRight: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n    \t\t\tthis.shadow.camera.right = value;\n    \t\t}\n    \t},\n    \tshadowCameraTop: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n    \t\t\tthis.shadow.camera.top = value;\n    \t\t}\n    \t},\n    \tshadowCameraBottom: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n    \t\t\tthis.shadow.camera.bottom = value;\n    \t\t}\n    \t},\n    \tshadowCameraNear: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n    \t\t\tthis.shadow.camera.near = value;\n    \t\t}\n    \t},\n    \tshadowCameraFar: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n    \t\t\tthis.shadow.camera.far = value;\n    \t\t}\n    \t},\n    \tshadowCameraVisible: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n    \t\t}\n    \t},\n    \tshadowBias: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n    \t\t\tthis.shadow.bias = value;\n    \t\t}\n    \t},\n    \tshadowDarkness: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n    \t\t}\n    \t},\n    \tshadowMapWidth: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n    \t\t\tthis.shadow.mapSize.width = value;\n    \t\t}\n    \t},\n    \tshadowMapHeight: {\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n    \t\t\tthis.shadow.mapSize.height = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( BufferAttribute.prototype, {\n    \tlength: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n    \t\t\treturn this.array.length;\n    \t\t}\n    \t}\n    } );\n\n    Object.assign( BufferGeometry.prototype, {\n    \taddIndex: function ( index ) {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n    \t\tthis.setIndex( index );\n    \t},\n    \taddDrawCall: function ( start, count, indexOffset ) {\n    \t\tif ( indexOffset !== undefined ) {\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n    \t\t}\n    \t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n    \t\tthis.addGroup( start, count );\n    \t},\n    \tclearDrawCalls: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n    \t\tthis.clearGroups();\n    \t},\n    \tcomputeTangents: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n    \t},\n    \tcomputeOffsets: function () {\n    \t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n    \t}\n    } );\n\n    Object.defineProperties( BufferGeometry.prototype, {\n    \tdrawcalls: {\n    \t\tget: function () {\n    \t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n    \t\t\treturn this.groups;\n    \t\t}\n    \t},\n    \toffsets: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n    \t\t\treturn this.groups;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( Material.prototype, {\n    \twrapAround: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n    \t\t}\n    \t},\n    \twrapRGB: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n    \t\t\treturn new Color();\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( MeshPhongMaterial.prototype, {\n    \tmetal: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n    \t\t\treturn false;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( ShaderMaterial.prototype, {\n    \tderivatives: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n    \t\t\treturn this.extensions.derivatives;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n    \t\t\tthis.extensions.derivatives = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    EventDispatcher.prototype = Object.assign( Object.create( {\n\n    \t// Note: Extra base ensures these properties are not 'assign'ed.\n\n    \tconstructor: EventDispatcher,\n\n    \tapply: function ( target ) {\n\n    \t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n    \t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\n    \t\tObject.assign( target, this );\n\n    \t}\n\n    } ), EventDispatcher.prototype );\n\n    //\n\n    Object.assign( WebGLRenderer.prototype, {\n    \tsupportsFloatTextures: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n    \t\treturn this.extensions.get( 'OES_texture_float' );\n    \t},\n    \tsupportsHalfFloatTextures: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n    \t\treturn this.extensions.get( 'OES_texture_half_float' );\n    \t},\n    \tsupportsStandardDerivatives: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n    \t\treturn this.extensions.get( 'OES_standard_derivatives' );\n    \t},\n    \tsupportsCompressedTextureS3TC: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n    \t},\n    \tsupportsCompressedTexturePVRTC: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n    \t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n    \t},\n    \tsupportsBlendMinMax: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n    \t\treturn this.extensions.get( 'EXT_blend_minmax' );\n    \t},\n    \tsupportsVertexTextures: function () {\n    \t\treturn this.capabilities.vertexTextures;\n    \t},\n    \tsupportsInstancedArrays: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n    \t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n    \t},\n    \tenableScissorTest: function ( boolean ) {\n    \t\t// console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n    \t\tthis.setScissorTest( boolean );\n    \t},\n    \tinitMaterial: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n    \t},\n    \taddPrePlugin: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n    \t},\n    \taddPostPlugin: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n    \t},\n    \tupdateShadowMap: function () {\n    \t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n    \t}\n    } );\n\n    Object.defineProperties( WebGLRenderer.prototype, {\n    \tshadowMapEnabled: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.enabled;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n    \t\t\tthis.shadowMap.enabled = value;\n    \t\t}\n    \t},\n    \tshadowMapType: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.type;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n    \t\t\tthis.shadowMap.type = value;\n    \t\t}\n    \t},\n    \tshadowMapCullFace: {\n    \t\tget: function () {\n    \t\t\treturn this.shadowMap.cullFace;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n    \t\t\tthis.shadowMap.cullFace = value;\n    \t\t}\n    \t}\n    } );\n\n    Object.defineProperties( WebGLShadowMap.prototype, {\n    \tcullFace: {\n    \t\tget: function () {\n    \t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n    \t\t},\n    \t\tset: function ( cullFace ) {\n    \t\t\tvar value = ( cullFace !== CullFaceBack );\n    \t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n    \t\t\tthis.renderReverseSided = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.defineProperties( WebGLRenderTarget.prototype, {\n    \twrapS: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n    \t\t\treturn this.texture.wrapS;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n    \t\t\tthis.texture.wrapS = value;\n    \t\t}\n    \t},\n    \twrapT: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n    \t\t\treturn this.texture.wrapT;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n    \t\t\tthis.texture.wrapT = value;\n    \t\t}\n    \t},\n    \tmagFilter: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n    \t\t\treturn this.texture.magFilter;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n    \t\t\tthis.texture.magFilter = value;\n    \t\t}\n    \t},\n    \tminFilter: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n    \t\t\treturn this.texture.minFilter;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n    \t\t\tthis.texture.minFilter = value;\n    \t\t}\n    \t},\n    \tanisotropy: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n    \t\t\treturn this.texture.anisotropy;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n    \t\t\tthis.texture.anisotropy = value;\n    \t\t}\n    \t},\n    \toffset: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n    \t\t\treturn this.texture.offset;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n    \t\t\tthis.texture.offset = value;\n    \t\t}\n    \t},\n    \trepeat: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n    \t\t\treturn this.texture.repeat;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n    \t\t\tthis.texture.repeat = value;\n    \t\t}\n    \t},\n    \tformat: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n    \t\t\treturn this.texture.format;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n    \t\t\tthis.texture.format = value;\n    \t\t}\n    \t},\n    \ttype: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n    \t\t\treturn this.texture.type;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n    \t\t\tthis.texture.type = value;\n    \t\t}\n    \t},\n    \tgenerateMipmaps: {\n    \t\tget: function () {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n    \t\t\treturn this.texture.generateMipmaps;\n    \t\t},\n    \t\tset: function ( value ) {\n    \t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n    \t\t\tthis.texture.generateMipmaps = value;\n    \t\t}\n    \t}\n    } );\n\n    //\n\n    Object.assign( Audio.prototype, {\n    \tload: function ( file ) {\n    \t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n    \t\tvar scope = this;\n    \t\tvar audioLoader = new AudioLoader();\n    \t\taudioLoader.load( file, function ( buffer ) {\n    \t\t\tscope.setBuffer( buffer );\n    \t\t} );\n    \t\treturn this;\n    \t}\n    } );\n\n    Object.assign( AudioAnalyser.prototype, {\n    \tgetData: function ( file ) {\n    \t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n    \t\treturn this.getFrequencyData();\n    \t}\n    } );\n\n    //\n\n    var GeometryUtils = {\n\n    \tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n    \t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\n    \t\tvar matrix;\n\n    \t\tif ( geometry2.isMesh ) {\n\n    \t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n    \t\t\tmatrix = geometry2.matrix;\n    \t\t\tgeometry2 = geometry2.geometry;\n\n    \t\t}\n\n    \t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n    \t},\n\n    \tcenter: function ( geometry ) {\n\n    \t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n    \t\treturn geometry.center();\n\n    \t}\n\n    };\n\n    var ImageUtils = {\n\n    \tcrossOrigin: undefined,\n\n    \tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n    \t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n    \t\tvar loader = new TextureLoader();\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n    \t\tif ( mapping ) texture.mapping = mapping;\n\n    \t\treturn texture;\n\n    \t},\n\n    \tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n    \t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n    \t\tvar loader = new CubeTextureLoader();\n    \t\tloader.setCrossOrigin( this.crossOrigin );\n\n    \t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n    \t\tif ( mapping ) texture.mapping = mapping;\n\n    \t\treturn texture;\n\n    \t},\n\n    \tloadCompressedTexture: function () {\n\n    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n    \t},\n\n    \tloadCompressedTextureCube: function () {\n\n    \t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n    \t}\n\n    };\n\n    //\n\n    function Projector () {\n\n    \tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n    \tthis.projectVector = function ( vector, camera ) {\n\n    \t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n    \t\tvector.project( camera );\n\n    \t};\n\n    \tthis.unprojectVector = function ( vector, camera ) {\n\n    \t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n    \t\tvector.unproject( camera );\n\n    \t};\n\n    \tthis.pickingRay = function ( vector, camera ) {\n\n    \t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n    \t};\n\n    }\n\n    //\n\n    function CanvasRenderer () {\n\n    \tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n    \tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n    \tthis.clear = function () {};\n    \tthis.render = function () {};\n    \tthis.setClearColor = function () {};\n    \tthis.setSize = function () {};\n\n    }\n\n    Object.defineProperty( exports, 'AudioContext', {\n    \tget: function () {\n    \t\treturn exports.getAudioContext();\n    \t}\n    });\n\n    exports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n    exports.WebGLRenderTarget = WebGLRenderTarget;\n    exports.WebGLRenderer = WebGLRenderer;\n    exports.ShaderLib = ShaderLib;\n    exports.UniformsLib = UniformsLib;\n    exports.ShaderChunk = ShaderChunk;\n    exports.FogExp2 = FogExp2;\n    exports.Fog = Fog;\n    exports.Scene = Scene;\n    exports.LensFlare = LensFlare;\n    exports.Sprite = Sprite;\n    exports.LOD = LOD;\n    exports.SkinnedMesh = SkinnedMesh;\n    exports.Skeleton = Skeleton;\n    exports.Bone = Bone;\n    exports.Mesh = Mesh;\n    exports.LineSegments = LineSegments;\n    exports.Line = Line;\n    exports.Points = Points;\n    exports.Group = Group;\n    exports.VideoTexture = VideoTexture;\n    exports.DataTexture = DataTexture;\n    exports.CompressedTexture = CompressedTexture;\n    exports.CubeTexture = CubeTexture;\n    exports.CanvasTexture = CanvasTexture;\n    exports.DepthTexture = DepthTexture;\n    exports.TextureIdCount = TextureIdCount;\n    exports.Texture = Texture;\n    exports.MaterialIdCount = MaterialIdCount;\n    exports.CompressedTextureLoader = CompressedTextureLoader;\n    exports.BinaryTextureLoader = BinaryTextureLoader;\n    exports.DataTextureLoader = DataTextureLoader;\n    exports.CubeTextureLoader = CubeTextureLoader;\n    exports.TextureLoader = TextureLoader;\n    exports.ObjectLoader = ObjectLoader;\n    exports.MaterialLoader = MaterialLoader;\n    exports.BufferGeometryLoader = BufferGeometryLoader;\n    exports.LoadingManager = LoadingManager;\n    exports.JSONLoader = JSONLoader;\n    exports.ImageLoader = ImageLoader;\n    exports.FontLoader = FontLoader;\n    exports.XHRLoader = XHRLoader;\n    exports.Loader = Loader;\n    exports.AudioLoader = AudioLoader;\n    exports.SpotLightShadow = SpotLightShadow;\n    exports.SpotLight = SpotLight;\n    exports.PointLight = PointLight;\n    exports.HemisphereLight = HemisphereLight;\n    exports.DirectionalLightShadow = DirectionalLightShadow;\n    exports.DirectionalLight = DirectionalLight;\n    exports.AmbientLight = AmbientLight;\n    exports.LightShadow = LightShadow;\n    exports.Light = Light;\n    exports.StereoCamera = StereoCamera;\n    exports.PerspectiveCamera = PerspectiveCamera;\n    exports.OrthographicCamera = OrthographicCamera;\n    exports.CubeCamera = CubeCamera;\n    exports.Camera = Camera;\n    exports.AudioListener = AudioListener;\n    exports.PositionalAudio = PositionalAudio;\n    exports.getAudioContext = getAudioContext;\n    exports.AudioAnalyser = AudioAnalyser;\n    exports.Audio = Audio;\n    exports.VectorKeyframeTrack = VectorKeyframeTrack;\n    exports.StringKeyframeTrack = StringKeyframeTrack;\n    exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n    exports.NumberKeyframeTrack = NumberKeyframeTrack;\n    exports.ColorKeyframeTrack = ColorKeyframeTrack;\n    exports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n    exports.PropertyMixer = PropertyMixer;\n    exports.PropertyBinding = PropertyBinding;\n    exports.KeyframeTrack = KeyframeTrack;\n    exports.AnimationObjectGroup = AnimationObjectGroup;\n    exports.AnimationMixer = AnimationMixer;\n    exports.AnimationClip = AnimationClip;\n    exports.Uniform = Uniform;\n    exports.InstancedBufferGeometry = InstancedBufferGeometry;\n    exports.BufferGeometry = BufferGeometry;\n    exports.GeometryIdCount = GeometryIdCount;\n    exports.Geometry = Geometry;\n    exports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n    exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n    exports.InterleavedBuffer = InterleavedBuffer;\n    exports.InstancedBufferAttribute = InstancedBufferAttribute;\n    exports.DynamicBufferAttribute = DynamicBufferAttribute;\n    exports.Float64Attribute = Float64Attribute;\n    exports.Float32Attribute = Float32Attribute;\n    exports.Uint32Attribute = Uint32Attribute;\n    exports.Int32Attribute = Int32Attribute;\n    exports.Uint16Attribute = Uint16Attribute;\n    exports.Int16Attribute = Int16Attribute;\n    exports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n    exports.Uint8Attribute = Uint8Attribute;\n    exports.Int8Attribute = Int8Attribute;\n    exports.BufferAttribute = BufferAttribute;\n    exports.Face3 = Face3;\n    exports.Object3DIdCount = Object3DIdCount;\n    exports.Object3D = Object3D;\n    exports.Raycaster = Raycaster;\n    exports.Layers = Layers;\n    exports.EventDispatcher = EventDispatcher;\n    exports.Clock = Clock;\n    exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n    exports.LinearInterpolant = LinearInterpolant;\n    exports.DiscreteInterpolant = DiscreteInterpolant;\n    exports.CubicInterpolant = CubicInterpolant;\n    exports.Interpolant = Interpolant;\n    exports.Triangle = Triangle;\n    exports.Spline = Spline;\n    exports.Spherical = Spherical;\n    exports.Plane = Plane;\n    exports.Frustum = Frustum;\n    exports.Sphere = Sphere;\n    exports.Ray = Ray;\n    exports.Matrix4 = Matrix4;\n    exports.Matrix3 = Matrix3;\n    exports.Box3 = Box3;\n    exports.Box2 = Box2;\n    exports.Line3 = Line3;\n    exports.Euler = Euler;\n    exports.Vector4 = Vector4;\n    exports.Vector3 = Vector3;\n    exports.Vector2 = Vector2;\n    exports.Quaternion = Quaternion;\n    exports.Color = Color;\n    exports.MorphBlendMesh = MorphBlendMesh;\n    exports.ImmediateRenderObject = ImmediateRenderObject;\n    exports.VertexNormalsHelper = VertexNormalsHelper;\n    exports.SpotLightHelper = SpotLightHelper;\n    exports.SkeletonHelper = SkeletonHelper;\n    exports.PointLightHelper = PointLightHelper;\n    exports.HemisphereLightHelper = HemisphereLightHelper;\n    exports.GridHelper = GridHelper;\n    exports.FaceNormalsHelper = FaceNormalsHelper;\n    exports.DirectionalLightHelper = DirectionalLightHelper;\n    exports.CameraHelper = CameraHelper;\n    exports.BoundingBoxHelper = BoundingBoxHelper;\n    exports.BoxHelper = BoxHelper;\n    exports.ArrowHelper = ArrowHelper;\n    exports.AxisHelper = AxisHelper;\n    exports.ClosedSplineCurve3 = ClosedSplineCurve3;\n    exports.SplineCurve3 = SplineCurve3;\n    exports.ArcCurve = ArcCurve;\n    exports.EllipseCurve = EllipseCurve;\n    exports.SplineCurve = SplineCurve;\n    exports.CubicBezierCurve = CubicBezierCurve;\n    exports.QuadraticBezierCurve = QuadraticBezierCurve;\n    exports.LineCurve = LineCurve;\n    exports.Shape = Shape;\n    exports.ShapePath = ShapePath;\n    exports.Path = Path;\n    exports.Font = Font;\n    exports.CurvePath = CurvePath;\n    exports.Curve = Curve;\n    exports.WireframeGeometry = WireframeGeometry;\n    exports.ParametricGeometry = ParametricGeometry;\n    exports.TetrahedronGeometry = TetrahedronGeometry;\n    exports.OctahedronGeometry = OctahedronGeometry;\n    exports.IcosahedronGeometry = IcosahedronGeometry;\n    exports.DodecahedronGeometry = DodecahedronGeometry;\n    exports.PolyhedronGeometry = PolyhedronGeometry;\n    exports.TubeGeometry = TubeGeometry;\n    exports.TorusKnotGeometry = TorusKnotGeometry;\n    exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n    exports.TorusGeometry = TorusGeometry;\n    exports.TorusBufferGeometry = TorusBufferGeometry;\n    exports.TextGeometry = TextGeometry;\n    exports.SphereBufferGeometry = SphereBufferGeometry;\n    exports.SphereGeometry = SphereGeometry;\n    exports.RingGeometry = RingGeometry;\n    exports.RingBufferGeometry = RingBufferGeometry;\n    exports.PlaneBufferGeometry = PlaneBufferGeometry;\n    exports.PlaneGeometry = PlaneGeometry;\n    exports.LatheGeometry = LatheGeometry;\n    exports.LatheBufferGeometry = LatheBufferGeometry;\n    exports.ShapeGeometry = ShapeGeometry;\n    exports.ExtrudeGeometry = ExtrudeGeometry;\n    exports.EdgesGeometry = EdgesGeometry;\n    exports.ConeGeometry = ConeGeometry;\n    exports.ConeBufferGeometry = ConeBufferGeometry;\n    exports.CylinderGeometry = CylinderGeometry;\n    exports.CylinderBufferGeometry = CylinderBufferGeometry;\n    exports.CircleBufferGeometry = CircleBufferGeometry;\n    exports.CircleGeometry = CircleGeometry;\n    exports.BoxBufferGeometry = BoxBufferGeometry;\n    exports.BoxGeometry = BoxGeometry;\n    exports.ShadowMaterial = ShadowMaterial;\n    exports.SpriteMaterial = SpriteMaterial;\n    exports.RawShaderMaterial = RawShaderMaterial;\n    exports.ShaderMaterial = ShaderMaterial;\n    exports.PointsMaterial = PointsMaterial;\n    exports.MultiMaterial = MultiMaterial;\n    exports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n    exports.MeshStandardMaterial = MeshStandardMaterial;\n    exports.MeshPhongMaterial = MeshPhongMaterial;\n    exports.MeshNormalMaterial = MeshNormalMaterial;\n    exports.MeshLambertMaterial = MeshLambertMaterial;\n    exports.MeshDepthMaterial = MeshDepthMaterial;\n    exports.MeshBasicMaterial = MeshBasicMaterial;\n    exports.LineDashedMaterial = LineDashedMaterial;\n    exports.LineBasicMaterial = LineBasicMaterial;\n    exports.Material = Material;\n    exports.REVISION = REVISION;\n    exports.MOUSE = MOUSE;\n    exports.CullFaceNone = CullFaceNone;\n    exports.CullFaceBack = CullFaceBack;\n    exports.CullFaceFront = CullFaceFront;\n    exports.CullFaceFrontBack = CullFaceFrontBack;\n    exports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n    exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n    exports.BasicShadowMap = BasicShadowMap;\n    exports.PCFShadowMap = PCFShadowMap;\n    exports.PCFSoftShadowMap = PCFSoftShadowMap;\n    exports.FrontSide = FrontSide;\n    exports.BackSide = BackSide;\n    exports.DoubleSide = DoubleSide;\n    exports.FlatShading = FlatShading;\n    exports.SmoothShading = SmoothShading;\n    exports.NoColors = NoColors;\n    exports.FaceColors = FaceColors;\n    exports.VertexColors = VertexColors;\n    exports.NoBlending = NoBlending;\n    exports.NormalBlending = NormalBlending;\n    exports.AdditiveBlending = AdditiveBlending;\n    exports.SubtractiveBlending = SubtractiveBlending;\n    exports.MultiplyBlending = MultiplyBlending;\n    exports.CustomBlending = CustomBlending;\n    exports.BlendingMode = BlendingMode;\n    exports.AddEquation = AddEquation;\n    exports.SubtractEquation = SubtractEquation;\n    exports.ReverseSubtractEquation = ReverseSubtractEquation;\n    exports.MinEquation = MinEquation;\n    exports.MaxEquation = MaxEquation;\n    exports.ZeroFactor = ZeroFactor;\n    exports.OneFactor = OneFactor;\n    exports.SrcColorFactor = SrcColorFactor;\n    exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n    exports.SrcAlphaFactor = SrcAlphaFactor;\n    exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n    exports.DstAlphaFactor = DstAlphaFactor;\n    exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n    exports.DstColorFactor = DstColorFactor;\n    exports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n    exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n    exports.NeverDepth = NeverDepth;\n    exports.AlwaysDepth = AlwaysDepth;\n    exports.LessDepth = LessDepth;\n    exports.LessEqualDepth = LessEqualDepth;\n    exports.EqualDepth = EqualDepth;\n    exports.GreaterEqualDepth = GreaterEqualDepth;\n    exports.GreaterDepth = GreaterDepth;\n    exports.NotEqualDepth = NotEqualDepth;\n    exports.MultiplyOperation = MultiplyOperation;\n    exports.MixOperation = MixOperation;\n    exports.AddOperation = AddOperation;\n    exports.NoToneMapping = NoToneMapping;\n    exports.LinearToneMapping = LinearToneMapping;\n    exports.ReinhardToneMapping = ReinhardToneMapping;\n    exports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n    exports.CineonToneMapping = CineonToneMapping;\n    exports.UVMapping = UVMapping;\n    exports.CubeReflectionMapping = CubeReflectionMapping;\n    exports.CubeRefractionMapping = CubeRefractionMapping;\n    exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n    exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n    exports.SphericalReflectionMapping = SphericalReflectionMapping;\n    exports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n    exports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n    exports.TextureMapping = TextureMapping;\n    exports.RepeatWrapping = RepeatWrapping;\n    exports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n    exports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n    exports.TextureWrapping = TextureWrapping;\n    exports.NearestFilter = NearestFilter;\n    exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n    exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n    exports.LinearFilter = LinearFilter;\n    exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n    exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n    exports.TextureFilter = TextureFilter;\n    exports.UnsignedByteType = UnsignedByteType;\n    exports.ByteType = ByteType;\n    exports.ShortType = ShortType;\n    exports.UnsignedShortType = UnsignedShortType;\n    exports.IntType = IntType;\n    exports.UnsignedIntType = UnsignedIntType;\n    exports.FloatType = FloatType;\n    exports.HalfFloatType = HalfFloatType;\n    exports.UnsignedShort4444Type = UnsignedShort4444Type;\n    exports.UnsignedShort5551Type = UnsignedShort5551Type;\n    exports.UnsignedShort565Type = UnsignedShort565Type;\n    exports.UnsignedInt248Type = UnsignedInt248Type;\n    exports.AlphaFormat = AlphaFormat;\n    exports.RGBFormat = RGBFormat;\n    exports.RGBAFormat = RGBAFormat;\n    exports.LuminanceFormat = LuminanceFormat;\n    exports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n    exports.RGBEFormat = RGBEFormat;\n    exports.DepthFormat = DepthFormat;\n    exports.DepthStencilFormat = DepthStencilFormat;\n    exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n    exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n    exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n    exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n    exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n    exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n    exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n    exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n    exports.RGB_ETC1_Format = RGB_ETC1_Format;\n    exports.LoopOnce = LoopOnce;\n    exports.LoopRepeat = LoopRepeat;\n    exports.LoopPingPong = LoopPingPong;\n    exports.InterpolateDiscrete = InterpolateDiscrete;\n    exports.InterpolateLinear = InterpolateLinear;\n    exports.InterpolateSmooth = InterpolateSmooth;\n    exports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n    exports.ZeroSlopeEnding = ZeroSlopeEnding;\n    exports.WrapAroundEnding = WrapAroundEnding;\n    exports.TrianglesDrawMode = TrianglesDrawMode;\n    exports.TriangleStripDrawMode = TriangleStripDrawMode;\n    exports.TriangleFanDrawMode = TriangleFanDrawMode;\n    exports.LinearEncoding = LinearEncoding;\n    exports.sRGBEncoding = sRGBEncoding;\n    exports.GammaEncoding = GammaEncoding;\n    exports.RGBEEncoding = RGBEEncoding;\n    exports.LogLuvEncoding = LogLuvEncoding;\n    exports.RGBM7Encoding = RGBM7Encoding;\n    exports.RGBM16Encoding = RGBM16Encoding;\n    exports.RGBDEncoding = RGBDEncoding;\n    exports.BasicDepthPacking = BasicDepthPacking;\n    exports.RGBADepthPacking = RGBADepthPacking;\n    exports.CubeGeometry = BoxGeometry;\n    exports.Face4 = Face4;\n    exports.LineStrip = LineStrip;\n    exports.LinePieces = LinePieces;\n    exports.MeshFaceMaterial = MultiMaterial;\n    exports.PointCloud = PointCloud;\n    exports.Particle = Sprite;\n    exports.ParticleSystem = ParticleSystem;\n    exports.PointCloudMaterial = PointCloudMaterial;\n    exports.ParticleBasicMaterial = ParticleBasicMaterial;\n    exports.ParticleSystemMaterial = ParticleSystemMaterial;\n    exports.Vertex = Vertex;\n    exports.EdgesHelper = EdgesHelper;\n    exports.WireframeHelper = WireframeHelper;\n    exports.GeometryUtils = GeometryUtils;\n    exports.ImageUtils = ImageUtils;\n    exports.Projector = Projector;\n    exports.CanvasRenderer = CanvasRenderer;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/build/three.js\n ** module id = 33\n ** module chunks = 0\n **/","module.exports = new RegExp(\n\t'^' +\n\n\t// protocol identifier\n\t'(?:(?:(?:https?):)?//)' +\n\n\t// user:pass authentication\n\t'(?:\\\\S+(?::\\\\S*)?@)?' +\n\t'(?:' +\n\n\t// IP address exclusion\n\t// private & local networks\n\t'(' +\n\t'(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})' +\n\t'(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})' +\n\t'(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})' +\n\n\t// IP address dotted notation octets\n\t// excludes loopback network 0.0.0.0\n\t// excludes reserved space >= 224.0.0.0\n\t// excludes network & broacast addresses\n\t// (first & last IP address of each class)\n\t'(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])' +\n\t'(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}' +\n\t'(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))' +\n\t'|' +\n\n\t// host name\n\t'(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)' +\n\n\t// domain name\n\t'(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*' +\n\n\t// TLD identifier\n\t'(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))?' +\n\t')' +\n\n\t')' +\n\n\t// port number\n\t'(?::(\\\\d{2,5}))?' +\n\n\t// resource path\n\t'(?:/\\\\S*)?' +\n\t'$', 'i'\n);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils/urlregex.js\n ** module id = 34\n ** module chunks = 0\n **/","/**\n * lodash 3.0.3 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar arrayEach = require('lodash._arrayeach'),\n    baseEach = require('lodash._baseeach'),\n    bindCallback = require('lodash._bindcallback'),\n    isArray = require('lodash.isarray');\n\n/**\n * Creates a function for `_.forEach` or `_.forEachRight`.\n *\n * @private\n * @param {Function} arrayFunc The function to iterate over an array.\n * @param {Function} eachFunc The function to iterate over a collection.\n * @returns {Function} Returns the new each function.\n */\nfunction createForEach(arrayFunc, eachFunc) {\n  return function(collection, iteratee, thisArg) {\n    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))\n      ? arrayFunc(collection, iteratee)\n      : eachFunc(collection, bindCallback(iteratee, thisArg, 3));\n  };\n}\n\n/**\n * Iterates over elements of `collection` invoking `iteratee` for each element.\n * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n * (value, index|key, collection). Iteratee functions may exit iteration early\n * by explicitly returning `false`.\n *\n * **Note:** As with other \"Collections\" methods, objects with a \"length\" property\n * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\n * may be used for object iteration.\n *\n * @static\n * @memberOf _\n * @alias each\n * @category Collection\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {Array|Object|string} Returns `collection`.\n * @example\n *\n * _([1, 2]).forEach(function(n) {\n *   console.log(n);\n * }).value();\n * // => logs each value from left to right and returns the array\n *\n * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {\n *   console.log(n, key);\n * });\n * // => logs each value-key pair and returns the object (iteration order is not guaranteed)\n */\nvar forEach = createForEach(arrayEach, baseEach);\n\nmodule.exports = forEach;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/index.js\n ** module id = 35\n ** module chunks = 0\n **/","/**\n * lodash 3.2.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar baseAssign = require('lodash._baseassign'),\n    createAssigner = require('lodash._createassigner'),\n    keys = require('lodash.keys');\n\n/**\n * A specialized version of `_.assign` for customizing assigned values without\n * support for argument juggling, multiple sources, and `this` binding `customizer`\n * functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {Function} customizer The function to customize assigned values.\n * @returns {Object} Returns `object`.\n */\nfunction assignWith(object, source, customizer) {\n  var index = -1,\n      props = keys(source),\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index],\n        value = object[key],\n        result = customizer(value, source[key], key, object, source);\n\n    if ((result === result ? (result !== value) : (value === value)) ||\n        (value === undefined && !(key in object))) {\n      object[key] = result;\n    }\n  }\n  return object;\n}\n\n/**\n * Assigns own enumerable properties of source object(s) to the destination\n * object. Subsequent sources overwrite property assignments of previous sources.\n * If `customizer` is provided it is invoked to produce the assigned values.\n * The `customizer` is bound to `thisArg` and invoked with five arguments:\n * (objectValue, sourceValue, key, object, source).\n *\n * **Note:** This method mutates `object` and is based on\n * [`Object.assign`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign).\n *\n * @static\n * @memberOf _\n * @alias extend\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {*} [thisArg] The `this` binding of `customizer`.\n * @returns {Object} Returns `object`.\n * @example\n *\n * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });\n * // => { 'user': 'fred', 'age': 40 }\n *\n * // using a customizer callback\n * var defaults = _.partialRight(_.assign, function(value, other) {\n *   return _.isUndefined(value) ? other : value;\n * });\n *\n * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n * // => { 'user': 'barney', 'age': 36 }\n */\nvar assign = createAssigner(function(object, source, customizer) {\n  return customizer\n    ? assignWith(object, source, customizer)\n    : baseAssign(object, source);\n});\n\nmodule.exports = assign;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/index.js\n ** module id = 36\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Audio = function ( listener ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Audio';\n\tthis.started = false;\n\n\tif (listener.context) {\n\n\t\tthis.context = listener.context;\n\t\t// this.source = this.context.createBufferSource();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.input );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.connect( this.gain );\n\n\t} else {\n\n\t\tthis.source = new Audio();\n\n\t}\n};\n\nTHREE.Audio.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Audio.prototype.load = function ( sources ) {\n\t//todo: support multiple sources for different audio formats\n\n\tvar scope = this;\n\tvar file;\n\tvar i;\n\tvar match;\n\tvar element = this.source instanceof window.HTMLAudioElement ? this.source : new Audio();\n\n\tif (typeof sources === 'string') {\n\t\tsources = [sources];\n\t}\n\n\tfor (i = 0; i < sources.length; i++) {\n\t\tfile = sources[i];\n\t\tmatch = /\\.([a-z0-9]+)$/i.exec(file);\n\t\tif (match && element.canPlayType('audio/' + match[1])) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (this.context) {\n\t\tvar request = new XMLHttpRequest();\n\t\trequest.open( 'GET', file, true );\n\t\trequest.responseType = 'arraybuffer';\n\t\trequest.onload = function ( e ) {\n\t\t\tconsole.log('audio buffer loaded. decoding...', e );\n\t\t\tscope.context.decodeAudioData( this.response, function ( buffer ) {\n\n\t\t\t\tscope.buffer = buffer;\n\t\t\t\tif (scope.started) {\n\t\t\t\t\tscope.start();\n\t\t\t\t}\n\n\t\t\t}, function onFailure(e) {\n\t\t\t\tconsole.log('Decoding the audio buffer failed', e);\n\t\t\t} );\n\n\t\t};\n\n\t\trequest.onerror = function ( e ) {\n\t\t\tconsole.log('error', e);\n\t\t};\n\n\t\trequest.send();\n\n\t} else {\n\n\t\tthis.source.src = file;\n\t\tthis.source.play();\n\n\t}\n\n\treturn this;\n};\n\nTHREE.Audio.prototype.stop = function ( value ) {\n\n\tif (this.context) {\n\t\tthis.source.stop();\n\t\tthis.source.disconnect( this.panner );\n\t\tthis.source = null;\n\t} else {\n\t\tthis.source.pause();\n\t\tthis.source.currentTime = 0;\n\t}\n\tthis.started = false;\n};\n\nTHREE.Audio.prototype.start = function ( value ) {\n\n\tthis.started = true;\n\tif (this.context) {\n\t\tif (this.source) {\n\t\t\tthis.source.disconnect( this.panner );\n\t\t}\n\n\t\tif (this.buffer) {\n\t\t\tthis.source = this.context.createBufferSource();\n\t\t\tthis.source.buffer = this.buffer;\n\t\t\tthis.source.connect( this.panner );\n\t\t\tthis.source.start( 0 );\n\t\t}\n\t} else {\n\t\tthis.source.currentTime = 0;\n\t\tthis.source.play();\n\t}\n\n};\n\nTHREE.Audio.prototype.setLoop = function ( value ) {\n\n\tthis.source.loop = value;\n\n};\n\nTHREE.Audio.prototype.setRefDistance = function ( value ) {\n\n\tif ( this.panner ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t}\n\n};\n\nTHREE.Audio.prototype.setRolloffFactor = function ( value ) {\n\n\tif ( this.panner ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t}\n\n};\n\nTHREE.Audio.prototype.volume = function ( volume, time ) {\n\n\tif ( this.gain ) {\n\n\t\tif ( volume !== undefined ) {\n\t\t\tthis.gain.gain.linearRampToValueAtTime( volume, this.context.currentTime + (time || 0));\n\t\t}\n\n\t\treturn this.gain.gain.value;\n\t}\n\n\tif ( volume !== undefined ) {\n\t\tthis.source.volume = volume;\n\t}\n\n\treturn this.source.volume;\n};\n\nTHREE.Audio.prototype.updateMatrixWorld = ( function () {\n\n\tvar position = new THREE.Vector3();\n\n\treturn function ( force ) {\n\n\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif (this.panner) {\n\n\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t}\n\n\t};\n\n} )();\n\n// File:src/extras/audio/AudioListener.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AudioListener = function () {\n\tvar AudioContext = window.AudioContext || window.webkitAudioContext;\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'AudioListener';\n\n\tif (AudioContext) {\n\t\tthis.context = new AudioContext();\n\t\tthis.input = this.context.createGain();\n\n\t\tthis.input.connect( this.context.destination );\n\t}\n};\n\nTHREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.AudioListener.prototype.volume = function (val) {\n\tif (this.input) {\n\t\tval = val !== undefined && parseFloat(val);\n\t\tif (!isNaN(val)) {\n\t\t\tthis.input.gain.value = val;\n\t\t}\n\n\t\treturn this.input.gain.value;\n\t}\n};\n\nTHREE.AudioListener.prototype.updateMatrixWorld = ( function () {\n\n\tvar position = new THREE.Vector3();\n\tvar quaternion = new THREE.Quaternion();\n\tvar scale = new THREE.Vector3();\n\n\tvar orientation = new THREE.Vector3();\n\n\treturn function ( force ) {\n\n\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tvar listener;\n\n\t\tif (this.context) {\n\t\t\tlistener = this.context.listener;\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\torientation.set( 0, 0, -1 ).applyQuaternion( quaternion );\n\n            // Error Fixed\n            try {\n\t\t\t    listener.setPosition( position.x, position.y, position.z );\n\t\t\t    listener.setOrientation( orientation.x, orientation.y, orientation.z, this.up.x, this.up.y, this.up.z );\n            } catch (e) {}\n\n\t\t}\n\t};\n\n} ());\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./src/lib/ThreeAudio.js\n ** module id = 37\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\nvar THREE = require(\"three\");\n\n/**\n * @author zz85 / https://github.com/zz85\n *\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\n *\n * First implemented by Simon Wallner\n * http://www.simonwallner.at/projects/atmospheric-scattering\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n*/\n\nTHREE.ShaderLib[ 'sky' ] = {\n\n\tuniforms: {\n\n\t\tluminance: { value: 1 },\n\t\tturbidity: { value: 2 },\n\t\treileigh: { value: 1 },\n\t\tmieCoefficient: { value: 0.005 },\n\t\tmieDirectionalG: { value: 0.8 },\n\t\tsunPosition: { value: new THREE.Vector3() }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec3 vWorldPosition;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n\t\t\t\"vWorldPosition = worldPosition.xyz;\",\n\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\",\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform sampler2D skySampler;\",\n\t\t\"uniform vec3 sunPosition;\",\n\t\t\"varying vec3 vWorldPosition;\",\n\n\t\t\"vec3 cameraPos = vec3(0., 0., 0.);\",\n\t\t\"// uniform sampler2D sDiffuse;\",\n\t\t\"// const float turbidity = 10.0; //\",\n\t\t\"// const float reileigh = 2.; //\",\n\t\t\"// const float luminance = 1.0; //\",\n\t\t\"// const float mieCoefficient = 0.005;\",\n\t\t\"// const float mieDirectionalG = 0.8;\",\n\n\t\t\"uniform float luminance;\",\n\t\t\"uniform float turbidity;\",\n\t\t\"uniform float reileigh;\",\n\t\t\"uniform float mieCoefficient;\",\n\t\t\"uniform float mieDirectionalG;\",\n\n\t\t\"// constants for atmospheric scattering\",\n\t\t\"const float e = 2.71828182845904523536028747135266249775724709369995957;\",\n\t\t\"const float pi = 3.141592653589793238462643383279502884197169;\",\n\n\t\t\"const float n = 1.0003; // refractive index of air\",\n\t\t\"const float N = 2.545E25; // number of molecules per unit volume for air at\",\n\t\t\t\t\t\t\t\t\"// 288.15K and 1013mb (sea level -45 celsius)\",\n\t\t\"const float pn = 0.035;\t// depolatization factor for standard air\",\n\n\t\t\"// wavelength of used primaries, according to preetham\",\n\t\t\"const vec3 lambda = vec3(680E-9, 550E-9, 450E-9);\",\n\n\t\t\"// mie stuff\",\n\t\t\"// K coefficient for the primaries\",\n\t\t\"const vec3 K = vec3(0.686, 0.678, 0.666);\",\n\t\t\"const float v = 4.0;\",\n\n\t\t\"// optical length at zenith for molecules\",\n\t\t\"const float rayleighZenithLength = 8.4E3;\",\n\t\t\"const float mieZenithLength = 1.25E3;\",\n\t\t\"const vec3 up = vec3(0.0, 1.0, 0.0);\",\n\n\t\t\"const float EE = 1000.0;\",\n\t\t\"const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\",\n\t\t\"// 66 arc seconds -> degrees, and the cosine of that\",\n\n\t\t\"// earth shadow hack\",\n\t\t\"const float cutoffAngle = pi/1.95;\",\n\t\t\"const float steepness = 1.5;\",\n\n\n\t\t\"vec3 totalRayleigh(vec3 lambda)\",\n\t\t\"{\",\n\t\t\t\"return (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));\",\n\t\t\"}\",\n\n\t\t// see http://blenderartists.org/forum/showthread.php?321110-Shaders-and-Skybox-madness\n\t\t\"// A simplied version of the total Reayleigh scattering to works on browsers that use ANGLE\",\n\t\t\"vec3 simplifiedRayleigh()\",\n\t\t\"{\",\n\t\t\t\"return 0.0005 / vec3(94, 40, 18);\",\n\t\t\t// return 0.00054532832366 / (3.0 * 2.545E25 * pow(vec3(680E-9, 550E-9, 450E-9), vec3(4.0)) * 6.245);\n\t\t\"}\",\n\n\t\t\"float rayleighPhase(float cosTheta)\",\n\t\t\"{\t \",\n\t\t\t\"return (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\"//\treturn (1.0 / (3.0*pi)) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\"//\treturn (3.0 / 4.0) * (1.0 + pow(cosTheta, 2.0));\",\n\t\t\"}\",\n\n\t\t\"vec3 totalMie(vec3 lambda, vec3 K, float T)\",\n\t\t\"{\",\n\t\t\t\"float c = (0.2 * T ) * 10E-18;\",\n\t\t\t\"return 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;\",\n\t\t\"}\",\n\n\t\t\"float hgPhase(float cosTheta, float g)\",\n\t\t\"{\",\n\t\t\t\"return (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));\",\n\t\t\"}\",\n\n\t\t\"float sunIntensity(float zenithAngleCos)\",\n\t\t\"{\",\n\t\t// This function originally used `exp(n)`, but it returns an incorrect value\n\t\t// on Samsung S6 phones. So it has been replaced with the equivalent `pow(e, n)`.\n\t\t// See https://github.com/mrdoob/three.js/issues/8382\n\t\t\t\"return EE * max(0.0, 1.0 - pow(e, -((cutoffAngle - acos(zenithAngleCos))/steepness)));\",\n\t\t\"}\",\n\n\t\t\"// float logLuminance(vec3 c)\",\n\t\t\"// {\",\n\t\t\"// \treturn log(c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722);\",\n\t\t\"// }\",\n\n\t\t\"// Filmic ToneMapping http://filmicgames.com/archives/75\",\n\t\t\"float A = 0.15;\",\n\t\t\"float B = 0.50;\",\n\t\t\"float C = 0.10;\",\n\t\t\"float D = 0.20;\",\n\t\t\"float E = 0.02;\",\n\t\t\"float F = 0.30;\",\n\t\t\"float W = 1000.0;\",\n\n\t\t\"vec3 Uncharted2Tonemap(vec3 x)\",\n\t\t\"{\",\n\t\t   \"return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\",\n\t\t\"}\",\n\n\n\t\t\"void main() \",\n\t\t\"{\",\n\t\t\t\"float sunfade = 1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);\",\n\n\t\t\t\"// luminance =  1.0 ;// vWorldPosition.y / 450000. + 0.5; //sunPosition.y / 450000. * 1. + 0.5;\",\n\n\t\t\t \"// gl_FragColor = vec4(sunfade, sunfade, sunfade, 1.0);\",\n\n\t\t\t\"float reileighCoefficient = reileigh - (1.0* (1.0-sunfade));\",\n\n\t\t\t\"vec3 sunDirection = normalize(sunPosition);\",\n\n\t\t\t\"float sunE = sunIntensity(dot(sunDirection, up));\",\n\n\t\t\t\"// extinction (absorbtion + out scattering) \",\n\t\t\t\"// rayleigh coefficients\",\n\n\t\t\t// \"vec3 betaR = totalRayleigh(lambda) * reileighCoefficient;\",\n\t\t\t\"vec3 betaR = simplifiedRayleigh() * reileighCoefficient;\",\n\n\t\t\t\"// mie coefficients\",\n\t\t\t\"vec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;\",\n\n\t\t\t\"// optical length\",\n\t\t\t\"// cutoff angle at 90 to avoid singularity in next formula.\",\n\t\t\t\"float zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPos))));\",\n\t\t\t\"float sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\",\n\t\t\t\"float sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\",\n\n\n\n\t\t\t\"// combined extinction factor\t\",\n\t\t\t\"vec3 Fex = exp(-(betaR * sR + betaM * sM));\",\n\n\t\t\t\"// in scattering\",\n\t\t\t\"float cosTheta = dot(normalize(vWorldPosition - cameraPos), sunDirection);\",\n\n\t\t\t\"float rPhase = rayleighPhase(cosTheta*0.5+0.5);\",\n\t\t\t\"vec3 betaRTheta = betaR * rPhase;\",\n\n\t\t\t\"float mPhase = hgPhase(cosTheta, mieDirectionalG);\",\n\t\t\t\"vec3 betaMTheta = betaM * mPhase;\",\n\n\n\t\t\t\"vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));\",\n\t\t\t\"Lin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up, sunDirection),5.0),0.0,1.0));\",\n\n\t\t\t\"//nightsky\",\n\t\t\t\"vec3 direction = normalize(vWorldPosition - cameraPos);\",\n\t\t\t\"float theta = acos(direction.y); // elevation --> y-axis, [-pi/2, pi/2]\",\n\t\t\t\"float phi = atan(direction.z, direction.x); // azimuth --> x-axis [-pi/2, pi/2]\",\n\t\t\t\"vec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);\",\n\t\t\t\"// vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;\",\n\t\t\t\"vec3 L0 = vec3(0.1) * Fex;\",\n\n\t\t\t\"// composition + solar disc\",\n\t\t\t\"//if (cosTheta > sunAngularDiameterCos)\",\n\t\t\t\"float sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);\",\n\t\t\t\"// if (normalize(vWorldPosition - cameraPos).y>0.0)\",\n\t\t\t\"L0 += (sunE * 19000.0 * Fex)*sundisk;\",\n\n\n\t\t\t\"vec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));\",\n\n\t\t\t\"vec3 texColor = (Lin+L0);   \",\n\t\t\t\"texColor *= 0.04 ;\",\n\t\t\t\"texColor += vec3(0.0,0.001,0.0025)*0.3;\",\n\n\t\t\t\"float g_fMaxLuminance = 1.0;\",\n\t\t\t\"float fLumScaled = 0.1 / luminance;     \",\n\t\t\t\"float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (g_fMaxLuminance * g_fMaxLuminance)))) / (1.0 + fLumScaled); \",\n\n\t\t\t\"float ExposureBias = fLumCompressed;\",\n\n\t\t\t\"vec3 curr = Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);\",\n\t\t\t\"vec3 color = curr*whiteScale;\",\n\n\t\t\t\"vec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));\",\n\n\n\t\t\t\"gl_FragColor.rgb = retColor;\",\n\n\t\t\t\"gl_FragColor.a = 1.0;\",\n\t\t\"}\",\n\n\t].join( \"\\n\" )\n\n};\n\nTHREE.Sky = function () {\n\n\tvar skyShader = THREE.ShaderLib[ \"sky\" ];\n\tvar skyUniforms = THREE.UniformsUtils.clone( skyShader.uniforms );\n\n\tvar skyMat = new THREE.ShaderMaterial( {\n\t\tfragmentShader: skyShader.fragmentShader,\n\t\tvertexShader: skyShader.vertexShader,\n\t\tuniforms: skyUniforms,\n\t\tside: THREE.BackSide\n\t} );\n\n\tvar skyGeo = new THREE.SphereBufferGeometry( 450000, 32, 15 );\n\tvar skyMesh = new THREE.Mesh( skyGeo, skyMat );\n\n\n\t// Expose variables\n\tthis.mesh = skyMesh;\n\tthis.uniforms = skyUniforms;\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?THREE=three!./bower_components/SkyShader/index.js\n ** module id = 38\n ** module chunks = 0\n **/","'use strict';\n\nvar assign        = require('es5-ext/object/assign')\n  , normalizeOpts = require('es5-ext/object/normalize-options')\n  , isCallable    = require('es5-ext/object/is-callable')\n  , contains      = require('es5-ext/string/#/contains')\n\n  , d;\n\nd = module.exports = function (dscr, value/*, options*/) {\n\tvar c, e, w, options, desc;\n\tif ((arguments.length < 2) || (typeof dscr !== 'string')) {\n\t\toptions = value;\n\t\tvalue = dscr;\n\t\tdscr = null;\n\t} else {\n\t\toptions = arguments[2];\n\t}\n\tif (dscr == null) {\n\t\tc = w = true;\n\t\te = false;\n\t} else {\n\t\tc = contains.call(dscr, 'c');\n\t\te = contains.call(dscr, 'e');\n\t\tw = contains.call(dscr, 'w');\n\t}\n\n\tdesc = { value: value, configurable: c, enumerable: e, writable: w };\n\treturn !options ? desc : assign(normalizeOpts(options), desc);\n};\n\nd.gs = function (dscr, get, set/*, options*/) {\n\tvar c, e, options, desc;\n\tif (typeof dscr !== 'string') {\n\t\toptions = set;\n\t\tset = get;\n\t\tget = dscr;\n\t\tdscr = null;\n\t} else {\n\t\toptions = arguments[3];\n\t}\n\tif (get == null) {\n\t\tget = undefined;\n\t} else if (!isCallable(get)) {\n\t\toptions = get;\n\t\tget = set = undefined;\n\t} else if (set == null) {\n\t\tset = undefined;\n\t} else if (!isCallable(set)) {\n\t\toptions = set;\n\t\tset = undefined;\n\t}\n\tif (dscr == null) {\n\t\tc = true;\n\t\te = false;\n\t} else {\n\t\tc = contains.call(dscr, 'c');\n\t\te = contains.call(dscr, 'e');\n\t}\n\n\tdesc = { get: get, set: set, configurable: c, enumerable: e };\n\treturn !options ? desc : assign(normalizeOpts(options), desc);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/d/index.js\n ** module id = 39\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = function (fn) {\n\tif (typeof fn !== 'function') throw new TypeError(fn + \" is not a function\");\n\treturn fn;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/valid-callable.js\n ** module id = 40\n ** module chunks = 0\n **/","/**\n * lodash 3.2.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar baseCopy = require('lodash._basecopy'),\n    keys = require('lodash.keys');\n\n/**\n * The base implementation of `_.assign` without support for argument juggling,\n * multiple sources, and `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return source == null\n    ? object\n    : baseCopy(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._baseassign/index.js\n ** module id = 41\n ** module chunks = 0\n **/","/**\n * lodash 3.1.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar bindCallback = require('lodash._bindcallback'),\n    isIterateeCall = require('lodash._isiterateecall'),\n    restParam = require('lodash.restparam');\n\n/**\n * Creates a function that assigns properties of source object(s) to a given\n * destination object.\n *\n * **Note:** This function is used to create `_.assign`, `_.defaults`, and `_.merge`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return restParam(function(object, sources) {\n    var index = -1,\n        length = object == null ? 0 : sources.length,\n        customizer = length > 2 ? sources[length - 2] : undefined,\n        guard = length > 2 ? sources[2] : undefined,\n        thisArg = length > 1 ? sources[length - 1] : undefined;\n\n    if (typeof customizer == 'function') {\n      customizer = bindCallback(customizer, thisArg, 5);\n      length -= 2;\n    } else {\n      customizer = typeof thisArg == 'function' ? thisArg : undefined;\n      length -= (customizer ? 1 : 0);\n    }\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._createassigner/index.js\n ** module id = 42\n ** module chunks = 0\n **/","/**\n * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar keys = require('lodash.keys');\n\n/**\n * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * The base implementation of `_.forEach` without support for callback\n * shorthands and `this` binding.\n *\n * @private\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object|string} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `baseForIn` and `baseForOwn` which iterates\n * over `object` properties returned by `keysFunc` invoking `iteratee` for\n * each property. Iteratee functions may exit iteration early by explicitly\n * returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for callback\n * shorthands and `this` binding.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    var length = collection ? getLength(collection) : 0;\n    if (!isLength(length)) {\n      return eachFunc(collection, iteratee);\n    }\n    var index = fromRight ? length : -1,\n        iterable = toObject(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for `_.forIn` or `_.forInRight`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var iterable = toObject(object),\n        props = keysFunc(object),\n        length = props.length,\n        index = fromRight ? length : -1;\n\n    while ((fromRight ? index-- : ++index < length)) {\n      var key = props[index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * Gets the \"length\" property value of `object`.\n *\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n * that affects Safari on at least iOS 8.1-8.3 ARM64.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {*} Returns the \"length\" value.\n */\nvar getLength = baseProperty('length');\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Converts `value` to an object if it's not one.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {Object} Returns the object.\n */\nfunction toObject(value) {\n  return isObject(value) ? value : Object(value);\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = baseEach;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash._baseeach/index.js\n ** module id = 44\n ** module chunks = 0\n **/","/**\n * lodash 3.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * A specialized version of `_.forEach` for arrays without support for callback\n * shorthands or `this` binding.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash._arrayeach/index.js\n ** module id = 45\n ** module chunks = 0\n **/","/**\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * A specialized version of `baseCallback` which only supports `this` binding\n * and specifying the number of arguments to provide to `func`.\n *\n * @private\n * @param {Function} func The function to bind.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {number} [argCount] The number of arguments to provide to `func`.\n * @returns {Function} Returns the callback.\n */\nfunction bindCallback(func, thisArg, argCount) {\n  if (typeof func != 'function') {\n    return identity;\n  }\n  if (thisArg === undefined) {\n    return func;\n  }\n  switch (argCount) {\n    case 1: return function(value) {\n      return func.call(thisArg, value);\n    };\n    case 3: return function(value, index, collection) {\n      return func.call(thisArg, value, index, collection);\n    };\n    case 4: return function(accumulator, value, index, collection) {\n      return func.call(thisArg, accumulator, value, index, collection);\n    };\n    case 5: return function(value, other, key, object, source) {\n      return func.call(thisArg, value, other, key, object, source);\n    };\n  }\n  return function() {\n    return func.apply(thisArg, arguments);\n  };\n}\n\n/**\n * This method returns the first argument provided to it.\n *\n * @static\n * @memberOf _\n * @category Utility\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'user': 'fred' };\n *\n * _.identity(object) === object;\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = bindCallback;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash._bindcallback/index.js\n ** module id = 46\n ** module chunks = 0\n **/","/**\n * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar arrayTag = '[object Array]',\n    funcTag = '[object Function]';\n\n/** Used to detect host constructors (Safari > 5). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/**\n * Checks if `value` is object-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar fnToString = Function.prototype.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeIsArray = getNative(Array, 'isArray');\n\n/**\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = object == null ? undefined : object[key];\n  return isNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(function() { return arguments; }());\n * // => false\n */\nvar isArray = nativeIsArray || function(value) {\n  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;\n};\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in older versions of Chrome and Safari which return 'function' for regexes\n  // and Safari 8 equivalents which return 'object' for typed array constructors.\n  return isObject(value) && objToString.call(value) == funcTag;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is a native function.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n * @example\n *\n * _.isNative(Array.prototype.push);\n * // => true\n *\n * _.isNative(_);\n * // => false\n */\nfunction isNative(value) {\n  if (value == null) {\n    return false;\n  }\n  if (isFunction(value)) {\n    return reIsNative.test(fnToString.call(value));\n  }\n  return isObjectLike(value) && reIsHostCtor.test(value);\n}\n\nmodule.exports = isArray;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash.isarray/index.js\n ** module id = 47\n ** module chunks = 0\n **/","'use strict';\n\nvar forEach = Array.prototype.forEach, create = Object.create;\n\nvar process = function (src, obj) {\n\tvar key;\n\tfor (key in src) obj[key] = src[key];\n};\n\nmodule.exports = function (options/*, …options*/) {\n\tvar result = create(null);\n\tforEach.call(arguments, function (options) {\n\t\tif (options == null) return;\n\t\tprocess(Object(options), result);\n\t});\n\treturn result;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/normalize-options.js\n ** module id = 48\n ** module chunks = 0\n **/","// Deprecated\n\n'use strict';\n\nmodule.exports = function (obj) { return typeof obj === 'function'; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/is-callable.js\n ** module id = 49\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? Object.assign\n\t: require('./shim');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/assign/index.js\n ** module id = 50\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? String.prototype.contains\n\t: require('./shim');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/string/#/contains/index.js\n ** module id = 51\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = function () {\n\tvar assign = Object.assign, obj;\n\tif (typeof assign !== 'function') return false;\n\tobj = { foo: 'raz' };\n\tassign(obj, { bar: 'dwa' }, { trzy: 'trzy' });\n\treturn (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/assign/is-implemented.js\n ** module id = 52\n ** module chunks = 0\n **/","'use strict';\n\nvar keys  = require('../keys')\n  , value = require('../valid-value')\n\n  , max = Math.max;\n\nmodule.exports = function (dest, src/*, …srcn*/) {\n\tvar error, i, l = max(arguments.length, 2), assign;\n\tdest = Object(value(dest));\n\tassign = function (key) {\n\t\ttry { dest[key] = src[key]; } catch (e) {\n\t\t\tif (!error) error = e;\n\t\t}\n\t};\n\tfor (i = 1; i < l; ++i) {\n\t\tsrc = arguments[i];\n\t\tkeys(src).forEach(assign);\n\t}\n\tif (error !== undefined) throw error;\n\treturn dest;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/assign/shim.js\n ** module id = 53\n ** module chunks = 0\n **/","'use strict';\n\nvar str = 'razdwatrzy';\n\nmodule.exports = function () {\n\tif (typeof str.contains !== 'function') return false;\n\treturn ((str.contains('dwa') === true) && (str.contains('foo') === false));\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/string/#/contains/is-implemented.js\n ** module id = 54\n ** module chunks = 0\n **/","'use strict';\n\nvar indexOf = String.prototype.indexOf;\n\nmodule.exports = function (searchString/*, position*/) {\n\treturn indexOf.call(this, searchString, arguments[1]) > -1;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/string/#/contains/shim.js\n ** module id = 55\n ** module chunks = 0\n **/","/**\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property names to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @returns {Object} Returns `object`.\n */\nfunction baseCopy(source, props, object) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n    object[key] = source[key];\n  }\n  return object;\n}\n\nmodule.exports = baseCopy;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._baseassign/~/lodash._basecopy/index.js\n ** module id = 56\n ** module chunks = 0\n **/","/**\n * lodash 3.0.9 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^\\d+$/;\n\n/**\n * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Gets the \"length\" property value of `object`.\n *\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n * that affects Safari on at least iOS 8.1-8.3 ARM64.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {*} Returns the \"length\" value.\n */\nvar getLength = baseProperty('length');\n\n/**\n * Checks if `value` is array-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(getLength(value));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return value > -1 && value % 1 == 0 && value < length;\n}\n\n/**\n * Checks if the provided arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n      ? (isArrayLike(object) && isIndex(index, object.length))\n      : (type == 'string' && index in object)) {\n    var other = object[index];\n    return value === value ? (value === other) : (other !== other);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isIterateeCall;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._createassigner/~/lodash._isiterateecall/index.js\n ** module id = 58\n ** module chunks = 0\n **/","/**\n * lodash 3.6.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that invokes `func` with the `this` binding of the\n * created function and arguments from `start` and beyond provided as an array.\n *\n * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n * @example\n *\n * var say = _.restParam(function(what, names) {\n *   return what + ' ' + _.initial(names).join(', ') +\n *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n * });\n *\n * say('hello', 'fred', 'barney', 'pebbles');\n * // => 'hello fred, barney, & pebbles'\n */\nfunction restParam(func, start) {\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        rest = Array(length);\n\n    while (++index < length) {\n      rest[index] = args[start + index];\n    }\n    switch (start) {\n      case 0: return func.call(this, rest);\n      case 1: return func.call(this, args[0], rest);\n      case 2: return func.call(this, args[0], args[1], rest);\n    }\n    var otherArgs = Array(start + 1);\n    index = -1;\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = rest;\n    return func.apply(this, otherArgs);\n  };\n}\n\nmodule.exports = restParam;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash._createassigner/~/lodash.restparam/index.js\n ** module id = 59\n ** module chunks = 0\n **/","/**\n * lodash 3.9.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]';\n\n/** Used to detect host constructors (Safari > 5). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/**\n * Checks if `value` is object-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar fnToString = Function.prototype.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = object == null ? undefined : object[key];\n  return isNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in older versions of Chrome and Safari which return 'function' for regexes\n  // and Safari 8 equivalents which return 'object' for typed array constructors.\n  return isObject(value) && objToString.call(value) == funcTag;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is a native function.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n * @example\n *\n * _.isNative(Array.prototype.push);\n * // => true\n *\n * _.isNative(_);\n * // => false\n */\nfunction isNative(value) {\n  if (value == null) {\n    return false;\n  }\n  if (isFunction(value)) {\n    return reIsNative.test(fnToString.call(value));\n  }\n  return isObjectLike(value) && reIsHostCtor.test(value);\n}\n\nmodule.exports = getNative;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash.keys/~/lodash._getnative/index.js\n ** module id = 60\n ** module chunks = 0\n **/","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\nmodule.exports = isArguments;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.assign/~/lodash.keys/~/lodash.isarguments/index.js\n ** module id = 61\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = function (value) {\n\tif (value == null) throw new TypeError(\"Cannot use null or undefined\");\n\treturn value;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/valid-value.js\n ** module id = 64\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? Object.keys\n\t: require('./shim');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/keys/index.js\n ** module id = 65\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = function () {\n\ttry {\n\t\tObject.keys('primitive');\n\t\treturn true;\n\t} catch (e) { return false; }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/keys/is-implemented.js\n ** module id = 66\n ** module chunks = 0\n **/","'use strict';\n\nvar keys = Object.keys;\n\nmodule.exports = function (object) {\n\treturn keys(object == null ? object : Object(object));\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/event-emitter/~/es5-ext/object/keys/shim.js\n ** module id = 67\n ** module chunks = 0\n **/","/**\n * lodash 3.1.2 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar getNative = require('lodash._getnative'),\n    isArguments = require('lodash.isarguments'),\n    isArray = require('lodash.isarray');\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^\\d+$/;\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = getNative(Object, 'keys');\n\n/**\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Gets the \"length\" property value of `object`.\n *\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n * that affects Safari on at least iOS 8.1-8.3 ARM64.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {*} Returns the \"length\" value.\n */\nvar getLength = baseProperty('length');\n\n/**\n * Checks if `value` is array-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(getLength(value));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return value > -1 && value % 1 == 0 && value < length;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * A fallback implementation of `Object.keys` which creates an array of the\n * own enumerable property names of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction shimKeys(object) {\n  var props = keysIn(object),\n      propsLength = props.length,\n      length = propsLength && object.length;\n\n  var allowIndexes = !!length && isLength(length) &&\n    (isArray(object) || isArguments(object));\n\n  var index = -1,\n      result = [];\n\n  while (++index < propsLength) {\n    var key = props[index];\n    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nvar keys = !nativeKeys ? shimKeys : function(object) {\n  var Ctor = object == null ? undefined : object.constructor;\n  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||\n      (typeof object != 'function' && isArrayLike(object))) {\n    return shimKeys(object);\n  }\n  return isObject(object) ? nativeKeys(object) : [];\n};\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  if (object == null) {\n    return [];\n  }\n  if (!isObject(object)) {\n    object = Object(object);\n  }\n  var length = object.length;\n  length = (length && isLength(length) &&\n    (isArray(object) || isArguments(object)) && length) || 0;\n\n  var Ctor = object.constructor,\n      index = -1,\n      isProto = typeof Ctor == 'function' && Ctor.prototype === object,\n      result = Array(length),\n      skipIndexes = length > 0;\n\n  while (++index < length) {\n    result[index] = (index + '');\n  }\n  for (var key in object) {\n    if (!(skipIndexes && isIndex(key, length)) &&\n        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = keys;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.foreach/~/lodash._baseeach/~/lodash.keys/index.js\n ** module id = 63\n ** module chunks = 0\n **/"],"sourceRoot":"","file":"vr.js"}